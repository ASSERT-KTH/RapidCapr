{
    "patch": "private void declareArguments(Node functionNode) {\n    Node astParameters = functionNode.getFirstChild().getNext();\n    Node body = astParameters.getNext();\n    FunctionType functionType = (FunctionType) functionNode.getJSType();\n    if (functionType != null) {\n        Node jsDocParameters = functionType.getParametersNode();\n        if (jsDocParameters != null) {\n            Node jsDocParameter = jsDocParameters.getFirstChild();\n            for (Node astParameter : astParameters.children()) {\n                if (jsDocParameter != null) {\n                    defineSlot(astParameter, functionNode,\n                            jsDocParameter.getJSType(), true);\n                    if (astParameter.isName()) {\n                        String paramName = astParameter.getString();\n                        Symbol paramSymbol = symbolTable.getSymbol(paramName);\n                        if (paramSymbol != null) {\n                            if (paramSymbol.isParam()) {\n                                errorReporter.warning(\n                                    DuplicateVariable.BewareDuplicateVariableDefn(paramName),\n                                    astParameter, null, null);\n                            } else {\n                                symbolTable.putOuter(\n                                        new Symbol(paramName, functionNode, null,\n                                                null, null, Symbol.VarKind.LOCAL),\n                                        functionNode);\n                            }\n                        }\n                    }\n                    jsDocParameter = jsDocParameter.getNext();\n                } else {\n                    defineSlot(astParameter, functionNode, null, true);\n                }\n            }\n        }\n    }\n} // end declareArguments\n\nprivate void declareName(String name, Node n, Node functionNode) {\n    Symbol symbol = symbolTable.getSymbol(name);\n    if (symbol == null) {\n        symbolTable.putOuter(\n                new Symbol(name, functionNode, null,\n                        null, null, Symbol.VarKind.LOCAL),\n                functionNode);\n    } else if (symbol.getScopeNode() == functionNode) {\n        errorReporter.warning(\n                DuplicateVariable.BewareDuplicateVariableDefn(name),\n                n, null, null);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 210bb66e..fa3faf27 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1731,26 +1731,56 @@ final class TypedScopeCreator implements ScopeCreator {\n     /**\n      * Declares all of a function's arguments.\n      */\n-    private void declareArguments(Node functionNode) {\n-      Node astParameters = functionNode.getFirstChild().getNext();\n-      Node body = astParameters.getNext();\n-      FunctionType functionType = (FunctionType) functionNode.getJSType();\n-      if (functionType != null) {\n+private void declareArguments(Node functionNode) {\n+    Node astParameters = functionNode.getFirstChild().getNext();\n+    Node body = astParameters.getNext();\n+    FunctionType functionType = (FunctionType) functionNode.getJSType();\n+    if (functionType != null) {\n         Node jsDocParameters = functionType.getParametersNode();\n         if (jsDocParameters != null) {\n-          Node jsDocParameter = jsDocParameters.getFirstChild();\n-          for (Node astParameter : astParameters.children()) {\n-            if (jsDocParameter != null) {\n-              defineSlot(astParameter, functionNode,\n-                  jsDocParameter.getJSType(), true);\n-              jsDocParameter = jsDocParameter.getNext();\n-            } else {\n-              defineSlot(astParameter, functionNode, null, true);\n+            Node jsDocParameter = jsDocParameters.getFirstChild();\n+            for (Node astParameter : astParameters.children()) {\n+                if (jsDocParameter != null) {\n+                    defineSlot(astParameter, functionNode,\n+                            jsDocParameter.getJSType(), true);\n+                    if (astParameter.isName()) {\n+                        String paramName = astParameter.getString();\n+                        Symbol paramSymbol = symbolTable.getSymbol(paramName);\n+                        if (paramSymbol != null) {\n+                            if (paramSymbol.isParam()) {\n+                                errorReporter.warning(\n+                                    DuplicateVariable.BewareDuplicateVariableDefn(paramName),\n+                                    astParameter, null, null);\n+                            } else {\n+                                symbolTable.putOuter(\n+                                        new Symbol(paramName, functionNode, null,\n+                                                null, null, Symbol.VarKind.LOCAL),\n+                                        functionNode);\n+                            }\n+                        }\n+                    }\n+                    jsDocParameter = jsDocParameter.getNext();\n+                } else {\n+                    defineSlot(astParameter, functionNode, null, true);\n+                }\n             }\n-          }\n         }\n-      }\n-    } // end declareArguments\n+    }\n+} // end declareArguments\n+\n+private void declareName(String name, Node n, Node functionNode) {\n+    Symbol symbol = symbolTable.getSymbol(name);\n+    if (symbol == null) {\n+        symbolTable.putOuter(\n+                new Symbol(name, functionNode, null,\n+                        null, null, Symbol.VarKind.LOCAL),\n+                functionNode);\n+    } else if (symbol.getScopeNode() == functionNode) {\n+        errorReporter.warning(\n+                DuplicateVariable.BewareDuplicateVariableDefn(name),\n+                n, null, null);\n+    }\n+}\n   } // end LocalScopeBuilder\n \n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}