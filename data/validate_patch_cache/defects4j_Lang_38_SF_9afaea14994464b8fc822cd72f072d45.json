{
    "patch": "    public StringBuffer format(Calendar calendar, StringBuffer buf) {\n        if (mTimeZoneForced) {\n            calendar = (Calendar) calendar.clone();\n            calendar.setTimeZone(mTimeZone);\n        } else {\n            // ensure we are using the timezone of the calendar\n            applyTimeZone(calendar);\n        }\n        int hour = calendar.get(Calendar.HOUR_OF_DAY);\n        int minute = calendar.get(Calendar.MINUTE);\n        int second = calendar.get(Calendar.SECOND);\n        buf.append('T');\n        if (hour < 10) {\n            buf.append('0');\n        }\n        buf.append(hour);\n        buf.append(':');\n        if (minute < 10) {\n            buf.append('0');\n        }\n        buf.append(minute);\n        buf.append(':');\n        if (second < 10) {\n            buf.append('0');\n        }\n        buf.append(second);\n        buf.append(getTimeZoneOffset(calendar));\n        return buf;\n    }\n    \n    private void applyTimeZone(Calendar calendar) {\n        if (!calendar.getTimeZone().equals(mTimeZone)) {\n            calendar.setTimeZone(mTimeZone);\n        }\n    }\n    \n    private String getTimeZoneOffset(Calendar calendar) {\n        TimeZone timeZone = calendar.getTimeZone();\n        int offsetInMillis = timeZone.getOffset(calendar.getTimeInMillis());\n        if (offsetInMillis == 0) {\n            return \"Z\";\n        }\n        int offsetInMinutes = Math.abs(offsetInMillis / (60 * 1000));\n        int hours = offsetInMinutes / 60;\n        int minutes = offsetInMinutes % 60;\n        StringBuilder builder = new StringBuilder();\n        if (offsetInMillis > 0) {\n            builder.append(\"+\");\n        } else {\n            builder.append(\"-\");\n        }\n        if (hours < 10) {\n            builder.append(\"0\");\n        }\n        builder.append(hours);\n        builder.append(':');\n        if (minutes < 10) {\n            builder.append(\"0\");\n        }\n        builder.append(minutes);\n        return builder.toString();\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex 6b10a94f..736fc92a 100644\n--- a/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -871,8 +871,63 @@ public class FastDateFormat extends Format {\n         if (mTimeZoneForced) {\n             calendar = (Calendar) calendar.clone();\n             calendar.setTimeZone(mTimeZone);\n+        } else {\n+            // ensure we are using the timezone of the calendar\n+            applyTimeZone(calendar);\n+        }\n+        int hour = calendar.get(Calendar.HOUR_OF_DAY);\n+        int minute = calendar.get(Calendar.MINUTE);\n+        int second = calendar.get(Calendar.SECOND);\n+        buf.append('T');\n+        if (hour < 10) {\n+            buf.append('0');\n+        }\n+        buf.append(hour);\n+        buf.append(':');\n+        if (minute < 10) {\n+            buf.append('0');\n+        }\n+        buf.append(minute);\n+        buf.append(':');\n+        if (second < 10) {\n+            buf.append('0');\n+        }\n+        buf.append(second);\n+        buf.append(getTimeZoneOffset(calendar));\n+        return buf;\n+    }\n+    \n+    private void applyTimeZone(Calendar calendar) {\n+        if (!calendar.getTimeZone().equals(mTimeZone)) {\n+            calendar.setTimeZone(mTimeZone);\n+        }\n+    }\n+    \n+    private String getTimeZoneOffset(Calendar calendar) {\n+        TimeZone timeZone = calendar.getTimeZone();\n+        int offsetInMillis = timeZone.getOffset(calendar.getTimeInMillis());\n+        if (offsetInMillis == 0) {\n+            return \"Z\";\n+        }\n+        int offsetInMinutes = Math.abs(offsetInMillis / (60 * 1000));\n+        int hours = offsetInMinutes / 60;\n+        int minutes = offsetInMinutes % 60;\n+        StringBuilder builder = new StringBuilder();\n+        if (offsetInMillis > 0) {\n+            builder.append(\"+\");\n+        } else {\n+            builder.append(\"-\");\n+        }\n+        if (hours < 10) {\n+            builder.append(\"0\");\n+        }\n+        builder.append(hours);\n+        builder.append(':');\n+        if (minutes < 10) {\n+            builder.append(\"0\");\n         }\n-        return applyRules(calendar, buf);\n+        builder.append(minutes);\n+        return builder.toString();\n     }\n \n     /**",
    "result_reason": "junit.framework.ComparisonFailure: expected:<T[10:11:12]> but was:<T[05:11:12-08:00]>",
    "test_result": "FAIL"
}