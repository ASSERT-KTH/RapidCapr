{
    "patch": "        Object[] rawArguments = invocation.getRawArguments();\n        boolean varargsMatched = false;\n        for (int i = 0; i < matchers.size(); i++) {\n            Matcher m = matchers.get(i);\n            if (m instanceof CapturesArguments) {\n                if (i >= rawArguments.length && !varargsMatched) {\n                    throw new UnsupportedOperationException();\n                }\n                Object arg = rawArguments[i];\n                if (i == rawArguments.length - 1 && m instanceof VarargMatcher) {\n                    varargsMatched = true;\n                    if (arg != null && arg.getClass().isArray()) {\n                        for (int j = 0; j < Array.getLength(arg); j++) {\n                            ((CapturesArguments) m).captureFrom(Array.get(arg, j));\n                        }\n                    } else {\n                        ((CapturesArguments) m).captureFrom(arg);\n                    }\n                } else {\n                    ((CapturesArguments) m).captureFrom(arg);\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..02afd76b4 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,29 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+        Object[] rawArguments = invocation.getRawArguments();\n+        boolean varargsMatched = false;\n+        for (int i = 0; i < matchers.size(); i++) {\n+            Matcher m = matchers.get(i);\n+            if (m instanceof CapturesArguments) {\n+                if (i >= rawArguments.length && !varargsMatched) {\n+                    throw new UnsupportedOperationException();\n+                }\n+                Object arg = rawArguments[i];\n+                if (i == rawArguments.length - 1 && m instanceof VarargMatcher) {\n+                    varargsMatched = true;\n+                    if (arg != null && arg.getClass().isArray()) {\n+                        for (int j = 0; j < Array.getLength(arg); j++) {\n+                            ((CapturesArguments) m).captureFrom(Array.get(arg, j));\n+                        }\n+                    } else {\n+                        ((CapturesArguments) m).captureFrom(arg);\n+                    }\n+                } else {\n+                    ((CapturesArguments) m).captureFrom(arg);\n+                }\n+            }\n+        }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "java.lang.UnsupportedOperationException",
    "test_result": "FAIL"
}