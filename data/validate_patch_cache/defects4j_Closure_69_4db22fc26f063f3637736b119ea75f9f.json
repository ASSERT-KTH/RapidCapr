{
    "patch": "      ObjectType thisType = functionType.getTypeOfThis();\n      if (thisType != null &&\n          !NodeUtil.isGetOrSetKey(n.getParent()) &&\n          !NodeUtil.isSetterProperty(n.getParent())) {\n        boolean isConstructor = functionType.isConstructor();\n        boolean isGeneric = NodeUtil.isInvocationTarget(child) &&\n            childType.isUnknownType() && childType.isNominalConstructor();\n        if (!isConstructor && !isGeneric) {\n          report(t, n, CheckConformance.CONFORMANCE_VIOLATION,\n              FUNCTION_CONSTRUCTOR_WITHOUT_NEW,\n              childType.toString(), thisType.toString());\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..53985266 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      ObjectType thisType = functionType.getTypeOfThis();\n+      if (thisType != null &&\n+          !NodeUtil.isGetOrSetKey(n.getParent()) &&\n+          !NodeUtil.isSetterProperty(n.getParent())) {\n+        boolean isConstructor = functionType.isConstructor();\n+        boolean isGeneric = NodeUtil.isInvocationTarget(child) &&\n+            childType.isUnknownType() && childType.isNominalConstructor();\n+        if (!isConstructor && !isGeneric) {\n+          report(t, n, CheckConformance.CONFORMANCE_VIOLATION,\n+              FUNCTION_CONSTRUCTOR_WITHOUT_NEW,\n+              childType.toString(), thisType.toString());\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}