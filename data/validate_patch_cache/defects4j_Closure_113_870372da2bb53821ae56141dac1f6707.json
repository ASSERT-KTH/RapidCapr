{
    "patch": "      boolean isProvided = false;\n      if (provided != null) {\n        isProvided = true;\n        if (!provided.isExplicitlyProvided()) {\n          // implicit requires are allowed\n          if (provided.inProvideNamespace) {\n            ProvidedName parent = provided.parentModule.provides.get(provided.name);\n            isProvided = parent != null && parent.isExplicitlyProvided();\n          } else {\n            isProvided = false;\n          }\n        }\n      }\n      if (!isProvided) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..3bc2d1f1 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,20 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n+      boolean isProvided = false;\n       if (provided != null) {\n+        isProvided = true;\n+        if (!provided.isExplicitlyProvided()) {\n+          // implicit requires are allowed\n+          if (provided.inProvideNamespace) {\n+            ProvidedName parent = provided.parentModule.provides.get(provided.name);\n+            isProvided = parent != null && parent.isExplicitlyProvided();\n+          } else {\n+            isProvided = false;\n+          }\n+        }\n+      }\n+      if (!isProvided) {\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}