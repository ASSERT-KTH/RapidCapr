{
    "patch": "    Preconditions.checkState(fnScope.isFunction());\n    if (NodeUtil.isGetOrSetKey(fnScope.getRootNode().getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = NodeUtil.getFunctionParameters(fnScope.getRootNode());\n\n    List<Var> parameterVars = ((Function) fnScope.getRootNode()).getParameterVars();\n\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(fnScope, fnScope.getRootNode());\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      for (int i = parameterVars.size() - 1; i >= 0; i--) {\n        if (!referenced.contains(parameterVars.get(i))) {\n          Node lastParam = argList.getLastChild();\n          argList.removeChild(lastParam);\n          parameterVars.remove(lastParam.getProp(Node.JSDOC_INFO_PROP));\n          compiler.reportChangeToEnclosingScope(fnScope);\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..f985d341 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,32 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Preconditions.checkState(fnScope.isFunction());\n+    if (NodeUtil.isGetOrSetKey(fnScope.getRootNode().getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = NodeUtil.getFunctionParameters(fnScope.getRootNode());\n+\n+    List<Var> parameterVars = ((Function) fnScope.getRootNode()).getParameterVars();\n+\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(fnScope, fnScope.getRootNode());\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      for (int i = parameterVars.size() - 1; i >= 0; i--) {\n+        if (!referenced.contains(parameterVars.get(i))) {\n+          Node lastParam = argList.getLastChild();\n+          argList.removeChild(lastParam);\n+          parameterVars.remove(lastParam.getProp(Node.JSDOC_INFO_PROP));\n+          compiler.reportChangeToEnclosingScope(fnScope);\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}