{
    "patch": "        boolean negative = false;\n        if (val.startsWith(\"-\")) {\n            if (val.length() == 1) {\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n            val = val.substring(1);\n            negative = true;\n        } else if (val.startsWith(\"+\")) {\n            if (val.length() == 1) {\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            }\n            val = val.substring(1);\n        }\n        // process the number value as before\n        Number result = null;\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                if (dec == null && exp == null) {\n                    try {\n                        result = Long.decode(val);\n                    } catch (NumberFormatException nfe) {\n                        // empty catch\n                    }\n                }\n                break;\n            case 'f':\n            case 'F':\n                try {\n                    Float f = Float.valueOf(val);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        result = f;\n                    }\n                } catch (NumberFormatException e) {\n                    // empty catch\n                }\n                break;\n            case 'd':\n            case 'D':\n            if (dec == null && exp == null) {\n                try {\n                    result = Double.valueOf(val);\n                } catch (NumberFormatException nfe) {\n                    // empty catch\n                }\n            }\n            if (result == null) {\n                try {\n                    result = createBigDecimal(val);\n                } catch (NumberFormatException e) {\n                    // empty catch\n                }\n            }\n            break;\n            default:\n                break;\n        }\n        if (result == null) {\n            // if result is not set, then the input value is not a valid numeric type\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n        // adjust the result if necessary\n        if (negative) {\n            if (result instanceof BigDecimal) {\n                result = ((BigDecimal) result).negate();\n            } else {\n                result = result.intValue() * -1L;\n            }\n        }\n        return result;",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..351718fb 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,76 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        boolean negative = false;\n+        if (val.startsWith(\"-\")) {\n+            if (val.length() == 1) {\n+                throw new NumberFormatException(val + \" is not a valid number.\");\n+            }\n+            val = val.substring(1);\n+            negative = true;\n+        } else if (val.startsWith(\"+\")) {\n+            if (val.length() == 1) {\n+                throw new NumberFormatException(val + \" is not a valid number.\");\n+            }\n+            val = val.substring(1);\n+        }\n+        // process the number value as before\n+        Number result = null;\n+        switch (lastChar) {\n+            case 'l':\n+            case 'L':\n+                if (dec == null && exp == null) {\n+                    try {\n+                        result = Long.decode(val);\n+                    } catch (NumberFormatException nfe) {\n+                        // empty catch\n+                    }\n+                }\n+                break;\n+            case 'f':\n+            case 'F':\n+                try {\n+                    Float f = Float.valueOf(val);\n+                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                        result = f;\n+                    }\n+                } catch (NumberFormatException e) {\n+                    // empty catch\n+                }\n+                break;\n+            case 'd':\n+            case 'D':\n+            if (dec == null && exp == null) {\n+                try {\n+                    result = Double.valueOf(val);\n+                } catch (NumberFormatException nfe) {\n+                    // empty catch\n+                }\n+            }\n+            if (result == null) {\n+                try {\n+                    result = createBigDecimal(val);\n+                } catch (NumberFormatException e) {\n+                    // empty catch\n+                }\n+            }\n+            break;\n+            default:\n+                break;\n+        }\n+        if (result == null) {\n+            // if result is not set, then the input value is not a valid numeric type\n+            throw new NumberFormatException(val + \" is not a valid number.\");\n+        }\n+        // adjust the result if necessary\n+        if (negative) {\n+            if (result instanceof BigDecimal) {\n+                result = ((BigDecimal) result).negate();\n+            } else {\n+                result = result.intValue() * -1L;\n+            }\n+        }\n+        return result;\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}