{
    "patch": "            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n            try {\n                iChronology.validate(newPartial, newValues);\n            } catch (IllegalFieldValueException ex) {\n                int errorIndex = ex.getIllegalFieldValueIndex();\n                for (int i = 0; i < newTypes.length; i++) {\n                    if (newTypes[i] == ex.getDateTimeFieldType()) {\n                        errorIndex = i;\n                        break;\n                    }\n                }\n                throw new IllegalFieldValueException(\n                        ex.getDateTimeFieldType(),\n                        ex.getIllegalFieldValue(),\n                        ex.getIllegalFieldValue(),\n                        newPartial,\n                        errorIndex);\n            }\n            return newPartial;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..0d573fb2 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -462,6 +462,24 @@ public final class Partial\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n             Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+            try {\n+                iChronology.validate(newPartial, newValues);\n+            } catch (IllegalFieldValueException ex) {\n+                int errorIndex = ex.getIllegalFieldValueIndex();\n+                for (int i = 0; i < newTypes.length; i++) {\n+                    if (newTypes[i] == ex.getDateTimeFieldType()) {\n+                        errorIndex = i;\n+                        break;\n+                    }\n+                }\n+                throw new IllegalFieldValueException(\n+                        ex.getDateTimeFieldType(),\n+                        ex.getIllegalFieldValue(),\n+                        ex.getIllegalFieldValue(),\n+                        newPartial,\n+                        errorIndex);\n+            }\n+            return newPartial;\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}