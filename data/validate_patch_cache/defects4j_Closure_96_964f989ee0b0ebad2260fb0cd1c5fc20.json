{
    "patch": "import static com.google.javascript.jscomp.CheckJSDoc.WRONG_ARGUMENT_COUNT;\n\nprivate void visitParameterList(NodeTraversal t, Node call,\n                                FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node parameter = null;\n  Node argument = null;\n  while (parameters.hasNext()) {\n    parameter = parameters.next();\n    if (!arguments.hasNext()) {\n      if (!functionType.hasRestFormals()) {\n        reportMissingArgument(t, call, functionType, ordinal);\n        return;\n      }\n      // If there are no normal arguments remaining, consume all remaining\n      // arguments into the var_args parameter using a new node.\n      Node varargsNode = IR.call(NodeUtil.getFunctionNameNode(call), arguments);\n      while (arguments.hasNext()) {\n        varargsNode.addChildToBack(arguments.next());\n      }\n      argument = varargsNode;\n    } else {\n      argument = arguments.next();\n    }\n    ordinal++;\n\n    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n      getJSType(parameter), call, ordinal);\n  }\n\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  if (functionType.hasRestFormals()) {\n    // Make sure the number of normal arguments >= minArgs.\n    if (minArgs > numArgs - functionType.getRestFormalsCount()) {\n      reportMissingArgument(t, call, functionType, ordinal);\n    }\n  } else {\n    // Check argument count matches.\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs), String.valueOf(minArgs), maxArgs != Integer.MAX_VALUE ?\n          \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }\n}\n\nprivate void reportMissingArgument(NodeTraversal t, Node call, FunctionType functionType, int ordinal) {\n  report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n      zeroArgumentMessage(functionType), zeroArgumentCount(functionType));\n}\n\nprivate String zeroArgumentMessage(FunctionType functionType) {\n  int count = zeroArgumentCount(functionType);\n  if (count == 1) {\n    return \"called with 0 arguments, but function requires 1 argument\";\n  }\n  return \"called with 0 arguments, but function requires \" + count + \" arguments\";\n}\n\nprivate int zeroArgumentCount(FunctionType functionType) {\n  return functionType.getMinArguments() == 0 ? 1 : functionType.getMinArguments() - (functionType.hasRestFormals() ? 1 : 0);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..e9b0f92d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,74 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n+import static com.google.javascript.jscomp.CheckJSDoc.WRONG_ARGUMENT_COUNT;\n+\n+private void visitParameterList(NodeTraversal t, Node call,\n+                                FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  int ordinal = 0;\n+  Node parameter = null;\n+  Node argument = null;\n+  while (parameters.hasNext()) {\n+    parameter = parameters.next();\n+    if (!arguments.hasNext()) {\n+      if (!functionType.hasRestFormals()) {\n+        reportMissingArgument(t, call, functionType, ordinal);\n+        return;\n+      }\n+      // If there are no normal arguments remaining, consume all remaining\n+      // arguments into the var_args parameter using a new node.\n+      Node varargsNode = IR.call(NodeUtil.getFunctionNameNode(call), arguments);\n+      while (arguments.hasNext()) {\n+        varargsNode.addChildToBack(arguments.next());\n+      }\n+      argument = varargsNode;\n+    } else {\n       argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n+    ordinal++;\n+\n+    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+      getJSType(parameter), call, ordinal);\n+  }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n+  int numArgs = call.getChildCount() - 1;\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+  if (functionType.hasRestFormals()) {\n+    // Make sure the number of normal arguments >= minArgs.\n+    if (minArgs > numArgs - functionType.getRestFormalsCount()) {\n+      reportMissingArgument(t, call, functionType, ordinal);\n+    }\n+  } else {\n+    // Check argument count matches.\n     if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+      report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(numArgs), String.valueOf(minArgs), maxArgs != Integer.MAX_VALUE ?\n+          \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n     }\n   }\n+}\n+\n+private void reportMissingArgument(NodeTraversal t, Node call, FunctionType functionType, int ordinal) {\n+  report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+      zeroArgumentMessage(functionType), zeroArgumentCount(functionType));\n+}\n+\n+private String zeroArgumentMessage(FunctionType functionType) {\n+  int count = zeroArgumentCount(functionType);\n+  if (count == 1) {\n+    return \"called with 0 arguments, but function requires 1 argument\";\n+  }\n+  return \"called with 0 arguments, but function requires \" + count + \" arguments\";\n+}\n+\n+private int zeroArgumentCount(FunctionType functionType) {\n+  return functionType.getMinArguments() == 0 ? 1 : functionType.getMinArguments() - (functionType.hasRestFormals() ? 1 : 0);\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}