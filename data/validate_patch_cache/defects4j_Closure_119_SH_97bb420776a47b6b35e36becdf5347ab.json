{
    "patch": "              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              case Token.FUNCTION:\n                return;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                } else if (!NodeUtil.isExpressionResultUsed(parent)) {\n                  return;\n                }\n            }\n          }\n          name = n.getString();\n          break;\n        case Token.FUNCTION:\n          return;\n        default:\n          if (!NodeUtil.isExpressionResultUsed(parent)) {\n            return;\n          }\n          name = null;\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..0ea86e1b 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -364,6 +364,34 @@ class GlobalNamespace\n                 type = Name.Type.FUNCTION;\n                 break;\n               case Token.INC:\n+              case Token.DEC:\n+                isSet = true;\n+                type = Name.Type.OTHER;\n+                break;\n+              case Token.FUNCTION:\n+                return;\n+              default:\n+                if (NodeUtil.isAssignmentOp(parent) &&\n+                    parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                } else if (!NodeUtil.isExpressionResultUsed(parent)) {\n+                  return;\n+                }\n+            }\n+          }\n+          name = n.getString();\n+          break;\n+        case Token.FUNCTION:\n+          return;\n+        default:\n+          if (!NodeUtil.isExpressionResultUsed(parent)) {\n+            return;\n+          }\n+          name = null;\n+          break;\n+      }\n+              case Token.INC:\n               case Token.DEC:\n                 isSet = true;\n                 type = Name.Type.OTHER;",
    "result_reason": "error: orphaned case",
    "test_result": "ERROR"
}