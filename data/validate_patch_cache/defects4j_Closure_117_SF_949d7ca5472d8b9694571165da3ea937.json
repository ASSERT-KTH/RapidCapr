{
    "patch": "String getReadableJSTypeName(Node n, boolean dereference) {\n\n    // The best type name is the actual type name.\n\n    // If we're analyzing a GETPROP, the property may be inherited by the\n    // prototype chain. So climb the prototype chain and find out where\n    // the property was originally defined.\n    if (n.isGetProp()) {\n        JSType objectType = getJSType(n.getFirstChild());\n        if (objectType != null) {\n            String propName = n.getLastChild().getString();\n            if (objectType.toMaybeObjectType() != null &&\n                    objectType.toMaybeObjectType().getConstructor() != null &&\n                    objectType.toMaybeObjectType().getConstructor().isInterface()) {\n                if (objectType.isUnknownType()) {\n                    return \"null.\" + propName;\n                }\n                objectType = objectType.toMaybeObjectType();\n                objectType = FunctionType.getTopDefiningInterface(\n                        objectType, propName);\n            } else if (objectType.toMaybeObjectType() != null &&\n                    objectType.toMaybeObjectType().getConstructor() != null &&\n                    (objectType.toMaybeObjectType().getConstructor().isAbstractInterface() ||\n                            objectType.toMaybeObjectType().getConstructor().isInterface())) {\n                // interfaces\n                if (objectType.isUnknownType()) {\n                    return \"null.\" + propName;\n                }\n                objectType = objectType.toMaybeObjectType();\n                while (objectType != null && !objectType.hasOwnProperty(propName)) {\n                    objectType = objectType.getImplicitPrototype();\n                }\n            } else if (objectType.toObjectLiteral() != null) {\n                String qualifiedName = n.getQualifiedName();\n                if (qualifiedName != null) {\n                    return qualifiedName;\n                }\n            } else if (objectType.toMaybeObjectType() != null &&\n                    objectType.toMaybeObjectType().getConstructor() != null &&\n                    !objectType.toMaybeObjectType().isAnonymousObjectType()) {\n                String qualifiedName =\n                        objectType.toMaybeObjectType().getReferenceName().toString();\n                objectType = getTypeRegistry().getType(qualifiedName);\n                if (objectType != null) {\n                    while (objectType != null && !objectType.hasOwnProperty(propName)) {\n                        objectType = objectType.getImplicitPrototype();\n                    }\n                }\n            }\n\n            if (objectType != null && objectType.isFunctionPrototypeType()) {\n                ObjectType functionType = objectType.toMaybeObjectType();\n                if (functionType != null &&\n                        functionType.getReferenceName() != null) {\n                    return functionType.getReferenceName().getShortName() + \".\" + propName;\n                }\n                return objectType.toString() + \".\" + propName;\n            }\n        }\n    }\n\n    JSType type = getJSType(n);\n    if (dereference) {\n        ObjectType dereferenced = type.dereference();\n        if (dereferenced != null) {\n            type = dereferenced;\n        }\n    }\n    if (type.isFunctionPrototypeType()) {\n        return type.toString();\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n        return qualifiedName;\n    } else if (type.isFunctionType()) {\n        // Don't show complex function names.\n        return \"function\";\n    } else {\n        return type.toString();\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java\nindex bcd024ac..6c27bab5 100644\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n@@ -721,7 +721,7 @@ class TypeValidator {\n    * @param dereference If true, the type of the node will be dereferenced\n    *     to an Object type, if possible.\n    */\n-  String getReadableJSTypeName(Node n, boolean dereference) {\n+String getReadableJSTypeName(Node n, boolean dereference) {\n \n     // The best type name is the actual type name.\n \n@@ -729,52 +729,79 @@ class TypeValidator {\n     // prototype chain. So climb the prototype chain and find out where\n     // the property was originally defined.\n     if (n.isGetProp()) {\n-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n-      if (objectType != null) {\n-        String propName = n.getLastChild().getString();\n-        if (objectType.getConstructor() != null &&\n-            objectType.getConstructor().isInterface()) {\n-          objectType = FunctionType.getTopDefiningInterface(\n-              objectType, propName);\n-        } else {\n-          // classes\n-          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n-            objectType = objectType.getImplicitPrototype();\n-          }\n+        JSType objectType = getJSType(n.getFirstChild());\n+        if (objectType != null) {\n+            String propName = n.getLastChild().getString();\n+            if (objectType.toMaybeObjectType() != null &&\n+                    objectType.toMaybeObjectType().getConstructor() != null &&\n+                    objectType.toMaybeObjectType().getConstructor().isInterface()) {\n+                if (objectType.isUnknownType()) {\n+                    return \"null.\" + propName;\n+                }\n+                objectType = objectType.toMaybeObjectType();\n+                objectType = FunctionType.getTopDefiningInterface(\n+                        objectType, propName);\n+            } else if (objectType.toMaybeObjectType() != null &&\n+                    objectType.toMaybeObjectType().getConstructor() != null &&\n+                    (objectType.toMaybeObjectType().getConstructor().isAbstractInterface() ||\n+                            objectType.toMaybeObjectType().getConstructor().isInterface())) {\n+                // interfaces\n+                if (objectType.isUnknownType()) {\n+                    return \"null.\" + propName;\n+                }\n+                objectType = objectType.toMaybeObjectType();\n+                while (objectType != null && !objectType.hasOwnProperty(propName)) {\n+                    objectType = objectType.getImplicitPrototype();\n+                }\n+            } else if (objectType.toObjectLiteral() != null) {\n+                String qualifiedName = n.getQualifiedName();\n+                if (qualifiedName != null) {\n+                    return qualifiedName;\n+                }\n+            } else if (objectType.toMaybeObjectType() != null &&\n+                    objectType.toMaybeObjectType().getConstructor() != null &&\n+                    !objectType.toMaybeObjectType().isAnonymousObjectType()) {\n+                String qualifiedName =\n+                        objectType.toMaybeObjectType().getReferenceName().toString();\n+                objectType = getTypeRegistry().getType(qualifiedName);\n+                if (objectType != null) {\n+                    while (objectType != null && !objectType.hasOwnProperty(propName)) {\n+                        objectType = objectType.getImplicitPrototype();\n+                    }\n+                }\n+            }\n+\n+            if (objectType != null && objectType.isFunctionPrototypeType()) {\n+                ObjectType functionType = objectType.toMaybeObjectType();\n+                if (functionType != null &&\n+                        functionType.getReferenceName() != null) {\n+                    return functionType.getReferenceName().getShortName() + \".\" + propName;\n+                }\n+                return objectType.toString() + \".\" + propName;\n+            }\n         }\n-\n-        // Don't show complex function names or anonymous types.\n-        // Instead, try to get a human-readable type name.\n-        if (objectType != null &&\n-            (objectType.getConstructor() != null ||\n-             objectType.isFunctionPrototypeType())) {\n-          return objectType.toString() + \".\" + propName;\n-        }\n-      }\n     }\n \n     JSType type = getJSType(n);\n     if (dereference) {\n-      ObjectType dereferenced = type.dereference();\n-      if (dereferenced != null) {\n-        type = dereferenced;\n-      }\n+        ObjectType dereferenced = type.dereference();\n+        if (dereferenced != null) {\n+            type = dereferenced;\n+        }\n     }\n-    if (type.isFunctionPrototypeType() ||\n-        (type.toObjectType() != null &&\n-         type.toObjectType().getConstructor() != null)) {\n-      return type.toString();\n+    if (type.isFunctionPrototypeType()) {\n+        return type.toString();\n     }\n     String qualifiedName = n.getQualifiedName();\n     if (qualifiedName != null) {\n-      return qualifiedName;\n+        return qualifiedName;\n     } else if (type.isFunctionType()) {\n-      // Don't show complex function names.\n-      return \"function\";\n+        // Don't show complex function names.\n+        return \"function\";\n     } else {\n-      return type.toString();\n+        return type.toString();\n     }\n-  }\n+}\n \n   /**\n    * This method gets the JSType from the Node argument and verifies that it is",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}