{
    "patch": "  private void handleObjectLit(NodeTraversal t, Node n) {\n    Map<String, Property> allProps = new HashMap<>();\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n      String name = child.getString();\n      T type = typeSystem.getType(getScope(), child);\n\n      Property prop = getProperty(name);\n      allProps.put(name, prop);\n\n      if (!prop.scheduleRenaming(\n          child, processProperty(t, prop, type, null, /* isLitObjProp */ true))) {\n        if (propertiesToErrorFor.containsKey(name)) {\n          t.report(\n              JSError.make(\n                  t.getSourceName(),\n                  child,\n                  propertiesToErrorFor.get(name),\n                  Warnings.INVALIDATION,\n                  name,\n                  type == null ? \"null\" : type.toString(),\n                  n.toString(),\n                  \"\"));\n        }\n      }\n    }\n\n    // Check that all properties are actually declared in the object literal\n    for (Map.Entry<String, Property> entry : allProps.entrySet()) {\n      String name = entry.getKey();\n      Property prop = entry.getValue();\n      if (!prop.isDeclared()) {\n        t.report(\n            JSError.make(\n                t.getSourceName(),\n                n,\n                DiagCollector.formatMessage(\n                    Warnings.MISSING_OBJECT_LITERAL_DECLARATION, name),\n                Warnings.INVALIDATION));\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..32a8c17c 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -487,31 +487,48 @@ class DisambiguateProperties<T> implements CompilerPass {\n     /**\n      * Processes a OBJECTLIT node.\n      */\n-    private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n+  private void handleObjectLit(NodeTraversal t, Node n) {\n+    Map<String, Property> allProps = new HashMap<>();\n+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+      String name = child.getString();\n+      T type = typeSystem.getType(getScope(), child);\n+\n+      Property prop = getProperty(name);\n+      allProps.put(name, prop);\n+\n+      if (!prop.scheduleRenaming(\n+          child, processProperty(t, prop, type, null, /* isLitObjProp */ true))) {\n+        if (propertiesToErrorFor.containsKey(name)) {\n+          t.report(\n+              JSError.make(\n+                  t.getSourceName(),\n+                  child,\n+                  propertiesToErrorFor.get(name),\n+                  Warnings.INVALIDATION,\n+                  name,\n+                  type == null ? \"null\" : type.toString(),\n+                  n.toString(),\n+                  \"\"));\n         }\n       }\n     }\n \n+    // Check that all properties are actually declared in the object literal\n+    for (Map.Entry<String, Property> entry : allProps.entrySet()) {\n+      String name = entry.getKey();\n+      Property prop = entry.getValue();\n+      if (!prop.isDeclared()) {\n+        t.report(\n+            JSError.make(\n+                t.getSourceName(),\n+                n,\n+                DiagCollector.formatMessage(\n+                    Warnings.MISSING_OBJECT_LITERAL_DECLARATION, name),\n+                Warnings.INVALIDATION));\n+      }\n+    }\n+  }\n+\n     private void printErrorLocations(List<String> errors, JSType t) {\n       if (!t.isObject() || t.isAllType()) {\n         return;",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}