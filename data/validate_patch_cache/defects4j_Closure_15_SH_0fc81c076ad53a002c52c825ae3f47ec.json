{
    "patch": "if (n.isForIn() && !NodeUtil.isLhsOfAssign(n)) {\n  return true;\n}\n\nif (n.isForOf() && !NodeUtil.isLhsOfAssign(n)) {\n  return true;\n}\n\nif (n.isSwitch()) {\n  Preconditions.checkState(!n.hasChildren(),\n      \"Unterminated switch statement. Last child: \", n.getLastChild());\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..1a16f40d 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,19 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+if (n.isForIn() && !NodeUtil.isLhsOfAssign(n)) {\n+  return true;\n+}\n+\n+if (n.isForOf() && !NodeUtil.isLhsOfAssign(n)) {\n+  return true;\n+}\n+\n+if (n.isSwitch()) {\n+  Preconditions.checkState(!n.hasChildren(),\n+      \"Unterminated switch statement. Last child: \", n.getLastChild());\n+  return true;\n+}\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}