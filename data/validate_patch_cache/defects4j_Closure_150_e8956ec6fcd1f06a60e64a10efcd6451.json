{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) return;\n\n    if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(n.getFirstChild());\n        return;\n    }\n\n    if (NodeUtil.createsBlockScope(n)) {\n        enterScope(n);\n    }\n\n    switch (n.getToken()) {\n        case FUNCTION:\n            defineDeclaredFunction(n, parent);\n            break;\n        case VAR:\n            defineVar(n, parent);\n            break;\n        case LET:\n        case CONST:\n            defineLetOrConst(n, parent);\n            break;\n        case NAME:\n            if (NodeUtil.isFunctionDeclaration(parent)) {\n                defineDeclaredName(n);\n            } else if (parent.isCatch()) {\n                defineCatch(n, parent);\n            } else {\n                defineVar(n, parent);\n            }\n            break;\n        case CATCH:\n            defineCatch(n, parent);\n            break;\n    }\n\n    attachLiteralTypes(n);\n\n    if (NodeUtil.createsBlockScope(n)) {\n        exitScope();\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..95e9d9a2 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,50 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) return;\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+    if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+        handleFunctionInputs(n.getFirstChild());\n         return;\n-      }\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+    if (NodeUtil.createsBlockScope(n)) {\n+        enterScope(n);\n+    }\n+\n+    switch (n.getToken()) {\n+        case FUNCTION:\n+            defineDeclaredFunction(n, parent);\n+            break;\n+        case VAR:\n+            defineVar(n, parent);\n+            break;\n+        case LET:\n+        case CONST:\n+            defineLetOrConst(n, parent);\n+            break;\n+        case NAME:\n+            if (NodeUtil.isFunctionDeclaration(parent)) {\n+                defineDeclaredName(n);\n+            } else if (parent.isCatch()) {\n+                defineCatch(n, parent);\n+            } else {\n+                defineVar(n, parent);\n+            }\n+            break;\n+        case CATCH:\n+            defineCatch(n, parent);\n+            break;\n+    }\n+\n+    attachLiteralTypes(n);\n+\n+    if (NodeUtil.createsBlockScope(n)) {\n+        exitScope();\n     }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}