{
    "patch": "private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    Type[] bounds = typeVariable.getBounds();\n    Type superclassType = typeVariable.getGenericDeclaration() instanceof Class ?\n            ((Class<?>) typeVariable.getGenericDeclaration()).getGenericSuperclass() :\n            null;\n    Type[] superTypeParams = null;\n    if (superclassType instanceof ParameterizedType) {\n        superTypeParams = ((ParameterizedType) superclassType).getActualTypeArguments();\n    }\n    Type[] interfaceTypes = typeVariable.getGenericDeclaration() instanceof Class ?\n            ((Class<?>) typeVariable.getGenericDeclaration()).getGenericInterfaces() :\n            new Type[]{};\n    for (int i = 0; i < bounds.length; i++) {\n        Type bound = bounds[i];\n        if (bound instanceof TypeVariable) {\n            TypeVariable<?> variable = (TypeVariable<?>) bound;\n            Type actualTypeArgument = resolveVariable(variable, superTypeParams, interfaceTypes);\n            if (actualTypeArgument != null) {\n                return actualTypeArgument;\n            }\n        } else {\n            return bound;\n        }\n    }\n    return Object.class; // default to Object if unable to determine the actual type\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..7131edef2 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,32 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    Type[] bounds = typeVariable.getBounds();\n+    Type superclassType = typeVariable.getGenericDeclaration() instanceof Class ?\n+            ((Class<?>) typeVariable.getGenericDeclaration()).getGenericSuperclass() :\n+            null;\n+    Type[] superTypeParams = null;\n+    if (superclassType instanceof ParameterizedType) {\n+        superTypeParams = ((ParameterizedType) superclassType).getActualTypeArguments();\n+    }\n+    Type[] interfaceTypes = typeVariable.getGenericDeclaration() instanceof Class ?\n+            ((Class<?>) typeVariable.getGenericDeclaration()).getGenericInterfaces() :\n+            new Type[]{};\n+    for (int i = 0; i < bounds.length; i++) {\n+        Type bound = bounds[i];\n+        if (bound instanceof TypeVariable) {\n+            TypeVariable<?> variable = (TypeVariable<?>) bound;\n+            Type actualTypeArgument = resolveVariable(variable, superTypeParams, interfaceTypes);\n+            if (actualTypeArgument != null) {\n+                return actualTypeArgument;\n+            }\n+        } else {\n+            return bound;\n+        }\n+    }\n+    return Object.class; // default to Object if unable to determine the actual type\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}