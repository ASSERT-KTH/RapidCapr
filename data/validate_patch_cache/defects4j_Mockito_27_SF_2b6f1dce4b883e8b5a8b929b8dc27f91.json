{
    "patch": "    @SuppressWarnings(\"unchecked\")\n    public <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        if (mock instanceof Proxy) {\n            ProxyFactory proxyFactory = new ProxyFactory();\n            proxyFactory.setSuperclass(mock.getClass().getSuperclass());\n            proxyFactory.setInterfaces(mock.getClass().getInterfaces());\n            T enhancedMock = (T) proxyFactory.create(new Class[]{InvocationHandler.class}, new Object[]{newFilter});\n            setMock(mock, enhancedMock);\n        } else {\n            Enhancer enhancer = new Enhancer();\n            enhancer.setSuperclass(mock.getClass());\n            enhancer.setCallback(newFilter);\n            T enhancedMock = (T) enhancer.create();\n            setMock(mock, enhancedMock);\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..f8adb48fc 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,25 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> void resetMock(T mock) {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        if (mock instanceof Proxy) {\n+            ProxyFactory proxyFactory = new ProxyFactory();\n+            proxyFactory.setSuperclass(mock.getClass().getSuperclass());\n+            proxyFactory.setInterfaces(mock.getClass().getInterfaces());\n+            T enhancedMock = (T) proxyFactory.create(new Class[]{InvocationHandler.class}, new Object[]{newFilter});\n+            setMock(mock, enhancedMock);\n+        } else {\n+            Enhancer enhancer = new Enhancer();\n+            enhancer.setSuperclass(mock.getClass());\n+            enhancer.setCallback(newFilter);\n+            T enhancedMock = (T) enhancer.create();\n+            setMock(mock, enhancedMock);\n+        }\n+    }\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}