{
    "patch": "public double solve(double min, double max) throws MaxIterationsExceededException,\n        FunctionEvaluationException {\n    clearResult();\n    verifyInterval(min, max);\n    double ret = Double.NaN;\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    // Verify bracketing\n    double sign = yMin * yMax;\n    if (sign >= 0) {\n        int maxEval = getMaxEvaluations();\n        double x1 = min;\n        double y1 = yMin;\n        double x2 = max;\n        double y2 = yMax;\n        double xMid = 0;\n        double yMid = Double.NaN;\n        // Find first point not equal to x1\n        while (FastMath.abs(x2 - x1) > Function.EVALUATION_EPSILON) {\n            xMid = 0.5 * (x1 + x2);\n            yMid = f.value(xMid);\n            if (yMid == 0) {\n                setResult(xMid, yMid, 0);\n                return xMid;\n            } else if (yMid * y1 < 0) {\n                x2 = xMid;\n                y2 = yMid;\n            } else {\n                x1 = xMid;\n                y1 = yMid;\n            }\n            if (--maxEval < 0) {\n                throw new MaxIterationsExceededException(getMaxEvaluations());\n            }\n        }\n        ret = xMid;\n        setResult(ret, yMid, 0);\n    } else {\n        // solve using only the first endpoint as initial guess\n        ret = solve(min, yMin, max, yMax, min, yMin);\n    }\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..8980386a1 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,49 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n+public double solve(double min, double max) throws MaxIterationsExceededException,\n         FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n-        \n-        // Verify bracketing\n-        double sign = yMin * yMax;\n-        if (sign >= 0) {\n-            // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n-        } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n+    clearResult();\n+    verifyInterval(min, max);\n+    double ret = Double.NaN;\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n+    // Verify bracketing\n+    double sign = yMin * yMax;\n+    if (sign >= 0) {\n+        int maxEval = getMaxEvaluations();\n+        double x1 = min;\n+        double y1 = yMin;\n+        double x2 = max;\n+        double y2 = yMax;\n+        double xMid = 0;\n+        double yMid = Double.NaN;\n+        // Find first point not equal to x1\n+        while (FastMath.abs(x2 - x1) > Function.EVALUATION_EPSILON) {\n+            xMid = 0.5 * (x1 + x2);\n+            yMid = f.value(xMid);\n+            if (yMid == 0) {\n+                setResult(xMid, yMid, 0);\n+                return xMid;\n+            } else if (yMid * y1 < 0) {\n+                x2 = xMid;\n+                y2 = yMid;\n+            } else {\n+                x1 = xMid;\n+                y1 = yMid;\n+            }\n+            if (--maxEval < 0) {\n+                throw new MaxIterationsExceededException(getMaxEvaluations());\n+            }\n         }\n-\n-        return ret;\n+        ret = xMid;\n+        setResult(ret, yMid, 0);\n+    } else {\n+        // solve using only the first endpoint as initial guess\n+        ret = solve(min, yMin, max, yMax, min, yMin);\n     }\n+    return ret;\n+}\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}