{
    "patch": "      ImmutableList<Reference> assignments = getAssignments();\n      boolean seenAssignment = false;\n      boolean seenMaybeConstAssignment = false;\n      for (Reference ref : assignments) {\n        if (!seenAssignment &&\n            (ref.isDeclaration() || ref.isSimpleAssignmentToName())) {\n          // This is the first assignment. If it is a declaration, its value is\n          // the initializing value.\n          seenAssignment = true;\n          if (ref.isDeclaration()) {\n            return ref;\n          }\n        } else if (!seenMaybeConstAssignment && !ref.isVarDeclaration()) {\n          // This is the first non-declaration reference seen after the first\n          // assignment. We stop looking if this reference is a declaration\n          // because it is not a simple initialization.\n          seenMaybeConstAssignment = true;\n          if (!ref.isSimpleAssignmentToName()) {\n            break;\n          }\n          // If we are seeing a second assignment and the first one is in a loop,\n          // we stop analyzing.  Assignments in a loop are NOT one-time\n          // assignments.\n          boolean isLoopAssignment = false;\n          for (BasicBlock block = ref.getNode().getBasicBlock();\n               block != null; block = block.getParent()) {\n            if (block.isFunction()) {\n              break;\n            } else if (block.isLoop()) {\n              isLoopAssignment = true;\n              break;\n            }\n          }\n          if (!isLoopAssignment && seenAssignment) {\n            return ref;\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..362d8c8c 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,44 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      ImmutableList<Reference> assignments = getAssignments();\n+      boolean seenAssignment = false;\n+      boolean seenMaybeConstAssignment = false;\n+      for (Reference ref : assignments) {\n+        if (!seenAssignment &&\n+            (ref.isDeclaration() || ref.isSimpleAssignmentToName())) {\n+          // This is the first assignment. If it is a declaration, its value is\n+          // the initializing value.\n+          seenAssignment = true;\n+          if (ref.isDeclaration()) {\n+            return ref;\n+          }\n+        } else if (!seenMaybeConstAssignment && !ref.isVarDeclaration()) {\n+          // This is the first non-declaration reference seen after the first\n+          // assignment. We stop looking if this reference is a declaration\n+          // because it is not a simple initialization.\n+          seenMaybeConstAssignment = true;\n+          if (!ref.isSimpleAssignmentToName()) {\n+            break;\n+          }\n+          // If we are seeing a second assignment and the first one is in a loop,\n+          // we stop analyzing.  Assignments in a loop are NOT one-time\n+          // assignments.\n+          boolean isLoopAssignment = false;\n+          for (BasicBlock block = ref.getNode().getBasicBlock();\n+               block != null; block = block.getParent()) {\n+            if (block.isFunction()) {\n+              break;\n+            } else if (block.isLoop()) {\n+              isLoopAssignment = true;\n+              break;\n+            }\n+          }\n+          if (!isLoopAssignment && seenAssignment) {\n+            return ref;\n+          }\n+        }\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}