{
    "patch": "      // ignore cast nodes.\n      if (NodeUtil.isGet(first)) {\n        Node getTarget = first.getFirstChild();\n        if (getTarget != null && getTarget.isThis()) {\n          n.putBooleanProp(Node.CONSTRUCTOR, true);\n        }\n      } else {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..126f79f3 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,15 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+      // ignore cast nodes.\n+      if (NodeUtil.isGet(first)) {\n+        Node getTarget = first.getFirstChild();\n+        if (getTarget != null && getTarget.isThis()) {\n+          n.putBooleanProp(Node.CONSTRUCTOR, true);\n+        }\n+      } else {\n+        n.putBooleanProp(Node.FREE_CALL, true);\n+      }\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}