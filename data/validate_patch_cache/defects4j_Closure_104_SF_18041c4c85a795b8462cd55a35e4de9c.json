{
    "patch": "  private JSType greatestSubtypeHelperHelper(JSType type2) {\n    checkNotNull(type2);\n    checkState(isSubtype(type2) || type2.isSubtype(this));\n    UnionTypeBuilder builder = new UnionTypeBuilder(getNativeTypeTable());\n    for (JSType alternate : alternates) {\n      JSType greatestSubtype = alternate.getGreatestSubtype(type2);\n      if (greatestSubtype != null) {\n        builder.addAlternate(greatestSubtype);\n      }\n    }\n    if (builder.isEmpty()) {\n      if (isObject() && type2.isObject()) {\n        return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n      }\n      return getNativeType(JSTypeNative.NO_TYPE);\n    }\n    JSType result = builder.build();\n    checkNotNull(result);\n    return result;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..d95db1bb 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -279,54 +279,26 @@ public class UnionType extends JSType {\n     }\n \n     if (that instanceof UnionType) {\n-      for (JSType otherAlternate : ((UnionType) that).alternates) {\n-        if (otherAlternate.isSubtype(this)) {\n-          builder.addAlternate(otherAlternate);\n-        }\n+  private JSType greatestSubtypeHelperHelper(JSType type2) {\n+    checkNotNull(type2);\n+    checkState(isSubtype(type2) || type2.isSubtype(this));\n+    UnionTypeBuilder builder = new UnionTypeBuilder(getNativeTypeTable());\n+    for (JSType alternate : alternates) {\n+      JSType greatestSubtype = alternate.getGreatestSubtype(type2);\n+      if (greatestSubtype != null) {\n+        builder.addAlternate(greatestSubtype);\n       }\n-    } else if (that.isSubtype(this)) {\n-      builder.addAlternate(that);\n     }\n-    JSType result = builder.build();\n-    if (result != null) {\n-      return result;\n-    } else if (this.isObject() && that.isObject()) {\n-      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n-    } else {\n+    if (builder.isEmpty()) {\n+      if (isObject() && type2.isObject()) {\n+        return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+      }\n       return getNativeType(JSTypeNative.NO_TYPE);\n     }\n+    JSType result = builder.build();\n+    checkNotNull(result);\n+    return result;\n   }\n-\n-  /**\n-   * Two union types are equal if they have the same number of alternates\n-   * and all alternates are equal.\n-   */\n-  @Override\n-  public boolean equals(Object object) {\n-    if (object instanceof UnionType) {\n-      UnionType that = (UnionType) object;\n-      return alternates.equals(that.alternates);\n-    } else {\n-      return false;\n-    }\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    return alternates.hashCode();\n-  }\n-\n-  @Override\n-  public boolean isUnionType() {\n-    return true;\n-  }\n-\n-  @Override\n-  public boolean isObject() {\n-    for (JSType alternate : alternates) {\n-      if (!alternate.isObject()) {\n-        return false;\n-      }\n     }\n     return true;\n   }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}