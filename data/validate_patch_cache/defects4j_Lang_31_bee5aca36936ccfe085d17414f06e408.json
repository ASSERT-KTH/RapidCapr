{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    if (str == null || searchChars == null) {\n        return false;\n    }\n    int strLen = str.length();\n    int searchLen = searchChars.length;\n    int[] searchCodePoints = searchChars.length > 1 ? searchChars\n        .codePoints().toArray() : new int[] {searchChars[0]};\n    for (int i = 0; i < strLen;) {\n        final int codepoint = str.codePointAt(i);\n        if (Character.isSupplementaryCodePoint(codepoint)) {\n            if (IntStream.of(searchCodePoints).anyMatch(cp -> Character\n                .charCount(cp) == 2 && codepoint == cp)) {\n                return true;\n            }\n            i += 2;\n        } else {\n            if (IntStream.of(searchCodePoints).anyMatch(cp -> cp == codepoint)) {\n                return true;\n            }\n            i++;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..3a55ff11 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,31 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    if (str == null || searchChars == null) {\n+        return false;\n+    }\n+    int strLen = str.length();\n+    int searchLen = searchChars.length;\n+    int[] searchCodePoints = searchChars.length > 1 ? searchChars\n+        .codePoints().toArray() : new int[] {searchChars[0]};\n+    for (int i = 0; i < strLen;) {\n+        final int codepoint = str.codePointAt(i);\n+        if (Character.isSupplementaryCodePoint(codepoint)) {\n+            if (IntStream.of(searchCodePoints).anyMatch(cp -> Character\n+                .charCount(cp) == 2 && codepoint == cp)) {\n+                return true;\n+            }\n+            i += 2;\n+        } else {\n+            if (IntStream.of(searchCodePoints).anyMatch(cp -> cp == codepoint)) {\n+                return true;\n+            }\n+            i++;\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}