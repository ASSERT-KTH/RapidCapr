{
    "patch": "  private boolean canInline(Reference reference) {\n    // Inline only simple assignments.\n    Node assignedValue = reference.getAssignedValue();\n    if (assignedValue == null) {\n      return false;\n    }\n\n    Node parent = reference.getParent().getParent();\n    if (parent.isBlock() && parent.getParent().isFunction()) {\n      // Avoid inlining declarations into a local or global scope, this avoids\n      // complex register allocation issues with vars unexpectedly being live\n      // on the whole function, etc.\n      return false;\n    }\n\n    if (reference.isVar() && !reference.isLValue()) {\n      // Const variables that have not been assigned a value.\n      // These currently have to be assigned a value when declared so this code\n      // might never run.\n      return true;\n    }\n\n    if (assignedValue.isObjectLit() || assignedValue.isArrayLit()) {\n      // Don't inline object/array literals unless this is the only reference\n      // to this object or array.\n      assert reference.isDeclaration();\n      return reference.getBasicBlock().getReferences().stream()\n          .filter(ref -> ref != reference && ref.isLocal())\n          .noneMatch(ref -> ref.getAssignedValue() == assignedValue);\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..5be82ee2 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -516,69 +516,40 @@ class InlineVariables implements CompilerPass {\n      * @return true if the provided reference and declaration can be safely\n      *         inlined according to our criteria\n      */\n-    private boolean canInline(\n-        Reference declaration,\n-        Reference initialization,\n-        Reference reference) {\n-      if (!isValidDeclaration(declaration)\n-          || !isValidInitialization(initialization)\n-          || !isValidReference(reference)) {\n-        return false;\n-      }\n-\n-      // If the value is read more than once, skip it.\n-      // VAR declarations and EXPR_RESULT don't need the value, but other\n-      // ASSIGN expressions parents do.\n-      if (declaration != initialization &&\n-          !initialization.getGrandparent().isExprResult()) {\n-        return false;\n-      }\n-\n-      // Be very conservative and do no cross control structures or\n-      // scope boundaries\n-      if (declaration.getBasicBlock() != initialization.getBasicBlock()\n-          || declaration.getBasicBlock() != reference.getBasicBlock()) {\n-        return false;\n-      }\n-\n-      // Do not inline into a call node. This would change\n-      // the context in which it was being called. For example,\n-      //   var a = b.c;\n-      //   a();\n-      // should not be inlined, because it calls a in the context of b\n-      // rather than the context of the window.\n-      //   var a = b.c;\n-      //   f(a)\n-      // is ok.\n-      Node value = initialization.getAssignedValue();\n-      Preconditions.checkState(value != null);\n-      if (value.isGetProp()\n-          && reference.getParent().isCall()\n-          && reference.getParent().getFirstChild() == reference.getNode()) {\n-        return false;\n-      }\n+  private boolean canInline(Reference reference) {\n+    // Inline only simple assignments.\n+    Node assignedValue = reference.getAssignedValue();\n+    if (assignedValue == null) {\n+      return false;\n+    }\n \n-      if (value.isFunction()) {\n-        Node callNode = reference.getParent();\n-        if (reference.getParent().isCall()) {\n-          CodingConvention convention = compiler.getCodingConvention();\n-          // Bug 2388531: Don't inline subclass definitions into class defining\n-          // calls as this confused class removing logic.\n-          SubclassRelationship relationship =\n-              convention.getClassesDefinedByCall(callNode);\n-          if (relationship != null) {\n-            return false;\n-          }\n+    Node parent = reference.getParent().getParent();\n+    if (parent.isBlock() && parent.getParent().isFunction()) {\n+      // Avoid inlining declarations into a local or global scope, this avoids\n+      // complex register allocation issues with vars unexpectedly being live\n+      // on the whole function, etc.\n+      return false;\n+    }\n \n-          // issue 668: Don't inline singleton getter methods\n-          // calls as this confused class removing logic.\n-        }\n-      }\n+    if (reference.isVar() && !reference.isLValue()) {\n+      // Const variables that have not been assigned a value.\n+      // These currently have to be assigned a value when declared so this code\n+      // might never run.\n+      return true;\n+    }\n \n-      return canMoveAggressively(value) ||\n-          canMoveModerately(initialization, reference);\n+    if (assignedValue.isObjectLit() || assignedValue.isArrayLit()) {\n+      // Don't inline object/array literals unless this is the only reference\n+      // to this object or array.\n+      assert reference.isDeclaration();\n+      return reference.getBasicBlock().getReferences().stream()\n+          .filter(ref -> ref != reference && ref.isLocal())\n+          .noneMatch(ref -> ref.getAssignedValue() == assignedValue);\n     }\n \n+    return true;\n+  }\n+\n     /**\n      * If the value is a literal, we can cross more boundaries to inline it.\n      */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}