{
    "patch": "    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        if (x[xOffset] >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n\n            if (tmp1[0] > 0) {\n                // positive odd root can be simplified:\n                tmp2[0] = -FastMath.pow(-tmp1[0], 1/3.0);\n                // adjustment for correct sign of atan(y/(r-x))\n                result[resultOffset] = ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) + 2 * tmp2[0];\n            } else {\n                // use the result directly\n                result[resultOffset] =\n                        ((tmp1[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp1[0]; // +/-pi - 2 * atan(y / (r - x))\n            }\n            for (int i = 1; i < tmp2.length; ++i) {\n                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n            }\n\n        }\n\n        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n        if (Double.isNaN(tmp1[0]) || Double.isNaN(tmp1[1])) {\n            result[resultOffset] = Double.NaN;\n        } else if (Double.isInfinite(x[xOffset]) && Double.isInfinite(y[yOffset])) {\n            final double theta = FastMath.atan2(y[yOffset], x[xOffset]);\n            result[resultOffset] = (theta > 0 ? FastMath.PI : -FastMath.PI);\n        } else if (Double.isInfinite(y[yOffset])) {\n            result[resultOffset] = (y[yOffset] > 0 ? FastMath.PI / 2.0 : -FastMath.PI / 2.0);\n        } else if (Double.isInfinite(x[xOffset])) {\n            result[resultOffset] = (x[xOffset] >= 0 ? 0.0 : FastMath.PI);\n        } else if (x[xOffset] == 0) {\n            if (y[yOffset] > 0) {\n                result[resultOffset] = FastMath.PI / 2.0;\n            } else if (y[yOffset] < 0) {\n                result[resultOffset] = -FastMath.PI / 2.0;\n            } else {\n                result[resultOffset] = 0.0;\n            }\n        } else if (y[yOffset] == 0) {\n            result[resultOffset] = (x[xOffset] > 0 ? 0.0 : FastMath.PI);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..9ebff5704 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,73 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+    public void atan2(final double[] y, final int yOffset,\n+                      final double[] x, final int xOffset,\n+                      final double[] result, final int resultOffset) {\n+\n+        // compute r = sqrt(x^2+y^2)\n+        double[] tmp1 = new double[getSize()];\n+        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n+        double[] tmp2 = new double[getSize()];\n+        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n+        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n+        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n+\n+        if (x[xOffset] >= 0) {\n+\n+            // compute atan2(y, x) = 2 atan(y / (r + x))\n+            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n+            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n+            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n+            for (int i = 0; i < tmp2.length; ++i) {\n+                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n+            }\n+\n+        } else {\n+\n+            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n+            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n+            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n+            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n+\n+            if (tmp1[0] > 0) {\n+                // positive odd root can be simplified:\n+                tmp2[0] = -FastMath.pow(-tmp1[0], 1/3.0);\n+                // adjustment for correct sign of atan(y/(r-x))\n+                result[resultOffset] = ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) + 2 * tmp2[0];\n+            } else {\n+                // use the result directly\n+                result[resultOffset] =\n+                        ((tmp1[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp1[0]; // +/-pi - 2 * atan(y / (r - x))\n+            }\n+            for (int i = 1; i < tmp2.length; ++i) {\n+                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n+            }\n+\n+        }\n+\n+        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+        if (Double.isNaN(tmp1[0]) || Double.isNaN(tmp1[1])) {\n+            result[resultOffset] = Double.NaN;\n+        } else if (Double.isInfinite(x[xOffset]) && Double.isInfinite(y[yOffset])) {\n+            final double theta = FastMath.atan2(y[yOffset], x[xOffset]);\n+            result[resultOffset] = (theta > 0 ? FastMath.PI : -FastMath.PI);\n+        } else if (Double.isInfinite(y[yOffset])) {\n+            result[resultOffset] = (y[yOffset] > 0 ? FastMath.PI / 2.0 : -FastMath.PI / 2.0);\n+        } else if (Double.isInfinite(x[xOffset])) {\n+            result[resultOffset] = (x[xOffset] >= 0 ? 0.0 : FastMath.PI);\n+        } else if (x[xOffset] == 0) {\n+            if (y[yOffset] > 0) {\n+                result[resultOffset] = FastMath.PI / 2.0;\n+            } else if (y[yOffset] < 0) {\n+                result[resultOffset] = -FastMath.PI / 2.0;\n+            } else {\n+                result[resultOffset] = 0.0;\n+            }\n+        } else if (y[yOffset] == 0) {\n+            result[resultOffset] = (x[xOffset] > 0 ? 0.0 : FastMath.PI);\n+        }\n+    }\n \n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}