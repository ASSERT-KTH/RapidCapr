{
    "patch": "public static double[] bracket(UnivariateRealFunction function,\n                               double initial, double lowerBound, double upperBound,\n                               int maximumIterations) throws ConvergenceException,\n        FunctionEvaluationException {\n\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n                lowerBound, initial, upperBound);\n    }\n\n    double a = initial;\n    double b = initial;\n    double fa;\n    double fb;\n    double ftol = 1e-15 * Math.max(Math.abs(initial), 1.0);\n    double funcMax = Math.min(Math.max(lowerBound, upperBound), 0.0);\n    double funcMin = Math.max(Math.min(lowerBound, upperBound), 0.0);\n    int numIterations = 0;\n\n    do {\n        fa = function.value(a);\n        fb = function.value(b);\n\n        if (fa * fb > 0) {\n            if (Math.abs(fa) < Math.abs(fb)) {\n                a = Math.max(a - 1.6 * (b - a), lowerBound);\n            } else {\n                b = Math.min(b + 1.6 * (b - a), upperBound);\n            }\n        }\n        if (Math.abs(fa) < Math.abs(fb)) {\n            if (Math.abs(fa) < Math.abs(funcMin)) {\n                funcMin = fa;\n            }\n            if (Math.abs(fb) < Math.abs(funcMax)) {\n                funcMax = fb;\n            }\n            b = a;\n            a = Math.max(a - 1.6 * (b - a), lowerBound);\n        } else {\n            if (Math.abs(fb) < Math.abs(funcMin)) {\n                funcMin = fb;\n            }\n            if (Math.abs(fa) < Math.abs(funcMax)) {\n                funcMax = fa;\n            }\n            a = b;\n            b = Math.min(b + 1.6 * (b - a), upperBound);\n        }\n\n        if (Double.isInfinite(fa) || Double.isNaN(fa) ||\n                Double.isInfinite(fb) || Double.isNaN(fb)) {\n            throw new ConvergenceException(\n                    \"bracket function returned NaN or infinity at iteration {0}\",\n                    numIterations);\n        }\n\n        numIterations++;\n    } while ((fa * fb > 0 || Math.abs(fb - fa) > ftol) && (numIterations < maximumIterations));\n\n    if (fa * fb >= 0.0 || numIterations >= maximumIterations) {\n        throw new ConvergenceException(\n                \"number of iterations={0}, maximum iterations={1}, \" +\n                        \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n                        \"final b value={6}, f(a)={7}, f(b)={8}\",\n                numIterations, maximumIterations, initial,\n                lowerBound, upperBound, a, b, fa, fb);\n    }\n\n    return new double[]{a, b};\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..f20580d2d 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,51 +162,86 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n-        if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n-        }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n+public static double[] bracket(UnivariateRealFunction function,\n+                               double initial, double lowerBound, double upperBound,\n+                               int maximumIterations) throws ConvergenceException,\n+        FunctionEvaluationException {\n+\n+    if (function == null) {\n+        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n+    }\n+    if (maximumIterations <= 0) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                \"bad value for maximum iterations number: {0}\", maximumIterations);\n+    }\n+    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n+                lowerBound, initial, upperBound);\n+    }\n+\n+    double a = initial;\n+    double b = initial;\n+    double fa;\n+    double fb;\n+    double ftol = 1e-15 * Math.max(Math.abs(initial), 1.0);\n+    double funcMax = Math.min(Math.max(lowerBound, upperBound), 0.0);\n+    double funcMin = Math.max(Math.min(lowerBound, upperBound), 0.0);\n+    int numIterations = 0;\n+\n+    do {\n+        fa = function.value(a);\n+        fb = function.value(b);\n+\n+        if (fa * fb > 0) {\n+            if (Math.abs(fa) < Math.abs(fb)) {\n+                a = Math.max(a - 1.6 * (b - a), lowerBound);\n+            } else {\n+                b = Math.min(b + 1.6 * (b - a), upperBound);\n+            }\n         }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n+        if (Math.abs(fa) < Math.abs(fb)) {\n+            if (Math.abs(fa) < Math.abs(funcMin)) {\n+                funcMin = fa;\n+            }\n+            if (Math.abs(fb) < Math.abs(funcMax)) {\n+                funcMax = fb;\n+            }\n+            b = a;\n+            a = Math.max(a - 1.6 * (b - a), lowerBound);\n+        } else {\n+            if (Math.abs(fb) < Math.abs(funcMin)) {\n+                funcMin = fb;\n+            }\n+            if (Math.abs(fa) < Math.abs(funcMax)) {\n+                funcMax = fa;\n+            }\n+            a = b;\n+            b = Math.min(b + 1.6 * (b - a), upperBound);\n         }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n-            \n-            fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n+\n+        if (Double.isInfinite(fa) || Double.isNaN(fa) ||\n+                Double.isInfinite(fb) || Double.isNaN(fb)) {\n             throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+                    \"bracket function returned NaN or infinity at iteration {0}\",\n+                    numIterations);\n         }\n-        \n-        return new double[]{a, b};\n+\n+        numIterations++;\n+    } while ((fa * fb > 0 || Math.abs(fb - fa) > ftol) && (numIterations < maximumIterations));\n+\n+    if (fa * fb >= 0.0 || numIterations >= maximumIterations) {\n+        throw new ConvergenceException(\n+                \"number of iterations={0}, maximum iterations={1}, \" +\n+                        \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n+                        \"final b value={6}, f(a)={7}, f(b)={8}\",\n+                numIterations, maximumIterations, initial,\n+                lowerBound, upperBound, a, b, fa, fb);\n     }\n \n+    return new double[]{a, b};\n+}\n+\n     /**\n      * Compute the midpoint of two values.\n      * ",
    "result_reason": "Test timed out after 300 seconds",
    "test_result": "ERROR"
}