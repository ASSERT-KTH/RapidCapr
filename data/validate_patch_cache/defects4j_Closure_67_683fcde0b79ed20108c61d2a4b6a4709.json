{
    "patch": "private boolean isPrototypePropertyAssign(Node assign) {\n    Node n = assign.getFirstChild();\n    if (n != null && NodeUtil.isName(n) &&\n            \"prototype\".equals(n.getString())) {\n        Node parent = assign.getParent();\n        if (parent.getType() == Token.EXPR_RESULT) {\n            Node gramps = parent.getParent();\n            if (gramps.getType() == Token.BLOCK) {\n                Node func = gramps.getParent();\n                if (func.getType() == Token.FUNCTION) {\n                    Node lvalue = NodeUtil.getBestLValue(parent.getFirstChild());\n                    if (NodeUtil.isGet(lvalue) && !NodeUtil.isLhsOfAssign(assign)) {\n                        return NodeUtil.getGetQualifier(lvalue).matchesQualifiedName(NodeUtil.getNameNode(func));\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..6a52df02 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -310,28 +310,26 @@ class AnalyzePrototypeProperties implements CompilerPass {\n            n.getType() == Token.FUNCTION &&\n            n.getParent().getType() == Token.NAME);\n     }\n-\n-    private boolean isPrototypePropertyAssign(Node assign) {\n-      Node n = assign.getFirstChild();\n-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n-          && n.getType() == Token.GETPROP\n-          ) {\n-        // We want to exclude the assignment itself from the usage list\n-        boolean isChainedProperty =\n-            n.getFirstChild().getType() == Token.GETPROP;\n-\n-        if (isChainedProperty) {\n-          Node child = n.getFirstChild().getFirstChild().getNext();\n-\n-          if (child.getType() == Token.STRING &&\n-              child.getString().equals(\"prototype\")) {\n-            return true;\n-          }\n+private boolean isPrototypePropertyAssign(Node assign) {\n+    Node n = assign.getFirstChild();\n+    if (n != null && NodeUtil.isName(n) &&\n+            \"prototype\".equals(n.getString())) {\n+        Node parent = assign.getParent();\n+        if (parent.getType() == Token.EXPR_RESULT) {\n+            Node gramps = parent.getParent();\n+            if (gramps.getType() == Token.BLOCK) {\n+                Node func = gramps.getParent();\n+                if (func.getType() == Token.FUNCTION) {\n+                    Node lvalue = NodeUtil.getBestLValue(parent.getFirstChild());\n+                    if (NodeUtil.isGet(lvalue) && !NodeUtil.isLhsOfAssign(assign)) {\n+                        return NodeUtil.getGetQualifier(lvalue).matchesQualifiedName(NodeUtil.getNameNode(func));\n+                    }\n+                }\n+            }\n         }\n-      }\n-\n-      return false;\n     }\n+    return false;\n+}\n \n     /**\n      * Processes a NAME node to see if it's a global function declaration.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}