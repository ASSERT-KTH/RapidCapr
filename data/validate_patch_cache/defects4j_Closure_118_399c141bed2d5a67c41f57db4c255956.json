{
    "patch": "        JSDocInfo info = NodeUtil.getBestJSDocInfo(child);\n        if (info != null && info.isConstructor()) {\n          String className = n.getFirstChild().getString();\n          objectTypeRegistry.addAnonymousType(className, child);\n          type = objectTypeRegistry.getType(className, null);\n        } else {\n          // Property is not class\n          String name = child.getString();\n          // Calculate property type\n          T type = typeSystem.getType(getScope(), n, name);\n          // Rename property if necessary using its type\n          Property prop = getProperty(name);\n          if (!prop.scheduleRenaming(child,\n                                     processProperty(t, prop, type, null))) {\n            if (propertiesToErrorFor.containsKey(name)) {\n              compiler.report(JSError.make(\n                  t.getSourceName(), child, propertiesToErrorFor.get(name),\n                  Warnings.INVALIDATION, name,\n                  (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..0305e978 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,28 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+        JSDocInfo info = NodeUtil.getBestJSDocInfo(child);\n+        if (info != null && info.isConstructor()) {\n+          String className = n.getFirstChild().getString();\n+          objectTypeRegistry.addAnonymousType(className, child);\n+          type = objectTypeRegistry.getType(className, null);\n+        } else {\n+          // Property is not class\n+          String name = child.getString();\n+          // Calculate property type\n+          T type = typeSystem.getType(getScope(), n, name);\n+          // Rename property if necessary using its type\n+          Property prop = getProperty(name);\n+          if (!prop.scheduleRenaming(child,\n+                                     processProperty(t, prop, type, null))) {\n+            if (propertiesToErrorFor.containsKey(name)) {\n+              compiler.report(JSError.make(\n+                  t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                  Warnings.INVALIDATION, name,\n+                  (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+            }\n+          }\n+        }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}