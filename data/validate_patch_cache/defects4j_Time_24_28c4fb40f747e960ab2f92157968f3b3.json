{
    "patch": "    try {\n        for (int i = 0; i < count; i++) {\n            long newValue = savedFields[i].set(millis, resetFields);\n            if (newValue != millis) {\n                // If this is the last field, then it is too late to\n                // disambiguate.  In this case, we default to the\n                // earlier time.\n                if (i == count - 1 && !resetFields) {\n                    if (iZone != null) {\n                        int standardOffset = iZone.getStandardOffset(newValue);\n                        int millisOfDay = iZone.getMillisOfDay(newValue - standardOffset);\n                        if (millisOfDay != 0) {\n                            throw new IllegalInstantException(\"Ambiguous local time is due to time zone offset transition (\" + iZone.getID() + ')');\n                        }\n                    }\n                    break;\n                }\n                millis = newValue;\n                for (int j = 0; j < i; j++) {\n                    millis = savedFields[j].set(millis, resetFields);\n                }\n                i = -1; // restart\n            }                \n        }            \n    } catch (IllegalArgumentException ex) {\n        if (text != null) {\n            ex = new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": \" + ex.getMessage(), ex);\n        }\n        throw ex;            \n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..87783e41 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,36 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            long newValue = savedFields[i].set(millis, resetFields);\n+            if (newValue != millis) {\n+                // If this is the last field, then it is too late to\n+                // disambiguate.  In this case, we default to the\n+                // earlier time.\n+                if (i == count - 1 && !resetFields) {\n+                    if (iZone != null) {\n+                        int standardOffset = iZone.getStandardOffset(newValue);\n+                        int millisOfDay = iZone.getMillisOfDay(newValue - standardOffset);\n+                        if (millisOfDay != 0) {\n+                            throw new IllegalInstantException(\"Ambiguous local time is due to time zone offset transition (\" + iZone.getID() + ')');\n+                        }\n+                    }\n+                    break;\n+                }\n+                millis = newValue;\n+                for (int j = 0; j < i; j++) {\n+                    millis = savedFields[j].set(millis, resetFields);\n+                }\n+                i = -1; // restart\n+            }                \n+        }            \n+    } catch (IllegalArgumentException ex) {\n+        if (text != null) {\n+            ex = new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": \" + ex.getMessage(), ex);\n+        }\n+        throw ex;            \n+    }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}