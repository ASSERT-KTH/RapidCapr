{
    "patch": "    private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        // Maybe STRING, GET, SET\n\n        // We should never see a mix of numbers and strings.\n        String name = child.getString();\n        T type = typeSystem.getType(getScope(), child, name);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n          // TODO(user): It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n\n        // Handle nested object literals.\n        if (child.isObjectLit()) {\n          handleObjectLit(t, child);\n        } else if (child.hasChildren()) { // adding a new check\n          handleObjectLit(t, child);\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..900e3a3b 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -495,7 +495,7 @@ class DisambiguateProperties<T> implements CompilerPass {\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n+        T type = typeSystem.getType(getScope(), child, name);\n \n         Property prop = getProperty(name);\n         if (!prop.scheduleRenaming(child,\n@@ -509,6 +509,13 @@ class DisambiguateProperties<T> implements CompilerPass {\n                 (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n           }\n         }\n+\n+        // Handle nested object literals.\n+        if (child.isObjectLit()) {\n+          handleObjectLit(t, child);\n+        } else if (child.hasChildren()) { // adding a new check\n+          handleObjectLit(t, child);\n+        }\n       }\n     }\n ",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}