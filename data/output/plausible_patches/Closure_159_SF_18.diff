diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java
index 814a07f4..fbf1914b 100644
--- a/src/com/google/javascript/jscomp/InlineFunctions.java
+++ b/src/com/google/javascript/jscomp/InlineFunctions.java
@@ -770,21 +770,24 @@ class InlineFunctions implements SpecializationAwareCompilerPass {
   /**
    * @see #findCalledFunctions(Node)
    */
-  private void findCalledFunctions(
-      Node node, Set<String> changed) {
-    Preconditions.checkArgument(changed != null);
-    // For each referenced function, add a new reference
-    if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
+private void findCalledFunctions(Node node, Set<String> changed) {
+  if (node == null || changed == null) {
+    throw new IllegalArgumentException("Node and set cannot be null");
+  }
+  if (node.getType() == Token.CALL) {
+    Node child = node.getFirstChild();
+    while (child != null) {
       if (child.getType() == Token.NAME) {
         changed.add(child.getString());
       }
+      child = child.getNext();
     }
-
+  } else {
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
       findCalledFunctions(c, changed);
     }
   }
+}
 
   /**
    * For any call-site that needs it, prepare the call-site for inlining