diff --git a/src/java/org/apache/commons/lang3/ArrayUtils.java b/src/java/org/apache/commons/lang3/ArrayUtils.java
index 889497e9..22f52ff0 100644
--- a/src/java/org/apache/commons/lang3/ArrayUtils.java
+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java
@@ -2950,20 +2950,46 @@ public class ArrayUtils {
      * @since 2.1
      */
     @SuppressWarnings("unchecked")
-    public static <T> T[] addAll(T[] array1, T... array2) {
-        if (array1 == null) {
-            return clone(array2);
-        } else if (array2 == null) {
-            return clone(array1);
-        }
-        final Class<?> type1 = array1.getClass().getComponentType();
-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
+public static <T> T[] addAll(T[] array1, T... array2) {
+    if (array1 == null && array2 == null) {
+        return null;
+    } else if (array1 == null && array2 != null) {
+        return array2.clone();
+    } else if (array1 != null && array2 == null) {
+        return array1.clone();
+    }
+
+    final Class<?> type1 = array1.getClass().getComponentType();
+    final Class<?> type2 = array2.getClass().getComponentType();
+
+    if (type1 == null && type2 == null) {
+        throw new IllegalArgumentException("Cannot add arrays of unknown type");
+    } else if (type1 == null) {
+        final T[] joinedArray = (T[]) Array.newInstance(type2, array1.length + array2.length);
         System.arraycopy(array1, 0, joinedArray, 0, array1.length);
-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
         return joinedArray;
+    } else if (type2 == null) {
+        final T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
+        System.arraycopy(array1, 0, joinedArray, 0, array1.length);
+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
+        return joinedArray;
+    } else if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {
+        throw new IllegalArgumentException("Cannot store " + type2.getName() + " in an array of " + type1.getName());
     }
 
+    final int length1 = array1.length;
+    final int length2 = array2.length;
+
+    @SuppressWarnings("unchecked")
+    final T[] result = (T[])Array.newInstance(type1, length1 + length2);
+
+    System.arraycopy(array1, 0, result, 0, length1);
+    System.arraycopy(array2, 0, result, length1, length2);
+
+    return result;
+}
+
     /**
      * <p>Adds all the elements of the given arrays into a new array.</p>
      * <p>The new array contains all of the element of <code>array1</code> followed