diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
index 51d1c6428..afcbc69d3 100644
--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
@@ -501,64 +501,67 @@ public class CMAESOptimizer
     /**
      * Checks dimensions and values of boundaries and inputSigma if defined.
      */
-    private void checkParameters() {
-        final double[] init = getStartPoint();
-        final double[] lB = getLowerBound();
-        final double[] uB = getUpperBound();
+private void checkParameters() {
+    final double[] init = getStartPoint();
+    final double[] lB = getLowerBound();
+    final double[] uB = getUpperBound();
+
+    // Check whether there is at least one finite bound value.
+    boolean hasFiniteBounds = false;
+    for (int i = 0; i < lB.length; i++) {
+        if (!Double.isInfinite(lB[i]) || !Double.isInfinite(uB[i])) {
+            hasFiniteBounds = true;
+            break;
+        }
+    }
 
-        // Checks whether there is at least one finite bound value.
-        boolean hasFiniteBounds = false;
+    if (hasFiniteBounds) {
+        // Check whether there is at least one infinite bound value.
+        boolean hasInfiniteBounds = false;
         for (int i = 0; i < lB.length; i++) {
-            if (!Double.isInfinite(lB[i]) ||
-                !Double.isInfinite(uB[i])) {
-                hasFiniteBounds = true;
+            if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {
+                hasInfiniteBounds = true;
                 break;
             }
         }
-        // Checks whether there is at least one infinite bound value.
-        boolean hasInfiniteBounds = false;
-        if (hasFiniteBounds) {
-            for (int i = 0; i < lB.length; i++) {
-                if (Double.isInfinite(lB[i]) ||
-                    Double.isInfinite(uB[i])) {
-                    hasInfiniteBounds = true;
-                    break;
-                }
-            }
 
-            if (hasInfiniteBounds) {
-                // If there is at least one finite bound, none can be infinite,
-                // because mixed cases are not supported by the current code.
-                throw new MathUnsupportedOperationException();
-            } else {
-                // Convert API to internal handling of boundaries.
-                boundaries = new double[2][];
-                boundaries[0] = lB;
-                boundaries[1] = uB;
+        if (hasInfiniteBounds) {
+            // If there is at least one finite bound, none can be infinite,
+            // because mixed cases are not supported by the current code.
+            throw new MathUnsupportedOperationException();
+        } else {
+            boundaries = new double[2][];
+            boundaries[0] = lB;
+            boundaries[1] = uB;
 
-                // Abort early if the normalization will overflow (cf. "encode" method).
+            // Check if the difference between the upper and lower bound exceeds the range 
+            // of double, taking into account precision loss due to floating-point arithmetic.
+            for (int i = 0; i < lB.length; i++) {
+                if (Double.isInfinite(uB[i] - lB[i]) || Math.abs(uB[i] - lB[i]) >= Double.MAX_VALUE / (1 << 52)) {
+                    throw new NumberIsTooLargeException(uB[i], lB[i], true);
+                }
             }
-        } else {
-            // Convert API to internal handling of boundaries.
-            boundaries = null;
         }
+    } else {
+        boundaries = null;
+    }
 
-        if (inputSigma != null) {
-            if (inputSigma.length != init.length) {
-                throw new DimensionMismatchException(inputSigma.length, init.length);
+    if (inputSigma != null) {
+        if (inputSigma.length != init.length) {
+            throw new DimensionMismatchException(inputSigma.length, init.length);
+        }
+        for (int i = 0; i < init.length; i++) {
+            if (inputSigma[i] < 0) {
+                throw new NotPositiveException(inputSigma[i]);
             }
-            for (int i = 0; i < init.length; i++) {
-                if (inputSigma[i] < 0) {
-                    throw new NotPositiveException(inputSigma[i]);
-                }
-                if (boundaries != null) {
-                    if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {
-                        throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);
-                    }
+            if (boundaries != null) {
+                if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {
+                    throw new OutOfRangeException(inputSigma[i], 0d, boundaries[1][i] - boundaries[0][i]);
                 }
             }
         }
     }
+}
 
     /**
      * Initialization of the dynamic search parameters