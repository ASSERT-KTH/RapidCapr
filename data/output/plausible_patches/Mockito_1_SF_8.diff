diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java
index 7b877b1e2..c2cf46295 100644
--- a/src/org/mockito/internal/invocation/InvocationMatcher.java
+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java
@@ -117,37 +117,31 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF
         return invocation.getLocation();
     }
 
-    public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
-        } else {
-            for (int position = 0; position < matchers.size(); position++) {
-                Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+public void captureArgumentsFrom(Invocation invocation) {
+    Object[] rawArguments = invocation.getRawArguments();
+    int n = Math.min(matchers.size(), rawArguments.length);
+    for (int i = 0; i < n; i++) {
+        Matcher m = matchers.get(i);
+        Object a = rawArguments[i];
+        if (m instanceof CapturesArguments) {
+            if (invocation.getMethod().isVarArgs() && i == invocation.getMethod().getParameterCount() - 1 && m instanceof VarargMatcher) {
+                Object varArgArray = a;
+                for (int j = 0; j < Array.getLength(varArgArray); j++) {
+                    ((CapturesArguments) m).captureFrom(Array.get(varArgArray, j));
                 }
+                return;
+            } else {
+                ((CapturesArguments) m).captureFrom(a);
             }
         }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
     }
+    for (int i = n; i < matchers.size(); i++) {
+        Matcher m = matchers.get(i);
+        if (m instanceof CapturesArguments) {
+            ((CapturesArguments) m).captureFrom(null);
+        }
+    }
+}
 
     private boolean isVarargMatcher(Matcher matcher) {
         Matcher actualMatcher = matcher;