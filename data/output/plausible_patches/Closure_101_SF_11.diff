diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java
index bdf55921..1e254dae 100644
--- a/src/com/google/javascript/jscomp/CommandLineRunner.java
+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java
@@ -416,27 +416,40 @@ public class CommandLineRunner extends
   }
 
   @Override
-  protected CompilerOptions createOptions() {
+protected CompilerOptions createOptions() {
     CompilerOptions options = new CompilerOptions();
     options.setCodingConvention(new ClosureCodingConvention());
-    CompilationLevel level = flags.compilation_level;
-    level.setOptionsForCompilationLevel(options);
-    if (flags.debug) {
-      level.setDebugOptionsForCompilationLevel(options);
-    }
 
-    WarningLevel wLevel = flags.warning_level;
-    wLevel.setOptionsForWarningLevel(options);
-    for (FormattingOption formattingOption : flags.formatting) {
-      formattingOption.applyToOptions(options);
-    }
-    if (flags.process_closure_primitives) {
-      options.closurePass = true;
+    // Fix the bug: add null checks and set closurePass value accordingly
+    if (flags != null) {
+        CompilationLevel level = flags.compilation_level;
+        if (level != null) {
+          level.setOptionsForCompilationLevel(options);
+          if (flags.debug) {
+              level.setDebugOptionsForCompilationLevel(options);
+          }
+        }
+
+        WarningLevel wLevel = flags.warning_level;
+        if (wLevel != null) {
+          wLevel.setOptionsForWarningLevel(options);
+        }
+
+        List<FormattingOption> formattingOptions = flags.formatting;
+        if (formattingOptions != null) {
+          for (FormattingOption formattingOption : formattingOptions) {
+              formattingOption.applyToOptions(options);
+          }
+        }
+
+        options.closurePass = flags.process_closure_primitives;
+    } else {
+        options.closurePass = false;
     }
 
     initOptionsFromFlags(options);
     return options;
-  }
+}
 
   @Override
   protected Compiler createCompiler() {