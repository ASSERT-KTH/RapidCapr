diff --git a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
index 27691272f..93a169c19 100644
--- a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java
@@ -264,9 +264,24 @@ public class HypergeometricDistribution extends AbstractIntegerDistribution {
      * For population size {@code N}, number of successes {@code m}, and sample
      * size {@code n}, the mean is {@code n * m / N}.
      */
-    public double getNumericalMean() {
-        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
+public double getNumericalMean() {
+    if (getPopulationSize() <= 0) { // invalid population size
+        return Double.NaN; // return NaN
+    } else if (getSampleSize() < 0 || getNumberOfSuccesses() < 0) { // invalid sample size or number of successes
+        return Double.NaN; // return NaN
+    } else if (getSampleSize() == 0 || getNumberOfSuccesses() == 0) { // either the sample size or number of successes is zero
+        return 0.0; // return zero
+    } else {
+        double sampleSize = (double) getSampleSize(); // convert to double
+        double numSuccesses = (double) getNumberOfSuccesses(); // convert to double
+        double populationSize = (double) getPopulationSize(); // convert to double
+        if (numSuccesses > sampleSize || sampleSize > populationSize) { // invalid values
+            return Double.NaN; // return NaN
+        } else {
+            return sampleSize * numSuccesses / populationSize; // calculate mean
+        }
     }
+}
 
     /**
      * {@inheritDoc}