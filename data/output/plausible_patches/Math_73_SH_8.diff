diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
index 8142b5edb..15c42b48c 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
@@ -133,6 +133,22 @@ public class BrentSolver extends UnivariateRealSolverImpl {
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
+        // check if endpoints or initial guess is NaN or infinite
+        if (!Double.isFinite(yInitial) || !Double.isFinite(yMin) || !Double.isFinite(yMax)) {
+            throw new IllegalArgumentException("Function values at endpoints or initial guess are infinite or NaN. Endpoints: [" + min + "," + max + "], Values: [" + yMin + "," + yMax + "], Initial guess value: " + yInitial);
+        }
+
+        // check if initial guess is equal to min or max
+        if (Double.compare(yInitial, yMin) == 0 || Double.compare(yInitial, yMax) == 0) {
+            setResult(yInitial, 0);
+            return result;
+        }
+
+        // catch cases where min/max bracket the root directly, or if the initial guess does not bracket the root, otherwise
+        // proceed with full Brent algorithm
+        if ((yMin >= 0 && yMax >= 0) || (yMin <= 0 && yMax <= 0) || (yInitial >= yMax && yInitial >= yMin) || (yInitial <= yMax && yInitial <= yMin)) {
+            throw new IllegalArgumentException("Function values at endpoints do not have different signs or the initial guess does not bracket the root. Endpoints: [" + min + "," + max + "], Values: [" + yMin + "," + yMax + "], Initial guess value: " + yInitial);
+        }
 
         // full Brent algorithm starting with provided initial guess
         return solve(f, min, yMin, max, yMax, initial, yInitial);