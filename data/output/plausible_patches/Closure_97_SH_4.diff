diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index d6c194a3..2e6c0de2 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -695,7 +695,24 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
           // JavaScript handles zero shifts on signed numbers differently than
           // Java as an Java int can not represent the unsigned 32-bit number
           // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+switch (n.getType()) {
+  case Token.LSH:
+    result = (long)lvalInt << rvalInt;
+    break;
+  case Token.RSH:
+    result = (long)lvalInt >> rvalInt;
+    break;
+  case Token.URSH:
+    // JavaScript handles zero shifts on signed numbers differently than
+    // Java as an Java int can not represent the unsigned 32-bit number
+    // where JavaScript can so use a long here.
+    long lvalLong = lvalInt >= 0 ? lvalInt : (long)(lvalInt & Integer.MAX_VALUE) + 0x80000000L;
+    result = lvalLong >>> rvalInt;
+    break;
+  default:
+    throw new AssertionError("Unknown shift operator: " +
+        Node.tokenToName(n.getType()));
+}
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +