diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
index 4a1d8459..69d93142 100644
--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
@@ -1316,108 +1316,127 @@ public class NumberUtils {
      * @param str  the <code>String</code> to check
      * @return <code>true</code> if the string is a correctly formatted number
      */
-    public static boolean isNumber(String str) {
-        if (StringUtils.isEmpty(str)) {
-            return false;
-        }
-        char[] chars = str.toCharArray();
-        int sz = chars.length;
-        boolean hasExp = false;
-        boolean hasDecPoint = false;
-        boolean allowSigns = false;
-        boolean foundDigit = false;
-        // deal with any possible sign up front
-        int start = (chars[0] == '-') ? 1 : 0;
-        if (sz > start + 1) {
-            if (chars[start] == '0' && chars[start + 1] == 'x') {
-                int i = start + 2;
-                if (i == sz) {
-                    return false; // str == "0x"
+public static boolean isNumber(String str) {
+    if (StringUtils.isEmpty(str)) {
+        return false;
+    }
+    int sz = str.length();
+    boolean hasExp = false;
+    boolean hasDecPoint = false;
+    boolean allowSigns = true;
+    boolean foundDigit = false;
+    int start = 0;
+    if (sz > 1 && str.charAt(0) == '-') {
+        start = 1;
+        allowSigns = false;
+    }
+    if (sz > start + 1 && str.charAt(start) == '0') {
+        if (str.charAt(start + 1) == 'x' || str.charAt(start + 1) == 'X') {
+            int i = start + 2;
+            if (i == sz) {
+                return false; // str == "0x" || str == "0X"
+            }
+            // checking hex (it can't be anything else)
+            for (; i < str.length(); i++) {
+                if ((str.charAt(i) < '0' || str.charAt(i) > '9')
+                        && (str.charAt(i) < 'a' || str.charAt(i) > 'f')
+                        && (str.charAt(i) < 'A' || str.charAt(i) > 'F')) {
+                    return false;
                 }
-                // checking hex (it can't be anything else)
-                for (; i < chars.length; i++) {
-                    if ((chars[i] < '0' || chars[i] > '9')
-                        && (chars[i] < 'a' || chars[i] > 'f')
-                        && (chars[i] < 'A' || chars[i] > 'F')) {
+            }
+            return true;
+        } else if(Character.isDigit(str.charAt(start + 1))) {
+            // leading zero implies octal or binary value
+            int i = start + 1;
+            while (i < sz) {
+                if (str.charAt(i) == '.') {
+                    if (hasDecPoint || hasExp) {
+                        return false;
+                    }
+                    hasDecPoint = true;
+                } else if (str.charAt(i) == 'e' || str.charAt(i) == 'E') {
+                    if (hasExp) {
+                        return false;
+                    }
+                    if (!foundDigit) {
+                        return false;
+                    }
+                    hasExp = true;
+                    allowSigns = true;
+                } else if (str.charAt(i) == '+' || str.charAt(i) == '-') {
+                    if (!allowSigns) {
                         return false;
                     }
+                    allowSigns = false;
+                    foundDigit = false;
+                } else if (Character.isDigit(str.charAt(i))) {
+                    foundDigit = true;
+                    allowSigns = false;
+                } else if (Character.isLetter(str.charAt(i))) {
+                    return false;
                 }
-                return true;
+                i++;
             }
+            return foundDigit;
+        } else {
+            return false;
         }
-        sz--; // don't want to loop to the last char, check it afterwords
-              // for type qualifiers
-        int i = start;
-        // loop to the next to last char or to the last char if we need another digit to
-        // make a valid number (e.g. chars[0..5] = "1234E")
-        while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
-            if (chars[i] >= '0' && chars[i] <= '9') {
-                foundDigit = true;
-                allowSigns = false;
+    }
+    sz--;
+    int i = start;
+    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
+        if (Character.isDigit(str.charAt(i))) {
+            foundDigit = true;
+            allowSigns = false;
 
-            } else if (chars[i] == '.') {
-                if (hasDecPoint || hasExp) {
-                    // two decimal points or dec in exponent   
-                    return false;
-                }
-                hasDecPoint = true;
-            } else if (chars[i] == 'e' || chars[i] == 'E') {
-                // we've already taken care of hex.
-                if (hasExp) {
-                    // two E's
-                    return false;
-                }
-                if (!foundDigit) {
-                    return false;
-                }
-                hasExp = true;
-                allowSigns = true;
-            } else if (chars[i] == '+' || chars[i] == '-') {
-                if (!allowSigns) {
-                    return false;
-                }
-                allowSigns = false;
-                foundDigit = false; // we need a digit after the E
-            } else {
+        } else if (str.charAt(i) == '.') {
+            if (hasDecPoint || hasExp) {
                 return false;
             }
-            i++;
-        }
-        if (i < chars.length) {
-            if (chars[i] >= '0' && chars[i] <= '9') {
-                // no type qualifier, OK
-                return true;
-            }
-            if (chars[i] == 'e' || chars[i] == 'E') {
-                // can't have an E at the last byte
+            hasDecPoint = true;
+        } else if (str.charAt(i) == 'e' || str.charAt(i) == 'E') {
+            if (hasExp) {
                 return false;
             }
-            if (chars[i] == '.') {
-                if (hasDecPoint || hasExp) {
-                    // two decimal points or dec in exponent
-                    return false;
-                }
-                // single trailing decimal point after non-exponent is ok
-                return foundDigit;
-            }
-            if (!allowSigns
-                && (chars[i] == 'd'
-                    || chars[i] == 'D'
-                    || chars[i] == 'f'
-                    || chars[i] == 'F')) {
-                return foundDigit;
+            if (!foundDigit) {
+                return false;
             }
-            if (chars[i] == 'l'
-                || chars[i] == 'L') {
-                // not allowing L with an exponent or decimal point
-                return foundDigit && !hasExp;
+            hasExp = true;
+            allowSigns = true;
+        } else if (str.charAt(i) == '+' || str.charAt(i) == '-') {
+            if (!allowSigns) {
+                return false;
             }
-            // last character is illegal
+            allowSigns = false;
+            foundDigit = false;
+        } else {
             return false;
         }
-        // allowSigns is true iff the val ends in 'E'
-        // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
-        return !allowSigns && foundDigit;
+        i++;
     }
+    if (i < str.length()) {
+        if (Character.isDigit(str.charAt(i))) {
+            return true;
+        }
+        if (str.charAt(i) == 'e' || str.charAt(i) == 'E') {
+            return false;
+        }
+        if (str.charAt(i) == '.') {
+            if (hasDecPoint || hasExp) {
+                return false;
+            }
+            return foundDigit;
+        }
+        if (!allowSigns && (str.charAt(i) == 'd' || str.charAt(i) == 'D'
+                || str.charAt(i) == 'f' || str.charAt(i) == 'F')) {
+            return foundDigit;
+        }
+        if (str.charAt(i) == 'l' || str.charAt(i) == 'L') {
+            return foundDigit && !hasExp && !hasDecPoint;
+        }
+        return false;
+    }
+    return !allowSigns && foundDigit;
+}
     
 }