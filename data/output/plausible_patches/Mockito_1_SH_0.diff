diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java
index 7b877b1e2..f9eb18c5a 100644
--- a/src/org/mockito/internal/invocation/InvocationMatcher.java
+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java
@@ -116,11 +116,39 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF
     public Location getLocation() {
         return invocation.getLocation();
     }
-
     public void captureArgumentsFrom(Invocation invocation) {
         if (invocation.getMethod().isVarArgs()) {
             int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+        Object[] rawArguments = invocation.getRawArguments();
+        Object varArgObject = null;
+        if (isVariableArgument(invocation, indexOfVararg)) {
+            varArgObject = rawArguments[indexOfVararg];
+            // Need to create object array for primitives and null values
+            if (varArgObject != null && varArgObject.getClass().isArray()) {
+                int varArgLength = Array.getLength(varArgObject);
+                Object[] varArgArray = new Object[varArgLength];
+                for (int i = 0; i < varArgLength; i++) {
+                    varArgArray[i] = Array.get(varArgObject, i);
+                }
+                varArgObject = varArgArray;
+            } else if (varArgObject == null) {
+                varArgObject = new Object[]{null};
+            } else {
+                varArgObject = new Object[]{varArgObject};
+            }
+        }
+        for (int i = 0; i < matchers.size(); i++) {
+            Matcher m = matchers.get(i);
+            if (m instanceof CapturesArguments) {
+                Object arg;
+                if (i == indexOfVararg && isVarargMatcher(m)) {
+                    arg = varArgObject;
+                } else {
+                    arg = invocation.getArgumentAt(i, Object.class);
+                }
+                ((CapturesArguments) m).captureFrom(arg);
+            }
+        }
 
         } else {
             for (int position = 0; position < matchers.size(); position++) {