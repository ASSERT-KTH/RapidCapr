diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index dd78f900..635d6571 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -2462,7 +2462,42 @@ public final class NodeUtil {
         // TODO(nicksantos): This needs to be changed so that it
         // returns true iff we're sure the value was never aliased from inside
         // the constructor (similar to callHasLocalResult)
-        return true;
+switch (value.getType()) {
+      case Token.ASSIGN:
+        // A result that is aliased by a non-local name, is the effectively the
+        // same as returning a non-local name, but this doesn't matter if the
+        // value is immutable.
+        return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value)
+            && evaluatesToLocalValue(value.getLastChild(), locals));
+      case Token.COMMA:
+        return evaluatesToLocalValue(value.getLastChild(), locals);
+      case Token.AND:
+      case Token.OR:
+        return evaluatesToLocalValue(value.getFirstChild(), locals)
+            && evaluatesToLocalValue(value.getLastChild(), locals);
+      case Token.HOOK:
+        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
+            && evaluatesToLocalValue(value.getLastChild(), locals);
+      case Token.INC:
+      case Token.DEC:
+        return value.getBooleanProp(Node.INCRDECR_PROP) && evaluatesToLocalValue(value.getFirstChild(), locals);
+      case Token.THIS:
+        return locals.apply(value);
+      case Token.NAME:
+      case Token.GETELEM:
+      case Token.GETPROP:
+        return isImmutableValue(value) || locals.apply(value);
+      case Token.CALL:
+        return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
+      default:
+        // Interpret the value as a local value only if all its children are local.
+        for (Node child : value.children()) {
+          if (!evaluatesToLocalValue(child, locals)) {
+            return false;
+          }
+        }
+        return isImmutableValue(value) || locals.apply(value);
+    }
       case Token.FUNCTION:
       case Token.REGEXP:
       case Token.ARRAYLIT: