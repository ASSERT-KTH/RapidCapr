diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index d6c194a3..666ef455 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -650,35 +650,32 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
    * Try to fold shift operations
    */
   private Node tryFoldShift(Node n, Node left, Node right) {
-    if (left.getType() == Token.NUMBER &&
-        right.getType() == Token.NUMBER) {
-
+    if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {
       double result;
       double lval = left.getDouble();
       double rval = right.getDouble();
 
-      // check ranges.  We do not do anything that would clip the double to
-      // a 32-bit range, since the user likely does not intend that.
+      // check ranges. We do not do anything that would clip the double to a 32-bit range,
+      // since the user likely does not intend that.
       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
         error(BITWISE_OPERAND_OUT_OF_RANGE, left);
         return n;
       }
 
-      // only the lower 5 bits are used when shifting, so don't do anything
-      // if the shift amount is outside [0,32)
+      // Only the lower 5 bits of the shift value are used when shifting,
+      // so do nothing if the shift amount is outside [0, 32)
       if (!(rval >= 0 && rval < 32)) {
         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
         return n;
       }
 
-      // Convert the numbers to ints
-      int lvalInt = (int) lval;
+      long lvalInt = (long) lval;
       if (lvalInt != lval) {
         error(FRACTIONAL_BITWISE_OPERAND, left);
         return n;
       }
 
-      int rvalInt = (int) rval;
+      long rvalInt = (long) rval;
       if (rvalInt != rval) {
         error(FRACTIONAL_BITWISE_OPERAND, right);
         return n;
@@ -692,14 +689,13 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
           result = lvalInt >> rvalInt;
           break;
         case Token.URSH:
-          // JavaScript handles zero shifts on signed numbers differently than
-          // Java as an Java int can not represent the unsigned 32-bit number
-          // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+          // In Java, the >>> operator is treated as a signed right shift,
+          // so we need to convert the result back to an unsigned value
+          result = Long.remainderUnsigned(lvalInt, 1L << 32) >>> rvalInt;
           break;
         default:
-          throw new AssertionError("Unknown shift operator: " +
-              Node.tokenToName(n.getType()));
+          throw new AssertionError(String.format("Unknown shift operator: %s",
+              Node.tokenToName(n.getType())));
       }
 
       Node newNumber = Node.newNumber(result);