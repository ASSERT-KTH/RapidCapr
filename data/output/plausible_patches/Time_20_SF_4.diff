diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
index 558a5864..da7f7533 100644
--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -2537,17 +2537,23 @@ public class DateTimeFormatterBuilder {
             return MAX_LENGTH;
         }
 
-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {
-            String str = text.substring(position);
-            for (String id : ALL_IDS) {
-                if (str.startsWith(id)) {
-                    bucket.setZone(DateTimeZone.forID(id));
-                    return position + id.length();
-                }
+public int parseInto(DateTimeParserBucket bucket, String text, int position) {
+    String str = text.substring(position);
+    for (String id : ALL_IDS) {
+        int idLen = id.length();
+        if (idLen <= str.length() && str.regionMatches(true, 0, id, 0, idLen) &&
+                (idLen == str.length() || str.charAt(idLen) == '/' || Character.isWhitespace(str.charAt(idLen)))) {
+            // check that the following character is not part of a longer time zone ID
+            char nextChar = idLen < str.length() ? str.charAt(idLen) : '\0';
+            if (!Character.isLetterOrDigit(nextChar) && nextChar != '_') {
+                bucket.setZone(DateTimeZone.forID(id));
+                return position + idLen;
             }
-            return ~position;
         }
     }
+    return ~position;
+}
+    }
 
     //-----------------------------------------------------------------------
     static class Composite