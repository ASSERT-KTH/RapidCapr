diff --git a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java
index b73ac9d3e..99bc33406 100644
--- a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java
+++ b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java
@@ -104,16 +104,16 @@ public class KMeansPlusPlusClusterer<T extends Clusterable<T>> {
                 final T newCenter;
                 if (cluster.getPoints().isEmpty()) {
                     switch (emptyStrategy) {
-                        case LARGEST_VARIANCE :
+                        case LARGEST_VARIANCE:
                             newCenter = getPointFromLargestVarianceCluster(clusters);
                             break;
-                        case LARGEST_POINTS_NUMBER :
+                        case LARGEST_POINTS_NUMBER:
                             newCenter = getPointFromLargestNumberCluster(clusters);
                             break;
-                        case FARTHEST_POINT :
+                        case FARTHEST_POINT:
                             newCenter = getFarthestPoint(clusters);
                             break;
-                        default :
+                        default:
                             throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
                     }
                     clusteringChanged = true;
@@ -137,12 +137,12 @@ public class KMeansPlusPlusClusterer<T extends Clusterable<T>> {
     /**
      * Adds the given points to the closest {@link Cluster}.
      *
-     * @param <T> type of the points to cluster
+     * @param <T>      type of the points to cluster
      * @param clusters the {@link Cluster}s to add the points to
-     * @param points the points to add to the given {@link Cluster}s
+     * @param points   the points to add to the given {@link Cluster}s
      */
     private static <T extends Clusterable<T>> void
-        assignPointsToClusters(final Collection<Cluster<T>> clusters, final Collection<T> points) {
+    assignPointsToClusters(final Collection<Cluster<T>> clusters, final Collection<T> points) {
         for (final T p : points) {
             Cluster<T> cluster = getNearestCluster(clusters, p);
             cluster.addPoint(p);
@@ -152,14 +152,14 @@ public class KMeansPlusPlusClusterer<T extends Clusterable<T>> {
     /**
      * Use K-means++ to choose the initial centers.
      *
-     * @param <T> type of the points to cluster
+     * @param <T>    type of the points to cluster
      * @param points the points to choose the initial centers from
-     * @param k the number of centers to choose
+     * @param k      the number of centers to choose
      * @param random random generator to use
      * @return the initial centers
      */
     private static <T extends Clusterable<T>> List<Cluster<T>>
-        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
+    chooseInitialCenters(final Collection<T> points, final int k, final Random random) {
 
         final List<T> pointSet = new ArrayList<T>(points);
         final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();
@@ -168,29 +168,24 @@ public class KMeansPlusPlusClusterer<T extends Clusterable<T>> {
         final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));
         resultSet.add(new Cluster<T>(firstPoint));
 
-        final double[] dx2 = new double[pointSet.size()];
         while (resultSet.size() < k) {
-            // For each data point x, compute D(x), the distance between x and
-            // the nearest center that has already been chosen.
-            int sum = 0;
-            for (int i = 0; i < pointSet.size(); i++) {
-                final T p = pointSet.get(i);
-                final Cluster<T> nearest = getNearestCluster(resultSet, p);
-                final double d = p.distanceFrom(nearest.getCenter());
-                sum += d * d;
-                dx2[i] = sum;
-            }
-
-            // Add one new data point as a center. Each point x is chosen with
-            // probability proportional to D(x)2
-            final double r = random.nextDouble() * sum;
-            for (int i = 0 ; i < dx2.length; i++) {
-                if (dx2[i] >= r) {
-                    final T p = pointSet.remove(i);
-                    resultSet.add(new Cluster<T>(p));
-                    break;
+            T farthestPoint = null;
+            double maxDistance = Double.NEGATIVE_INFINITY;
+            for (final T point : pointSet) {
+                double minClusterDistance = Double.POSITIVE_INFINITY;
+                for (final Cluster<T> cluster : resultSet) {
+                    final double distance = point.distanceFrom(cluster.getCenter());
+                    if (distance < minClusterDistance) {
+                        minClusterDistance = distance;
+                    }
+                }
+                if (minClusterDistance > maxDistance) {
+                    maxDistance = minClusterDistance;
+                    farthestPoint = point;
                 }
             }
+            resultSet.add(new Cluster<T>(farthestPoint));
+            pointSet.remove(farthestPoint);
         }
 
         return resultSet;