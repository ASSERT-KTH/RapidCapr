diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java
index 56c9ffebc..52d86c4fd 100644
--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java
+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java
@@ -213,25 +213,29 @@ public class MultidimensionalCounter implements Iterable<Integer> {
      * @throws OutOfRangeException if {@code index} is not between
      * {@code 0} and the value returned by {@link #getSize()} (excluded).
      */
-    public int[] getCounts(int index) {
-        if (index < 0 ||
-            index >= totalSize) {
-            throw new OutOfRangeException(index, 0, totalSize);
-        }
+public int[] getCounts(int index) {
+    if (index < 0 || index >= totalSize) {
+        throw new OutOfRangeException(index, 0, totalSize);
+    }
 
-        final int[] indices = new int[dimension];
+    final int[] indices = new int[dimension];
 
-        int count = 0;
-        for (int i = 0; i < last; i++) {
-            int idx = 0;
-            final int offset = uniCounterOffset[i];
-            while (count <= index) {
-                count += offset;
-                ++idx;
-            }
-            --idx;
-            count -= offset;
-            indices[i] = idx;
+    int count = 0;
+    int i;
+    for (i = 0; i < last; i++) {
+        final int offset = uniCounterOffset[i];
+        final int q = (index - count) / offset;
+        if (q == dimension) {
+            break;
+        }
+        indices[i] = q;
+        count += offset * q;
+    }
+    if (i == last) {
+        indices[last] = index - count;
+    } else {
+        for (int j = i; j < last; j++) {
+            indices[j] = 0;
         }
 
         int idx = 1;
@@ -241,10 +245,11 @@ public class MultidimensionalCounter implements Iterable<Integer> {
         }
         --idx;
         indices[last] = idx;
-
-        return indices;
     }
 
+    return indices;
+}
+
     /**
      * Convert to unidimensional counter.
      *