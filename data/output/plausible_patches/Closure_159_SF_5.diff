diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java
index 814a07f4..59c334f0 100644
--- a/src/com/google/javascript/jscomp/InlineFunctions.java
+++ b/src/com/google/javascript/jscomp/InlineFunctions.java
@@ -770,19 +770,23 @@ class InlineFunctions implements SpecializationAwareCompilerPass {
   /**
    * @see #findCalledFunctions(Node)
    */
-  private void findCalledFunctions(
-      Node node, Set<String> changed) {
+  private void findCalledFunctions(Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
     // For each referenced function, add a new reference
     if (node.getType() == Token.CALL) {
       Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
+      if (child != null && child.getType() == Token.NAME) {
         changed.add(child.getString());
       }
-    }
-
-    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
-      findCalledFunctions(c, changed);
+      child = child.getNext();
+      while (child != null) {
+        findCalledFunctions(child, changed);
+        child = child.getNext();
+      }
+    } else {
+      for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
+        findCalledFunctions(c, changed);
+      }
     }
   }
 