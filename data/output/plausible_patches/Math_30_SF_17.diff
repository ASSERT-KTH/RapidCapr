diff --git a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java
index ce694ce8f..cfcdd1bd5 100644
--- a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java
+++ b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java
@@ -165,23 +165,28 @@ public class MannWhitneyUTest {
      * @throws MaxCountExceededException if the maximum number of
      * iterations is exceeded
      */
-    private double calculateAsymptoticPValue(final double Umin,
-                                             final int n1,
-                                             final int n2)
+private double calculateAsymptoticPValue(final double Umin, final int n1, final int n2)
         throws ConvergenceException, MaxCountExceededException {
 
-        final int n1n2prod = n1 * n2;
+    double n1n2prod = n1 * n2;
 
-        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
-        final double EU = n1n2prod / 2.0;
-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
+    // Use an approximation to the normal distribution that is valid for large datasets
+    double mu = n1n2prod / 2.0;
+    double sigmaSquared = n1n2prod * (n1 + n2 + 1.0) / 12.0;
 
-        final double z = (Umin - EU) / FastMath.sqrt(VarU);
+    // Check for cases where the variance is zero
+    if (sigmaSquared == 0.0) {
+        return Double.NaN;
+    }
 
-        final NormalDistribution standardNormal = new NormalDistribution(0, 1);
+    double sigma = Math.sqrt(sigmaSquared);
+    double z = (Umin - mu) / sigma;
 
-        return 2 * standardNormal.cumulativeProbability(z);
-    }
+    NormalDistribution standardNormal = new NormalDistribution();
+    double pValue = 2.0 * standardNormal.cumulativeProbability(-Math.abs(z));
+
+    return pValue;
+}
 
     /**
      * Returns the asymptotic <i>observed significance level</i>, or <a href=