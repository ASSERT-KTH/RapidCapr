diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
index bfa17074..9fe8331d 100644
--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
@@ -218,12 +218,21 @@ class PeepholeSubstituteAlternateSyntax
       // http://code.google.com/p/closure-compiler/issues/detail?id=759
       Node value = callTarget.getNext();
       if (value != null) {
-        Node addition = IR.add(
-            IR.string("").srcref(callTarget),
-            value.detachFromParent());
-        n.getParent().replaceChild(n, addition);
-        reportCodeChange();
-        return addition;
+        if (value.getNext() == null && NodeUtil.isImmutableValue(value)) {
+          Node addition = IR.add(
+              IR.string("").srcref(callTarget),
+              value.detachFromParent());
+          n.getParent().replaceChild(n, addition);
+          reportCodeChange();
+          return addition;
+        } else if (NodeUtil.isImmutableValue(value) && NodeUtil.isImmutableValue(value.getNext())) {
+          // Do the string concatenation here to avoid creating a temporary '+' node
+          String stringConcat = value.getString() + value.getNext().getString();
+          Node strNode = IR.string(stringConcat).srcref(n);
+          n.getParent().replaceChild(n, strNode);
+          reportCodeChange();
+          return strNode;
+        }
       }
     }
     return n;