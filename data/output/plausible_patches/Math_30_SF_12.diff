diff --git a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java
index ce694ce8f..f26896dfb 100644
--- a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java
+++ b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java
@@ -165,23 +165,22 @@ public class MannWhitneyUTest {
      * @throws MaxCountExceededException if the maximum number of
      * iterations is exceeded
      */
-    private double calculateAsymptoticPValue(final double Umin,
-                                             final int n1,
-                                             final int n2)
+private double calculateAsymptoticPValue(final double Umin, final int n1, final int n2)
         throws ConvergenceException, MaxCountExceededException {
 
-        final int n1n2prod = n1 * n2;
+    final double N1 = (double) n1;
+    final double N2 = (double) n2;
 
-        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
-        final double EU = n1n2prod / 2.0;
-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
+    // Use an approximation to the normal distribution that is valid for large datasets
+    final double expectedValue = (N1 * N2) / 2.0;
+    final double variance = (N1 * N2 * (N1 + N2 + 1.0)) / 12.0;
+    final double standardDeviation = Math.sqrt(variance);
+    final double zScore = (Umin - expectedValue) / standardDeviation;
 
-        final double z = (Umin - EU) / FastMath.sqrt(VarU);
+    final NormalDistribution standardNormal = new NormalDistribution();
 
-        final NormalDistribution standardNormal = new NormalDistribution(0, 1);
-
-        return 2 * standardNormal.cumulativeProbability(z);
-    }
+    return 2.0 * standardNormal.cumulativeProbability(-Math.abs(zScore));
+}
 
     /**
      * Returns the asymptotic <i>observed significance level</i>, or <a href=