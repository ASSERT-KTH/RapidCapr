diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java
index 42c9ab38..bb3ff257 100644
--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -705,14 +705,37 @@ class CodeGenerator {
    * @return Whether the Node is a DO or FUNCTION (with or without
    * labels).
    */
-  private boolean isOneExactlyFunctionOrDo(Node n) {
-        // For labels with block children, we need to ensure that a
-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs 
-        // are skipped. 
-          // Either a empty statement or an block with more than one child,
-          // way it isn't a FUNCTION or DO.
-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
-  }
+private boolean isOneExactlyFunctionOrDo(Node n) {
+    if (n.getType() == Token.LABEL) {
+        Node child = n.getFirstChild().getNext();
+        if (child.getType() == Token.BLOCK) {
+            boolean foundFunctionOrDo = false;
+            for (Node grandChild = child.getFirstChild(); grandChild != null; grandChild = grandChild.getNext()) {
+                if (isOneExactlyFunctionOrDo(grandChild)) {
+                    if (foundFunctionOrDo) {
+                        return false;
+                    } else {
+                        foundFunctionOrDo = true;
+                    }
+                }
+            }
+            return foundFunctionOrDo;
+        } else {
+            return isOneExactlyFunctionOrDo(child);
+        }
+    } else if (n.getType() == Token.BLOCK) {
+        if (!n.hasChildren()) {
+            // An empty statement is a valid 'DO' statement
+            return true;
+        } else if (n.getFirstChild() == n.getLastChild()) {
+            return isOneExactlyFunctionOrDo(n.getFirstChild());
+        }
+        // If there's more than one child in the block, it's not a valid 'DO' or 'FUNCTION'
+        return false;
+    } else {
+        return n.getType() == Token.FUNCTION || n.getType() == Token.DO;
+    }
+}
 
   /**
    * Adds a node at the left-hand side of an expression. Unlike