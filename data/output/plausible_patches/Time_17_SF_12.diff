diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java
index 74a3802a..9ecf6690 100644
--- a/src/main/java/org/joda/time/DateTimeZone.java
+++ b/src/main/java/org/joda/time/DateTimeZone.java
@@ -1160,24 +1160,38 @@ public abstract class DateTimeZone implements Serializable {
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
-    public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+public long adjustOffset(long instant, boolean earlierOrLater) {
+    // evaluate 2 hours before and after to work out if anything is happening
+    long instantBefore = instant - 2 * DateTimeConstants.MILLIS_PER_HOUR;
+    long instantAfter = instant + 2 * DateTimeConstants.MILLIS_PER_HOUR;
+    long localBefore = convertUTCToLocal(instantBefore);
+    long localAfter = convertUTCToLocal(instantAfter);
+    long local = convertUTCToLocal(instant);
+
+    if (localBefore == localAfter) {
+        // not an overlap (less than is a gap, equal is normal case)
+        return instant;
+    }
+
+    if (earlierOrLater) {
+        // prefer later offset
+        if (local == localBefore) {
+            return convertLocalToUTC(localAfter, false, instantAfter);
+        } else if (local == localAfter) {
+            return convertLocalToUTC(local, false, instant);
+        }
+    } else {
+        // prefer earlier offset
+        if (local == localBefore) {
+            return convertLocalToUTC(local, false, instant);
+        } else if (local == localAfter) {
+            return convertLocalToUTC(localBefore, false, instantBefore);
         }
-        
-        // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
-        
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
     }
+
+    // not in overlap, either further into DST or out of DST
+    return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
+}
 //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + " " + new DateTime(transitionStart, this));
 
     //-----------------------------------------------------------------------