diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java
index 4381487c..fbdfeda6 100644
--- a/src/com/google/javascript/jscomp/CodeConsumer.java
+++ b/src/com/google/javascript/jscomp/CodeConsumer.java
@@ -237,34 +237,36 @@ abstract class CodeConsumer {
     }
   }
 
-  void addNumber(double x) {
-    // This is not pretty printing. This is to prevent misparsing of x- -4 as
-    // x--4 (which is a syntax error).
-    char prev = getLastChar();
-    boolean negativeZero = isNegativeZero(x);
-    if (x < 0 && prev == '-') {
-      add(" ");
+void addNumber(double x) {
+    boolean isNegativeZero = isNegativeZero(x);
+
+    if (getLastChar() == '-' && (x < 0 || isNegativeZero)) {
+        add(" ");
+    } else if (getLastChar() == '+' && isNegativeZero) {
+        add(" ");
     }
 
-    if ((long) x == x && !negativeZero) {
-      long value = (long) x;
-      long mantissa = value;
-      int exp = 0;
-      if (Math.abs(x) >= 100) {
-        while (mantissa / 10 * Math.pow(10, exp + 1) == value) {
-          mantissa /= 10;
-          exp++;
+    if (Math.abs(x % 1) < 1e-6 && !isNegativeZero) {
+        long value = (long) x;
+        long mantissa = value;
+        int exp = 0;
+
+        if (Math.abs(x) >= 100) {
+            while (mantissa / 10 * Math.pow(10, exp + 1) == value) {
+                mantissa /= 10;
+                exp++;
+            }
+        }
+
+        if (exp > 2) {
+            add(Long.toString(mantissa) + "E" + Integer.toString(exp));
+        } else {
+            add(Long.toString(value));
         }
-      }
-      if (exp > 2) {
-        add(Long.toString(mantissa) + "E" + Integer.toString(exp));
-      } else {
-        add(Long.toString(value));
-      }
     } else {
-      add(String.valueOf(x));
+        add(Double.toString(x));
     }
-  }
+}
 
   static boolean isNegativeZero(double x) {
     return x == 0.0 && Math.copySign(1, x) == -1.0;