diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
index bf6dd65d5..8a6b5b236 100644
--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
@@ -1416,6 +1416,55 @@ public class DSCompiler {
         }
 
         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
+// Fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
+if (Double.isNaN(result[resultOffset])) {
+    // special cases for NaNs
+    result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);
+    for (int i = 1; i < result.length; i++) {
+        result[resultOffset + i] = result[resultOffset];
+    }
+} else if (Double.isInfinite(result[resultOffset])) {
+    // special cases for infinities
+    if (Double.isInfinite(x[xOffset]) || Double.isInfinite(y[yOffset])) {
+        result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);
+        for (int i = 1; i < result.length; i++) {
+            result[resultOffset + i] = result[resultOffset];
+        }
+    } else if (x[xOffset] == 0) {
+        // When x is 0, result is either PI/2 or -PI/2
+        result[resultOffset] = FastMath.copySign(FastMath.PI / 2, y[yOffset]);
+        for (int i = 1; i < result.length; i++) {
+            result[resultOffset + i] = result[resultOffset];
+        }
+    } else if ((Double.doubleToRawLongBits(x[xOffset]) & 0x8000000000000000L) == 0x8000000000000000L) {
+        // When x is -0
+        if (y[yOffset] == 0) {
+            // When y is 0, result is either PI or -PI
+            result[resultOffset] = FastMath.copySign(FastMath.PI, x[xOffset]);
+            for (int i = 1; i < result.length; i++) {
+                result[resultOffset + i] = result[resultOffset];
+            }
+        } else if (y[yOffset] > 0) {
+            // When y is positive
+            result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);
+            for (int i = 1; i < result.length; i++) {
+                result[resultOffset + i] = result[resultOffset];
+            }
+        } else {
+            // When y is negative
+            result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);
+            for (int i = 1; i < result.length; i++) {
+                result[resultOffset + i] = FastMath.copySign(FastMath.PI, x[xOffset]) + result[resultOffset];
+            }
+        }
+    } else {
+        // all other cases of infinities and NaNs
+        double v = result[resultOffset] > 0 ? FastMath.PI / 2 : -FastMath.PI / 2;
+        for (int i = 0; i < result.length; i++) {
+            result[resultOffset + i] = v;
+        }
+    }
+}
 
     }
 