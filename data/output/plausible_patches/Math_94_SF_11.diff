diff --git a/src/java/org/apache/commons/math/util/MathUtils.java b/src/java/org/apache/commons/math/util/MathUtils.java
index c5342aeb3..c8926fbbe 100644
--- a/src/java/org/apache/commons/math/util/MathUtils.java
+++ b/src/java/org/apache/commons/math/util/MathUtils.java
@@ -408,56 +408,44 @@ public final class MathUtils {
      * @return the greatest common divisor, never zero
      * @since 1.1
      */
-    public static int gcd(int u, int v) {
-        if (u * v == 0) {
-            return (Math.abs(u) + Math.abs(v));
+public static int gcd(int u, int v) {
+    if (u == 0 || v == 0) {
+        return Math.abs(u + v);
+    }
+    u = Math.abs(u);
+    v = Math.abs(v);
+    // if u or v is a power of 2 return 2^exp where exp is the largest power of 2 that divides u and v
+    if ((u & -u) == u || (v & -v) == v) {
+        int exp = 0;
+        int n = u | v;
+        while ((n & 1) == 0) {
+            n >>= 1;
+            exp++;
         }
-        // keep u and v negative, as negative integers range down to
-        // -2^31, while positive numbers can only be as large as 2^31-1
-        // (i.e. we can't necessarily negate a negative number without
-        // overflow)
-        /* assert u!=0 && v!=0; */
-        if (u > 0) {
-            u = -u;
-        } // make u negative
-        if (v > 0) {
-            v = -v;
-        } // make v negative
-        // B1. [Find power of 2]
-        int k = 0;
-        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
-                                                            // both even...
-            u /= 2;
-            v /= 2;
-            k++; // cast out twos.
+        return (1 << exp);
+    }
+    int shift = 0;
+    while (((u | v) & 1) == 0) { // while u and u are even
+        shift++;
+        u >>= 1;
+        v >>= 1;
+    }
+    while ((u & 1) == 0) { // if u is even divide by 2
+        u >>= 1;
+    }
+    do {
+        while ((v & 1) == 0) {
+            v >>= 1; // while v is even divide by 2
         }
-        if (k == 31) {
-            throw new ArithmeticException("overflow: gcd is 2^31");
+        if (u > v) { // swap u and v
+            int temp = v;
+            v = u;
+            u = temp;
         }
-        // B2. Initialize: u and v have been divided by 2^k and at least
-        // one is odd.
-        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
-        // t negative: u was odd, v may be even (t replaces v)
-        // t positive: u was even, v is odd (t replaces u)
-        do {
-            /* assert u<0 && v<0; */
-            // B4/B3: cast out twos from t.
-            while ((t & 1) == 0) { // while t is even..
-                t /= 2; // cast out twos
-            }
-            // B5 [reset max(u,v)]
-            if (t > 0) {
-                u = -t;
-            } else {
-                v = t;
-            }
-            // B6/B3. at this point both u and v should be odd.
-            t = (v - u) / 2;
-            // |u| larger: t positive (replace u)
-            // |v| larger: t negative (replace v)
-        } while (t != 0);
-        return -u * (1 << k); // gcd is u*2^k
-    }
+        v = v - u; // subtract u from v
+    } while (v != 0);
+    return (u << shift);
+}
 
     /**
      * Returns an integer hash code representing the given double value.