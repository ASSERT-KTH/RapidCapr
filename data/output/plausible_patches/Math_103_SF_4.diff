diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
index 02810e142..fead24cb8 100644
--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
@@ -105,10 +105,31 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution
      * x is more than 20 standard deviations from the mean, in which case the
      * convergence exception is caught and 0 or 1 is returned.
      */
-    public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+public double cumulativeProbability(double x) throws MathException {
+    double result;
+
+    if (Double.isNaN(x)) {
+        // Handle NaN values
+        result = Double.NaN;
+    } else if (x == Double.NEGATIVE_INFINITY) {
+        // Handle negative infinity
+        result = 0.0;
+    } else if (x == Double.POSITIVE_INFINITY) {
+        // Handle positive infinity
+        result = 1.0;
+    } else if (x < mean - 20 * standardDeviation) {
+        // Handle extreme negative values
+        result = 0.0;
+    } else if (x > mean + 20 * standardDeviation) {
+        // Handle extreme positive values
+        result = 1.0;
+    } else {
+        // Calculate the cumulative probability using Erf.erf()
+        result = 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0))));
     }
+
+    return result;
+}
     
     /**
      * For this distribution, X, this method returns the critical point x, such