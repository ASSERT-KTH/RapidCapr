diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java
index 203413fc9..d2edd4529 100644
--- a/src/org/mockito/internal/invocation/InvocationMatcher.java
+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java
@@ -89,16 +89,26 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI
         return !overloadedButSameArgs;
     }
 
-    public boolean hasSameMethod(Invocation candidate) {        
-        //not using method.equals() for 1 good reason:
-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
-        Method m1 = invocation.getMethod();
-        Method m2 = candidate.getMethod();
-        
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+public boolean hasSameMethod(Invocation candidate) {
+    Method m1 = invocation.getMethod();
+    Method m2 = candidate.getMethod();
+    
+    if (m1 == m2) {
+        return true;
     }
     
+    if (m1.getName().equals(m2.getName()) && m1.getParameterCount() == m2.getParameterCount()) {
+        for (int i = 0; i < m1.getParameterCount(); i++) {
+            if (!m1.getParameterTypes()[i].equals(m2.getParameterTypes()[i])) {
+                return false;
+            }
+        }
+        return true;
+    }
+    
+    return false;
+}
+    
     public Location getLocation() {
         return invocation.getLocation();
     }
@@ -126,4 +136,4 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI
 
         return out;
     }
-}
\ No newline at end of file
+}