diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java
index e0a8e97e9..ca38b87ef 100644
--- a/src/main/java/org/apache/commons/math/complex/Complex.java
+++ b/src/main/java/org/apache/commons/math/complex/Complex.java
@@ -147,12 +147,27 @@ public class Complex implements FieldElement<Complex>, Serializable  {
      * @return the complex number sum
      * @throws NullArgumentException if <code>rhs</code> is null
      */
-    public Complex add(Complex rhs)
-        throws NullArgumentException {
-        MathUtils.checkNotNull(rhs);
-        return createComplex(real + rhs.getReal(),
-            imaginary + rhs.getImaginary());
+public Complex add(Complex rhs) throws NullArgumentException {
+    MathUtils.checkNotNull(rhs);
+    double realPart = real + rhs.getReal();
+    double imagPart = imaginary + rhs.getImaginary();
+    if(Double.isNaN(realPart) || Double.isNaN(imagPart)) {
+        return createComplex(Double.NaN, Double.NaN);
     }
+    else if(Double.isInfinite(realPart) || Double.isInfinite(imagPart)) {
+        if(Double.isInfinite(imagPart)) {
+            double r = Double.isInfinite(realPart) ? Math.copySign(Double.POSITIVE_INFINITY, realPart) : realPart;
+            return createComplex(r, Double.POSITIVE_INFINITY);
+        }
+        else {
+            double i = Double.isInfinite(imagPart) ? Math.copySign(Double.POSITIVE_INFINITY, imagPart) : imagPart;
+            return createComplex(Double.POSITIVE_INFINITY, i);
+        }
+    }
+    else {
+        return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());
+    }
+}
 
     /**
      * Return the conjugate of this complex number. The conjugate of