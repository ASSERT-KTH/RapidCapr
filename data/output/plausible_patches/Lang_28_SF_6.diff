diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
index c3cb8695..04477140 100644
--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
@@ -32,37 +32,62 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {
      * {@inheritDoc}
      */
     @Override
-    public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
-            int start = index + 2;
-            boolean isHex = false;
+public int translate(CharSequence input, int index, Writer out) throws IOException {
+    // Check for the valid input and index values
+    if(input == null || index < 0 || index >= input.length()) {
+        return 0;
+    }
+
+    // Check if the input contains the '&' followed by '#'
+    if(input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+        return 0;
+    }
+
+    // Initialize variables for parsing input
+    int start = index + 2;
+    boolean isHex = false;
+
+    // Check if the input contains hexadecimal escape sequence
+    if(start < input.length() && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {
+        isHex = true;
+        start++;
+    }
+
+    int end = start;
+
+    // Find the end of the entity
+    while(end < input.length() && input.charAt(end) != ';') {
+        end++;
+    }
 
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
-                isHex = true;
-            }
+    // Check if the entity has an ending semicolon
+    if(end == input.length()) {
+        return 0;
+    }
 
-            int end = start;
-            while(input.charAt(end) != ';') {
-                end++;
-            }
+    // Parse the entity value
+    String entityValue = input.subSequence(start, end).toString();
+    if(entityValue.isEmpty()) {
+        return 0;
+    }
 
-            int entityValue;
-            try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-                return 0;
-            }
+    int unicodeValue;
+    try {
+        unicodeValue = Integer.parseInt(entityValue, isHex ? 16 : 10);
+    } catch(NumberFormatException e) {
+        return 0;
+    }
 
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
-        }
+    // Check if the unicode value is valid
+    if(!Character.isValidCodePoint(unicodeValue)) {
         return 0;
     }
+
+    // Write the unicode character to the output writer
+    char[] chars = Character.toChars(unicodeValue);
+    out.write(chars);
+
+    // Return the number of characters processed
+    return end - index + 1;
+}
 }