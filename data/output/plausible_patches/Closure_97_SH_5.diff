diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index d6c194a3..a11a00dd 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -695,7 +695,29 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
           // JavaScript handles zero shifts on signed numbers differently than
           // Java as an Java int can not represent the unsigned 32-bit number
           // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+switch (n.getType()) {
+  case Token.LSH:
+    result = lvalInt << rvalInt;
+    break;
+  case Token.RSH:
+    result = lvalInt >> rvalInt;
+    break;
+  case Token.URSH:
+    /*
+     * Two's complement always sets the highest bit for negative numbers.
+     * Following bit fipping approach in the javadocs
+     * https://docs.oracle.com/javase/8/docs/api/java/lang/Long.html#toUnsignedString-long-
+     */
+    long lvalUnsigned = lvalInt & 0xffffffffL;
+    if (lvalUnsigned < 0) {
+       lvalUnsigned += 0x100000000L;
+    }
+    result = lvalUnsigned >> rvalInt;
+    break;
+  default:
+    throw new AssertionError("Unknown shift operator: " +
+          Node.tokenToName(n.getType()));
+}
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +