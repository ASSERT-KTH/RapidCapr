diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java
index b9aa412c..d1766cb8 100644
--- a/src/com/google/javascript/jscomp/CheckSideEffects.java
+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java
@@ -81,7 +81,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback
   }
 
   @Override
-  public void visit(NodeTraversal t, Node n, Node parent) {
+public void visit(NodeTraversal t, Node n, Node parent) {
     // VOID nodes appear when there are extra semicolons at the BLOCK level.
     // I've been unable to think of any cases where this indicates a bug,
     // and apparently some people like keeping these semicolons around,
@@ -95,28 +95,25 @@ final class CheckSideEffects extends AbstractPostOrderCallback
       return;
     }
 
-    // Do not try to remove a block or an expr result. We already handle
-    // these cases when we visit the child, and the peephole passes will
-    // fix up the tree in more clever ways when these are removed.
     if (parent.getType() == Token.COMMA) {
       Node gramps = parent.getParent();
       if (gramps.isCall() && parent == gramps.getFirstChild()) {
         if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && "eval".equals(n.getNext().getString())) {
-      return;
+          return;
         }
-    }
-
-    // This no-op statement was there so that JSDoc information could
-    // be attached to the name. This check should not complain about it.
-      if (n == parent.getLastChild()) {
+      } else {
         for (Node an : parent.getAncestors()) {
           int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA)
+          if (ancestorType == Token.COMMA) {
             continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
-            return;
-          else
+          }
+          if (ancestorType == Token.EXPR_RESULT || ancestorType == Token.BLOCK) {
+            if (NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {
+              return;
+            }
+          } else {
             break;
+          }
         }
       }
     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {