diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java
index 3f669271a..2e6a12bbc 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java
@@ -69,7 +69,28 @@ public class BisectionSolver extends UnivariateRealSolverImpl {
     /** {@inheritDoc} */
     public double solve(final UnivariateRealFunction f, double min, double max, double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
-        return solve(min, max);
+// Ensure that min is less than max and function values at min and max have opposite signs
+if (min >= max || f.value(min) * f.value(max) >= 0) {
+    throw new IllegalArgumentException("Invalid range: function values at min and max must have opposite signs and min must be less than max");
+}
+
+// Use initial value as a starting point for the solver if it's within the range, or else use the midpoint
+double initialGuess = (min <= initial && initial <= max) ? initial : (min + max) / 2.0;
+
+// Create a new instance of the solver and set the tolerance and maximum iterations
+BrentSolver solver = new BrentSolver();
+solver.setAbsoluteAccuracy(getAbsoluteAccuracy());
+solver.setMaximalIterationCount(getMaximalIterationCount());
+
+// Solve the function using the given solver and starting point
+double root = solver.solve(f, min, max, initialGuess);
+
+// If no root is found, return the initial guess
+if (Double.isNaN(root)) {
+    return initialGuess;
+}
+
+return root;
     }
 
     /** {@inheritDoc} */