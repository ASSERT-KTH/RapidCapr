{
    "bug_id": "MAX_FILL",
    "bug_type": "SF",
    "buggy_lines": "\n            for(int j = 0; j < grid[j].length; j++) {\n                row_capacity += grid[j][i];",
    "code": "    public static int max_fill(int[][] grid, int bucket_capacity) {\n        int result = 0;\n        for(int i = 0; i < grid.length; i++) {\n            int row_capacity = 0;\n            for(int j = 0; j < grid[j].length; j++) {\n                row_capacity += grid[j][i];\n            }\n            result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n        }\n        return result;\n    }",
    "fixed_code": "    public static int max_fill(int[][] grid, int bucket_capacity) {\n        int result = 0;\n        for(int i = 0; i < grid.length; i++) {\n            int row_capacity = 0;\n            for(int j = 0; j < grid[i].length; j++) {\n                row_capacity += grid[i][j];\n            }\n            result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n        }\n        return result;\n    }",
    "fixed_lines": "\n            for(int j = 0; j < grid[i].length; j++) {\n                row_capacity += grid[i][j];",
    "masked_code": "    public static int max_fill(int[][] grid, int bucket_capacity) {\n        int result = 0;\n        for(int i = 0; i < grid.length; i++) {\n            int row_capacity = 0;\n>>> [ INFILL ] <<<\n            }\n            result += (row_capacity + bucket_capacity - 1) / bucket_capacity;\n        }\n        return result;\n    }",
    "project": "humaneval",
    "test_error_message": "",
    "test_framework": "humanevaljava",
    "test_line": "        int result = humaneval.buggy.MAX_FILL.max_fill(input, 1);",
    "test_name": "",
    "test_suite": ""
}