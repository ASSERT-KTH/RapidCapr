{
    "bug_id": "MAKE_PALINDROME",
    "bug_type": "SF",
    "buggy_lines": "\n        result += str.substring(0, beginning_of_suffix);",
    "code": "    public static String make_palindrome(String str){\n        if (str.length() == 0)\n            return \"\";\n\n        int beginning_of_suffix = 0;\n        while (! is_palindrome(str.substring(beginning_of_suffix))){\n            beginning_of_suffix += 1;\n        }\n        \n        String result = str;\n        result += str.substring(0, beginning_of_suffix);\n        return result;\n    }",
    "fixed_code": "    public static String make_palindrome(String str){\n        if (str.length() == 0)\n            return \"\";\n\n        int beginning_of_suffix = 0;\n        while (! is_palindrome(str.substring(beginning_of_suffix))){\n            beginning_of_suffix += 1;\n        }\n        \n        String result = str;\n        for (int i = beginning_of_suffix - 1; i >= 0; i -= 1){\n            result += String.valueOf(str.charAt(i));\n        }\n        return result;\n    }",
    "fixed_lines": "\n        for (int i = beginning_of_suffix - 1; i >= 0; i -= 1){\n            result += String.valueOf(str.charAt(i));\n        }",
    "masked_code": "    public static String make_palindrome(String str){\n        if (str.length() == 0)\n            return \"\";\n\n        int beginning_of_suffix = 0;\n        while (! is_palindrome(str.substring(beginning_of_suffix))){\n            beginning_of_suffix += 1;\n        }\n        \n        String result = str;\n>>> [ INFILL ] <<<\n        return result;\n    }",
    "project": "humaneval",
    "test_error_message": "   TEST_MAKE_PALINDROME.test_2:23 expected:<xyz[xy]> but was:<xyz[yx]>",
    "test_framework": "humanevaljava",
    "test_line": "        org.junit.Assert.assertEquals(",
    "test_name": "test_2",
    "test_suite": "   TEST_MAKE_PALINDROME"
}