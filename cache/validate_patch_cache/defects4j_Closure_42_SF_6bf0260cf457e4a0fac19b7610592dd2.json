{
    "patch": "@Override\nNode processForInLoop(ForInLoop loopNode) {\n\n  Node forNode = newNode(Token.FOR);\n\n  Node init = null;\n  if (loopNode.isForEach()) {\n    init =\n        newNode(\n            Token.VAR,\n            transform(loopNode.getIterator()));\n  } else {\n    init =\n        newNode(\n            Token.ASSIGN,\n            newNode(Token.NAME, loopNode.getIterator().toSource()),\n            transform(loopNode.getIteratedObject()));\n  }\n\n  Node body = transformBlock(loopNode.getBody());\n\n  Node condition = null;\n  if (loopNode.getIteratedObject().getType() != Token.NAME) {\n    // wrap toSource() in parentheses to handle case where iterated object\n    // is a function call (e.g. for (x in foo() { ... }))\n    condition =\n        newNode(\n            Token.AND,\n            newNode(Token.HOOK,\n                newNode(Token.LT, newNode(Token.NUMBER, \"0\"), newNode(Token.TRUE)),\n                newNode(Token.TRUE),\n                newNode(Token.LT,\n                    newNode(Token.NAME, loopNode.getIterator().toSource()),\n                    newNode(Token.GETPROP,\n                        transform(loopNode.getIteratedObject()),\n                        newNode(Token.STRING, \"length\")))),\n            body);\n  } else {\n    condition =\n        newNode(\n            Token.AND,\n            newNode(Token.HOOK,\n                newNode(Token.LT, newNode(Token.NUMBER, \"0\"), newNode(Token.TRUE)),\n                newNode(Token.TRUE),\n                newNode(Token.LT,\n                    newNode(Token.NAME, loopNode.getIterator().toSource()),\n                    newNode(Token.GETPROP,\n                        newNode(Token.NAME, loopNode.getIteratedObject().toSource()),\n                        newNode(Token.STRING, \"length\")))),\n            body);\n  }\n\n  Node increment = null;\n  if (!loopNode.isForEach()) {\n    increment =\n        newNode(\n            Token.INC,\n            newNode(Token.NAME, loopNode.getIterator().toSource()),\n            false /* postfix */);\n  }\n\n  forNode.addChildToBack(init);\n  forNode.addChildToBack(condition);\n  if (increment != null) {\n    body.addChildToBack(increment);\n  }\n\n  return forNode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..d0a84bfb 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,106 +473,75 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n-\n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n-\n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n-\n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n-\n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n-\n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n+@Override\n+Node processForInLoop(ForInLoop loopNode) {\n+\n+  Node forNode = newNode(Token.FOR);\n+\n+  Node init = null;\n+  if (loopNode.isForEach()) {\n+    init =\n+        newNode(\n+            Token.VAR,\n+            transform(loopNode.getIterator()));\n+  } else {\n+    init =\n+        newNode(\n+            Token.ASSIGN,\n+            newNode(Token.NAME, loopNode.getIterator().toSource()),\n+            transform(loopNode.getIteratedObject()));\n+  }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n+  Node body = transformBlock(loopNode.getBody());\n+\n+  Node condition = null;\n+  if (loopNode.getIteratedObject().getType() != Token.NAME) {\n+    // wrap toSource() in parentheses to handle case where iterated object\n+    // is a function call (e.g. for (x in foo() { ... }))\n+    condition =\n+        newNode(\n+            Token.AND,\n+            newNode(Token.HOOK,\n+                newNode(Token.LT, newNode(Token.NUMBER, \"0\"), newNode(Token.TRUE)),\n+                newNode(Token.TRUE),\n+                newNode(Token.LT,\n+                    newNode(Token.NAME, loopNode.getIterator().toSource()),\n+                    newNode(Token.GETPROP,\n+                        transform(loopNode.getIteratedObject()),\n+                        newNode(Token.STRING, \"length\")))),\n+            body);\n+  } else {\n+    condition =\n+        newNode(\n+            Token.AND,\n+            newNode(Token.HOOK,\n+                newNode(Token.LT, newNode(Token.NUMBER, \"0\"), newNode(Token.TRUE)),\n+                newNode(Token.TRUE),\n+                newNode(Token.LT,\n+                    newNode(Token.NAME, loopNode.getIterator().toSource()),\n+                    newNode(Token.GETPROP,\n+                        newNode(Token.NAME, loopNode.getIteratedObject().toSource()),\n+                        newNode(Token.STRING, \"length\")))),\n+            body);\n+  }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n+  Node increment = null;\n+  if (!loopNode.isForEach()) {\n+    increment =\n+        newNode(\n+            Token.INC,\n+            newNode(Token.NAME, loopNode.getIterator().toSource()),\n+            false /* postfix */);\n+  }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n+  forNode.addChildToBack(init);\n+  forNode.addChildToBack(condition);\n+  if (increment != null) {\n+    body.addChildToBack(increment);\n+  }\n \n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n+  return forNode;\n+}\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: IRFactory.TransformDispatcher is not abstract and does not override abstract method processExpressionStatement(ExpressionStatement) in TypeSafeDispatcher",
    "test_result": "ERROR"
}