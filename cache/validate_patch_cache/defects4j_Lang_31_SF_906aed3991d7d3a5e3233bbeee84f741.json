{
    "patch": "/**\n * Checks if the CharSequence contains any character from the given array of characters.\n *\n * @param str         the CharSequence to check, may be null\n * @param searchChars the array of characters to search for, may be null\n * @return true if any of the characters in the search array are found, false otherwise\n */\npublic static boolean containsAny(CharSequence str, char[] searchChars) {\n    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int strLength = str.length();\n    int searchLength = searchChars.length;\n    int strLast = strLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < strLength; i++) {\n        char ch = str.charAt(i);\n        if (ch > Character.MAX_VALUE) {\n            continue;\n        }\n        for (int j = 0; j < searchLength; j++) {\n            if (searchChars[j] == ch) {\n                if (Character.isHighSurrogate(ch)) {\n                    if (j == searchLast) {\n                        // missing low surrogate, fine, like javascript\n                        return true;\n                    }\n                    if (i < strLast && searchChars[j + 1] == str.charAt(i + 1)) {\n                        return true;\n                    }\n                } else {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..78ec78c9 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,44 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+/**\n+ * Checks if the CharSequence contains any character from the given array of characters.\n+ *\n+ * @param str         the CharSequence to check, may be null\n+ * @param searchChars the array of characters to search for, may be null\n+ * @return true if any of the characters in the search array are found, false otherwise\n+ */\n+public static boolean containsAny(CharSequence str, char[] searchChars) {\n+    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    int strLength = str.length();\n+    int searchLength = searchChars.length;\n+    int strLast = strLength - 1;\n+    int searchLast = searchLength - 1;\n+    for (int i = 0; i < strLength; i++) {\n+        char ch = str.charAt(i);\n+        if (ch > Character.MAX_VALUE) {\n+            continue;\n+        }\n+        for (int j = 0; j < searchLength; j++) {\n+            if (searchChars[j] == ch) {\n+                if (Character.isHighSurrogate(ch)) {\n+                    if (j == searchLast) {\n+                        // missing low surrogate, fine, like javascript\n+                        return true;\n+                    }\n+                    if (i < strLast && searchChars[j + 1] == str.charAt(i + 1)) {\n+                        return true;\n+                    }\n+                } else {\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}