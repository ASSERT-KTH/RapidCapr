{
    "patch": "public String fixCode(String code, String test, String message) {\n    try {\n        CompilationUnit cu = JavaParser.parse(code);\n        ForStmt forStmt = cu.findAll(ForStmt.class)\n                .stream()\n                .filter(stmt -> stmt.getCondition().isPresent())\n                .filter(stmt -> stmt.getCondition().get() instanceof EnclosedExpr)\n                .map(stmt -> (EnclosedExpr) stmt.getCondition().get())\n                .flatMap(expr -> expr.findAll(NameExpr.class).stream())\n                .filter(expr -> expr.getName().toString().equals(\"in\"))\n                .peek(expr -> expr.replace(new NameExpr(\"==\")))\n                .findFirst()\n                .orElse(null);\n\n        if (forStmt != null) {\n            return cu.toString();\n        } else {\n            return \"FAIL\";\n        }\n    } catch (ParseException e) {\n        return \"FAIL\";\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..d20f5bf1 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,29 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code, String test, String message) {\n+    try {\n+        CompilationUnit cu = JavaParser.parse(code);\n+        ForStmt forStmt = cu.findAll(ForStmt.class)\n+                .stream()\n+                .filter(stmt -> stmt.getCondition().isPresent())\n+                .filter(stmt -> stmt.getCondition().get() instanceof EnclosedExpr)\n+                .map(stmt -> (EnclosedExpr) stmt.getCondition().get())\n+                .flatMap(expr -> expr.findAll(NameExpr.class).stream())\n+                .filter(expr -> expr.getName().toString().equals(\"in\"))\n+                .peek(expr -> expr.replace(new NameExpr(\"==\")))\n+                .findFirst()\n+                .orElse(null);\n+\n+        if (forStmt != null) {\n+            return cu.toString();\n+        } else {\n+            return \"FAIL\";\n+        }\n+    } catch (ParseException e) {\n+        return \"FAIL\";\n+    }\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}