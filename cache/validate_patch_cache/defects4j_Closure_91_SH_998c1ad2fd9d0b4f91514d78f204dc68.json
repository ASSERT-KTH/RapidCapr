{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        boolean isFunctionAssignmentToPrototype = n.getType() == Token.FUNCTION &&\n            NodeUtil.isGet(lhs) &&\n            lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\");\n\n        if (isFunctionAssignmentToPrototype) {\n          return false;\n        } else if (NodeUtil.isFunctionExpression(n) && !NodeUtil.isGet(lhs)) {\n          // Don't traverse function expressions that are not assigned to an object\n          return false;\n        } else if (NodeUtil.isGet(lhs)) {\n          boolean isPrototypeAssignment = false;\n          boolean isObjectLiteralAssignment = false;\n\n          // Check if the function is being assigned to a prototype property\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            isPrototypeAssignment = true;\n            // The function may be nested inside other assignments before the prototype assignment\n            // Traverse up the parent chain until the prototype assignment is found\n            Node curr = parent;\n            while (curr.getParent() != null) {\n              Node grandParent = curr.getParent();\n              if (NodeUtil.isGet(grandParent.getFirstChild()) &&\n                  grandParent.getFirstChild().getType() == Token.GETPROP &&\n                  grandParent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n                isPrototypeAssignment = false;\n                break;\n              }\n              curr = grandParent;\n            }\n          } else {\n            // Check if the function is being assigned to an object literal\n            Node ancestor = lhs;\n            while (ancestor.getParent() != null) {\n              ancestor = ancestor.getParent();\n              if (ancestor.getType() == Token.OBJECTLIT) {\n                isObjectLiteralAssignment = true;\n                break;\n              }\n            }\n          }\n\n          if (isPrototypeAssignment) {\n            return false;\n          } else if (!isObjectLiteralAssignment) {\n            return false;\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..0b848b50 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,61 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        boolean isFunctionAssignmentToPrototype = n.getType() == Token.FUNCTION &&\n+            NodeUtil.isGet(lhs) &&\n+            lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\");\n+\n+        if (isFunctionAssignmentToPrototype) {\n+          return false;\n+        } else if (NodeUtil.isFunctionExpression(n) && !NodeUtil.isGet(lhs)) {\n+          // Don't traverse function expressions that are not assigned to an object\n+          return false;\n+        } else if (NodeUtil.isGet(lhs)) {\n+          boolean isPrototypeAssignment = false;\n+          boolean isObjectLiteralAssignment = false;\n+\n+          // Check if the function is being assigned to a prototype property\n+          if (lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+            isPrototypeAssignment = true;\n+            // The function may be nested inside other assignments before the prototype assignment\n+            // Traverse up the parent chain until the prototype assignment is found\n+            Node curr = parent;\n+            while (curr.getParent() != null) {\n+              Node grandParent = curr.getParent();\n+              if (NodeUtil.isGet(grandParent.getFirstChild()) &&\n+                  grandParent.getFirstChild().getType() == Token.GETPROP &&\n+                  grandParent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n+                isPrototypeAssignment = false;\n+                break;\n+              }\n+              curr = grandParent;\n+            }\n+          } else {\n+            // Check if the function is being assigned to an object literal\n+            Node ancestor = lhs;\n+            while (ancestor.getParent() != null) {\n+              ancestor = ancestor.getParent();\n+              if (ancestor.getType() == Token.OBJECTLIT) {\n+                isObjectLiteralAssignment = true;\n+                break;\n+              }\n+            }\n+          }\n+\n+          if (isPrototypeAssignment) {\n+            return false;\n+          } else if (!isObjectLiteralAssignment) {\n+            return false;\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "junit.framework.AssertionFailedError: There should be one error. expected:<1> but was:<0>",
    "test_result": "FAIL"
}