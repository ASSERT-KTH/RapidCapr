{
    "patch": "        int idx = dimension - 1;\n        while (count < index && idx >= 0) {\n            count += uniCounterOffset[idx];\n            --indices[idx];\n            if (indices[idx] < 0) {\n              throw new OutOfRangeException(indices[idx], 0, maxIndex[idx]);\n            }\n            if (idx > 0) {\n              count -= uniCounterOffset[idx - 1];\n              ++indices[idx - 1];\n            }\n            --idx;\n        }\n        if (count != index) {\n          throw new OutOfRangeException(index, 0, totalSize - 1);\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..57f3782c5 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,22 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n+        int idx = dimension - 1;\n+        while (count < index && idx >= 0) {\n+            count += uniCounterOffset[idx];\n+            --indices[idx];\n+            if (indices[idx] < 0) {\n+              throw new OutOfRangeException(indices[idx], 0, maxIndex[idx]);\n+            }\n+            if (idx > 0) {\n+              count -= uniCounterOffset[idx - 1];\n+              ++indices[idx - 1];\n+            }\n+            --idx;\n+        }\n+        if (count != index) {\n+          throw new OutOfRangeException(index, 0, totalSize - 1);\n         }\n-        --idx;\n-        indices[last] = idx;\n \n         return indices;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}