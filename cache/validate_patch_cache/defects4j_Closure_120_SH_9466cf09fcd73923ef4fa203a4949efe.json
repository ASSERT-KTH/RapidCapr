{
    "patch": "...\nif (block.isFunction) {\n  // check whether the assignment is outside the function\n  boolean isOutsideFunction = true;\n  for (BasicBlock nextBlock : block.getNext()) {\n    if (nextBlock.containsReference(ref)) {\n      isOutsideFunction = false;\n      break;\n    }\n  }\n  if (isOutsideFunction) {\n    break;\n  }\n} else if (block.isLoop) {\n...",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..8bda611f 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,21 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+...\n+if (block.isFunction) {\n+  // check whether the assignment is outside the function\n+  boolean isOutsideFunction = true;\n+  for (BasicBlock nextBlock : block.getNext()) {\n+    if (nextBlock.containsReference(ref)) {\n+      isOutsideFunction = false;\n+      break;\n+    }\n+  }\n+  if (isOutsideFunction) {\n+    break;\n+  }\n+} else if (block.isLoop) {\n+...\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}