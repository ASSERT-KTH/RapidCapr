{
    "patch": "// Check that the access is not used as an assignment target\nif (parent != null && parent.getType() == Token.ASSIGN && parent.getFirstChild().isEquivalentTo(n)) {\n  Node grandParent = parent.getParent();\n  if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT) {\n    return n;\n  }\n\n  // Check if the right-hand side of the assignment is an immutable value\n  Node assignRight = parent.getLastChild();\n  if (NodeUtil.isImmutableValue(assignRight)) {\n    return n;\n  }\n\n  // Check i",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..94fbf66f 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,20 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+// Check that the access is not used as an assignment target\n+if (parent != null && parent.getType() == Token.ASSIGN && parent.getFirstChild().isEquivalentTo(n)) {\n+  Node grandParent = parent.getParent();\n+  if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT) {\n+    return n;\n+  }\n+\n+  // Check if the right-hand side of the assignment is an immutable value\n+  Node assignRight = parent.getLastChild();\n+  if (NodeUtil.isImmutableValue(assignRight)) {\n+    return n;\n+  }\n+\n+  // Check i\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}