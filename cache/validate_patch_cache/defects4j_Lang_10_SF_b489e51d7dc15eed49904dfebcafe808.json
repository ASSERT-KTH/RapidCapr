{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite = false;\n    boolean quoteActive = false;\n    for (int i = 0; i < value.length(); i++) {\n        char c = value.charAt(i);\n        if (Character.isWhitespace(c)) {\n            if (!wasWhite) {\n                wasWhite = true;\n                if (quoteActive) {\n                    regex.append('\\'');\n                    quoteActive = false;\n                }\n                regex.append(\"\\\\s*+\");\n            }\n            continue;\n        }\n        wasWhite = false;\n\n        if (c == '\\'') {\n            if (unquote) {\n                i++;\n                if (i < value.length()) {\n                    c = value.charAt(i);\n                } else {\n                    return regex;\n                }\n            }\n            if (!quoteActive) regex.append(Pattern.quote(\"'\"));\n            quoteActive = !quoteActive;\n        } else if (quoteActive) {\n            regex.append(Pattern.quote(Character.toString(c)));\n        } else {\n            switch (c) {\n                case 'G':\n                case 'y':\n                case 'M':\n                case 'd':\n                case 'h':\n                case 'H':\n                case 'm':\n                case 's':\n                case 'S':\n                    regex.append(String.format(\"\\\\p{%s}\", c));\n                    break;\n                case 'a':\n                    regex.append(\"[AP]M\");\n                    break;\n                case 'E':\n                    regex.append(\"\\\\p{javaUpperCase}{1,5}\");\n                    break;\n                case 'z':\n                case 'Z':\n                    regex.append(\"[+-]\\\\d{4}\");\n                    break;\n                case 'X':\n                    regex.append(\"([+-]\\\\d{2})(\\\\d{2})?\");\n                    break;\n                default:\n                    regex.append(Pattern.quote(Character.toString(c)));\n            }\n        }\n    }\n    if (quoteActive) regex.append(\"'\");\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..9b69774a 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,71 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite = false;\n+    boolean quoteActive = false;\n+    for (int i = 0; i < value.length(); i++) {\n+        char c = value.charAt(i);\n+        if (Character.isWhitespace(c)) {\n+            if (!wasWhite) {\n+                wasWhite = true;\n+                if (quoteActive) {\n+                    regex.append('\\'');\n+                    quoteActive = false;\n                 }\n-                continue;\n+                regex.append(\"\\\\s*+\");\n             }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n+            continue;\n+        }\n+        wasWhite = false;\n+\n+        if (c == '\\'') {\n+            if (unquote) {\n+                i++;\n+                if (i < value.length()) {\n+                    c = value.charAt(i);\n+                } else {\n+                    return regex;\n                 }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n             }\n-            regex.append(c);\n+            if (!quoteActive) regex.append(Pattern.quote(\"'\"));\n+            quoteActive = !quoteActive;\n+        } else if (quoteActive) {\n+            regex.append(Pattern.quote(Character.toString(c)));\n+        } else {\n+            switch (c) {\n+                case 'G':\n+                case 'y':\n+                case 'M':\n+                case 'd':\n+                case 'h':\n+                case 'H':\n+                case 'm':\n+                case 's':\n+                case 'S':\n+                    regex.append(String.format(\"\\\\p{%s}\", c));\n+                    break;\n+                case 'a':\n+                    regex.append(\"[AP]M\");\n+                    break;\n+                case 'E':\n+                    regex.append(\"\\\\p{javaUpperCase}{1,5}\");\n+                    break;\n+                case 'z':\n+                case 'Z':\n+                    regex.append(\"[+-]\\\\d{4}\");\n+                    break;\n+                case 'X':\n+                    regex.append(\"([+-]\\\\d{2})(\\\\d{2})?\");\n+                    break;\n+                default:\n+                    regex.append(Pattern.quote(Character.toString(c)));\n+            }\n         }\n-        return regex;\n     }\n+    if (quoteActive) regex.append(\"'\");\n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}