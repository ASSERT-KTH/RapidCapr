{
    "patch": "        RealPointValuePair[] permutation = new RealPointValuePair[simplex.length];\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex.clone();\n            final RealPointValuePair best = original[0];\n            \n            // sort the simplex\n            Arrays.sort(original, comparator);\n            System.arraycopy(original, 0, permutation, 0, original.length);\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, original[original.length - 1]) < 0) {\n                simplex[0] = reflected;\n            } else {\n                if (comparator.compare(reflected, original[0]) < 0) {\n                    final RealPointValuePair[] reflectedSimplex = permutation;\n                    reflectedSimplex[0] = reflected;\n                    for (int i = 1; i < reflectedSimplex.length; i++) {\n                        reflectedSimplex[i] = evaluate(reflectedSimplex[i].getPoint()); \n                    }\n                    simplex = reflectedSimplex;\n                } else {\n                    final RealPointValuePair[] expanded = evaluateNewSimplex(original, rho, comparator);\n                    if (comparator.compare(expanded[0], original[0]) < 0) {\n                        expanded[0] = reflected;\n                        final RealPointValuePair[] expandedSimplex = permutation;\n                        expandedSimplex[0] = expanded[0];\n                        for (int i = 1; i < expandedSimplex.length; i++) {\n                            expandedSimplex[i] = evaluate(expandedSimplex[i].getPoint()); \n                        }\n                        simplex = expandedSimplex;\n                    } else {\n                        final RealPointValuePair contracted = evaluateNewSimplex(original, chi, comparator);\n                        if (comparator.compare(contracted, original[original.length - 1]) < 0) {\n                            final RealPointValuePair[] contractedSimplex = permutation;\n                            contractedSimplex[0] = contracted;\n                            for (int i = 1; i < contractedSimplex.length; i++) {\n                                contractedSimplex[i] = evaluate(contractedSimplex[i].getPoint()); \n                            }\n                            simplex = contractedSimplex;\n                        } else {\n                            final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n                            contractedSimplex[0] = original[0];\n                            for (int i = 1; i < contractedSimplex.length; i++) {\n                                contractedSimplex[i] = evaluate(original[0].getPoint()); \n                            }\n                            simplex = contractedSimplex;\n                        }\n                    }\n                }\n            }\n\n            // convergence check\n            final double convergenceCheck = 1.0 + Math.abs(best.getValue());\n            boolean converged = true;\n            for (int i = 1; i < simplex.length; i++) {\n                converged &= Double.isNaN(simplex[i].getValue()) || (Math.abs(simplex[i].getValue() - best.getValue()) <= getRelativeThreshold() * convergenceCheck + getAbsoluteThreshold());\n            }\n\n            if (converged) {\n                return;\n            }\n\n            // check iterations\n            if (getIterations() >= getMaxIterations()) {\n                throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..60a12176b 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,77 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+        RealPointValuePair[] permutation = new RealPointValuePair[simplex.length];\n \n         while (true) {\n \n             incrementIterationsCounter();\n \n             // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n+            final RealPointValuePair[] original = simplex.clone();\n             final RealPointValuePair best = original[0];\n+            \n+            // sort the simplex\n+            Arrays.sort(original, comparator);\n+            System.arraycopy(original, 0, permutation, 0, original.length);\n \n             // perform a reflection step\n             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n+            if (comparator.compare(reflected, original[original.length - 1]) < 0) {\n+                simplex[0] = reflected;\n+            } else {\n+                if (comparator.compare(reflected, original[0]) < 0) {\n+                    final RealPointValuePair[] reflectedSimplex = permutation;\n+                    reflectedSimplex[0] = reflected;\n+                    for (int i = 1; i < reflectedSimplex.length; i++) {\n+                        reflectedSimplex[i] = evaluate(reflectedSimplex[i].getPoint()); \n+                    }\n                     simplex = reflectedSimplex;\n+                } else {\n+                    final RealPointValuePair[] expanded = evaluateNewSimplex(original, rho, comparator);\n+                    if (comparator.compare(expanded[0], original[0]) < 0) {\n+                        expanded[0] = reflected;\n+                        final RealPointValuePair[] expandedSimplex = permutation;\n+                        expandedSimplex[0] = expanded[0];\n+                        for (int i = 1; i < expandedSimplex.length; i++) {\n+                            expandedSimplex[i] = evaluate(expandedSimplex[i].getPoint()); \n+                        }\n+                        simplex = expandedSimplex;\n+                    } else {\n+                        final RealPointValuePair contracted = evaluateNewSimplex(original, chi, comparator);\n+                        if (comparator.compare(contracted, original[original.length - 1]) < 0) {\n+                            final RealPointValuePair[] contractedSimplex = permutation;\n+                            contractedSimplex[0] = contracted;\n+                            for (int i = 1; i < contractedSimplex.length; i++) {\n+                                contractedSimplex[i] = evaluate(contractedSimplex[i].getPoint()); \n+                            }\n+                            simplex = contractedSimplex;\n+                        } else {\n+                            final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+                            contractedSimplex[0] = original[0];\n+                            for (int i = 1; i < contractedSimplex.length; i++) {\n+                                contractedSimplex[i] = evaluate(original[0].getPoint()); \n+                            }\n+                            simplex = contractedSimplex;\n+                        }\n+                    }\n                 }\n-\n-                return;\n-\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            // convergence check\n+            final double convergenceCheck = 1.0 + Math.abs(best.getValue());\n+            boolean converged = true;\n+            for (int i = 1; i < simplex.length; i++) {\n+                converged &= Double.isNaN(simplex[i].getValue()) || (Math.abs(simplex[i].getValue() - best.getValue()) <= getRelativeThreshold() * convergenceCheck + getAbsoluteThreshold());\n+            }\n \n-            // check convergence\n+            if (converged) {\n                 return;\n             }\n \n-        }\n-\n-    }\n+            // check iterations\n+            if (getIterations() >= getMaxIterations()) {\n+                throw new OptimizationException(new MaxIterationsExceededException(getMaxIterations()));\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}