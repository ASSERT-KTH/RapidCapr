{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return Arrays.copyOf(values, values.length);\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        boolean changed = false;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i == fieldIndex) {\n                int curValue = values[i];\n                int newValue = FieldUtils.safeAdd(curValue, valueToAdd);\n                int maxRange = partial.getFieldType(i).getField(iChronology).getMaximumValue(instant);\n                int minRange = partial.getFieldType(i).getField(iChronology).getMinimumValue(instant);\n                int range = maxRange - minRange + 1;\n                if (range <= 0) {\n                    throw new UnsupportedOperationException(\"The range cannot be less than or equal to zero\");\n                }\n                if (newValue < minRange) {\n                    int diff = minRange - newValue;\n                    valueToAdd = -valueToAdd;\n                    valueToAdd -= (diff / range + 1) * range;\n                    return add(partial, i, values, valueToAdd);\n                } else if (newValue > maxRange) {\n                    int diff = newValue - maxRange;\n                    valueToAdd -= diff / range * range;\n                    return add(partial, i, values, valueToAdd);\n                } else {\n                    values[i] = newValue;\n                    changed = true;\n                }\n            } else if (changed || (values[i] != partial.getFieldType(i).getField(iChronology).get(instant))) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n        }\n        if (changed) {\n            instant = iChronology.set(partial, instant);\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..ecd6db8a 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,51 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return Arrays.copyOf(values, values.length);\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        boolean changed = false;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i == fieldIndex) {\n+                int curValue = values[i];\n+                int newValue = FieldUtils.safeAdd(curValue, valueToAdd);\n+                int maxRange = partial.getFieldType(i).getField(iChronology).getMaximumValue(instant);\n+                int minRange = partial.getFieldType(i).getField(iChronology).getMinimumValue(instant);\n+                int range = maxRange - minRange + 1;\n+                if (range <= 0) {\n+                    throw new UnsupportedOperationException(\"The range cannot be less than or equal to zero\");\n+                }\n+                if (newValue < minRange) {\n+                    int diff = minRange - newValue;\n+                    valueToAdd = -valueToAdd;\n+                    valueToAdd -= (diff / range + 1) * range;\n+                    return add(partial, i, values, valueToAdd);\n+                } else if (newValue > maxRange) {\n+                    int diff = newValue - maxRange;\n+                    valueToAdd -= diff / range * range;\n+                    return add(partial, i, values, valueToAdd);\n+                } else {\n+                    values[i] = newValue;\n+                    changed = true;\n+                }\n+            } else if (changed || (values[i] != partial.getFieldType(i).getField(iChronology).get(instant))) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        if (changed) {\n+            instant = iChronology.set(partial, instant);\n+        }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}