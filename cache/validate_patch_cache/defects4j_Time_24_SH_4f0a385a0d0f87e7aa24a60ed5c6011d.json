{
    "patch": "for (int i = count - 1; i >= 0; i--) {\n    try {\n        millis = savedFields[i].set(millis, resetFields);\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n        }\n        throw e;\n    }\n    // Check that the computed millis is not less than the initial millis\n    if (i == 0 && millis < iMillis) {\n        // Adjust the base year to avoid IllegalArgumentException on year field range check\n        // Note: This adjustment only works for parsing year-first dates\n        DateTimeField yearField = savedFields[i].iField;\n        int baseYear = iDefaultYear - 1;\n        iDefaultYear = baseYear + (int) (milis - getChronology().year().set(0, baseYear));\n        millis = yearField.set(millis, iDefaultYear);\n        iSavedFields[0] = new SavedField(yearField, iDefaultYear);\n        Arrays.sort(iSavedFields, 0, count);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..e32b4eac 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,27 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+for (int i = count - 1; i >= 0; i--) {\n+    try {\n+        millis = savedFields[i].set(millis, resetFields);\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+        }\n+        throw e;\n+    }\n+    // Check that the computed millis is not less than the initial millis\n+    if (i == 0 && millis < iMillis) {\n+        // Adjust the base year to avoid IllegalArgumentException on year field range check\n+        // Note: This adjustment only works for parsing year-first dates\n+        DateTimeField yearField = savedFields[i].iField;\n+        int baseYear = iDefaultYear - 1;\n+        iDefaultYear = baseYear + (int) (milis - getChronology().year().set(0, baseYear));\n+        millis = yearField.set(millis, iDefaultYear);\n+        iSavedFields[0] = new SavedField(yearField, iDefaultYear);\n+        Arrays.sort(iSavedFields, 0, count);\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}