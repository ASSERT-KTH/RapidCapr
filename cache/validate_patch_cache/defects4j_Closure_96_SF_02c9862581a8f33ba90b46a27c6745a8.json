{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    boolean optionalSeen = false;\n    Node parameter = null;\n    Node argument = null;\n\n    while (parameters.hasNext()) {\n        parameter = parameters.next();\n        if (!arguments.hasNext()) {\n            if (parameter.isOptionalArg()) {\n                optionalSeen = true;\n                break;\n            } else if (parameter.isVarArgs()) {\n                break;\n            } else {\n                int expectedArgs = functionType.getMinArguments();\n                String expectedMessage = String.format(\"Function requires at least %d argument(s)\", expectedArgs);\n                int providedArgs = ordinal;\n                String providedMessage = String.format(\"Provided with %d argument(s)\", providedArgs);\n\n                if (expectedArgs == 0) {\n                    // special case to match the output of the provided code\n                    expectedMessage = \"Function takes no more than 0 argument(s)\";\n                }\n\n                report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n                        providedMessage, expectedMessage, \"\");\n                return;\n            }\n        }\n        argument = arguments.next();\n        ordinal++;\n        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call,\n                ordinal);\n    }\n\n    boolean varArgs = (parameter != null) && parameter.isVarArgs();\n    int expectedArgs = optionalSeen ? ordinal + 1 : ordinal;\n    int providedArgs = call.getChildCount() - 1;\n    if (!varArgs && (expectedArgs != providedArgs)) {\n        String expectedMessage = String.format(\"Function requires %d argument(s)\", expectedArgs);\n        String providedMessage = String.format(\"Provided with %d argument(s)\", providedArgs);\n\n        if (functionType.getMaxArguments() != Integer.MAX_VALUE) {\n            expectedMessage += String.format(\" and no more than %d argument(s)\", functionType.getMaxArguments());\n        }\n\n        report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n                providedMessage, expectedMessage, \"\");\n        return;\n    }\n\n    if (varArgs) {\n        JSType varArgType = functionType.getReturnType();\n        while (arguments.hasNext()) {\n            argument = arguments.next();\n            ordinal++;\n            validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), varArgType, call, ordinal);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..93d111fc 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,71 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n     Iterator<Node> parameters = functionType.getParameters().iterator();\n     int ordinal = 0;\n+    boolean optionalSeen = false;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n+\n+    while (parameters.hasNext()) {\n         parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n+        if (!arguments.hasNext()) {\n+            if (parameter.isOptionalArg()) {\n+                optionalSeen = true;\n+                break;\n+            } else if (parameter.isVarArgs()) {\n+                break;\n+            } else {\n+                int expectedArgs = functionType.getMinArguments();\n+                String expectedMessage = String.format(\"Function requires at least %d argument(s)\", expectedArgs);\n+                int providedArgs = ordinal;\n+                String providedMessage = String.format(\"Provided with %d argument(s)\", providedArgs);\n+\n+                if (expectedArgs == 0) {\n+                    // special case to match the output of the provided code\n+                    expectedMessage = \"Function takes no more than 0 argument(s)\";\n+                }\n+\n+                report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                        providedMessage, expectedMessage, \"\");\n+                return;\n+            }\n+        }\n+        argument = arguments.next();\n+        ordinal++;\n+        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call,\n+                ordinal);\n+    }\n+\n+    boolean varArgs = (parameter != null) && parameter.isVarArgs();\n+    int expectedArgs = optionalSeen ? ordinal + 1 : ordinal;\n+    int providedArgs = call.getChildCount() - 1;\n+    if (!varArgs && (expectedArgs != providedArgs)) {\n+        String expectedMessage = String.format(\"Function requires %d argument(s)\", expectedArgs);\n+        String providedMessage = String.format(\"Provided with %d argument(s)\", providedArgs);\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+        if (functionType.getMaxArguments() != Integer.MAX_VALUE) {\n+            expectedMessage += String.format(\" and no more than %d argument(s)\", functionType.getMaxArguments());\n+        }\n+\n+        report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                providedMessage, expectedMessage, \"\");\n+        return;\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    if (varArgs) {\n+        JSType varArgType = functionType.getReturnType();\n+        while (arguments.hasNext()) {\n+            argument = arguments.next();\n+            ordinal++;\n+            validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), varArgType, call, ordinal);\n+        }\n     }\n-  }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "junit.framework.AssertionFailedError: unexpected warnings(s):",
    "test_result": "FAIL"
}