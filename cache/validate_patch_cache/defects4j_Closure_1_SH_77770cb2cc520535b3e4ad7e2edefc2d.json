{
    "patch": "Node function = fnScope.getRootNode();\n\nPreconditions.checkState(function.isFunction());\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n  // The parameters object literal setters can not be removed.\n  return;\n}\n\nNode argList = getFunctionArgList(function);\n\nboolean modifyCallers = modifyCallSites\n    && callSiteOptimizer.canModifyCallers(function);\n\nif (!modifyCallers) {\n  // Strip unreferenced args off the end of the function declaration.\n\n  // Fixed code starts here\n  List<Node> unreferencedArgs = new ArrayList<Node>();\n  for (Node arg : argList.children()) {\n    Var var = fnScope.getVar(arg.getString());\n    if (!referenced.contains(var)) {\n      unreferencedArgs.add(arg);\n    } else if (unreferencedArgs.size() > 0) {\n      // We have found the first referenced arg after a sequence of unreferenced args.\n      // We remove all the unreferenced args and stop going through the list.\n      for (Node unreferencedArg : unreferencedArgs) {\n        argList.removeChild(unreferencedArg);\n        compiler.reportCodeChange();\n      }\n      break;\n    }\n  }\n} else {\n  callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..f7f3ab82 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,41 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+\n+Preconditions.checkState(function.isFunction());\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+  // The parameters object literal setters can not be removed.\n+  return;\n+}\n+\n+Node argList = getFunctionArgList(function);\n+\n+boolean modifyCallers = modifyCallSites\n+    && callSiteOptimizer.canModifyCallers(function);\n+\n+if (!modifyCallers) {\n+  // Strip unreferenced args off the end of the function declaration.\n+\n+  // Fixed code starts here\n+  List<Node> unreferencedArgs = new ArrayList<Node>();\n+  for (Node arg : argList.children()) {\n+    Var var = fnScope.getVar(arg.getString());\n+    if (!referenced.contains(var)) {\n+      unreferencedArgs.add(arg);\n+    } else if (unreferencedArgs.size() > 0) {\n+      // We have found the first referenced arg after a sequence of unreferenced args.\n+      // We remove all the unreferenced args and stop going through the list.\n+      for (Node unreferencedArg : unreferencedArgs) {\n+        argList.removeChild(unreferencedArg);\n+        compiler.reportCodeChange();\n+      }\n+      break;\n+    }\n+  }\n+} else {\n+  callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: variable function is already defined in method removeUnreferencedFunctionArgs(Scope)",
    "test_result": "ERROR"
}