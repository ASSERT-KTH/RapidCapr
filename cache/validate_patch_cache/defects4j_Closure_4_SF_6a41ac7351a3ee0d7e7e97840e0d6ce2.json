{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    Set<JSType> visited = new HashSet<>();\n    JSType type = this;\n    \n    while (!visited.contains(type)) {\n        visited.add(type);\n        \n        boolean resolved = type.resolveViaRegistry(t, enclosing);\n        \n        if (!resolved) {\n            type.resolveViaProperties(t, enclosing);\n            resolved = type.isResolved();\n        }\n        \n        if (resolved) {\n            type.super.resolveInternal(t, enclosing);\n            type.finishPropertyContinuations();\n            \n            if (type.registry.isLastGeneration()) {\n                return type.getReferencedType();\n            } else {\n                return type;\n            }\n        }\n        \n        if (type.detectImplicitPrototypeCycle()) {\n            type.handleTypeCycle(t);\n        }\n        \n        type = type.referencedType;\n    }\n\n    return this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..041bf4fc 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,40 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+    Set<JSType> visited = new HashSet<>();\n+    JSType type = this;\n+    \n+    while (!visited.contains(type)) {\n+        visited.add(type);\n+        \n+        boolean resolved = type.resolveViaRegistry(t, enclosing);\n+        \n+        if (!resolved) {\n+            type.resolveViaProperties(t, enclosing);\n+            resolved = type.isResolved();\n+        }\n+        \n+        if (resolved) {\n+            type.super.resolveInternal(t, enclosing);\n+            type.finishPropertyContinuations();\n+            \n+            if (type.registry.isLastGeneration()) {\n+                return type.getReferencedType();\n+            } else {\n+                return type;\n+            }\n+        }\n+        \n+        if (type.detectImplicitPrototypeCycle()) {\n+            type.handleTypeCycle(t);\n+        }\n+        \n+        type = type.referencedType;\n     }\n \n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+    return this;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}