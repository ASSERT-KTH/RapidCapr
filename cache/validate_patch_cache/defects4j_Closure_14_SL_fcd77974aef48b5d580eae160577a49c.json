{
    "patch": "if (finallyNode != null && cfa != null) {\n    Node followNode = computeFollowNode(fromNode, finallyNode, cfa);\n    if (followNode != null) {\n        // Create the edge\n        cfa.createEdge(fromNode, Branch.UNCOND, followNode);\n\n        // Update the CFA\n        NodeTraversal.traverseEs6(cfa, followNode);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..04ed087c 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,16 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (finallyNode != null && cfa != null) {\n+    Node followNode = computeFollowNode(fromNode, finallyNode, cfa);\n+    if (followNode != null) {\n+        // Create the edge\n+        cfa.createEdge(fromNode, Branch.UNCOND, followNode);\n+\n+        // Update the CFA\n+        NodeTraversal.traverseEs6(cfa, followNode);\n+    }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}