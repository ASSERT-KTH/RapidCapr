{
    "patch": "if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    } else {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null && objType.isRecordType()) {\n        for (String prop : objType.getOwnPropertyNames()) {\n          JSType propType = objType.getPropertyType(prop);\n          if (!constraintObj.isPropertyTypeDeclared(prop)) {\n            constraintObj.defineInferredProperty(prop, propType, null);\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..91ce07a9 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,7 +1118,7 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n+if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n@@ -1133,6 +1133,17 @@ class TypeInference\n           }\n         }\n       }\n+    } else {\n+      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+      if (objType != null && objType.isRecordType()) {\n+        for (String prop : objType.getOwnPropertyNames()) {\n+          JSType propType = objType.getPropertyType(prop);\n+          if (!constraintObj.isPropertyTypeDeclared(prop)) {\n+            constraintObj.defineInferredProperty(prop, propType, null);\n+          }\n+        }\n+      }\n+    }\n     }\n   }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}