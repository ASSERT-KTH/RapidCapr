{
    "patch": "public static double getTypedPercent(String input) {\n    int count = 0;\n    int totalCount = 0;\n    String[] inputs = input.split(\"\\n\");\n    for(String line : inputs) {\n        if(!line.trim().isEmpty()) {\n            String[] values = line.split(\";\");\n            if(values.length > 1) {\n                String type = values[0].trim().toUpperCase();\n                if(type.equals(\"TYPED\")) {\n                    count += Integer.parseInt(values[1]);\n                }\n                totalCount += Integer.parseInt(values[1]);\n            }\n        }\n    }\n    if(totalCount == 0) {\n        return 0.0;\n    }\n    double percentage = ((double) count / totalCount) * 100;\n    return Math.round(percentage * 10.0) / 10.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..5f93244c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String input) {\n+    int count = 0;\n+    int totalCount = 0;\n+    String[] inputs = input.split(\"\\n\");\n+    for(String line : inputs) {\n+        if(!line.trim().isEmpty()) {\n+            String[] values = line.split(\";\");\n+            if(values.length > 1) {\n+                String type = values[0].trim().toUpperCase();\n+                if(type.equals(\"TYPED\")) {\n+                    count += Integer.parseInt(values[1]);\n+                }\n+                totalCount += Integer.parseInt(values[1]);\n+            }\n+        }\n+    }\n+    if(totalCount == 0) {\n+        return 0.0;\n+    }\n+    double percentage = ((double) count / totalCount) * 100;\n+    return Math.round(percentage * 10.0) / 10.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}