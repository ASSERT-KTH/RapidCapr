{
    "patch": "try {\n  Node typeExpression = parseTypeExpression(token);\n  if (typeExpression != null) {\n    return typeExpression;\n  }\n} catch (Exception ignoredExc) { }\n\n// try parsing as type name\ntry {\n  return parseTypeName(token);\n} catch (Exception ignoredExc) { }\n\nthrow new RuntimeException(\"Bad type annotation. type not recognized due to syntax error\");",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..c990d90c 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,19 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+try {\n+  Node typeExpression = parseTypeExpression(token);\n+  if (typeExpression != null) {\n+    return typeExpression;\n+  }\n+} catch (Exception ignoredExc) { }\n+\n+// try parsing as type name\n+try {\n+  return parseTypeName(token);\n+} catch (Exception ignoredExc) { }\n+\n+throw new RuntimeException(\"Bad type annotation. type not recognized due to syntax error\");\n   }\n \n   /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}