{
    "patch": "protected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    for (int i = 0; i < coefficients.length; i++) {\n        double value = 0.0;\n        boolean found = false;\n        for (int j = 0; j < tableau.getHeight(); j++) {\n            if (tableau.getEntry(j, i + getNumObjectiveFunctions()) == 1) {\n                if (found) {\n                    // multiple variables can take a given value, set to 0\n                    value = 0.0;\n                    break;\n                }\n                value = tableau.getEntry(j, getRhsOffset());\n                for (int k = 0; k < coefficients.length; k++) {\n                    if (k != i && tableau.getEntry(j, k + getNumObjectiveFunctions()) != 0) {\n                        // already found a non-zero coefficient for a different variable\n                        // that takes the same value - set to 0\n                        value = 0.0;\n                        break;\n                    }\n                }\n                found = true;\n            }\n        }\n        coefficients[i] = value;\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f2a..052f3100b 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -321,28 +321,34 @@ class SimplexTableau implements Serializable {\n      * </p>\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n-        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-        Integer basicRow =\n-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n-        for (int i = 0; i < coefficients.length; i++) {\n-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n-                // if multiple variables can take a given value \n-                // then we choose the first and set the rest equal to 0\n-                coefficients[i] =\n-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                    (restrictToNonNegative ? 0 : mostNegative);\n-            if (basicRow != null) {\n-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n-                    if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n+protected RealPointValuePair getSolution() {\n+    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n+    for (int i = 0; i < coefficients.length; i++) {\n+        double value = 0.0;\n+        boolean found = false;\n+        for (int j = 0; j < tableau.getHeight(); j++) {\n+            if (tableau.getEntry(j, i + getNumObjectiveFunctions()) == 1) {\n+                if (found) {\n+                    // multiple variables can take a given value, set to 0\n+                    value = 0.0;\n+                    break;\n+                }\n+                value = tableau.getEntry(j, getRhsOffset());\n+                for (int k = 0; k < coefficients.length; k++) {\n+                    if (k != i && tableau.getEntry(j, k + getNumObjectiveFunctions()) != 0) {\n+                        // already found a non-zero coefficient for a different variable\n+                        // that takes the same value - set to 0\n+                        value = 0.0;\n+                        break;\n                     }\n                 }\n+                found = true;\n             }\n         }\n-        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+        coefficients[i] = value;\n     }\n+    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+}\n \n     /**\n      * Subtracts a multiple of one row from another.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}