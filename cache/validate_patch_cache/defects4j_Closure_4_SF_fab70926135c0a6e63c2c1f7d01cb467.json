{
    "patch": "    int initialRegistrySize = registry.size();\n    JSType namedType = null;\n\n    if (resolveViaRegistry(t, enclosing)) {\n      if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n      }\n      namedType = getReferencedType();\n    } else {\n      if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n      }\n      resolveViaProperties(t, enclosing);\n      if (isResolved()) {\n        namedType = this;\n      }\n    }\n\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n\n    // If the registry has grown, we know there was a recursive call to resolveInternal, and\n    // we need to resolve this type again in case it cascaded to more types.\n    if (registry.size() > initialRegistrySize) {\n      return resolveInternal(t, enclosing);\n    }\n\n    return namedType != null && registry.isLastGeneration() ? namedType : this;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..d59c32e0 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,36 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+    int initialRegistrySize = registry.size();\n+    JSType namedType = null;\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    if (resolveViaRegistry(t, enclosing)) {\n+      if (detectImplicitPrototypeCycle()) {\n+        handleTypeCycle(t);\n+      }\n+      namedType = getReferencedType();\n+    } else {\n+      if (detectImplicitPrototypeCycle()) {\n+        handleTypeCycle(t);\n+      }\n+      resolveViaProperties(t, enclosing);\n+      if (isResolved()) {\n+        namedType = this;\n+      }\n     }\n \n     super.resolveInternal(t, enclosing);\n     if (isResolved()) {\n       finishPropertyContinuations();\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+\n+    // If the registry has grown, we know there was a recursive call to resolveInternal, and\n+    // we need to resolve this type again in case it cascaded to more types.\n+    if (registry.size() > initialRegistrySize) {\n+      return resolveInternal(t, enclosing);\n+    }\n+\n+    return namedType != null && registry.isLastGeneration() ? namedType : this;\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}