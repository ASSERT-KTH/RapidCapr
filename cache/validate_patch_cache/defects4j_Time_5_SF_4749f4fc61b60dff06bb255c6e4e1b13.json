{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    boolean hasYears = type.isSupported(DurationFieldType.years());\n    boolean hasMonths = type.isSupported(DurationFieldType.months());\n\n    if (hasYears || hasMonths) {\n        int totalMonths = getMonths() + (getYears() * 12);\n        int years = hasYears ? totalMonths / 12 : 0;\n        int months = hasMonths ? totalMonths % 12 : 0;\n\n        // If total months is not equal to the original total months, calculate the new number of days\n        if (totalMonths != (years * 12) + months) {\n            int days = getDays() + (getWeeks() * 7);\n            days -= years * 365;\n            days -= months * 30;\n            if (days != getDays() + (getWeeks() * 7)) {\n                result = result.withDays(days);\n            }\n        }\n\n        // If years or months are changed, update the period\n        if (years != getYears() || months != getMonths()) {\n            result = result.withYears(years).withMonths(months);\n        }\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..4e998bad 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,41 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis();\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+\n+    boolean hasYears = type.isSupported(DurationFieldType.years());\n+    boolean hasMonths = type.isSupported(DurationFieldType.months());\n+\n+    if (hasYears || hasMonths) {\n+        int totalMonths = getMonths() + (getYears() * 12);\n+        int years = hasYears ? totalMonths / 12 : 0;\n+        int months = hasMonths ? totalMonths % 12 : 0;\n+\n+        // If total months is not equal to the original total months, calculate the new number of days\n+        if (totalMonths != (years * 12) + months) {\n+            int days = getDays() + (getWeeks() * 7);\n+            days -= years * 365;\n+            days -= months * 30;\n+            if (days != getDays() + (getWeeks() * 7)) {\n+                result = result.withDays(days);\n             }\n         }\n-        return result;\n+\n+        // If years or months are changed, update the period\n+        if (years != getYears() || months != getMonths()) {\n+            result = result.withYears(years).withMonths(months);\n+        }\n     }\n \n+    return result;\n+}\n+\n }",
    "result_reason": "java.lang.UnsupportedOperationException: Field is not supported",
    "test_result": "FAIL"
}