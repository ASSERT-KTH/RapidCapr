{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // Get the initial offset at the given local time\n    int initialOffset = getOffset(instantLocal);\n\n    // If the initial offset is non-zero, return it immediately\n    if (initialOffset != 0) {\n        return initialOffset;\n    }\n\n    // Locate the previous and next transitions\n    long prevTransition = previousTransition(instantLocal);\n    long nextTransition = nextTransition(instantLocal);\n\n    // If there are no transitions, return the initial offset\n    if (prevTransition == Long.MIN_VALUE && nextTransition == Long.MAX_VALUE) {\n        return initialOffset;\n    }\n\n    // Get the offsets immediately before and after the next transition\n    int prevOffset = (prevTransition == Long.MIN_VALUE) ? initialOffset : getOffset(prevTransition);\n    int nextOffset = (nextTransition == Long.MAX_VALUE) ? initialOffset : getOffset(nextTransition);\n\n    // If the local time is ambiguous\n    if (prevOffset > nextOffset) {\n        // Fix the local time to be within the first occurrence of the ambiguous\n        // local time by moving it forward to a time after the previous transition\n        long correctedLocal = prevTransition + 1;\n        int correctedOffset = getOffset(correctedLocal);\n\n        // If the corrected offset is different from the initial offset,\n        // then we're in the second occurrence of the ambiguous local time\n        if (correctedOffset != initialOffset) {\n            return nextOffset;\n        }\n        // Otherwise, we're in the first occurrence of the ambiguous local time\n        else {\n            return prevOffset;\n        }\n    }\n\n    // If the local time is before the first transition\n    if (prevTransition == Long.MIN_VALUE) {\n        return initialOffset;\n    }\n\n    // If the local time is after the last transition\n    if (nextTransition == Long.MAX_VALUE) {\n        return nextOffset;\n    }\n\n    // If the local time is within a gap\n    if (instantLocal >= nextTransition - nextOffset * DateTimeConstants.MILLIS_PER_HOUR && instantLocal < nextTransition - prevOffset * DateTimeConstants.MILLIS_PER_HOUR) {\n        throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" + new DateTime(instantLocal, DateTimeZone.forOffsetMillis(prevOffset)));\n    }\n\n    // If the local time is within an overlap, return the earlier offset\n    if (instantLocal >= prevTransition - prevOffset * DateTimeConstants.MILLIS_PER_HOUR && instantLocal < nextTransition - nextOffset * DateTimeConstants.MILLIS_PER_HOUR) {\n        return prevOffset;\n    }\n\n    // Otherwise, return the later offset\n    return nextOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..5d749384 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,70 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // Get the initial offset at the given local time\n+    int initialOffset = getOffset(instantLocal);\n+\n+    // If the initial offset is non-zero, return it immediately\n+    if (initialOffset != 0) {\n+        return initialOffset;\n+    }\n+\n+    // Locate the previous and next transitions\n+    long prevTransition = previousTransition(instantLocal);\n+    long nextTransition = nextTransition(instantLocal);\n+\n+    // If there are no transitions, return the initial offset\n+    if (prevTransition == Long.MIN_VALUE && nextTransition == Long.MAX_VALUE) {\n+        return initialOffset;\n+    }\n+\n+    // Get the offsets immediately before and after the next transition\n+    int prevOffset = (prevTransition == Long.MIN_VALUE) ? initialOffset : getOffset(prevTransition);\n+    int nextOffset = (nextTransition == Long.MAX_VALUE) ? initialOffset : getOffset(nextTransition);\n+\n+    // If the local time is ambiguous\n+    if (prevOffset > nextOffset) {\n+        // Fix the local time to be within the first occurrence of the ambiguous\n+        // local time by moving it forward to a time after the previous transition\n+        long correctedLocal = prevTransition + 1;\n+        int correctedOffset = getOffset(correctedLocal);\n+\n+        // If the corrected offset is different from the initial offset,\n+        // then we're in the second occurrence of the ambiguous local time\n+        if (correctedOffset != initialOffset) {\n+            return nextOffset;\n         }\n-        return offsetAdjusted;\n+        // Otherwise, we're in the first occurrence of the ambiguous local time\n+        else {\n+            return prevOffset;\n+        }\n+    }\n+\n+    // If the local time is before the first transition\n+    if (prevTransition == Long.MIN_VALUE) {\n+        return initialOffset;\n     }\n \n+    // If the local time is after the last transition\n+    if (nextTransition == Long.MAX_VALUE) {\n+        return nextOffset;\n+    }\n+\n+    // If the local time is within a gap\n+    if (instantLocal >= nextTransition - nextOffset * DateTimeConstants.MILLIS_PER_HOUR && instantLocal < nextTransition - prevOffset * DateTimeConstants.MILLIS_PER_HOUR) {\n+        throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" + new DateTime(instantLocal, DateTimeZone.forOffsetMillis(prevOffset)));\n+    }\n+\n+    // If the local time is within an overlap, return the earlier offset\n+    if (instantLocal >= prevTransition - prevOffset * DateTimeConstants.MILLIS_PER_HOUR && instantLocal < nextTransition - nextOffset * DateTimeConstants.MILLIS_PER_HOUR) {\n+        return prevOffset;\n+    }\n+\n+    // Otherwise, return the later offset\n+    return nextOffset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "java.lang.IllegalArgumentException: Illegal instant due to time zone offset transition: 2010-01-01T23:00:00.000",
    "test_result": "FAIL"
}