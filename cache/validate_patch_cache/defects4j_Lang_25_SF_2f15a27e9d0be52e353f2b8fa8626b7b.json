{
    "patch": "import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class StringEscapeUtils {\n    public static String escapeJava(String input) {\n        if (input == null) {\n            return input;\n        }\n        StringBuilder output = new StringBuilder(input.length() + 50);\n        for (int i = 0; i < input.length(); i++) {\n            char ch = input.charAt(i);\n            if (ch > 0xfff) {\n                output.append(\"\\\\u\" + hex(ch));\n            } else if (ch > 0xff) {\n                output.append(\"\\\\u0\" + hex(ch));\n            } else if (ch > 0x7f) {\n                output.append(\"\\\\u00\" + hex(ch));\n            } else if (ch < 32) {\n                switch (ch) {\n                    case '\\b':\n                        output.append('\\\\');\n                        output.append('b');\n                        break;\n                    case '\\n':\n                        output.append('\\\\');\n                        output.append('n');\n                        break;\n                    case '\\t':\n                        output.append('\\\\');\n                        output.append('t');\n                        break;\n                    case 0x0B:\n                        output.append(\"\\\\u000\" + hex(ch));\n                        break;\n                    case '\\f':\n                        output.append('\\\\');\n                        output.append('f');\n                        break;\n                    case '\\r':\n                        output.append('\\\\');\n                        output.append('r');\n                        break;\n                    default:\n                        if (ch > 0xf) {\n                            output.append(\"\\\\u00\" + hex(ch));\n                        } else {\n                            output.append(\"\\\\u000\" + hex(ch));\n                        }\n                        break;\n                }\n            } else {\n                switch (ch) {\n                    case '\\'':\n                        output.append('\\\\');\n                        output.append('\\'');\n                        break;\n                    case '\"':\n                        output.append('\\\\');\n                        output.append('\"');\n                        break;\n                    case '\\\\':\n                        output.append('\\\\');\n                        output.append('\\\\');\n                        break;\n                    default:\n                        output.append(ch);\n                        break;\n                }\n            }\n        }\n        return output.toString();\n    }\n\n    private static String hex(char ch) {\n        return Integer.toHexString(ch).toUpperCase();\n    }\n\n    public static String unescapeJava(String input) {\n        if (input == null) {\n            return input;\n        }\n        if (input.indexOf('\\\\') == -1) {\n            return input;\n        }\n        StringBuilder output = new StringBuilder(input.length());\n        Pattern pattern = Pattern.compile(\"\\\\\\\\[bfnrt\\\"'/\\\\\\\\]|\\\\\\\\u[A-Fa-f0-9]{4}\");\n        Matcher matcher = pattern.matcher(input);\n        int position = 0;\n        while (matcher.find()) {\n            output.append(input.substring(position, matcher.start()));\n            String match = matcher.group();\n            if (match.charAt(1) == 'u') {\n                output.append((char) Integer.parseInt(match.substring(2), 16));\n            } else {\n                output.append(unescape(match.charAt(1)));\n            }\n            position = matcher.end();\n        }\n        output.append(input.substring(position));\n        return output.toString();\n    }\n\n    private static char unescape(char ch) {\n        switch (ch) {\n            case 'b':\n                return '\\b';\n            case 'f':\n                return '\\f';\n            case 'n':\n                return '\\n';\n            case 'r':\n                return '\\r';\n            case 't':\n                return '\\t';\n            case '\\\"':\n                return '\\\"';\n            case '\\'':\n                return '\\'';\n            case '\\\\':\n                return '\\\\';\n            default:\n                return ch;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..1e6bcc96 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,131 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+public class StringEscapeUtils {\n+    public static String escapeJava(String input) {\n+        if (input == null) {\n+            return input;\n+        }\n+        StringBuilder output = new StringBuilder(input.length() + 50);\n+        for (int i = 0; i < input.length(); i++) {\n+            char ch = input.charAt(i);\n+            if (ch > 0xfff) {\n+                output.append(\"\\\\u\" + hex(ch));\n+            } else if (ch > 0xff) {\n+                output.append(\"\\\\u0\" + hex(ch));\n+            } else if (ch > 0x7f) {\n+                output.append(\"\\\\u00\" + hex(ch));\n+            } else if (ch < 32) {\n+                switch (ch) {\n+                    case '\\b':\n+                        output.append('\\\\');\n+                        output.append('b');\n+                        break;\n+                    case '\\n':\n+                        output.append('\\\\');\n+                        output.append('n');\n+                        break;\n+                    case '\\t':\n+                        output.append('\\\\');\n+                        output.append('t');\n+                        break;\n+                    case 0x0B:\n+                        output.append(\"\\\\u000\" + hex(ch));\n+                        break;\n+                    case '\\f':\n+                        output.append('\\\\');\n+                        output.append('f');\n+                        break;\n+                    case '\\r':\n+                        output.append('\\\\');\n+                        output.append('r');\n+                        break;\n+                    default:\n+                        if (ch > 0xf) {\n+                            output.append(\"\\\\u00\" + hex(ch));\n+                        } else {\n+                            output.append(\"\\\\u000\" + hex(ch));\n+                        }\n+                        break;\n+                }\n+            } else {\n+                switch (ch) {\n+                    case '\\'':\n+                        output.append('\\\\');\n+                        output.append('\\'');\n+                        break;\n+                    case '\"':\n+                        output.append('\\\\');\n+                        output.append('\"');\n+                        break;\n+                    case '\\\\':\n+                        output.append('\\\\');\n+                        output.append('\\\\');\n+                        break;\n+                    default:\n+                        output.append(ch);\n+                        break;\n+                }\n+            }\n+        }\n+        return output.toString();\n+    }\n+\n+    private static String hex(char ch) {\n+        return Integer.toHexString(ch).toUpperCase();\n+    }\n+\n+    public static String unescapeJava(String input) {\n+        if (input == null) {\n+            return input;\n+        }\n+        if (input.indexOf('\\\\') == -1) {\n+            return input;\n+        }\n+        StringBuilder output = new StringBuilder(input.length());\n+        Pattern pattern = Pattern.compile(\"\\\\\\\\[bfnrt\\\"'/\\\\\\\\]|\\\\\\\\u[A-Fa-f0-9]{4}\");\n+        Matcher matcher = pattern.matcher(input);\n+        int position = 0;\n+        while (matcher.find()) {\n+            output.append(input.substring(position, matcher.start()));\n+            String match = matcher.group();\n+            if (match.charAt(1) == 'u') {\n+                output.append((char) Integer.parseInt(match.substring(2), 16));\n+            } else {\n+                output.append(unescape(match.charAt(1)));\n+            }\n+            position = matcher.end();\n+        }\n+        output.append(input.substring(position));\n+        return output.toString();\n+    }\n+\n+    private static char unescape(char ch) {\n+        switch (ch) {\n+            case 'b':\n+                return '\\b';\n+            case 'f':\n+                return '\\f';\n+            case 'n':\n+                return '\\n';\n+            case 'r':\n+                return '\\r';\n+            case 't':\n+                return '\\t';\n+            case '\\\"':\n+                return '\\\"';\n+            case '\\'':\n+                return '\\'';\n+            case '\\\\':\n+                return '\\\\';\n+            default:\n+                return ch;\n+        }\n+    }\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}