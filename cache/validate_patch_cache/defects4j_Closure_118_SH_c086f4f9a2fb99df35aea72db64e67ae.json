{
    "patch": "if (child.isString()) {\n  // Name is always a string. However, it can be a protectable name such as\n  // 'constructor' and also could be an invalid name.\n  String name = child.getString();\n  T type = typeSystem.getType(getScope(), n, name);\n\n  Property prop = getProperty(name);\n  if (!prop.scheduleRenaming(child,\n                             processProperty(t, prop, type, null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(\n          t.getSourceName(), child, propertiesToErrorFor.get(name),\n          Warnings.INVALIDATION, name,\n          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n    }\n  }\n} else {\n  checkState(NodeUtil.isGetterDef(child)\n             || NodeUtil.isSetterDef(child), child);\n  Node nameNode = null;\n  if (NodeUtil.isGetterDef(child)) {\n    nameNode = child.getFirstChild();\n    checkState(Token.GETPROP == nameNode.getType());\n    nameNode = nameNode.getLastChild();\n  } else {\n    checkState(NodeUtil.isSetterDef(child));\n    nameNode = child.getSecondChild();\n    checkState(Token.GETPROP == nameNode.getType());\n    nameNode = nameNode.getLastChild();\n  }\n  String name = nameNode.getString();\n  T type = typeSystem.getType(getScope(), n, name);\n  Property prop = getProperty(name);\n  if (!prop.scheduleRenaming(\n      nameNode, processProperty(t, prop, type, child))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(\n          t.getSourceName(), nameNode, propertiesToErrorFor.get(name),\n          Warnings.INVALIDATION, name,\n          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..6473968a 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,49 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+if (child.isString()) {\n+  // Name is always a string. However, it can be a protectable name such as\n+  // 'constructor' and also could be an invalid name.\n+  String name = child.getString();\n+  T type = typeSystem.getType(getScope(), n, name);\n+\n+  Property prop = getProperty(name);\n+  if (!prop.scheduleRenaming(child,\n+                             processProperty(t, prop, type, null))) {\n+    if (propertiesToErrorFor.containsKey(name)) {\n+      compiler.report(JSError.make(\n+          t.getSourceName(), child, propertiesToErrorFor.get(name),\n+          Warnings.INVALIDATION, name,\n+          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+    }\n+  }\n+} else {\n+  checkState(NodeUtil.isGetterDef(child)\n+             || NodeUtil.isSetterDef(child), child);\n+  Node nameNode = null;\n+  if (NodeUtil.isGetterDef(child)) {\n+    nameNode = child.getFirstChild();\n+    checkState(Token.GETPROP == nameNode.getType());\n+    nameNode = nameNode.getLastChild();\n+  } else {\n+    checkState(NodeUtil.isSetterDef(child));\n+    nameNode = child.getSecondChild();\n+    checkState(Token.GETPROP == nameNode.getType());\n+    nameNode = nameNode.getLastChild();\n+  }\n+  String name = nameNode.getString();\n+  T type = typeSystem.getType(getScope(), n, name);\n+  Property prop = getProperty(name);\n+  if (!prop.scheduleRenaming(\n+      nameNode, processProperty(t, prop, type, child))) {\n+    if (propertiesToErrorFor.containsKey(name)) {\n+      compiler.report(JSError.make(\n+          t.getSourceName(), nameNode, propertiesToErrorFor.get(name),\n+          Warnings.INVALIDATION, name,\n+          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+    }\n+  }\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}