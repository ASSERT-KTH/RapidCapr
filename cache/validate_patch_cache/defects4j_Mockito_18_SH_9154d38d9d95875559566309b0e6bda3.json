{
    "patch": "public ReturnValue execute(Class returnType, Object... arguments) {\n    if (returnType.equals(Void.TYPE)) {\n        try {\n            method.invoke(object, arguments);\n            return new ReturnValue(null, null);\n        } catch (IllegalAccessException | InvocationTargetException e) {\n            return new ReturnValue(null, e);\n        }\n    } else {\n        try {\n            Object returnValue = method.invoke(object, arguments);\n            return new ReturnValue(returnType.cast(returnValue), null);\n        } catch (IllegalAccessException | InvocationTargetException e) {\n            return new ReturnValue(null, e);\n        } catch (ClassCastException e) {\n            return new ReturnValue(null, new Exception(\"Return type mismatch\"));\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}