{
    "patch": "public String getprop(String propName) throws IOException {\n    Process proc = Runtime.getRuntime().exec(\"getprop \" + propName);\n    InputStream inputStream = proc.getInputStream();\n    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n    String line = bufferedReader.readLine();\n    bufferedReader.close();\n    inputStreamReader.close();\n    inputStream.close();\n    if (line != null && !line.isEmpty()) {\n        return line;\n    } \n    return null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..16e5ae83 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop(String propName) throws IOException {\n+    Process proc = Runtime.getRuntime().exec(\"getprop \" + propName);\n+    InputStream inputStream = proc.getInputStream();\n+    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n+    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n+    String line = bufferedReader.readLine();\n+    bufferedReader.close();\n+    inputStreamReader.close();\n+    inputStream.close();\n+    if (line != null && !line.isEmpty()) {\n+        return line;\n+    } \n+    return null;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}