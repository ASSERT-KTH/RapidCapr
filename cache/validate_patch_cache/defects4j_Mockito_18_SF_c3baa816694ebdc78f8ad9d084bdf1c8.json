{
    "patch": "public static String replaceString(String str, char ch1, char ch2) {\n    if (str == null) {\n        return null;\n    } else {\n        char[] charArray = str.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n            if (charArray[i] == ch1) {\n                charArray[i] = ch2;\n            }\n        }\n        return String.valueOf(charArray);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..c0e66ceae 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,19 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static String replaceString(String str, char ch1, char ch2) {\n+    if (str == null) {\n+        return null;\n+    } else {\n+        char[] charArray = str.toCharArray();\n+        for (int i = 0; i < charArray.length; i++) {\n+            if (charArray[i] == ch1) {\n+                charArray[i] = ch2;\n+            }\n+        }\n+        return String.valueOf(charArray);\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}