{
    "patch": "          // We only care about one assignment on function level. Variable\n          // shadowing ensures that there is no mixing with outer scope.\n          if (getOneAndOnlyAssignment() != null) {\n            return true;\n          } else if (ref != null && !ref.isSimpleAssignmentToName()) {\n            return false;\n          } else if (getInitializingReference() == null) {\n            return true;\n          } else {\n            return getInitializingReference().getPath().equals(ref.getPath());\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..70339969 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,17 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // We only care about one assignment on function level. Variable\n+          // shadowing ensures that there is no mixing with outer scope.\n+          if (getOneAndOnlyAssignment() != null) {\n+            return true;\n+          } else if (ref != null && !ref.isSimpleAssignmentToName()) {\n+            return false;\n+          } else if (getInitializingReference() == null) {\n+            return true;\n+          } else {\n+            return getInitializingReference().getPath().equals(ref.getPath());\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}