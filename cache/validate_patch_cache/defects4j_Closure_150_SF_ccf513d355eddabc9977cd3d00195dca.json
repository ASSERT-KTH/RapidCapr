{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) {\n        return;\n    }\n    \n    if (parent != null && parent.getType() == Token.LP) {\n        Node exprResultParent = parent.getParent();\n        if (exprResultParent != null && exprResultParent.getType() == Token.EXPR_RESULT\n                && exprResultParent.getNext() == null && exprResultParent.getParent() != null\n                && exprResultParent.getParent().getType() == Token.SCRIPT) {\n            handleFunctionInputs(exprResultParent.getParent());\n            return;\n        }\n    }\n\n    if (n.getType() == Token.FUNCTION) {\n        if (parent != null && parent.getType() == Token.NAME) {\n            return; // Skip named functions\n        }\n        defineDeclaredFunction(n, parent);\n        return;\n    }\n\n    if (n.getType() == Token.CATCH) {\n        defineCatch(n, parent);\n        return;\n    }\n\n    if (n.getType() == Token.VAR) {\n        defineVar(n, parent);\n        return;\n    }\n\n    attachLiteralTypes(n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..ad38a20b 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,31 +1440,43 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) {\n+        return;\n+    }\n+    \n+    if (parent != null && parent.getType() == Token.LP) {\n+        Node exprResultParent = parent.getParent();\n+        if (exprResultParent != null && exprResultParent.getType() == Token.EXPR_RESULT\n+                && exprResultParent.getNext() == null && exprResultParent.getParent() != null\n+                && exprResultParent.getParent().getType() == Token.SCRIPT) {\n+            handleFunctionInputs(exprResultParent.getParent());\n+            return;\n+        }\n+    }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+    if (n.getType() == Token.FUNCTION) {\n+        if (parent != null && parent.getType() == Token.NAME) {\n+            return; // Skip named functions\n+        }\n+        defineDeclaredFunction(n, parent);\n         return;\n-      }\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+    if (n.getType() == Token.CATCH) {\n+        defineCatch(n, parent);\n+        return;\n     }\n \n+    if (n.getType() == Token.VAR) {\n+        defineVar(n, parent);\n+        return;\n+    }\n+\n+    attachLiteralTypes(n);\n+}\n+\n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {\n       // Handle bleeding functions.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}