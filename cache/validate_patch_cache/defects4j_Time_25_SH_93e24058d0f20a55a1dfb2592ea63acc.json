{
    "patch": "                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted - 1);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                } else {\n                    long nextLocalWall = nextTransition(nextLocal + DateTimeConstants.MILLIS_PER_HOUR);\n                    if (nextLocalWall == nextLocal) {\n                        return getOffset(nextAdjusted);\n                    } else {\n                        return offsetLocal + 1;\n                    }\n                }\n            } else {\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted - 1);\n                if (prevLocal != prevAdjusted && offsetLocal - getOffset(prevLocal) >= 0) {\n                    return getOffset(prevAdjusted);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..e7010152 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,22 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted - 1);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                } else {\n+                    long nextLocalWall = nextTransition(nextLocal + DateTimeConstants.MILLIS_PER_HOUR);\n+                    if (nextLocalWall == nextLocal) {\n+                        return getOffset(nextAdjusted);\n+                    } else {\n+                        return offsetLocal + 1;\n+                    }\n+                }\n+            } else {\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted - 1);\n+                if (prevLocal != prevAdjusted && offsetLocal - getOffset(prevLocal) >= 0) {\n+                    return getOffset(prevAdjusted);\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}