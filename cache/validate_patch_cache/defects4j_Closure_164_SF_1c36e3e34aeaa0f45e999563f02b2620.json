{
    "patch": "  // Helper to check whether the two parameter lists are subtypes of each other.\n  // this return whether that could be a subtype of this, with these parameter types.\n  private boolean areParamsTypesCompatible(Node thisFirstParam,\n      Node thatFirstParam,\n      boolean isThisVarArgs,\n      boolean isThatVarArgs) {\n    while (thisFirstParam != null && thatFirstParam != null) {\n      JSType thisParamType = thisFirstParam.getJSType();\n      JSType thatParamType = thatFirstParam.getJSType();\n      if (thisParamType != null) {\n        if (thatParamType != null && thatParamType.isSubtype(thisParamType)) {\n          // If this requires a var args, it will match all later parameters.\n          if (isThisVarArgs) {\n            return true;\n          }\n        } else {\n          // NB: Es6IterableChecker uses a very loose notion of iterable, allowing objects,\n          // records, and non-linear types into the mix.\n          if (!isIterableMismatchIgnorable(thisFirstParam, thatFirstParam)) {\n            return false;\n          }\n        }\n      }\n\n      // Don't advance if we have variable arguments\n      if (!isThisVarArgs) {\n        thisFirstParam = thisFirstParam.getNext();\n      }\n      if (!isThatVarArgs) {\n        thatFirstParam = thatFirstParam.getNext();\n      }\n\n      // Both var_args indicates the end\n      if (isThisVarArgs && isThatVarArgs) {\n        thisFirstParam = null;\n        thatFirstParam = null;\n      }\n    }\n\n    // If we got here, we matched every argument that 'that' had, so it MAY be a subtype of 'this'\n    return true;\n  }\n\n  public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    //\n    // If this.paramType[i] is required,\n    // then that.paramType[i] is required.\n    //\n    // In theory, the \"required-ness\" should work in the other direction as\n    // well. In other words, if we have\n    //\n    // function f(number, number) {}\n    // function g(number) {}\n    //\n    // Then f *should* not be a subtype of g, and g *should* not be\n    // a subtype of f. But in practice, we do not implement it this way.\n    // We want to support the use case where you can pass g where f is\n    // expected, and pretend that g ignores the second argument.\n    // That way, you can have a single \"no-op\" function, and you don't have\n    // to create a new no-op function for every possible type signature.\n    //\n    // So, in this case, g < f, but f !< g\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    boolean thisVarArgs = false;\n    boolean thatVarArgs = false;\n    while (thisParam != null && thatParam != null) {\n      // If we run out of 'that', then all future parameters must allow undefined.\n      if (thatVarArgs) {\n        if (!areParamsTypesCompatible(\n            thisParam, thatLastParam, thisVarArgs, thatVarArgs)) {\n          return false;\n        } else {\n          return true;\n        }\n      }\n\n      JSType thisParamType = thisParam.getJSType();\n      JSType thatParamType = thatParam.getJSType();\n\n      if (thisParamType != null) {\n        // If that parameter is not undefined/null, it should be a subtype of the\n        // corresponding parameter of the callee type.\n        // NB: Es6IterableChecker uses a very loose notion of iterable, allowing objects,\n        // records, and non-linear types into the mix.\n        if (thatParamType == null || (!thatParamType.isUnknownType()\n            && !thatParamType.isSubtype(thisParamType)\n            && !isIterableMismatchIgnorable(thisParam, thatParam))) {\n          // If we run out of 'this', then we can safely ignore that parameter.\n          if (thisVarArgs) {\n            thatParam = thatParam.getNext();\n            if (thatParam != null) {\n              thatVarArgs = true;\n              thatLastParam = thatParam.getPrevious();\n            }\n            continue;\n          } else {\n            return false;\n          }\n        }\n      }\n\n      thisVarArgs = thisParam.isVarArgs();\n      thatVarArgs = thatParam.isVarArgs();\n\n      // Don't advance if we have variable arguments.\n      if (!thisVarArgs) {\n        thisParam = thisParam.getNext();\n      }\n      if (!thatVarArgs) {\n        thatParam = thatParam.getNext();\n      }\n\n      if (thisVarArgs && thatVarArgs) {\n        thisParam = null;\n        thatParam = null;\n      }\n    }\n\n    // If there are remaining parameters in calleeType, we need to make sure that they all\n    // allow undefined.\n    while (thatParam != null && thatLastParam != null) {\n      thatLastParam = thatLastParam.getPrevious();\n      if (!thatParam.getJSType().isUnknownType()) {\n        if (!areParamsTypesCompatible(\n            thisParam, thatParam, thisVarArgs, thatVarArgs)) {\n          return false;\n        }\n      }\n      thatParam = thatParam.getNext();\n    }\n\n    // \"that\" can't be a subtype, because it's missing a required argument.\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..3f282909 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,6 +77,49 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n+  // Helper to check whether the two parameter lists are subtypes of each other.\n+  // this return whether that could be a subtype of this, with these parameter types.\n+  private boolean areParamsTypesCompatible(Node thisFirstParam,\n+      Node thatFirstParam,\n+      boolean isThisVarArgs,\n+      boolean isThatVarArgs) {\n+    while (thisFirstParam != null && thatFirstParam != null) {\n+      JSType thisParamType = thisFirstParam.getJSType();\n+      JSType thatParamType = thatFirstParam.getJSType();\n+      if (thisParamType != null) {\n+        if (thatParamType != null && thatParamType.isSubtype(thisParamType)) {\n+          // If this requires a var args, it will match all later parameters.\n+          if (isThisVarArgs) {\n+            return true;\n+          }\n+        } else {\n+          // NB: Es6IterableChecker uses a very loose notion of iterable, allowing objects,\n+          // records, and non-linear types into the mix.\n+          if (!isIterableMismatchIgnorable(thisFirstParam, thatFirstParam)) {\n+            return false;\n+          }\n+        }\n+      }\n+\n+      // Don't advance if we have variable arguments\n+      if (!isThisVarArgs) {\n+        thisFirstParam = thisFirstParam.getNext();\n+      }\n+      if (!isThatVarArgs) {\n+        thatFirstParam = thatFirstParam.getNext();\n+      }\n+\n+      // Both var_args indicates the end\n+      if (isThisVarArgs && isThatVarArgs) {\n+        thisFirstParam = null;\n+        thatFirstParam = null;\n+      }\n+    }\n+\n+    // If we got here, we matched every argument that 'that' had, so it MAY be a subtype of 'this'\n+    return true;\n+  }\n+\n   public boolean isSubtype(JSType other) {\n     if (!(other instanceof ArrowType)) {\n       return false;\n@@ -113,43 +156,75 @@ final class ArrowType extends JSType {\n     // So, in this case, g < f, but f !< g\n     Node thisParam = parameters.getFirstChild();\n     Node thatParam = that.parameters.getFirstChild();\n+    boolean thisVarArgs = false;\n+    boolean thatVarArgs = false;\n     while (thisParam != null && thatParam != null) {\n+      // If we run out of 'that', then all future parameters must allow undefined.\n+      if (thatVarArgs) {\n+        if (!areParamsTypesCompatible(\n+            thisParam, thatLastParam, thisVarArgs, thatVarArgs)) {\n+          return false;\n+        } else {\n+          return true;\n+        }\n+      }\n+\n       JSType thisParamType = thisParam.getJSType();\n       JSType thatParamType = thatParam.getJSType();\n+\n       if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n-          return false;\n+        // If that parameter is not undefined/null, it should be a subtype of the\n+        // corresponding parameter of the callee type.\n+        // NB: Es6IterableChecker uses a very loose notion of iterable, allowing objects,\n+        // records, and non-linear types into the mix.\n+        if (thatParamType == null || (!thatParamType.isUnknownType()\n+            && !thatParamType.isSubtype(thisParamType)\n+            && !isIterableMismatchIgnorable(thisParam, thatParam))) {\n+          // If we run out of 'this', then we can safely ignore that parameter.\n+          if (thisVarArgs) {\n+            thatParam = thatParam.getNext();\n+            if (thatParam != null) {\n+              thatVarArgs = true;\n+              thatLastParam = thatParam.getPrevious();\n+            }\n+            continue;\n+          } else {\n+            return false;\n+          }\n         }\n       }\n \n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n-\n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+      thisVarArgs = thisParam.isVarArgs();\n+      thatVarArgs = thatParam.isVarArgs();\n \n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n+      // Don't advance if we have variable arguments.\n+      if (!thisVarArgs) {\n         thisParam = thisParam.getNext();\n       }\n-      if (!thatIsVarArgs) {\n+      if (!thatVarArgs) {\n         thatParam = thatParam.getNext();\n       }\n \n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n+      if (thisVarArgs && thatVarArgs) {\n         thisParam = null;\n         thatParam = null;\n       }\n     }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n+    // If there are remaining parameters in calleeType, we need to make sure that they all\n+    // allow undefined.\n+    while (thatParam != null && thatLastParam != null) {\n+      thatLastParam = thatLastParam.getPrevious();\n+      if (!thatParam.getJSType().isUnknownType()) {\n+        if (!areParamsTypesCompatible(\n+            thisParam, thatParam, thisVarArgs, thatVarArgs)) {\n+          return false;\n+        }\n+      }\n+      thatParam = thatParam.getNext();\n+    }\n \n+    // \"that\" can't be a subtype, because it's missing a required argument.\n     return true;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}