{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n\n    if (instantLocal == nextAdjusted && instantAdjusted == nextLocal) {\n        // in gap\n        return offsetLocal > offsetAdjusted ? offsetLocal : offsetAdjusted;\n    } else if (instantLocal == nextAdjusted) {\n        // overlap\n        int prevOffset = getOffset(previousTransition(instantLocal));\n        return offsetLocal > prevOffset ? offsetLocal : offsetAdjusted;\n    } else if (instantAdjusted == nextLocal) {\n        // overlap\n        return offsetLocal > offsetAdjusted ? offsetLocal : getOffset(nextLocal);\n    } else if (nextLocal == nextAdjusted) {\n        // in gap\n        return getOffset(nextLocal);\n    } else {\n        // normal case\n        int nextLocalOffset = getOffset(nextLocal);\n        int nextAdjustedOffset = getOffset(nextAdjusted);\n        if (nextLocalOffset == nextAdjustedOffset) {\n            return offsetLocal > offsetAdjusted ? offsetLocal : offsetAdjusted;\n        } else if (nextLocalOffset < nextAdjustedOffset) {\n            return offsetLocal;\n        } else {\n            return offsetAdjusted;\n        }                   \n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..9edfc21c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,36 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+\n+    if (instantLocal == nextAdjusted && instantAdjusted == nextLocal) {\n+        // in gap\n+        return offsetLocal > offsetAdjusted ? offsetLocal : offsetAdjusted;\n+    } else if (instantLocal == nextAdjusted) {\n+        // overlap\n+        int prevOffset = getOffset(previousTransition(instantLocal));\n+        return offsetLocal > prevOffset ? offsetLocal : offsetAdjusted;\n+    } else if (instantAdjusted == nextLocal) {\n+        // overlap\n+        return offsetLocal > offsetAdjusted ? offsetLocal : getOffset(nextLocal);\n+    } else if (nextLocal == nextAdjusted) {\n+        // in gap\n+        return getOffset(nextLocal);\n+    } else {\n+        // normal case\n+        int nextLocalOffset = getOffset(nextLocal);\n+        int nextAdjustedOffset = getOffset(nextAdjusted);\n+        if (nextLocalOffset == nextAdjustedOffset) {\n+            return offsetLocal > offsetAdjusted ? offsetLocal : offsetAdjusted;\n+        } else if (nextLocalOffset < nextAdjustedOffset) {\n+            return offsetLocal;\n+        } else {\n+            return offsetAdjusted;\n+        }                   \n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}