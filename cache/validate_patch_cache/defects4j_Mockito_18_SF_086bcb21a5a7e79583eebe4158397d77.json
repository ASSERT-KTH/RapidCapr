{
    "patch": "public static <T> ReturnValue<T> getEmptyReturnValue(Class<T> type) {\n    if (Iterable.class.isAssignableFrom(type)) {\n        return new ReturnValue<>(Collections.emptyList());\n    } else if (type.isPrimitive()) {\n        return new ReturnValue<>(defaultValue(type));\n    } else {\n        return new ReturnValue<>(null);\n    }\n}\n\nprivate static <T> T defaultValue(Class<T> clazz) {\n    if (clazz == boolean.class) {\n        return (T) Boolean.FALSE;\n    } else if (clazz == char.class) {\n        return (T) (Character) '\\u0000';\n    } else if (clazz == byte.class || clazz == short.class || clazz == int.class || clazz == long.class || clazz == float.class || clazz == double.class) {\n        return (T) (Number) 0;\n    } else {\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..46d8d80d2 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,27 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static <T> ReturnValue<T> getEmptyReturnValue(Class<T> type) {\n+    if (Iterable.class.isAssignableFrom(type)) {\n+        return new ReturnValue<>(Collections.emptyList());\n+    } else if (type.isPrimitive()) {\n+        return new ReturnValue<>(defaultValue(type));\n+    } else {\n+        return new ReturnValue<>(null);\n+    }\n+}\n+\n+private static <T> T defaultValue(Class<T> clazz) {\n+    if (clazz == boolean.class) {\n+        return (T) Boolean.FALSE;\n+    } else if (clazz == char.class) {\n+        return (T) (Character) '\\u0000';\n+    } else if (clazz == byte.class || clazz == short.class || clazz == int.class || clazz == long.class || clazz == float.class || clazz == double.class) {\n+        return (T) (Number) 0;\n+    } else {\n+        return null;\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}