{
    "patch": "public static double getTypedPercent(String js) {\n    int count = 0;\n    int total = 0;\n    Scanner scan = new Scanner(js);\n    while(scan.hasNext()) {\n        if(scan.hasNextInt()) {\n            total++;\n            int num = scan.nextInt();\n            if(num >= 1 && num <= 100) {\n                count++;\n            }\n        } else {\n            scan.next();\n        }\n    }\n    scan.close();\n    if(total == 0) {\n        return 0.0;\n    } else {\n        return (double)count / total * 100.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..6ce17a35 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String js) {\n+    int count = 0;\n+    int total = 0;\n+    Scanner scan = new Scanner(js);\n+    while(scan.hasNext()) {\n+        if(scan.hasNextInt()) {\n+            total++;\n+            int num = scan.nextInt();\n+            if(num >= 1 && num <= 100) {\n+                count++;\n+            }\n+        } else {\n+            scan.next();\n+        }\n+    }\n+    scan.close();\n+    if(total == 0) {\n+        return 0.0;\n+    } else {\n+        return (double)count / total * 100.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}