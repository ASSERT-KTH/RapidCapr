{
    "patch": "    private void extractActualTypeArguments(Type classType, Map<TypeVariable, Type> contextualActualTypeParameters) {\n        if (!(classType instanceof ParameterizedType)) {\n            return;\n        }\n        ParameterizedType parameterizedType = (ParameterizedType) classType;\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n        Type[] rawTypeArguments = parameterizedType.getRawType().getTypeParameters();\n\n        for (int i = 0; i < actualTypeArguments.length; i++) {\n            TypeVariable rawTypeArgument = (TypeVariable) rawTypeArguments[i];\n            Type actualTypeArgument = actualTypeArguments[i];\n\n            if (actualTypeArgument instanceof ParameterizedType) {\n                ParameterizedType parameterizedTypeArgument = (ParameterizedType) actualTypeArgument;\n                if (parameterizedTypeArgument.getRawType() instanceof Class) {\n                    contextualActualTypeParameters.put(rawTypeArgument, actualTypeArgument);\n                    extractActualTypeArguments(parameterizedTypeArgument, contextualActualTypeParameters);\n                }\n            } else {\n                contextualActualTypeParameters.put(rawTypeArgument, actualTypeArgument);\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..2dae8e9ad 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -64,23 +64,29 @@ public abstract class GenericMetadataSupport {\n \n \n     protected void registerTypeVariablesOn(Type classType) {\n-        if (!(classType instanceof ParameterizedType)) {\n-            return;\n-        }\n-        ParameterizedType parameterizedType = (ParameterizedType) classType;\n-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n-        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n-        for (int i = 0; i < actualTypeArguments.length; i++) {\n-            TypeVariable typeParameter = typeParameters[i];\n-            Type actualTypeArgument = actualTypeArguments[i];\n-\n-            if (actualTypeArgument instanceof WildcardType) {\n-                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n-                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n-            }\n-            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n-        }\n+    private void extractActualTypeArguments(Type classType, Map<TypeVariable, Type> contextualActualTypeParameters) {\n+        if (!(classType instanceof ParameterizedType)) {\n+            return;\n+        }\n+        ParameterizedType parameterizedType = (ParameterizedType) classType;\n+        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+        Type[] rawTypeArguments = parameterizedType.getRawType().getTypeParameters();\n+\n+        for (int i = 0; i < actualTypeArguments.length; i++) {\n+            TypeVariable rawTypeArgument = (TypeVariable) rawTypeArguments[i];\n+            Type actualTypeArgument = actualTypeArguments[i];\n+\n+            if (actualTypeArgument instanceof ParameterizedType) {\n+                ParameterizedType parameterizedTypeArgument = (ParameterizedType) actualTypeArgument;\n+                if (parameterizedTypeArgument.getRawType() instanceof Class) {\n+                    contextualActualTypeParameters.put(rawTypeArgument, actualTypeArgument);\n+                    extractActualTypeArguments(parameterizedTypeArgument, contextualActualTypeParameters);\n+                }\n+            } else {\n+                contextualActualTypeParameters.put(rawTypeArgument, actualTypeArgument);\n+            }\n+        }\n+    }\n     }\n \n     protected void registerTypeParametersOn(TypeVariable[] typeParameters) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}