{
    "patch": "          // Function declarations have their own var scope.\n          return block.equals(ref.getBasicBlock());\n        } else if (block.isLoop) {\n          // If this assignment is inside a loop, the variable may be assigned multiple times.\n          return false;\n        } else {\n          BasicBlock tempBlock = ref.getBasicBlock();\n          while (tempBlock != null && !tempBlock.equals(block)) {\n            List<Reference> refs = tempBlock.getReferences();\n            for (int i = 0; i < refs.size(); i++) {\n              Reference r = refs.get(i);\n              if (r.isDeclaration() && r.getName().equals(name)) {\n                // If a declaration is found in an outer block, return false.\n                return false;\n              }\n            }\n            tempBlock = tempBlock.getParent();\n          }\n          // If all declarations of this variable are within the given block, return true.\n          return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..53ede84f 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,26 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // Function declarations have their own var scope.\n+          return block.equals(ref.getBasicBlock());\n+        } else if (block.isLoop) {\n+          // If this assignment is inside a loop, the variable may be assigned multiple times.\n+          return false;\n+        } else {\n+          BasicBlock tempBlock = ref.getBasicBlock();\n+          while (tempBlock != null && !tempBlock.equals(block)) {\n+            List<Reference> refs = tempBlock.getReferences();\n+            for (int i = 0; i < refs.size(); i++) {\n+              Reference r = refs.get(i);\n+              if (r.isDeclaration() && r.getName().equals(name)) {\n+                // If a declaration is found in an outer block, return false.\n+                return false;\n+              }\n+            }\n+            tempBlock = tempBlock.getParent();\n+          }\n+          // If all declarations of this variable are within the given block, return true.\n+          return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}