{
    "patch": "import org.apache.commons.math3.exception.ConvergenceException;\nimport org.apache.commons.math3.exception.TooManyEvaluationsException;\nimport org.apache.commons.math3.exception.NumberIsTooLargeException;\nimport org.apache.commons.math3.analysis.UnivariateFunction;\nimport org.apache.commons.math3.exception.MathInternalError;\nimport org.apache.commons.math3.exception.NullArgumentException;\nimport org.apache.commons.math3.exception.TooManyIterationsException;\nimport org.apache.commons.math3.util.FastMath;\n\npublic class RiddersSolver extends BaseAbstractUnivariateSolver<UnivariateFunction> implements UnivariateSolver {\n\n    /** Absolute accuracy. */\n    private final double absoluteAccuracy;\n\n    /**\n     * Construct a solver.\n     *\n     * @param absoluteAccuracy Maximum absolute error.\n     */\n    public RiddersSolver(final double absoluteAccuracy) {\n        super(absoluteAccuracy);\n        this.absoluteAccuracy = absoluteAccuracy;\n    }\n\n    /**\n     * Construct a solver.\n     *\n     * @param relativeAccuracy Maximum relative error.\n     * @param absoluteAccuracy Maximum absolute error.\n     */\n    public RiddersSolver(final double relativeAccuracy,\n                         final double absoluteAccuracy) {\n        super(relativeAccuracy, absoluteAccuracy);\n        this.absoluteAccuracy = absoluteAccuracy;\n    }\n\n    /**\n     * Construct a solver with default accuracy (1e-6).\n     */\n    public RiddersSolver() {\n        super(DEFAULT_RELATIVE_ACCURACY, DEFAULT_ABSOLUTE_ACCURACY);\n        this.absoluteAccuracy = DEFAULT_ABSOLUTE_ACCURACY;\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @throws TooManyEvaluationsException if the maximum iteration count is\n     * exceeded.\n     * @throws NumberIsTooLargeException if {@code min >= max}.\n     * @throws NullArgumentException if the function is {@code null}.\n     */\n    @Override\n    public double solve(int maxEval, UnivariateFunction f, double min, double max, AllowedSolution allowedSolution) {\n\n        // Initialize.\n        verifyInterval(min, max);\n        verifyObject(f);\n\n        double funcMin = Double.POSITIVE_INFINITY;\n        double minAtFuncMin = Double.NaN;\n        double funcMax = Double.NEGATIVE_INFINITY;\n        double maxAtFuncMax = Double.NaN;\n\n        double y1 = f.value(min);\n        double y2 = f.value(max);\n\n        // Verify bracketing of initial interval and evaluate with increasing\n        // precision.\n        verifyBracketing(min, max, f);\n        final int maximalIterationCount = 1 + getSafeMax(maxEval);\n\n        // Rescale the absolute tolerance by the range of x-values.\n        final double ftol = getFunctionValueAccuracy();\n        final double atol = getAbsoluteAccuracy();\n        final double rtol = getRelativeAccuracy();\n        final double invertedRelativeTolerance = 1.0 / rtol;\n        double oldDelta = max - min;\n        double delta = oldDelta;\n        int i = 0;\n\n        while (i <= maximalIterationCount) {\n\n            delta = (max - min) * 0.5;\n\n            // Verify convergence of bracketing.\n            if ((FastMath.abs(delta) <= rtol * FastMath.max(FastMath.abs(max), FastMath.abs(min))) ||\n                (y2 == 0 && invertedRelativeTolerance < FastMath.abs(delta))) {\n                switch (allowedSolution) {\n                case ANY_SIDE :\n                    return min;\n                case LEFT_SIDE :\n                    return minAtFuncMin;\n                case RIGHT_SIDE :\n                    return maxAtFuncMax;\n                case BELOW_SIDE :\n                    return (y1 <= 0) ? min : max;\n                default :\n                    return (y1 >= 0) ? min : max;\n                }\n            }\n            if (FastMath.abs(oldDelta) < ftol) {\n                if (allowedSolution == AllowedSolution.ANY_SIDE) {\n                    return min;\n                } else {\n                    switch(allowedSolution){\n                    case LEFT_SIDE:\n                        return minAtFuncMin;\n                    case RIGHT_SIDE:\n                        return maxAtFuncMax;\n                    case BELOW_SIDE:\n                        return (y1 <= 0) ? min : max;\n                    default:\n                        return (y1 >= 0) ? min : max;\n                    }\n                }\n            }\n\n            if (i == 0) { // First iteration.\n                // if min or max were provided as bracketing, these values are\n                // used as 1st and 2nd probes respectively instead of the above\n                // defaults.\n                if (FastMath.abs(y1) < FastMath.abs(y2)) {\n                    // swap min/max\n                    final double tmp1 = min;\n                    min = max;\n                    max = tmp1;\n                    final double tmp2 = y1;\n                    y1  = y2;\n                    y2  = tmp2;\n                }\n                minAtFuncMin = maxAtFuncMax = min;\n                funcMin = funcMax = y1;\n            } else {\n                // Subsequent iterations.\n                final double x = min + delta;\n                final double y = f.value(x);\n                final double tmp1 = (y * y2);\n                if (tmp1 <= 0) {\n                    // Minimum found in (a,c).\n                    max = x;\n                    funcMax = y;\n                    maxAtFuncMax = x;\n                    y2 = y;\n                } else if ((tmp1 = y * y1) <= 0) {\n                    // Minimum found in (a,b).\n                    maxAtFuncMax = minAtFuncMin;\n                    max = min;\n                    funcMax = y1;\n                    y2 = y1;\n                } else if (FastMath.abs(y) <= FastMath.abs(funcMin)) {\n                    // Minimum not bracketed but function decreases in\n                    // magnitude as we move away from xMin.\n                    funcMax = funcMin;\n                    maxAtFuncMax = minAtFuncMin;\n                    max = min;\n                    minAtFuncMin = x;\n                    funcMin = y;\n                    y1 = y;\n                } else {\n                    // Minimum not bracketed, continue with unmodified a, b.\n                    oldDelta = delta;\n                    delta *= 0.5;\n                    max = max;\n                    min = min;\n                    y2 = y1;\n                }\n            }\n            ++i;\n        }\n\n        throw new TooManyIterationsException(maximalIterationCount);\n    }\n\n    /**\n     * Provides the root-finding algorithm family name.\n     *\n     * @return the family name of the root-finding algorithm.\n     */\n    @Override\n    protected String getIterationMethodName() {\n        return \"Ridders\";\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @return the expected bracketing interval size after convergence\n     */\n    @Override\n    protected double getEvaluationsUpperBound() {\n        return FastMath.log(absoluteAccuracy) - FastMath.log(DEFAULT_ABSOLUTE_ACCURACY);\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e258c68c6..b00d48c7a 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -125,127 +125,202 @@ public abstract class BaseSecantSolver\n     }\n \n     /** {@inheritDoc} */\n-    protected final double doSolve() {\n-        // Get initial solution\n-        double x0 = getMin();\n-        double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n-\n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n+import org.apache.commons.math3.exception.ConvergenceException;\n+import org.apache.commons.math3.exception.TooManyEvaluationsException;\n+import org.apache.commons.math3.exception.NumberIsTooLargeException;\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.exception.MathInternalError;\n+import org.apache.commons.math3.exception.NullArgumentException;\n+import org.apache.commons.math3.exception.TooManyIterationsException;\n+import org.apache.commons.math3.util.FastMath;\n+\n+public class RiddersSolver extends BaseAbstractUnivariateSolver<UnivariateFunction> implements UnivariateSolver {\n+\n+    /** Absolute accuracy. */\n+    private final double absoluteAccuracy;\n+\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param absoluteAccuracy Maximum absolute error.\n+     */\n+    public RiddersSolver(final double absoluteAccuracy) {\n+        super(absoluteAccuracy);\n+        this.absoluteAccuracy = absoluteAccuracy;\n+    }\n+\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param relativeAccuracy Maximum relative error.\n+     * @param absoluteAccuracy Maximum absolute error.\n+     */\n+    public RiddersSolver(final double relativeAccuracy,\n+                         final double absoluteAccuracy) {\n+        super(relativeAccuracy, absoluteAccuracy);\n+        this.absoluteAccuracy = absoluteAccuracy;\n+    }\n+\n+    /**\n+     * Construct a solver with default accuracy (1e-6).\n+     */\n+    public RiddersSolver() {\n+        super(DEFAULT_RELATIVE_ACCURACY, DEFAULT_ABSOLUTE_ACCURACY);\n+        this.absoluteAccuracy = DEFAULT_ABSOLUTE_ACCURACY;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws TooManyEvaluationsException if the maximum iteration count is\n+     * exceeded.\n+     * @throws NumberIsTooLargeException if {@code min >= max}.\n+     * @throws NullArgumentException if the function is {@code null}.\n+     */\n+    @Override\n+    public double solve(int maxEval, UnivariateFunction f, double min, double max, AllowedSolution allowedSolution) {\n+\n+        // Initialize.\n+        verifyInterval(min, max);\n+        verifyObject(f);\n+\n+        double funcMin = Double.POSITIVE_INFINITY;\n+        double minAtFuncMin = Double.NaN;\n+        double funcMax = Double.NEGATIVE_INFINITY;\n+        double maxAtFuncMax = Double.NaN;\n \n-        // Verify bracketing of initial solution.\n-        verifyBracketing(x0, x1);\n+        double y1 = f.value(min);\n+        double y2 = f.value(max);\n \n-        // Get accuracies.\n+        // Verify bracketing of initial interval and evaluate with increasing\n+        // precision.\n+        verifyBracketing(min, max, f);\n+        final int maximalIterationCount = 1 + getSafeMax(maxEval);\n+\n+        // Rescale the absolute tolerance by the range of x-values.\n         final double ftol = getFunctionValueAccuracy();\n         final double atol = getAbsoluteAccuracy();\n         final double rtol = getRelativeAccuracy();\n+        final double invertedRelativeTolerance = 1.0 / rtol;\n+        double oldDelta = max - min;\n+        double delta = oldDelta;\n+        int i = 0;\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n-        // larger than the right bound.\n-        boolean inverted = false;\n-\n-        // Keep finding better approximations.\n-        while (true) {\n-            // Calculate the next approximation.\n-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n-\n-            // If the new approximation is the exact root, return it. Since\n-            // this is not an under-approximation or an over-approximation,\n-            // we can return it regardless of the allowed solutions.\n-            if (fx == 0.0) {\n-                return x;\n-            }\n+        while (i <= maximalIterationCount) {\n \n-            // Update the bounds with the new approximation.\n-            if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n-                // the interval.\n-                x0 = x1;\n-                f0 = f1;\n-                inverted = !inverted;\n-            } else {\n-                switch (method) {\n-                case ILLINOIS:\n-                    f0 *= 0.5;\n-                    break;\n-                case PEGASUS:\n-                    f0 *= f1 / (f1 + fx);\n-                    break;\n-                        // Update formula cannot make any progress: Update the\n-                        // search interval.\n-                default:\n-                    // Should never happen.\n+            delta = (max - min) * 0.5;\n+\n+            // Verify convergence of bracketing.\n+            if ((FastMath.abs(delta) <= rtol * FastMath.max(FastMath.abs(max), FastMath.abs(min))) ||\n+                (y2 == 0 && invertedRelativeTolerance < FastMath.abs(delta))) {\n+                switch (allowedSolution) {\n+                case ANY_SIDE :\n+                    return min;\n+                case LEFT_SIDE :\n+                    return minAtFuncMin;\n+                case RIGHT_SIDE :\n+                    return maxAtFuncMax;\n+                case BELOW_SIDE :\n+                    return (y1 <= 0) ? min : max;\n+                default :\n+                    return (y1 >= 0) ? min : max;\n                 }\n             }\n-            // Update from [x0, x1] to [x0, x].\n-            x1 = x;\n-            f1 = fx;\n-\n-            // If the function value of the last approximation is too small,\n-            // given the function value accuracy, then we can't get closer to\n-            // the root than we already are.\n-            if (FastMath.abs(f1) <= ftol) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    if (inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case RIGHT_SIDE:\n-                    if (!inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case BELOW_SIDE:\n-                    if (f1 <= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                case ABOVE_SIDE:\n-                    if (f1 >= 0) {\n-                        return x1;\n+            if (FastMath.abs(oldDelta) < ftol) {\n+                if (allowedSolution == AllowedSolution.ANY_SIDE) {\n+                    return min;\n+                } else {\n+                    switch(allowedSolution){\n+                    case LEFT_SIDE:\n+                        return minAtFuncMin;\n+                    case RIGHT_SIDE:\n+                        return maxAtFuncMax;\n+                    case BELOW_SIDE:\n+                        return (y1 <= 0) ? min : max;\n+                    default:\n+                        return (y1 >= 0) ? min : max;\n                     }\n-                    break;\n-                default:\n-                    throw new MathInternalError();\n                 }\n             }\n \n-            // If the current interval is within the given accuracies, we\n-            // are satisfied with the current approximation.\n-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n-                                                     atol)) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    return inverted ? x1 : x0;\n-                case RIGHT_SIDE:\n-                    return inverted ? x0 : x1;\n-                case BELOW_SIDE:\n-                    return (f1 <= 0) ? x1 : x0;\n-                case ABOVE_SIDE:\n-                    return (f1 >= 0) ? x1 : x0;\n-                default:\n-                    throw new MathInternalError();\n+            if (i == 0) { // First iteration.\n+                // if min or max were provided as bracketing, these values are\n+                // used as 1st and 2nd probes respectively instead of the above\n+                // defaults.\n+                if (FastMath.abs(y1) < FastMath.abs(y2)) {\n+                    // swap min/max\n+                    final double tmp1 = min;\n+                    min = max;\n+                    max = tmp1;\n+                    final double tmp2 = y1;\n+                    y1  = y2;\n+                    y2  = tmp2;\n+                }\n+                minAtFuncMin = maxAtFuncMax = min;\n+                funcMin = funcMax = y1;\n+            } else {\n+                // Subsequent iterations.\n+                final double x = min + delta;\n+                final double y = f.value(x);\n+                final double tmp1 = (y * y2);\n+                if (tmp1 <= 0) {\n+                    // Minimum found in (a,c).\n+                    max = x;\n+                    funcMax = y;\n+                    maxAtFuncMax = x;\n+                    y2 = y;\n+                } else if ((tmp1 = y * y1) <= 0) {\n+                    // Minimum found in (a,b).\n+                    maxAtFuncMax = minAtFuncMin;\n+                    max = min;\n+                    funcMax = y1;\n+                    y2 = y1;\n+                } else if (FastMath.abs(y) <= FastMath.abs(funcMin)) {\n+                    // Minimum not bracketed but function decreases in\n+                    // magnitude as we move away from xMin.\n+                    funcMax = funcMin;\n+                    maxAtFuncMax = minAtFuncMin;\n+                    max = min;\n+                    minAtFuncMin = x;\n+                    funcMin = y;\n+                    y1 = y;\n+                } else {\n+                    // Minimum not bracketed, continue with unmodified a, b.\n+                    oldDelta = delta;\n+                    delta *= 0.5;\n+                    max = max;\n+                    min = min;\n+                    y2 = y1;\n                 }\n             }\n+            ++i;\n         }\n+\n+        throw new TooManyIterationsException(maximalIterationCount);\n     }\n \n+    /**\n+     * Provides the root-finding algorithm family name.\n+     *\n+     * @return the family name of the root-finding algorithm.\n+     */\n+    @Override\n+    protected String getIterationMethodName() {\n+        return \"Ridders\";\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @return the expected bracketing interval size after convergence\n+     */\n+    @Override\n+    protected double getEvaluationsUpperBound() {\n+        return FastMath.log(absoluteAccuracy) - FastMath.log(DEFAULT_ABSOLUTE_ACCURACY);\n+    }\n+\n+}\n+\n     /** <em>Secant</em>-based root-finding methods. */\n     protected enum Method {\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}