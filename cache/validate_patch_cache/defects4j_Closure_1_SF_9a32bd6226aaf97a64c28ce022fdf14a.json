{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n  Node function = fnScope.getRootNode();\n  Preconditions.checkState(function.isFunction(), function);\n  Node argList = getFunctionArgList(function);\n  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n  \n  // Loop through each parameter in the argument list.\n  for (Node param = argList.getFirstChild(); param != null;) {\n    Var var = fnScope.getVar(param.getString());\n  \n    if (referenced.contains(var)) {\n      // Mark as \"referenced\" for comparisons later. \n      referenced.remove(var);\n    } else if (!param.hasChildren()) {\n      // Remove the parameter if it has no children (preserving defaults)\n      // and is not referenced.\n      Node next = param.getNext();\n      argList.removeChild(param);\n      param = next;\n      compiler.reportCodeChange();\n      continue;\n    }\n  \n    param = param.getNext();\n  }\n\n  if (!modifyCallers && referenced.isEmpty()) {\n    // If none of the parameters are referenced and we can modify callers,\n    // remove the entire parameter list.\n    function.removeChild(argList);\n    compiler.reportCodeChange();\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..191ff8a9 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,45 +366,45 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n-      }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+  Node function = fnScope.getRootNode();\n+  Preconditions.checkState(function.isFunction(), function);\n+  Node argList = getFunctionArgList(function);\n+  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+  }\n+  \n+  // Loop through each parameter in the argument list.\n+  for (Node param = argList.getFirstChild(); param != null;) {\n+    Var var = fnScope.getVar(param.getString());\n+  \n+    if (referenced.contains(var)) {\n+      // Mark as \"referenced\" for comparisons later. \n+      referenced.remove(var);\n+    } else if (!param.hasChildren()) {\n+      // Remove the parameter if it has no children (preserving defaults)\n+      // and is not referenced.\n+      Node next = param.getNext();\n+      argList.removeChild(param);\n+      param = next;\n+      compiler.reportCodeChange();\n+      continue;\n     }\n+  \n+    param = param.getNext();\n   }\n \n+  if (!modifyCallers && referenced.isEmpty()) {\n+    // If none of the parameters are referenced and we can modify callers,\n+    // remove the entire parameter list.\n+    function.removeChild(argList);\n+    compiler.reportCodeChange();\n+  }\n+}\n+\n \n   /**\n    * @return the LP node containing the function parameters.",
    "result_reason": "java.lang.IllegalStateException",
    "test_result": "FAIL"
}