{
    "patch": "private void replaceAssignmentExpression(Var v, Reference ref,\n                                         Map<String, String> varmap) {\n  // Compute all of the assignments necessary\n  List<String> vars = new ArrayList<>();\n  List<Node> vals = new ArrayList<>();\n\n  Node val = ref.getAssignedValue();\n  blacklistVarReferencesInTree(val, v.scope);\n  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n  for (Node key = val.getFirstChild(); key != null;\n       key = key.getNext()) {\n    String var = key.getString();\n    vars.add(varmap.get(var));\n    vals.add(key.removeFirstChild());\n  }\n\n  // Add undefined assignments for any variables not in the object literal\n  for (String var : varmap.keySet()) {\n    if (!vars.contains(varmap.get(var))) {\n      vars.add(varmap.get(var));\n      vals.add(NodeUtil.newUndefinedNode(null));\n    }\n  }\n\n  // Create a new AST node that assigns all of the variables to their values\n  Node assignmentNode = new Node(Token.ASSIGN);\n  Node left = new Node(Token.OBJECTLIT);\n  Node right = new Node(Token.OBJECTLIT);\n  for (int i = 0; i < vars.size(); i++) {\n    Node key = Node.newString(Token.STRING, vars.get(i));\n    Node value = vals.get(i);\n    if (value == null) {\n      value = NodeUtil.newUndefinedNode(null);\n    }\n    right.addChildToBack(value);\n    left.addChildToBack(key.cloneTree());\n  }\n  assignmentNode.addChildToBack(left);\n  assignmentNode.addChildToBack(right);\n\n  // Make sure the new AST node inherits the correct source information\n  Node replace = ref.getParent();\n  assignmentNode.copyInformationFromForTree(replace);\n\n  // Replace the old AST node with the new one\n  if (replace.getType() == Token.VAR) {\n    replace.getParent().replaceChild(\n        replace, NodeUtil.newExpr(assignmentNode));\n  } else {\n    replace.getParent().replaceChild(replace, assignmentNode);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9061925d..479316d1 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -300,64 +300,58 @@ class InlineObjectLiterals implements CompilerPass {\n      * Note that the resulting expression will always evaluate to\n      * true, as would the x = {...} expression.\n      */\n-    private void replaceAssignmentExpression(Var v, Reference ref,\n-                                             Map<String, String> varmap) {\n-      // Compute all of the assignments necessary\n-      List<Node> nodes = Lists.newArrayList();\n-      Node val = ref.getAssignedValue();\n-      blacklistVarReferencesInTree(val, v.scope);\n-      Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n-      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n-      for (Node key = val.getFirstChild(); key != null;\n-           key = key.getNext()) {\n-        String var = key.getString();\n-        Node value = key.removeFirstChild();\n-        // TODO(user): Copy type information.\n-        nodes.add(\n-          new Node(Token.ASSIGN,\n-                   Node.newString(Token.NAME, varmap.get(var)), value));\n-        all.remove(var);\n-      }\n-\n-      // TODO(user): Better source information.\n-      for (String var : all) {\n-        nodes.add(\n-          new Node(Token.ASSIGN,\n-                   Node.newString(Token.NAME, varmap.get(var)),\n-                   NodeUtil.newUndefinedNode(null)));\n-      }\n-\n-      Node replacement;\n-        // All assignments evaluate to true, so make sure that the\n-        // expr statement evaluates to true in case it matters.\n-        nodes.add(new Node(Token.TRUE));\n-\n-        // Join these using COMMA.  A COMMA node must have 2 children, so we\n-        // create a tree. In the tree the first child be the COMMA to match\n-        // the parser, otherwise tree equality tests fail.\n-        nodes = Lists.reverse(nodes);\n-        replacement = new Node(Token.COMMA);\n-        Node cur = replacement;\n-        int i;\n-        for (i = 0; i < nodes.size() - 2; i++) {\n-          cur.addChildToFront(nodes.get(i));\n-          Node t = new Node(Token.COMMA);\n-          cur.addChildToFront(t);\n-          cur = t;\n-        }\n-        cur.addChildToFront(nodes.get(i));\n-        cur.addChildToFront(nodes.get(i + 1));\n+private void replaceAssignmentExpression(Var v, Reference ref,\n+                                         Map<String, String> varmap) {\n+  // Compute all of the assignments necessary\n+  List<String> vars = new ArrayList<>();\n+  List<Node> vals = new ArrayList<>();\n+\n+  Node val = ref.getAssignedValue();\n+  blacklistVarReferencesInTree(val, v.scope);\n+  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n+  for (Node key = val.getFirstChild(); key != null;\n+       key = key.getNext()) {\n+    String var = key.getString();\n+    vars.add(varmap.get(var));\n+    vals.add(key.removeFirstChild());\n+  }\n \n-      Node replace = ref.getParent();\n-      replacement.copyInformationFromForTree(replace);\n+  // Add undefined assignments for any variables not in the object literal\n+  for (String var : varmap.keySet()) {\n+    if (!vars.contains(varmap.get(var))) {\n+      vars.add(varmap.get(var));\n+      vals.add(NodeUtil.newUndefinedNode(null));\n+    }\n+  }\n \n-      if (replace.getType() == Token.VAR) {\n-        replace.getParent().replaceChild(\n-            replace, NodeUtil.newExpr(replacement));\n-      } else {\n-        replace.getParent().replaceChild(replace, replacement);\n-      }\n+  // Create a new AST node that assigns all of the variables to their values\n+  Node assignmentNode = new Node(Token.ASSIGN);\n+  Node left = new Node(Token.OBJECTLIT);\n+  Node right = new Node(Token.OBJECTLIT);\n+  for (int i = 0; i < vars.size(); i++) {\n+    Node key = Node.newString(Token.STRING, vars.get(i));\n+    Node value = vals.get(i);\n+    if (value == null) {\n+      value = NodeUtil.newUndefinedNode(null);\n     }\n+    right.addChildToBack(value);\n+    left.addChildToBack(key.cloneTree());\n+  }\n+  assignmentNode.addChildToBack(left);\n+  assignmentNode.addChildToBack(right);\n+\n+  // Make sure the new AST node inherits the correct source information\n+  Node replace = ref.getParent();\n+  assignmentNode.copyInformationFromForTree(replace);\n+\n+  // Replace the old AST node with the new one\n+  if (replace.getType() == Token.VAR) {\n+    replace.getParent().replaceChild(\n+        replace, NodeUtil.newExpr(assignmentNode));\n+  } else {\n+    replace.getParent().replaceChild(replace, assignmentNode);\n+  }\n+}\n \n     /**\n      * Splits up the object literal into individual variables, and",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}