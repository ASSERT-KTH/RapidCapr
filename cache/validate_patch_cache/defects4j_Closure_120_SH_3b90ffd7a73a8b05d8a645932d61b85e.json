{
    "patch": "      List<Reference> assignments = getAssignments();\n      if (assignments.size() > 1) {\n        for (Reference assignment : assignments) {\n          if (assignment != ref) {\n            for (BasicBlock block = assignment.getBasicBlock();\n                 block != null; block = block.getParent()) {\n              if (block.equals(ref.getBasicBlock())) {\n                return false;\n              }\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..bf6549d2 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,17 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      List<Reference> assignments = getAssignments();\n+      if (assignments.size() > 1) {\n+        for (Reference assignment : assignments) {\n+          if (assignment != ref) {\n+            for (BasicBlock block = assignment.getBasicBlock();\n+                 block != null; block = block.getParent()) {\n+              if (block.equals(ref.getBasicBlock())) {\n+                return false;\n+              }\n+            }\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}