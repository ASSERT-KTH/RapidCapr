{
    "patch": "        // Make sure this assignment is not in a loop or in a function.\n        for (BasicBlock block = ref.getBasicBlock();\n             block != null; block = block.getParent()) {\n          if (block.isFunction) {\n            // The assignment is inside a function.\n            // The variable may be reassigned in a subsequent invocation.\n            return false;\n          } else if (block.isLoop) {\n            // The block has a loop statement; any change to this variable might\n            // be repeated in subsequent iterations.\n            return false;\n          } else if (block.isFunctionBlock()) {\n            // Functions share a block with their declaration, which can be an\n            // assignment. To avoid thinking that the variable is assigned in\n            // these cases, continue checking the parent block.\n            if (block.getParent() != null) {\n              block = block.getParent();\n              continue;\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..6feb7699 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,27 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        // Make sure this assignment is not in a loop or in a function.\n+        for (BasicBlock block = ref.getBasicBlock();\n+             block != null; block = block.getParent()) {\n+          if (block.isFunction) {\n+            // The assignment is inside a function.\n+            // The variable may be reassigned in a subsequent invocation.\n+            return false;\n+          } else if (block.isLoop) {\n+            // The block has a loop statement; any change to this variable might\n+            // be repeated in subsequent iterations.\n+            return false;\n+          } else if (block.isFunctionBlock()) {\n+            // Functions share a block with their declaration, which can be an\n+            // assignment. To avoid thinking that the variable is assigned in\n+            // these cases, continue checking the parent block.\n+            if (block.getParent() != null) {\n+              block = block.getParent();\n+              continue;\n+            }\n+          }\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}