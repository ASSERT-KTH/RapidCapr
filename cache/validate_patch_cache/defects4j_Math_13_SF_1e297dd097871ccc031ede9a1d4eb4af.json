{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    RealMatrix sqrtM = new Array2DRowRealMatrix(m.getRowDimension(), m.getColumnDimension());\n    EigenDecomposition eig = new EigenDecomposition(m);\n    double[] realEigenvalues = eig.getRealEigenvalues();\n    RealMatrix eigenvectors = eig.getV();\n    int size = m.getRowDimension();\n\n    for (int i = 0; i < size; i++) {\n        double eigenvalue = realEigenvalues[i];\n        Complex c = new Complex(eigenvalue, 0);\n        sqrtM.setEntry(i, i, new Complex(sqrt(c)).getReal());\n    }\n\n    sqrtM = eigenvectors.multiply(sqrtM).multiply(eigenvectors.transpose());\n\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..9df7d299f 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,21 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    RealMatrix sqrtM = new Array2DRowRealMatrix(m.getRowDimension(), m.getColumnDimension());\n+    EigenDecomposition eig = new EigenDecomposition(m);\n+    double[] realEigenvalues = eig.getRealEigenvalues();\n+    RealMatrix eigenvectors = eig.getV();\n+    int size = m.getRowDimension();\n+\n+    for (int i = 0; i < size; i++) {\n+        double eigenvalue = realEigenvalues[i];\n+        Complex c = new Complex(eigenvalue, 0);\n+        sqrtM.setEntry(i, i, new Complex(sqrt(c)).getReal());\n     }\n+\n+    sqrtM = eigenvectors.multiply(sqrtM).multiply(eigenvectors.transpose());\n+\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}