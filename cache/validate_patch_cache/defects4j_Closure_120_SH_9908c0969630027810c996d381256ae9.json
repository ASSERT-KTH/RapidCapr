{
    "patch": "          // Only allow a single non-constant assignment.\n          int count = 0;\n          for (int i = 0; i < block.getStatements().size(); i++) {\n            AstNode node = block.getStatements().get(i);\n\n            if (node instanceof AstName) {\n              AstName name = (AstName) node;\n\n              if (name.matchesName(variableName)) {\n                count++;\n\n                if (count > 1 && !getInitializingReferenceForConstants().isConstant()) {\n                  return false;\n                }\n                break;\n              }\n            } else if (node instanceof Assignment) {\n              Assignment assignment = (Assignment) node;\n\n              if (assignment.getTarget().isName() &&\n                  ((AstName) assignment.getTarget()).matchesName(variableName)) {\n                count++;\n\n                if (!getInitializingReferenceForConstants().isConstant()) {\n                  return false;\n                }\n              }\n            }\n          }\n          if (count == 0) {\n            return false;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..9da3fb53 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,38 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // Only allow a single non-constant assignment.\n+          int count = 0;\n+          for (int i = 0; i < block.getStatements().size(); i++) {\n+            AstNode node = block.getStatements().get(i);\n+\n+            if (node instanceof AstName) {\n+              AstName name = (AstName) node;\n+\n+              if (name.matchesName(variableName)) {\n+                count++;\n+\n+                if (count > 1 && !getInitializingReferenceForConstants().isConstant()) {\n+                  return false;\n+                }\n+                break;\n+              }\n+            } else if (node instanceof Assignment) {\n+              Assignment assignment = (Assignment) node;\n+\n+              if (assignment.getTarget().isName() &&\n+                  ((AstName) assignment.getTarget()).matchesName(variableName)) {\n+                count++;\n+\n+                if (!getInitializingReferenceForConstants().isConstant()) {\n+                  return false;\n+                }\n+              }\n+            }\n+          }\n+          if (count == 0) {\n+            return false;\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}