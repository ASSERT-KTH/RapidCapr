{
    "patch": "            List<CapturesArguments> varargMatchers = new ArrayList<>();\n            for (int position = 0; position < matchers.size(); position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n                    if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n                        varargMatchers.add((CapturesArguments) m);\n                    } else {\n                        ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                    }\n                }\n            }\n            if (!varargMatchers.isEmpty()) {\n                Object[] varargValues = (Object[]) invocation.getRawArguments()[indexOfVararg];\n                for (int i = 0; i < varargValues.length; i++) {\n                    for (CapturesArguments varargMatcher : varargMatchers) {\n                        varargMatcher.captureFrom(varargValues[i]);\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..633b3a477 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,25 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            List<CapturesArguments> varargMatchers = new ArrayList<>();\n+            for (int position = 0; position < matchers.size(); position++) {\n+                Matcher m = matchers.get(position);\n+                if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n+                    if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n+                        varargMatchers.add((CapturesArguments) m);\n+                    } else {\n+                        ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n+                    }\n+                }\n+            }\n+            if (!varargMatchers.isEmpty()) {\n+                Object[] varargValues = (Object[]) invocation.getRawArguments()[indexOfVararg];\n+                for (int i = 0; i < varargValues.length; i++) {\n+                    for (CapturesArguments varargMatcher : varargMatchers) {\n+                        varargMatcher.captureFrom(varargValues[i]);\n+                    }\n+                }\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}