{
    "patch": "public String fixCode(String code) {\n    //Remove the \"in\" keyword from the initialization expression of any for loop\n    //that contains the \"in\" keyword within the loop itself.\n    \n    String[] lines = code.split(\"\\n\");\n    StringBuilder sb = new StringBuilder();\n    boolean inLoop = false;\n    for (String line : lines) {\n        if (line.contains(\"for\")) {\n            int indexIn = line.indexOf(\" in \");\n            if (indexIn > 0 && line.indexOf(\" in \", indexIn + 1) < 0) {\n                inLoop = true;\n                sb.append(line.substring(0, indexIn + 1));\n                sb.append(line.substring(indexIn + 4).replace(\" in \", \"\"));\n            } else {\n                sb.append(line);\n            }\n        } else {\n            inLoop = false;\n            sb.append(line);\n        }\n        sb.append(\"\\n\");\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..12f661b7 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,31 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+    //Remove the \"in\" keyword from the initialization expression of any for loop\n+    //that contains the \"in\" keyword within the loop itself.\n+    \n+    String[] lines = code.split(\"\\n\");\n+    StringBuilder sb = new StringBuilder();\n+    boolean inLoop = false;\n+    for (String line : lines) {\n+        if (line.contains(\"for\")) {\n+            int indexIn = line.indexOf(\" in \");\n+            if (indexIn > 0 && line.indexOf(\" in \", indexIn + 1) < 0) {\n+                inLoop = true;\n+                sb.append(line.substring(0, indexIn + 1));\n+                sb.append(line.substring(indexIn + 4).replace(\" in \", \"\"));\n+            } else {\n+                sb.append(line);\n+            }\n+        } else {\n+            inLoop = false;\n+            sb.append(line);\n+        }\n+        sb.append(\"\\n\");\n+    }\n+    return sb.toString();\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}