{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = NodeUtil.getFunctionBody(fnNode);\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // FUNCTIONS called VIA 'CALL' and 'APPLY' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    boolean isConstructorCall = false;\n    if (!callNode.getFirstChild().isName()) {\n      isConstructorCall = NodeUtil.isFunctionObjectCall(callNode) && cArg != null && cArg.isThis();\n      if (!isConstructorCall) {\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (fnParam != null && (!fnParam.isName() || cArg != null)) {\n      if (fnParam.isName()) {\n\n        int referenceCountInBlock = NodeUtil.getNameReferenceCount(block, fnParam.getString());\n\n        if (isConstructorCall || referenceCountInBlock == 1) {\n          if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n            return CanInlineResult.NO;\n          }\n\n          if (cArg != null && cArg.getNext() != null) { // check if excess args\n            return CanInlineResult.NO;\n          }\n        } else if (referenceCountInBlock > 1) {\n          return CanInlineResult.NO;\n        }\n\n        fnParam = fnParam.getNext();\n      } else {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        if (cArg.getNext() != null) {\n          return CanInlineResult.NO;\n        }\n\n        cArg = cArg.getNext();\n      }\n    }\n\n    // if there are remaining unused anonymous arguments\n    if (cArg != null) {\n      return CanInlineResult.NO;\n    }\n\n    // if there are remaining unused named parameters\n    if (fnParam != null && fnParam.isName()) {\n      return CanInlineResult.NO;\n    }\n\n    return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..3938bcc7 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,67 +686,70 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n     }\n \n-    Node block = fnNode.getLastChild();\n-\n+    Node block = NodeUtil.getFunctionBody(fnNode);\n \n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n+    // FUNCTIONS called VIA 'CALL' and 'APPLY' have a this-object as\n     // the first parameter, but this is not part of the called function's\n     // parameter list.\n+    boolean isConstructorCall = false;\n     if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n+      isConstructorCall = NodeUtil.isFunctionObjectCall(callNode) && cArg != null && cArg.isThis();\n+      if (!isConstructorCall) {\n         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n       }\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+    while (fnParam != null && (!fnParam.isName() || cArg != null)) {\n+      if (fnParam.isName()) {\n+\n+        int referenceCountInBlock = NodeUtil.getNameReferenceCount(block, fnParam.getString());\n+\n+        if (isConstructorCall || referenceCountInBlock == 1) {\n+          if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n             return CanInlineResult.NO;\n           }\n+\n+          if (cArg != null && cArg.getNext() != null) { // check if excess args\n+            return CanInlineResult.NO;\n+          }\n+        } else if (referenceCountInBlock > 1) {\n+          return CanInlineResult.NO;\n         }\n \n-        // Move to the next name.\n         fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n+      } else {\n         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n           return CanInlineResult.NO;\n         }\n+        if (cArg.getNext() != null) {\n+          return CanInlineResult.NO;\n+        }\n+\n         cArg = cArg.getNext();\n       }\n     }\n \n+    // if there are remaining unused anonymous arguments\n+    if (cArg != null) {\n+      return CanInlineResult.NO;\n+    }\n+\n+    // if there are remaining unused named parameters\n+    if (fnParam != null && fnParam.isName()) {\n+      return CanInlineResult.NO;\n+    }\n+\n     return CanInlineResult.YES;\n-  }\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<YES> but was:<NO>",
    "test_result": "FAIL"
}