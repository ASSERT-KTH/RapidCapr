{
    "patch": "  // Check if the node is inside a function\n  if (scope.isGlobal() && n.getParent().isFunction()) {\n    Node fnName = n.getParent().getFirstChild();\n    if (fnName != null && fnName.isName()) {\n      String varName = fnName.getString();\n      Var fnVar = scope.getVar(varName);\n      if (fnVar == null) {\n        fnVar = scope.declare(varName, fnName, null, UNKNOWN, true);\n      } else {\n        fnVar.clearType();\n      }\n    }\n  }\n\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent != null && parent.getType() == Token.NAME) {\n        if (parent.getFirstChild() == n) { // Fix for handling function declarations\n          defineDeclaredFunction(n, parent);\n        }\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    default:\n      break;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..1be99775 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,40 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n+  // Check if the node is inside a function\n+  if (scope.isGlobal() && n.getParent().isFunction()) {\n+    Node fnName = n.getParent().getFirstChild();\n+    if (fnName != null && fnName.isName()) {\n+      String varName = fnName.getString();\n+      Var fnVar = scope.getVar(varName);\n+      if (fnVar == null) {\n+        fnVar = scope.declare(varName, fnName, null, UNKNOWN, true);\n+      } else {\n+        fnVar.clearType();\n+      }\n+    }\n+  }\n+\n+  attachLiteralTypes(n);\n+  switch (n.getType()) {\n+    case Token.FUNCTION:\n+      if (parent != null && parent.getType() == Token.NAME) {\n+        if (parent.getFirstChild() == n) { // Fix for handling function declarations\n           defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+        }\n+        return;\n       }\n+      defineDeclaredFunction(n, parent);\n+      break;\n+    case Token.CATCH:\n+      defineCatch(n, parent);\n+      break;\n+    case Token.VAR:\n+      defineVar(n, parent);\n+      break;\n+    default:\n+      break;\n+  }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}