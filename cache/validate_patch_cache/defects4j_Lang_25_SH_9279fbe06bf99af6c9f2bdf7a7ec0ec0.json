{
    "patch": "StringBuffer buf = new StringBuffer(str.length());\nfor (int i = 0; i < str.length(); i++) {\n    char ch = str.charAt(i);\n    if (ch == '\\\\') {            \n        i++;\n        ch = str.charAt(i);\n        switch (ch) {\n            case '\\\"':\n                buf.append('\\\"');\n                break;\n            case '\\\\': \n                buf.append('\\\\');\n                break;\n            case 'n':\n                buf.append('\\n');\n                break;\n            case 'r':\n                buf.append('\\r');\n                break;\n            case 'f':\n                buf.append('\\f');\n                break;\n            case 't':\n                buf.append('\\t');\n                break;\n            case 'b':\n                buf.append('\\b');\n                break;\n            case 'u':\n                try {\n                    buf.append((char)Integer.parseInt(str.substring(i+1,i+5),16));\n                    i += 4;\n                }\n                catch (NumberFormatException ex) {\n                    throw new IllegalArgumentException(\"Malformed \\\\uxxxx encoding.\", ex);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal escape sequence \\\\\" + ch);\n        }\n    }\n    else {\n        buf.append(ch);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}