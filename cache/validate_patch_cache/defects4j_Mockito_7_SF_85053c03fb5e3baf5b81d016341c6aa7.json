{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds == null || bounds.length == 0) {\n        registerTypeVariablesOn(Object.class);\n        return;\n    }\n\n    for (Type type : bounds) {\n        if (type instanceof TypeVariable<?>) {\n            TypeVariable<?> typeVar = (TypeVariable<?>) type;\n            Type[] innerBounds = typeVar.getBounds();\n            for (Type innerType : innerBounds) {\n                registerTypeVariablesOn(innerType);\n            }\n        } else {\n            registerTypeVariablesOn(type);\n        }\n    }\n\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..f43c8d399 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,31 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds == null || bounds.length == 0) {\n+        registerTypeVariablesOn(Object.class);\n+        return;\n+    }\n+\n+    for (Type type : bounds) {\n+        if (type instanceof TypeVariable<?>) {\n+            TypeVariable<?> typeVar = (TypeVariable<?>) type;\n+            Type[] innerBounds = typeVar.getBounds();\n+            for (Type innerType : innerBounds) {\n+                registerTypeVariablesOn(innerType);\n+            }\n+        } else {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}