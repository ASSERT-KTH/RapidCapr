{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        try {\n            return iChronology.get(partial, instant);\n        } catch (IllegalFieldValueException e) {\n            if (fieldIndex < 0 || fieldIndex >= partial.size()) {\n                throw e;\n            }\n            // find the largest unit which may have caused the problem\n            DateTimeFieldType type = partial.getFieldType(fieldIndex);\n            if (type == null || !type.isSupported(iChronology)) {\n                throw e;\n            }\n            int oldValue = values[fieldIndex];\n            int max = type.getField(iChronology).getMaximumValue(instant);\n            int min = type.getField(iChronology).getMinimumValue(instant);\n            int range = max - min + 1;\n            int[] work = new int[partial.size()];\n            System.arraycopy(values, 0, work, 0, work.length);\n            for (int added = 0; added < range; added++) {\n                work[fieldIndex] = ((added + oldValue - min) % range) + min;\n                try {\n                    return iChronology.get(partial, instant + (work[fieldIndex] - oldValue) * type.getField(iChronology).getDurationField().getUnitMillis());\n                } catch (IllegalFieldValueException ignore) {\n                }\n            }\n            throw e;\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..caac368e 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,49 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n+        instant = add(instant, valueToAdd);\n+        try {\n             return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        } catch (IllegalFieldValueException e) {\n+            if (fieldIndex < 0 || fieldIndex >= partial.size()) {\n+                throw e;\n+            }\n+            // find the largest unit which may have caused the problem\n+            DateTimeFieldType type = partial.getFieldType(fieldIndex);\n+            if (type == null || !type.isSupported(iChronology)) {\n+                throw e;\n+            }\n+            int oldValue = values[fieldIndex];\n+            int max = type.getField(iChronology).getMaximumValue(instant);\n+            int min = type.getField(iChronology).getMinimumValue(instant);\n+            int range = max - min + 1;\n+            int[] work = new int[partial.size()];\n+            System.arraycopy(values, 0, work, 0, work.length);\n+            for (int added = 0; added < range; added++) {\n+                work[fieldIndex] = ((added + oldValue - min) % range) + min;\n+                try {\n+                    return iChronology.get(partial, instant + (work[fieldIndex] - oldValue) * type.getField(iChronology).getDurationField().getUnitMillis());\n+                } catch (IllegalFieldValueException ignore) {\n+                }\n+            }\n+            throw e;\n         }\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}