{
    "patch": "// Don't traverse functions that are getting lent to a prototype.\nif (parent != null) {\n  int parentType = parent.getType();\n  if (parentType == Token.ASSIGN || parentType == Token.GETPROP || parentType == Token.OBJECTLIT) {\n    Node lhs = parent.getFirstChild();\n    if (lhs != null && NodeUtil.isGet(lhs)) {\n      Node llhs = lhs.getFirstChild();\n      if (llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals(\"prototype\")) {\n        // Found a direct prototype assignment\n        if (lhs.matchesQualifiedName(\"this.prototype\")) {\n          // Traverse functions assigned directly to \"this.prototype\"\n          return true;\n        } else if (lhs.getParent().matchesQualifiedName(\"goog.inherits\")) {\n          // Ignore goog.inherits(cls, base) calls\n          return false;\n        } else {\n          // Don't traverse functions assigned to other object prototypes\n          return false;\n        }\n      } else if (llhs.getType() == Token.NAME && llhs.getString().equals(\"Object\") && lhs.getNext().getString().equals(\"assignProperties\")) {\n        // Ignore Object.assignProperties() calls\n        return false;\n      }\n    }\n  } else {\n    return false;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..4ac73807 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,34 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+// Don't traverse functions that are getting lent to a prototype.\n+if (parent != null) {\n+  int parentType = parent.getType();\n+  if (parentType == Token.ASSIGN || parentType == Token.GETPROP || parentType == Token.OBJECTLIT) {\n+    Node lhs = parent.getFirstChild();\n+    if (lhs != null && NodeUtil.isGet(lhs)) {\n+      Node llhs = lhs.getFirstChild();\n+      if (llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals(\"prototype\")) {\n+        // Found a direct prototype assignment\n+        if (lhs.matchesQualifiedName(\"this.prototype\")) {\n+          // Traverse functions assigned directly to \"this.prototype\"\n+          return true;\n+        } else if (lhs.getParent().matchesQualifiedName(\"goog.inherits\")) {\n+          // Ignore goog.inherits(cls, base) calls\n+          return false;\n+        } else {\n+          // Don't traverse functions assigned to other object prototypes\n+          return false;\n+        }\n+      } else if (llhs.getType() == Token.NAME && llhs.getString().equals(\"Object\") && lhs.getNext().getString().equals(\"assignProperties\")) {\n+        // Ignore Object.assignProperties() calls\n+        return false;\n+      }\n+    }\n+  } else {\n+    return false;\n+  }\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}