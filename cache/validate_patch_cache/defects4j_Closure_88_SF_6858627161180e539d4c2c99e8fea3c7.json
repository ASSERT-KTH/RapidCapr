{
    "patch": "private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n    if (n == null) {\n        return VariableLiveness.MAYBE_LIVE;\n    }\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n        if (NodeUtil.isLhs(n, n.getParent())) {\n            // The variable is being written, so it is not being read before being killed.\n            return VariableLiveness.KILL; \n        } else {\n            // The variable is being read, so it is not being killed before being read.\n            return VariableLiveness.READ;\n        }\n    }\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        if (ControlFlowGraph.isEnteringNewCfgNode(child)) {\n            // If a function is entered, we reset the liveness.\n            if (isVariableReadBeforeKill(child, variable) != VariableLiveness.MAYBE_LIVE) {\n                return VariableLiveness.KILL;\n            }\n        } else {\n            VariableLiveness state = isVariableReadBeforeKill(child, variable);\n            if (state == VariableLiveness.KILL) {\n                // If the variable is killed at any point, we no longer care about it.\n                return VariableLiveness.KILL;\n            }\n            if (state == VariableLiveness.READ) {\n                return VariableLiveness.READ;\n            }\n        }\n    }\n\n    // The variable was not read but may still have been written.\n    // All subsequent operations on the variable kill it.\n    return VariableLiveness.KILL;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..a91b1c16 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -320,29 +320,39 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is a read. It returns KILL, if the first\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n-  private VariableLiveness isVariableReadBeforeKill(\n-      Node n, String variable) {\n+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n+    if (n == null) {\n+        return VariableLiveness.MAYBE_LIVE;\n+    }\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n-      if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n-        return VariableLiveness.KILL;\n-      } else {\n-        return VariableLiveness.READ;\n-      }\n+        if (NodeUtil.isLhs(n, n.getParent())) {\n+            // The variable is being written, so it is not being read before being killed.\n+            return VariableLiveness.KILL; \n+        } else {\n+            // The variable is being read, so it is not being killed before being read.\n+            return VariableLiveness.READ;\n+        }\n     }\n-\n-    // Expressions are evaluated left-right, depth first.\n-    for (Node child = n.getFirstChild();\n-        child != null; child = child.getNext()) {\n-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n-        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n-        if (state != VariableLiveness.MAYBE_LIVE) {\n-          return state;\n+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+        if (ControlFlowGraph.isEnteringNewCfgNode(child)) {\n+            // If a function is entered, we reset the liveness.\n+            if (isVariableReadBeforeKill(child, variable) != VariableLiveness.MAYBE_LIVE) {\n+                return VariableLiveness.KILL;\n+            }\n+        } else {\n+            VariableLiveness state = isVariableReadBeforeKill(child, variable);\n+            if (state == VariableLiveness.KILL) {\n+                // If the variable is killed at any point, we no longer care about it.\n+                return VariableLiveness.KILL;\n+            }\n+            if (state == VariableLiveness.READ) {\n+                return VariableLiveness.READ;\n+            }\n         }\n-      }\n     }\n-    return VariableLiveness.MAYBE_LIVE;\n-  }\n+\n+    // The variable was not read but may still have been written.\n+    // All subsequent operations on the variable kill it.\n+    return VariableLiveness.KILL;\n+}\n }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}