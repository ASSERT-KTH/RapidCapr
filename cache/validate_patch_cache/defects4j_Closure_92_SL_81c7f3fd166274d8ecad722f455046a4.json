{
    "patch": "          while (indexOfDot != -1) {\n            ProvidedName parentName =\n                providedNames.get(namespace.substring(0, indexOfDot));\n            if (parentName != null) {\n              Preconditions.checkNotNull(parentName.replacementNode);\n              nodeToAddTo = parentName.replacementNode.getParent();\n              break;\n            } else {\n              indexOfDot = namespace.indexOf('.', indexOfDot + 1);\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex c929a363..df7ad368 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -786,7 +786,16 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n         } else {\n           // In this case, the name was implicitly provided by two independent\n           // modules. We need to move this code up to a common module.\n-          int indexOfDot = namespace.indexOf('.');\n+          while (indexOfDot != -1) {\n+            ProvidedName parentName =\n+                providedNames.get(namespace.substring(0, indexOfDot));\n+            if (parentName != null) {\n+              Preconditions.checkNotNull(parentName.replacementNode);\n+              nodeToAddTo = parentName.replacementNode.getParent();\n+              break;\n+            } else {\n+              indexOfDot = namespace.indexOf('.', indexOfDot + 1);\n+            }\n           if (indexOfDot == -1) {\n             // Any old place is fine.\n             compiler.getNodeForCodeInsertion(minimumModule)",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}