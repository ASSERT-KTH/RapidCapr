{
    "patch": "public Line revert() {\n    final Vector3D reversedDir = direction.negate();\n    final double newOriginX = zero.getX() + reversedDir.getX();\n    final double newOriginY = zero.getY() + reversedDir.getY();\n    final double newOriginZ = zero.getZ() + reversedDir.getZ();\n    final Vector3D newOrigin = new Vector3D(newOriginX, newOriginY, newOriginZ);\n    final Line reverted = new Line(newOrigin, reversedDir);\n    return reverted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..b2d9ea336 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,15 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+public Line revert() {\n+    final Vector3D reversedDir = direction.negate();\n+    final double newOriginX = zero.getX() + reversedDir.getX();\n+    final double newOriginY = zero.getY() + reversedDir.getY();\n+    final double newOriginZ = zero.getZ() + reversedDir.getZ();\n+    final Vector3D newOrigin = new Vector3D(newOriginX, newOriginY, newOriginZ);\n+    final Line reverted = new Line(newOrigin, reversedDir);\n+    return reverted;\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "junit.framework.AssertionFailedError: arrays first differed at element [0]; expected:<0.028581782127907646> but was:<-0.25723603915115295>",
    "test_result": "FAIL"
}