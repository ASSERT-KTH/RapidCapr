{
    "patch": "    // Fixing a bug that was causing warnings not to be generated in some cases\n    // when accessing properties of expressions with known null behavior.\n    if (parent instanceof NodeUtil.ImmutableResult) {\n      return;\n    }\n    \n    JSType type = n.getJSType();\n    if (type != null && NodeUtil.referencesThis(n)) {\n      if (parent.isAssign() && n.getFirstChild() != parent.getFirstChild()) {\n        // For now, we don't want to warn about the RHS of declaration-based\n        // constructors.\n        return;\n      }\n      if (parent.isClassConstructor() && n.isThis()) {\n        return;\n      }\n      if (isUndefOrNullOrObjectType(type)) {\n        warnings.add(makeAnnotation(n, DUPLICATE_KEYS_WARNING));\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}