{
    "patch": "public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    if (!this.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n\n    // Check parameters\n    Node thisParam = this.parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n\n    while (thisParam != null || thatParam != null) {\n        if (thisParam == null || thatParam == null) {\n            // Unequal param list lengths\n            return false;\n        }\n\n        if (thisParam.isVarArgs() && thatParam.isVarArgs()) {\n            // Both are varargs, no need to check further\n            return true;\n        }\n\n        if (thisParam.isVarArgs()) {\n            // This has varargs, but that doesn't, so subtype iff\n            // the last param of that is a subtype of this varargs type\n            JSType thisVarargs = thisParam.getJSType();\n            JSType thatLast = thatParam.getJSType();\n            while (thatParam.getNext() != null) {\n                thatParam = thatParam.getNext();\n                if (!thatParam.getJSType().isSubtype(thisVarargs)) {\n                    return false;\n                }\n            }\n            return thatLast.isSubtype(thisVarargs);\n        }\n\n        if (thatParam.isVarArgs()) {\n            // That has varargs, but this doesn't, so subtype iff\n            // this has at least as many required formal parameters as\n            // that, and each required formal parameter of that is a\n            // subtype of the corresponding parameter of this.\n            int numFormalsInThis = 0;\n            JSType thisLast = null;\n\n            // Count required parameters in this, and record the last\n            // required formal type.\n            while (thisParam != null && !thisParam.isVarArgs()) {\n                ++numFormalsInThis;\n                if (thisParam.getJSType() != null) {\n                    thisLast = thisParam.getJSType();\n                }\n                thisParam = thisParam.getNext();\n            }\n            if (thisLast == null) {\n                // All formal parameters are optional, and that has at least\n                // one required formal parameter (otherwise we would have\n                // exited above with a subtype relationship), so this is\n                // not a subtype of that.\n                return false;\n            }\n\n            // There are more formal parameters in that than in this, so no\n            // subtype relationship.\n            if (numFormalsInThis < that.getMinArity()) {\n                return false;\n            }\n\n            // Compare the required formal parameters.\n            while (numFormalsInThis > 0) {\n                JSType thisFormalType = thisParam.getJSType();\n                JSType thatFormalType = thatParam.getJSType();\n                if (thisFormalType != null && !thatFormalType.isSubtype(thisFormalType)) {\n                    return false;\n                }\n                thisParam = thisParam.getNext();\n                thatParam = thatParam.getNext();\n                --numFormalsInThis;\n            }\n\n            if (thisLast == null) {\n                // Everything matched correctly, and there are no more\n                // required formals on either side, so we're done.\n                return true;\n            }\n\n            // Compare varargs types.\n            JSType thisVarargs = thisLast;\n            JSType thatVarargs = thatParam.getNext().getJSType();\n            return thatVarargs == null || thatVarargs.isSubtype(thisVarargs);\n\n        } else {\n            // Both are non-varargs, so compare by position.\n            JSType thisParamType = thisParam.getJSType();\n            JSType thatParamType = thatParam.getJSType();\n            if (thisParamType != null && !thatParamType.isSubtype(thisParamType)) {\n                return false;\n            }\n        }\n        thisParam = thisParam.getNext();\n        thatParam = thatParam.getNext();\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..ce02e9e1 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,81 +77,114 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n+public boolean isSubtype(JSType other) {\n     if (!(other instanceof ArrowType)) {\n-      return false;\n+        return false;\n     }\n \n     ArrowType that = (ArrowType) other;\n \n-    // This is described in Draft 2 of the ES4 spec,\n-    // Section 3.4.7: Subtyping Function Types.\n-\n-    // this.returnType <: that.returnType (covariant)\n     if (!this.returnType.isSubtype(that.returnType)) {\n-      return false;\n+        return false;\n     }\n \n-    // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n-    Node thisParam = parameters.getFirstChild();\n+    // Check parameters\n+    Node thisParam = this.parameters.getFirstChild();\n     Node thatParam = that.parameters.getFirstChild();\n-    while (thisParam != null && thatParam != null) {\n-      JSType thisParamType = thisParam.getJSType();\n-      JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n-          return false;\n+\n+    while (thisParam != null || thatParam != null) {\n+        if (thisParam == null || thatParam == null) {\n+            // Unequal param list lengths\n+            return false;\n+        }\n+\n+        if (thisParam.isVarArgs() && thatParam.isVarArgs()) {\n+            // Both are varargs, no need to check further\n+            return true;\n+        }\n+\n+        if (thisParam.isVarArgs()) {\n+            // This has varargs, but that doesn't, so subtype iff\n+            // the last param of that is a subtype of this varargs type\n+            JSType thisVarargs = thisParam.getJSType();\n+            JSType thatLast = thatParam.getJSType();\n+            while (thatParam.getNext() != null) {\n+                thatParam = thatParam.getNext();\n+                if (!thatParam.getJSType().isSubtype(thisVarargs)) {\n+                    return false;\n+                }\n+            }\n+            return thatLast.isSubtype(thisVarargs);\n         }\n-      }\n \n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n+        if (thatParam.isVarArgs()) {\n+            // That has varargs, but this doesn't, so subtype iff\n+            // this has at least as many required formal parameters as\n+            // that, and each required formal parameter of that is a\n+            // subtype of the corresponding parameter of this.\n+            int numFormalsInThis = 0;\n+            JSType thisLast = null;\n \n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+            // Count required parameters in this, and record the last\n+            // required formal type.\n+            while (thisParam != null && !thisParam.isVarArgs()) {\n+                ++numFormalsInThis;\n+                if (thisParam.getJSType() != null) {\n+                    thisLast = thisParam.getJSType();\n+                }\n+                thisParam = thisParam.getNext();\n+            }\n+            if (thisLast == null) {\n+                // All formal parameters are optional, and that has at least\n+                // one required formal parameter (otherwise we would have\n+                // exited above with a subtype relationship), so this is\n+                // not a subtype of that.\n+                return false;\n+            }\n \n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n+            // There are more formal parameters in that than in this, so no\n+            // subtype relationship.\n+            if (numFormalsInThis < that.getMinArity()) {\n+                return false;\n+            }\n+\n+            // Compare the required formal parameters.\n+            while (numFormalsInThis > 0) {\n+                JSType thisFormalType = thisParam.getJSType();\n+                JSType thatFormalType = thatParam.getJSType();\n+                if (thisFormalType != null && !thatFormalType.isSubtype(thisFormalType)) {\n+                    return false;\n+                }\n+                thisParam = thisParam.getNext();\n+                thatParam = thatParam.getNext();\n+                --numFormalsInThis;\n+            }\n+\n+            if (thisLast == null) {\n+                // Everything matched correctly, and there are no more\n+                // required formals on either side, so we're done.\n+                return true;\n+            }\n+\n+            // Compare varargs types.\n+            JSType thisVarargs = thisLast;\n+            JSType thatVarargs = thatParam.getNext().getJSType();\n+            return thatVarargs == null || thatVarargs.isSubtype(thisVarargs);\n+\n+        } else {\n+            // Both are non-varargs, so compare by position.\n+            JSType thisParamType = thisParam.getJSType();\n+            JSType thatParamType = thatParam.getJSType();\n+            if (thisParamType != null && !thatParamType.isSubtype(thisParamType)) {\n+                return false;\n+            }\n+        }\n         thisParam = thisParam.getNext();\n-      }\n-      if (!thatIsVarArgs) {\n         thatParam = thatParam.getNext();\n-      }\n-\n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n-      }\n     }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n-\n     return true;\n-  }\n+}\n \n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}