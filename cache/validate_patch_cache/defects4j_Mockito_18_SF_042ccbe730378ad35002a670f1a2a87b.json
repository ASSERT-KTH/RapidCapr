{
    "patch": "public static Object getReturnValue(Method method) {\n    Class<?> returnType = method.getReturnType();\n    if (returnType == void.class || returnType == Void.class) {\n        return null;\n    } else if (returnType == boolean.class || returnType == Boolean.class) {\n        return false;\n    } else if (returnType == char.class || returnType == Character.class) {\n        return '\\0';\n    } else if (returnType == byte.class || returnType == Byte.class) {\n        return (byte) 0;\n    } else if (returnType == short.class || returnType == Short.class) {\n        return (short) 0;\n    } else if (returnType == int.class || returnType == Integer.class) {\n        return 0;\n    } else if (returnType == long.class || returnType == Long.class) {\n        return 0L;\n    } else if (returnType == float.class || returnType == Float.class) {\n        return 0.0f;\n    } else if (returnType == double.class || returnType == Double.class) {\n        return 0.0d;\n    } else if (returnType == String.class) {\n        return \"\";\n    } else if (Iterable.class.isAssignableFrom(returnType)) {\n        return Collections.emptyList();\n    } else if (Map.class.isAssignableFrom(returnType)) {\n        return Collections.emptyMap();\n    } else {\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..e712c0c5f 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,36 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Object getReturnValue(Method method) {\n+    Class<?> returnType = method.getReturnType();\n+    if (returnType == void.class || returnType == Void.class) {\n+        return null;\n+    } else if (returnType == boolean.class || returnType == Boolean.class) {\n+        return false;\n+    } else if (returnType == char.class || returnType == Character.class) {\n+        return '\\0';\n+    } else if (returnType == byte.class || returnType == Byte.class) {\n+        return (byte) 0;\n+    } else if (returnType == short.class || returnType == Short.class) {\n+        return (short) 0;\n+    } else if (returnType == int.class || returnType == Integer.class) {\n+        return 0;\n+    } else if (returnType == long.class || returnType == Long.class) {\n+        return 0L;\n+    } else if (returnType == float.class || returnType == Float.class) {\n+        return 0.0f;\n+    } else if (returnType == double.class || returnType == Double.class) {\n+        return 0.0d;\n+    } else if (returnType == String.class) {\n+        return \"\";\n+    } else if (Iterable.class.isAssignableFrom(returnType)) {\n+        return Collections.emptyList();\n+    } else if (Map.class.isAssignableFrom(returnType)) {\n+        return Collections.emptyMap();\n+    } else {\n+        return null;\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}