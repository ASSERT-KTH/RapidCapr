{
    "patch": "// Attach literal types first, then process nodes.\nattachLiteralTypes(n);\nNode grandparent = parent.getParent();\nif (parent.getType() == Token.NAME && grandparent.getType() == Token.FUNCTION) {\n  return; // Ignore function name\n} else if (NodeUtil.isFunctionExpression(n)) {\n  defineDeclaredFunction(n, parent); // Define anonymous function\n} else {\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (grandparent.getType() == Token.SCRIPT || grandparent.getType() == Token.BLOCK) {\n        defineDeclaredFunction(n, parent); // Define named function\n      }\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    case Token.LP:\n      if (grandparent == scope.getRootNode() || grandparent.getType() == Token.SCRIPT) {\n        handleFunctionInputs(grandparent); // Define parameters for top-level function expression\n      }\n      break;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..eebe8ba5 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,33 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+// Attach literal types first, then process nodes.\n+attachLiteralTypes(n);\n+Node grandparent = parent.getParent();\n+if (parent.getType() == Token.NAME && grandparent.getType() == Token.FUNCTION) {\n+  return; // Ignore function name\n+} else if (NodeUtil.isFunctionExpression(n)) {\n+  defineDeclaredFunction(n, parent); // Define anonymous function\n+} else {\n+  switch (n.getType()) {\n+    case Token.FUNCTION:\n+      if (grandparent.getType() == Token.SCRIPT || grandparent.getType() == Token.BLOCK) {\n+        defineDeclaredFunction(n, parent); // Define named function\n       }\n+      break;\n+    case Token.CATCH:\n+      defineCatch(n, parent);\n+      break;\n+    case Token.VAR:\n+      defineVar(n, parent);\n+      break;\n+    case Token.LP:\n+      if (grandparent == scope.getRootNode() || grandparent.getType() == Token.SCRIPT) {\n+        handleFunctionInputs(grandparent); // Define parameters for top-level function expression\n+      }\n+      break;\n+  }\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}