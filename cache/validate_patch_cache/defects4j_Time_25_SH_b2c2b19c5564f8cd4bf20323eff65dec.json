{
    "patch": "            long nextTransitionLocal = nextTransition(instantLocal - offsetAdjusted);\n            long nextTransitionAdjusted = nextTransition(instantAdjusted - offsetAdjusted);\n            if (nextTransitionLocal == nextTransitionAdjusted) {\n                return offsetAdjusted;\n            } else if (offsetLocal < offsetAdjusted) {\n                long prevTransitionLocal = previousTransition(instantLocal - offsetLocal);\n                if (prevTransitionLocal < nextTransitionAdjusted) {\n                    return offsetLocal;\n                } else {\n                    return offsetAdjusted;\n                }\n            } else {\n                long prevTransitionAdjusted = previousTransition(instantAdjusted - offsetAdjusted);\n                if (prevTransitionAdjusted >= nextTransitionLocal) {\n                    return offsetAdjusted;\n                } else if (prevTransitionAdjusted < nextTransitionAdjusted) {\n                    return offsetLocal;\n                } else {\n                    long r = nextTransitionLocal;\n                    int minOffset = getOffset(r - 1);\n                    for (long i = nextTransitionLocal - 1; i > prevTransitionAdjusted; i--) {\n                        int offset = getOffset(i - 1);\n                        if (offset != minOffset) {\n                            return offsetLocal < offsetAdjusted ? offsetLocal : offsetAdjusted;\n                        }\n                    }\n                    return offsetLocal < offsetAdjusted ? offsetAdjusted : offsetLocal;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..41f2de53 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,33 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            long nextTransitionLocal = nextTransition(instantLocal - offsetAdjusted);\n+            long nextTransitionAdjusted = nextTransition(instantAdjusted - offsetAdjusted);\n+            if (nextTransitionLocal == nextTransitionAdjusted) {\n+                return offsetAdjusted;\n+            } else if (offsetLocal < offsetAdjusted) {\n+                long prevTransitionLocal = previousTransition(instantLocal - offsetLocal);\n+                if (prevTransitionLocal < nextTransitionAdjusted) {\n+                    return offsetLocal;\n+                } else {\n+                    return offsetAdjusted;\n+                }\n+            } else {\n+                long prevTransitionAdjusted = previousTransition(instantAdjusted - offsetAdjusted);\n+                if (prevTransitionAdjusted >= nextTransitionLocal) {\n+                    return offsetAdjusted;\n+                } else if (prevTransitionAdjusted < nextTransitionAdjusted) {\n+                    return offsetLocal;\n+                } else {\n+                    long r = nextTransitionLocal;\n+                    int minOffset = getOffset(r - 1);\n+                    for (long i = nextTransitionLocal - 1; i > prevTransitionAdjusted; i--) {\n+                        int offset = getOffset(i - 1);\n+                        if (offset != minOffset) {\n+                            return offsetLocal < offsetAdjusted ? offsetLocal : offsetAdjusted;\n+                        }\n+                    }\n+                    return offsetLocal < offsetAdjusted ? offsetAdjusted : offsetLocal;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}