{
    "patch": "protected void declareNameInScope(FlowScope scope, Node node, JSType type) {\n    switch (node.getType()) {\n        case Token.NAME:\n            scope.inferSlotType(node.getString(), type);\n            break;\n\n        case Token.GETPROP:\n            String qualifiedName = node.getQualifiedName();\n            Preconditions.checkNotNull(qualifiedName);\n\n            JSType origType = node.getJSType();\n            origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;\n            scope.inferQualifiedSlot(node, qualifiedName, origType, type);\n            break;\n\n        case Token.THIS:\n            // \"This\" references can be modeled as a special case of a qualified slot\n            // Here we set the original type to be the top-level function/class type\n            // and infer a sub-property based on the current type\n            JSType functionType = scope.getSlot(\"function\", null, false);\n            if (functionType != null && functionType.isFunctionType()) {\n                JSType thisType = functionType.toObjectType().getPropertyType(\"this\");\n                if (thisType != null) {\n                    String propName = node.getNext().getString();\n                    thisType.getObjTypeIfSingletonObj().setProperty(propName, type);\n                }\n            }\n            break;\n\n        default:\n            throw new IllegalArgumentException(\"Node cannot be refined. \\n\" +\n                    node.toStringTree());\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 0345c855..9277f5c6 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -154,28 +154,40 @@ public abstract class ChainableReverseAbstractInterpreter\n    * {@code node}. It must be possible to refine the type of the given node in\n    * the given scope, as determined by {@link #getTypeIfRefinable}.\n    */\n-  protected void declareNameInScope(FlowScope scope, Node node, JSType type) {\n+protected void declareNameInScope(FlowScope scope, Node node, JSType type) {\n     switch (node.getType()) {\n-      case Token.NAME:\n-        scope.inferSlotType(node.getString(), type);\n-        break;\n-\n-      case Token.GETPROP:\n-        String qualifiedName = node.getQualifiedName();\n-        Preconditions.checkNotNull(qualifiedName);\n-\n-        JSType origType = node.getJSType();\n-        origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;\n-        scope.inferQualifiedSlot(node, qualifiedName, origType, type);\n-        break;\n-\n-        // \"this\" references aren't currently modeled in the CFG.\n-\n-      default:\n-        throw new IllegalArgumentException(\"Node cannot be refined. \\n\" +\n-            node.toStringTree());\n+        case Token.NAME:\n+            scope.inferSlotType(node.getString(), type);\n+            break;\n+\n+        case Token.GETPROP:\n+            String qualifiedName = node.getQualifiedName();\n+            Preconditions.checkNotNull(qualifiedName);\n+\n+            JSType origType = node.getJSType();\n+            origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;\n+            scope.inferQualifiedSlot(node, qualifiedName, origType, type);\n+            break;\n+\n+        case Token.THIS:\n+            // \"This\" references can be modeled as a special case of a qualified slot\n+            // Here we set the original type to be the top-level function/class type\n+            // and infer a sub-property based on the current type\n+            JSType functionType = scope.getSlot(\"function\", null, false);\n+            if (functionType != null && functionType.isFunctionType()) {\n+                JSType thisType = functionType.toObjectType().getPropertyType(\"this\");\n+                if (thisType != null) {\n+                    String propName = node.getNext().getString();\n+                    thisType.getObjTypeIfSingletonObj().setProperty(propName, type);\n+                }\n+            }\n+            break;\n+\n+        default:\n+            throw new IllegalArgumentException(\"Node cannot be refined. \\n\" +\n+                    node.toStringTree());\n     }\n-  }\n+}\n \n   /**\n    * @see #getRestrictedWithoutUndefined(JSType)",
    "result_reason": "error: method getSlot in interface StaticScope<T> cannot be applied to given types;",
    "test_result": "ERROR"
}