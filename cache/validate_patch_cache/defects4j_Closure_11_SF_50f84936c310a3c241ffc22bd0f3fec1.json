{
    "patch": "public void testGetprop4() {\n  try {\n    Properties props = new PropertiesLoader().loadProperties(\"test.properties\");\n    String value = props.getProperty(\"test.key\");\n    assertEquals(\"test.value\", value);\n    String[] warnings = props.getWarnings();\n    assertTrue(\"expected a warning\", warnings.length > 0);\n  } catch (IOException ex) {\n    fail(\"Exception raised when loading properties file: \" + ex.getMessage());\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..49c1547d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public void testGetprop4() {\n+  try {\n+    Properties props = new PropertiesLoader().loadProperties(\"test.properties\");\n+    String value = props.getProperty(\"test.key\");\n+    assertEquals(\"test.value\", value);\n+    String[] warnings = props.getWarnings();\n+    assertTrue(\"expected a warning\", warnings.length > 0);\n+  } catch (IOException ex) {\n+    fail(\"Exception raised when loading properties file: \" + ex.getMessage());\n+  }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}