{
    "patch": "public ReturnValue apply(TestCase testCase) {\n    try {\n        Method testMethod = testCase.getTestMethod();\n        Object instance = testCase.getInstance();\n        testMethod.invoke(instance);\n        \n        Class<?> returnType = testMethod.getReturnType();\n        ReturnValue returnValue = new ReturnValue(returnType);\n        if (returnType != Void.TYPE) {\n            Object result = testCase.getInstanceVariableValue();\n            returnValue.setValue(result);\n        } else {\n            returnValue.setValue(null);\n        }\n        \n        return returnValue;\n    } catch (Exception e) {\n        e.printStackTrace();\n        return new ReturnValue(e);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}