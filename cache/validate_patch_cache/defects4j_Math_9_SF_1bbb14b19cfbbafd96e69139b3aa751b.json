{
    "patch": "    public void testRevert() {\n        Line l1 = new Line(new Vector3D(1, 2, 3), new Vector3D(4, 5, 6));\n        Line l2 = l1.revert();\n        assertTrue(l2.getDirection().subtract(new Vector3D(-4, -5, -6)).getNorm() < 1e-12);\n        assertTrue(l2.getOrigin().subtract(new Vector3D(0, 0, 0)).getNorm() < 1e-12);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..ebe374d6c 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,11 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+    public void testRevert() {\n+        Line l1 = new Line(new Vector3D(1, 2, 3), new Vector3D(4, 5, 6));\n+        Line l2 = l1.revert();\n+        assertTrue(l2.getDirection().subtract(new Vector3D(-4, -5, -6)).getNorm() < 1e-12);\n+        assertTrue(l2.getOrigin().subtract(new Vector3D(0, 0, 0)).getNorm() < 1e-12);\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}