{
    "patch": "  private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    while (parameters.hasNext()) {\n      // If there are no arguments left in the list, then the while loop above implies that\n      // an argument is missing.\n      if (!arguments.hasNext()) {\n        parameter = parameters.next();\n        reportMissingArgument(t, call, parameter);\n      } else {\n        parameter = parameters.next();\n        argument = arguments.next();\n        ordinal++;\n\n        validator.expectArgumentMatchesParameter(\n            t,\n            argument,\n            getJSType(argument),\n            getJSType(parameter),\n            call,\n            ordinal);\n      }\n    }\n\n    // Ensure that there are no extra arguments.\n    while (arguments.hasNext()) {\n      Node extraArgument = arguments.next();\n      reportExtraArgument(t, call, extraArgument);\n    }\n  }\n\n  private void reportMissingArgument(NodeTraversal t, Node call, Node expectedParam) {\n    String message = \"Missing actual parameter for formal parameter: \"\n        + expectedParam.getString();\n    reportWarning(t, call, MISSING_ARGUMENT_WARNING, message);\n  }\n\n  private void reportExtraArgument(NodeTraversal t, Node call, Node extraArgument) {\n    String message = \"Function has \" + \"extra argument: \" + extraArgument;\n    reportWarning(t, call, EXTRA_ARGUMENTS_WARNING, message);\n  }\n\n  private void reportWarning(NodeTraversal t, Node n, DiagnosticType diagnostic, String message) {\n    JSError warning = JSError.make(n, diagnostic, message);\n    t.getCompiler().getErrorManager().report(warning);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..e415fae9 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,8 +1396,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+  private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n@@ -1405,30 +1404,50 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n+    while (parameters.hasNext()) {\n+      // If there are no arguments left in the list, then the while loop above implies that\n+      // an argument is missing.\n+      if (!arguments.hasNext()) {\n         parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+        reportMissingArgument(t, call, parameter);\n+      } else {\n+        parameter = parameters.next();\n+        argument = arguments.next();\n+        ordinal++;\n+\n+        validator.expectArgumentMatchesParameter(\n+            t,\n+            argument,\n+            getJSType(argument),\n+            getJSType(parameter),\n+            call,\n+            ordinal);\n+      }\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    // Ensure that there are no extra arguments.\n+    while (arguments.hasNext()) {\n+      Node extraArgument = arguments.next();\n+      reportExtraArgument(t, call, extraArgument);\n     }\n   }\n \n+  private void reportMissingArgument(NodeTraversal t, Node call, Node expectedParam) {\n+    String message = \"Missing actual parameter for formal parameter: \"\n+        + expectedParam.getString();\n+    reportWarning(t, call, MISSING_ARGUMENT_WARNING, message);\n+  }\n+\n+  private void reportExtraArgument(NodeTraversal t, Node call, Node extraArgument) {\n+    String message = \"Function has \" + \"extra argument: \" + extraArgument;\n+    reportWarning(t, call, EXTRA_ARGUMENTS_WARNING, message);\n+  }\n+\n+  private void reportWarning(NodeTraversal t, Node n, DiagnosticType diagnostic, String message) {\n+    JSError warning = JSError.make(n, diagnostic, message);\n+    t.getCompiler().getErrorManager().report(warning);\n+  }\n+\n   /**\n    * Visits a RETURN node.\n    *",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}