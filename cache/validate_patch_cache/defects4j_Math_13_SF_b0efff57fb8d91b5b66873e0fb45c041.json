{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getColumnDimension();\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix eigenvectors = dec.getV();\n    final RealMatrix eigenvalues = MatrixUtils.createRealDiagonalMatrix(dec.getRealEigenvalues());\n    final RealMatrix eigenvalues_sqrt = MatrixUtils.createRealDiagonalMatrix(\n            Arrays.stream(dec.getRealEigenvalues()).map(x -> Math.sqrt(Math.abs(x))).toArray());\n\n    final RealMatrix C = eigenvalues_sqrt.multiply(eigenvectors.transpose());\n    final RealMatrix R = eigenvectors.multiply(eigenvalues_sqrt);\n    final RealMatrix C_inv = new LUDecomposition(C).getSolver().getInverse();\n\n    return R.multiply(C_inv);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..076c39dc7 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,18 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getColumnDimension();\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix eigenvectors = dec.getV();\n+    final RealMatrix eigenvalues = MatrixUtils.createRealDiagonalMatrix(dec.getRealEigenvalues());\n+    final RealMatrix eigenvalues_sqrt = MatrixUtils.createRealDiagonalMatrix(\n+            Arrays.stream(dec.getRealEigenvalues()).map(x -> Math.sqrt(Math.abs(x))).toArray());\n+\n+    final RealMatrix C = eigenvalues_sqrt.multiply(eigenvectors.transpose());\n+    final RealMatrix R = eigenvectors.multiply(eigenvalues_sqrt);\n+    final RealMatrix C_inv = new LUDecomposition(C).getSolver().getInverse();\n+\n+    return R.multiply(C_inv);\n+}\n }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}