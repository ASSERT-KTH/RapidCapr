{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x)) {\n        return Double.NaN;\n    }\n\n    if (x < 0.0 || a <= 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    if (x >= a + 1.0) {\n        return 1.0 - regularizedGammaQ(a, x);\n    }\n\n    double sum = 1 / a;\n    double term = sum;\n\n    while (Math.abs(term) > DEFAULT_EPSILON * Math.abs(sum)) {\n        ++a;\n        term *= x / a;\n        sum += term;\n    }\n\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x)) {\n        return Double.NaN;\n    }\n\n    if (x < 0.0 || a <= 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 1.0;\n    }\n\n    if (x < a + 1.0) {\n        return 1.0 - regularizedGammaP(a, x);\n    }\n\n    ContinuedFraction fraction = new ContinuedFraction() {\n        @Override\n        protected double getB(int n, double x) {\n            if (n % 2 == 0) {\n                return n / 2.0;\n            }\n            int idx = (n + 1) / 2 - 1;\n            return -(a + idx) * (a + x + idx);\n        }\n\n        @Override\n        protected double getA(int n, double x) {\n            return n * (a - n);\n        }\n    };\n\n    double epsilon = DEFAULT_EPSILON / 10;  // Lowering the tolerance\n    double cfValue = fraction.evaluate(x, epsilon);\n    double pValue = Math.exp(-x + a * Math.log(x) - logGamma(a)) / cfValue;\n\n    return pValue;\n}\n\npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + GAMMA_X) - x - GAMMA_X;\n    double ser = GAMMA_SERIES_C[0];\n    for (int j = 1; j < GAMMA_SERIES_C.length; ++j) {\n        x += 1.0;\n        ser += GAMMA_SERIES_C[j] / x;\n    }\n    return tmp + Math.log(GAMMA_SQRT_TWO_PI * ser);\n}\n\nprivate static final double DEFAULT_EPSILON = 10e-9;\nprivate static final double GAMMA_X = 5.2421875;\nprivate static final double GAMMA_SQRT_TWO_PI = 2.50662827463100050242;\nprivate static final double[] GAMMA_SERIES_C = {\n        76.18009172947146,\n        -86.50532032941677,\n        24.01409824083091,\n        -1.231739572450155,\n        0.001208650973866179,\n        -0.000005395239384953\n};",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..b19520bcd 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,96 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x)) {\n+        return Double.NaN;\n+    }\n+\n+    if (x < 0.0 || a <= 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    if (x >= a + 1.0) {\n+        return 1.0 - regularizedGammaQ(a, x);\n+    }\n+\n+    double sum = 1 / a;\n+    double term = sum;\n+\n+    while (Math.abs(term) > DEFAULT_EPSILON * Math.abs(sum)) {\n+        ++a;\n+        term *= x / a;\n+        sum += term;\n+    }\n+\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x)) {\n+        return Double.NaN;\n+    }\n+\n+    if (x < 0.0 || a <= 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+\n+    if (x < a + 1.0) {\n+        return 1.0 - regularizedGammaP(a, x);\n+    }\n+\n+    ContinuedFraction fraction = new ContinuedFraction() {\n+        @Override\n+        protected double getB(int n, double x) {\n+            if (n % 2 == 0) {\n+                return n / 2.0;\n+            }\n+            int idx = (n + 1) / 2 - 1;\n+            return -(a + idx) * (a + x + idx);\n+        }\n+\n+        @Override\n+        protected double getA(int n, double x) {\n+            return n * (a - n);\n+        }\n+    };\n+\n+    double epsilon = DEFAULT_EPSILON / 10;  // Lowering the tolerance\n+    double cfValue = fraction.evaluate(x, epsilon);\n+    double pValue = Math.exp(-x + a * Math.log(x) - logGamma(a)) / cfValue;\n+\n+    return pValue;\n+}\n+\n+public static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + GAMMA_X) - x - GAMMA_X;\n+    double ser = GAMMA_SERIES_C[0];\n+    for (int j = 1; j < GAMMA_SERIES_C.length; ++j) {\n+        x += 1.0;\n+        ser += GAMMA_SERIES_C[j] / x;\n+    }\n+    return tmp + Math.log(GAMMA_SQRT_TWO_PI * ser);\n+}\n+\n+private static final double DEFAULT_EPSILON = 10e-9;\n+private static final double GAMMA_X = 5.2421875;\n+private static final double GAMMA_SQRT_TWO_PI = 2.50662827463100050242;\n+private static final double[] GAMMA_SERIES_C = {\n+        76.18009172947146,\n+        -86.50532032941677,\n+        24.01409824083091,\n+        -1.231739572450155,\n+        0.001208650973866179,\n+        -0.000005395239384953\n+};\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}