{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getColumnDimension();\n    final RealMatrix x = MatrixUtils.createRealIdentityMatrix(n);\n    RealMatrix y = m.scalarMultiply(0.25);\n\n    while (true) {\n        final RealMatrix nextX = x.add(y).multiply(0.5);\n        if (nextX.equals(x)) {\n            break;\n        }\n        x = nextX;\n        y = m.multiply(x).scalarMultiply(0.5).multiply(x);\n    }\n\n    return x;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..5affebb9b 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,20 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getColumnDimension();\n+    final RealMatrix x = MatrixUtils.createRealIdentityMatrix(n);\n+    RealMatrix y = m.scalarMultiply(0.25);\n+\n+    while (true) {\n+        final RealMatrix nextX = x.add(y).multiply(0.5);\n+        if (nextX.equals(x)) {\n+            break;\n+        }\n+        x = nextX;\n+        y = m.multiply(x).scalarMultiply(0.5).multiply(x);\n     }\n+\n+    return x;\n+}\n }",
    "result_reason": "error: method multiply in interface RealMatrix cannot be applied to given types;",
    "test_result": "ERROR"
}