{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    // Mark all referenced parameters.\n    Node argList = getFunctionArgList(function);\n    for (Node arg : argList.children()) {\n      String name = arg.getString();\n      if (name.isEmpty() || name.startsWith(\"__\")) {\n        continue;\n      }\n      Var var = fnScope.getVar(name);\n      if (referenced.contains(var)) {\n        continue;\n      }\n      if (isRestParameter(arg)) {\n        removeUnusedRestArg(arg, fnScope);\n        continue;\n      }\n      if (arg.isDefaultValue()) {\n        if (isDefaultValueUsed(arg.getFirstChild(), fnScope, referenced)) {\n          continue;\n        } else {\n          NodeUtil.detachNode(arg.getFirstChild());\n        }\n      }\n      Preconditions.checkState(arg.isName());\n      argList.removeChild(arg);\n      compiler.reportCodeChange();\n    }\n\n    // If this function is passed as an argument, adjust the arguments of\n    // call sites. We can't iterate over all references or this will take\n    // quadratic time, so we iterate over the known call sites.\n    if (modifyCallSites) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..355840e2 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,47 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    // Mark all referenced parameters.\n+    Node argList = getFunctionArgList(function);\n+    for (Node arg : argList.children()) {\n+      String name = arg.getString();\n+      if (name.isEmpty() || name.startsWith(\"__\")) {\n+        continue;\n+      }\n+      Var var = fnScope.getVar(name);\n+      if (referenced.contains(var)) {\n+        continue;\n+      }\n+      if (isRestParameter(arg)) {\n+        removeUnusedRestArg(arg, fnScope);\n+        continue;\n+      }\n+      if (arg.isDefaultValue()) {\n+        if (isDefaultValueUsed(arg.getFirstChild(), fnScope, referenced)) {\n+          continue;\n+        } else {\n+          NodeUtil.detachNode(arg.getFirstChild());\n+        }\n+      }\n+      Preconditions.checkState(arg.isName());\n+      argList.removeChild(arg);\n+      compiler.reportCodeChange();\n+    }\n+\n+    // If this function is passed as an argument, adjust the arguments of\n+    // call sites. We can't iterate over all references or this will take\n+    // quadratic time, so we iterate over the known call sites.\n+    if (modifyCallSites) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}