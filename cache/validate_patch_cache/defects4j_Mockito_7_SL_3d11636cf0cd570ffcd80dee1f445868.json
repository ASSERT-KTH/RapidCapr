{
    "patch": "Type[] bounds = typeVariable.getBounds();\nif (bounds.length > 0) {\n    for (Type type : bounds) {\n        if (type instanceof TypeVariable) {\n            readTypeVariable(type);\n        }\n        registerTypeVariablesOn(type);\n    }\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n        if (actualTypeArgument instanceof TypeVariable) {\n            readTypeVariable(actualTypeArgument);\n        }\n    }\n} else {\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n        if (actualTypeArgument instanceof TypeVariable) {\n            readTypeVariable(actualTypeArgument);\n        }\n    } else {\n        registerTypeVariablesOn(Object.class);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..21564a3a7 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,37 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type[] bounds = typeVariable.getBounds();\n+if (bounds.length > 0) {\n+    for (Type type : bounds) {\n+        if (type instanceof TypeVariable) {\n+            readTypeVariable(type);\n+        }\n+        registerTypeVariablesOn(type);\n+    }\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+        if (actualTypeArgument instanceof TypeVariable) {\n+            readTypeVariable(actualTypeArgument);\n+        }\n+    }\n+} else {\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+        if (actualTypeArgument instanceof TypeVariable) {\n+            readTypeVariable(actualTypeArgument);\n+        }\n+    } else {\n+        registerTypeVariablesOn(Object.class);\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}