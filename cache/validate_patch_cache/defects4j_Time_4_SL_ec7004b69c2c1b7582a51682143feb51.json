{
    "patch": "5. \n```\nPartial newPartial = new Partial(iChronology, newTypes, newValues);\nnewPartial = newPartial.withChronologyRetainFields(iChronology);\n``` \nThis creates a new `Partial` object with the specified chronology and retains the fields of the original `Partial`. This is a safer alternative than using `iChronology.withUTC()` which may remove fields that are not supported in UTC.",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..25587eb1 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -461,7 +461,12 @@ public final class Partial\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+5. \n+```\n+Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+newPartial = newPartial.withChronologyRetainFields(iChronology);\n+``` \n+This creates a new `Partial` object with the specified chronology and retains the fields of the original `Partial`. This is a safer alternative than using `iChronology.withUTC()` which may remove fields that are not supported in UTC.\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}