{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n\n    // Update sumLogImpl and secondMoment\n    if (sumLogImpl != null) {\n        if (value > 0) {\n            sumLogImpl.increment(Math.log(value));\n        } else if (value == 0) {\n            // For 0 values, increment with the log of the smallest positive\n            // double value to avoid producing NaN in future calculations\n            sumLogImpl.increment(Math.log(Double.MIN_VALUE));\n        }\n    }\n    if (secondMoment != null) {\n        secondMoment.increment(value);\n    }\n\n    // If mean, variance or geomean have been overridden, need to increment these\n    if (meanImpl != null) {\n        ((AbstractStorelessUnivariateStatistic) meanImpl).increment(value);\n    } else {\n        meanImpl = new Mean();\n        ((AbstractStorelessUnivariateStatistic) meanImpl).increment(value);\n    }\n\n    if (varianceImpl != null) {\n        ((AbstractStorelessUnivariateStatistic) varianceImpl).increment(value);\n    } else {\n        varianceImpl = new Variance();\n        ((AbstractStorelessUnivariateStatistic) varianceImpl).increment(value);\n    }\n\n    if (value > 0) {\n        if (geoMeanImpl != null) {\n            geoMeanImpl.increment(value);\n        } else {\n            geoMeanImpl = new GeometricMean();\n            geoMeanImpl.increment(value);\n        }\n    } else if (value == 0 && sumLogImpl != null) {\n        // If geoMeanImpl is null, for 0 values, increment the sumLogImpl\n        // with the log of the smallest positive double value to avoid\n        // producing NaN in future calculations\n        sumLogImpl.increment(Math.log(Double.MIN_VALUE));\n    } else {\n        // If the value is negative, geoMeanImpl cannot be incremented\n        throw new IllegalArgumentException(\"Geometric Mean is undefined for non-positive values\");\n    }\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..95dcdbbba 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,26 +146,59 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n-        }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+\n+    // Update sumLogImpl and secondMoment\n+    if (sumLogImpl != null) {\n+        if (value > 0) {\n+            sumLogImpl.increment(Math.log(value));\n+        } else if (value == 0) {\n+            // For 0 values, increment with the log of the smallest positive\n+            // double value to avoid producing NaN in future calculations\n+            sumLogImpl.increment(Math.log(Double.MIN_VALUE));\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n+    }\n+    if (secondMoment != null) {\n+        secondMoment.increment(value);\n+    }\n+\n+    // If mean, variance or geomean have been overridden, need to increment these\n+    if (meanImpl != null) {\n+        ((AbstractStorelessUnivariateStatistic) meanImpl).increment(value);\n+    } else {\n+        meanImpl = new Mean();\n+        ((AbstractStorelessUnivariateStatistic) meanImpl).increment(value);\n+    }\n+\n+    if (varianceImpl != null) {\n+        ((AbstractStorelessUnivariateStatistic) varianceImpl).increment(value);\n+    } else {\n+        varianceImpl = new Variance();\n+        ((AbstractStorelessUnivariateStatistic) varianceImpl).increment(value);\n+    }\n+\n+    if (value > 0) {\n+        if (geoMeanImpl != null) {\n+            geoMeanImpl.increment(value);\n+        } else {\n+            geoMeanImpl = new GeometricMean();\n             geoMeanImpl.increment(value);\n         }\n-        n++;\n-    }\n+    } else if (value == 0 && sumLogImpl != null) {\n+        // If geoMeanImpl is null, for 0 values, increment the sumLogImpl\n+        // with the log of the smallest positive double value to avoid\n+        // producing NaN in future calculations\n+        sumLogImpl.increment(Math.log(Double.MIN_VALUE));\n+    } else {\n+        // If the value is negative, geoMeanImpl cannot be incremented\n+        throw new IllegalArgumentException(\"Geometric Mean is undefined for non-positive values\");\n+    }\n+    n++;\n+}\n \n     /**\n      * Returns the number of available values",
    "result_reason": "java.lang.IllegalArgumentException: Geometric Mean is undefined for non-positive values",
    "test_result": "FAIL"
}