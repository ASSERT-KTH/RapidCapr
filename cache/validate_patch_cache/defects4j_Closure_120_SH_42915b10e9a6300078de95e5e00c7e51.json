{
    "patch": "  // Make sure this assignment is not in a loop.\n  boolean foundAssignment = false;\n  for (BasicBlock block = ref.getBasicBlock();\n       block != null; block = block.getParent()) {\n    if (block.isFunction) {\n      break;\n    } else if (block.isLoop) {\n      // Search for additional assignments in the loop header.\n      List<Node> loopHeader = block.getNodes();\n      for (int i = 0; i < loopHeader.size(); i++) {\n        Node n = loopHeader.get(i);\n        if (n.isFunction()) {\n          break;\n        } else if (n.isAssign()) {\n          // If there are any additional assignments in the loop header,\n          // then this variable is not assigned once in its lifetime.\n          if (foundAssignment) {\n            return false;\n          }\n          foundAssignment = true;\n        }\n      }\n      return !foundAssignment;\n    }\n  }\n\n  return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..2477e0a7 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,33 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+  // Make sure this assignment is not in a loop.\n+  boolean foundAssignment = false;\n+  for (BasicBlock block = ref.getBasicBlock();\n+       block != null; block = block.getParent()) {\n+    if (block.isFunction) {\n+      break;\n+    } else if (block.isLoop) {\n+      // Search for additional assignments in the loop header.\n+      List<Node> loopHeader = block.getNodes();\n+      for (int i = 0; i < loopHeader.size(); i++) {\n+        Node n = loopHeader.get(i);\n+        if (n.isFunction()) {\n+          break;\n+        } else if (n.isAssign()) {\n+          // If there are any additional assignments in the loop header,\n+          // then this variable is not assigned once in its lifetime.\n+          if (foundAssignment) {\n+            return false;\n+          }\n+          foundAssignment = true;\n+        }\n+      }\n+      return !foundAssignment;\n+    }\n+  }\n+\n+  return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}