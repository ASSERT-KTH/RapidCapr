{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors or have the @this or @override annotation.\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null\n                && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n            return false;\n        }\n\n        // Don't traverse functions that are immediately called with \"this\" as the global object.\n        // This rule exists as a workaround to avoid falsely identifying \"this\" as the global object in JavaScript programs.\n        Node firstChild = n.getFirstChild();\n        if (firstChild.getType() == Token.STRING) {\n            if (GlobalNamespace.isValidFunctionStringToken(firstChild)) {\n                return false;\n            }\n        } else if (firstChild.getType() == Token.CALL && firstChild.getFirstChild().getType() == Token.NAME) {\n            String name = firstChild.getFirstChild().getString();\n            if (\"bind\".equals(name) || \"call\".equals(name) || \"apply\".equals(name)) {\n                if (isThisGlobalObject(firstChild.getLastChild())) {\n                    return false;\n                }\n            }\n        }\n\n        // Don't traverse functions unless they would normally be able to have a @this annotation associated with them.\n        // Valid parent nodes include script blocks, function blocks, variable declarations, and property assignments.\n        if (parent != null) {\n            int pType = parent.getType();\n            if (!((pType == Token.SCRIPT) || (pType == Token.FUNCTION) || (pType == Token.VAR) || isValidPropertyAssignment(parent))) {\n                return false;\n            }\n        }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        if (n == lhs) {\n            // Always traverse the left side of the assignment. To handle nested assignments properly,\n            // assignLhsChild should not be overridden.\n            if (assignLhsChild == null) {\n                assignLhsChild = lhs;\n            }\n        } else {\n            // Only traverse the right side if it's not an assignment to a prototype property or subproperty.\n            if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n                return false;\n            }\n            if (lhs.getType() == Token.NAME && lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\nprivate boolean isValidPropertyAssignment(Node parent) {\n    if (parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        if (lhs.getType() == Token.GETPROP) {\n            Node lastChild = lhs.getLastChild();\n            if (lastChild.getType() == Token.STRING && \"prototype\".equals(lastChild.getString())) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nprivate boolean isThisGlobalObject(Node node) {\n    return node != null && node.getType() == Token.NAME && \"this\".equals(node.getString());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..b7e401a3 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,79 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+        // Don't traverse functions that are constructors or have the @this or @override annotation.\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null\n+                && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n+            return false;\n+        }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n+        // Don't traverse functions that are immediately called with \"this\" as the global object.\n+        // This rule exists as a workaround to avoid falsely identifying \"this\" as the global object in JavaScript programs.\n+        Node firstChild = n.getFirstChild();\n+        if (firstChild.getType() == Token.STRING) {\n+            if (GlobalNamespace.isValidFunctionStringToken(firstChild)) {\n+                return false;\n+            }\n+        } else if (firstChild.getType() == Token.CALL && firstChild.getFirstChild().getType() == Token.NAME) {\n+            String name = firstChild.getFirstChild().getString();\n+            if (\"bind\".equals(name) || \"call\".equals(name) || \"apply\".equals(name)) {\n+                if (isThisGlobalObject(firstChild.getLastChild())) {\n+                    return false;\n+                }\n+            }\n+        }\n+\n+        // Don't traverse functions unless they would normally be able to have a @this annotation associated with them.\n+        // Valid parent nodes include script blocks, function blocks, variable declarations, and property assignments.\n+        if (parent != null) {\n+            int pType = parent.getType();\n+            if (!((pType == Token.SCRIPT) || (pType == Token.FUNCTION) || (pType == Token.VAR) || isValidPropertyAssignment(parent))) {\n+                return false;\n+            }\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+        Node lhs = parent.getFirstChild();\n+        if (n == lhs) {\n+            // Always traverse the left side of the assignment. To handle nested assignments properly,\n+            // assignLhsChild should not be overridden.\n+            if (assignLhsChild == null) {\n+                assignLhsChild = lhs;\n+            }\n+        } else {\n+            // Only traverse the right side if it's not an assignment to a prototype property or subproperty.\n+            if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n+                return false;\n+            }\n+            if (lhs.getType() == Token.NAME && lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+                return false;\n+            }\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n-      }\n     }\n \n     return true;\n-  }\n+}\n+\n+private boolean isValidPropertyAssignment(Node parent) {\n+    if (parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        if (lhs.getType() == Token.GETPROP) {\n+            Node lastChild = lhs.getLastChild();\n+            if (lastChild.getType() == Token.STRING && \"prototype\".equals(lastChild.getString())) {\n+                return false;\n+            }\n+        }\n+    }\n+    return true;\n+}\n+\n+private boolean isThisGlobalObject(Node node) {\n+    return node != null && node.getType() == Token.NAME && \"this\".equals(node.getString());\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}