{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n      // detect event handler issue in IE\n      if (maybeExpr.getType() == Token.RETURN && maybeExpr.hasOneChild()\n          && maybeExpr.getFirstChild().getType() == Token.NAME\n          && maybeExpr.getFirstChild().getString().equals(\"undefined\")) {\n        return false;\n      }\n\n      if (NodeUtil.isExpressionNode(maybeExpr)) {\n        Node parent = n.getParent();\n\n        // detect EXPR_RESULT parent\n        if (parent != null && parent.getType() == Token.EXPR_RESULT && parent.hasOneChild()) {\n          Node grandparent = parent.getParent();\n          if (grandparent != null && grandparent.getType() == Token.BLOCK && grandparent.hasOneChild()) {\n            return true;\n          }\n        } else {\n          // detect return statement\n          if (maybeExpr.getType() == Token.NAME\n              || (maybeExpr.getType() == Token.NEW && maybeExpr.getFirstChild().getType() == Token.NAME)) {\n            if (parent == null || parent.getType() != Token.RETURN\n                || !parent.hasOneChild() || !NodeUtil.isFunction(parent.getParent())) {\n              return true;\n            }\n          } else {\n            if (parent == null || !NodeUtil.inBooleanContext(parent) && !NodeUtil.invertingOp(parent)) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..849a0872 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,47 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+      // detect event handler issue in IE\n+      if (maybeExpr.getType() == Token.RETURN && maybeExpr.hasOneChild()\n+          && maybeExpr.getFirstChild().getType() == Token.NAME\n+          && maybeExpr.getFirstChild().getString().equals(\"undefined\")) {\n+        return false;\n       }\n-    }\n \n-    return false;\n+      if (NodeUtil.isExpressionNode(maybeExpr)) {\n+        Node parent = n.getParent();\n+\n+        // detect EXPR_RESULT parent\n+        if (parent != null && parent.getType() == Token.EXPR_RESULT && parent.hasOneChild()) {\n+          Node grandparent = parent.getParent();\n+          if (grandparent != null && grandparent.getType() == Token.BLOCK && grandparent.hasOneChild()) {\n+            return true;\n+          }\n+        } else {\n+          // detect return statement\n+          if (maybeExpr.getType() == Token.NAME\n+              || (maybeExpr.getType() == Token.NEW && maybeExpr.getFirstChild().getType() == Token.NAME)) {\n+            if (parent == null || parent.getType() != Token.RETURN\n+                || !parent.hasOneChild() || !NodeUtil.isFunction(parent.getParent())) {\n+              return true;\n+            }\n+          } else {\n+            if (parent == null || !NodeUtil.inBooleanContext(parent) && !NodeUtil.invertingOp(parent)) {\n+              return true;\n+            }\n+          }\n+        }\n+      }\n+    }\n   }\n \n+  return false;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}