{
    "patch": "public boolean canBeCalled() {\n    return isFunctionType() || isConstructor() || isRecordType();\n}\n\n@Override\nString toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n          current != null && !current.isNativeObjectType() &&\n              propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n          current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String propertyName : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(propertyName);\n        sb.append(\": \");\n        JSType propertyType = getPropertyType(propertyName);\n\n        if (propertyType != null && propertyType.canBeCalled()) {\n          sb.append(\"[function (?): undefined]\");\n        } else {\n          sb.append(propertyType == null ? \"?\" : propertyType.toStringHelper(forAnnotations));\n        }\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..492298ff 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,12 +345,12 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n+public boolean canBeCalled() {\n+    return isFunctionType() || isConstructor() || isRecordType();\n+}\n \n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n+@Override\n+String toStringHelper(boolean forAnnotations) {\n     if (hasReferenceName()) {\n       return getReferenceName();\n     } else if (prettyPrint) {\n@@ -360,9 +360,9 @@ class PrototypeObjectType extends ObjectType {\n       // Use a tree set so that the properties are sorted.\n       Set<String> propertyNames = Sets.newTreeSet();\n       for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n+          current != null && !current.isNativeObjectType() &&\n+              propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n+          current = current.getImplicitPrototype()) {\n         propertyNames.addAll(current.getOwnPropertyNames());\n       }\n \n@@ -370,15 +370,20 @@ class PrototypeObjectType extends ObjectType {\n       sb.append(\"{\");\n \n       int i = 0;\n-      for (String property : propertyNames) {\n+      for (String propertyName : propertyNames) {\n         if (i > 0) {\n           sb.append(\", \");\n         }\n \n-        sb.append(property);\n+        sb.append(propertyName);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+        JSType propertyType = getPropertyType(propertyName);\n \n+        if (propertyType != null && propertyType.canBeCalled()) {\n+          sb.append(\"[function (?): undefined]\");\n+        } else {\n+          sb.append(propertyType == null ? \"?\" : propertyType.toStringHelper(forAnnotations));\n+        }\n         ++i;\n         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n           sb.append(\", ...\");\n@@ -393,7 +398,7 @@ class PrototypeObjectType extends ObjectType {\n     } else {\n       return \"{...}\";\n     }\n-  }\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "junit.framework.ComparisonFailure: expected:</** @type {{b: [function (?): undefined]}} build/ contrib/ externs/ gen/ javadoc/ lib/ src/ test/ tools/",
    "test_result": "FAIL"
}