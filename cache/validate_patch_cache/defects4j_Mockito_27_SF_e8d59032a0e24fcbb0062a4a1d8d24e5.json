{
    "patch": "    public <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\n        if(mock instanceof Factory) {\n            Factory factory = (Factory) mock;\n            Callback[] callbacks = new Callback[factory.getCallbacks().length + 1];\n            callbacks[0] = newFilter;\n            System.arraycopy(factory.getCallbacks(), 0, callbacks, 1, factory.getCallbacks().length);\n\n            Class<?>[] interfaces = factory.getClass().getInterfaces();\n            Enhancer enhancer = new Enhancer();\n            enhancer.setSuperclass(factory.getClass());\n            enhancer.setInterfaces(interfaces);\n            enhancer.setCallbackTypes(MethodInterceptor.class, NoOp.class);\n            enhancer.setCallbacks(callbacks);\n            Object newMock = enhancer.create();\n\n            Field[] fields = factory.getClass().getDeclaredFields();\n            for(Field field : fields) {\n                if(field.getType().isInstance(mock)) {\n                    field.setAccessible(true);\n                    try {\n                        field.set(factory, field.get(newMock));\n                    } catch (IllegalAccessException e) {\n                        throw new RuntimeException(\"Unable to reset mock\", e);\n                    }\n                }\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..8bc62beda 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,40 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+    public <T> void resetMock(T mock) {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+        if(mock instanceof Factory) {\n+            Factory factory = (Factory) mock;\n+            Callback[] callbacks = new Callback[factory.getCallbacks().length + 1];\n+            callbacks[0] = newFilter;\n+            System.arraycopy(factory.getCallbacks(), 0, callbacks, 1, factory.getCallbacks().length);\n+\n+            Class<?>[] interfaces = factory.getClass().getInterfaces();\n+            Enhancer enhancer = new Enhancer();\n+            enhancer.setSuperclass(factory.getClass());\n+            enhancer.setInterfaces(interfaces);\n+            enhancer.setCallbackTypes(MethodInterceptor.class, NoOp.class);\n+            enhancer.setCallbacks(callbacks);\n+            Object newMock = enhancer.create();\n+\n+            Field[] fields = factory.getClass().getDeclaredFields();\n+            for(Field field : fields) {\n+                if(field.getType().isInstance(mock)) {\n+                    field.setAccessible(true);\n+                    try {\n+                        field.set(factory, field.get(newMock));\n+                    } catch (IllegalAccessException e) {\n+                        throw new RuntimeException(\"Unable to reset mock\", e);\n+                    }\n+                }\n+            }\n+        }\n+    }\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}