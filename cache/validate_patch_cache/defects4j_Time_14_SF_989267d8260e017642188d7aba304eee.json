{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            // retrieve the values from the partial object\n            int[] newValues = Arrays.copyOf(values, values.length);\n            // add the valueToAdd to the specified field\n            newValues[fieldIndex] += valueToAdd;\n            // iterate over each field to get the maximum value of the fields it is dependant on\n            for (int i = 0; i < partial.size(); i++) {\n                // if the current field is the specified field then we already added the new value\n                if (i == fieldIndex) {\n                    continue;\n                }\n                // get the max value of the current field and check if it is not greater than the max value of this field\n                int max = partial.getFieldType(i).getField(iChronology).getMaximumValue(partial, values[i]);\n                if (newValues[i] > max) {\n                    // if newValues[i] is out of range, we add it to the next field \n                    // the next field should be at index i - 1, since we go through the fields in a descending order\n                    // but skipping fieldIndex\n                    newValues[i - 1]++;\n                    newValues[i] -= max + 1;\n                } else if (newValues[i] < partial.getFieldType(i).getField(iChronology).getMinimumValue(partial, values[i])) {\n                    // if newValues[i] is less than the minimum allowed value, we subtract it from the next field\n                    // the next field should be at index i - 1, since we go through the fields in a descending order\n                    // but skipping fieldIndex\n                    newValues[i - 1]--;\n                    newValues[i] += max + 1;\n                }\n            }\n            // return the new values array\n            return newValues;\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..a191ec6b 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,14 +206,36 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            // retrieve the values from the partial object\n+            int[] newValues = Arrays.copyOf(values, values.length);\n+            // add the valueToAdd to the specified field\n+            newValues[fieldIndex] += valueToAdd;\n+            // iterate over each field to get the maximum value of the fields it is dependant on\n+            for (int i = 0; i < partial.size(); i++) {\n+                // if the current field is the specified field then we already added the new value\n+                if (i == fieldIndex) {\n+                    continue;\n+                }\n+                // get the max value of the current field and check if it is not greater than the max value of this field\n+                int max = partial.getFieldType(i).getField(iChronology).getMaximumValue(partial, values[i]);\n+                if (newValues[i] > max) {\n+                    // if newValues[i] is out of range, we add it to the next field \n+                    // the next field should be at index i - 1, since we go through the fields in a descending order\n+                    // but skipping fieldIndex\n+                    newValues[i - 1]++;\n+                    newValues[i] -= max + 1;\n+                } else if (newValues[i] < partial.getFieldType(i).getField(iChronology).getMinimumValue(partial, values[i])) {\n+                    // if newValues[i] is less than the minimum allowed value, we subtract it from the next field\n+                    // the next field should be at index i - 1, since we go through the fields in a descending order\n+                    // but skipping fieldIndex\n+                    newValues[i - 1]--;\n+                    newValues[i] += max + 1;\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            // return the new values array\n+            return newValues;\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}