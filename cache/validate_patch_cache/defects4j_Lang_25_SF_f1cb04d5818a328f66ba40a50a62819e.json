{
    "patch": "public static String unescape(String input) {\n    StringBuilder output = new StringBuilder();\n    for (int i = 0; i < input.length(); ) {\n        char ch = input.charAt(i);\n        if (ch == '\\\\') {\n            i++;\n            if (i >= input.length()) {\n                throw new IllegalArgumentException(\"Invalid escape sequence at end of input: \" + input);\n            }\n            ch = input.charAt(i);\n            switch (ch) {\n                case 'n': output.append('\\n'); break;\n                case 'r': output.append('\\r'); break;\n                case 't': output.append('\\t'); break;\n                case 'f': output.append('\\f'); break;\n                case 'b': output.append('\\b'); break;\n                case '\\\"': output.append('\\\"'); break;\n                case '\\'': output.append('\\''); break;\n                case '\\\\': output.append('\\\\'); break;\n                case 'u':\n                    i++;\n                    int unicodeValue = 0;\n                    for (int j = 0; j < 4; j++) {\n                        if (i + j >= input.length()) {\n                            throw new IllegalArgumentException(\"Invalid unicode escape sequence in input: \" + input);\n                        }\n                        char hexDigit = input.charAt(i + j);\n                        int hexValue = Character.digit(hexDigit, 16);\n                        if (hexValue == -1) {\n                            throw new IllegalArgumentException(\"Invalid unicode escape sequence in input: \" + input);\n                        }\n                        unicodeValue = (unicodeValue << 4) | hexValue;\n                    }\n                    output.append((char) unicodeValue);\n                    i += 4;\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid escape sequence in input: \" + input);\n            }\n        } else {\n            output.append(ch);\n            i++;\n        }\n    }\n    return output.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..1b57a753 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,52 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String input) {\n+    StringBuilder output = new StringBuilder();\n+    for (int i = 0; i < input.length(); ) {\n+        char ch = input.charAt(i);\n+        if (ch == '\\\\') {\n+            i++;\n+            if (i >= input.length()) {\n+                throw new IllegalArgumentException(\"Invalid escape sequence at end of input: \" + input);\n+            }\n+            ch = input.charAt(i);\n+            switch (ch) {\n+                case 'n': output.append('\\n'); break;\n+                case 'r': output.append('\\r'); break;\n+                case 't': output.append('\\t'); break;\n+                case 'f': output.append('\\f'); break;\n+                case 'b': output.append('\\b'); break;\n+                case '\\\"': output.append('\\\"'); break;\n+                case '\\'': output.append('\\''); break;\n+                case '\\\\': output.append('\\\\'); break;\n+                case 'u':\n+                    i++;\n+                    int unicodeValue = 0;\n+                    for (int j = 0; j < 4; j++) {\n+                        if (i + j >= input.length()) {\n+                            throw new IllegalArgumentException(\"Invalid unicode escape sequence in input: \" + input);\n+                        }\n+                        char hexDigit = input.charAt(i + j);\n+                        int hexValue = Character.digit(hexDigit, 16);\n+                        if (hexValue == -1) {\n+                            throw new IllegalArgumentException(\"Invalid unicode escape sequence in input: \" + input);\n+                        }\n+                        unicodeValue = (unicodeValue << 4) | hexValue;\n+                    }\n+                    output.append((char) unicodeValue);\n+                    i += 4;\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"Invalid escape sequence in input: \" + input);\n+            }\n+        } else {\n+            output.append(ch);\n+            i++;\n+        }\n+    }\n+    return output.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}