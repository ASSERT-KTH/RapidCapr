{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    return elementPairs.stream()\n            .reduce(new ArrayList<>(), (pairList, obj) -> {\n                if (pairList.size() >= 2 && pairList.get(0) instanceof Separator) {\n                    Separator sep = (Separator) pairList.get(0);\n                    pairList.remove(0);\n                    PeriodFormatter innerFormatter = toFormatter(pairList, notPrinter, notParser);\n                    sep = sep.finish(innerFormatter.getPrinter(), innerFormatter.getParser());\n                    return new ArrayList<>(Arrays.asList(sep, innerFormatter));\n                } else {\n                    pairList.add(obj);\n                    return pairList;\n                }\n            })\n            .stream()\n            .map(obj -> (Pair) obj)\n            .collect(Collectors.collectingAndThen(Collectors.toList(), elementPairsList -> {\n                Object[] comp = createComposite(elementPairsList);\n                if (notPrinter) {\n                    return new PeriodFormatter(null, (PeriodParser) comp[1]);\n                } else if (notParser) {\n                    return new PeriodFormatter((PeriodPrinter) comp[0], null);\n                } else {\n                    return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n                }\n            }));\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..fd928475 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,33 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n-        }\n-    }\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    return elementPairs.stream()\n+            .reduce(new ArrayList<>(), (pairList, obj) -> {\n+                if (pairList.size() >= 2 && pairList.get(0) instanceof Separator) {\n+                    Separator sep = (Separator) pairList.get(0);\n+                    pairList.remove(0);\n+                    PeriodFormatter innerFormatter = toFormatter(pairList, notPrinter, notParser);\n+                    sep = sep.finish(innerFormatter.getPrinter(), innerFormatter.getParser());\n+                    return new ArrayList<>(Arrays.asList(sep, innerFormatter));\n+                } else {\n+                    pairList.add(obj);\n+                    return pairList;\n+                }\n+            })\n+            .stream()\n+            .map(obj -> (Pair) obj)\n+            .collect(Collectors.collectingAndThen(Collectors.toList(), elementPairsList -> {\n+                Object[] comp = createComposite(elementPairsList);\n+                if (notPrinter) {\n+                    return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+                } else if (notParser) {\n+                    return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+                } else {\n+                    return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+                }\n+            }));\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}