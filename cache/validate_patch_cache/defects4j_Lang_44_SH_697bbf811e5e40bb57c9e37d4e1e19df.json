{
    "patch": "if (val == null) {\n    return null;\n}\nif (val.length() == 0) {\n    throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n}\nchar firstChar = val.charAt(0);\nif (val.length() > 1 && firstChar == '0' && Character.toLowerCase(val.charAt(1)) == 'x') {\n    return createInteger(val);\n}\nif (firstChar == '+' || firstChar == '-') {\n    if (val.length() == 1) {\n        throw new NumberFormatException(val + \" is not a valid number.\");\n    }\n    if (val.charAt(1) == '+' || val.charAt(1) == '-') {\n        return null;\n    }\n}\nif (!Character.isDigit(val.charAt(val.length() - 1))) {\n    char lastChar = val.charAt(val.length() - 1);\n    if (lastChar != 'f' && lastChar != 'd' && lastChar != 'F' && lastChar != 'D') {\n        throw new NumberFormatException(val + \" is not a valid number.\");\n    }\n}\nif (val.toLowerCase().contains(\"l\") || val.toLowerCase().contains(\"f\") || val.toLowerCase().contains(\"d\")) {\n    throw new NumberFormatException(val + \" is not a valid number.\");\n}\ntry {\n    return createInteger(val);\n} catch (NumberFormatException nfe) {\n    try {\n        return createLong(val);\n    } catch (NumberFormatException nfe1) {\n        try {\n            return createFloat(val);\n        } catch (NumberFormatException nfe2) {\n            try {\n                return createDouble(val);\n            } catch (NumberFormatException nfe3) {\n                return createBigDecimal(val);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..795cc146 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,50 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+if (val == null) {\n+    return null;\n+}\n+if (val.length() == 0) {\n+    throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n+}\n+char firstChar = val.charAt(0);\n+if (val.length() > 1 && firstChar == '0' && Character.toLowerCase(val.charAt(1)) == 'x') {\n+    return createInteger(val);\n+}\n+if (firstChar == '+' || firstChar == '-') {\n+    if (val.length() == 1) {\n+        throw new NumberFormatException(val + \" is not a valid number.\");\n+    }\n+    if (val.charAt(1) == '+' || val.charAt(1) == '-') {\n+        return null;\n+    }\n+}\n+if (!Character.isDigit(val.charAt(val.length() - 1))) {\n+    char lastChar = val.charAt(val.length() - 1);\n+    if (lastChar != 'f' && lastChar != 'd' && lastChar != 'F' && lastChar != 'D') {\n+        throw new NumberFormatException(val + \" is not a valid number.\");\n+    }\n+}\n+if (val.toLowerCase().contains(\"l\") || val.toLowerCase().contains(\"f\") || val.toLowerCase().contains(\"d\")) {\n+    throw new NumberFormatException(val + \" is not a valid number.\");\n+}\n+try {\n+    return createInteger(val);\n+} catch (NumberFormatException nfe) {\n+    try {\n+        return createLong(val);\n+    } catch (NumberFormatException nfe1) {\n+        try {\n+            return createFloat(val);\n+        } catch (NumberFormatException nfe2) {\n+            try {\n+                return createDouble(val);\n+            } catch (NumberFormatException nfe3) {\n+                return createBigDecimal(val);\n+            }\n+        }\n+    }\n+}\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}