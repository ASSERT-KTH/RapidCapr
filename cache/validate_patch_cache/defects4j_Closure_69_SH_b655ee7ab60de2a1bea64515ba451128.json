{
    "patch": "if (functionType.isConstructor() && !functionType.isNativeObjectType() &&\n    (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n      report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n, JSTypeNative.NO_TYPE);\n    } else {\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    }\n    return;\n}\n\n// Functions with explicit 'this' types must be called in a GETPROP or GETELEM.\nif (functionType.getTypeOfThis() != null) {\n  Node parent = child.getParent();\n  ParentNodeType type = getNodeParentType(parent);\n  if (type == ParentNodeType.GET_PROP || type == ParentNodeType.GET_ELEM) {\n    visitParameterList(t, n, functionType);\n    ensureTyped(t, n, functionType.getReturnType());\n  } else {\n    report(t, n, FUNCTION_MASKS_VARIABLE, childType.toString());\n    ensureTyped(t, n, JSTypeNative.NO_TYPE);\n  }\n} else {\n  visitParameterList(t, n, functionType);\n  ensureTyped(t, n, functionType.getReturnType());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..6a94c667 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,32 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (functionType.isConstructor() && !functionType.isNativeObjectType() &&\n+    (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n+      report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+      ensureTyped(t, n, JSTypeNative.NO_TYPE);\n+    } else {\n+      visitParameterList(t, n, functionType);\n+      ensureTyped(t, n, functionType.getReturnType());\n+    }\n+    return;\n+}\n+\n+// Functions with explicit 'this' types must be called in a GETPROP or GETELEM.\n+if (functionType.getTypeOfThis() != null) {\n+  Node parent = child.getParent();\n+  ParentNodeType type = getNodeParentType(parent);\n+  if (type == ParentNodeType.GET_PROP || type == ParentNodeType.GET_ELEM) {\n+    visitParameterList(t, n, functionType);\n+    ensureTyped(t, n, functionType.getReturnType());\n+  } else {\n+    report(t, n, FUNCTION_MASKS_VARIABLE, childType.toString());\n+    ensureTyped(t, n, JSTypeNative.NO_TYPE);\n+  }\n+} else {\n+  visitParameterList(t, n, functionType);\n+  ensureTyped(t, n, functionType.getReturnType());\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}