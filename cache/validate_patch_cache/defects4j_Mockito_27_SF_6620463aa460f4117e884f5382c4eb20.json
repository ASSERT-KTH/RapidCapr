{
    "patch": "    public <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        if(mock instanceof Proxy){\n            ((Factory) mock).setCallback(0, newFilter);\n        }else if(mock instanceof Decorator){\n            ((Enhancer) mock).setCallback(newFilter);\n        }else if (mock instanceof TypeMock){\n            TypeMock typeMock = (TypeMock) mock;\n            typeMock.setTypeMockCallback(newFilter);\n        }else {\n            throw new IllegalArgumentException(\"Unhandled mock type: \" + mock.getClass().getSimpleName());\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..eb4a4b94b 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,22 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+    public <T> void resetMock(T mock) {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        if(mock instanceof Proxy){\n+            ((Factory) mock).setCallback(0, newFilter);\n+        }else if(mock instanceof Decorator){\n+            ((Enhancer) mock).setCallback(newFilter);\n+        }else if (mock instanceof TypeMock){\n+            TypeMock typeMock = (TypeMock) mock;\n+            typeMock.setTypeMockCallback(newFilter);\n+        }else {\n+            throw new IllegalArgumentException(\"Unhandled mock type: \" + mock.getClass().getSimpleName());\n+        }\n+    }\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}