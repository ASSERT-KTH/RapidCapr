{
    "patch": "boolean isAssignedOnceInLifetime() {\n    Reference ref = getOneAndOnlyAssignment();\n    if (ref == null) {\n        return false;\n    }\n\n    Set<BasicBlock> visitedBlocks = new HashSet<>();\n    visitedBlocks.add(ref.getBasicBlock());\n    while (true) {\n        BasicBlock block = ref.getBasicBlock();\n        if (block.isFunction()) { // possibly assigned once\n            return isInitializingAssignmentAt(1);\n        }\n\n        // Check if the assignment happens outside the current function/block scope.\n        int refIndex = references.indexOf(ref);\n        if (refIndex == 0 && !isInitializingDeclarationAt(0)) { // assigned before any declaration or initialization.\n            return false;\n        }\n        for (int i = refIndex - 1; i >= 0; i--) {\n            Reference candidateRef = references.get(i);\n            // If we run into any declaration, then the variable is assigned once.\n            if (candidateRef.isDeclaration() || candidateRef.isVarInitialization()) {\n                return true;\n            }\n        }\n\n        for (BasicBlock predBlock : block.getPredecessors()) {\n            // No loops exist, so keep searching predecessors.\n            if (!visitedBlocks.contains(predBlock)) {\n                visitedBlocks.add(predBlock);\n                for (int i = predBlock.getStatements().size() - 1; i >= 0; i--) {\n                    Node node = predBlock.getStatements().get(i);\n                    if (node instanceof Jump) {\n                        ref = ((Jump) node).getTarget().getLastReference();\n                        break;\n                    }\n                }\n                break;\n            }\n            // loops are exist, variable is not assigned once.\n            return false;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..1a5370ef 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -371,71 +371,51 @@ class ReferenceCollectingCallback implements ScopedCallback,\n      * follow a variable declaration that itself does not initialize the\n      * variable.\n      */\n-    private boolean isInitializingAssignmentAt(int index) {\n-      if (index < references.size() && index > 0) {\n-        Reference maybeDecl = references.get(index - 1);\n-        if (maybeDecl.isVarDeclaration()) {\n-          Preconditions.checkState(!maybeDecl.isInitializingDeclaration());\n-          Reference maybeInit = references.get(index);\n-          if (maybeInit.isSimpleAssignmentToName()) {\n-            return true;\n-          }\n-        }\n-      }\n-      return false;\n-    }\n-\n-    /**\n-     * @return The reference that provides the value for the variable at the\n-     * time of the first read, if known, otherwise null.\n-     *\n-     * This is either the variable declaration (\"var a = ...\") or first\n-     * reference following the declaration if it is an assignment.\n-     */\n-    Reference getInitializingReference() {\n-      if (isInitializingDeclarationAt(0)) {\n-        return references.get(0);\n-      } else if (isInitializingAssignmentAt(1)) {\n-        return references.get(1);\n-      }\n-      return null;\n+boolean isAssignedOnceInLifetime() {\n+    Reference ref = getOneAndOnlyAssignment();\n+    if (ref == null) {\n+        return false;\n     }\n \n-    /**\n-     * Constants are allowed to be defined after their first use.\n-     */\n-    Reference getInitializingReferenceForConstants() {\n-      int size = references.size();\n-      for (int i = 0; i < size; i++) {\n-        if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {\n-          return references.get(i);\n+    Set<BasicBlock> visitedBlocks = new HashSet<>();\n+    visitedBlocks.add(ref.getBasicBlock());\n+    while (true) {\n+        BasicBlock block = ref.getBasicBlock();\n+        if (block.isFunction()) { // possibly assigned once\n+            return isInitializingAssignmentAt(1);\n         }\n-      }\n-      return null;\n-    }\n-\n-    /**\n-     * @return Whether the variable is only assigned a value once for its\n-     *     lifetime.\n-     */\n-    boolean isAssignedOnceInLifetime() {\n-      Reference ref = getOneAndOnlyAssignment();\n-      if (ref == null) {\n-        return false;\n-      }\n \n-      // Make sure this assignment is not in a loop.\n-      for (BasicBlock block = ref.getBasicBlock();\n-           block != null; block = block.getParent()) {\n-        if (block.isFunction) {\n-          break;\n-        } else if (block.isLoop) {\n-          return false;\n+        // Check if the assignment happens outside the current function/block scope.\n+        int refIndex = references.indexOf(ref);\n+        if (refIndex == 0 && !isInitializingDeclarationAt(0)) { // assigned before any declaration or initialization.\n+            return false;\n+        }\n+        for (int i = refIndex - 1; i >= 0; i--) {\n+            Reference candidateRef = references.get(i);\n+            // If we run into any declaration, then the variable is assigned once.\n+            if (candidateRef.isDeclaration() || candidateRef.isVarInitialization()) {\n+                return true;\n+            }\n         }\n-      }\n \n-      return true;\n+        for (BasicBlock predBlock : block.getPredecessors()) {\n+            // No loops exist, so keep searching predecessors.\n+            if (!visitedBlocks.contains(predBlock)) {\n+                visitedBlocks.add(predBlock);\n+                for (int i = predBlock.getStatements().size() - 1; i >= 0; i--) {\n+                    Node node = predBlock.getStatements().get(i);\n+                    if (node instanceof Jump) {\n+                        ref = ((Jump) node).getTarget().getLastReference();\n+                        break;\n+                    }\n+                }\n+                break;\n+            }\n+            // loops are exist, variable is not assigned once.\n+            return false;\n+        }\n     }\n+}\n \n     /**\n      * @return The one and only assignment. Returns if there are 0 or 2+",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}