{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    boolean varArgs = false;\n\n    while (arguments.hasNext()) {\n      if (!parameters.hasNext()) {\n        // If there are no parameters left in the list, then this must be a var_args function.\n        varArgs = true;\n        break;\n      }\n      parameter = parameters.next();\n\n      // If the current parameter is a variable argument list, then all the remaining arguments\n      // should satisfy its type.\n      if (parameter.isVarArgs()) {\n        varArgs = true;\n        JSType varArgsType = parameter.getJSType().getElementType();\n        while (arguments.hasNext()) {\n          argument = arguments.next();\n          ordinal++;\n          validator.expectArgumentMatchesParameter(t, argument,\n              getJSType(argument), varArgsType, call, ordinal);\n        }\n        break;\n      }\n\n      // If there are no arguments left in the list for the current parameter, then report the error.\n      // Otherwise, compare the argument and parameter types.\n      if (!arguments.hasNext()) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(ordinal + 1), String.valueOf(functionType.getMinArguments()),\n            (functionType.getMaxArguments() != Integer.MAX_VALUE) ? \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\"\n                : \"\");\n        return;\n      }\n      argument = arguments.next();\n      ordinal++;\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n    if (!varArgs) {\n      // If there are any parameters left and none of them is a variable argument list, then report\n      // the error.\n      if (parameters.hasNext()) {\n        parameter = parameters.next();\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(ordinal + 1), String.valueOf(functionType.getMinArguments()),\n            (functionType.getMaxArguments() != Integer.MAX_VALUE) ? \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\"\n                : \"\");\n        return;\n      }\n\n      // If there are any arguments left and none of the parameters is a variable argument list, then\n      // report the error.\n      if (arguments.hasNext()) {\n        while (arguments.hasNext()) {\n          argument = arguments.next();\n          ordinal++;\n        }\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(ordinal), String.valueOf(functionType.getMinArguments()),\n            (functionType.getMaxArguments() != Integer.MAX_VALUE) ? \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\"\n                : \"\");\n        return;\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..676abefc 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,7 +1396,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n+private void visitParameterList(NodeTraversal t, Node call,\n       FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n@@ -1405,27 +1405,72 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n+    boolean varArgs = false;\n+\n+    while (arguments.hasNext()) {\n+      if (!parameters.hasNext()) {\n+        // If there are no parameters left in the list, then this must be a var_args function.\n+        varArgs = true;\n+        break;\n+      }\n+      parameter = parameters.next();\n+\n+      // If the current parameter is a variable argument list, then all the remaining arguments\n+      // should satisfy its type.\n+      if (parameter.isVarArgs()) {\n+        varArgs = true;\n+        JSType varArgsType = parameter.getJSType().getElementType();\n+        while (arguments.hasNext()) {\n+          argument = arguments.next();\n+          ordinal++;\n+          validator.expectArgumentMatchesParameter(t, argument,\n+              getJSType(argument), varArgsType, call, ordinal);\n+        }\n+        break;\n+      }\n+\n+      // If there are no arguments left in the list for the current parameter, then report the error.\n+      // Otherwise, compare the argument and parameter types.\n+      if (!arguments.hasNext()) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(ordinal + 1), String.valueOf(functionType.getMinArguments()),\n+            (functionType.getMaxArguments() != Integer.MAX_VALUE) ? \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\"\n+                : \"\");\n+        return;\n+      }\n       argument = arguments.next();\n       ordinal++;\n-\n       validator.expectArgumentMatchesParameter(t, argument,\n           getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n+    if (!varArgs) {\n+      // If there are any parameters left and none of them is a variable argument list, then report\n+      // the error.\n+      if (parameters.hasNext()) {\n+        parameter = parameters.next();\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(ordinal + 1), String.valueOf(functionType.getMinArguments()),\n+            (functionType.getMaxArguments() != Integer.MAX_VALUE) ? \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\"\n+                : \"\");\n+        return;\n+      }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+      // If there are any arguments left and none of the parameters is a variable argument list, then\n+      // report the error.\n+      if (arguments.hasNext()) {\n+        while (arguments.hasNext()) {\n+          argument = arguments.next();\n+          ordinal++;\n+        }\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(ordinal), String.valueOf(functionType.getMinArguments()),\n+            (functionType.getMaxArguments() != Integer.MAX_VALUE) ? \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\"\n+                : \"\");\n+        return;\n+      }\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}