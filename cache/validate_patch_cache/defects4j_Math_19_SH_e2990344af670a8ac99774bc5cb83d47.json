{
    "patch": "            if (hasInfiniteBounds) {\n                // If there is at least one finite bound, none can be infinite,\n                // because mixed cases are not supported by the current code.\n                throw new MathUnsupportedOperationException();\n            } else {\n                // Convert API to internal handling of boundaries.\n                boundaries = new double[2][];\n                boundaries[0] = lB;\n                boundaries[1] = uB;\n\n                // Abort early if the normalization will overflow (cf. \"encode\" method).\n                final double[] d = new double[init.length];\n                for (int i = 0; i < init.length; i++) {\n                    d[i] = FastMath.max(FastMath.abs(lB[i]), FastMath.abs(uB[i]));\n                }\n                final double n = LegacyUtils.normalizeArray(init, d, getL2Norm());\n                if (n >= FastMath.sqrt(Double.MAX_VALUE)) {\n                    throw new MathIllegalStateException();\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..d0ce296f7 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,26 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+            if (hasInfiniteBounds) {\n+                // If there is at least one finite bound, none can be infinite,\n+                // because mixed cases are not supported by the current code.\n+                throw new MathUnsupportedOperationException();\n+            } else {\n+                // Convert API to internal handling of boundaries.\n+                boundaries = new double[2][];\n+                boundaries[0] = lB;\n+                boundaries[1] = uB;\n+\n+                // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                final double[] d = new double[init.length];\n+                for (int i = 0; i < init.length; i++) {\n+                    d[i] = FastMath.max(FastMath.abs(lB[i]), FastMath.abs(uB[i]));\n+                }\n+                final double n = LegacyUtils.normalizeArray(init, d, getL2Norm());\n+                if (n >= FastMath.sqrt(Double.MAX_VALUE)) {\n+                    throw new MathIllegalStateException();\n+                }\n+            }\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}