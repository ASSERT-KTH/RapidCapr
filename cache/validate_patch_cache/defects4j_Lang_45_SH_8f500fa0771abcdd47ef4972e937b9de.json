{
    "patch": "        // initial parameter checks\n        if (str == null) {\n            return null;\n        }\n        if (str.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n        int strLength = str.length();\n\n        if (lower >= strLength) {\n            return appendToEnd != null ? appendToEnd : str;\n        }\n\n        if (upper == -1 || upper > strLength) {\n            upper = strLength;\n        }\n\n        if (lower < 0) {\n            lower = 0;\n        }\n\n        if (upper < 0) {\n            return StringUtils.EMPTY;\n        }\n\n        if (upper < lower) {\n            int tmp = upper;\n            upper = lower;\n            lower = tmp;\n        }\n\n        StringBuffer result = new StringBuffer();\n        int index = StringUtils.indexOf(str, \" \", lower);\n\n        if (index == -1) {\n            result.append(str.substring(0, upper));\n            if (upper != strLength) {\n                result.append(StringUtils.defaultString(appendToEnd));\n            }\n        } else if (index > upper) {\n            result.append(str.substring(0, upper));\n            result.append(StringUtils.defaultString(appendToEnd));\n        } else {\n            result.append(str.substring(0, index));\n            result.append(StringUtils.defaultString(appendToEnd));\n        }\n        \n        return result.toString();",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/WordUtils.java b/src/java/org/apache/commons/lang/WordUtils.java\nindex 42bd883e..97cdebd3 100644\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n@@ -613,6 +613,55 @@ public class WordUtils {\n \n         // if the lower value is greater than the length of the string,\n         // set to the length of the string\n+        // initial parameter checks\n+        if (str == null) {\n+            return null;\n+        }\n+        if (str.length() == 0) {\n+            return StringUtils.EMPTY;\n+        }\n+\n+        int strLength = str.length();\n+\n+        if (lower >= strLength) {\n+            return appendToEnd != null ? appendToEnd : str;\n+        }\n+\n+        if (upper == -1 || upper > strLength) {\n+            upper = strLength;\n+        }\n+\n+        if (lower < 0) {\n+            lower = 0;\n+        }\n+\n+        if (upper < 0) {\n+            return StringUtils.EMPTY;\n+        }\n+\n+        if (upper < lower) {\n+            int tmp = upper;\n+            upper = lower;\n+            lower = tmp;\n+        }\n+\n+        StringBuffer result = new StringBuffer();\n+        int index = StringUtils.indexOf(str, \" \", lower);\n+\n+        if (index == -1) {\n+            result.append(str.substring(0, upper));\n+            if (upper != strLength) {\n+                result.append(StringUtils.defaultString(appendToEnd));\n+            }\n+        } else if (index > upper) {\n+            result.append(str.substring(0, upper));\n+            result.append(StringUtils.defaultString(appendToEnd));\n+        } else {\n+            result.append(str.substring(0, index));\n+            result.append(StringUtils.defaultString(appendToEnd));\n+        }\n+        \n+        return result.toString();\n         // if the upper value is -1 (i.e. no limit) or is greater\n         // than the length of the string, set to the length of the string\n         if (upper == -1 || upper > str.length()) {",
    "result_reason": "error: variable result is already defined in method abbreviate(String,int,int,String)",
    "test_result": "ERROR"
}