{
    "patch": "/**\n * Tries to solve for a zero root.\n *\n * @param min Lower bound for the interval.\n * @param max Upper bound for the interval.\n * @return the value where the function is zero.\n * @throws FunctionEvaluationException if an error occurs evaluating the\n * function.\n * @throws MaxIterationsExceededException if the maximum number of iterations\n * is exceeded.\n * @throws IllegalArgumentException if there is not a {@code sign} difference\n * between the values of the function in the two search bounds.\n * @throws NullArgumentException if any of f, df, or d2f is {@code null}.\n */\npublic double solve(double min, double max) throws MaxIterationsExceededException,\n        FunctionEvaluationException {\n    final double ret;\n    final double yMin = f.value(min);\n    final double yMax = f.value(max);\n\n    // Verify bracketing\n    if (yMin * yMax >= 0) {\n        // check if either value is close to a zero\n        if (abs(yMin) <= functionValueAccuracy) {\n            setResult(min, yMin, 0);\n            ret = min;\n        } else if (abs(yMax) <= functionValueAccuracy) {\n            setResult(max, yMax, 0);\n            ret = max;\n        } else {\n            // neither value is close to zero and min and max do not bracket root.\n            throw new IllegalArgumentException(String.format(\n                    \"Function values at endpoints do not have different signs: \"\n                    + \"f(%.16g) = %.16g, f(%.16g) = %.16g\", min, yMin, max, yMax));\n        }\n    } else {\n        // solve using only the first endpoint as initial guess\n        ret = solve(min, yMin, max, yMax, min, yMin);\n        // either min or max is a root\n    }\n\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..83fadea8d 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,49 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n+/**\n+ * Tries to solve for a zero root.\n+ *\n+ * @param min Lower bound for the interval.\n+ * @param max Upper bound for the interval.\n+ * @return the value where the function is zero.\n+ * @throws FunctionEvaluationException if an error occurs evaluating the\n+ * function.\n+ * @throws MaxIterationsExceededException if the maximum number of iterations\n+ * is exceeded.\n+ * @throws IllegalArgumentException if there is not a {@code sign} difference\n+ * between the values of the function in the two search bounds.\n+ * @throws NullArgumentException if any of f, df, or d2f is {@code null}.\n+ */\n+public double solve(double min, double max) throws MaxIterationsExceededException,\n         FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n-        \n-        // Verify bracketing\n-        double sign = yMin * yMax;\n-        if (sign >= 0) {\n-            // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+    final double ret;\n+    final double yMin = f.value(min);\n+    final double yMax = f.value(max);\n+\n+    // Verify bracketing\n+    if (yMin * yMax >= 0) {\n+        // check if either value is close to a zero\n+        if (abs(yMin) <= functionValueAccuracy) {\n+            setResult(min, yMin, 0);\n+            ret = min;\n+        } else if (abs(yMax) <= functionValueAccuracy) {\n+            setResult(max, yMax, 0);\n+            ret = max;\n         } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n+            // neither value is close to zero and min and max do not bracket root.\n+            throw new IllegalArgumentException(String.format(\n+                    \"Function values at endpoints do not have different signs: \"\n+                    + \"f(%.16g) = %.16g, f(%.16g) = %.16g\", min, yMin, max, yMax));\n         }\n-\n-        return ret;\n+    } else {\n+        // solve using only the first endpoint as initial guess\n+        ret = solve(min, yMin, max, yMax, min, yMin);\n+        // either min or max is a root\n     }\n+\n+    return ret;\n+}\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}