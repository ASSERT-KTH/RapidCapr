{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size == 1) {\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    } else if (elementPairs.get(size - 1) instanceof Separator) {\n        Separator lastSeparator = (Separator) elementPairs.get(size - 1);\n        List<Object> subList = elementPairs.subList(0, size - 1);\n        PeriodFormatter f = toFormatter(subList, notPrinter, notParser);\n        Object[] comp = createComposite(Collections.singletonList(lastSeparator));\n        PeriodFormatter g = new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        lastSeparator = lastSeparator.finish(f.getPrinter(), g.getParser());\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) lastSeparator);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) lastSeparator, null);\n        } else {\n            return new PeriodFormatter(lastSeparator, lastSeparator);\n        }\n    } else {\n        Separator defaultSeparator = getDefaultSeparator();\n        int endIndex = elementPairs.size();\n        for (int i = endIndex - 1; i > 0; i--) {\n            if (elementPairs.get(i) instanceof Separator) {\n                endIndex = i;\n                break;\n            }\n        }\n        if (endIndex == elementPairs.size()) {\n            endIndex -= 1;\n        }\n        PeriodFormatter f1 = toFormatter(elementPairs.subList(0, endIndex + 1), notPrinter, notParser);\n        PeriodFormatter f2 = toFormatter(elementPairs.subList(endIndex + 1, elementPairs.size()), notPrinter, notParser);\n        if (notPrinter) {\n            return new PeriodFormatter(null, f2.getParser());\n        } else if (notParser) {\n            return new PeriodFormatter(f1.getPrinter(), null);\n        } else {\n            return new PeriodFormatter(new CompositePrinter(f1.getPrinter(), defaultSeparator.getPrinter(), f2.getPrinter()), new CompositeParser(f1.getParser(), defaultSeparator.getParser(), f2.getParser()));\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..97e50a20 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,17 +791,12 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size == 1) {\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n@@ -810,7 +805,43 @@ public class PeriodFormatterBuilder {\n         } else {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n+    } else if (elementPairs.get(size - 1) instanceof Separator) {\n+        Separator lastSeparator = (Separator) elementPairs.get(size - 1);\n+        List<Object> subList = elementPairs.subList(0, size - 1);\n+        PeriodFormatter f = toFormatter(subList, notPrinter, notParser);\n+        Object[] comp = createComposite(Collections.singletonList(lastSeparator));\n+        PeriodFormatter g = new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+        lastSeparator = lastSeparator.finish(f.getPrinter(), g.getParser());\n+        if (notPrinter) {\n+            return new PeriodFormatter(null, (PeriodParser) lastSeparator);\n+        } else if (notParser) {\n+            return new PeriodFormatter((PeriodPrinter) lastSeparator, null);\n+        } else {\n+            return new PeriodFormatter(lastSeparator, lastSeparator);\n+        }\n+    } else {\n+        Separator defaultSeparator = getDefaultSeparator();\n+        int endIndex = elementPairs.size();\n+        for (int i = endIndex - 1; i > 0; i--) {\n+            if (elementPairs.get(i) instanceof Separator) {\n+                endIndex = i;\n+                break;\n+            }\n+        }\n+        if (endIndex == elementPairs.size()) {\n+            endIndex -= 1;\n+        }\n+        PeriodFormatter f1 = toFormatter(elementPairs.subList(0, endIndex + 1), notPrinter, notParser);\n+        PeriodFormatter f2 = toFormatter(elementPairs.subList(endIndex + 1, elementPairs.size()), notPrinter, notParser);\n+        if (notPrinter) {\n+            return new PeriodFormatter(null, f2.getParser());\n+        } else if (notParser) {\n+            return new PeriodFormatter(f1.getPrinter(), null);\n+        } else {\n+            return new PeriodFormatter(new CompositePrinter(f1.getPrinter(), defaultSeparator.getPrinter(), f2.getPrinter()), new CompositeParser(f1.getParser(), defaultSeparator.getParser(), f2.getParser()));\n+        }\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: method createComposite in class PeriodFormatterBuilder cannot be applied to given types;",
    "test_result": "ERROR"
}