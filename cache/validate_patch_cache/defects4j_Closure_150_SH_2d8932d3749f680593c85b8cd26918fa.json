{
    "patch": "      attachLiteralTypes(n);\n\n      if (n.getType() == Token.FUNCTION) {\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n      } else if (n.getType() == Token.CATCH) {\n          defineCatch(n, parent);\n      } else if (n.getType() == Token.VAR) {\n          defineVar(n, parent);\n      }\n\n      switch (n.getType()) {\n        case Token.LP:\n          if (parent == scope.getRootNode()) {\n            handleFunctionInputs(parent);\n          }\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..a7e5da44 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1449,18 +1449,23 @@ final class TypedScopeCreator implements ScopeCreator {\n       }\n \n       attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n+\n+      if (n.getType() == Token.FUNCTION) {\n           if (parent.getType() == Token.NAME) {\n             return;\n           }\n           defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n+      } else if (n.getType() == Token.CATCH) {\n           defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n+      } else if (n.getType() == Token.VAR) {\n           defineVar(n, parent);\n+      }\n+\n+      switch (n.getType()) {\n+        case Token.LP:\n+          if (parent == scope.getRootNode()) {\n+            handleFunctionInputs(parent);\n+          }\n           break;\n       }\n     }",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}