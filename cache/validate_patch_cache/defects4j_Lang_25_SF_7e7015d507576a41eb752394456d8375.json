{
    "patch": "public static byte[] escape(byte[] bytes) {\n    ByteArrayOutputStream out = new ByteArrayOutputStream(bytes.length);\n    for (int i = 0; i < bytes.length; i++) {\n        int b = bytes[i] & 0xFF;\n        if (b == 10) { // line feed\n            out.write('\\\\');\n            out.write('n');\n        } else if (b == 13) { // carriage return\n            out.write('\\\\');\n            out.write('r');\n        } else if (b == 9) { // tab\n            out.write('\\\\');\n            out.write('t');\n        } else if (b == '\\\\') {\n            out.write('\\\\');\n            out.write('\\\\');\n        } else if (b == '\\\"') {\n            out.write('\\\\');\n            out.write('\\\"');\n        } else if (b >= 32 && b < 127) { // printable ASCII\n            out.write(bytes[i]);\n        } else {\n            out.write('=');\n            out.write(Utils.byte2hex(bytes[i]));\n        }\n    }\n    return out.toByteArray();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..dbc77713 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,34 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static byte[] escape(byte[] bytes) {\n+    ByteArrayOutputStream out = new ByteArrayOutputStream(bytes.length);\n+    for (int i = 0; i < bytes.length; i++) {\n+        int b = bytes[i] & 0xFF;\n+        if (b == 10) { // line feed\n+            out.write('\\\\');\n+            out.write('n');\n+        } else if (b == 13) { // carriage return\n+            out.write('\\\\');\n+            out.write('r');\n+        } else if (b == 9) { // tab\n+            out.write('\\\\');\n+            out.write('t');\n+        } else if (b == '\\\\') {\n+            out.write('\\\\');\n+            out.write('\\\\');\n+        } else if (b == '\\\"') {\n+            out.write('\\\\');\n+            out.write('\\\"');\n+        } else if (b >= 32 && b < 127) { // printable ASCII\n+            out.write(bytes[i]);\n+        } else {\n+            out.write('=');\n+            out.write(Utils.byte2hex(bytes[i]));\n+        }\n+    }\n+    return out.toByteArray();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}