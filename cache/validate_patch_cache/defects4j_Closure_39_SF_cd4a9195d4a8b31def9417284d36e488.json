{
    "patch": "    return !isRegexpType();\n  }\n\n  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      Map<String,String> properties = new TreeMap<>();\n      for (String property : propertyNames) {\n        String typeString = getPropertyType(property).toStringHelper(forAnnotations);\n        if (typeString.equals(\"{...}\")) {\n            prettyPrint = true;\n            return \"{...}\";\n        }\n        properties.put(property, typeString);\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      boolean notFirst = false;\n      for (Map.Entry<String, String> entry : properties.entrySet()) {\n        if (notFirst) {\n          sb.append(\", \");\n        }\n        sb.append(entry.getKey());\n        sb.append(\": \");\n        sb.append(entry.getValue());\n        notFirst = true;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..5ab407df 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,8 +345,7 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n+    return !isRegexpType();\n   }\n \n   @Override\n@@ -366,34 +365,28 @@ class PrototypeObjectType extends ObjectType {\n         propertyNames.addAll(current.getOwnPropertyNames());\n       }\n \n+      Map<String,String> properties = new TreeMap<>();\n+      for (String property : propertyNames) {\n+        String typeString = getPropertyType(property).toStringHelper(forAnnotations);\n+        if (typeString.equals(\"{...}\")) {\n+            prettyPrint = true;\n+            return \"{...}\";\n+        }\n+        properties.put(property, typeString);\n+      }\n+\n       StringBuilder sb = new StringBuilder();\n       sb.append(\"{\");\n \n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n+      boolean notFirst = false;\n+      for (Map.Entry<String, String> entry : properties.entrySet()) {\n+        if (notFirst) {\n           sb.append(\", \");\n         }\n-\n-        sb.append(property);\n+        sb.append(entry.getKey());\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n-      }\n-\n-      sb.append(\"}\");\n-\n-      prettyPrint = true;\n-      return sb.toString();\n-    } else {\n-      return \"{...}\";\n-    }\n-  }\n+        sb.append(entry.getValue());\n+        notFirst = true;\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}