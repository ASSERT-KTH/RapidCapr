{
    "patch": "public void testGetprop4() {\n    Properties props = new Properties();\n    props.setProperty(\"key\", \"value\");\n    props.setProperty(\"another_key\", \"another_value\");\n\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    props.list(new PrintStream(out));\n    assertTrue(\"Expected key=value\", out.toString().contains(\"key=value\"));\n    assertTrue(\"Expected another_key=another_value\", out.toString().contains(\"another_key=another_value\"));\n\n    String[] warnings = {\"warning1\", \"warning2\", \"warning3\"};\n\n    try {\n        int result = Integer.parseInt(\"not_an_integer\");\n        fail(\"Expected a NumberFormatException\");\n    } catch(NumberFormatException e) {\n        assertTrue(\"Expected a warning\", warnings.length > 0);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..8e182454 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public void testGetprop4() {\n+    Properties props = new Properties();\n+    props.setProperty(\"key\", \"value\");\n+    props.setProperty(\"another_key\", \"another_value\");\n+\n+    ByteArrayOutputStream out = new ByteArrayOutputStream();\n+    props.list(new PrintStream(out));\n+    assertTrue(\"Expected key=value\", out.toString().contains(\"key=value\"));\n+    assertTrue(\"Expected another_key=another_value\", out.toString().contains(\"another_key=another_value\"));\n+\n+    String[] warnings = {\"warning1\", \"warning2\", \"warning3\"};\n+\n+    try {\n+        int result = Integer.parseInt(\"not_an_integer\");\n+        fail(\"Expected a NumberFormatException\");\n+    } catch(NumberFormatException e) {\n+        assertTrue(\"Expected a warning\", warnings.length > 0);\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}