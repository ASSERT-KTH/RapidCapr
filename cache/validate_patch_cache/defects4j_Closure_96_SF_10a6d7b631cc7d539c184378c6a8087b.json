{
    "patch": "  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    boolean isVarArgs = functionType.isVarArgs();\n\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      ordinal++;\n\n      if (!parameters.hasNext()) {\n        if (isVarArgs) {\n          break;\n        } else {\n          report(t, argument, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n                  \" and no more than \" + (maxArgs - numArgs) + \" argument(s)\" : \"\");\n          return;\n        }\n      }\n\n      parameter = parameters.next();\n      if (!parameter.getType().isAssignableTo(argument.getJSType())) {\n        String jsName = validator.getReadableJSTypeName(call.getFirstChild(), false);\n        report(\n            t, argument,\n            WRONG_ARGUMENT_TYPE,\n            jsName,\n            String.valueOf(ordinal),\n            parameter.getType().toString(),\n            argument.getJSType() == null ? \"<unknown>\" : argument.getJSType().toString());\n        return;\n      }\n    }\n\n    // Check if the number of arguments is correct\n    if (numArgs < minArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(numArgs), String.valueOf(minArgs),\n          \" and at least \" + (minArgs - numArgs) + \" more argument(s)\");\n      return;\n    }\n\n    // Check if the number of arguments is within the allowed range\n    if (!isVarArgs && !parameters.hasNext()) {\n      if (arguments.hasNext() || numArgs > maxArgs) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs), String.valueOf(minArgs),\n            maxArgs != Integer.MAX_VALUE ? \" and no more than \" + (maxArgs - numArgs) +\n                \" argument(s)\" : \"\");\n        return;\n      }\n    } else {\n      int argsBeyondMin = numArgs - minArgs;\n      if (argsBeyondMin > 0 && !isVarArgs) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs), String.valueOf(minArgs),\n            \" and no more than \" + (argsBeyondMin) + \" argument(s)\"\n                + (argsBeyondMin < (maxArgs - minArgs) ? \" beyond the minimum\" : \"\"));\n        return;\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..c6d014e7 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1405,27 +1405,72 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n \n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n+    boolean isVarArgs = functionType.isVarArgs();\n+\n+    while (arguments.hasNext()) {\n+      argument = arguments.next();\n+      ordinal++;\n+\n+      if (!parameters.hasNext()) {\n+        if (isVarArgs) {\n+          break;\n+        } else {\n+          report(t, argument, WRONG_ARGUMENT_COUNT,\n               validator.getReadableJSTypeName(call.getFirstChild(), false),\n               String.valueOf(numArgs), String.valueOf(minArgs),\n               maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+                  \" and no more than \" + (maxArgs - numArgs) + \" argument(s)\" : \"\");\n+          return;\n+        }\n+      }\n+\n+      parameter = parameters.next();\n+      if (!parameter.getType().isAssignableTo(argument.getJSType())) {\n+        String jsName = validator.getReadableJSTypeName(call.getFirstChild(), false);\n+        report(\n+            t, argument,\n+            WRONG_ARGUMENT_TYPE,\n+            jsName,\n+            String.valueOf(ordinal),\n+            parameter.getType().toString(),\n+            argument.getJSType() == null ? \"<unknown>\" : argument.getJSType().toString());\n+        return;\n+      }\n+    }\n+\n+    // Check if the number of arguments is correct\n+    if (numArgs < minArgs) {\n+      report(t, call, WRONG_ARGUMENT_COUNT,\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(numArgs), String.valueOf(minArgs),\n+          \" and at least \" + (minArgs - numArgs) + \" more argument(s)\");\n+      return;\n+    }\n+\n+    // Check if the number of arguments is within the allowed range\n+    if (!isVarArgs && !parameters.hasNext()) {\n+      if (arguments.hasNext() || numArgs > maxArgs) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(numArgs), String.valueOf(minArgs),\n+            maxArgs != Integer.MAX_VALUE ? \" and no more than \" + (maxArgs - numArgs) +\n+                \" argument(s)\" : \"\");\n+        return;\n+      }\n+    } else {\n+      int argsBeyondMin = numArgs - minArgs;\n+      if (argsBeyondMin > 0 && !isVarArgs) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(numArgs), String.valueOf(minArgs),\n+            \" and no more than \" + (argsBeyondMin) + \" argument(s)\"\n+                + (argsBeyondMin < (maxArgs - minArgs) ? \" beyond the minimum\" : \"\"));\n+        return;\n+      }\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}