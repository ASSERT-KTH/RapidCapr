{
    "patch": "for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n    Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n    if (candidate != null) {\n        try {\n            field.setAccessible(true);\n            field.set(fieldInstance, candidate);\n            if (!ignoreSetters) {\n                for (Method setter : settersOf(field)) {\n                    Object supportedInstance = mockCandidateFilter.filterCandidate(mocks, setter.getParameterTypes()[0]).thenInject();\n                    if (supportedInstance != null) {\n                        invokeMethod(setter, fieldInstance, supportedInstance);\n                        mocks.remove(supportedInstance);\n                    }\n                }\n            }\n            return;\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..62a97f9d1 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,30 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+    Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+    if (candidate != null) {\n+        try {\n+            field.setAccessible(true);\n+            field.set(fieldInstance, candidate);\n+            if (!ignoreSetters) {\n+                for (Method setter : settersOf(field)) {\n+                    Object supportedInstance = mockCandidateFilter.filterCandidate(mocks, setter.getParameterTypes()[0]).thenInject();\n+                    if (supportedInstance != null) {\n+                        invokeMethod(setter, fieldInstance, supportedInstance);\n+                        mocks.remove(supportedInstance);\n+                    }\n+                }\n+            }\n+            return;\n+        } catch (IllegalAccessException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "error: variable field is already defined in method injectMockCandidate(Class<?>,Set<Object>,Object)",
    "test_result": "ERROR"
}