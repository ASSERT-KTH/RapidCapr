{
    "patch": "  private static Node computeFollowNode(\n      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    /*\n     * This is the case where:\n     *\n     * 1. Parent is null implies that we are transferring control to the end of\n     * the script.\n     *\n     * 2. Parent is a function implies that we are transferring control back to\n     * the caller of the function.\n     *\n     * 3. If the node is a return statement, we should also transfer control\n     * back to the caller of the function.\n     *\n     * 4. If the node is root then we have reached the end of what we have been\n     * asked to traverse.\n     *\n     * In all cases we should transfer control to a \"symbolic return\" node.\n     * This will make life easier for DFAs.\n     */\n    Node parent = node.getParent();\n    if (parent == null || parent.isFunction()\n        || (parent.isScript() && node.getLastChild() != null)) {\n      return null;\n    }\n\n    // If we are just before a IF/WHILE/DO/FOR:\n    switch (parent.getType()) {\n      // The follow() of any of the path from IF would be what follows IF.\n      case Token.IF:\n        return computeFollowNode(fromNode, parent, cfa);\n      case Token.CASE:\n      case Token.DEFAULT_CASE:\n        // After the body of a CASE, the control goes to the body of the next\n        // case, without having to go to the case condition.\n        if (parent.getNext() != null) {\n          if (parent.getNext().isCase()) {\n            return parent.getNext().getFirstChild().getNext();\n          } else if (parent.getNext().isDefaultCase()) {\n            return parent.getNext().getFirstChild();\n          } else {\n            Preconditions.checkState(false, \"Not reachable\");\n          }\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n        break;\n      case Token.FOR:\n        if (NodeUtil.isForIn(parent)) {\n          return parent;\n        } else {\n          return parent.getFirstChild().getNext().getNext();\n        }\n      case Token.WHILE:\n      case Token.DO:\n        return parent;\n      case Token.TRY:\n        // If we are coming out of the TRY block...\n        if (parent.getFirstChild() == node) {\n          // We need to add edges from the catch blocks to the after try block.\n          Node catchBlock = NodeUtil.getFirstCatchBlock(parent);\n          if (catchBlock != null) {\n            Node finallyBlock = NodeUtil.getFinallyBlock(parent);\n            if (finallyBlock != null) {\n              // Create fallthrough edges from each of the catch blocks to the finally block\n              for (Node currentCatchBlock = catchBlock;\n                  currentCatchBlock != null;\n                  currentCatchBlock = NodeUtil.getNextCatchBlock(currentCatchBlock)) {\n                cfa.createEdge(fromNode, Branch.UNCOND,\n                    NodeUtil.getFinallyBlock(currentCatchBlock));\n              }\n\n              // Create fallthrough edges from the finally block to its follow node.\n              for (int i = 0; i < finallyBlock.getChildCount(); i++) {\n                Node finallyChild = finallyBlock.getChildAtIndex(i);\n                if (finallyChild.isBlock()) {\n                  cfa.createEdge(finallyChild, Branch.UNCOND,\n                      computeFollowNode(fromNode, finallyChild, cfa));\n                }\n              }\n            } else {\n              // Create fallthrough edges from each catch block to the following catch/finally block\n              for (Node currentCatchBlock = catchBlock;\n                  currentCatchBlock != null;\n                  currentCatchBlock = NodeUtil.getNextCatchBlock(currentCatchBlock)) {\n                Node following = NodeUtil.getNextCatchOrFinally(currentCatchBlock);\n                cfa.createEdge(fromNode, Branch.UNCOND, following);\n              }\n            }\n            return computeFollowNode(fromNode, parent, cfa);\n          } else if (NodeUtil.getFinallyBlock(parent) != null) { // and have FINALLY block.\n            return computeFallThrough(parent.getLastChild());\n          } else { // and no CATCH or FINALLY.\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n      default:\n        break;\n    }\n\n    // Now that we are done with the special cases follow should be its\n    // immediate sibling, unless its sibling is a function\n    Node nextSibling = node.getNext();\n\n    // Skip function declarations because control doesn't get pass into it.\n    while (nextSibling != null && nextSibling.isFunction()) {\n      nextSibling = nextSibling.getNext();\n    }\n\n    if (nextSibling != null) {\n      return computeFallThrough(nextSibling);\n    } else {\n      // If there are no more siblings, control is transferred up the AST.\n      return computeFollowNode(fromNode, parent, cfa);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..94dbece5 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -710,8 +710,8 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n      * This will make life easier for DFAs.\n      */\n     Node parent = node.getParent();\n-    if (parent == null || parent.isFunction() ||\n-        (cfa != null && node == cfa.root)) {\n+    if (parent == null || parent.isFunction()\n+        || (parent.isScript() && node.getLastChild() != null)) {\n       return null;\n     }\n \n@@ -748,27 +748,47 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n       case Token.TRY:\n         // If we are coming out of the TRY block...\n         if (parent.getFirstChild() == node) {\n-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n-            return computeFallThrough(parent.getLastChild());\n-          } else { // and have no FINALLY.\n+          // We need to add edges from the catch blocks to the after try block.\n+          Node catchBlock = NodeUtil.getFirstCatchBlock(parent);\n+          if (catchBlock != null) {\n+            Node finallyBlock = NodeUtil.getFinallyBlock(parent);\n+            if (finallyBlock != null) {\n+              // Create fallthrough edges from each of the catch blocks to the finally block\n+              for (Node currentCatchBlock = catchBlock;\n+                  currentCatchBlock != null;\n+                  currentCatchBlock = NodeUtil.getNextCatchBlock(currentCatchBlock)) {\n+                cfa.createEdge(fromNode, Branch.UNCOND,\n+                    NodeUtil.getFinallyBlock(currentCatchBlock));\n+              }\n+\n+              // Create fallthrough edges from the finally block to its follow node.\n+              for (int i = 0; i < finallyBlock.getChildCount(); i++) {\n+                Node finallyChild = finallyBlock.getChildAtIndex(i);\n+                if (finallyChild.isBlock()) {\n+                  cfa.createEdge(finallyChild, Branch.UNCOND,\n+                      computeFollowNode(fromNode, finallyChild, cfa));\n+                }\n+              }\n+            } else {\n+              // Create fallthrough edges from each catch block to the following catch/finally block\n+              for (Node currentCatchBlock = catchBlock;\n+                  currentCatchBlock != null;\n+                  currentCatchBlock = NodeUtil.getNextCatchBlock(currentCatchBlock)) {\n+                Node following = NodeUtil.getNextCatchOrFinally(currentCatchBlock);\n+                cfa.createEdge(fromNode, Branch.UNCOND, following);\n+              }\n+            }\n             return computeFollowNode(fromNode, parent, cfa);\n-          }\n-        // CATCH block.\n-        } else if (NodeUtil.getCatchBlock(parent) == node){\n-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n-            return computeFallThrough(node.getNext());\n-          } else {\n+          } else if (NodeUtil.getFinallyBlock(parent) != null) { // and have FINALLY block.\n+            return computeFallThrough(parent.getLastChild());\n+          } else { // and no CATCH or FINALLY.\n             return computeFollowNode(fromNode, parent, cfa);\n           }\n-        // If we are coming out of the FINALLY block...\n-        } else if (parent.getLastChild() == node){\n-          if (cfa != null) {\n-            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n-            }\n-          }\n+        } else {\n           return computeFollowNode(fromNode, parent, cfa);\n         }\n+      default:\n+        break;\n     }\n \n     // Now that we are done with the special cases follow should be its",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}