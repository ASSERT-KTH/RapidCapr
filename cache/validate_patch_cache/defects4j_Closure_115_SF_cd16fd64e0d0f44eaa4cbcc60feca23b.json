{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n  if (block == null) {\n    // The function body is empty; there's nothing to inline\n    return CanInlineResult.NO;\n  }\n\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  Node cArg = callNode.getFirstChild().getNext();\n  Set<String> assignedVars = new HashSet<>();\n  Set<Node> functionsCalledInArgs = new HashSet<>();\n  while (fnParam != null) {\n    if (cArg == null && !fnParam.getString().equals(\"undefined\")) {\n      // Too few arguments passed to the function\n      return CanInlineResult.NO;\n    }\n\n    if (cArg != null) {\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler) || NodeUtil.isFunctionCall(cArg)) {\n        functionsCalledInArgs.addAll(NodeUtil.getFunctionCalls(cArg));\n        // When doing inline replacements, we don't allow reassignments of variables\n        // that are used as function arguments.\n        assignedVars.addAll(NodeUtil.getAssignedVariables(cArg));\n      }\n\n      if (NodeUtil.canBeSideEffected(cArg) || NodeUtil.mayEffectMutableState(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n\n      if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n        // Can't inline a parameter that is referenced more than once\n        return CanInlineResult.NO;\n      }\n\n      cArg = cArg.getNext();\n    }\n\n    fnParam = fnParam.getNext();\n  }\n\n  if (cArg != null) {\n    // Too many arguments passed to the function\n    return CanInlineResult.NO;\n  }\n\n  if (assignedVars.stream().anyMatch(x -> block.getFirstChild().getLastChild().getQualifiedName().equals(x))) {\n    // Don't inline if the result of the inline replacement is assigned to a function argument\n    return CanInlineResult.NO;\n  }\n\n  if (functionsCalledInArgs.stream().anyMatch(NodeUtil.getEnclosingFunction(block)::contains)) {\n    // Don't inline if any function called in the inlined arguments contains the enclosing function of the inlined block\n    return CanInlineResult.NO;\n  }\n\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..100de493 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,77 +686,68 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n+\n+  Node block = fnNode.getLastChild();\n+  if (block == null) {\n+    // The function body is empty; there's nothing to inline\n+    return CanInlineResult.NO;\n+  }\n+\n+  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+  Node cArg = callNode.getFirstChild().getNext();\n+  Set<String> assignedVars = new HashSet<>();\n+  Set<Node> functionsCalledInArgs = new HashSet<>();\n+  while (fnParam != null) {\n+    if (cArg == null && !fnParam.getString().equals(\"undefined\")) {\n+      // Too few arguments passed to the function\n       return CanInlineResult.NO;\n     }\n \n-    Node block = fnNode.getLastChild();\n+    if (cArg != null) {\n+      if (NodeUtil.mayHaveSideEffects(cArg, compiler) || NodeUtil.isFunctionCall(cArg)) {\n+        functionsCalledInArgs.addAll(NodeUtil.getFunctionCalls(cArg));\n+        // When doing inline replacements, we don't allow reassignments of variables\n+        // that are used as function arguments.\n+        assignedVars.addAll(NodeUtil.getAssignedVariables(cArg));\n+      }\n \n-    boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n+      if (NodeUtil.canBeSideEffected(cArg) || NodeUtil.mayEffectMutableState(cArg, compiler)) {\n+        return CanInlineResult.NO;\n       }\n-    }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+      if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n+        // Can't inline a parameter that is referenced more than once\n+        return CanInlineResult.NO;\n       }\n+\n+      cArg = cArg.getNext();\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+    fnParam = fnParam.getNext();\n+  }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+  if (cArg != null) {\n+    // Too many arguments passed to the function\n+    return CanInlineResult.NO;\n+  }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n-    }\n+  if (assignedVars.stream().anyMatch(x -> block.getFirstChild().getLastChild().getQualifiedName().equals(x))) {\n+    // Don't inline if the result of the inline replacement is assigned to a function argument\n+    return CanInlineResult.NO;\n+  }\n \n-    return CanInlineResult.YES;\n+  if (functionsCalledInArgs.stream().anyMatch(NodeUtil.getEnclosingFunction(block)::contains)) {\n+    // Don't inline if any function called in the inlined arguments contains the enclosing function of the inlined block\n+    return CanInlineResult.NO;\n   }\n \n+  return CanInlineResult.YES;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}