{
    "patch": "public String getprop(String prop) {\n    Runtime rt = Runtime.getRuntime();\n    String[] commands = {\"/system/bin/getprop\", prop};\n    try {\n        Process proc = rt.exec(commands);\n        BufferedReader stdInput = new BufferedReader(new InputStreamReader(proc.getInputStream()));\n        BufferedReader stdError = new BufferedReader(new InputStreamReader(proc.getErrorStream()));\n        String s = null;\n        String warnings = \"\";\n        while ((s = stdError.readLine()) != null) {\n            warnings += s;\n        }\n        if (warnings.length() > 0) {\n            System.err.println(\"getprop error: \" + warnings);\n        }\n        return stdInput.readLine();\n    } catch (IOException e) {\n        System.err.println(\"getprop error: \" + e);\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..e36911d7 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop(String prop) {\n+    Runtime rt = Runtime.getRuntime();\n+    String[] commands = {\"/system/bin/getprop\", prop};\n+    try {\n+        Process proc = rt.exec(commands);\n+        BufferedReader stdInput = new BufferedReader(new InputStreamReader(proc.getInputStream()));\n+        BufferedReader stdError = new BufferedReader(new InputStreamReader(proc.getErrorStream()));\n+        String s = null;\n+        String warnings = \"\";\n+        while ((s = stdError.readLine()) != null) {\n+            warnings += s;\n+        }\n+        if (warnings.length() > 0) {\n+            System.err.println(\"getprop error: \" + warnings);\n+        }\n+        return stdInput.readLine();\n+    } catch (IOException e) {\n+        System.err.println(\"getprop error: \" + e);\n+        return null;\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}