{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      Node arg = argList.getFirstChild();\n      while (arg != null) {\n        Node nextArg = arg.getNext();\n        String argName = arg.getString();\n        if (!referenced.contains(fnScope.getVar(argName))) {\n          if (arg.getNext() == null) {\n            // Remove last argument completely\n            argList.removeChild(arg);\n          } else {\n            // Replace current argument with undefined\n            Node undefined = IR.undefined();\n            undefined.useSourceInfoFrom(arg);\n            arg.getParent().replaceChild(arg, undefined);\n          }\n          compiler.reportCodeChange();\n        }\n        arg = nextArg;\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d1911bc7 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,41 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      Node arg = argList.getFirstChild();\n+      while (arg != null) {\n+        Node nextArg = arg.getNext();\n+        String argName = arg.getString();\n+        if (!referenced.contains(fnScope.getVar(argName))) {\n+          if (arg.getNext() == null) {\n+            // Remove last argument completely\n+            argList.removeChild(arg);\n+          } else {\n+            // Replace current argument with undefined\n+            Node undefined = IR.undefined();\n+            undefined.useSourceInfoFrom(arg);\n+            arg.getParent().replaceChild(arg, undefined);\n+          }\n+          compiler.reportCodeChange();\n+        }\n+        arg = nextArg;\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}