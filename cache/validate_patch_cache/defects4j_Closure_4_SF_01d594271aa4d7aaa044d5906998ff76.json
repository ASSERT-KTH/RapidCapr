{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  JSType resolvedType = null;\n  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n\n  // If a cycle is detected, do not use the registry result as it could be incorrect.\n  if (detectImplicitPrototypeCycle()) {\n    handleTypeCycle(t);\n  } else if (resolvedViaRegistry) {\n    resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n  } else {\n    resolvedType = resolveViaProperties(t, enclosing);\n  }\n\n  // If neither registry nor properties could resolve the type, return null.\n  if (resolvedType == null) {\n    return null;\n  }\n\n  // Complete the resolution and return the resulting type.\n  super.resolveInternal(t, enclosing);\n  if (isResolved()) {\n    finishPropertyContinuations();\n  }\n\n  return resolvedType;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..857cd574 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,33 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  JSType resolvedType = null;\n+  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+\n+  // If a cycle is detected, do not use the registry result as it could be incorrect.\n+  if (detectImplicitPrototypeCycle()) {\n+    handleTypeCycle(t);\n+  } else if (resolvedViaRegistry) {\n+    resolvedType = registry.isLastGeneration() ? getReferencedType() : this;\n+  } else {\n+    resolvedType = resolveViaProperties(t, enclosing);\n+  }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+  // If neither registry nor properties could resolve the type, return null.\n+  if (resolvedType == null) {\n+    return null;\n+  }\n \n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+  // Complete the resolution and return the resulting type.\n+  super.resolveInternal(t, enclosing);\n+  if (isResolved()) {\n+    finishPropertyContinuations();\n   }\n \n+  return resolvedType;\n+}\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}