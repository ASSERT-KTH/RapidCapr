{
    "patch": "    Iterator<Node> iter = argList.children().iterator();\n\n    while (iter.hasNext()) {\n      Node arg = iter.next();\n\n      // Ignore destructured args props and spread.\n      if (arg.isDefaultValue() || arg.isRest() || NodeUtil.isNameDeclaration(arg)\n          || NodeUtil.isObjectPatternElement(arg)) {\n        continue;\n      }\n\n      if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n        iter.remove();\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c9a0e77b 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,20 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Iterator<Node> iter = argList.children().iterator();\n+\n+    while (iter.hasNext()) {\n+      Node arg = iter.next();\n+\n+      // Ignore destructured args props and spread.\n+      if (arg.isDefaultValue() || arg.isRest() || NodeUtil.isNameDeclaration(arg)\n+          || NodeUtil.isObjectPatternElement(arg)) {\n+        continue;\n+      }\n+\n+      if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n+        iter.remove();\n+        compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}