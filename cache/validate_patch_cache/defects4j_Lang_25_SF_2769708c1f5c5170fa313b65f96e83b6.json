{
    "patch": "public static String unescape(String input) {\n    if (input == null) {\n        return null;\n    }\n    StringBuffer output = new StringBuffer();\n    for (int i = 0; i < input.length(); i++) {\n        char ch = input.charAt(i);\n        if (ch == '\\\\') {\n            if (i < input.length() - 1) {\n                char nextChar = input.charAt(i + 1);\n                switch (nextChar) {\n                    case 'n':\n                        output.append('\\n');\n                        break;\n                    case 't':\n                        output.append('\\t');\n                        break;\n                    case 'r':\n                        output.append('\\r');\n                        break;\n                    case 'f':\n                        output.append('\\f');\n                        break;\n                    case '\\'':\n                        output.append('\\'');\n                        break;\n                    case '\\\"':\n                        output.append('\\\"');\n                        break;\n                    case '\\\\':\n                        output.append('\\\\');\n                        break;\n                    case 'u':\n                        if (i < input.length() - 5) {\n                            char hex1 = input.charAt(i + 2);\n                            char hex2 = input.charAt(i + 3);\n                            char hex3 = input.charAt(i + 4);\n                            char hex4 = input.charAt(i + 5);\n                            if (isHexDigit(hex1) && isHexDigit(hex2) && isHexDigit(hex3) && isHexDigit(hex4)) {\n                                char unicodeChar = (char) Integer.parseInt(input.substring(i + 2, i + 6), 16);\n                                output.append(unicodeChar);\n                                i += 5;\n                                break;\n                            }\n                        }\n                    default:\n                        output.append('\\\\');\n                        output.append(nextChar);\n                }\n                i++;\n            } else {\n                output.append('\\\\');\n            }\n        } else {\n            output.append(ch);\n        }\n    }\n    return output.toString();\n}\n\nprivate static boolean isHexDigit(char c) {\n    return ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..793ca0cd 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,69 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String input) {\n+    if (input == null) {\n+        return null;\n+    }\n+    StringBuffer output = new StringBuffer();\n+    for (int i = 0; i < input.length(); i++) {\n+        char ch = input.charAt(i);\n+        if (ch == '\\\\') {\n+            if (i < input.length() - 1) {\n+                char nextChar = input.charAt(i + 1);\n+                switch (nextChar) {\n+                    case 'n':\n+                        output.append('\\n');\n+                        break;\n+                    case 't':\n+                        output.append('\\t');\n+                        break;\n+                    case 'r':\n+                        output.append('\\r');\n+                        break;\n+                    case 'f':\n+                        output.append('\\f');\n+                        break;\n+                    case '\\'':\n+                        output.append('\\'');\n+                        break;\n+                    case '\\\"':\n+                        output.append('\\\"');\n+                        break;\n+                    case '\\\\':\n+                        output.append('\\\\');\n+                        break;\n+                    case 'u':\n+                        if (i < input.length() - 5) {\n+                            char hex1 = input.charAt(i + 2);\n+                            char hex2 = input.charAt(i + 3);\n+                            char hex3 = input.charAt(i + 4);\n+                            char hex4 = input.charAt(i + 5);\n+                            if (isHexDigit(hex1) && isHexDigit(hex2) && isHexDigit(hex3) && isHexDigit(hex4)) {\n+                                char unicodeChar = (char) Integer.parseInt(input.substring(i + 2, i + 6), 16);\n+                                output.append(unicodeChar);\n+                                i += 5;\n+                                break;\n+                            }\n+                        }\n+                    default:\n+                        output.append('\\\\');\n+                        output.append(nextChar);\n+                }\n+                i++;\n+            } else {\n+                output.append('\\\\');\n+            }\n+        } else {\n+            output.append(ch);\n+        }\n+    }\n+    return output.toString();\n+}\n+\n+private static boolean isHexDigit(char c) {\n+    return ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F'));\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}