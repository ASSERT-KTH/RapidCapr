{
    "patch": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n\n    if (!left.getType().isArrayLit()\n        || parent.getType() == Token.NEW\n        || parent.getType() == Token.CALL\n        || n.getBooleanProp(Node.COMPUTED_PROP_THROW_ON_GET)) {\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index || intIndex < 0) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (left.getChildCount() <= intIndex) {\n      Node newUndefined = NodeUtil.newUndefinedNode(n);\n      for (int i = left.getChildCount(); i <= intIndex; i++) {\n        left.addChildToBack(NodeUtil.newUndefinedNode(n));\n      }\n      left.addChildToBack(newUndefined);\n    }\n\n    Node elem = left.getChildAtIndex(intIndex);\n    if (elem.getType() == Token.EMPTY) {\n      elem = NodeUtil.newUndefinedNode(n);\n    } else {\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..5557cd48 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1277,40 +1277,32 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n \n   private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n \n-    if (right.getType() != Token.NUMBER) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n+    if (!left.getType().isArrayLit()\n+        || parent.getType() == Token.NEW\n+        || parent.getType() == Token.CALL\n+        || n.getBooleanProp(Node.COMPUTED_PROP_THROW_ON_GET)) {\n       return n;\n     }\n \n     double index = right.getDouble();\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n+    if (intIndex != index || intIndex < 0) {\n       error(INVALID_GETELEM_INDEX_ERROR, right);\n       return n;\n     }\n \n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    Node elem = left.getFirstChild();\n-    for (int i = 0; elem != null && i < intIndex; i++) {\n-      elem = elem.getNext();\n-    }\n-\n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+    if (left.getChildCount() <= intIndex) {\n+      Node newUndefined = NodeUtil.newUndefinedNode(n);\n+      for (int i = left.getChildCount(); i <= intIndex; i++) {\n+        left.addChildToBack(NodeUtil.newUndefinedNode(n));\n+      }\n+      left.addChildToBack(newUndefined);\n     }\n \n+    Node elem = left.getChildAtIndex(intIndex);\n     if (elem.getType() == Token.EMPTY) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+      elem = NodeUtil.newUndefinedNode(n);\n     } else {\n       left.removeChild(elem);\n     }",
    "result_reason": "error: int cannot be dereferenced",
    "test_result": "ERROR"
}