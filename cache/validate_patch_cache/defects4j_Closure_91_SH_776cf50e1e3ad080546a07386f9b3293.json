{
    "patch": "            pType == Token.EMPTY ||\n            pType == Token.EXPR_RESULT ||\n            pType == Token.RETURN ||\n\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (!NodeUtil.isGet(parent) ||\n          !NodeUtil.isGet(parent.getFirstChild()) ||\n          !\"prototype\".equals(parent.getFirstChild().getLastChild().getString())) {\n        return true;\n      }\n      return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..5a1a56bb 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,23 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+            pType == Token.EMPTY ||\n+            pType == Token.EXPR_RESULT ||\n+            pType == Token.RETURN ||\n+\n+            // object literal keys\n+            pType == Token.STRING ||\n+            pType == Token.NUMBER)) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (!NodeUtil.isGet(parent) ||\n+          !NodeUtil.isGet(parent.getFirstChild()) ||\n+          !\"prototype\".equals(parent.getFirstChild().getLastChild().getString())) {\n+        return true;\n+      }\n+      return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}