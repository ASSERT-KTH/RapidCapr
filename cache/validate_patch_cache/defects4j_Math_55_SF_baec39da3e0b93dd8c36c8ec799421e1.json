{
    "patch": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      double v1x = v1.getX(), v1y = v1.getY(), v1z = v1.getZ();\n      double v2x = v2.getX(), v2y = v2.getY(), v2z = v2.getZ();\n\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n      final double a = v1x * v1x + v1y * v1y + v1z * v1z;\n      final double b = v2x * v2x + v2y * v2y + v2z * v2z;\n      if (a == 0 || b == 0) {\n          return Vector3D.ZERO;\n      }\n      final double norm1 = FastMath.sqrt(a);\n      final double norm2 = FastMath.sqrt(b);\n      final double v1x1 = v1x / norm1;\n      final double v1y1 = v1y / norm1;\n      final double v1z1 = v1z / norm1;\n      final double v2x2 = v2x / norm2;\n      final double v2y2 = v2y / norm2;\n      final double v2z2 = v2z / norm2;\n\n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n      final double rho = 0.125;\n      final double vr1 = v1x1 - rho * v2x2;\n      final double vr2 = v1y1 - rho * v2y2;\n      final double vr3 = v1z1 - rho * v2z2;\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      final double cx = vr2 * v2z2 - vr3 * v2y2;\n      final double cy = vr3 * v2x2 - vr1 * v2z2;\n      final double cz = vr1 * v2y2 - vr2 * v2x2;\n\n      return new Vector3D(cx * norm1 * norm2, cy * norm1 * norm2, cz * norm1 * norm2);\n\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..aaab76bde 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -456,9 +456,24 @@ public class Vector3D implements Serializable {\n    */\n   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n+      double v1x = v1.getX(), v1y = v1.getY(), v1z = v1.getZ();\n+      double v2x = v2.getX(), v2y = v2.getY(), v2z = v2.getZ();\n \n       // rescale both vectors without losing precision,\n       // to ensure their norm are the same order of magnitude\n+      final double a = v1x * v1x + v1y * v1y + v1z * v1z;\n+      final double b = v2x * v2x + v2y * v2y + v2z * v2z;\n+      if (a == 0 || b == 0) {\n+          return Vector3D.ZERO;\n+      }\n+      final double norm1 = FastMath.sqrt(a);\n+      final double norm2 = FastMath.sqrt(b);\n+      final double v1x1 = v1x / norm1;\n+      final double v1y1 = v1y / norm1;\n+      final double v1z1 = v1z / norm1;\n+      final double v2x2 = v2x / norm2;\n+      final double v2y2 = v2y / norm2;\n+      final double v2z2 = v2z / norm2;\n \n       // we reduce cancellation errors by preconditioning,\n       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n@@ -467,10 +482,17 @@ public class Vector3D implements Serializable {\n       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n \n       // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n+      final double rho = 0.125;\n+      final double vr1 = v1x1 - rho * v2x2;\n+      final double vr2 = v1y1 - rho * v2y2;\n+      final double vr3 = v1z1 - rho * v2z2;\n \n       // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+      final double cx = vr2 * v2z2 - vr3 * v2y2;\n+      final double cy = vr3 * v2x2 - vr1 * v2z2;\n+      final double cz = vr1 * v2y2 - vr2 * v2x2;\n+\n+      return new Vector3D(cx * norm1 * norm2, cy * norm1 * norm2, cz * norm1 * norm2);\n \n   }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<-1.0> but was:<-1.0000002150225664>",
    "test_result": "FAIL"
}