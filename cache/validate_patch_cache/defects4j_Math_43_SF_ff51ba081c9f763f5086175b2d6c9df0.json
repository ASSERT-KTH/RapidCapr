{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n\n    double oldN = n;\n    n++;\n\n    if (meanImpl instanceof Mean) {\n        // If mean is Mean, increment it\n        meanImpl.increment(value);\n    } else {\n        // If mean is not Mean, store its current result\n        double oldMean = meanImpl.getResult();\n\n        // Increment mean with new value\n        ((AbstractStorelessUnivariateStatistic) meanImpl).increment(value);\n\n        // Compute new mean\n        double newMean = oldMean + (value - oldMean) / n;\n\n        // Rescale variance\n        if (n > 1) {\n            double oldVariance = varianceImpl.getResult();\n            double newVariance = oldVariance + (value - oldMean) * (value - newMean);\n            varianceImpl = new Variance(false, newMean, oldN, newVariance);\n        }\n    }\n\n    if (varianceImpl instanceof Variance) {\n        // If variance is Variance, increment it\n        varianceImpl.increment(value);\n    } else {\n        // If variance is not Variance, store its current result\n        double oldVariance = varianceImpl.getResult();\n\n        // Increment variance with new value\n        ((AbstractStorelessUnivariateStatistic) varianceImpl).increment(value);\n\n        // Compute new variance\n        double newVariance = (oldN / n) * oldVariance + (value - meanImpl.getResult()) * (value - oldMean) / n;\n\n        // Copy variance to Variance object\n        varianceImpl = new Variance(false, meanImpl.getResult(), n, newVariance);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..58caafc6e 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,27 +146,56 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+\n+    double oldN = n;\n+    n++;\n+\n+    if (meanImpl instanceof Mean) {\n+        // If mean is Mean, increment it\n+        meanImpl.increment(value);\n+    } else {\n+        // If mean is not Mean, store its current result\n+        double oldMean = meanImpl.getResult();\n+\n+        // Increment mean with new value\n+        ((AbstractStorelessUnivariateStatistic) meanImpl).increment(value);\n+\n+        // Compute new mean\n+        double newMean = oldMean + (value - oldMean) / n;\n+\n+        // Rescale variance\n+        if (n > 1) {\n+            double oldVariance = varianceImpl.getResult();\n+            double newVariance = oldVariance + (value - oldMean) * (value - newMean);\n+            varianceImpl = new Variance(false, newMean, oldN, newVariance);\n         }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n-        }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n-        }\n-        n++;\n     }\n \n+    if (varianceImpl instanceof Variance) {\n+        // If variance is Variance, increment it\n+        varianceImpl.increment(value);\n+    } else {\n+        // If variance is not Variance, store its current result\n+        double oldVariance = varianceImpl.getResult();\n+\n+        // Increment variance with new value\n+        ((AbstractStorelessUnivariateStatistic) varianceImpl).increment(value);\n+\n+        // Compute new variance\n+        double newVariance = (oldN / n) * oldVariance + (value - meanImpl.getResult()) * (value - oldMean) / n;\n+\n+        // Copy variance to Variance object\n+        varianceImpl = new Variance(false, meanImpl.getResult(), n, newVariance);\n+    }\n+}\n+\n     /**\n      * Returns the number of available values\n      * @return The number of available values",
    "result_reason": "error: no suitable constructor found for Variance(boolean,double,double,double)",
    "test_result": "ERROR"
}