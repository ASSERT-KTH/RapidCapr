{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n\n    // If Mean, Variance, or GeometricMean is overridden, call their respective increment methods\n    // Else, call their respective getResult methods to compute updated values of statistics and pass it to their respective increment method\n    if(meanImpl instanceof Mean) {\n        ((Mean) meanImpl).increment(value);\n    }\n    else if(meanImpl.getClass().getName().startsWith(\"org.apache.commons.\")) {\n        try {\n            meanImpl.getClass().getMethod(\"increment\", double.class).invoke(meanImpl, value);\n        } catch (Exception e) {\n            // do nothing\n        }\n    }\n    else {\n        double oldMean = meanImpl.getResult();\n        double newMean = oldMean + (value - oldMean)/(n+1.0);\n        double delta = value - oldMean;\n        meanImpl.increment(newMean);\n        if(varianceImpl instanceof Variance) {\n            ((Variance)varianceImpl).increment(value);\n        }\n        else if(varianceImpl.getClass().getName().startsWith(\"org.apache.commons.\")) {\n            try {\n                varianceImpl.getClass().getMethod(\"increment\", double.class).invoke(varianceImpl, value);\n            } catch (Exception e) {\n                // do nothing\n            }\n        }\n        else {\n            double oldVariance = varianceImpl.getResult();\n            double newVariance = oldVariance + delta*delta*(n/(n+1));\n            varianceImpl.increment(newVariance);\n        }\n        if(geoMeanImpl instanceof GeometricMean) {\n            ((GeometricMean)geoMeanImpl).increment(value);\n        }\n        else if(geoMeanImpl.getClass().getName().startsWith(\"org.apache.commons.\")) {\n            try {\n                geoMeanImpl.getClass().getMethod(\"increment\", double.class).invoke(geoMeanImpl, value);\n            } catch (Exception e) {\n                // do nothing\n            }\n        }\n        else {\n            geoMeanImpl.increment(Math.log(value));\n        }\n    }\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..d0b975453 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,26 +146,62 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+\n+    // If Mean, Variance, or GeometricMean is overridden, call their respective increment methods\n+    // Else, call their respective getResult methods to compute updated values of statistics and pass it to their respective increment method\n+    if(meanImpl instanceof Mean) {\n+        ((Mean) meanImpl).increment(value);\n+    }\n+    else if(meanImpl.getClass().getName().startsWith(\"org.apache.commons.\")) {\n+        try {\n+            meanImpl.getClass().getMethod(\"increment\", double.class).invoke(meanImpl, value);\n+        } catch (Exception e) {\n+            // do nothing\n         }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n+    }\n+    else {\n+        double oldMean = meanImpl.getResult();\n+        double newMean = oldMean + (value - oldMean)/(n+1.0);\n+        double delta = value - oldMean;\n+        meanImpl.increment(newMean);\n+        if(varianceImpl instanceof Variance) {\n+            ((Variance)varianceImpl).increment(value);\n+        }\n+        else if(varianceImpl.getClass().getName().startsWith(\"org.apache.commons.\")) {\n+            try {\n+                varianceImpl.getClass().getMethod(\"increment\", double.class).invoke(varianceImpl, value);\n+            } catch (Exception e) {\n+                // do nothing\n+            }\n+        }\n+        else {\n+            double oldVariance = varianceImpl.getResult();\n+            double newVariance = oldVariance + delta*delta*(n/(n+1));\n+            varianceImpl.increment(newVariance);\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n+        if(geoMeanImpl instanceof GeometricMean) {\n+            ((GeometricMean)geoMeanImpl).increment(value);\n+        }\n+        else if(geoMeanImpl.getClass().getName().startsWith(\"org.apache.commons.\")) {\n+            try {\n+                geoMeanImpl.getClass().getMethod(\"increment\", double.class).invoke(geoMeanImpl, value);\n+            } catch (Exception e) {\n+                // do nothing\n+            }\n+        }\n+        else {\n+            geoMeanImpl.increment(Math.log(value));\n         }\n-        n++;\n     }\n+    n++;\n+}\n \n     /**\n      * Returns the number of available values",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2.213363839400643> but was:<NaN>",
    "test_result": "FAIL"
}