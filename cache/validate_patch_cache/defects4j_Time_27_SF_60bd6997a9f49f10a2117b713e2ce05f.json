{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    if (elementPairs.isEmpty()) {\n        throw new IllegalArgumentException(\"Empty elementPairs list\");\n    }\n    int size = elementPairs.size();\n    if (size == 1) {\n        Object elem = elementPairs.get(0);\n        if (elem instanceof Separator) {\n            Separator sep = (Separator) elem;\n            return new PeriodFormatter(sep, sep);\n        }\n        Object[] comp = (Object[]) elem;\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n    for (int i = 0; i < size; i++) {\n        if (elementPairs.get(i) instanceof Separator) {\n            Separator sep = (Separator) elementPairs.get(i);\n            PeriodFormatter beforeSep = toFormatter(elementPairs.subList(0, i), notPrinter, notParser);\n            PeriodFormatter afterSep = toFormatter(elementPairs.subList(i + 1, size), notPrinter, notParser);\n            sep = sep.finish(beforeSep.getPrinter(), afterSep.getParser());\n            return new PeriodFormatter(beforeSep.getPrinter(), sep);\n        }\n    }\n    throw new IllegalArgumentException(\"Unable to create formatter from element pairs: \" + elementPairs);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..c183faa0 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,18 +791,21 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    if (elementPairs.isEmpty()) {\n+        throw new IllegalArgumentException(\"Empty elementPairs list\");\n+    }\n+    int size = elementPairs.size();\n+    if (size == 1) {\n+        Object elem = elementPairs.get(0);\n+        if (elem instanceof Separator) {\n+            Separator sep = (Separator) elem;\n+            return new PeriodFormatter(sep, sep);\n+        }\n+        Object[] comp = (Object[]) elem;\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n         } else if (notParser) {\n@@ -811,6 +814,17 @@ public class PeriodFormatterBuilder {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n     }\n+    for (int i = 0; i < size; i++) {\n+        if (elementPairs.get(i) instanceof Separator) {\n+            Separator sep = (Separator) elementPairs.get(i);\n+            PeriodFormatter beforeSep = toFormatter(elementPairs.subList(0, i), notPrinter, notParser);\n+            PeriodFormatter afterSep = toFormatter(elementPairs.subList(i + 1, size), notPrinter, notParser);\n+            sep = sep.finish(beforeSep.getPrinter(), afterSep.getParser());\n+            return new PeriodFormatter(beforeSep.getPrinter(), sep);\n+        }\n+    }\n+    throw new IllegalArgumentException(\"Unable to create formatter from element pairs: \" + elementPairs);\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}