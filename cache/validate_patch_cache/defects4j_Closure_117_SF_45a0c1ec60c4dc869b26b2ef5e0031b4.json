{
    "patch": "String getReadableJSTypeName(Node n, boolean dereference) {\n    // If we're analyzing a GETPROP, the property may be inherited by the prototype chain.\n    // So climb the prototype chain and find out where the property was originally defined.\n    if (n.isGetProp()) {\n        ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n        if (objectType != null) {\n            String propName = n.getLastChild().getString();\n            if (objectType.getConstructor() != null && objectType.getConstructor().isInterface()) {\n                objectType = FunctionType.getTopDefiningInterface(objectType, propName);\n            } else {\n                // check prototype chain for exact class/interface/function for property\n                do {\n                    if (objectType != null && objectType.hasOwnProperty(propName)) {\n                        break;\n                    }\n                    objectType = objectType.getImplicitPrototype();\n                } while (objectType != null && (objectType.getConstructor() == null || objectType.getConstructor().isInterface()));\n            }\n            // Don't show complex function names or anonymous types.\n            // Instead, try to get a human-readable type name.\n            if (objectType != null &&\n                    (objectType.getConstructor() != null || objectType.isFunctionPrototypeType())) {\n                String prototype = \"prototype\";\n                String prefix = objectType.isFunctionPrototypeType() ? \"\" : \".\";\n                return objectType.toString() + (prototype.equals(propName) ? prefix + prototype :\n                        (objectType.hasOwnProperty(propName) ? \".\" + propName : generateReadableJSTypeName(propName)));\n            }\n        }\n    }\n    JSType type = getJSType(n);\n    if (dereference) {\n        ObjectType dereferenced = type.dereference();\n        if (dereferenced != null) {\n            type = dereferenced;\n        }\n    }\n    if (type.isFunctionPrototypeType() ||\n            (type.toObjectType() != null && type.toObjectType().getConstructor() != null)) {\n        return type.toString();\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n        return qualifiedName;\n    } else if (type.isFunctionType()) {\n        // Don't show complex function names.\n        return \"function\";\n    } else {\n        return type.toString();\n    }\n}\n\nprivate String generateReadableJSTypeName(String propertyName) {\n    // We need to generate a human-readable type name for the given property name.\n    // This is necessary when the property is not defined in the object's prototype chain.\n    String[] words = propertyName.split(\"(?=\\\\p{Upper})\");\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < words.length; i++) {\n        if (i > 0) {\n            sb.append(' ');\n        }\n        sb.append(words[i].toLowerCase(Locale.ENGLISH));\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java\nindex bcd024ac..0bfc55cc 100644\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n@@ -721,60 +721,70 @@ class TypeValidator {\n    * @param dereference If true, the type of the node will be dereferenced\n    *     to an Object type, if possible.\n    */\n-  String getReadableJSTypeName(Node n, boolean dereference) {\n-\n-    // The best type name is the actual type name.\n-\n-    // If we're analyzing a GETPROP, the property may be inherited by the\n-    // prototype chain. So climb the prototype chain and find out where\n-    // the property was originally defined.\n+String getReadableJSTypeName(Node n, boolean dereference) {\n+    // If we're analyzing a GETPROP, the property may be inherited by the prototype chain.\n+    // So climb the prototype chain and find out where the property was originally defined.\n     if (n.isGetProp()) {\n-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n-      if (objectType != null) {\n-        String propName = n.getLastChild().getString();\n-        if (objectType.getConstructor() != null &&\n-            objectType.getConstructor().isInterface()) {\n-          objectType = FunctionType.getTopDefiningInterface(\n-              objectType, propName);\n-        } else {\n-          // classes\n-          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n-            objectType = objectType.getImplicitPrototype();\n-          }\n+        ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n+        if (objectType != null) {\n+            String propName = n.getLastChild().getString();\n+            if (objectType.getConstructor() != null && objectType.getConstructor().isInterface()) {\n+                objectType = FunctionType.getTopDefiningInterface(objectType, propName);\n+            } else {\n+                // check prototype chain for exact class/interface/function for property\n+                do {\n+                    if (objectType != null && objectType.hasOwnProperty(propName)) {\n+                        break;\n+                    }\n+                    objectType = objectType.getImplicitPrototype();\n+                } while (objectType != null && (objectType.getConstructor() == null || objectType.getConstructor().isInterface()));\n+            }\n+            // Don't show complex function names or anonymous types.\n+            // Instead, try to get a human-readable type name.\n+            if (objectType != null &&\n+                    (objectType.getConstructor() != null || objectType.isFunctionPrototypeType())) {\n+                String prototype = \"prototype\";\n+                String prefix = objectType.isFunctionPrototypeType() ? \"\" : \".\";\n+                return objectType.toString() + (prototype.equals(propName) ? prefix + prototype :\n+                        (objectType.hasOwnProperty(propName) ? \".\" + propName : generateReadableJSTypeName(propName)));\n+            }\n         }\n-\n-        // Don't show complex function names or anonymous types.\n-        // Instead, try to get a human-readable type name.\n-        if (objectType != null &&\n-            (objectType.getConstructor() != null ||\n-             objectType.isFunctionPrototypeType())) {\n-          return objectType.toString() + \".\" + propName;\n-        }\n-      }\n     }\n-\n     JSType type = getJSType(n);\n     if (dereference) {\n-      ObjectType dereferenced = type.dereference();\n-      if (dereferenced != null) {\n-        type = dereferenced;\n-      }\n+        ObjectType dereferenced = type.dereference();\n+        if (dereferenced != null) {\n+            type = dereferenced;\n+        }\n     }\n     if (type.isFunctionPrototypeType() ||\n-        (type.toObjectType() != null &&\n-         type.toObjectType().getConstructor() != null)) {\n-      return type.toString();\n+            (type.toObjectType() != null && type.toObjectType().getConstructor() != null)) {\n+        return type.toString();\n     }\n     String qualifiedName = n.getQualifiedName();\n     if (qualifiedName != null) {\n-      return qualifiedName;\n+        return qualifiedName;\n     } else if (type.isFunctionType()) {\n-      // Don't show complex function names.\n-      return \"function\";\n+        // Don't show complex function names.\n+        return \"function\";\n     } else {\n-      return type.toString();\n+        return type.toString();\n     }\n-  }\n+}\n+\n+private String generateReadableJSTypeName(String propertyName) {\n+    // We need to generate a human-readable type name for the given property name.\n+    // This is necessary when the property is not defined in the object's prototype chain.\n+    String[] words = propertyName.split(\"(?=\\\\p{Upper})\");\n+    StringBuilder sb = new StringBuilder();\n+    for (int i = 0; i < words.length; i++) {\n+        if (i > 0) {\n+            sb.append(' ');\n+        }\n+        sb.append(words[i].toLowerCase(Locale.ENGLISH));\n+    }\n+    return sb.toString();\n+}\n \n   /**\n    * This method gets the JSType from the Node argument and verifies that it is",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}