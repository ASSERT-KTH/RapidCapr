{
    "patch": "    // Keep track of arguments that have been removed so that we can remove them from\n    // the call sites as well, in case `modifyCallers` is true.\n    final Deque<Node> argNodesToRemove = new ArrayDeque<>();\n    // Strip unreferenced args off the end of the function declaration.\n    Node arg = argList.getFirstChild();\n    while (arg != null) {\n      final Var var = fnScope.getVar(arg.getString());\n      if (!referenced.contains(var) && !NodeUtil.isFunctionDeclaration(function)) {\n        argList.removeChild(arg);\n        argNodesToRemove.add(arg);\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n      arg = arg.getNext();\n    }\n\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced, argNodesToRemove);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..64bb5420 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,25 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Keep track of arguments that have been removed so that we can remove them from\n+    // the call sites as well, in case `modifyCallers` is true.\n+    final Deque<Node> argNodesToRemove = new ArrayDeque<>();\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node arg = argList.getFirstChild();\n+    while (arg != null) {\n+      final Var var = fnScope.getVar(arg.getString());\n+      if (!referenced.contains(var) && !NodeUtil.isFunctionDeclaration(function)) {\n+        argList.removeChild(arg);\n+        argNodesToRemove.add(arg);\n+        compiler.reportCodeChange();\n+      } else {\n+        break;\n+      }\n+      arg = arg.getNext();\n+    }\n+\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced, argNodesToRemove);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}