{
    "patch": "import java.util.Calendar;\nimport java.util.concurrent.TimeUnit;\n\npublic class CalendarUtils {\n\n    private static int[][] fields = {\n            { Calendar.MILLISECOND }, { Calendar.SECOND },\n            { Calendar.MINUTE }, { Calendar.HOUR_OF_DAY, Calendar.HOUR },\n            { Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM\n                    /* Calendar.DAY_OF_YEAR, Calendar.DAY_OF_WEEK, Calendar.DAY_OF_WEEK_IN_MONTH */},\n            { Calendar.MONTH, Calendar.YEAR, Calendar.ERA } };\n\n    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n\n        // Truncate milliseconds, seconds, and minutes\n        val.set(Calendar.MILLISECOND, 0);\n        val.set(Calendar.SECOND, 0);\n        val.set(Calendar.MINUTE, 0);\n\n        // Reset time for rounding purposes\n        Calendar resetVal = (Calendar) val.clone();\n        resetVal.set(Calendar.MILLISECOND, 0);\n        resetVal.set(Calendar.SECOND, 0);\n        resetVal.set(Calendar.MINUTE, 0);\n        resetVal.set(Calendar.HOUR_OF_DAY, 0);\n\n        // Determine if we need to round up\n        boolean roundUp = false;\n        if (round) {\n            roundUp = val.getTimeInMillis() - resetVal.getTimeInMillis()\n                    > TimeUnit.HOURS.toMillis(12);\n        }\n\n        // Attempt to modify the specified field\n        for (int i = 0; i < fields.length; i++) {\n            for (int j = 0; j < fields[i].length; j++) {\n                if (fields[i][j] == field) {\n                    // This is our field, attempt to modify it\n                    if (round && roundUp) {\n                        if (field == Calendar.DATE\n                                || field == Calendar.DAY_OF_MONTH) {\n                            // This is a special case that's hard to generalize\n                            // If the date is 1, we round up to 16, otherwise\n                            // we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n                        } else {\n                            // We need to add one to this field since the\n                            // last number causes us to round up\n                            val.add(fields[i][0], 1);\n                        }\n                    } else {\n                        // We need to remove this field\n                        val.set(fields[i][0], val.get(fields[i][0]));\n                    }\n                    return;\n                }\n            }\n        }\n\n        // If we make it here, the field is not supported\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/time/DateUtils.java b/src/java/org/apache/commons/lang/time/DateUtils.java\nindex 531e73fc..f1f16e83 100644\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n@@ -616,38 +616,53 @@ public class DateUtils {\n      * @param round  true to round, false to truncate\n      * @throws ArithmeticException if the year is over 280 million\n      */\n+import java.util.Calendar;\n+import java.util.concurrent.TimeUnit;\n+\n+public class CalendarUtils {\n+\n+    private static int[][] fields = {\n+            { Calendar.MILLISECOND }, { Calendar.SECOND },\n+            { Calendar.MINUTE }, { Calendar.HOUR_OF_DAY, Calendar.HOUR },\n+            { Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM\n+                    /* Calendar.DAY_OF_YEAR, Calendar.DAY_OF_WEEK, Calendar.DAY_OF_WEEK_IN_MONTH */},\n+            { Calendar.MONTH, Calendar.YEAR, Calendar.ERA } };\n+\n     private static void modify(Calendar val, int field, boolean round) {\n         if (val.get(Calendar.YEAR) > 280000000) {\n             throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n         }\n-        \n \n-        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n-        // see http://issues.apache.org/jira/browse/LANG-59\n-        //\n-        // Manually truncate milliseconds, seconds and minutes, rather than using\n-        // Calendar methods.\n+        // Truncate milliseconds, seconds, and minutes\n+        val.set(Calendar.MILLISECOND, 0);\n+        val.set(Calendar.SECOND, 0);\n+        val.set(Calendar.MINUTE, 0);\n \n+        // Reset time for rounding purposes\n+        Calendar resetVal = (Calendar) val.clone();\n+        resetVal.set(Calendar.MILLISECOND, 0);\n+        resetVal.set(Calendar.SECOND, 0);\n+        resetVal.set(Calendar.MINUTE, 0);\n+        resetVal.set(Calendar.HOUR_OF_DAY, 0);\n \n-        // truncate milliseconds\n-\n-        // truncate seconds\n-\n-        // truncate minutes\n-\n-        // reset time\n-        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n-\n+        // Determine if we need to round up\n         boolean roundUp = false;\n+        if (round) {\n+            roundUp = val.getTimeInMillis() - resetVal.getTimeInMillis()\n+                    > TimeUnit.HOURS.toMillis(12);\n+        }\n+\n+        // Attempt to modify the specified field\n         for (int i = 0; i < fields.length; i++) {\n             for (int j = 0; j < fields[i].length; j++) {\n                 if (fields[i][j] == field) {\n-                    //This is our field... we stop looping\n+                    // This is our field, attempt to modify it\n                     if (round && roundUp) {\n-                        if (field == DateUtils.SEMI_MONTH) {\n-                            //This is a special case that's hard to generalize\n-                            //If the date is 1, we round up to 16, otherwise\n-                            //  we subtract 15 days and add 1 month\n+                        if (field == Calendar.DATE\n+                                || field == Calendar.DAY_OF_MONTH) {\n+                            // This is a special case that's hard to generalize\n+                            // If the date is 1, we round up to 16, otherwise\n+                            // we subtract 15 days and add 1 month\n                             if (val.get(Calendar.DATE) == 1) {\n                                 val.add(Calendar.DATE, 15);\n                             } else {\n@@ -655,62 +670,23 @@ public class DateUtils {\n                                 val.add(Calendar.MONTH, 1);\n                             }\n                         } else {\n-                            //We need at add one to this field since the\n-                            //  last number causes us to round up\n+                            // We need to add one to this field since the\n+                            // last number causes us to round up\n                             val.add(fields[i][0], 1);\n                         }\n+                    } else {\n+                        // We need to remove this field\n+                        val.set(fields[i][0], val.get(fields[i][0]));\n                     }\n                     return;\n                 }\n             }\n-            //We have various fields that are not easy roundings\n-            int offset = 0;\n-            boolean offsetSet = false;\n-            //These are special types of fields that require different rounding rules\n-            switch (field) {\n-                case DateUtils.SEMI_MONTH:\n-                    if (fields[i][0] == Calendar.DATE) {\n-                        //If we're going to drop the DATE field's value,\n-                        //  we want to do this our own way.\n-                        //We need to subtrace 1 since the date has a minimum of 1\n-                        offset = val.get(Calendar.DATE) - 1;\n-                        //If we're above 15 days adjustment, that means we're in the\n-                        //  bottom half of the month and should stay accordingly.\n-                        if (offset >= 15) {\n-                            offset -= 15;\n-                        }\n-                        //Record whether we're in the top or bottom half of that range\n-                        roundUp = offset > 7;\n-                        offsetSet = true;\n-                    }\n-                    break;\n-                case Calendar.AM_PM:\n-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n-                        //If we're going to drop the HOUR field's value,\n-                        //  we want to do this our own way.\n-                        offset = val.get(Calendar.HOUR_OF_DAY);\n-                        if (offset >= 12) {\n-                            offset -= 12;\n-                        }\n-                        roundUp = offset > 6;\n-                        offsetSet = true;\n-                    }\n-                    break;\n-            }\n-            if (!offsetSet) {\n-                int min = val.getActualMinimum(fields[i][0]);\n-                int max = val.getActualMaximum(fields[i][0]);\n-                //Calculate the offset from the minimum allowed value\n-                offset = val.get(fields[i][0]) - min;\n-                //Set roundUp if this is more than half way between the minimum and maximum\n-                roundUp = offset > ((max - min) / 2);\n-            }\n-            //We need to remove this field\n-                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n         }\n-        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n \n+        // If we make it here, the field is not supported\n+        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}