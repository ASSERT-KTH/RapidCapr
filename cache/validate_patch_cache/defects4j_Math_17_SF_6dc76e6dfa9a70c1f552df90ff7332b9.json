{
    "patch": "            if (isNaN()) {\n                return newInstance(getField(), qone().nanIndeterminate(1));\n            }\n\n            int intgr = 0;\n            Dfp xi = newInstance(getField(), x);\n\n            if (xi.isNaN()) {\n                return newInstance(getField(), qone().nanIndeterminate(1));\n            }\n\n            if (xi.lt(qzero())) {\n                xi = xi.negate();\n                _sign = !_sign;\n            }\n\n            if (xi.ne(qzero())) {\n                Dfp res = newInstance(getField(), 0);\n\n                for (int i = 0; xi.ne(qzero()); i++) {\n                    if (xi.odd()) {\n                        res = res.add(multiplicandPower10(intgr));\n                    }\n\n                    xi = xi.divide(2);\n                    intgr++;\n                }\n\n                res._sign = _sign ^ getField().getRoundingMode() == RoundingMode.DOWN;\n                return res;\n            }\n\n            return newInstance(getField(), qnan());\n    }\n    ``",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..36658d429 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1599,9 +1599,41 @@ public class Dfp implements FieldElement<Dfp> {\n      * @param x multiplicand\n      * @return product of this and x\n      */\n-    public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+            if (isNaN()) {\n+                return newInstance(getField(), qone().nanIndeterminate(1));\n+            }\n+\n+            int intgr = 0;\n+            Dfp xi = newInstance(getField(), x);\n+\n+            if (xi.isNaN()) {\n+                return newInstance(getField(), qone().nanIndeterminate(1));\n+            }\n+\n+            if (xi.lt(qzero())) {\n+                xi = xi.negate();\n+                _sign = !_sign;\n+            }\n+\n+            if (xi.ne(qzero())) {\n+                Dfp res = newInstance(getField(), 0);\n+\n+                for (int i = 0; xi.ne(qzero()); i++) {\n+                    if (xi.odd()) {\n+                        res = res.add(multiplicandPower10(intgr));\n+                    }\n+\n+                    xi = xi.divide(2);\n+                    intgr++;\n+                }\n+\n+                res._sign = _sign ^ getField().getRoundingMode() == RoundingMode.DOWN;\n+                return res;\n+            }\n+\n+            return newInstance(getField(), qnan());\n     }\n+    ``\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.\n      * There are speed advantages in this special case.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}