{
    "patch": "      ObjectType thisType = functionType.getThisType();\n      if (thisType != null && !isGetOrCallWithThis(n)) {\n        // Non-strict functions allow call sites with null or undefined \"this\".\n        Node parent = n.getParent();\n        if (NodeUtil.isUnaryOperator(parent) &&\n            parent.getBooleanProp(Node.FREE_CALL) &&\n            !parent.getBooleanProp(Node.USES_STRICT)) {\n          parent = parent.getParent();\n        }\n        boolean nonstrictCallWithNullOrUndefinedThis =\n            parent.isCall() && NodeUtil.mayHaveNullOrUndefinedAsThisArgument(parent);\n        if (!nonstrictCallWithNullOrUndefinedThis) {\n          report(t, n, INVALID_THIS_TYPE, thisType.toString());\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..9eedbabc 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      ObjectType thisType = functionType.getThisType();\n+      if (thisType != null && !isGetOrCallWithThis(n)) {\n+        // Non-strict functions allow call sites with null or undefined \"this\".\n+        Node parent = n.getParent();\n+        if (NodeUtil.isUnaryOperator(parent) &&\n+            parent.getBooleanProp(Node.FREE_CALL) &&\n+            !parent.getBooleanProp(Node.USES_STRICT)) {\n+          parent = parent.getParent();\n+        }\n+        boolean nonstrictCallWithNullOrUndefinedThis =\n+            parent.isCall() && NodeUtil.mayHaveNullOrUndefinedAsThisArgument(parent);\n+        if (!nonstrictCallWithNullOrUndefinedThis) {\n+          report(t, n, INVALID_THIS_TYPE, thisType.toString());\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}