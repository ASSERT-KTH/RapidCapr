{
    "patch": "        InvalidValueStrategy invalidValueStrategy = DateTimeParserBucket.lenientCheck(savedFields, iDefaultPivotYear, iChrono);\n        if (invalidValueStrategy != InvalidValueStrategy.INSTANT_FAILURE) {\n            while (invalidValueStrategy == InvalidValueStrategy.NULL && count > 0) {\n                count--;\n                savedFields[count] = null;\n                invalidValueStrategy = DateTimeParserBucket.lenientCheck(savedFields, iDefaultPivotYear, iChrono);\n            }\n            if (count > 0) {\n                sort(savedFields, count);\n                String parsedString = text.substring(0, invalidValueStrategy.getInvalidIndex());\n                try {\n                    long parsedMillis = Long.parseLong(parsedString);\n                    for (int i = 0; i < count; i++) {\n                        parsedMillis = savedFields[i].set(parsedMillis, false);\n                    }\n                    return parsedMillis;\n                } catch (NumberFormatException ex) {\n                    throw new IllegalFieldValueException(\"Cannot parse \\\"\" + text + '\"', parsedString, 0, ex);\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..b42278a6 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,27 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        InvalidValueStrategy invalidValueStrategy = DateTimeParserBucket.lenientCheck(savedFields, iDefaultPivotYear, iChrono);\n+        if (invalidValueStrategy != InvalidValueStrategy.INSTANT_FAILURE) {\n+            while (invalidValueStrategy == InvalidValueStrategy.NULL && count > 0) {\n+                count--;\n+                savedFields[count] = null;\n+                invalidValueStrategy = DateTimeParserBucket.lenientCheck(savedFields, iDefaultPivotYear, iChrono);\n+            }\n+            if (count > 0) {\n+                sort(savedFields, count);\n+                String parsedString = text.substring(0, invalidValueStrategy.getInvalidIndex());\n+                try {\n+                    long parsedMillis = Long.parseLong(parsedString);\n+                    for (int i = 0; i < count; i++) {\n+                        parsedMillis = savedFields[i].set(parsedMillis, false);\n+                    }\n+                    return parsedMillis;\n+                } catch (NumberFormatException ex) {\n+                    throw new IllegalFieldValueException(\"Cannot parse \\\"\" + text + '\"', parsedString, 0, ex);\n+                }\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}