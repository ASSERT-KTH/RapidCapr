{
    "patch": "public class MyClassTest {\n    \n    @Test\n    public void should_return_empty_iterable() {\n        MyClass obj = new MyClass();\n        MyInterface mockInterface = mock(MyInterface.class);\n        Values values = new Values();\n        \n        // set up mock to return empty list\n        when(mockInterface.getValues()).thenReturn(Collections.emptyList());\n        \n        // call MyClass method with mock parameter\n        obj.myMethod(mockInterface, values);\n        \n        // ensure the returned Iterable is empty\n        assertFalse(((Iterable<?>) values.returnValueFor(Iterable.class)).iterator().hasNext()); // use wildcard to avoid compiler warning\n    }\n    \n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}