{
    "patch": "private Type getActualTypeArgumentFor(Type typeVariable) {\n    if (typeVariable instanceof TypeVariable<?>) {\n        Type[] bounds = ((TypeVariable<?>) typeVariable).getBounds();\n        for (Type bound : bounds) {\n            if (bound instanceof ParameterizedType) {\n                Type[] typeArgs = ((ParameterizedType) bound).getActualTypeArguments();\n                if (typeArgs.length > 0) {\n                    return typeArgs[0];\n                }\n            } else if (bound instanceof WildcardType) {\n                Type[] upperBounds = ((WildcardType) bound).getUpperBounds();\n                for (Type upperBound : upperBounds) {\n                    if (upperBound instanceof ParameterizedType) {\n                        Type[] typeArgs = ((ParameterizedType) upperBound).getActualTypeArguments();\n                        if (typeArgs.length > 0) {\n                            return typeArgs[0];\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return null;\n}\n\nprivate void readTypeVariables() {\n    if (typeVariable instanceof TypeVariable<?>) {\n        Type[] bounds = ((TypeVariable<?>) typeVariable).getBounds();\n        for (Type type : bounds) {\n            registerTypeVariablesOn(type);\n        }\n        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n        if (actualTypeArgument != null) {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..071041ef7 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,44 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private Type getActualTypeArgumentFor(Type typeVariable) {\n+    if (typeVariable instanceof TypeVariable<?>) {\n+        Type[] bounds = ((TypeVariable<?>) typeVariable).getBounds();\n+        for (Type bound : bounds) {\n+            if (bound instanceof ParameterizedType) {\n+                Type[] typeArgs = ((ParameterizedType) bound).getActualTypeArguments();\n+                if (typeArgs.length > 0) {\n+                    return typeArgs[0];\n+                }\n+            } else if (bound instanceof WildcardType) {\n+                Type[] upperBounds = ((WildcardType) bound).getUpperBounds();\n+                for (Type upperBound : upperBounds) {\n+                    if (upperBound instanceof ParameterizedType) {\n+                        Type[] typeArgs = ((ParameterizedType) upperBound).getActualTypeArguments();\n+                        if (typeArgs.length > 0) {\n+                            return typeArgs[0];\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return null;\n+}\n+\n+private void readTypeVariables() {\n+    if (typeVariable instanceof TypeVariable<?>) {\n+        Type[] bounds = ((TypeVariable<?>) typeVariable).getBounds();\n+        for (Type type : bounds) {\n+            registerTypeVariablesOn(type);\n+        }\n+        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+        if (actualTypeArgument != null) {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}