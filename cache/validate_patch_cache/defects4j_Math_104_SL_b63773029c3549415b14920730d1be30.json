{
    "patch": "package org.apache.commons.math4.special;\n\nimport org.apache.commons.math4.util.FastMath;\n\npublic class Gamma {\n\n    private static final double DEFAULT_EPSILON = 1e-9;\n\n    public static double regularizedGammaP(double a, double x) {\n        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n    }\n\n    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0 || x < 0) {\n            return Double.NaN;\n        }\n        if (x == 0) {\n            return 0;\n        }\n        if (x >= a + 1) {\n            return 1 - regularizedGammaQ(a, x, epsilon, maxIterations);\n        }\n\n        double n = 0;\n        double an = 1 / a;\n        double sum = an;\n        while (FastMath.abs(an / sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {\n            n++;\n            an *= x / (a + n);\n            sum += an;\n        }\n        if (n >= maxIterations) {\n            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, a, x);\n        }\n        return FastMath.exp(-x + a * FastMath.log(x) - logGamma(a)) * sum;\n    }\n\n    private static double logGamma(double x) {\n        return LanczosApproximation.logGamma(x);\n    }\n\n    private static double regularizedGammaQ(double a, double x, double epsilon, int maxIterations) {\n        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0 || x < 0) {\n            return Double.NaN;\n        }\n        if (x == 0) {\n            return 1;\n        }\n        if (x < a + 1) {\n            return 1 - regularizedGammaP(a, x, epsilon, maxIterations);\n        }\n\n        ContinuedFraction fraction = new ContinuedFraction() {\n            @Override\n            protected double getB(int n, double x) {\n                double ret = n + (a - 1) + x;\n                return ret == 0 ? Double.MIN_VALUE : ret;\n            }\n\n            @Override\n            protected double getA(int n, double x) {\n                return (n * (a - n)) * x;\n            }\n        };\n\n        return 1 / fraction.evaluate(x, epsilon, maxIterations);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bade3b581 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,7 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}