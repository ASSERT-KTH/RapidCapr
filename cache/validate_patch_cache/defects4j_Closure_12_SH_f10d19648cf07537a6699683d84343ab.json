{
    "patch": "  private boolean isExceptionThrown(Block block) {\n    List<Node> nodes = block.getNodes();\n    for (Node node : nodes) {\n      if (node instanceof FunctionCallNode) {\n        FunctionCallNode functionCallNode = (FunctionCallNode) node;\n        if (functionCallNode.getFunctionName().equals(\"throw\")) {\n          return true;\n        }\n      } else if (node instanceof ConditionNode) {\n        ConditionNode conditionNode = (ConditionNode) node;\n        Block ifBlock = conditionNode.getIfBlock();\n        Block elseBlock = conditionNode.getElseBlock();\n        if (isExceptionThrown(ifBlock) || isExceptionThrown(elseBlock)) {\n          return true;\n        }\n      } else if (node instanceof LoopNode) {\n        LoopNode loopNode = (LoopNode) node;\n        Block loopBlock = loopNode.getBlock();\n        if (isExceptionThrown(loopBlock)) {\n          return true;\n        }\n      } else if (node instanceof TryCatchNode) {\n        TryCatchNode tryCatchNode = (TryCatchNode) node;\n        Block tryBlock = tryCatchNode.getTryBlock();\n        Block catchBlock = tryCatchNode.getCatchBlock();\n        if (isExceptionThrown(tryBlock) && catchBlock != null) {\n          return true;\n        }\n      } else if(node instanceof Block){\n        if (isExceptionThrown((Block)node)){\n            return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  private boolean hasExceptionHandler(Node cfgNode) {\n    if (cfgNode instanceof Block) {\n      Block block = (Block) cfgNode;\n      List<Node> nodes = block.getNodes();\n      for (Node node : nodes) {\n        if (node instanceof TryCatchNode) {\n          TryCatchNode tryCatchNode = (TryCatchNode) node;\n          if (tryCatchNode.getCatchBlock() != null) {\n            return true;\n          }\n        }\n      }\n      return isExceptionThrown(block);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..c689d981 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,6 +157,57 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n+  private boolean isExceptionThrown(Block block) {\n+    List<Node> nodes = block.getNodes();\n+    for (Node node : nodes) {\n+      if (node instanceof FunctionCallNode) {\n+        FunctionCallNode functionCallNode = (FunctionCallNode) node;\n+        if (functionCallNode.getFunctionName().equals(\"throw\")) {\n+          return true;\n+        }\n+      } else if (node instanceof ConditionNode) {\n+        ConditionNode conditionNode = (ConditionNode) node;\n+        Block ifBlock = conditionNode.getIfBlock();\n+        Block elseBlock = conditionNode.getElseBlock();\n+        if (isExceptionThrown(ifBlock) || isExceptionThrown(elseBlock)) {\n+          return true;\n+        }\n+      } else if (node instanceof LoopNode) {\n+        LoopNode loopNode = (LoopNode) node;\n+        Block loopBlock = loopNode.getBlock();\n+        if (isExceptionThrown(loopBlock)) {\n+          return true;\n+        }\n+      } else if (node instanceof TryCatchNode) {\n+        TryCatchNode tryCatchNode = (TryCatchNode) node;\n+        Block tryBlock = tryCatchNode.getTryBlock();\n+        Block catchBlock = tryCatchNode.getCatchBlock();\n+        if (isExceptionThrown(tryBlock) && catchBlock != null) {\n+          return true;\n+        }\n+      } else if(node instanceof Block){\n+        if (isExceptionThrown((Block)node)){\n+            return true;\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  private boolean hasExceptionHandler(Node cfgNode) {\n+    if (cfgNode instanceof Block) {\n+      Block block = (Block) cfgNode;\n+      List<Node> nodes = block.getNodes();\n+      for (Node node : nodes) {\n+        if (node instanceof TryCatchNode) {\n+          TryCatchNode tryCatchNode = (TryCatchNode) node;\n+          if (tryCatchNode.getCatchBlock() != null) {\n+            return true;\n+          }\n+        }\n+      }\n+      return isExceptionThrown(block);\n+    }\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}