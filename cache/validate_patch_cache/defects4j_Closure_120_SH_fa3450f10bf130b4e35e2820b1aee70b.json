{
    "patch": "boolean isAssignedOnceInLifetime() {\n  Reference ref = getOneAndOnlyAssignment();\n  if (ref == null) {\n    return false;\n  }\n\n  // Make sure this assignment is not in a loop.\n  BasicBlock enclosingFunction = null;\n  for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {\n    if (block.isFunction) {\n      enclosingFunction = block;\n    }\n    if (block.isLoop) {\n      return false;\n    }\n  }\n  // Check if the variable is reassigned in the enclosing function.\n  for (BasicBlock block = ref.getBasicBlock(); block != enclosingFunction; block = block.getParent()) {\n    for (Node n : block.getClosureBody()) {\n      if (n.isExprResult()) {\n        Node expr = n.getFirstChild();\n        if (expr.isAssign() && expr.getFirstChild().matchesQualifiedName(ref.getName())) {\n          // Found a non-matching assignment, variable is reassigned.\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..2d5f4902 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,36 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+boolean isAssignedOnceInLifetime() {\n+  Reference ref = getOneAndOnlyAssignment();\n+  if (ref == null) {\n+    return false;\n+  }\n+\n+  // Make sure this assignment is not in a loop.\n+  BasicBlock enclosingFunction = null;\n+  for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {\n+    if (block.isFunction) {\n+      enclosingFunction = block;\n+    }\n+    if (block.isLoop) {\n+      return false;\n+    }\n+  }\n+  // Check if the variable is reassigned in the enclosing function.\n+  for (BasicBlock block = ref.getBasicBlock(); block != enclosingFunction; block = block.getParent()) {\n+    for (Node n : block.getClosureBody()) {\n+      if (n.isExprResult()) {\n+        Node expr = n.getFirstChild();\n+        if (expr.isAssign() && expr.getFirstChild().matchesQualifiedName(ref.getName())) {\n+          // Found a non-matching assignment, variable is reassigned.\n+          return false;\n+        }\n+      }\n+    }\n+  }\n+  return true;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}