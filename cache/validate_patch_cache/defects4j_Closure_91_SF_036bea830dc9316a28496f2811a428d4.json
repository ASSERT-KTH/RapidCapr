{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n    if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n      return false;\n    }\n    if (!isValidFunctionParent(parent)) {\n      return false;\n    }\n  } else if (n.getType() == Token.CALL) {\n    if (isThisAnnotatedFunctionCall(n)) {\n      return false;\n    }\n  }\n  if (isPrototypeChain(n)) {\n    return false;\n  }\n  return true;\n}\nprivate boolean isValidFunctionParent(Node parent) {\n  if (parent == null) {\n    return false;\n  }\n  if (NodeUtil.isFunction(parent)) {\n    // Only traverse the top-level function; deeper functions are superfluous.\n    return false;\n  }\n  int parentType = parent.getType();\n  if (parentType == Token.EXPR_RESULT || parentType == Token.VAR || parentType == Token.LET || parentType == Token.CONST) {\n    return true;\n  }\n  if (parentType == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    if (NodeUtil.isName(lhs)) {\n      return true;\n    }\n    if (NodeUtil.isGet(lhs)) {\n      return isValidFunctionParent(lhs.getFirstChild());\n    }\n  }\n  if (parentType == Token.OBJECTLIT || parentType == Token.ARRAYLIT || parentType == Token.CALL) {\n    return true;\n  }\n  return false;\n}\n\nprivate boolean isPrototypeChain(Node n) {\n  if (n.getType() == Token.GETPROP) {\n    Node parent = n.getParent();\n    if (parent.getType() == Token.ASSIGN && parent.getFirstChild().getType() == Token.GETPROP && parent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n      Node grandparent = parent.getParent();\n      if (grandparent.getType() == Token.EXPR_RESULT) {\n        grandparent = grandparent.getParent();\n      }\n      if (grandparent.getType() == Token.SCRIPT) {\n        Node greatGrandparent = grandparent.getParent();\n        // Don't traverse the closure of a class definition.\n        if (greatGrandparent != null && greatGrandparent.getParent() != null && greatGrandparent.getParent().getType() == Token.CLASS) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\nprivate boolean isThisAnnotatedFunctionCall(Node n) {\n  if (NodeUtil.isCall(n)) {\n    Node callee = n.getFirstChild();\n    if (callee != null && callee.isQualifiedName()) {\n      String rootName = callee.getQualifiedName();\n      if (rootName != null && rootName.equals(\"goog.bind\") && n.getSecondChild() != null) {\n        Node boundFunctionCall = n.getSecondChild();\n        if (boundFunctionCall.isFunction()) {\n          JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(boundFunctionCall);\n          if (jsDoc != null && jsDoc.hasThisType()) {\n            return true;\n          }\n        }\n      } else if (rootName != null && rootName.equals(\"goog.partial\") && n.getSecondChild() != null) {\n        Node partialFunctionCall = n.getSecondChild();\n        if (partialFunctionCall.isFunction()) {\n          JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(partialFunctionCall);\n          if (jsDoc != null && jsDoc.hasThisType()) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..62e509f6 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,71 +79,98 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+  if (n.getType() == Token.FUNCTION) {\n+    JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+    if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n+      return false;\n+    }\n+    if (!isValidFunctionParent(parent)) {\n+      return false;\n+    }\n+  } else if (n.getType() == Token.CALL) {\n+    if (isThisAnnotatedFunctionCall(n)) {\n+      return false;\n+    }\n+  }\n+  if (isPrototypeChain(n)) {\n+    return false;\n+  }\n+  return true;\n+}\n+private boolean isValidFunctionParent(Node parent) {\n+  if (parent == null) {\n+    return false;\n+  }\n+  if (NodeUtil.isFunction(parent)) {\n+    // Only traverse the top-level function; deeper functions are superfluous.\n+    return false;\n+  }\n+  int parentType = parent.getType();\n+  if (parentType == Token.EXPR_RESULT || parentType == Token.VAR || parentType == Token.LET || parentType == Token.CONST) {\n+    return true;\n+  }\n+  if (parentType == Token.ASSIGN) {\n+    Node lhs = parent.getFirstChild();\n+    if (NodeUtil.isName(lhs)) {\n+      return true;\n+    }\n+    if (NodeUtil.isGet(lhs)) {\n+      return isValidFunctionParent(lhs.getFirstChild());\n+    }\n+  }\n+  if (parentType == Token.OBJECTLIT || parentType == Token.ARRAYLIT || parentType == Token.CALL) {\n+    return true;\n+  }\n+  return false;\n+}\n \n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n+private boolean isPrototypeChain(Node n) {\n+  if (n.getType() == Token.GETPROP) {\n+    Node parent = n.getParent();\n+    if (parent.getType() == Token.ASSIGN && parent.getFirstChild().getType() == Token.GETPROP && parent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n+      Node grandparent = parent.getParent();\n+      if (grandparent.getType() == Token.EXPR_RESULT) {\n+        grandparent = grandparent.getParent();\n       }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n-        return false;\n+      if (grandparent.getType() == Token.SCRIPT) {\n+        Node greatGrandparent = grandparent.getParent();\n+        // Don't traverse the closure of a class definition.\n+        if (greatGrandparent != null && greatGrandparent.getParent() != null && greatGrandparent.getParent().getType() == Token.CLASS) {\n+          return true;\n+        }\n       }\n-\n-      // Don't traverse functions that are getting lent to a prototype.\n     }\n+  }\n+  return false;\n+}\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-\n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n+private boolean isThisAnnotatedFunctionCall(Node n) {\n+  if (NodeUtil.isCall(n)) {\n+    Node callee = n.getFirstChild();\n+    if (callee != null && callee.isQualifiedName()) {\n+      String rootName = callee.getQualifiedName();\n+      if (rootName != null && rootName.equals(\"goog.bind\") && n.getSecondChild() != null) {\n+        Node boundFunctionCall = n.getSecondChild();\n+        if (boundFunctionCall.isFunction()) {\n+          JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(boundFunctionCall);\n+          if (jsDoc != null && jsDoc.hasThisType()) {\n+            return true;\n           }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n+        }\n+      } else if (rootName != null && rootName.equals(\"goog.partial\") && n.getSecondChild() != null) {\n+        Node partialFunctionCall = n.getSecondChild();\n+        if (partialFunctionCall.isFunction()) {\n+          JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(partialFunctionCall);\n+          if (jsDoc != null && jsDoc.hasThisType()) {\n+            return true;\n           }\n         }\n       }\n     }\n-\n-    return true;\n   }\n+  return false;\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}