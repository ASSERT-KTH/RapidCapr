{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    // rescale both vectors so that their norms are not too far apart\n    final double norm1 = v1.getNorm();\n    final double norm2 = v2.getNorm();\n    final double norm = norm1 * norm2;\n\n    if (norm == 0) {\n        return Vector3D.ZERO;\n    }\n\n    final double tol = 2 * norm * SafeMath.ulp(norm);\n\n    if (norm1 < tol || norm2 < tol) {\n        // at least one vector is extremely small: cross product should be\n        // relative to the largest scale\n        final double factor = FastMath.sqrt(norm / (1 + norm1 * norm1 / norm2 / norm2));\n        return v2.scalarMultiply(factor).crossProduct(v1.scalarMultiply(1.0 / factor));\n    }\n\n    return new Vector3D(v1.y * v2.z - v1.z * v2.y,\n                        v1.z * v2.x - v1.x * v2.z,\n                        v1.x * v2.y - v1.y * v2.x);\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..1d2c5ff59 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,31 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n+    // rescale both vectors so that their norms are not too far apart\n+    final double norm1 = v1.getNorm();\n+    final double norm2 = v2.getNorm();\n+    final double norm = norm1 * norm2;\n \n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+    if (norm == 0) {\n+        return Vector3D.ZERO;\n+    }\n \n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    final double tol = 2 * norm * SafeMath.ulp(norm);\n \n+    if (norm1 < tol || norm2 < tol) {\n+        // at least one vector is extremely small: cross product should be\n+        // relative to the largest scale\n+        final double factor = FastMath.sqrt(norm / (1 + norm1 * norm1 / norm2 / norm2));\n+        return v2.scalarMultiply(factor).crossProduct(v1.scalarMultiply(1.0 / factor));\n+    }\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    return new Vector3D(v1.y * v2.z - v1.z * v2.y,\n+                        v1.z * v2.x - v1.x * v2.z,\n+                        v1.x * v2.y - v1.y * v2.x);\n \n-  }\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}