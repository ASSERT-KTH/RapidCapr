{
    "patch": "  private void inlineAliases(GlobalNamespace namespace) {\n    Deque<Name> workList = new ArrayDeque<>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      if (name.kind() == Kind.GET || name.kind() == Kind.SET) {\n        continue;\n      }\n\n      if (name.getGlobalSets() == 1 && name.getLocalSets() == 0 &&\n          name.getAliasingGets() > 0) {\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type() == Type.ALIASING_GET && ref.scope().isLocal()) {\n            if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n            }\n          }\n        }\n      }\n\n      if ((name.kind() == Kind.OBJECTLIT || name.kind() == Kind.FUNCTION) &&\n          name.getAliasingGets() == 0 && name.getProps() != null) {\n        workList.addAll(name.getProps());\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..2d11bdef 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -159,24 +159,19 @@ class CollapseProperties implements CompilerPass {\n    * @see InlineVariables\n    */\n   private void inlineAliases(GlobalNamespace namespace) {\n-    // Invariant: All the names in the worklist meet condition (a).\n-    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n+    Deque<Name> workList = new ArrayDeque<>(namespace.getNameForest());\n     while (!workList.isEmpty()) {\n       Name name = workList.pop();\n \n-      // Don't attempt to inline a getter or setter property as a variable.\n-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+      if (name.kind() == Kind.GET || name.kind() == Kind.SET) {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n+      if (name.getGlobalSets() == 1 && name.getLocalSets() == 0 &&\n+          name.getAliasingGets() > 0) {\n         List<Ref> refs = Lists.newArrayList(name.getRefs());\n         for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n+          if (ref.type() == Type.ALIASING_GET && ref.scope().isLocal()) {\n             if (inlineAliasIfPossible(ref, namespace)) {\n               name.removeRef(ref);\n             }\n@@ -184,14 +179,9 @@ class CollapseProperties implements CompilerPass {\n         }\n       }\n \n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n+      if ((name.kind() == Kind.OBJECTLIT || name.kind() == Kind.FUNCTION) &&\n+          name.getAliasingGets() == 0 && name.getProps() != null) {\n+        workList.addAll(name.getProps());\n       }\n     }\n   }",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}