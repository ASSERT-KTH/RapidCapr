{
    "patch": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        \n        // fix bug where months are not supported by using years and months to calculate duration\n        int years = FieldUtils.safeAdd(getYears(), getMonths() / 12);\n        int months = getMonths() % 12;\n        Period result = new Period(years, months, getWeeks(), getDays(), getHours(),\n                getMinutes(), getSeconds(), millis, type);\n\n        return result.normalizedStandard(type);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..1ef316ca 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1621,20 +1621,14 @@ public final class Period\n         millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n         millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n         millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n+        \n+        // fix bug where months are not supported by using years and months to calculate duration\n+        int years = FieldUtils.safeAdd(getYears(), getMonths() / 12);\n+        int months = getMonths() % 12;\n+        Period result = new Period(years, months, getWeeks(), getDays(), getHours(),\n+                getMinutes(), getSeconds(), millis, type);\n+\n+        return result.normalizedStandard(type);\n     }\n \n }",
    "result_reason": "error: no suitable constructor found for Period(int,int,int,int,int,int,int,long,PeriodType)",
    "test_result": "ERROR"
}