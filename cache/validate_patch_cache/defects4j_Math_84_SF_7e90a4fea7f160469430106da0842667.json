{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex.clone();\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = expanded.getPoint() == original[0].getPoint()\n                            ? new RealPointValuePair[] { expanded, original[1], original[2] }\n                            : expanded.getPoint() == original[1].getPoint()\n                                    ? new RealPointValuePair[] { original[0], expanded, original[2] }\n                                    : new RealPointValuePair[] { original[0], original[1], expanded };\n                } else {\n                    // accept the reflected point\n                    simplex = reflectedSimplex;\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // Fit the simplex around the contracted point\n                simplex = new RealPointValuePair[original.length];\n                simplex[0] = best;\n                for (int i = 1; i < original.length; i++) {\n                    simplex[i] = new RealPointValuePair(\n                            original[0].getPoint().add(original[i].getPoint().subtract(original[0].getPoint())\n                                    .scalarMultiply(sigma)),\n                            Double.NaN);\n                }\n                Arrays.sort(simplex, comparator);\n            } else {\n                // check convergence\n                final double[] xSmallest = original[0].getPoint(), xLargest = original[0].getPoint();\n                for (final RealPointValuePair vertex : simplex) {\n                    final double[] x = vertex.getPoint();\n                    for (int i = 0; i < getDimension(); i++) {\n                        xSmallest[i] = FastMath.min(xSmallest[i], x[i]);\n                        xLargest[i] = FastMath.max(xLargest[i], x[i]);\n                    }\n                }\n                boolean converged = true;\n                for (int i = 0; i < getDimension(); i++) {\n                    converged &= (xLargest[i] - xSmallest[i]) < getAbsoluteThreshold()\n                            && absoluteTolerance != 0;\n                    converged &= (xLargest[i] - xSmallest[i]) / FastMath.max(FastMath.abs(xSmallest[i]),\n                            FastMath.abs(xLargest[i])) < getRelativeThreshold()\n                            && relativeTolerance != 0;\n                }\n                if (converged || getIterations() >= getMaxIterations()) {\n                    return;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..038c18613 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,8 +58,8 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n \n@@ -74,10 +74,17 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             if (comparator.compare(reflected, best) < 0) {\n \n                 // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n+                final RealPointValuePair[] reflectedSimplex = simplex.clone();\n                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = expanded.getPoint() == original[0].getPoint()\n+                            ? new RealPointValuePair[] { expanded, original[1], original[2] }\n+                            : expanded.getPoint() == original[1].getPoint()\n+                                    ? new RealPointValuePair[] { original[0], expanded, original[2] }\n+                                    : new RealPointValuePair[] { original[0], original[1], expanded };\n+                } else {\n+                    // accept the reflected point\n                     simplex = reflectedSimplex;\n                 }\n \n@@ -88,15 +95,36 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n-            }\n-\n-        }\n-\n-    }\n+                // Fit the simplex around the contracted point\n+                simplex = new RealPointValuePair[original.length];\n+                simplex[0] = best;\n+                for (int i = 1; i < original.length; i++) {\n+                    simplex[i] = new RealPointValuePair(\n+                            original[0].getPoint().add(original[i].getPoint().subtract(original[0].getPoint())\n+                                    .scalarMultiply(sigma)),\n+                            Double.NaN);\n+                }\n+                Arrays.sort(simplex, comparator);\n+            } else {\n+                // check convergence\n+                final double[] xSmallest = original[0].getPoint(), xLargest = original[0].getPoint();\n+                for (final RealPointValuePair vertex : simplex) {\n+                    final double[] x = vertex.getPoint();\n+                    for (int i = 0; i < getDimension(); i++) {\n+                        xSmallest[i] = FastMath.min(xSmallest[i], x[i]);\n+                        xLargest[i] = FastMath.max(xLargest[i], x[i]);\n+                    }\n+                }\n+                boolean converged = true;\n+                for (int i = 0; i < getDimension(); i++) {\n+                    converged &= (xLargest[i] - xSmallest[i]) < getAbsoluteThreshold()\n+                            && absoluteTolerance != 0;\n+                    converged &= (xLargest[i] - xSmallest[i]) / FastMath.max(FastMath.abs(xSmallest[i]),\n+                            FastMath.abs(xLargest[i])) < getRelativeThreshold()\n+                            && relativeTolerance != 0;\n+                }\n+                if (converged || getIterations() >= getMaxIterations()) {\n+                    return;\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}