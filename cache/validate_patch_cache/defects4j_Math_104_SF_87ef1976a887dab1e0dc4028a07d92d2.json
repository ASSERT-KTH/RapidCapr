{
    "patch": "\npublic static double regularizedGammaP(double a, double x) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException(\"Invalid arguments. a must be positive and x must be non-negative.\");\n    }\n    if (x == 0) {\n        return 0.0;\n    }\n    double sum = 1.0 / a;\n    double term = sum;\n    while (Math.abs(term) > RELATIVE_ERROR_TOLERANCE * Math.abs(sum)) {\n        term *= x / (a + sum);\n        sum += term;\n    }\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n}\n",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..1b34454ca 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,23 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException(\"Invalid arguments. a must be positive and x must be non-negative.\");\n+    }\n+    if (x == 0) {\n+        return 0.0;\n+    }\n+    double sum = 1.0 / a;\n+    double term = sum;\n+    while (Math.abs(term) > RELATIVE_ERROR_TOLERANCE * Math.abs(sum)) {\n+        term *= x / (a + sum);\n+        sum += term;\n+    }\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+}\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}