{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // Get the initial offset based on the given local time\n    int initialOffset = getOffset(instantLocal);\n\n    // Check for transitions at the start and end of the day of the local time\n    long startOfDay = DateTimeUtils.getFragment(DateTimeUtils.currentTimeMillis(), DateTimeConstants.MILLIS_PER_DAY);\n    long startOfDayLocal = DateTimeUtils.getFragment(instantLocal, DateTimeConstants.MILLIS_PER_DAY) + initialOffset;\n    int startOfDayOffset = getOffset(startOfDayLocal);\n    long endOfDayLocal = startOfDayLocal + DateTimeConstants.MILLIS_PER_DAY - initialOffset;\n    int endOfDayOffset = getOffset(endOfDayLocal);\n\n    if (startOfDayOffset != initialOffset && endOfDayOffset != initialOffset) {\n        // Two transitions in one day, we have no way of knowing which one is the correct transition to use\n        throw new IllegalArgumentException(\"Ambiguous time: \" + new DateTime(instantLocal).toString());\n    }\n\n    if (startOfDayOffset != initialOffset && startOfDayLocal < instantLocal) {\n        // Earlier transition of the day\n        initialOffset = startOfDayOffset;\n    } else if (endOfDayOffset != initialOffset && endOfDayLocal > instantLocal) {\n        // Later transition of the day\n        initialOffset = endOfDayOffset;\n    } else if (startOfDayOffset == endOfDayOffset && startOfDayOffset != initialOffset) {\n        // One transition in the day\n        initialOffset = startOfDayOffset;\n    }\n\n    // Check for transitions from previous and next days\n    int previousOffset, nextOffset;\n    int millisInDay = millisOfDay(instantLocal, initialOffset);\n    long prevLocal = instantLocal - millisInDay - 1;\n    previousOffset = getOffset(prevLocal);\n\n    int millisUntilNextDay = (int) (DateTimeConstants.MILLIS_PER_DAY - millisInDay);\n    int nextOffsetIndex = millisUntilNextDay == 0 ? 2 : 0;\n    long nextLocal = instantLocal + millisUntilNextDay;\n    nextOffset = getOffset(nextLocal);\n\n    if (previousOffset == nextOffset) {\n        // No DST transition in the day or near the given instant\n        return initialOffset;\n    } else if (previousOffset > initialOffset || nextOffset < initialOffset) {\n        // We're in a gap\n        throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" + new DateTime(instantLocal).toString());\n    } else {\n        // Return the offset for the previous or next day depending on which one has the same offset as the initial\n        return initialOffset == previousOffset ? previousOffset : nextOffset;\n    }\n}\n\nprivate static int millisOfDay(long instantLocal, int offset) {\n    return ((int) ((instantLocal + offset) % DateTimeConstants.MILLIS_PER_DAY) + DateTimeConstants.MILLIS_PER_DAY) % DateTimeConstants.MILLIS_PER_DAY;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..23c9f9dc 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,60 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        }\n-        return offsetAdjusted;\n+public int getOffsetFromLocal(long instantLocal) {\n+    // Get the initial offset based on the given local time\n+    int initialOffset = getOffset(instantLocal);\n+\n+    // Check for transitions at the start and end of the day of the local time\n+    long startOfDay = DateTimeUtils.getFragment(DateTimeUtils.currentTimeMillis(), DateTimeConstants.MILLIS_PER_DAY);\n+    long startOfDayLocal = DateTimeUtils.getFragment(instantLocal, DateTimeConstants.MILLIS_PER_DAY) + initialOffset;\n+    int startOfDayOffset = getOffset(startOfDayLocal);\n+    long endOfDayLocal = startOfDayLocal + DateTimeConstants.MILLIS_PER_DAY - initialOffset;\n+    int endOfDayOffset = getOffset(endOfDayLocal);\n+\n+    if (startOfDayOffset != initialOffset && endOfDayOffset != initialOffset) {\n+        // Two transitions in one day, we have no way of knowing which one is the correct transition to use\n+        throw new IllegalArgumentException(\"Ambiguous time: \" + new DateTime(instantLocal).toString());\n     }\n \n+    if (startOfDayOffset != initialOffset && startOfDayLocal < instantLocal) {\n+        // Earlier transition of the day\n+        initialOffset = startOfDayOffset;\n+    } else if (endOfDayOffset != initialOffset && endOfDayLocal > instantLocal) {\n+        // Later transition of the day\n+        initialOffset = endOfDayOffset;\n+    } else if (startOfDayOffset == endOfDayOffset && startOfDayOffset != initialOffset) {\n+        // One transition in the day\n+        initialOffset = startOfDayOffset;\n+    }\n+\n+    // Check for transitions from previous and next days\n+    int previousOffset, nextOffset;\n+    int millisInDay = millisOfDay(instantLocal, initialOffset);\n+    long prevLocal = instantLocal - millisInDay - 1;\n+    previousOffset = getOffset(prevLocal);\n+\n+    int millisUntilNextDay = (int) (DateTimeConstants.MILLIS_PER_DAY - millisInDay);\n+    int nextOffsetIndex = millisUntilNextDay == 0 ? 2 : 0;\n+    long nextLocal = instantLocal + millisUntilNextDay;\n+    nextOffset = getOffset(nextLocal);\n+\n+    if (previousOffset == nextOffset) {\n+        // No DST transition in the day or near the given instant\n+        return initialOffset;\n+    } else if (previousOffset > initialOffset || nextOffset < initialOffset) {\n+        // We're in a gap\n+        throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" + new DateTime(instantLocal).toString());\n+    } else {\n+        // Return the offset for the previous or next day depending on which one has the same offset as the initial\n+        return initialOffset == previousOffset ? previousOffset : nextOffset;\n+    }\n+}\n+\n+private static int millisOfDay(long instantLocal, int offset) {\n+    return ((int) ((instantLocal + offset) % DateTimeConstants.MILLIS_PER_DAY) + DateTimeConstants.MILLIS_PER_DAY) % DateTimeConstants.MILLIS_PER_DAY;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}