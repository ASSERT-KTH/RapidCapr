{
    "patch": "private void findCalledFunctions(Node node, Set<String> changed) {\n    Preconditions.checkNotNull(changed);  // changed should not be null\n    // For each referenced function, add a new reference\n    switch (node.getToken()) {  // use switch statement for cleaner code\n      case Token.CALL:\n        Node child = node.getFirstChild();\n        if (child.getToken() == Token.NAME) {  // use Token constants for readability\n          changed.add(child.getString());\n        }\n        break;\n      case Token.FUNCTION:  // exclude function declarations\n        break;\n      default:\n        for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n          findCalledFunctions(c, changed);\n        }\n        break;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..65e68a54 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -770,19 +770,23 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n   /**\n    * @see #findCalledFunctions(Node)\n    */\n-  private void findCalledFunctions(\n-      Node node, Set<String> changed) {\n-    Preconditions.checkArgument(changed != null);\n+private void findCalledFunctions(Node node, Set<String> changed) {\n+    Preconditions.checkNotNull(changed);  // changed should not be null\n     // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n-      }\n-    }\n-\n-    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n-      findCalledFunctions(c, changed);\n+    switch (node.getToken()) {  // use switch statement for cleaner code\n+      case Token.CALL:\n+        Node child = node.getFirstChild();\n+        if (child.getToken() == Token.NAME) {  // use Token constants for readability\n+          changed.add(child.getString());\n+        }\n+        break;\n+      case Token.FUNCTION:  // exclude function declarations\n+        break;\n+      default:\n+        for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+          findCalledFunctions(c, changed);\n+        }\n+        break;\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}