{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (!n.isBlock()) {\n    return false;\n  }\n  if (n.hasOneChild()) {\n    Node maybeExpr = n.getFirstChild();\n    if (maybeExpr.isExprResult() && maybeExpr.hasOneChild()) {\n      maybeExpr = maybeExpr.getFirstChild();\n    }\n    switch (maybeExpr.getToken()) {\n      case GETELEM:\n      case GETPROP:\n        if (isFoldable(maybeExpr.getLastChild())) {\n          return true;\n        }\n        break;\n      case CALL:\n        if (maybeExpr.getFirstChild().isQualifiedName()) {\n          return true;\n        }\n        break;\n      case NEW:\n      case TAGGED_TEMPLATELIT:\n      case TEMPLATELIT:\n        // These always return objects, so they cannot be removed.\n        return false;\n      case FUNCTION:\n        return !NodeUtil.isControlStructureCodeBlock(n.getParent(), n)\n            && NodeUtil.getEnclosingType(n, Token.FUNCTION) == maybeExpr;\n      case ARRAYLIT:\n        for (Node child = maybeExpr.getFirstChild(); child != null; child = child.getNext()) {\n          if (!isFoldable(child)) {\n            return false;\n          }\n        }\n        return true;\n      case OBJECTLIT:\n        if (maybeExpr.hasOneChild()) {\n          Node maybePair = maybeExpr.getFirstChild();\n          if (maybePair.isObjectLitProperty()) {\n            Node value = maybePair.getFirstChild().getNext();\n            if (value != null && isFoldable(value)) {\n              return true;\n            }\n          }\n        }\n        break;\n      case CONDITIONAL:\n        return isFoldable(new Node(Token.BLOCK, maybeExpr.getSecondChild()))\n            && isFoldable(new Node(Token.BLOCK, maybeExpr.getLastChild()));\n      case NOT:\n      case POS:\n      case NEG:\n        if (isFoldable(maybeExpr.getFirstChild())) {\n          return true;\n        }\n        break;\n      default:\n        if (isFoldable(maybeExpr)) {\n          return true;\n        }\n    }\n  }\n  return false;\n}\n\nprivate boolean isFoldable(Node n) {\n  if (n.isName()) {\n    String name = n.getString();\n    return !name.equals(\"this\");\n  } else {\n    return n.isLiteral() || n.isFunction() || n.isObjectLit();\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..daecb4e3 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,80 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (!n.isBlock()) {\n+    return false;\n+  }\n+  if (n.hasOneChild()) {\n+    Node maybeExpr = n.getFirstChild();\n+    if (maybeExpr.isExprResult() && maybeExpr.hasOneChild()) {\n+      maybeExpr = maybeExpr.getFirstChild();\n+    }\n+    switch (maybeExpr.getToken()) {\n+      case GETELEM:\n+      case GETPROP:\n+        if (isFoldable(maybeExpr.getLastChild())) {\n+          return true;\n+        }\n+        break;\n+      case CALL:\n+        if (maybeExpr.getFirstChild().isQualifiedName()) {\n+          return true;\n+        }\n+        break;\n+      case NEW:\n+      case TAGGED_TEMPLATELIT:\n+      case TEMPLATELIT:\n+        // These always return objects, so they cannot be removed.\n+        return false;\n+      case FUNCTION:\n+        return !NodeUtil.isControlStructureCodeBlock(n.getParent(), n)\n+            && NodeUtil.getEnclosingType(n, Token.FUNCTION) == maybeExpr;\n+      case ARRAYLIT:\n+        for (Node child = maybeExpr.getFirstChild(); child != null; child = child.getNext()) {\n+          if (!isFoldable(child)) {\n+            return false;\n+          }\n+        }\n+        return true;\n+      case OBJECTLIT:\n+        if (maybeExpr.hasOneChild()) {\n+          Node maybePair = maybeExpr.getFirstChild();\n+          if (maybePair.isObjectLitProperty()) {\n+            Node value = maybePair.getFirstChild().getNext();\n+            if (value != null && isFoldable(value)) {\n+              return true;\n+            }\n+          }\n+        }\n+        break;\n+      case CONDITIONAL:\n+        return isFoldable(new Node(Token.BLOCK, maybeExpr.getSecondChild()))\n+            && isFoldable(new Node(Token.BLOCK, maybeExpr.getLastChild()));\n+      case NOT:\n+      case POS:\n+      case NEG:\n+        if (isFoldable(maybeExpr.getFirstChild())) {\n+          return true;\n+        }\n+        break;\n+      default:\n+        if (isFoldable(maybeExpr)) {\n+          return true;\n+        }\n     }\n+  }\n+  return false;\n+}\n \n-    return false;\n+private boolean isFoldable(Node n) {\n+  if (n.isName()) {\n+    String name = n.getString();\n+    return !name.equals(\"this\");\n+  } else {\n+    return n.isLiteral() || n.isFunction() || n.isObjectLit();\n   }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}