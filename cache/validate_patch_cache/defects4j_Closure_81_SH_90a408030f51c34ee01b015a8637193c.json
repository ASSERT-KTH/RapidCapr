{
    "patch": "if (name == null || name.getIdentifier() == null) {\n    name = new Name();\n    name.setIdentifier(\"\");\n}\n\nNode node = newNode(Token.FUNCTION);\n\n// add name\nNode newName = transform(name);\nnewName.setLineno(functionNode.getLineno());\nint nameCharno = functionNode.getFunctionType().equals(Token.GETPROP) ?\n        position2charno(name.getEnd()) - name.getLength() :\n        functionNode.getAbsolutePosition();\nnewName.setCharno(position2charno(nameCharno));\nnode.addChildToBack(newName);\n\n// create function's parameters\nNode lp = newNode(Token.LP);\nlp.setLineno(functionNode.getLineno());\nint lpCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\nlp.setCharno(position2charno(lpCharno));\nfor (AstNode param : functionNode.getParams()) {\n    lp.addChildToBack(transform(param));\n}\nnode.addChildToBack(lp);\n\n// add body\nNode bodyNode = transform(functionNode.getBody());\nparseDirectives(bodyNode);\nnode.addChildToBack(bodyNode);\nreturn node;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..9673f181 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,37 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+if (name == null || name.getIdentifier() == null) {\n+    name = new Name();\n+    name.setIdentifier(\"\");\n+}\n+\n+Node node = newNode(Token.FUNCTION);\n+\n+// add name\n+Node newName = transform(name);\n+newName.setLineno(functionNode.getLineno());\n+int nameCharno = functionNode.getFunctionType().equals(Token.GETPROP) ?\n+        position2charno(name.getEnd()) - name.getLength() :\n+        functionNode.getAbsolutePosition();\n+newName.setCharno(position2charno(nameCharno));\n+node.addChildToBack(newName);\n+\n+// create function's parameters\n+Node lp = newNode(Token.LP);\n+lp.setLineno(functionNode.getLineno());\n+int lpCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n+lp.setCharno(position2charno(lpCharno));\n+for (AstNode param : functionNode.getParams()) {\n+    lp.addChildToBack(transform(param));\n+}\n+node.addChildToBack(lp);\n+\n+// add body\n+Node bodyNode = transform(functionNode.getBody());\n+parseDirectives(bodyNode);\n+node.addChildToBack(bodyNode);\n+return node;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: int cannot be dereferenced",
    "test_result": "ERROR"
}