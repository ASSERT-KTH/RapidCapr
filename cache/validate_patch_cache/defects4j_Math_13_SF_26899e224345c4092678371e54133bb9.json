{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition eig = new EigenDecomposition(m);\n    final RealMatrix d = eig.getD();\n    final RealMatrix v = eig.getV();\n    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(\n            Arrays.stream(d.getRow(0)).map(x -> x > 0 ? Math.sqrt(x) : 0).toArray());\n    final RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..8746fbbde 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,13 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition eig = new EigenDecomposition(m);\n+    final RealMatrix d = eig.getD();\n+    final RealMatrix v = eig.getV();\n+    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(\n+            Arrays.stream(d.getRow(0)).map(x -> x > 0 ? Math.sqrt(x) : 0).toArray());\n+    final RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}