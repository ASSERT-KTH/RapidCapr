{
    "patch": "int end = input.length();\nStringBuilder output = new StringBuilder(end);\nfor (int i = 0; i < end; i++) {\n    char c = input.charAt(i);\n    if (c == '+') {\n        output.append(' ');\n    } else if (c == '%') {\n        if (i + 2 < end) {\n            int d = digit16(input.charAt(i + 1));\n            int e = digit16(input.charAt(i + 2));\n            if (d != -1 && e != -1) {\n                output.append((char) ((d << 4) + e));\n                i += 2;\n                continue;\n            }\n        }\n        output.append('%');\n    } else {\n        output.append(c);\n    }\n}\nString decoded = output.toString();\nassertTrue(\"One or more errors detected\", decoded.equals(outputStr));",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}