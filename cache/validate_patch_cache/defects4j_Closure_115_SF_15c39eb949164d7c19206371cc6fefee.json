{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    // Get the block node of `fnNode`.\n    Node block = fnNode.getLastChild();\n\n    // Check if `block` has any side effects.\n    // If it does, then we cannot inline.\n    boolean hasSideEffects = false;\n    if (block.hasChildren()) {\n        Preconditions.checkState(block.hasOneChild());\n        Node stmt = block.getFirstChild();\n        if (stmt.isReturn()) {\n            hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n        }\n    }\n    if (hasSideEffects) {\n        return CanInlineResult.NO;\n    }\n\n    // Check that `fnNode` is a FUNCTION node and has only one child.\n    if (!fnNode.isFunction() || !fnNode.hasOneChild()) {\n        return CanInlineResult.NO;\n    }\n\n    // Get the parameter nodes of `fnNode`.\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n    // Get the argument nodes of `callNode`.\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Traverse both node lists to check if we can inline directly.\n    while (fnParam != null && cArg != null) {\n        if (!fnParam.isName() || !cArg.isName()) {\n            return CanInlineResult.NO;\n        }\n\n        if (fnParam.getString().equals(\"arguments\") || cArg.getString().equals(\"arguments\")) {\n            return CanInlineResult.NO;\n        }\n\n        // If there are any side effects in the argument nodes,\n        // or if the argument nodes can be side effected, then we cannot inline.\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler) ||\n            hasMutableSideEffect(cArg.getNext(), block, fnParam.getString())) {\n            return CanInlineResult.NO;\n        }\n\n        fnParam = fnParam.getNext();\n        cArg = cArg.getNext();\n    }\n\n    // If both lists were traversed completely, then we can inline.\n    return (fnParam == null && cArg == null) ? CanInlineResult.YES : CanInlineResult.NO;\n}\n\n// Helper function to check if an argument node's value can be side effected.\nprivate boolean hasMutableSideEffect(Node node, Node scope, String varName) {\n    // If the node is a NAME node, it should have the same name as the parameter node.\n    if (node.isName() && node.getString().equals(varName)) {\n        // Check if it is mutated in the block.\n        int numRefs = NodeUtil.getNameReferenceCount(scope, varName);\n        int numMutations = NodeUtil.getNameMutationCount(scope, varName);\n        return numMutations > numRefs;\n    }\n\n    // If the node has children, check each of them recursively.\n    for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n        if (hasMutableSideEffect(child, scope, varName)) {\n            return true;\n        }\n    }\n\n    // No side effects were found.\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..a44d4603 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,76 +686,80 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n-\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+    // Get the block node of `fnNode`.\n     Node block = fnNode.getLastChild();\n \n+    // Check if `block` has any side effects.\n+    // If it does, then we cannot inline.\n     boolean hasSideEffects = false;\n     if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n+        Preconditions.checkState(block.hasOneChild());\n+        Node stmt = block.getFirstChild();\n+        if (stmt.isReturn()) {\n+            hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n+        }\n+    }\n+    if (hasSideEffects) {\n+        return CanInlineResult.NO;\n     }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n+    // Check that `fnNode` is a FUNCTION node and has only one child.\n+    if (!fnNode.isFunction() || !fnNode.hasOneChild()) {\n+        return CanInlineResult.NO;\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n+    // Get the parameter nodes of `fnNode`.\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n+\n+    // Get the argument nodes of `callNode`.\n+    Node cArg = callNode.getFirstChild().getNext();\n+\n+    // Traverse both node lists to check if we can inline directly.\n+    while (fnParam != null && cArg != null) {\n+        if (!fnParam.isName() || !cArg.isName()) {\n             return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+        }\n+\n+        if (fnParam.getString().equals(\"arguments\") || cArg.getString().equals(\"arguments\")) {\n+            return CanInlineResult.NO;\n+        }\n+\n+        // If there are any side effects in the argument nodes,\n+        // or if the argument nodes can be side effected, then we cannot inline.\n+        if (NodeUtil.mayHaveSideEffects(cArg, compiler) ||\n+            hasMutableSideEffect(cArg.getNext(), block, fnParam.getString())) {\n             return CanInlineResult.NO;\n-          }\n         }\n \n-        // Move to the next name.\n         fnParam = fnParam.getNext();\n-      }\n+        cArg = cArg.getNext();\n+    }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n+    // If both lists were traversed completely, then we can inline.\n+    return (fnParam == null && cArg == null) ? CanInlineResult.YES : CanInlineResult.NO;\n+}\n+\n+// Helper function to check if an argument node's value can be side effected.\n+private boolean hasMutableSideEffect(Node node, Node scope, String varName) {\n+    // If the node is a NAME node, it should have the same name as the parameter node.\n+    if (node.isName() && node.getString().equals(varName)) {\n+        // Check if it is mutated in the block.\n+        int numRefs = NodeUtil.getNameReferenceCount(scope, varName);\n+        int numMutations = NodeUtil.getNameMutationCount(scope, varName);\n+        return numMutations > numRefs;\n+    }\n+\n+    // If the node has children, check each of them recursively.\n+    for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n+        if (hasMutableSideEffect(child, scope, varName)) {\n+            return true;\n         }\n-        cArg = cArg.getNext();\n-      }\n     }\n \n-    return CanInlineResult.YES;\n-  }\n+    // No side effects were found.\n+    return false;\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}