{
    "patch": "    int remainingIndex = index;\n    for (int i = 0; i < last; i++) {\n        final int offset = uniCounterOffset[i];\n\n        if (offset <= remainingIndex) {\n            int idx = remainingIndex / offset;\n            indices[i] = idx;\n            remainingIndex = remainingIndex % offset;\n        } else {\n            indices[i] = 0;\n        }\n    }\n    indices[last] = remainingIndex;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..98598d455 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,19 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n+    int remainingIndex = index;\n+    for (int i = 0; i < last; i++) {\n+        final int offset = uniCounterOffset[i];\n+\n+        if (offset <= remainingIndex) {\n+            int idx = remainingIndex / offset;\n+            indices[i] = idx;\n+            remainingIndex = remainingIndex % offset;\n+        } else {\n+            indices[i] = 0;\n         }\n-        --idx;\n-        indices[last] = idx;\n+    }\n+    indices[last] = remainingIndex;\n \n         return indices;\n     }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}