{
    "patch": "public static int largest_divisor(int n) {\n    if (n <= 0) {\n        throw new IllegalArgumentException(\"Input must be positive\");\n    }\n    int largest_divisor = 1;\n    for (int i = 1; i <= n / 2; i ++) {\n        if (n % i == 0) {\n            largest_divisor = i;\n        }\n    }\n    // If the number itself is the largest divisor, return that instead of 1\n  ",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java b/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java\nindex e93b282..5174ca6 100644\n--- a/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java\n+++ b/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java\n@@ -1,11 +1,16 @@\n package humaneval.buggy;\n \n public class LARGEST_DIVISOR {\n-    public static int largest_divisor(int n) {\n-        for (int i = n; i >= 0; i -= 1){\n-            if (n % i == 0)\n-                return i;\n+public static int largest_divisor(int n) {\n+    if (n <= 0) {\n+        throw new IllegalArgumentException(\"Input must be positive\");\n+    }\n+    int largest_divisor = 1;\n+    for (int i = 1; i <= n / 2; i ++) {\n+        if (n % i == 0) {\n+            largest_divisor = i;\n         }\n-        return 1;\n     }\n+    // If the number itself is the largest divisor, return that instead of 1\n+  \n }",
    "result_reason": " /tmp/humaneval-LARGEST_DIVISOR/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java:[16,2] reached end of file while parsing",
    "test_result": "ERROR"
}