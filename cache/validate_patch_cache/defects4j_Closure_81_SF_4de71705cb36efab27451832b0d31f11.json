{
    "patch": "class TransformDispatcher implements TypeSafeDispatcher {\n  private static final Set<String> ALLOWED_DIRECTIVES = ImmutableSet.of(\"use strict\");\n\n  private final ErrorReporter errorReporter;\n  private final String sourceName;\n\n  TransformDispatcher(ErrorReporter errorReporter, String sourceName) {\n    this.errorReporter = errorReporter;\n    this.sourceName = sourceName;\n  }\n\n  private Node newNode(int type, AstNode... children) {\n    Node node = new Node(type);\n    for (AstNode child : children) {\n      node.addChildToBack(transform(child));\n    }\n    return node;\n  }\n\n  private boolean isDirective(Node n) {\n    if (n == null) return false;\n\n    int nType = n.getType();\n    return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n        n.getFirstChild().getType() == Token.STRING &&\n        ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n  }\n\n  @Override\n  public Node process(AstNode node) {\n    return null;\n  }\n\n  @Override\n  public Node processArrayComprehension(ArrayComprehension node) {\n    Node result = newNode(Token.ARRAYCOMP);\n    for (ArrayComprehensionLoop arrayLoop : node.getLoops()) {\n      AstNode iterNode = arrayLoop.getIterator();\n      Node arrayLoopNode = newNode(Token.ARRAYLIT);\n      if (iterNode.getType() == Token.LP) {\n        // Destructuring case\n        for (int i = 0; i < iterNode.getChildCount(); i++) {\n          arrayLoopNode.addChildToBack(transform(iterNode.getChildAtIndex(i)));\n        }\n      } else {\n        arrayLoopNode.addChildToBack(transform(iterNode));\n      }\n      AstNode iteratedObject = arrayLoop.getIteratedObject();\n      if (iteratedObject != null) {\n        Node forNode = newNode(Token.FOR);\n        Node lpNode = newNode(Token.LP);\n        lpNode.addChildToBack(arrayLoopNode);\n        Node inNode = newNode(Token.IN);\n        inNode.addChildToBack(transform(iteratedObject));\n        forNode.addChildToBack(lpNode);\n        forNode.addChildToBack(inNode);\n        result.addChildToBack(forNode);\n      }\n    }\n    if (node.getFilterExpression() != null) {\n      Node ifNode = newNode(Token.IF);\n      ifNode.addChildToBack(transform(node.getFilterExpression()));\n      result.addChildToBack(ifNode);\n    }\n    result.addChildToBack(transform(node.getResultExpression()));\n    return result;\n  }\n\n  @Override\n  public Node processArrayLiteral(ArrayLiteral node) {\n    Node result = newNode(Token.ARRAYLIT);\n    for (AstNode element : node.getElements()) {\n      Node newNode;\n      if (element.getType() == Token.COMMA) {\n        // Omitted elements are represented by the type Token.COMMA, which is\n        // not transformed to a node by transform(). We still must create an\n        // empty element to maintain correct index information.\n        newNode = newNode(Token.EMPTY);\n      } else {\n        newNode = transform(element);\n      }\n      result.addChildToBack(newNode);\n    }\n    return result;\n  }\n\n  @Override\n  public Node processAssignment(Assignment node) {\n    Node result = newNode(transformTokenType(node.getType()),\n                          transform(node.getLeft()),\n                          transform(node.getRight()));\n    result.setLineno(position2line(node.lineno));\n    result.setCharno(position2charno(node.getAbsolutePosition()));\n    return result;\n  }\n\n  @Override\n  public Node processAstRoot(AstRoot node) {\n    Node result = transform(node.getFirstChild());\n    // Append any unparsed comments to the end of the AST.\n    for (Comment comment : node.getComments()) {\n      try {\n        result.addChildToBack(Node.newString(Token.COMMENT, comment.getValue()));\n      } catch (StackOverflowError e) {\n        errorReporter.error(\n            format(\"Invalid source \\\"%s\\\": too many non-JSDoc comments (larger than the maximum\" +\n                \" allowed size: %dKB).\", sourceName, MAX_NONJSDOC_COMMENT_LENGTH_KB),\n            sourceName,\n            comment.getLineno(),\n            comment.getCharno(),\n            0);\n      }\n    }\n    return result;\n  }\n\n  @Override\n  public Node processBlock(Block node) {\n    Node result = newNode(Token.BLOCK);\n    for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n      result.addChildToBack(transform(child));\n    }\n    return result;\n  }\n\n  @Override\n  public Node processBreakStatement(BreakStatement node) {\n    Node result = newNode(Token.BREAK);\n    if (node.getBreakLabel() != null) {\n      Node label = transform(node.getBreakLabel());\n      label.setType(Token.LABEL_NAME);\n      result.addChildToBack(label);\n    }\n    result.setLineno(position2line(node.lineno));\n    result.setCharno(position2charno(node.getAbsolutePosition()));\n    return result;\n  }\n\n  @Override\n  public Node processCaseClause(CaseClause node) {\n    Node result = newNode(Token.CASE,\n                           transform(node.getExpression()));\n    for (AstNode stmt : node.getStatements()) {\n      result.addChildToBack(transform(stmt));\n    }\n    result.setLineno(position2line(node.lineno));\n    result.setCharno(position2charno(node.getAbsolutePosition()));\n    return result;\n  }\n\n  @Override\n  public Node processCatchClause(CatchClause node) {\n    Node result = newNode(Token.CATCH,\n                           transform(node.getCatchCondition()),\n                           transform(node.getBody()));\n    result.addChildToFront(transform(node.getVarName()));\n    result.setLineno(position2line(node.lineno));\n    result.setCharno(position2charno(node.getAbsolutePosition()));\n    return result;\n  }\n\n  @Override\n  public Node processComment(Comment node) {\n    Node result = newNode(Token.COMMENT);\n    result.setString(node.getValue());\n    return result;\n  }\n\n  @Override\n  public Node processConditionalExpression(ConditionalExpression node) {\n    Node result = newNode(Token.HOOK,\n                           transform(node.getTestExpression()),\n                           transform(node.getTrueExpression()),\n                           transform(node.getFalseExpression()));\n    result.setLineno(position2line(node.lineno));\n    result.setCharno(position2charno(node.getAbsolutePosition()));\n    return result;\n  }\n\n  @Override\n  public Node processContinueStatement(ContinueStatement node) {\n    Node result = newNode(Token.CONTINUE);\n    if (node.getLabel() != null) {\n      Node label = transform(node.getLabel());\n      label.setType(Token.LABEL_NAME);\n      result.addChildToBack(label);\n    }\n    result.setLineno(position2line(node.lineno));\n    result.setCharno(position2charno(node.getAbsolutePosition()));\n    return result;\n  }\n\n  @Override\n  public Node processDefaultCase(DefaultCase node) {\n    Node result = newNode(Token.DEFAULT);\n    for (AstNode stmt : node.getStatements()) {\n      result.addChildToBack(transform(stmt));\n    }\n    result.setLineno(position2line(node.lineno));\n    result.setCharno(position2charno(node.getAbsolutePosition()));\n    return result;\n  }\n\n  @Override\n  public Node processDoLoop(DoLoop node) {\n    Node result = newNode(Token.DO,\n                           transform(node.getBody()),\n                           transform(node.getCondition()));\n    result.setLineno(position2line(node.lineno));\n    result.setCharno(position2charno(node.getAbsolutePosition()));\n    return result;\n  }\n\n  @Override\n  public Node processElementGet(ElementGet node) {\n    Node result = newNode(Token.GETELEM,\n                           transform(node.getTarget()),\n                           transform(node.getElement()));\n    result.setLineno(position2line(node.lineno));\n    result.setCharno(position2charno(node.getAbsolutePosition()));\n    return result;\n  }\n\n  @Override\n  public Node processEmptyExpression(EmptyExpression node) {\n    Node result = newNode(Token.EMPTY);\n    result.setLineno(position2line(node.lineno));\n    result.setCharno(position2charno(node.getAbsolutePosition()));\n    return result;\n  }\n\n  private static final int FUNCTION_STATEMENT_TYPE = 1;\n\n  @Override\n  public Node processExpressionStatement(ExpressionStatement node) {\n    AstNode expr = node.getExpression();\n    if (expr instanceof FunctionNode && ((FunctionNode) expr).getFunctionType() == FUNCTION_STATEMENT_TYPE) {\n      Node funcNode = transform(expr);\n      if (funcNode.hasChildren() && funcNode.getFirstChild().getType() == Token.FUNCTION) {\n        Node fnNode = funcNode.getFirstChild();\n        fnNode.addChildToFront(transform(new Name(\"\")));\n        return fnNode;\n      }\n    }\n    Node result = newNode(transformTokenType(node.getType()), transform(expr));\n    result.setLineno(position2line(node.lineno));\n    result.setCharno(position2charno(node.getAbsolutePosition()));\n    return result;\n  }\n\n  @Override\n  public Node processForInLoop(ForInLoop node) {\n    Node result = newNode(Token.FOR,\n                           transform(node.getIterator()),\n                           transform(node.getIteratedObject()),\n                           transform(node.getBody()));\n    result.setLineno(position2line(node.lineno));\n    result.setCharno(position2charno(node.getAbsolutePosition()));\n    return result;\n  }\n\n  @Override\n  public Node processForLoop(ForLoop node) {\n    Node result = newNode(Token.FOR,\n                           transform(node.getInitializer()),\n                           transform(node.getCondition()),\n                           transform(node.getIncrement()),\n                           transform(node.getBody()));\n    result.setLineno(position2line(node.lineno));\n    result.setCharno(position2charno(node.getAbsolutePosition()));\n    return result;\n  }\n\n  @Override\n  public Node processFunctionCall(FunctionCall node) {\n    Node result = newNode(transformTokenType(node.getType()), transform(node.getTarget()));\n    for (AstNode arg : node.getArguments()) {\n      result.addChildToBack(transform(arg));\n    }\n\n    if (node.getArguments().size() == 0) {\n      Node lp = newNode(Token.LP);\n      lp.setLineno(position2line(node.lineno));\n      lp.setCharno(position2charno(node.getTarget().getAbsolutePosition() + node.getTarget().getLength()));\n      result.addChildToBack(lp);\n    }\n\n    result.setLineno(position2line(node.lineno));\n    result.setCharno(position2charno(node.getAbsolutePosition()));\n    return result;\n  }\n\n  @Override\n  public Node processFunctionNode(FunctionNode node) {\n    Name functionName = node.getFunctionName();\n    Node result = newNode(Token.FUNCTION,\n                           transform(functionName));\n    if (functionName != null) {\n      // Set the name's position to the function's position.\n      result.addChildToFront(transform(new EmptyExpression()));\n    }\n    Node params = newNode(Token.LP);\n    for (AstNode param : node.getParams()) {\n      params.addChildToBack(transform(param));\n    }\n    result.addChildToBack(params);\n\n    result.addChildToBack(transform(node.getBody()));\n    result.setLineno(position2line(node.lineno));\n    result.setCharno(position2charno(node.getAbsolutePosition()));\n    return result;\n  }\n\n  @Override\n  public Node processGeneratorExpression(GeneratorExpression node) {\n    throw new UnsupportedOperationException(\"Generator expressions unsupported\");\n  }\n\n  @Override\n  public Node processIfStatement(IfStatement node) {\n    Node result = newNode(Token.IF,\n                           transform(node.getCondition()),\n                           transform(node.getThenPart()));\n    if (node.getElsePart() != null) {\n      result.addChildToBack(transform(node.getElsePart()));\n    }\n    result.setLineno(position2lin",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..bb58532e 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -385,181 +385,333 @@ public class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+class TransformDispatcher implements TypeSafeDispatcher {\n+  private static final Set<String> ALLOWED_DIRECTIVES = ImmutableSet.of(\"use strict\");\n \n-      int nType = n.getType();\n-      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n-          n.getFirstChild().getType() == Token.STRING &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+  private final ErrorReporter errorReporter;\n+  private final String sourceName;\n+\n+  TransformDispatcher(ErrorReporter errorReporter, String sourceName) {\n+    this.errorReporter = errorReporter;\n+    this.sourceName = sourceName;\n+  }\n+\n+  private Node newNode(int type, AstNode... children) {\n+    Node node = new Node(type);\n+    for (AstNode child : children) {\n+      node.addChildToBack(transform(child));\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n+  private boolean isDirective(Node n) {\n+    if (n == null) return false;\n+\n+    int nType = n.getType();\n+    return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n+        n.getFirstChild().getType() == Token.STRING &&\n+        ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+  }\n+\n+  @Override\n+  public Node process(AstNode node) {\n+    return null;\n+  }\n+\n+  @Override\n+  public Node processArrayComprehension(ArrayComprehension node) {\n+    Node result = newNode(Token.ARRAYCOMP);\n+    for (ArrayComprehensionLoop arrayLoop : node.getLoops()) {\n+      AstNode iterNode = arrayLoop.getIterator();\n+      Node arrayLoopNode = newNode(Token.ARRAYLIT);\n+      if (iterNode.getType() == Token.LP) {\n+        // Destructuring case\n+        for (int i = 0; i < iterNode.getChildCount(); i++) {\n+          arrayLoopNode.addChildToBack(transform(iterNode.getChildAtIndex(i)));\n+        }\n+      } else {\n+        arrayLoopNode.addChildToBack(transform(iterNode));\n+      }\n+      AstNode iteratedObject = arrayLoop.getIteratedObject();\n+      if (iteratedObject != null) {\n+        Node forNode = newNode(Token.FOR);\n+        Node lpNode = newNode(Token.LP);\n+        lpNode.addChildToBack(arrayLoopNode);\n+        Node inNode = newNode(Token.IN);\n+        inNode.addChildToBack(transform(iteratedObject));\n+        forNode.addChildToBack(lpNode);\n+        forNode.addChildToBack(inNode);\n+        result.addChildToBack(forNode);\n+      }\n+    }\n+    if (node.getFilterExpression() != null) {\n+      Node ifNode = newNode(Token.IF);\n+      ifNode.addChildToBack(transform(node.getFilterExpression()));\n+      result.addChildToBack(ifNode);\n     }\n+    result.addChildToBack(transform(node.getResultExpression()));\n+    return result;\n+  }\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n+  @Override\n+  public Node processArrayLiteral(ArrayLiteral node) {\n+    Node result = newNode(Token.ARRAYLIT);\n+    for (AstNode element : node.getElements()) {\n+      Node newNode;\n+      if (element.getType() == Token.COMMA) {\n+        // Omitted elements are represented by the type Token.COMMA, which is\n+        // not transformed to a node by transform(). We still must create an\n+        // empty element to maintain correct index information.\n+        newNode = newNode(Token.EMPTY);\n+      } else {\n+        newNode = transform(element);\n       }\n-      return node;\n+      result.addChildToBack(newNode);\n     }\n+    return result;\n+  }\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n+  @Override\n+  public Node processAssignment(Assignment node) {\n+    Node result = newNode(transformTokenType(node.getType()),\n+                          transform(node.getLeft()),\n+                          transform(node.getRight()));\n+    result.setLineno(position2line(node.lineno));\n+    result.setCharno(position2charno(node.getAbsolutePosition()));\n+    return result;\n+  }\n+\n+  @Override\n+  public Node processAstRoot(AstRoot node) {\n+    Node result = transform(node.getFirstChild());\n+    // Append any unparsed comments to the end of the AST.\n+    for (Comment comment : node.getComments()) {\n+      try {\n+        result.addChildToBack(Node.newString(Token.COMMENT, comment.getValue()));\n+      } catch (StackOverflowError e) {\n         errorReporter.error(\n-            \"Catch clauses are not supported\",\n+            format(\"Invalid source \\\"%s\\\": too many non-JSDoc comments (larger than the maximum\" +\n+                \" allowed size: %dKB).\", sourceName, MAX_NONJSDOC_COMMENT_LENGTH_KB),\n             sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n+            comment.getLineno(),\n+            comment.getCharno(),\n+            0);\n       }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n     }\n+    return result;\n+  }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+  @Override\n+  public Node processBlock(Block node) {\n+    Node result = newNode(Token.BLOCK);\n+    for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n+      result.addChildToBack(transform(child));\n     }\n+    return result;\n+  }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+  @Override\n+  public Node processBreakStatement(BreakStatement node) {\n+    Node result = newNode(Token.BREAK);\n+    if (node.getBreakLabel() != null) {\n+      Node label = transform(node.getBreakLabel());\n+      label.setType(Token.LABEL_NAME);\n+      result.addChildToBack(label);\n     }\n+    result.setLineno(position2line(node.lineno));\n+    result.setCharno(position2charno(node.getAbsolutePosition()));\n+    return result;\n+  }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+  @Override\n+  public Node processCaseClause(CaseClause node) {\n+    Node result = newNode(Token.CASE,\n+                           transform(node.getExpression()));\n+    for (AstNode stmt : node.getStatements()) {\n+      result.addChildToBack(transform(stmt));\n     }\n+    result.setLineno(position2line(node.lineno));\n+    result.setCharno(position2charno(node.getAbsolutePosition()));\n+    return result;\n+  }\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+  @Override\n+  public Node processCatchClause(CatchClause node) {\n+    Node result = newNode(Token.CATCH,\n+                           transform(node.getCatchCondition()),\n+                           transform(node.getBody()));\n+    result.addChildToFront(transform(node.getVarName()));\n+    result.setLineno(position2line(node.lineno));\n+    result.setCharno(position2charno(node.getAbsolutePosition()));\n+    return result;\n+  }\n+\n+  @Override\n+  public Node processComment(Comment node) {\n+    Node result = newNode(Token.COMMENT);\n+    result.setString(node.getValue());\n+    return result;\n+  }\n+\n+  @Override\n+  public Node processConditionalExpression(ConditionalExpression node) {\n+    Node result = newNode(Token.HOOK,\n+                           transform(node.getTestExpression()),\n+                           transform(node.getTrueExpression()),\n+                           transform(node.getFalseExpression()));\n+    result.setLineno(position2line(node.lineno));\n+    result.setCharno(position2charno(node.getAbsolutePosition()));\n+    return result;\n+  }\n+\n+  @Override\n+  public Node processContinueStatement(ContinueStatement node) {\n+    Node result = newNode(Token.CONTINUE);\n+    if (node.getLabel() != null) {\n+      Node label = transform(node.getLabel());\n+      label.setType(Token.LABEL_NAME);\n+      result.addChildToBack(label);\n     }\n+    result.setLineno(position2line(node.lineno));\n+    result.setCharno(position2charno(node.getAbsolutePosition()));\n+    return result;\n+  }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+  @Override\n+  public Node processDefaultCase(DefaultCase node) {\n+    Node result = newNode(Token.DEFAULT);\n+    for (AstNode stmt : node.getStatements()) {\n+      result.addChildToBack(transform(stmt));\n     }\n+    result.setLineno(position2line(node.lineno));\n+    result.setCharno(position2charno(node.getAbsolutePosition()));\n+    return result;\n+  }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+  @Override\n+  public Node processDoLoop(DoLoop node) {\n+    Node result = newNode(Token.DO,\n+                           transform(node.getBody()),\n+                           transform(node.getCondition()));\n+    result.setLineno(position2line(node.lineno));\n+    result.setCharno(position2charno(node.getAbsolutePosition()));\n+    return result;\n+  }\n+\n+  @Override\n+  public Node processElementGet(ElementGet node) {\n+    Node result = newNode(Token.GETELEM,\n+                           transform(node.getTarget()),\n+                           transform(node.getElement()));\n+    result.setLineno(position2line(node.lineno));\n+    result.setCharno(position2charno(node.getAbsolutePosition()));\n+    return result;\n+  }\n+\n+  @Override\n+  public Node processEmptyExpression(EmptyExpression node) {\n+    Node result = newNode(Token.EMPTY);\n+    result.setLineno(position2line(node.lineno));\n+    result.setCharno(position2charno(node.getAbsolutePosition()));\n+    return result;\n+  }\n+\n+  private static final int FUNCTION_STATEMENT_TYPE = 1;\n+\n+  @Override\n+  public Node processExpressionStatement(ExpressionStatement node) {\n+    AstNode expr = node.getExpression();\n+    if (expr instanceof FunctionNode && ((FunctionNode) expr).getFunctionType() == FUNCTION_STATEMENT_TYPE) {\n+      Node funcNode = transform(expr);\n+      if (funcNode.hasChildren() && funcNode.getFirstChild().getType() == Token.FUNCTION) {\n+        Node fnNode = funcNode.getFirstChild();\n+        fnNode.addChildToFront(transform(new Name(\"\")));\n+        return fnNode;\n+      }\n     }\n+    Node result = newNode(transformTokenType(node.getType()), transform(expr));\n+    result.setLineno(position2line(node.lineno));\n+    result.setCharno(position2charno(node.getAbsolutePosition()));\n+    return result;\n+  }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+  @Override\n+  public Node processForInLoop(ForInLoop node) {\n+    Node result = newNode(Token.FOR,\n+                           transform(node.getIterator()),\n+                           transform(node.getIteratedObject()),\n+                           transform(node.getBody()));\n+    result.setLineno(position2line(node.lineno));\n+    result.setCharno(position2charno(node.getAbsolutePosition()));\n+    return result;\n+  }\n+\n+  @Override\n+  public Node processForLoop(ForLoop node) {\n+    Node result = newNode(Token.FOR,\n+                           transform(node.getInitializer()),\n+                           transform(node.getCondition()),\n+                           transform(node.getIncrement()),\n+                           transform(node.getBody()));\n+    result.setLineno(position2line(node.lineno));\n+    result.setCharno(position2charno(node.getAbsolutePosition()));\n+    return result;\n+  }\n+\n+  @Override\n+  public Node processFunctionCall(FunctionCall node) {\n+    Node result = newNode(transformTokenType(node.getType()), transform(node.getTarget()));\n+    for (AstNode arg : node.getArguments()) {\n+      result.addChildToBack(transform(arg));\n     }\n \n-    @Override\n-    Node processForLoop(ForLoop loopNode) {\n-      Node node = newNode(\n-          Token.FOR,\n-          transform(loopNode.getInitializer()),\n-          transform(loopNode.getCondition()),\n-          transform(loopNode.getIncrement()));\n-      node.addChildToBack(transformBlock(loopNode.getBody()));\n-      return node;\n+    if (node.getArguments().size() == 0) {\n+      Node lp = newNode(Token.LP);\n+      lp.setLineno(position2line(node.lineno));\n+      lp.setCharno(position2charno(node.getTarget().getAbsolutePosition() + node.getTarget().getLength()));\n+      result.addChildToBack(lp);\n     }\n \n-    @Override\n-    Node processFunctionCall(FunctionCall callNode) {\n-      Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n-      for (AstNode child : callNode.getArguments()) {\n-        node.addChildToBack(transform(child));\n-      }\n+    result.setLineno(position2line(node.lineno));\n+    result.setCharno(position2charno(node.getAbsolutePosition()));\n+    return result;\n+  }\n \n-      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n-      node.setLineno(callNode.getLineno());\n-      node.setCharno(position2charno(leftParamPos));\n-      return node;\n+  @Override\n+  public Node processFunctionNode(FunctionNode node) {\n+    Name functionName = node.getFunctionName();\n+    Node result = newNode(Token.FUNCTION,\n+                           transform(functionName));\n+    if (functionName != null) {\n+      // Set the name's position to the function's position.\n+      result.addChildToFront(transform(new EmptyExpression()));\n     }\n+    Node params = newNode(Token.LP);\n+    for (AstNode param : node.getParams()) {\n+      params.addChildToBack(transform(param));\n+    }\n+    result.addChildToBack(params);\n \n-    @Override\n-    Node processFunctionNode(FunctionNode functionNode) {\n-      Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n-      if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n-        isUnnamedFunction = true;\n-      }\n-      Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n-      if (isUnnamedFunction) {\n-        // Old Rhino tagged the empty name node with the line number of the\n-        // declaration.\n-        newName.setLineno(functionNode.getLineno());\n-        // TODO(bowdidge) Mark line number of paren correctly.\n-        // Same problem as below - the left paren might not be on the\n-        // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n-        newName.setCharno(position2charno(lpColumn));\n-      }\n-\n-      node.addChildToBack(newName);\n-      Node lp = newNode(Token.LP);\n-      // The left paren's complicated because it's not represented by an\n-      // AstNode, so there's nothing that has the actual line number that it\n-      // appeared on.  We know the paren has to appear on the same line as the\n-      // function name (or else a semicolon will be inserted.)  If there's no\n-      // function name, assume the paren was on the same line as the function.\n-      // TODO(bowdidge): Mark line number of paren correctly.\n-      Name fnName = functionNode.getFunctionName();\n-      if (fnName != null) {\n-        lp.setLineno(fnName.getLineno());\n-      } else {\n-        lp.setLineno(functionNode.getLineno());\n-      }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n+    result.addChildToBack(transform(node.getBody()));\n+    result.setLineno(position2line(node.lineno));\n+    result.setCharno(position2charno(node.getAbsolutePosition()));\n+    return result;\n+  }\n \n-      lp.setCharno(position2charno(lparenCharno));\n-      for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n-      }\n-      node.addChildToBack(lp);\n+  @Override\n+  public Node processGeneratorExpression(GeneratorExpression node) {\n+    throw new UnsupportedOperationException(\"Generator expressions unsupported\");\n+  }\n \n-      Node bodyNode = transform(functionNode.getBody());\n-      parseDirectives(bodyNode);\n-      node.addChildToBack(bodyNode);\n-     return node;\n+  @Override\n+  public Node processIfStatement(IfStatement node) {\n+    Node result = newNode(Token.IF,\n+                           transform(node.getCondition()),\n+                           transform(node.getThenPart()));\n+    if (node.getElsePart() != null) {\n+      result.addChildToBack(transform(node.getElsePart()));\n     }\n+    result.setLineno(position2lin\n \n     @Override\n     Node processIfStatement(IfStatement statementNode) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}