{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    int iterCount = 0;\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex.clone();\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                // accept the expanded simplex\n                simplex = reflectedSimplex;\n            } else {\n                // accept the reflected point\n                simplex[0] = reflected;\n            }\n\n        } else {\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, original[original.length - 1]) < 0) {\n                // accept the contracted simplex\n                simplex[original.length - 1] = contracted;\n            } else {\n                // perform a contraction of the simplex\n                final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n                contractedSimplex[0] = best;\n                for (int i = 1; i < original.length; i++) {\n                    contractedSimplex[i] = new RealPointValuePair(\n                            contract(original[0].getPoint(), original[i].getPoint(), 0.5),\n                            evaluate(contract(original[0].getPoint(), original[i].getPoint(), 0.5)));\n                }\n                simplex = contractedSimplex;\n            }\n\n        }\n\n        // check convergence\n        final RealPointValuePair current = simplex[0];\n        boolean converged = true;\n        for (int i = 1; i < simplex.length; i++) {\n            converged &= Math.abs(current.getValue() - simplex[i].getValue()) <= functionValueAccuracy;\n        }\n\n        if (converged) {\n            return;\n        }\n\n        iterCount++;\n        if (iterCount >= maxIterations) {\n            throw new OptimizationException(new MaxIterationsExceededException(maxIterations));\n        }\n    }\n}\n\nprotected double[] contract(double[] point1, double[] point2, double contractionRatio) {\n    double[] contractedPoint = new double[point1.length];\n    for (int i = 0; i < point1.length; i++) {\n        contractedPoint[i] = point1[i] + contractionRatio * (point2[i] - point1[i]);\n    }\n    return contractedPoint;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..ee18b2c31 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,80 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    int iterCount = 0;\n \n-            incrementIterationsCounter();\n+    while (true) {\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        incrementIterationsCounter();\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex.clone();\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                // accept the expanded simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                // accept the reflected point\n+                simplex[0] = reflected;\n             }\n \n+        } else {\n+\n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n+            if (comparator.compare(contracted, original[original.length - 1]) < 0) {\n                 // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+                simplex[original.length - 1] = contracted;\n+            } else {\n+                // perform a contraction of the simplex\n+                final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+                contractedSimplex[0] = best;\n+                for (int i = 1; i < original.length; i++) {\n+                    contractedSimplex[i] = new RealPointValuePair(\n+                            contract(original[0].getPoint(), original[i].getPoint(), 0.5),\n+                            evaluate(contract(original[0].getPoint(), original[i].getPoint(), 0.5)));\n+                }\n+                simplex = contractedSimplex;\n             }\n \n         }\n \n+        // check convergence\n+        final RealPointValuePair current = simplex[0];\n+        boolean converged = true;\n+        for (int i = 1; i < simplex.length; i++) {\n+            converged &= Math.abs(current.getValue() - simplex[i].getValue()) <= functionValueAccuracy;\n+        }\n+\n+        if (converged) {\n+            return;\n+        }\n+\n+        iterCount++;\n+        if (iterCount >= maxIterations) {\n+            throw new OptimizationException(new MaxIterationsExceededException(maxIterations));\n+        }\n     }\n+}\n+\n+protected double[] contract(double[] point1, double[] point2, double contractionRatio) {\n+    double[] contractedPoint = new double[point1.length];\n+    for (int i = 0; i < point1.length; i++) {\n+        contractedPoint[i] = point1[i] + contractionRatio * (point2[i] - point1[i]);\n+    }\n+    return contractedPoint;\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}