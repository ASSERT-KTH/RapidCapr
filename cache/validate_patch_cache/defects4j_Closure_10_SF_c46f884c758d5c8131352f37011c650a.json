{
    "patch": "static boolean mayBeString(Node n, boolean recurse) {\n  if (recurse) {\n    return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n  } else {\n    return mayBeStringHelper(n);\n  }\n}\n\nprivate static boolean mayBeStringHelper(Node n) {\n  if (n == null) {\n    return false;\n  }\n\n  TypeI type = n.getType();\n  if (type == null) {\n    return false;\n  }\n  switch (type) {\n    case STRING:\n    case OBJECT:\n    case UNKNOWN:\n      return true;\n    case BIGINT:\n    case BOOLEAN:\n    case NUMBER:\n      return false;\n    default:\n      break;\n  }\n\n  if (!n.isCall() && !n.isNew()) {\n    return false;\n  }\n\n  // Look up the value of the function being called.\n  Ref callsRef = null;\n  if (n.getFirstChild() != null) {\n    callsRef = n.getFirstChild().getRef();\n  }\n  if (callsRef == null) {\n    return false;\n  }\n\n  ObjectType functionType = callsRef.getInitialVariableValue();\n  // This function does not have an ObjectType. Blame the caller.\n  if (functionType == null) {\n    return false;\n  }\n\n  // Find out if any of the formal parameters or return value may be strings\n  if (allResultsMatch(n, MAY_BE_STRING_PREDICATE)) {\n    return true;\n  }\n\n  return functionType.hasProperty(\"toString\") || functionType.isSubtypeOfString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..ed3bba48 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1412,14 +1412,63 @@ public final class NodeUtil {\n     return mayBeString(n, true);\n   }\n \n-  static boolean mayBeString(Node n, boolean recurse) {\n-    if (recurse) {\n-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n-    } else {\n-      return mayBeStringHelper(n);\n-    }\n+static boolean mayBeString(Node n, boolean recurse) {\n+  if (recurse) {\n+    return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n+  } else {\n+    return mayBeStringHelper(n);\n+  }\n+}\n+\n+private static boolean mayBeStringHelper(Node n) {\n+  if (n == null) {\n+    return false;\n+  }\n+\n+  TypeI type = n.getType();\n+  if (type == null) {\n+    return false;\n+  }\n+  switch (type) {\n+    case STRING:\n+    case OBJECT:\n+    case UNKNOWN:\n+      return true;\n+    case BIGINT:\n+    case BOOLEAN:\n+    case NUMBER:\n+      return false;\n+    default:\n+      break;\n+  }\n+\n+  if (!n.isCall() && !n.isNew()) {\n+    return false;\n+  }\n+\n+  // Look up the value of the function being called.\n+  Ref callsRef = null;\n+  if (n.getFirstChild() != null) {\n+    callsRef = n.getFirstChild().getRef();\n+  }\n+  if (callsRef == null) {\n+    return false;\n+  }\n+\n+  ObjectType functionType = callsRef.getInitialVariableValue();\n+  // This function does not have an ObjectType. Blame the caller.\n+  if (functionType == null) {\n+    return false;\n   }\n \n+  // Find out if any of the formal parameters or return value may be strings\n+  if (allResultsMatch(n, MAY_BE_STRING_PREDICATE)) {\n+    return true;\n+  }\n+\n+  return functionType.hasProperty(\"toString\") || functionType.isSubtypeOfString();\n+}\n+\n   static boolean mayBeStringHelper(Node n) {\n     return !isNumericResult(n) && !isBooleanResult(n)\n         && !isUndefined(n) && !n.isNull();",
    "result_reason": "error: method mayBeStringHelper(Node) is already defined in class NodeUtil",
    "test_result": "ERROR"
}