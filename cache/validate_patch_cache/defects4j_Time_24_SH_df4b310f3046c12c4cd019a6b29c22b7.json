{
    "patch": "        boolean weekyearSet = false;\n        for (int i = 0; i < count; i++) {\n            SavedField svfd = savedFields[i];\n            if (svfd.iField.getType() == DateTimeFieldType.weekyear()) {\n                weekyearSet = true;\n                break;\n            }\n        }\n        if (weekyearSet) {\n            if (text != null) {\n                throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": Weekyears can not be set\");\n            }\n            throw new IllegalArgumentException(\"Weekyears can not be set\");\n        }\n\n        savedFields = savedFields.clone();\n        long millis = iMillis;\n        boolean parseFailure = false;\n        for (int i = 0; i < count; i++) {\n            try {\n                millis = savedFields[i].set(millis, resetFields);\n            } catch (IllegalFieldValueException e) {\n                parseFailure = true;\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n                }\n                throw e;\n            } catch (RuntimeException e) {\n                parseFailure = true;\n                if (text != null) {\n                    throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": Invalid format\", e);\n                } else {\n                    throw new IllegalArgumentException(\"Invalid format\", e);\n                }\n            }\n        }\n\n        if (parseFailure && resetFields) {\n            iSavedFields = null;\n            iSavedFieldsShared = false;\n            iSavedFieldsCount = 0;\n            return computeMillis(true, text);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..0e9db795 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,48 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        boolean weekyearSet = false;\n+        for (int i = 0; i < count; i++) {\n+            SavedField svfd = savedFields[i];\n+            if (svfd.iField.getType() == DateTimeFieldType.weekyear()) {\n+                weekyearSet = true;\n+                break;\n+            }\n+        }\n+        if (weekyearSet) {\n+            if (text != null) {\n+                throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": Weekyears can not be set\");\n+            }\n+            throw new IllegalArgumentException(\"Weekyears can not be set\");\n+        }\n+\n+        savedFields = savedFields.clone();\n+        long millis = iMillis;\n+        boolean parseFailure = false;\n+        for (int i = 0; i < count; i++) {\n+            try {\n+                millis = savedFields[i].set(millis, resetFields);\n+            } catch (IllegalFieldValueException e) {\n+                parseFailure = true;\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n+                }\n+                throw e;\n+            } catch (RuntimeException e) {\n+                parseFailure = true;\n+                if (text != null) {\n+                    throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": Invalid format\", e);\n+                } else {\n+                    throw new IllegalArgumentException(\"Invalid format\", e);\n+                }\n+            }\n+        }\n+\n+        if (parseFailure && resetFields) {\n+            iSavedFields = null;\n+            iSavedFieldsShared = false;\n+            iSavedFieldsCount = 0;\n+            return computeMillis(true, text);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}