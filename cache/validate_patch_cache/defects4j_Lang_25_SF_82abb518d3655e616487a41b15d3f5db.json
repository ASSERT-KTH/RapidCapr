{
    "patch": "public static String decode(String s, String enc) {\n    boolean needToChange = false;\n    int numChars = s.length();\n    StringBuffer sb = new StringBuffer(numChars > 500 ? numChars / 2 : numChars);\n    int i = 0;\n\n    if (enc.length() == 0) {\n        throw new UnsupportedEncodingException(\"URLDecoder: empty string enc parameter\");\n    }\n\n    char c;\n    byte[] bytes = null;\n    while (i < numChars) {\n        c = s.charAt(i);\n        switch (c) {\n            case '+':\n                sb.append(' ');\n                i++;\n                needToChange = true;\n                break;\n            case '%':\n                /*\n                 * Starting with this instance of '%', process all consecutive substrings of the form %xy. Each substring\n                 * %xy will yield a byte. Convert all consecutive bytes obtained this way to whatever character(s) they\n                 * represent in the provided encoding.\n                 */\n\n                try {\n                    // (numChars-i)/3 is an upper bound for the number\n                    // of remaining bytes\n                    if (bytes == null) {\n                        bytes = new byte[(numChars - i) / 3];\n                    }\n                    int pos = 0;\n\n                    while ( ((i+2) < numChars) && (c=='%')) {\n                        bytes[pos++] = (byte)Integer.parseInt(s.substring(i+1,i+3),16);\n                        i+= 3;\n                        if (i < numChars) {\n                            c = s.charAt(i);\n                        }\n                    }\n\n                    // A trailing, incomplete byte encoding such as\n                    // \"%x\" will cause an exception to be thrown\n                    if ((i < numChars) && (c=='%')) {\n                        throw new IllegalArgumentException(\n                        \"URLDecoder: Incomplete trailing escape (%) pattern\");\n                    }\n\n                    sb.append(new String(bytes, 0, pos, enc));\n                } catch (NumberFormatException e) {\n                    throw new IllegalArgumentException(\n                        \"URLDecoder: Illegal hex characters in escape (%) pattern - \"\n                        + e.getMessage());\n                } catch (UnsupportedEncodingException e) {\n                    throw new AssertionError(e);\n                }\n                needToChange = true;\n                break;\n            default:\n                sb.append(c);\n                i++;\n                break;\n        }\n    }\n\n    return (needToChange ? sb.toString() : s);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..f14a0e1b 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,75 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String decode(String s, String enc) {\n+    boolean needToChange = false;\n+    int numChars = s.length();\n+    StringBuffer sb = new StringBuffer(numChars > 500 ? numChars / 2 : numChars);\n+    int i = 0;\n+\n+    if (enc.length() == 0) {\n+        throw new UnsupportedEncodingException(\"URLDecoder: empty string enc parameter\");\n+    }\n+\n+    char c;\n+    byte[] bytes = null;\n+    while (i < numChars) {\n+        c = s.charAt(i);\n+        switch (c) {\n+            case '+':\n+                sb.append(' ');\n+                i++;\n+                needToChange = true;\n+                break;\n+            case '%':\n+                /*\n+                 * Starting with this instance of '%', process all consecutive substrings of the form %xy. Each substring\n+                 * %xy will yield a byte. Convert all consecutive bytes obtained this way to whatever character(s) they\n+                 * represent in the provided encoding.\n+                 */\n+\n+                try {\n+                    // (numChars-i)/3 is an upper bound for the number\n+                    // of remaining bytes\n+                    if (bytes == null) {\n+                        bytes = new byte[(numChars - i) / 3];\n+                    }\n+                    int pos = 0;\n+\n+                    while ( ((i+2) < numChars) && (c=='%')) {\n+                        bytes[pos++] = (byte)Integer.parseInt(s.substring(i+1,i+3),16);\n+                        i+= 3;\n+                        if (i < numChars) {\n+                            c = s.charAt(i);\n+                        }\n+                    }\n+\n+                    // A trailing, incomplete byte encoding such as\n+                    // \"%x\" will cause an exception to be thrown\n+                    if ((i < numChars) && (c=='%')) {\n+                        throw new IllegalArgumentException(\n+                        \"URLDecoder: Incomplete trailing escape (%) pattern\");\n+                    }\n+\n+                    sb.append(new String(bytes, 0, pos, enc));\n+                } catch (NumberFormatException e) {\n+                    throw new IllegalArgumentException(\n+                        \"URLDecoder: Illegal hex characters in escape (%) pattern - \"\n+                        + e.getMessage());\n+                } catch (UnsupportedEncodingException e) {\n+                    throw new AssertionError(e);\n+                }\n+                needToChange = true;\n+                break;\n+            default:\n+                sb.append(c);\n+                i++;\n+                break;\n+        }\n+    }\n+\n+    return (needToChange ? sb.toString() : s);\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}