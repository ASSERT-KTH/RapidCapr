{
    "patch": "Type[] actualTypeArguments = ((ParameterizedType) enclosingType).getActualTypeArguments();\nif (actualTypeArguments.length > index && actualTypeArguments[index] instanceof TypeVariable) {\n    TypeVariable<?> typeVariable = (TypeVariable<?>) actualTypeArguments[index];\n    registerTypeVariablesOn(typeVariable);\n} else {\n    throw new RuntimeException(\"Unable to extract actual type for type variable: \" + typeVariable.getTypeName());\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..a08843224 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,18 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type[] actualTypeArguments = ((ParameterizedType) enclosingType).getActualTypeArguments();\n+if (actualTypeArguments.length > index && actualTypeArguments[index] instanceof TypeVariable) {\n+    TypeVariable<?> typeVariable = (TypeVariable<?>) actualTypeArguments[index];\n+    registerTypeVariablesOn(typeVariable);\n+} else {\n+    throw new RuntimeException(\"Unable to extract actual type for type variable: \" + typeVariable.getTypeName());\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}