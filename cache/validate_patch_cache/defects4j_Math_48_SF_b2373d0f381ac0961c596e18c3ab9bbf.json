{
    "patch": "    protected final double doSolve() throws TooManyEvaluationsException, ConvergenceException {\n        // Get initial solution\n        double x0 = getMin();\n        double x1 = getMax();\n        double f0 = computeObjectiveValue(x0);\n        double f1 = computeObjectiveValue(x1);\n\n        // If one of the bounds is the exact root, return it. Since these are\n        // not under-approximations or over-approximations, we can return them\n        // regardless of the allowed solutions.\n        if (f0 == 0.0) {\n            return x0;\n        }\n        if (f1 == 0.0) {\n            return x1;\n        }\n\n        // Verify bracketing of initial solution.\n        verifyBracketing(x0, x1);\n\n        // Get accuracies.\n        final double ftol = getFunctionValueAccuracy();\n        final double atol = getAbsoluteAccuracy();\n        final double rtol = getRelativeAccuracy();\n\n        // Keep track of inverted intervals, meaning that the left bound is\n        // larger than the right bound.\n        boolean inverted = false;\n\n        int numIterations = 0;\n        // Keep finding better approximations.\n        while (numIterations++ < maximalIterationCount) {\n            // Calculate the next approximation.\n            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n            final double fx = computeObjectiveValue(x);\n\n            // If the new approximation is the exact root, return it. Since\n            // this is not an under-approximation or an over-approximation,\n            // we can return it regardless of the allowed solutions.\n            if (fx == 0.0) {\n                return x;\n            }\n\n            // Update the bounds with the new approximation.\n            if (f1 * fx < 0) {\n                // The value of x1 has switched to the other bound, thus inverting\n                // the interval.\n                x0 = x1;\n                f0 = f1;\n                inverted = !inverted;\n            } else {\n                f0 /= 2.0;\n            }\n            // Update from [x0, x1] to [x0, x].\n            x1 = x;\n            f1 = fx;\n\n            // If the function value of the last approximation is too small,\n            // given the function value accuracy, then we can't get closer to\n            // the root than we already are.\n            if (FastMath.abs(f1) <= ftol) {\n                if ((allowed == AllowedSolution.ANY_SIDE) ||\n                        ((allowed == AllowedSolution.LEFT_SIDE) && inverted) ||\n                        ((allowed == AllowedSolution.RIGHT_SIDE) && !inverted) ||\n                        ((allowed == AllowedSolution.BELOW_SIDE) && (f1 <= 0)) ||\n                        ((allowed == AllowedSolution.ABOVE_SIDE) && (f1 >= 0))) {\n                    return x1;\n                }\n            }\n\n            // If the current interval is within the given accuracies, we\n            // are satisfied with the current approximation.\n            final double deltaX = FastMath.abs(x1 - x0);\n            final double combinedTolerance = rtol * (FastMath.abs(x1) + FastMath.abs(x0)) + atol;\n            if (deltaX <= combinedTolerance) {\n                if ((allowed == AllowedSolution.ANY_SIDE) ||\n                        ((allowed == AllowedSolution.LEFT_SIDE) && inverted) ||\n                        ((allowed == AllowedSolution.RIGHT_SIDE) && !inverted) ||\n                        ((allowed == AllowedSolution.BELOW_SIDE) && (f1 <= 0)) ||\n                        ((allowed == AllowedSolution.ABOVE_SIDE) && (f1 >= 0))) {\n                    return x1;\n                }\n            }\n        }\n        // Maximum number of iterations exceeded\n        throw new ConvergenceException(LocalizedFormats.SIMPLE_MAX_ITERATIONS_EXCEEDED,\n                                               maximalIterationCount);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..c8739628d 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -126,7 +126,7 @@ public abstract class BaseSecantSolver\n     }\n \n     /** {@inheritDoc} */\n-    protected final double doSolve() {\n+    protected final double doSolve() throws TooManyEvaluationsException, ConvergenceException {\n         // Get initial solution\n         double x0 = getMin();\n         double x1 = getMax();\n@@ -155,8 +155,9 @@ public abstract class BaseSecantSolver\n         // larger than the right bound.\n         boolean inverted = false;\n \n+        int numIterations = 0;\n         // Keep finding better approximations.\n-        while (true) {\n+        while (numIterations++ < maximalIterationCount) {\n             // Calculate the next approximation.\n             final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n             final double fx = computeObjectiveValue(x);\n@@ -176,21 +177,7 @@ public abstract class BaseSecantSolver\n                 f0 = f1;\n                 inverted = !inverted;\n             } else {\n-                switch (method) {\n-                case ILLINOIS:\n-                    f0 *= 0.5;\n-                    break;\n-                case PEGASUS:\n-                    f0 *= f1 / (f1 + fx);\n-                    break;\n-                case REGULA_FALSI:\n-                    // Detect early that algorithm is stuck, instead of waiting\n-                    // for the maximum number of iterations to be exceeded.\n-                    break;\n-                default:\n-                    // Should never happen.\n-                    throw new MathInternalError();\n-                }\n+                f0 /= 2.0;\n             }\n             // Update from [x0, x1] to [x0, x].\n             x1 = x;\n@@ -200,55 +187,32 @@ public abstract class BaseSecantSolver\n             // given the function value accuracy, then we can't get closer to\n             // the root than we already are.\n             if (FastMath.abs(f1) <= ftol) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n+                if ((allowed == AllowedSolution.ANY_SIDE) ||\n+                        ((allowed == AllowedSolution.LEFT_SIDE) && inverted) ||\n+                        ((allowed == AllowedSolution.RIGHT_SIDE) && !inverted) ||\n+                        ((allowed == AllowedSolution.BELOW_SIDE) && (f1 <= 0)) ||\n+                        ((allowed == AllowedSolution.ABOVE_SIDE) && (f1 >= 0))) {\n                     return x1;\n-                case LEFT_SIDE:\n-                    if (inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case RIGHT_SIDE:\n-                    if (!inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case BELOW_SIDE:\n-                    if (f1 <= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                case ABOVE_SIDE:\n-                    if (f1 >= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                default:\n-                    throw new MathInternalError();\n                 }\n             }\n \n             // If the current interval is within the given accuracies, we\n             // are satisfied with the current approximation.\n-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n-                                                     atol)) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n+            final double deltaX = FastMath.abs(x1 - x0);\n+            final double combinedTolerance = rtol * (FastMath.abs(x1) + FastMath.abs(x0)) + atol;\n+            if (deltaX <= combinedTolerance) {\n+                if ((allowed == AllowedSolution.ANY_SIDE) ||\n+                        ((allowed == AllowedSolution.LEFT_SIDE) && inverted) ||\n+                        ((allowed == AllowedSolution.RIGHT_SIDE) && !inverted) ||\n+                        ((allowed == AllowedSolution.BELOW_SIDE) && (f1 <= 0)) ||\n+                        ((allowed == AllowedSolution.ABOVE_SIDE) && (f1 >= 0))) {\n                     return x1;\n-                case LEFT_SIDE:\n-                    return inverted ? x1 : x0;\n-                case RIGHT_SIDE:\n-                    return inverted ? x0 : x1;\n-                case BELOW_SIDE:\n-                    return (f1 <= 0) ? x1 : x0;\n-                case ABOVE_SIDE:\n-                    return (f1 >= 0) ? x1 : x0;\n-                default:\n-                    throw new MathInternalError();\n                 }\n             }\n         }\n-    }\n+        // Maximum number of iterations exceeded\n+        throw new ConvergenceException(LocalizedFormats.SIMPLE_MAX_ITERATIONS_EXCEEDED,\n+                                               maximalIterationCount);\n \n     /** <em>Secant</em>-based root-finding methods. */\n     protected enum Method {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}