{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    Object[] comp = createComposite(elementPairs);\n    if (elementPairs.size() == 1) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n\n    Separator sep = (Separator) elementPairs.get(0);\n    elementPairs = elementPairs.subList(1, elementPairs.size());\n    Object[] leftComp = createComposite(elementPairs.subList(0, elementPairs.size() / 2));\n    Object[] rightComp = createComposite(elementPairs.subList(elementPairs.size() / 2, elementPairs.size()));\n\n    if (!notPrinter && !notParser) {\n        return new PeriodFormatter(\n                sep.finish((PeriodPrinter) leftComp[0], (PeriodParser) rightComp[1]),\n                sep.finish((PeriodPrinter) rightComp[0], (PeriodParser) leftComp[1])\n        );\n    } else if (notPrinter) {\n        return new PeriodFormatter(\n                null,\n                sep.finish((PeriodPrinter) rightComp[0], (PeriodParser) leftComp[1])\n        );\n    } else {\n        return new PeriodFormatter(\n                sep.finish((PeriodPrinter) leftComp[0], (PeriodParser) rightComp[1]),\n                null\n        );\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..f15f4ca9 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,39 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n-        }\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    Object[] comp = createComposite(elementPairs);\n+    if (elementPairs.size() == 1) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n     }\n \n+    Separator sep = (Separator) elementPairs.get(0);\n+    elementPairs = elementPairs.subList(1, elementPairs.size());\n+    Object[] leftComp = createComposite(elementPairs.subList(0, elementPairs.size() / 2));\n+    Object[] rightComp = createComposite(elementPairs.subList(elementPairs.size() / 2, elementPairs.size()));\n+\n+    if (!notPrinter && !notParser) {\n+        return new PeriodFormatter(\n+                sep.finish((PeriodPrinter) leftComp[0], (PeriodParser) rightComp[1]),\n+                sep.finish((PeriodPrinter) rightComp[0], (PeriodParser) leftComp[1])\n+        );\n+    } else if (notPrinter) {\n+        return new PeriodFormatter(\n+                null,\n+                sep.finish((PeriodPrinter) rightComp[0], (PeriodParser) leftComp[1])\n+        );\n+    } else {\n+        return new PeriodFormatter(\n+                sep.finish((PeriodPrinter) leftComp[0], (PeriodParser) rightComp[1]),\n+                null\n+        );\n+    }\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "java.lang.IndexOutOfBoundsException: Index: 3, Size: 3",
    "test_result": "FAIL"
}