{
    "patch": "    public Period normalizedStandard(final PeriodType type) {\n        PeriodType pType = DateTimeUtils.getPeriodType(type);\n        Chronology chrono = pType.getIndexed(0);\n        pType = pType.withUTC();\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        if (chrono != null && pType.isSupported(DurationFieldType.days())) {\n            millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n            millis += (((long) getWeeks()) * ((long) ISOChronology.getInstance(chrono).weekyears().getDurationField().getMillis()));\n            chrono = chrono.withUTC();\n        } else {\n            long totDays = (((long) getDays()) + (((long) getWeeks()) * ((long) DateTimeConstants.DAYS_PER_WEEK)));\n            millis += (totDays * DateTimeConstants.MILLIS_PER_DAY);\n        }\n        Period result = new Period(millis, pType, chrono);\n        int years = getYears();\n        int months = getMonths();\n        if (years != 0 || months != 0) {\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n            if (years != 0) {\n                result = result.withYears(years);\n            }\n            if (months != 0) {\n                result = result.withMonths(months);\n            }\n        }\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..88ebf03c 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,15 +1613,23 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n+    public Period normalizedStandard(final PeriodType type) {\n+        PeriodType pType = DateTimeUtils.getPeriodType(type);\n+        Chronology chrono = pType.getIndexed(0);\n+        pType = pType.withUTC();\n         long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n         millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n         millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n         millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+        if (chrono != null && pType.isSupported(DurationFieldType.days())) {\n+            millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+            millis += (((long) getWeeks()) * ((long) ISOChronology.getInstance(chrono).weekyears().getDurationField().getMillis()));\n+            chrono = chrono.withUTC();\n+        } else {\n+            long totDays = (((long) getDays()) + (((long) getWeeks()) * ((long) DateTimeConstants.DAYS_PER_WEEK)));\n+            millis += (totDays * DateTimeConstants.MILLIS_PER_DAY);\n+        }\n+        Period result = new Period(millis, pType, chrono);\n         int years = getYears();\n         int months = getMonths();\n         if (years != 0 || months != 0) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}