{
    "patch": "          // A function can use a variable in a closure, so we can't\n          // assume that it is only assigned once in its lifetime.\n          return false;\n        } else if (block.isLoop) {\n          if (block.equals(ref.getBasicBlock())) {\n            continue;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..9c600211 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,13 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // A function can use a variable in a closure, so we can't\n+          // assume that it is only assigned once in its lifetime.\n+          return false;\n+        } else if (block.isLoop) {\n+          if (block.equals(ref.getBasicBlock())) {\n+            continue;\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}