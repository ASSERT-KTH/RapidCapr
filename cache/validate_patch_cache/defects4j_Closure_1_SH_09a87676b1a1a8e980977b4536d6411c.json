{
    "patch": "    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\n    // To ensure that the correct function length is preserved,\n    // we add the function arguments to a List before removing them.\n    // The list is used later to update the function's length information.\n    List<Node> argsToRemove = new ArrayList<>();\n\n    // Collect the unused function arguments\n    Node arg;\n    while ((arg = argList.getFirstChild()) != null) {\n      Var var = fnScope.getVar(arg.getString());\n      if (!referenced.contains(var)) {\n        argsToRemove.add(arg);\n        argList.removeChild(arg);\n      } else {\n        break;\n      }\n    }\n\n    // Remove the unused function arguments from each call site.\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n\n    // Update the function length information\n    int numArgsToRemove = argsToRemove.size();\n    Node fnLength = NodeUtil.getFunctionParametersLengthPropertyNode(function, compiler);\n    if (fnLength != null) {\n      int oldLengthValue = NodeUtil.getFunctionParametersLength(fnLength);\n      int newLengthValue = oldLengthValue - numArgsToRemove;\n      fnLength.setDouble(newLengthValue);\n    }\n    function.putProp(Node.FUNCTION_PARAMETERS, null);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..550d55fd 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,39 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+    // To ensure that the correct function length is preserved,\n+    // we add the function arguments to a List before removing them.\n+    // The list is used later to update the function's length information.\n+    List<Node> argsToRemove = new ArrayList<>();\n+\n+    // Collect the unused function arguments\n+    Node arg;\n+    while ((arg = argList.getFirstChild()) != null) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (!referenced.contains(var)) {\n+        argsToRemove.add(arg);\n+        argList.removeChild(arg);\n+      } else {\n+        break;\n+      }\n+    }\n+\n+    // Remove the unused function arguments from each call site.\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+\n+    // Update the function length information\n+    int numArgsToRemove = argsToRemove.size();\n+    Node fnLength = NodeUtil.getFunctionParametersLengthPropertyNode(function, compiler);\n+    if (fnLength != null) {\n+      int oldLengthValue = NodeUtil.getFunctionParametersLength(fnLength);\n+      int newLengthValue = oldLengthValue - numArgsToRemove;\n+      fnLength.setDouble(newLengthValue);\n+    }\n+    function.putProp(Node.FUNCTION_PARAMETERS, null);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}