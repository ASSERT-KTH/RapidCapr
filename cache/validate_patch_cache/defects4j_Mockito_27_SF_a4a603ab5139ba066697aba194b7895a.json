{
    "patch": "    public <T> void resetMock(T mock) {\n        List<MockHandlerInterface<?>> oldHandlers = getAllMockHandlers(mock);\n        @SuppressWarnings(\"rawtypes\")\n        MockHandler[] newHandlers = new MockHandler[oldHandlers.size()];\n        for (int i = 0; i < oldHandlers.size(); i++) {\n            newHandlers[i] = new MockHandler<>(oldHandlers.get(i));\n        }\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(new CompositeMockHandler(newHandlers), (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        if (mock instanceof Factory) {\n            ((Factory) mock).setCallback(0, newFilter);\n        } else {\n            throw new IllegalArgumentException(\"Only 'Factory' mock objects are supported.\");\n        }\n    }\n\n    private <T> List<MockHandlerInterface<?>> getAllMockHandlers(T mock) {\n        List<Object> mockObjects = new ArrayList<>();\n        while (mock != null) {\n            mockObjects.addAll(Arrays.asList(((Factory) mock).getCallbacks()));\n            mock = ((MockitoMock) mock).getDelegate();\n        }\n        List<MockHandlerInterface<?>> mockHandlers = new ArrayList<>();\n        for (Object mockObject : mockObjects) {\n            mockHandlers.add(((MockitoMock) mockObject).getMockHandler());\n        }\n        return mockHandlers;\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..9e8edb5db 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,34 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+    public <T> void resetMock(T mock) {\n+        List<MockHandlerInterface<?>> oldHandlers = getAllMockHandlers(mock);\n+        @SuppressWarnings(\"rawtypes\")\n+        MockHandler[] newHandlers = new MockHandler[oldHandlers.size()];\n+        for (int i = 0; i < oldHandlers.size(); i++) {\n+            newHandlers[i] = new MockHandler<>(oldHandlers.get(i));\n+        }\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(new CompositeMockHandler(newHandlers), (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        if (mock instanceof Factory) {\n+            ((Factory) mock).setCallback(0, newFilter);\n+        } else {\n+            throw new IllegalArgumentException(\"Only 'Factory' mock objects are supported.\");\n+        }\n+    }\n+\n+    private <T> List<MockHandlerInterface<?>> getAllMockHandlers(T mock) {\n+        List<Object> mockObjects = new ArrayList<>();\n+        while (mock != null) {\n+            mockObjects.addAll(Arrays.asList(((Factory) mock).getCallbacks()));\n+            mock = ((MockitoMock) mock).getDelegate();\n+        }\n+        List<MockHandlerInterface<?>> mockHandlers = new ArrayList<>();\n+        for (Object mockObject : mockObjects) {\n+            mockHandlers.add(((MockitoMock) mockObject).getMockHandler());\n+        }\n+        return mockHandlers;\n+    }\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}