{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    // TODO: Protect from ArrayIndexOutOfBounds\n    if(input == null || index < 0 || input.length() <= index+1 || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n        return 0;\n    }\n\n    int start = index + 2;\n    boolean isHex = false;\n\n    if(input.length() <= start) {\n        return 0;\n    }\n    char firstChar = input.charAt(start);\n    if(firstChar == 'x' || firstChar == 'X') {\n        if(start + 1 >= input.length()) {\n            return 0;\n        }\n        start++;\n        isHex = true;\n    }\n\n    int end = start;\n    while(end < input.length() && input.charAt(end) != ';') {\n        end++;\n    }\n\n    if(end >= input.length()) {\n        return 0;\n    }\n\n    int entityValue = 0;\n    try {\n        entityValue = Integer.parseInt(input.subSequence(start, end).toString(), isHex ? 16 : 10);\n    } catch(NumberFormatException nfe) {\n        return 0;\n    }\n\n    if (entityValue < 0 || entityValue > Character.MAX_CODE_POINT) {\n        return 0;\n    }\n\n    if (Character.isSupplementaryCodePoint(entityValue)) {\n        out.write(Character.highSurrogate(entityValue));\n        out.write(Character.lowSurrogate(entityValue));\n    } else {\n        out.write((char) entityValue);\n    }\n\n    return end - index + 1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex c3cb8695..dd62f127 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -32,37 +32,54 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        // TODO: Protect from ArrayIndexOutOfBounds\n-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    // TODO: Protect from ArrayIndexOutOfBounds\n+    if(input == null || index < 0 || input.length() <= index+1 || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n+        return 0;\n+    }\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-            }\n+    int start = index + 2;\n+    boolean isHex = false;\n \n-            int end = start;\n-            while(input.charAt(end) != ';') {\n-                end++;\n-            }\n+    if(input.length() <= start) {\n+        return 0;\n+    }\n+    char firstChar = input.charAt(start);\n+    if(firstChar == 'x' || firstChar == 'X') {\n+        if(start + 1 >= input.length()) {\n+            return 0;\n+        }\n+        start++;\n+        isHex = true;\n+    }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-                return 0;\n-            }\n+    int end = start;\n+    while(end < input.length() && input.charAt(end) != ';') {\n+        end++;\n+    }\n \n-                out.write(entityValue);\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n-        }\n+    if(end >= input.length()) {\n+        return 0;\n+    }\n+\n+    int entityValue = 0;\n+    try {\n+        entityValue = Integer.parseInt(input.subSequence(start, end).toString(), isHex ? 16 : 10);\n+    } catch(NumberFormatException nfe) {\n+        return 0;\n+    }\n+\n+    if (entityValue < 0 || entityValue > Character.MAX_CODE_POINT) {\n         return 0;\n     }\n+\n+    if (Character.isSupplementaryCodePoint(entityValue)) {\n+        out.write(Character.highSurrogate(entityValue));\n+        out.write(Character.lowSurrogate(entityValue));\n+    } else {\n+        out.write((char) entityValue);\n+    }\n+\n+    return end - index + 1;\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}