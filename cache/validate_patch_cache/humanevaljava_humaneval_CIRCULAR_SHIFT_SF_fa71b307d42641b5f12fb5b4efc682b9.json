{
    "patch": "public static String circular_shift(int x, int shift) {\n    String s = String.valueOf(x);\n    int len = s.length();\n\n    if (shift < 0) {\n        shift = (len - Math.abs(shift) % len) % len; // normalize negative shift values\n    } else if (shift > len) {\n        shift %= len; // reduce shift value to stay within length of string\n        StringBuilder sb = new StringBuilder(s).reverse();\n        return sb.substring(0, len);\n    }\n\n    return s.substring(len - shift) + s.substring(0, len - shift);\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/CIRCULAR_SHIFT.java b/src/main/java/humaneval/buggy/CIRCULAR_SHIFT.java\nindex 9131a1c..141d7bc 100644\n--- a/src/main/java/humaneval/buggy/CIRCULAR_SHIFT.java\n+++ b/src/main/java/humaneval/buggy/CIRCULAR_SHIFT.java\n@@ -9,16 +9,18 @@ If shift > number of digits, return digits reversed.\n \"12\" */\n \n public class CIRCULAR_SHIFT {\n-    public static String circular_shift(int x, int shift) {\n-        String s = x + \"\";\n+public static String circular_shift(int x, int shift) {\n+    String s = String.valueOf(x);\n+    int len = s.length();\n \n-        if (shift > s.length()) {\n-            StringBuilder sb = new StringBuilder();\n-            for (int i = s.length() - 1; i >= 0; i -= 1)\n-                sb.append(s.charAt(i));\n-            return sb.toString();\n-        } else {\n-            return s.substring(s.length() - shift + 1) + s.substring(0, s.length() - shift - 1);\n-        }\n+    if (shift < 0) {\n+        shift = (len - Math.abs(shift) % len) % len; // normalize negative shift values\n+    } else if (shift > len) {\n+        shift %= len; // reduce shift value to stay within length of string\n+        StringBuilder sb = new StringBuilder(s).reverse();\n+        return sb.substring(0, len);\n     }\n+\n+    return s.substring(len - shift) + s.substring(0, len - shift);\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}