{
    "patch": "// Infilled code:\nsavedFields = savedFields.clone();\ncount = iSavedFieldsCount;\nlong newMillis = millis;\nfor (int i = 0; i < count; i++) {\n    SavedField savedField = savedFields[i];\n    try {\n        newMillis = savedField.set(newMillis, resetFields);\n    } catch (IllegalFieldValueException e) {\n        if (resetFields && savedField.iField.getType() != DateTimeFieldType.weekyear()) {\n            iSavedFields = null;\n            iSavedFieldsShared = false;\n            iSavedFieldsCount = 0;\n            return computeMillis(true, text);\n        }\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n        }\n        throw e;\n    }\n}\nnewMillis = computeMillisAdjustment(newMillis, text);\nif (iZone == null) {\n    newMillis -= iOffset;\n} else {\n    int offset = iZone.getOffsetFromLocal(newMillis);\n    newMillis -= offset;\n    if (offset != iZone.getOffset(newMillis)) {\n        String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n        if (text != null) {\n            message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n        }\n        throw new IllegalArgumentException(message);\n    }\n}\nreturn newMillis;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..9406c571 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,43 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+// Infilled code:\n+savedFields = savedFields.clone();\n+count = iSavedFieldsCount;\n+long newMillis = millis;\n+for (int i = 0; i < count; i++) {\n+    SavedField savedField = savedFields[i];\n+    try {\n+        newMillis = savedField.set(newMillis, resetFields);\n+    } catch (IllegalFieldValueException e) {\n+        if (resetFields && savedField.iField.getType() != DateTimeFieldType.weekyear()) {\n+            iSavedFields = null;\n+            iSavedFieldsShared = false;\n+            iSavedFieldsCount = 0;\n+            return computeMillis(true, text);\n+        }\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n+        }\n+        throw e;\n+    }\n+}\n+newMillis = computeMillisAdjustment(newMillis, text);\n+if (iZone == null) {\n+    newMillis -= iOffset;\n+} else {\n+    int offset = iZone.getOffsetFromLocal(newMillis);\n+    newMillis -= offset;\n+    if (offset != iZone.getOffset(newMillis)) {\n+        String message =\n+                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+        if (text != null) {\n+            message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+        }\n+        throw new IllegalArgumentException(message);\n+    }\n+}\n+return newMillis;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}