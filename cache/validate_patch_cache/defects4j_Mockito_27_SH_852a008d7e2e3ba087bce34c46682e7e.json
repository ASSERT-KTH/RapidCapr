{
    "patch": "MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\nMockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\nMethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\nif(mock instanceof Factory){\n    Object[] callbacks = ((Factory) mock).getCallbacks();\n    int index = 0;\n    for(index = 0; index < callbacks.length; index++){\n        if(callbacks[index] == null){\n            break;\n        }\n    }\n    try {\n        ((Factory) mock).getCallbacks();      // This line is added for lazy initialization\n        ((Factory) mock).setCallback(index, newFilter);\n    } catch(IllegalStateException e){\n        // If the Factory mock has no callbacks yet, set all the callbacks at once\n        ((Factory) mock).setCallbacks(new Callback[] { newFilter });\n    }\n} else {\n    throw new IllegalArgumentException(\"Only 'Factory' mock objects are supported.\");\n}\n\nMockInvocation invocation = new MockInvocation(mock, (MethodInvocationReport) newFilter.getInvocation());\ninvocation.notifyOnMock(invocationListener);",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..6fdc43832 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,34 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+if(mock instanceof Factory){\n+    Object[] callbacks = ((Factory) mock).getCallbacks();\n+    int index = 0;\n+    for(index = 0; index < callbacks.length; index++){\n+        if(callbacks[index] == null){\n+            break;\n+        }\n+    }\n+    try {\n+        ((Factory) mock).getCallbacks();      // This line is added for lazy initialization\n+        ((Factory) mock).setCallback(index, newFilter);\n+    } catch(IllegalStateException e){\n+        // If the Factory mock has no callbacks yet, set all the callbacks at once\n+        ((Factory) mock).setCallbacks(new Callback[] { newFilter });\n+    }\n+} else {\n+    throw new IllegalArgumentException(\"Only 'Factory' mock objects are supported.\");\n+}\n+\n+MockInvocation invocation = new MockInvocation(mock, (MethodInvocationReport) newFilter.getInvocation());\n+invocation.notifyOnMock(invocationListener);\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: variable oldMockHandler is already defined in method <T>resetMock(T)",
    "test_result": "ERROR"
}