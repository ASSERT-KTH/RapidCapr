{
    "patch": "          Node parent = value.getParent();\n          if (canBeSingletonGetterDefinition(value)\n              && parent != null\n              && !parent.isAssign()) {\n            // We assume that a function definition is not a getter unless it is annotated with the\n            // @returns {<type>} or @return {<type>} jsDoc annotation.\n            if (!convention.getSingletonGetterClassName(value).isEmpty()) {\n              return false;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..af5bd315 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,15 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+          Node parent = value.getParent();\n+          if (canBeSingletonGetterDefinition(value)\n+              && parent != null\n+              && !parent.isAssign()) {\n+            // We assume that a function definition is not a getter unless it is annotated with the\n+            // @returns {<type>} or @return {<type>} jsDoc annotation.\n+            if (!convention.getSingletonGetterClassName(value).isEmpty()) {\n+              return false;\n+            }\n         }\n       }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}