{
    "patch": "    if (!NodeUtil.isFunctionExpression(n)) {\n      return false;\n    }\n    Node parent = n.getParent();\n    if (parent == null ||\n        (parent.getType() != Token.ASSIGN && parent.getType() != Token.VAR &&\n         parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.RETURN &&\n         (!NodeUtil.isFunctionExpression(parent) ||\n          parent.getParent().getType() != Token.BLOCK ||\n          parent.getParent().getParent().getType() != Token.FUNCTION))) {\n      return false;\n    }\n    return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..64de4a82 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,19 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+    if (!NodeUtil.isFunctionExpression(n)) {\n+      return false;\n+    }\n+    Node parent = n.getParent();\n+    if (parent == null ||\n+        (parent.getType() != Token.ASSIGN && parent.getType() != Token.VAR &&\n+         parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.RETURN &&\n+         (!NodeUtil.isFunctionExpression(parent) ||\n+          parent.getParent().getType() != Token.BLOCK ||\n+          parent.getParent().getParent().getType() != Token.FUNCTION))) {\n+      return false;\n+    }\n+    return true;\n   }\n \n   /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}