{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n    n.setJSType(type);\n    scope = traverseChildren(n, scope);\n    return scope;\n  }\n  \n  private FlowScope traverseChildren(Node n, FlowScope scope) {\n    for (Node child : n.children()) {\n      if (child != n.getFirstChild()) {\n        scope = traverse(child, scope);\n      }\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..fad27956 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1056,8 +1056,15 @@ class TypeInference\n       }\n     }\n     n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+    scope = traverseChildren(n, scope);\n+    return scope;\n+  }\n+  \n+  private FlowScope traverseChildren(Node n, FlowScope scope) {\n+    for (Node child : n.children()) {\n+      if (child != n.getFirstChild()) {\n+        scope = traverse(child, scope);\n+      }\n     }\n     return scope;\n   }",
    "result_reason": "error: method traverseChildren(Node,FlowScope) is already defined in class TypeInference",
    "test_result": "ERROR"
}