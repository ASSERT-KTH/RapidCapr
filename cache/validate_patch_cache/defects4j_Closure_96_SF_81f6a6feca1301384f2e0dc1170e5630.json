{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n\n    // iterate over parameters\n    while (parameters.hasNext()) {\n        parameter = parameters.next();\n        if (!arguments.hasNext()) { \n          // too few arguments\n          int expectedNumArgs = functionType.getMinArguments();\n          int actualNumArgs = ordinal;\n          report(t, call, WRONG_ARGUMENT_COUNT,\n                 validator.getReadableJSTypeName(call.getFirstChild(), false),\n                 String.valueOf(actualNumArgs),\n                 String.valueOf(expectedNumArgs),\n                 functionType.getMaxArguments() != Integer.MAX_VALUE ?\n                    \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n          return;\n       }\n      argument = arguments.next();\n      ordinal++;\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n    if (arguments.hasNext() && functionType.getMaxArguments() == Integer.MAX_VALUE) {\n      // too many arguments for a varargs function\n      int expectedNumArgs = ordinal;\n      int actualNumArgs = call.getChildCount() - 1;\n      report(t, call, WRONG_ARGUMENT_COUNT,\n             validator.getReadableJSTypeName(call.getFirstChild(), false),\n             String.valueOf(actualNumArgs),\n             String.valueOf(expectedNumArgs),\n          functionType.getMaxArguments() != Integer.MAX_VALUE ?\n             \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..74f14080 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,7 +1396,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n+private void visitParameterList(NodeTraversal t, Node call,\n       FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n@@ -1405,27 +1405,37 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n+\n+    // iterate over parameters\n+    while (parameters.hasNext()) {\n         parameter = parameters.next();\n+        if (!arguments.hasNext()) { \n+          // too few arguments\n+          int expectedNumArgs = functionType.getMinArguments();\n+          int actualNumArgs = ordinal;\n+          report(t, call, WRONG_ARGUMENT_COUNT,\n+                 validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                 String.valueOf(actualNumArgs),\n+                 String.valueOf(expectedNumArgs),\n+                 functionType.getMaxArguments() != Integer.MAX_VALUE ?\n+                    \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n+          return;\n+       }\n       argument = arguments.next();\n       ordinal++;\n-\n       validator.expectArgumentMatchesParameter(t, argument,\n           getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n-\n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n+    if (arguments.hasNext() && functionType.getMaxArguments() == Integer.MAX_VALUE) {\n+      // too many arguments for a varargs function\n+      int expectedNumArgs = ordinal;\n+      int actualNumArgs = call.getChildCount() - 1;\n       report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+             validator.getReadableJSTypeName(call.getFirstChild(), false),\n+             String.valueOf(actualNumArgs),\n+             String.valueOf(expectedNumArgs),\n+          functionType.getMaxArguments() != Integer.MAX_VALUE ?\n+             \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n     }\n   }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1> but was:<0>",
    "test_result": "FAIL"
}