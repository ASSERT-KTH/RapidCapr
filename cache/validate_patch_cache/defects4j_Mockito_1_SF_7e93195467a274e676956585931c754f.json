{
    "patch": "public void captureArgumentsFrom(Invocation invocation) {\n    for (int i = 0; i < matchers.size(); i++) {\n        Matcher matcher = matchers.get(i);\n\n        if (!(matcher instanceof CapturesArguments)) {\n            continue;\n        }\n\n        if (i >= invocation.getRawArguments().length && !isVarArgParameter(invocation, i)) {\n            ((CapturesArguments) matcher).captureFrom(null);\n            continue;\n        }\n\n        if (isVarArgParameter(invocation, i) && matcher instanceof VarargMatcher) {\n            Object varArgsArray = invocation.getRawArguments()[i];\n            for (int j = 0; j < Array.getLength(varArgsArray); j++) {\n                ((CapturesArguments) matcher).captureFrom(Array.get(varArgsArray, j));\n            }\n            return; // Only one varargs parameter is allowed\n        }\n\n        ((CapturesArguments) matcher).captureFrom(invocation.getRawArguments()[i]);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..006e1d415 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -117,37 +117,30 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n         return invocation.getLocation();\n     }\n \n-    public void captureArgumentsFrom(Invocation invocation) {\n-        if (invocation.getMethod().isVarArgs()) {\n-            int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+public void captureArgumentsFrom(Invocation invocation) {\n+    for (int i = 0; i < matchers.size(); i++) {\n+        Matcher matcher = matchers.get(i);\n \n-        } else {\n-            for (int position = 0; position < matchers.size(); position++) {\n-                Matcher m = matchers.get(position);\n-                if (m instanceof CapturesArguments) {\n-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n-                }\n+        if (!(matcher instanceof CapturesArguments)) {\n+            continue;\n+        }\n+\n+        if (i >= invocation.getRawArguments().length && !isVarArgParameter(invocation, i)) {\n+            ((CapturesArguments) matcher).captureFrom(null);\n+            continue;\n+        }\n+\n+        if (isVarArgParameter(invocation, i) && matcher instanceof VarargMatcher) {\n+            Object varArgsArray = invocation.getRawArguments()[i];\n+            for (int j = 0; j < Array.getLength(varArgsArray); j++) {\n+                ((CapturesArguments) matcher).captureFrom(Array.get(varArgsArray, j));\n             }\n+            return; // Only one varargs parameter is allowed\n         }\n \n-//        for (int position = 0; position < matchers.size(); position++) {\n-//            Matcher m = matchers.get(position);\n-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n-//                //TODO SF - this whole lot can be moved captureFrom implementation\n-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n-//                    Object array = invocation.getRawArguments()[position];\n-//                    for (int i = 0; i < Array.getLength(array); i++) {\n-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n-//                    }\n-//                    //since we've captured all varargs already, it does not make sense to process other matchers.\n-//                    return;\n-//                } else {\n-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n-//                }\n-//            }\n-//        }\n+        ((CapturesArguments) matcher).captureFrom(invocation.getRawArguments()[i]);\n     }\n+}\n \n     private boolean isVarargMatcher(Matcher matcher) {\n         Matcher actualMatcher = matcher;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}