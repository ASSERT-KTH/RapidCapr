{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    long millis = getMillis();\n    if (Math.abs(millis) >= DateTimeConstants.MILLIS_PER_DAY) {\n        // if the milliseconds component overflows, propagate to the day field\n        int excessMillis = Math.toIntExact(millis % DateTimeConstants.MILLIS_PER_DAY);\n        int excessDays = excessMillis == 0 ? 0 : (excessMillis > 0 ? 1 : -1);\n        millis = excessMillis + (millis - excessMillis) % DateTimeConstants.MILLIS_PER_DAY;\n        withDays(getDays() + excessDays); // propagate overflow to days field\n    }\n\n    int seconds = getSeconds();\n    if (Math.abs(seconds) >= DateTimeConstants.SECONDS_PER_DAY) {\n        // if the seconds component overflows, propagate to the day field\n        int excessSeconds = Math.toIntExact(seconds % DateTimeConstants.SECONDS_PER_DAY);\n        int excessDays = excessSeconds == 0 ? 0 : (excessSeconds > 0 ? 1 : -1);\n        seconds = excessSeconds + (seconds - excessSeconds) % DateTimeConstants.SECONDS_PER_DAY;\n        withDays(getDays() + excessDays); // propagate overflow to days field\n    }\n\n    int minutes = getMinutes();\n    if (Math.abs(minutes) >= DateTimeConstants.MINUTES_PER_DAY) {\n        // if the minutes component overflows, propagate to the day field\n        int excessMinutes = Math.toIntExact(minutes % DateTimeConstants.MINUTES_PER_DAY);\n        int excessDays = excessMinutes == 0 ? 0 : (excessMinutes > 0 ? 1 : -1);\n        minutes = excessMinutes + (minutes - excessMinutes) % DateTimeConstants.MINUTES_PER_DAY;\n        withDays(getDays() + excessDays); // propagate overflow to days field\n    }\n\n    int hours = getHours();\n    if (Math.abs(hours) >= DateTimeConstants.HOURS_PER_DAY) {\n        // if the hours component overflows, propagate to the day field\n        int excessHours = hours % DateTimeConstants.HOURS_PER_DAY;\n        int excessDays = excessHours == 0 ? 0 : (excessHours > 0 ? 1 : -1);\n        hours = excessHours + (hours - excessHours) % DateTimeConstants.HOURS_PER_DAY;\n        withDays(getDays() + excessDays); // propagate overflow to days field\n    }\n\n    int days = getDays();\n    int weeks = getWeeks();\n    if (Math.abs(weeks) > 0 && type.isSupported(DurationFieldType.weeks())) {\n        days += weeks * 7;\n        withWeeks(0);\n    }\n    if (Math.abs(days) >= DateTimeConstants.DAYS_PER_MONTH) {\n        // if the days component overflows, propagate to the year/month fields\n        int excessDays = days % DateTimeConstants.DAYS_PER_MONTH;\n        int excessMonths = excessDays == 0 ? 0 : (excessDays > 0 ? 1 : -1);\n        days = excessDays + (days - excessDays) % DateTimeConstants.DAYS_PER_MONTH;\n        withMonths(getMonths() + excessMonths); // propagate overflow to months field\n    }\n\n    int months = getMonths();\n    if (Math.abs(months) >= DateTimeConstants.MONTHS_PER_YEAR) {\n        // if the months component overflows, propagate to the years field\n        int excessMonths = months % DateTimeConstants.MONTHS_PER_YEAR;\n        int excessYears = excessMonths == 0 ? 0 : (excessMonths > 0 ? 1 : -1);\n        months = excessMonths + (months - excessMonths) % DateTimeConstants.MONTHS_PER_YEAR;\n        withYears(getYears() + excessYears); // propagate overflow to years field\n    }\n\n    return new Period(\n            0,\n            withMillis((int) (millis % 1000)), // apply millis overflow after normalization\n            withSeconds(seconds),\n            withMinutes(minutes),\n            withHours(hours),\n            withDays(days),\n            withWeeks(0),\n            withMonths(months),\n            withYears(getYears()),\n            type,\n            ISOChronology.getInstanceUTC()\n    );\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..7e770107 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,81 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    long millis = getMillis();\n+    if (Math.abs(millis) >= DateTimeConstants.MILLIS_PER_DAY) {\n+        // if the milliseconds component overflows, propagate to the day field\n+        int excessMillis = Math.toIntExact(millis % DateTimeConstants.MILLIS_PER_DAY);\n+        int excessDays = excessMillis == 0 ? 0 : (excessMillis > 0 ? 1 : -1);\n+        millis = excessMillis + (millis - excessMillis) % DateTimeConstants.MILLIS_PER_DAY;\n+        withDays(getDays() + excessDays); // propagate overflow to days field\n+    }\n+\n+    int seconds = getSeconds();\n+    if (Math.abs(seconds) >= DateTimeConstants.SECONDS_PER_DAY) {\n+        // if the seconds component overflows, propagate to the day field\n+        int excessSeconds = Math.toIntExact(seconds % DateTimeConstants.SECONDS_PER_DAY);\n+        int excessDays = excessSeconds == 0 ? 0 : (excessSeconds > 0 ? 1 : -1);\n+        seconds = excessSeconds + (seconds - excessSeconds) % DateTimeConstants.SECONDS_PER_DAY;\n+        withDays(getDays() + excessDays); // propagate overflow to days field\n+    }\n+\n+    int minutes = getMinutes();\n+    if (Math.abs(minutes) >= DateTimeConstants.MINUTES_PER_DAY) {\n+        // if the minutes component overflows, propagate to the day field\n+        int excessMinutes = Math.toIntExact(minutes % DateTimeConstants.MINUTES_PER_DAY);\n+        int excessDays = excessMinutes == 0 ? 0 : (excessMinutes > 0 ? 1 : -1);\n+        minutes = excessMinutes + (minutes - excessMinutes) % DateTimeConstants.MINUTES_PER_DAY;\n+        withDays(getDays() + excessDays); // propagate overflow to days field\n+    }\n+\n+    int hours = getHours();\n+    if (Math.abs(hours) >= DateTimeConstants.HOURS_PER_DAY) {\n+        // if the hours component overflows, propagate to the day field\n+        int excessHours = hours % DateTimeConstants.HOURS_PER_DAY;\n+        int excessDays = excessHours == 0 ? 0 : (excessHours > 0 ? 1 : -1);\n+        hours = excessHours + (hours - excessHours) % DateTimeConstants.HOURS_PER_DAY;\n+        withDays(getDays() + excessDays); // propagate overflow to days field\n+    }\n+\n+    int days = getDays();\n+    int weeks = getWeeks();\n+    if (Math.abs(weeks) > 0 && type.isSupported(DurationFieldType.weeks())) {\n+        days += weeks * 7;\n+        withWeeks(0);\n+    }\n+    if (Math.abs(days) >= DateTimeConstants.DAYS_PER_MONTH) {\n+        // if the days component overflows, propagate to the year/month fields\n+        int excessDays = days % DateTimeConstants.DAYS_PER_MONTH;\n+        int excessMonths = excessDays == 0 ? 0 : (excessDays > 0 ? 1 : -1);\n+        days = excessDays + (days - excessDays) % DateTimeConstants.DAYS_PER_MONTH;\n+        withMonths(getMonths() + excessMonths); // propagate overflow to months field\n+    }\n+\n+    int months = getMonths();\n+    if (Math.abs(months) >= DateTimeConstants.MONTHS_PER_YEAR) {\n+        // if the months component overflows, propagate to the years field\n+        int excessMonths = months % DateTimeConstants.MONTHS_PER_YEAR;\n+        int excessYears = excessMonths == 0 ? 0 : (excessMonths > 0 ? 1 : -1);\n+        months = excessMonths + (months - excessMonths) % DateTimeConstants.MONTHS_PER_YEAR;\n+        withYears(getYears() + excessYears); // propagate overflow to years field\n+    }\n+\n+    return new Period(\n+            0,\n+            withMillis((int) (millis % 1000)), // apply millis overflow after normalization\n+            withSeconds(seconds),\n+            withMinutes(minutes),\n+            withHours(hours),\n+            withDays(days),\n+            withWeeks(0),\n+            withMonths(months),\n+            withYears(getYears()),\n+            type,\n+            ISOChronology.getInstanceUTC()\n+    );\n+}\n \n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}