{
    "patch": "/**\n * @return Whether the variable is assigned more than once for its lifetime.\n */\nboolean isAssignedMultipleTimesInLifetime() {\n  int count = 0;\n  for (int i = 0; i < references.size(); i++) {\n    Reference ref = references.get(i);\n    if (ref.isSimpleAssignmentToName()) {\n      count++;\n      if (count == 2) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/**\n * @return Whether the variable is only assigned a value once for its\n *     lifetime.\n */\nboolean isAssignedOnceInLifetime() {\n  return !isAssignedMultipleTimesInLifetime();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..09d5554b 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,30 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+/**\n+ * @return Whether the variable is assigned more than once for its lifetime.\n+ */\n+boolean isAssignedMultipleTimesInLifetime() {\n+  int count = 0;\n+  for (int i = 0; i < references.size(); i++) {\n+    Reference ref = references.get(i);\n+    if (ref.isSimpleAssignmentToName()) {\n+      count++;\n+      if (count == 2) {\n+        return true;\n+      }\n+    }\n+  }\n+  return false;\n+}\n+\n+/**\n+ * @return Whether the variable is only assigned a value once for its\n+ *     lifetime.\n+ */\n+boolean isAssignedOnceInLifetime() {\n+  return !isAssignedMultipleTimesInLifetime();\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}