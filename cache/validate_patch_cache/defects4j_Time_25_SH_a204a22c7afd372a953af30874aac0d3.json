{
    "patch": "                long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n                if (nextLocal != nextAdjusted) {\n                    if (nextAdjusted <= instantAdjusted || offsetLocal >= getOffset(nextAdjusted)) {\n                        return offsetLocal;\n                    } else {\n                        return getOffset(nextAdjusted);\n                    }\n                }\n            } else {\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                if (prevLocal != prevAdjusted) {\n                    if (prevAdjusted >= instantAdjusted || offsetLocal <= getOffset(prevAdjusted)) {\n                        return offsetAdjusted;\n                    } else {\n                        return getOffset(prevAdjusted);\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..e4cf440a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,23 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+                if (nextLocal != nextAdjusted) {\n+                    if (nextAdjusted <= instantAdjusted || offsetLocal >= getOffset(nextAdjusted)) {\n+                        return offsetLocal;\n+                    } else {\n+                        return getOffset(nextAdjusted);\n+                    }\n+                }\n+            } else {\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                if (prevLocal != prevAdjusted) {\n+                    if (prevAdjusted >= instantAdjusted || offsetLocal <= getOffset(prevAdjusted)) {\n+                        return offsetAdjusted;\n+                    } else {\n+                        return getOffset(prevAdjusted);\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}