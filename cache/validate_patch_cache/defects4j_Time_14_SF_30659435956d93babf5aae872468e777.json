{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        try {\n            return iChronology.get(partial, instant);\n        } catch (IllegalArgumentException e) {\n            throw new IllegalArgumentException(\"Resulting date is invalid\", e);\n        }\n    }\n    int year = 0, month = 0;\n    boolean leapYear = false;\n    for (int i = 0, isize = partial.size(); i < isize; i++) {\n        DateTimeFieldType fieldType = partial.getFieldType(i);\n        if (fieldType == DateTimeFieldType.year()) {\n            year = FieldUtils.safeAdd(values[i], valueToAdd);\n            leapYear = iChronology.isLeapYear(year);\n        } else if (fieldType == DateTimeFieldType.monthOfYear()) {\n            month = FieldUtils.safeAdd(values[i], valueToAdd);\n        }\n    }\n    if (month <= 0 || month > 12) {\n        year = iChronology.years().add(year, month / 12);\n        month = ((month % 12) + 12) % 12;\n        if (month == 0) {\n            month = 12;\n        }\n        leapYear = iChronology.isLeapYear(year);\n    }\n    int day = values[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n    int maxDay = iChronology.dayOfMonth().getMaximumValue(year, month);\n    if (leapYear && month == 2 && day == 29) {\n        // If it's a leap year and February 29th, adjust to the last day of February\n        day = 28;\n    }\n    day = Math.min(day, maxDay);\n    int[] newValues = Arrays.copyOf(values, values.length);\n    newValues[DateTimeFieldType.year().getFieldIndex()] = year;\n    newValues[DateTimeFieldType.monthOfYear().getFieldIndex()] = month;\n    newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = day;\n    return newValues;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..7e3a854e 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,54 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n+        instant = add(instant, valueToAdd);\n+        try {\n             return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        } catch (IllegalArgumentException e) {\n+            throw new IllegalArgumentException(\"Resulting date is invalid\", e);\n+        }\n+    }\n+    int year = 0, month = 0;\n+    boolean leapYear = false;\n+    for (int i = 0, isize = partial.size(); i < isize; i++) {\n+        DateTimeFieldType fieldType = partial.getFieldType(i);\n+        if (fieldType == DateTimeFieldType.year()) {\n+            year = FieldUtils.safeAdd(values[i], valueToAdd);\n+            leapYear = iChronology.isLeapYear(year);\n+        } else if (fieldType == DateTimeFieldType.monthOfYear()) {\n+            month = FieldUtils.safeAdd(values[i], valueToAdd);\n         }\n     }\n+    if (month <= 0 || month > 12) {\n+        year = iChronology.years().add(year, month / 12);\n+        month = ((month % 12) + 12) % 12;\n+        if (month == 0) {\n+            month = 12;\n+        }\n+        leapYear = iChronology.isLeapYear(year);\n+    }\n+    int day = values[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n+    int maxDay = iChronology.dayOfMonth().getMaximumValue(year, month);\n+    if (leapYear && month == 2 && day == 29) {\n+        // If it's a leap year and February 29th, adjust to the last day of February\n+        day = 28;\n+    }\n+    day = Math.min(day, maxDay);\n+    int[] newValues = Arrays.copyOf(values, values.length);\n+    newValues[DateTimeFieldType.year().getFieldIndex()] = year;\n+    newValues[DateTimeFieldType.monthOfYear().getFieldIndex()] = month;\n+    newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = day;\n+    return newValues;\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}