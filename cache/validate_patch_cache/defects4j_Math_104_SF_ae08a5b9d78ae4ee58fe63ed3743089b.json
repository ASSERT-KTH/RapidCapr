{
    "patch": "public static double regularizedGamma(double a, double x) {\n    final double gamma = Gamma.gamma(a);\n    if (Double.isNaN(gamma) || Double.isInfinite(gamma)) {\n        return gamma;\n    }\n    final double igamma = Gamma.incompleteGamma(a, x);\n    if (Double.isNaN(igamma) || Double.isInfinite(igamma)) {\n        return igamma;\n    }\n    return igamma / gamma;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..4e0aba017 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,17 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    final double gamma = Gamma.gamma(a);\n+    if (Double.isNaN(gamma) || Double.isInfinite(gamma)) {\n+        return gamma;\n+    }\n+    final double igamma = Gamma.incompleteGamma(a, x);\n+    if (Double.isNaN(igamma) || Double.isInfinite(igamma)) {\n+        return igamma;\n+    }\n+    return igamma / gamma;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}