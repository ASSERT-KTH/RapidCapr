{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            // check if year is leap year\n            if (partial.isSupported(DateTimeFieldType.year())) {\n                int year = partial.get(DateTimeFieldType.year());\n                if (iChronology.isLeapYear(year)) {\n                    // adjust the month-day field to a non-leap date before adding months\n                    int month = partial.get(DateTimeFieldType.monthOfYear());\n                    int day = partial.get(DateTimeFieldType.dayOfMonth());\n                    if (month == 2 && day == 29) {\n                        values = iChronology.get(partial, iChronology.monthOfYear().set(iChronology.dayOfMonth().set(iChronology.set(partial, instant), 28), 3));\n                    }\n                }\n            }\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..736c424c 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,12 +206,24 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n+            // check if year is leap year\n+            if (partial.isSupported(DateTimeFieldType.year())) {\n+                int year = partial.get(DateTimeFieldType.year());\n+                if (iChronology.isLeapYear(year)) {\n+                    // adjust the month-day field to a non-leap date before adding months\n+                    int month = partial.get(DateTimeFieldType.monthOfYear());\n+                    int day = partial.get(DateTimeFieldType.dayOfMonth());\n+                    if (month == 2 && day == 29) {\n+                        values = iChronology.get(partial, iChronology.monthOfYear().set(iChronology.dayOfMonth().set(iChronology.set(partial, instant), 28), 3));\n+                    }\n+                }\n+            }\n             instant = add(instant, valueToAdd);\n             return iChronology.get(partial, instant);\n         } else {",
    "result_reason": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]",
    "test_result": "FAIL"
}