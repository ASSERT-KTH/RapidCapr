{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.Precision;\n\npublic class GammaFunction {\n\n    public static double evaluate(double x) {\n        if (x <= 0.0) {\n            return Double.NaN;\n        } else if (x < 1.0) {\n            return GammaFunction.evaluate(x + 1.0) / x;\n        } else if (x == 1.0) {\n            return 1.0;\n        } else if (x > 1.0 && x < 2.0) { // fixed this line\n            // Taylor expansion around x = 1\n            double[] c = {\n                    -0.5772156649015329, 0.42278433509846714,\n                    0.8462711560934458, -0.042956251209264245,\n                    -0.00421983539641838, 0.0013268085349196727,\n                    9.926418857691752E-5, -1.0050772696461582E-5,\n                    -1.1812745704870203E-6, 1.5311253542743025E-7,\n                    1.9626155740684352E-8, -2.303661336855423E-9,\n                    -3.238691558854387E-10, 3.971148547640586E-11,\n                    6.6444510606524184E-12, -8.794954286043545E-13,\n                    -1.5609069748485669E-13, 2.2552914162395233E-14,\n                    4.147528418900726E-15, -6.948218305801042E-16,\n                    -1.3753614833495682E-16, 2.447862518144414E-17,\n                    5.044519197478856E-18, -1.0230655760203873E-18,\n                    -2.2876107992817087E-19, 5.287701074344996E-20,\n                    1.294436522615028E-20, -3.423610564783701E-21,\n                    -9.285692657900107E-22, 2.640266310977534E-22,\n                    7.655535601521333E-23, -2.3026846397117523E-23,\n                    -7.088787424545966E-24, 2.2428179740081427E-24,\n                    7.296591187822495E-25, -2.4248356771798254E-25,\n                    -8.365941895003162E-26, 2.8802050316833803E-26,\n                    1.0321055435674082E-26, -3.6343989139550324E-27,\n                    -1.3154443876142638E-27, 4.6983847629593865E-28,\n                    1.7203370788304256E-28, -6.217039562341957E-29,\n                    -2.2951357403154916E-29, 8.357990307178125E-30,\n                    3.102036400230382E-30, -1.138858170429518E-30,\n                    -4.24698009687957E-31, 1.567323718358697E-31,\n                    5.88537976823552E-32, -2.1846165335900744E-32,\n                    -8.216623952781342E-33, 3.072924168011944E-33,\n                    1.1588085853543994E-33, -4.354092766978054E-34,\n                    -1.650017383075577E-34, 6.238700148832531E-35,\n                    2.3719979942046E-35, -9.01743723935913E-36,\n                    -3.428161946804176E-36, 1.30848028922788E-36,\n                    4.984340942237218E-37, -1.90998996592647E-37,\n                    -7.297706155481318E-38, 2.800000927071439E-38,\n                    1.0745433482230134E-38, -4.136620301514633E-39,\n                    -1.5906932685319982E-39, 6.134047491035258E-40,\n                    2.3635561898352904E-40, -9.115737104190008E-41,\n                    -3.514826555962038E-41, 1.35425997964393E-41\n            };\n            double y = x - 1.0;\n            double r = c[0];\n            for (int i = 1; i < c.length; ++i) {\n                r += c[i] * FastMath.pow(y, i);\n            }\n            return r;\n        } else {\n            return Gamma.gamma(x);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..ac27af238 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,71 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.util.Precision;\n+\n+public class GammaFunction {\n+\n+    public static double evaluate(double x) {\n+        if (x <= 0.0) {\n+            return Double.NaN;\n+        } else if (x < 1.0) {\n+            return GammaFunction.evaluate(x + 1.0) / x;\n+        } else if (x == 1.0) {\n+            return 1.0;\n+        } else if (x > 1.0 && x < 2.0) { // fixed this line\n+            // Taylor expansion around x = 1\n+            double[] c = {\n+                    -0.5772156649015329, 0.42278433509846714,\n+                    0.8462711560934458, -0.042956251209264245,\n+                    -0.00421983539641838, 0.0013268085349196727,\n+                    9.926418857691752E-5, -1.0050772696461582E-5,\n+                    -1.1812745704870203E-6, 1.5311253542743025E-7,\n+                    1.9626155740684352E-8, -2.303661336855423E-9,\n+                    -3.238691558854387E-10, 3.971148547640586E-11,\n+                    6.6444510606524184E-12, -8.794954286043545E-13,\n+                    -1.5609069748485669E-13, 2.2552914162395233E-14,\n+                    4.147528418900726E-15, -6.948218305801042E-16,\n+                    -1.3753614833495682E-16, 2.447862518144414E-17,\n+                    5.044519197478856E-18, -1.0230655760203873E-18,\n+                    -2.2876107992817087E-19, 5.287701074344996E-20,\n+                    1.294436522615028E-20, -3.423610564783701E-21,\n+                    -9.285692657900107E-22, 2.640266310977534E-22,\n+                    7.655535601521333E-23, -2.3026846397117523E-23,\n+                    -7.088787424545966E-24, 2.2428179740081427E-24,\n+                    7.296591187822495E-25, -2.4248356771798254E-25,\n+                    -8.365941895003162E-26, 2.8802050316833803E-26,\n+                    1.0321055435674082E-26, -3.6343989139550324E-27,\n+                    -1.3154443876142638E-27, 4.6983847629593865E-28,\n+                    1.7203370788304256E-28, -6.217039562341957E-29,\n+                    -2.2951357403154916E-29, 8.357990307178125E-30,\n+                    3.102036400230382E-30, -1.138858170429518E-30,\n+                    -4.24698009687957E-31, 1.567323718358697E-31,\n+                    5.88537976823552E-32, -2.1846165335900744E-32,\n+                    -8.216623952781342E-33, 3.072924168011944E-33,\n+                    1.1588085853543994E-33, -4.354092766978054E-34,\n+                    -1.650017383075577E-34, 6.238700148832531E-35,\n+                    2.3719979942046E-35, -9.01743723935913E-36,\n+                    -3.428161946804176E-36, 1.30848028922788E-36,\n+                    4.984340942237218E-37, -1.90998996592647E-37,\n+                    -7.297706155481318E-38, 2.800000927071439E-38,\n+                    1.0745433482230134E-38, -4.136620301514633E-39,\n+                    -1.5906932685319982E-39, 6.134047491035258E-40,\n+                    2.3635561898352904E-40, -9.115737104190008E-41,\n+                    -3.514826555962038E-41, 1.35425997964393E-41\n+            };\n+            double y = x - 1.0;\n+            double r = c[0];\n+            for (int i = 1; i < c.length; ++i) {\n+                r += c[i] * FastMath.pow(y, i);\n+            }\n+            return r;\n+        } else {\n+            return Gamma.gamma(x);\n+        }\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}