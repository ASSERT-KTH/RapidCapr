{
    "patch": "    /**\n     * Appends the quoted string to the given buffer.\n     *\n     * @param pattern the pattern string\n     * @param pos the parse position\n     * @param appendTo the string buffer\n     * @param escapingOn true if escaping is on\n     * @return the string buffer\n     */\n    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n                                             StringBuffer appendTo, boolean escapingOn) {\n        int start = pos.getIndex();\n        char[] c = pattern.toCharArray();\n        if (escapingOn && c[start] == QUOTE) {\n            return appendTo == null ? null : appendTo.append(QUOTE);\n        }\n        int lastHold = start;\n        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n                        QUOTE);\n                pos.setIndex(i + ESCAPED_QUOTE.length());\n                lastHold = pos.getIndex();\n                continue;\n            }\n            switch (c[pos.getIndex()]) {\n                case QUOTE:\n                    next(pos);\n                    return appendTo == null ? null : appendTo.append(c, lastHold,\n                            pos.getIndex() - lastHold);\n                default:\n                    next(pos);\n            }\n        }\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string at position \" + start);\n    }\n\n    /**\n     * Formats a time zone for display.\n     *\n     * @param tz The time zone to format\n     * @param isShort Whether to format a short time zone\n     * @return The formatted time zone\n     */\n    public static String formatTimeZone(TimeZone tz, boolean isShort) {\n        DateFormat fmt = isShort ? TimeZone.getShortTimeZoneNames().getFormatter()\n                : TimeZone.getLongTimeZoneNames().getFormatter();\n        fmt.setTimeZone(tz);\n        return fmt.format(0);\n    }\n\n    /**\n     * Formats a date with a pattern and a locale.\n     *\n     * @param date The date to format\n     * @param pattern The pattern to use\n     * @param locale The locale to use (or null for root locale)\n     * @return The formatted date\n     */\n    public static String formatDate(Date date, String pattern, Locale locale) {\n        DateFormat fmt = new SimpleDateFormat(pattern, locale == null ? Locale.ROOT : locale);\n        return fmt.format(date);\n    }\n",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\nindex 404be490..62dc6678 100644\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -414,8 +414,17 @@ public class ExtendedMessageFormat extends MessageFormat {\n      * @param escapingOn whether to process escaped quotes\n      * @return <code>appendTo</code>\n      */\n+    /**\n+     * Appends the quoted string to the given buffer.\n+     *\n+     * @param pattern the pattern string\n+     * @param pos the parse position\n+     * @param appendTo the string buffer\n+     * @param escapingOn true if escaping is on\n+     * @return the string buffer\n+     */\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n-            StringBuffer appendTo, boolean escapingOn) {\n+                                             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n@@ -431,18 +440,46 @@ public class ExtendedMessageFormat extends MessageFormat {\n                 continue;\n             }\n             switch (c[pos.getIndex()]) {\n-            case QUOTE:\n-                next(pos);\n-                return appendTo == null ? null : appendTo.append(c, lastHold,\n-                        pos.getIndex() - lastHold);\n-            default:\n-                next(pos);\n+                case QUOTE:\n+                    next(pos);\n+                    return appendTo == null ? null : appendTo.append(c, lastHold,\n+                            pos.getIndex() - lastHold);\n+                default:\n+                    next(pos);\n             }\n         }\n         throw new IllegalArgumentException(\n                 \"Unterminated quoted string at position \" + start);\n     }\n \n+    /**\n+     * Formats a time zone for display.\n+     *\n+     * @param tz The time zone to format\n+     * @param isShort Whether to format a short time zone\n+     * @return The formatted time zone\n+     */\n+    public static String formatTimeZone(TimeZone tz, boolean isShort) {\n+        DateFormat fmt = isShort ? TimeZone.getShortTimeZoneNames().getFormatter()\n+                : TimeZone.getLongTimeZoneNames().getFormatter();\n+        fmt.setTimeZone(tz);\n+        return fmt.format(0);\n+    }\n+\n+    /**\n+     * Formats a date with a pattern and a locale.\n+     *\n+     * @param date The date to format\n+     * @param pattern The pattern to use\n+     * @param locale The locale to use (or null for root locale)\n+     * @return The formatted date\n+     */\n+    public static String formatDate(Date date, String pattern, Locale locale) {\n+        DateFormat fmt = new SimpleDateFormat(pattern, locale == null ? Locale.ROOT : locale);\n+        return fmt.format(date);\n+    }\n+\n+\n     /**\n      * Consume quoted string only\n      * ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}