{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    removeTrailingUnreferencedArgNodes(fnScope, argList);\n  }\n\n  private void removeTrailingUnreferencedArgNodes(Scope fnScope, Node argList) {\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      // Before removing the last arg, make sure it's unreferenced.\n      boolean lastArgReferenced = false;\n      for (VarReference reference : fnScope.getVarReferences(lastArg.getString())) {\n        // Find the VAR node containing this reference.\n        Node node = reference.getNode();\n        while (node != null && !NodeUtil.isNameDeclaration(node)) {\n          node = node.getParent();\n        }\n\n        // If there are references to the variable after the last parameter, then this one\n        // is not unreferenced.\n        if (node != null && argList.getNext().compareTo(node) < 0) {\n          lastArgReferenced = true;\n          break;\n        }\n      }\n\n      // If the lastArg isn't used, remove it.\n      if (!lastArgReferenced) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..073b07f4 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,47 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    removeTrailingUnreferencedArgNodes(fnScope, argList);\n+  }\n+\n+  private void removeTrailingUnreferencedArgNodes(Scope fnScope, Node argList) {\n+    Node lastArg;\n+    while ((lastArg = argList.getLastChild()) != null) {\n+      // Before removing the last arg, make sure it's unreferenced.\n+      boolean lastArgReferenced = false;\n+      for (VarReference reference : fnScope.getVarReferences(lastArg.getString())) {\n+        // Find the VAR node containing this reference.\n+        Node node = reference.getNode();\n+        while (node != null && !NodeUtil.isNameDeclaration(node)) {\n+          node = node.getParent();\n+        }\n+\n+        // If there are references to the variable after the last parameter, then this one\n+        // is not unreferenced.\n+        if (node != null && argList.getNext().compareTo(node) < 0) {\n+          lastArgReferenced = true;\n+          break;\n+        }\n+      }\n+\n+      // If the lastArg isn't used, remove it.\n+      if (!lastArgReferenced) {\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+      } else {\n+        break;\n+      }\n+    }\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}