{
    "patch": "        } catch (IllegalFieldValueException e) {\n            if (resetFields) {\n                // reset, or drop the offending field and try again\n                int savedCount = count;\n                for (int i = 0; i < savedCount; i++) {\n                    try {\n                        millis = savedFields[i].set(millis, false);\n                    } catch (IllegalFieldValueException ignored) {\n                        // remove the field and try again\n                        count--;\n                        for (int j = i; j < count; j++) {\n                            savedFields[j] = savedFields[j + 1];\n                        }\n                        i--;\n                        savedCount--;\n                    }\n                }\n                SavedField lastSaved = null;\n                try {\n                    // calculate the new value\n                    millis = savedFields[count - 1].set(millis, true);\n                    lastSaved = savedFields[count - 1];\n                    // tolerate one additional underflow if the listener is lenient\n                    if (resetFields) {\n                        for (int i = count; i < savedCount; i++) {\n                            millis = savedFields[i].set(millis, false);\n                        }\n                    }\n                } catch (IllegalFieldValueException ex) {\n                    if (text != null) {\n                        ex.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n                    }\n                    throw ex;\n                }\n                if (lastSaved != null && iDefaultYear == null &&\n                    (lastSaved.iField.getType() == DateTimeFieldType.year() ||\n                     lastSaved.iField.getType() == DateTimeFieldType.yearOfEra())) {\n                    // field type year implies iDefaultYear\n                    int year = lastSaved.iValue;\n                    if (lastSaved.iValue < 100) {\n                        year = iChrono.year().get(millis);\n                    }\n                    setSavedField(new SavedField(DateTimeFieldType.year(), iChrono.year().set(0, year), iChrono));\n                    count++;\n                    millis = computeMillis(resetFields, text);\n                }\n                return millis;\n            }\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..5207ecad 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,59 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        } catch (IllegalFieldValueException e) {\n+            if (resetFields) {\n+                // reset, or drop the offending field and try again\n+                int savedCount = count;\n+                for (int i = 0; i < savedCount; i++) {\n+                    try {\n+                        millis = savedFields[i].set(millis, false);\n+                    } catch (IllegalFieldValueException ignored) {\n+                        // remove the field and try again\n+                        count--;\n+                        for (int j = i; j < count; j++) {\n+                            savedFields[j] = savedFields[j + 1];\n+                        }\n+                        i--;\n+                        savedCount--;\n+                    }\n+                }\n+                SavedField lastSaved = null;\n+                try {\n+                    // calculate the new value\n+                    millis = savedFields[count - 1].set(millis, true);\n+                    lastSaved = savedFields[count - 1];\n+                    // tolerate one additional underflow if the listener is lenient\n+                    if (resetFields) {\n+                        for (int i = count; i < savedCount; i++) {\n+                            millis = savedFields[i].set(millis, false);\n+                        }\n+                    }\n+                } catch (IllegalFieldValueException ex) {\n+                    if (text != null) {\n+                        ex.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+                    }\n+                    throw ex;\n+                }\n+                if (lastSaved != null && iDefaultYear == null &&\n+                    (lastSaved.iField.getType() == DateTimeFieldType.year() ||\n+                     lastSaved.iField.getType() == DateTimeFieldType.yearOfEra())) {\n+                    // field type year implies iDefaultYear\n+                    int year = lastSaved.iValue;\n+                    if (lastSaved.iValue < 100) {\n+                        year = iChrono.year().get(millis);\n+                    }\n+                    setSavedField(new SavedField(DateTimeFieldType.year(), iChrono.year().set(0, year), iChrono));\n+                    count++;\n+                    millis = computeMillis(resetFields, text);\n+                }\n+                return millis;\n+            }\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}