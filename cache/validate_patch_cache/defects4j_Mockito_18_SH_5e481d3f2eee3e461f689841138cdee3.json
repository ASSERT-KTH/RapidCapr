{
    "patch": "public ReturnValue execute(MethodInvocation invocation, ExecutionContext context) {\n    List<Object> result = new ArrayList<>();\n    try {\n        result = method.invoke(target, invocation.getArguments());\n    } catch (IllegalAccessException | InvocationTargetException e) {\n        return ReturnValue.forException(e);\n    }\n\n    if (result == null) {\n        return ReturnValue.forValue(result);\n    }\n\n    if (Iterable.class.isAssignableFrom(result.getClass())) {\n        Iterator iterator = ((Iterable) result).iterator();\n        if (iterator.hasNext()) {\n            return ReturnValue.forValue(iterator.next());\n        }\n    }\n\n    return ReturnValue.forValue(result);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}