{
    "patch": "\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\n        if(mock instanceof Factory) {\n            ((Factory)mock).setCallback(0, newFilter);\n        }\n        else {\n            Enhancer enhancer = new Enhancer();\n            enhancer.setSuperclass(mock.getClass());\n            enhancer.setCallback(newFilter);\n            T newProxy = (T) enhancer.create();\n            copyMockState(mock, newProxy);\n            setMockHandler(newProxy, newMockHandler);\n            mock = newProxy;\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..e75e3ef60 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,25 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+        if(mock instanceof Factory) {\n+            ((Factory)mock).setCallback(0, newFilter);\n+        }\n+        else {\n+            Enhancer enhancer = new Enhancer();\n+            enhancer.setSuperclass(mock.getClass());\n+            enhancer.setCallback(newFilter);\n+            T newProxy = (T) enhancer.create();\n+            copyMockState(mock, newProxy);\n+            setMockHandler(newProxy, newMockHandler);\n+            mock = newProxy;\n+        }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}