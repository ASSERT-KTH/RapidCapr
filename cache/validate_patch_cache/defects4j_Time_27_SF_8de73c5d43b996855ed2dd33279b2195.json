{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    List<Object> tempElementPairs = new ArrayList<>(elementPairs);\n    Separator combiningSeparator = null;\n\n    // combine adjacent separators\n    for (int i = 0; i < tempElementPairs.size() - 1; i++) {\n        Object currentElem = tempElementPairs.get(i);\n        Object nextElem = tempElementPairs.get(i + 1);\n\n        if (currentElem instanceof Separator && nextElem instanceof Separator) {\n            Separator currentSep = (Separator) currentElem;\n            Separator nextSep = (Separator) nextElem;\n\n            Separator combinedSep = currentSep.combine(nextSep);\n\n            tempElementPairs.set(i, combinedSep);\n            tempElementPairs.remove(i + 1);\n\n            i--;\n        }\n    }\n\n    Object[] comp = null;\n\n    for (int i = 0; i < tempElementPairs.size(); i++) {\n        Object pair = tempElementPairs.get(i);\n\n        if (pair instanceof Separator) {\n            Separator sep = (Separator) pair;\n\n            List<Object> leftPairs = tempElementPairs.subList(0, i);\n            List<Object> rightPairs = tempElementPairs.subList(i + 1, tempElementPairs.size());\n\n            PeriodFormatter leftFormatter = toFormatter(leftPairs, notPrinter, notParser);\n            PeriodFormatter rightFormatter = toFormatter(rightPairs, notPrinter, notParser);\n\n            if (notPrinter) {\n                return new PeriodFormatter(null, sep.finish(null, rightFormatter.getParser()));\n            } else if (notParser) {\n                return new PeriodFormatter(leftFormatter.getPrinter(), sep.finish(rightFormatter.getPrinter(), null));\n            } else {\n                return new PeriodFormatter(leftFormatter.getPrinter(), sep.finish(rightFormatter.getPrinter(), rightFormatter.getParser()));\n            }\n        } else if (pair instanceof PeriodPrinter && !notPrinter) {\n            comp = createComposite(tempElementPairs);\n            break;\n        } else if (pair instanceof PeriodParser && !notParser) {\n            comp = createComposite(tempElementPairs);\n            break;\n        } else if (pair instanceof Separator && combiningSeparator == null) {\n            combiningSeparator = (Separator) pair;\n        }\n    }\n\n    if (comp == null) {\n        comp = createComposite(tempElementPairs);\n    }\n\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        PeriodPrinter printer = (PeriodPrinter) comp[0];\n        PeriodParser parser = (PeriodParser) comp[1];\n\n        if (combiningSeparator != null) {\n            printer = combiningSeparator.finish(printer, null);\n            parser = combiningSeparator.finish(null, parser);\n        }\n\n        return new PeriodFormatter(printer, parser);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..14541ef1 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,85 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    List<Object> tempElementPairs = new ArrayList<>(elementPairs);\n+    Separator combiningSeparator = null;\n+\n+    // combine adjacent separators\n+    for (int i = 0; i < tempElementPairs.size() - 1; i++) {\n+        Object currentElem = tempElementPairs.get(i);\n+        Object nextElem = tempElementPairs.get(i + 1);\n+\n+        if (currentElem instanceof Separator && nextElem instanceof Separator) {\n+            Separator currentSep = (Separator) currentElem;\n+            Separator nextSep = (Separator) nextElem;\n+\n+            Separator combinedSep = currentSep.combine(nextSep);\n+\n+            tempElementPairs.set(i, combinedSep);\n+            tempElementPairs.remove(i + 1);\n+\n+            i--;\n+        }\n+    }\n+\n+    Object[] comp = null;\n+\n+    for (int i = 0; i < tempElementPairs.size(); i++) {\n+        Object pair = tempElementPairs.get(i);\n+\n+        if (pair instanceof Separator) {\n+            Separator sep = (Separator) pair;\n+\n+            List<Object> leftPairs = tempElementPairs.subList(0, i);\n+            List<Object> rightPairs = tempElementPairs.subList(i + 1, tempElementPairs.size());\n+\n+            PeriodFormatter leftFormatter = toFormatter(leftPairs, notPrinter, notParser);\n+            PeriodFormatter rightFormatter = toFormatter(rightPairs, notPrinter, notParser);\n+\n+            if (notPrinter) {\n+                return new PeriodFormatter(null, sep.finish(null, rightFormatter.getParser()));\n+            } else if (notParser) {\n+                return new PeriodFormatter(leftFormatter.getPrinter(), sep.finish(rightFormatter.getPrinter(), null));\n+            } else {\n+                return new PeriodFormatter(leftFormatter.getPrinter(), sep.finish(rightFormatter.getPrinter(), rightFormatter.getParser()));\n+            }\n+        } else if (pair instanceof PeriodPrinter && !notPrinter) {\n+            comp = createComposite(tempElementPairs);\n+            break;\n+        } else if (pair instanceof PeriodParser && !notParser) {\n+            comp = createComposite(tempElementPairs);\n+            break;\n+        } else if (pair instanceof Separator && combiningSeparator == null) {\n+            combiningSeparator = (Separator) pair;\n         }\n     }\n \n+    if (comp == null) {\n+        comp = createComposite(tempElementPairs);\n+    }\n+\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        PeriodPrinter printer = (PeriodPrinter) comp[0];\n+        PeriodParser parser = (PeriodParser) comp[1];\n+\n+        if (combiningSeparator != null) {\n+            printer = combiningSeparator.finish(printer, null);\n+            parser = combiningSeparator.finish(null, parser);\n+        }\n+\n+        return new PeriodFormatter(printer, parser);\n+    }\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}