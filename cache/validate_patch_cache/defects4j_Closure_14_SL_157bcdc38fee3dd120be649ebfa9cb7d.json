{
    "patch": "if (cfa != null && parent.getNext() != null) {\n  Node followNode = computeFollowNode(fromNode, parent.getNext(), cfa);\n  if (followNode != null) {\n    cfa.createEdge(fromNode, Branch.UNCOND, followNode);\n  } else {\n    // If the follow node is null, create an unconditional edge to the next node in the parent block.\n    Node nextInParent = NodeUtil.findNextSiblingInParent(parent);\n    Preconditions.checkNotNull(nextInParent, \"Expected a next sibling in parent: %s\", parent);\n    cfa.createEdge(fromNode, Branch.UNCOND, nextInParent);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..57c36e1b 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,17 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null && parent.getNext() != null) {\n+  Node followNode = computeFollowNode(fromNode, parent.getNext(), cfa);\n+  if (followNode != null) {\n+    cfa.createEdge(fromNode, Branch.UNCOND, followNode);\n+  } else {\n+    // If the follow node is null, create an unconditional edge to the next node in the parent block.\n+    Node nextInParent = NodeUtil.findNextSiblingInParent(parent);\n+    Preconditions.checkNotNull(nextInParent, \"Expected a next sibling in parent: %s\", parent);\n+    cfa.createEdge(fromNode, Branch.UNCOND, nextInParent);\n+  }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}