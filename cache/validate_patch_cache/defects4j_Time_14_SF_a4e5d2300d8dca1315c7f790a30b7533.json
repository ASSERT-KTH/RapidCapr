{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        int yearToAdd = valueToAdd / 12;\n        int monthToAdd = valueToAdd % 12;\n        int newMonth = values[1] + monthToAdd;\n        int newYear = values[0] + yearToAdd;\n        int newDay = values[2];\n        if (newMonth > 12) {\n            newMonth -= 12;\n            newYear++;\n        } else if (newMonth < 1) {\n            newMonth += 12;\n            newYear--;\n        }\n        boolean isLeapYear = iChronology.year().isLeap(newYear);\n        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(newYear, newMonth);\n        int maxDayOfYear = iChronology.dayOfYear().getMaximumValue(newYear);\n        if (newDay > maxDayOfMonth) {\n            newDay = maxDayOfMonth;\n        } else if (newDay < 1) {\n            newDay = 1;\n        }\n        int newDayOfYear = iChronology.dayOfYear().get(newYear, newMonth, newDay);\n        if (newDayOfYear > maxDayOfYear) {\n            newDayOfYear = maxDayOfYear;\n            newMonth = 12;\n            newDay = iChronology.dayOfMonth().getMaximumValue(newYear, newMonth);\n        }\n        values[0] = newYear;\n        values[1] = newMonth;\n        values[2] = newDay;\n        return values;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..f6e4227a 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,45 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        int yearToAdd = valueToAdd / 12;\n+        int monthToAdd = valueToAdd % 12;\n+        int newMonth = values[1] + monthToAdd;\n+        int newYear = values[0] + yearToAdd;\n+        int newDay = values[2];\n+        if (newMonth > 12) {\n+            newMonth -= 12;\n+            newYear++;\n+        } else if (newMonth < 1) {\n+            newMonth += 12;\n+            newYear--;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        boolean isLeapYear = iChronology.year().isLeap(newYear);\n+        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(newYear, newMonth);\n+        int maxDayOfYear = iChronology.dayOfYear().getMaximumValue(newYear);\n+        if (newDay > maxDayOfMonth) {\n+            newDay = maxDayOfMonth;\n+        } else if (newDay < 1) {\n+            newDay = 1;\n         }\n+        int newDayOfYear = iChronology.dayOfYear().get(newYear, newMonth, newDay);\n+        if (newDayOfYear > maxDayOfYear) {\n+            newDayOfYear = maxDayOfYear;\n+            newMonth = 12;\n+            newDay = iChronology.dayOfMonth().getMaximumValue(newYear, newMonth);\n+        }\n+        values[0] = newYear;\n+        values[1] = newMonth;\n+        values[2] = newDay;\n+        return values;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: no suitable method found for getMaximumValue(int,int)",
    "test_result": "ERROR"
}