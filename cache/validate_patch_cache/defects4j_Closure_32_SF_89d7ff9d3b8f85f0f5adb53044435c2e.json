{
    "patch": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n  if (token == JsDocToken.EOC || token == JsDocToken.EOF || token == JsDocToken.EOL) {\n    return new ExtractionInfo(\"\", token);\n  }\n\n  stream.update();\n  int startLineno = stream.getLineno();\n  int startCharno = stream.getCharno() + 1;\n\n  String firstLine = stream.getRemainingJSDocLine();\n  if (option != WhitespaceOption.PRESERVE) {\n    firstLine = firstLine.trim();\n  }\n  StringBuilder builder = new StringBuilder(firstLine);\n\n  state = State.SEARCHING_ANNOTATION;\n\n  boolean ignoreStar = false;\n  boolean isMultiline = false;\n\n  token = next();\n\n  while (true) {\n    switch (token) {\n      case STAR:\n        if (ignoreStar) {\n          startCharno++;\n          builder.append(\"*\");\n        } else {\n          if (builder.length() > 0 && !isMultiline) {\n            builder.append(' ');\n          }\n          builder.append('*');\n        }\n\n        ignoreStar = true;\n        break;\n\n      case EOL:\n        if (option != WhitespaceOption.SINGLE_LINE) {\n          builder.append('\\n');\n        }\n        ignoreStar = false;\n        startCharno = 0;\n        startLineno = stream.getLineno();\n        break;\n\n      default:\n        ignoreStar = false;\n        state = State.SEARCHING_ANNOTATION;\n\n        if (token == JsDocToken.EOC || token == JsDocToken.EOF\n          || (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {\n          String extractedText = builder.toString();\n          if (option != WhitespaceOption.PRESERVE) {\n            extractedText = extractedText.trim();\n          }\n          int endLineno = stream.getLineno();\n          int endCharno = stream.getCharno();\n          if (extractedText.length() > 0) {\n            if (extractedText.contains(\":\")) {\n              int colonIndex = extractedText.indexOf(\":\");\n              String propertyName = extractedText.substring(0, colonIndex).trim();\n              extractedText = extractedText.substring(colonIndex + 1).trim();\n\n              jsdocBuilder.markDeprecated(propertyName, extractedText, startLineno, startCharno, endLineno, endCharno);\n            } else {\n              jsdocBuilder.markText(extractedText, startLineno, startCharno, endLineno, endCharno);\n            }\n          }\n\n          return new ExtractionInfo(extractedText, token);\n        }\n\n        if (builder.length() > 0 && !isMultiline) {\n          builder.append(' ');\n        }\n        builder.append(toString(token));\n\n        String restOfLine = stream.getRemainingJSDocLine();\n        if (option != WhitespaceOption.PRESERVE) {\n          restOfLine = restOfLine.trim();\n        }\n\n        if (builder.charAt(builder.length() - 1) == '*' || restOfLine.startsWith(\"*\")) {\n          isMultiline = true;\n        } else if (isMultiline && !restOfLine.trim().isEmpty()) {\n          builder.append(' ');\n        }\n\n        builder.append(restOfLine);\n        break;\n    }\n    token = next();\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..b62b83ae 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,107 +1326,102 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n-                                                      WhitespaceOption option) {\n-\n-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n-        token == JsDocToken.EOF) {\n-      return new ExtractionInfo(\"\", token);\n-    }\n-\n-    stream.update();\n-    int startLineno = stream.getLineno();\n-    int startCharno = stream.getCharno() + 1;\n-\n-    // Read the content from the first line.\n-    String line = stream.getRemainingJSDocLine();\n-    if (option != WhitespaceOption.PRESERVE) {\n-      line = line.trim();\n-    }\n-\n-    StringBuilder builder = new StringBuilder();\n-    builder.append(line);\n-\n-    state = State.SEARCHING_ANNOTATION;\n-    token = next();\n+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n+  if (token == JsDocToken.EOC || token == JsDocToken.EOF || token == JsDocToken.EOL) {\n+    return new ExtractionInfo(\"\", token);\n+  }\n \n-    boolean ignoreStar = false;\n+  stream.update();\n+  int startLineno = stream.getLineno();\n+  int startCharno = stream.getCharno() + 1;\n \n-    // Track the start of the line to count whitespace that\n-    // the tokenizer skipped. Because this case is rare, it's easier\n-    // to do this here than in the tokenizer.\n+  String firstLine = stream.getRemainingJSDocLine();\n+  if (option != WhitespaceOption.PRESERVE) {\n+    firstLine = firstLine.trim();\n+  }\n+  StringBuilder builder = new StringBuilder(firstLine);\n \n-    do {\n-      switch (token) {\n-        case STAR:\n-          if (ignoreStar) {\n-            // Mark the position after the star as the new start of the line.\n-          } else {\n-            // The star is part of the comment.\n-            if (builder.length() > 0) {\n-              builder.append(' ');\n-            }\n+  state = State.SEARCHING_ANNOTATION;\n \n-            builder.append('*');\n-          }\n+  boolean ignoreStar = false;\n+  boolean isMultiline = false;\n \n-          token = next();\n-          continue;\n+  token = next();\n \n-        case EOL:\n-          if (option != WhitespaceOption.SINGLE_LINE) {\n-            builder.append(\"\\n\");\n+  while (true) {\n+    switch (token) {\n+      case STAR:\n+        if (ignoreStar) {\n+          startCharno++;\n+          builder.append(\"*\");\n+        } else {\n+          if (builder.length() > 0 && !isMultiline) {\n+            builder.append(' ');\n           }\n+          builder.append('*');\n+        }\n \n-          ignoreStar = true;\n-          token = next();\n-          continue;\n-\n-        default:\n-          ignoreStar = false;\n-          state = State.SEARCHING_ANNOTATION;\n-\n-              // All tokens must be separated by a space.\n-\n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n-            String multilineText = builder.toString();\n+        ignoreStar = true;\n+        break;\n \n-            if (option != WhitespaceOption.PRESERVE) {\n-              multilineText = multilineText.trim();\n-            }\n+      case EOL:\n+        if (option != WhitespaceOption.SINGLE_LINE) {\n+          builder.append('\\n');\n+        }\n+        ignoreStar = false;\n+        startCharno = 0;\n+        startLineno = stream.getLineno();\n+        break;\n \n-            int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n+      default:\n+        ignoreStar = false;\n+        state = State.SEARCHING_ANNOTATION;\n \n-            if (multilineText.length() > 0) {\n-              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n-                  endLineno, endCharno);\n+        if (token == JsDocToken.EOC || token == JsDocToken.EOF\n+          || (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {\n+          String extractedText = builder.toString();\n+          if (option != WhitespaceOption.PRESERVE) {\n+            extractedText = extractedText.trim();\n+          }\n+          int endLineno = stream.getLineno();\n+          int endCharno = stream.getCharno();\n+          if (extractedText.length() > 0) {\n+            if (extractedText.contains(\":\")) {\n+              int colonIndex = extractedText.indexOf(\":\");\n+              String propertyName = extractedText.substring(0, colonIndex).trim();\n+              extractedText = extractedText.substring(colonIndex + 1).trim();\n+\n+              jsdocBuilder.markDeprecated(propertyName, extractedText, startLineno, startCharno, endLineno, endCharno);\n+            } else {\n+              jsdocBuilder.markText(extractedText, startLineno, startCharno, endLineno, endCharno);\n             }\n-\n-            return new ExtractionInfo(multilineText, token);\n           }\n \n-          if (builder.length() > 0) {\n-            builder.append(' ');\n-          }\n-          builder.append(toString(token));\n+          return new ExtractionInfo(extractedText, token);\n+        }\n \n-          line = stream.getRemainingJSDocLine();\n+        if (builder.length() > 0 && !isMultiline) {\n+          builder.append(' ');\n+        }\n+        builder.append(toString(token));\n \n-          if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n-          }\n+        String restOfLine = stream.getRemainingJSDocLine();\n+        if (option != WhitespaceOption.PRESERVE) {\n+          restOfLine = restOfLine.trim();\n+        }\n \n-          builder.append(line);\n-          token = next();\n-      }\n-    } while (true);\n+        if (builder.charAt(builder.length() - 1) == '*' || restOfLine.startsWith(\"*\")) {\n+          isMultiline = true;\n+        } else if (isMultiline && !restOfLine.trim().isEmpty()) {\n+          builder.append(' ');\n+        }\n+\n+        builder.append(restOfLine);\n+        break;\n+    }\n+    token = next();\n   }\n+}\n \n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}