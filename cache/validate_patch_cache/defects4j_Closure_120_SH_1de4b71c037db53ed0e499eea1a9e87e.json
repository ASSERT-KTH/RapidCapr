{
    "patch": "          } else if (block.isLoop) {\n            return false;\n          }\n        }\n      }\n\n      boolean hasAssignment = false;\n      for (int i = 0; i < references.size(); i++) {\n        Reference ref = references.get(i);\n        if (ref.isMutation() && ref != this) {\n          if (hasAssignment) {\n            return false;\n          }\n          hasAssignment = true;\n        }\n      }\n\n      return true;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..5c35b07d 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,25 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          } else if (block.isLoop) {\n+            return false;\n+          }\n+        }\n+      }\n+\n+      boolean hasAssignment = false;\n+      for (int i = 0; i < references.size(); i++) {\n+        Reference ref = references.get(i);\n+        if (ref.isMutation() && ref != this) {\n+          if (hasAssignment) {\n+            return false;\n+          }\n+          hasAssignment = true;\n+        }\n+      }\n+\n+      return true;\n+    }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}