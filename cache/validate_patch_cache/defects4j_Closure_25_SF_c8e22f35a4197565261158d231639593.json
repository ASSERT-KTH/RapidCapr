{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        if (constructorType.isConstructor()) {\n            type = constructorType.toMaybeFunctionType().getPrototype();\n        } else if (constructorType.isUnknownType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            // If constructor type is not a constructor function, assume type is \"unknown\".\n            type = getNativeType(UNKNOWN_TYPE);\n        }\n    } else {\n        // If we don't have a constructor type, assume type is \"unknown\".\n        type = getNativeType(UNKNOWN_TYPE);\n    }\n\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n        if (arg.getJSType().isVoidType()) {\n            arg.setJSType(getNativeType(UNKNOWN_TYPE));\n        }\n    }\n\n    n.setJSType(type);\n    return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..31f5502e 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,37 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n+\n     if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+        constructorType = constructorType.restrictByNotNullOrUndefined();\n+        if (constructorType.isConstructor()) {\n+            type = constructorType.toMaybeFunctionType().getPrototype();\n+        } else if (constructorType.isUnknownType()) {\n+            type = getNativeType(UNKNOWN_TYPE);\n+        } else {\n+            // If constructor type is not a constructor function, assume type is \"unknown\".\n+            type = getNativeType(UNKNOWN_TYPE);\n         }\n-      }\n+    } else {\n+        // If we don't have a constructor type, assume type is \"unknown\".\n+        type = getNativeType(UNKNOWN_TYPE);\n     }\n-    n.setJSType(type);\n+\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+        scope = traverse(arg, scope);\n+        if (arg.getJSType().isVoidType()) {\n+            arg.setJSType(getNativeType(UNKNOWN_TYPE));\n+        }\n     }\n+\n+    n.setJSType(type);\n     return scope;\n-  }\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected warning(s): JSC_TYPE_MISMATCH. inconsistent return type",
    "test_result": "FAIL"
}