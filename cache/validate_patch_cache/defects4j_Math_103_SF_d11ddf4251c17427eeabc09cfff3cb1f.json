{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n        if (Double.isInfinite(x)) {\n            if (x < 0) {\n                return 0.0;\n            } else {\n                return 1.0;\n            }\n        } else {\n            double dev = x - mean;\n            if (FastMath.abs(dev) > 40 * standardDeviation) {\n                if (dev < 0) {\n                    return 0.0;\n                } else {\n                    return 1.0;\n                }\n            } else {\n                return 0.5 * (1.0 + Erf.erf(dev /\n                        (standardDeviation * Math.sqrt(2.0))));\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..0b104135f 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -105,9 +105,26 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * x is more than 20 standard deviations from the mean, in which case the\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+public double cumulativeProbability(double x) throws MathException {\n+        if (Double.isInfinite(x)) {\n+            if (x < 0) {\n+                return 0.0;\n+            } else {\n+                return 1.0;\n+            }\n+        } else {\n+            double dev = x - mean;\n+            if (FastMath.abs(dev) > 40 * standardDeviation) {\n+                if (dev < 0) {\n+                    return 0.0;\n+                } else {\n+                    return 1.0;\n+                }\n+            } else {\n+                return 0.5 * (1.0 + Erf.erf(dev /\n+                        (standardDeviation * Math.sqrt(2.0))));\n+            }\n+        }\n     }\n     \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}