{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandler<T> oldMockHandler = (MockHandler<T>) getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler.getMockSettings());\n\n    // create a new instance of the mock using the new MockHandler\n    T newMock = Mockito.mock(mock.getClass(), newMockHandler);\n\n    // copy any delegate or interception information from the old mock to the new mock\n    if (mock instanceof MockitoSpy) {\n        MockitoSpy<T> oldSpy = (MockitoSpy<T>) mock;\n        MockitoSpy<T> newSpy = (MockitoSpy<T>) newMock;\n        newSpy.___toremove_initiating___(oldSpy.___toremove_initiated___());\n    } else if (mock instanceof ByteBuddyInterceptor) {\n        ByteBuddyInterceptor oldInterceptor = (ByteBuddyInterceptor) mock;\n        ByteBuddyInterceptor newInterceptor = (ByteBuddyInterceptor) newMock;\n        Mockito.mockingDetails(mock).getInterceptor();\n        newInterceptor.setDelegate(ByteBuddyInterceptor.unwrap(oldInterceptor.getDelegate()));\n    }\n\n    // replace the original mock with the new mock\n    Mockito.replace(mock, newMock);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..fccf43414 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,29 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandler<T> oldMockHandler = (MockHandler<T>) getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler.getMockSettings());\n+\n+    // create a new instance of the mock using the new MockHandler\n+    T newMock = Mockito.mock(mock.getClass(), newMockHandler);\n+\n+    // copy any delegate or interception information from the old mock to the new mock\n+    if (mock instanceof MockitoSpy) {\n+        MockitoSpy<T> oldSpy = (MockitoSpy<T>) mock;\n+        MockitoSpy<T> newSpy = (MockitoSpy<T>) newMock;\n+        newSpy.___toremove_initiating___(oldSpy.___toremove_initiated___());\n+    } else if (mock instanceof ByteBuddyInterceptor) {\n+        ByteBuddyInterceptor oldInterceptor = (ByteBuddyInterceptor) mock;\n+        ByteBuddyInterceptor newInterceptor = (ByteBuddyInterceptor) newMock;\n+        Mockito.mockingDetails(mock).getInterceptor();\n+        newInterceptor.setDelegate(ByteBuddyInterceptor.unwrap(oldInterceptor.getDelegate()));\n+    }\n+\n+    // replace the original mock with the new mock\n+    Mockito.replace(mock, newMock);\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}