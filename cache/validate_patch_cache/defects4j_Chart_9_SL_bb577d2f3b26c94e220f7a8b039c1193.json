{
    "patch": "    public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n        throws CloneNotSupportedException {\n\n        if (start == null) {\n            throw new IllegalArgumentException(\"Null 'start' argument.\");\n        }\n        if (end == null) {\n            throw new IllegalArgumentException(\"Null 'end' argument.\");\n        }\n        if (start.compareTo(end) > 0) {\n            throw new IllegalArgumentException(\n                    \"Requires start on or before end.\");\n        }\n        boolean emptyRange = false;\n        int startIndex = getIndex(start);\n        if (startIndex < 0) {\n            startIndex = -(startIndex + 1);\n            if (startIndex == this.data.size()) {\n                emptyRange = true;  // start is after last data item\n            }\n        }\n        int endIndex = getIndex(end);\n        if (endIndex < 0 || startIndex >= this.data.size()) { // fix here\n            emptyRange = true;\n        }\n        if (emptyRange) {\n            TimeSeries copy = (TimeSeries) super.clone();\n            copy.data = new java.util.ArrayList();\n            return copy;\n        }\n        else {\n            return createCopy(startIndex, endIndex);\n        }\n\n    }",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 4067e3e..aad5e29 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -941,7 +941,41 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             endIndex = -(endIndex + 1); // this is first item AFTER end period\n             endIndex = endIndex - 1;    // so this is last item BEFORE end\n         }\n-        if (endIndex < 0) {\n+    public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n+        throws CloneNotSupportedException {\n+\n+        if (start == null) {\n+            throw new IllegalArgumentException(\"Null 'start' argument.\");\n+        }\n+        if (end == null) {\n+            throw new IllegalArgumentException(\"Null 'end' argument.\");\n+        }\n+        if (start.compareTo(end) > 0) {\n+            throw new IllegalArgumentException(\n+                    \"Requires start on or before end.\");\n+        }\n+        boolean emptyRange = false;\n+        int startIndex = getIndex(start);\n+        if (startIndex < 0) {\n+            startIndex = -(startIndex + 1);\n+            if (startIndex == this.data.size()) {\n+                emptyRange = true;  // start is after last data item\n+            }\n+        }\n+        int endIndex = getIndex(end);\n+        if (endIndex < 0 || startIndex >= this.data.size()) { // fix here\n+            emptyRange = true;\n+        }\n+        if (emptyRange) {\n+            TimeSeries copy = (TimeSeries) super.clone();\n+            copy.data = new java.util.ArrayList();\n+            return copy;\n+        }\n+        else {\n+            return createCopy(startIndex, endIndex);\n+        }\n+\n+    }\n             emptyRange = true;\n         }\n         if (emptyRange) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}