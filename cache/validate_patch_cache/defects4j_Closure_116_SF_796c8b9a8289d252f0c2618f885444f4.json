{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n    // Skip any matching \"this\"/\"self\" parameter\n    if (fnParam != null && \"this\".equals(fnParam.getString())) {\n        fnParam = fnParam.getNext();\n    } else if (fnParam != null && \"self\".equals(fnParam.getString()) && fnParam.getNext().isVarArgs()) {\n        fnParam = fnParam.getNext().getNext();\n    }\n\n    while (cArg != null && fnParam != null) {\n        if (fnParam.isDefaultValue()) {\n            fnParam = fnParam.getNext();\n            continue;\n        } else if (fnParam.isRest()) {\n            if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n                return CanInlineResult.NO;\n            }\n            cArg = cArg.getNext();\n            fnParam = null;\n            continue;\n        } else if (cArg.isSpread()) {\n            if (fnParam.getNext() != null) {\n                // We have somewhere to put the args!\n                fnParam = fnParam.getNext();\n            } else {\n                // We are done with parameter matching.\n                fnParam = null;\n            }\n        }\n\n        if (fnParam != null) {\n            if (NodeUtil.getNameReferenceCount(\n                    block, fnParam.getString()) > 1 &&\n                NodeUtil.mayEffectMutableState(cArg, compiler)) {\n                return CanInlineResult.NO;\n            }\n\n            if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n                return CanInlineResult.NO;\n            }\n\n            cArg = cArg.getNext();\n            fnParam = fnParam.getNext();\n        }\n    }\n\n    if (cArg != null || (fnParam != null && !fnParam.isRest())) {\n        // There are extra arguments or missing parameters.\n        return CanInlineResult.NO;\n    }\n\n    return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..0da0578e 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,67 +686,70 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n+        return CanInlineResult.NO;\n     }\n \n     Node block = fnNode.getLastChild();\n \n-\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n-\n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n \n-        // Move to the next name.\n+    // Skip any matching \"this\"/\"self\" parameter\n+    if (fnParam != null && \"this\".equals(fnParam.getString())) {\n         fnParam = fnParam.getNext();\n-      }\n+    } else if (fnParam != null && \"self\".equals(fnParam.getString()) && fnParam.getNext().isVarArgs()) {\n+        fnParam = fnParam.getNext().getNext();\n+    }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n+    while (cArg != null && fnParam != null) {\n+        if (fnParam.isDefaultValue()) {\n+            fnParam = fnParam.getNext();\n+            continue;\n+        } else if (fnParam.isRest()) {\n+            if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+                return CanInlineResult.NO;\n+            }\n+            cArg = cArg.getNext();\n+            fnParam = null;\n+            continue;\n+        } else if (cArg.isSpread()) {\n+            if (fnParam.getNext() != null) {\n+                // We have somewhere to put the args!\n+                fnParam = fnParam.getNext();\n+            } else {\n+                // We are done with parameter matching.\n+                fnParam = null;\n+            }\n+        }\n+\n+        if (fnParam != null) {\n+            if (NodeUtil.getNameReferenceCount(\n+                    block, fnParam.getString()) > 1 &&\n+                NodeUtil.mayEffectMutableState(cArg, compiler)) {\n+                return CanInlineResult.NO;\n+            }\n+\n+            if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+                return CanInlineResult.NO;\n+            }\n+\n+            cArg = cArg.getNext();\n+            fnParam = fnParam.getNext();\n         }\n-        cArg = cArg.getNext();\n-      }\n+    }\n+\n+    if (cArg != null || (fnParam != null && !fnParam.isRest())) {\n+        // There are extra arguments or missing parameters.\n+        return CanInlineResult.NO;\n     }\n \n     return CanInlineResult.YES;\n-  }\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}