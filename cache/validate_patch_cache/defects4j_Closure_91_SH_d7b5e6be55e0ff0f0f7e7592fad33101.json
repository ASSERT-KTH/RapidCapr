{
    "patch": "      if (parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n          // Always traverse the left side of the assignment. To handle\n          // nested assignments properly (e.g., (a = this).property = c;),\n          // assignLhsChild should not be overridden.\n          if (assignLhsChild == null) {\n            assignLhsChild = lhs;\n          }\n        } else {\n          // Only traverse the right side if it's not an assignment to a prototype\n          // property or subproperty.\n          if (NodeUtil.isGet(lhs)) {\n            if (lhs.getType() == Token.GETPROP &&\n                lhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n            Node llhs = lhs.getFirstChild();\n            if (llhs.getType() == Token.GETPROP &&\n                llhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n          }\n\n          Node parentNode = parent.getParent();\n          if (NodeUtil.isGet(parentNode)) {\n            // Don't traverse exported functions getting assigned to obj.prototype.method.\n            if (parentNode.getFirstChild().getQualifiedName().equals(\"prototype\")) {\n              if (NodeUtil.isGet(parentNode.getParent())) {\n                return false;\n              }\n            }\n            // Don't traverse functions that are getting lent to a prototype.\n            if (NodeUtil.isPrototypePropertyDeclaration(parentNode)) {\n              return false;\n            }\n          }\n\n          // Don't traverse functions that are assigned to object literal keys.\n          if (parent.getType() == Token.OBJECTLIT &&\n              parent.getParent().getType() == Token.ASSIGN &&\n              parent.getParent().getParent().getType() == Token.EXPR_RESULT) {\n            return false;\n          }\n\n          // Don't traverse functions that are getting lent to a prototype.\n          if (parent.getParent() != null &&\n              NodeUtil.isPrototypeProperty(parent.getParent())) {\n            return false;\n          }\n\n          // Don't traverse functions that are getting lent to a prototype.\n          if (NodeUtil.isObjectLitKey(parent, n)) {\n            return false;\n          }\n\n          // Don't traverse functions that are getting lent to a prototype.\n          if (n.getFirstChild() != null &&\n              NodeUtil.isGet(n.getFirstChild())) {\n            Node parentParent = parent.getParent();\n            if (parentParent != null &&\n                NodeUtil.isGet(parentParent) &&\n                parentParent.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n          }\n\n          // Don't traverse functions that are getting lent to a prototype.\n          Node gramps = parent.getParent();\n          if (NodeUtil.isPrototypeProperty(gramps) ||\n              NodeUtil.isPrototypeProperty(parent.getParent().getParent())) {\n            return false;\n          }\n        }\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (parent.getType() == Token.GET) {\n        Node grandparent = parent.getParent();\n      \n        if (grandparent.getType() == Token.GETPROP) {\n          Node greatgrandparent = grandparent.getParent();\n        \n          if (greatgrandparent.getType() == Token.ASSIGN) {\n            Node lhs = greatgrandparent.getFirstChild();\n          \n            if (NodeUtil.isGet(lhs)) {\n              if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n                return false;\n              }\n              Node llhs = lhs.getFirstChild();\n              if (llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals(\"prototype\")) {\n                return false;\n              }\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..3888e4fd 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,103 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+          // Always traverse the left side of the assignment. To handle\n+          // nested assignments properly (e.g., (a = this).property = c;),\n+          // assignLhsChild should not be overridden.\n+          if (assignLhsChild == null) {\n+            assignLhsChild = lhs;\n+          }\n+        } else {\n+          // Only traverse the right side if it's not an assignment to a prototype\n+          // property or subproperty.\n+          if (NodeUtil.isGet(lhs)) {\n+            if (lhs.getType() == Token.GETPROP &&\n+                lhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+            Node llhs = lhs.getFirstChild();\n+            if (llhs.getType() == Token.GETPROP &&\n+                llhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+          }\n+\n+          Node parentNode = parent.getParent();\n+          if (NodeUtil.isGet(parentNode)) {\n+            // Don't traverse exported functions getting assigned to obj.prototype.method.\n+            if (parentNode.getFirstChild().getQualifiedName().equals(\"prototype\")) {\n+              if (NodeUtil.isGet(parentNode.getParent())) {\n+                return false;\n+              }\n+            }\n+            // Don't traverse functions that are getting lent to a prototype.\n+            if (NodeUtil.isPrototypePropertyDeclaration(parentNode)) {\n+              return false;\n+            }\n+          }\n+\n+          // Don't traverse functions that are assigned to object literal keys.\n+          if (parent.getType() == Token.OBJECTLIT &&\n+              parent.getParent().getType() == Token.ASSIGN &&\n+              parent.getParent().getParent().getType() == Token.EXPR_RESULT) {\n+            return false;\n+          }\n+\n+          // Don't traverse functions that are getting lent to a prototype.\n+          if (parent.getParent() != null &&\n+              NodeUtil.isPrototypeProperty(parent.getParent())) {\n+            return false;\n+          }\n+\n+          // Don't traverse functions that are getting lent to a prototype.\n+          if (NodeUtil.isObjectLitKey(parent, n)) {\n+            return false;\n+          }\n+\n+          // Don't traverse functions that are getting lent to a prototype.\n+          if (n.getFirstChild() != null &&\n+              NodeUtil.isGet(n.getFirstChild())) {\n+            Node parentParent = parent.getParent();\n+            if (parentParent != null &&\n+                NodeUtil.isGet(parentParent) &&\n+                parentParent.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+          }\n+\n+          // Don't traverse functions that are getting lent to a prototype.\n+          Node gramps = parent.getParent();\n+          if (NodeUtil.isPrototypeProperty(gramps) ||\n+              NodeUtil.isPrototypeProperty(parent.getParent().getParent())) {\n+            return false;\n+          }\n+        }\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parent.getType() == Token.GET) {\n+        Node grandparent = parent.getParent();\n+      \n+        if (grandparent.getType() == Token.GETPROP) {\n+          Node greatgrandparent = grandparent.getParent();\n+        \n+          if (greatgrandparent.getType() == Token.ASSIGN) {\n+            Node lhs = greatgrandparent.getFirstChild();\n+          \n+            if (NodeUtil.isGet(lhs)) {\n+              if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n+                return false;\n+              }\n+              Node llhs = lhs.getFirstChild();\n+              if (llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals(\"prototype\")) {\n+                return false;\n+              }\n+            }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}