{
    "patch": "      boolean canRemove = true;\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null) {\n        if (!lastArg.isDefaultValue()) {\n          Var var = fnScope.getVar(lastArg.getString());\n          if (referenced.contains(var)) {\n            canRemove = false;\n          }\n          if (canRemove) {\n            argList.removeChild(lastArg);\n            compiler.reportCodeChange();\n          }\n        }\n        lastArg = lastArg.getPrevious();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..23d62551 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,20 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      boolean canRemove = true;\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null) {\n+        if (!lastArg.isDefaultValue()) {\n+          Var var = fnScope.getVar(lastArg.getString());\n+          if (referenced.contains(var)) {\n+            canRemove = false;\n+          }\n+          if (canRemove) {\n+            argList.removeChild(lastArg);\n+            compiler.reportCodeChange();\n+          }\n+        }\n+        lastArg = lastArg.getPrevious();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}