{
    "patch": "JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\nif (!(resolvedTypeOfThis instanceof ObjectType)) {\n  resolvedTypeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n  t.report(JSError.make(n.getSourceFileName(), n.getLineno(),\n      MISSING_OBJECT_TYPE_WARNING));\n}\ntypeOfThis = (ObjectType) resolvedTypeOfThis;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..4811134b 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,13 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n+if (!(resolvedTypeOfThis instanceof ObjectType)) {\n+  resolvedTypeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n+  t.report(JSError.make(n.getSourceFileName(), n.getLineno(),\n+      MISSING_OBJECT_TYPE_WARNING));\n+}\n+typeOfThis = (ObjectType) resolvedTypeOfThis;\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}