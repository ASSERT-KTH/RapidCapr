{
    "patch": "    Object[] rawArguments = invocation.getRawArguments();\n    int argIndex = 0;\n    for (Matcher matcher : matchers) {\n        if (matcher instanceof CapturesArguments) {\n            if (invocation.getMethod().isVarArgs() && argIndex == rawArguments.length - 1 && isVarargMatcher(matcher)) {\n                Object va",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..8d1cf1111 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,12 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+    Object[] rawArguments = invocation.getRawArguments();\n+    int argIndex = 0;\n+    for (Matcher matcher : matchers) {\n+        if (matcher instanceof CapturesArguments) {\n+            if (invocation.getMethod().isVarArgs() && argIndex == rawArguments.length - 1 && isVarargMatcher(matcher)) {\n+                Object va\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}