{
    "patch": "public double solve(double min, double max) throws MaxIterationsExceededException, FunctionEvaluationException {\n    clearResult();\n    verifyInterval(min, max);\n\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n\n    // Check if either value is close to a zero\n    if (Math.abs(yMin) < 1e-15) {\n        return min;\n    } else if (Math.abs(yMax) < 1e-15) {\n        return max;\n    }\n\n    double sign = yMin * yMax;\n    if (sign > 0) {\n        double absYMin = Math.abs(yMin);\n        double absYMax = Math.abs(yMax);\n        if (absYMin < absYMax) {\n            double temp = min;\n            min = max;\n            max = temp;\n            yMin = yMax;\n            yMax = f.value(max);\n        }\n\n        double midpoint = 0.5 * (max + min);\n        double yMid = f.value(midpoint);\n\n        double tolerance = function.getRelTolerance();\n        while (Math.abs(yMid) > tolerance || yMax < 0 && yMid < 0 || yMin > 0 && yMid > 0) {\n            if (yMid < 0) {\n                min = midpoint;\n                yMin = yMid;\n            } else {\n                max = midpoint;\n                yMax = yMid;\n            }\n\n            if (Math.abs(max - min) <= tolerance * Math.max(Math.abs(min), Math.abs(max))) {\n                return 0.5 * (min + max);\n            }\n\n            midpoint = 0.5 * (max + min);\n            yMid = f.value(midpoint);\n        }\n\n        return midpoint;\n    } else {\n        return solve(min, yMin, max, yMax, min, yMin);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..16aa59638 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,58 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n-        FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n-        \n-        // Verify bracketing\n-        double sign = yMin * yMax;\n-        if (sign >= 0) {\n-            // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n-        } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n+public double solve(double min, double max) throws MaxIterationsExceededException, FunctionEvaluationException {\n+    clearResult();\n+    verifyInterval(min, max);\n+\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n+\n+    // Check if either value is close to a zero\n+    if (Math.abs(yMin) < 1e-15) {\n+        return min;\n+    } else if (Math.abs(yMax) < 1e-15) {\n+        return max;\n+    }\n+\n+    double sign = yMin * yMax;\n+    if (sign > 0) {\n+        double absYMin = Math.abs(yMin);\n+        double absYMax = Math.abs(yMax);\n+        if (absYMin < absYMax) {\n+            double temp = min;\n+            min = max;\n+            max = temp;\n+            yMin = yMax;\n+            yMax = f.value(max);\n         }\n \n-        return ret;\n+        double midpoint = 0.5 * (max + min);\n+        double yMid = f.value(midpoint);\n+\n+        double tolerance = function.getRelTolerance();\n+        while (Math.abs(yMid) > tolerance || yMax < 0 && yMid < 0 || yMin > 0 && yMid > 0) {\n+            if (yMid < 0) {\n+                min = midpoint;\n+                yMin = yMid;\n+            } else {\n+                max = midpoint;\n+                yMax = yMid;\n+            }\n+\n+            if (Math.abs(max - min) <= tolerance * Math.max(Math.abs(min), Math.abs(max))) {\n+                return 0.5 * (min + max);\n+            }\n+\n+            midpoint = 0.5 * (max + min);\n+            yMid = f.value(midpoint);\n+        }\n+\n+        return midpoint;\n+    } else {\n+        return solve(min, yMin, max, yMax, min, yMin);\n     }\n+}\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}