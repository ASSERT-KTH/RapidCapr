{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = instant.getChronology();\n    DateTimeZone zone = chrono.getZone();\n    long instantMillis = instant.getMillis();\n    long offsetMillis = zone.getOffset(instantMillis);\n    long correctedMillis = instantMillis + offsetMillis;\n\n    chrono = selectChronology(chrono);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        correctedMillis, chrono, iLocale, iPivotYear, chrono.year().get(correctedMillis));\n    int newPos = parser.parseInto(bucket, text, position);\n    \n    long parsedInstantMillis = bucket.computeMillis();\n    boolean parsedWithDst = bucket.savedField(ChronoField.DAY_OF_MONTH) != null &&\n                    bucket.savedField(ChronoField.DAY_OF_MONTH).isLeap();\n    \n    long millisOffsetParsed = iOffsetParsed && bucket.getOffsetInteger() != null\n            ? bucket.getOffsetInteger().longValue() : offsetMillis;\n\n    if (iZone != null) {\n        zone = iZone;\n    } else if (bucket.getZone() != null) {\n        zone = bucket.getZone();\n    } else if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        zone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger().intValue());\n    }\n\n    long parsedCorrectedMillis = parsedInstantMillis + millisOffsetParsed;\n    if (offsetMillis != zone.getOffset(parsedCorrectedMillis)) {\n        // Try again at the new offset.\n        parsedCorrectedMillis += zone.getOffset(parsedCorrectedMillis) - offsetMillis;\n        zone = zone.getZone(parsedCorrectedMillis);\n    }\n\n    chrono = chrono.withZone(zone);\n    instant.setMillis(parsedWithDst ? chrono.dayOfMonth().set(chrono.monthOfYear().set(\n            chrono.year().set(0, bucket.year))\n                    , bucket.savedField(ChronoField.DAY_OF_MONTH).intValue()).set(instant, parsedCorrectedMillis)\n            : parsedCorrectedMillis);\n    instant.setChronology(chrono);\n\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..0bd41f2b 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,54 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n-    }\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = instant.getChronology();\n+    DateTimeZone zone = chrono.getZone();\n+    long instantMillis = instant.getMillis();\n+    long offsetMillis = zone.getOffset(instantMillis);\n+    long correctedMillis = instantMillis + offsetMillis;\n+\n+    chrono = selectChronology(chrono);\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        correctedMillis, chrono, iLocale, iPivotYear, chrono.year().get(correctedMillis));\n+    int newPos = parser.parseInto(bucket, text, position);\n+    \n+    long parsedInstantMillis = bucket.computeMillis();\n+    boolean parsedWithDst = bucket.savedField(ChronoField.DAY_OF_MONTH) != null &&\n+                    bucket.savedField(ChronoField.DAY_OF_MONTH).isLeap();\n+    \n+    long millisOffsetParsed = iOffsetParsed && bucket.getOffsetInteger() != null\n+            ? bucket.getOffsetInteger().longValue() : offsetMillis;\n+\n+    if (iZone != null) {\n+        zone = iZone;\n+    } else if (bucket.getZone() != null) {\n+        zone = bucket.getZone();\n+    } else if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+        zone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger().intValue());\n+    }\n+\n+    long parsedCorrectedMillis = parsedInstantMillis + millisOffsetParsed;\n+    if (offsetMillis != zone.getOffset(parsedCorrectedMillis)) {\n+        // Try again at the new offset.\n+        parsedCorrectedMillis += zone.getOffset(parsedCorrectedMillis) - offsetMillis;\n+        zone = zone.getZone(parsedCorrectedMillis);\n+    }\n+\n+    chrono = chrono.withZone(zone);\n+    instant.setMillis(parsedWithDst ? chrono.dayOfMonth().set(chrono.monthOfYear().set(\n+            chrono.year().set(0, bucket.year))\n+                    , bucket.savedField(ChronoField.DAY_OF_MONTH).intValue()).set(instant, parsedCorrectedMillis)\n+            : parsedCorrectedMillis);\n+    instant.setChronology(chrono);\n+\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}