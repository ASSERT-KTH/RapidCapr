{
    "patch": "public class StringUtils {\n    public static boolean containsAny(CharSequence sequence, char[] searchChars) {\n        if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        final int csLength = sequence.length();\n        final int searchLength = searchChars.length;\n        final int csLast = csLength - 1;\n        final int searchLast = searchLength - 1;\n\n        for (int i = 0; i < csLength; i++) {\n            final char ch = sequence.charAt(i);\n            if (ch < Character.MIN_SURROGATE || ch > Character.MAX_SURROGATE) {\n                for (int j = 0; j < searchLength; j++) {\n                    if (searchChars[j] == ch) {\n                        return true;\n                    }\n                }\n            } else if (ch < Character.MAX_SURROGATE) {\n                if (i < csLast) {\n                    final char surrogatePair = sequence.charAt(i + 1);\n                    if (Character.isLowSurrogate(surrogatePair)) {\n                        final int codePoint = Character.toCodePoint(ch, surrogatePair);\n                        for (int j = 0; j < searchLength; j++) {\n                            if (searchChars[j] == codePoint) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    private static boolean isEmpty(CharSequence cs) {\n        return cs == null || cs.length() == 0;\n    }\n\n    private static class ArrayUtils {\n        private static boolean isEmpty(char[] array) {\n            return array == null || array.length == 0;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..be264116 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,52 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public class StringUtils {\n+    public static boolean containsAny(CharSequence sequence, char[] searchChars) {\n+        if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n+            return false;\n+        }\n+        final int csLength = sequence.length();\n+        final int searchLength = searchChars.length;\n+        final int csLast = csLength - 1;\n+        final int searchLast = searchLength - 1;\n+\n+        for (int i = 0; i < csLength; i++) {\n+            final char ch = sequence.charAt(i);\n+            if (ch < Character.MIN_SURROGATE || ch > Character.MAX_SURROGATE) {\n+                for (int j = 0; j < searchLength; j++) {\n+                    if (searchChars[j] == ch) {\n+                        return true;\n+                    }\n+                }\n+            } else if (ch < Character.MAX_SURROGATE) {\n+                if (i < csLast) {\n+                    final char surrogatePair = sequence.charAt(i + 1);\n+                    if (Character.isLowSurrogate(surrogatePair)) {\n+                        final int codePoint = Character.toCodePoint(ch, surrogatePair);\n+                        for (int j = 0; j < searchLength; j++) {\n+                            if (searchChars[j] == codePoint) {\n+                                return true;\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    private static boolean isEmpty(CharSequence cs) {\n+        return cs == null || cs.length() == 0;\n+    }\n+\n+    private static class ArrayUtils {\n+        private static boolean isEmpty(char[] array) {\n+            return array == null || array.length == 0;\n+        }\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}