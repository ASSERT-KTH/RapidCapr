{
    "patch": "    public Dfp multiply(final int x) {\n        if (isNaN()) {\n            return newInstance(getField(), qnan);\n        }\n        if (x == 0) {\n            return newInstance(getField(), getZero());\n        }\n        if (x == 1) {\n            return this;\n        }\n        if (x == -1) {\n            return negate();\n        }\n        DfpField field = getField();\n        Dfp result = newInstance(field);\n        boolean invert = false;\n        int factor = x;\n        if (factor < 0) {\n            invert = !invert;\n            factor = -factor;\n        }\n        int q = getL();\n        while (factor != 0 && q >= 0) {\n            int r = factor % 10;\n            factor /= 10;\n            result = result.add(multiply(l10[q]*r));\n            q--;\n        }\n        if (invert) {\n            result = result.negate();\n        }\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..6631019e0 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,37 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+        if (isNaN()) {\n+            return newInstance(getField(), qnan);\n+        }\n+        if (x == 0) {\n+            return newInstance(getField(), getZero());\n+        }\n+        if (x == 1) {\n+            return this;\n+        }\n+        if (x == -1) {\n+            return negate();\n+        }\n+        DfpField field = getField();\n+        Dfp result = newInstance(field);\n+        boolean invert = false;\n+        int factor = x;\n+        if (factor < 0) {\n+            invert = !invert;\n+            factor = -factor;\n+        }\n+        int q = getL();\n+        while (factor != 0 && q >= 0) {\n+            int r = factor % 10;\n+            factor /= 10;\n+            result = result.add(multiply(l10[q]*r));\n+            q--;\n+        }\n+        if (invert) {\n+            result = result.negate();\n+        }\n+        return result;\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}