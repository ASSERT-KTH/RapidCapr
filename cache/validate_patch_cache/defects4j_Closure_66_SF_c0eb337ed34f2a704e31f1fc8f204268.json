{
    "patch": "public static double getTypedPercent(String js) {\n    double numTyped = 0;\n    double numChars = 0;\n    for (int i = 0; i < js.length(); i++) {\n        char c = js.charAt(i);\n        if (c != ' ') {\n            numChars++;\n            if (Character.isLetter(c) || Character.isDigit(c)) {\n                numTyped++;\n            }\n        }\n    }\n    if (numChars > 0) {\n        return 100.0 * numTyped / numChars;\n    } else {\n        return 0.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..6771bf6c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String js) {\n+    double numTyped = 0;\n+    double numChars = 0;\n+    for (int i = 0; i < js.length(); i++) {\n+        char c = js.charAt(i);\n+        if (c != ' ') {\n+            numChars++;\n+            if (Character.isLetter(c) || Character.isDigit(c)) {\n+                numTyped++;\n+            }\n+        }\n+    }\n+    if (numChars > 0) {\n+        return 100.0 * numTyped / numChars;\n+    } else {\n+        return 0.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}