{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    if (!MatrixUtils.isSymmetricPositiveDefinite(m)) {\n        throw new NonPositiveDefiniteMatrixException(m);\n    }\n    try {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    } catch (Exception e) {\n        System.err.println(\"Error computing square root: \" + e.getMessage());\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..fa1cd02bb 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,16 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    if (!MatrixUtils.isSymmetricPositiveDefinite(m)) {\n+        throw new NonPositiveDefiniteMatrixException(m);\n     }\n+    try {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n+    } catch (Exception e) {\n+        System.err.println(\"Error computing square root: \" + e.getMessage());\n+        return null;\n+    }\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}