{
    "patch": "public double getTypedPercent(String json) {\n    double total = 0;\n    double typed = 0;\n    JsonElement element = new JsonParser().parse(json);\n    if (element.isJsonArray()) {\n        JsonArray array = element.getAsJsonArray();\n        total = array.size();\n        for (int i = 0; i < total; i++) {\n            JsonElement innerElement = array.get(i);\n            if (innerElement.isJsonObject()) {\n                JsonObject object = innerElement.getAsJsonObject();\n                if (object.has(\"type\")) {\n                    typed++;\n                }\n            }\n        }\n    }\n    return (typed / total) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..e4fe8858 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String json) {\n+    double total = 0;\n+    double typed = 0;\n+    JsonElement element = new JsonParser().parse(json);\n+    if (element.isJsonArray()) {\n+        JsonArray array = element.getAsJsonArray();\n+        total = array.size();\n+        for (int i = 0; i < total; i++) {\n+            JsonElement innerElement = array.get(i);\n+            if (innerElement.isJsonObject()) {\n+                JsonObject object = innerElement.getAsJsonObject();\n+                if (object.has(\"type\")) {\n+                    typed++;\n+                }\n+            }\n+        }\n+    }\n+    return (typed / total) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}