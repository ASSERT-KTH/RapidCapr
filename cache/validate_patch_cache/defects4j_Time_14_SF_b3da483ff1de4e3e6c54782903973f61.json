{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    Chronology chronology = partial.getChronology();\n    DateTimeField[] fields = DateTimeUtils.getFields(partial);\n    int[] newValues = values.clone();\n    int currentValue = values[fieldIndex];\n\n    if (valueToAdd > 0) {\n        for (int i = 0; i < valueToAdd; i++) {\n            int maxValue = fields[fieldIndex].getMaximumValue(newValues, currentValue);\n            if (currentValue < maxValue) {\n                currentValue++;\n            } else {\n                newValues = fields[fieldIndex].addWrapPartial(partial, fieldIndex, newValues, 1);\n                currentValue = fields[fieldIndex].getMinimumValue(newValues);\n                for (int j = fieldIndex - 1; j >= 0; j--) {\n                    if (newValues[j] != fields[j].getMinimumValue(newValues)) {\n                        break;\n                    } else {\n                        newValues = fields[j].addWrapPartial(partial, j, newValues, 1);\n                    }\n                }\n            }\n        }\n    } else {\n        for (int i = 0; i > valueToAdd; i--) {\n            int minValue = fields[fieldIndex].getMinimumValue(newValues, currentValue);\n            if (currentValue > minValue) {\n                currentValue--;\n            } else {\n                newValues = fields[fieldIndex].addWrapPartial(partial, fieldIndex, newValues, -1);\n                currentValue = fields[fieldIndex].getMaximumValue(newValues);\n                for (int j = fieldIndex - 1; j >= 0; j--) {\n                    if (newValues[j] != fields[j].getMaximumValue(newValues)) {\n                        break;\n                    } else {\n                        newValues = fields[j].addWrapPartial(partial, j, newValues, -1);\n                    }\n                }\n            }\n        }\n    }\n\n    newValues[fieldIndex] = currentValue;\n    return chronology.get(partial.with(newValues), 0);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..ed5b3850 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,58 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    Chronology chronology = partial.getChronology();\n+    DateTimeField[] fields = DateTimeUtils.getFields(partial);\n+    int[] newValues = values.clone();\n+    int currentValue = values[fieldIndex];\n+\n+    if (valueToAdd > 0) {\n+        for (int i = 0; i < valueToAdd; i++) {\n+            int maxValue = fields[fieldIndex].getMaximumValue(newValues, currentValue);\n+            if (currentValue < maxValue) {\n+                currentValue++;\n+            } else {\n+                newValues = fields[fieldIndex].addWrapPartial(partial, fieldIndex, newValues, 1);\n+                currentValue = fields[fieldIndex].getMinimumValue(newValues);\n+                for (int j = fieldIndex - 1; j >= 0; j--) {\n+                    if (newValues[j] != fields[j].getMinimumValue(newValues)) {\n+                        break;\n+                    } else {\n+                        newValues = fields[j].addWrapPartial(partial, j, newValues, 1);\n+                    }\n+                }\n+            }\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+    } else {\n+        for (int i = 0; i > valueToAdd; i--) {\n+            int minValue = fields[fieldIndex].getMinimumValue(newValues, currentValue);\n+            if (currentValue > minValue) {\n+                currentValue--;\n+            } else {\n+                newValues = fields[fieldIndex].addWrapPartial(partial, fieldIndex, newValues, -1);\n+                currentValue = fields[fieldIndex].getMaximumValue(newValues);\n+                for (int j = fieldIndex - 1; j >= 0; j--) {\n+                    if (newValues[j] != fields[j].getMaximumValue(newValues)) {\n+                        break;\n+                    } else {\n+                        newValues = fields[j].addWrapPartial(partial, j, newValues, -1);\n+                    }\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n     }\n \n+    newValues[fieldIndex] = currentValue;\n+    return chronology.get(partial.with(newValues), 0);\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}