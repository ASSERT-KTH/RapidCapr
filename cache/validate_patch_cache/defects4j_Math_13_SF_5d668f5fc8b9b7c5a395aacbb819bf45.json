{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final double EPS = 1e-6;\n    final int BLOCK_SIZE = 50;\n    final int n = m.getRowDimension();\n    RealMatrix sqrtM = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i += BLOCK_SIZE) {\n        int blockSize = Math.min(BLOCK_SIZE, n - i);\n        RealMatrix block = m.getSubMatrix(i, i + blockSize - 1, i, i + blockSize - 1);\n        EigenDecomposition dec = new EigenDecomposition(block);\n        RealMatrix sqrtBlock = dec.getSquareRoot();\n        for (int j = 0; j < blockSize; j++) {\n            for (int k = 0; k < blockSize; k++) {\n                sqrtM.setEntry(i + j, i + k, sqrtBlock.getEntry(j, k));\n            }\n        }\n    }\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..54185c89a 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,22 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final double EPS = 1e-6;\n+    final int BLOCK_SIZE = 50;\n+    final int n = m.getRowDimension();\n+    RealMatrix sqrtM = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i += BLOCK_SIZE) {\n+        int blockSize = Math.min(BLOCK_SIZE, n - i);\n+        RealMatrix block = m.getSubMatrix(i, i + blockSize - 1, i, i + blockSize - 1);\n+        EigenDecomposition dec = new EigenDecomposition(block);\n+        RealMatrix sqrtBlock = dec.getSquareRoot();\n+        for (int j = 0; j < blockSize; j++) {\n+            for (int k = 0; k < blockSize; k++) {\n+                sqrtM.setEntry(i + j, i + k, sqrtBlock.getEntry(j, k));\n+            }\n+        }\n     }\n+    return sqrtM;\n+}\n }",
    "result_reason": "org.apache.commons.math3.exception.MathUnsupportedOperationException: unsupported operation",
    "test_result": "FAIL"
}