{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m, 0.0);\n    final RealMatrix v = dec.getV();\n    final RealMatrix d = dec.getD();\n    final int n = d.getRowDimension();\n\n    final double[] dSqrt = new double[n];\n    for (int i = 0; i < n; i++) {\n        if (d.getEntry(i, i) < 0.0) {\n            throw new IllegalArgumentException(\"Matrix has negative eigenvalues\");\n        }\n        dSqrt[i] = Math.sqrt(d.getEntry(i, i));\n    }\n\n    final RealMatrix sq = v.multiply(MatrixUtils.createRealDiagonalMatrix(dSqrt)).multiply(v.transpose());\n    final double[] rows = new double[m.getRowDimension()];\n    for (int i = 0; i < rows.length; i++) {\n        final double[] r = sq.getRow(i);\n        double sum = 0;\n        for (int side = 0; side < r.length; side++) {\n            sum += r[side] * r[side];\n        }\n        for (int j = 0; j < r.length; j++) {\n            r[j] = r[j] / Math.sqrt(sum);\n        }\n        rows[i] = sum;\n    }\n    return MatrixUtils.createRealMatrix(rows);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..f4b2dff19 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,33 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m, 0.0);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d = dec.getD();\n+    final int n = d.getRowDimension();\n+\n+    final double[] dSqrt = new double[n];\n+    for (int i = 0; i < n; i++) {\n+        if (d.getEntry(i, i) < 0.0) {\n+            throw new IllegalArgumentException(\"Matrix has negative eigenvalues\");\n+        }\n+        dSqrt[i] = Math.sqrt(d.getEntry(i, i));\n+    }\n+\n+    final RealMatrix sq = v.multiply(MatrixUtils.createRealDiagonalMatrix(dSqrt)).multiply(v.transpose());\n+    final double[] rows = new double[m.getRowDimension()];\n+    for (int i = 0; i < rows.length; i++) {\n+        final double[] r = sq.getRow(i);\n+        double sum = 0;\n+        for (int side = 0; side < r.length; side++) {\n+            sum += r[side] * r[side];\n+        }\n+        for (int j = 0; j < r.length; j++) {\n+            r[j] = r[j] / Math.sqrt(sum);\n+        }\n+        rows[i] = sum;\n     }\n+    return MatrixUtils.createRealMatrix(rows);\n+}\n }",
    "result_reason": "error: no suitable method found for createRealMatrix(double[])",
    "test_result": "ERROR"
}