{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = expanded.getPoint().length == simplex.length ?\n                        expanded.getPoint() :\n                        resizeSimplex(expanded.getPoint().length);\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n            } else {\n\n                // perform a contraction step\n                RealPointValuePair contracted = null;\n                if (comparator.compare(reflected, original[n]) < 0) {\n                    // perform an outside contraction\n                    contracted = evaluateNewSimplex(original, rho, comparator);\n                } else {\n                    // perform an inside contraction\n                    contracted = evaluateNewSimplex(original, -rho, comparator);\n                }\n\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = contracted.getPoint().length == simplex.length ?\n                        contracted.getPoint() :\n                        resizeSimplex(contracted.getPoint().length);\n                } else {\n                    // perform a shrink step\n                    final RealPointValuePair[] shrunk = shrink(original, comparator);\n                    if (!updateSimplex(shrunk, comparator)) {\n                        return;\n                    }\n                }\n\n            }\n\n            // check convergence\n            if (checker != null) {\n                if (checker.converged(getIterations(), best, simplex)) {\n                    return;\n                }\n            }\n\n        }\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..9fb77f27e 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -76,22 +76,47 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = expanded.getPoint().length == simplex.length ?\n+                        expanded.getPoint() :\n+                        resizeSimplex(expanded.getPoint().length);\n+                } else {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n+            } else {\n+\n+                // perform a contraction step\n+                RealPointValuePair contracted = null;\n+                if (comparator.compare(reflected, original[n]) < 0) {\n+                    // perform an outside contraction\n+                    contracted = evaluateNewSimplex(original, rho, comparator);\n+                } else {\n+                    // perform an inside contraction\n+                    contracted = evaluateNewSimplex(original, -rho, comparator);\n+                }\n \n-                return;\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = contracted.getPoint().length == simplex.length ?\n+                        contracted.getPoint() :\n+                        resizeSimplex(contracted.getPoint().length);\n+                } else {\n+                    // perform a shrink step\n+                    final RealPointValuePair[] shrunk = shrink(original, comparator);\n+                    if (!updateSimplex(shrunk, comparator)) {\n+                        return;\n+                    }\n+                }\n \n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n             // check convergence\n-                return;\n+            if (checker != null) {\n+                if (checker.converged(getIterations(), best, simplex)) {\n+                    return;\n+                }\n             }\n \n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}