{
    "patch": "private Node tryFoldArrayJoin(Node n) {\n  Node callTarget = n.getFirstChild();\n\n  if (callTarget == null || !NodeUtil.isGetProp(callTarget) || callTarget.getNext() != null) {\n    return n;\n  }\n\n  Node arrayNode = callTarget.getFirstChild();\n  if (arrayNode.getType() != Token.ARRAYLIT) {\n    return n;\n  }\n\n  Node functionName = arrayNode.getNext();\n  if (!functionName.getString().equals(\"join\")) {\n    return n;\n  }\n\n  Node delimiterNode = NodeUtil.getInvocationArgs(callTarget).getFirstChild();\n  String delimiter = delimiterNode == null ? \",\" : NodeUtil.getStringValKnownNonNull(delimiterNode);\n\n  int origSize = InlineCostEstimator.getCost(n);\n  int delimiterCost = InlineCostEstimator.getCharacterCost(delimiter.charAt(0));\n\n  List<Node> foldedArrayElements = new ArrayList<Node>();\n\n  StringBuilder currentElement = new StringBuilder();\n  for (Node arrayChild = arrayNode.getFirstChild(); arrayChild != null; arrayChild = arrayChild.getNext()) {\n    if (NodeUtil.isImmutableValue(arrayChild) && (arrayChild.getType() == Token.STRING || arrayChild.getType() == Token.NUMBER)) {\n      String value = NodeUtil.getStringValue(arrayChild);\n\n      if (currentElement.length() > 0) {\n        String previousValue = currentElement.toString();\n        String newValue = previousValue + delimiter + value;\n\n        if (InlineCostEstimator.getCharacterCost(previousValue.charAt(previousValue.length() - 1)) + delimiterCost + InlineCostEstimator.getCharacterCost(value.charAt(0)) <= origSize) {\n          currentElement = new StringBuilder(newValue);\n        } else {\n          foldedArrayElements.add(NodeUtil.newString(previousValue));\n          currentElement = new StringBuilder(value);\n        }\n      } else {\n        currentElement = new StringBuilder(value);\n      }\n    } else {\n      if (currentElement.length() > 0) {\n        foldedArrayElements.add(NodeUtil.newString(currentElement.toString()));\n        currentElement = new StringBuilder();\n      }\n\n      int childCost = InlineCostEstimator.getCost(arrayChild);\n      if (childCost <= origSize) {\n        foldedArrayElements.add(arrayChild);\n      } else {\n        return n;\n      }\n    }\n  }\n\n  if (currentElement.length() > 0) {\n    foldedArrayElements.add(NodeUtil.newString(currentElement.toString()));\n  }\n\n  int newLength = foldedArrayElements.size();\n\n  // No folding could actually be performed.\n  if (newLength == arrayNode.getChildCount()) {\n    return n;\n  }\n\n  int joinedSize = InlineCostEstimator.getCallCostWithValues(arrayNode, foldedArrayElements);\n  int foldedSize = joinedSize + delimiterCost * (newLength - 1) + \"[]\".length() + functionName.getString().length();\n\n  if (foldedSize > origSize) {\n    return n;\n  }\n\n  Node foldedNode = new Node(Token.STRING).copyInformationFrom(n);\n  foldedNode.setString(\"'\" + delimiter + \"'\");\n\n  foldedNode.addChildrenToFront(foldedArrayElements);\n\n  Node foldedJoinCall = new Node(Token.CALL, foldedNode).copyInformationFrom(n);\n  foldedJoinCall.putBooleanProp(Node.FREE_CALL, true);\n\n  foldedJoinCall.getFirstChild().putBooleanProp(Node.FREE_CALL, true);\n  foldedJoinCall.getFirstChild().setString(\"Array.prototype.join.call\");\n\n  n.replaceWith(foldedJoinCall);\n  reportCodeChange();\n\n  return foldedJoinCall;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..aedb2d08 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,117 +364,99 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n-    Node callTarget = n.getFirstChild();\n+private Node tryFoldArrayJoin(Node n) {\n+  Node callTarget = n.getFirstChild();\n \n-    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n-      return n;\n-    }\n+  if (callTarget == null || !NodeUtil.isGetProp(callTarget) || callTarget.getNext() != null) {\n+    return n;\n+  }\n \n-    Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n-        return n;\n-      }\n-    }\n+  Node arrayNode = callTarget.getFirstChild();\n+  if (arrayNode.getType() != Token.ARRAYLIT) {\n+    return n;\n+  }\n \n-    Node arrayNode = callTarget.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  Node functionName = arrayNode.getNext();\n+  if (!functionName.getString().equals(\"join\")) {\n+    return n;\n+  }\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return n;\n-    }\n+  Node delimiterNode = NodeUtil.getInvocationArgs(callTarget).getFirstChild();\n+  String delimiter = delimiterNode == null ? \",\" : NodeUtil.getStringValKnownNonNull(delimiterNode);\n \n-      // \",\" is the default, it doesn't need to be explicit\n-\n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n-    Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n+  int origSize = InlineCostEstimator.getCost(n);\n+  int delimiterCost = InlineCostEstimator.getCharacterCost(delimiter.charAt(0));\n+\n+  List<Node> foldedArrayElements = new ArrayList<Node>();\n+\n+  StringBuilder currentElement = new StringBuilder();\n+  for (Node arrayChild = arrayNode.getFirstChild(); arrayChild != null; arrayChild = arrayChild.getNext()) {\n+    if (NodeUtil.isImmutableValue(arrayChild) && (arrayChild.getType() == Token.STRING || arrayChild.getType() == Token.NUMBER)) {\n+      String value = NodeUtil.getStringValue(arrayChild);\n+\n+      if (currentElement.length() > 0) {\n+        String previousValue = currentElement.toString();\n+        String newValue = previousValue + delimiter + value;\n+\n+        if (InlineCostEstimator.getCharacterCost(previousValue.charAt(previousValue.length() - 1)) + delimiterCost + InlineCostEstimator.getCharacterCost(value.charAt(0)) <= origSize) {\n+          currentElement = new StringBuilder(newValue);\n         } else {\n-          sb.append(joinString);\n+          foldedArrayElements.add(NodeUtil.newString(previousValue));\n+          currentElement = new StringBuilder(value);\n         }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n       } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+        currentElement = new StringBuilder(value);\n+      }\n+    } else {\n+      if (currentElement.length() > 0) {\n+        foldedArrayElements.add(NodeUtil.newString(currentElement.toString()));\n+        currentElement = new StringBuilder();\n       }\n-      prev = elem;\n-      elem = elem.getNext();\n-    }\n \n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n-    }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n+      int childCost = InlineCostEstimator.getCost(arrayChild);\n+      if (childCost <= origSize) {\n+        foldedArrayElements.add(arrayChild);\n+      } else {\n+        return n;\n+      }\n     }\n+  }\n \n+  if (currentElement.length() > 0) {\n+    foldedArrayElements.add(NodeUtil.newString(currentElement.toString()));\n+  }\n+\n+  int newLength = foldedArrayElements.size();\n+\n+  // No folding could actually be performed.\n+  if (newLength == arrayNode.getChildCount()) {\n+    return n;\n+  }\n+\n+  int joinedSize = InlineCostEstimator.getCallCostWithValues(arrayNode, foldedArrayElements);\n+  int foldedSize = joinedSize + delimiterCost * (newLength - 1) + \"[]\".length() + functionName.getString().length();\n+\n+  if (foldedSize > origSize) {\n     return n;\n   }\n \n+  Node foldedNode = new Node(Token.STRING).copyInformationFrom(n);\n+  foldedNode.setString(\"'\" + delimiter + \"'\");\n+\n+  foldedNode.addChildrenToFront(foldedArrayElements);\n+\n+  Node foldedJoinCall = new Node(Token.CALL, foldedNode).copyInformationFrom(n);\n+  foldedJoinCall.putBooleanProp(Node.FREE_CALL, true);\n+\n+  foldedJoinCall.getFirstChild().putBooleanProp(Node.FREE_CALL, true);\n+  foldedJoinCall.getFirstChild().setString(\"Array.prototype.join.call\");\n+\n+  n.replaceWith(foldedJoinCall);\n+  reportCodeChange();\n+\n+  return foldedJoinCall;\n+}\n+\n   /**\n    * Try to fold .substr() calls on strings\n    */\n@@ -642,4 +624,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}