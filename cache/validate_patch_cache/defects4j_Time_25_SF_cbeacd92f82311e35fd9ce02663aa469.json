{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int initialOffset = getOffset(instantLocal);\n    long adjustedInstant = instantLocal - initialOffset;\n    int adjustedOffset = getOffset(adjustedInstant);\n    if (initialOffset != adjustedOffset) {\n        boolean isPositiveShift = adjustedOffset > initialOffset;\n        long transitionInstant = isPositiveShift ?\n                nextTransition(adjustedInstant - 1) :\n                previousTransition(adjustedInstant + 1);\n        int offsetAtTransition = getOffset(transitionInstant);\n        if (isPositiveShift) {\n            if (initialOffset >= offsetAtTransition || adjustedOffset <= offsetAtTransition) {\n                return offsetAtTransition;\n            } else {\n                // Find the next offset transition\n                // after the current adjustment\n                long nextTransitionLocal = nextTransition(instantLocal + 1);\n                long nextTransitionAdjusted = nextTransition(adjustedInstant + 1);\n                // Compare these two next transitions\n                if (nextTransitionLocal != nextTransitionAdjusted) {\n                    // If there is a difference between the two next transitions,\n                    // there should also be a difference between the previous\n                    // transitions for the initial and adjusted offsets\n                    long prevTransitionLocal = previousTransition(nextTransitionLocal);\n                    long prevTransitionAdjusted = previousTransition(nextTransitionAdjusted);\n                    if (prevTransitionLocal != prevTransitionAdjusted) {\n                        int prevOffsetLocal = getOffset(prevTransitionLocal);\n                        int prevOffsetAdjusted = getOffset(prevTransitionAdjusted);\n                        if (prevOffsetLocal == prevOffsetAdjusted) {\n                            return adjustedOffset;\n                        }\n                    }\n                }\n                return initialOffset;\n            }\n        } else {\n            if (initialOffset <= offsetAtTransition || adjustedOffset >= offsetAtTransition) {\n                return offsetAtTransition;\n            } else {\n                // Find the previous offset transition\n                // before the current adjustment\n                long prevTransitionLocal = previousTransition(instantLocal - 1);\n                long prevTransitionAdjusted = previousTransition(adjustedInstant - 1);\n                // Compare these two previous transitions\n                if (prevTransitionLocal != prevTransitionAdjusted) {\n                    // If there is a difference between the two previous transitions,\n                    // there should also be a difference between the next\n                    // transitions for the initial and adjusted offsets\n                    long nextTransitionLocal = nextTransition(prevTransitionLocal + 1);\n                    long nextTransitionAdjusted = nextTransition(prevTransitionAdjusted + 1);\n                    if (nextTransitionLocal != nextTransitionAdjusted) {\n                        int nextOffsetLocal = getOffset(nextTransitionLocal);\n                        int nextOffsetAdjusted = getOffset(nextTransitionAdjusted);\n                        if (nextOffsetLocal == nextOffsetAdjusted) {\n                            return adjustedOffset;\n                        }\n                    }\n                }\n                return initialOffset;\n            }\n        }\n    } else {\n        return initialOffset;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..d67c3195 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,71 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+public int getOffsetFromLocal(long instantLocal) {\n+    int initialOffset = getOffset(instantLocal);\n+    long adjustedInstant = instantLocal - initialOffset;\n+    int adjustedOffset = getOffset(adjustedInstant);\n+    if (initialOffset != adjustedOffset) {\n+        boolean isPositiveShift = adjustedOffset > initialOffset;\n+        long transitionInstant = isPositiveShift ?\n+                nextTransition(adjustedInstant - 1) :\n+                previousTransition(adjustedInstant + 1);\n+        int offsetAtTransition = getOffset(transitionInstant);\n+        if (isPositiveShift) {\n+            if (initialOffset >= offsetAtTransition || adjustedOffset <= offsetAtTransition) {\n+                return offsetAtTransition;\n+            } else {\n+                // Find the next offset transition\n+                // after the current adjustment\n+                long nextTransitionLocal = nextTransition(instantLocal + 1);\n+                long nextTransitionAdjusted = nextTransition(adjustedInstant + 1);\n+                // Compare these two next transitions\n+                if (nextTransitionLocal != nextTransitionAdjusted) {\n+                    // If there is a difference between the two next transitions,\n+                    // there should also be a difference between the previous\n+                    // transitions for the initial and adjusted offsets\n+                    long prevTransitionLocal = previousTransition(nextTransitionLocal);\n+                    long prevTransitionAdjusted = previousTransition(nextTransitionAdjusted);\n+                    if (prevTransitionLocal != prevTransitionAdjusted) {\n+                        int prevOffsetLocal = getOffset(prevTransitionLocal);\n+                        int prevOffsetAdjusted = getOffset(prevTransitionAdjusted);\n+                        if (prevOffsetLocal == prevOffsetAdjusted) {\n+                            return adjustedOffset;\n+                        }\n+                    }\n                 }\n+                return initialOffset;\n+            }\n+        } else {\n+            if (initialOffset <= offsetAtTransition || adjustedOffset >= offsetAtTransition) {\n+                return offsetAtTransition;\n+            } else {\n+                // Find the previous offset transition\n+                // before the current adjustment\n+                long prevTransitionLocal = previousTransition(instantLocal - 1);\n+                long prevTransitionAdjusted = previousTransition(adjustedInstant - 1);\n+                // Compare these two previous transitions\n+                if (prevTransitionLocal != prevTransitionAdjusted) {\n+                    // If there is a difference between the two previous transitions,\n+                    // there should also be a difference between the next\n+                    // transitions for the initial and adjusted offsets\n+                    long nextTransitionLocal = nextTransition(prevTransitionLocal + 1);\n+                    long nextTransitionAdjusted = nextTransition(prevTransitionAdjusted + 1);\n+                    if (nextTransitionLocal != nextTransitionAdjusted) {\n+                        int nextOffsetLocal = getOffset(nextTransitionLocal);\n+                        int nextOffsetAdjusted = getOffset(nextTransitionAdjusted);\n+                        if (nextOffsetLocal == nextOffsetAdjusted) {\n+                            return adjustedOffset;\n+                        }\n+                    }\n+                }\n+                return initialOffset;\n             }\n         }\n-        return offsetAdjusted;\n+    } else {\n+        return initialOffset;\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}