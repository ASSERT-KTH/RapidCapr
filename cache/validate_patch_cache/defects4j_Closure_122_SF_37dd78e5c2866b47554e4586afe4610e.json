{
    "patch": "@Test\npublic void testSuspiciousBlockCommentWarning3() {\n  List<SourceFile> externs = ImmutableList.of();\n  List<SourceFile> inputs =\n      ImmutableList.of(\n          SourceFile.fromCode(\"test\", \"/**\\n * @param {string} foo\\n*/\\nfunction f(foo) {}\"));\n\n  CompilerOptions options = new CompilerOptions();\n  options.setCheckSuspiciousCode(true);\n\n  Compiler compiler = new Compiler();\n  compiler.init(externs, inputs, options);\n\n  ErrorManager errorManager = new BlackHoleErrorManager();\n  compiler.setErrorManager(errorManager);\n\n  assertThat(compiler.getErrors().length).isEqualTo(0);\n  assertThat(compiler.getWarnings().length).isEqualTo(0);\n\n  compiler.parseInputs();\n  assertThat(compiler.getErrors().length).isEqualTo(0);\n  assertThat(compiler.getWarnings().length).isEqualTo(1);\n  assertThat(\n          errorManager\n              .getWarnings()\n              .get(0)\n              .description\n              .contains(NodeUtil.SUSPICIOUS_COMMENT_WARNING))\n      .isEqualTo(true);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 709534bf..ee4de85c 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -248,14 +248,36 @@ class IRFactory {\n   /**\n    * Check to see if the given block comment looks like it should be JSDoc.\n    */\n-  private void handleBlockComment(Comment comment) {\n-    if (comment.getValue().indexOf(\"/* @\") != -1 || comment.getValue().indexOf(\"\\n * @\") != -1) {\n-      errorReporter.warning(\n-          SUSPICIOUS_COMMENT_WARNING,\n-          sourceName,\n-          comment.getLineno(), \"\", 0);\n-    }\n-  }\n+@Test\n+public void testSuspiciousBlockCommentWarning3() {\n+  List<SourceFile> externs = ImmutableList.of();\n+  List<SourceFile> inputs =\n+      ImmutableList.of(\n+          SourceFile.fromCode(\"test\", \"/**\\n * @param {string} foo\\n*/\\nfunction f(foo) {}\"));\n+\n+  CompilerOptions options = new CompilerOptions();\n+  options.setCheckSuspiciousCode(true);\n+\n+  Compiler compiler = new Compiler();\n+  compiler.init(externs, inputs, options);\n+\n+  ErrorManager errorManager = new BlackHoleErrorManager();\n+  compiler.setErrorManager(errorManager);\n+\n+  assertThat(compiler.getErrors().length).isEqualTo(0);\n+  assertThat(compiler.getWarnings().length).isEqualTo(0);\n+\n+  compiler.parseInputs();\n+  assertThat(compiler.getErrors().length).isEqualTo(0);\n+  assertThat(compiler.getWarnings().length).isEqualTo(1);\n+  assertThat(\n+          errorManager\n+              .getWarnings()\n+              .get(0)\n+              .description\n+              .contains(NodeUtil.SUSPICIOUS_COMMENT_WARNING))\n+      .isEqualTo(true);\n+}\n \n   /**\n    * @return true if the jsDocParser represents a fileoverview.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}