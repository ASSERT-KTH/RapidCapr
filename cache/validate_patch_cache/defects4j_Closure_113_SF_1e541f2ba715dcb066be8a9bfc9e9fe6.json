{
    "patch": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n\n    String ns = arg.getString();\n    ProvidedName provided = providedNames.get(ns);\n    if (provided != null && provided.isExplicitlyProvided()) {\n        JSModule providedModule = provided.explicitModule;\n        // This must be non-null, because there was an explicit provide.\n        Preconditions.checkNotNull(providedModule);\n\n        JSModule module = t.getModule();\n        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module, providedModule)) {\n            compiler.report(t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName()));\n        }\n        \n        // Replace the goog.require call with its argument node.\n        arg.detach();\n        parent.replaceChild(n, arg);\n        maybeAddToSymbolTable(arg);\n\n        // Report code change.\n        compiler.reportCodeChange();\n    } else {\n        // Remove unrecognized or implicitly provided requires.\n        parent.removeChild(n);\n        if (provided == null) {\n            // Record unrecognized require.\n            unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));\n        } else {\n            // Report warning for implicitly provided require.\n            compiler.report(JSError.make(n, XMODULE_REQUIRE_WARNING, ns, ns, \"\"));\n        }\n        // Report code change.\n        compiler.reportCodeChange();\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..c7055c28 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -292,46 +292,43 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n   /**\n    * Handles a goog.require call.\n    */\n-  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n+private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n     Node left = n.getFirstChild();\n     Node arg = left.getNext();\n-    if (verifyLastArgumentIsString(t, left, arg)) {\n-      String ns = arg.getString();\n-      ProvidedName provided = providedNames.get(ns);\n-      if (provided == null || !provided.isExplicitlyProvided()) {\n-        unrecognizedRequires.add(\n-            new UnrecognizedRequire(n, ns, t.getSourceName()));\n-      } else {\n-        JSModule providedModule = provided.explicitModule;\n \n+    String ns = arg.getString();\n+    ProvidedName provided = providedNames.get(ns);\n+    if (provided != null && provided.isExplicitlyProvided()) {\n+        JSModule providedModule = provided.explicitModule;\n         // This must be non-null, because there was an explicit provide.\n         Preconditions.checkNotNull(providedModule);\n \n         JSModule module = t.getModule();\n-        if (moduleGraph != null &&\n-            module != providedModule &&\n-            !moduleGraph.dependsOn(module, providedModule)) {\n-          compiler.report(\n-              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n-                  providedModule.getName(),\n-                  module.getName()));\n+        if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module, providedModule)) {\n+            compiler.report(t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName()));\n         }\n-      }\n-\n-      maybeAddToSymbolTable(left);\n-      maybeAddStringNodeToSymbolTable(arg);\n+        \n+        // Replace the goog.require call with its argument node.\n+        arg.detach();\n+        parent.replaceChild(n, arg);\n+        maybeAddToSymbolTable(arg);\n \n-      // Requires should be removed before further processing.\n-      // Some clients run closure pass multiple times, first with\n-      // the checks for broken requires turned off. In these cases, we\n-      // allow broken requires to be preserved by the first run to\n-      // let them be caught in the subsequent run.\n-      if (provided != null) {\n-        parent.detachFromParent();\n+        // Report code change.\n+        compiler.reportCodeChange();\n+    } else {\n+        // Remove unrecognized or implicitly provided requires.\n+        parent.removeChild(n);\n+        if (provided == null) {\n+            // Record unrecognized require.\n+            unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));\n+        } else {\n+            // Report warning for implicitly provided require.\n+            compiler.report(JSError.make(n, XMODULE_REQUIRE_WARNING, ns, ns, \"\"));\n+        }\n+        // Report code change.\n         compiler.reportCodeChange();\n-      }\n     }\n-  }\n+}\n \n   /**\n    * Handles a goog.provide call.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}