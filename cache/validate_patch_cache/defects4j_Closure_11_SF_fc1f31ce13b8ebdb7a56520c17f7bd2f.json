{
    "patch": "public static String getProp(String propName) throws Exception {\n   InputStream input = null;\n   try {\n      Properties prop = new Properties();\n      input = new FileInputStream(\"config.properties\");\n      prop.load(input);\n      String propValue = prop.getProperty(propName);\n      if (propValue == null) {\n         throw new Exception(\"'\" + propName + \"' property not found in config.properties file.\");\n      }\n      return propValue;\n   } catch (IOException ex) {\n      throw new Exception(\"Unable to read config.properties file.\");\n   } finally {\n      if (input != null) {\n         try {\n            input.close();\n         } catch (IOException e) {\n            // Ignore the exception\n         }\n      }\n   }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..887e3820 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,29 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getProp(String propName) throws Exception {\n+   InputStream input = null;\n+   try {\n+      Properties prop = new Properties();\n+      input = new FileInputStream(\"config.properties\");\n+      prop.load(input);\n+      String propValue = prop.getProperty(propName);\n+      if (propValue == null) {\n+         throw new Exception(\"'\" + propName + \"' property not found in config.properties file.\");\n+      }\n+      return propValue;\n+   } catch (IOException ex) {\n+      throw new Exception(\"Unable to read config.properties file.\");\n+   } finally {\n+      if (input != null) {\n+         try {\n+            input.close();\n+         } catch (IOException e) {\n+            // Ignore the exception\n+         }\n+      }\n+   }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}