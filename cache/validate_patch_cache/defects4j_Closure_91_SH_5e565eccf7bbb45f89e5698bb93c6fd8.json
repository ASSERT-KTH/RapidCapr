{
    "patch": "        // Don't traverse the function if it is assigned to a prototype property.\n        Node assignTarget = lhs.getFirstChild();\n        if (NodeUtil.isGet(assignTarget)) {\n          Node propNode = assignTarget.getLastChild();\n          if (propNode != null && \"prototype\".equals(propNode.getString())) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..7f3902ba 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,11 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+        // Don't traverse the function if it is assigned to a prototype property.\n+        Node assignTarget = lhs.getFirstChild();\n+        if (NodeUtil.isGet(assignTarget)) {\n+          Node propNode = assignTarget.getLastChild();\n+          if (propNode != null && \"prototype\".equals(propNode.getString())) {\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}