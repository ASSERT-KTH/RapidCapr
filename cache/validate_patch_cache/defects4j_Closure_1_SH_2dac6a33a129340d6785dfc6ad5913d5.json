{
    "patch": "private List<String> getDirectCalls(String function) {\n  List<String> callers = new ArrayList<>();\n  NodeTraversal.traverse(compiler.getRoot(), new NodeTraversal.Callback() {\n    @Override\n    public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n      if (n.isCall() && n.getFirstChild().getOriginalQualifiedName().equals(function)) {\n        callers.add(n.getFirstChild().getQualifiedName());\n      }\n      return true;\n    }\n\n    @Override\n    public void visit(NodeTraversal nodeTraversal, Node n, Node parent) {\n      // do nothing\n    }\n  });\n  return callers;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d1923216 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,24 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+private List<String> getDirectCalls(String function) {\n+  List<String> callers = new ArrayList<>();\n+  NodeTraversal.traverse(compiler.getRoot(), new NodeTraversal.Callback() {\n+    @Override\n+    public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n+      if (n.isCall() && n.getFirstChild().getOriginalQualifiedName().equals(function)) {\n+        callers.add(n.getFirstChild().getQualifiedName());\n+      }\n+      return true;\n+    }\n+\n+    @Override\n+    public void visit(NodeTraversal nodeTraversal, Node n, Node parent) {\n+      // do nothing\n+    }\n+  });\n+  return callers;\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}