{
    "patch": "        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            // we need to ensure that time is always after the DST gap\n            // this happens naturally for positive offsets, but not for negative\n            if ((offsetLocal - offsetAdjusted) < 0) {\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal == nextAdjusted) {\n                    // No transition in the local range. We can just return the default offset.\n                    return offsetAdjusted;\n                }\n                if (nextLocal > instantLocal) {\n                    // Transition in the local range is ahead of us. The default offset is correct.\n                    return offsetAdjusted;\n                }\n                int nextLocalOffset = getOffset(nextLocal);\n                if (nextLocalOffset > offsetLocal) {\n                    // The transition replaces the default offset.\n                    return nextLocalOffset;\n                }\n                // Transition occurs before the default offset change, so we make a new estimate.\n                long nextLocalAdjusted = nextLocal - offsetLocal;\n                int nextLocalAdjustedOffset = getOffset(nextLocalAdjusted);\n                if (nextLocalAdjustedOffset > offsetLocal) {\n                    // The instant has moved across a DST boundary, recalculate the offset\n                    return getOffset(nextLocalAdjusted);\n                }\n                // Default offset is still valid.\n                return offsetAdjusted;\n            } else {\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                if (prevLocal == prevAdjusted) {\n                    // No transition in the local range. We can just return the default offset.\n                    return offsetAdjusted;\n                }\n                if (prevLocal < instantLocal) {\n                    // Transition in the local range is behind us. The default offset is correct.\n                    return offsetAdjusted;\n                }\n                int prevLocalOffset = getOffset(prevLocal);\n                if (prevLocalOffset < offsetLocal) {\n                    // The transition replaces the default offset.\n                    return prevLocalOffset;\n                }\n                // Transition occurs after the default offset change, so we make a new estimate.\n                long prevLocalAdjusted = prevLocal - offsetAdjusted;\n                int prevLocalAdjustedOffset = getOffset(prevLocalAdjusted);\n                if (prevLocalAdjustedOffset < offsetLocal) {\n                    // The instant has moved across a DST boundary, recalculate the offset\n                    return getOffset(prevLocalAdjusted);\n                }\n                // Default offset is still valid.\n                return offsetAdjusted;\n            }\n        }\n        return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..cc75ab3f 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,66 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+        // if the offsets differ, we must be near a DST boundary\n+        if (offsetLocal != offsetAdjusted) {\n+            // we need to ensure that time is always after the DST gap\n+            // this happens naturally for positive offsets, but not for negative\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                // if we just return offsetAdjusted then the time is pushed\n+                // back before the transition, whereas it should be\n+                // on or after the transition\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal == nextAdjusted) {\n+                    // No transition in the local range. We can just return the default offset.\n+                    return offsetAdjusted;\n+                }\n+                if (nextLocal > instantLocal) {\n+                    // Transition in the local range is ahead of us. The default offset is correct.\n+                    return offsetAdjusted;\n+                }\n+                int nextLocalOffset = getOffset(nextLocal);\n+                if (nextLocalOffset > offsetLocal) {\n+                    // The transition replaces the default offset.\n+                    return nextLocalOffset;\n+                }\n+                // Transition occurs before the default offset change, so we make a new estimate.\n+                long nextLocalAdjusted = nextLocal - offsetLocal;\n+                int nextLocalAdjustedOffset = getOffset(nextLocalAdjusted);\n+                if (nextLocalAdjustedOffset > offsetLocal) {\n+                    // The instant has moved across a DST boundary, recalculate the offset\n+                    return getOffset(nextLocalAdjusted);\n+                }\n+                // Default offset is still valid.\n+                return offsetAdjusted;\n+            } else {\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                if (prevLocal == prevAdjusted) {\n+                    // No transition in the local range. We can just return the default offset.\n+                    return offsetAdjusted;\n+                }\n+                if (prevLocal < instantLocal) {\n+                    // Transition in the local range is behind us. The default offset is correct.\n+                    return offsetAdjusted;\n+                }\n+                int prevLocalOffset = getOffset(prevLocal);\n+                if (prevLocalOffset < offsetLocal) {\n+                    // The transition replaces the default offset.\n+                    return prevLocalOffset;\n+                }\n+                // Transition occurs after the default offset change, so we make a new estimate.\n+                long prevLocalAdjusted = prevLocal - offsetAdjusted;\n+                int prevLocalAdjustedOffset = getOffset(prevLocalAdjusted);\n+                if (prevLocalAdjustedOffset < offsetLocal) {\n+                    // The instant has moved across a DST boundary, recalculate the offset\n+                    return getOffset(prevLocalAdjusted);\n+                }\n+                // Default offset is still valid.\n+                return offsetAdjusted;\n+            }\n+        }\n+        return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}