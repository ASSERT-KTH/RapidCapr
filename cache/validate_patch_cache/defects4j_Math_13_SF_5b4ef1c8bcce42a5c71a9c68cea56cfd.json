{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final RealMatrix x = new BlockRealMatrix(n, n);\n    final RealMatrix y = new BlockRealMatrix(n, n);\n\n    // perform Cholesky decomposition (m = L * L^T)\n    final CholeskyDecomposition dec = new CholeskyDecomposition(m);\n    RealMatrix l = dec.getL();\n\n    // set initial value of x to L\n    x.setSubMatrix(l.getData(), 0, 0);\n\n    // iterate until convergence\n    double residual = Double.POSITIVE_INFINITY;\n    while (residual > 1e-10) {\n        // compute y = m * x^{-1}\n        y.multiplyToSelf(0);\n        for (int i = 0; i < n; i++) {\n            RealVector e = y.getColumnVector(i);\n            e = l.preMultiply(e);\n            e = l.solve(e);\n            y.setColumnVector(i, e);\n        }\n\n        // update x = (x + y) / 2\n        x.add(y);\n        x.scalarMultiplyToSelf(0.5);\n\n        // compute residual\n        RealMatrix temp = x.multiply(x);\n        temp = temp.subtract(m);\n        residual = temp.getFrobeniusNorm();\n    }\n\n    // return the square root of m\n    return x;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..6cec6551f 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,41 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final RealMatrix x = new BlockRealMatrix(n, n);\n+    final RealMatrix y = new BlockRealMatrix(n, n);\n+\n+    // perform Cholesky decomposition (m = L * L^T)\n+    final CholeskyDecomposition dec = new CholeskyDecomposition(m);\n+    RealMatrix l = dec.getL();\n+\n+    // set initial value of x to L\n+    x.setSubMatrix(l.getData(), 0, 0);\n+\n+    // iterate until convergence\n+    double residual = Double.POSITIVE_INFINITY;\n+    while (residual > 1e-10) {\n+        // compute y = m * x^{-1}\n+        y.multiplyToSelf(0);\n+        for (int i = 0; i < n; i++) {\n+            RealVector e = y.getColumnVector(i);\n+            e = l.preMultiply(e);\n+            e = l.solve(e);\n+            y.setColumnVector(i, e);\n+        }\n+\n+        // update x = (x + y) / 2\n+        x.add(y);\n+        x.scalarMultiplyToSelf(0.5);\n+\n+        // compute residual\n+        RealMatrix temp = x.multiply(x);\n+        temp = temp.subtract(m);\n+        residual = temp.getFrobeniusNorm();\n     }\n+\n+    // return the square root of m\n+    return x;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}