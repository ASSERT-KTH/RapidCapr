{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (x < 0.0 || a <= 0.0) {\n        throw new IllegalArgumentException();\n    }\n\n    if (x < a + 1.0) {\n        return 1.0 - regularizedGammaQ(a, x);\n    }\n\n    double lnGammaA = Gamma.logGamma(a);\n    double lnIncomplete = incompleteGammaP(a, x);\n    return Math.exp(lnGammaA + Math.log(x) - lnIncomplete);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..e13d8852b 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,19 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (x < 0.0 || a <= 0.0) {\n+        throw new IllegalArgumentException();\n+    }\n+\n+    if (x < a + 1.0) {\n+        return 1.0 - regularizedGammaQ(a, x);\n+    }\n+\n+    double lnGammaA = Gamma.logGamma(a);\n+    double lnIncomplete = incompleteGammaP(a, x);\n+    return Math.exp(lnGammaA + Math.log(x) - lnIncomplete);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}