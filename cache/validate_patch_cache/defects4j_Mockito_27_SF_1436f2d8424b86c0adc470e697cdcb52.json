{
    "patch": "public <T> void resetMock(T mock) {\n    if (!(mock instanceof Factory)) {\n        throw new IllegalArgumentException(\"Mock object should be an instance of Factory.\");\n    }\n\n    Factory factory = (Factory) mock;\n    Callback[] callbacks = factory.getCallbacks();\n    for (int i = 0; i < callbacks.length; i++) {\n        if (callbacks[i] instanceof MethodInterceptorFilter) {\n            MethodInterceptorFilter filter = (MethodInterceptorFilter) callbacks[i];\n            MockHandler<T> mockHandler = filter.getMockHandler();\n            factory.setCallback(i, new MethodInterceptorFilter<>(mockHandler, new MockSettingsImpl().defaultAnswer(RETURNS_DEFAULTS)));\n            return;\n        }\n    }\n    throw new IllegalStateException(\"No MethodInterceptorFilter found for the mock object.\");\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..d0eea76c1 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,24 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    if (!(mock instanceof Factory)) {\n+        throw new IllegalArgumentException(\"Mock object should be an instance of Factory.\");\n+    }\n+\n+    Factory factory = (Factory) mock;\n+    Callback[] callbacks = factory.getCallbacks();\n+    for (int i = 0; i < callbacks.length; i++) {\n+        if (callbacks[i] instanceof MethodInterceptorFilter) {\n+            MethodInterceptorFilter filter = (MethodInterceptorFilter) callbacks[i];\n+            MockHandler<T> mockHandler = filter.getMockHandler();\n+            factory.setCallback(i, new MethodInterceptorFilter<>(mockHandler, new MockSettingsImpl().defaultAnswer(RETURNS_DEFAULTS)));\n+            return;\n+        }\n+    }\n+    throw new IllegalStateException(\"No MethodInterceptorFilter found for the mock object.\");\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}