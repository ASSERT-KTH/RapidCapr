{
    "patch": "  public void initOptions(CompilerOptions options) {\n    this.options = options;\n    if (errorManager == null) {\n      if (outStream == null) {\n        setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));\n      } else {\n        PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n        setErrorManager(printer);\n      }\n    }\n\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = false;\n    } else if (!options.checkTypes) {\n      // If DiagnosticGroups did not override the plain checkTypes\n      // option, and checkTypes is enabled, then turn off the\n      // parser type warnings.\n      options.setWarningLevel(\n          DiagnosticGroups.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);\n    }\n\n    if (options.checkGlobalThisLevel.isOn()) {\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);\n    }\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList();\n    guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));\n    guards.add(options.getWarningsGuard());\n\n\n    // All passes must run the variable check. This synthesizes\n    // variables later so that the compiler doesn't crash. It also\n    // checks the externs file for validity. If you don't want to warn\n    // about missing variable declarations, we shut that specific\n    // error off.\n    if (!options.checkSymbols &&\n        (warningsGuard == null || !warningsGuard.disables(\n            DiagnosticGroups.CHECK_VARIABLES))) {\n      guards.add(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n    }\n\n    this.warningsGuard = new ComposeWarningsGuard(guards);\n    if (options.checkSymbols) {\n      // Set check types to true if it is off.\n      if (!options.checkTypes) {\n        options.checkTypes = true;\n      }\n      // Assume check types is on already. Meant to optimize compile\n      // time for people that know their code passed checkTypes.\n      // Enable check symbols though.\n      options.setWarningLevel(\n          DiagnosticGroups.CHECK_VARIABLES,\n          CheckLevel.WARNING);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 11850211..0451e556 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -247,8 +247,7 @@ public class Compiler extends AbstractCompiler {\n       // option, and checkTypes is enabled, then turn off the\n       // parser type warnings.\n       options.setWarningLevel(\n-          DiagnosticGroup.forType(\n-              RhinoErrorReporter.TYPE_PARSE_ERROR),\n+          DiagnosticGroups.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),\n           CheckLevel.OFF);\n     }\n \n@@ -279,6 +278,18 @@ public class Compiler extends AbstractCompiler {\n     }\n \n     this.warningsGuard = new ComposeWarningsGuard(guards);\n+    if (options.checkSymbols) {\n+      // Set check types to true if it is off.\n+      if (!options.checkTypes) {\n+        options.checkTypes = true;\n+      }\n+      // Assume check types is on already. Meant to optimize compile\n+      // time for people that know their code passed checkTypes.\n+      // Enable check symbols though.\n+      options.setWarningLevel(\n+          DiagnosticGroups.CHECK_VARIABLES,\n+          CheckLevel.WARNING);\n+    }\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}