{
    "patch": "static boolean shouldMinimizeExitPoints(Node functionBody) {\n      boolean hasReturn = false;\n      boolean markLabeledExprs = false;\n      int numExitPoints = 0;\n\n      NodeTraversal.traverseEs6(compiler, functionBody, new MinimizeExitPointsScopes(hasReturn,\n              markLabeledExprs, numExitPoints));\n      return hasReturn && (MINIMIZE_EXIT_POINTS || numExitPoints > 1);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..39c3d4cb 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,15 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+static boolean shouldMinimizeExitPoints(Node functionBody) {\n+      boolean hasReturn = false;\n+      boolean markLabeledExprs = false;\n+      int numExitPoints = 0;\n+\n+      NodeTraversal.traverseEs6(compiler, functionBody, new MinimizeExitPointsScopes(hasReturn,\n+              markLabeledExprs, numExitPoints));\n+      return hasReturn && (MINIMIZE_EXIT_POINTS || numExitPoints > 1);\n+    }\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}