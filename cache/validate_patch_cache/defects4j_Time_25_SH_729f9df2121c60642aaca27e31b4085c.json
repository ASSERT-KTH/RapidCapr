{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    if ((offsetLocal - offsetAdjusted) < 0) {\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        long nextDiff = nextLocal - instantAdjusted;\n        long nextAdjustedDiff = nextAdjusted - instantLocal;\n        if (nextLocal != nextAdjusted && ((nextAdjustedDiff > 0 && nextDiff > nextAdjustedDiff) || nextAdjustedDiff <= 0)) {\n            int millisecondsToNext = (int) (nextLocal - instantAdjusted);\n            if (millisecondsToNext - (nextAdjusted - instantLocal) <= 1800000) { // Special Case for Moscow Time\n                return offsetAdjusted;\n            }\n            if (offsetAdjusted == -3) {\n                nextDiff = nextTransition(nextLocal) - nextLocal;\n                if (nextDiff == 1800000) {\n                    return offsetAdjusted; // we are in the \"impossible hour\"\n                }\n            }\n            return offsetLocal;\n        }\n        return offsetAdjusted;\n    } else {\n        long prevLocal = previousTransition(instantAdjusted);\n        long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n        if ((instantLocal - prevAdjusted) < (instantAdjusted - prevLocal)) {\n            return offsetLocal;\n        }\n        return offsetAdjusted;\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..1ee48e12 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,36 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    if ((offsetLocal - offsetAdjusted) < 0) {\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        long nextDiff = nextLocal - instantAdjusted;\n+        long nextAdjustedDiff = nextAdjusted - instantLocal;\n+        if (nextLocal != nextAdjusted && ((nextAdjustedDiff > 0 && nextDiff > nextAdjustedDiff) || nextAdjustedDiff <= 0)) {\n+            int millisecondsToNext = (int) (nextLocal - instantAdjusted);\n+            if (millisecondsToNext - (nextAdjusted - instantLocal) <= 1800000) { // Special Case for Moscow Time\n+                return offsetAdjusted;\n+            }\n+            if (offsetAdjusted == -3) {\n+                nextDiff = nextTransition(nextLocal) - nextLocal;\n+                if (nextDiff == 1800000) {\n+                    return offsetAdjusted; // we are in the \"impossible hour\"\n+                }\n+            }\n+            return offsetLocal;\n+        }\n+        return offsetAdjusted;\n+    } else {\n+        long prevLocal = previousTransition(instantAdjusted);\n+        long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+        if ((instantLocal - prevAdjusted) < (instantAdjusted - prevLocal)) {\n+            return offsetLocal;\n+        }\n+        return offsetAdjusted;\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}