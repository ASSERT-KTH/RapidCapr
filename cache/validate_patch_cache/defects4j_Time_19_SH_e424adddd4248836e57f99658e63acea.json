{
    "patch": "        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            // we need to ensure that time is always after the DST gap\n            // this happens naturally for positive offsets, but not for negative\n            if (offsetLocal >= 0) {\n                long next = nextTransition(instantAdjusted);\n                if (next == instantLocal - offsetLocal) {\n                    return offsetLocal;\n                } else {\n                    long prev = previousTransition(instantAdjusted);\n                    if (prev < instantAdjusted) {\n                        int offsetPrev = getOffset(prev);\n                        int diff = offsetPrev - offsetLocal;\n                        if (instantAdjusted - prev <= diff) {\n                            return offsetPrev;\n                        } else {\n                            return offsetLocal;\n                        }\n                    } else {\n                        return offsetLocal;\n                    }\n                }\n            } else {\n                long next = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (next != nextAdjusted) {\n                    return offsetLocal;\n                } else {\n                    long prev = previousTransition(instantAdjusted);\n                    if (prev < instantAdjusted) {\n                        int offsetPrev = getOffset(prev);\n                        int diff = offsetPrev - offsetLocal;\n                        if (instantAdjusted - prev <= diff) {\n                            return offsetPrev;\n                        } else {\n                            return offsetLocal;\n                        }\n                    } else {\n                        return offsetLocal;\n                    }\n                }\n            }\n        } else {\n            // if the offsets are equal, use that offset\n            return offsetLocal;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..91aec4e5 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,52 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        // if the offsets differ, we must be near a DST boundary\n+        if (offsetLocal != offsetAdjusted) {\n+            // we need to ensure that time is always after the DST gap\n+            // this happens naturally for positive offsets, but not for negative\n+            if (offsetLocal >= 0) {\n+                long next = nextTransition(instantAdjusted);\n+                if (next == instantLocal - offsetLocal) {\n+                    return offsetLocal;\n+                } else {\n+                    long prev = previousTransition(instantAdjusted);\n+                    if (prev < instantAdjusted) {\n+                        int offsetPrev = getOffset(prev);\n+                        int diff = offsetPrev - offsetLocal;\n+                        if (instantAdjusted - prev <= diff) {\n+                            return offsetPrev;\n+                        } else {\n+                            return offsetLocal;\n+                        }\n+                    } else {\n+                        return offsetLocal;\n+                    }\n+                }\n+            } else {\n+                long next = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (next != nextAdjusted) {\n+                    return offsetLocal;\n+                } else {\n+                    long prev = previousTransition(instantAdjusted);\n+                    if (prev < instantAdjusted) {\n+                        int offsetPrev = getOffset(prev);\n+                        int diff = offsetPrev - offsetLocal;\n+                        if (instantAdjusted - prev <= diff) {\n+                            return offsetPrev;\n+                        } else {\n+                            return offsetLocal;\n+                        }\n+                    } else {\n+                        return offsetLocal;\n+                    }\n+                }\n+            }\n+        } else {\n+            // if the offsets are equal, use that offset\n+            return offsetLocal;\n+        }\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}