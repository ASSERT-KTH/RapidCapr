{
    "patch": "int remainingIndex = index;\nfor (int i = 0; i < last; i++) {\n    int idx = 0;\n    final int offset = uniCounterOffset[i];\n    while (remainingIndex - idx * offset >= offset) {\n        remainingIndex -= idx * offset;\n        ++idx;\n    }\n    while (remainingIndex < idx * offset) { --idx; }\n    indices[i] = idx;\n    remainingIndex -= idx * offset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..a02cb8063 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,18 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n-        }\n-        --idx;\n-        indices[last] = idx;\n+int remainingIndex = index;\n+for (int i = 0; i < last; i++) {\n+    int idx = 0;\n+    final int offset = uniCounterOffset[i];\n+    while (remainingIndex - idx * offset >= offset) {\n+        remainingIndex -= idx * offset;\n+        ++idx;\n+    }\n+    while (remainingIndex < idx * offset) { --idx; }\n+    indices[i] = idx;\n+    remainingIndex -= idx * offset;\n+}\n \n         return indices;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: Wrong multidimensional index for [1][2] expected:<1> but was:<0>",
    "test_result": "FAIL"
}