{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n        // Restrict the constructor type to not-null and not-undefined.\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct != null && ct.isConstructor()) {\n            // Get the instance type of the constructor.\n            // If it's null, get the type of \"this\".\n            // If \"this\" also has an unknown or empty type, get an unknown type.\n            JSType instanceType = ct.getInstanceType();\n            if (instanceType == null) {\n                JSType thisType = ct.getTypeOfThis();\n                if (thisType != null && !thisType.isUnknownType() && !thisType.isEmptyType()) {\n                    instanceType = thisType;\n                }\n            }\n            // if it has an instance type, then it restricts to not-undefined and not-null.\n            if (instanceType != null) {\n              instanceType = instanceType.restrictByNotNullOrUndefined();\n              if (!instanceType.isEmptyType() && !instanceType.isUnknownType()) {\n                type = instanceType;\n              }\n            }\n        } else if (constructorType.isUnionType()) {\n            // Check if the constructor type is a union type.\n            // If it is, recursively call traverseNew for each type in the union.\n            Iterator<JSType> it = constructorType.getUnionMembers().iterator();\n            while (type == null && it.hasNext()) {\n                JSType unionType = it.next();\n                constructor.setJSType(unionType);\n                type = traverseNew(n, scope);\n            }\n        }\n    }\n    n.setJSType(type != null ? type : getNativeType(UNKNOWN_TYPE));\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n    return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..4318e4c3 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,49 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n     if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n+        // Restrict the constructor type to not-null and not-undefined.\n+        constructorType = constructorType.restrictByNotNullOrUndefined();\n         FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n         if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+            // Get the instance type of the constructor.\n+            // If it's null, get the type of \"this\".\n+            // If \"this\" also has an unknown or empty type, get an unknown type.\n+            JSType instanceType = ct.getInstanceType();\n+            if (instanceType == null) {\n+                JSType thisType = ct.getTypeOfThis();\n+                if (thisType != null && !thisType.isUnknownType() && !thisType.isEmptyType()) {\n+                    instanceType = thisType;\n+                }\n+            }\n+            // if it has an instance type, then it restricts to not-undefined and not-null.\n+            if (instanceType != null) {\n+              instanceType = instanceType.restrictByNotNullOrUndefined();\n+              if (!instanceType.isEmptyType() && !instanceType.isUnknownType()) {\n+                type = instanceType;\n+              }\n+            }\n+        } else if (constructorType.isUnionType()) {\n+            // Check if the constructor type is a union type.\n+            // If it is, recursively call traverseNew for each type in the union.\n+            Iterator<JSType> it = constructorType.getUnionMembers().iterator();\n+            while (type == null && it.hasNext()) {\n+                JSType unionType = it.next();\n+                constructor.setJSType(unionType);\n+                type = traverseNew(n, scope);\n+            }\n         }\n-      }\n     }\n-    n.setJSType(type);\n+    n.setJSType(type != null ? type : getNativeType(UNKNOWN_TYPE));\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+        scope = traverse(arg, scope);\n     }\n     return scope;\n-  }\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}