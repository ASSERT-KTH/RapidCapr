{
    "patch": "   * Infer properties on an object type based on a constraint type.\n   *\n   * @param type       The object type to update.\n   * @param constraint The constraint type to infer properties from.\n   */\n  void inferPropertiesOnObjectType(ObjectType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType() &&\n        type.isSubtypeOf(getNativeType(OBJECT_TYPE))) {\n\n      ObjectType objType =\n          ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * If we access a property of a symbol, then that symbol is not\n   * null or undefined.\n   */\n  FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.isQualifiedName()) {\n      JSType type = getJSType(n);\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (type != narrowed) {\n        scope = narrowScope(scope, n, narrowed);\n      }\n    }\n    return scope;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..0aa14b12 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,15 +1111,23 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n+   * Infer properties on an object type based on a constraint type.\n+   *\n+   * @param type       The object type to update.\n+   * @param constraint The constraint type to infer properties from.\n+   */\n+  void inferPropertiesOnObjectType(ObjectType type, JSType constraint) {\n     if (type == null || constraint == null) {\n       return;\n     }\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+    if (constraintObj != null && constraintObj.isRecordType() &&\n+        type.isSubtypeOf(getNativeType(OBJECT_TYPE))) {\n+\n+      ObjectType objType =\n+          ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n@@ -1140,7 +1148,7 @@ class TypeInference\n    * If we access a property of a symbol, then that symbol is not\n    * null or undefined.\n    */\n-  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n+  FlowScope dereferencePointer(Node n, FlowScope scope) {\n     if (n.isQualifiedName()) {\n       JSType type = getJSType(n);\n       JSType narrowed = type.restrictByNotNullOrUndefined();\n@@ -1149,6 +1157,8 @@ class TypeInference\n       }\n     }\n     return scope;\n+    }\n+    return scope;\n   }\n \n   private JSType getPropertyType(JSType objType, String propName,",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}