{
    "patch": "      JSDocInfo fnJSDocInfo = NodeUtil.getBestJSDocInfo(child);\n      if (fnJSDocInfo != null && fnJSDocInfo.hasThisType()) {\n        Node parent = n.getParent();\n        if (parent.isGetElem() || (parent.isGetProp()\n            && n == parent.getLastChild())) {\n          // Allow calls through GETPROP or GETELEM for functions\n          // with an explicit 'this' type.\n        } else {\n          report(t, n, INVALID_THIS_TYPE, childType.toString());\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..fbd6a11b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      JSDocInfo fnJSDocInfo = NodeUtil.getBestJSDocInfo(child);\n+      if (fnJSDocInfo != null && fnJSDocInfo.hasThisType()) {\n+        Node parent = n.getParent();\n+        if (parent.isGetElem() || (parent.isGetProp()\n+            && n == parent.getLastChild())) {\n+          // Allow calls through GETPROP or GETELEM for functions\n+          // with an explicit 'this' type.\n+        } else {\n+          report(t, n, INVALID_THIS_TYPE, childType.toString());\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}