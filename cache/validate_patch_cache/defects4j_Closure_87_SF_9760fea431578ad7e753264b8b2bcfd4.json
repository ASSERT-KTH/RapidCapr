{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n\n      // We need to recognize the OR pattern and return false in that case,\n      // but also respect issue 291 as well.\n      if (NodeUtil.isExprCallOrNew(maybeExpr) ||\n          maybeExpr.getType() == Token.CALL ||\n          isIssue291Pattern(maybeExpr)) {\n        return false;\n      }\n\n      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n        Node maybeCall = maybeExpr.getFirstChild();\n        if (maybeCall.getType() == Token.CALL && maybeCall.getFirstChild().getType() == Token.NAME) {\n          String functionName = maybeCall.getFirstChild().getString();\n          if (functionName.startsWith(\"on\")) {\n            return false;\n          }\n\n          if (maybeCall.getNext() != null) {\n            return false;\n          }\n\n          return true;\n        }\n      } else {\n        return NodeUtil.isExpressionNode(maybeExpr);\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..5524899d 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,40 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+\n+      // We need to recognize the OR pattern and return false in that case,\n+      // but also respect issue 291 as well.\n+      if (NodeUtil.isExprCallOrNew(maybeExpr) ||\n+          maybeExpr.getType() == Token.CALL ||\n+          isIssue291Pattern(maybeExpr)) {\n+        return false;\n       }\n-    }\n \n-    return false;\n+      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+        Node maybeCall = maybeExpr.getFirstChild();\n+        if (maybeCall.getType() == Token.CALL && maybeCall.getFirstChild().getType() == Token.NAME) {\n+          String functionName = maybeCall.getFirstChild().getString();\n+          if (functionName.startsWith(\"on\")) {\n+            return false;\n+          }\n+\n+          if (maybeCall.getNext() != null) {\n+            return false;\n+          }\n+\n+          return true;\n+        }\n+      } else {\n+        return NodeUtil.isExpressionNode(maybeExpr);\n+      }\n+    }\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}