{
    "patch": "\n        int years = getYears(); // aditionally, these are to be added\n        int months = getMonths();\n        if (type.isSupported(DurationFieldType.years())\n                || type.isSupported(DurationFieldType.months())) {\n            int totalMonths = years * 12 + months;\n            if (type.isSupported(DurationFieldType.years())) {\n                int normalizedYears = totalMonths / 12;\n                years = normalizedYears;\n                totalMonths -= normalizedYears * 12;\n            }\n            if (type.isSupported(DurationFieldType.months())) {\n                months = totalMonths;\n            }\n        }\n\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        if (years != 0) {\n            result = result.withYears(years);\n        }\n        if (months != 0) {\n            result = result.withMonths(months);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..ac05a27a 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,27 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n+\n+        int years = getYears(); // aditionally, these are to be added\n         int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n+        if (type.isSupported(DurationFieldType.years())\n+                || type.isSupported(DurationFieldType.months())) {\n+            int totalMonths = years * 12 + months;\n+            if (type.isSupported(DurationFieldType.years())) {\n+                int normalizedYears = totalMonths / 12;\n+                years = normalizedYears;\n+                totalMonths -= normalizedYears * 12;\n             }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n+            if (type.isSupported(DurationFieldType.months())) {\n+                months = totalMonths;\n             }\n         }\n-        return result;\n-    }\n+\n+        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+        if (years != 0) {\n+            result = result.withYears(years);\n+        }\n+        if (months != 0) {\n+            result = result.withMonths(months);\n \n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}