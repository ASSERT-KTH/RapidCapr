{
    "patch": "          // get initial value of the variable\n          Reference initRef = getInitializingReference();\n          if (initRef == null || initRef.isDynamicLocal()) {\n            return false;\n          }\n\n          // check that the variable is not reassigned\n          BasicBlock last = getLastReadBlock();\n          for (Reference ref : references) {\n            if (ref != initRef && !ref.isDeclaration()\n                && !ref.isDynamicLocal() && !ref.isThisReference()\n                && !ref.isNonThisLocalReference()\n                && ref.getName().equals(initRef.getName())\n                && !ref.getBasicBlock().dominates(last)) {\n              return false;\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..565deab2 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,23 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // get initial value of the variable\n+          Reference initRef = getInitializingReference();\n+          if (initRef == null || initRef.isDynamicLocal()) {\n+            return false;\n+          }\n+\n+          // check that the variable is not reassigned\n+          BasicBlock last = getLastReadBlock();\n+          for (Reference ref : references) {\n+            if (ref != initRef && !ref.isDeclaration()\n+                && !ref.isDynamicLocal() && !ref.isThisReference()\n+                && !ref.isNonThisLocalReference()\n+                && ref.getName().equals(initRef.getName())\n+                && !ref.getBasicBlock().dominates(last)) {\n+              return false;\n+            }\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}