{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix eigenvalues = dec.getD();\n    final RealMatrix eigenvectors = dec.getV();\n    final int n = eigenvalues.getRowDimension();\n    final RealMatrix invSqrt = new Array2DRowRealMatrix(n, n);\n\n    for (int i = 0; i < n; i++) {\n        final double lambda = eigenvalues.getEntry(i, i);\n        final RealVector v = eigenvectors.getColumnVector(i);\n        RealVector invSqrtV = v.mapMultiply(1.0 / Math.sqrt(lambda));\n        for (int j = 0; j < n; j++) {\n            double dot = eigenvectors.getColumnVector(j).dotProduct(v);\n            invSqrt.setEntry(i, j, dot / Math.sqrt(lambda * eigenvalues.getEntry(j, j)));\n        }\n    }\n\n    // Newton-Schulz iteration to compute the matrix square root\n    RealMatrix x = invSqrt;\n    final double normM = m.getFrobeniusNorm();\n    final double tol = 1e-6;\n    int iter = 0;\n    do {\n        RealMatrix y = x.inverse();\n        x = x.add(y).scalarMultiply(0.5);\n        double err = x.multiply(x).subtract(m).getFrobeniusNorm() / normM;\n        if (++iter > 100 || err <= tol) {\n            break;\n        }\n    } while (true);\n\n    return x;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..76d812682 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,37 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix eigenvalues = dec.getD();\n+    final RealMatrix eigenvectors = dec.getV();\n+    final int n = eigenvalues.getRowDimension();\n+    final RealMatrix invSqrt = new Array2DRowRealMatrix(n, n);\n+\n+    for (int i = 0; i < n; i++) {\n+        final double lambda = eigenvalues.getEntry(i, i);\n+        final RealVector v = eigenvectors.getColumnVector(i);\n+        RealVector invSqrtV = v.mapMultiply(1.0 / Math.sqrt(lambda));\n+        for (int j = 0; j < n; j++) {\n+            double dot = eigenvectors.getColumnVector(j).dotProduct(v);\n+            invSqrt.setEntry(i, j, dot / Math.sqrt(lambda * eigenvalues.getEntry(j, j)));\n+        }\n     }\n+\n+    // Newton-Schulz iteration to compute the matrix square root\n+    RealMatrix x = invSqrt;\n+    final double normM = m.getFrobeniusNorm();\n+    final double tol = 1e-6;\n+    int iter = 0;\n+    do {\n+        RealMatrix y = x.inverse();\n+        x = x.add(y).scalarMultiply(0.5);\n+        double err = x.multiply(x).subtract(m).getFrobeniusNorm() / normM;\n+        if (++iter > 100 || err <= tol) {\n+            break;\n+        }\n+    } while (true);\n+\n+    return x;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}