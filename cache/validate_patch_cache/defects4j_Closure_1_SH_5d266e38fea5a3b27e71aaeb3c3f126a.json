{
    "patch": "    \n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      List<Node> removed = new ArrayList<>();\n      Node curNode = argList.getFirstChild();\n      while (curNode != null) {\n          Node nextNode = curNode.getNext();\n          if (curNode.isName()) {\n              Var var = fnScope.getVar(curNode.getString());\n              if (!referenced.contains(var)) {\n                  argList.removeChild(curNode);\n                  removed.add(curNode);\n                  compiler.reportCodeChange();\n              }\n          }\n          curNode = nextNode;\n      }\n      if (argList.isSyntheticBlock() && !removed.isEmpty()) {\n          // Remove empty synthetic blocks.\n          Node lastArg = argList.getLastChild();\n          if (lastArg.isBlock() && !lastArg.hasChildren()) {\n              argList.removeChild(lastArg);\n              compiler.reportCodeChange();\n          }\n      }\n    } else {\n        callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..ba7f07a0 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,36 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    \n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      List<Node> removed = new ArrayList<>();\n+      Node curNode = argList.getFirstChild();\n+      while (curNode != null) {\n+          Node nextNode = curNode.getNext();\n+          if (curNode.isName()) {\n+              Var var = fnScope.getVar(curNode.getString());\n+              if (!referenced.contains(var)) {\n+                  argList.removeChild(curNode);\n+                  removed.add(curNode);\n+                  compiler.reportCodeChange();\n+              }\n+          }\n+          curNode = nextNode;\n+      }\n+      if (argList.isSyntheticBlock() && !removed.isEmpty()) {\n+          // Remove empty synthetic blocks.\n+          Node lastArg = argList.getLastChild();\n+          if (lastArg.isBlock() && !lastArg.hasChildren()) {\n+              argList.removeChild(lastArg);\n+              compiler.reportCodeChange();\n+          }\n+      }\n+    } else {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}