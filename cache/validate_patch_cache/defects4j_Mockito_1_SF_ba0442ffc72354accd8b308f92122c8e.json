{
    "patch": "public void captureArgumentsFrom(Invocation invocation) {\n    for (int position = 0; position < matchers.size(); position++) {\n        Matcher m = matchers.get(position);\n        if (m instanceof CapturesArguments) {\n            Object argument = getArgument(invocation, position);\n            ((CapturesArguments) m).captureFrom(argument);\n        }\n    }\n}\n\nprivate Object getArgument(Invocation invocation, int position) {\n    if (position >= invocation.getRawArguments().length) {\n        return null;\n    } else if (isVarArgParameter(invocation, position)) {\n        return getVarArgs(invocation, position);\n    } else {\n        return invocation.getRawArguments()[position];\n    }\n}\n\nprivate boolean isVarArgParameter(Invocation invocation, int position) {\n    return invocation.getMethod().isVarArgs() && (position == invocation.getRawArguments().length - 1);\n}\n\nprivate Object getVarArgs(Invocation invocation, int position) {\n    Object array = invocation.getRawArguments()[position];\n    if (array.getClass().isArray()) {\n        int length = Array.getLength(array);\n        if (length == 0) {\n            return null;\n        } else if (length == 1) {\n            return Array.get(array, 0);\n        } else {\n            Object[] args = new Object[length];\n            for (int i = 0; i < length; i++) {\n                args[i] = Array.get(array, i);\n            }\n            return args;\n        }\n    } else {\n        return array;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..0ffbfc499 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -117,37 +117,49 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n         return invocation.getLocation();\n     }\n \n-    public void captureArgumentsFrom(Invocation invocation) {\n-        if (invocation.getMethod().isVarArgs()) {\n-            int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+public void captureArgumentsFrom(Invocation invocation) {\n+    for (int position = 0; position < matchers.size(); position++) {\n+        Matcher m = matchers.get(position);\n+        if (m instanceof CapturesArguments) {\n+            Object argument = getArgument(invocation, position);\n+            ((CapturesArguments) m).captureFrom(argument);\n+        }\n+    }\n+}\n+\n+private Object getArgument(Invocation invocation, int position) {\n+    if (position >= invocation.getRawArguments().length) {\n+        return null;\n+    } else if (isVarArgParameter(invocation, position)) {\n+        return getVarArgs(invocation, position);\n+    } else {\n+        return invocation.getRawArguments()[position];\n+    }\n+}\n \n+private boolean isVarArgParameter(Invocation invocation, int position) {\n+    return invocation.getMethod().isVarArgs() && (position == invocation.getRawArguments().length - 1);\n+}\n+\n+private Object getVarArgs(Invocation invocation, int position) {\n+    Object array = invocation.getRawArguments()[position];\n+    if (array.getClass().isArray()) {\n+        int length = Array.getLength(array);\n+        if (length == 0) {\n+            return null;\n+        } else if (length == 1) {\n+            return Array.get(array, 0);\n         } else {\n-            for (int position = 0; position < matchers.size(); position++) {\n-                Matcher m = matchers.get(position);\n-                if (m instanceof CapturesArguments) {\n-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n-                }\n+            Object[] args = new Object[length];\n+            for (int i = 0; i < length; i++) {\n+                args[i] = Array.get(array, i);\n             }\n+            return args;\n         }\n-\n-//        for (int position = 0; position < matchers.size(); position++) {\n-//            Matcher m = matchers.get(position);\n-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n-//                //TODO SF - this whole lot can be moved captureFrom implementation\n-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n-//                    Object array = invocation.getRawArguments()[position];\n-//                    for (int i = 0; i < Array.getLength(array); i++) {\n-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n-//                    }\n-//                    //since we've captured all varargs already, it does not make sense to process other matchers.\n-//                    return;\n-//                } else {\n-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n-//                }\n-//            }\n-//        }\n+    } else {\n+        return array;\n     }\n+}\n \n     private boolean isVarargMatcher(Matcher matcher) {\n         Matcher actualMatcher = matcher;",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}