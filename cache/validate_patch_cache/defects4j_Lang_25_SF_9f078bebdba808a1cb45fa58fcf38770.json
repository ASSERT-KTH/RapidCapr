{
    "patch": "public String unescape(String original) {\n    StringBuilder result = new StringBuilder();\n    int i = 0;\n    while (i < original.length()) {\n        char c = original.charAt(i++);\n        if (c == '\\\\' && i < original.length()) {\n            c = original.charAt(i++);\n            switch (c) {\n                case '\\\\':\n                    result.append('\\\\');\n                    break;\n                case 'r':\n                    result.append('\\r');\n                    break;\n                case 'n':\n                    result.append('\\n');\n                    break;\n                case 't':\n                    result.append('\\t');\n                    break;\n                case '\\\"':\n                    result.append('\\\"');\n                    break;\n                case '\\'':\n                    result.append('\\'');\n                    break;\n                case 'b':\n                    result.append('\\b');\n                    break;\n                case 'f':\n                    result.append('\\f');\n                    break;\n                case 'u':\n                    if (i + 4 <= original.length()) {\n                        String unicode = original.substring(i, i + 4);\n                        try {\n                            char letter = (char) Integer.parseInt(unicode, 16);\n                            result.append(letter);\n                            i += 4;\n                        } catch (NumberFormatException e) {\n                            result.append('?');\n                        }\n                    }\n                    break;\n                default:\n                    result.append('?');\n                    break;\n            }\n        } else {\n            result.append(c);\n        }\n    }\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..a8ddd586 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,60 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public String unescape(String original) {\n+    StringBuilder result = new StringBuilder();\n+    int i = 0;\n+    while (i < original.length()) {\n+        char c = original.charAt(i++);\n+        if (c == '\\\\' && i < original.length()) {\n+            c = original.charAt(i++);\n+            switch (c) {\n+                case '\\\\':\n+                    result.append('\\\\');\n+                    break;\n+                case 'r':\n+                    result.append('\\r');\n+                    break;\n+                case 'n':\n+                    result.append('\\n');\n+                    break;\n+                case 't':\n+                    result.append('\\t');\n+                    break;\n+                case '\\\"':\n+                    result.append('\\\"');\n+                    break;\n+                case '\\'':\n+                    result.append('\\'');\n+                    break;\n+                case 'b':\n+                    result.append('\\b');\n+                    break;\n+                case 'f':\n+                    result.append('\\f');\n+                    break;\n+                case 'u':\n+                    if (i + 4 <= original.length()) {\n+                        String unicode = original.substring(i, i + 4);\n+                        try {\n+                            char letter = (char) Integer.parseInt(unicode, 16);\n+                            result.append(letter);\n+                            i += 4;\n+                        } catch (NumberFormatException e) {\n+                            result.append('?');\n+                        }\n+                    }\n+                    break;\n+                default:\n+                    result.append('?');\n+                    break;\n+            }\n+        } else {\n+            result.append(c);\n+        }\n+    }\n+    return result.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}