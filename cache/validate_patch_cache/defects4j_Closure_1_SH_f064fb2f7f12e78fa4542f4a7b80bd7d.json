{
    "patch": "Node function = fnScope.getRootNode();\nPreconditions.checkState(function.isFunction());\n\n// For setter methods in object literals, don't remove parameters.\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n  return;\n}\n\nNode argList = getFunctionArgList(function);\nboolean modifyCallers = modifyCallSites\n    && callSiteOptimizer.canModifyCallers(function);\nif (!modifyCallers) {\n  // Strip unreferenced args off the end of the function declaration.\n  Var[] params = getParameters(fnScope);\n  for (int i = params.length - 1; i >= 0; i--) {\n    Var param = params[i];\n    if (!referenced.contains(param)) {\n      Node name = NodeUtil.newName(compiler, param.getName());\n      argList.replaceChild(argList.getNthChild(i), name);\n      compiler.reportCodeChange();\n    }\n  }\n} else {\n  callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..7696d213 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,31 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+Preconditions.checkState(function.isFunction());\n+\n+// For setter methods in object literals, don't remove parameters.\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+  return;\n+}\n+\n+Node argList = getFunctionArgList(function);\n+boolean modifyCallers = modifyCallSites\n+    && callSiteOptimizer.canModifyCallers(function);\n+if (!modifyCallers) {\n+  // Strip unreferenced args off the end of the function declaration.\n+  Var[] params = getParameters(fnScope);\n+  for (int i = params.length - 1; i >= 0; i--) {\n+    Var param = params[i];\n+    if (!referenced.contains(param)) {\n+      Node name = NodeUtil.newName(compiler, param.getName());\n+      argList.replaceChild(argList.getNthChild(i), name);\n+      compiler.reportCodeChange();\n+    }\n+  }\n+} else {\n+  callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}