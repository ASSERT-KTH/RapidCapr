{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long totalMillis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    totalMillis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    totalMillis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    totalMillis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    totalMillis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    totalMillis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n    Period result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n\n    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n        long totalMonths = totalMillis / DateTimeConstants.MILLIS_PER_MONTH;\n        int years = (int) (totalMonths / 12);\n        int months = (int) (totalMonths % 12);\n\n        if (type.isSupported(DurationFieldType.years())) {\n            result = result.withYears(years);\n        }\n        if (type.isSupported(DurationFieldType.months())) {\n            result = result.withMonths(months);\n        }\n\n        // If both years and months are supported, and the period contains weeks or days,\n        // adjust the result accordingly to ensure the field values remain consistent.\n        if (type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {\n            long remainingMillis = totalMillis % DateTimeConstants.MILLIS_PER_MONTH;\n            int remainingDays = (int) (remainingMillis / DateTimeConstants.MILLIS_PER_DAY);\n            int remainingWeeks = remainingDays / 7;\n            int remainingDaysOfWeek = remainingDays % 7;\n            if (remainingWeeks > 0) {\n                result = result.withWeeks(0);  // clear out any weeks field\n                result = result.plusWeeks(remainingWeeks);\n            }\n            if (remainingDaysOfWeek > 0) {\n                result = result.withDays(0);  // clear out any days field\n                result = result.plusDays(remainingDaysOfWeek);\n            }\n        }\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..ab6b32d7 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,48 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long totalMillis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+    totalMillis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    totalMillis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    totalMillis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    totalMillis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    totalMillis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+\n+    Period result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n+\n+    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n+        long totalMonths = totalMillis / DateTimeConstants.MILLIS_PER_MONTH;\n+        int years = (int) (totalMonths / 12);\n+        int months = (int) (totalMonths % 12);\n+\n+        if (type.isSupported(DurationFieldType.years())) {\n+            result = result.withYears(years);\n+        }\n+        if (type.isSupported(DurationFieldType.months())) {\n+            result = result.withMonths(months);\n+        }\n+\n+        // If both years and months are supported, and the period contains weeks or days,\n+        // adjust the result accordingly to ensure the field values remain consistent.\n+        if (type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {\n+            long remainingMillis = totalMillis % DateTimeConstants.MILLIS_PER_MONTH;\n+            int remainingDays = (int) (remainingMillis / DateTimeConstants.MILLIS_PER_DAY);\n+            int remainingWeeks = remainingDays / 7;\n+            int remainingDaysOfWeek = remainingDays % 7;\n+            if (remainingWeeks > 0) {\n+                result = result.withWeeks(0);  // clear out any weeks field\n+                result = result.plusWeeks(remainingWeeks);\n             }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n+            if (remainingDaysOfWeek > 0) {\n+                result = result.withDays(0);  // clear out any days field\n+                result = result.plusDays(remainingDaysOfWeek);\n             }\n         }\n-        return result;\n     }\n \n+    return result;\n+}\n+\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}