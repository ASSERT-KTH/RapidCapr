{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.hasProperty(prop)) {\n            JSType typeToInfer = propType;\n            if (typeToInfer.isUnknownType()) {\n              typeToInfer = getNativeType(VOID_TYPE);\n            } else if (typeToInfer.isNullType()) {\n              typeToInfer = getNativeType(NULL_TYPE);\n            } else if (!typeToInfer.isNumberValueType()\n                && !typeToInfer.isStringValueType()\n                && !typeToInfer.isBooleanValueType()) {\n              typeToInfer = getNativeType(OBJECT_TYPE);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..451848ae 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1123,17 +1123,23 @@ class TypeInference\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n+          if (!objType.hasProperty(prop)) {\n             JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+            if (typeToInfer.isUnknownType()) {\n+              typeToInfer = getNativeType(VOID_TYPE);\n+            } else if (typeToInfer.isNullType()) {\n+              typeToInfer = getNativeType(NULL_TYPE);\n+            } else if (!typeToInfer.isNumberValueType()\n+                && !typeToInfer.isStringValueType()\n+                && !typeToInfer.isBooleanValueType()) {\n+              typeToInfer = getNativeType(OBJECT_TYPE);\n             }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}