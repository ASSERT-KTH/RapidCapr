{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    double eps = 10e-15;\n    int maxIterations = 1000;\n\n    double p;\n    double sum = 0;\n    double term = 1;\n    for (int k = 0; k < maxIterations && Math.abs(term) > eps; k++) {\n        term *= x / (a + k);\n        sum += term;\n    }\n    p = Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n\n    return p;\n}\n\npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1) + 24.01409822 / (x + 2) - 1.231739516 / (x + 3) + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..22a6ed3a0 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,27 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    double eps = 10e-15;\n+    int maxIterations = 1000;\n+\n+    double p;\n+    double sum = 0;\n+    double term = 1;\n+    for (int k = 0; k < maxIterations && Math.abs(term) > eps; k++) {\n+        term *= x / (a + k);\n+        sum += term;\n+    }\n+    p = Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+\n+    return p;\n+}\n+\n+public static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1) + 24.01409822 / (x + 2) - 1.231739516 / (x + 3) + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}