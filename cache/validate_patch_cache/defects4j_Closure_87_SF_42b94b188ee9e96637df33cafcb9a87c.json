{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n\n        if (maybeExpr.getType() == Token.EXPR_RESULT\n            && maybeExpr.hasOneChild()\n            && NodeUtil.isGet(maybeExpr.getFirstChild())) {\n          Node expr = maybeExpr.getFirstChild();\n\n          Node obj = expr.getFirstChild();\n          if (obj.getType() == Token.GETPROPS && obj.hasOneChild()) {\n            obj = obj.getFirstChild();\n          }\n          String objName = null;\n          if (obj.getType() == Token.NAME) {\n            objName = obj.getString();\n          } else if (obj.getType() == Token.THIS) {\n            objName = \"this\";\n          }\n\n          if (objName != null) {\n            Node fnNode = NodeUtil.getEnclosingFunction(expr);\n            if (fnNode != null) {\n              CodingConvention convention = getCodeChangeInfo().getCodingConvention();\n              return objName.equals(convention.getFunctionName(fnNode));\n            }\n          }\n        } else {\n          return NodeUtil.isExpressionNode(maybeExpr);\n        }\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..8f2e3346 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -520,20 +520,35 @@ public class PeepholeSubstituteAlternateSyntax\n     if (n.getType() == Token.BLOCK) {\n       if (n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n \n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n+        if (maybeExpr.getType() == Token.EXPR_RESULT\n+            && maybeExpr.hasOneChild()\n+            && NodeUtil.isGet(maybeExpr.getFirstChild())) {\n+          Node expr = maybeExpr.getFirstChild();\n \n+          Node obj = expr.getFirstChild();\n+          if (obj.getType() == Token.GETPROPS && obj.hasOneChild()) {\n+            obj = obj.getFirstChild();\n+          }\n+          String objName = null;\n+          if (obj.getType() == Token.NAME) {\n+            objName = obj.getString();\n+          } else if (obj.getType() == Token.THIS) {\n+            objName = \"this\";\n+          }\n+\n+          if (objName != null) {\n+            Node fnNode = NodeUtil.getEnclosingFunction(expr);\n+            if (fnNode != null) {\n+              CodingConvention convention = getCodeChangeInfo().getCodingConvention();\n+              return objName.equals(convention.getFunctionName(fnNode));\n+            }\n+          }\n+        } else {\n           return NodeUtil.isExpressionNode(maybeExpr);\n+        }\n       }\n     }\n-\n     return false;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}