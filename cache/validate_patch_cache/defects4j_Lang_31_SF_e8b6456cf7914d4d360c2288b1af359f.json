{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int strSize = str.length();\n    int searchSize = searchChars.length;\n    int strIndexLast = strSize - 1;\n    int searchIndexLast = searchSize - 1;\n    for (int i = 0; i < strSize; i++) {\n        char ch = str.charAt(i);\n        if (isHighSurrogate(ch)) {\n            if (i < strIndexLast && isLowSurrogate(str.charAt(i + 1))) {\n                // Supplementary character\n                ch = toSupplementary(ch, str.charAt(++i));\n            }\n        }\n        if (ArrayUtils.contains(searchChars, ch)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nprivate static boolean isHighSurrogate(char ch) {\n    return ch >= '\\uD800' && ch <= '\\uDBFF';\n}\n\nprivate static boolean isLowSurrogate(char ch) {\n    return ch >= '\\uDC00' && ch <= '\\uDFFF';\n}\n\nprivate static char toSupplementary(char hi, char lo) {\n    return (char) (((hi - '\\uD800') << 10) + (lo - '\\uDC00') + 0x010000);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..5d712990 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,40 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    int strSize = str.length();\n+    int searchSize = searchChars.length;\n+    int strIndexLast = strSize - 1;\n+    int searchIndexLast = searchSize - 1;\n+    for (int i = 0; i < strSize; i++) {\n+        char ch = str.charAt(i);\n+        if (isHighSurrogate(ch)) {\n+            if (i < strIndexLast && isLowSurrogate(str.charAt(i + 1))) {\n+                // Supplementary character\n+                ch = toSupplementary(ch, str.charAt(++i));\n+            }\n+        }\n+        if (ArrayUtils.contains(searchChars, ch)) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean isHighSurrogate(char ch) {\n+    return ch >= '\\uD800' && ch <= '\\uDBFF';\n+}\n+\n+private static boolean isLowSurrogate(char ch) {\n+    return ch >= '\\uDC00' && ch <= '\\uDFFF';\n+}\n+\n+private static char toSupplementary(char hi, char lo) {\n+    return (char) (((hi - '\\uD800') << 10) + (lo - '\\uDC00') + 0x010000);\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}