{
    "patch": "  public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() || n.isComma()) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (n.isExprResult()) {\n      return;\n    } else if (n.isImport()) {\n      // import statements cannot be replaced with undefined because imports\n      // are always accessed as properties.\n      return;\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (parent.getType() == Token.COMMA) {\n      if (isResultUsed) {\n        return;\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA)\n            continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n            return;\n          else\n            break;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (!(parent.getType() == Token.FOR &&\n            parent.getChildCount() == 4 &&\n            (n == parent.getFirstChild() ||\n             n == parent.getFirstChild().getNext().getNext()))) {\n        return;\n      }\n    }\n    if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n      JSError error = null;\n      if (n.isString()) {\n        error = t.makeError(n, level, MISSING_ADD_MESSAGE);\n      } else if (isSimpleOp) {\n        error = t.makeError(n, level, UNUSED_OPERATOR_MESSAGE, Token.name(n.getType()).toLowerCase());\n      } else {\n        error = t.makeError(n, level, USELESS_CODE_ERROR);\n      }\n\n      t.getCompiler().report(error);\n      // TODO(johnlenz): determine if it is necessary to\n      // try to protect side-effect free statements as well.\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..ee4ddb7d 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -86,8 +86,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n     // I've been unable to think of any cases where this indicates a bug,\n     // and apparently some people like keeping these semicolons around,\n     // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n+    if (n.isEmpty() || n.isComma()) {\n       return;\n     }\n \n@@ -100,6 +99,10 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n     // fix up the tree in more clever ways when these are removed.\n     if (n.isExprResult()) {\n       return;\n+    } else if (n.isImport()) {\n+      // import statements cannot be replaced with undefined because imports\n+      // are always accessed as properties.\n+      return;\n     }\n \n     // This no-op statement was there so that JSDoc information could\n@@ -117,28 +120,33 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n       if (n == parent.getLastChild()) {\n         for (Node an : parent.getAncestors()) {\n           int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n+          if (ancestorType == Token.COMMA)\n+            continue;\n+          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n+            return;\n+          else\n+            break;\n         }\n       }\n     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+      if (!(parent.getType() == Token.FOR &&\n+            parent.getChildCount() == 4 &&\n+            (n == parent.getFirstChild() ||\n+             n == parent.getFirstChild().getNext().getNext()))) {\n         return;\n       }\n     }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n+    if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n+      JSError error = null;\n       if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n+        error = t.makeError(n, level, MISSING_ADD_MESSAGE);\n       } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n+        error = t.makeError(n, level, UNUSED_OPERATOR_MESSAGE, Token.name(n.getType()).toLowerCase());\n+      } else {\n+        error = t.makeError(n, level, USELESS_CODE_ERROR);\n       }\n \n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n+      t.getCompiler().report(error);\n       // TODO(johnlenz): determine if it is necessary to\n       // try to protect side-effect free statements as well.\n       if (!NodeUtil.isStatement(n)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}