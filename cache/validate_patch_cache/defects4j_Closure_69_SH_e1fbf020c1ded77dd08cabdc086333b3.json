{
    "patch": "  } else if (functionType.getTypeOfThis() != null &&\n                 n.getParent().isGetProp() &&\n                 n.getParent().getFirstChild() == n) {\n      qualifiedName = n.getParent().getFirstChild().getQualifiedName();\n      if (!qualifiedName.equals(\"prototype\")) {\n        // Leave a generic warning to the effect that the 'this' type\n        // is not applied if this is not part of a left-hand side expression.\n        // (as opposed to a[1](2) or a.b(3), which don't apply a function-type to the 'this').\n        report(t, n.getParent(),\n               UNSAFE_THIS,\n               qualifiedName,\n               functionType.getDisplayName());\n      }\n    }\n\n    visitParameterList(t, n, functionType);\n    ensureTyped(t, n, functionType.getReturnType());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..2f44e7e4 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+  } else if (functionType.getTypeOfThis() != null &&\n+                 n.getParent().isGetProp() &&\n+                 n.getParent().getFirstChild() == n) {\n+      qualifiedName = n.getParent().getFirstChild().getQualifiedName();\n+      if (!qualifiedName.equals(\"prototype\")) {\n+        // Leave a generic warning to the effect that the 'this' type\n+        // is not applied if this is not part of a left-hand side expression.\n+        // (as opposed to a[1](2) or a.b(3), which don't apply a function-type to the 'this').\n+        report(t, n.getParent(),\n+               UNSAFE_THIS,\n+               qualifiedName,\n+               functionType.getDisplayName());\n+      }\n+    }\n+\n+    visitParameterList(t, n, functionType);\n+    ensureTyped(t, n, functionType.getReturnType());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}