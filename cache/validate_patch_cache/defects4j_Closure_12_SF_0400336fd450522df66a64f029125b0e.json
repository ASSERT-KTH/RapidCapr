{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n  if (cfgNode == null) {\n    return false;\n  }\n  if (cfgNode.isTry()) {\n    return true;\n  }\n  if (cfgNode.isFunction() && cfgNode.getFirstChild().isParamList()) {\n    return hasExceptionHandler(cfgNode.getLastChild());\n  }\n  if (cfgNode.isBlock()) {\n    for (Node child = cfgNode.getFirstChild(); child != null; child = child.getNext()) {\n      if (hasExceptionHandler(child)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..272cec23 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -156,9 +156,25 @@ class MaybeReachingVariableUse extends\n     return output;\n   }\n \n-  private boolean hasExceptionHandler(Node cfgNode) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+  if (cfgNode == null) {\n     return false;\n   }\n+  if (cfgNode.isTry()) {\n+    return true;\n+  }\n+  if (cfgNode.isFunction() && cfgNode.getFirstChild().isParamList()) {\n+    return hasExceptionHandler(cfgNode.getLastChild());\n+  }\n+  if (cfgNode.isBlock()) {\n+    for (Node child = cfgNode.getFirstChild(); child != null; child = child.getNext()) {\n+      if (hasExceptionHandler(child)) {\n+        return true;\n+      }\n+    }\n+  }\n+  return false;\n+}\n \n   private void computeMayUse(\n       Node n, Node cfgNode, ReachingUses output, boolean conditional) {",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}