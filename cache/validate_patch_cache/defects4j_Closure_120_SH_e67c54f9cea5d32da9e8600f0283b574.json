{
    "patch": "        if (block.isFunction) {\n          break;\n        } else if (block.isLoop) {\n          // Make sure this assignment is not nested in another loop.\n          for (BasicBlock loopBlock = block.getOuterMostLoop();\n               loopBlock != null && loopBlock.isLoop;\n               loopBlock = loopBlock.getOuterMostLoop()) {\n            Node lastNodeInLoop = loopBlock.getLastNode();\n            if (lastNodeInLoop != null && lastNodeInLoop.isAssign()\n                && lastNodeInLoop.getFirstChild().matchesQualifiedName(refNode.getQualifiedName())) {\n              return false;\n            }\n          }\n          return true;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..668a8172 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,21 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoop) {\n+          // Make sure this assignment is not nested in another loop.\n+          for (BasicBlock loopBlock = block.getOuterMostLoop();\n+               loopBlock != null && loopBlock.isLoop;\n+               loopBlock = loopBlock.getOuterMostLoop()) {\n+            Node lastNodeInLoop = loopBlock.getLastNode();\n+            if (lastNodeInLoop != null && lastNodeInLoop.isAssign()\n+                && lastNodeInLoop.getFirstChild().matchesQualifiedName(refNode.getQualifiedName())) {\n+              return false;\n+            }\n+          }\n+          return true;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}