{
    "patch": "        MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n        MockSettingsImpl settings = (MockSettingsImpl) org.mockito.Mockito.withSettings();\n        settings.defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS);\n        settings.spiedInstance(mock);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, settings);\n        try {\n            ((Factory) mock).setCallback(0, newFilter);\n        } catch (IllegalArgumentException e) {\n            Field privateField = Mock.class.getDeclaredField(\"settings\");\n            privateField.setAccessible(true);\n            MockSettingsImpl f = (MockSettingsImpl) privateField.get(mock);\n            if (f != null) {\n                privateField.set(mock, f.spiedInstance(mock));\n            }\n            ((Factory) mock).setCallback(0, newFilter);\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..2ad313533 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,25 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n+        MockSettingsImpl settings = (MockSettingsImpl) org.mockito.Mockito.withSettings();\n+        settings.defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS);\n+        settings.spiedInstance(mock);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, settings);\n+        try {\n+            ((Factory) mock).setCallback(0, newFilter);\n+        } catch (IllegalArgumentException e) {\n+            Field privateField = Mock.class.getDeclaredField(\"settings\");\n+            privateField.setAccessible(true);\n+            MockSettingsImpl f = (MockSettingsImpl) privateField.get(mock);\n+            if (f != null) {\n+                privateField.set(mock, f.spiedInstance(mock));\n+            }\n+            ((Factory) mock).setCallback(0, newFilter);\n+        }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}