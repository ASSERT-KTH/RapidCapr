{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    if (regex == null) {\n        regex = new StringBuilder();\n    }\n    regex.insert(0, '^'); // add start of line anchor\n    regex.append('$'); // add end of line anchor\n    int i = 0;\n    while (i < value.length()) {\n        char c = value.charAt(i);\n        if (Character.isWhitespace(c)) {\n            i = appendWhitespaceRegex(regex, value, i);\n        } else {\n            switch (c) {\n                case '\\'':\n                    if (unquote) {\n                        ++i;\n                        if (i == value.length()) {\n                            return regex;\n                        }\n                    }\n                    break;\n                case '?':\n                case '[':\n                case ']':\n                case '(':\n                case ')':\n                case '{':\n                case '}':\n                case '\\\\':\n                case '|':\n                case '*':\n                case '+':\n                case '.':\n                    regex.append('\\\\');\n                    break;\n                case '^':\n                case '$':\n                    if (i == 0 || i == value.length() - 1) {\n                        regex.append('\\\\');\n                    }\n                    break;\n            }\n            regex.append(c);\n            ++i;\n        }\n    }\n    return regex;\n}\n\nprivate static int appendWhitespaceRegex(StringBuilder regex, String value, int i) {\n    regex.append('[');\n    int j = i++;\n    regex.append(value.charAt(j));\n    while (i < value.length() && Character.isWhitespace(value.charAt(i))) {\n        ++i;\n    }\n    if (i > j + 1) {\n        regex.append('-');\n        regex.append(value.charAt(i - 1));\n    }\n    regex.append(']');\n    return i;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..9c3b145e 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,69 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    if (regex == null) {\n+        regex = new StringBuilder();\n+    }\n+    regex.insert(0, '^'); // add start of line anchor\n+    regex.append('$'); // add end of line anchor\n+    int i = 0;\n+    while (i < value.length()) {\n+        char c = value.charAt(i);\n+        if (Character.isWhitespace(c)) {\n+            i = appendWhitespaceRegex(regex, value, i);\n+        } else {\n+            switch (c) {\n+                case '\\'':\n+                    if (unquote) {\n+                        ++i;\n+                        if (i == value.length()) {\n+                            return regex;\n+                        }\n                     }\n-                    c= value.charAt(i);\n-                }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n+                    break;\n+                case '?':\n+                case '[':\n+                case ']':\n+                case '(':\n+                case ')':\n+                case '{':\n+                case '}':\n+                case '\\\\':\n+                case '|':\n+                case '*':\n+                case '+':\n+                case '.':\n+                    regex.append('\\\\');\n+                    break;\n+                case '^':\n+                case '$':\n+                    if (i == 0 || i == value.length() - 1) {\n+                        regex.append('\\\\');\n+                    }\n+                    break;\n             }\n             regex.append(c);\n+            ++i;\n         }\n-        return regex;\n     }\n+    return regex;\n+}\n+\n+private static int appendWhitespaceRegex(StringBuilder regex, String value, int i) {\n+    regex.append('[');\n+    int j = i++;\n+    regex.append(value.charAt(j));\n+    while (i < value.length() && Character.isWhitespace(value.charAt(i))) {\n+        ++i;\n+    }\n+    if (i > j + 1) {\n+        regex.append('-');\n+        regex.append(value.charAt(i - 1));\n+    }\n+    regex.append(']');\n+    return i;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}