{
    "patch": "if (start >= data.size()) {\n    copy.minY = Double.NaN;\n    copy.maxY = Double.NaN;\n    return copy;\n}\ncopy.data = new ArrayList<>();\ncopy.minY = Double.POSITIVE_INFINITY;\ncopy.maxY = Double.NEGATIVE_INFINITY;\nfor (int i = start; i <= end && i < data.size(); i++) {\n    TimeSeriesDataItem item = (TimeSeriesDataItem) data.get(i);\n    TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n    try {\n        copy.add(clone);\n        double y = clone.getValue().doubleValue();\n        if (!Double.isNaN(y)) {\n            copy.minY = Math.min(copy.minY, y);\n            copy.maxY = Math.max(copy.maxY, y);\n        }\n    } catch (SeriesException e) {\n        e.printStackTrace();\n    }\n}\nif (copy.getItemCount() == 0) {\n    copy.minY = Double.NaN;\n    copy.maxY = Double.NaN;\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..09effec 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,6 +1054,32 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n+if (start >= data.size()) {\n+    copy.minY = Double.NaN;\n+    copy.maxY = Double.NaN;\n+    return copy;\n+}\n+copy.data = new ArrayList<>();\n+copy.minY = Double.POSITIVE_INFINITY;\n+copy.maxY = Double.NEGATIVE_INFINITY;\n+for (int i = start; i <= end && i < data.size(); i++) {\n+    TimeSeriesDataItem item = (TimeSeriesDataItem) data.get(i);\n+    TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+    try {\n+        copy.add(clone);\n+        double y = clone.getValue().doubleValue();\n+        if (!Double.isNaN(y)) {\n+            copy.minY = Math.min(copy.minY, y);\n+            copy.maxY = Math.max(copy.maxY, y);\n+        }\n+    } catch (SeriesException e) {\n+        e.printStackTrace();\n+    }\n+}\n+if (copy.getItemCount() == 0) {\n+    copy.minY = Double.NaN;\n+    copy.maxY = Double.NaN;\n+}\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {",
    "result_reason": "error: generics are not supported in -source 1.4",
    "test_result": "ERROR"
}