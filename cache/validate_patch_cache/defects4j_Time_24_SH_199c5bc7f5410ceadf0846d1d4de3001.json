{
    "patch": "        if (iSavedFieldsShared) {\n            // if the array is shared, create a clone to preserve state\n            iSavedFields = (SavedField[]) iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(iSavedFields, iSavedFieldsCount);\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < iSavedFieldsCount; i++) {\n                millis = iSavedFields[i].set(millis, resetFields);\n                if (millis == Long.MIN_VALUE || millis == Long.MAX_VALUE) {\n                    throw new IllegalArgumentException(\"The date is out of range\");",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..ee7441a6 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,18 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        if (iSavedFieldsShared) {\n+            // if the array is shared, create a clone to preserve state\n+            iSavedFields = (SavedField[]) iSavedFields.clone();\n+            iSavedFieldsShared = false;\n+        }\n+        sort(iSavedFields, iSavedFieldsCount);\n+        long millis = iMillis;\n+        try {\n+            for (int i = 0; i < iSavedFieldsCount; i++) {\n+                millis = iSavedFields[i].set(millis, resetFields);\n+                if (millis == Long.MIN_VALUE || millis == Long.MAX_VALUE) {\n+                    throw new IllegalArgumentException(\"The date is out of range\");\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}