{
    "patch": "public long adjustOffset(long instant, boolean earlierOrLater) {\n    long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;\n    long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;\n    // evaluate 3 hours before and after to work out if anything is happening\n    long localBefore = convertUTCToLocal(instantBefore);\n    long localAfter = convertUTCToLocal(instantAfter);\n\n    if (localBefore == localAfter) {\n        return instant;  // not an overlap (less than is a gap, equal is normal case)\n    }\n\n    long local = convertUTCToLocal(instant);\n    boolean isOverlap = local == localBefore || local == localAfter;\n    if (isOverlap) {\n        // if in overlap, prefer later if earlierOrLater==true else earlier\n        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n    }\n    // not in overlap, either further into DST or out of DST\n    return convertLocalToUTC(local, false, localBefore > localAfter ? instantBefore : instantAfter);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802a..bfc13399 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1160,24 +1160,26 @@ public abstract class DateTimeZone implements Serializable {\n      * @param earlierOrLater  false for earlier, true for later\n      * @return the adjusted instant millis\n      */\n-    public long adjustOffset(long instant, boolean earlierOrLater) {\n-        // a bit messy, but will work in all non-pathological cases\n-        \n-        // evaluate 3 hours before and after to work out if anything is happening\n-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        if (instantBefore == instantAfter) {\n-            return instant;  // not an overlap (less than is a gap, equal is normal case)\n-        }\n-        \n-        // work out range of instants that have duplicate local times\n-        long local = convertUTCToLocal(instant);\n+public long adjustOffset(long instant, boolean earlierOrLater) {\n+    long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;\n+    long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;\n+    // evaluate 3 hours before and after to work out if anything is happening\n+    long localBefore = convertUTCToLocal(instantBefore);\n+    long localAfter = convertUTCToLocal(instantAfter);\n+\n+    if (localBefore == localAfter) {\n+        return instant;  // not an overlap (less than is a gap, equal is normal case)\n+    }\n+\n+    long local = convertUTCToLocal(instant);\n+    boolean isOverlap = local == localBefore || local == localAfter;\n+    if (isOverlap) {\n+        // if in overlap, prefer later if earlierOrLater==true else earlier\n         return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n-        \n-        // calculate result\n-          // currently in later offset\n-          // currently in earlier offset\n     }\n+    // not in overlap, either further into DST or out of DST\n+    return convertLocalToUTC(local, false, localBefore > localAfter ? instantBefore : instantAfter);\n+}\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n \n     //-----------------------------------------------------------------------",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<2007-10-28T02:15:00.000+02:00> was not:<2007-10-28T02:15:00.000+01:00>",
    "test_result": "FAIL"
}