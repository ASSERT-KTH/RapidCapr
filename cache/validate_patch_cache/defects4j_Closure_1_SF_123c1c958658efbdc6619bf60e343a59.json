{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent()) || NodeUtil.isLhsOfAssign(function)) {\n      // The parameters object literal setters and default parameter values\n       // can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      Node currChild = argList.getFirstChild();\n      while (currChild != null) {\n        Node nextChild = currChild.getNext();\n        Var var = fnScope.getVar(currChild.getString());\n        if (!referenced.contains(var)) {\n          boolean removeArg = true;\n\n          // In the case of 'arguments' variable, only remove it when there's\n          // no local or free value referring to it, including array destructoring patterns.\n          if (var != null && \"arguments\".equals(var.getName())) {\n            Node parent = currChild.getParent();\n\n            // detect pattern such as: var [arg1, arg2 = defVal] = arguments;\n            if (NodeUtil.isArrayPattern(parent)) {\n              Node grandParent = parent.getParent();\n              if (NodeUtil.isDefaultValueForParam(grandParent)) {\n                if (!referenced.contains(fnScope.getVar(NodeUtil.getNameNode(grandParent.getLastChild()).getString()))) {\n                  removeArg = false;\n                }\n              } else if (!parent.hasChildren()) {\n                // detect pattern such as: var [] = arguments;\n                removeArg = !referenced.contains(var);\n              }\n            } else if (var.getParentNode().isParamList()) {\n              removeArg = !referenced.contains(var);\n            }\n          }\n          if (removeArg) {\n            argList.removeChild(currChild);\n            compiler.reportCodeChange();\n          }\n        }\n        currChild = nextChild;\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..cb599022 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -380,8 +380,9 @@ class RemoveUnusedVars\n     Node function = fnScope.getRootNode();\n \n     Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n+    if (NodeUtil.isGetOrSetKey(function.getParent()) || NodeUtil.isLhsOfAssign(function)) {\n+      // The parameters object literal setters and default parameter values\n+       // can not be removed.\n       return;\n     }\n \n@@ -389,16 +390,39 @@ class RemoveUnusedVars\n     boolean modifyCallers = modifyCallSites\n         && callSiteOptimizer.canModifyCallers(function);\n     if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n+      Node currChild = argList.getFirstChild();\n+      while (currChild != null) {\n+        Node nextChild = currChild.getNext();\n+        Var var = fnScope.getVar(currChild.getString());\n         if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+          boolean removeArg = true;\n+\n+          // In the case of 'arguments' variable, only remove it when there's\n+          // no local or free value referring to it, including array destructoring patterns.\n+          if (var != null && \"arguments\".equals(var.getName())) {\n+            Node parent = currChild.getParent();\n+\n+            // detect pattern such as: var [arg1, arg2 = defVal] = arguments;\n+            if (NodeUtil.isArrayPattern(parent)) {\n+              Node grandParent = parent.getParent();\n+              if (NodeUtil.isDefaultValueForParam(grandParent)) {\n+                if (!referenced.contains(fnScope.getVar(NodeUtil.getNameNode(grandParent.getLastChild()).getString()))) {\n+                  removeArg = false;\n+                }\n+              } else if (!parent.hasChildren()) {\n+                // detect pattern such as: var [] = arguments;\n+                removeArg = !referenced.contains(var);\n+              }\n+            } else if (var.getParentNode().isParamList()) {\n+              removeArg = !referenced.contains(var);\n+            }\n+          }\n+          if (removeArg) {\n+            argList.removeChild(currChild);\n+            compiler.reportCodeChange();\n+          }\n         }\n+        currChild = nextChild;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}