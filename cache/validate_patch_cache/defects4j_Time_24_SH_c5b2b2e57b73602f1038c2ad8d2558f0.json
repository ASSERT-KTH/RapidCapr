{
    "patch": "        for (int i = 0; i < count; i++) {\n            SavedField save = savedFields[i];\n            try {\n                long next = save.set(millis, resetFields);\n                if (next != millis) {\n                    // if (resetFields) {\n                    //   // reset, so the fields are internally consistent\n                    //   for (int j = 0; j <= i; j++) {\n                    //       savedFields[j].save();\n                    //   }\n                    // }\n                    millis = next;\n                }\n            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n                }\n                throw e;\n           }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..e93c8d23 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,26 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        for (int i = 0; i < count; i++) {\n+            SavedField save = savedFields[i];\n+            try {\n+                long next = save.set(millis, resetFields);\n+                if (next != millis) {\n+                    // if (resetFields) {\n+                    //   // reset, so the fields are internally consistent\n+                    //   for (int j = 0; j <= i; j++) {\n+                    //       savedFields[j].save();\n+                    //   }\n+                    // }\n+                    millis = next;\n+                }\n+            } catch (IllegalFieldValueException e) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n+                }\n+                throw e;\n+           }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>",
    "test_result": "FAIL"
}