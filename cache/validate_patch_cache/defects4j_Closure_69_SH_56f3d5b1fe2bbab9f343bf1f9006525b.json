{
    "patch": "ObjectType thisType = null;\nif (functionType.getTypeOfThis() != null && functionType.getTypeOfThis() instanceof ObjectType) {\n  thisType = (ObjectType) functionType.getTypeOfThis();\n}\nif (thisType != null) {\n  if (!n.isGetProp() && !n.isGetElem()) {\n    report(t, child, MUST_BE_GET_OR_SET, \"'this' before calling a function with @this\");\n  } else {\n    JSType getOrSetType =\n        getJSType(NodeUtil.getGetOrSetImplicitArgument(child)).restrictByNotNullOrUndefined();\n    if (getOrSetType != null && !getOrSetType.isSubtypeOf(thisType)) {\n      // Only warn if the actual type being provided for 'this' is a\n      // proper supertype of the declared type, since a subtype would be\n      // acceptable here.\n      if (JSType.compare(getOrSetType, thisType, compiler.getCommonTypes()) > 0) {\n        warnings.add(\n            JSError.make(\n                THIS_TYPE_MISMATCH,\n                t.getSourceName(),\n                t.getLineNumber(child),\n                t.getCharno(child)));\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..2760b9f9 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,31 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+ObjectType thisType = null;\n+if (functionType.getTypeOfThis() != null && functionType.getTypeOfThis() instanceof ObjectType) {\n+  thisType = (ObjectType) functionType.getTypeOfThis();\n+}\n+if (thisType != null) {\n+  if (!n.isGetProp() && !n.isGetElem()) {\n+    report(t, child, MUST_BE_GET_OR_SET, \"'this' before calling a function with @this\");\n+  } else {\n+    JSType getOrSetType =\n+        getJSType(NodeUtil.getGetOrSetImplicitArgument(child)).restrictByNotNullOrUndefined();\n+    if (getOrSetType != null && !getOrSetType.isSubtypeOf(thisType)) {\n+      // Only warn if the actual type being provided for 'this' is a\n+      // proper supertype of the declared type, since a subtype would be\n+      // acceptable here.\n+      if (JSType.compare(getOrSetType, thisType, compiler.getCommonTypes()) > 0) {\n+        warnings.add(\n+            JSError.make(\n+                THIS_TYPE_MISMATCH,\n+                t.getSourceName(),\n+                t.getLineNumber(child),\n+                t.getCharno(child)));\n+      }\n+    }\n+  }\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}