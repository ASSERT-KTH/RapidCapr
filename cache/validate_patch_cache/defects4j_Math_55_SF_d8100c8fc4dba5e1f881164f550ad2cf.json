{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    double epsilon = 1.0e-12;\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    double factor1 = v1.getNorm() / v1.getNorm1();\n    double factor2 = v2.getNorm() / v2.getNorm1();\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n   \n    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n    double rho = scalProd(v1, v2) / (v1.getNorm() * v2.getNorm());\n    rho = FastMath.rint(rho * (1 << 8)) / (1 << 8);\n  \n    // compute v3\n    Vector3D v3 = new Vector3D(1.0, v1, -rho, v2);\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    Vector3D crossProduct = new Vector3D(factor1 * (v3.getY() * v2.getZ() - v3.getZ() * v2.getY()),\n                                         factor1 * (v3.getZ() * v2.getX() - v3.getX() * v2.getZ()),\n                                         factor1 * (v3.getX() * v2.getY() - v3.getY() * v2.getX()));\n\n    // Normalize\n    double crossProdNorm = crossProduct.getNorm();\n    if((crossProdNorm > epsilon) && (crossProdNorm != Double.POSITIVE_INFINITY)){\n        return new Vector3D(1.0, crossProduct, factor2 / crossProdNorm);\n    }else{\n        return crossProduct;\n    }       \n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..58a0b8d3b 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,41 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+    double epsilon = 1.0e-12;\n+\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    double factor1 = v1.getNorm() / v1.getNorm1();\n+    double factor2 = v2.getNorm() / v2.getNorm1();\n+\n+    // we reduce cancellation errors by preconditioning,\n+    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+    // v3 without loss of precision. See Kahan lecture\n+    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+   \n+    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    double rho = scalProd(v1, v2) / (v1.getNorm() * v2.getNorm());\n+    rho = FastMath.rint(rho * (1 << 8)) / (1 << 8);\n+  \n+    // compute v3\n+    Vector3D v3 = new Vector3D(1.0, v1, -rho, v2);\n+\n+    // compute cross product from v3 and v2 instead of v1 and v2\n+    Vector3D crossProduct = new Vector3D(factor1 * (v3.getY() * v2.getZ() - v3.getZ() * v2.getY()),\n+                                         factor1 * (v3.getZ() * v2.getX() - v3.getX() * v2.getZ()),\n+                                         factor1 * (v3.getX() * v2.getY() - v3.getY() * v2.getX()));\n+\n+    // Normalize\n+    double crossProdNorm = crossProduct.getNorm();\n+    if((crossProdNorm > epsilon) && (crossProdNorm != Double.POSITIVE_INFINITY)){\n+        return new Vector3D(1.0, crossProduct, factor2 / crossProdNorm);\n+    }else{\n+        return crossProduct;\n+    }       \n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}