{
    "patch": "import org.apache.commons.math3.linear.CholeskyDecomposition;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealMatrixPreservingVisitor;\nimport org.apache.commons.math3.linear.RealMatrixUtils;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    CholeskyDecomposition dec = new CholeskyDecomposition(m);\n    RealMatrix l = dec.getL();\n    RealMatrix result = RealMatrixUtils.createRealMatrix(l.getRowDimension(), l.getColumnDimension());\n    l.walkInOptimizedOrder(new RealMatrixPreservingVisitor() {\n        @Override\n        public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {}\n        @Override\n        public void visit(int row, int column, double value) {\n            double sum = 0;\n            for (int k = 0; k < column; k++) {\n                sum += result.getEntry(row, k) * result.getEntry(column, k);\n            }\n            double entry;\n            if (row == column) {\n                entry = FastMath.sqrt(value - sum);\n            } else {\n                entry = (value - sum) / result.getEntry(column, column);\n            }\n            result.setEntry(row, column, entry);\n        }\n        @Override\n        public void end() {}\n    });\n    return result.multiply(result.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..2455f954f 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,35 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+import org.apache.commons.math3.linear.CholeskyDecomposition;\n+import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.linear.RealMatrixPreservingVisitor;\n+import org.apache.commons.math3.linear.RealMatrixUtils;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    CholeskyDecomposition dec = new CholeskyDecomposition(m);\n+    RealMatrix l = dec.getL();\n+    RealMatrix result = RealMatrixUtils.createRealMatrix(l.getRowDimension(), l.getColumnDimension());\n+    l.walkInOptimizedOrder(new RealMatrixPreservingVisitor() {\n+        @Override\n+        public void start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn) {}\n+        @Override\n+        public void visit(int row, int column, double value) {\n+            double sum = 0;\n+            for (int k = 0; k < column; k++) {\n+                sum += result.getEntry(row, k) * result.getEntry(column, k);\n+            }\n+            double entry;\n+            if (row == column) {\n+                entry = FastMath.sqrt(value - sum);\n+            } else {\n+                entry = (value - sum) / result.getEntry(column, column);\n+            }\n+            result.setEntry(row, column, entry);\n+        }\n+        @Override\n+        public void end() {}\n+    });\n+    return result.multiply(result.transpose());\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}