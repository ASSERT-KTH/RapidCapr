{
    "patch": "public static <T> Response<T> createResponse(T value) {\n    return new Response<T>() {\n        @Override\n        public T getValue() {\n            return value;\n        }\n        @Override\n        public <U> U returnValueFor(Class<U> clazz) {\n            if (clazz.isInstance(value)) {\n                return clazz.cast(value);\n            }\n            return null;\n        }\n    };\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..8aa0e0f6f 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,21 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static <T> Response<T> createResponse(T value) {\n+    return new Response<T>() {\n+        @Override\n+        public T getValue() {\n+            return value;\n+        }\n+        @Override\n+        public <U> U returnValueFor(Class<U> clazz) {\n+            if (clazz.isInstance(value)) {\n+                return clazz.cast(value);\n+            }\n+            return null;\n+        }\n+    };\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}