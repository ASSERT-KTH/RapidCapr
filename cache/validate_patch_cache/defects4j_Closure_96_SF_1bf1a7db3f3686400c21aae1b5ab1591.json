{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node parameter = null;\n  Node argument = null;\n\n  while (arguments.hasNext() && parameters.hasNext()) {\n    argument = arguments.next();\n    parameter = parameters.next();\n    ordinal++;\n    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n        getJSType(parameter), call, ordinal);\n  }\n\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n\n  String errorMsg = null;\n  if (numArgs < minArgs) {\n    if (minArgs == maxArgs) {\n      errorMsg = String.format(\"requires exactly %d argument(s)\", minArgs);\n    } else {\n      errorMsg = String.format(\"requires at least %d argument(s)\", minArgs);\n    }\n  } else if (numArgs > maxArgs) {\n    errorMsg = String.format(\"requires no more than %d argument(s)\", maxArgs);\n  }\n\n  if (errorMsg != null) {\n    report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs), errorMsg, \"\");\n  } else if (numArgs > 0 && !parameters.hasNext() && functionType.hasRestFormals()) {\n    Node lastParamType = functionType.getRestFormalsType();\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      ordinal++;\n      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(lastParamType),\n          call, ordinal);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..952b29f3 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,51 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  int ordinal = 0;\n+  Node parameter = null;\n+  Node argument = null;\n+\n+  while (arguments.hasNext() && parameters.hasNext()) {\n+    argument = arguments.next();\n+    parameter = parameters.next();\n+    ordinal++;\n+    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+        getJSType(parameter), call, ordinal);\n+  }\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+  int numArgs = call.getChildCount() - 1;\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+\n+  String errorMsg = null;\n+  if (numArgs < minArgs) {\n+    if (minArgs == maxArgs) {\n+      errorMsg = String.format(\"requires exactly %d argument(s)\", minArgs);\n+    } else {\n+      errorMsg = String.format(\"requires at least %d argument(s)\", minArgs);\n     }\n+  } else if (numArgs > maxArgs) {\n+    errorMsg = String.format(\"requires no more than %d argument(s)\", maxArgs);\n+  }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+  if (errorMsg != null) {\n+    report(t, call, WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(numArgs), errorMsg, \"\");\n+  } else if (numArgs > 0 && !parameters.hasNext() && functionType.hasRestFormals()) {\n+    Node lastParamType = functionType.getRestFormalsType();\n+    while (arguments.hasNext()) {\n+      argument = arguments.next();\n+      ordinal++;\n+      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(lastParamType),\n+          call, ordinal);\n     }\n   }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}