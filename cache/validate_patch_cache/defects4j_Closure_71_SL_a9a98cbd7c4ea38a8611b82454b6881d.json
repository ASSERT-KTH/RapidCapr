{
    "patch": "      boolean isOverride = false;\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node left = parent.getFirstChild();\n        isOverride = left != null &&\n            left.getType() == getprop.getType() &&\n            left.getLastChild().getString().equals(propertyName);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..353e3d9e 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,13 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      boolean isOverride = false;\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node left = parent.getFirstChild();\n+        isOverride = left != null &&\n+            left.getType() == getprop.getType() &&\n+            left.getLastChild().getString().equals(propertyName);\n+      }\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}