{
    "patch": "public static <T> TypeTestResult<T> testAndReturnValue(Object obj, Class<T> clazz) {\n    if (obj == null) {\n        return new TypeTestResult<>(false, null);\n    }\n    try {\n        T result = clazz.cast(obj);\n        return new TypeTestResult<>(true, result);\n    } catch (ClassCastException e) {\n        return new TypeTestResult<>(false, null);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..02eb6abe4 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,17 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static <T> TypeTestResult<T> testAndReturnValue(Object obj, Class<T> clazz) {\n+    if (obj == null) {\n+        return new TypeTestResult<>(false, null);\n+    }\n+    try {\n+        T result = clazz.cast(obj);\n+        return new TypeTestResult<>(true, result);\n+    } catch (ClassCastException e) {\n+        return new TypeTestResult<>(false, null);\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}