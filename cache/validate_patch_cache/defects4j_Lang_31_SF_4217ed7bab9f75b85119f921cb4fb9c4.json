{
    "patch": "public class StringUtils {\n  \n    public static boolean containsAny(final String sequence, final char[] searchChars) {\n        if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        final int seqLength = sequence.length();\n        final int searchLength = searchChars.length;\n        final int minSearchLength = 2;\n        if (searchLength == 1) {\n            return contains(sequence, searchChars[0]);\n        }\n        if (searchLength < minSearchLength) {\n            for (int i = 0; i < seqLength; i++) {\n                final char ch = sequence.charAt(i);\n                for (int j = 0; j < searchLength; j++) {\n                    if (searchChars[j] == ch) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        final Set<Character> chars = CharUtils.toSet(searchChars);\n        int i = 0;\n        int j = 0;\n        while (i < seqLength && j < searchLength) {\n            final int codePoint = Character.codePointAt(sequence, i);\n            if (chars.contains(Character.valueOf((char)codePoint))) {\n                return true;\n            }\n            i += Character.charCount(codePoint);\n            j = (codePoint >= HIGH_SURROGATE_START && codePoint <= HIGH_SURROGATE_END && j < searchLength - 1) ? \n                    chars.indexOf(sequence.charAt(j), j + 1) : -1;\n            if (j == -1) {\n                for (; i < seqLength && !Character.isHighSurrogate(sequence.charAt(i)); i++) {\n                }\n            }\n        }\n        return false;\n    }\n\n    public static boolean contains(final CharSequence sequence, final char searchChar) {\n        return (sequence == null) ? false : (CharSequenceUtils.indexOf(sequence, searchChar, 0) >= 0);\n    }\n    \n    public static boolean isEmpty(final CharSequence cs) {\n        return cs == null || cs.length() == 0;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..e1fa42c2 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,56 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public class StringUtils {\n+  \n+    public static boolean containsAny(final String sequence, final char[] searchChars) {\n+        if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n+            return false;\n+        }\n+        final int seqLength = sequence.length();\n+        final int searchLength = searchChars.length;\n+        final int minSearchLength = 2;\n+        if (searchLength == 1) {\n+            return contains(sequence, searchChars[0]);\n+        }\n+        if (searchLength < minSearchLength) {\n+            for (int i = 0; i < seqLength; i++) {\n+                final char ch = sequence.charAt(i);\n+                for (int j = 0; j < searchLength; j++) {\n+                    if (searchChars[j] == ch) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            return false;\n+        }\n+        final Set<Character> chars = CharUtils.toSet(searchChars);\n+        int i = 0;\n+        int j = 0;\n+        while (i < seqLength && j < searchLength) {\n+            final int codePoint = Character.codePointAt(sequence, i);\n+            if (chars.contains(Character.valueOf((char)codePoint))) {\n+                return true;\n+            }\n+            i += Character.charCount(codePoint);\n+            j = (codePoint >= HIGH_SURROGATE_START && codePoint <= HIGH_SURROGATE_END && j < searchLength - 1) ? \n+                    chars.indexOf(sequence.charAt(j), j + 1) : -1;\n+            if (j == -1) {\n+                for (; i < seqLength && !Character.isHighSurrogate(sequence.charAt(i)); i++) {\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public static boolean contains(final CharSequence sequence, final char searchChar) {\n+        return (sequence == null) ? false : (CharSequenceUtils.indexOf(sequence, searchChar, 0) >= 0);\n+    }\n+    \n+    public static boolean isEmpty(final CharSequence cs) {\n+        return cs == null || cs.length() == 0;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}