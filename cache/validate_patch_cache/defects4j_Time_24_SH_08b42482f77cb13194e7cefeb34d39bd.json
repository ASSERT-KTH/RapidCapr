{
    "patch": "for (int i = 0; i < count; i++) {\n    SavedField savedField = savedFields[i];\n    try {\n        millis = savedField.set(millis, resetFields);\n        if (i + 1 < count) {\n            DurationField currentField = savedField.iField.getDurationField();\n            SavedField nextField = savedFields[i + 1];\n            DurationField nextDurationField = nextField.iField.getDurationField();\n            if (compareReverse(currentField, nextDurationField) > 0) {\n                throw new IllegalArgumentException(\"Fields invalid for parsing: \" + currentField.getName() + \" -> \" + nextDurationField.getName());\n            }\n        }\n    } catch (IllegalFieldValueException e) {\n        // Year is occasionally interpreted wrong due to Gregorian Reform\n        if (DateTimeFieldType.year().equals(savedFields[i].iField.getType())) {\n            long instant = savedFields[i].iField.set(0L, iDefaultYear);\n            millis = savedFields[i].iField.set(instant, savedFields[i].iValue);\n        } else {\n            boolean isSavedFieldIllegal = true;\n            IllegalFieldValueException savedFieldException = e;\n            for (int j = i + 1; j < count; j++) {\n                SavedField field = savedFields[j];\n                DurationField fieldDuration = field.iField.getDurationField();\n                if (compareReverse(savedFields[j - 1].iField.getDurationField(), fieldDuration) > 0) {\n                    if (text != null) {\n                        e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n                    }\n                    savedFieldException = e;\n                    isSavedFieldIllegal = false;\n                    break;\n                }\n                millis = field.setExtended(millis, resetFields, savedFields[j - 1]);\n            }\n\n            if (isSavedFieldIllegal) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n                }\n                throw e;\n            } else {\n                throw savedFieldException;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..ffb4fb47 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,51 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+for (int i = 0; i < count; i++) {\n+    SavedField savedField = savedFields[i];\n+    try {\n+        millis = savedField.set(millis, resetFields);\n+        if (i + 1 < count) {\n+            DurationField currentField = savedField.iField.getDurationField();\n+            SavedField nextField = savedFields[i + 1];\n+            DurationField nextDurationField = nextField.iField.getDurationField();\n+            if (compareReverse(currentField, nextDurationField) > 0) {\n+                throw new IllegalArgumentException(\"Fields invalid for parsing: \" + currentField.getName() + \" -> \" + nextDurationField.getName());\n+            }\n+        }\n+    } catch (IllegalFieldValueException e) {\n+        // Year is occasionally interpreted wrong due to Gregorian Reform\n+        if (DateTimeFieldType.year().equals(savedFields[i].iField.getType())) {\n+            long instant = savedFields[i].iField.set(0L, iDefaultYear);\n+            millis = savedFields[i].iField.set(instant, savedFields[i].iValue);\n+        } else {\n+            boolean isSavedFieldIllegal = true;\n+            IllegalFieldValueException savedFieldException = e;\n+            for (int j = i + 1; j < count; j++) {\n+                SavedField field = savedFields[j];\n+                DurationField fieldDuration = field.iField.getDurationField();\n+                if (compareReverse(savedFields[j - 1].iField.getDurationField(), fieldDuration) > 0) {\n+                    if (text != null) {\n+                        e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+                    }\n+                    savedFieldException = e;\n+                    isSavedFieldIllegal = false;\n+                    break;\n+                }\n+                millis = field.setExtended(millis, resetFields, savedFields[j - 1]);\n+            }\n+\n+            if (isSavedFieldIllegal) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+                }\n+                throw e;\n+            } else {\n+                throw savedFieldException;\n+            }\n+        }\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}