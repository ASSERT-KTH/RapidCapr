{
    "patch": "  private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n      if (name.getAliasCount() == 1 && name.getLocalSets() == 0 && name.getProps() != null &&\n          name.getAliasCount() == 0) {\n        // {@code name} meets condition (b).\n        // First, try to inline any local aliases.\n        inlineLocalAliases(name);\n\n        // Then, try to inline the qualified name, if there is one.\n        if (name.getBaseName() != null) {\n          inlineQualifiedNameIfPossible(name);\n        }\n      } else if (name.getAliasCount() > 0 && name.getGlobalSets() == 1 && name.getLocalSets() == 0 &&\n                 name.getProps() == null) {\n        // {@code name} meets condition (c).\n        inlineNonlocalAliasIfPossible(name);\n      }\n\n      // Check if {@code name} has any aliases left after the\n      // local-alias-inlining above.\n      if ((name.getType() == Name.Type.OBJECTLIT ||\n           name.getType() == Name.Type.FUNCTION) &&\n          name.getAliasCount() == 0 && name.getProps() != null) {\n        // All of {@code name}'s children meet condition (a), so they can be\n        // added to the worklist.\n        workList.addAll(name.getProps());\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..fd0337f0 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,29 +169,30 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n-            }\n-          }\n+      if (name.getAliasCount() == 1 && name.getLocalSets() == 0 && name.getProps() != null &&\n+          name.getAliasCount() == 0) {\n+        // {@code name} meets condition (b).\n+        // First, try to inline any local aliases.\n+        inlineLocalAliases(name);\n+\n+        // Then, try to inline the qualified name, if there is one.\n+        if (name.getBaseName() != null) {\n+          inlineQualifiedNameIfPossible(name);\n         }\n+      } else if (name.getAliasCount() > 0 && name.getGlobalSets() == 1 && name.getLocalSets() == 0 &&\n+                 name.getProps() == null) {\n+        // {@code name} meets condition (c).\n+        inlineNonlocalAliasIfPossible(name);\n       }\n \n       // Check if {@code name} has any aliases left after the\n       // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n+      if ((name.getType() == Name.Type.OBJECTLIT ||\n+           name.getType() == Name.Type.FUNCTION) &&\n+          name.getAliasCount() == 0 && name.getProps() != null) {\n         // All of {@code name}'s children meet condition (a), so they can be\n         // added to the worklist.\n-        workList.addAll(name.props);\n+        workList.addAll(name.getProps());\n       }\n     }\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}