{
    "patch": "if (cfa != null) {\n  if (finallyNode != null && finallyNode != node) {\n    cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n  } else if (parent.getType() == Token.FUNCTION && node.getNext() != null) {\n    cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(node.getNext()));\n  } else {\n    cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(node, null, cfa));\n  }\n} else {\n  if (finallyNode != null && finallyNode != node) {\n    cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n  } else if (parent.getType() == Token.FUNCTION && node.getNext() != null) {\n    cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(node.getNext()));\n  } else if (parent.getType() == Token.TRY && node == parent.getFirstChild()) {\n    if (NodeUtil.hasFinally(parent)) {\n      cfa.createEdge(fromNode, Branch.UNCOND, parent.getLastChild());\n    } else {\n      cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(node, null, cfa));\n    }\n  } else {\n    cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(node, null, cfa));\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..4708cc14 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,29 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null) {\n+  if (finallyNode != null && finallyNode != node) {\n+    cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+  } else if (parent.getType() == Token.FUNCTION && node.getNext() != null) {\n+    cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(node.getNext()));\n+  } else {\n+    cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(node, null, cfa));\n+  }\n+} else {\n+  if (finallyNode != null && finallyNode != node) {\n+    cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+  } else if (parent.getType() == Token.FUNCTION && node.getNext() != null) {\n+    cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(node.getNext()));\n+  } else if (parent.getType() == Token.TRY && node == parent.getFirstChild()) {\n+    if (NodeUtil.hasFinally(parent)) {\n+      cfa.createEdge(fromNode, Branch.UNCOND, parent.getLastChild());\n+    } else {\n+      cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(node, null, cfa));\n+    }\n+  } else {\n+    cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(node, null, cfa));\n+  }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}