{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolved = resolveViaRegistry(t, enclosing);\n    boolean propertiesResolved = false;\n\n    if (resolved) {\n      // If we resolved the type via the registry, then we don't need to go\n      // through an expensive type_resolving process.\n      propertiesResolved = true;\n      finishPropertyContinuations();\n      super.resolveInternal(t, enclosing);\n    } else {\n      // If the registry couldn't resolve the type, then\n      // we fall through to  resolving via properties.\n      resolveViaProperties(t, enclosing);\n      propertiesResolved = true;\n\n      // At this point in time, the type should be completely resolvable\n      // to a JSType.\n      if (isResolved()) {\n        finishPropertyContinuations();\n        super.resolveInternal(t, enclosing);\n      }\n    }\n\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..0fe7e0c3 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,34 +181,35 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n     boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+    boolean propertiesResolved = false;\n \n     if (resolved) {\n-      super.resolveInternal(t, enclosing);\n+      // If we resolved the type via the registry, then we don't need to go\n+      // through an expensive type_resolving process.\n+      propertiesResolved = true;\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+      super.resolveInternal(t, enclosing);\n+    } else {\n+      // If the registry couldn't resolve the type, then\n+      // we fall through to  resolving via properties.\n+      resolveViaProperties(t, enclosing);\n+      propertiesResolved = true;\n+\n+      // At this point in time, the type should be completely resolvable\n+      // to a JSType.\n+      if (isResolved()) {\n+        finishPropertyContinuations();\n+        super.resolveInternal(t, enclosing);\n+      }\n     }\n \n-    resolveViaProperties(t, enclosing);\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n \n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n   }\n \n   /**",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}