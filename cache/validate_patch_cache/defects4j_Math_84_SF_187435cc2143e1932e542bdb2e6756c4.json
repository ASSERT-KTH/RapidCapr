{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                simplex = reflectedSimplex;\n            } else {\n                simplex = replaceWorst(original, expanded, comparator);\n            }\n            return;\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted;\n        if (comparator.compare(reflected, original[getWorst(original)]) > 0) {\n            // perform an inside contraction\n            contracted = evaluateNewSimplex(original, -gamma, comparator);\n            if (comparator.compare(contracted, original[getWorst(original)]) < 0) {\n                simplex = replaceWorst(original, contracted, comparator);\n            } else {\n                shrink(original, comparator);\n            }\n        } else {\n            // perform an outside contraction\n            contracted = evaluateNewSimplex(original, beta, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                simplex = replaceWorst(original, contracted, comparator);\n            } else {\n                shrink(original, comparator);\n            }\n        }\n\n        // Check for convergence\n        if (checker != null) {\n            double[] p2 = simplex[simplex.length - 1].getPoint();\n            double[] p1 = simplex[0].getPoint();\n            boolean converged = true;\n            for (int i = 0; i < p1.length; ++i) {\n                converged &= (Math.abs(p1[i] - p2[i]) <= checker.getRelativeThreshold()\n                        + checker.getAbsoluteThreshold() * Math.max(Math.abs(p1[i]), Math.abs(p2[i])));\n            }\n            if (converged) {\n                return;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..3fb961d77 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,67 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                simplex = reflectedSimplex;\n+            } else {\n+                simplex = replaceWorst(original, expanded, comparator);\n             }\n+            return;\n+        }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+        // compute the contracted simplex\n+        final RealPointValuePair contracted;\n+        if (comparator.compare(reflected, original[getWorst(original)]) > 0) {\n+            // perform an inside contraction\n+            contracted = evaluateNewSimplex(original, -gamma, comparator);\n+            if (comparator.compare(contracted, original[getWorst(original)]) < 0) {\n+                simplex = replaceWorst(original, contracted, comparator);\n+            } else {\n+                shrink(original, comparator);\n+            }\n+        } else {\n+            // perform an outside contraction\n+            contracted = evaluateNewSimplex(original, beta, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+                simplex = replaceWorst(original, contracted, comparator);\n+            } else {\n+                shrink(original, comparator);\n+            }\n+        }\n \n-            // check convergence\n+        // Check for convergence\n+        if (checker != null) {\n+            double[] p2 = simplex[simplex.length - 1].getPoint();\n+            double[] p1 = simplex[0].getPoint();\n+            boolean converged = true;\n+            for (int i = 0; i < p1.length; ++i) {\n+                converged &= (Math.abs(p1[i] - p2[i]) <= checker.getRelativeThreshold()\n+                        + checker.getAbsoluteThreshold() * Math.max(Math.abs(p1[i]), Math.abs(p2[i])));\n+            }\n+            if (converged) {\n                 return;\n             }\n-\n         }\n-\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}