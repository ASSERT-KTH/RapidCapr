{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node n) {\n    // For labels with block children, we need to ensure that a\n    // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n    // are skipped. \n    // If a node has only one child that is a FUNCTION or DO, return true.\n    if (n.hasMoreThanOneChild()) {\n      return false;\n    }\n    Node child = n.getFirstChild();\n    return child != null && (child.getType() == Token.FUNCTION || child.getType() == Token.DO)\n        && child.hasMoreThanOneChild() == false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..c4788b5c 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,18 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n-  }\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+    // For labels with block children, we need to ensure that a\n+    // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n+    // are skipped. \n+    // If a node has only one child that is a FUNCTION or DO, return true.\n+    if (n.hasMoreThanOneChild()) {\n+      return false;\n+    }\n+    Node child = n.getFirstChild();\n+    return child != null && (child.getType() == Token.FUNCTION || child.getType() == Token.DO)\n+        && child.hasMoreThanOneChild() == false;\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){if(e1)[{function goo(){return true}]}else foo()}> but was:<function(){if(e1)[function goo(){return true]}else foo()}>",
    "test_result": "FAIL"
}