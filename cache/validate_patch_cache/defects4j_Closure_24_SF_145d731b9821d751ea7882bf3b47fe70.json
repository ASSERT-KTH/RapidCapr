{
    "patch": "private void findAliases(NodeTraversal t) {\n    boolean inGoogScope = false;\n    boolean invalidParameter = false;\n    // Traverse the AST in order to find variables that are part of a goog.scope statement\n    for (NodeTraversal tr : t.getSubtraversals()) {\n        // Look for goog.scope statements\n        if (tr.getScopeRoot().isFunction() && tr.getScopeRoot().getFirstChild().matchesQualifiedName(\"goog.scope\")) {\n            // The goog.scope statement should only have one child (an anonymous function)\n            Node googScope = tr.getScopeRoot().getFirstChild();\n            if (!googScope.hasOneChild() || !googScope.getFirstChild().isFunction() || !googScope.getFirstChild().hasOneChild()) {\n                report(t, tr.getScopeRoot(), GOOG_SCOPE_SINGLE_PARAMETER_ERROR, \"The call to goog.scope must take only a single parameter. It must be an anonymous function that itself takes no parameters.\");\n                invalidParameter = true;\n                continue;\n            }\n            inGoogScope = true;\n            Scope scope = tr.getScope();\n            for (Var v : scope.getVarIterable()) {\n                Node n = v.getNode();\n                Node parent = n.getParent();\n                if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n                    String name = n.getString();\n                    Var aliasVar = scope.getVar(name);\n                    if (aliasVar != null && aliasVar.getInitialValue() != null) {\n                        aliases.put(name, aliasVar);\n                        String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n                        transformation.addAlias(name, qualifiedName);\n                    } else {\n                        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n                    }\n                } else if (!parent.isFunction()) {\n                    report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n                }\n            }\n        }\n    }\n    if (!inGoogScope && !invalidParameter) {\n        // If we're not already in a goog.scope and we haven't reported an invalid parameter error,\n        // report the missing goog.scope error.\n        report(t, t.getScopeRoot(), MISSING_GOOG_SCOPE_ERROR, \"goog.scope statement not found\");\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..7355df45 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,47 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+private void findAliases(NodeTraversal t) {\n+    boolean inGoogScope = false;\n+    boolean invalidParameter = false;\n+    // Traverse the AST in order to find variables that are part of a goog.scope statement\n+    for (NodeTraversal tr : t.getSubtraversals()) {\n+        // Look for goog.scope statements\n+        if (tr.getScopeRoot().isFunction() && tr.getScopeRoot().getFirstChild().matchesQualifiedName(\"goog.scope\")) {\n+            // The goog.scope statement should only have one child (an anonymous function)\n+            Node googScope = tr.getScopeRoot().getFirstChild();\n+            if (!googScope.hasOneChild() || !googScope.getFirstChild().isFunction() || !googScope.getFirstChild().hasOneChild()) {\n+                report(t, tr.getScopeRoot(), GOOG_SCOPE_SINGLE_PARAMETER_ERROR, \"The call to goog.scope must take only a single parameter. It must be an anonymous function that itself takes no parameters.\");\n+                invalidParameter = true;\n+                continue;\n+            }\n+            inGoogScope = true;\n+            Scope scope = tr.getScope();\n+            for (Var v : scope.getVarIterable()) {\n+                Node n = v.getNode();\n+                Node parent = n.getParent();\n+                if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+                    String name = n.getString();\n+                    Var aliasVar = scope.getVar(name);\n+                    if (aliasVar != null && aliasVar.getInitialValue() != null) {\n+                        aliases.put(name, aliasVar);\n+                        String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+                        transformation.addAlias(name, qualifiedName);\n+                    } else {\n+                        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+                    }\n+                } else if (!parent.isFunction()) {\n+                    report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+                }\n+            }\n         }\n-      }\n     }\n+    if (!inGoogScope && !invalidParameter) {\n+        // If we're not already in a goog.scope and we haven't reported an invalid parameter error,\n+        // report the missing goog.scope error.\n+        report(t, t.getScopeRoot(), MISSING_GOOG_SCOPE_ERROR, \"goog.scope statement not found\");\n+    }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}