{
    "patch": "MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\nMethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\ntry {\n    Field field = MockUtil.getCallbacksField(mock.getClass());\n    Callback[] callbacks = (Callback[]) field.get(mock);\n    callbacks[0] = newFilter;\n} catch (NoSuchFieldException e) {\n    throw new RuntimeException(\"Failed to reset mock\", e);\n} catch (IllegalAccessException e) {\n    throw new RuntimeException(\"Failed to reset mock\", e);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..3d9fca1f8 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,20 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+try {\n+    Field field = MockUtil.getCallbacksField(mock.getClass());\n+    Callback[] callbacks = (Callback[]) field.get(mock);\n+    callbacks[0] = newFilter;\n+} catch (NoSuchFieldException e) {\n+    throw new RuntimeException(\"Failed to reset mock\", e);\n+} catch (IllegalAccessException e) {\n+    throw new RuntimeException(\"Failed to reset mock\", e);\n+}\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}