{
    "patch": "public double getTypedPercent(JSONObject jsonObject) {\n    double totalCount = jsonObject.length();\n    double typedCount = 0;\n\n    Iterator<String> keys = jsonObject.keys();\n    while (keys.hasNext()) {\n        String key = keys.next();\n        Object value = jsonObject.get(key);\n        if (value instanceof String) {\n            typedCount++;\n        }\n    }\n\n    return (typedCount / totalCount) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..08341395 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(JSONObject jsonObject) {\n+    double totalCount = jsonObject.length();\n+    double typedCount = 0;\n+\n+    Iterator<String> keys = jsonObject.keys();\n+    while (keys.hasNext()) {\n+        String key = keys.next();\n+        Object value = jsonObject.get(key);\n+        if (value instanceof String) {\n+            typedCount++;\n+        }\n+    }\n+\n+    return (typedCount / totalCount) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}