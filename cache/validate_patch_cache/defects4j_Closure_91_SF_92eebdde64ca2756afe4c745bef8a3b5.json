{
    "patch": "              jsDoc.hasThisType() ||\n              jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions that @lends an object with a 'this'\n      // property that's not a constructor or prototype.\n      JSDocInfo lendsDocInfo = NodeUtil.getLendsJSDocInfo(n);\n      if (lendsDocInfo != null) {\n        String lendsName = lendsDocInfo.getAllTypeNames().iterator().next();\n        Var lendsVar = t.getScope().getVar(lendsName);\n        if (lendsVar != null) {\n          JSDocInfo varJsDoc = lendsVar.getJSDocInfo();\n          if (varJsDoc != null && varJsDoc.hasThisType()) {\n            Node varNode = lendsVar.getNode();\n            if (varNode.getType() == Token.NAME) {\n              return false;\n            }\n            if (varNode.getType() == Token.GETPROP &&\n                (varNode.getParent().getType() == Token.ASSIGN ||\n                 varNode.getGrandparent().getType() == Token.ASSIGN)) {\n              return false;\n            }\n            if (varNode.getType() == Token.STRING_KEY &&\n                varNode.getGrandparent().getType() == Token.OBJECT_PATTERN &&\n                varNode.getParent().getSecondChild().isDefaultValue()) {\n              // Avoid modifying trivial expressions that result from\n              // destructuring assignments.\n              return false;\n            }\n          }\n        }\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN ||\n          // object literal keys\n          pType == Token.STRING_KEY ||\n          pType == Token.GETELEM ||\n          pType == Token.COMPUTED_PROP ||\n          pType == Token.NUMBER)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isGet(parent) &&\n          parent.getNext() != null &&\n          parent.getNext().getType() == Token.ASSIGN &&\n          NodeUtil.isGet(parent.getNext().getFirstChild()) &&\n          parent.getNext().getFirstChild().getType() == Token.GETPROP &&\n          \"prototype\".equals(parent.getNext().getFirstChild().getLastChild().getString())) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..048511a9 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,20 +79,40 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n+              jsDoc.hasThisType() ||\n+              jsDoc.isOverride())) {\n         return false;\n       }\n \n+      // Don't traverse functions that @lends an object with a 'this'\n+      // property that's not a constructor or prototype.\n+      JSDocInfo lendsDocInfo = NodeUtil.getLendsJSDocInfo(n);\n+      if (lendsDocInfo != null) {\n+        String lendsName = lendsDocInfo.getAllTypeNames().iterator().next();\n+        Var lendsVar = t.getScope().getVar(lendsName);\n+        if (lendsVar != null) {\n+          JSDocInfo varJsDoc = lendsVar.getJSDocInfo();\n+          if (varJsDoc != null && varJsDoc.hasThisType()) {\n+            Node varNode = lendsVar.getNode();\n+            if (varNode.getType() == Token.NAME) {\n+              return false;\n+            }\n+            if (varNode.getType() == Token.GETPROP &&\n+                (varNode.getParent().getType() == Token.ASSIGN ||\n+                 varNode.getGrandparent().getType() == Token.ASSIGN)) {\n+              return false;\n+            }\n+            if (varNode.getType() == Token.STRING_KEY &&\n+                varNode.getGrandparent().getType() == Token.OBJECT_PATTERN &&\n+                varNode.getParent().getSecondChild().isDefaultValue()) {\n+              // Avoid modifying trivial expressions that result from\n+              // destructuring assignments.\n+              return false;\n+            }\n+          }\n+        }\n+      }\n+\n       // Don't traverse functions unless they would normally\n       // be able to have a @this annotation associated with them. e.g.,\n       // var a = function() { }; // or\n@@ -101,49 +121,24 @@ final class CheckGlobalThis implements Callback {\n       // var a = {x: function() {}};\n       int pType = parent.getType();\n       if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n+          pType == Token.SCRIPT ||\n+          pType == Token.NAME ||\n+          pType == Token.ASSIGN ||\n+          // object literal keys\n+          pType == Token.STRING_KEY ||\n+          pType == Token.GETELEM ||\n+          pType == Token.COMPUTED_PROP ||\n+          pType == Token.NUMBER)) {\n         return false;\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n-    }\n-\n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-\n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-        }\n-      }\n-    }\n-\n-    return true;\n-  }\n+      if (NodeUtil.isGet(parent) &&\n+          parent.getNext() != null &&\n+          parent.getNext().getType() == Token.ASSIGN &&\n+          NodeUtil.isGet(parent.getNext().getFirstChild()) &&\n+          parent.getNext().getFirstChild().getType() == Token.GETPROP &&\n+          \"prototype\".equals(parent.getNext().getFirstChild().getLastChild().getString())) {\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}