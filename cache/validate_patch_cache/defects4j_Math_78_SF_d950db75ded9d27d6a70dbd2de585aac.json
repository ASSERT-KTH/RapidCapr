{
    "patch": "import org.apache.commons.math3.analysis.UnivariateFunction;\nimport org.apache.commons.math3.analysis.UnivariateRealFunction;\nimport org.apache.commons.math3.analysis.function.Sinc;\nimport org.apache.commons.math3.exception.ConvergenceException;\nimport org.apache.commons.math3.exception.DerivativeException;\nimport org.apache.commons.math3.exception.EventException;\nimport org.apache.commons.math3.exception.FunctionEvaluationException;\nimport org.apache.commons.math3.exception.util.LocalizedFormats;\nimport org.apache.commons.math3.linear.BlockRealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.ode.events.EventHandler;\nimport org.apache.commons.math3.ode.sampling.StepHandler;\nimport org.apache.commons.math3.ode.sampling.StepInterpolator;\nimport org.apache.commons.math3.ode.nonstiff.StepProblem;\nimport org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator;\nimport org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;\nimport org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;\nimport org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;\nimport org.apache.commons.math3.optim.nonlinear.scalar.GoalType;\nimport org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction;\nimport org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex;\nimport org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;\nimport org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;\nimport org.apache.commons.math3.optim.univariate.BrentOptimizer;\nimport org.apache.commons.math3.optim.InitialGuess;\nimport org.apache.commons.math3.optim.OptimizationData;\nimport org.apache.commons.math3.optim.PointValuePair;\nimport org.apache.commons.math3.random.MersenneTwister;\nimport org.apache.commons.math3.random.RandomGenerator;\nimport org.apache.commons.math3.stat.descriptive.SummaryStatistics;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathUtils;\n\n\npublic class EventState implements StepHandler {\n\n    private final EventHandler handler;\n    private final double maxCheckInterval;\n    private final double convergence;\n    private final int maxIterationCount;\n    private final double rootBracketingTolerance;\n\n    private boolean forward;\n    private double t0;\n    private double g0;\n    private boolean g0Positive;\n    private boolean increasing;\n    private double previousEventTime;\n    private boolean pendingEvent;\n    private double pendingEventTime;\n\n    public EventState(final EventHandler handler, final double maxCheckInterval,\n                      final double convergence,\n                      final int maxIterationCount, final double rootBracketingTolerance) {\n        this.handler                = handler;\n        this.maxCheckInterval       = maxCheckInterval;\n        this.convergence            = convergence;\n        this.maxIterationCount      = maxIterationCount;\n        this.rootBracketingTolerance = rootBracketingTolerance;\n    }\n\n    public void reset(final double t, final double[] y, final boolean forward)\n        throws DerivativeException {\n        t0 = t;\n        g0 = handler.g(t, y);\n        g0Positive = g0 >= 0;\n        pendingEvent          = false;\n        pendingEventTime      = Double.NaN;\n        previousEventTime     = Double.NaN;\n        increasing            = true;\n        this.forward          = forward;\n    }\n\n    public void handleStep(final StepInterpolator interpolator, final boolean isLast)\n        throws DerivativeException, EventException {\n        // find all events that occurred during the last step\n        while (true) {\n            final double t1 = interpolator.getCurrentTime();\n            if ((t1 - t0) <= 0.5 * maxCheckInterval) {\n                // we have not stepped over maxCheckInterval,\n                // we are going to use a simple endpoint test\n                final double dt = t1 - t0;\n                final double[] y = interpolator.getInterpolatedState(0);\n                final double g1 = handler.g(t1, y);\n                if (g0Positive ^ (g1 >= 0)) {\n                    // there is a sign change: an event is expected during this step\n\n                    // variation direction, with respect to the integration direction\n                    increasing = g1 >= g0;\n\n                    final double ga = increasing ? g0 : g1;\n                    final double gb = increasing ? g1 : g0;\n\n                    final UnivariateFunction f = new UnivariateFunction() {\n                        public double value(final double t) throws FunctionEvaluationException {\n                            try {\n                                final double[] yi = interpolator.getInterpolatedState((t - t0) / dt);\n                                return handler.g(t, yi);\n                            } catch (DerivativeException e) {\n                                throw new FunctionEvaluationException(e, t);\n                            }\n                        }\n                    };\n                    final UnivariateFunction toSolve;\n                    final double ta;\n                    final double tb;\n                    if (forward) {\n                        ta = t0 + rootBracketingTolerance * dt;\n                        tb = t1;\n                        toSolve = f;\n                    } else {\n                        ta = t1;\n                        tb = t0 - rootBracketingTolerance * dt;\n                        toSolve = new UnivariateFunction() {\n                            public double value(final double t)\n                                throws FunctionEvaluationException {\n                                return f.value(ta + tb - t);\n                            }\n                        };\n                    }\n                    final BrentSolver solver = new BrentSolver();\n                    solver.setAbsoluteAccuracy(convergence);\n                    solver.setMaximalIterationCount(maxIterationCount);\n\n                    final double tEvent = solver.solve(toSolve, ta, tb, forward ? ga : gb, forward ? gb : ga);\n                    if ((tEvent < t0) || (tEvent > t1)) {\n                        // missed event\n\n                        // this may happen when the step size is being changed\n                        // and the integrator decides to stop before reaching the new\n                        // step size but after having crossed the event.\n                        // we don't report this as an error, we just ignore the event\n                        g0          = g1;\n                        g0Positive  = g0 >= 0;\n                        t0          = t1;\n                        continue;\n\n                    }\n\n                    // handle the event\n                    final double[] y = interpolator.getInterpolatedState((tEvent - t0) / dt);\n                    final double[] yDot = interpolator.getInterpolatedDerivatives((tEvent - t0) / dt);\n\n                    handler.eventOccurred(tEvent, y, yDot);\n                    if (handler.stop()) {\n                        // stop processing events\n                        pendingEvent = false;\n                        pendingEventTime = Double.NaN;\n                        return;\n                    }\n\n                    // prepare handling of the next event\n                    previousEventTime = t0;\n                    t0                = tEvent;\n                    g0                = handler.g(t0, y);\n                    g0Positive        = g0 >= 0;\n\n                    if (!Double.isNaN(pendingEventTime)) {\n                        if (pendingEventTime < t0) {\n                            // the next event time has already been detected\n                            // during step handler processing, we don't need\n                            // to search for events now, just keep going until\n                            // we have covered the remaining time interval\n                            pendingEvent     = true;\n                            pendingEventTime = Double.NaN;\n                        } else {\n                            // there is a remaining time interval to handle before\n                            // the next event\n                            pendingEvent     = false;\n                            return;\n                        }\n                    }\n                } else {\n                    // no event, the step is completed\n                    if (isLast) {\n                        // this is the last step, we can ignore any pending event\n                        pendingEvent     = false;\n                        pendingEventTime = Double.NaN;\n                    } else {\n                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                            // we were already waiting for this event which was\n                            // found during a previous call for a step that was\n                            // rejected, accept the step now by resetting the state\n                            pendingEvent     = false;\n                            pendingEventTime = Double.NaN;\n                            reset(t0, interpolator.getInterpolatedState(), forward);\n                            continue;\n                        }\n                        if (pendingEvent) {\n                            // there is a pending event, we need to satisfy it before\n                            // we can consider the current step as completed\n                            return;\n                        }\n                        // look for events at the end of this step\n                        g0          = g1;\n                        g0Positive  = g0 >= 0;\n                        t0          = t1;\n                    }\n                    return;\n                }\n            } else {\n                // we need to take some steps smaller than maxCheckInterval\n                final double tStart = t0;\n                final double[] y    = interpolator.getInterpolatedState();\n                final int remaining = 1 + (int) Math.ceil((t1 - t0) / maxCheckInterval);\n                final double h       = (t1 - t0) / remaining;\n\n                for (int k = 0; k < remaining;) {\n\n                    final double tk = t0 + h;\n                    final double[] yk = new double[y.length];\n                    System.arraycopy(y, 0, yk, 0, y.length);\n\n                    final ClassicalRungeKuttaIntegrator rk  = new ClassicalRungeKuttaIntegrator(h);\n                    rk.integrate(new StepProblem(handler, tk), t0, yk, tk, yk);\n\n                    final double gk = handler.g(tk, yk);\n                    if (g0Positive ^ (gk >= 0)) {\n                        // there is a sign change: an event is expected during this step\n\n                        // variation direction, with respect to the integration direction\n                        increasing = gk >= g0;\n\n                        final double ga = increasing ? g0 : gk;\n                        final double gb = increasing ? gk : g0;\n\n                        final UnivariateFunction f = new UnivariateFunction(",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/events/EventState.java b/src/main/java/org/apache/commons/math/ode/events/EventState.java\nindex 50060650e..b4c7faa0e 100644\n--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java\n@@ -164,103 +164,234 @@ public class EventState {\n      * cannot be evaluated\n      * @exception ConvergenceException if an event cannot be located\n      */\n-    public boolean evaluateStep(final StepInterpolator interpolator)\n-        throws DerivativeException, EventException, ConvergenceException {\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.UnivariateRealFunction;\n+import org.apache.commons.math3.analysis.function.Sinc;\n+import org.apache.commons.math3.exception.ConvergenceException;\n+import org.apache.commons.math3.exception.DerivativeException;\n+import org.apache.commons.math3.exception.EventException;\n+import org.apache.commons.math3.exception.FunctionEvaluationException;\n+import org.apache.commons.math3.exception.util.LocalizedFormats;\n+import org.apache.commons.math3.linear.BlockRealMatrix;\n+import org.apache.commons.math3.linear.MatrixUtils;\n+import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.ode.events.EventHandler;\n+import org.apache.commons.math3.ode.sampling.StepHandler;\n+import org.apache.commons.math3.ode.sampling.StepInterpolator;\n+import org.apache.commons.math3.ode.nonstiff.StepProblem;\n+import org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator;\n+import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;\n+import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;\n+import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;\n+import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;\n+import org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction;\n+import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex;\n+import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;\n+import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;\n+import org.apache.commons.math3.optim.univariate.BrentOptimizer;\n+import org.apache.commons.math3.optim.InitialGuess;\n+import org.apache.commons.math3.optim.OptimizationData;\n+import org.apache.commons.math3.optim.PointValuePair;\n+import org.apache.commons.math3.random.MersenneTwister;\n+import org.apache.commons.math3.random.RandomGenerator;\n+import org.apache.commons.math3.stat.descriptive.SummaryStatistics;\n+import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.util.MathUtils;\n+\n+\n+public class EventState implements StepHandler {\n \n-        try {\n+    private final EventHandler handler;\n+    private final double maxCheckInterval;\n+    private final double convergence;\n+    private final int maxIterationCount;\n+    private final double rootBracketingTolerance;\n \n-            forward = interpolator.isForward();\n-            final double t1 = interpolator.getCurrentTime();\n-            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n-            final double h  = (t1 - t0) / n;\n+    private boolean forward;\n+    private double t0;\n+    private double g0;\n+    private boolean g0Positive;\n+    private boolean increasing;\n+    private double previousEventTime;\n+    private boolean pendingEvent;\n+    private double pendingEventTime;\n \n-            double ta = t0;\n-            double ga = g0;\n-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n-            for (int i = 0; i < n; ++i) {\n+    public EventState(final EventHandler handler, final double maxCheckInterval,\n+                      final double convergence,\n+                      final int maxIterationCount, final double rootBracketingTolerance) {\n+        this.handler                = handler;\n+        this.maxCheckInterval       = maxCheckInterval;\n+        this.convergence            = convergence;\n+        this.maxIterationCount      = maxIterationCount;\n+        this.rootBracketingTolerance = rootBracketingTolerance;\n+    }\n \n-                // evaluate handler value at the end of the substep\n-                tb += h;\n-                interpolator.setInterpolatedTime(tb);\n-                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n+    public void reset(final double t, final double[] y, final boolean forward)\n+        throws DerivativeException {\n+        t0 = t;\n+        g0 = handler.g(t, y);\n+        g0Positive = g0 >= 0;\n+        pendingEvent          = false;\n+        pendingEventTime      = Double.NaN;\n+        previousEventTime     = Double.NaN;\n+        increasing            = true;\n+        this.forward          = forward;\n+    }\n \n-                // check events occurrence\n-                if (g0Positive ^ (gb >= 0)) {\n+    public void handleStep(final StepInterpolator interpolator, final boolean isLast)\n+        throws DerivativeException, EventException {\n+        // find all events that occurred during the last step\n+        while (true) {\n+            final double t1 = interpolator.getCurrentTime();\n+            if ((t1 - t0) <= 0.5 * maxCheckInterval) {\n+                // we have not stepped over maxCheckInterval,\n+                // we are going to use a simple endpoint test\n+                final double dt = t1 - t0;\n+                final double[] y = interpolator.getInterpolatedState(0);\n+                final double g1 = handler.g(t1, y);\n+                if (g0Positive ^ (g1 >= 0)) {\n                     // there is a sign change: an event is expected during this step\n \n-                        // this is a corner case:\n-                        // - there was an event near ta,\n-                        // - there is another event between ta and tb\n-                        // - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n-                        // this implies that the real sign of ga is the same as gb, so we need to slightly\n-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain\n-                        // about bracketing\n-                            // this should never happen\n-                         \n                     // variation direction, with respect to the integration direction\n-                    increasing = gb >= ga;\n+                    increasing = g1 >= g0;\n \n-                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n+                    final double ga = increasing ? g0 : g1;\n+                    final double gb = increasing ? g1 : g0;\n+\n+                    final UnivariateFunction f = new UnivariateFunction() {\n                         public double value(final double t) throws FunctionEvaluationException {\n                             try {\n-                                interpolator.setInterpolatedTime(t);\n-                                return handler.g(t, interpolator.getInterpolatedState());\n+                                final double[] yi = interpolator.getInterpolatedState((t - t0) / dt);\n+                                return handler.g(t, yi);\n                             } catch (DerivativeException e) {\n                                 throw new FunctionEvaluationException(e, t);\n-                            } catch (EventException e) {\n-                                throw new FunctionEvaluationException(e, t);\n                             }\n                         }\n                     };\n+                    final UnivariateFunction toSolve;\n+                    final double ta;\n+                    final double tb;\n+                    if (forward) {\n+                        ta = t0 + rootBracketingTolerance * dt;\n+                        tb = t1;\n+                        toSolve = f;\n+                    } else {\n+                        ta = t1;\n+                        tb = t0 - rootBracketingTolerance * dt;\n+                        toSolve = new UnivariateFunction() {\n+                            public double value(final double t)\n+                                throws FunctionEvaluationException {\n+                                return f.value(ta + tb - t);\n+                            }\n+                        };\n+                    }\n                     final BrentSolver solver = new BrentSolver();\n                     solver.setAbsoluteAccuracy(convergence);\n                     solver.setMaximalIterationCount(maxIterationCount);\n-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n-                    if ((Math.abs(root - ta) <= convergence) &&\n-                         (Math.abs(root - previousEventTime) <= convergence)) {\n-                        // we have either found nothing or found (again ?) a past event, we simply ignore it\n-                        ta = tb;\n-                        ga = gb;\n-                    } else if (Double.isNaN(previousEventTime) ||\n-                               (Math.abs(previousEventTime - root) > convergence)) {\n-                        pendingEventTime = root;\n+\n+                    final double tEvent = solver.solve(toSolve, ta, tb, forward ? ga : gb, forward ? gb : ga);\n+                    if ((tEvent < t0) || (tEvent > t1)) {\n+                        // missed event\n+\n+                        // this may happen when the step size is being changed\n+                        // and the integrator decides to stop before reaching the new\n+                        // step size but after having crossed the event.\n+                        // we don't report this as an error, we just ignore the event\n+                        g0          = g1;\n+                        g0Positive  = g0 >= 0;\n+                        t0          = t1;\n+                        continue;\n+\n+                    }\n+\n+                    // handle the event\n+                    final double[] y = interpolator.getInterpolatedState((tEvent - t0) / dt);\n+                    final double[] yDot = interpolator.getInterpolatedDerivatives((tEvent - t0) / dt);\n+\n+                    handler.eventOccurred(tEvent, y, yDot);\n+                    if (handler.stop()) {\n+                        // stop processing events\n+                        pendingEvent = false;\n+                        pendingEventTime = Double.NaN;\n+                        return;\n+                    }\n+\n+                    // prepare handling of the next event\n+                    previousEventTime = t0;\n+                    t0                = tEvent;\n+                    g0                = handler.g(t0, y);\n+                    g0Positive        = g0 >= 0;\n+\n+                    if (!Double.isNaN(pendingEventTime)) {\n+                        if (pendingEventTime < t0) {\n+                            // the next event time has already been detected\n+                            // during step handler processing, we don't need\n+                            // to search for events now, just keep going until\n+                            // we have covered the remaining time interval\n+                            pendingEvent     = true;\n+                            pendingEventTime = Double.NaN;\n+                        } else {\n+                            // there is a remaining time interval to handle before\n+                            // the next event\n+                            pendingEvent     = false;\n+                            return;\n+                        }\n+                    }\n+                } else {\n+                    // no event, the step is completed\n+                    if (isLast) {\n+                        // this is the last step, we can ignore any pending event\n+                        pendingEvent     = false;\n+                        pendingEventTime = Double.NaN;\n+                    } else {\n                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                             // we were already waiting for this event which was\n                             // found during a previous call for a step that was\n-                            // rejected, this step must now be accepted since it\n-                            // properly ends exactly at the event occurrence\n-                            return false;\n+                            // rejected, accept the step now by resetting the state\n+                            pendingEvent     = false;\n+                            pendingEventTime = Double.NaN;\n+                            reset(t0, interpolator.getInterpolatedState(), forward);\n+                            continue;\n+                        }\n+                        if (pendingEvent) {\n+                            // there is a pending event, we need to satisfy it before\n+                            // we can consider the current step as completed\n+                            return;\n                         }\n-                        // either we were not waiting for the event or it has\n-                        // moved in such a way the step cannot be accepted\n-                        pendingEvent = true;\n-                        return true;\n+                        // look for events at the end of this step\n+                        g0          = g1;\n+                        g0Positive  = g0 >= 0;\n+                        t0          = t1;\n                     }\n-\n-                } else {\n-                    // no sign change: there is no event for now\n-                    ta = tb;\n-                    ga = gb;\n+                    return;\n                 }\n+            } else {\n+                // we need to take some steps smaller than maxCheckInterval\n+                final double tStart = t0;\n+                final double[] y    = interpolator.getInterpolatedState();\n+                final int remaining = 1 + (int) Math.ceil((t1 - t0) / maxCheckInterval);\n+                final double h       = (t1 - t0) / remaining;\n \n-            }\n+                for (int k = 0; k < remaining;) {\n \n-            // no event during the whole step\n-            pendingEvent     = false;\n-            pendingEventTime = Double.NaN;\n-            return false;\n+                    final double tk = t0 + h;\n+                    final double[] yk = new double[y.length];\n+                    System.arraycopy(y, 0, yk, 0, y.length);\n \n-        } catch (FunctionEvaluationException e) {\n-            final Throwable cause = e.getCause();\n-            if ((cause != null) && (cause instanceof DerivativeException)) {\n-                throw (DerivativeException) cause;\n-            } else if ((cause != null) && (cause instanceof EventException)) {\n-                throw (EventException) cause;\n-            }\n-            throw new EventException(e);\n-        }\n+                    final ClassicalRungeKuttaIntegrator rk  = new ClassicalRungeKuttaIntegrator(h);\n+                    rk.integrate(new StepProblem(handler, tk), t0, yk, tk, yk);\n \n-    }\n+                    final double gk = handler.g(tk, yk);\n+                    if (g0Positive ^ (gk >= 0)) {\n+                        // there is a sign change: an event is expected during this step\n+\n+                        // variation direction, with respect to the integration direction\n+                        increasing = gk >= g0;\n+\n+                        final double ga = increasing ? g0 : gk;\n+                        final double gb = increasing ? gk : g0;\n+\n+                        final UnivariateFunction f = new UnivariateFunction(\n \n     /** Get the occurrence time of the event triggered in the current\n      * step.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}