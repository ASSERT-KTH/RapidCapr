{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n  final int initialOffset = getOffset(instantLocal);\n  final long instantAdjusted = instantLocal - initialOffset;\n  final int adjustedOffset = getOffset(instantAdjusted);\n  if (initialOffset == adjustedOffset) {\n    return adjustedOffset;\n  }\n\n  // Determine if we are in a gap or overlap\n  final boolean nextDry = (initialOffset > adjustedOffset);\n  // Find transition info\n  long nextLocal = nextTransition(instantLocal);\n  long nextAdjusted = nextTransition(instantAdjusted);\n  if (nextLocal == instantLocal) {\n    nextLocal = nextTransition(nextLocal + DateTimeConstants.MILLIS_PER_SECOND);\n  }\n  if (nextAdjusted == instantAdjusted) {\n    nextAdjusted = nextTransition(nextAdjusted + DateTimeConstants.MILLIS_PER_SECOND);\n  }\n\n  if (nextAdjusted == nextLocal && nextDry) {\n    return initialOffset;\n  } else if (nextAdjusted == nextLocal && !nextDry) {\n    return adjustedOffset;\n  }\n\n  final long nextTransition = (nextDry ? nextLocal : nextAdjusted);\n  if (nextTransition > instantLocal) {\n    long prevTransition = previousTransition(instantAdjusted);\n    if (prevTransition < instantAdjusted) {\n      prevTransition = nextTransition(prevTransition);\n    }\n    if (nextTransition > (prevTransition + (instantLocal - prevTransition) / 2)) {\n      return adjustedOffset;\n    } else {\n      return initialOffset;\n    }\n  } else {\n    long nextNextTransition = nextTransition(nextAdjusted);\n    if (nextNextTransition <= (instantAdjusted + DateTimeConstants.MILLIS_PER_SECOND)) {\n      nextNextTransition = nextTransition(nextNextTransition + DateTimeConstants.MILLIS_PER_SECOND);\n    }\n    if (nextTransition > (instantLocal - initialOffset)) {\n      return initialOffset;\n    } else if (nextNextTransition <= (instantAdjusted + adjustedOffset)) {\n      return adjustedOffset;\n    } else {\n      return initialOffset;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..8192bb9e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,57 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        }\n-        return offsetAdjusted;\n+public int getOffsetFromLocal(long instantLocal) {\n+  final int initialOffset = getOffset(instantLocal);\n+  final long instantAdjusted = instantLocal - initialOffset;\n+  final int adjustedOffset = getOffset(instantAdjusted);\n+  if (initialOffset == adjustedOffset) {\n+    return adjustedOffset;\n+  }\n+\n+  // Determine if we are in a gap or overlap\n+  final boolean nextDry = (initialOffset > adjustedOffset);\n+  // Find transition info\n+  long nextLocal = nextTransition(instantLocal);\n+  long nextAdjusted = nextTransition(instantAdjusted);\n+  if (nextLocal == instantLocal) {\n+    nextLocal = nextTransition(nextLocal + DateTimeConstants.MILLIS_PER_SECOND);\n+  }\n+  if (nextAdjusted == instantAdjusted) {\n+    nextAdjusted = nextTransition(nextAdjusted + DateTimeConstants.MILLIS_PER_SECOND);\n+  }\n+\n+  if (nextAdjusted == nextLocal && nextDry) {\n+    return initialOffset;\n+  } else if (nextAdjusted == nextLocal && !nextDry) {\n+    return adjustedOffset;\n+  }\n+\n+  final long nextTransition = (nextDry ? nextLocal : nextAdjusted);\n+  if (nextTransition > instantLocal) {\n+    long prevTransition = previousTransition(instantAdjusted);\n+    if (prevTransition < instantAdjusted) {\n+      prevTransition = nextTransition(prevTransition);\n+    }\n+    if (nextTransition > (prevTransition + (instantLocal - prevTransition) / 2)) {\n+      return adjustedOffset;\n+    } else {\n+      return initialOffset;\n+    }\n+  } else {\n+    long nextNextTransition = nextTransition(nextAdjusted);\n+    if (nextNextTransition <= (instantAdjusted + DateTimeConstants.MILLIS_PER_SECOND)) {\n+      nextNextTransition = nextTransition(nextNextTransition + DateTimeConstants.MILLIS_PER_SECOND);\n     }\n+    if (nextTransition > (instantLocal - initialOffset)) {\n+      return initialOffset;\n+    } else if (nextNextTransition <= (instantAdjusted + adjustedOffset)) {\n+      return adjustedOffset;\n+    } else {\n+      return initialOffset;\n+    }\n+  }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}