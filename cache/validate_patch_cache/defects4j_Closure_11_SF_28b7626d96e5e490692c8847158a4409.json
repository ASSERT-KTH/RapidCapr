{
    "patch": "public void testGetprop4() {\n    String[] warnings = {\"warning 1\", \"warning 2\"};\n    Properties props = new Properties();\n    props.put(\"key1\", \"value1\");\n    props.put(\"key2\", \"value2\");\n    props.put(\"key3\", \"value3\");\n    props.put(\"key4\", \"value4\");\n    Configuration config = new Configuration(warnings);\n    config.getProperties().putAll(props);\n    assertEquals(\"value1\", config.getProp(\"key1\"));\n    assertEquals(\"value2\", config.getProp(\"key2\"));\n    assertEquals(\"value3\", config.getProp(\"key3\"));\n    assertEquals(\"value4\", config.getProp(\"key4\"));\n    assertTrue(\"expected a warning\", warnings.length > 0);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..20436e57 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public void testGetprop4() {\n+    String[] warnings = {\"warning 1\", \"warning 2\"};\n+    Properties props = new Properties();\n+    props.put(\"key1\", \"value1\");\n+    props.put(\"key2\", \"value2\");\n+    props.put(\"key3\", \"value3\");\n+    props.put(\"key4\", \"value4\");\n+    Configuration config = new Configuration(warnings);\n+    config.getProperties().putAll(props);\n+    assertEquals(\"value1\", config.getProp(\"key1\"));\n+    assertEquals(\"value2\", config.getProp(\"key2\"));\n+    assertEquals(\"value3\", config.getProp(\"key3\"));\n+    assertEquals(\"value4\", config.getProp(\"key4\"));\n+    assertTrue(\"expected a warning\", warnings.length > 0);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}