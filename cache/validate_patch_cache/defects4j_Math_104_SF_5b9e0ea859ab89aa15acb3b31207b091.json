{
    "patch": "public static double regularizedGamma(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException();\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    // Continued fraction representation\n    double cf = continuedFraction(a, x);\n    // Incomplete gamma\n    double ig = Math.exp(-x + a * Math.log(x) - logGamma(a)) * cf;\n    // Regularized gamma\n    return ig / gamma(a);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..92146f1af 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,20 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException();\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    // Continued fraction representation\n+    double cf = continuedFraction(a, x);\n+    // Incomplete gamma\n+    double ig = Math.exp(-x + a * Math.log(x) - logGamma(a)) * cf;\n+    // Regularized gamma\n+    return ig / gamma(a);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}