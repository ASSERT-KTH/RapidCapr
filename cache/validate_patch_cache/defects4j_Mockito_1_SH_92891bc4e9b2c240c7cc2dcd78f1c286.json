{
    "patch": "        Matcher varargMatcher = matchers.get(indexOfVararg);\n        if (varargMatcher instanceof CapturesArguments) {\n            Object[] arguments = Arrays.copyOfRange(invocation.getRawArguments(), indexOfVararg, invocation.getRawArguments().length);\n            ((CapturesArguments) varargMatcher).captureFrom(arguments);\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..2aa2ca05c 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,11 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+        Matcher varargMatcher = matchers.get(indexOfVararg);\n+        if (varargMatcher instanceof CapturesArguments) {\n+            Object[] arguments = Arrays.copyOfRange(invocation.getRawArguments(), indexOfVararg, invocation.getRawArguments().length);\n+            ((CapturesArguments) varargMatcher).captureFrom(arguments);\n+        }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}