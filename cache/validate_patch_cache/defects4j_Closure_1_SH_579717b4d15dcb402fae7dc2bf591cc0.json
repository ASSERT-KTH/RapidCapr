{
    "patch": "// Strip unreferenced args off the end of the function declaration.\nNode lastArg = argList.getLastChild();\nwhile (lastArg != null) {\n  if (lastArg.isDefaultValue()) {\n    lastArg = lastArg.getFirstChild();\n  }\n\n  Var var = fnScope.getVar(lastArg.getString());\n  if (!referenced.contains(var)) {\n    NodeUtil.removeNextSibling(lastArg);\n    compiler.reportCodeChange();\n    lastArg = argList.getLastChild();\n  } else {\n    break;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..64132046 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,22 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Strip unreferenced args off the end of the function declaration.\n+Node lastArg = argList.getLastChild();\n+while (lastArg != null) {\n+  if (lastArg.isDefaultValue()) {\n+    lastArg = lastArg.getFirstChild();\n+  }\n+\n+  Var var = fnScope.getVar(lastArg.getString());\n+  if (!referenced.contains(var)) {\n+    NodeUtil.removeNextSibling(lastArg);\n+    compiler.reportCodeChange();\n+    lastArg = argList.getLastChild();\n+  } else {\n+    break;\n+  }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}