{
    "patch": "public static double getTypedPercent(String json) {\n    int count = 0;\n    int total = 0;\n    try {\n        JSONObject jsonObject = new JSONObject(json);\n        JSONArray jsonArray = jsonObject.getJSONArray(\"fields\");\n        for (int i = 0; i < jsonArray.length(); i++) {\n            JSONObject obj = jsonArray.getJSONObject(i);\n            if (obj.getString(\"type\").equalsIgnoreCase(\"typed\")) {\n                count += obj.getInt(\"count\");\n            }\n            total += obj.getInt(\"count\");\n        }\n    } catch (JSONException e) {\n        e.printStackTrace();\n    }\n    return ((double) count / (double) total) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..f9712a73 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    int count = 0;\n+    int total = 0;\n+    try {\n+        JSONObject jsonObject = new JSONObject(json);\n+        JSONArray jsonArray = jsonObject.getJSONArray(\"fields\");\n+        for (int i = 0; i < jsonArray.length(); i++) {\n+            JSONObject obj = jsonArray.getJSONObject(i);\n+            if (obj.getString(\"type\").equalsIgnoreCase(\"typed\")) {\n+                count += obj.getInt(\"count\");\n+            }\n+            total += obj.getInt(\"count\");\n+        }\n+    } catch (JSONException e) {\n+        e.printStackTrace();\n+    }\n+    return ((double) count / (double) total) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}