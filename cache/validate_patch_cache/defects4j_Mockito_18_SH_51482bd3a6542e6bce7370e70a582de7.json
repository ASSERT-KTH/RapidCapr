{
    "patch": "public ReturnValue executeImpl() {\n    try {\n        Connection connection = dataSource.getConnection();\n        Statement statement = connection.createStatement();\n        ResultSet resultSet = statement.executeQuery(sql);\n        \n        // create an ArrayList to store the values\n        ArrayList<Object> values = new ArrayList<Object>();\n        \n        // loop through each result row and add each value to the ArrayList\n        while (resultSet.next()) {\n            for (int i = 0; i < columns.size(); i++) {\n                values.add(resultSet.getObject(columns.get(i)));\n            }\n        }\n\n        // convert the ArrayList to the desired return type\n        if (returnType == Iterable.class) {\n            return new ReturnValue(values);\n        } else {\n            // unreachable statement, since only Iterable is supported\n            return null;\n        }\n    } catch (SQLException e) {\n        return new ReturnValue(e.getMessage());\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}