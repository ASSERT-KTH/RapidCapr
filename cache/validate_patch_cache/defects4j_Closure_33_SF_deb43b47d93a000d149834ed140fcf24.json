{
    "patch": "public void matchConstraint(ObjectType constraintObj) {\n  if (constraintObj != null && !constraintObj.isNamedType() && !constraintObj.isFunctionType()) {\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          JSType inferredType = null;\n          if (hasProperty(prop)) {\n            // If the property already exists, take the least supertype\n            // of the existing and inferred types.\n            inferredType = getPropertyType(prop).getLeastSupertype(propType);\n          } else if (getDisambiguationId() != null) {\n            // Otherwise, create a new inferred property with the type of\n            // the property on the constraint object.\n            inferredType = propType;\n          }\n          if (inferredType != null) {\n            defineInferredProperty(prop, inferredType, null);\n          }\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..33ae279e 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,30 +552,28 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n+public void matchConstraint(ObjectType constraintObj) {\n+  if (constraintObj != null && !constraintObj.isNamedType() && !constraintObj.isFunctionType()) {\n     if (constraintObj.isRecordType()) {\n       for (String prop : constraintObj.getOwnPropertyNames()) {\n         JSType propType = constraintObj.getPropertyType(prop);\n         if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n+          JSType inferredType = null;\n+          if (hasProperty(prop)) {\n+            // If the property already exists, take the least supertype\n+            // of the existing and inferred types.\n+            inferredType = getPropertyType(prop).getLeastSupertype(propType);\n+          } else if (getDisambiguationId() != null) {\n+            // Otherwise, create a new inferred property with the type of\n+            // the property on the constraint object.\n+            inferredType = propType;\n+          }\n+          if (inferredType != null) {\n+            defineInferredProperty(prop, inferredType, null);\n           }\n-          defineInferredProperty(prop, typeToInfer, null);\n         }\n       }\n     }\n   }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}