{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    int offsetAdjusted = getOffset(instantAdjusted);\n\n    // check if there is a transition point in the next 12 hours\n    // if so, check if the estimated offset is correct or not\n    long nextTransition = nextTransition(instantAdjusted);\n    if (nextTransition - instantAdjusted < 12 * DateTimeConstants.MILLIS_PER_HOUR) {\n        int nextOffset = getOffset(nextTransition);\n        if (offsetLocal != nextOffset && offsetAdjusted == offsetLocal) {\n            // we are near a DST boundary and need to adjust the offset\n            boolean gap = nextOffset > offsetLocal;\n            if (gap) {\n                // we need to return the later instant\n                long nextLocal = nextTransition(instantAdjusted + 1);\n                long nextAdjusted = nextTransition(instantLocal - offsetLocal) + (nextTransition - instantAdjusted);\n                if (nextAdjusted <= instantLocal) {\n                    nextAdjusted = nextTransition(instantAdjusted) + (nextTransition - instantAdjusted);\n                }\n                if (nextLocal != nextAdjusted) {\n                    offsetAdjusted = nextOffset;\n                }\n            } else {\n                // we need to return the earlier instant\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantLocal - offsetLocal) + (nextTransition - instantAdjusted);\n                if (prevAdjusted >= instantLocal) {\n                    prevAdjusted = previousTransition(instantAdjusted - 1) + (nextTransition - instantAdjusted);\n                }\n                if (prevLocal != prevAdjusted) {\n                    offsetAdjusted = nextOffset;\n                }\n            }\n        }\n    }\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..1febcef3 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,46 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    int offsetLocal = getOffset(instantLocal);\n+    // adjust instantLocal using the estimate and recalc the offset\n+    final long instantAdjusted = instantLocal - offsetLocal;\n+    int offsetAdjusted = getOffset(instantAdjusted);\n+\n+    // check if there is a transition point in the next 12 hours\n+    // if so, check if the estimated offset is correct or not\n+    long nextTransition = nextTransition(instantAdjusted);\n+    if (nextTransition - instantAdjusted < 12 * DateTimeConstants.MILLIS_PER_HOUR) {\n+        int nextOffset = getOffset(nextTransition);\n+        if (offsetLocal != nextOffset && offsetAdjusted == offsetLocal) {\n+            // we are near a DST boundary and need to adjust the offset\n+            boolean gap = nextOffset > offsetLocal;\n+            if (gap) {\n+                // we need to return the later instant\n+                long nextLocal = nextTransition(instantAdjusted + 1);\n+                long nextAdjusted = nextTransition(instantLocal - offsetLocal) + (nextTransition - instantAdjusted);\n+                if (nextAdjusted <= instantLocal) {\n+                    nextAdjusted = nextTransition(instantAdjusted) + (nextTransition - instantAdjusted);\n+                }\n                 if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+                    offsetAdjusted = nextOffset;\n+                }\n+            } else {\n+                // we need to return the earlier instant\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantLocal - offsetLocal) + (nextTransition - instantAdjusted);\n+                if (prevAdjusted >= instantLocal) {\n+                    prevAdjusted = previousTransition(instantAdjusted - 1) + (nextTransition - instantAdjusted);\n+                }\n+                if (prevLocal != prevAdjusted) {\n+                    offsetAdjusted = nextOffset;\n                 }\n             }\n         }\n-        return offsetAdjusted;\n     }\n+    return offsetAdjusted;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}