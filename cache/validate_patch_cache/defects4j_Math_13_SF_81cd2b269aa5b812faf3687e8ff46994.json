{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    RealMatrix sqrtM;\n    try {\n        sqrtM = new CholeskyDecomposition(m).getL();\n    } catch (Exception e) {\n        try {\n            sqrtM = new EigenDecomposition(m).getSquareRoot();\n        }  catch (Exception e2) {\n            final int numRows = m.getRowDimension();\n            final int numCols = m.getColumnDimension();\n            final RealMatrix x = MatrixUtils.createRealMatrix(numRows, numCols);\n            final RealMatrix xOld = MatrixUtils.createRealMatrix(numRows, numCols);\n            final RealMatrix i = MatrixUtils.createRealIdentityMatrix(numRows);\n            double eps;\n            do {\n                xOld.setSubMatrix(x.getData(), 0, 0);\n                final RealMatrix y = xOld.multiply(xOld);\n                eps = y.subtract(m).getFrobeniusNorm()/m.getFrobeniusNorm();\n                x.setSubMatrix(xOld.add(y.subtract(m).multiply(xOld).scalarMultiply(0.5)).getData(), 0, 0);\n            } while (eps > 1e-9);\n            \n            sqrtM = x;\n        }\n    }\n    RealMatrix sqrtInvM = MatrixUtils.inverse(sqrtM);\n    return sqrtM.multiply(sqrtInvM);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..c2caf9800 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,31 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    RealMatrix sqrtM;\n+    try {\n+        sqrtM = new CholeskyDecomposition(m).getL();\n+    } catch (Exception e) {\n+        try {\n+            sqrtM = new EigenDecomposition(m).getSquareRoot();\n+        }  catch (Exception e2) {\n+            final int numRows = m.getRowDimension();\n+            final int numCols = m.getColumnDimension();\n+            final RealMatrix x = MatrixUtils.createRealMatrix(numRows, numCols);\n+            final RealMatrix xOld = MatrixUtils.createRealMatrix(numRows, numCols);\n+            final RealMatrix i = MatrixUtils.createRealIdentityMatrix(numRows);\n+            double eps;\n+            do {\n+                xOld.setSubMatrix(x.getData(), 0, 0);\n+                final RealMatrix y = xOld.multiply(xOld);\n+                eps = y.subtract(m).getFrobeniusNorm()/m.getFrobeniusNorm();\n+                x.setSubMatrix(xOld.add(y.subtract(m).multiply(xOld).scalarMultiply(0.5)).getData(), 0, 0);\n+            } while (eps > 1e-9);\n+            \n+            sqrtM = x;\n+        }\n     }\n+    RealMatrix sqrtInvM = MatrixUtils.inverse(sqrtM);\n+    return sqrtM.multiply(sqrtInvM);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}