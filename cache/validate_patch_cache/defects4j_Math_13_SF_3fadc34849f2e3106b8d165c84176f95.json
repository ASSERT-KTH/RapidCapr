{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    try {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        if (!dec.getEigenvector(0).isNaN()) {\n            final double[] realEigenvalues = dec.getRealEigenvalues();\n            boolean isPositiveSemiDefinite = true;\n            for (double eigenvalue : realEigenvalues) {\n                if (eigenvalue < 0.0) {\n                    isPositiveSemiDefinite = false;\n                    break;\n                }\n            }\n            if (isPositiveSemiDefinite) {\n                final double[] modifiedEigenvalues = new double[realEigenvalues.length];\n                for (int i = 0; i < realEigenvalues.length; i++) {\n                    modifiedEigenvalues[i] = Math.sqrt(realEigenvalues[i]);\n                }\n                final RealMatrix v = dec.getV();\n                final RealMatrix vT = v.transpose();\n                final RealMatrix d = MatrixUtils.createRealDiagonalMatrix(modifiedEigenvalues);\n                return v.multiply(d).multiply(vT);\n            } else {\n                throw new IllegalArgumentException(\"Matrix must be positive semi-definite\");\n            }\n        } else {\n            throw new IllegalArgumentException(\"Matrix cannot be square rooted\");\n        }\n    } catch (OutOfMemoryError e) {\n        System.gc();\n        final long memory = Runtime.getRuntime().maxMemory() / (1024 * 1024);\n        throw new OutOfMemoryError(\"Java heap space limit reached (\" + memory + \" MB)\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..c27a8dc54 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,37 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    try {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        if (!dec.getEigenvector(0).isNaN()) {\n+            final double[] realEigenvalues = dec.getRealEigenvalues();\n+            boolean isPositiveSemiDefinite = true;\n+            for (double eigenvalue : realEigenvalues) {\n+                if (eigenvalue < 0.0) {\n+                    isPositiveSemiDefinite = false;\n+                    break;\n+                }\n+            }\n+            if (isPositiveSemiDefinite) {\n+                final double[] modifiedEigenvalues = new double[realEigenvalues.length];\n+                for (int i = 0; i < realEigenvalues.length; i++) {\n+                    modifiedEigenvalues[i] = Math.sqrt(realEigenvalues[i]);\n+                }\n+                final RealMatrix v = dec.getV();\n+                final RealMatrix vT = v.transpose();\n+                final RealMatrix d = MatrixUtils.createRealDiagonalMatrix(modifiedEigenvalues);\n+                return v.multiply(d).multiply(vT);\n+            } else {\n+                throw new IllegalArgumentException(\"Matrix must be positive semi-definite\");\n+            }\n+        } else {\n+            throw new IllegalArgumentException(\"Matrix cannot be square rooted\");\n+        }\n+    } catch (OutOfMemoryError e) {\n+        System.gc();\n+        final long memory = Runtime.getRuntime().maxMemory() / (1024 * 1024);\n+        throw new OutOfMemoryError(\"Java heap space limit reached (\" + memory + \" MB)\");\n     }\n }\n+}",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space limit reached (14564 MB)",
    "test_result": "FAIL"
}