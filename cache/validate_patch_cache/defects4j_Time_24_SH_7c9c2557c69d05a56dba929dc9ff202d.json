{
    "patch": "            if (savedFields[i].iField.getType() == DateTimeFieldType.year()) {\n                long newMillis = savedFields[i].set(millis, resetFields);\n                if (iResolveUpperFields) {\n                    if (DateTimeUtils.isContiguous(savedFields[i].iField.getDurationField())) {\n                        // Verify that the new value stuck\n                        for (int j = i + 1; j < count; j++) {\n                            if (savedFields[j].set(newMillis, resetFields) != newMillis) {\n                                throw new IllegalFieldValueException(\n                                    savedFields[j].iField.getType(),\n                                    \"The value \" + savedFields[i].get()\n                                    + \" for field \" + savedFields[i].iField.getName()\n                                    + \" is not supported. Value \" + savedFields[j].get()\n                                    + \" is rejected as it is not in the range \"\n                                    + savedFields[j].iField.getMinimumValue() + \" to \"\n                                    + savedFields[j].iField.getMaximumValue());\n                            }\n                        }\n                    }\n                }\n                millis = newMillis;\n            } else {",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..e6f54c5c 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,27 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (savedFields[i].iField.getType() == DateTimeFieldType.year()) {\n+                long newMillis = savedFields[i].set(millis, resetFields);\n+                if (iResolveUpperFields) {\n+                    if (DateTimeUtils.isContiguous(savedFields[i].iField.getDurationField())) {\n+                        // Verify that the new value stuck\n+                        for (int j = i + 1; j < count; j++) {\n+                            if (savedFields[j].set(newMillis, resetFields) != newMillis) {\n+                                throw new IllegalFieldValueException(\n+                                    savedFields[j].iField.getType(),\n+                                    \"The value \" + savedFields[i].get()\n+                                    + \" for field \" + savedFields[i].iField.getName()\n+                                    + \" is not supported. Value \" + savedFields[j].get()\n+                                    + \" is rejected as it is not in the range \"\n+                                    + savedFields[j].iField.getMinimumValue() + \" to \"\n+                                    + savedFields[j].iField.getMaximumValue());\n+                            }\n+                        }\n+                    }\n+                }\n+                millis = newMillis;\n+            } else {\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}