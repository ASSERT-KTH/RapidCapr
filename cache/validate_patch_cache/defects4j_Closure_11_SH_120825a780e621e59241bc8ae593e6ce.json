{
    "patch": "if (n.getJSType() != null) {\n  if (parent.isAssign()) {\n    return;\n  }\n  if (n.getJSType().isEquivalentTo(JSType.TOP_OBJECT) && n.getNext() != null\n      && n.getNext().getToken() == Token.GETPROP) {\n    JSType type = n.getNext().getFirstChild().getJSType();\n    if (type != null && type.isExplicitlyVoidable()) {\n      report(n.getNext(), SUGGEST_ADD_TYPE_ANNOTATION);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}