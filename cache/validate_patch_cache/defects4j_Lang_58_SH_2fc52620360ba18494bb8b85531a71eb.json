{
    "patch": "if (dec == null && exp == null) {\n    //Must be an int,long,bigint\n    String numericBody = str;\n    boolean isNegative = numericBody.startsWith(\"-\");\n    if (isNegative) {\n        numericBody = numericBody.substring(1);\n    }\n    if (StringUtils.isNumeric(numericBody)) {\n        if (numericBody.length() <= 9) {\n            try {// possible int\n                if (isNegative) {\n                    return org.apache.commons.lang3.math.NumberUtils.createInteger(\"-\" + numericBody);\n                } else {\n                    return org.apache.commons.lang3.math.NumberUtils.createInteger(numericBody);\n                }\n            } catch (NumberFormatException e) {\n                //Not an int\n            }\n        }\n        if (numericBody.length() <= 18) {\n            try {// possible long\n                if (isNegative) {\n                    return org.apache.commons.lang3.math.NumberUtils.createLong(\"-\" + numericBody);\n                } else {\n                    return org.apache.commons.lang3.math.NumberUtils.createLong(numericBody);\n                }\n            } catch (NumberFormatException e) {\n                //Not a long\n            }\n        }\n        try {// bigger than long\n            if (isNegative) {\n                return createBigInteger(\"-\" + numericBody);\n            } else {\n                return createBigInteger(numericBody);\n            }\n        } catch (NumberFormatException e) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n\n    } else {\n        throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n} else {\n    //Must be a float,double,BigDec",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/NumberUtils.java b/src/java/org/apache/commons/lang/math/NumberUtils.java\nindex c0f06a47..3d94596d 100644\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -451,8 +451,51 @@ public class NumberUtils {\n                 case 'L' :\n                     if (dec == null\n                         && exp == null\n-                        && isDigits(numeric.substring(1))\n-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n+if (dec == null && exp == null) {\n+    //Must be an int,long,bigint\n+    String numericBody = str;\n+    boolean isNegative = numericBody.startsWith(\"-\");\n+    if (isNegative) {\n+        numericBody = numericBody.substring(1);\n+    }\n+    if (StringUtils.isNumeric(numericBody)) {\n+        if (numericBody.length() <= 9) {\n+            try {// possible int\n+                if (isNegative) {\n+                    return org.apache.commons.lang3.math.NumberUtils.createInteger(\"-\" + numericBody);\n+                } else {\n+                    return org.apache.commons.lang3.math.NumberUtils.createInteger(numericBody);\n+                }\n+            } catch (NumberFormatException e) {\n+                //Not an int\n+            }\n+        }\n+        if (numericBody.length() <= 18) {\n+            try {// possible long\n+                if (isNegative) {\n+                    return org.apache.commons.lang3.math.NumberUtils.createLong(\"-\" + numericBody);\n+                } else {\n+                    return org.apache.commons.lang3.math.NumberUtils.createLong(numericBody);\n+                }\n+            } catch (NumberFormatException e) {\n+                //Not a long\n+            }\n+        }\n+        try {// bigger than long\n+            if (isNegative) {\n+                return createBigInteger(\"-\" + numericBody);\n+            } else {\n+                return createBigInteger(numericBody);\n+            }\n+        } catch (NumberFormatException e) {\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n+        }\n+\n+    } else {\n+        throw new NumberFormatException(str + \" is not a valid number.\");\n+    }\n+} else {\n+    //Must be a float,double,BigDec\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}