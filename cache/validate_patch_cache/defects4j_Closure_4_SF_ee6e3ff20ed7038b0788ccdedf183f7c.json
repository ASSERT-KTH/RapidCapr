{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    JSType resolvedType = null;\n    boolean resolvedFromRegistry = false;\n    \n    // Try to resolve type from registry object first\n    resolvedFromRegistry = resolveViaRegistry(t, enclosing);\n    \n    // If not resolved, try to resolve it from property map\n    if (!resolvedFromRegistry) {\n        resolvedType = resolveViaProperties(t, enclosing);\n    }\n\n    // If there is a cycle, attempt to resolve it again from registry and property map\n    if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n        resolvedFromRegistry = resolveViaRegistry(t, enclosing);\n        if (!resolvedFromRegistry) {\n            resolvedType = resolveViaProperties(t, enclosing);\n        }\n    }\n\n    // If type is resolved, call super.resolveInternal() and finishPropertyContinuations()\n    if (isResolved()) {\n        super.resolveInternal(t, enclosing);\n        finishPropertyContinuations();\n        return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    // If type is not resolved yet, try resolving it again from registry and property map,\n    // if still not resolved after each round, call super.resolveInternal() and finishPropertyContinuations()\n    while (!isResolved()) {\n        if (resolvedFromRegistry) {\n            resolvedFromRegistry = resolveViaRegistry(t, enclosing);\n        } else {\n            resolvedType = resolveViaProperties(t, enclosing);\n        }\n        if (detectImplicitPrototypeCycle()) {\n            handleTypeCycle(t);\n            resolvedFromRegistry = resolveViaRegistry(t, enclosing);\n            if (!resolvedFromRegistry) {\n                resolvedType = resolveViaProperties(t, enclosing);\n            }\n        }\n        if (isResolved()) {\n            super.resolveInternal(t, enclosing);\n            finishPropertyContinuations();\n            return registry.isLastGeneration() ? getReferencedType() : this;\n        }\n    }\n\n    // If this point is reached, then the type is still not resolved and we need to call super.resolveInternal()\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n\n    return registry.isLastGeneration() ? getReferencedType() : this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..0aa9e5ef 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,62 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+    JSType resolvedType = null;\n+    boolean resolvedFromRegistry = false;\n+    \n+    // Try to resolve type from registry object first\n+    resolvedFromRegistry = resolveViaRegistry(t, enclosing);\n+    \n+    // If not resolved, try to resolve it from property map\n+    if (!resolvedFromRegistry) {\n+        resolvedType = resolveViaProperties(t, enclosing);\n+    }\n+\n+    // If there is a cycle, attempt to resolve it again from registry and property map\n     if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+        handleTypeCycle(t);\n+        resolvedFromRegistry = resolveViaRegistry(t, enclosing);\n+        if (!resolvedFromRegistry) {\n+            resolvedType = resolveViaProperties(t, enclosing);\n+        }\n     }\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+    // If type is resolved, call super.resolveInternal() and finishPropertyContinuations()\n+    if (isResolved()) {\n+        super.resolveInternal(t, enclosing);\n+        finishPropertyContinuations();\n+        return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    // If type is not resolved yet, try resolving it again from registry and property map,\n+    // if still not resolved after each round, call super.resolveInternal() and finishPropertyContinuations()\n+    while (!isResolved()) {\n+        if (resolvedFromRegistry) {\n+            resolvedFromRegistry = resolveViaRegistry(t, enclosing);\n+        } else {\n+            resolvedType = resolveViaProperties(t, enclosing);\n+        }\n+        if (detectImplicitPrototypeCycle()) {\n+            handleTypeCycle(t);\n+            resolvedFromRegistry = resolveViaRegistry(t, enclosing);\n+            if (!resolvedFromRegistry) {\n+                resolvedType = resolveViaProperties(t, enclosing);\n+            }\n+        }\n+        if (isResolved()) {\n+            super.resolveInternal(t, enclosing);\n+            finishPropertyContinuations();\n+            return registry.isLastGeneration() ? getReferencedType() : this;\n+        }\n     }\n \n+    // If this point is reached, then the type is still not resolved and we need to call super.resolveInternal()\n     super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+    finishPropertyContinuations();\n+\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}