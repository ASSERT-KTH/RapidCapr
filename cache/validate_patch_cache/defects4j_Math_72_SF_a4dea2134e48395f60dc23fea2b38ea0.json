{
    "patch": "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    double yInitial = f.value(initial);\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n\n    // check if initial and endpoints are equal or within a small tolerance of each other\n    if (Math.abs(initial - min) < Double.MIN_VALUE && Math.abs(initial - max) < Double.MIN_VALUE) {\n        // initial equals both endpoints, return initial as result\n        setResult(initial, 0);\n        return result;\n    } else if (Math.abs(yMin) <= functionValueAccuracy) {\n        // min is a root, return it as result\n        setResult(min, 0);\n        return result;\n    } else if (Math.abs(yMax) <= functionValueAccuracy) {\n        // max is a root, return it as result\n        setResult(max, 0);\n        return result;\n    } else if ((yMin > 0 && yMax > 0) || (yMin < 0 && yMax < 0)) {\n        // f(min) and f(max) have the same sign, throw an exception\n        throw MathRuntimeException.createIllegalArgumentException(\n            NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n    }\n\n    // full Brent algorithm starting with provided initial guess\n    return solve(f, min, yMin, max, yMax, initial, yInitial);\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex e0cb42714..8cd8e0292 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,53 +95,40 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n-                        final double min, final double max, final double initial)\n+public double solve(final UnivariateRealFunction f,\n+                    final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+    clearResult();\n+    verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n-        double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+    double yInitial = f.value(initial);\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n \n-        // return the first endpoint if it is good enough\n-        double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n-        // return the second endpoint if it is good enough\n-        double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        if (yMin * yMax > 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n-        }\n+    // check if initial and endpoints are equal or within a small tolerance of each other\n+    if (Math.abs(initial - min) < Double.MIN_VALUE && Math.abs(initial - max) < Double.MIN_VALUE) {\n+        // initial equals both endpoints, return initial as result\n+        setResult(initial, 0);\n+        return result;\n+    } else if (Math.abs(yMin) <= functionValueAccuracy) {\n+        // min is a root, return it as result\n+        setResult(min, 0);\n+        return result;\n+    } else if (Math.abs(yMax) <= functionValueAccuracy) {\n+        // max is a root, return it as result\n+        setResult(max, 0);\n+        return result;\n+    } else if ((yMin > 0 && yMax > 0) || (yMin < 0 && yMax < 0)) {\n+        // f(min) and f(max) have the same sign, throw an exception\n+        throw MathRuntimeException.createIllegalArgumentException(\n+            NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+    }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+    // full Brent algorithm starting with provided initial guess\n+    return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n-    }\n+}\n \n     /**\n      * Find a zero in the given interval.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1> but was:<3>",
    "test_result": "FAIL"
}