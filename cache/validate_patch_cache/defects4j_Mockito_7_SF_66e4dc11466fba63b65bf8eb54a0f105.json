{
    "patch": "private void readTypeVariables() {\n    if (typeVariable != null) {\n        for (Type bound : typeVariable.getBounds()) {\n            if (bound instanceof TypeVariable) {\n                readTypeVariablesFromTypeVariable((TypeVariable<?>) bound);\n            } else if (bound != null) {\n                registerTypeVariablesOn(bound);\n            }\n        }\n        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n        if (actualTypeArgument instanceof TypeVariable) {\n            readTypeVariablesFromTypeVariable((TypeVariable<?>) actualTypeArgument);\n        } else if (actualTypeArgument != null) {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n    }\n}\n\nprivate void readTypeVariablesFromTypeVariable(TypeVariable<?> typeVariable) {\n    for (Type bound : typeVariable.getBounds()) {\n        if (bound instanceof TypeVariable) {\n            readTypeVariablesFromTypeVariable((TypeVariable<?>) bound);\n        } else if (bound != null) {\n            registerTypeVariablesOn(bound);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..87e7d6c6f 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,34 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable != null) {\n+        for (Type bound : typeVariable.getBounds()) {\n+            if (bound instanceof TypeVariable) {\n+                readTypeVariablesFromTypeVariable((TypeVariable<?>) bound);\n+            } else if (bound != null) {\n+                registerTypeVariablesOn(bound);\n+            }\n+        }\n+        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+        if (actualTypeArgument instanceof TypeVariable) {\n+            readTypeVariablesFromTypeVariable((TypeVariable<?>) actualTypeArgument);\n+        } else if (actualTypeArgument != null) {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+    }\n+}\n+\n+private void readTypeVariablesFromTypeVariable(TypeVariable<?> typeVariable) {\n+    for (Type bound : typeVariable.getBounds()) {\n+        if (bound instanceof TypeVariable) {\n+            readTypeVariablesFromTypeVariable((TypeVariable<?>) bound);\n+        } else if (bound != null) {\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}