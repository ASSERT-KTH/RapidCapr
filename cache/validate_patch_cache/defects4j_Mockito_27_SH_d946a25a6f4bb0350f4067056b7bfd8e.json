{
    "patch": "MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\nMockitoSettings settings = withSettings().defaultAnswer(RETURNS_DEFAULTS).spiedInstance(mock);\nMockitoSession mockitoSession = Mockito.mockitoSession().initMock(mock).startMocking();\ntry {\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, new MockSettingsImpl(settings));\n    ((Factory) mock).setCallbacks(new Callback[] { newFilter });\n} finally {\n    mockitoSession.finishMocking();\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..41179fe81 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,18 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+MockitoSettings settings = withSettings().defaultAnswer(RETURNS_DEFAULTS).spiedInstance(mock);\n+MockitoSession mockitoSession = Mockito.mockitoSession().initMock(mock).startMocking();\n+try {\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, new MockSettingsImpl(settings));\n+    ((Factory) mock).setCallbacks(new Callback[] { newFilter });\n+} finally {\n+    mockitoSession.finishMocking();\n+}\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}