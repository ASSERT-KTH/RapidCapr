{
    "patch": "public static String unescape(String input) {\n    StringWriter writer = new StringWriter(input.length());\n    int inputLength = input.length();\n    boolean escaped = false;\n    for (int i = 0; i < inputLength; i++) {\n        char ch = input.charAt(i);\n        if (escaped) {\n            switch (ch) {\n                case 'n': writer.write('\\n'); break;\n                case 't': writer.write('\\t'); break;\n                case 'r': writer.write('\\r'); break;\n                case 'b': writer.write('\\b'); break;\n                case 'f': writer.write('\\f'); break;\n                case '\\\\': writer.write('\\\\'); break;\n                case '\\'': writer.write('\\''); break;\n                case '\\\"': writer.write('\\\"'); break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid escaped character at position \" + i + \": \\\\\" + ch);\n            }\n            escaped = false;\n        } else if (ch == '\\\\') {\n            escaped = true;\n        } else {\n            writer.write(ch);\n        }\n    }\n    if (escaped) {\n        throw new IllegalArgumentException(\"Trailing backslash at end of input\");\n    }\n    return writer.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4cb581d4..d4eea163 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,36 +72,37 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = Character.codePointCount(input, 0, input.length());\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n+public static String unescape(String input) {\n+    StringWriter writer = new StringWriter(input.length());\n+    int inputLength = input.length();\n+    boolean escaped = false;\n+    for (int i = 0; i < inputLength; i++) {\n+        char ch = input.charAt(i);\n+        if (escaped) {\n+            switch (ch) {\n+                case 'n': writer.write('\\n'); break;\n+                case 't': writer.write('\\t'); break;\n+                case 'r': writer.write('\\r'); break;\n+                case 'b': writer.write('\\b'); break;\n+                case 'f': writer.write('\\f'); break;\n+                case '\\\\': writer.write('\\\\'); break;\n+                case '\\'': writer.write('\\''); break;\n+                case '\\\"': writer.write('\\\"'); break;\n+                default:\n+                    throw new IllegalArgumentException(\"Invalid escaped character at position \" + i + \": \\\\\" + ch);\n             }\n-            else {\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                    if (pos < len - 2) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n-                    } else {\n-                        pos++;\n-                    }\n-                }\n-                pos--;\n-            }\n-            pos++;\n+            escaped = false;\n+        } else if (ch == '\\\\') {\n+            escaped = true;\n+        } else {\n+            writer.write(ch);\n         }\n     }\n+    if (escaped) {\n+        throw new IllegalArgumentException(\"Trailing backslash at end of input\");\n+    }\n+    return writer.toString();\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "error: no suitable method found for translate(CharSequence,StringWriter)",
    "test_result": "ERROR"
}