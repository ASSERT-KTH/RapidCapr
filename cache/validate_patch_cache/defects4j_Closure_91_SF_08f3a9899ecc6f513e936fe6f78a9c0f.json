{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  // Check if the current node is a function.\n  if (n.isFunction()) {\n    JSDocInfo info = n.getJSDocInfo();\n    if (info != null && (info.isConstructor() || info.isInterface() \n        || info.hasThisType() || info.isOverride() || info.isEnumType())) {\n      return false;\n    }\n\n    if (parent != null && parent.isFunction() && parent.getFirstChild() != n) {\n      // The current node is inside a function, and it's not the first child of its parent. \n      return false;\n    } else if (NodeUtil.isPrototypeProperty(parent)) {\n      // The current node is inside an assignment to a prototype property.\n      return false;\n    } else {\n      // Check if the current node can be associated with a @this annotation.\n      Node fnNameNode = NodeUtil.getFunctionNameNode(n);\n      if (fnNameNode != null && !(NodeUtil.isObjectLitKey(parent) || parent.isCall())) {\n        return false;\n      }\n    }\n  } else if (n.isThis()) {\n    // Check if this is inside a function that contains a @this annotation.\n    Scope scope = t.getScope();\n    if (scope == null) {\n      t.report(n, CheckLevel.ERROR, THIS_BEFORE_SUPER,\n          DiagnosticType.error(\"compiler.bug\", \"No scope found for this node.\"));\n      return false;\n    }\n    Var thisVar = scope.getVar(\"this\");\n    if (thisVar == null || !thisVar.isThis()) {\n      t.report(n, CheckLevel.ERROR, THIS_BEFORE_SUPER);\n      return false;\n    }\n  } else if (NodeUtil.isExpressionNode(parent) && parent.isCall() && parent.getFirstChild() != n) {\n    // The current node is inside a call, and it's not the first child of its parent.\n    return false;\n  }\n\n  // If none of the above conditions hold, we can traverse the current node.\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..dee4072c 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,72 +79,50 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+  // Check if the current node is a function.\n+  if (n.isFunction()) {\n+    JSDocInfo info = n.getJSDocInfo();\n+    if (info != null && (info.isConstructor() || info.isInterface() \n+        || info.hasThisType() || info.isOverride() || info.isEnumType())) {\n+      return false;\n+    }\n \n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n+    if (parent != null && parent.isFunction() && parent.getFirstChild() != n) {\n+      // The current node is inside a function, and it's not the first child of its parent. \n+      return false;\n+    } else if (NodeUtil.isPrototypeProperty(parent)) {\n+      // The current node is inside an assignment to a prototype property.\n+      return false;\n+    } else {\n+      // Check if the current node can be associated with a @this annotation.\n+      Node fnNameNode = NodeUtil.getFunctionNameNode(n);\n+      if (fnNameNode != null && !(NodeUtil.isObjectLitKey(parent) || parent.isCall())) {\n         return false;\n       }\n-\n-      // Don't traverse functions that are getting lent to a prototype.\n     }\n-\n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-\n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-        }\n-      }\n+  } else if (n.isThis()) {\n+    // Check if this is inside a function that contains a @this annotation.\n+    Scope scope = t.getScope();\n+    if (scope == null) {\n+      t.report(n, CheckLevel.ERROR, THIS_BEFORE_SUPER,\n+          DiagnosticType.error(\"compiler.bug\", \"No scope found for this node.\"));\n+      return false;\n     }\n-\n-    return true;\n+    Var thisVar = scope.getVar(\"this\");\n+    if (thisVar == null || !thisVar.isThis()) {\n+      t.report(n, CheckLevel.ERROR, THIS_BEFORE_SUPER);\n+      return false;\n+    }\n+  } else if (NodeUtil.isExpressionNode(parent) && parent.isCall() && parent.getFirstChild() != n) {\n+    // The current node is inside a call, and it's not the first child of its parent.\n+    return false;\n   }\n \n+  // If none of the above conditions hold, we can traverse the current node.\n+  return true;\n+}\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n       compiler.report(t.makeError(n, level, GLOBAL_THIS));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}