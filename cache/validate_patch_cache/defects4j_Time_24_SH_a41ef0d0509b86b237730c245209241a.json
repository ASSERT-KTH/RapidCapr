{
    "patch": "            boolean weekRefinement = false;\n            for (int i = 0; i < count; i++) {\n                DateTimeField field = savedFields[i].iField;\n                DurationField rangeField = field.getDurationField();\n                if (rangeField != null && rangeField.getType() == DurationFieldType.weeks()) {\n                    weekRefinement = true;\n                    break;\n                }\n            }\n            if (weekRefinement) {\n                return computeMillis(resetFields, null);\n            } else {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..43bdb6fb 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,22 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            boolean weekRefinement = false;\n+            for (int i = 0; i < count; i++) {\n+                DateTimeField field = savedFields[i].iField;\n+                DurationField rangeField = field.getDurationField();\n+                if (rangeField != null && rangeField.getType() == DurationFieldType.weeks()) {\n+                    weekRefinement = true;\n+                    break;\n+                }\n+            }\n+            if (weekRefinement) {\n+                return computeMillis(resetFields, null);\n+            } else {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                throw e;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}