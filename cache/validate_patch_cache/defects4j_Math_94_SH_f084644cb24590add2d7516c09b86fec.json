{
    "patch": "    public static int gcd(int u, int v) {\n        if (u == 0) {\n            return Math.abs(v);\n        } else if (v == 0) {\n            return Math.abs(u);\n        }\n\n        u = Math.abs(u);\n        v = Math.abs(v);\n\n        int k = 0;\n        while (u != 0 && v != 0) {\n            if ((u & 1) == 0 && (v & 1) == 0) {  // u and v are even.\n                u /= 2;\n                v /= 2;\n                k++;\n            } else if ((u & 1) == 0) {  // u is even, v is odd.\n                u /= 2;\n            } else if ((v & 1) == 0) {  // u is odd, v is even.\n                v /= 2;\n            } else {  // u and v are odd.\n                if (u >= v) {\n                    u = (u - v) / 2;\n                } else {\n                    int t = u;\n                    u = (v - u) / 2;\n                    v = t;\n                }\n            }\n        }\n\n        return (int) (Math.pow(2, k) * ((u == 0) ? v : u));\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/util/MathUtils.java b/src/java/org/apache/commons/math/util/MathUtils.java\nindex c5342aeb3..e0f166c99 100644\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n@@ -409,7 +409,39 @@ public final class MathUtils {\n      * @since 1.1\n      */\n     public static int gcd(int u, int v) {\n-        if (u * v == 0) {\n+    public static int gcd(int u, int v) {\n+        if (u == 0) {\n+            return Math.abs(v);\n+        } else if (v == 0) {\n+            return Math.abs(u);\n+        }\n+\n+        u = Math.abs(u);\n+        v = Math.abs(v);\n+\n+        int k = 0;\n+        while (u != 0 && v != 0) {\n+            if ((u & 1) == 0 && (v & 1) == 0) {  // u and v are even.\n+                u /= 2;\n+                v /= 2;\n+                k++;\n+            } else if ((u & 1) == 0) {  // u is even, v is odd.\n+                u /= 2;\n+            } else if ((v & 1) == 0) {  // u is odd, v is even.\n+                v /= 2;\n+            } else {  // u and v are odd.\n+                if (u >= v) {\n+                    u = (u - v) / 2;\n+                } else {\n+                    int t = u;\n+                    u = (v - u) / 2;\n+                    v = t;\n+                }\n+            }\n+        }\n+\n+        return (int) (Math.pow(2, k) * ((u == 0) ? v : u));\n+    }\n             return (Math.abs(u) + Math.abs(v));\n         }\n         // keep u and v negative, as negative integers range down to",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}