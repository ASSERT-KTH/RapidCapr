{
    "patch": "    public Dfp multiply(final int x) {\n        if (isNaN()) {\n            return newInstance(getField(), qnan);\n        }\n\n        if (x == 0) {\n            return newInstance(getField(), 0.0);\n        }\n\n        int nsign = 1;\n        int v = x;\n        if (v < 0) {\n            nsign = -1;\n            v = -v;\n        }\n\n        Dfp a = newInstance(getField(), 1.0);\n        boolean added = false;\n\n        for (int i = 0; i < 32; i++) {\n            if ((v & 1) != 0) {\n                a = a.add(added ? this.add() : this);\n                added = true;\n            }\n            this.sqr();\n            v >>= 1;\n        }\n\n        return nsign == -1 ? newInstance(getField(), -1.0).multiply(a) : a;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..8bf6bb4ae 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,34 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+        if (isNaN()) {\n+            return newInstance(getField(), qnan);\n+        }\n+\n+        if (x == 0) {\n+            return newInstance(getField(), 0.0);\n+        }\n+\n+        int nsign = 1;\n+        int v = x;\n+        if (v < 0) {\n+            nsign = -1;\n+            v = -v;\n+        }\n+\n+        Dfp a = newInstance(getField(), 1.0);\n+        boolean added = false;\n+\n+        for (int i = 0; i < 32; i++) {\n+            if ((v & 1) != 0) {\n+                a = a.add(added ? this.add() : this);\n+                added = true;\n+            }\n+            this.sqr();\n+            v >>= 1;\n+        }\n+\n+        return nsign == -1 ? newInstance(getField(), -1.0).multiply(a) : a;\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}