{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    RealMatrix sqrtM;\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix v = dec.getV();\n    RealMatrix d = dec.getD();\n    int n = m.getRowDimension();\n    double[] sqrtEigenvalues = new double[n];\n    boolean hasNegativeEigenvalues = false;\n    for (int i = 0; i < n; i++) {\n        double eigenvalue = d.getEntry(i, i);\n        if (eigenvalue < 0.0) {\n            hasNegativeEigenvalues = true;\n            break;\n        }\n        sqrtEigenvalues[i] = Math.sqrt(eigenvalue);\n    }\n    if (hasNegativeEigenvalues) {\n        sqrtM = null;\n    } else {\n        RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEigenvalues);\n        RealMatrix sqrtDInverse = MatrixUtils.createRealDiagonalMatrix(\n            Arrays.stream(sqrtEigenvalues).map(x -> 1.0 / x).toArray());\n        RealMatrix sqrtDHalf = MatrixUtils.createRealDiagonalMatrix(\n            Arrays.stream(sqrtEigenvalues).map(Math::sqrt).toArray());\n        sqrtM = v.multiply(sqrtDHalf).multiply(sqrtDInverse).multiply(v.transpose());\n    }\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..7183184a2 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,32 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    RealMatrix sqrtM;\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix v = dec.getV();\n+    RealMatrix d = dec.getD();\n+    int n = m.getRowDimension();\n+    double[] sqrtEigenvalues = new double[n];\n+    boolean hasNegativeEigenvalues = false;\n+    for (int i = 0; i < n; i++) {\n+        double eigenvalue = d.getEntry(i, i);\n+        if (eigenvalue < 0.0) {\n+            hasNegativeEigenvalues = true;\n+            break;\n+        }\n+        sqrtEigenvalues[i] = Math.sqrt(eigenvalue);\n+    }\n+    if (hasNegativeEigenvalues) {\n+        sqrtM = null;\n+    } else {\n+        RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEigenvalues);\n+        RealMatrix sqrtDInverse = MatrixUtils.createRealDiagonalMatrix(\n+            Arrays.stream(sqrtEigenvalues).map(x -> 1.0 / x).toArray());\n+        RealMatrix sqrtDHalf = MatrixUtils.createRealDiagonalMatrix(\n+            Arrays.stream(sqrtEigenvalues).map(Math::sqrt).toArray());\n+        sqrtM = v.multiply(sqrtDHalf).multiply(sqrtDInverse).multiply(v.transpose());\n     }\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}