{
    "patch": "            if (!DateTimeZone.UTC.equals(this)) {\n                // second estimate, based on first and knowing the type of change\n                final long nextLocal = nextTransition(instantAdjusted);\n                final long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n                if (nextLocal != instantAdjusted && nextAdjusted != instantLocal - offsetAdjusted) {\n                    // cannot determine type of transition\n                    throw new IllegalArgumentException(\"The datetime zone id '\" + getID() +\n                            \"' contains an invalid transition from \" +\n                            new DateTime(instantAdjusted, this) + \" to \" +\n                            new DateTime(nextLocal, this) + \" and an error occurred whilst calculating \" +\n                            \"the zone offset from the result\");\n                }\n                if (nextLocal <= instantAdjusted) {\n                    // end of DST (with gap) or normal (no gap)\n                    if (offsetLocal > offsetAdjusted) {\n                        // gap is after instantAdjusted\n                        // rollback so that we are just before the gap\n                        return offsetLocal;\n                    }\n                } else {\n                    // start of DST (with overlap)\n                    if (offsetLocal >= offsetAdjusted) {\n                        // overlap is before instantAdjusted\n                        // advance so that we are just after the overlap\n                        return offsetAdjusted;\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..1988d64e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,32 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (!DateTimeZone.UTC.equals(this)) {\n+                // second estimate, based on first and knowing the type of change\n+                final long nextLocal = nextTransition(instantAdjusted);\n+                final long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+                if (nextLocal != instantAdjusted && nextAdjusted != instantLocal - offsetAdjusted) {\n+                    // cannot determine type of transition\n+                    throw new IllegalArgumentException(\"The datetime zone id '\" + getID() +\n+                            \"' contains an invalid transition from \" +\n+                            new DateTime(instantAdjusted, this) + \" to \" +\n+                            new DateTime(nextLocal, this) + \" and an error occurred whilst calculating \" +\n+                            \"the zone offset from the result\");\n+                }\n+                if (nextLocal <= instantAdjusted) {\n+                    // end of DST (with gap) or normal (no gap)\n+                    if (offsetLocal > offsetAdjusted) {\n+                        // gap is after instantAdjusted\n+                        // rollback so that we are just before the gap\n+                        return offsetLocal;\n+                    }\n+                } else {\n+                    // start of DST (with overlap)\n+                    if (offsetLocal >= offsetAdjusted) {\n+                        // overlap is before instantAdjusted\n+                        // advance so that we are just after the overlap\n+                        return offsetAdjusted;\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}