{
    "patch": "private void visitCall(NodeTraversal t, Node n) {\n  Node child = n.getFirstChild();\n  JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n  if (!childType.canBeCalled()) {\n    report(t, n, NOT_CALLABLE, childType.toString());\n    ensureTyped(t, n);\n    return;\n  }\n\n  // A couple of types can be called as if they were functions.\n  // If it is a function type, then validate parameters.\n  if (childType instanceof FunctionType) {\n    FunctionType functionType = (FunctionType) childType;\n\n    boolean isExtern = false;\n    JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n    if (functionJSDocInfo != null) {\n      Node scriptNode = functionJSDocInfo.getAssociatedNode().getOwnerDocument().getParentNode();\n      SourceFile file = getSourceFileOrNull(scriptNode.getSourceFileName());\n      isExtern = file != null && file.isExtern();\n    }\n\n    // Non-native constructors should not be called directly\n    // unless they specify a return type and are defined\n    // in an extern.\n    if (functionType.isConstructor() &&\n        !functionType.isNativeObjectType() &&\n        (functionType.getReturnType().isUnknownType() ||\n         functionType.getReturnType().isVoidType() ||\n          !isExtern)) {\n      report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n    }\n\n    // Functions with explicit 'this' types must be called in a GETPROP\n    // or GETELEM.\n    JSType thisType = functionType.getTypeOfThis();\n    if (thisType.isSpecific() && !isGetPropOrGetElem(n.getParent())) {\n       report(t, n, THIS_BEFORE_SUPER, thisType.toString());\n    }\n\n    visitParameterList(t, n, functionType);\n    ensureTyped(t, n, functionType.getReturnType());\n  } else {\n    ensureTyped(t, n);\n  }\n\n  // TODO: Add something to check for calls of RegExp objects, which is not\n  // supported by IE. Either say something about the return type or warn\n  // about the non-portability of the call or both.\n}\n\nprivate SourceFile getSourceFileOrNull(String filename) {\n  for (SourceFile sourceFile : compiler.getInputsById().values()) {\n    if (sourceFile.getOriginalPath().equals(filename)) {\n      return sourceFile;\n    }\n  }\n  return null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..bb34d4a0 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1541,53 +1541,66 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * scope chain to use in name lookups as well as error reporting.\n    * @param n The node being visited.\n    */\n-  private void visitCall(NodeTraversal t, Node n) {\n-    Node child = n.getFirstChild();\n-    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n+private void visitCall(NodeTraversal t, Node n) {\n+  Node child = n.getFirstChild();\n+  JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n \n-    if (!childType.canBeCalled()) {\n-      report(t, n, NOT_CALLABLE, childType.toString());\n-      ensureTyped(t, n);\n-      return;\n+  if (!childType.canBeCalled()) {\n+    report(t, n, NOT_CALLABLE, childType.toString());\n+    ensureTyped(t, n);\n+    return;\n+  }\n+\n+  // A couple of types can be called as if they were functions.\n+  // If it is a function type, then validate parameters.\n+  if (childType instanceof FunctionType) {\n+    FunctionType functionType = (FunctionType) childType;\n+\n+    boolean isExtern = false;\n+    JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n+    if (functionJSDocInfo != null) {\n+      Node scriptNode = functionJSDocInfo.getAssociatedNode().getOwnerDocument().getParentNode();\n+      SourceFile file = getSourceFileOrNull(scriptNode.getSourceFileName());\n+      isExtern = file != null && file.isExtern();\n     }\n \n-    // A couple of types can be called as if they were functions.\n-    // If it is a function type, then validate parameters.\n-    if (childType instanceof FunctionType) {\n-      FunctionType functionType = (FunctionType) childType;\n-\n-      boolean isExtern = false;\n-      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n-      if(functionJSDocInfo != null) {\n-        String sourceName = functionJSDocInfo.getSourceName();\n-        CompilerInput functionSource = compiler.getInput(sourceName);\n-        isExtern = functionSource.isExtern();\n-      }\n+    // Non-native constructors should not be called directly\n+    // unless they specify a return type and are defined\n+    // in an extern.\n+    if (functionType.isConstructor() &&\n+        !functionType.isNativeObjectType() &&\n+        (functionType.getReturnType().isUnknownType() ||\n+         functionType.getReturnType().isVoidType() ||\n+          !isExtern)) {\n+      report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+    }\n \n-      // Non-native constructors should not be called directly\n-      // unless they specify a return type and are defined\n-      // in an extern.\n-      if (functionType.isConstructor() &&\n-          !functionType.isNativeObjectType() &&\n-          (functionType.getReturnType().isUnknownType() ||\n-           functionType.getReturnType().isVoidType() ||\n-           !isExtern)) {\n-        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n-      }\n+    // Functions with explicit 'this' types must be called in a GETPROP\n+    // or GETELEM.\n+    JSType thisType = functionType.getTypeOfThis();\n+    if (thisType.isSpecific() && !isGetPropOrGetElem(n.getParent())) {\n+       report(t, n, THIS_BEFORE_SUPER, thisType.toString());\n+    }\n \n-      // Functions with explcit 'this' types must be called in a GETPROP\n-      // or GETELEM.\n+    visitParameterList(t, n, functionType);\n+    ensureTyped(t, n, functionType.getReturnType());\n+  } else {\n+    ensureTyped(t, n);\n+  }\n \n-      visitParameterList(t, n, functionType);\n-      ensureTyped(t, n, functionType.getReturnType());\n-    } else {\n-      ensureTyped(t, n);\n-    }\n+  // TODO: Add something to check for calls of RegExp objects, which is not\n+  // supported by IE. Either say something about the return type or warn\n+  // about the non-portability of the call or both.\n+}\n \n-    // TODO: Add something to check for calls of RegExp objects, which is not\n-    // supported by IE.  Either say something about the return type or warn\n-    // about the non-portability of the call or both.\n+private SourceFile getSourceFileOrNull(String filename) {\n+  for (SourceFile sourceFile : compiler.getInputsById().values()) {\n+    if (sourceFile.getOriginalPath().equals(filename)) {\n+      return sourceFile;\n+    }\n   }\n+  return null;\n+}\n \n   /**\n    * Visits the parameters of a CALL or a NEW node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}