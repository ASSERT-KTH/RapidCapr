{
    "patch": "                final long nextLocal = nextTransition(instantAdjusted);\n                final long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal == nextAdjusted) {\n                    return offsetAdjusted;\n                } else if (offsetLocal < offsetAdjusted) {\n                    final int nextOffset = getOffset(nextLocal);\n                    if (offsetLocal < nextOffset && nextOffset < offsetAdjusted) {\n                        return offsetLocal;\n                    }\n                } else {\n                    final int nextOffset = getOffset(nextLocal);\n                    if (offsetAdjusted < nextOffset && nextOffset < offsetLocal) {\n                        return offsetLocal;\n                    }\n                } ",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..ca86e8c4 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,21 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                final long nextLocal = nextTransition(instantAdjusted);\n+                final long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal == nextAdjusted) {\n+                    return offsetAdjusted;\n+                } else if (offsetLocal < offsetAdjusted) {\n+                    final int nextOffset = getOffset(nextLocal);\n+                    if (offsetLocal < nextOffset && nextOffset < offsetAdjusted) {\n+                        return offsetLocal;\n+                    }\n+                } else {\n+                    final int nextOffset = getOffset(nextLocal);\n+                    if (offsetAdjusted < nextOffset && nextOffset < offsetLocal) {\n+                        return offsetLocal;\n+                    }\n+                } \n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}