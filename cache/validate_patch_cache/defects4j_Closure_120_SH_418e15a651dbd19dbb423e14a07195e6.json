{
    "patch": "          Function function = block.getFunction();\n          List<BasicBlock> blocks = function.getBlocks();\n          int firstAssignmentIndex = references.indexOf(ref);\n          int lastAssignmentIndex = firstAssignmentIndex;\n          for (int i = firstAssignmentIndex + 1; i < size; i++) {\n            if (references.get(i).assignmentsMatch(ref)) {\n              lastAssignmentIndex = i;\n            } else {\n              break;\n            }\n          }\n          boolean[] seenBlocks = new boolean[blocks.size()];\n          for (int i = firstAssignmentIndex + 1; i <= lastAssignmentIndex; i++) {\n            int idx = blocks.indexOf(references.get(i).getBasicBlock());\n            if (idx >= 0) {\n              seenBlocks[idx] = true;\n            }\n          }\n\n          for (int i = firstAssignmentIndex + 1; i < lastAssignmentIndex; i++) {\n            int idx = blocks.indexOf(references.get(i).getBasicBlock());\n            if (idx >= 0 && !seenBlocks[idx]) {\n              return false;\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..fc145381 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,31 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          Function function = block.getFunction();\n+          List<BasicBlock> blocks = function.getBlocks();\n+          int firstAssignmentIndex = references.indexOf(ref);\n+          int lastAssignmentIndex = firstAssignmentIndex;\n+          for (int i = firstAssignmentIndex + 1; i < size; i++) {\n+            if (references.get(i).assignmentsMatch(ref)) {\n+              lastAssignmentIndex = i;\n+            } else {\n+              break;\n+            }\n+          }\n+          boolean[] seenBlocks = new boolean[blocks.size()];\n+          for (int i = firstAssignmentIndex + 1; i <= lastAssignmentIndex; i++) {\n+            int idx = blocks.indexOf(references.get(i).getBasicBlock());\n+            if (idx >= 0) {\n+              seenBlocks[idx] = true;\n+            }\n+          }\n+\n+          for (int i = firstAssignmentIndex + 1; i < lastAssignmentIndex; i++) {\n+            int idx = blocks.indexOf(references.get(i).getBasicBlock());\n+            if (idx >= 0 && !seenBlocks[idx]) {\n+              return false;\n+            }\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}