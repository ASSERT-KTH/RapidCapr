{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        boolean isEndOfMonth = false;\n        for (int i = 0; i < partial.size(); i++) {\n            if (i == fieldIndex) {\n                int currentValueToAdd = valueToAdd;\n                int currentYear = values[0];\n                int currentMonth = values[1];\n                int currentDay = values[2];\n\n                while (currentValueToAdd != 0) {\n                    int maxDayOfMonth = iChronology.getDaysInYearMonth(currentYear, currentMonth);\n                    if (currentValueToAdd > 0) {  // Add months and cap at the end of the month\n                        int monthVal = currentValueToAdd / maxDayOfMonth;\n                        if (monthVal == 0 && (currentMonth == 1 || currentMonth == 2) && currentYear % 4 == 0) {\n                            monthVal = -1; // the first day of March has passed\n                        }\n                        if (monthVal >= 0) {\n                            int dayDiff = (currentDay > maxDayOfMonth ? maxDayOfMonth : currentDay) - currentDay;\n                            currentDay = 0;\n                            currentMonth += monthVal;\n                            if (currentMonth > 12) {\n                                currentMonth -= 12;\n                                currentYear += 1;\n                            }\n\n                            if (dayDiff > 0) {\n                                currentValueToAdd -= dayDiff;\n                                currentDay = (currentDay + dayDiff) % maxDayOfMonth;\n                                if (currentDay == 0) {\n                                    currentDay = maxDayOfMonth;\n                                }\n                            }\n                        } else {\n                            int dayDiff = currentDay - ((currentMonth == 3) ? 29 : maxDayOfMonth);\n                            currentValueToAdd -= dayDiff;\n                            currentMonth -= 1;\n                            if (currentMonth < 1) {\n                                currentMonth += 12;\n                                currentYear -= 1;\n                            }\n                            currentDay = iChronology.getDaysInYearMonth(currentYear, currentMonth);\n                        }\n                    } else {  // Subtract months and cap at the end of the month\n                        int monthVal = currentValueToAdd / maxDayOfMonth - 1;  // subtracting 1 because the first day has passed\n                        if (monthVal == 0 && (currentMonth == 12 || currentMonth == 1) && currentYear % 4 == 0) {\n                            monthVal += 1; // add a month to account for the extra day in a leap year\n                        }\n                        if (monthVal <= 0) {\n                            int dayDiff = currentDay;\n                            currentMonth -= monthVal;\n                            if (currentMonth < 1) {\n                                currentMonth += 12;\n                                currentYear -= 1;\n                            }\n                            maxDayOfMonth = iChronology.getDaysInYearMonth(currentYear, currentMonth);\n                            currentDay = maxDayOfMonth;\n                            if (currentDay - dayDiff < 0) {\n                                currentValueToAdd += Math.abs(maxDayOfMonth - dayDiff - currentDay);\n                                currentDay = maxDayOfMonth;\n                            } else {\n                                currentDay -= dayDiff;\n                                currentValueToAdd += dayDiff;\n                            }\n                        } else {\n                            int dayDiff = currentDay - ((currentMonth == 3) ? 29 : maxDayOfMonth);\n                            currentValueToAdd -= dayDiff;\n                            currentMonth += monthVal;\n                            if (currentMonth > 12) {\n                                currentMonth -= 12;\n                                currentYear += 1;\n                            }\n                            currentDay = iChronology.getDaysInYearMonth(currentYear, currentMonth);\n                        }\n                    }\n                }\n                instant = iChronology.getDateTimeMillis(currentYear, currentMonth, currentDay, values[3], values[4], values[5], values[6]);\n            } else {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n        }\n\n        instant = add(instant, valueToAdd);\n\n        int[] result = iChronology.get(partial, instant);\n\n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..8535c014 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,105 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        boolean isEndOfMonth = false;\n+        for (int i = 0; i < partial.size(); i++) {\n+            if (i == fieldIndex) {\n+                int currentValueToAdd = valueToAdd;\n+                int currentYear = values[0];\n+                int currentMonth = values[1];\n+                int currentDay = values[2];\n+\n+                while (currentValueToAdd != 0) {\n+                    int maxDayOfMonth = iChronology.getDaysInYearMonth(currentYear, currentMonth);\n+                    if (currentValueToAdd > 0) {  // Add months and cap at the end of the month\n+                        int monthVal = currentValueToAdd / maxDayOfMonth;\n+                        if (monthVal == 0 && (currentMonth == 1 || currentMonth == 2) && currentYear % 4 == 0) {\n+                            monthVal = -1; // the first day of March has passed\n+                        }\n+                        if (monthVal >= 0) {\n+                            int dayDiff = (currentDay > maxDayOfMonth ? maxDayOfMonth : currentDay) - currentDay;\n+                            currentDay = 0;\n+                            currentMonth += monthVal;\n+                            if (currentMonth > 12) {\n+                                currentMonth -= 12;\n+                                currentYear += 1;\n+                            }\n+\n+                            if (dayDiff > 0) {\n+                                currentValueToAdd -= dayDiff;\n+                                currentDay = (currentDay + dayDiff) % maxDayOfMonth;\n+                                if (currentDay == 0) {\n+                                    currentDay = maxDayOfMonth;\n+                                }\n+                            }\n+                        } else {\n+                            int dayDiff = currentDay - ((currentMonth == 3) ? 29 : maxDayOfMonth);\n+                            currentValueToAdd -= dayDiff;\n+                            currentMonth -= 1;\n+                            if (currentMonth < 1) {\n+                                currentMonth += 12;\n+                                currentYear -= 1;\n+                            }\n+                            currentDay = iChronology.getDaysInYearMonth(currentYear, currentMonth);\n+                        }\n+                    } else {  // Subtract months and cap at the end of the month\n+                        int monthVal = currentValueToAdd / maxDayOfMonth - 1;  // subtracting 1 because the first day has passed\n+                        if (monthVal == 0 && (currentMonth == 12 || currentMonth == 1) && currentYear % 4 == 0) {\n+                            monthVal += 1; // add a month to account for the extra day in a leap year\n+                        }\n+                        if (monthVal <= 0) {\n+                            int dayDiff = currentDay;\n+                            currentMonth -= monthVal;\n+                            if (currentMonth < 1) {\n+                                currentMonth += 12;\n+                                currentYear -= 1;\n+                            }\n+                            maxDayOfMonth = iChronology.getDaysInYearMonth(currentYear, currentMonth);\n+                            currentDay = maxDayOfMonth;\n+                            if (currentDay - dayDiff < 0) {\n+                                currentValueToAdd += Math.abs(maxDayOfMonth - dayDiff - currentDay);\n+                                currentDay = maxDayOfMonth;\n+                            } else {\n+                                currentDay -= dayDiff;\n+                                currentValueToAdd += dayDiff;\n+                            }\n+                        } else {\n+                            int dayDiff = currentDay - ((currentMonth == 3) ? 29 : maxDayOfMonth);\n+                            currentValueToAdd -= dayDiff;\n+                            currentMonth += monthVal;\n+                            if (currentMonth > 12) {\n+                                currentMonth -= 12;\n+                                currentYear += 1;\n+                            }\n+                            currentDay = iChronology.getDaysInYearMonth(currentYear, currentMonth);\n+                        }\n+                    }\n+                }\n+                instant = iChronology.getDateTimeMillis(currentYear, currentMonth, currentDay, values[3], values[4], values[5], values[6]);\n+            } else {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+\n+        instant = add(instant, valueToAdd);\n+\n+        int[] result = iChronology.get(partial, instant);\n+\n+        return result;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}