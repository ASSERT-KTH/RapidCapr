{
    "patch": "                // adjust instantAdjusted and recalc the offset again\n                final long instantAdjusted2 = instantLocal - offsetAdjusted;\n                final int offsetAdjusted2 = getOffset(instantAdjusted2);\n                // if the offsets still differ, we must be near a DST boundary\n                if (offsetLocal != offsetAdjusted2) {\n                    // we need to ensure that time is always after the DST gap\n                    // this happens naturally for positive offsets, but not for negative\n                    if ((offsetLocal - offsetAdjusted2) < 0) {\n                        long nextLocal = nextTransition(instantAdjusted2);\n                        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted2);\n                        if (nextLocal != nextAdjusted) {\n                            return offsetLocal;\n                        }\n                    }\n                }\n                return offsetAdjusted2;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..d63672a5 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,22 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // adjust instantAdjusted and recalc the offset again\n+                final long instantAdjusted2 = instantLocal - offsetAdjusted;\n+                final int offsetAdjusted2 = getOffset(instantAdjusted2);\n+                // if the offsets still differ, we must be near a DST boundary\n+                if (offsetLocal != offsetAdjusted2) {\n+                    // we need to ensure that time is always after the DST gap\n+                    // this happens naturally for positive offsets, but not for negative\n+                    if ((offsetLocal - offsetAdjusted2) < 0) {\n+                        long nextLocal = nextTransition(instantAdjusted2);\n+                        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted2);\n+                        if (nextLocal != nextAdjusted) {\n+                            return offsetLocal;\n+                        }\n+                    }\n+                }\n+                return offsetAdjusted2;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}