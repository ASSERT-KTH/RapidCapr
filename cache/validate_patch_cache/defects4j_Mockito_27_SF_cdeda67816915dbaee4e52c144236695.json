{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\n    try {\n        mock = (T) initializeOrGetFromCache(mock);\n    } catch (ClassCastException ignored) {\n    }\n\n    Object target = mock;\n    if (mock instanceof EnhancedObject) {\n        target = ((EnhancedObject)mock).getDelegate();\n    }\n\n    if (target instanceof MockitoDecorator) {\n        ((MockitoDecorator) target).setMockitoInterceptor(newFilter);\n    } else if (target instanceof Factory) {\n        Factory factory = (Factory) target;\n        Callback[] callbacks = new Callback[factory.getCallbacks().length + 1];\n        callbacks[0] = newFilter;\n        System.arraycopy(factory.getCallbacks(), 0, callbacks, 1, factory.getCallbacks().length);\n        factory.setCallbacks(callbacks);       \n    } else {\n        ((byte[]) target)[getCallbacksOffset(oldMockHandler.getClassId())] = newFilter;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..9bb87e6b5 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,35 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+    try {\n+        mock = (T) initializeOrGetFromCache(mock);\n+    } catch (ClassCastException ignored) {\n+    }\n+\n+    Object target = mock;\n+    if (mock instanceof EnhancedObject) {\n+        target = ((EnhancedObject)mock).getDelegate();\n+    }\n+\n+    if (target instanceof MockitoDecorator) {\n+        ((MockitoDecorator) target).setMockitoInterceptor(newFilter);\n+    } else if (target instanceof Factory) {\n+        Factory factory = (Factory) target;\n+        Callback[] callbacks = new Callback[factory.getCallbacks().length + 1];\n+        callbacks[0] = newFilter;\n+        System.arraycopy(factory.getCallbacks(), 0, callbacks, 1, factory.getCallbacks().length);\n+        factory.setCallbacks(callbacks);       \n+    } else {\n+        ((byte[]) target)[getCallbacksOffset(oldMockHandler.getClassId())] = newFilter;\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}