{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node onlyChild = n.getFirstChild();\n\n    // Do not fold EXPR_RESULTs if the parent is a function and the child is a string.\n    if (onlyChild.getType() == Token.EXPR_RESULT &&\n        onlyChild.hasOneChild() &&\n        onlyChild.getFirstChild().getType() == Token.STRING &&\n        NodeUtil.isFunction(n.getParent())) {\n      return false;\n    }\n\n    // Do not fold EXPR_RESULT if parent is EXPR_VOID or IF.\n    if (n.getParent() != null && \n        (n.getParent().getType() == Token.EXPR_VOID ||\n         n.getParent().getType() == Token.IF)) {\n      return false;\n    }\n\n    // Do not fold empty statements.\n    if (onlyChild.getType() == Token.EMPTY) {\n      return false;\n    }\n\n    // Do not fold block that is a child of a FOR or WHILE loop and its statement\n    // does NOT have side effects or does have side effects and the parent loop\n    // has a block or several statements\n    if (n.getParent() != null &&\n        ((n.getParent().getType() == Token.FOR || n.getParent().getType() == Token.WHILE) &&\n        (NodeUtil.nodeHasNoSideEffects(onlyChild) ||\n        (NodeUtil.hasOneChildOfType(n.getParent(), Token.BLOCK) ||\n        n.getParent().getChildCount() > 1)))) {\n      return false;\n    }\n\n    // Do not fold block with a single child that has a DIRECTIVES child\n    if (NodeUtil.hasOneChildOfType(n, Token.DIRECTIVES)) {\n      return false;\n    }\n\n    return NodeUtil.isExpressionNode(onlyChild);\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..0064cb52 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,52 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    Node onlyChild = n.getFirstChild();\n+\n+    // Do not fold EXPR_RESULTs if the parent is a function and the child is a string.\n+    if (onlyChild.getType() == Token.EXPR_RESULT &&\n+        onlyChild.hasOneChild() &&\n+        onlyChild.getFirstChild().getType() == Token.STRING &&\n+        NodeUtil.isFunction(n.getParent())) {\n+      return false;\n     }\n \n-    return false;\n+    // Do not fold EXPR_RESULT if parent is EXPR_VOID or IF.\n+    if (n.getParent() != null && \n+        (n.getParent().getType() == Token.EXPR_VOID ||\n+         n.getParent().getType() == Token.IF)) {\n+      return false;\n+    }\n+\n+    // Do not fold empty statements.\n+    if (onlyChild.getType() == Token.EMPTY) {\n+      return false;\n+    }\n+\n+    // Do not fold block that is a child of a FOR or WHILE loop and its statement\n+    // does NOT have side effects or does have side effects and the parent loop\n+    // has a block or several statements\n+    if (n.getParent() != null &&\n+        ((n.getParent().getType() == Token.FOR || n.getParent().getType() == Token.WHILE) &&\n+        (NodeUtil.nodeHasNoSideEffects(onlyChild) ||\n+        (NodeUtil.hasOneChildOfType(n.getParent(), Token.BLOCK) ||\n+        n.getParent().getChildCount() > 1)))) {\n+      return false;\n+    }\n+\n+    // Do not fold block with a single child that has a DIRECTIVES child\n+    if (NodeUtil.hasOneChildOfType(n, Token.DIRECTIVES)) {\n+      return false;\n+    }\n+\n+    return NodeUtil.isExpressionNode(onlyChild);\n   }\n \n+  return false;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}