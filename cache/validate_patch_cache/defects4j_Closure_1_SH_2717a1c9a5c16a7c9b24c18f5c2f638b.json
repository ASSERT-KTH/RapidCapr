{
    "patch": "    // Find the maximum arg index that is actually used (based on which\n    // arguments are referenced by this or inner scopes.)\n    int maxUsedArgIndex;\n    for (maxUsedArgIndex = argList.getChildCount() - 1;\n        maxUsedArgIndex >= 0; maxUsedArgIndex--) {\n      Var var = fnScope.getVar(argList.getChildAtIndex(maxUsedArgIndex).getString());\n      if (referenced.contains(var)) {\n        break;\n      }\n    }\n\n    if (maxUsedArgIndex == argList.getChildCount() - 1) {\n      // Optimization was a no-op.\n      return;\n    }\n\n    // Remove unused args from call sites if allowed to modify them.\n    boolean optimizeCallSites = modifyCallSites && callSiteOptimizer.optimize(fnScope, referenced);\n    if (!modifyCallSites || !optimizeCallSites) {\n      // Remove unused args from the end of the list.\n      while (argList.getChildCount() > maxUsedArgIndex + 1) {\n        argList.removeChildAt(argList.getChildCount() - 1);\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..8e3c60f5 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,29 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Find the maximum arg index that is actually used (based on which\n+    // arguments are referenced by this or inner scopes.)\n+    int maxUsedArgIndex;\n+    for (maxUsedArgIndex = argList.getChildCount() - 1;\n+        maxUsedArgIndex >= 0; maxUsedArgIndex--) {\n+      Var var = fnScope.getVar(argList.getChildAtIndex(maxUsedArgIndex).getString());\n+      if (referenced.contains(var)) {\n+        break;\n+      }\n+    }\n+\n+    if (maxUsedArgIndex == argList.getChildCount() - 1) {\n+      // Optimization was a no-op.\n+      return;\n+    }\n+\n+    // Remove unused args from call sites if allowed to modify them.\n+    boolean optimizeCallSites = modifyCallSites && callSiteOptimizer.optimize(fnScope, referenced);\n+    if (!modifyCallSites || !optimizeCallSites) {\n+      // Remove unused args from the end of the list.\n+      while (argList.getChildCount() > maxUsedArgIndex + 1) {\n+        argList.removeChildAt(argList.getChildCount() - 1);\n+        compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}