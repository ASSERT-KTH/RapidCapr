{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException(\"Invalid arguments in Gamma.regularizedGammaP\");\n    }\n    double result = upperIncompleteGammaFraction(a, x);\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * result;\n}\n\nprivate static double upperIncompleteGammaFraction(double a, double x) {\n    double eps = 10e-15;\n    double fpmin = 10e-30;\n    double gln = logGamma(a);\n    double b = x + 1 - a;\n    double c = 1 / fpmin;\n    double d = 1 / b;\n    double h = d;\n    int i, k;\n    double an, ana, anf;\n    double result, error;\n\n    for (i = 1; i <= 100; i++) {\n        an = -i * (i - a);\n        b += 2;\n        d = an * d + b;\n        if (Math.abs(d) < fpmin) {\n            d = fpmin;\n        }\n        c = b + an / c;\n        if (Math.abs(c) < fpmin) {\n            c = fpmin;\n        }\n        d = 1 / d;\n        h *= d * c;\n        an = -((i - a) * i);\n        ana = an * a;\n        d = ana * d + b;\n        if (Math.abs(d) < fpmin) {\n            d = fpmin;\n        }\n        c = b + an / c;\n        if (Math.abs(c) < fpmin) {\n            c = fpmin;\n        }\n        d = 1 / d;\n        anf = h * d * c;\n        result = anf * Math.exp(-x + a * Math.log(x) - gln);\n        error = result - result * eps;\n        if (anf <= error || Double.isNaN(error)) {\n            return result;\n        }\n        h = anf;\n    }\n    throw new RuntimeException(\"Gamma regularized incomplete gamma fraction failed to converge\");\n}\n\nprivate static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 101.19539853003;\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..74768892d 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,66 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException(\"Invalid arguments in Gamma.regularizedGammaP\");\n+    }\n+    double result = upperIncompleteGammaFraction(a, x);\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * result;\n+}\n+\n+private static double upperIncompleteGammaFraction(double a, double x) {\n+    double eps = 10e-15;\n+    double fpmin = 10e-30;\n+    double gln = logGamma(a);\n+    double b = x + 1 - a;\n+    double c = 1 / fpmin;\n+    double d = 1 / b;\n+    double h = d;\n+    int i, k;\n+    double an, ana, anf;\n+    double result, error;\n+\n+    for (i = 1; i <= 100; i++) {\n+        an = -i * (i - a);\n+        b += 2;\n+        d = an * d + b;\n+        if (Math.abs(d) < fpmin) {\n+            d = fpmin;\n+        }\n+        c = b + an / c;\n+        if (Math.abs(c) < fpmin) {\n+            c = fpmin;\n+        }\n+        d = 1 / d;\n+        h *= d * c;\n+        an = -((i - a) * i);\n+        ana = an * a;\n+        d = ana * d + b;\n+        if (Math.abs(d) < fpmin) {\n+            d = fpmin;\n+        }\n+        c = b + an / c;\n+        if (Math.abs(c) < fpmin) {\n+            c = fpmin;\n+        }\n+        d = 1 / d;\n+        anf = h * d * c;\n+        result = anf * Math.exp(-x + a * Math.log(x) - gln);\n+        error = result - result * eps;\n+        if (anf <= error || Double.isNaN(error)) {\n+            return result;\n+        }\n+        h = anf;\n+    }\n+    throw new RuntimeException(\"Gamma regularized incomplete gamma fraction failed to converge\");\n+}\n+\n+private static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 101.19539853003;\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}