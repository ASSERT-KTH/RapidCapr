{
    "patch": "  private JSType unifyFunType(JSType that) {\n    if (that instanceof FunctionType) {\n      FunctionTypeBuilder builder = new FunctionTypeBuilder();\n      builder.addRetType(this);\n      FunctionType thisFunType = (FunctionType) this;\n      FunctionType thatFunType = (FunctionType) that;\n      if (thisFunType.hasRestFormals() && thatFunType.hasRestFormals()) {\n        builder.setHasRestFormals(true);\n      }\n      builder.addFormals(thisFunType.getParameters());\n      List<JSType> thatFormals = thatFunType.getParameters();\n      for (int i = 0; i < thatFormals.size(); i++) {\n        JSType thisFormal =\n            i < thisFunType.getRequiredArity()\n                ? thisFunType.getParameterType(i)\n                : thisFunType.getRestFormalsType();\n        JSType thatFormal = thatFormals.get(i);\n        builder.addFormal(unifyWithSuperType(thisFormal, thatFormal));\n      }\n      if (thatFunType.isReturnTypeInferred() && thisFunType.isReturnTypeInferred()) {\n        builder.setInferredReturnType();\n      } else {\n        builder.addRetType(\n            unifyWithSuperType(\n                thisFunType.getReturnType(), thatFunType.getReturnType()));\n      }\n      return builder.buildFunction();\n    } else {\n      return null;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..a1df5363 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -288,7 +288,37 @@ public class UnionType extends JSType {\n       builder.addAlternate(that);\n     }\n     JSType result = builder.build();\n-    if (result != null) {\n+  private JSType unifyFunType(JSType that) {\n+    if (that instanceof FunctionType) {\n+      FunctionTypeBuilder builder = new FunctionTypeBuilder();\n+      builder.addRetType(this);\n+      FunctionType thisFunType = (FunctionType) this;\n+      FunctionType thatFunType = (FunctionType) that;\n+      if (thisFunType.hasRestFormals() && thatFunType.hasRestFormals()) {\n+        builder.setHasRestFormals(true);\n+      }\n+      builder.addFormals(thisFunType.getParameters());\n+      List<JSType> thatFormals = thatFunType.getParameters();\n+      for (int i = 0; i < thatFormals.size(); i++) {\n+        JSType thisFormal =\n+            i < thisFunType.getRequiredArity()\n+                ? thisFunType.getParameterType(i)\n+                : thisFunType.getRestFormalsType();\n+        JSType thatFormal = thatFormals.get(i);\n+        builder.addFormal(unifyWithSuperType(thisFormal, thatFormal));\n+      }\n+      if (thatFunType.isReturnTypeInferred() && thisFunType.isReturnTypeInferred()) {\n+        builder.setInferredReturnType();\n+      } else {\n+        builder.addRetType(\n+            unifyWithSuperType(\n+                thisFunType.getReturnType(), thatFunType.getReturnType()));\n+      }\n+      return builder.buildFunction();\n+    } else {\n+      return null;\n+    }\n+  }\n       return result;\n     } else if (this.isObject() && that.isObject()) {\n       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}