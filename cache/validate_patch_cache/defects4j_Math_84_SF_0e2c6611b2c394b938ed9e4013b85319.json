{
    "patch": "    private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original,\n                                                   final double coeff,\n                                                   final Comparator<RealPointValuePair> comparator,\n                                                   final boolean modifySimplex) {\n        final int dim = original[0].getPointRef().length;\n        final RealPointValuePair[] evaluations = new RealPointValuePair[dim + 1];\n        for (int i = 0; i < dim + 1; i++) {\n            final double[] params = new double[dim];\n            for (int j = 0; j < dim; j++) {\n                double value;\n                if (modifySimplex) {\n                    value = original[i].getPoint()[j] + coeff * (original[i == 0 ? 0 : i].getPoint()[j] - original[i].getPoint()[j]);\n                } else {\n                    value = original[i].getPointRef()[j] + coeff * (original[i == 0 ? 0 : i].getPointRef()[j] - original[i].getPointRef()[j]);\n                }\n                params[j] = value;\n            }\n\n            final double value = computeObjectiveValue(params);\n            evaluations[i] = new RealPointValuePair(params, value);\n        }\n\n        Arrays.sort(evaluations, comparator);\n        return evaluations[0];",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..4ae847722 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,30 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+    private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original,\n+                                                   final double coeff,\n+                                                   final Comparator<RealPointValuePair> comparator,\n+                                                   final boolean modifySimplex) {\n+        final int dim = original[0].getPointRef().length;\n+        final RealPointValuePair[] evaluations = new RealPointValuePair[dim + 1];\n+        for (int i = 0; i < dim + 1; i++) {\n+            final double[] params = new double[dim];\n+            for (int j = 0; j < dim; j++) {\n+                double value;\n+                if (modifySimplex) {\n+                    value = original[i].getPoint()[j] + coeff * (original[i == 0 ? 0 : i].getPoint()[j] - original[i].getPoint()[j]);\n+                } else {\n+                    value = original[i].getPointRef()[j] + coeff * (original[i == 0 ? 0 : i].getPointRef()[j] - original[i].getPointRef()[j]);\n                 }\n-\n-                return;\n-\n-            }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+                params[j] = value;\n             }\n \n+            final double value = computeObjectiveValue(params);\n+            evaluations[i] = new RealPointValuePair(params, value);\n         }\n \n-    }\n+        Arrays.sort(evaluations, comparator);\n+        return evaluations[0];\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}