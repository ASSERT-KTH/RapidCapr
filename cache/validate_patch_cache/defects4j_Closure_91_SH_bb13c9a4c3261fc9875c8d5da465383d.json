{
    "patch": " if (n.getJSDocInfo() != null &&\n          (n.getJSDocInfo().hasThisType() ||\n           n.getJSDocInfo().isOverride() ||\n           n.getJSDocInfo().isConstructor() ||\n           n.getJSDocInfo().isInterface())) {\n        return false;\n      }\n\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        if (NodeUtil.isGet(lhs) &&\n            lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        // Handle deeply nested assignments a.b.c = function() { };\n        while (NodeUtil.isGet(lhs) && !NodeUtil.isName(lhs)) {\n          lhs = lhs.getFirstChild();\n          if (lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }\n\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..4edd5ce7 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,30 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+ if (n.getJSDocInfo() != null &&\n+          (n.getJSDocInfo().hasThisType() ||\n+           n.getJSDocInfo().isOverride() ||\n+           n.getJSDocInfo().isConstructor() ||\n+           n.getJSDocInfo().isInterface())) {\n+        return false;\n+      }\n+\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        if (NodeUtil.isGet(lhs) &&\n+            lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+        // Handle deeply nested assignments a.b.c = function() { };\n+        while (NodeUtil.isGet(lhs) && !NodeUtil.isName(lhs)) {\n+          lhs = lhs.getFirstChild();\n+          if (lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n+      }\n+\n+      return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "junit.framework.AssertionFailedError: There should be one error. expected:<1> but was:<0>",
    "test_result": "FAIL"
}