{
    "patch": "    \n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node cursor = argList.getFirstChild();\n      boolean changed = false;\n      while (cursor != null && !referenced.contains(fnScope.getVar(cursor.getString()))) {\n        argList.removeChild(cursor);\n        changed = true;\n        compiler.reportChangeToEnclosingScope(argList);\n        cursor = cursor.getNext();\n      }\n\n      if (changed) {\n        compiler.reportChangeToEnclosingScope(argList);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..cb1ea28c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,23 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    \n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node cursor = argList.getFirstChild();\n+      boolean changed = false;\n+      while (cursor != null && !referenced.contains(fnScope.getVar(cursor.getString()))) {\n+        argList.removeChild(cursor);\n+        changed = true;\n+        compiler.reportChangeToEnclosingScope(argList);\n+        cursor = cursor.getNext();\n+      }\n+\n+      if (changed) {\n+        compiler.reportChangeToEnclosingScope(argList);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}