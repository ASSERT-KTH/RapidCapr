{
    "patch": "      \n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n      \n      if (n.getType() == Token.FUNCTION || \n          n.getType() == Token.VAR || \n          n.getType() == Token.LET || \n          n.getType() == Token.CONST) {\n        declareSymbols(n);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..6e5bd3ae 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,6 +1448,7 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n+      \n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n@@ -1463,6 +1464,12 @@ final class TypedScopeCreator implements ScopeCreator {\n           defineVar(n, parent);\n           break;\n       }\n+      \n+      if (n.getType() == Token.FUNCTION || \n+          n.getType() == Token.VAR || \n+          n.getType() == Token.LET || \n+          n.getType() == Token.CONST) {\n+        declareSymbols(n);\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}