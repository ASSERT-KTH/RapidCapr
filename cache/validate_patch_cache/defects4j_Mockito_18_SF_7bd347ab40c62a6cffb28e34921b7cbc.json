{
    "patch": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Iterator;\n\npublic class TestClass {\n\n    // Method that processes input stream and returns an Iterable object\n    public Iterable<String> processInput(InputStream inputStream) throws IOException {\n        Iterator<String> iterator = new InputIterator(inputStream);\n        return new Iterable<String>() {\n            @Override\n            public Iterator<String> iterator() {\n                return iterator;\n            }\n        };\n    }\n\n    // Inner class that implements Iterator for an InputStream\n    private class InputIterator implements Iterator<String> {\n        private InputStream inputStream;\n        private StringBuilder stringBuilder;\n\n        public InputIterator(InputStream inputStream) {\n            this.inputStream = inputStream;\n            this.stringBuilder = new StringBuilder();\n        }\n\n        @Override\n        public boolean hasNext() {\n            try {\n                int in = inputStream.read();\n                while (in != -1 && in != '\\n') {\n                    stringBuilder.append((char)in);\n                    in = inputStream.read();\n                }\n            } catch (IOException e) {\n                return false;\n            }\n            return stringBuilder.length() > 0;\n        }\n\n        @Override\n        public String next() {\n            String nextLine = stringBuilder.toString();\n            stringBuilder = new StringBuilder();\n            return nextLine;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..41db82823 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,55 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Iterator;\n+\n+public class TestClass {\n+\n+    // Method that processes input stream and returns an Iterable object\n+    public Iterable<String> processInput(InputStream inputStream) throws IOException {\n+        Iterator<String> iterator = new InputIterator(inputStream);\n+        return new Iterable<String>() {\n+            @Override\n+            public Iterator<String> iterator() {\n+                return iterator;\n+            }\n+        };\n+    }\n+\n+    // Inner class that implements Iterator for an InputStream\n+    private class InputIterator implements Iterator<String> {\n+        private InputStream inputStream;\n+        private StringBuilder stringBuilder;\n+\n+        public InputIterator(InputStream inputStream) {\n+            this.inputStream = inputStream;\n+            this.stringBuilder = new StringBuilder();\n+        }\n+\n+        @Override\n+        public boolean hasNext() {\n+            try {\n+                int in = inputStream.read();\n+                while (in != -1 && in != '\\n') {\n+                    stringBuilder.append((char)in);\n+                    in = inputStream.read();\n+                }\n+            } catch (IOException e) {\n+                return false;\n+            }\n+            return stringBuilder.length() > 0;\n+        }\n+\n+        @Override\n+        public String next() {\n+            String nextLine = stringBuilder.toString();\n+            stringBuilder = new StringBuilder();\n+            return nextLine;\n+        }\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}