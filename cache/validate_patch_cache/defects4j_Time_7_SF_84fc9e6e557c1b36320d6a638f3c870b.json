{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = instant.getChronology();\n    DateTimeZone zone = chrono.getZone();\n\n    DateTimeParserBucket bucket;\n    if (iZone != null) {\n        zone = iZone;\n        bucket = new DateTimeParserBucket(0L, chrono.withZone(zone),\n                iLocale, iPivotYear, null, zone);\n    } else {\n        bucket = new DateTimeParserBucket(\n                0L, chrono, iLocale, iPivotYear, null);\n    }\n\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos < 0) {\n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iZone != null) {\n            instant.setZone(iZone);\n        } else if (bucket.getZone() != null) {\n            instant.setZone(bucket.getZone());\n        }\n        if (bucket.getOffsetInteger() != null && iOffsetParsed) {\n            // Note that we have to use the parsed offset as-is,\n            // without any adjustment for the current instant.\n            zone = DateTimeZone.forOffsetMillis(\n                    bucket.getOffsetInteger().intValue());\n            instant.setZone(zone);\n        }\n    } else if (iParseWithOffset) {\n        // Remainder has to adjust using the parsed fields and the zone\n        instant.setMillis(bucket.computeMillis(true, text));\n        if (iZone != null) {\n            instant.setZone(iZone);\n        } else if (bucket.getZone() != null) {\n            instant.setZone(bucket.getZone());\n        }\n        if (bucket.getOffsetInteger() != null && iOffsetParsed) {\n            zone = DateTimeZone.forOffsetMillis(\n                    bucket.getOffsetInteger().intValue());\n            instant.setZone(zone);\n        }\n\n        // Finally, adjust using parsed time zone and local zone\n        if (zone != null) {\n            chrono = chrono.withZone(zone);\n            instant.setChronology(chrono);\n        }\n        long instantLocal = instant.getMillis();\n        int offset = zone != null ? zone.getOffsetFromLocal(instantLocal) : 0;\n        instant.setMillis(instantLocal + offset);\n\n    } else {\n        // We need to adjust if we have a parsed time zone\n        if (bucket.getZone() != null) {\n            zone = bucket.getZone();\n            chrono = chrono.withZone(zone);\n            instant.setChronology(chrono);\n        }\n\n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iZone != null) {\n            instant.setZone(iZone);\n        } else if (bucket.getZone() != null) {\n            instant.setZone(bucket.getZone());\n        }\n    }\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..3cb82d79 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,80 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = instant.getChronology();\n+    DateTimeZone zone = chrono.getZone();\n+\n+    DateTimeParserBucket bucket;\n+    if (iZone != null) {\n+        zone = iZone;\n+        bucket = new DateTimeParserBucket(0L, chrono.withZone(zone),\n+                iLocale, iPivotYear, null, zone);\n+    } else {\n+        bucket = new DateTimeParserBucket(\n+                0L, chrono, iLocale, iPivotYear, null);\n+    }\n+\n+    int newPos = parser.parseInto(bucket, text, position);\n+    if (newPos < 0) {\n         instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+        if (iZone != null) {\n+            instant.setZone(iZone);\n         } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+            instant.setZone(bucket.getZone());\n+        }\n+        if (bucket.getOffsetInteger() != null && iOffsetParsed) {\n+            // Note that we have to use the parsed offset as-is,\n+            // without any adjustment for the current instant.\n+            zone = DateTimeZone.forOffsetMillis(\n+                    bucket.getOffsetInteger().intValue());\n+            instant.setZone(zone);\n         }\n-        instant.setChronology(chrono);\n+    } else if (iParseWithOffset) {\n+        // Remainder has to adjust using the parsed fields and the zone\n+        instant.setMillis(bucket.computeMillis(true, text));\n         if (iZone != null) {\n             instant.setZone(iZone);\n+        } else if (bucket.getZone() != null) {\n+            instant.setZone(bucket.getZone());\n+        }\n+        if (bucket.getOffsetInteger() != null && iOffsetParsed) {\n+            zone = DateTimeZone.forOffsetMillis(\n+                    bucket.getOffsetInteger().intValue());\n+            instant.setZone(zone);\n+        }\n+\n+        // Finally, adjust using parsed time zone and local zone\n+        if (zone != null) {\n+            chrono = chrono.withZone(zone);\n+            instant.setChronology(chrono);\n+        }\n+        long instantLocal = instant.getMillis();\n+        int offset = zone != null ? zone.getOffsetFromLocal(instantLocal) : 0;\n+        instant.setMillis(instantLocal + offset);\n+\n+    } else {\n+        // We need to adjust if we have a parsed time zone\n+        if (bucket.getZone() != null) {\n+            zone = bucket.getZone();\n+            chrono = chrono.withZone(zone);\n+            instant.setChronology(chrono);\n+        }\n+\n+        instant.setMillis(bucket.computeMillis(false, text));\n+        if (iZone != null) {\n+            instant.setZone(iZone);\n+        } else if (bucket.getZone() != null) {\n+            instant.setZone(bucket.getZone());\n         }\n-        return newPos;\n     }\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: no suitable constructor found for DateTimeParserBucket(long,Chronology,Locale,Integer,<null>,DateTimeZone)",
    "test_result": "ERROR"
}