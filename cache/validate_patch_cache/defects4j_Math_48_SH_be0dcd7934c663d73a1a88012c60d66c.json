{
    "patch": "            // Detect early that algorithm is stuck, instead of waiting\n            // for the maximum number of iterations to be exceeded.\n            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                     atol)) {\n                switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    return inverted ? x1 : x0;\n                case RIGHT_SIDE:\n                    return inverted ? x0 : x1;\n                case BELOW_SIDE:\n                    return (f1 <= 0) ? x1 : x0;\n                case ABOVE_SIDE:\n                    return (f1 >= 0) ? x1 : x0;\n                default:\n                    throw new MathInternalError();\n                }\n            }\n\n            // Throw an exception when the method is stuck.\n            if (maxEval-- <= 0) {\n                throw new ConvergenceException(LocalizedFormats.SIMPLE_COMPLEXITY_EXCEEDED,\n                                               getMaxEvaluations());\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..9c0324bdd 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,32 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+            // Detect early that algorithm is stuck, instead of waiting\n+            // for the maximum number of iterations to be exceeded.\n+            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n+                                                     atol)) {\n+                switch (allowed) {\n+                case ANY_SIDE:\n+                    return x1;\n+                case LEFT_SIDE:\n+                    return inverted ? x1 : x0;\n+                case RIGHT_SIDE:\n+                    return inverted ? x0 : x1;\n+                case BELOW_SIDE:\n+                    return (f1 <= 0) ? x1 : x0;\n+                case ABOVE_SIDE:\n+                    return (f1 >= 0) ? x1 : x0;\n+                default:\n+                    throw new MathInternalError();\n+                }\n+            }\n+\n+            // Throw an exception when the method is stuck.\n+            if (maxEval-- <= 0) {\n+                throw new ConvergenceException(LocalizedFormats.SIMPLE_COMPLEXITY_EXCEEDED,\n+                                               getMaxEvaluations());\n+            }\n+        }\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: orphaned default",
    "test_result": "ERROR"
}