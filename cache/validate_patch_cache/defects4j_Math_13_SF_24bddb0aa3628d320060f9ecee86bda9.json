{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix sqrtMatrix = dec.getSquareRoot();\n    \n    final RealMatrix unitMatrix = MatrixUtils.createRealIdentityMatrix(m.getRowDimension());\n    final RealMatrix inverseMatrix = dec.getSolver().getInverse();\n    final RealMatrix result = unitMatrix.multiply(sqrtMatrix).multiply(inverseMatrix);\n    \n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..b61c6f615 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,14 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix sqrtMatrix = dec.getSquareRoot();\n+    \n+    final RealMatrix unitMatrix = MatrixUtils.createRealIdentityMatrix(m.getRowDimension());\n+    final RealMatrix inverseMatrix = dec.getSolver().getInverse();\n+    final RealMatrix result = unitMatrix.multiply(sqrtMatrix).multiply(inverseMatrix);\n+    \n+    return result;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}