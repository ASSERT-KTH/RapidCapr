{
    "patch": "      boolean removeArgs = true;\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (referenced.contains(var) || var.getName() == \"arguments\") {\n          removeArgs = false;\n          break;\n        }\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n        lastArg = argList.getLastChild();\n      }\n      if (removeArgs) {\n        // Remove the list of parameters from the function entirely.\n        Node parent = function.getParent();\n        parent.replaceChild(function, IR.empty().srcref(function));\n        compiler.reportCodeChange();\n      }\n      return;\n    }\n    callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..9ceefff8 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,27 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      boolean removeArgs = true;\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (referenced.contains(var) || var.getName() == \"arguments\") {\n+          removeArgs = false;\n+          break;\n+        }\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+        lastArg = argList.getLastChild();\n+      }\n+      if (removeArgs) {\n+        // Remove the list of parameters from the function entirely.\n+        Node parent = function.getParent();\n+        parent.replaceChild(function, IR.empty().srcref(function));\n+        compiler.reportCodeChange();\n+      }\n+      return;\n+    }\n+    callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}