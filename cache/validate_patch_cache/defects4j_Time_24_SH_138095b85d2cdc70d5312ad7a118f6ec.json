{
    "patch": "                if (savedFields[i].isSaved()) {\n                    DurationField field = savedFields[i].iField.getDurationField();\n                    long value = field.getValueAsLong(savedFields[i].getDifference(millis));\n                    if (value != savedFields[i].iValue) {\n                        String message =\n                            \"Value \" + savedFields[i].iValue +\n                            \" for \" + savedFields[i].iField.getType() +\n                            \" is not supported: \" +\n                            \" IllegalFieldValueException: \" +\n                            field + \" for \" + savedFields[i].iField.getDurationType();\n                        throw new IllegalFieldValueException(\n                            savedFields[i].iField.getType(), Integer.valueOf(savedFields[i].iValue), message);\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..a6f121b9 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,20 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                if (savedFields[i].isSaved()) {\n+                    DurationField field = savedFields[i].iField.getDurationField();\n+                    long value = field.getValueAsLong(savedFields[i].getDifference(millis));\n+                    if (value != savedFields[i].iValue) {\n+                        String message =\n+                            \"Value \" + savedFields[i].iValue +\n+                            \" for \" + savedFields[i].iField.getType() +\n+                            \" is not supported: \" +\n+                            \" IllegalFieldValueException: \" +\n+                            field + \" for \" + savedFields[i].iField.getDurationType();\n+                        throw new IllegalFieldValueException(\n+                            savedFields[i].iField.getType(), Integer.valueOf(savedFields[i].iValue), message);\n+                    }\n+                }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}