{
    "patch": "public class GammaFunction {\n    \n    /**\n     * Calculates the value of the regularized gamma function P(a, x)\n     * using the Lanczos approximation method.\n     *\n     * @param a the shape parameter\n     * @param x the value of the lower limit of the integral\n     * @return the value of the regularized gamma function P(a,x)\n     */\n    public static double regularizedGamma(double a, double x) {\n        double sum = 0.0;\n        double term = 1.0 / a;\n        double aj = a;\n        double p0 = 1.0;\n        double p1 = 1.0 + x / a;\n    \n        while (Math.abs(term) > 1.0e-15 * Math.abs(sum) + 1.0e-30) {\n            sum += term;\n            aj += 1.0;\n            term *= x / aj;\n            term /= aj - a;\n        }\n        return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n    }\n    \n    /**\n     * Calculates the natural logarithm of the gamma function.\n     *\n     * @param x the parameter\n     * @return the natural logarithm of the gamma function of {@code x}\n     */\n    public static double logGamma(double x) {\n        double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n        double ser = 101.19539853003;\n        return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n    }\n    \n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..0a03f8b0c 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,45 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public class GammaFunction {\n+    \n+    /**\n+     * Calculates the value of the regularized gamma function P(a, x)\n+     * using the Lanczos approximation method.\n+     *\n+     * @param a the shape parameter\n+     * @param x the value of the lower limit of the integral\n+     * @return the value of the regularized gamma function P(a,x)\n+     */\n+    public static double regularizedGamma(double a, double x) {\n+        double sum = 0.0;\n+        double term = 1.0 / a;\n+        double aj = a;\n+        double p0 = 1.0;\n+        double p1 = 1.0 + x / a;\n+    \n+        while (Math.abs(term) > 1.0e-15 * Math.abs(sum) + 1.0e-30) {\n+            sum += term;\n+            aj += 1.0;\n+            term *= x / aj;\n+            term /= aj - a;\n+        }\n+        return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+    }\n+    \n+    /**\n+     * Calculates the natural logarithm of the gamma function.\n+     *\n+     * @param x the parameter\n+     * @return the natural logarithm of the gamma function of {@code x}\n+     */\n+    public static double logGamma(double x) {\n+        double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+        double ser = 101.19539853003;\n+        return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+    }\n+    \n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}