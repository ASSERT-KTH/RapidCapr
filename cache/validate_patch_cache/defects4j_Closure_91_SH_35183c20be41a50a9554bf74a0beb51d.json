{
    "patch": "      Node lp = parent.getParent();\n      if (lp != null && lp.getType() == Token.EXPR_RESULT) {\n        Node grandparent = lp.getParent();\n        if (grandparent != null && grandparent.getType() == Token.ASSIGN) {\n          Node las = grandparent.getLastChild();\n          if (NodeUtil.isGet(las)) {\n            Node llas = las.getFirstChild();\n            if (llas.getType() == Token.GETPROP &&\n                llas.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..076c53a1 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,18 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node lp = parent.getParent();\n+      if (lp != null && lp.getType() == Token.EXPR_RESULT) {\n+        Node grandparent = lp.getParent();\n+        if (grandparent != null && grandparent.getType() == Token.ASSIGN) {\n+          Node las = grandparent.getLastChild();\n+          if (NodeUtil.isGet(las)) {\n+            Node llas = las.getFirstChild();\n+            if (llas.getType() == Token.GETPROP &&\n+                llas.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+          }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}