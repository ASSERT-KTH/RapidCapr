{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Check for out of bounds\n    if (index >= input.length() - 2) {\n        return 0;\n    }\n\n    char c1 = input.charAt(index);\n    char c2 = input.charAt(index + 1);\n\n    if (c1 != '&' || c2 != '#') {\n        return 0;\n    }\n\n    int start = index + 2;\n    int end = start + 1;\n    boolean isHex = false;\n\n    if (end < input.length() && input.charAt(end) == 'x') {\n        isHex = true;\n        end++;\n    }\n\n    // Collect entity digits\n    while (end < input.length() && input.charAt(end) != ';') {\n        // Check if next digit is a valid hex digit\n        if (isHex && !Character.isDigit(input.charAt(end)) && !(input.charAt(end) >= 'a' && input.charAt(end) <= 'f') && !(input.charAt(end) >= 'A' && input.charAt(end) <= 'F')) {\n            return 0;\n        }\n\n        // Check if next digit is a valid decimal digit\n        if (!isHex && !Character.isDigit(input.charAt(end))) {\n            return 0;\n        }\n\n        // Increase the end pointer\n        end++;\n    }\n\n    // Check if there's a semicolon at the end\n    if (end >= input.length() || input.charAt(end) != ';') {\n        return 0;\n    }\n\n    // Parse the entity value\n    int entityValue = 0;\n    try {\n        if (isHex) {\n            entityValue = Integer.parseInt(input.subSequence(start + 1, end).toString(), 16);\n        } else {\n            entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n        }\n    } catch (NumberFormatException e) {\n        return 0;\n    }\n\n    // Write the escaped character\n    if (Character.isDefined(entityValue)) {\n        if (Character.charCount(entityValue) > 1) {\n            out.write(Character.toChars(entityValue));\n            return end - index + 1;\n        } else {\n            out.write(entityValue);\n            return end - index + 1;\n        }\n    }\n\n    // Return 0 if not defined\n    return 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex c3cb8695..2e864500 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -32,37 +32,73 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        // TODO: Protect from ArrayIndexOutOfBounds\n-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    // Check for out of bounds\n+    if (index >= input.length() - 2) {\n+        return 0;\n+    }\n+\n+    char c1 = input.charAt(index);\n+    char c2 = input.charAt(index + 1);\n+\n+    if (c1 != '&' || c2 != '#') {\n+        return 0;\n+    }\n+\n+    int start = index + 2;\n+    int end = start + 1;\n+    boolean isHex = false;\n+\n+    if (end < input.length() && input.charAt(end) == 'x') {\n+        isHex = true;\n+        end++;\n+    }\n+\n+    // Collect entity digits\n+    while (end < input.length() && input.charAt(end) != ';') {\n+        // Check if next digit is a valid hex digit\n+        if (isHex && !Character.isDigit(input.charAt(end)) && !(input.charAt(end) >= 'a' && input.charAt(end) <= 'f') && !(input.charAt(end) >= 'A' && input.charAt(end) <= 'F')) {\n+            return 0;\n+        }\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-            }\n+        // Check if next digit is a valid decimal digit\n+        if (!isHex && !Character.isDigit(input.charAt(end))) {\n+            return 0;\n+        }\n \n-            int end = start;\n-            while(input.charAt(end) != ';') {\n-                end++;\n-            }\n+        // Increase the end pointer\n+        end++;\n+    }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-                return 0;\n-            }\n+    // Check if there's a semicolon at the end\n+    if (end >= input.length() || input.charAt(end) != ';') {\n+        return 0;\n+    }\n \n-                out.write(entityValue);\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+    // Parse the entity value\n+    int entityValue = 0;\n+    try {\n+        if (isHex) {\n+            entityValue = Integer.parseInt(input.subSequence(start + 1, end).toString(), 16);\n+        } else {\n+            entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n         }\n+    } catch (NumberFormatException e) {\n         return 0;\n     }\n+\n+    // Write the escaped character\n+    if (Character.isDefined(entityValue)) {\n+        if (Character.charCount(entityValue) > 1) {\n+            out.write(Character.toChars(entityValue));\n+            return end - index + 1;\n+        } else {\n+            out.write(entityValue);\n+            return end - index + 1;\n+        }\n+    }\n+\n+    // Return 0 if not defined\n+    return 0;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape expected:<[\u0080\u009f]> but was:<[&#x80;&#x9F;]>",
    "test_result": "FAIL"
}