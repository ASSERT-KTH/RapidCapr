{
    "patch": "protected RealPointValuePair getSolution() {\n    int numVars = getOriginalNumDecisionVariables();\n    double[] coefficients = new double[numVars];\n    Integer basicRow = getBasicRow(getNumObjectiveFunctions() + numVars);\n    double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n    for (int i = 0; i < numVars; i++) {\n        basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        double coeff = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                (restrictToNonNegative ? 0 : mostNegative);\n\n        boolean isMultiple = false;\n        for (int j = 0; j < hasMultipleCandidates.length; j++) {\n            if (hasMultipleCandidates[j] && tableau.getEntry(basicRow, getNumObjectiveFunctions() + j) != 0) {\n                isMultiple = true;\n                break;\n            }\n        }\n        if (!isMultiple) {\n            coefficients[i] = coeff;\n            continue;\n        }\n        \n        double maxImprovement = coeff;\n        int bestIndex = i;\n        for (int j = 0; j < hasMultipleCandidates.length; j++) {\n            if (hasMultipleCandidates[j] && tableau.getEntry(basicRow, getNumObjectiveFunctions() + j) != 0) {\n                double newValue = coeff - getEntry(basicRow, getNumObjectiveFunctions() + j);\n                if (newValue > maxImprovement) {\n                    maxImprovement = newValue;\n                    bestIndex = j;\n                }\n            }\n        }\n\n        // Set all the variables that can take the given value to 0, except for the chosen variable\n        for (int j = 0; j < hasMultipleCandidates.length; j++) {\n            if (hasMultipleCandidates[j] && j != bestIndex) {\n                coefficients[j] = 0;\n            }\n        }\n        coefficients[bestIndex] = coeff - getEntry(basicRow, getNumObjectiveFunctions() + bestIndex);\n    }\n\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f2a..29292d32d 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -321,29 +321,52 @@ class SimplexTableau implements Serializable {\n      * </p>\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n-        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-        Integer basicRow =\n-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n-        for (int i = 0; i < coefficients.length; i++) {\n-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n-                // if multiple variables can take a given value \n-                // then we choose the first and set the rest equal to 0\n-                coefficients[i] =\n-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                    (restrictToNonNegative ? 0 : mostNegative);\n-            if (basicRow != null) {\n-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n-                    if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n-                    }\n+protected RealPointValuePair getSolution() {\n+    int numVars = getOriginalNumDecisionVariables();\n+    double[] coefficients = new double[numVars];\n+    Integer basicRow = getBasicRow(getNumObjectiveFunctions() + numVars);\n+    double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n+    for (int i = 0; i < numVars; i++) {\n+        basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n+        double coeff = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n+                (restrictToNonNegative ? 0 : mostNegative);\n+\n+        boolean isMultiple = false;\n+        for (int j = 0; j < hasMultipleCandidates.length; j++) {\n+            if (hasMultipleCandidates[j] && tableau.getEntry(basicRow, getNumObjectiveFunctions() + j) != 0) {\n+                isMultiple = true;\n+                break;\n+            }\n+        }\n+        if (!isMultiple) {\n+            coefficients[i] = coeff;\n+            continue;\n+        }\n+        \n+        double maxImprovement = coeff;\n+        int bestIndex = i;\n+        for (int j = 0; j < hasMultipleCandidates.length; j++) {\n+            if (hasMultipleCandidates[j] && tableau.getEntry(basicRow, getNumObjectiveFunctions() + j) != 0) {\n+                double newValue = coeff - getEntry(basicRow, getNumObjectiveFunctions() + j);\n+                if (newValue > maxImprovement) {\n+                    maxImprovement = newValue;\n+                    bestIndex = j;\n                 }\n             }\n         }\n-        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+\n+        // Set all the variables that can take the given value to 0, except for the chosen variable\n+        for (int j = 0; j < hasMultipleCandidates.length; j++) {\n+            if (hasMultipleCandidates[j] && j != bestIndex) {\n+                coefficients[j] = 0;\n+            }\n+        }\n+        coefficients[bestIndex] = coeff - getEntry(basicRow, getNumObjectiveFunctions() + bestIndex);\n     }\n \n+    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+}\n+\n     /**\n      * Subtracts a multiple of one row from another.\n      * <p>",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}