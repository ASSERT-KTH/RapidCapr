{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        if (valueToAdd == 0) {\n            return values;\n        }\n        if (DateTimeUtils.isContiguous(partial)) {\n            // month is largest field and being added to, such as month-day\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            int nonLeapMaxDay = iChronology.dayOfMonth().getMaximumValue(instant); // maximum day in February for non-leap year\n\n            // determine if new dayOfMonth is in February and out of range for non-leap year\n            boolean outOfRange = (values[1] == 2 && (values[2] > nonLeapMaxDay) && !iChronology.year().isLeap(values[0]));\n\n            // add the months\n            instant = add(instant, valueToAdd);\n\n            int[] newValues = iChronology.get(partial, instant);\n\n            // if new dayOfMonth is out of range in February for non-leap year, reset to maximum\n            if (outOfRange && newValues[1] == 2 && newValues[2] > nonLeapMaxDay) {\n                newValues[2] = nonLeapMaxDay;\n            }\n\n            return newValues;\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..8432d4e9 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -201,19 +201,31 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n \n     //-----------------------------------------------------------------------\n     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n+            // month is largest field and being added to, such as month-day\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n+            int nonLeapMaxDay = iChronology.dayOfMonth().getMaximumValue(instant); // maximum day in February for non-leap year\n+\n+            // determine if new dayOfMonth is in February and out of range for non-leap year\n+            boolean outOfRange = (values[1] == 2 && (values[2] > nonLeapMaxDay) && !iChronology.year().isLeap(values[0]));\n+\n+            // add the months\n             instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+\n+            int[] newValues = iChronology.get(partial, instant);\n+\n+            // if new dayOfMonth is out of range in February for non-leap year, reset to maximum\n+            if (outOfRange && newValues[1] == 2 && newValues[2] > nonLeapMaxDay) {\n+                newValues[2] = nonLeapMaxDay;\n+            }\n+\n+            return newValues;\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }",
    "result_reason": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]",
    "test_result": "FAIL"
}