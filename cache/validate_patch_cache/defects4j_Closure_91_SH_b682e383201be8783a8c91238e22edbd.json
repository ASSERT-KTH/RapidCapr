{
    "patch": "      if (parent != null) {\n        switch (parent.getType()) {\n          case Token.SCRIPT:\n          case Token.BLOCK:\n          case Token.EXPR_RESULT:\n          case Token.VAR:\n            break;\n\n          case Token.ASSIGN: {\n            Node lhs = parent.getFirstChild();\n            if (NodeUtil.isGet(lhs)) {\n              if (lhs.getType() == Token.GETPROP &&\n                  lhs.getLastChild().getString().equals(\"prototype\")) {\n                return false;\n              }\n              Node llhs = lhs.getFirstChild();\n              if (llhs.getType() == Token.GETPROP &&\n                  llhs.getLastChild().getString().equals(\"prototype\")) {\n                return false;\n              }\n            }\n            break;\n          }\n\n          default:",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..85e7b267 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,31 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null) {\n+        switch (parent.getType()) {\n+          case Token.SCRIPT:\n+          case Token.BLOCK:\n+          case Token.EXPR_RESULT:\n+          case Token.VAR:\n+            break;\n+\n+          case Token.ASSIGN: {\n+            Node lhs = parent.getFirstChild();\n+            if (NodeUtil.isGet(lhs)) {\n+              if (lhs.getType() == Token.GETPROP &&\n+                  lhs.getLastChild().getString().equals(\"prototype\")) {\n+                return false;\n+              }\n+              Node llhs = lhs.getFirstChild();\n+              if (llhs.getType() == Token.GETPROP &&\n+                  llhs.getLastChild().getString().equals(\"prototype\")) {\n+                return false;\n+              }\n+            }\n+            break;\n+          }\n+\n+          default:\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}