{
    "patch": "import java.util.*;\n\npublic class Population {\n    \n    public double[] distributionClone(double[] genotypeProbabilities, int M, int D, int N) {\n        \n        double[][] transitions = getTransitions(genotypeProbabilities, M);\n        double[][] transitionMatrix = getTransitionMatrix(transitions, M);\n        double[][] transitionToPowerN = powerMatrix(transitionMatrix, N);\n        double[] initialDistributions = getInitialDistributions(genotypeProbabilities, M); \n        double[] result = new double[N + 1];\n        \n        Arrays.fill(result, 0d);\n        for (int i = 0; i < M; i++) {\n            int populationCount = countOnes(Integer.toBinaryString(i));\n            result[populationCount] += initialDistributions[i];\n        }\n        \n        for (int i = 0; i < M; i++) {\n            for (int j = 0; j <= N; j++) {\n                double currentProbabilities = result[j];\n                result[j] = currentProbabilities * Math.pow(transitionToPowerN[i][i], j);\n            }\n        }\n        \n        for (int i = 0; i <= N; i++) {\n            result[i] /= Math.pow(M, D);\n        }\n        \n        return result;\n        \n    }\n    \n    private double[][] getTransitions(double[] genotypeProbabilities, int M) {\n        \n        double[][] transitions = new double[M][M];\n        for (int i = 0; i < M; i++) {\n            for (int j = 0; j < M; j++) {\n                double probability = 0d;\n                for (int k = 0; k < M; k++) {\n                    probability += genotypeProbabilities[k] * prob(k, i, j);\n                }\n                transitions[i][j] = probability;\n            }\n        }\n        return transitions;\n    }\n    \n    private double[][] getTransitionMatrix(double[][] transitions, int M) {\n        \n        double[][] matrix = new double[M * (M - 1) + 1][M * (M - 1) + 1];\n        for (int i = 0; i < (M * (M - 1) + 1); i++) {\n            for (int j = 0; j < (M * (M - 1) + 1); j++) {\n                matrix[i][j] = transitions[i / (M - 1)][j / (M - 1) + ((j / M) % (M - 1) >= (i / M) % (M - 1) ? 1 : 0)];\n            }\n        }\n        return matrix;\n    }\n    \n    private double[][] powerMatrix(double[][] matrix, int power) {\n        if (power == 0) {\n            double[][] identityMatrix = new double[matrix.length][matrix.length];\n            for (int i = 0; i < matrix.length; i++) {\n                identityMatrix[i][i] = 1;\n            }\n            return identityMatrix;\n        }\n        double[][] result = powerMatrix(matrix, power / 2);\n        result = matrixMultiply(result, result);\n        if (power % 2 == 1) {\n            result = matrixMultiply(result, matrix);\n        }\n        return result;\n    }\n    \n    private double[][] matrixMultiply(double[][] matrix1, double[][] matrix2) {\n        double[][] result = new double[matrix1.length][matrix2[0].length];\n        for (int i = 0; i < matrix1.length; i++) {\n            for (int j = 0; j < matrix2[0].length; j++) {\n                for (int k = 0; k < matrix2.length; k++) {\n                    result[i][j] += matrix1[i][k] * matrix2[k][j];\n                }\n            }\n        }\n        return result;\n    }\n    \n    private double[] getInitialDistributions(double[] genotypeProbabilities, int M) {\n        double[] result = new double[M];\n        for (int i = 0; i < M; i++) {\n            result[i] = genotypeProbabilities[i] / M;\n        }\n        return result;\n    }\n    \n    private int countOnes(String binaryString) {\n        int result = 0;\n        for (int i = 0; i < binaryString.length(); i++) {\n            if (binaryString.charAt(i) == '1') {\n                result++;\n            }\n        }\n        return result;\n    }\n    \n    private double prob(int k, int i, int j) {\n        if ((i & k) == k && (j & k) != k) {\n            return 2;\n        }\n        if ((i & k) != k && (j & k) == k) {\n            return 0d;\n        }\n        if ((i & k) != 0 || (j & k) != 0) {\n            return 0.5;\n        }\n        return 1;\n    }\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}