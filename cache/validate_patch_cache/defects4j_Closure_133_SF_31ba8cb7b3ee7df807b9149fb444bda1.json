{
    "patch": "private String getRemainingJSDocLine() {\n    String result = stream.getRemainingJSDocLine();\n\n    if (result == null || result.trim().isEmpty()) {\n        throw new IllegalStateException(\"No JSDoc remaining in the stream.\");\n    }\n\n    String trimmedResult = result.trim();\n\n    if (!trimmedResult.startsWith(\"*\")) {\n        throw new IllegalStateException(\"No JSDoc remaining in the stream.\");\n    }\n\n    int startIndex = trimmedResult.indexOf(\"*\")+1;\n\n    if (startIndex >= trimmedResult.length()) {\n        throw new IllegalStateException(\"No JSDoc remaining in the stream.\");\n    }\n\n    result = trimmedResult.substring(startIndex);\n\n    if (result.trim().isEmpty()) {\n        throw new IllegalStateException(\"No JSDoc remaining in the stream.\");\n    }\n\n    return result.trim();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..3e146fc9 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,33 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n+private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n-    return result;\n-  }\n+\n+    if (result == null || result.trim().isEmpty()) {\n+        throw new IllegalStateException(\"No JSDoc remaining in the stream.\");\n+    }\n+\n+    String trimmedResult = result.trim();\n+\n+    if (!trimmedResult.startsWith(\"*\")) {\n+        throw new IllegalStateException(\"No JSDoc remaining in the stream.\");\n+    }\n+\n+    int startIndex = trimmedResult.indexOf(\"*\")+1;\n+\n+    if (startIndex >= trimmedResult.length()) {\n+        throw new IllegalStateException(\"No JSDoc remaining in the stream.\");\n+    }\n+\n+    result = trimmedResult.substring(startIndex);\n+\n+    if (result.trim().isEmpty()) {\n+        throw new IllegalStateException(\"No JSDoc remaining in the stream.\");\n+    }\n+\n+    return result.trim();\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "java.lang.RuntimeException: java.lang.IllegalStateException: No JSDoc remaining in the stream.",
    "test_result": "FAIL"
}