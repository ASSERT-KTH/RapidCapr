{
    "patch": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n      double v1X = v1.getX(), v1Y = v1.getY(), v1Z = v1.getZ();\n      double v2X = v2.getX(), v2Y = v2.getY(), v2Z = v2.getZ();\n      \n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n      double factor1 = v1.getNorm() / v2.getNorm();\n      double factor2 = 1.0;\n\n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n      \n      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n      double vr = v1X * v2X + v1Y * v2Y + v1Z * v2Z;\n      \n      double rho = factor1 * (vr / (v2X * v2X + v2Y * v2Y + v2Z * v2Z));\n\n      if (Double.isNaN(rho)) {\n          // this means the vectors are parallel and there are two possible orthogonal directions\n          throw new MathIllegalArgumentException(LocalizedCoreFormats.ZERO_NORM, v1.getNorm());\n      }\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      double resX = v1Y * v2Z - v1Z * v2Y;\n      double resY = v1Z * v2X - v1X * v2Z;\n      double resZ = v1X * v2Y - v1Y * v2X;\n\n      return new Vector3D(factor2 * resX - rho * factor1 * v2X,\n                          factor2 * resY - rho * factor1 * v2Y,\n                          factor2 * resZ - rho * factor1 * v2Z);\n\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..200d989e5 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -455,22 +455,38 @@ public class Vector3D implements Serializable {\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n+      double v1X = v1.getX(), v1Y = v1.getY(), v1Z = v1.getZ();\n+      double v2X = v2.getX(), v2Y = v2.getY(), v2Z = v2.getZ();\n+      \n       // rescale both vectors without losing precision,\n       // to ensure their norm are the same order of magnitude\n+      double factor1 = v1.getNorm() / v2.getNorm();\n+      double factor2 = 1.0;\n \n       // we reduce cancellation errors by preconditioning,\n       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n       // v3 without loss of precision. See Kahan lecture\n       // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n+      \n       // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+      double vr = v1X * v2X + v1Y * v2Y + v1Z * v2Z;\n+      \n+      double rho = factor1 * (vr / (v2X * v2X + v2Y * v2Y + v2Z * v2Z));\n \n+      if (Double.isNaN(rho)) {\n+          // this means the vectors are parallel and there are two possible orthogonal directions\n+          throw new MathIllegalArgumentException(LocalizedCoreFormats.ZERO_NORM, v1.getNorm());\n+      }\n \n       // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+      double resX = v1Y * v2Z - v1Z * v2Y;\n+      double resY = v1Z * v2X - v1X * v2Z;\n+      double resZ = v1X * v2Y - v1Y * v2X;\n+\n+      return new Vector3D(factor2 * resX - rho * factor1 * v2X,\n+                          factor2 * resY - rho * factor1 * v2Y,\n+                          factor2 * resZ - rho * factor1 * v2Z);\n \n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}