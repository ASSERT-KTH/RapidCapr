{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m, 1e-10);\n    final RealMatrix eigenVectors = dec.getV();\n    final RealMatrix eigenValues = buildEigenValuesMatrix(dec);\n    final RealMatrix eigenValuesSqrt = sqrtMatrix(eigenValues);\n    final RealMatrix eigenVectorsTransposed = eigenVectors.transpose();\n    return eigenVectors.multiply(eigenValuesSqrt).multiply(eigenVectorsTransposed);\n}\n\nprivate RealMatrix buildEigenValuesMatrix(EigenDecomposition dec) {\n    final double[] realEigenvalues = dec.getRealEigenvalues();\n    final double[] imgEigenvalues = dec.getImagEigenvalues();\n    final int n = realEigenvalues.length;\n    final RealMatrix eigenValues = MatrixUtils.createRealMatrix(n, n);\n\n    for (int i = 0; i < n; i++) {\n        if (imgEigenvalues[i] != 0.0) {\n            throw new UnsupportedOperationException(\"Unable to handle complex eigen values\");\n        }\n\n        eigenValues.setEntry(i, i, realEigenvalues[i]);\n    }\n\n    return eigenValues;\n}\n\nprivate RealMatrix sqrtMatrix(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m, 1e-10);\n    final RealMatrix eigenVectors = dec.getV();\n    final RealMatrix eigenValues = buildEigenValuesMatrix(dec);\n    final RealMatrix eigenValuesSqrt = sqrtMatrix(eigenValues);\n    final RealMatrix eigenVectorsTransposed = eigenVectors.transpose();\n    return eigenVectors.multiply(eigenValuesSqrt).multiply(eigenVectorsTransposed);\n}\n\nprivate RealMatrix sqrtMatrix(final RealMatrix m, final double tolerance) {\n    final EigenDecomposition dec = new EigenDecomposition(m, tolerance);\n    final RealMatrix eigenVectors = dec.getV();\n    final RealMatrix eigenValues = buildEigenValuesMatrix(dec);\n    final RealMatrix eigenValuesSqrt = sqrtMatrix(eigenValues, tolerance);\n    final RealMatrix eigenVectorsTransposed = eigenVectors.transpose();\n    return eigenVectors.multiply(eigenValuesSqrt).multiply(eigenVectorsTransposed);\n}\n\nprivate RealMatrix sqrtMatrix(final RealMatrix m) {\n    return sqrtMatrix(m, 1e-10);\n}\n\nprivate RealMatrix sqrtMatrix(final double value) {\n    if (value > 0.0) {\n        return MatrixUtils.createRealMatrix(1, 1).scalarMultiply(Math.sqrt(value));\n    } else if (value == 0.0) {\n        return MatrixUtils.createRealMatrix(1, 1);\n    } else {\n        throw new UnsupportedOperationException(\"Unable to calculate the square root of a negative value\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..7228513e5 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,61 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m, 1e-10);\n+    final RealMatrix eigenVectors = dec.getV();\n+    final RealMatrix eigenValues = buildEigenValuesMatrix(dec);\n+    final RealMatrix eigenValuesSqrt = sqrtMatrix(eigenValues);\n+    final RealMatrix eigenVectorsTransposed = eigenVectors.transpose();\n+    return eigenVectors.multiply(eigenValuesSqrt).multiply(eigenVectorsTransposed);\n+}\n+\n+private RealMatrix buildEigenValuesMatrix(EigenDecomposition dec) {\n+    final double[] realEigenvalues = dec.getRealEigenvalues();\n+    final double[] imgEigenvalues = dec.getImagEigenvalues();\n+    final int n = realEigenvalues.length;\n+    final RealMatrix eigenValues = MatrixUtils.createRealMatrix(n, n);\n+\n+    for (int i = 0; i < n; i++) {\n+        if (imgEigenvalues[i] != 0.0) {\n+            throw new UnsupportedOperationException(\"Unable to handle complex eigen values\");\n+        }\n+\n+        eigenValues.setEntry(i, i, realEigenvalues[i]);\n+    }\n+\n+    return eigenValues;\n+}\n+\n+private RealMatrix sqrtMatrix(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m, 1e-10);\n+    final RealMatrix eigenVectors = dec.getV();\n+    final RealMatrix eigenValues = buildEigenValuesMatrix(dec);\n+    final RealMatrix eigenValuesSqrt = sqrtMatrix(eigenValues);\n+    final RealMatrix eigenVectorsTransposed = eigenVectors.transpose();\n+    return eigenVectors.multiply(eigenValuesSqrt).multiply(eigenVectorsTransposed);\n+}\n+\n+private RealMatrix sqrtMatrix(final RealMatrix m, final double tolerance) {\n+    final EigenDecomposition dec = new EigenDecomposition(m, tolerance);\n+    final RealMatrix eigenVectors = dec.getV();\n+    final RealMatrix eigenValues = buildEigenValuesMatrix(dec);\n+    final RealMatrix eigenValuesSqrt = sqrtMatrix(eigenValues, tolerance);\n+    final RealMatrix eigenVectorsTransposed = eigenVectors.transpose();\n+    return eigenVectors.multiply(eigenValuesSqrt).multiply(eigenVectorsTransposed);\n+}\n+\n+private RealMatrix sqrtMatrix(final RealMatrix m) {\n+    return sqrtMatrix(m, 1e-10);\n+}\n+\n+private RealMatrix sqrtMatrix(final double value) {\n+    if (value > 0.0) {\n+        return MatrixUtils.createRealMatrix(1, 1).scalarMultiply(Math.sqrt(value));\n+    } else if (value == 0.0) {\n+        return MatrixUtils.createRealMatrix(1, 1);\n+    } else {\n+        throw new UnsupportedOperationException(\"Unable to calculate the square root of a negative value\");\n     }\n }\n+}",
    "result_reason": "error: method sqrtMatrix(RealMatrix) is already defined in class AbstractLeastSquaresOptimizer",
    "test_result": "ERROR"
}