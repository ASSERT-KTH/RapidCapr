{
    "patch": "// Check that the access is not used as an assignment target\nif (parent != null && parent.getType() == Token.ASSIGN) {\n  Node assignLeft = parent.getFirstChild();\n  if (assignLeft.getType() == Token.GETELEM && assignLeft.getFirstChild().isEquivalentTo(left)) {\n    if (parent.getLastChild() != n) {\n      return n;\n    }\n    if (NodeUtil.isAssignmentOp(parent)) {\n      return n;\n    }\n  }\n}\n\nif (parent != nul",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..ee598f04 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,20 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+// Check that the access is not used as an assignment target\n+if (parent != null && parent.getType() == Token.ASSIGN) {\n+  Node assignLeft = parent.getFirstChild();\n+  if (assignLeft.getType() == Token.GETELEM && assignLeft.getFirstChild().isEquivalentTo(left)) {\n+    if (parent.getLastChild() != n) {\n+      return n;\n+    }\n+    if (NodeUtil.isAssignmentOp(parent)) {\n+      return n;\n+    }\n+  }\n+}\n+\n+if (parent != nul\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}