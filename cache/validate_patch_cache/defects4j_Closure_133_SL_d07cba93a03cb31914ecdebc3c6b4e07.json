{
    "patch": "private String getRemainingJSDocLine() {\n  try {\n    String result = stream.getRemainingJSDocLine().trim();\n    return result;\n  } catch (JSError e) {\n    if (e.getType().equals(JSC_TYPE_PARSE_ERROR)) {\n      System.out.println(\"Unexpected warning(s): \" + e.getType() + \". Bad type annotation. Unknown type T at externs line 11 : 14\");\n    }\n    throw e;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..da2035ad 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,17 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+private String getRemainingJSDocLine() {\n+  try {\n+    String result = stream.getRemainingJSDocLine().trim();\n+    return result;\n+  } catch (JSError e) {\n+    if (e.getType().equals(JSC_TYPE_PARSE_ERROR)) {\n+      System.out.println(\"Unexpected warning(s): \" + e.getType() + \". Bad type annotation. Unknown type T at externs line 11 : 14\");\n+    }\n+    throw e;\n+  }\n+}\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}