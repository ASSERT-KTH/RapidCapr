{
    "patch": "public class Distribution implements Cloneable {\n\n    private final double[] freq;\n\n    public Distribution(double[] freq) {\n        if (freq.length == 0) {\n            throw new IllegalArgumentException(\"empty array\");\n        }\n        this.freq = freq.clone();\n        double sum = 0.0;\n        for (int i = 0; i < freq.length; i++) {\n            if (freq[i] < 0.0) {\n                throw new IllegalArgumentException(\"negative value at index \" + i + \": \" + freq[i]);\n            }\n            sum += freq[i];\n        }\n        if (sum == 0.0) {\n            throw new IllegalArgumentException(\"sum of frequencies is zero\");\n        }\n        for (int i = 0; i < freq.length; i++) {\n            freq[i] /= sum;\n        }\n    }\n\n    public double[] getFreq() {\n        return freq.clone();\n    }\n\n    public double getEntropy() {\n        double sum = 0.0;\n        for (double f : freq) {\n            sum += (f == 0.0) ? 0.0 : f * Math.log(f);\n        }\n        return -sum / Math.log(2.0);\n    }\n\n    @Override\n    public Distribution clone() {\n        return new Distribution(freq);\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof Distribution)) {\n            return false;\n        }\n        Distribution that = (Distribution) obj;\n        return Arrays.equals(this.freq, that.freq);\n    }\n\n    @Override\n    public int hashCode() {\n        return Arrays.hashCode(freq);\n    }\n\n    @Override\n    public String toString() {\n        return Arrays.toString(freq);\n    }\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}