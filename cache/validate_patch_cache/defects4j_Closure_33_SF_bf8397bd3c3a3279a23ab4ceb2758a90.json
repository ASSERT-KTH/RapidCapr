{
    "patch": "public void matchConstraint(ObjectType constraintObj) {\n  // We only want to match constraints on anonymous types.\n  if (constraintObj.isNominalConstructor() || constraintObj.isInterface() \n      || constraintObj.getDisplayName() != null) {\n    return;\n  }\n\n  // Handle the case where the constraint object is a record type.\n  //\n  // param constraintObj {{prop: (number|undefined)}}\n  // function f(constraintObj) {}\n  // f({});\n  //\n  // We want to modify the object literal to match the constraint, by\n  // taking each property on the record and trying to match\n  // properties on this object.\n  if (constraintObj.isRecordType()) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!isPropertyTypeDeclared(prop)) {\n        boolean propExists = hasProperty(prop);\n        boolean isPropNullable = propType.isNullable();\n        // If the property exists and is nullable, union its type with the constraint.\n        if (propExists && isPropNullable) {\n          JSType existingType = getPropertyType(prop);\n          JSType newType = existingType.getLeastSupertype(propType.restrictByNotNullOrUndefined());\n          defineInferredProperty(prop, newType, null);\n        }\n        // If the property exists and is non-nullable, and matches the constraint,\n        // leave it alone.\n        else if (propExists && !isPropNullable && existingPropMatchesConstraint(prop, propType)) {\n          continue;\n        }\n        // If the property doesn't exist or isn't nullable, create/overwrite it.\n        else {\n          JSType typeToInfer = propType;\n          if (!propExists) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n          }\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..a2f23da7 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,26 +552,44 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n+public void matchConstraint(ObjectType constraintObj) {\n+  // We only want to match constraints on anonymous types.\n+  if (constraintObj.isNominalConstructor() || constraintObj.isInterface() \n+      || constraintObj.getDisplayName() != null) {\n+    return;\n+  }\n+\n+  // Handle the case where the constraint object is a record type.\n+  //\n+  // param constraintObj {{prop: (number|undefined)}}\n+  // function f(constraintObj) {}\n+  // f({});\n+  //\n+  // We want to modify the object literal to match the constraint, by\n+  // taking each property on the record and trying to match\n+  // properties on this object.\n+  if (constraintObj.isRecordType()) {\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+      JSType propType = constraintObj.getPropertyType(prop);\n+      if (!isPropertyTypeDeclared(prop)) {\n+        boolean propExists = hasProperty(prop);\n+        boolean isPropNullable = propType.isNullable();\n+        // If the property exists and is nullable, union its type with the constraint.\n+        if (propExists && isPropNullable) {\n+          JSType existingType = getPropertyType(prop);\n+          JSType newType = existingType.getLeastSupertype(propType.restrictByNotNullOrUndefined());\n+          defineInferredProperty(prop, newType, null);\n+        }\n+        // If the property exists and is non-nullable, and matches the constraint,\n+        // leave it alone.\n+        else if (propExists && !isPropNullable && existingPropMatchesConstraint(prop, propType)) {\n+          continue;\n+        }\n+        // If the property doesn't exist or isn't nullable, create/overwrite it.\n+        else {\n           JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n+          if (!propExists) {\n+            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n           }\n           defineInferredProperty(prop, typeToInfer, null);\n         }\n@@ -579,3 +597,4 @@ class PrototypeObjectType extends ObjectType {\n     }\n   }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}