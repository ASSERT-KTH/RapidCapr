{
    "patch": "    // Remove all unused parameters from the start.\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      Node c = argList.getFirstChild();\n      while (c != null && !referenced.contains(fnScope.getVar(c.getString()))) {\n        Node next = c.getNext();\n        argList.removeChild(c);\n        function.removeChild(c);\n        c = next;\n      }\n      compiler.reportCodeChange();\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..29c11a1e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,21 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Remove all unused parameters from the start.\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      Node c = argList.getFirstChild();\n+      while (c != null && !referenced.contains(fnScope.getVar(c.getString()))) {\n+        Node next = c.getNext();\n+        argList.removeChild(c);\n+        function.removeChild(c);\n+        c = next;\n+      }\n+      compiler.reportCodeChange();\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}