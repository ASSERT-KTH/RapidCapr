{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = NodeUtil.getFunctionBody(fnNode);\n\n    Node cArg = callNode.getFirstChild().getNext();\n\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n    boolean isRestParam =\n        fnParam != null && fnParam.isRest() && fnParam.getNext() == null;\n    while (fnParam != null && (!fnParam.isName() || cArg != null || isRestParam)) {\n      isRestParam = fnParam.isRest();\n      if (fnParam.isName()) {\n        String argName = fnParam.getString();\n        if (cArg == null) {\n          if (fnParam.getParent().isRest()) {\n            Preconditions.checkState(fnParam.getNext() == null);\n            return CanInlineResult.YES;\n          }\n          if (NodeUtil.getNameReferenceCount(block, argName) == 1) {\n            fnParam = fnParam.getNext();\n            continue;\n          }\n        } else if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        } else {\n          int refCount = NodeUtil.getNameReferenceCount(block, argName);\n          if (refCount > 1) {\n            return CanInlineResult.NO;\n          } else if (cArg.getNext() == null) {\n            return CanInlineResult.YES;\n          }\n        }\n\n        // Move to the next named parameter\n        fnParam = fnParam.getNext();\n      } else if (fnParam.isRest()) {\n        Node sideEffectNode = cArg;\n        while (sideEffectNode != null) {\n          if (NodeUtil.mayHaveSideEffects(sideEffectNode, compiler)) {\n            return CanInlineResult.NO;\n          }\n          sideEffectNode = sideEffectNode.getNext();\n        }\n        return CanInlineResult.YES;\n      } else {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        } else if (fnParam.getNext() == null && cArg.getNext() == null) {\n          return CanInlineResult.YES;\n        }\n\n        // Move to the next anonymous argument\n        cArg = cArg.getNext();\n      }\n    }\n\n    // If there are any unused named parameters, return NO\n    if (fnParam != null && fnParam.isName()) {\n      return CanInlineResult.NO;\n    }\n\n    // If there are any unused anonymous arguments, return NO\n    if (cArg != null) {\n      return CanInlineResult.NO;\n    }\n\n    // All arguments have been accounted for\n    return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..6358e389 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,67 +686,79 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n     }\n \n-    Node block = fnNode.getLastChild();\n-\n+    Node block = NodeUtil.getFunctionBody(fnNode);\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n-\n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+\n+    boolean isRestParam =\n+        fnParam != null && fnParam.isRest() && fnParam.getNext() == null;\n+    while (fnParam != null && (!fnParam.isName() || cArg != null || isRestParam)) {\n+      isRestParam = fnParam.isRest();\n+      if (fnParam.isName()) {\n+        String argName = fnParam.getString();\n+        if (cArg == null) {\n+          if (fnParam.getParent().isRest()) {\n+            Preconditions.checkState(fnParam.getNext() == null);\n+            return CanInlineResult.YES;\n+          }\n+          if (NodeUtil.getNameReferenceCount(block, argName) == 1) {\n+            fnParam = fnParam.getNext();\n+            continue;\n+          }\n+        } else if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+          return CanInlineResult.NO;\n+        } else {\n+          int refCount = NodeUtil.getNameReferenceCount(block, argName);\n+          if (refCount > 1) {\n             return CanInlineResult.NO;\n+          } else if (cArg.getNext() == null) {\n+            return CanInlineResult.YES;\n           }\n         }\n \n-        // Move to the next name.\n+        // Move to the next named parameter\n         fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n+      } else if (fnParam.isRest()) {\n+        Node sideEffectNode = cArg;\n+        while (sideEffectNode != null) {\n+          if (NodeUtil.mayHaveSideEffects(sideEffectNode, compiler)) {\n+            return CanInlineResult.NO;\n+          }\n+          sideEffectNode = sideEffectNode.getNext();\n+        }\n+        return CanInlineResult.YES;\n+      } else {\n         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n           return CanInlineResult.NO;\n+        } else if (fnParam.getNext() == null && cArg.getNext() == null) {\n+          return CanInlineResult.YES;\n         }\n+\n+        // Move to the next anonymous argument\n         cArg = cArg.getNext();\n       }\n     }\n \n+    // If there are any unused named parameters, return NO\n+    if (fnParam != null && fnParam.isName()) {\n+      return CanInlineResult.NO;\n+    }\n+\n+    // If there are any unused anonymous arguments, return NO\n+    if (cArg != null) {\n+      return CanInlineResult.NO;\n+    }\n+\n+    // All arguments have been accounted for\n     return CanInlineResult.YES;\n-  }\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}