{
    "patch": "if (typeVariable.getBounds().length == 0) {\n    registerTypeVariablesOn(Object.class);\n} else {\n    boolean hasTypeVarArg = false;\n    for (Type type : typeVariable.getBounds()) {\n        if (type instanceof TypeVariable) {\n            hasTypeVarArg = true;\n            readTypeVariables();\n        } else {\n            registerTypeVariablesOn(type);\n        }\n    }\n    if (!hasTypeVarArg) {\n        registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..72c30d5f9 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,27 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+if (typeVariable.getBounds().length == 0) {\n+    registerTypeVariablesOn(Object.class);\n+} else {\n+    boolean hasTypeVarArg = false;\n+    for (Type type : typeVariable.getBounds()) {\n+        if (type instanceof TypeVariable) {\n+            hasTypeVarArg = true;\n+            readTypeVariables();\n+        } else {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+    if (!hasTypeVarArg) {\n+        registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}