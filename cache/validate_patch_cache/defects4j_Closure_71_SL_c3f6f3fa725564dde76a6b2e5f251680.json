{
    "patch": "      boolean isOverride =\n          parent != null &&\n          (parent.getType() == Token.ASSIGN ||\n           (parent.getType() == Token.OBJECTLIT &&\n            NodeUtil.getObjectLitKeyName(getprop) != null)) &&\n          parent.getFirstChild() == getprop;\n      if (!isOverride) {\n        ObjectType objectType = ObjectType.cast(getprop.getFirstChild().getJSType().dereference());\n        String propertyName = getprop.getLastChild().getString();\n\n        if (objectType == null) {\n          // Couldn't get type information\n          return;\n        }\n\n        // Find the lowest property defined on a class with visibility\n        // information.\n        JSDocInfo docInfo = null;\n        for (; objectType != null;\n             objectType = objectType.getImplicitPrototype()) {\n          docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n          if (docInfo != null &&\n              docInfo.getVisibility() != Visibility.INHERITED) {\n            break;\n          }\n        }\n        if (docInfo == null ||\n            docInfo.getVisibility() != Visibility.PRIVATE) {\n          // Not a private property, or defined on an inherited class.\n          return;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..6334d92a 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,38 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      boolean isOverride =\n+          parent != null &&\n+          (parent.getType() == Token.ASSIGN ||\n+           (parent.getType() == Token.OBJECTLIT &&\n+            NodeUtil.getObjectLitKeyName(getprop) != null)) &&\n+          parent.getFirstChild() == getprop;\n+      if (!isOverride) {\n+        ObjectType objectType = ObjectType.cast(getprop.getFirstChild().getJSType().dereference());\n+        String propertyName = getprop.getLastChild().getString();\n+\n+        if (objectType == null) {\n+          // Couldn't get type information\n+          return;\n+        }\n+\n+        // Find the lowest property defined on a class with visibility\n+        // information.\n+        JSDocInfo docInfo = null;\n+        for (; objectType != null;\n+             objectType = objectType.getImplicitPrototype()) {\n+          docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n+          if (docInfo != null &&\n+              docInfo.getVisibility() != Visibility.INHERITED) {\n+            break;\n+          }\n+        }\n+        if (docInfo == null ||\n+            docInfo.getVisibility() != Visibility.PRIVATE) {\n+          // Not a private property, or defined on an inherited class.\n+          return;\n+        }\n+      }\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}