{
    "patch": "public String fixCode(String input) {\n    String[] lines = input.split(\"\\\\r?\\\\n\");\n    StringBuilder result = new StringBuilder();\n\n    for (String line : lines) {\n        if (line.contains(\"for\")) {\n            int start = line.indexOf(\"[\");\n            int end = line.indexOf(\"]\");\n            if (start >= 0 && end > start) {\n                String expression = line.substring(start + 1, end);\n                if (expression.contains(\"in\")) {\n                    String[] parts = expression.split(\"\\\\s+in\\\\s+\");\n                    if (parts.length == 2) {\n                        line = line.replace(expression, parts[1] + \".contains(\" + parts[0] + \")\");\n                    }\n                }\n            }\n        }\n        result.append(line).append(System.lineSeparator());\n    }\n\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6528d399 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,29 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String input) {\n+    String[] lines = input.split(\"\\\\r?\\\\n\");\n+    StringBuilder result = new StringBuilder();\n+\n+    for (String line : lines) {\n+        if (line.contains(\"for\")) {\n+            int start = line.indexOf(\"[\");\n+            int end = line.indexOf(\"]\");\n+            if (start >= 0 && end > start) {\n+                String expression = line.substring(start + 1, end);\n+                if (expression.contains(\"in\")) {\n+                    String[] parts = expression.split(\"\\\\s+in\\\\s+\");\n+                    if (parts.length == 2) {\n+                        line = line.replace(expression, parts[1] + \".contains(\" + parts[0] + \")\");\n+                    }\n+                }\n+            }\n+        }\n+        result.append(line).append(System.lineSeparator());\n+    }\n+\n+    return result.toString();\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}