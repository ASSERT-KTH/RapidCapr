{
    "patch": "            SavedField last = savedFields[count - 1];\n            Chronology chrono = iChrono;\n            DurationField years = DurationFieldType.years().getField(chrono);\n            long millis = last.set(last.getDurationField().add(last.getWrapField().add(millis, last.getValue()), 1), resetFields);\n            if (resetFields) {\n                for (int i = 0; i < count - 1; i++) {\n                    millis = savedFields[i].set(millis, resetFields);\n                }\n            } else {\n                Map<DateTimeFieldType, Integer> field2value = new HashMap<DateTimeFieldType, Integer>();\n                for (int i = 0; i < count - 1; i++) {\n                    SavedField saveField = savedFields[i];\n                    DateTimeField field = saveField.iField;\n                    DateTimeFieldType fieldType = field.getType();\n                    Integer old = field2value.put(fieldType, saveField.getValue());\n                    if (old != null) {\n                        throw new IllegalArgumentException(\"Duplicate field '\" + fieldType + \"' found during parsing\");\n                    }\n                    if (((savedFields[i + 1].getMillis() - last.getMillis()) * Long.signum(millis - last.getMillis())) < 0) {\n                        millis = last.set(last.getDurationField().add(last.getWrapField().add(millis, last.getValue()), -1), resetFields);\n                    }\n                    millis = savedFields[i].set(millis, resetFields);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..4553fb9a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,28 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            SavedField last = savedFields[count - 1];\n+            Chronology chrono = iChrono;\n+            DurationField years = DurationFieldType.years().getField(chrono);\n+            long millis = last.set(last.getDurationField().add(last.getWrapField().add(millis, last.getValue()), 1), resetFields);\n+            if (resetFields) {\n+                for (int i = 0; i < count - 1; i++) {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                }\n+            } else {\n+                Map<DateTimeFieldType, Integer> field2value = new HashMap<DateTimeFieldType, Integer>();\n+                for (int i = 0; i < count - 1; i++) {\n+                    SavedField saveField = savedFields[i];\n+                    DateTimeField field = saveField.iField;\n+                    DateTimeFieldType fieldType = field.getType();\n+                    Integer old = field2value.put(fieldType, saveField.getValue());\n+                    if (old != null) {\n+                        throw new IllegalArgumentException(\"Duplicate field '\" + fieldType + \"' found during parsing\");\n+                    }\n+                    if (((savedFields[i + 1].getMillis() - last.getMillis()) * Long.signum(millis - last.getMillis())) < 0) {\n+                        millis = last.set(last.getDurationField().add(last.getWrapField().add(millis, last.getValue()), -1), resetFields);\n+                    }\n+                    millis = savedFields[i].set(millis, resetFields);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}