{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      // NodeUtil.getFunctionParameters will remove unused parameters that are not last.\n      for (Node param : NodeUtil.getFunctionParameters(function)) {\n        if (!referenced.contains(fnScope.getVar(param.getString()))) {\n          Node nameNode = param.getFirstChild();\n          argList.removeChild(param);\n          // removing the arg may make a `default value` node dangle.\n          // e.g. `function(a, d = 123){}` => `function(a    ){}`\n          // (then next loop iteration will remove 'a' too.)\n          // we should also remove the default value node here.\n          Node defaultValue = param.getFirstChild().getNext();\n          if (defaultValue != null && defaultValue.isDefaultValue()) {\n            argList.removeChild(defaultValue);\n          }\n          compiler.reportCodeChange();\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..e2e49784 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,38 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      // NodeUtil.getFunctionParameters will remove unused parameters that are not last.\n+      for (Node param : NodeUtil.getFunctionParameters(function)) {\n+        if (!referenced.contains(fnScope.getVar(param.getString()))) {\n+          Node nameNode = param.getFirstChild();\n+          argList.removeChild(param);\n+          // removing the arg may make a `default value` node dangle.\n+          // e.g. `function(a, d = 123){}` => `function(a    ){}`\n+          // (then next loop iteration will remove 'a' too.)\n+          // we should also remove the default value node here.\n+          Node defaultValue = param.getFirstChild().getNext();\n+          if (defaultValue != null && defaultValue.isDefaultValue()) {\n+            argList.removeChild(defaultValue);\n+          }\n+          compiler.reportCodeChange();\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: for-each not applicable to expression type",
    "test_result": "ERROR"
}