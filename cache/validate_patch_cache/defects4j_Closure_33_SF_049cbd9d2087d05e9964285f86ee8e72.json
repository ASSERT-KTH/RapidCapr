{
    "patch": "public void matchConstraint(ObjectType constraintObj) {\n  if (!isFunctionType() && !isNominalConstructor() && !isInterface()) {\n    return;\n  }\n\n  if (!constraintObj.isNominalConstructor() && !constraintObj.isFunctionType()) {\n    return;\n  }\n\n  if (constraintObj.isRecordType()) {\n    defineInferredPropertiesForRecordType(constraintObj);\n  }\n\n  // Match duck-typing constraints on function types.\n  if (isFunctionType()) {\n    if (constraintObj.isFunctionType()) {\n      FunctionType t = (FunctionType)constraintObj;\n      matchConstraintsOnFunctionType(t);\n    }\n    return;\n  }\n\n  // Match nominal and duck-typing constraints on nominal types.\n  NominalType objNominalType = getNominalTypeIfInterface();\n  NominalType constraintNominalType = constraintObj.getNominalTypeIfSingletonObj();\n  if (objNominalType != null && constraintNominalType != null) {\n    if (objNominalType.isModuleType() && constraintNominalType.isModuleType()) {\n      return;\n    }\n    if (!objNominalType.isClassType() && !objNominalType.isInterface()) {\n      return;\n    }\n    matchConstraintsOnNominalType(objNominalType, constraintNominalType);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..d602e647 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,30 +552,39 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n+public void matchConstraint(ObjectType constraintObj) {\n+  if (!isFunctionType() && !isNominalConstructor() && !isInterface()) {\n+    return;\n+  }\n+\n+  if (!constraintObj.isNominalConstructor() && !constraintObj.isFunctionType()) {\n+    return;\n+  }\n+\n+  if (constraintObj.isRecordType()) {\n+    defineInferredPropertiesForRecordType(constraintObj);\n+  }\n+\n+  // Match duck-typing constraints on function types.\n+  if (isFunctionType()) {\n+    if (constraintObj.isFunctionType()) {\n+      FunctionType t = (FunctionType)constraintObj;\n+      matchConstraintsOnFunctionType(t);\n+    }\n+    return;\n+  }\n+\n+  // Match nominal and duck-typing constraints on nominal types.\n+  NominalType objNominalType = getNominalTypeIfInterface();\n+  NominalType constraintNominalType = constraintObj.getNominalTypeIfSingletonObj();\n+  if (objNominalType != null && constraintNominalType != null) {\n+    if (objNominalType.isModuleType() && constraintNominalType.isModuleType()) {\n+      return;\n+    }\n+    if (!objNominalType.isClassType() && !objNominalType.isInterface()) {\n+      return;\n     }\n+    matchConstraintsOnNominalType(objNominalType, constraintNominalType);\n   }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}