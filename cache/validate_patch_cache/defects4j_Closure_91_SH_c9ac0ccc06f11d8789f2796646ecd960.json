{
    "patch": "      if (NodeUtil.isExpressionNode(parent)) {\n        Node grandParent = parent.getParent();\n        if (NodeUtil.isExprAssign(grandParent)) {\n          Node targetName = grandParent.getFirstChild();\n          if (NodeUtil.isGet(targetName)) {\n            String propName = targetName.getLastChild().getString();\n            if (\"prototype\".equals(propName)) {\n              return false;\n            }\n            if (NodeUtil.isGet(targetName.getFirstChild())) {\n              String baseName = targetName.getFirstChild().getLastChild().getString();\n              if (\"Object\".equals(baseName) || \"Function\".equals(baseName)) {\n                return false;\n              }\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..d5ffa4f9 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,22 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isExpressionNode(parent)) {\n+        Node grandParent = parent.getParent();\n+        if (NodeUtil.isExprAssign(grandParent)) {\n+          Node targetName = grandParent.getFirstChild();\n+          if (NodeUtil.isGet(targetName)) {\n+            String propName = targetName.getLastChild().getString();\n+            if (\"prototype\".equals(propName)) {\n+              return false;\n+            }\n+            if (NodeUtil.isGet(targetName.getFirstChild())) {\n+              String baseName = targetName.getFirstChild().getLastChild().getString();\n+              if (\"Object\".equals(baseName) || \"Function\".equals(baseName)) {\n+                return false;\n+              }\n+            }\n+          }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}