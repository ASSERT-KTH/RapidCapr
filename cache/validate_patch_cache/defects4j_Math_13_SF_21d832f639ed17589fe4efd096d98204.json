{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    LUDecomposition lu = new LUDecomposition(m);\n    RealMatrix l = lu.getL();\n    RealMatrix u = lu.getU();\n    RealMatrix lt = l.transpose();\n    RealMatrix ut = u.transpose();\n    RealMatrix sqrtL = MatrixUtils.createRealMatrix(l.getRowDimension(), l.getColumnDimension());\n    RealMatrix sqrtU = MatrixUtils.createRealMatrix(u.getRowDimension(), u.getColumnDimension());\n    for (int i = 0; i < l.getRowDimension(); i++) {\n        for (int j = 0; j < l.getColumnDimension(); j++) {\n            if (i == j) {\n                sqrtL.setEntry(i, j, Math.sqrt(Math.abs(l.getEntry(i, j))));\n                sqrtU.setEntry(i, j, Math.sqrt(Math.abs(u.getEntry(i, j))));\n            } else {\n                sqrtL.setEntry(i, j, l.getEntry(i, j) / (sqrtL.getEntry(j, j) + sqrtL.getEntry(i, i) - sqrtL.getEntry(i, j)));\n                sqrtU.setEntry(i, j, u.getEntry(i, j) / (sqrtU.getEntry(j, j) + sqrtU.getEntry(i, i) - sqrtU.getEntry(i, j)));\n            }\n        }\n    }\n\n    return lt.multiply(sqrtL).multiply(sqrtU).multiply(l);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..ea94ea781 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,26 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    LUDecomposition lu = new LUDecomposition(m);\n+    RealMatrix l = lu.getL();\n+    RealMatrix u = lu.getU();\n+    RealMatrix lt = l.transpose();\n+    RealMatrix ut = u.transpose();\n+    RealMatrix sqrtL = MatrixUtils.createRealMatrix(l.getRowDimension(), l.getColumnDimension());\n+    RealMatrix sqrtU = MatrixUtils.createRealMatrix(u.getRowDimension(), u.getColumnDimension());\n+    for (int i = 0; i < l.getRowDimension(); i++) {\n+        for (int j = 0; j < l.getColumnDimension(); j++) {\n+            if (i == j) {\n+                sqrtL.setEntry(i, j, Math.sqrt(Math.abs(l.getEntry(i, j))));\n+                sqrtU.setEntry(i, j, Math.sqrt(Math.abs(u.getEntry(i, j))));\n+            } else {\n+                sqrtL.setEntry(i, j, l.getEntry(i, j) / (sqrtL.getEntry(j, j) + sqrtL.getEntry(i, i) - sqrtL.getEntry(i, j)));\n+                sqrtU.setEntry(i, j, u.getEntry(i, j) / (sqrtU.getEntry(j, j) + sqrtU.getEntry(i, i) - sqrtU.getEntry(i, j)));\n+            }\n+        }\n     }\n+\n+    return lt.multiply(sqrtL).multiply(sqrtU).multiply(l);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}