{
    "patch": "    if (parent != null) {\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.NAME:\n          if (NodeUtil.isFunctionExpression(n)) {\n            defineDeclaredFunction(n, parent);\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.LP:\n          if (n.getFirstChild() != null && n.getFirstChild().getType() == Token.FUNCTION && parent == scope.getRootNode()) {\n            handleFunctionInputs(n.getFirstChild());\n          }\n          break;\n        default:\n          break;\n      }\n    }\n\n    attachLiteralTypes(n);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..39c0cde2 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,7 +1448,7 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n+    if (parent != null) {\n       switch (n.getType()) {\n         case Token.FUNCTION:\n           if (parent.getType() == Token.NAME) {\n@@ -1456,15 +1456,30 @@ final class TypedScopeCreator implements ScopeCreator {\n           }\n           defineDeclaredFunction(n, parent);\n           break;\n+        case Token.NAME:\n+          if (NodeUtil.isFunctionExpression(n)) {\n+            defineDeclaredFunction(n, parent);\n+          }\n+          break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n+        case Token.LP:\n+          if (n.getFirstChild() != null && n.getFirstChild().getType() == Token.FUNCTION && parent == scope.getRootNode()) {\n+            handleFunctionInputs(n.getFirstChild());\n+          }\n+          break;\n+        default:\n+          break;\n       }\n     }\n \n+    attachLiteralTypes(n);\n+    }\n+\n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {\n       // Handle bleeding functions.",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}