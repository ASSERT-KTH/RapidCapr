{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n\n    // Increment mean first\n    if (meanImpl instanceof Mean) {\n        ((Mean) meanImpl).increment(value);\n    } else {\n        ((AbstractStorelessUnivariateStatistic) meanImpl).increment(value);\n        double oldMean = meanImpl.getResult();\n        double newMean = oldMean + (value - oldMean) / n;\n        meanImpl = new Mean();\n        ((Mean) meanImpl).increment(newMean);\n    }\n\n    // Update variance with previous observations\n    double variance;\n    if (varianceImpl instanceof Variance) {\n        ((AbstractUnivariateStatistic) varianceImpl).increment(value);\n        variance = ((Variance) varianceImpl).getResult();\n    } else {\n        ((AbstractStorelessUnivariateStatistic) varianceImpl).increment(value);\n        varianceImpl = ((AbstractStorelessUnivariateStatistic) varianceImpl).copy();\n        variance = varianceImpl.getResult();\n    }\n\n    if (n <= 1) {\n        // When we only have one observation, variance will be zero, so we don't need\n        // to update it. However, we need to update the second moment with this observation.\n        secondMoment.increment(value);\n    } else {\n        // Update variance with the previous observations' mean\n        double oldMean = meanImpl.getResult() - (value / n);\n        variance += (((n - 1) * ((value / n) - oldMean) * ((value / n) - oldMean)) / n);\n        ((AbstractStorelessUnivariateStatistic) varianceImpl).clear();\n        varianceImpl.increment(variance);\n\n        // Update second moment with new observation\n        secondMoment.increment(value);\n    }\n\n    // Update the geometric mean\n    if (geoMeanImpl instanceof GeometricMean) {\n        ((AbstractUnivariateStatistic) geoMeanImpl).increment(value);\n    } else {\n        ((AbstractStorelessUnivariateStatistic) geoMeanImpl).increment(value);\n        double logSum = sumLogImpl.getResult();\n        double newGeoMean = Math.exp(logSum / n);\n        geoMeanImpl = new GeometricMean();\n        ((GeometricMean) geoMeanImpl).increment(newGeoMean);\n    }\n\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..9e77d9f35 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,27 +146,65 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+\n+    // Increment mean first\n+    if (meanImpl instanceof Mean) {\n+        ((Mean) meanImpl).increment(value);\n+    } else {\n+        ((AbstractStorelessUnivariateStatistic) meanImpl).increment(value);\n+        double oldMean = meanImpl.getResult();\n+        double newMean = oldMean + (value - oldMean) / n;\n+        meanImpl = new Mean();\n+        ((Mean) meanImpl).increment(newMean);\n+    }\n+\n+    // Update variance with previous observations\n+    double variance;\n+    if (varianceImpl instanceof Variance) {\n+        ((AbstractUnivariateStatistic) varianceImpl).increment(value);\n+        variance = ((Variance) varianceImpl).getResult();\n+    } else {\n+        ((AbstractStorelessUnivariateStatistic) varianceImpl).increment(value);\n+        varianceImpl = ((AbstractStorelessUnivariateStatistic) varianceImpl).copy();\n+        variance = varianceImpl.getResult();\n+    }\n+\n+    if (n <= 1) {\n+        // When we only have one observation, variance will be zero, so we don't need\n+        // to update it. However, we need to update the second moment with this observation.\n+        secondMoment.increment(value);\n+    } else {\n+        // Update variance with the previous observations' mean\n+        double oldMean = meanImpl.getResult() - (value / n);\n+        variance += (((n - 1) * ((value / n) - oldMean) * ((value / n) - oldMean)) / n);\n+        ((AbstractStorelessUnivariateStatistic) varianceImpl).clear();\n+        varianceImpl.increment(variance);\n+\n+        // Update second moment with new observation\n         secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n-        }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n-        }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n-        }\n-        n++;\n     }\n \n+    // Update the geometric mean\n+    if (geoMeanImpl instanceof GeometricMean) {\n+        ((AbstractUnivariateStatistic) geoMeanImpl).increment(value);\n+    } else {\n+        ((AbstractStorelessUnivariateStatistic) geoMeanImpl).increment(value);\n+        double logSum = sumLogImpl.getResult();\n+        double newGeoMean = Math.exp(logSum / n);\n+        geoMeanImpl = new GeometricMean();\n+        ((GeometricMean) geoMeanImpl).increment(newGeoMean);\n+    }\n+\n+    n++;\n+}\n+\n     /**\n      * Returns the number of available values\n      * @return The number of available values",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}