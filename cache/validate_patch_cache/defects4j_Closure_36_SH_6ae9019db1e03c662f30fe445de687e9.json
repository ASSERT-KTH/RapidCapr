{
    "patch": "if (value.isFunction() &&\n          !value.isArrowFunction()) {  // Only for non-arrow functions\n        Node callNode = reference.getParent();\n        if (callNode != null && callNode.isCall()) {\n          CodingConvention convention = compiler.getCodingConvention();\n          SubclassRelationship relationship =\n              convention.getClassesDefinedByCall(callNode);\n          if (relationship != null) {\n            return false;\n          }\n          if (reference.getNext() != null && NodeUtil.isLValue(reference.getNext())) {\n            // If the function is used as an l-value, e.g. `a = foo()`, don't inline it.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..cf46f997 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,18 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+if (value.isFunction() &&\n+          !value.isArrowFunction()) {  // Only for non-arrow functions\n+        Node callNode = reference.getParent();\n+        if (callNode != null && callNode.isCall()) {\n+          CodingConvention convention = compiler.getCodingConvention();\n+          SubclassRelationship relationship =\n+              convention.getClassesDefinedByCall(callNode);\n+          if (relationship != null) {\n+            return false;\n+          }\n+          if (reference.getNext() != null && NodeUtil.isLValue(reference.getNext())) {\n+            // If the function is used as an l-value, e.g. `a = foo()`, don't inline it.\n         }\n       }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}