{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  // Don't analyze code in global scope, or below the first function scope.\n  if (t.inGlobalScope() || t.getScopeDepth() <= 1) {\n    return;\n  }\n\n  if (n.isReturn() && n.getFirstChild() != null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n\n  if (n.isName() && NodeUtil.isLValue(n) &&\n      !NodeUtil.isBleedingFunctionName(n)) {\n    String name = n.getString();\n\n    Scope scope = t.getScope();\n    while (scope != null) {\n      Var var = scope.getOwnSlot(name);\n      if (var != null) {\n        Scope ownerScope = var.getScope();\n\n        if (ownerScope.isLocal()) {\n          data.get(ownerScope.getRootNode()).recordAssignedName(name);\n        }\n\n        if (scope != ownerScope && ownerScope.isLocal()) {\n          data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n        }\n        break;\n      }\n      scope = scope.getParent();\n    }\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n      NodeUtil.isLValue(n)) {\n    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n\n    Scope scope = t.getScope();\n    while (scope != null) {\n      Var var = scope.getOwnSlot(name);\n      if (var != null) {\n        Scope ownerScope = var.getScope();\n        if (scope != ownerScope && ownerScope.isLocal()) {\n          data.get(ownerScope.getRootNode())\n              .recordEscapedQualifiedName(n.getQualifiedName());\n        }\n        break;\n      }\n      scope = scope.getParent();\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex cf87eaaf..e5de367d 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1984,58 +1984,57 @@ final class TypedScopeCreator implements ScopeCreator {\n       }\n     }\n \n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (t.inGlobalScope()) {\n-        return;\n-      }\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  // Don't analyze code in global scope, or below the first function scope.\n+  if (t.inGlobalScope() || t.getScopeDepth() <= 1) {\n+    return;\n+  }\n \n-      if (n.isReturn() && n.getFirstChild() != null) {\n-        data.get(t.getScopeRoot()).recordNonEmptyReturn();\n-      }\n+  if (n.isReturn() && n.getFirstChild() != null) {\n+    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n+  }\n \n-      if (t.getScopeDepth() <= 2) {\n-        // The first-order function analyzer looks at two types of variables:\n-        //\n-        // 1) Local variables that are assigned in inner scopes (\"escaped vars\")\n-        //\n-        // 2) Local variables that are assigned more than once.\n-        //\n-        // We treat all global variables as escaped by default, so there's\n-        // no reason to do this extra computation for them.\n-        return;\n-      }\n+  if (n.isName() && NodeUtil.isLValue(n) &&\n+      !NodeUtil.isBleedingFunctionName(n)) {\n+    String name = n.getString();\n \n-      if (n.isName() && NodeUtil.isLValue(n) &&\n-          // Be careful of bleeding functions, which create variables\n-          // in the inner scope, not the scope where the name appears.\n-          !NodeUtil.isBleedingFunctionName(n)) {\n-        String name = n.getString();\n-        Scope scope = t.getScope();\n-        Var var = scope.getVar(name);\n-        if (var != null) {\n-          Scope ownerScope = var.getScope();\n-          if (ownerScope.isLocal()) {\n-            data.get(ownerScope.getRootNode()).recordAssignedName(name);\n-          }\n+    Scope scope = t.getScope();\n+    while (scope != null) {\n+      Var var = scope.getOwnSlot(name);\n+      if (var != null) {\n+        Scope ownerScope = var.getScope();\n \n-          if (scope != ownerScope && ownerScope.isLocal()) {\n-            data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n-          }\n+        if (ownerScope.isLocal()) {\n+          data.get(ownerScope.getRootNode()).recordAssignedName(name);\n         }\n-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n-          NodeUtil.isLValue(n)) {\n-        String name = NodeUtil.getRootOfQualifiedName(n).getString();\n-        Scope scope = t.getScope();\n-        Var var = scope.getVar(name);\n-        if (var != null) {\n-          Scope ownerScope = var.getScope();\n-          if (scope != ownerScope && ownerScope.isLocal()) {\n-            data.get(ownerScope.getRootNode())\n-                .recordEscapedQualifiedName(n.getQualifiedName());\n-          }\n+\n+        if (scope != ownerScope && ownerScope.isLocal()) {\n+          data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n         }\n+        break;\n       }\n+      scope = scope.getParent();\n     }\n+  } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n+      NodeUtil.isLValue(n)) {\n+    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n+\n+    Scope scope = t.getScope();\n+    while (scope != null) {\n+      Var var = scope.getOwnSlot(name);\n+      if (var != null) {\n+        Scope ownerScope = var.getScope();\n+        if (scope != ownerScope && ownerScope.isLocal()) {\n+          data.get(ownerScope.getRootNode())\n+              .recordEscapedQualifiedName(n.getQualifiedName());\n+        }\n+        break;\n+      }\n+      scope = scope.getParent();\n+    }\n+  }\n+}\n   }\n \n   private AstFunctionContents getFunctionAnalysisResults(@Nullable Node n) {",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...turn type",
    "test_result": "FAIL"
}