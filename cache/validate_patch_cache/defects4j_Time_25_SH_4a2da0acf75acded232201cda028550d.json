{
    "patch": "                long prevLocal = previousTransition(instantAdjusted);\n                int prevOffset = getOffset(prevLocal);\n                if ((prevOffset - offsetAdjusted) >= 0) {\n                    long nextLocal = nextTransition(instantAdjusted);\n                    int nextOffset = getOffset(nextLocal);\n                    if (nextOffset == offsetLocal) {\n                        return offsetLocal;\n                    }\n                }\n            } else {\n                long nextLocal = nextTransition(instantAdjusted);\n                int nextOffset = getOffset(nextLocal);\n                if ((nextOffset - offsetAdjusted) < 0) {",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..267df88a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,19 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                long prevLocal = previousTransition(instantAdjusted);\n+                int prevOffset = getOffset(prevLocal);\n+                if ((prevOffset - offsetAdjusted) >= 0) {\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    int nextOffset = getOffset(nextLocal);\n+                    if (nextOffset == offsetLocal) {\n+                        return offsetLocal;\n+                    }\n+                }\n+            } else {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                int nextOffset = getOffset(nextLocal);\n+                if ((nextOffset - offsetAdjusted) < 0) {\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}