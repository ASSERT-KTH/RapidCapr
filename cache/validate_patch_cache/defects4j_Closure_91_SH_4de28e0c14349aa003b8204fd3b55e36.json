{
    "patch": "      Node assignNode = null;\n      if (parent != null &&\n          parent.getType() == Token.ASSIGN &&\n          parent.getFirstChild().getType() == Token.GETPROP &&\n          \"prototype\".equals(parent.getFirstChild().getLastChild().getString())) {\n        if (parent.getParent() != null &&\n            parent.getParent().getType() == Token.EXPR_RESULT) {\n          assignNode = parent;\n        }\n      } else if (NodeUtil.isName(parent) &&\n                 parent.getJSDocInfo() != null &&\n                 parent.getJSDocInfo().containsDeclaration()) {\n        assignNode = NodeUtil.getEnclosingAssignmentForDeclaration(parent);\n      }\n\n      if (assignNode != null) {\n        Node rhs = assignNode.getLastChild();\n        if (rhs.isFunction()) {\n          JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(rhs);\n          if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface() ||\n              jsDoc.hasThisType() || jsDoc.isOverride())) {\n            return false;\n          }\n          return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..8a1fec1c 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,30 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node assignNode = null;\n+      if (parent != null &&\n+          parent.getType() == Token.ASSIGN &&\n+          parent.getFirstChild().getType() == Token.GETPROP &&\n+          \"prototype\".equals(parent.getFirstChild().getLastChild().getString())) {\n+        if (parent.getParent() != null &&\n+            parent.getParent().getType() == Token.EXPR_RESULT) {\n+          assignNode = parent;\n+        }\n+      } else if (NodeUtil.isName(parent) &&\n+                 parent.getJSDocInfo() != null &&\n+                 parent.getJSDocInfo().containsDeclaration()) {\n+        assignNode = NodeUtil.getEnclosingAssignmentForDeclaration(parent);\n+      }\n+\n+      if (assignNode != null) {\n+        Node rhs = assignNode.getLastChild();\n+        if (rhs.isFunction()) {\n+          JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(rhs);\n+          if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface() ||\n+              jsDoc.hasThisType() || jsDoc.isOverride())) {\n+            return false;\n+          }\n+          return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}