{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n    // Record global variable and function declarations\n    if (t.inGlobalScope()) {\n        if (NodeUtil.isVarDeclaration(n)) {\n            Node nameNode = n.getFirstChild();\n            NameInformation ns = createNameInformation(t, nameNode, parent);\n            if (ns != null) {\n                JsName nameInfo = getName(ns.name, true);\n                if (nameInfo != null) {\n                    recordSet(nameInfo.name, nameNode);\n                }\n            }\n        } else if (NodeUtil.isFunctionDeclaration(n)) {\n            Node nameNode = n.getFirstChild();\n            NameInformation ns = createNameInformation(t, nameNode, n);\n            if (ns != null) {\n                JsName nameInfo = getName(ns.name, true);\n                if (nameInfo != null) {\n                    recordSet(nameInfo.name, nameNode);\n                }\n            }\n        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n            Node nameNode = n.getFirstChild();\n            NameInformation ns = createNameInformation(t, nameNode, parent);\n            if (ns != null) {\n                JsName nameInfo = getName(ns.name, true);\n                if (nameInfo != null) {\n                    recordSet(nameInfo.name, nameNode);\n                }\n            }\n        }\n    }\n\n    // Record assignments and call sites\n    if (n.isAssign()) {\n        Node lhs = n.getFirstChild();\n        NameInformation ns = createNameInformation(t, lhs, parent);\n        if (ns != null) {\n            if (ns.isPrototype) {\n                recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n            } else {\n                Node rhs = lhs.getNext();\n                JsName nameInfo = getName(ns.name, false);\n                if (nameInfo != null) {\n                    if (rhs.isFunction()) {\n                        refNodes.add(new ClassDefiningFunctionNode(nameInfo, n, parent, parent.getParent()));\n                    } else {\n                        recordSet(nameInfo.name, n);\n                    }\n                }\n            }\n        }\n    } else if (n.isCall()) {\n        Node nameNode = n.getFirstChild();\n        NameInformation ns = createNameInformation(t, nameNode, parent);\n        if (ns != null && ns.onlyAffectsClassDef) {\n            JsName name = getName(ns.name, true);\n            if (name != null) {\n                refNodes.add(new ClassDefiningFunctionNode(name, n, parent, parent.getParent()));\n            }\n        }\n    }\n}\n\nprivate static class NameInformation {\n    final String name;\n    final boolean isPrototype;\n    final String prototypeClass;\n    final String prototypeProperty;\n    final boolean onlyAffectsClassDef;\n\n    NameInformation(String name, boolean isPrototype, String prototypeClass, String prototypeProperty,\n                     boolean onlyAffectsClassDef) {\n        this.name = name;\n        this.isPrototype = isPrototype;\n        this.prototypeClass = prototypeClass;\n        this.prototypeProperty = prototypeProperty;\n        this.onlyAffectsClassDef = onlyAffectsClassDef;\n    }\n}\n\nprivate static NameInformation createNameInformation(NodeTraversal t, Node n, Node parent) {\n    if (n.isGetProp()) {\n        Node obj = n.getFirstChild();\n        Node prop = obj.getNext();\n        if (prop.isString()) {\n            String propName = prop.getString();\n            if (obj.isName()) {\n                String varName = obj.getString();\n                if (varName.equals(\"exports\") || varName.equals(\"module\") && propName.equals(\"exports\")) {\n                    // Ignore exports and module.exports.\n                    return null;\n                } else if (VAR_BLACKLIST.contains(varName)) {\n                    return null;\n                } else if (parent.isCall() && parent.getFirstChild() == obj) {\n                    // Ignore calls to methods on variables.\n                    return null;\n                } else {\n                    return new NameInformation(propName, isPrototype(obj), null, null, false);\n                }\n            } else if (obj.isGetProp()) {\n                Node objObj = obj.getFirstChild();\n                Node objProp = objObj.getNext();\n                if (objProp.isString()) {\n                    String objPropName = objProp.getString();\n                    if (objObj.isName() && objPropName.equals(\"prototype\")) {\n                        return new NameInformation(propName, true, objObj.getString(), propName, false);\n                    } else if (BUILTIN_GLOBAL_OBJECTS.contains(objPropName)) {\n                        return new NameInformation(propName, false, null, null, objPropName.equals(\"RegExp\"));\n                    }\n                }\n            }\n        }\n    } else if (n.isName()) {\n        String varName = n.getString();\n        if (VAR_BLACKLIST.contains(varName)) {\n            return null;\n        }\n    }\n    return null;\n}\n\nprivate static boolean isPrototype(Node n) {\n    return n.isGetProp() && n.getLastChild().getString().equals(\"prototype\");\n}\n\nprivate JsName getName(String name, boolean create) {\n    JsName jsName = nameMap.get(name);\n    if (jsName == null && create) {\n        jsName = topScope.declareName(name);\n        nameMap.put(name, jsName);\n    }\n    return jsName;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..e226cc82 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,53 +593,140 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n-\n-      // Record global variable and function declarations\n-      if (t.inGlobalScope()) {\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    // Record global variable and function declarations\n+    if (t.inGlobalScope()) {\n         if (NodeUtil.isVarDeclaration(n)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          Preconditions.checkNotNull(ns);\n-          recordSet(ns.name, n);\n+            Node nameNode = n.getFirstChild();\n+            NameInformation ns = createNameInformation(t, nameNode, parent);\n+            if (ns != null) {\n+                JsName nameInfo = getName(ns.name, true);\n+                if (nameInfo != null) {\n+                    recordSet(nameInfo.name, nameNode);\n+                }\n+            }\n         } else if (NodeUtil.isFunctionDeclaration(n)) {\n-          Node nameNode = n.getFirstChild();\n-          NameInformation ns = createNameInformation(t, nameNode, n);\n-          if (ns != null) {\n-            JsName nameInfo = getName(nameNode.getString(), true);\n-            recordSet(nameInfo.name, nameNode);\n-          }\n+            Node nameNode = n.getFirstChild();\n+            NameInformation ns = createNameInformation(t, nameNode, n);\n+            if (ns != null) {\n+                JsName nameInfo = getName(ns.name, true);\n+                if (nameInfo != null) {\n+                    recordSet(nameInfo.name, nameNode);\n+                }\n+            }\n         } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          if (ns != null) {\n-            recordSet(ns.name, n);\n-          }\n+            Node nameNode = n.getFirstChild();\n+            NameInformation ns = createNameInformation(t, nameNode, parent);\n+            if (ns != null) {\n+                JsName nameInfo = getName(ns.name, true);\n+                if (nameInfo != null) {\n+                    recordSet(nameInfo.name, nameNode);\n+                }\n+            }\n         }\n-      }\n-\n-      // Record assignments and call sites\n-      if (n.isAssign()) {\n-        Node nameNode = n.getFirstChild();\n+    }\n \n-        NameInformation ns = createNameInformation(t, nameNode, n);\n+    // Record assignments and call sites\n+    if (n.isAssign()) {\n+        Node lhs = n.getFirstChild();\n+        NameInformation ns = createNameInformation(t, lhs, parent);\n         if (ns != null) {\n-          if (ns.isPrototype) {\n-            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n-          } else {\n-            recordSet(ns.name, nameNode);\n-          }\n+            if (ns.isPrototype) {\n+                recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n+            } else {\n+                Node rhs = lhs.getNext();\n+                JsName nameInfo = getName(ns.name, false);\n+                if (nameInfo != null) {\n+                    if (rhs.isFunction()) {\n+                        refNodes.add(new ClassDefiningFunctionNode(nameInfo, n, parent, parent.getParent()));\n+                    } else {\n+                        recordSet(nameInfo.name, n);\n+                    }\n+                }\n+            }\n         }\n-      } else if (n.isCall()) {\n+    } else if (n.isCall()) {\n         Node nameNode = n.getFirstChild();\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n+        NameInformation ns = createNameInformation(t, nameNode, parent);\n         if (ns != null && ns.onlyAffectsClassDef) {\n-          JsName name = getName(ns.name, false);\n-          if (name != null) {\n-          refNodes.add(new ClassDefiningFunctionNode(\n-              name, n, parent, parent.getParent()));\n-          }\n+            JsName name = getName(ns.name, true);\n+            if (name != null) {\n+                refNodes.add(new ClassDefiningFunctionNode(name, n, parent, parent.getParent()));\n+            }\n         }\n-      }\n     }\n+}\n+\n+private static class NameInformation {\n+    final String name;\n+    final boolean isPrototype;\n+    final String prototypeClass;\n+    final String prototypeProperty;\n+    final boolean onlyAffectsClassDef;\n+\n+    NameInformation(String name, boolean isPrototype, String prototypeClass, String prototypeProperty,\n+                     boolean onlyAffectsClassDef) {\n+        this.name = name;\n+        this.isPrototype = isPrototype;\n+        this.prototypeClass = prototypeClass;\n+        this.prototypeProperty = prototypeProperty;\n+        this.onlyAffectsClassDef = onlyAffectsClassDef;\n+    }\n+}\n+\n+private static NameInformation createNameInformation(NodeTraversal t, Node n, Node parent) {\n+    if (n.isGetProp()) {\n+        Node obj = n.getFirstChild();\n+        Node prop = obj.getNext();\n+        if (prop.isString()) {\n+            String propName = prop.getString();\n+            if (obj.isName()) {\n+                String varName = obj.getString();\n+                if (varName.equals(\"exports\") || varName.equals(\"module\") && propName.equals(\"exports\")) {\n+                    // Ignore exports and module.exports.\n+                    return null;\n+                } else if (VAR_BLACKLIST.contains(varName)) {\n+                    return null;\n+                } else if (parent.isCall() && parent.getFirstChild() == obj) {\n+                    // Ignore calls to methods on variables.\n+                    return null;\n+                } else {\n+                    return new NameInformation(propName, isPrototype(obj), null, null, false);\n+                }\n+            } else if (obj.isGetProp()) {\n+                Node objObj = obj.getFirstChild();\n+                Node objProp = objObj.getNext();\n+                if (objProp.isString()) {\n+                    String objPropName = objProp.getString();\n+                    if (objObj.isName() && objPropName.equals(\"prototype\")) {\n+                        return new NameInformation(propName, true, objObj.getString(), propName, false);\n+                    } else if (BUILTIN_GLOBAL_OBJECTS.contains(objPropName)) {\n+                        return new NameInformation(propName, false, null, null, objPropName.equals(\"RegExp\"));\n+                    }\n+                }\n+            }\n+        }\n+    } else if (n.isName()) {\n+        String varName = n.getString();\n+        if (VAR_BLACKLIST.contains(varName)) {\n+            return null;\n+        }\n+    }\n+    return null;\n+}\n+\n+private static boolean isPrototype(Node n) {\n+    return n.isGetProp() && n.getLastChild().getString().equals(\"prototype\");\n+}\n+\n+private JsName getName(String name, boolean create) {\n+    JsName jsName = nameMap.get(name);\n+    if (jsName == null && create) {\n+        jsName = topScope.declareName(name);\n+        nameMap.put(name, jsName);\n+    }\n+    return jsName;\n+}\n \n     /**\n      * Records the assignment of a value to a global name.",
    "result_reason": "error: modifier static not allowed here",
    "test_result": "ERROR"
}