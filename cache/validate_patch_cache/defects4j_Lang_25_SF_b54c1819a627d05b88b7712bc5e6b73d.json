{
    "patch": "public static String unescape(String input) {\n    StringBuilder result = new StringBuilder();\n    int i = 0;\n    while (i < input.length()) {\n        char ch = input.charAt(i);\n        if (ch == '\\\\') {\n            if (i < input.length() - 1) {\n                char nextChar = input.charAt(i + 1);\n                if (nextChar == 'n') {\n                    result.append('\\n');\n                    i += 2;\n                    continue;\n                }\n                if (nextChar == 'r') {\n                    result.append('\\r');\n                    i += 2;\n                    continue;\n                }\n                if (nextChar == 't') {\n                    result.append('\\t');\n                    i += 2;\n                    continue;\n                }\n                if (nextChar == 'b') {\n                    result.append('\\b');\n                    i += 2;\n                    continue;\n                }\n                if (nextChar == 'f') {\n                    result.append('\\f');\n                    i += 2;\n                    continue;\n                }\n                if (nextChar == '\\'') {\n                    result.append('\\'');\n                    i += 2;\n                    continue;\n                }\n                if (nextChar == '\\\"') {\n                    result.append('\\\"');\n                    i += 2;\n                    continue;\n                }\n                if (nextChar == '\\\\') {\n                    result.append('\\\\');\n                    i += 2;\n                    continue;\n                }\n                if (nextChar == 'u') {\n                    if (i < input.length() - 5) {\n                        try {\n                            char unicodeChar = (char) Integer.parseInt(input.substring(i + 2, i + 6), 16);\n                            result.append(unicodeChar);\n                            i += 6;\n                            continue;\n                        } catch (NumberFormatException e) {\n                            // ignore invalid Unicode escape sequences\n                        }\n                    }\n                } else if (nextChar >= '0' && nextChar <= '7') {\n                    if (i < input.length() - 3) {\n                        try {\n                            char octalChar = (char) Integer.parseInt(input.substring(i + 1, i + 4), 8);\n                            result.append(octalChar);\n                            i += 4;\n                            continue;\n                        } catch (NumberFormatException e) {\n                            // ignore invalid octal escape sequences\n                        }\n                    }\n                }\n            }\n        }\n        result.append(ch);\n        i++;\n    }\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..7f462913 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,84 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String input) {\n+    StringBuilder result = new StringBuilder();\n+    int i = 0;\n+    while (i < input.length()) {\n+        char ch = input.charAt(i);\n+        if (ch == '\\\\') {\n+            if (i < input.length() - 1) {\n+                char nextChar = input.charAt(i + 1);\n+                if (nextChar == 'n') {\n+                    result.append('\\n');\n+                    i += 2;\n+                    continue;\n+                }\n+                if (nextChar == 'r') {\n+                    result.append('\\r');\n+                    i += 2;\n+                    continue;\n+                }\n+                if (nextChar == 't') {\n+                    result.append('\\t');\n+                    i += 2;\n+                    continue;\n+                }\n+                if (nextChar == 'b') {\n+                    result.append('\\b');\n+                    i += 2;\n+                    continue;\n+                }\n+                if (nextChar == 'f') {\n+                    result.append('\\f');\n+                    i += 2;\n+                    continue;\n+                }\n+                if (nextChar == '\\'') {\n+                    result.append('\\'');\n+                    i += 2;\n+                    continue;\n+                }\n+                if (nextChar == '\\\"') {\n+                    result.append('\\\"');\n+                    i += 2;\n+                    continue;\n+                }\n+                if (nextChar == '\\\\') {\n+                    result.append('\\\\');\n+                    i += 2;\n+                    continue;\n+                }\n+                if (nextChar == 'u') {\n+                    if (i < input.length() - 5) {\n+                        try {\n+                            char unicodeChar = (char) Integer.parseInt(input.substring(i + 2, i + 6), 16);\n+                            result.append(unicodeChar);\n+                            i += 6;\n+                            continue;\n+                        } catch (NumberFormatException e) {\n+                            // ignore invalid Unicode escape sequences\n+                        }\n+                    }\n+                } else if (nextChar >= '0' && nextChar <= '7') {\n+                    if (i < input.length() - 3) {\n+                        try {\n+                            char octalChar = (char) Integer.parseInt(input.substring(i + 1, i + 4), 8);\n+                            result.append(octalChar);\n+                            i += 4;\n+                            continue;\n+                        } catch (NumberFormatException e) {\n+                            // ignore invalid octal escape sequences\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        result.append(ch);\n+        i++;\n+    }\n+    return result.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}