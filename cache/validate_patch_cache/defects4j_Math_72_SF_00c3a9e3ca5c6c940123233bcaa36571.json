{
    "patch": "public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n    clearResult();\n    verifySequence(min, initial, max);\n\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    double yInitial = f.value(initial);\n\n    // check if initial guess is good enough\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    // check if either endpoint is good enough\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    }\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    }\n\n    // check if endpoints bracket the root\n    if (yMin * yMax >= 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n    }\n\n    double a = min;\n    double b = max;\n    double c = initial;\n    double fa = yMin;\n    double fb = yMax;\n    double fc = yInitial;\n\n    double d = 0.0;\n    double e = 0.0;\n\n    int iter = 0;\n\n    while (true) {\n        if (Math.abs(fc) < Math.abs(fb)) {\n            a = b;\n            b = c;\n            c = a;\n            fa = fb;\n            fb = fc;\n            fc = fa;\n        }\n\n        double tol = 2.0 * functionValueAccuracy * Math.max(Math.abs(b), 1.0);\n        double m = 0.5 * (c - b);\n\n        if (Math.abs(m) <= tol || fb == 0) {\n            setResult(b, iter);\n            return result;\n        }\n\n        if (Math.abs(e) >= tol && Math.abs(fa) > Math.abs(fb)) {\n            double p = 0.0;\n            double q = 0.0;\n            double r = 0.0;\n\n            double s = fb / fa;\n            if (a == c) {\n                p = 2.0 * m * s;\n                q = 1.0 - s;\n            } else {\n                q = fa / fc;\n                r = fb / fc;\n                p = s * (2",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex e0cb42714..87b8671c1 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,53 +95,80 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n-                        final double min, final double max, final double initial)\n+public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n+    clearResult();\n+    verifySequence(min, initial, max);\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n+    double yInitial = f.value(initial);\n \n-        // return the initial guess if it is good enough\n-        double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+    // check if initial guess is good enough\n+    if (Math.abs(yInitial) <= functionValueAccuracy) {\n+        setResult(initial, 0);\n+        return result;\n+    }\n \n-        // return the first endpoint if it is good enough\n-        double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+    // check if either endpoint is good enough\n+    if (Math.abs(yMin) <= functionValueAccuracy) {\n+        setResult(min, 0);\n+        return result;\n+    }\n+    if (Math.abs(yMax) <= functionValueAccuracy) {\n+        setResult(max, 0);\n+        return result;\n+    }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n+    // check if endpoints bracket the root\n+    if (yMin * yMax >= 0) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+    }\n \n-        // return the second endpoint if it is good enough\n-        double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+    double a = min;\n+    double b = max;\n+    double c = initial;\n+    double fa = yMin;\n+    double fb = yMax;\n+    double fc = yInitial;\n+\n+    double d = 0.0;\n+    double e = 0.0;\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n+    int iter = 0;\n+\n+    while (true) {\n+        if (Math.abs(fc) < Math.abs(fb)) {\n+            a = b;\n+            b = c;\n+            c = a;\n+            fa = fb;\n+            fb = fc;\n+            fc = fa;\n         }\n \n-        if (yMin * yMax > 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+        double tol = 2.0 * functionValueAccuracy * Math.max(Math.abs(b), 1.0);\n+        double m = 0.5 * (c - b);\n+\n+        if (Math.abs(m) <= tol || fb == 0) {\n+            setResult(b, iter);\n+            return result;\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+        if (Math.abs(e) >= tol && Math.abs(fa) > Math.abs(fb)) {\n+            double p = 0.0;\n+            double q = 0.0;\n+            double r = 0.0;\n \n-    }\n+            double s = fb / fa;\n+            if (a == c) {\n+                p = 2.0 * m * s;\n+                q = 1.0 - s;\n+            } else {\n+                q = fa / fc;\n+                r = fb / fc;\n+                p = s * (2\n \n     /**\n      * Find a zero in the given interval.",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}