{
    "patch": "import org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.SingularValueDecomposition;\nimport org.apache.commons.math3.util.FastMath;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    final int rowCount = m.getRowDimension();\n    final int colCount = m.getColumnDimension();\n    \n    if (rowCount * colCount > 100000) {\n        // For large matrices, use singular value decomposition instead of eigen decomposition\n        final SingularValueDecomposition dec = new SingularValueDecomposition(m);\n        final RealMatrix u = dec.getU();\n        final RealMatrix s = dec.getS();\n        final RealMatrix v = dec.getV();\n        \n        final RealMatrix sqrtS = MatrixUtils.createRealMatrix(s.getRowDimension(), s.getColumnDimension());\n        for (int i = 0; i < s.getRowDimension(); i++) {\n            for (int j = 0; j < s.getColumnDimension(); j++) {\n                sqrtS.setEntry(i, j, FastMath.sqrt(s.getEntry(i, j)));\n            }\n        }\n        \n        return u.multiply(sqrtS).multiply(v.transpose());\n    } else {\n        // For small matrices, use eigen decomposition\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..d016bc9a9 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,35 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.EigenDecomposition;\n+import org.apache.commons.math3.linear.MatrixUtils;\n+import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.linear.SingularValueDecomposition;\n+import org.apache.commons.math3.util.FastMath;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int rowCount = m.getRowDimension();\n+    final int colCount = m.getColumnDimension();\n+    \n+    if (rowCount * colCount > 100000) {\n+        // For large matrices, use singular value decomposition instead of eigen decomposition\n+        final SingularValueDecomposition dec = new SingularValueDecomposition(m);\n+        final RealMatrix u = dec.getU();\n+        final RealMatrix s = dec.getS();\n+        final RealMatrix v = dec.getV();\n+        \n+        final RealMatrix sqrtS = MatrixUtils.createRealMatrix(s.getRowDimension(), s.getColumnDimension());\n+        for (int i = 0; i < s.getRowDimension(); i++) {\n+            for (int j = 0; j < s.getColumnDimension(); j++) {\n+                sqrtS.setEntry(i, j, FastMath.sqrt(s.getEntry(i, j)));\n+            }\n+        }\n+        \n+        return u.multiply(sqrtS).multiply(v.transpose());\n+    } else {\n+        // For small matrices, use eigen decomposition\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n     }\n }\n+}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}