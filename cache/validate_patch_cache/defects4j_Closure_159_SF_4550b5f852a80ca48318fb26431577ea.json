{
    "patch": "  private void findCalledFunctions(\n      Node node, Set<String> changed) {\n    Preconditions.checkArgument(changed != null);\n    if (node.getType() == Token.CALL && node.getFirstChild().getType() == Token.NAME) {\n        String functionName = node.getFirstChild().getString();\n        if (functionName != null && !functionName.startsWith(\"goog.\") && !functionName.startsWith(\"$\")) {\n          changed.add(functionName);\n        }\n    }\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..bbb589c6 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -773,14 +773,12 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n   private void findCalledFunctions(\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n-    // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n-      }\n+    if (node.getType() == Token.CALL && node.getFirstChild().getType() == Token.NAME) {\n+        String functionName = node.getFirstChild().getString();\n+        if (functionName != null && !functionName.startsWith(\"goog.\") && !functionName.startsWith(\"$\")) {\n+          changed.add(functionName);\n+        }\n     }\n-\n     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n       findCalledFunctions(c, changed);\n     }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}