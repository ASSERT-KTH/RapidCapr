{
    "patch": "if (str == null) {\n    return null;\n} else if (str.length() == 0) {\n    return StringUtils.EMPTY;\n} else {\n    int strLength = str.length();\n    int newUpper = upper;\n    // if the lower value is greater than or equal to the length of the string,\n    // set both bounds to the length of the string\n    if (lower >= strLength) {\n        lower = strLength;\n        newUpper = strLength;\n    } else {\n        // if the upper value is -1 (i.e. no limit) or is greater than the length of the string, set to the length of the string\n        if (upper == -1 || upper > strLength) {\n            newUpper = strLength;\n        }\n        // if upper is less than lower, raise it to lower\n        if (newUpper < lower) {\n            newUpper = lower;\n        }\n    }\n    StringBuffer result = new StringBuffer();\n    int index = StringUtils.indexOf(str, \" \", lower);\n    if (index == -1) {\n        result.append(str.substring(lower, newUpper));\n        // only if abbreviation has occured do we append the appendToEnd value\n        if (newUpper != str.length()) {\n            result.append(StringUtils.defaultString(appendToEnd));\n        }\n    } else if (index > newUpper) {\n        result.append(str.substring(lower, newUpper));\n        result.append(StringUtils.defaultString(appendToEnd));\n    } else {\n        result.append(str.substring(lower, index));\n        result.append(StringUtils.defaultString(appendToEnd));\n    }\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/WordUtils.java b/src/java/org/apache/commons/lang/WordUtils.java\nindex 42bd883e..2c4f0ec3 100644\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n@@ -613,6 +613,45 @@ public class WordUtils {\n \n         // if the lower value is greater than the length of the string,\n         // set to the length of the string\n+if (str == null) {\n+    return null;\n+} else if (str.length() == 0) {\n+    return StringUtils.EMPTY;\n+} else {\n+    int strLength = str.length();\n+    int newUpper = upper;\n+    // if the lower value is greater than or equal to the length of the string,\n+    // set both bounds to the length of the string\n+    if (lower >= strLength) {\n+        lower = strLength;\n+        newUpper = strLength;\n+    } else {\n+        // if the upper value is -1 (i.e. no limit) or is greater than the length of the string, set to the length of the string\n+        if (upper == -1 || upper > strLength) {\n+            newUpper = strLength;\n+        }\n+        // if upper is less than lower, raise it to lower\n+        if (newUpper < lower) {\n+            newUpper = lower;\n+        }\n+    }\n+    StringBuffer result = new StringBuffer();\n+    int index = StringUtils.indexOf(str, \" \", lower);\n+    if (index == -1) {\n+        result.append(str.substring(lower, newUpper));\n+        // only if abbreviation has occured do we append the appendToEnd value\n+        if (newUpper != str.length()) {\n+            result.append(StringUtils.defaultString(appendToEnd));\n+        }\n+    } else if (index > newUpper) {\n+        result.append(str.substring(lower, newUpper));\n+        result.append(StringUtils.defaultString(appendToEnd));\n+    } else {\n+        result.append(str.substring(lower, index));\n+        result.append(StringUtils.defaultString(appendToEnd));\n+    }\n+    return result.toString();\n+}\n         // if the upper value is -1 (i.e. no limit) or is greater\n         // than the length of the string, set to the length of the string\n         if (upper == -1 || upper > str.length()) {",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}