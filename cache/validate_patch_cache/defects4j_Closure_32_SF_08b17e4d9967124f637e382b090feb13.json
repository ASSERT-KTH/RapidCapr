{
    "patch": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                      WhitespaceOption option) {\n\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n\n    boolean isLicenseBlock = false;\n    if (getDocFlag(\"license\") != null) {\n      isLicenseBlock = true;\n      setDocFlag(\"license\", \"true\");\n    }\n\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    // Read the content from the first line.\n    String line = stream.getRemainingJSDocLine();\n    if (option != WhitespaceOption.PRESERVE) {\n      line = line.trim();\n    }\n\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n\n    state = State.SEARCHING_ANNOTATION;\n    token = next();\n\n    boolean firstLine = true;\n    boolean ignoreStar = false;\n\n    // Track the start of the line to count whitespace that\n    // the tokenizer skipped. Because this case is rare, it's easier\n    // to do this here than in the tokenizer.\n\n    do {\n      switch (token) {\n        case STAR:\n          if (ignoreStar) {\n            if (builder.length() > 0 &&\n                !Character.isWhitespace(builder.charAt(builder.length() - 1))) {\n              builder.append(' ');\n            }\n          } else {\n            if (builder.length() > 0 && !firstLine &&\n                !Character.isWhitespace(builder.charAt(builder.length() - 1))) {\n              builder.append(' ');\n            }\n            builder.append('*');\n          }\n          ignoreStar = true;\n          token = next();\n          continue;\n\n        case EOL:\n          if (option != WhitespaceOption.SINGLE_LINE && !ignoreStar) {\n            builder.append(\"\\n\");\n          }\n          ignoreStar = false;\n          firstLine = false;\n          token = next();\n          continue;\n\n        default:\n          ignoreStar = false;\n          state = State.SEARCHING_ANNOTATION;\n\n          if (token == JsDocToken.EOC || token == JsDocToken.EOF ||\n              (token == JsDocToken.ANNOTATION && !isLicenseBlock &&\n              option != WhitespaceOption.PRESERVE)) {\n            String multilineText = builder.toString();\n            if (option != WhitespaceOption.PRESERVE) {\n              multilineText = multilineText.trim();\n            }\n            int endLineno = stream.getLineno();\n            int endCharno = stream.getCharno();\n\n            if (multilineText.length() > 0) {\n              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                  endLineno, endCharno);\n            }\n            return new ExtractionInfo(multilineText, token);\n          }\n\n          if (builder.length() > 0 && !firstLine &&\n              !Character.isWhitespace(builder.charAt(builder.length() - 1))) {\n            builder.append(' ');\n          }\n          builder.append(toString(token));\n\n          line = stream.getRemainingJSDocLine();\n\n          if (option != WhitespaceOption.PRESERVE) {\n            line = line.trim();\n          }\n\n          builder.append(line);\n          firstLine = false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..422c00f1 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,14 +1326,19 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                       WhitespaceOption option) {\n \n-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n-        token == JsDocToken.EOF) {\n+    if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {\n       return new ExtractionInfo(\"\", token);\n     }\n \n+    boolean isLicenseBlock = false;\n+    if (getDocFlag(\"license\") != null) {\n+      isLicenseBlock = true;\n+      setDocFlag(\"license\", \"true\");\n+    }\n+\n     stream.update();\n     int startLineno = stream.getLineno();\n     int startCharno = stream.getCharno() + 1;\n@@ -1350,6 +1355,7 @@ public final class JsDocInfoParser {\n     state = State.SEARCHING_ANNOTATION;\n     token = next();\n \n+    boolean firstLine = true;\n     boolean ignoreStar = false;\n \n     // Track the start of the line to count whitespace that\n@@ -1360,25 +1366,27 @@ public final class JsDocInfoParser {\n       switch (token) {\n         case STAR:\n           if (ignoreStar) {\n-            // Mark the position after the star as the new start of the line.\n+            if (builder.length() > 0 &&\n+                !Character.isWhitespace(builder.charAt(builder.length() - 1))) {\n+              builder.append(' ');\n+            }\n           } else {\n-            // The star is part of the comment.\n-            if (builder.length() > 0) {\n+            if (builder.length() > 0 && !firstLine &&\n+                !Character.isWhitespace(builder.charAt(builder.length() - 1))) {\n               builder.append(' ');\n             }\n-\n             builder.append('*');\n           }\n-\n+          ignoreStar = true;\n           token = next();\n           continue;\n \n         case EOL:\n-          if (option != WhitespaceOption.SINGLE_LINE) {\n+          if (option != WhitespaceOption.SINGLE_LINE && !ignoreStar) {\n             builder.append(\"\\n\");\n           }\n-\n-          ignoreStar = true;\n+          ignoreStar = false;\n+          firstLine = false;\n           token = next();\n           continue;\n \n@@ -1386,20 +1394,13 @@ public final class JsDocInfoParser {\n           ignoreStar = false;\n           state = State.SEARCHING_ANNOTATION;\n \n-              // All tokens must be separated by a space.\n-\n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n+          if (token == JsDocToken.EOC || token == JsDocToken.EOF ||\n+              (token == JsDocToken.ANNOTATION && !isLicenseBlock &&\n+              option != WhitespaceOption.PRESERVE)) {\n             String multilineText = builder.toString();\n-\n             if (option != WhitespaceOption.PRESERVE) {\n               multilineText = multilineText.trim();\n             }\n-\n             int endLineno = stream.getLineno();\n             int endCharno = stream.getCharno();\n \n@@ -1407,11 +1408,11 @@ public final class JsDocInfoParser {\n               jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                   endLineno, endCharno);\n             }\n-\n             return new ExtractionInfo(multilineText, token);\n           }\n \n-          if (builder.length() > 0) {\n+          if (builder.length() > 0 && !firstLine &&\n+              !Character.isWhitespace(builder.charAt(builder.length() - 1))) {\n             builder.append(' ');\n           }\n           builder.append(toString(token));\n@@ -1419,14 +1420,11 @@ public final class JsDocInfoParser {\n           line = stream.getRemainingJSDocLine();\n \n           if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n+            line = line.trim();\n           }\n \n           builder.append(line);\n-          token = next();\n-      }\n-    } while (true);\n-  }\n+          firstLine = false;\n \n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}