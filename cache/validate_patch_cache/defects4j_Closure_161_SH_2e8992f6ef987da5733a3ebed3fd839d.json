{
    "patch": "    if (left.isArrayLit() && left.hasChildren()) {\n      Node elem = left.getFirstChild();\n      for (int i = 0; elem != null && i < intIndex; i++) {\n        elem = elem.getNext();\n      }\n\n      if (elem == null && intIndex < Compiler.ANON_FUN_NAME_PREFIX.length()) {\n        Node newElem = Node.newString(left.getParent().getStaticSourceFile(),\n            Compiler.ANON_FUN_NAME_PREFIX.substring(intIndex, intIndex + 1));\n        left.addChildToBack(newElem);\n        n.getParent().replaceChild(n, newElem);\n        reportCodeChange();\n        return newElem;\n      }\n\n      if (elem == null) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      } else if (elem.getIntProp(Node.ARRAY_INDEX_PROP) != intIndex) {\n        Node newElem = Node.newUndefinedNode(elem);\n        left.addChildToBack(newElem);\n        n.getParent().replaceChild(n, newElem);\n        reportCodeChange();\n        return newElem;\n      } else {\n        left.removeChild(elem);\n        n.getParent().replaceChild(n, elem);\n        reportCodeChange();\n        return elem;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..34a24234 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,37 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+    if (left.isArrayLit() && left.hasChildren()) {\n+      Node elem = left.getFirstChild();\n+      for (int i = 0; elem != null && i < intIndex; i++) {\n+        elem = elem.getNext();\n+      }\n+\n+      if (elem == null && intIndex < Compiler.ANON_FUN_NAME_PREFIX.length()) {\n+        Node newElem = Node.newString(left.getParent().getStaticSourceFile(),\n+            Compiler.ANON_FUN_NAME_PREFIX.substring(intIndex, intIndex + 1));\n+        left.addChildToBack(newElem);\n+        n.getParent().replaceChild(n, newElem);\n+        reportCodeChange();\n+        return newElem;\n+      }\n+\n+      if (elem == null) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+      } else if (elem.getIntProp(Node.ARRAY_INDEX_PROP) != intIndex) {\n+        Node newElem = Node.newUndefinedNode(elem);\n+        left.addChildToBack(newElem);\n+        n.getParent().replaceChild(n, newElem);\n+        reportCodeChange();\n+        return newElem;\n+      } else {\n+        left.removeChild(elem);\n+        n.getParent().replaceChild(n, elem);\n+        reportCodeChange();\n+        return elem;\n+      }\n+    }\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}