{
    "patch": "    List<String> locals = new ArrayList<>();\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n \n    if (!modifyCallers) {\n      // Remove unreferenced args from the start of the parameter list and rename the rest\n      Node arg = argList.getFirstChild();\n      while (arg != null) {\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          locals.add(arg.getString());\n          argList.removeChild(arg);\n          compiler.reportCodeChange();\n        } else {\n          referenced.remove(var);\n          arg = arg.getNext();\n          break;\n        }\n      }\n      for (Node node : NodeUtil.nodes(arg)) {\n        if (node.isName()) {\n          String name = node.getString();\n          if (!referenced.contains(fnScope.getVar(name))) {\n            String newName = name + \"_\";\n            while (referenced.contains(fnScope.getVar(newName))) {\n              newName += \"_\";\n            }\n            node.setString(newName);\n            locals.add(name);\n            compiler.reportCodeChange();\n          }\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n    fnScope.addLocalVarNames(locals);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..fc0a8dfc 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,53 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    List<String> locals = new ArrayList<>();\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+ \n+    if (!modifyCallers) {\n+      // Remove unreferenced args from the start of the parameter list and rename the rest\n+      Node arg = argList.getFirstChild();\n+      while (arg != null) {\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          locals.add(arg.getString());\n+          argList.removeChild(arg);\n+          compiler.reportCodeChange();\n+        } else {\n+          referenced.remove(var);\n+          arg = arg.getNext();\n+          break;\n+        }\n+      }\n+      for (Node node : NodeUtil.nodes(arg)) {\n+        if (node.isName()) {\n+          String name = node.getString();\n+          if (!referenced.contains(fnScope.getVar(name))) {\n+            String newName = name + \"_\";\n+            while (referenced.contains(fnScope.getVar(newName))) {\n+              newName += \"_\";\n+            }\n+            node.setString(newName);\n+            locals.add(name);\n+            compiler.reportCodeChange();\n+          }\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+    fnScope.addLocalVarNames(locals);\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}