{
    "patch": "        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            int monthIndex = DateTimeUtils.indexOfSupported(DateTimeFieldType.monthOfYear(), partial.getFields());\n            int newMonthValue = partial.getFieldValue(monthIndex) + valueToAdd;\n            // handle edge cases where new month has a different number of days\n            if (newMonthValue < 1 || newMonthValue > 12) {\n                int newYearValue = partial.getFieldValue(DateTimeUtils.indexOfSupported(DateTimeFieldType.year(), partial.getFields()));\n                int numDaysInNewMonth = DateTimeFieldType.monthOfYear().range(newYearValue).getMaximumValue(newYearValue);\n                if (newMonthValue < 1) {\n                    newYearValue = newYearValue - 1;\n                    newMonthValue = 12 + newMonthValue;\n                } else {\n                    newYearValue = newYearValue + 1;\n                    newMonthValue = newMonthValue -12;\n                }\n                values = iChronology.get(partial.with(DateTimeFieldType.year(), newYearValue).with(DateTimeFieldType.monthOfYear(), newMonthValue), 0L);\n                values[DateTimeUtils.indexOfSupported(DateTimeFieldType.dayOfMonth(), partial.getFields())] = Math.min(values[DateTimeUtils.indexOfSupported(DateTimeFieldType.dayOfMonth(), partial.getFields())], numDaysInNewMonth);\n                return values;\n            }\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                if (i == monthIndex) {\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, newMonthValue);\n                } else {\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..b7caf98b 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,32 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n+            int monthIndex = DateTimeUtils.indexOfSupported(DateTimeFieldType.monthOfYear(), partial.getFields());\n+            int newMonthValue = partial.getFieldValue(monthIndex) + valueToAdd;\n+            // handle edge cases where new month has a different number of days\n+            if (newMonthValue < 1 || newMonthValue > 12) {\n+                int newYearValue = partial.getFieldValue(DateTimeUtils.indexOfSupported(DateTimeFieldType.year(), partial.getFields()));\n+                int numDaysInNewMonth = DateTimeFieldType.monthOfYear().range(newYearValue).getMaximumValue(newYearValue);\n+                if (newMonthValue < 1) {\n+                    newYearValue = newYearValue - 1;\n+                    newMonthValue = 12 + newMonthValue;\n+                } else {\n+                    newYearValue = newYearValue + 1;\n+                    newMonthValue = newMonthValue -12;\n+                }\n+                values = iChronology.get(partial.with(DateTimeFieldType.year(), newYearValue).with(DateTimeFieldType.monthOfYear(), newMonthValue), 0L);\n+                values[DateTimeUtils.indexOfSupported(DateTimeFieldType.dayOfMonth(), partial.getFields())] = Math.min(values[DateTimeUtils.indexOfSupported(DateTimeFieldType.dayOfMonth(), partial.getFields())], numDaysInNewMonth);\n+                return values;\n+            }\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n-    }\n+                if (i == monthIndex) {\n+                    instant = partial.getFieldType(i).getField(iChronology).set(instant, newMonthValue);\n+                } else {\n+                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                }\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}