{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  // Try to resolve the type via the registry\n  boolean resolved = resolveViaRegistry(t, enclosing);\n\n  // If the type couldn't be resolved via the registry, try to resolve it via properties.\n  if (!resolved) {\n    resolveViaProperties(t, enclosing);\n    resolved = resolveViaRegistry(t, enclosing);\n  }\n\n  // If the type is now resolved, finish the property continuations, call the super class's resolveInternal method,\n  // and return the referenced type if we are on the last registry generation.\n  if (isResolved()) {\n    finishPropertyContinuations();\n    super.resolveInternal(t, enclosing);\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }\n\n  // If the type hasn't been resolved yet, it may be due to an implicit prototype cycle.\n  if (detectImplicitPrototypeCycle()) {\n    handleTypeCycle(t);\n  }\n\n  // Call the super class's resolveInternal method and finish the property continuations.\n  super.resolveInternal(t, enclosing);\n  finishPropertyContinuations();\n\n  // Return the referenced type if we are on the last registry generation, otherwise return this.\n  return registry.isLastGeneration() ? getReferencedType() : this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..49163086 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,37 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  // Try to resolve the type via the registry\n+  boolean resolved = resolveViaRegistry(t, enclosing);\n \n+  // If the type couldn't be resolved via the registry, try to resolve it via properties.\n+  if (!resolved) {\n     resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+    resolved = resolveViaRegistry(t, enclosing);\n+  }\n \n+  // If the type is now resolved, finish the property continuations, call the super class's resolveInternal method,\n+  // and return the referenced type if we are on the last registry generation.\n+  if (isResolved()) {\n+    finishPropertyContinuations();\n     super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+  }\n+\n+  // If the type hasn't been resolved yet, it may be due to an implicit prototype cycle.\n+  if (detectImplicitPrototypeCycle()) {\n+    handleTypeCycle(t);\n   }\n \n+  // Call the super class's resolveInternal method and finish the property continuations.\n+  super.resolveInternal(t, enclosing);\n+  finishPropertyContinuations();\n+\n+  // Return the referenced type if we are on the last registry generation, otherwise return this.\n+  return registry.isLastGeneration() ? getReferencedType() : this;\n+}\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}