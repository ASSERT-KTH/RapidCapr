{
    "patch": "import org.apache.commons.math3.exception.MathInternalError;\nimport org.apache.commons.math3.exception.MathIllegalStateException;\nimport org.apache.commons.math3.exception.TooManyEvaluationsException;\nimport org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;\nimport org.apache.commons.math3.analysis.UnivariateFunction;\n\npublic class BisectionSolver extends BaseAbstractUnivariateSolver {\n    \n    /**\n     * Construct a solver.\n     */\n    public BisectionSolver() {\n        super(DEFAULT_ABSOLUTE_ACCURACY, Method.BISECTION);\n    }\n\n    /**\n     * Construct a solver.\n     *\n     * @param absoluteAccuracy Absolute accuracy.\n     */\n    public BisectionSolver(final double absoluteAccuracy) {\n        super(absoluteAccuracy, Method.BISECTION);\n    }\n\n    /**\n     * Construct a solver.\n     *\n     * @param relativeAccuracy Relative accuracy.\n     * @param absoluteAccuracy Absolute accuracy.\n     */\n    public BisectionSolver(final double relativeAccuracy,\n                           final double absoluteAccuracy) {\n        super(relativeAccuracy, absoluteAccuracy, Method.BISECTION);\n    }\n\n    /**\n     * Construct a solver.\n     *\n     * @param relativeAccuracy Relative accuracy.\n     * @param absoluteAccuracy Absolute accuracy.\n     * @param functionValueAccuracy Function value accuracy.\n     */\n    public BisectionSolver(final double relativeAccuracy,\n                           final double absoluteAccuracy,\n                           final double functionValueAccuracy) {\n        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy, Method.BISECTION);\n    }\n\n    /**\n     * Find a zero near the midpoint of {@code min} and {@code max}.\n     *\n     * @param min Lower bound for the interval.\n     * @param max Upper bound for the interval.\n     * @param function Function to solve.\n     * @return the value where the function is zero, within the given tolerance.\n     * @throws TooManyEvaluationsException if an appropriate root cannot be found after\n     *         the maximum number of evaluations.\n     * @throws MathIllegalStateException if min > max or the endpoints do not\n     *         bracket a zero.\n     */\n    public double solve(final double min, final double max,\n                        final UnivariateFunction function)\n        throws TooManyEvaluationsException {\n        clearResult();\n        verifyInterval(min, max);\n        double m;\n        double fm;\n        double fmin = function.value(min);\n        if (fmin == 0.0) {\n            setResult(min, 0);\n            return min;\n        }\n        double fmax = function.value(max);\n        if (fmax == 0.0) {\n            setResult(max, 0);\n            return max;\n        }\n        verifyBracketing(min, max, function);\n        int i = 0;\n        while (i < maximalIterationCount) {\n            m = UnivariateSolverUtils.midpoint(min, max);\n            fm = function.value(m);\n\n            if (fm == 0.0 || (max - min) / 2 < absoluteAccuracy) {\n                setResult(m, i);\n                return getResult();\n            }\n            i++;\n            if (fmin * fm < 0) {\n                max = m;\n                fmax = fm;\n            } else {\n                min = m;\n                fmin = fm;\n            }\n        }\n        throw new TooManyEvaluationsException(maximalIterationCount);\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @throws MathIllegalStateException if the arguments do not satisfy the\n     *         requirements specified by the solver.\n     * @throws TooManyEvaluationsException if an iterative solver is used\n     *         and the maximum number of evaluations is exceeded.\n     */\n    @Override\n    protected final double doSolve()\n        throws TooManyEvaluationsException, MathIllegalStateException {\n\n        final double min = getMin();\n        final double max = getMax();\n        final double functionValueAccuracy = getFunctionValueAccuracy();\n\n        verifyInterval(min, max);\n        verifyBracketing(min, max);\n\n        double m = UnivariateSolverUtils.midpoint(min, max);\n        double fmin = computeObjectiveValue(min);\n        double fm = computeObjectiveValue(m);\n        double fmax = computeObjectiveValue(max);\n\n        int i = 0;\n        while (i++ < maximalIterationCount) {\n            if (fm == 0) {\n                setResult(m, i);\n                return m;\n            }\n            if ((fmin > 0 && fm > 0) || (fmin < 0 && fm < 0)) {\n                m = UnivariateSolverUtils.midpoint(min, m);\n                fmax = fm;\n                fm = computeObjectiveValue(m);\n\n            } else {\n                max = m;\n                fmax = fm;\n                m = UnivariateSolverUtils.midpoint(min, max);\n                fm = computeObjectiveValue(m);\n            }\n            if (FastMath.abs(max - min) <= absoluteAccuracy ||\n                FastMath.abs(fm) <= functionValueAccuracy) {\n                setResult(m, i);\n                return m;\n            }\n        }\n        throw new TooManyEvaluationsException(maximalIterationCount);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e258c68c6..891452a9c 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -125,126 +125,155 @@ public abstract class BaseSecantSolver\n     }\n \n     /** {@inheritDoc} */\n-    protected final double doSolve() {\n-        // Get initial solution\n-        double x0 = getMin();\n-        double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n+import org.apache.commons.math3.exception.MathInternalError;\n+import org.apache.commons.math3.exception.MathIllegalStateException;\n+import org.apache.commons.math3.exception.TooManyEvaluationsException;\n+import org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver;\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n+public class BisectionSolver extends BaseAbstractUnivariateSolver {\n+    \n+    /**\n+     * Construct a solver.\n+     */\n+    public BisectionSolver() {\n+        super(DEFAULT_ABSOLUTE_ACCURACY, Method.BISECTION);\n+    }\n \n-        // Verify bracketing of initial solution.\n-        verifyBracketing(x0, x1);\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param absoluteAccuracy Absolute accuracy.\n+     */\n+    public BisectionSolver(final double absoluteAccuracy) {\n+        super(absoluteAccuracy, Method.BISECTION);\n+    }\n \n-        // Get accuracies.\n-        final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n+     */\n+    public BisectionSolver(final double relativeAccuracy,\n+                           final double absoluteAccuracy) {\n+        super(relativeAccuracy, absoluteAccuracy, Method.BISECTION);\n+    }\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n-        // larger than the right bound.\n-        boolean inverted = false;\n+    /**\n+     * Construct a solver.\n+     *\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n+     * @param functionValueAccuracy Function value accuracy.\n+     */\n+    public BisectionSolver(final double relativeAccuracy,\n+                           final double absoluteAccuracy,\n+                           final double functionValueAccuracy) {\n+        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy, Method.BISECTION);\n+    }\n \n-        // Keep finding better approximations.\n-        while (true) {\n-            // Calculate the next approximation.\n-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+    /**\n+     * Find a zero near the midpoint of {@code min} and {@code max}.\n+     *\n+     * @param min Lower bound for the interval.\n+     * @param max Upper bound for the interval.\n+     * @param function Function to solve.\n+     * @return the value where the function is zero, within the given tolerance.\n+     * @throws TooManyEvaluationsException if an appropriate root cannot be found after\n+     *         the maximum number of evaluations.\n+     * @throws MathIllegalStateException if min > max or the endpoints do not\n+     *         bracket a zero.\n+     */\n+    public double solve(final double min, final double max,\n+                        final UnivariateFunction function)\n+        throws TooManyEvaluationsException {\n+        clearResult();\n+        verifyInterval(min, max);\n+        double m;\n+        double fm;\n+        double fmin = function.value(min);\n+        if (fmin == 0.0) {\n+            setResult(min, 0);\n+            return min;\n+        }\n+        double fmax = function.value(max);\n+        if (fmax == 0.0) {\n+            setResult(max, 0);\n+            return max;\n+        }\n+        verifyBracketing(min, max, function);\n+        int i = 0;\n+        while (i < maximalIterationCount) {\n+            m = UnivariateSolverUtils.midpoint(min, max);\n+            fm = function.value(m);\n \n-            // If the new approximation is the exact root, return it. Since\n-            // this is not an under-approximation or an over-approximation,\n-            // we can return it regardless of the allowed solutions.\n-            if (fx == 0.0) {\n-                return x;\n+            if (fm == 0.0 || (max - min) / 2 < absoluteAccuracy) {\n+                setResult(m, i);\n+                return getResult();\n             }\n-\n-            // Update the bounds with the new approximation.\n-            if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n-                // the interval.\n-                x0 = x1;\n-                f0 = f1;\n-                inverted = !inverted;\n+            i++;\n+            if (fmin * fm < 0) {\n+                max = m;\n+                fmax = fm;\n             } else {\n-                switch (method) {\n-                case ILLINOIS:\n-                    f0 *= 0.5;\n-                    break;\n-                case PEGASUS:\n-                    f0 *= f1 / (f1 + fx);\n-                    break;\n-                        // Update formula cannot make any progress: Update the\n-                        // search interval.\n-                default:\n-                    // Should never happen.\n-                }\n+                min = m;\n+                fmin = fm;\n             }\n-            // Update from [x0, x1] to [x0, x].\n-            x1 = x;\n-            f1 = fx;\n+        }\n+        throw new TooManyEvaluationsException(maximalIterationCount);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @throws MathIllegalStateException if the arguments do not satisfy the\n+     *         requirements specified by the solver.\n+     * @throws TooManyEvaluationsException if an iterative solver is used\n+     *         and the maximum number of evaluations is exceeded.\n+     */\n+    @Override\n+    protected final double doSolve()\n+        throws TooManyEvaluationsException, MathIllegalStateException {\n+\n+        final double min = getMin();\n+        final double max = getMax();\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n \n-            // If the function value of the last approximation is too small,\n-            // given the function value accuracy, then we can't get closer to\n-            // the root than we already are.\n-            if (FastMath.abs(f1) <= ftol) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    if (inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case RIGHT_SIDE:\n-                    if (!inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case BELOW_SIDE:\n-                    if (f1 <= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                case ABOVE_SIDE:\n-                    if (f1 >= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                default:\n-                    throw new MathInternalError();\n-                }\n+        verifyInterval(min, max);\n+        verifyBracketing(min, max);\n+\n+        double m = UnivariateSolverUtils.midpoint(min, max);\n+        double fmin = computeObjectiveValue(min);\n+        double fm = computeObjectiveValue(m);\n+        double fmax = computeObjectiveValue(max);\n+\n+        int i = 0;\n+        while (i++ < maximalIterationCount) {\n+            if (fm == 0) {\n+                setResult(m, i);\n+                return m;\n             }\n+            if ((fmin > 0 && fm > 0) || (fmin < 0 && fm < 0)) {\n+                m = UnivariateSolverUtils.midpoint(min, m);\n+                fmax = fm;\n+                fm = computeObjectiveValue(m);\n \n-            // If the current interval is within the given accuracies, we\n-            // are satisfied with the current approximation.\n-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n-                                                     atol)) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    return inverted ? x1 : x0;\n-                case RIGHT_SIDE:\n-                    return inverted ? x0 : x1;\n-                case BELOW_SIDE:\n-                    return (f1 <= 0) ? x1 : x0;\n-                case ABOVE_SIDE:\n-                    return (f1 >= 0) ? x1 : x0;\n-                default:\n-                    throw new MathInternalError();\n-                }\n+            } else {\n+                max = m;\n+                fmax = fm;\n+                m = UnivariateSolverUtils.midpoint(min, max);\n+                fm = computeObjectiveValue(m);\n+            }\n+            if (FastMath.abs(max - min) <= absoluteAccuracy ||\n+                FastMath.abs(fm) <= functionValueAccuracy) {\n+                setResult(m, i);\n+                return m;\n             }\n         }\n+        throw new TooManyEvaluationsException(maximalIterationCount);\n     }\n+}\n \n     /** <em>Secant</em>-based root-finding methods. */\n     protected enum Method {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}