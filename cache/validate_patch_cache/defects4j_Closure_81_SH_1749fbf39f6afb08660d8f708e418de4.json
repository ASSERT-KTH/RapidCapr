{
    "patch": "        name.setLineno(functionNode.getLineno());\n        name.setCharno(position2charno(functionNode.getAbsolutePosition()));\n      }\n      Node node = newNode(Token.FUNCTION, transform(name));\n      Node lp = newNode(Token.LP);\n      lp.setLineno(functionNode.getLineno());\n      lp.setCharno(position2charno(functionNode.getAbsolutePosition() + functionNode.getLp()));\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      node.addChildToBack(lp);\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..9d3364dc 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,20 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+        name.setLineno(functionNode.getLineno());\n+        name.setCharno(position2charno(functionNode.getAbsolutePosition()));\n+      }\n+      Node node = newNode(Token.FUNCTION, transform(name));\n+      Node lp = newNode(Token.LP);\n+      lp.setLineno(functionNode.getLineno());\n+      lp.setCharno(position2charno(functionNode.getAbsolutePosition() + functionNode.getLp()));\n+      for (AstNode param : functionNode.getParams()) {\n+        lp.addChildToBack(transform(param));\n+      }\n+      node.addChildToBack(lp);\n+      Node bodyNode = transform(functionNode.getBody());\n+      parseDirectives(bodyNode);\n+      node.addChildToBack(bodyNode);\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}