{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n\n    // Check if the index is a number.\n    if (!right.isNumber()) {\n        return n;\n    }\n\n    // Check if the index is an integer.\n    double index = right.getDouble();\n    if (!isAlmostInteger(index)) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n    int intIndex = (int) index;\n\n    // Check if the index is out of bounds.\n    if (intIndex < 0 || intIndex >= left.getChildCount()) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    // Replace the GETELEM with the corresponding element from the array.\n    Node elem = left.removeChildAt(intIndex);\n    if (elem.isEmpty()) {\n        elem = NodeUtil.newUndefinedNode(elem);\n    }\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n\n    return elem;\n}\n\nprivate boolean isAlmostInteger(double num) {\n    return Math.abs(num - Math.round(num)) <= 1e-10;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..47e4f94f 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,57 +1419,44 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     if (isAssignmentTarget(n)) {\n-      return n;\n+        return n;\n     }\n \n+    // Check if the index is a number.\n     if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n+        return n;\n     }\n \n+    // Check if the index is an integer.\n     double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n-\n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n+    if (!isAlmostInteger(index)) {\n+        error(INVALID_GETELEM_INDEX_ERROR, right);\n+        return n;\n     }\n+    int intIndex = (int) index;\n \n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+    // Check if the index is out of bounds.\n+    if (intIndex < 0 || intIndex >= left.getChildCount()) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n     }\n \n+    // Replace the GETELEM with the corresponding element from the array.\n+    Node elem = left.removeChildAt(intIndex);\n     if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n+        elem = NodeUtil.newUndefinedNode(elem);\n     }\n-\n-    // Replace the entire GETELEM with the value\n     n.getParent().replaceChild(n, elem);\n     reportCodeChange();\n+\n     return elem;\n-  }\n+}\n+\n+private boolean isAlmostInteger(double num) {\n+    return Math.abs(num - Math.round(num)) <= 1e-10;\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}