{
    "patch": "import java.util.Arrays;\n\npublic class GenotypeProbabilities {\n    private static final int MAX_M = 100;\n    private static final int MAX_D = 100;\n    private static final int MAX_N = 1000;\n\n    public static double[] distributionClone(double[] genotypeProbabilities, int M, int D, int N) {\n        double[] probabilities = new double[M];\n\n        for (int i = 0; i < M; i++) {\n            probabilities[i] = genotypeProbabilities[i];\n        }\n\n        for (int i = 0; i < D; i++) {\n            double[] tempProbabilities = new double[M];\n\n            for (int j = 0; j < M; j++) {\n                for (int k = 0; k < M; k++) {\n                    tempProbabilities[k] += probabilities[j] * genotypeProbabilities[getDominant(j, k)];\n                }\n            }\n\n            probabilities = tempProbabilities;\n        }\n\n        double[] result = new double[N + 1];\n        Arrays.fill(result, 0d);\n\n        for (int i = 0; i < M; i++) {\n            result[populationCount(i)] += probabilities[i];\n        }\n\n        for (int i = 0; i < N + 1; i++) {\n            result[i] /= Math.pow(M, D);\n        }\n\n        return result;\n    }\n\n    private static int getDominant(int i, int j) {\n        if (i > j) {\n            return getDominant(j, i);\n        }\n\n        int result = 0;\n        for (int k = 0; k < i; k++) {\n            result += k;\n        }\n\n        return result + j - i;\n    }\n\n    private static int populationCount(int i) {\n        int result = 0;\n\n        while (i > 0) {\n            result += i % 2;\n            i /= 2;\n        }\n\n        return result;\n    }\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}