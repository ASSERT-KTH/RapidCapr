{
    "patch": "      if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors or have the @this\n        // or @override annotation.\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null &&\n            (jsDoc.isConstructor() ||\n             jsDoc.isInterface() ||\n             jsDoc.hasThisType() ||\n             jsDoc.isOverride())) {\n          return false;\n        }\n\n        // Don't traverse functions unless they would normally\n        // be able to have a @this annotation associated with them.\n        boolean isFunctionExpression =\n            NodeUtil.isFunctionExpression(n) || NodeUtil.isArrowFunction(n);\n        if (!isFunctionExpression) {\n          // Require a variable or property assignment to traverse the function.\n          // Alternatively, the function might be immediately called or passed to\n          // another function as a parameter, which will get access to its @this.\n          int parentType = parent.getType();\n          if (!(parentType == Token.ASSIGN ||\n                parentType == Token.VAR ||\n                parentType == Token.LET ||\n                parentType == Token.CONST ||\n                parentType == Token.OBJECTLIT ||\n                parentType == Token.CALL ||\n                parentType == Token.NEW ||\n                (parentType == Token.EXPR_RESULT && parent.getFirstChild() == n) ||\n                (parentType == Token.FOR &&\n                 parent.getLastChild() == n &&\n                 parent.getFirstChild() != n))) {\n            return false;\n          }\n\n          // Don't traverse functions assigned to prototype properties.\n          if (parentType == Token.ASSIGN && NodeUtil.isGet(parent.getFirstChild())) {\n            Node lhs = parent.getFirstChild();\n            // Skip over nested GETPROPs, if there are any.\n            while (lhs != null && NodeUtil.isGet(lhs)) {\n              lhs = lhs.getFirstChild();\n            }\n            if (lhs.getType() == Token.GETPROP &&\n                lhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..0d31e52d 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,52 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (n.getType() == Token.FUNCTION) {\n+        // Don't traverse functions that are constructors or have the @this\n+        // or @override annotation.\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null &&\n+            (jsDoc.isConstructor() ||\n+             jsDoc.isInterface() ||\n+             jsDoc.hasThisType() ||\n+             jsDoc.isOverride())) {\n+          return false;\n+        }\n+\n+        // Don't traverse functions unless they would normally\n+        // be able to have a @this annotation associated with them.\n+        boolean isFunctionExpression =\n+            NodeUtil.isFunctionExpression(n) || NodeUtil.isArrowFunction(n);\n+        if (!isFunctionExpression) {\n+          // Require a variable or property assignment to traverse the function.\n+          // Alternatively, the function might be immediately called or passed to\n+          // another function as a parameter, which will get access to its @this.\n+          int parentType = parent.getType();\n+          if (!(parentType == Token.ASSIGN ||\n+                parentType == Token.VAR ||\n+                parentType == Token.LET ||\n+                parentType == Token.CONST ||\n+                parentType == Token.OBJECTLIT ||\n+                parentType == Token.CALL ||\n+                parentType == Token.NEW ||\n+                (parentType == Token.EXPR_RESULT && parent.getFirstChild() == n) ||\n+                (parentType == Token.FOR &&\n+                 parent.getLastChild() == n &&\n+                 parent.getFirstChild() != n))) {\n+            return false;\n+          }\n+\n+          // Don't traverse functions assigned to prototype properties.\n+          if (parentType == Token.ASSIGN && NodeUtil.isGet(parent.getFirstChild())) {\n+            Node lhs = parent.getFirstChild();\n+            // Skip over nested GETPROPs, if there are any.\n+            while (lhs != null && NodeUtil.isGet(lhs)) {\n+              lhs = lhs.getFirstChild();\n+            }\n+            if (lhs.getType() == Token.GETPROP &&\n+                lhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}