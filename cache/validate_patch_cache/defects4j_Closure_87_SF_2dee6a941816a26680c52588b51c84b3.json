{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node stmt = n.getFirstChild();\n      if (stmt.isExprResult()) {\n        // stmt is an EXPR_RESULT\n        Node expr = stmt.getFirstChild();\n        return !expr.isYieldAll() && !expr.isYield() && !expr.isFunction();\n      } else if (stmt.isIf()) {\n        // Check if the IF statement has an else block\n        Node elseBlock = stmt.getLastChild();\n        if (!elseBlock.isEmpty()) {\n          return false;\n        }\n        // Check that both branches have a single expression\n        Node thenBlock = stmt.getChildAtIndex(1);\n        if (!thenBlock.hasMoreThanOneChild()) {\n          Node thenExpr = thenBlock.getFirstChild();\n          Node elseExpr = stmt.getFirstChild().getNext().getFirstChild();\n          return thenExpr.isExpressionResult() && elseExpr.isExpressionResult();\n        }\n      } else {\n        // stmt is a regular statement\n        return stmt.isExpressionResult() || stmt.isReturn();\n      }\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..be7f4c89 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,37 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node stmt = n.getFirstChild();\n+      if (stmt.isExprResult()) {\n+        // stmt is an EXPR_RESULT\n+        Node expr = stmt.getFirstChild();\n+        return !expr.isYieldAll() && !expr.isYield() && !expr.isFunction();\n+      } else if (stmt.isIf()) {\n+        // Check if the IF statement has an else block\n+        Node elseBlock = stmt.getLastChild();\n+        if (!elseBlock.isEmpty()) {\n+          return false;\n+        }\n+        // Check that both branches have a single expression\n+        Node thenBlock = stmt.getChildAtIndex(1);\n+        if (!thenBlock.hasMoreThanOneChild()) {\n+          Node thenExpr = thenBlock.getFirstChild();\n+          Node elseExpr = stmt.getFirstChild().getNext().getFirstChild();\n+          return thenExpr.isExpressionResult() && elseExpr.isExpressionResult();\n+        }\n+      } else {\n+        // stmt is a regular statement\n+        return stmt.isExpressionResult() || stmt.isReturn();\n       }\n     }\n-\n-    return false;\n   }\n \n+  return false;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}