{
    "patch": "public static double regularizedGamma(double a, double x) {\n    double gammaAx = Gamma.gamma(a) * x;\n    double sum = 1d / a;\n    double term = sum;\n    while (Math.abs(term) > PRECISION * Math.abs(sum)) {\n        term *= -x / (a + sum + 1d);\n        sum += term;\n    }\n    return Math.exp(-gammaAx + a * Math.log(x) - Math.log(a) - Gamma.logGamma(a)) * sum;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..e9f23bbcd 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,16 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    double gammaAx = Gamma.gamma(a) * x;\n+    double sum = 1d / a;\n+    double term = sum;\n+    while (Math.abs(term) > PRECISION * Math.abs(sum)) {\n+        term *= -x / (a + sum + 1d);\n+        sum += term;\n+    }\n+    return Math.exp(-gammaAx + a * Math.log(x) - Math.log(a) - Gamma.logGamma(a)) * sum;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}