{
    "patch": "public boolean canBeCalled() {\n    if (hasReferenceName()) {\n      return isConstructor();\n    } else {\n      return false;\n    }\n}\n\n@Override\nString toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      if (prettyPrint && canBeCalled()) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"(new \");\n        sb.append(getReferenceName());\n        sb.append(\")\");\n        return sb.toString();\n      } else {\n        return getReferenceName();\n      }\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        sb.append(getPropertyType(property).toString());\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..c06f53c4 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,14 +345,26 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n+public boolean canBeCalled() {\n+    if (hasReferenceName()) {\n+      return isConstructor();\n+    } else {\n+      return false;\n+    }\n+}\n \n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n+@Override\n+String toStringHelper(boolean forAnnotations) {\n     if (hasReferenceName()) {\n-      return getReferenceName();\n+      if (prettyPrint && canBeCalled()) {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"(new \");\n+        sb.append(getReferenceName());\n+        sb.append(\")\");\n+        return sb.toString();\n+      } else {\n+        return getReferenceName();\n+      }\n     } else if (prettyPrint) {\n       // Don't pretty print recursively.\n       prettyPrint = false;",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}