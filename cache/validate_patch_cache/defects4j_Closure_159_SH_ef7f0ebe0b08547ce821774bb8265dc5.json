{
    "patch": "    if (node != null && node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child != null && child.getType() == Token.NAME) {\n        String functionName = child.getString();\n        if (functionName != null && !functionName.isEmpty() && !functionName.startsWith(\"$\") && !functionName.startsWith(\"goog.\")) {\n          changed.add(functionName);\n        }\n      }\n      Node grandChild = child.getFirstChild();\n      if (grandChild != null) {\n        findCalledFunctions(grandChild, changed);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..4ff140c1 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -774,10 +774,17 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n+    if (node != null && node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+      if (child != null && child.getType() == Token.NAME) {\n+        String functionName = child.getString();\n+        if (functionName != null && !functionName.isEmpty() && !functionName.startsWith(\"$\") && !functionName.startsWith(\"goog.\")) {\n+          changed.add(functionName);\n+        }\n+      }\n+      Node grandChild = child.getFirstChild();\n+      if (grandChild != null) {\n+        findCalledFunctions(grandChild, changed);\n       }\n     }\n ",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}