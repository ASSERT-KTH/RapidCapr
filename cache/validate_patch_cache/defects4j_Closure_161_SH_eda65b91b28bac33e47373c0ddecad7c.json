{
    "patch": "    if (left.getType() == Token.ARRAYLIT) {\n      Node[] elements = left.getElements();\n      if (elements == null || elements.length <= intIndex) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      } else {\n        return elements[intIndex] != null ? elements[intIndex] : NodeUtil.newUndefinedNode(n);\n      }\n    }\n\n    // If we can't fold it here because we do not know what type it is.\n    // We will generate type warning later at type checking phase.\n    return n;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..98078b6f 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,19 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+    if (left.getType() == Token.ARRAYLIT) {\n+      Node[] elements = left.getElements();\n+      if (elements == null || elements.length <= intIndex) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+      } else {\n+        return elements[intIndex] != null ? elements[intIndex] : NodeUtil.newUndefinedNode(n);\n+      }\n+    }\n+\n+    // If we can't fold it here because we do not know what type it is.\n+    // We will generate type warning later at type checking phase.\n+    return n;\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}