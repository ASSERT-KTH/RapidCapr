{
    "patch": "// Detect early that algorithm is stuck, instead of waiting\n// for the maximum number of iterations to be exceeded.\nif (FastMath.abs(f1) <= ftol) {\n    switch (allowed) {\n        case ANY_SIDE:\n            return x1;\n        case LEFT_SIDE:\n            return inverted ? x1 : x0;\n        case RIGHT_SIDE:\n            return inverted ? x0 : x1;\n        case BELOW_SIDE:\n            return (f1 <= 0) ? x1 : x0;\n        case ABOVE_SIDE:\n            return (f1 >= 0) ? x1 : x0;\n        default:\n            throw new MathInternalError();\n    }\n}\n\n// Detect early that algorithm is stuck, instead of waiting\n// for the maximum number of iterations to be exceeded.\nif (FastMath.abs(x1 - x0) <= atol && (FastMath.abs(f1) > ftol || FastMath.abs(f0) > ftol)) {\n    throw new ConvergenceException(\"convergence failed\");\n}\n\n// If the current interval is within the given accuracies, we\n// are satisfied with the current approximation.\nif (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {\n    switch (allowed) {\n        case ANY_SIDE:\n            return x1;\n        case LEFT_SIDE:\n            return inverted ? x1 : x0;\n        case RIGHT_SIDE:\n            return inverted ? x0 : x1;\n        case BELOW_SIDE:\n            return (f1 <= 0) ? x1 : x0;\n        case ABOVE_SIDE:\n            return (f1 >= 0) ? x1 : x0;\n        default:\n            throw new MathInternalError();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..86be0fc54 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,49 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+// Detect early that algorithm is stuck, instead of waiting\n+// for the maximum number of iterations to be exceeded.\n+if (FastMath.abs(f1) <= ftol) {\n+    switch (allowed) {\n+        case ANY_SIDE:\n+            return x1;\n+        case LEFT_SIDE:\n+            return inverted ? x1 : x0;\n+        case RIGHT_SIDE:\n+            return inverted ? x0 : x1;\n+        case BELOW_SIDE:\n+            return (f1 <= 0) ? x1 : x0;\n+        case ABOVE_SIDE:\n+            return (f1 >= 0) ? x1 : x0;\n+        default:\n+            throw new MathInternalError();\n+    }\n+}\n+\n+// Detect early that algorithm is stuck, instead of waiting\n+// for the maximum number of iterations to be exceeded.\n+if (FastMath.abs(x1 - x0) <= atol && (FastMath.abs(f1) > ftol || FastMath.abs(f0) > ftol)) {\n+    throw new ConvergenceException(\"convergence failed\");\n+}\n+\n+// If the current interval is within the given accuracies, we\n+// are satisfied with the current approximation.\n+if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {\n+    switch (allowed) {\n+        case ANY_SIDE:\n+            return x1;\n+        case LEFT_SIDE:\n+            return inverted ? x1 : x0;\n+        case RIGHT_SIDE:\n+            return inverted ? x0 : x1;\n+        case BELOW_SIDE:\n+            return (f1 <= 0) ? x1 : x0;\n+        case ABOVE_SIDE:\n+            return (f1 >= 0) ? x1 : x0;\n+        default:\n+            throw new MathInternalError();\n+    }\n+}\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: no suitable constructor found for ConvergenceException(String)",
    "test_result": "ERROR"
}