{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node child = n.getFirstChild();\n    if (child.getType() == Token.EXPR_RESULT) {\n      child = child.getFirstChild();\n      if (child.getType() == Token.HOOK) {\n        Node firstChild = child.getFirstChild();\n        Node secondChild = firstChild.getNext();\n        Node thirdChild = child.getLastChild();\n\n        // check if the first child is not an expression i.e the condition in the ternary expression\n        if (!NodeUtil.isExpressionNode(firstChild)) {\n          return false;\n        }\n        // check if the second and third children are not expression nodes\n        if (!NodeUtil.isExpressionNode(secondChild) || !NodeUtil.isExpressionNode(thirdChild)) {\n          return false;\n        }\n        // check if the second and third children do not have side effects\n        if (NodeUtil.mayHaveSideEffects(secondChild) || NodeUtil.mayHaveSideEffects(thirdChild)) {\n          return false;\n        }\n        return true;\n      }\n      return NodeUtil.isExpressionNode(child);\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..ef1917d4 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,35 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    Node child = n.getFirstChild();\n+    if (child.getType() == Token.EXPR_RESULT) {\n+      child = child.getFirstChild();\n+      if (child.getType() == Token.HOOK) {\n+        Node firstChild = child.getFirstChild();\n+        Node secondChild = firstChild.getNext();\n+        Node thirdChild = child.getLastChild();\n+\n+        // check if the first child is not an expression i.e the condition in the ternary expression\n+        if (!NodeUtil.isExpressionNode(firstChild)) {\n+          return false;\n+        }\n+        // check if the second and third children are not expression nodes\n+        if (!NodeUtil.isExpressionNode(secondChild) || !NodeUtil.isExpressionNode(thirdChild)) {\n+          return false;\n+        }\n+        // check if the second and third children do not have side effects\n+        if (NodeUtil.mayHaveSideEffects(secondChild) || NodeUtil.mayHaveSideEffects(thirdChild)) {\n+          return false;\n+        }\n+        return true;\n       }\n+      return NodeUtil.isExpressionNode(child);\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}