{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    while (true) {\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex.clone();\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // check if we are close to the target\n            final double previousBest = best.getValue();\n            final double currentBest  = reflected.getValue();\n            final double[] previous = best.getPointRef();\n            final double[] reflectedArray = reflected.getPointRef();\n            final double delta = FastMath.abs(currentBest - previousBest);\n            final double rLimit = relativeThreshold * (FastMath.abs(previousBest) + FastMath.abs(currentBest)) * 0.5;\n\n            if (delta <= absoluteThreshold || delta <= rLimit) {\n                simplex = original;\n                return;\n            }\n\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                simplex = replaceWorst(original, expanded, comparator);\n            } else {\n                simplex = replaceWorst(original, reflected, comparator);\n            }\n\n        } else {\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                simplex = replaceWorst(original, contracted, comparator);\n            } else {\n                final RealPointValuePair[] contractedSimplex = contract(original, best, comparator);\n                if (comparator.compare(contractedSimplex[0], best) >= 0) {\n                    simplex = shrink(original, comparator);\n                } else {\n                    simplex = contractedSimplex;\n                }\n            }\n\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..015b94c88 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,58 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+    while (true) {\n+        incrementIterationsCounter();\n+\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex.clone();\n+        final RealPointValuePair best = original[0];\n+\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+\n+            // check if we are close to the target\n+            final double previousBest = best.getValue();\n+            final double currentBest  = reflected.getValue();\n+            final double[] previous = best.getPointRef();\n+            final double[] reflectedArray = reflected.getPointRef();\n+            final double delta = FastMath.abs(currentBest - previousBest);\n+            final double rLimit = relativeThreshold * (FastMath.abs(previousBest) + FastMath.abs(currentBest)) * 0.5;\n+\n+            if (delta <= absoluteThreshold || delta <= rLimit) {\n+                simplex = original;\n                 return;\n+            }\n \n+            // compute the expanded simplex\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                simplex = replaceWorst(original, expanded, comparator);\n+            } else {\n+                simplex = replaceWorst(original, reflected, comparator);\n             }\n \n+        } else {\n+\n             // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+            final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+                simplex = replaceWorst(original, contracted, comparator);\n+            } else {\n+                final RealPointValuePair[] contractedSimplex = contract(original, best, comparator);\n+                if (comparator.compare(contractedSimplex[0], best) >= 0) {\n+                    simplex = shrink(original, comparator);\n+                } else {\n+                    simplex = contractedSimplex;\n+                }\n             }\n \n         }\n-\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}