{
    "patch": "static boolean isValidDefineValue(Node val, Set<String> defines) {\n    switch (val.getType()) {\n        case Token.STRING:\n        case Token.NUMBER:\n        case Token.TRUE:\n        case Token.FALSE:\n            return true;\n\n        // Binary operators are only valid if both children are valid.\n        case Token.BITAND:\n        case Token.BITNOT:\n        case Token.BITOR:\n        case Token.BITXOR:\n            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);\n\n        // Unary operators are valid if the child is valid.\n        case Token.NOT:\n        case Token.NEG:\n            return isValidDefineValue(val.getFirstChild(), defines);\n\n        // Names are valid if and only if they are defines themselves.\n        case Token.NAME:\n            if (defines.contains(val.getString())) {\n                return true;\n            }\n            break;\n\n        case Token.GETPROP:\n            if (val.getLastChild().getType() == Token.STRING) {\n                String name = val.getFirstChild().getQualifiedName() + \".\" + val.getLastChild().getString();\n                if (defines.contains(name)) {\n                    return true;\n                }\n            }\n            break;\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex a31b17a2..69486105 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -317,34 +317,44 @@ public final class NodeUtil {\n    * @param val The value being assigned.\n    * @param defines The list of names of existing defines.\n    */\n-  static boolean isValidDefineValue(Node val, Set<String> defines) {\n+static boolean isValidDefineValue(Node val, Set<String> defines) {\n     switch (val.getType()) {\n-      case Token.STRING:\n-      case Token.NUMBER:\n-      case Token.TRUE:\n-      case Token.FALSE:\n-        return true;\n-\n-      // Binary operators are only valid if both children are valid.\n-      case Token.BITAND:\n-      case Token.BITNOT:\n-      case Token.BITOR:\n-      case Token.BITXOR:\n-\n-      // Uniary operators are valid if the child is valid.\n-      case Token.NOT:\n-      case Token.NEG:\n-        return isValidDefineValue(val.getFirstChild(), defines);\n+        case Token.STRING:\n+        case Token.NUMBER:\n+        case Token.TRUE:\n+        case Token.FALSE:\n+            return true;\n \n-      // Names are valid if and only if they are defines themselves.\n-      case Token.NAME:\n-      case Token.GETPROP:\n-        if (val.isQualifiedName()) {\n-          return defines.contains(val.getQualifiedName());\n-        }\n+        // Binary operators are only valid if both children are valid.\n+        case Token.BITAND:\n+        case Token.BITNOT:\n+        case Token.BITOR:\n+        case Token.BITXOR:\n+            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);\n+\n+        // Unary operators are valid if the child is valid.\n+        case Token.NOT:\n+        case Token.NEG:\n+            return isValidDefineValue(val.getFirstChild(), defines);\n+\n+        // Names are valid if and only if they are defines themselves.\n+        case Token.NAME:\n+            if (defines.contains(val.getString())) {\n+                return true;\n+            }\n+            break;\n+\n+        case Token.GETPROP:\n+            if (val.getLastChild().getType() == Token.STRING) {\n+                String name = val.getFirstChild().getQualifiedName() + \".\" + val.getLastChild().getString();\n+                if (defines.contains(name)) {\n+                    return true;\n+                }\n+            }\n+            break;\n     }\n     return false;\n-  }\n+}\n \n   /**\n    * Returns whether this a BLOCK node with no children.",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}