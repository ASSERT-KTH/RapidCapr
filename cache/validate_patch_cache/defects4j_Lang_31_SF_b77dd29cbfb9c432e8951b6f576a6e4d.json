{
    "patch": "public static boolean containsAny(final char[] str, final char[] searchChars) {\n    if (isEmpty(str) || isEmpty(searchChars)) {\n        return false;\n    }\n    for (int i = 0; i < str.length; i++) {\n        final int high = Character.isHighSurrogate(str[i]) && i + 1 < str.length && Character.isLowSurrogate(str[i + 1])\n                ? Character.toCodePoint(str[i], str[i + 1]) : str[i];\n        for (int j = 0; j < searchChars.length; j++) {\n            final int searchChar = searchChars[j];\n            if (high == searchChar) {\n                return true;\n            }\n            if (Character.isHighSurrogate(searchChar) && j + 1 < searchChars.length && Character.isLowSurrogate(searchChars[j + 1])) {\n                final int highSearch = Character.toCodePoint(searchChar, searchChars[j + 1]);\n                if (high == highSearch) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\npublic static boolean isEmpty(final CharSequence cs) {\n    return cs == null || cs.length() == 0;\n}\n\npublic static boolean isEmpty(final char[] array) {\n    return array == null || array.length == 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..7feec739 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,36 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(final char[] str, final char[] searchChars) {\n+    if (isEmpty(str) || isEmpty(searchChars)) {\n+        return false;\n+    }\n+    for (int i = 0; i < str.length; i++) {\n+        final int high = Character.isHighSurrogate(str[i]) && i + 1 < str.length && Character.isLowSurrogate(str[i + 1])\n+                ? Character.toCodePoint(str[i], str[i + 1]) : str[i];\n+        for (int j = 0; j < searchChars.length; j++) {\n+            final int searchChar = searchChars[j];\n+            if (high == searchChar) {\n+                return true;\n+            }\n+            if (Character.isHighSurrogate(searchChar) && j + 1 < searchChars.length && Character.isLowSurrogate(searchChars[j + 1])) {\n+                final int highSearch = Character.toCodePoint(searchChar, searchChars[j + 1]);\n+                if (high == highSearch) {\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n+public static boolean isEmpty(final CharSequence cs) {\n+    return cs == null || cs.length() == 0;\n+}\n+\n+public static boolean isEmpty(final char[] array) {\n+    return array == null || array.length == 0;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}