{
    "patch": "private void findAliases(NodeTraversal t) {\n    Scope scope = t.getScope();\n    for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        if (n == null || !n.isName()) {\n            // Ignore non-Name nodes.\n            continue;\n        }\n        Node parent = n.getParent();\n        if (parent == null || !parent.isVar()) {\n            // Ignore non-variable declaration nodes.\n            continue;\n        }\n        Node value = n.getFirstChild();\n        if (value == null || !value.isQualifiedName()) {\n            // Ignore non-qualified name nodes.\n            continue;\n        }\n        String name = n.getString();\n        Var aliasVar = scope.getVar(name);\n        if (aliasVar == null || aliasVar.getInitialValue() == null || !aliasVar.getInitialValue().isQualifiedName()) {\n            // Ignore null values or non-qualified name initial values.\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n            continue;\n        }\n        String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n        aliases.put(name, aliasVar);\n        transformation.addAlias(name, qualifiedName);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..f35eb6a4 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,36 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n+private void findAliases(NodeTraversal t) {\n+    Scope scope = t.getScope();\n+    for (Var v : scope.getVarIterable()) {\n         Node n = v.getNode();\n-        int type = n.getType();\n+        if (n == null || !n.isName()) {\n+            // Ignore non-Name nodes.\n+            continue;\n+        }\n         Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+        if (parent == null || !parent.isVar()) {\n+            // Ignore non-variable declaration nodes.\n+            continue;\n         }\n+        Node value = n.getFirstChild();\n+        if (value == null || !value.isQualifiedName()) {\n+            // Ignore non-qualified name nodes.\n+            continue;\n         }\n-      }\n+        String name = n.getString();\n+        Var aliasVar = scope.getVar(name);\n+        if (aliasVar == null || aliasVar.getInitialValue() == null || !aliasVar.getInitialValue().isQualifiedName()) {\n+            // Ignore null values or non-qualified name initial values.\n+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n+            continue;\n+        }\n+        String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+        aliases.put(name, aliasVar);\n+        transformation.addAlias(name, qualifiedName);\n     }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "junit.framework.AssertionFailedError: There should be one error. expected:<1> but was:<0>",
    "test_result": "FAIL"
}