{
    "patch": "    if (NodeUtil.isFunctionObjectCall(n)) {\n      Node functionNode = n.getFirstChild();\n      if (!functionNode.getString().equals(\"Function\")) {\n        return false;\n      }\n      Node arguments = functionNode.getNext();\n      if (arguments.getNext() != null) {\n        return false;\n      }\n      Node arg = arguments.getFirstChild();\n      if (!arg.isString()) {\n        return false;\n      }\n      String argString = arg.getString();\n      if (argString.contains(\"prototype\")) {\n        return false;\n      }\n    } else if (parent != null && parent.getType() == Token.ASSIGN) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..5efa2362 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,24 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+    if (NodeUtil.isFunctionObjectCall(n)) {\n+      Node functionNode = n.getFirstChild();\n+      if (!functionNode.getString().equals(\"Function\")) {\n+        return false;\n+      }\n+      Node arguments = functionNode.getNext();\n+      if (arguments.getNext() != null) {\n+        return false;\n+      }\n+      Node arg = arguments.getFirstChild();\n+      if (!arg.isString()) {\n+        return false;\n+      }\n+      String argString = arg.getString();\n+      if (argString.contains(\"prototype\")) {\n+        return false;\n+      }\n+    } else if (parent != null && parent.getType() == Token.ASSIGN) {\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}