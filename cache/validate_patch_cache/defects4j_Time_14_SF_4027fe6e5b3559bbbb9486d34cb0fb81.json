{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        int monthOfYear = iChronology.monthOfYear().get(values);\n        int dayOfMonth = iChronology.dayOfMonth().get(values);\n        boolean isLeap = iChronology.year().isLeap(values[0]);\n        int daysInMonth = iChronology.monthOfYear().getMaximumValue(isLeap, monthOfYear);\n        int totalMonths = monthOfYear + valueToAdd;\n        boolean isFebruaryLeap = isLeap && monthOfYear == DateTimeConstants.FEBRUARY;\n        boolean isTotalFebruaryLeap = iChronology.year().isLeap(iChronology.year().add(partial, valueToAdd));\n        if (isFebruaryLeap && !isTotalFebruaryLeap && dayOfMonth > 28) {\n            // If February is leap in input year, but not leap in output year and dayOfMonth greater than 28\n            values[1] = totalMonths > 1 ? totalMonths % 12 : 12;\n            daysInMonth = iChronology.monthOfYear().getMaximumValue(isTotalFebruaryLeap, values[1]);\n            values[2] = daysInMonth;\n        } else if (dayOfMonth == daysInMonth && monthOfYear != totalMonths % 12) {\n            // If already at the last day of month, direct setMonthOfYear() and subsequently setDayOfMonth()\n            values[1] = totalMonths > 1 ? totalMonths % 12 : 12;\n            values[0] = iChronology.year().add(partial, valueToAdd)[0];\n            values[2] = iChronology.dayOfMonth().getMaximumValue(values[0], values[1]);\n        } else {\n            // Otherwise, direct add the valueToAdd number of months, and let DateTimeFormatter handle any overflow\n            values[1] = totalMonths % 12;\n            values[0] = iChronology.year().add(partial, valueToAdd)[0];\n            values[2] = Math.min(daysInMonth, dayOfMonth);\n        }\n        return values;\n    }\n    return super.add(partial, fieldIndex, values, valueToAdd);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..41bdf398 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,38 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        int monthOfYear = iChronology.monthOfYear().get(values);\n+        int dayOfMonth = iChronology.dayOfMonth().get(values);\n+        boolean isLeap = iChronology.year().isLeap(values[0]);\n+        int daysInMonth = iChronology.monthOfYear().getMaximumValue(isLeap, monthOfYear);\n+        int totalMonths = monthOfYear + valueToAdd;\n+        boolean isFebruaryLeap = isLeap && monthOfYear == DateTimeConstants.FEBRUARY;\n+        boolean isTotalFebruaryLeap = iChronology.year().isLeap(iChronology.year().add(partial, valueToAdd));\n+        if (isFebruaryLeap && !isTotalFebruaryLeap && dayOfMonth > 28) {\n+            // If February is leap in input year, but not leap in output year and dayOfMonth greater than 28\n+            values[1] = totalMonths > 1 ? totalMonths % 12 : 12;\n+            daysInMonth = iChronology.monthOfYear().getMaximumValue(isTotalFebruaryLeap, values[1]);\n+            values[2] = daysInMonth;\n+        } else if (dayOfMonth == daysInMonth && monthOfYear != totalMonths % 12) {\n+            // If already at the last day of month, direct setMonthOfYear() and subsequently setDayOfMonth()\n+            values[1] = totalMonths > 1 ? totalMonths % 12 : 12;\n+            values[0] = iChronology.year().add(partial, valueToAdd)[0];\n+            values[2] = iChronology.dayOfMonth().getMaximumValue(values[0], values[1]);\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            // Otherwise, direct add the valueToAdd number of months, and let DateTimeFormatter handle any overflow\n+            values[1] = totalMonths % 12;\n+            values[0] = iChronology.year().add(partial, valueToAdd)[0];\n+            values[2] = Math.min(daysInMonth, dayOfMonth);\n         }\n+        return values;\n     }\n+    return super.add(partial, fieldIndex, values, valueToAdd);\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: method get in class DateTimeField cannot be applied to given types;",
    "test_result": "ERROR"
}