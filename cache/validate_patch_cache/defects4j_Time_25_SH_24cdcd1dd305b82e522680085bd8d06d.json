{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n                // Additional check is required if the difference in offsets is not just one hour\n                // We need to check if we are in the middle of a transition during which clock moved backward\n                // if such transition exists, we need to keep the original offset and move to\n                // time after the transition\n                int hoursDiff = offsetAdjusted - offsetLocal;\n                if (hoursDiff > 1) {\n                    long nextLocal2 = nextTransition(nextLocal);\n                    long nextAdjusted2 = nextTransition(nextAdjusted);\n                    if (nextLocal2 != nextAdjusted2) {\n                        return offsetLocal;\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..cc60d47e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,25 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+                // Additional check is required if the difference in offsets is not just one hour\n+                // We need to check if we are in the middle of a transition during which clock moved backward\n+                // if such transition exists, we need to keep the original offset and move to\n+                // time after the transition\n+                int hoursDiff = offsetAdjusted - offsetLocal;\n+                if (hoursDiff > 1) {\n+                    long nextLocal2 = nextTransition(nextLocal);\n+                    long nextAdjusted2 = nextTransition(nextAdjusted);\n+                    if (nextLocal2 != nextAdjusted2) {\n+                        return offsetLocal;\n+                    }\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}