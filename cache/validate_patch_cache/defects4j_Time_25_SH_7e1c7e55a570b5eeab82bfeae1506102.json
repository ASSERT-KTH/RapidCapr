{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // we must be near a DST boundary\n    final long instantBefore = instantLocal - offsetLocal;\n    final long instantAfter = instantLocal - offsetAdjusted;\n\n    // Try both transitions\n    long next = nextTransition(instantAdjusted);\n    long prev = previousTransition(instantAdjusted);\n\n    if (prev < instantBefore && next > instantAfter) {\n        // We are in a DST gap\n        if (offsetLocal > offsetAdjusted) {\n            return getOffset(prev);\n        } else {\n            return getOffset(next);\n        }\n    } else {\n        // We are near a DST boundary, but not in a gap, so return the earlier offset\n        return offsetLocal < offsetAdjusted ? offsetLocal : offsetAdjusted;\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..81ece6c6 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,28 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // we must be near a DST boundary\n+    final long instantBefore = instantLocal - offsetLocal;\n+    final long instantAfter = instantLocal - offsetAdjusted;\n+\n+    // Try both transitions\n+    long next = nextTransition(instantAdjusted);\n+    long prev = previousTransition(instantAdjusted);\n+\n+    if (prev < instantBefore && next > instantAfter) {\n+        // We are in a DST gap\n+        if (offsetLocal > offsetAdjusted) {\n+            return getOffset(prev);\n+        } else {\n+            return getOffset(next);\n+        }\n+    } else {\n+        // We are near a DST boundary, but not in a gap, so return the earlier offset\n+        return offsetLocal < offsetAdjusted ? offsetLocal : offsetAdjusted;\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}