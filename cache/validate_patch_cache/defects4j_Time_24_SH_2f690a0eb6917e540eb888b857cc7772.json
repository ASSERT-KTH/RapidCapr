{
    "patch": "} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n>>> [ INFILL ] <<<\n    int fieldIndex = e.getIllegalFieldValueIndex();\n    if (fieldIndex >= 0) {\n        int i;\n        for (i=0; i<count; i++) {\n            if (savedFields[i].iFieldIndex == fieldIndex) {\n                throw e;\n            }\n        }\n        for (i=0; i<count; i++) {\n            if (savedFields[i].getField().getDurationField().getType() == DurationFieldType.months()) {\n                long instant = savedFields[i].set(savedFields[i].getValue(), true);\n                throw new IllegalFieldValueException(savedFields[i].iField.getType(), Long.valueOf(instant), e.getMessage());\n            }\n        }\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..90b6d4b6 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,28 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+>>> [ INFILL ] <<<\n+    int fieldIndex = e.getIllegalFieldValueIndex();\n+    if (fieldIndex >= 0) {\n+        int i;\n+        for (i=0; i<count; i++) {\n+            if (savedFields[i].iFieldIndex == fieldIndex) {\n+                throw e;\n+            }\n+        }\n+        for (i=0; i<count; i++) {\n+            if (savedFields[i].getField().getDurationField().getType() == DurationFieldType.months()) {\n+                long instant = savedFields[i].set(savedFields[i].getValue(), true);\n+                throw new IllegalFieldValueException(savedFields[i].iField.getType(), Long.valueOf(instant), e.getMessage());\n+            }\n+        }\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}