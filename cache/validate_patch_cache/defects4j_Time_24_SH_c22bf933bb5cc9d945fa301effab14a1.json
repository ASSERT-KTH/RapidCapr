{
    "patch": "        long millisResult = iMillis;\n        boolean errored = false;\n        for (int i = 0; i < count; i++) {\n            try {\n                millisResult = savedFields[i].set(millisResult, resetFields);\n            } catch (IllegalFieldValueException e) {\n                for (int j = 0; j < i; j++) {\n                    millisResult = savedFields[j].set(millisResult, resetFields);\n                }\n                SavedField bestSavedField = savedFields[i].compareTo(savedFields[i+1]) > 0 ? savedFields[i] : savedFields[i+1];\n                if (bestSavedField != null) {\n                    millisResult = bestSavedField.set(millisResult, resetFields);\n                    iSavedFields = savedFields;\n                    iSavedFieldsCount = count;\n                    return computeMillis(resetFields, text);\n                }\n                errored = true;\n                break;\n            }\n        }\n        if (errored) {\n            if (text != null) {\n                throw new IllegalFieldValueException(\"Cannot parse \\\"\" + text + '\"');\n            } \n        }\n        long millis = millisResult;\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..62d03e1c 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,49 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        long millisResult = iMillis;\n+        boolean errored = false;\n+        for (int i = 0; i < count; i++) {\n+            try {\n+                millisResult = savedFields[i].set(millisResult, resetFields);\n+            } catch (IllegalFieldValueException e) {\n+                for (int j = 0; j < i; j++) {\n+                    millisResult = savedFields[j].set(millisResult, resetFields);\n+                }\n+                SavedField bestSavedField = savedFields[i].compareTo(savedFields[i+1]) > 0 ? savedFields[i] : savedFields[i+1];\n+                if (bestSavedField != null) {\n+                    millisResult = bestSavedField.set(millisResult, resetFields);\n+                    iSavedFields = savedFields;\n+                    iSavedFieldsCount = count;\n+                    return computeMillis(resetFields, text);\n+                }\n+                errored = true;\n+                break;\n+            }\n+        }\n+        if (errored) {\n+            if (text != null) {\n+                throw new IllegalFieldValueException(\"Cannot parse \\\"\" + text + '\"');\n+            } \n+        }\n+        long millis = millisResult;\n+        \n+        if (iZone == null) {\n+            millis -= iOffset;\n+        } else {\n+            int offset = iZone.getOffsetFromLocal(millis);\n+            millis -= offset;\n+            if (offset != iZone.getOffset(millis)) {\n+                String message =\n+                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+                if (text != null) {\n+                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+                }\n+                throw new IllegalArgumentException(message);\n+            }\n+        }\n+        \n+        return millis;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: no suitable constructor found for IllegalFieldValueException(String)",
    "test_result": "ERROR"
}