{
    "patch": "public void captureArgumentsFrom(Invocation invocation) {\n    Object[] args = invocation.getRawArguments();\n    if (args == null) {\n        return;\n    }\n    Method method = invocation.getMethod();\n    Class<?>[] paramTypes = method.getParameterTypes();\n    for (int i = 0; i < args.length && i < paramTypes.length; i++) {\n        Object arg = args[i];\n        Class<?> paramType = paramTypes[i];\n        for (int j = 0; j < matchers.size(); j++) {\n            Matcher matcher = matchers.get(j);\n            if (matcher instanceof CapturesArguments) {\n                if (paramType.isArray() && paramType.getComponentType().isAssignableFrom(arg.getClass())) {\n                    int arrayLength = Array.getLength(arg);\n                    for (int k = 0; k < arrayLength; k++) {\n                        Object arrayElement = Array.get(arg, k);\n                        if (matcher instanceof VarargMatcher || j == i) {\n                            ((CapturesArguments)matcher).captureFrom(arrayElement);\n                        }\n                    }\n                } else {\n                    if (matcher instanceof VarargMatcher && i == paramTypes.length - 1 && method.isVarArgs()) {\n                        for (int k = i; k < args.length; k++) {\n                            ((CapturesArguments)matcher).captureFrom(args[k]);\n                        }\n                    } else if (matcher instanceof VarargMatcher && j == matchers.size() - 1 && method.isVarArgs()) {\n                        // do nothing\n                    } else if (j == i) {\n                        ((CapturesArguments)matcher).captureFrom(arg);\n                    }\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..cb89202ac 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,42 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+public void captureArgumentsFrom(Invocation invocation) {\n+    Object[] args = invocation.getRawArguments();\n+    if (args == null) {\n+        return;\n+    }\n+    Method method = invocation.getMethod();\n+    Class<?>[] paramTypes = method.getParameterTypes();\n+    for (int i = 0; i < args.length && i < paramTypes.length; i++) {\n+        Object arg = args[i];\n+        Class<?> paramType = paramTypes[i];\n+        for (int j = 0; j < matchers.size(); j++) {\n+            Matcher matcher = matchers.get(j);\n+            if (matcher instanceof CapturesArguments) {\n+                if (paramType.isArray() && paramType.getComponentType().isAssignableFrom(arg.getClass())) {\n+                    int arrayLength = Array.getLength(arg);\n+                    for (int k = 0; k < arrayLength; k++) {\n+                        Object arrayElement = Array.get(arg, k);\n+                        if (matcher instanceof VarargMatcher || j == i) {\n+                            ((CapturesArguments)matcher).captureFrom(arrayElement);\n+                        }\n+                    }\n+                } else {\n+                    if (matcher instanceof VarargMatcher && i == paramTypes.length - 1 && method.isVarArgs()) {\n+                        for (int k = i; k < args.length; k++) {\n+                            ((CapturesArguments)matcher).captureFrom(args[k]);\n+                        }\n+                    } else if (matcher instanceof VarargMatcher && j == matchers.size() - 1 && method.isVarArgs()) {\n+                        // do nothing\n+                    } else if (j == i) {\n+                        ((CapturesArguments)matcher).captureFrom(arg);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}