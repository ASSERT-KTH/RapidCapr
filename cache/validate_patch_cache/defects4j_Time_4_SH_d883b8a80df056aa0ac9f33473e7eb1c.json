{
    "patch": "Partial newPartial = new Partial(iChronology, newTypes, newValues);\nChronology chrono = newPartial.getChronology();\nfor (int i = 0; i < newTypes.length; i++) {\n    DateTimeFieldType type = newTypes[i];\n    int val = newValues[i];\n    if (type == null) {\n        throw new IllegalArgumentException(\"Field type must not be null\");\n    }\n    chrono.getDateTimeField(type).getDurationField().addWrapField(newPartial, i, newValues, val);\n}\nreturn newPartial;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..95aaf368 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -461,7 +461,17 @@ public final class Partial\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+Chronology chrono = newPartial.getChronology();\n+for (int i = 0; i < newTypes.length; i++) {\n+    DateTimeFieldType type = newTypes[i];\n+    int val = newValues[i];\n+    if (type == null) {\n+        throw new IllegalArgumentException(\"Field type must not be null\");\n+    }\n+    chrono.getDateTimeField(type).getDurationField().addWrapField(newPartial, i, newValues, val);\n+}\n+return newPartial;\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }",
    "result_reason": "error: variable i is already defined in method with(DateTimeFieldType,int)",
    "test_result": "ERROR"
}