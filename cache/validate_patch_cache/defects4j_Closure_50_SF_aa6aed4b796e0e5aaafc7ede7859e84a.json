{
    "patch": "private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null) {\n      if (!NodeUtil.isImmutableValue(right)) {\n        return n;\n      }\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    List<Node> arrayFoldedChildren = Lists.newArrayList();\n    StringBuilder sb = new StringBuilder();\n    boolean hasEmptySeparator = (right != null && NodeUtil.getStringValue(right).isEmpty());\n\n    for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n        if (NodeUtil.getArrayElementStringValue(elem).isEmpty()) {\n          // ignore empty elements\n          continue;\n        }\n        // concatenate the string to the current sb\n        if (arrayFoldedChildren.size() > 0 && (NodeUtil.isImmutableValue(arrayFoldedChildren.get(arrayFoldedChildren.size() - 1)) || arrayFoldedChildren.get(arrayFoldedChildren.size() - 1).getType() == Token.EMPTY || (arrayFoldedChildren.get(arrayFoldedChildren.size() - 1).getType() == Token.STRING && hasEmptySeparator))) {\n          sb.append(NodeUtil.getStringValue(right));\n        }\n        sb.append(NodeUtil.getArrayElementStringValue(elem));\n      } else {\n        if (sb.length() != 0) {\n          // create a new String node from the current sb\n          arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(elem).srcref(elem));\n          sb.setLength(0);\n        }\n        arrayFoldedChildren.add(elem);\n      }\n    }\n\n    if (sb.length() != 0) {\n      // create a new string node from the current sb\n      arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(arrayNode.getLastChild()).srcref(arrayNode.getLastChild()));\n    }\n\n    int foldedSize = 0;\n    boolean isSeparateStrings = right != null && !NodeUtil.getStringValue(right).isEmpty();\n    if (isSeparateStrings) {\n      // calculate the folded size of the separator string\n      if (!NodeUtil.isImmutableValue(right)) {\n        foldedSize += InlineCostEstimator.getCost(right);\n      } else {\n        foldedSize += NodeUtil.getStringValue(right).length();\n      }\n    }\n\n    // calculate the folded size by adding the size of all non-string nodes and strings as well as the length of the separator\n    for (Node elem : arrayFoldedChildren) {\n      if (!NodeUtil.isImmutableValue(elem) && elem.getType() != Token.STRING) {\n        foldedSize += InlineCostEstimator.getCost(elem);\n        isSeparateStrings = false;\n      } else {\n        foldedSize += NodeUtil.getArrayElementStringValue(elem).length();\n      }\n      if (isSeparateStrings && elem != arrayFoldedChildren.get(arrayFoldedChildren.size() - 1)) {\n        // we need to add the size of the separator string between the folded strings\n        foldedSize += NodeUtil.getStringValue(right).length();\n      }\n    }\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\").copyInformationFrom(n).srcref(n);\n        reportCodeChange();\n        return emptyStringNode;\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that it is coerced to a string.\n          Node replacement = new Node(Token.ADD, Node.newString(\"\").copyInformationFrom(n).srcref(n), foldedStringNode).srcref(n);\n          replacement.copyInformationFrom(foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n      default:\n        Node firstElem = arrayFoldedChildren.get(0).cloneNode();\n        Node joinCallTarget = NodeUtil.newQualifiedNameNode(compiler, JoinSeparatorHelper.ROUTINE_GETTER_NAME);\n        Node call = new Node(Token.CALL, joinCallTarget, firstElem).srcref(callTarget);\n        for (int i = 1; i < arrayFoldedChildren.size(); i++) {\n          Node elem = arrayFoldedChildren.get(i).cloneNode();\n          Node joinElem = new Node(Token.CALL, joinCallTarget, elem).srcref(callTarget);\n          if (isSeparateStrings) {\n            // if we have separate strings, add the separator string\n            NodeUtil.addChildToBack(call, right.cloneNode());\n          }\n          NodeUtil.addChildToBack(call, joinElem);\n        }\n        if (right == null || (right.getType() == Token.STRING && NodeUtil.getStringValue(right).isEmpty())) {\n          // if no separator string is given or if an empty separator string is given, remove the last node\n          call.removeChild(call.getLastChild());\n        }\n        if (call.getLastChild().getType() == Token.STRING) {\n          // if the last child is a string, we need to stringify the whole expression\n          NodeUtil.setStringValue(call.getLastChild(), NodeUtil.getStringValue(call.getLastChild()).substring(1, NodeUtil.getStringValue(call.getLastChild()).length() - 1));\n          Node replacement = new Node(Token.ADD, Node.newString(\"\").copyInformationFrom(n).srcref(n), call).srcref(n);\n          replacement.copyInformationFrom(call);\n          call = replacement;\n        }\n        n.getParent().replaceChild(n, call);\n        reportCodeChange();\n        return call;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..424ecace 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,7 +364,7 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n+private Node tryFoldArrayJoin(Node n) {\n     Node callTarget = n.getFirstChild();\n \n     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n@@ -381,59 +381,69 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     Node arrayNode = callTarget.getFirstChild();\n     Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n+    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n       return n;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n+    List<Node> arrayFoldedChildren = Lists.newArrayList();\n+    StringBuilder sb = new StringBuilder();\n+    boolean hasEmptySeparator = (right != null && NodeUtil.getStringValue(right).isEmpty());\n \n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n-    Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n+    for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n       if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n-        } else {\n-          sb.append(joinString);\n+        if (NodeUtil.getArrayElementStringValue(elem).isEmpty()) {\n+          // ignore empty elements\n+          continue;\n+        }\n+        // concatenate the string to the current sb\n+        if (arrayFoldedChildren.size() > 0 && (NodeUtil.isImmutableValue(arrayFoldedChildren.get(arrayFoldedChildren.size() - 1)) || arrayFoldedChildren.get(arrayFoldedChildren.size() - 1).getType() == Token.EMPTY || (arrayFoldedChildren.get(arrayFoldedChildren.size() - 1).getType() == Token.STRING && hasEmptySeparator))) {\n+          sb.append(NodeUtil.getStringValue(right));\n         }\n         sb.append(NodeUtil.getArrayElementStringValue(elem));\n       } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n+        if (sb.length() != 0) {\n+          // create a new String node from the current sb\n+          arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(elem).srcref(elem));\n+          sb.setLength(0);\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n         arrayFoldedChildren.add(elem);\n       }\n-      prev = elem;\n-      elem = elem.getNext();\n     }\n \n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+    if (sb.length() != 0) {\n+      // create a new string node from the current sb\n+      arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(arrayNode.getLastChild()).srcref(arrayNode.getLastChild()));\n+    }\n+\n+    int foldedSize = 0;\n+    boolean isSeparateStrings = right != null && !NodeUtil.getStringValue(right).isEmpty();\n+    if (isSeparateStrings) {\n+      // calculate the folded size of the separator string\n+      if (!NodeUtil.isImmutableValue(right)) {\n+        foldedSize += InlineCostEstimator.getCost(right);\n+      } else {\n+        foldedSize += NodeUtil.getStringValue(right).length();\n+      }\n+    }\n+\n+    // calculate the folded size by adding the size of all non-string nodes and strings as well as the length of the separator\n+    for (Node elem : arrayFoldedChildren) {\n+      if (!NodeUtil.isImmutableValue(elem) && elem.getType() != Token.STRING) {\n+        foldedSize += InlineCostEstimator.getCost(elem);\n+        isSeparateStrings = false;\n+      } else {\n+        foldedSize += NodeUtil.getArrayElementStringValue(elem).length();\n+      }\n+      if (isSeparateStrings && elem != arrayFoldedChildren.get(arrayFoldedChildren.size() - 1)) {\n+        // we need to add the size of the separator string between the folded strings\n+        foldedSize += NodeUtil.getStringValue(right).length();\n+      }\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n \n     int originalSize = InlineCostEstimator.getCost(n);\n     switch (arrayFoldedChildren.size()) {\n       case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n+        Node emptyStringNode = Node.newString(\"\").copyInformationFrom(n).srcref(n);\n         reportCodeChange();\n         return emptyStringNode;\n       case 1:\n@@ -441,39 +451,42 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n         if (foldedSize > originalSize) {\n           return n;\n         }\n-        arrayNode.detachChildren();\n         if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n+          // If the Node is not a string literal, ensure that it is coerced to a string.\n+          Node replacement = new Node(Token.ADD, Node.newString(\"\").copyInformationFrom(n).srcref(n), foldedStringNode).srcref(n);\n+          replacement.copyInformationFrom(foldedStringNode);\n           foldedStringNode = replacement;\n         }\n         n.getParent().replaceChild(n, foldedStringNode);\n         reportCodeChange();\n         return foldedStringNode;\n       default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n+        Node firstElem = arrayFoldedChildren.get(0).cloneNode();\n+        Node joinCallTarget = NodeUtil.newQualifiedNameNode(compiler, JoinSeparatorHelper.ROUTINE_GETTER_NAME);\n+        Node call = new Node(Token.CALL, joinCallTarget, firstElem).srcref(callTarget);\n+        for (int i = 1; i < arrayFoldedChildren.size(); i++) {\n+          Node elem = arrayFoldedChildren.get(i).cloneNode();\n+          Node joinElem = new Node(Token.CALL, joinCallTarget, elem).srcref(callTarget);\n+          if (isSeparateStrings) {\n+            // if we have separate strings, add the separator string\n+            NodeUtil.addChildToBack(call, right.cloneNode());\n+          }\n+          NodeUtil.addChildToBack(call, joinElem);\n         }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n+        if (right == null || (right.getType() == Token.STRING && NodeUtil.getStringValue(right).isEmpty())) {\n+          // if no separator string is given or if an empty separator string is given, remove the last node\n+          call.removeChild(call.getLastChild());\n         }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n+        if (call.getLastChild().getType() == Token.STRING) {\n+          // if the last child is a string, we need to stringify the whole expression\n+          NodeUtil.setStringValue(call.getLastChild(), NodeUtil.getStringValue(call.getLastChild()).substring(1, NodeUtil.getStringValue(call.getLastChild()).length() - 1));\n+          Node replacement = new Node(Token.ADD, Node.newString(\"\").copyInformationFrom(n).srcref(n), call).srcref(n);\n+          replacement.copyInformationFrom(call);\n+          call = replacement;\n         }\n+        n.getParent().replaceChild(n, call);\n         reportCodeChange();\n-        break;\n-    }\n-\n-    return n;\n-  }\n+        return call;\n \n   /**\n    * Try to fold .substr() calls on strings\n@@ -642,4 +655,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}