{
    "patch": "import org.mockito.internal.creation.bytebuddy.MockSettingsImpl;\nimport org.mockito.invocation.Invocation;\nimport org.mockito.invocation.MockHandler;\nimport org.mockito.invocation.MockHandlerInterface;\nimport org.mockito.plugins.MockMaker;\n\nimport net.bytebuddy.implementation.InvocationHandlerAdapter;\nimport org.mockito.internal.creation.bytebuddy.MethodInterceptorFilter;\nimport org.mockito.internal.creation.bytebuddy.SubclassByteBuddyMockMaker;\n\nimport java.util.List;\n\npublic class MyMockMaker extends SubclassByteBuddyMockMaker implements MockMaker {\n\n    @Override\n    protected <T> void afterCreateMock(Class<T> type, T mock, MockHandler<T> handler) {\n        ((MyMockitoSession) org.mockito.Mockito.framework().getSession()).resetMock(mock);\n    }\n\n    public static class MyMockitoSession extends MockitoSession {\n\n        public MyMockitoSession(MockitoSession session) {\n            super(session);\n        }\n\n        @Override\n        public <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\n            T mock = super.mock(classToMock, mockSettings);\n            resetMock(mock);\n            return mock;\n        }\n\n        public <T> void resetMock(T mock) {\n            MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n            MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n            for (int i = 0; i < ((Factory) mock).getCallbackCount(); i++) {\n                if (((Factory) mock).getCallback(i) instanceof InvocationHandlerAdapter) {\n                    ((Factory) mock).setCallback(i, null);\n                }\n            }\n            ((Factory) mock).setCallbackType(MethodInterceptor.class);\n            MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings()\n                    .defaultAnswer(RETURNS_DEFAULTS));\n            ((Factory) mock).setCallback(0, newFilter);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..731d9b74a 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,54 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.internal.creation.bytebuddy.MockSettingsImpl;\n+import org.mockito.invocation.Invocation;\n+import org.mockito.invocation.MockHandler;\n+import org.mockito.invocation.MockHandlerInterface;\n+import org.mockito.plugins.MockMaker;\n+\n+import net.bytebuddy.implementation.InvocationHandlerAdapter;\n+import org.mockito.internal.creation.bytebuddy.MethodInterceptorFilter;\n+import org.mockito.internal.creation.bytebuddy.SubclassByteBuddyMockMaker;\n+\n+import java.util.List;\n+\n+public class MyMockMaker extends SubclassByteBuddyMockMaker implements MockMaker {\n+\n+    @Override\n+    protected <T> void afterCreateMock(Class<T> type, T mock, MockHandler<T> handler) {\n+        ((MyMockitoSession) org.mockito.Mockito.framework().getSession()).resetMock(mock);\n+    }\n+\n+    public static class MyMockitoSession extends MockitoSession {\n+\n+        public MyMockitoSession(MockitoSession session) {\n+            super(session);\n+        }\n+\n+        @Override\n+        public <T> T mock(Class<T> classToMock, MockSettings mockSettings) {\n+            T mock = super.mock(classToMock, mockSettings);\n+            resetMock(mock);\n+            return mock;\n+        }\n+\n+        public <T> void resetMock(T mock) {\n+            MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+            MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+            for (int i = 0; i < ((Factory) mock).getCallbackCount(); i++) {\n+                if (((Factory) mock).getCallback(i) instanceof InvocationHandlerAdapter) {\n+                    ((Factory) mock).setCallback(i, null);\n+                }\n+            }\n+            ((Factory) mock).setCallbackType(MethodInterceptor.class);\n+            MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings()\n+                    .defaultAnswer(RETURNS_DEFAULTS));\n+            ((Factory) mock).setCallback(0, newFilter);\n+        }\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}