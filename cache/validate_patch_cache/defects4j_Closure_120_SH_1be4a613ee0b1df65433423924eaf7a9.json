{
    "patch": "      if (block.isFunction) {\n        break;\n      } else if (block.isLoop) {\n        return false;\n      } else if (block.isConditional) {\n        // If any predecessor blocks contain a write to this variable, then it is not\n        // assigned only once in its lifetime.\n        List<BasicBlock> predecessors = cfgGraph.getInNodes(block);\n        for (BasicBlock predecessor : predecessors) {\n          List<Reference> writes = predecessor.getAllSymbolWrites(getSymbolName());\n          if (!writes.isEmpty()) {\n            return false;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..0c44406b 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,19 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        break;\n+      } else if (block.isLoop) {\n+        return false;\n+      } else if (block.isConditional) {\n+        // If any predecessor blocks contain a write to this variable, then it is not\n+        // assigned only once in its lifetime.\n+        List<BasicBlock> predecessors = cfgGraph.getInNodes(block);\n+        for (BasicBlock predecessor : predecessors) {\n+          List<Reference> writes = predecessor.getAllSymbolWrites(getSymbolName());\n+          if (!writes.isEmpty()) {\n+            return false;\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}