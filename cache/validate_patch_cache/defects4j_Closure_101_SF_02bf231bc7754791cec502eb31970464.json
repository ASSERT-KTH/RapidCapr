{
    "patch": "  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n\n    if (flags.process_closure_primitives) {\n      options.setFoldConstants(true);\n      options.setInlineConstantVars(true);\n      options.setInlineFunctions(Reach.ALL);\n      options.setInlineProperties(true);\n      options.setRemoveUnusedNamespaceProperties(true);\n      options.setSmartNameRemoval(true);\n      options.setCheckGlobalThisLevel(CheckLevel.WARNING);\n    }\n\n    initOptionsFromFlags(options);\n\n    return options;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex bdf55921..1ccbb2f6 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -427,14 +427,23 @@ public class CommandLineRunner extends\n \n     WarningLevel wLevel = flags.warning_level;\n     wLevel.setOptionsForWarningLevel(options);\n+\n     for (FormattingOption formattingOption : flags.formatting) {\n       formattingOption.applyToOptions(options);\n     }\n+\n     if (flags.process_closure_primitives) {\n-      options.closurePass = true;\n+      options.setFoldConstants(true);\n+      options.setInlineConstantVars(true);\n+      options.setInlineFunctions(Reach.ALL);\n+      options.setInlineProperties(true);\n+      options.setRemoveUnusedNamespaceProperties(true);\n+      options.setSmartNameRemoval(true);\n+      options.setCheckGlobalThisLevel(CheckLevel.WARNING);\n     }\n \n     initOptionsFromFlags(options);\n+\n     return options;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}