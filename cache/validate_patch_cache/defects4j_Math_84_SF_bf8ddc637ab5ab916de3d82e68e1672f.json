{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                // accept the expanded simplex\n                simplex = expanded.getPoint();\n\n            } else {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n\n        } else {\n            // perform a contraction step\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = contracted.getPoint();\n\n            } else {\n                // perform a reduction step\n                final RealPointValuePair[] reduced = contractInside(original, sigma, comparator);\n                simplex = reduced;\n                if (comparator.compare(original[0], simplex[0]) == 0) {\n                    // severe contraction\n                    for (int i = 1; i < simplex.length; i++) {\n                        final double[] pointI = simplex[i].getPoint();\n                        for (int j = 0; j < pointI.length; j++) {\n                            pointI[j] = 0.5 * (pointI[j] + best.getPoint()[j]);\n                        }\n                        simplex[i] = new RealPointValuePair(pointI,\n                                computeObjectiveValue(pointI));\n                    }\n                }\n            }\n        }\n\n        // check convergence\n        final RealPointValuePair currentBest = simplex[0];\n        boolean converged = true;\n        for (int i = 0; i < simplex.length; i++) {\n            converged &= (MathArrays.distance(currentBest.getPoint(),\n                    simplex[i].getPoint()) <= getAbsoluteThreshold())\n                    && (Math.abs(currentBest.getValue() - simplex[i].getValue()) <= getRelativeThreshold() * (Math.abs(currentBest.getValue()) + Math.abs(simplex[i].getValue())) * 0.5);\n        }\n        if (converged) {\n            return;\n        }\n\n        // sort the simplex for next iteration\n        Arrays.sort(simplex, comparator);\n\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..b56f6bebb 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,77 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                // accept the expanded simplex\n+                simplex = expanded.getPoint();\n \n+            } else {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n             }\n \n-            // compute the contracted simplex\n+        } else {\n+            // perform a contraction step\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+                simplex = contracted.getPoint();\n+\n+            } else {\n+                // perform a reduction step\n+                final RealPointValuePair[] reduced = contractInside(original, sigma, comparator);\n+                simplex = reduced;\n+                if (comparator.compare(original[0], simplex[0]) == 0) {\n+                    // severe contraction\n+                    for (int i = 1; i < simplex.length; i++) {\n+                        final double[] pointI = simplex[i].getPoint();\n+                        for (int j = 0; j < pointI.length; j++) {\n+                            pointI[j] = 0.5 * (pointI[j] + best.getPoint()[j]);\n+                        }\n+                        simplex[i] = new RealPointValuePair(pointI,\n+                                computeObjectiveValue(pointI));\n+                    }\n+                }\n             }\n+        }\n \n+        // check convergence\n+        final RealPointValuePair currentBest = simplex[0];\n+        boolean converged = true;\n+        for (int i = 0; i < simplex.length; i++) {\n+            converged &= (MathArrays.distance(currentBest.getPoint(),\n+                    simplex[i].getPoint()) <= getAbsoluteThreshold())\n+                    && (Math.abs(currentBest.getValue() - simplex[i].getValue()) <= getRelativeThreshold() * (Math.abs(currentBest.getValue()) + Math.abs(simplex[i].getValue())) * 0.5);\n         }\n+        if (converged) {\n+            return;\n+        }\n+\n+        // sort the simplex for next iteration\n+        Arrays.sort(simplex, comparator);\n \n     }\n \n+}\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}