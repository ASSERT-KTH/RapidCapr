{
    "patch": "public static String unescape(String src) {\n    StringBuffer tmp = new StringBuffer();\n    tmp.ensureCapacity(src.length());\n    Matcher matcher = ESCAPE_PATTERN.matcher(src);\n    int index = 0;\n    while (matcher.find()) {\n        tmp.append(src.substring(index, matcher.start()));\n        char ch=0;\n        char ch1=0;\n        String escape = matcher.group(1);\n        if (escape.equals(\"u\")) {\n            try {\n                ch = (char) Integer.parseInt(matcher.group(2), 16);\n            } catch (NumberFormatException nfe) {\n                throw new IllegalArgumentException(\n                    \"Unable to decode unicode value: \" + matcher.group(2), nfe\n                );\n            }\n        } else {\n            ch1 = unescape(escape.charAt(0));\n            if(ch1 == -1){\n                throw new IllegalArgumentException(\n                    \"Invalid escape sequence: \\\\\" + escape\n                );\n            }\n            ch = ch1;\n        }\n        tmp.append(ch);\n        index = matcher.end();\n    }\n    tmp.append(src.substring(index));\n    return tmp.toString();\n}\n\nprivate static char unescape(char escape) {\n    int val = ESCAPES.indexOf(escape);\n    if (val >= 0) {\n        return UNESCAPES.charAt(val);\n    }\n    return (char)-1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}