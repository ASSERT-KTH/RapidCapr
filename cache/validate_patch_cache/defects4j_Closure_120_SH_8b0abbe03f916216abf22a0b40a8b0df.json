{
    "patch": "      // Make sure this assignment is not in a loop or switch statement, or exception handler block.\n      for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          // Declarations of functions and variables share a block with themselves.\n          // To avoid thinking a variable is assigned in this block, skip it and\n          // continue checking the parent block.\n          continue;\n        } else if (block.isLoop || block.isSwitch()) {\n          // No definitions in loops or switch statements.\n          return false;\n        } else if (block.isExceptionHandler()) {\n          // No definitions in exception handler blocks.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..5e2a33af 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,19 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      // Make sure this assignment is not in a loop or switch statement, or exception handler block.\n+      for (BasicBlock block = ref.getBasicBlock();\n+           block != null; block = block.getParent()) {\n+        if (block.isFunction) {\n+          // Declarations of functions and variables share a block with themselves.\n+          // To avoid thinking a variable is assigned in this block, skip it and\n+          // continue checking the parent block.\n+          continue;\n+        } else if (block.isLoop || block.isSwitch()) {\n+          // No definitions in loops or switch statements.\n+          return false;\n+        } else if (block.isExceptionHandler()) {\n+          // No definitions in exception handler blocks.\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}