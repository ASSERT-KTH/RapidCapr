{
    "patch": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      double vx1 = v1.getX();\n      double vy1 = v1.getY();\n      double vz1 = v1.getZ();\n      double vx2 = v2.getX();\n      double vy2 = v2.getY();\n      double vz2 = v2.getZ();\n      \n      double eps = 1e-14;\n      double comp = ((Math.abs(vx1) + Math.abs(vy1) + Math.abs(vz1)) *\n                     (Math.abs(vx2) + Math.abs(vy2) + Math.abs(vz2))) * 1e-8;\n      \n      double rho = ((vx1 * vx2) + (vy1 * vy2) + (vz1 * vz2)) /\n                   ((vx2 * vx2) + (vy2 * vy2) + (vz2 * vz2));\n      double vr0 = rho * vx2;\n      double vr1 = rho * vy2;\n      double vr2 = rho * vz2;\n      double v3x = vx1 - vr0;\n      double v3y = vy1 - vr1;\n      double v3z = vz1 - vr2;\n                    \n      return new Vector3D((v3y * vz2) - (v3z * vy2),\n                          (v3z * vx2) - (v3x * vz2),\n                          (v3x * vy2) - (v3y * vx2));\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..4b412b846 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -456,22 +456,29 @@ public class Vector3D implements Serializable {\n    */\n   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n+      double vx1 = v1.getX();\n+      double vy1 = v1.getY();\n+      double vz1 = v1.getZ();\n+      double vx2 = v2.getX();\n+      double vy2 = v2.getY();\n+      double vz2 = v2.getZ();\n+      \n+      double eps = 1e-14;\n+      double comp = ((Math.abs(vx1) + Math.abs(vy1) + Math.abs(vz1)) *\n+                     (Math.abs(vx2) + Math.abs(vy2) + Math.abs(vz2))) * 1e-8;\n+      \n+      double rho = ((vx1 * vx2) + (vy1 * vy2) + (vz1 * vz2)) /\n+                   ((vx2 * vx2) + (vy2 * vy2) + (vz2 * vz2));\n+      double vr0 = rho * vx2;\n+      double vr1 = rho * vy2;\n+      double vr2 = rho * vz2;\n+      double v3x = vx1 - vr0;\n+      double v3y = vy1 - vr1;\n+      double v3z = vz1 - vr2;\n+                    \n+      return new Vector3D((v3y * vz2) - (v3z * vy2),\n+                          (v3z * vx2) - (v3x * vz2),\n+                          (v3x * vy2) - (v3y * vx2));\n   }\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<-1.0> but was:<-1.0000000975387024>",
    "test_result": "FAIL"
}