{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        millis = savedFields[i].set(millis, resetFields);\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n\n    // remove illegal fields and try again\n    int valid = savedFields[0].iField.getType().isSupported() ? 1 : 0;\n    for (int i = 1; i < count; i++) {\n        DurationField unit = savedFields[i].iField.getDurationField();\n        if (unit == null || !unit.isSupported()) {\n            break;\n        }\n        valid++;\n    }\n\n    if (valid > 0) {\n        // We have at least one valid field.\n        if (valid < count) {\n            // Trim the array.\n            SavedField[] newFields = new SavedField[valid];\n            System.arraycopy(savedFields, 0, newFields, 0, valid);\n            savedFields = newFields;\n            count = valid;\n        }\n        // Proceed with the valid fields.\n        millis = computeMillis(resetFields, text);\n    } else {\n        throw e;\n    }\n}\n\nif (count > 0) {\n    DurationField months = DurationFieldType.months().getField(iChrono);\n    DurationField days = DurationFieldType.days().getField(iChrono);\n    DurationField first = savedFields[0].iField.getDurationField();\n    if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n        saveField(DateTimeFieldType.year(), iDefaultYear);\n        return computeMillis(resetFields, text);\n    }\n    sort(savedFields, count);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..5c078cc8 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,51 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        millis = savedFields[i].set(millis, resetFields);\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+\n+    // remove illegal fields and try again\n+    int valid = savedFields[0].iField.getType().isSupported() ? 1 : 0;\n+    for (int i = 1; i < count; i++) {\n+        DurationField unit = savedFields[i].iField.getDurationField();\n+        if (unit == null || !unit.isSupported()) {\n+            break;\n+        }\n+        valid++;\n+    }\n+\n+    if (valid > 0) {\n+        // We have at least one valid field.\n+        if (valid < count) {\n+            // Trim the array.\n+            SavedField[] newFields = new SavedField[valid];\n+            System.arraycopy(savedFields, 0, newFields, 0, valid);\n+            savedFields = newFields;\n+            count = valid;\n+        }\n+        // Proceed with the valid fields.\n+        millis = computeMillis(resetFields, text);\n+    } else {\n+        throw e;\n+    }\n+}\n+\n+if (count > 0) {\n+    DurationField months = DurationFieldType.months().getField(iChrono);\n+    DurationField days = DurationFieldType.days().getField(iChrono);\n+    DurationField first = savedFields[0].iField.getDurationField();\n+    if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+        saveField(DateTimeFieldType.year(), iDefaultYear);\n+        return computeMillis(resetFields, text);\n+    }\n+    sort(savedFields, count);\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: method isSupported in class DateTimeFieldType cannot be applied to given types;",
    "test_result": "ERROR"
}