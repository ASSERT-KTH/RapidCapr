{
    "patch": "package com.example.parser;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport org.mozilla.javascript.ErrorReporter;\nimport org.mozilla.javascript.Node;\nimport org.mozilla.javascript.Token;\nimport org.mozilla.javascript.ast.*;\n\nclass IRFactory extends NodeTransformer<Object> implements TypeSafeDispatcher {\n    private final CompilerEnvirons env;\n    private final ErrorReporter errorReporter;\n    private final String sourceName;\n    private final LineNumberTable lineNumbers;\n    private static final Set<String> ALLOWED_DIRECTIVES = new HashSet<String>();\n\n    IRFactory(CompilerEnvirons env, ErrorReporter errorReporter,\n              String sourceName, LineNumberTable lineNumbers) {\n        this.env = env;\n        this.errorReporter = errorReporter;\n        this.sourceName = sourceName;\n        this.lineNumbers = lineNumbers;\n    }\n\n    private boolean isDirective(Node n) {\n        if (n == null) return false;\n\n        int nType = n.getType();\n        return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n                n.getFirstChild().getType() == Token.STRING &&\n                ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n    }\n\n    @Override\n    Node processBlock(Block blockNode) {\n        return processGeneric(blockNode);\n    }\n\n    @Override\n    Node processBreakStatement(BreakStatement statementNode) {\n        Node node = newNode(Token.BREAK);\n        if (statementNode.getLabel() != null) {\n            Node labelName = transform(statementNode.getLabel());\n            labelName.setType(Token.LABEL_NAME);\n            node.addChildToBack(labelName);\n        }\n        return node;\n    }\n\n    @Override\n    Node processCatchClause(CatchClause clauseNode) {\n        AstNode catchVar = clauseNode.getVarName();\n        Node node = newNode(Token.CATCH, transform(catchVar));\n        if (clauseNode.getCatchCondition() != null) {\n            errorReporter.error(\"Catch clauses are not supported\",\n                    sourceName, clauseNode.getCatchCondition().getLineno(), \"\", 0);\n        }\n        node.addChildToBack(transform(clauseNode.getBody()));\n        return node;\n    }\n\n    @Override\n    Node processConditionalExpression(ConditionalExpression exprNode) {\n        return newNode(Token.HOOK,\n                transform(exprNode.getTestExpression()),\n                transform(exprNode.getTrueExpression()),\n                transform(exprNode.getFalseExpression()));\n    }\n\n    @Override\n    Node processContinueStatement(ContinueStatement statementNode) {\n        Node node = newNode(Token.CONTINUE);\n        if (statementNode.getLabel() != null) {\n            Node labelName = transform(statementNode.getLabel());\n            labelName.setType(Token.LABEL_NAME);\n            node.addChildToBack(labelName);\n        }\n        return node;\n    }\n\n    @Override\n    Node processDoLoop(DoLoop loopNode) {\n        return newNode(\n                Token.DO,\n                transformBlock(loopNode.getBody()),\n                transform(loopNode.getCondition()));\n    }\n\n    @Override\n    Node processElementGet(ElementGet getNode) {\n        return newNode(\n                Token.GETELEM,\n                transform(getNode.getTarget()),\n                transform(getNode.getElement()));\n    }\n\n    @Override\n    Node processEmptyExpression(EmptyExpression exprNode) {\n        return newNode(Token.EMPTY);\n    }\n\n    @Override\n    Node processExpressionStatement(ExpressionStatement statementNode) {\n        Node node = newNode(transformTokenType(statementNode.getType()));\n        node.addChildToBack(transform(statementNode.getExpression()));\n        return node;\n    }\n\n    @Override\n    Node processForInLoop(ForInLoop loopNode) {\n        return newNode(\n                Token.FOR,\n                transform(loopNode.getIterator()),\n                transform(loopNode.getIteratedObject()),\n                transformBlock(loopNode.getBody()));\n    }\n\n    @Override\n    Node processForLoop(ForLoop loopNode) {\n        Node node = newNode(\n                Token.FOR,\n                transform(loopNode.getInitializer()),\n                transform(loopNode.getCondition()),\n                transform(loopNode.getIncrement()));\n        node.addChildToBack(transformBlock(loopNode.getBody()));\n        return node;\n    }\n\n    @Override\n    Node processFunctionCall(Node functionCallNode) {\n        Node node = newNode(transformTokenType(functionCallNode.getType()),\n                transform(functionCallNode.getFirstChild()));\n        for (Node arg : functionCallNode.getSecondChild()) {\n            node.addChildToBack(transform(arg));\n        }\n        node.setLineno(functionCallNode.getLineno());\n        node.setCharno(position2charno(functionCallNode.getPosition()));\n        return node;\n    }\n\n    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n        Name name = functionNode.getFunctionName();\n        boolean isUnnamedFunction = false;\n        if (name == null) {\n            name = new Name();\n            name.setIdentifier(\"\");\n            isUnnamedFunction = true;\n\n            // Set the line number and character number of the Name node\n            // to the values of the function node.\n            name.setLineno(functionNode.getLineno());\n            name.setCharno(functionNode.getBaseLineno());\n        }\n        Node node = newNode(Token.FUNCTION);\n        Node newName = transform(name);\n        if (isUnnamedFunction) {\n            newName.setLineno(functionNode.getLineno());\n            newName.setCharno(functionNode.getBaseLineno() + \"function\".length() - 1);\n        }\n        node.addChildToBack(newName);\n        Node lp = newNode(Token.LP);\n        lp.setLineno(functionNode.getLineno());\n        lp.setCharno(position2charno(functionNode.getLp()));\n        for (AstNode param : functionNode.getParams()) {\n            lp.addChildToBack(transform(param));\n        }\n        node.addChildToBack(lp);\n        Node bodyNode = transform(functionNode.getBody());\n        parseDirectives(bodyNode);\n        node.addChildToBack(bodyNode);\n        return node;\n    }\n\n    @Override\n    Node processIfStatement(IfStatement statementNode) {\n        Node node = newNode(\n                Token.IF,\n                transform(statementNode.getCondition()),\n                transform(statementNode.getThenPart()));\n        if (statementNode.getElsePart() != null) {\n            node.addChildToBack(transform(statementNode.getElsePart()));\n        }\n        return node;\n    }\n\n    @Override\n    Node processLabeledStatement(LabeledStatement statementNode) {\n        Node node = newNode(\n                Token.LABEL,\n                transform(statementNode.getStatement()),\n                transform(statementNode.getFirstLabel()));\n        node.setLineno(statementNode.getLineno());\n        return node;\n    }\n\n    @Override\n    Node processNewExpression(NewExpression exprNode) {\n        Node node = newNode(Token.NEW, transform(exprNode.getTarget()));\n        for (AstNode arg : exprNode.getArguments()) {\n            node.addChildToBack(transform(arg));\n        }\n        node.setLineno(exprNode.getLineno());\n        node.setCharno(position2charno(exprNode.getPosition()));\n        return node;\n    }\n\n    @Override\n    Node processNumberLiteral(NumberLiteral literalNode) {\n        return newNode(Token.NUMBER, literalNode.getNumber());\n    }\n\n    @Override\n    Node processObjectLiteral(ObjectLiteral literalNode) {\n        Node node = newNode(Token.OBJECTLIT);\n        for (ObjectProperty prop : literalNode.getElements()) {\n            nod",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..6775fd13 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -385,182 +385,225 @@ public class IRFactory {\n       }\n     }\n \n+package com.example.parser;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.mozilla.javascript.ErrorReporter;\n+import org.mozilla.javascript.Node;\n+import org.mozilla.javascript.Token;\n+import org.mozilla.javascript.ast.*;\n+\n+class IRFactory extends NodeTransformer<Object> implements TypeSafeDispatcher {\n+    private final CompilerEnvirons env;\n+    private final ErrorReporter errorReporter;\n+    private final String sourceName;\n+    private final LineNumberTable lineNumbers;\n+    private static final Set<String> ALLOWED_DIRECTIVES = new HashSet<String>();\n+\n+    IRFactory(CompilerEnvirons env, ErrorReporter errorReporter,\n+              String sourceName, LineNumberTable lineNumbers) {\n+        this.env = env;\n+        this.errorReporter = errorReporter;\n+        this.sourceName = sourceName;\n+        this.lineNumbers = lineNumbers;\n+    }\n+\n     private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+        if (n == null) return false;\n \n-      int nType = n.getType();\n-      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n-          n.getFirstChild().getType() == Token.STRING &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+        int nType = n.getType();\n+        return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n+                n.getFirstChild().getType() == Token.STRING &&\n+                ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n     }\n \n     @Override\n     Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n+        return processGeneric(blockNode);\n     }\n \n     @Override\n     Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+        Node node = newNode(Token.BREAK);\n+        if (statementNode.getLabel() != null) {\n+            Node labelName = transform(statementNode.getLabel());\n+            labelName.setType(Token.LABEL_NAME);\n+            node.addChildToBack(labelName);\n+        }\n+        return node;\n     }\n \n     @Override\n     Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n+        AstNode catchVar = clauseNode.getVarName();\n+        Node node = newNode(Token.CATCH, transform(catchVar));\n+        if (clauseNode.getCatchCondition() != null) {\n+            errorReporter.error(\"Catch clauses are not supported\",\n+                    sourceName, clauseNode.getCatchCondition().getLineno(), \"\", 0);\n+        }\n+        node.addChildToBack(transform(clauseNode.getBody()));\n+        return node;\n     }\n \n     @Override\n     Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+        return newNode(Token.HOOK,\n+                transform(exprNode.getTestExpression()),\n+                transform(exprNode.getTrueExpression()),\n+                transform(exprNode.getFalseExpression()));\n     }\n \n     @Override\n     Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+        Node node = newNode(Token.CONTINUE);\n+        if (statementNode.getLabel() != null) {\n+            Node labelName = transform(statementNode.getLabel());\n+            labelName.setType(Token.LABEL_NAME);\n+            node.addChildToBack(labelName);\n+        }\n+        return node;\n     }\n \n     @Override\n     Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+        return newNode(\n+                Token.DO,\n+                transformBlock(loopNode.getBody()),\n+                transform(loopNode.getCondition()));\n     }\n \n     @Override\n     Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+        return newNode(\n+                Token.GETELEM,\n+                transform(getNode.getTarget()),\n+                transform(getNode.getElement()));\n     }\n \n     @Override\n     Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+        return newNode(Token.EMPTY);\n     }\n \n     @Override\n     Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+        Node node = newNode(transformTokenType(statementNode.getType()));\n+        node.addChildToBack(transform(statementNode.getExpression()));\n+        return node;\n     }\n \n     @Override\n     Node processForInLoop(ForInLoop loopNode) {\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+        return newNode(\n+                Token.FOR,\n+                transform(loopNode.getIterator()),\n+                transform(loopNode.getIteratedObject()),\n+                transformBlock(loopNode.getBody()));\n     }\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {\n-      Node node = newNode(\n-          Token.FOR,\n-          transform(loopNode.getInitializer()),\n-          transform(loopNode.getCondition()),\n-          transform(loopNode.getIncrement()));\n-      node.addChildToBack(transformBlock(loopNode.getBody()));\n-      return node;\n+        Node node = newNode(\n+                Token.FOR,\n+                transform(loopNode.getInitializer()),\n+                transform(loopNode.getCondition()),\n+                transform(loopNode.getIncrement()));\n+        node.addChildToBack(transformBlock(loopNode.getBody()));\n+        return node;\n     }\n \n     @Override\n-    Node processFunctionCall(FunctionCall callNode) {\n-      Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n-      for (AstNode child : callNode.getArguments()) {\n-        node.addChildToBack(transform(child));\n-      }\n-\n-      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n-      node.setLineno(callNode.getLineno());\n-      node.setCharno(position2charno(leftParamPos));\n-      return node;\n+    Node processFunctionCall(Node functionCallNode) {\n+        Node node = newNode(transformTokenType(functionCallNode.getType()),\n+                transform(functionCallNode.getFirstChild()));\n+        for (Node arg : functionCallNode.getSecondChild()) {\n+            node.addChildToBack(transform(arg));\n+        }\n+        node.setLineno(functionCallNode.getLineno());\n+        node.setCharno(position2charno(functionCallNode.getPosition()));\n+        return node;\n     }\n \n     @Override\n     Node processFunctionNode(FunctionNode functionNode) {\n-      Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n-      if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n-        isUnnamedFunction = true;\n-      }\n-      Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n-      if (isUnnamedFunction) {\n-        // Old Rhino tagged the empty name node with the line number of the\n-        // declaration.\n-        newName.setLineno(functionNode.getLineno());\n-        // TODO(bowdidge) Mark line number of paren correctly.\n-        // Same problem as below - the left paren might not be on the\n-        // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n-        newName.setCharno(position2charno(lpColumn));\n-      }\n-\n-      node.addChildToBack(newName);\n-      Node lp = newNode(Token.LP);\n-      // The left paren's complicated because it's not represented by an\n-      // AstNode, so there's nothing that has the actual line number that it\n-      // appeared on.  We know the paren has to appear on the same line as the\n-      // function name (or else a semicolon will be inserted.)  If there's no\n-      // function name, assume the paren was on the same line as the function.\n-      // TODO(bowdidge): Mark line number of paren correctly.\n-      Name fnName = functionNode.getFunctionName();\n-      if (fnName != null) {\n-        lp.setLineno(fnName.getLineno());\n-      } else {\n+        Name name = functionNode.getFunctionName();\n+        boolean isUnnamedFunction = false;\n+        if (name == null) {\n+            name = new Name();\n+            name.setIdentifier(\"\");\n+            isUnnamedFunction = true;\n+\n+            // Set the line number and character number of the Name node\n+            // to the values of the function node.\n+            name.setLineno(functionNode.getLineno());\n+            name.setCharno(functionNode.getBaseLineno());\n+        }\n+        Node node = newNode(Token.FUNCTION);\n+        Node newName = transform(name);\n+        if (isUnnamedFunction) {\n+            newName.setLineno(functionNode.getLineno());\n+            newName.setCharno(functionNode.getBaseLineno() + \"function\".length() - 1);\n+        }\n+        node.addChildToBack(newName);\n+        Node lp = newNode(Token.LP);\n         lp.setLineno(functionNode.getLineno());\n-      }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n+        lp.setCharno(position2charno(functionNode.getLp()));\n+        for (AstNode param : functionNode.getParams()) {\n+            lp.addChildToBack(transform(param));\n+        }\n+        node.addChildToBack(lp);\n+        Node bodyNode = transform(functionNode.getBody());\n+        parseDirectives(bodyNode);\n+        node.addChildToBack(bodyNode);\n+        return node;\n+    }\n \n-      lp.setCharno(position2charno(lparenCharno));\n-      for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n-      }\n-      node.addChildToBack(lp);\n+    @Override\n+    Node processIfStatement(IfStatement statementNode) {\n+        Node node = newNode(\n+                Token.IF,\n+                transform(statementNode.getCondition()),\n+                transform(statementNode.getThenPart()));\n+        if (statementNode.getElsePart() != null) {\n+            node.addChildToBack(transform(statementNode.getElsePart()));\n+        }\n+        return node;\n+    }\n \n-      Node bodyNode = transform(functionNode.getBody());\n-      parseDirectives(bodyNode);\n-      node.addChildToBack(bodyNode);\n-     return node;\n+    @Override\n+    Node processLabeledStatement(LabeledStatement statementNode) {\n+        Node node = newNode(\n+                Token.LABEL,\n+                transform(statementNode.getStatement()),\n+                transform(statementNode.getFirstLabel()));\n+        node.setLineno(statementNode.getLineno());\n+        return node;\n     }\n \n+    @Override\n+    Node processNewExpression(NewExpression exprNode) {\n+        Node node = newNode(Token.NEW, transform(exprNode.getTarget()));\n+        for (AstNode arg : exprNode.getArguments()) {\n+            node.addChildToBack(transform(arg));\n+        }\n+        node.setLineno(exprNode.getLineno());\n+        node.setCharno(position2charno(exprNode.getPosition()));\n+        return node;\n+    }\n+\n+    @Override\n+    Node processNumberLiteral(NumberLiteral literalNode) {\n+        return newNode(Token.NUMBER, literalNode.getNumber());\n+    }\n+\n+    @Override\n+    Node processObjectLiteral(ObjectLiteral literalNode) {\n+        Node node = newNode(Token.OBJECTLIT);\n+        for (ObjectProperty prop : literalNode.getElements()) {\n+            nod\n+\n     @Override\n     Node processIfStatement(IfStatement statementNode) {\n       Node node = newNode(Token.IF);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}