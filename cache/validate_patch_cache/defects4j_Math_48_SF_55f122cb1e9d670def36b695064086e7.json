{
    "patch": "protected final double doSolve() {\n    // Get initial solution\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    // If one of the bounds is the exact root, return it. Since these are\n    // not under-approximations or over-approximations, we can return them\n    // regardless of the allowed solutions.\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n\n    // Verify bracketing of initial solution.\n    verifyBracketing(x0, x1);\n\n    // Get accuracies.\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    // Create a place holder for x2\n    double x2;\n\n    // Keep track of inverted intervals, meaning that the left bound is\n    // larger than the right bound.\n    boolean inverted = false;\n\n    // Keep finding better approximations.\n    while (true) {\n        // Calculate the next approximation.\n        x2 = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double f2 = computeObjectiveValue(x2);\n\n        // If the new approximation is the exact root, return it. Since\n        // this is not an under-approximation or an over-approximation,\n        // we can return it regardless of the allowed solutions.\n        if (f2 == 0.0) {\n            return x2;\n        }\n\n        // Update the bounds with the new approximation.\n        if (f1 * f2 < 0) {\n            // The value of x1 has switched to the other bound, thus inverting\n            // the interval.\n            x0 = x1;\n            f0 = f1;\n            inverted = !inverted;\n        } else {\n            // Check convergence conditions.\n            if (FastMath.abs(f2) <= ftol) {\n                switch (allowed) {\n                    case ANY_SIDE:\n                        return x2;\n                    case LEFT_SIDE:\n                        if (inverted) {\n                            return x2;\n                        }\n                        break;\n                    case RIGHT_SIDE:\n                        if (!inverted) {\n                            return x2;\n                        }\n                        break;\n                    case BELOW_SIDE:\n                        if (f2 <= 0) {\n                            return x2;\n                        }\n                        break;\n                    case ABOVE_SIDE:\n                        if (f2 >= 0) {\n                            return x2;\n                        }\n                        break;\n                    default:\n                        throw new MathInternalError();\n                }\n                if (FastMath.abs(x2 - x1) < FastMath.max(rtol * FastMath.max(FastMath.abs(x2), FastMath.abs(x1)), atol)) {\n                    // The root is too close to the x2, we cannot reach a better accuracy given the current constraints\n                    return x2;\n                }\n            } else if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.max(FastMath.abs(x1), FastMath.abs(x0)), atol)) {\n                switch (allowed) {\n                    case ANY_SIDE:\n                        return x2;\n                    case LEFT_SIDE:\n                        return inverted ? x2 : x0;\n                    case RIGHT_SIDE:\n                        return inverted ? x0 : x2;\n                    case BELOW_SIDE:\n                        return (f2 <= 0) ? x2 : x0;\n                    case ABOVE_SIDE:\n                        return (f2 >= 0) ? x2 : x0;\n                    default:\n                        throw new MathInternalError();\n                }\n                // Additional tests needed as the bracket may collapse due to rounding errors\n            } else if (FastMath.abs(f0) < FastMath.abs(f2)) {\n                // If f0 is smaller than f2 then the bracket is collapsing at the lower end\n                if (f0 == 0) {\n                    return x0;\n                }\n                x1 = x0;\n                f1 = f0;\n                x0 = x2;\n                f0 = f2;\n            } else {\n                if (f1 == 0) {\n                    return x1;\n                }\n\n                // If f2 is smaller than f1 then the bracket is collapsing at the higher end\n                x0 = x1;\n                f0 = f1;\n                x1 = x2;\n                f1 = f2;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..50c13ed61 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -126,129 +126,130 @@ public abstract class BaseSecantSolver\n     }\n \n     /** {@inheritDoc} */\n-    protected final double doSolve() {\n-        // Get initial solution\n-        double x0 = getMin();\n-        double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n+protected final double doSolve() {\n+    // Get initial solution\n+    double x0 = getMin();\n+    double x1 = getMax();\n+    double f0 = computeObjectiveValue(x0);\n+    double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n+    // If one of the bounds is the exact root, return it. Since these are\n+    // not under-approximations or over-approximations, we can return them\n+    // regardless of the allowed solutions.\n+    if (f0 == 0.0) {\n+        return x0;\n+    }\n+    if (f1 == 0.0) {\n+        return x1;\n+    }\n \n-        // Verify bracketing of initial solution.\n-        verifyBracketing(x0, x1);\n+    // Verify bracketing of initial solution.\n+    verifyBracketing(x0, x1);\n \n-        // Get accuracies.\n-        final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+    // Get accuracies.\n+    final double ftol = getFunctionValueAccuracy();\n+    final double atol = getAbsoluteAccuracy();\n+    final double rtol = getRelativeAccuracy();\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n-        // larger than the right bound.\n-        boolean inverted = false;\n+    // Create a place holder for x2\n+    double x2;\n \n-        // Keep finding better approximations.\n-        while (true) {\n-            // Calculate the next approximation.\n-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+    // Keep track of inverted intervals, meaning that the left bound is\n+    // larger than the right bound.\n+    boolean inverted = false;\n \n-            // If the new approximation is the exact root, return it. Since\n-            // this is not an under-approximation or an over-approximation,\n-            // we can return it regardless of the allowed solutions.\n-            if (fx == 0.0) {\n-                return x;\n-            }\n+    // Keep finding better approximations.\n+    while (true) {\n+        // Calculate the next approximation.\n+        x2 = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n+        final double f2 = computeObjectiveValue(x2);\n \n-            // Update the bounds with the new approximation.\n-            if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n-                // the interval.\n-                x0 = x1;\n-                f0 = f1;\n-                inverted = !inverted;\n-            } else {\n-                switch (method) {\n-                case ILLINOIS:\n-                    f0 *= 0.5;\n-                    break;\n-                case PEGASUS:\n-                    f0 *= f1 / (f1 + fx);\n-                    break;\n-                case REGULA_FALSI:\n-                    // Detect early that algorithm is stuck, instead of waiting\n-                    // for the maximum number of iterations to be exceeded.\n-                    break;\n-                default:\n-                    // Should never happen.\n-                    throw new MathInternalError();\n-                }\n-            }\n-            // Update from [x0, x1] to [x0, x].\n-            x1 = x;\n-            f1 = fx;\n+        // If the new approximation is the exact root, return it. Since\n+        // this is not an under-approximation or an over-approximation,\n+        // we can return it regardless of the allowed solutions.\n+        if (f2 == 0.0) {\n+            return x2;\n+        }\n \n-            // If the function value of the last approximation is too small,\n-            // given the function value accuracy, then we can't get closer to\n-            // the root than we already are.\n-            if (FastMath.abs(f1) <= ftol) {\n+        // Update the bounds with the new approximation.\n+        if (f1 * f2 < 0) {\n+            // The value of x1 has switched to the other bound, thus inverting\n+            // the interval.\n+            x0 = x1;\n+            f0 = f1;\n+            inverted = !inverted;\n+        } else {\n+            // Check convergence conditions.\n+            if (FastMath.abs(f2) <= ftol) {\n                 switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    if (inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case RIGHT_SIDE:\n-                    if (!inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case BELOW_SIDE:\n-                    if (f1 <= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                case ABOVE_SIDE:\n-                    if (f1 >= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                default:\n-                    throw new MathInternalError();\n+                    case ANY_SIDE:\n+                        return x2;\n+                    case LEFT_SIDE:\n+                        if (inverted) {\n+                            return x2;\n+                        }\n+                        break;\n+                    case RIGHT_SIDE:\n+                        if (!inverted) {\n+                            return x2;\n+                        }\n+                        break;\n+                    case BELOW_SIDE:\n+                        if (f2 <= 0) {\n+                            return x2;\n+                        }\n+                        break;\n+                    case ABOVE_SIDE:\n+                        if (f2 >= 0) {\n+                            return x2;\n+                        }\n+                        break;\n+                    default:\n+                        throw new MathInternalError();\n                 }\n-            }\n-\n-            // If the current interval is within the given accuracies, we\n-            // are satisfied with the current approximation.\n-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n-                                                     atol)) {\n+                if (FastMath.abs(x2 - x1) < FastMath.max(rtol * FastMath.max(FastMath.abs(x2), FastMath.abs(x1)), atol)) {\n+                    // The root is too close to the x2, we cannot reach a better accuracy given the current constraints\n+                    return x2;\n+                }\n+            } else if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.max(FastMath.abs(x1), FastMath.abs(x0)), atol)) {\n                 switch (allowed) {\n-                case ANY_SIDE:\n+                    case ANY_SIDE:\n+                        return x2;\n+                    case LEFT_SIDE:\n+                        return inverted ? x2 : x0;\n+                    case RIGHT_SIDE:\n+                        return inverted ? x0 : x2;\n+                    case BELOW_SIDE:\n+                        return (f2 <= 0) ? x2 : x0;\n+                    case ABOVE_SIDE:\n+                        return (f2 >= 0) ? x2 : x0;\n+                    default:\n+                        throw new MathInternalError();\n+                }\n+                // Additional tests needed as the bracket may collapse due to rounding errors\n+            } else if (FastMath.abs(f0) < FastMath.abs(f2)) {\n+                // If f0 is smaller than f2 then the bracket is collapsing at the lower end\n+                if (f0 == 0) {\n+                    return x0;\n+                }\n+                x1 = x0;\n+                f1 = f0;\n+                x0 = x2;\n+                f0 = f2;\n+            } else {\n+                if (f1 == 0) {\n                     return x1;\n-                case LEFT_SIDE:\n-                    return inverted ? x1 : x0;\n-                case RIGHT_SIDE:\n-                    return inverted ? x0 : x1;\n-                case BELOW_SIDE:\n-                    return (f1 <= 0) ? x1 : x0;\n-                case ABOVE_SIDE:\n-                    return (f1 >= 0) ? x1 : x0;\n-                default:\n-                    throw new MathInternalError();\n                 }\n+\n+                // If f2 is smaller than f1 then the bracket is collapsing at the higher end\n+                x0 = x1;\n+                f0 = f1;\n+                x1 = x2;\n+                f1 = f2;\n             }\n         }\n     }\n+}\n \n     /** <em>Secant</em>-based root-finding methods. */\n     protected enum Method {",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}