{
    "patch": "    boolean canRemoveParams = true;\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      canRemoveParams = false;\n    }\n    \n    if (canRemoveParams) {\n      Node argList = getFunctionArgList(function);\n      boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n      if (!modifyCallers) {\n        // Strip unreferenced args off the end of the function declaration.\n        Node lastArg;\n        while ((lastArg = argList.getLastChild()) != null) {\n          if (!referenced.contains(fnScope.getVar(lastArg.getString()))) {\n            NodeUtil.removeChild(argList, lastArg);\n            compiler.reportCodeChange();\n          } else {\n            break;\n          }\n        }\n      } else {\n        callSiteOptimizer.optimize(fnScope, referenced);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..1df52b41 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,30 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    boolean canRemoveParams = true;\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      canRemoveParams = false;\n+    }\n+    \n+    if (canRemoveParams) {\n+      Node argList = getFunctionArgList(function);\n+      boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+      if (!modifyCallers) {\n+        // Strip unreferenced args off the end of the function declaration.\n+        Node lastArg;\n+        while ((lastArg = argList.getLastChild()) != null) {\n+          if (!referenced.contains(fnScope.getVar(lastArg.getString()))) {\n+            NodeUtil.removeChild(argList, lastArg);\n+            compiler.reportCodeChange();\n+          } else {\n+            break;\n+          }\n+        }\n+      } else {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}