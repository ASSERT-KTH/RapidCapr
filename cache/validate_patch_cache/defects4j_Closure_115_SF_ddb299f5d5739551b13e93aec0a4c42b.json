{
    "patch": "  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n    boolean hasSideEffects = false;\n\n    if (block.hasChildren()) {\n      Preconditions.checkState(block.hasOneChild());\n      Node stmt = block.getFirstChild();\n      if (stmt.isReturn()) {\n        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n      }\n    }\n    \n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      if (fnParam == null) {\n        // If there is a call parameter with no matching\n        // function parameter and it is not the result of a\n        // destructuring assignment, then the Args object is being used\n        // instead of the defined parameters.\n        if (cArg.isSpread()) {\n          return CanInlineResult.YES_WITH_DESTRUCTURING;\n        } else {\n          return CanInlineResult.NO;\n        }\n      }\n\n      if (cArg != null) {\n        if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n          return CanInlineResult.NO;\n        }\n        \n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        \n        if (isAnyParameterMutated(fnParam, cArg)) {\n          return CanInlineResult.NO;\n        }\n        \n        cArg = cArg.getNext();\n      }\n\n      // Move to the next name.\n      fnParam = fnParam.getNext();\n    }\n\n    return CanInlineResult.YES;\n  }\n\n  private boolean isAnyParameterMutated(Node fnParam, Node cArg) {\n    if (cArg.isSpread()) {\n      if (NodeUtil.dependsOnArgumentsArray(cArg.getOnlyChild())) {\n        return true;\n      } else {\n        // The spread argument is creating a new object.\n        return isAnyParameterMutated(fnParam, cArg.getNext());\n      }\n    }\n\n    if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n      return true;\n    }\n\n    if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n      Node containingBlock = fnParam.getGrandparent();\n      if (NodeUtil.isInLoop(containingBlock, cArg)) {\n        return true;\n      }\n\n      String paramName = fnParam.getString();\n      Node functionBlock = fnParam.getGrandparent().getLastChild();\n\n      if (paramIsMutatedInBlock(functionBlock, paramName, containingBlock)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private boolean paramIsMutatedInBlock(Node block, String paramName, Node startNode) {\n    for (Node n : block.children()) {\n      if (n == startNode) {\n        // Stop traversing once we reach the start node.\n        // We are only interested in mutations occurring after the start node.\n        break;\n      }\n\n      if (n.isBlock() && n.hasChildren()) {\n        if (paramIsMutatedInBlock(n, paramName, null /* startNode */)) {\n          return true;\n        }\n      }\n\n      if (!NodeUtil.mayEffectMutableState(n, compiler)) {\n        continue;\n      }\n\n      for (Node nameRef : NodeUtil.getNameReferences(n, paramName)) {\n        // Ignore references that occur before the start node.\n        if (startNode == null || NodeUtil.isBefore(nameRef, startNode)) {\n          continue;\n        }\n\n        // Ignore references inside of for...in statements since the var is\n        // part of the loop, and shouldn't disqualify inlining. For example:\n        //   for (var x in ob) { ... }\n        if (NodeUtil.isForIn(nameRef.getParent())) {\n          continue;\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..af5ae3f5 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -693,8 +693,8 @@ class FunctionInjector {\n     }\n \n     Node block = fnNode.getLastChild();\n-\n     boolean hasSideEffects = false;\n+\n     if (block.hasChildren()) {\n       Preconditions.checkState(block.hasOneChild());\n       Node stmt = block.getFirstChild();\n@@ -702,6 +702,7 @@ class FunctionInjector {\n         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n       }\n     }\n+    \n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n \n@@ -724,39 +725,110 @@ class FunctionInjector {\n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n+      if (fnParam == null) {\n+        // If there is a call parameter with no matching\n+        // function parameter and it is not the result of a\n+        // destructuring assignment, then the Args object is being used\n+        // instead of the defined parameters.\n+        if (cArg.isSpread()) {\n+          return CanInlineResult.YES_WITH_DESTRUCTURING;\n+        } else {\n+          return CanInlineResult.NO;\n         }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n       }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n       if (cArg != null) {\n+        if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n+          return CanInlineResult.NO;\n+        }\n+        \n         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n           return CanInlineResult.NO;\n         }\n+        \n+        if (isAnyParameterMutated(fnParam, cArg)) {\n+          return CanInlineResult.NO;\n+        }\n+        \n         cArg = cArg.getNext();\n       }\n+\n+      // Move to the next name.\n+      fnParam = fnParam.getNext();\n     }\n \n     return CanInlineResult.YES;\n   }\n \n+  private boolean isAnyParameterMutated(Node fnParam, Node cArg) {\n+    if (cArg.isSpread()) {\n+      if (NodeUtil.dependsOnArgumentsArray(cArg.getOnlyChild())) {\n+        return true;\n+      } else {\n+        // The spread argument is creating a new object.\n+        return isAnyParameterMutated(fnParam, cArg.getNext());\n+      }\n+    }\n+\n+    if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+      return true;\n+    }\n+\n+    if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n+      Node containingBlock = fnParam.getGrandparent();\n+      if (NodeUtil.isInLoop(containingBlock, cArg)) {\n+        return true;\n+      }\n+\n+      String paramName = fnParam.getString();\n+      Node functionBlock = fnParam.getGrandparent().getLastChild();\n+\n+      if (paramIsMutatedInBlock(functionBlock, paramName, containingBlock)) {\n+        return true;\n+      }\n+    }\n+\n+    return false;\n+  }\n+\n+  private boolean paramIsMutatedInBlock(Node block, String paramName, Node startNode) {\n+    for (Node n : block.children()) {\n+      if (n == startNode) {\n+        // Stop traversing once we reach the start node.\n+        // We are only interested in mutations occurring after the start node.\n+        break;\n+      }\n+\n+      if (n.isBlock() && n.hasChildren()) {\n+        if (paramIsMutatedInBlock(n, paramName, null /* startNode */)) {\n+          return true;\n+        }\n+      }\n+\n+      if (!NodeUtil.mayEffectMutableState(n, compiler)) {\n+        continue;\n+      }\n+\n+      for (Node nameRef : NodeUtil.getNameReferences(n, paramName)) {\n+        // Ignore references that occur before the start node.\n+        if (startNode == null || NodeUtil.isBefore(nameRef, startNode)) {\n+          continue;\n+        }\n+\n+        // Ignore references inside of for...in statements since the var is\n+        // part of the loop, and shouldn't disqualify inlining. For example:\n+        //   for (var x in ob) { ... }\n+        if (NodeUtil.isForIn(nameRef.getParent())) {\n+          continue;\n+        }\n+\n+        return true;\n+      }\n+    }\n+\n+    return false;\n+  }\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}