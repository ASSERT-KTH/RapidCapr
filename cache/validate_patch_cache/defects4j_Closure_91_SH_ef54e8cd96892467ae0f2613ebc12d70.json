{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isGet(parent)) {\n        if (parent.getType() == Token.GETPROP &&\n            parent.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        Node pp = parent.getParent();\n        if (pp != null && pp.getType() == Token.CALL &&\n            parent == pp.getFirstChild().getLastChild()) {\n          // Names in calls (i.e. in `a.b()`) cannot be lent, unless they\n          // are called without any arguments because then `this` is not used.\n          return parent.getNext() == null;\n        }\n        if (pp != null && NodeUtil.isNameDeclaration(pp)) {\n          Node varNode = pp.getFirstChild();\n          if (varNode.hasChildren() && varNode.getFirstChild().equals(parent)) {\n            return false;\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..ea57dacd 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,26 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent)) {\n+        if (parent.getType() == Token.GETPROP &&\n+            parent.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+        Node pp = parent.getParent();\n+        if (pp != null && pp.getType() == Token.CALL &&\n+            parent == pp.getFirstChild().getLastChild()) {\n+          // Names in calls (i.e. in `a.b()`) cannot be lent, unless they\n+          // are called without any arguments because then `this` is not used.\n+          return parent.getNext() == null;\n+        }\n+        if (pp != null && NodeUtil.isNameDeclaration(pp)) {\n+          Node varNode = pp.getFirstChild();\n+          if (varNode.hasChildren() && varNode.getFirstChild().equals(parent)) {\n+            return false;\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}