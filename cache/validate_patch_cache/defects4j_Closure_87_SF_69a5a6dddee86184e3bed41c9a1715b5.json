{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      // If the parent of the block is an EXPR_RESULT, don't fold it.\n      if (n.getParent().getType() == Token.EXPR_RESULT) {\n        return false;\n      }\n\n      if (n.hasOneChild()) {\n        Node child = n.getFirstChild();\n\n        // If the child is an EXPR_RESULT node\n        if (child.getType() == Token.EXPR_RESULT) {\n          Node expr = child.getFirstChild();\n\n          // Check if the child does not contain any control flow statements (if/switch/for/while/do/try)\n          if (ControlFlowGraph.hasControlFlowParent(expr)) {\n            return false;\n          }\n\n          // Check if the child is not a named function expression\n          if (NodeUtil.isFunctionDeclaration(expr) && !NodeUtil.isFunctionExpression(expr)) {\n            return false;\n          }\n\n          return NodeUtil.isExpressionNode(expr);\n        }\n\n        // If the child is not an EXPR_RESULT node\n        if (NodeUtil.isExpressionNode(child)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..15fccf14 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -518,19 +518,35 @@ public class PeepholeSubstituteAlternateSyntax\n    */\n   private boolean isFoldableExpressBlock(Node n) {\n     if (n.getType() == Token.BLOCK) {\n+      // If the parent of the block is an EXPR_RESULT, don't fold it.\n+      if (n.getParent().getType() == Token.EXPR_RESULT) {\n+        return false;\n+      }\n+\n       if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+        Node child = n.getFirstChild();\n+\n+        // If the child is an EXPR_RESULT node\n+        if (child.getType() == Token.EXPR_RESULT) {\n+          Node expr = child.getFirstChild();\n+\n+          // Check if the child does not contain any control flow statements (if/switch/for/while/do/try)\n+          if (ControlFlowGraph.hasControlFlowParent(expr)) {\n+            return false;\n+          }\n+\n+          // Check if the child is not a named function expression\n+          if (NodeUtil.isFunctionDeclaration(expr) && !NodeUtil.isFunctionExpression(expr)) {\n+            return false;\n+          }\n+\n+          return NodeUtil.isExpressionNode(expr);\n+        }\n+\n+        // If the child is not an EXPR_RESULT node\n+        if (NodeUtil.isExpressionNode(child)) {\n+          return true;\n+        }\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}