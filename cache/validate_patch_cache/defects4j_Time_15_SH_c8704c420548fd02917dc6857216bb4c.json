{
    "patch": "        if (val2 == -1) {\n            try {\n                return Math.multiplyExact(-1, val1);\n            } catch (ArithmeticException e) {\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                } else {\n                    return -val1;\n                }\n            }\n        }\n        if (val2 == 0) {\n            return 0L;\n        }\n        if (val2 == 1) {\n            return val1;\n        }\n        return safeMultiplyUnsigned(val1, val2);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/field/FieldUtils.java b/src/main/java/org/joda/time/field/FieldUtils.java\nindex a0fe7e2d..b5977609 100644\n--- a/src/main/java/org/joda/time/field/FieldUtils.java\n+++ b/src/main/java/org/joda/time/field/FieldUtils.java\n@@ -135,6 +135,24 @@ public class FieldUtils {\n     public static long safeMultiply(long val1, int val2) {\n         switch (val2) {\n             case -1:\n+        if (val2 == -1) {\n+            try {\n+                return Math.multiplyExact(-1, val1);\n+            } catch (ArithmeticException e) {\n+                if (val1 == Long.MIN_VALUE) {\n+                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n+                } else {\n+                    return -val1;\n+                }\n+            }\n+        }\n+        if (val2 == 0) {\n+            return 0L;\n+        }\n+        if (val2 == 1) {\n+            return val1;\n+        }\n+        return safeMultiplyUnsigned(val1, val2);\n                 return -val1;\n             case 0:\n                 return 0L;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}