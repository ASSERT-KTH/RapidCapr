{
    "patch": "private void readTypeVariables() {\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument == null) {\n        // Try to extract the actual type from the bounds of the type variable\n        for (Type bound : typeVariable.getBounds()) {\n            if (bound instanceof ParameterizedType) {\n                actualTypeArgument = ((ParameterizedType) bound).getActualTypeArguments()[0];\n                break;\n            } else if (bound instanceof TypeVariable) {\n                // Recursively check the bounds of the other type variable\n                TypeVariable<?> otherTypeVariable = (TypeVariable<?>) bound;\n                Type[] otherTypeVariableBounds = otherTypeVariable.getBounds();\n                if (otherTypeVariableBounds.length == 1) {\n                    actualTypeArgument = otherTypeVariableBounds[0];\n                    break;\n                } else {\n                    // Can't extract a single concrete type from an intersection type, try again with the next bound\n                    continue;\n                }\n            }\n        }\n    }\n\n    if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    } else {\n        throw new IllegalStateException(\"Cannot extract an actual type argument for type variable: \" + typeVariable);\n    }\n\n    // Register type variables based on bounds\n    for (Type bound : typeVariable.getBounds()) {\n        if (bound instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType) bound;\n            Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n            TypeVariable<?>[] typeVariables = typeVariable.getGenericDeclaration().getTypeParameters();\n            for (int i = 0; i < typeVariables.length; i++) {\n                if (typeVariables[i] == typeVariable) {\n                    for (Type actualTypeArgumentInBound : actualTypeArguments) {\n                        registerTypeVariablesOn(actualTypeArgumentInBound);\n                    }\n                    break;\n                }\n            }\n        } else if (bound instanceof TypeVariable) {\n            // Recursively register type variables based on the bound's own bounds\n            TypeVariable<?> otherTypeVariable = (TypeVariable<?>) bound;\n            Type[] otherTypeVariableBounds = otherTypeVariable.getBounds();\n            for (Type otherTypeVariableBound : otherTypeVariableBounds) {\n                registerTypeVariablesOn(otherTypeVariableBound);\n            }\n        } else {\n            // Register non-variable types directly\n            registerTypeVariablesOn(bound);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..c29280726 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,63 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument == null) {\n+        // Try to extract the actual type from the bounds of the type variable\n+        for (Type bound : typeVariable.getBounds()) {\n+            if (bound instanceof ParameterizedType) {\n+                actualTypeArgument = ((ParameterizedType) bound).getActualTypeArguments()[0];\n+                break;\n+            } else if (bound instanceof TypeVariable) {\n+                // Recursively check the bounds of the other type variable\n+                TypeVariable<?> otherTypeVariable = (TypeVariable<?>) bound;\n+                Type[] otherTypeVariableBounds = otherTypeVariable.getBounds();\n+                if (otherTypeVariableBounds.length == 1) {\n+                    actualTypeArgument = otherTypeVariableBounds[0];\n+                    break;\n+                } else {\n+                    // Can't extract a single concrete type from an intersection type, try again with the next bound\n+                    continue;\n+                }\n+            }\n+        }\n+    }\n+\n+    if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    } else {\n+        throw new IllegalStateException(\"Cannot extract an actual type argument for type variable: \" + typeVariable);\n+    }\n+\n+    // Register type variables based on bounds\n+    for (Type bound : typeVariable.getBounds()) {\n+        if (bound instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType) bound;\n+            Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+            TypeVariable<?>[] typeVariables = typeVariable.getGenericDeclaration().getTypeParameters();\n+            for (int i = 0; i < typeVariables.length; i++) {\n+                if (typeVariables[i] == typeVariable) {\n+                    for (Type actualTypeArgumentInBound : actualTypeArguments) {\n+                        registerTypeVariablesOn(actualTypeArgumentInBound);\n+                    }\n+                    break;\n+                }\n+            }\n+        } else if (bound instanceof TypeVariable) {\n+            // Recursively register type variables based on the bound's own bounds\n+            TypeVariable<?> otherTypeVariable = (TypeVariable<?>) bound;\n+            Type[] otherTypeVariableBounds = otherTypeVariable.getBounds();\n+            for (Type otherTypeVariableBound : otherTypeVariableBounds) {\n+                registerTypeVariablesOn(otherTypeVariableBound);\n+            }\n+        } else {\n+            // Register non-variable types directly\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "java.lang.IllegalStateException: Cannot extract an actual type argument for type variable: MC3",
    "test_result": "FAIL"
}