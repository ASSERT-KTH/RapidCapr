{
    "patch": "   private RealMatrix squareRoot(RealMatrix m) {\n        if (!isPositiveDefinite(m)) {\n            throw new IllegalArgumentException(\"Matrix not positive definite.\");\n        }\n\n        final int n = m.getRowDimension();\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        final RealMatrix eigenvalues = dec.getD();\n        final RealMatrix eigenvectors = dec.getV();\n\n        for (int i = 0; i < n; i++) {\n            if (eigenvalues.getEntry(i, i) < 0) {\n                eigenvalues.setEntry(i, i, 0);\n            } else {\n                eigenvalues.setEntry(i, i, Math.sqrt(eigenvalues.getEntry(i, i)));\n            }\n        }\n\n        final RealMatrix sqrtOfEigenvalues = eigenvectors.multiply(eigenvalues).multiply(eigenvectors.transpose());\n        final RealMatrix sqrtM = invSqrt(sqrtOfEigenvalues);\n        final RealMatrix result = sqrtM.multiply(eigenvectors).multiply(m).multiply(eigenvectors.transpose()).multiply(sqrtM);\n        return result;\n    }\n\n    private static boolean isPositiveDefinite(RealMatrix m) {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        final RealMatrix eigenvalues = dec.getD();\n        for (int i = 0; i < m.getRowDimension(); i++) {\n            if (eigenvalues.getEntry(i, i) <= 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static RealMatrix invSqrt(final RealMatrix m) {\n        final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n        final RealMatrix s = svd.getS();\n        for (int i = 0; i < s.getRowDimension(); i++) {\n            s.setEntry(i, i, 1 / Math.sqrt(s.getEntry(i, i)));\n        }\n        return svd.getU().multiply(s).multiply(svd.getVT());\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..803ece4c5 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,47 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+   private RealMatrix squareRoot(RealMatrix m) {\n+        if (!isPositiveDefinite(m)) {\n+            throw new IllegalArgumentException(\"Matrix not positive definite.\");\n+        }\n+\n+        final int n = m.getRowDimension();\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        final RealMatrix eigenvalues = dec.getD();\n+        final RealMatrix eigenvectors = dec.getV();\n+\n+        for (int i = 0; i < n; i++) {\n+            if (eigenvalues.getEntry(i, i) < 0) {\n+                eigenvalues.setEntry(i, i, 0);\n+            } else {\n+                eigenvalues.setEntry(i, i, Math.sqrt(eigenvalues.getEntry(i, i)));\n+            }\n+        }\n+\n+        final RealMatrix sqrtOfEigenvalues = eigenvectors.multiply(eigenvalues).multiply(eigenvectors.transpose());\n+        final RealMatrix sqrtM = invSqrt(sqrtOfEigenvalues);\n+        final RealMatrix result = sqrtM.multiply(eigenvectors).multiply(m).multiply(eigenvectors.transpose()).multiply(sqrtM);\n+        return result;\n+    }\n+\n+    private static boolean isPositiveDefinite(RealMatrix m) {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        final RealMatrix eigenvalues = dec.getD();\n+        for (int i = 0; i < m.getRowDimension(); i++) {\n+            if (eigenvalues.getEntry(i, i) <= 0) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private static RealMatrix invSqrt(final RealMatrix m) {\n+        final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n+        final RealMatrix s = svd.getS();\n+        for (int i = 0; i < s.getRowDimension(); i++) {\n+            s.setEntry(i, i, 1 / Math.sqrt(s.getEntry(i, i)));\n+        }\n+        return svd.getU().multiply(s).multiply(svd.getVT());\n     }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}