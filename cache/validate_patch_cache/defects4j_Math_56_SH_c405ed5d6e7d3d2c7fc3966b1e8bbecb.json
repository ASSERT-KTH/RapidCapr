{
    "patch": "    public int[] getCounts(int index) {\n        if (index < 0 || index > uniCounterTotal - 1) {\n            throw new OutOfRangeException(index, 0, uniCounterTotal - 1);\n        }\n\n        final int[] indices = new int[dimension];\n\n        int count = 0, i = 1, idx = 0;\n        while (true) {\n            if (count + i > index)\n                break;\n            count += i;\n            idx++;\n            i++;\n        }\n        indices[dimension - 1] = index - count;\n        for (i = dimension - 2; i >= 0; i--) {\n            indices[i] = indices[i + 1] / (dimension - i);\n            if (i == dimension - 2)\n                indices[i] %= dimension - i - 1;\n            for (int j = i + 1; j < dimension; j++) {\n                if (j == dimension - 1)\n                    indices[i] += indices[j] * (dimension - 1 - i);\n                else\n                    indices[i] += indices[j] * (dimension - i - 1);\n            }\n        }\n        return indices;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..183f6396e 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,35 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n+    public int[] getCounts(int index) {\n+        if (index < 0 || index > uniCounterTotal - 1) {\n+            throw new OutOfRangeException(index, 0, uniCounterTotal - 1);\n+        }\n+\n+        final int[] indices = new int[dimension];\n+\n+        int count = 0, i = 1, idx = 0;\n+        while (true) {\n+            if (count + i > index)\n+                break;\n+            count += i;\n+            idx++;\n+            i++;\n         }\n-        --idx;\n-        indices[last] = idx;\n+        indices[dimension - 1] = index - count;\n+        for (i = dimension - 2; i >= 0; i--) {\n+            indices[i] = indices[i + 1] / (dimension - i);\n+            if (i == dimension - 2)\n+                indices[i] %= dimension - i - 1;\n+            for (int j = i + 1; j < dimension; j++) {\n+                if (j == dimension - 1)\n+                    indices[i] += indices[j] * (dimension - 1 - i);\n+                else\n+                    indices[i] += indices[j] * (dimension - i - 1);\n+            }\n+        }\n+        return indices;\n+    }\n \n         return indices;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}