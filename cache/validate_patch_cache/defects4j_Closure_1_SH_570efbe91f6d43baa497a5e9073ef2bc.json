{
    "patch": "    \n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n    \n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    \n    if (!modifyCallers) {\n      ArrayList<Node> unusedArgs = Lists.newArrayList();\n      for (Node arg : argList.children()) {\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          unusedArgs.add(arg);\n        } else if (!unusedArgs.isEmpty()) {\n          for (Node unusedArg : unusedArgs) {\n            argList.removeChild(unusedArg);\n            compiler.reportCodeChange();\n          }\n          unusedArgs.clear();\n        }\n      }\n      // We need to remove the unused arguments at the end\n      // in case they were interleaved with used arguments\n      if (!unusedArgs.isEmpty()) {\n        for (Node unusedArg : unusedArgs) {\n          argList.removeChild(unusedArg);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..01665f2b 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,35 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    \n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+    \n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    \n+    if (!modifyCallers) {\n+      ArrayList<Node> unusedArgs = Lists.newArrayList();\n+      for (Node arg : argList.children()) {\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          unusedArgs.add(arg);\n+        } else if (!unusedArgs.isEmpty()) {\n+          for (Node unusedArg : unusedArgs) {\n+            argList.removeChild(unusedArg);\n+            compiler.reportCodeChange();\n+          }\n+          unusedArgs.clear();\n+        }\n+      }\n+      // We need to remove the unused arguments at the end\n+      // in case they were interleaved with used arguments\n+      if (!unusedArgs.isEmpty()) {\n+        for (Node unusedArg : unusedArgs) {\n+          argList.removeChild(unusedArg);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}