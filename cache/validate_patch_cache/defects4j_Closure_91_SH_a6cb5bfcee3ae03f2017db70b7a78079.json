{
    "patch": ">>> [ INFILL ] <<<\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n        if (NodeUtil.isFunctionExpression(rhs)) {\n          Node funcNode = NodeUtil.getEnclosingFunction(rhs);\n          if (isLendToNonObjectLiteralPrototype(lhs, rhs)) {\n            disableCheck(\n                t.report(funcNode, JSError.make(JSC_USED_GLOBAL_THIS)));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..2ec1fd2c 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,26 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+>>> [ INFILL ] <<<\n+      } else {\n+        // Only traverse the right side if it's not an assignment to a prototype\n+        // property or subproperty.\n+        if (NodeUtil.isGet(lhs)) {\n+          if (lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.GETPROP &&\n+              llhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n+        if (NodeUtil.isFunctionExpression(rhs)) {\n+          Node funcNode = NodeUtil.getEnclosingFunction(rhs);\n+          if (isLendToNonObjectLiteralPrototype(lhs, rhs)) {\n+            disableCheck(\n+                t.report(funcNode, JSError.make(JSC_USED_GLOBAL_THIS)));\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}