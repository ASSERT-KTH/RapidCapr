{
    "patch": "  /**\n   * Returns whether a given reference to a singleton instance is safe\n   * to inline into a given call to a singleton getter method.\n   * In general, it is safe to inline if the call site is resolved to the same\n   * singleton instance as the reference, or if the call site has a side effect\n   * (such as creating the singleton instance).\n   */\n  private boolean canInlineIntoSingleton(String singletonClassName,\n      Reference reference) {\n    List<Reference> callSites = reference.getReferences();\n    for (Reference callSite : callSites) {\n      // Ignore references that are not calls.\n      if (!callSite.getParent().isCall()) {\n        continue;\n      }\n      Node callNode = callSite.getNode();\n      // Ignore calls to different singleton getter methods.\n      String callMethodName =\n          compiler.getCodingConvention().getSingletonGetterMethodName(callNode);\n      if (!callMethodName.equals(singletonClassName)) {\n        continue;\n      }\n      Node callTarget = callNode.getFirstChild();\n      // Ignore unresolved function calls.\n      if (!callTarget.isFunction()) {\n        continue;\n      }\n      // Ignore calls through a prototype property.\n      if (NodeUtil.isObjectPrototypeProperty(callTarget)) {\n        continue;\n      }\n      // Ignore calls to closures.\n      if (callTarget.getJSType() != null &&\n          callTarget.getJSType().isFunctionType() &&\n          !callTarget.getJSType().isConstructor()) {\n        continue;\n      }\n      // Ignore indirect calls.\n      if (!callTarget.isQualifiedName()) {\n        continue;\n      }\n      // Check whether the call site and reference resolve to the same\n      // singleton instance.\n      Node targetObj = compiler.findUniqueDefNode(callTarget.getQualifiedName());\n      Node refObj = compiler.findUniqueDefNode(reference.getNode().getQualifiedName());\n      if (targetObj == null || refObj == null) {\n        continue;\n      }\n      // Ignore calls that do not resolve to the same singleton instance.\n      if (targetObj != refObj) {\n        continue;\n      }\n      // Otherwise, it is safe to inline into this call site.\n      return true;\n    }\n    // If we haven't found a suitable call site by now, it's not safe to inline.\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..f2371b85 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,64 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+  /**\n+   * Returns whether a given reference to a singleton instance is safe\n+   * to inline into a given call to a singleton getter method.\n+   * In general, it is safe to inline if the call site is resolved to the same\n+   * singleton instance as the reference, or if the call site has a side effect\n+   * (such as creating the singleton instance).\n+   */\n+  private boolean canInlineIntoSingleton(String singletonClassName,\n+      Reference reference) {\n+    List<Reference> callSites = reference.getReferences();\n+    for (Reference callSite : callSites) {\n+      // Ignore references that are not calls.\n+      if (!callSite.getParent().isCall()) {\n+        continue;\n+      }\n+      Node callNode = callSite.getNode();\n+      // Ignore calls to different singleton getter methods.\n+      String callMethodName =\n+          compiler.getCodingConvention().getSingletonGetterMethodName(callNode);\n+      if (!callMethodName.equals(singletonClassName)) {\n+        continue;\n+      }\n+      Node callTarget = callNode.getFirstChild();\n+      // Ignore unresolved function calls.\n+      if (!callTarget.isFunction()) {\n+        continue;\n+      }\n+      // Ignore calls through a prototype property.\n+      if (NodeUtil.isObjectPrototypeProperty(callTarget)) {\n+        continue;\n+      }\n+      // Ignore calls to closures.\n+      if (callTarget.getJSType() != null &&\n+          callTarget.getJSType().isFunctionType() &&\n+          !callTarget.getJSType().isConstructor()) {\n+        continue;\n+      }\n+      // Ignore indirect calls.\n+      if (!callTarget.isQualifiedName()) {\n+        continue;\n+      }\n+      // Check whether the call site and reference resolve to the same\n+      // singleton instance.\n+      Node targetObj = compiler.findUniqueDefNode(callTarget.getQualifiedName());\n+      Node refObj = compiler.findUniqueDefNode(reference.getNode().getQualifiedName());\n+      if (targetObj == null || refObj == null) {\n+        continue;\n+      }\n+      // Ignore calls that do not resolve to the same singleton instance.\n+      if (targetObj != refObj) {\n+        continue;\n+      }\n+      // Otherwise, it is safe to inline into this call site.\n+      return true;\n+    }\n+    // If we haven't found a suitable call site by now, it's not safe to inline.\n+    return false;\n+  }\n         }\n       }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}