{
    "patch": "private String getRemainingJSDocLine() {\n    String result = stream.getRemainingJSDocLine();\n    if (result == null) {\n        throw new IllegalStateException(\"Failed to get remaining JSDoc line\", new Throwable(\"Null value returned from Stream.getRemainingJSDocLine()\"));\n    }\n\n    // Check if the JSDoc line ends with \"*/\" and remove it if it does.\n    if (result.endsWith(\"*/\")) {\n        result = result.substring(0, result.length() - 2);\n    }\n\n    // Trim the JSDoc line.\n    result = result.trim();\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..86abbaea 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,22 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n+private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+    if (result == null) {\n+        throw new IllegalStateException(\"Failed to get remaining JSDoc line\", new Throwable(\"Null value returned from Stream.getRemainingJSDocLine()\"));\n+    }\n+\n+    // Check if the JSDoc line ends with \"*/\" and remove it if it does.\n+    if (result.endsWith(\"*/\")) {\n+        result = result.substring(0, result.length() - 2);\n+    }\n+\n+    // Trim the JSDoc line.\n+    result = result.trim();\n+\n     return result;\n-  }\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "junit.framework.ComparisonFailure: expected:<Another[ ]function.> but was:<Another[]function.>",
    "test_result": "FAIL"
}