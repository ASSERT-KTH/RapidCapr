{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    if (index < seqEnd && input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n        boolean foundSemicolon = false;\n        boolean isHex = false;\n        int start = index + 2;\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n        }\n        int end = start;\n        while (end < seqEnd) {\n            char currentChar = input.charAt(end);\n            if (currentChar == ';') {\n                foundSemicolon = true;\n                break;\n            }\n            if (isHex && !Character.isDigit(currentChar) && (currentChar < 'a' || currentChar > 'f') && (currentChar < 'A' || currentChar > 'F')) {\n                break;\n            }\n            if (!isHex && !Character.isDigit(currentChar)) {\n                break;\n            }\n            end++;\n        }\n        if (foundSemicolon) {\n            String decimalValue = (isHex) ? Integer.parseInt(input.subSequence(start, end).toString(), 16) + \"\" : input.subSequence(start, end).toString();\n            out.write(Integer.parseInt(decimalValue));\n            return end - index + 1; // Return the length of the matched entity including the semicolon\n        }\n    }\n\n    return 0; // Return 0 if no entity was matched.\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..d22dd5e7 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,39 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n-\n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-\n-                // Check there's more than just an x after the &#\n-            }\n-\n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n+    if (index < seqEnd && input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n+        boolean foundSemicolon = false;\n+        boolean isHex = false;\n+        int start = index + 2;\n+        char firstChar = input.charAt(start);\n+        if (firstChar == 'x' || firstChar == 'X') {\n+            start++;\n+            isHex = true;\n+        }\n+        int end = start;\n+        while (end < seqEnd) {\n+            char currentChar = input.charAt(end);\n+            if (currentChar == ';') {\n+                foundSemicolon = true;\n+                break;\n             }\n-\n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n+            if (isHex && !Character.isDigit(currentChar) && (currentChar < 'a' || currentChar > 'f') && (currentChar < 'A' || currentChar > 'F')) {\n+                break;\n             }\n-\n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n-            } else {\n-                out.write(entityValue);\n+            if (!isHex && !Character.isDigit(currentChar)) {\n+                break;\n             }\n-\n-\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+            end++;\n+        }\n+        if (foundSemicolon) {\n+            String decimalValue = (isHex) ? Integer.parseInt(input.subSequence(start, end).toString(), 16) + \"\" : input.subSequence(start, end).toString();\n+            out.write(Integer.parseInt(decimalValue));\n+            return end - index + 1; // Return the length of the matched entity including the semicolon\n         }\n-        return 0;\n     }\n+\n+    return 0; // Return 0 if no entity was matched.\n+}\n }",
    "result_reason": "java.lang.NumberFormatException: For input string: \"\"",
    "test_result": "FAIL"
}