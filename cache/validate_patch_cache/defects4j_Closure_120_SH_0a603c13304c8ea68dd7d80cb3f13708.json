{
    "patch": "        if (block.isFunction && block != ref.getBasicBlock().getParent()) { // check if the assignment is in a nested function which is not the parent of the function of the assignment.\n            return false;\n        } else if (block.isLoop) {\n            return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..57398eba 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,10 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction && block != ref.getBasicBlock().getParent()) { // check if the assignment is in a nested function which is not the parent of the function of the assignment.\n+            return false;\n+        } else if (block.isLoop) {\n+            return false;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}