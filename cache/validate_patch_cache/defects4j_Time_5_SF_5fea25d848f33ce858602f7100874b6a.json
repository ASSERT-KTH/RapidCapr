{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n    int hours = getHours();\n    int minutes = getMinutes();\n    int seconds = getSeconds();\n    int millis = getMillis();\n\n    // calculate total number of days\n    int totalDays = weeks * 7 + days;\n\n    // calculate total number of months\n    int totalMonths = years * 12 + months;\n\n    // calculate total number of millis\n    long totalMillis = ((long) totalDays) * ((long) DateTimeConstants.MILLIS_PER_DAY)\n            + ((long) hours) * ((long) DateTimeConstants.MILLIS_PER_HOUR)\n            + ((long) minutes) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)\n            + ((long) seconds) * ((long) DateTimeConstants.MILLIS_PER_SECOND)\n            + ((long) millis);\n\n    // calculate the number of weeks and days after removing full weeks\n    int remainingDays = totalDays % 7;\n    int remainingWeeks = totalDays / 7;\n    int normalizedWeeks = remainingWeeks;\n    long normalizedMillis = totalMillis;\n\n    // if there are more than 6 remaining days, add a full week\n    if (remainingDays > 6) {\n        normalizedWeeks++;\n        remainingDays -= 7;\n    }\n\n    // calculate the number of months from the normalized weeks and days\n    int totalMonthsFromDays = (remainingDays == 0) ? 0 : ((remainingDays - 1) / 30) + 1;\n    int totalMonthsFromWeeks = normalizedWeeks * 4;\n    int totalMonthsFromMillis = (int) ((normalizedMillis / ((long) DateTimeConstants.MILLIS_PER_DAY * 30)) + 0.5);\n    int totalMonthsFromTotal = totalMonths + totalMonthsFromDays + totalMonthsFromWeeks + totalMonthsFromMillis;\n\n    // calculate the amount of time to subtract to get to the normalized period\n    PeriodType subtractType = type.withYears(false).withMonths(false).withWeeks(false);\n    Period subtractPeriod = new Period(totalMillis, subtractType, ISOChronology.getInstanceUTC())\n            .withYears(0)\n            .withMonths(0)\n            .withWeeks(0)\n            .plusDays(remainingDays)\n            .plus(totalMonthsFromDays, PeriodType.months())\n            .plusWeeks(normalizedWeeks);\n\n    // create the normalized period by subtracting the calculated amount of time\n    Period result = new Period(totalMillis, type, ISOChronology.getInstanceUTC())\n            .withYears(0)\n            .withMonths(0)\n            .withWeeks(0)\n            .plus(totalMonthsFromTotal, PeriodType.months())\n            .minus(subtractPeriod);\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..23ffe850 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,67 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    int years = getYears();\n+    int months = getMonths();\n+    int weeks = getWeeks();\n+    int days = getDays();\n+    int hours = getHours();\n+    int minutes = getMinutes();\n+    int seconds = getSeconds();\n+    int millis = getMillis();\n+\n+    // calculate total number of days\n+    int totalDays = weeks * 7 + days;\n+\n+    // calculate total number of months\n+    int totalMonths = years * 12 + months;\n+\n+    // calculate total number of millis\n+    long totalMillis = ((long) totalDays) * ((long) DateTimeConstants.MILLIS_PER_DAY)\n+            + ((long) hours) * ((long) DateTimeConstants.MILLIS_PER_HOUR)\n+            + ((long) minutes) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)\n+            + ((long) seconds) * ((long) DateTimeConstants.MILLIS_PER_SECOND)\n+            + ((long) millis);\n+\n+    // calculate the number of weeks and days after removing full weeks\n+    int remainingDays = totalDays % 7;\n+    int remainingWeeks = totalDays / 7;\n+    int normalizedWeeks = remainingWeeks;\n+    long normalizedMillis = totalMillis;\n+\n+    // if there are more than 6 remaining days, add a full week\n+    if (remainingDays > 6) {\n+        normalizedWeeks++;\n+        remainingDays -= 7;\n+    }\n+\n+    // calculate the number of months from the normalized weeks and days\n+    int totalMonthsFromDays = (remainingDays == 0) ? 0 : ((remainingDays - 1) / 30) + 1;\n+    int totalMonthsFromWeeks = normalizedWeeks * 4;\n+    int totalMonthsFromMillis = (int) ((normalizedMillis / ((long) DateTimeConstants.MILLIS_PER_DAY * 30)) + 0.5);\n+    int totalMonthsFromTotal = totalMonths + totalMonthsFromDays + totalMonthsFromWeeks + totalMonthsFromMillis;\n+\n+    // calculate the amount of time to subtract to get to the normalized period\n+    PeriodType subtractType = type.withYears(false).withMonths(false).withWeeks(false);\n+    Period subtractPeriod = new Period(totalMillis, subtractType, ISOChronology.getInstanceUTC())\n+            .withYears(0)\n+            .withMonths(0)\n+            .withWeeks(0)\n+            .plusDays(remainingDays)\n+            .plus(totalMonthsFromDays, PeriodType.months())\n+            .plusWeeks(normalizedWeeks);\n+\n+    // create the normalized period by subtracting the calculated amount of time\n+    Period result = new Period(totalMillis, type, ISOChronology.getInstanceUTC())\n+            .withYears(0)\n+            .withMonths(0)\n+            .withWeeks(0)\n+            .plus(totalMonthsFromTotal, PeriodType.months())\n+            .minus(subtractPeriod);\n+\n+    return result;\n+}\n \n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}