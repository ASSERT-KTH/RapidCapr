{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + 1.0) {\n        return 1.0 - regularizedGammaQImpl(a, x, Double.MIN_VALUE, 100000);\n    } else {\n        return regularizedGammaPPooled(a, x);\n    }\n}\n\nprivate static double regularizedGammaPPooled(double a, double x) {\n    final double factor = Math.pow(x / Math.E, a);\n    double sum = 1.0 / a;\n    double term = sum;\n\n    for (int i = 1; i <= 100000; i++) {\n        term *= x / (a + i);\n        sum += term;\n        if (Math.abs(term) < Math.abs(sum) * 10e-15) {\n            return sum * factor;\n        }\n    }\n\n    throw new ArithmeticException(\"Max Iterations Reached\");\n}\n\nprivate static double regularizedGammaQImpl(double a, double x, double epsilon, int maxIterations) {\n    /*\n     * The implementation is based on the following formula\n     * Gamma(a,x) = gamma(a) * [1 - Gamma_P(a,x)] + x^a * exp(-x) * Sum_{n=0}^{inf}{(x^k / (a)_k)}\n     * where (a)_k is Pochhammer's symbol, equivalent to a(a+1)(a+2)...(a+k-1)\n     */\n    final double small = 1e-50;\n    final double big = 1e50;\n\n    double result = 0;\n    double term = 1 / a;\n    double sum = term;\n    for (int i = 1; i <= maxIterations; i++) {\n        double temp = term * Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a + i));\n        result += temp;\n        sum += temp;\n\n        if (Math.abs(temp) < 10e-15 * sum) {\n            return result;\n        }\n\n        term *= x / (a + i);\n        if (term < small) {\n            term *= big;\n            result *= big;\n        }\n        if (term > big) {\n            term *= small;\n            result *= small;\n        }\n    }\n\n    throw new ArithmeticException(\"Failed to converge within max iterations\");\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..873c443fe 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,70 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + 1.0) {\n+        return 1.0 - regularizedGammaQImpl(a, x, Double.MIN_VALUE, 100000);\n+    } else {\n+        return regularizedGammaPPooled(a, x);\n+    }\n+}\n+\n+private static double regularizedGammaPPooled(double a, double x) {\n+    final double factor = Math.pow(x / Math.E, a);\n+    double sum = 1.0 / a;\n+    double term = sum;\n+\n+    for (int i = 1; i <= 100000; i++) {\n+        term *= x / (a + i);\n+        sum += term;\n+        if (Math.abs(term) < Math.abs(sum) * 10e-15) {\n+            return sum * factor;\n+        }\n+    }\n+\n+    throw new ArithmeticException(\"Max Iterations Reached\");\n+}\n+\n+private static double regularizedGammaQImpl(double a, double x, double epsilon, int maxIterations) {\n+    /*\n+     * The implementation is based on the following formula\n+     * Gamma(a,x) = gamma(a) * [1 - Gamma_P(a,x)] + x^a * exp(-x) * Sum_{n=0}^{inf}{(x^k / (a)_k)}\n+     * where (a)_k is Pochhammer's symbol, equivalent to a(a+1)(a+2)...(a+k-1)\n+     */\n+    final double small = 1e-50;\n+    final double big = 1e50;\n+\n+    double result = 0;\n+    double term = 1 / a;\n+    double sum = term;\n+    for (int i = 1; i <= maxIterations; i++) {\n+        double temp = term * Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a + i));\n+        result += temp;\n+        sum += temp;\n+\n+        if (Math.abs(temp) < 10e-15 * sum) {\n+            return result;\n+        }\n+\n+        term *= x / (a + i);\n+        if (term < small) {\n+            term *= big;\n+            result *= big;\n+        }\n+        if (term > big) {\n+            term *= small;\n+            result *= small;\n+        }\n+    }\n+\n+    throw new ArithmeticException(\"Failed to converge within max iterations\");\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}