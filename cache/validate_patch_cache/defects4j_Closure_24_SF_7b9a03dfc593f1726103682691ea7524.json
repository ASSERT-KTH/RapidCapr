{
    "patch": "private void findAliases(NodeTraversal t) {\n    Scope topScope = t.getScope();\n    for (Scope scope : topScope.getNestedScopes()) {\n        if (!scope.isDeclared(\"goog\")) {\n            continue;\n        }\n\n        Node googVarNode = scope.getVar(\"goog\").getNode();\n        if (!googVarNode.getParent().isExprResult()) {\n            continue;\n        }\n\n        Node googScopeCallNode = googVarNode.getParent().getFirstChild();\n        if (!isGoogScopeCall(googScopeCallNode)) {\n            continue;\n        }\n\n        if (!googScopeCallNode.getLastChild().isFunction()) {\n            continue;\n        }\n\n        for (Var v : scope.getVarIterable()) {\n            Node n = v.getNode();\n            if (n == null || !n.getParent().isVar()) {\n                continue;\n            }\n            Node initializer = v.getInitialValue();\n            if (initializer == null || !initializer.isQualifiedName()) {\n                continue;\n            }\n            String name = v.getName();\n            Var aliasVar = topScope.getVar(name);\n            // Only add an alias if the variable comes from an enclosing scope.\n            if (aliasVar != null && aliasVar.getScope() != scope) {\n                aliases.put(name, aliasVar);\n                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n                transformation.addAlias(name, qualifiedName);\n            }\n        }\n    }\n}\n\nprivate boolean isGoogScopeCall(Node n) {\n    return n != null &&\n            n.isCall() &&\n            n.getFirstChild().matchesQualifiedName(\"goog.scope\") &&\n            n.getLastChild().isFunction();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..8084a92c 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,54 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+private void findAliases(NodeTraversal t) {\n+    Scope topScope = t.getScope();\n+    for (Scope scope : topScope.getNestedScopes()) {\n+        if (!scope.isDeclared(\"goog\")) {\n+            continue;\n         }\n+\n+        Node googVarNode = scope.getVar(\"goog\").getNode();\n+        if (!googVarNode.getParent().isExprResult()) {\n+            continue;\n+        }\n+\n+        Node googScopeCallNode = googVarNode.getParent().getFirstChild();\n+        if (!isGoogScopeCall(googScopeCallNode)) {\n+            continue;\n+        }\n+\n+        if (!googScopeCallNode.getLastChild().isFunction()) {\n+            continue;\n+        }\n+\n+        for (Var v : scope.getVarIterable()) {\n+            Node n = v.getNode();\n+            if (n == null || !n.getParent().isVar()) {\n+                continue;\n+            }\n+            Node initializer = v.getInitialValue();\n+            if (initializer == null || !initializer.isQualifiedName()) {\n+                continue;\n+            }\n+            String name = v.getName();\n+            Var aliasVar = topScope.getVar(name);\n+            // Only add an alias if the variable comes from an enclosing scope.\n+            if (aliasVar != null && aliasVar.getScope() != scope) {\n+                aliases.put(name, aliasVar);\n+                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+                transformation.addAlias(name, qualifiedName);\n+            }\n         }\n-      }\n     }\n+}\n+\n+private boolean isGoogScopeCall(Node n) {\n+    return n != null &&\n+            n.isCall() &&\n+            n.getFirstChild().matchesQualifiedName(\"goog.scope\") &&\n+            n.getLastChild().isFunction();\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}