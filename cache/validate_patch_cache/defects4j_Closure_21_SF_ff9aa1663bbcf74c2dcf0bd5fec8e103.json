{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n.isEmpty()) {\n    // Do not flag empty nodes.\n    return;\n  }\n\n  if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n    // Do not flag qualified names with JSDoc.\n    return;\n  }\n\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n\n  // Traverse into function calls to verify if arguments are used or not.\n  if (n.isCall() || n.isNew()) {\n    for (Node arg : n.getSecondChild().children()) {\n      if (!arg.isUnreachable()) {\n        visit(t, arg, n);\n      }\n    }\n  }\n\n  boolean shouldFlag = false;\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n\n  if (parent != null) {\n    int parentType = parent.getType();\n    if (parentType == Token.COMMA) {\n      if (isResultUsed) {\n        // Do not flag nodes whose result is used in a comma expression.\n        return;\n      }\n      if (n == parent.getLastChild()) {\n        // Do not flag nodes that are direct or indirect children of\n        // a block or expression result.\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA) {\n            continue;\n          }\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {\n            // Stop looking for ancestor blocks.\n            return;\n          }\n        }\n      }\n      // Do not flag non-last nodes in comma expressions.\n      return;\n    } else if (parentType == Token.PARAM_LIST || parentType == Token.CATCH) {\n      // Do not flag nodes that are parameter names.\n      return;\n    } else if (n.isFunction()) {\n      // Do not flag functions.\n      return;\n    } else if (parentType == Token.VAR && parent.getFirstChild() != n) {\n      // Do not flag variable declarations if not first child.\n      return;\n    } else if (parentType == Token.FUNCTION && parent.getParent().isCall()) {\n      // Do not flag nodes inside called functions.\n      return;\n    } else if (!NodeUtil.isStatement(n)) {\n      // Do not flag nodes whose parent is a statement.\n      return;\n    }\n  }\n\n  if (isResultUsed && n.isCall() && !isSimpleOp) {\n    // If a result is used in a function call, do not flag if it is a simple operator.\n    Node fn = n.getFirstChild();\n    if (fn.isQualifiedName()) {\n      FunctionType functionType = fn.getJSType().toMaybeFunctionType();\n      if (functionType != null) {\n        Node paramList = n.getSecondChild();\n        int paramCount = functionType.getParametersCount();\n        NodeUtil.ArgumentAccumulator accum = new NodeUtil.ArgumentAccumulator();\n        if (paramCount > 0 && paramList.hasChildren()) {\n          NodeUtil.visitPreOrder(paramList, accum);\n        }\n        for (int i = 0; i < paramCount; i++) {\n          JSType parameterType = functionType.getParameterType(i);\n          if (!parameterType.isUnknownType() && accum.getArgumentForParameter(i) == null) {\n            shouldFlag = true;\n            break;\n          }\n        }\n      }\n    }\n  } else if (isSimpleOp) {\n    // Flag simple operators whose result is not used.\n    shouldFlag = !isResultUsed;\n  } else if (!NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n    // Flag nodes whose result has no side effects.\n    shouldFlag = true;\n  }\n\n  if (shouldFlag) {\n    String msg;\n    if (n.isString()) {\n      // Flag strings that are not concatenated.\n      msg = \"Is there a missing '+' on the previous line?\";\n    } else if (n.isName() && n.getString().matches(\"^[A-Z_]*$\")) {\n      // Flag UPPERCASE global names.\n      msg = \"UPPERCASE_VARIABLE_NAMES should only be used for constants. Is there a bug?\";\n    } else if (isSimpleOp) {\n      msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() + \"' operator is not being used.\";\n    } else {\n      msg = \"This code lacks side-effects. Is there a bug?\";\n    }\n\n    t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n\n    if (!NodeUtil.isStatement(n)) {\n      // Keep track of non-statement nodes that were flagged.\n      problemNodes.add(n);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..6c014cf9 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,72 +81,124 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n-      return;\n-    }\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n.isEmpty()) {\n+    // Do not flag empty nodes.\n+    return;\n+  }\n \n-    if (parent == null) {\n-      return;\n-    }\n+  if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n+    // Do not flag qualified names with JSDoc.\n+    return;\n+  }\n \n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult()) {\n-      return;\n-    }\n+  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n-      return;\n+  // Traverse into function calls to verify if arguments are used or not.\n+  if (n.isCall() || n.isNew()) {\n+    for (Node arg : n.getSecondChild().children()) {\n+      if (!arg.isUnreachable()) {\n+        visit(t, arg, n);\n+      }\n     }\n+  }\n+\n+  boolean shouldFlag = false;\n+  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n \n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (parent.getType() == Token.COMMA) {\n+  if (parent != null) {\n+    int parentType = parent.getType();\n+    if (parentType == Token.COMMA) {\n       if (isResultUsed) {\n+        // Do not flag nodes whose result is used in a comma expression.\n         return;\n       }\n       if (n == parent.getLastChild()) {\n+        // Do not flag nodes that are direct or indirect children of\n+        // a block or expression result.\n         for (Node an : parent.getAncestors()) {\n           int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n+          if (ancestorType == Token.COMMA) {\n+            continue;\n+          }\n+          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {\n+            // Stop looking for ancestor blocks.\n+            return;\n+          }\n         }\n       }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n-        return;\n-      }\n+      // Do not flag non-last nodes in comma expressions.\n+      return;\n+    } else if (parentType == Token.PARAM_LIST || parentType == Token.CATCH) {\n+      // Do not flag nodes that are parameter names.\n+      return;\n+    } else if (n.isFunction()) {\n+      // Do not flag functions.\n+      return;\n+    } else if (parentType == Token.VAR && parent.getFirstChild() != n) {\n+      // Do not flag variable declarations if not first child.\n+      return;\n+    } else if (parentType == Token.FUNCTION && parent.getParent().isCall()) {\n+      // Do not flag nodes inside called functions.\n+      return;\n+    } else if (!NodeUtil.isStatement(n)) {\n+      // Do not flag nodes whose parent is a statement.\n+      return;\n     }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n-      }\n+  }\n \n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n+  if (isResultUsed && n.isCall() && !isSimpleOp) {\n+    // If a result is used in a function call, do not flag if it is a simple operator.\n+    Node fn = n.getFirstChild();\n+    if (fn.isQualifiedName()) {\n+      FunctionType functionType = fn.getJSType().toMaybeFunctionType();\n+      if (functionType != null) {\n+        Node paramList = n.getSecondChild();\n+        int paramCount = functionType.getParametersCount();\n+        NodeUtil.ArgumentAccumulator accum = new NodeUtil.ArgumentAccumulator();\n+        if (paramCount > 0 && paramList.hasChildren()) {\n+          NodeUtil.visitPreOrder(paramList, accum);\n+        }\n+        for (int i = 0; i < paramCount; i++) {\n+          JSType parameterType = functionType.getParameterType(i);\n+          if (!parameterType.isUnknownType() && accum.getArgumentForParameter(i) == null) {\n+            shouldFlag = true;\n+            break;\n+          }\n+        }\n       }\n     }\n+  } else if (isSimpleOp) {\n+    // Flag simple operators whose result is not used.\n+    shouldFlag = !isResultUsed;\n+  } else if (!NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n+    // Flag nodes whose result has no side effects.\n+    shouldFlag = true;\n   }\n \n+  if (shouldFlag) {\n+    String msg;\n+    if (n.isString()) {\n+      // Flag strings that are not concatenated.\n+      msg = \"Is there a missing '+' on the previous line?\";\n+    } else if (n.isName() && n.getString().matches(\"^[A-Z_]*$\")) {\n+      // Flag UPPERCASE global names.\n+      msg = \"UPPERCASE_VARIABLE_NAMES should only be used for constants. Is there a bug?\";\n+    } else if (isSimpleOp) {\n+      msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() + \"' operator is not being used.\";\n+    } else {\n+      msg = \"This code lacks side-effects. Is there a bug?\";\n+    }\n+\n+    t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n+\n+    if (!NodeUtil.isStatement(n)) {\n+      // Keep track of non-statement nodes that were flagged.\n+      problemNodes.add(n);\n+    }\n+  }\n+}\n+\n   /**\n    * Protect side-effect free nodes by making them parameters\n    * to a extern function call.  This call will be removed",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}