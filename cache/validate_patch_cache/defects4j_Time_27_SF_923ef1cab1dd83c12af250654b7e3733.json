{
    "patch": "    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n        if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        }\n        int size = elementPairs.size();\n        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n            StringBuilder sb = new StringBuilder();\n            PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser).withLocale(Locale.ROOT);\n            Separator sep = (Separator) elementPairs.get(0);\n            PeriodPrinter p = sep.finish(f.getPrinter(), null);\n            PeriodParser pp = sep.finish(null, f.getParser());\n            if (p != null) {\n              sb.append(p.printedPeriod()).append(f.getPrinter().getUnknownFields());\n            }\n            String printed = sb.toString();\n            if (pp == null) {\n              return new PeriodFormatter(new SimplePeriodPrinter(printed), null);\n            } else {\n              return new PeriodFormatter(null, new SimplePeriodParser(printed, pp));\n            }\n        }\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..8bf19244 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -797,10 +797,20 @@ public class PeriodFormatterBuilder {\n         }\n         int size = elementPairs.size();\n         if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+            StringBuilder sb = new StringBuilder();\n+            PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser).withLocale(Locale.ROOT);\n             Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+            PeriodPrinter p = sep.finish(f.getPrinter(), null);\n+            PeriodParser pp = sep.finish(null, f.getParser());\n+            if (p != null) {\n+              sb.append(p.printedPeriod()).append(f.getPrinter().getUnknownFields());\n+            }\n+            String printed = sb.toString();\n+            if (pp == null) {\n+              return new PeriodFormatter(new SimplePeriodPrinter(printed), null);\n+            } else {\n+              return new PeriodFormatter(null, new SimplePeriodParser(printed, pp));\n+            }\n         }\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}