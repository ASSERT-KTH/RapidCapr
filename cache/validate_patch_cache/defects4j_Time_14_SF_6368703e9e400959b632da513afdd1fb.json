{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        boolean isLeapYear = DateTimeUtils.isContiguousISO(partial);\n        int year = partial.get(DateTimeFieldType.year());\n        int monthOfYear = partial.get(DateTimeFieldType.monthOfYear());\n\n        int newMonthOfYear = (monthOfYear - 1 + valueToAdd) % 12 + 1;\n        int monthOverflow = (monthOfYear - 1 + valueToAdd) / 12;\n\n        int newYear = year + monthOverflow;\n\n        int newDayOfMonth = partial.get(DateTimeFieldType.dayOfMonth());\n        if (!isLeapYear && DateTimeUtils.isLeapYear(newYear) && newDayOfMonth > 28) {\n            newDayOfMonth = 28;\n        }\n\n        int maxDayOfMonth = DateTimeUtils.getDaysInMonthMax(newYear, newMonthOfYear);\n        if (newDayOfMonth > maxDayOfMonth) {\n            newDayOfMonth = maxDayOfMonth;\n        }\n\n        int[] result = {newYear, newMonthOfYear, newDayOfMonth};\n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n\nprivate static int getDaysInMonthMax(int year, int month) {\n    switch (month) {\n        case 1:\n            return 31;\n        case 3:\n            return 31;\n        case 4:\n            return 30;\n        case 5:\n            return 31;\n        case 6:\n            return 30;\n        case 7:\n            return 31;\n        case 8:\n            return 31;\n        case 9:\n            return 30;\n        case 10:\n            return 31;\n        case 11:\n            return 30;\n        case 12:\n            return 31;\n        case 2:\n            if (isLeapYear(year)) {\n                return 29;\n            } else {\n                return 28;\n            }\n        default:\n            throw new IllegalArgumentException(\"Invalid month: \" + month);\n    }\n}\n\nprivate static boolean isLeapYear(int year) {\n    return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..de04aa0a 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,78 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        boolean isLeapYear = DateTimeUtils.isContiguousISO(partial);\n+        int year = partial.get(DateTimeFieldType.year());\n+        int monthOfYear = partial.get(DateTimeFieldType.monthOfYear());\n+\n+        int newMonthOfYear = (monthOfYear - 1 + valueToAdd) % 12 + 1;\n+        int monthOverflow = (monthOfYear - 1 + valueToAdd) / 12;\n+\n+        int newYear = year + monthOverflow;\n+\n+        int newDayOfMonth = partial.get(DateTimeFieldType.dayOfMonth());\n+        if (!isLeapYear && DateTimeUtils.isLeapYear(newYear) && newDayOfMonth > 28) {\n+            newDayOfMonth = 28;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+\n+        int maxDayOfMonth = DateTimeUtils.getDaysInMonthMax(newYear, newMonthOfYear);\n+        if (newDayOfMonth > maxDayOfMonth) {\n+            newDayOfMonth = maxDayOfMonth;\n         }\n+\n+        int[] result = {newYear, newMonthOfYear, newDayOfMonth};\n+        return result;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n+\n+private static int getDaysInMonthMax(int year, int month) {\n+    switch (month) {\n+        case 1:\n+            return 31;\n+        case 3:\n+            return 31;\n+        case 4:\n+            return 30;\n+        case 5:\n+            return 31;\n+        case 6:\n+            return 30;\n+        case 7:\n+            return 31;\n+        case 8:\n+            return 31;\n+        case 9:\n+            return 30;\n+        case 10:\n+            return 31;\n+        case 11:\n+            return 30;\n+        case 12:\n+            return 31;\n+        case 2:\n+            if (isLeapYear(year)) {\n+                return 29;\n+            } else {\n+                return 28;\n+            }\n+        default:\n+            throw new IllegalArgumentException(\"Invalid month: \" + month);\n+    }\n+}\n+\n+private static boolean isLeapYear(int year) {\n+    return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}