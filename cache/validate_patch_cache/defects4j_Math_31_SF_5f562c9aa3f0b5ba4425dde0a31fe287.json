{
    "patch": "public double evaluate(double x, double epsilon, int maxIterations) {\n    if (Double.isNaN(x) || Double.isInfinite(x)) {\n        throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n    }\n\n    double fprev = getA(0, x);\n    if (Double.isInfinite(fprev)) {\n        throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n    }\n\n    double deltaNPrev = 0;\n    double deltaN = getA(1, x) / fprev;\n\n    for (int n = 1; n < maxIterations; n++) {\n        // Update continued fraction\n        double an = getA(n+1, x);\n        double bn = getB(n+1, x);\n\n        double fn = an + bn * deltaN;\n        if (Double.isNaN(fn) || Double.isInfinite(fn)) {\n            // Continued fraction diverges\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n        }\n        double cn = an / fn;\n        double dn = bn / fn;\n\n        // Update the numerator and denominator\n        double numerator = cn * fprev + dn;\n        double denominator = cn / deltaNPrev + dn;\n        deltaNPrev = deltaN;\n        deltaN = numerator / denominator;\n\n        if (Double.isNaN(deltaN) || Double.isInfinite(deltaN)) {\n            // Continued fraction diverges\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n        }\n\n        if (FastMath.abs(deltaN - deltaNPrev) <= epsilon * FastMath.abs(deltaN)) {\n            // Converged\n            return fprev + deltaN;\n        } else if (n == maxIterations - 1) {\n            // Failed to converge\n            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                                maxIterations, x);\n        }\n\n        // Prepare for next iteration\n        deltaNPrev = deltaN;\n        fprev = fn;\n    }\n    // Should never get here\n    throw new RuntimeException(\"Failed to converge to a continued fraction value\");\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex b881bb2d7..434ba8a7b 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -120,82 +120,58 @@ public abstract class ContinuedFraction {\n      * @return the value of the continued fraction evaluated at x.\n      * @throws ConvergenceException if the algorithm fails to converge.\n      */\n-    public double evaluate(double x, double epsilon, int maxIterations) {\n-        final double small = 1e-50;\n-        double hPrev = getA(0, x);\n+public double evaluate(double x, double epsilon, int maxIterations) {\n+    if (Double.isNaN(x) || Double.isInfinite(x)) {\n+        throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+    }\n \n-        // use the value of small as epsilon criteria for zero checks\n-        if (Precision.equals(hPrev, 0.0, small)) {\n-            hPrev = small;\n-        }\n+    double fprev = getA(0, x);\n+    if (Double.isInfinite(fprev)) {\n+        throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+    }\n+\n+    double deltaNPrev = 0;\n+    double deltaN = getA(1, x) / fprev;\n \n-        int n = 1;\n-        double dPrev = 0.0;\n-        double p0 = 1.0;\n-        double q1 = 1.0;\n-        double cPrev = hPrev;\n-        double hN = hPrev;\n-\n-        while (n < maxIterations) {\n-            final double a = getA(n, x);\n-            final double b = getB(n, x);\n-\n-            double cN = a * hPrev + b * p0;\n-            double q2 = a * q1 + b * dPrev;\n-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n-                double scaleFactor = 1d;\n-                double lastScaleFactor = 1d;\n-                final int maxPower = 5;\n-                final double scale = FastMath.max(a,b);\n-                if (scale <= 0) {  // Can't scale\n-                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n-                }\n-                for (int i = 0; i < maxPower; i++) {\n-                    lastScaleFactor = scaleFactor;\n-                    scaleFactor *= scale;\n-                    if (a != 0.0 && a > b) {\n-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n-                    } else if (b != 0) {\n-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n-                    }\n-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n-                        break;\n-                    }\n-                }\n-            }\n-\n-            final double deltaN = cN / q2 / cPrev;\n-            hN = cPrev * deltaN;\n-\n-            if (Double.isInfinite(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n-                                               x);\n-            }\n-            if (Double.isNaN(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n-                                               x);\n-            }\n-\n-            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n-                break;\n-            }\n-\n-            dPrev = q1;\n-            cPrev = cN / q2;\n-            p0 = hPrev;\n-            hPrev = cN;\n-            q1 = q2;\n-            n++;\n+    for (int n = 1; n < maxIterations; n++) {\n+        // Update continued fraction\n+        double an = getA(n+1, x);\n+        double bn = getB(n+1, x);\n+\n+        double fn = an + bn * deltaN;\n+        if (Double.isNaN(fn) || Double.isInfinite(fn)) {\n+            // Continued fraction diverges\n+            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+        }\n+        double cn = an / fn;\n+        double dn = bn / fn;\n+\n+        // Update the numerator and denominator\n+        double numerator = cn * fprev + dn;\n+        double denominator = cn / deltaNPrev + dn;\n+        deltaNPrev = deltaN;\n+        deltaN = numerator / denominator;\n+\n+        if (Double.isNaN(deltaN) || Double.isInfinite(deltaN)) {\n+            // Continued fraction diverges\n+            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n         }\n \n-        if (n >= maxIterations) {\n+        if (FastMath.abs(deltaN - deltaNPrev) <= epsilon * FastMath.abs(deltaN)) {\n+            // Converged\n+            return fprev + deltaN;\n+        } else if (n == maxIterations - 1) {\n+            // Failed to converge\n             throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                                 maxIterations, x);\n         }\n \n-        return hN;\n+        // Prepare for next iteration\n+        deltaNPrev = deltaN;\n+        fprev = fn;\n     }\n+    // Should never get here\n+    throw new RuntimeException(\"Failed to converge to a continued fraction value\");\n+}\n \n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.4063850939> but was:<0.4148531734539197>",
    "test_result": "FAIL"
}