{
    "patch": "@Override\npublic ReturnValue execute(Class<?> returnType, Object... args) {\n    if (returnType.equals(Iterable.class)) {\n        return new ReturnValue(Collections.emptyList());\n    } \n    if (returnType.equals(boolean.class) || returnType.equals(Boolean.class)) {\n        return new ReturnValue(false);\n    } \n    if (returnType.equals(int.class) || returnType.equals(Integer.class)) {\n        return new ReturnValue(0);\n    }\n    if (returnType.equals(long.class) || returnType.equals(Long.class)) {\n        return new ReturnValue(0L);\n    }\n    if (returnType.equals(double.class) || returnType.equals(Double.class)) {\n        return new ReturnValue(0.0);\n    }\n    if (returnType.equals(float.class) || returnType.equals(Float.class)) {\n        return new ReturnValue(0.0f);\n    }\n    if (returnType.equals(short.class) || returnType.equals(Short.class)) {\n        return new ReturnValue((short) 0);\n    }\n    if (returnType.equals(byte.class) || returnType.equals(Byte.class)) {\n        return new ReturnValue((byte) 0);\n    }\n    if (returnType.equals(char.class) || returnType.equals(Character.class)) {\n        return new ReturnValue('\\u0000');\n    }\n    throw new UnsupportedOperationException(\"Unsupported return type: \" + returnType);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}