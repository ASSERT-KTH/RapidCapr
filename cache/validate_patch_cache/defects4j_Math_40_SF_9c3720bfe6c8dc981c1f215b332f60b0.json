{
    "patch": "protected double doSolve() {\n    final double min = getMin();\n    final double max = getMax();\n    final double startValue = getStartValue();\n\n    verifySequence(min, startValue, max);\n\n    double x0 = min;\n    double x1 = startValue;\n    double x2 = max;\n    double y0 = computeObjectiveValue(x0);\n    double y1 = computeObjectiveValue(x1);\n    double y2 = computeObjectiveValue(x2);\n\n    double oldDelta = Double.POSITIVE_INFINITY;\n    while (true) {\n        final double delta = x1 - x0;\n        final double a = (y2 - y1) / (x2 - x1) - (y1 - y0) / (x1 - x0);\n        final double b = (y1 - y0) / (x1 - x0) - delta * a;\n\n        if (Double.isNaN(a) || Double.isInfinite(a) ||\n            Double.isNaN(b) || Double.isInfinite(b)) {\n            throw new ConvergenceException(LocalizedFormats.SIMPLE_MESSAGE,\n                                           \"algorithm failed to converge\");\n        }\n\n        final double vertex = -b / (2 * a);\n        final double y = computeObjectiveValue(vertex);\n        if (Math.abs(vertex - x1) < relativeAccuracy * Math.max(Math.abs(x1), Math.abs(vertex)) + absoluteAccuracy) {\n            switch (getAllowedSolutions()) {\n            case ANY_SIDE:\n                return vertex;\n            case LEFT_SIDE:\n                if (y * y1 <= 0) {\n                    return vertex;\n                }\n                break;\n            case RIGHT_SIDE:\n                if (y * y2 <= 0) {\n                    return vertex;\n                }\n                break;\n            case BELOW_SIDE:\n                if (y <= 0) {\n                    return vertex;\n                }\n                break;\n            case ABOVE_SIDE:\n                if (y >= 0) {\n                    return vertex;\n                }\n                break;\n            default:\n                throw new MathInternalError(\n                    LocalizedFormats.INVALID_ALLOWED_SOLUTION,\n                    getAllowedSolutions());\n            }\n        }\n\n        final boolean tight;\n        if ((a * (x0 - vertex) + b) * (a * (x2 - vertex) + b) < 0) {\n            // Outside of range - bisection\n            tight = false;\n        } else if (Math.abs(a * delta * delta) > Math.abs(oldDelta)) {\n            // large curvature - bisection\n            tight = false;\n        } else {\n            // In range, and previous iteration was not divergent - tight\n            tight = true;\n        }\n\n        if (tight) {\n            if (y * y1 <= 0) {\n                x2 = vertex;\n                y2 = y;\n            } else {\n                x0 = vertex;\n                y0 = y;\n            }\n            oldDelta = delta;\n            x1 = vertex;\n            y1 = y;\n        } else {\n            // Choose which side of the bracket to bisect\n            final double dx;\n            final double dy;\n            final double d2y;\n            if (vertex < x1) {\n                dx = x1 - vertex;\n                dy = y1 - y;\n                d2y = y - 2 * y1 + y0;\n            } else {\n                dx = vertex - x1;\n                dy = y - y1;\n                d2y = y2 - 2 * y1 + y;\n            }\n            if (dx < 0) {\n                // Floating-point always rounds down, so nextafter is used to ensure that\n                // the bisection boundary is greater than the current number.\n                if (x1 == Double.MAX_VALUE) {\n                    // Cannot go higher\n                    throw new ConvergenceException(LocalizedFormats.SIMPLE_MESSAGE,\n                            \"cannot go higher\");\n                }\n                x1 = Math.nextAfter(x1, Double.POSITIVE_INFINITY);\n            } else {\n                x1 += 0.5 * dx;\n                y1 = computeObjectiveValue(x1);\n                oldDelta = delta;\n                if (Double.isNaN(y1)) {\n                    throw new ConvergenceException(LocalizedFormats.SIMPLE_MESSAGE,\n                            \"y1 NaN\");\n                } else if (Double.isNaN(y) || Double.isInfinite(y)) {\n                    throw new ConvergenceException(LocalizedFormats.SIMPLE_MESSAGE,\n                            String.format(\"y %s\", y));\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\nindex 93dd3bbdd..ef388731d 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\n@@ -140,209 +140,126 @@ public class BracketingNthOrderBrentSolver\n      * {@inheritDoc}\n      */\n     @Override\n-    protected double doSolve() {\n-\n-        // prepare arrays with the first points\n-        final double[] x = new double[maximalOrder + 1];\n-        final double[] y = new double[maximalOrder + 1];\n-        x[0] = getMin();\n-        x[1] = getStartValue();\n-        x[2] = getMax();\n-        verifySequence(x[0], x[1], x[2]);\n-\n-        // evaluate initial guess\n-        y[1] = computeObjectiveValue(x[1]);\n-        if (Precision.equals(y[1], 0.0, 1)) {\n-            // return the initial guess if it is a perfect root.\n-            return x[1];\n+protected double doSolve() {\n+    final double min = getMin();\n+    final double max = getMax();\n+    final double startValue = getStartValue();\n+\n+    verifySequence(min, startValue, max);\n+\n+    double x0 = min;\n+    double x1 = startValue;\n+    double x2 = max;\n+    double y0 = computeObjectiveValue(x0);\n+    double y1 = computeObjectiveValue(x1);\n+    double y2 = computeObjectiveValue(x2);\n+\n+    double oldDelta = Double.POSITIVE_INFINITY;\n+    while (true) {\n+        final double delta = x1 - x0;\n+        final double a = (y2 - y1) / (x2 - x1) - (y1 - y0) / (x1 - x0);\n+        final double b = (y1 - y0) / (x1 - x0) - delta * a;\n+\n+        if (Double.isNaN(a) || Double.isInfinite(a) ||\n+            Double.isNaN(b) || Double.isInfinite(b)) {\n+            throw new ConvergenceException(LocalizedFormats.SIMPLE_MESSAGE,\n+                                           \"algorithm failed to converge\");\n         }\n \n-        // evaluate first  endpoint\n-        y[0] = computeObjectiveValue(x[0]);\n-        if (Precision.equals(y[0], 0.0, 1)) {\n-            // return the first endpoint if it is a perfect root.\n-            return x[0];\n+        final double vertex = -b / (2 * a);\n+        final double y = computeObjectiveValue(vertex);\n+        if (Math.abs(vertex - x1) < relativeAccuracy * Math.max(Math.abs(x1), Math.abs(vertex)) + absoluteAccuracy) {\n+            switch (getAllowedSolutions()) {\n+            case ANY_SIDE:\n+                return vertex;\n+            case LEFT_SIDE:\n+                if (y * y1 <= 0) {\n+                    return vertex;\n+                }\n+                break;\n+            case RIGHT_SIDE:\n+                if (y * y2 <= 0) {\n+                    return vertex;\n+                }\n+                break;\n+            case BELOW_SIDE:\n+                if (y <= 0) {\n+                    return vertex;\n+                }\n+                break;\n+            case ABOVE_SIDE:\n+                if (y >= 0) {\n+                    return vertex;\n+                }\n+                break;\n+            default:\n+                throw new MathInternalError(\n+                    LocalizedFormats.INVALID_ALLOWED_SOLUTION,\n+                    getAllowedSolutions());\n+            }\n         }\n \n-        int nbPoints;\n-        int signChangeIndex;\n-        if (y[0] * y[1] < 0) {\n-\n-            // reduce interval if it brackets the root\n-            nbPoints        = 2;\n-            signChangeIndex = 1;\n-\n+        final boolean tight;\n+        if ((a * (x0 - vertex) + b) * (a * (x2 - vertex) + b) < 0) {\n+            // Outside of range - bisection\n+            tight = false;\n+        } else if (Math.abs(a * delta * delta) > Math.abs(oldDelta)) {\n+            // large curvature - bisection\n+            tight = false;\n         } else {\n-\n-            // evaluate second endpoint\n-            y[2] = computeObjectiveValue(x[2]);\n-            if (Precision.equals(y[2], 0.0, 1)) {\n-                // return the second endpoint if it is a perfect root.\n-                return x[2];\n-            }\n-\n-            if (y[1] * y[2] < 0) {\n-                // use all computed point as a start sampling array for solving\n-                nbPoints        = 3;\n-                signChangeIndex = 2;\n-            } else {\n-                throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n-            }\n-\n+            // In range, and previous iteration was not divergent - tight\n+            tight = true;\n         }\n \n-        // prepare a work array for inverse polynomial interpolation\n-        final double[] tmpX = new double[x.length];\n-\n-        // current tightest bracketing of the root\n-        double xA    = x[signChangeIndex - 1];\n-        double yA    = y[signChangeIndex - 1];\n-        double absYA = FastMath.abs(yA);\n-        int agingA   = 0;\n-        double xB    = x[signChangeIndex];\n-        double yB    = y[signChangeIndex];\n-        double absYB = FastMath.abs(yB);\n-        int agingB   = 0;\n-\n-        // search loop\n-        while (true) {\n-\n-            // check convergence of bracketing interval\n-            final double xTol = getAbsoluteAccuracy() +\n-                                getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n-            if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n-                switch (allowed) {\n-                case ANY_SIDE :\n-                    return absYA < absYB ? xA : xB;\n-                case LEFT_SIDE :\n-                    return xA;\n-                case RIGHT_SIDE :\n-                    return xB;\n-                case BELOW_SIDE :\n-                    return (yA <= 0) ? xA : xB;\n-                case ABOVE_SIDE :\n-                    return (yA <  0) ? xB : xA;\n-                default :\n-                    // this should never happen\n-                    throw new MathInternalError(null);\n-                }\n-            }\n-\n-            // target for the next evaluation point\n-            double targetY;\n-            if (agingA >= MAXIMAL_AGING) {\n-                // we keep updating the high bracket, try to compensate this\n-                targetY = -REDUCTION_FACTOR * yB;\n-            } else if (agingB >= MAXIMAL_AGING) {\n-                // we keep updating the low bracket, try to compensate this\n-                targetY = -REDUCTION_FACTOR * yA;\n+        if (tight) {\n+            if (y * y1 <= 0) {\n+                x2 = vertex;\n+                y2 = y;\n             } else {\n-                // bracketing is balanced, try to find the root itself\n-                targetY = 0;\n+                x0 = vertex;\n+                y0 = y;\n             }\n-\n-            // make a few attempts to guess a root,\n-            double nextX;\n-            int start = 0;\n-            int end   = nbPoints;\n-            do {\n-\n-                // guess a value for current target, using inverse polynomial interpolation\n-                System.arraycopy(x, start, tmpX, start, end - start);\n-                nextX = guessX(targetY, tmpX, y, start, end);\n-\n-                if (!((nextX > xA) && (nextX < xB))) {\n-                    // the guessed root is not strictly inside of the tightest bracketing interval\n-\n-                    // the guessed root is either not strictly inside the interval or it\n-                    // is a NaN (which occurs when some sampling points share the same y)\n-                    // we try again with a lower interpolation order\n-                    if (signChangeIndex - start >= end - signChangeIndex) {\n-                        // we have more points before the sign change, drop the lowest point\n-                        ++start;\n-                    } else {\n-                        // we have more points after sign change, drop the highest point\n-                        --end;\n-                    }\n-\n-                    // we need to do one more attempt\n-                    nextX = Double.NaN;\n-\n-                }\n-\n-            } while (Double.isNaN(nextX) && (end - start > 1));\n-\n-            if (Double.isNaN(nextX)) {\n-                // fall back to bisection\n-                nextX = xA + 0.5 * (xB - xA);\n-                start = signChangeIndex - 1;\n-                end   = signChangeIndex;\n-            }\n-\n-            // evaluate the function at the guessed root\n-            final double nextY = computeObjectiveValue(nextX);\n-            if (Precision.equals(nextY, 0.0, 1)) {\n-                // we have found an exact root, since it is not an approximation\n-                // we don't need to bother about the allowed solutions setting\n-                return nextX;\n+            oldDelta = delta;\n+            x1 = vertex;\n+            y1 = y;\n+        } else {\n+            // Choose which side of the bracket to bisect\n+            final double dx;\n+            final double dy;\n+            final double d2y;\n+            if (vertex < x1) {\n+                dx = x1 - vertex;\n+                dy = y1 - y;\n+                d2y = y - 2 * y1 + y0;\n+            } else {\n+                dx = vertex - x1;\n+                dy = y - y1;\n+                d2y = y2 - 2 * y1 + y;\n             }\n-\n-            if ((nbPoints > 2) && (end - start != nbPoints)) {\n-\n-                // we have been forced to ignore some points to keep bracketing,\n-                // they are probably too far from the root, drop them from now on\n-                nbPoints = end - start;\n-                System.arraycopy(x, start, x, 0, nbPoints);\n-                System.arraycopy(y, start, y, 0, nbPoints);\n-                signChangeIndex -= start;\n-\n-            } else  if (nbPoints == x.length) {\n-\n-                // we have to drop one point in order to insert the new one\n-                nbPoints--;\n-\n-                // keep the tightest bracketing interval as centered as possible\n-                if (signChangeIndex >= (x.length + 1) / 2) {\n-                    // we drop the lowest point, we have to shift the arrays and the index\n-                    System.arraycopy(x, 1, x, 0, nbPoints);\n-                    System.arraycopy(y, 1, y, 0, nbPoints);\n-                    --signChangeIndex;\n+            if (dx < 0) {\n+                // Floating-point always rounds down, so nextafter is used to ensure that\n+                // the bisection boundary is greater than the current number.\n+                if (x1 == Double.MAX_VALUE) {\n+                    // Cannot go higher\n+                    throw new ConvergenceException(LocalizedFormats.SIMPLE_MESSAGE,\n+                            \"cannot go higher\");\n                 }\n-\n-            }\n-\n-            // insert the last computed point\n-            //(by construction, we know it lies inside the tightest bracketing interval)\n-            System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n-            x[signChangeIndex] = nextX;\n-            System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n-            y[signChangeIndex] = nextY;\n-            ++nbPoints;\n-\n-            // update the bracketing interval\n-            if (nextY * yA <= 0) {\n-                // the sign change occurs before the inserted point\n-                xB = nextX;\n-                yB = nextY;\n-                absYB = FastMath.abs(yB);\n-                ++agingA;\n-                agingB = 0;\n+                x1 = Math.nextAfter(x1, Double.POSITIVE_INFINITY);\n             } else {\n-                // the sign change occurs after the inserted point\n-                xA = nextX;\n-                yA = nextY;\n-                absYA = FastMath.abs(yA);\n-                agingA = 0;\n-                ++agingB;\n-\n-                // update the sign change index\n-                signChangeIndex++;\n-\n+                x1 += 0.5 * dx;\n+                y1 = computeObjectiveValue(x1);\n+                oldDelta = delta;\n+                if (Double.isNaN(y1)) {\n+                    throw new ConvergenceException(LocalizedFormats.SIMPLE_MESSAGE,\n+                            \"y1 NaN\");\n+                } else if (Double.isNaN(y) || Double.isInfinite(y)) {\n+                    throw new ConvergenceException(LocalizedFormats.SIMPLE_MESSAGE,\n+                            String.format(\"y %s\", y));\n+                }\n             }\n-\n         }\n-\n     }\n+}\n \n     /** Guess an x value by n<sup>th</sup> order inverse polynomial interpolation.\n      * <p>",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}