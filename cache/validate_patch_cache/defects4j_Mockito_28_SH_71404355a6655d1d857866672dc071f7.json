{
    "patch": "```\nObject candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\nif (candidate == null) {\n    return; // no valid mock candidate found, return without injecting\n}\nif (field.getType().isAssignableFrom(candidate.getClass())) {\n    try {\n        field.set(fieldInstance, candidate);\n        mocks.remove(candidate);\n    } catch (IllegalAccessException e) {\n        throw new RuntimeException(\"Unable to inject mock candidate\", e);\n    }\n} else {\n    String message = String.format(\"Unable to inject mock candidate of type %s to field of type %s\", candidate.getClass().getSimpleName(), field.getType().getSimpleName());\n    throw new RuntimeException(message);\n}\n```",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..0e94e4b9e 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,26 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+```\n+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+if (candidate == null) {\n+    return; // no valid mock candidate found, return without injecting\n+}\n+if (field.getType().isAssignableFrom(candidate.getClass())) {\n+    try {\n+        field.set(fieldInstance, candidate);\n+        mocks.remove(candidate);\n+    } catch (IllegalAccessException e) {\n+        throw new RuntimeException(\"Unable to inject mock candidate\", e);\n+    }\n+} else {\n+    String message = String.format(\"Unable to inject mock candidate of type %s to field of type %s\", candidate.getClass().getSimpleName(), field.getType().getSimpleName());\n+    throw new RuntimeException(message);\n+}\n+```\n         }\n     }\n ",
    "result_reason": "error: illegal character: '`'",
    "test_result": "ERROR"
}