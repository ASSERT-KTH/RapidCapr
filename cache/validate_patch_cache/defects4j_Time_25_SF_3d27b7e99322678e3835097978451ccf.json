{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        int offsetLocal = getOffset(instantLocal);\n        // adjust instantLocal using the estimate and recalc the offset\n        final long instantAdjusted = instantLocal - offsetLocal;\n        int offsetAdjusted = getOffset(instantAdjusted);\n        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            // we need to ensure that time is always after the DST gap\n            // this happens naturally for positive offsets, but not for negative\n            if (offsetAdjusted < offsetLocal) {\n                // look for a previous transition for which the offset is less than the current offset\n                long prevTransition = previousTransition(instantLocal - offsetLocal);\n                while (prevTransition > instantAdjusted) {\n                    int prevOffset = getOffset(prevTransition);\n                    if (prevOffset < offsetLocal) {\n                        // found a previous transition where the offset is less than the current offset\n                        offsetAdjusted = prevOffset;\n                        break;\n                    } else if (prevOffset > offsetLocal) {\n                        // found a previous transition where the offset is greater than the current offset\n                        offsetLocal = prevOffset;\n                        break;\n                    } else {\n                        // the offset at this transition is the same as the current offset\n                        prevTransition = previousTransition(prevTransition - 1);\n                    }\n                }\n                if (prevTransition <= instantAdjusted) {\n                    // all transitions before instantAdjusted have been processed and no applicable transition was found\n                    offsetAdjusted = offsetLocal;\n                }\n            } else {\n                // look for a next transition for which the offset is greater than or equal to the current offset\n                long nextTransition = nextTransition(instantLocal - offsetLocal);\n                while (nextTransition <= instantAdjusted) {\n                    int nextOffset = getOffset(nextTransition);\n                    if (nextOffset >= offsetLocal) {\n                        // found a next transition where the offset is greater than or equal to the current offset\n                        offsetAdjusted = nextOffset;\n                        break;\n                    } else {\n                        // the offset at this transition is less than the current offset\n                        offsetLocal = nextOffset;\n                        nextTransition = nextTransition(nextTransition + 1);\n                    }\n                }\n                if (nextTransition > instantAdjusted) {\n                    // all transitions after instantAdjusted have been processed and no applicable transition was found\n                    offsetAdjusted = offsetLocal;\n                }\n            }\n        }\n        return offsetAdjusted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b780fa62 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -878,22 +878,54 @@ public abstract class DateTimeZone implements Serializable {\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n         // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n+        int offsetLocal = getOffset(instantLocal);\n         // adjust instantLocal using the estimate and recalc the offset\n         final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n+        int offsetAdjusted = getOffset(instantAdjusted);\n         // if the offsets differ, we must be near a DST boundary\n         if (offsetLocal != offsetAdjusted) {\n             // we need to ensure that time is always after the DST gap\n             // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+            if (offsetAdjusted < offsetLocal) {\n+                // look for a previous transition for which the offset is less than the current offset\n+                long prevTransition = previousTransition(instantLocal - offsetLocal);\n+                while (prevTransition > instantAdjusted) {\n+                    int prevOffset = getOffset(prevTransition);\n+                    if (prevOffset < offsetLocal) {\n+                        // found a previous transition where the offset is less than the current offset\n+                        offsetAdjusted = prevOffset;\n+                        break;\n+                    } else if (prevOffset > offsetLocal) {\n+                        // found a previous transition where the offset is greater than the current offset\n+                        offsetLocal = prevOffset;\n+                        break;\n+                    } else {\n+                        // the offset at this transition is the same as the current offset\n+                        prevTransition = previousTransition(prevTransition - 1);\n+                    }\n+                }\n+                if (prevTransition <= instantAdjusted) {\n+                    // all transitions before instantAdjusted have been processed and no applicable transition was found\n+                    offsetAdjusted = offsetLocal;\n+                }\n+            } else {\n+                // look for a next transition for which the offset is greater than or equal to the current offset\n+                long nextTransition = nextTransition(instantLocal - offsetLocal);\n+                while (nextTransition <= instantAdjusted) {\n+                    int nextOffset = getOffset(nextTransition);\n+                    if (nextOffset >= offsetLocal) {\n+                        // found a next transition where the offset is greater than or equal to the current offset\n+                        offsetAdjusted = nextOffset;\n+                        break;\n+                    } else {\n+                        // the offset at this transition is less than the current offset\n+                        offsetLocal = nextOffset;\n+                        nextTransition = nextTransition(nextTransition + 1);\n+                    }\n+                }\n+                if (nextTransition > instantAdjusted) {\n+                    // all transitions after instantAdjusted have been processed and no applicable transition was found\n+                    offsetAdjusted = offsetLocal;\n                 }\n             }\n         }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}