{
    "patch": "      if (block.isFunction || block.isGlobalScope) {\n        // If there is a function or global code in the reaching block, it may modify the variable too.\n        // For constant globals, modifying them is OK, since they're only assigned once.\n        return isGlobal() && getDeclaration() != null && getDeclaration().getNode().isDeclaredConst();\n      } else if (block.isLoop) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..49695d2a 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,11 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction || block.isGlobalScope) {\n+        // If there is a function or global code in the reaching block, it may modify the variable too.\n+        // For constant globals, modifying them is OK, since they're only assigned once.\n+        return isGlobal() && getDeclaration() != null && getDeclaration().getNode().isDeclaredConst();\n+      } else if (block.isLoop) {\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}