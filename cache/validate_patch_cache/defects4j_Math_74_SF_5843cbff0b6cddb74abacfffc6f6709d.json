{
    "patch": "public double integrate(final FirstOrderDifferentialEquations equations,\n                            double t0, final double[] y0,\n                            final double t, final double[] y)\n            throws DerivativeException, IntegratorException {\n\n        resetInternalState();\n\n        if (y != y0) {\n            System.arraycopy(y0, 0, y, 0, y0.length);\n        }\n\n        setEquations(equations);\n\n        double[] yDot = new double[y0.length];\n\n        boolean forward = t > t0;\n\n        // Create method specific arrays\n        double[][] yMidDots = new double[getStages()][y0.length];\n        double[] yTmp = new double[y0.length];\n        double[] yTmpDot = new double[y0.length];\n        double[] yTmpDot1 = new double[y0.length];\n\n        // Set up an interpolator sharing the integrator arrays\n        AbstractStepInterpolator interpolator;\n        if (requiresDenseOutput()) {\n            final RungeKuttaStepInterpolator rki = createInterpolator(forward, y, yDot, yMidDots, yTmp, yTmpDot);\n            interpolator = rki;\n        } else {\n            interpolator = new DummyStepInterpolator(y, forward);\n        }\n        interpolator.storeTime(t0);\n\n        // Compute initial error\n        final double[] scale;\n        if (vecAbsoluteTolerance == null) {\n            scale = new double[y0.length];\n            Arrays.fill(scale, scalAbsoluteTolerance);\n        } else {\n            scale = vecAbsoluteTolerance;\n        }\n        double error = initializeStep(equations, forward, getOrder(),\n                                       scale, t0, y, yDot, yTmp, yMidDots[0]);\n\n        // Initialize time step\n        double h = computeStepGrowShrinkFactor(error, hScale, forward, 1.0, 0.5);\n\n        double firstStep = true;\n\n        // Main integration loop.\n        double tLast = t0;\n        while (true) {\n\n            // Time step control\n            h = filterStep(h, forward, firstStep);\n            firstStep = false;\n\n            final double tNext = tLast + h;\n            if (forward ^ (tNext >= t)) {\n                h = t - tLast;\n                tNext = t;\n            }\n\n            computeDerivatives(tLast, y, yDot);\n\n            // Save start of step quantities\n            System.arraycopy(yDot, 0, yTmpDot1, 0, y0.length);\n\n            // First stage\n            for (int i = 0; i < y0.length; i++) {\n                yTmp[i] = y[i] + h * getC()[0] * yDot[i];\n            }\n            computeDerivatives(tLast + getC()[0] * h, yTmp, yMidDots[0]);\n\n            // Second stage\n            for (int j = 1; j < getStages(); ++j) {\n                for (int m = 0; m < y0.length; ++m) {\n                    yTmp[m] = y[m];\n                    for (int k = 0; k < j; ++k) {\n                        final double akj = getA()[j-1][k];\n                        if (akj != 0) {\n                            yTmp[m] = yTmp[m] + h * akj * yMidDots[k][m];\n                        }\n                    }\n                }\n                computeDerivatives(tLast + getC()[j] * h, yTmp, yMidDots[j]);\n            }\n\n            double maxError = 0;\n\n            // Estimation of the state at t + h\n            for (int i = 0; i < y0.length; i++) {\n                double yEst = y[i];\n                for (int j = 0; j < getStages(); ++j) {\n                    final double bjl =getB()[j] - getC()[j];\n                    if (bjl != 0) {\n                        yEst += h * bjl * yMidDots[j][i];\n                    }\n                }\n                yTmp[i] = yEst;\n            }\n\n            // Compute error\n            double[] yDot2 = null;\n            for (int i = 0; i < scale.length; ++i) {\n                final double tol = scale[i] + Math.abs(y[i]);\n                final double ratio;\n                if (yTmp[i] != 0 || y[i] != 0) {\n                    ratio = Math.abs((yTmp[i] - y[i]) / (yTmp[i] + y[i]));\n                } else {\n                    ratio = 0;\n                }\n                if (ratio > maxError) {\n                    maxError = ratio;\n                }\n                yDot2 = previousState == null ? null : previousState[i].getSecond();\n                double yDDot = yMidDots[getStages() - 1][i];\n                previousState = updateState(previousState, tLast, h,\n                        yDot2, yMidDots[getStages() - 2][i], yDot2,\n                        yTmpDot1[i], yDDot, yDot[i], yTmpDot[i]);\n                if ((error = maxError / tol) > 1.0) {\n                    break;\n                }\n            }\n\n            time = tLast + h;\n            if (error <= 1.0) {\n                // Suitable step\n                interpolator.storeTime(time);\n                if (previousState != null) {\n                    for (final StepHandler handler : stepHandlers) {\n                        handler.handleStep(interpolator, true);\n                    }\n                }\n                // Step accepted\n                System.arraycopy(yTmp, 0, y, 0, y0.length);\n                tLast = time;\n                lastStep = forward ^ (tLast >= t);\n                if (lastStep) {\n                    // Return the last computed value.\n                    return t;\n                }\n                // Save end of step quantities\n                System.arraycopy(yMidDots[getStages() - 1], 0, yDot, 0, y0.length);\n\n                // Adapt step size\n                final double nextH = computeStepGrowShrinkFactor(error, hScale, forward, h, 1.5);\n                final double factor = nextH / h;\n                for (int k = 0; k < y0.length; k++) {\n                    yMidDots[0][k] = factor * (yMidDots[0][k] - yDot[k]);\n                }\n                h = nextH;\n\n                interpolator.storeTime(tLast);\n                if (previousState != null) {\n                    for (final StepHandler handler : stepHandlers) {\n                        handler.handleStep(interpolator, false);\n                    }\n                }\n\n            } else {\n                // Reject step -> set new step time and step.\n                tLast = time;\n                h = computeStepGrowShrinkFactor(error, hScale, forward, h, 0.25);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 6f3e88358..465bb973e 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -189,174 +189,170 @@ public abstract class EmbeddedRungeKuttaIntegrator\n \n   /** {@inheritDoc} */\n   @Override\n-  public double integrate(final FirstOrderDifferentialEquations equations,\n-                          final double t0, final double[] y0,\n-                          final double t, final double[] y)\n-  throws DerivativeException, IntegratorException {\n-\n-    sanityChecks(equations, t0, y0, t, y);\n-    setEquations(equations);\n-    resetEvaluations();\n-    final boolean forward = t > t0;\n-\n-    // create some internal working arrays\n-    final int stages = c.length + 1;\n-    if (y != y0) {\n-      System.arraycopy(y0, 0, y, 0, y0.length);\n-    }\n-    final double[][] yDotK = new double[stages][y0.length];\n-    final double[] yTmp = new double[y0.length];\n-\n-    // set up an interpolator sharing the integrator arrays\n-    AbstractStepInterpolator interpolator;\n-    if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {\n-      final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n-      rki.reinitialize(this, yTmp, yDotK, forward);\n-      interpolator = rki;\n-    } else {\n-      interpolator = new DummyStepInterpolator(yTmp, forward);\n-    }\n-    interpolator.storeTime(t0);\n-\n-    // set up integration control objects\n-    stepStart         = t0;\n-    double  hNew      = 0;\n-    boolean firstTime = true;\n-    for (StepHandler handler : stepHandlers) {\n-        handler.reset();\n-    }\n-    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n-    boolean lastStep = false;\n-\n-    // main integration loop\n-    while (!lastStep) {\n-\n-      interpolator.shift();\n-\n-      double error = 0;\n-      for (boolean loop = true; loop;) {\n-\n-        if (firstTime || !fsal) {\n-          // first stage\n-          computeDerivatives(stepStart, y, yDotK[0]);\n-        }\n+public double integrate(final FirstOrderDifferentialEquations equations,\n+                            double t0, final double[] y0,\n+                            final double t, final double[] y)\n+            throws DerivativeException, IntegratorException {\n \n-        if (firstTime) {\n-          final double[] scale;\n-          if (vecAbsoluteTolerance == null) {\n-              scale = new double[y0.length];\n-              java.util.Arrays.fill(scale, scalAbsoluteTolerance);\n-            } else {\n-              scale = vecAbsoluteTolerance;\n-            }\n-          hNew = initializeStep(equations, forward, getOrder(), scale,\n-                                stepStart, y, yDotK[0], yTmp, yDotK[1]);\n-          firstTime = false;\n+        resetInternalState();\n+\n+        if (y != y0) {\n+            System.arraycopy(y0, 0, y, 0, y0.length);\n         }\n \n-        stepSize = hNew;\n+        setEquations(equations);\n \n-        // next stages\n-        for (int k = 1; k < stages; ++k) {\n+        double[] yDot = new double[y0.length];\n \n-          for (int j = 0; j < y0.length; ++j) {\n-            double sum = a[k-1][0] * yDotK[0][j];\n-            for (int l = 1; l < k; ++l) {\n-              sum += a[k-1][l] * yDotK[l][j];\n-            }\n-            yTmp[j] = y[j] + stepSize * sum;\n-          }\n+        boolean forward = t > t0;\n \n-          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n+        // Create method specific arrays\n+        double[][] yMidDots = new double[getStages()][y0.length];\n+        double[] yTmp = new double[y0.length];\n+        double[] yTmpDot = new double[y0.length];\n+        double[] yTmpDot1 = new double[y0.length];\n \n+        // Set up an interpolator sharing the integrator arrays\n+        AbstractStepInterpolator interpolator;\n+        if (requiresDenseOutput()) {\n+            final RungeKuttaStepInterpolator rki = createInterpolator(forward, y, yDot, yMidDots, yTmp, yTmpDot);\n+            interpolator = rki;\n+        } else {\n+            interpolator = new DummyStepInterpolator(y, forward);\n         }\n+        interpolator.storeTime(t0);\n \n-        // estimate the state at the end of the step\n-        for (int j = 0; j < y0.length; ++j) {\n-          double sum    = b[0] * yDotK[0][j];\n-          for (int l = 1; l < stages; ++l) {\n-            sum    += b[l] * yDotK[l][j];\n-          }\n-          yTmp[j] = y[j] + stepSize * sum;\n+        // Compute initial error\n+        final double[] scale;\n+        if (vecAbsoluteTolerance == null) {\n+            scale = new double[y0.length];\n+            Arrays.fill(scale, scalAbsoluteTolerance);\n+        } else {\n+            scale = vecAbsoluteTolerance;\n         }\n+        double error = initializeStep(equations, forward, getOrder(),\n+                                       scale, t0, y, yDot, yTmp, yMidDots[0]);\n \n-        // estimate the error at the end of the step\n-        error = estimateError(yDotK, y, yTmp, stepSize);\n-        if (error <= 1.0) {\n-\n-          // discrete events handling\n-          interpolator.storeTime(stepStart + stepSize);\n-          if (manager.evaluateStep(interpolator)) {\n-              final double dt = manager.getEventTime() - stepStart;\n-              if (Math.abs(dt) <= Math.ulp(stepStart)) {\n-                  // rejecting the step would lead to a too small next step, we accept it\n-                  loop = false;\n-              } else {\n-                  // reject the step to match exactly the next switch time\n-                  hNew = dt;\n-              }\n-          } else {\n-            // accept the step\n-            loop = false;\n-          }\n+        // Initialize time step\n+        double h = computeStepGrowShrinkFactor(error, hScale, forward, 1.0, 0.5);\n \n-        } else {\n-          // reject the step and attempt to reduce error by stepsize control\n-          final double factor =\n-              Math.min(maxGrowth,\n-                       Math.max(minReduction, safety * Math.pow(error, exp)));\n-          hNew = filterStep(stepSize * factor, forward, false);\n-        }\n+        double firstStep = true;\n \n-      }\n-\n-      // the step has been accepted\n-      final double nextStep = stepStart + stepSize;\n-      System.arraycopy(yTmp, 0, y, 0, y0.length);\n-      manager.stepAccepted(nextStep, y);\n-      lastStep = manager.stop();\n-\n-      // provide the step data to the step handler\n-      interpolator.storeTime(nextStep);\n-      for (StepHandler handler : stepHandlers) {\n-          handler.handleStep(interpolator, lastStep);\n-      }\n-      stepStart = nextStep;\n-\n-      if (fsal) {\n-        // save the last evaluation for the next step\n-        System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);\n-      }\n-\n-      if (manager.reset(stepStart, y) && ! lastStep) {\n-        // some event handler has triggered changes that\n-        // invalidate the derivatives, we need to recompute them\n-        computeDerivatives(stepStart, y, yDotK[0]);\n-      }\n-\n-      if (! lastStep) {\n-        // in some rare cases we may get here with stepSize = 0, for example\n-        // when an event occurs at integration start, reducing the first step\n-        // to zero; we have to reset the step to some safe non zero value\n-          stepSize = filterStep(stepSize, forward, true);\n-\n-        // stepsize control for next step\n-        final double factor = Math.min(maxGrowth,\n-                                       Math.max(minReduction,\n-                                                safety * Math.pow(error, exp)));\n-        final double  scaledH    = stepSize * factor;\n-        final double  nextT      = stepStart + scaledH;\n-        final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n-        hNew = filterStep(scaledH, forward, nextIsLast);\n-      }\n-\n-    }\n-\n-    final double stopTime = stepStart;\n-    resetInternalState();\n-    return stopTime;\n+        // Main integration loop.\n+        double tLast = t0;\n+        while (true) {\n \n-  }\n+            // Time step control\n+            h = filterStep(h, forward, firstStep);\n+            firstStep = false;\n+\n+            final double tNext = tLast + h;\n+            if (forward ^ (tNext >= t)) {\n+                h = t - tLast;\n+                tNext = t;\n+            }\n+\n+            computeDerivatives(tLast, y, yDot);\n+\n+            // Save start of step quantities\n+            System.arraycopy(yDot, 0, yTmpDot1, 0, y0.length);\n+\n+            // First stage\n+            for (int i = 0; i < y0.length; i++) {\n+                yTmp[i] = y[i] + h * getC()[0] * yDot[i];\n+            }\n+            computeDerivatives(tLast + getC()[0] * h, yTmp, yMidDots[0]);\n+\n+            // Second stage\n+            for (int j = 1; j < getStages(); ++j) {\n+                for (int m = 0; m < y0.length; ++m) {\n+                    yTmp[m] = y[m];\n+                    for (int k = 0; k < j; ++k) {\n+                        final double akj = getA()[j-1][k];\n+                        if (akj != 0) {\n+                            yTmp[m] = yTmp[m] + h * akj * yMidDots[k][m];\n+                        }\n+                    }\n+                }\n+                computeDerivatives(tLast + getC()[j] * h, yTmp, yMidDots[j]);\n+            }\n+\n+            double maxError = 0;\n+\n+            // Estimation of the state at t + h\n+            for (int i = 0; i < y0.length; i++) {\n+                double yEst = y[i];\n+                for (int j = 0; j < getStages(); ++j) {\n+                    final double bjl =getB()[j] - getC()[j];\n+                    if (bjl != 0) {\n+                        yEst += h * bjl * yMidDots[j][i];\n+                    }\n+                }\n+                yTmp[i] = yEst;\n+            }\n+\n+            // Compute error\n+            double[] yDot2 = null;\n+            for (int i = 0; i < scale.length; ++i) {\n+                final double tol = scale[i] + Math.abs(y[i]);\n+                final double ratio;\n+                if (yTmp[i] != 0 || y[i] != 0) {\n+                    ratio = Math.abs((yTmp[i] - y[i]) / (yTmp[i] + y[i]));\n+                } else {\n+                    ratio = 0;\n+                }\n+                if (ratio > maxError) {\n+                    maxError = ratio;\n+                }\n+                yDot2 = previousState == null ? null : previousState[i].getSecond();\n+                double yDDot = yMidDots[getStages() - 1][i];\n+                previousState = updateState(previousState, tLast, h,\n+                        yDot2, yMidDots[getStages() - 2][i], yDot2,\n+                        yTmpDot1[i], yDDot, yDot[i], yTmpDot[i]);\n+                if ((error = maxError / tol) > 1.0) {\n+                    break;\n+                }\n+            }\n+\n+            time = tLast + h;\n+            if (error <= 1.0) {\n+                // Suitable step\n+                interpolator.storeTime(time);\n+                if (previousState != null) {\n+                    for (final StepHandler handler : stepHandlers) {\n+                        handler.handleStep(interpolator, true);\n+                    }\n+                }\n+                // Step accepted\n+                System.arraycopy(yTmp, 0, y, 0, y0.length);\n+                tLast = time;\n+                lastStep = forward ^ (tLast >= t);\n+                if (lastStep) {\n+                    // Return the last computed value.\n+                    return t;\n+                }\n+                // Save end of step quantities\n+                System.arraycopy(yMidDots[getStages() - 1], 0, yDot, 0, y0.length);\n+\n+                // Adapt step size\n+                final double nextH = computeStepGrowShrinkFactor(error, hScale, forward, h, 1.5);\n+                final double factor = nextH / h;\n+                for (int k = 0; k < y0.length; k++) {\n+                    yMidDots[0][k] = factor * (yMidDots[0][k] - yDot[k]);\n+                }\n+                h = nextH;\n+\n+                interpolator.storeTime(tLast);\n+                if (previousState != null) {\n+                    for (final StepHandler handler : stepHandlers) {\n+                        handler.handleStep(interpolator, false);\n+                    }\n+                }\n+\n+            } else {\n+                // Reject step -> set new step time and step.\n+                tLast = time;\n+                h = computeStepGrowShrinkFactor(error, hScale, forward, h, 0.25);\n \n   /** Get the minimal reduction factor for stepsize control.\n    * @return minimal reduction factor",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}