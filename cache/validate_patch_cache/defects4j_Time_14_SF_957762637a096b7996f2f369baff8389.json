{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        int[] updatedValues = Arrays.copyOf(values, values.length);\n        updatedValues[fieldIndex] += valueToAdd;\n        try {\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, updatedValues[i]);\n            }\n            return iChronology.get(partial, instant);\n        } catch (IllegalFieldValueException e) {\n            // if the new value exceeds the maximum possible value for that field, try to \n            // adjust the date to the last day of the current month\n            LocalDate localDate = LocalDate.parse(partial.toString(), DateTimeFormat.forPattern(partial.toString(partial.getFormatter())));\n            LocalDate lastDayOfMonth = localDate.dayOfMonth().withMaximumValue();\n            int value = lastDayOfMonth.getDayOfMonth() - localDate.getDayOfMonth();\n            updatedValues[fieldIndex] = value;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, updatedValues[i]);\n            }\n            return iChronology.get(partial, instant);\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..4a05d3bd 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,38 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        int[] updatedValues = Arrays.copyOf(values, values.length);\n+        updatedValues[fieldIndex] += valueToAdd;\n+        try {\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                instant = partial.getFieldType(i).getField(iChronology).set(instant, updatedValues[i]);\n+            }\n+            return iChronology.get(partial, instant);\n+        } catch (IllegalFieldValueException e) {\n+            // if the new value exceeds the maximum possible value for that field, try to \n+            // adjust the date to the last day of the current month\n+            LocalDate localDate = LocalDate.parse(partial.toString(), DateTimeFormat.forPattern(partial.toString(partial.getFormatter())));\n+            LocalDate lastDayOfMonth = localDate.dayOfMonth().withMaximumValue();\n+            int value = lastDayOfMonth.getDayOfMonth() - localDate.getDayOfMonth();\n+            updatedValues[fieldIndex] = value;\n+            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+                instant = partial.getFieldType(i).getField(iChronology).set(instant, updatedValues[i]);\n             }\n-            instant = add(instant, valueToAdd);\n             return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}