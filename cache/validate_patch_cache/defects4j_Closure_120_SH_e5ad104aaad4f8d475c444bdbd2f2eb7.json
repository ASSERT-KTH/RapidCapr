{
    "patch": "      for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          break;\n        } else if (block.isLoop) {\n          return false;\n        }\n      }\n\n      // Count assignments.\n      int count = 0;\n      for (BasicBlock block = ref.getBasicBlock(); block != null;\n           block = block.getParent()) {\n        if (block.isFunction) {\n          break;\n        }\n        for (CfgBlock cfgBlock : block.getCfgBlocks()) {\n          for (Node node : cfgBlock.getNodes()) {\n            if (node.getType() == Token.ASSIGN) {\n              count++;\n              // Only one assignment is allowed.\n              if (count > 1) {\n                return false;\n              }\n            }\n          }\n        }\n      }\n\n      return count == 1;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..95d49775 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,37 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      for (BasicBlock block = ref.getBasicBlock();\n+           block != null; block = block.getParent()) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoop) {\n+          return false;\n+        }\n+      }\n+\n+      // Count assignments.\n+      int count = 0;\n+      for (BasicBlock block = ref.getBasicBlock(); block != null;\n+           block = block.getParent()) {\n+        if (block.isFunction) {\n+          break;\n+        }\n+        for (CfgBlock cfgBlock : block.getCfgBlocks()) {\n+          for (Node node : cfgBlock.getNodes()) {\n+            if (node.getType() == Token.ASSIGN) {\n+              count++;\n+              // Only one assignment is allowed.\n+              if (count > 1) {\n+                return false;\n+              }\n+            }\n+          }\n+        }\n+      }\n+\n+      return count == 1;\n+    }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}