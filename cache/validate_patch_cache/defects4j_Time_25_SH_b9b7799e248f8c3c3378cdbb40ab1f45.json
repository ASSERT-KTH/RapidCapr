{
    "patch": "            if (offsetLocal > offsetAdjusted) {\n                final long prevLocal = previousTransition(instantAdjusted - 1);\n                final long prevAdjusted = previousTransition(instantLocal - offsetAdjusted - 1);\n                if (prevLocal != prevAdjusted) {\n                    return offsetLocal;\n                }\n            } else {\n                final long nextLocal = nextTransition(instantAdjusted);\n                final int offsetNext = getOffset(nextLocal);\n                if (offsetLocal != offsetNext && offsetAdjusted == offsetNext) {\n                    return offsetLocal;\n                }\n            }\n\n            if (offsetLocal < 0 && offsetAdjusted == 0) {\n                final long prevLocal = previousTransition(instantAdjusted - 1);\n                final long prevAdjusted = previousTransition(instantLocal - offsetLocal - 1);\n                if (prevLocal != prevAdjusted) {",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..4460d2f0 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,24 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetLocal > offsetAdjusted) {\n+                final long prevLocal = previousTransition(instantAdjusted - 1);\n+                final long prevAdjusted = previousTransition(instantLocal - offsetAdjusted - 1);\n+                if (prevLocal != prevAdjusted) {\n+                    return offsetLocal;\n+                }\n+            } else {\n+                final long nextLocal = nextTransition(instantAdjusted);\n+                final int offsetNext = getOffset(nextLocal);\n+                if (offsetLocal != offsetNext && offsetAdjusted == offsetNext) {\n+                    return offsetLocal;\n+                }\n+            }\n+\n+            if (offsetLocal < 0 && offsetAdjusted == 0) {\n+                final long prevLocal = previousTransition(instantAdjusted - 1);\n+                final long prevAdjusted = previousTransition(instantLocal - offsetLocal - 1);\n+                if (prevLocal != prevAdjusted) {\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}