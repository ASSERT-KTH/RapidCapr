{
    "patch": "protected BasePeriod(long duration) {\n    super(duration);\n    iTotalMillis = FieldUtils.safeMultiply(getPeriodType().getMillisPerUnit(), duration);\n    iYears = iTotalMillis / (365L * DateTimeConstants.MILLIS_PER_DAY);\n    iTotalMillis -= iYears * (365L * DateTimeConstants.MILLIS_PER_DAY);\n    if (iYears != 0) {\n        duration = SetPeriodType.removeYears(duration, iYears);\n    }\n    iMonths = iTotalMillis / (30L * DateTimeConstants.MILLIS_PER_DAY);\n    iTotalMillis -= iMonths * (30L * DateTimeConstants.MILLIS_PER_DAY);\n    if (iMonths != 0) {\n        duration = SetPeriodType.removeMonths(duration, iMonths);\n    }\n\n    iWeeks = iTotalMillis / (7L * DateTimeConstants.MILLIS_PER_DAY);\n    iTotalMillis -= iWeeks * (7L * DateTimeConstants.MILLIS_PER_DAY);\n    iDays = iTotalMillis / DateTimeConstants.MILLIS_PER_DAY;\n    iTotalMillis -= iDays * DateTimeConstants.MILLIS_PER_DAY;\n    iHours = iTotalMillis / DateTimeConstants.MILLIS_PER_HOUR;\n    iTotalMillis -= iHours * DateTimeConstants.MILLIS_PER_HOUR;\n    iMinutes = iTotalMillis / DateTimeConstants.MILLIS_PER_MINUTE;\n    iTotalMillis -= iMinutes * DateTimeConstants.MILLIS_PER_MINUTE;\n    iSeconds = iTotalMillis / DateTimeConstants.MILLIS_PER_SECOND;\n    iMillis = iTotalMillis - iSeconds * DateTimeConstants.MILLIS_PER_SECOND;\n\n    setDerivedField(PeriodType.standard(), ISOChronology.getInstance());\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..ebc9b42a 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,33 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n-    }\n+protected BasePeriod(long duration) {\n+    super(duration);\n+    iTotalMillis = FieldUtils.safeMultiply(getPeriodType().getMillisPerUnit(), duration);\n+    iYears = iTotalMillis / (365L * DateTimeConstants.MILLIS_PER_DAY);\n+    iTotalMillis -= iYears * (365L * DateTimeConstants.MILLIS_PER_DAY);\n+    if (iYears != 0) {\n+        duration = SetPeriodType.removeYears(duration, iYears);\n+    }\n+    iMonths = iTotalMillis / (30L * DateTimeConstants.MILLIS_PER_DAY);\n+    iTotalMillis -= iMonths * (30L * DateTimeConstants.MILLIS_PER_DAY);\n+    if (iMonths != 0) {\n+        duration = SetPeriodType.removeMonths(duration, iMonths);\n+    }\n+\n+    iWeeks = iTotalMillis / (7L * DateTimeConstants.MILLIS_PER_DAY);\n+    iTotalMillis -= iWeeks * (7L * DateTimeConstants.MILLIS_PER_DAY);\n+    iDays = iTotalMillis / DateTimeConstants.MILLIS_PER_DAY;\n+    iTotalMillis -= iDays * DateTimeConstants.MILLIS_PER_DAY;\n+    iHours = iTotalMillis / DateTimeConstants.MILLIS_PER_HOUR;\n+    iTotalMillis -= iHours * DateTimeConstants.MILLIS_PER_HOUR;\n+    iMinutes = iTotalMillis / DateTimeConstants.MILLIS_PER_MINUTE;\n+    iTotalMillis -= iMinutes * DateTimeConstants.MILLIS_PER_MINUTE;\n+    iSeconds = iTotalMillis / DateTimeConstants.MILLIS_PER_SECOND;\n+    iMillis = iTotalMillis - iSeconds * DateTimeConstants.MILLIS_PER_SECOND;\n+\n+    setDerivedField(PeriodType.standard(), ISOChronology.getInstance());\n+}\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: constructor AbstractPeriod in class AbstractPeriod cannot be applied to given types;",
    "test_result": "ERROR"
}