{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        int monthFieldIndex = -1;\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n                monthFieldIndex = i;\n            }\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        if (monthFieldIndex != -1) {\n            int year = iChronology.year().get(instant);\n            int month = iChronology.monthOfYear().get(instant);\n            int day = iChronology.dayOfMonth().get(instant);\n            int maxDays = iChronology.monthOfYear().getMaximumValue(year);\n            if (day > maxDays) {\n                day = maxDays;\n            }\n            int[] newValues = Arrays.copyOf(values, values.length);\n            newValues[monthFieldIndex] += valueToAdd;\n            int carry = iChronology.monthOfYear().set(newValues[monthFieldIndex], month);\n            if (carry != 0) {\n                int newMaxDays = iChronology.monthOfYear().getMaximumValue(year, newValues[monthFieldIndex]);\n                if (day > newMaxDays) {\n                    day = newMaxDays;\n                }\n            }\n            int[] result = Arrays.copyOf(values, values.length);\n            result[monthFieldIndex] = newValues[monthFieldIndex];\n            result[fieldIndex] += valueToAdd % 2147483647;\n            if (result[fieldIndex] < 0) {\n                result[fieldIndex] += 2147483647;\n            }\n            return iChronology.dayOfMonth().set(result, day);\n        } else {\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..15b1c383 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,54 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        int monthFieldIndex = -1;\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n+                monthFieldIndex = i;\n+            }\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        if (monthFieldIndex != -1) {\n+            int year = iChronology.year().get(instant);\n+            int month = iChronology.monthOfYear().get(instant);\n+            int day = iChronology.dayOfMonth().get(instant);\n+            int maxDays = iChronology.monthOfYear().getMaximumValue(year);\n+            if (day > maxDays) {\n+                day = maxDays;\n+            }\n+            int[] newValues = Arrays.copyOf(values, values.length);\n+            newValues[monthFieldIndex] += valueToAdd;\n+            int carry = iChronology.monthOfYear().set(newValues[monthFieldIndex], month);\n+            if (carry != 0) {\n+                int newMaxDays = iChronology.monthOfYear().getMaximumValue(year, newValues[monthFieldIndex]);\n+                if (day > newMaxDays) {\n+                    day = newMaxDays;\n+                }\n+            }\n+            int[] result = Arrays.copyOf(values, values.length);\n+            result[monthFieldIndex] = newValues[monthFieldIndex];\n+            result[fieldIndex] += valueToAdd % 2147483647;\n+            if (result[fieldIndex] < 0) {\n+                result[fieldIndex] += 2147483647;\n             }\n+            return iChronology.dayOfMonth().set(result, day);\n+        } else {\n             instant = add(instant, valueToAdd);\n             return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}