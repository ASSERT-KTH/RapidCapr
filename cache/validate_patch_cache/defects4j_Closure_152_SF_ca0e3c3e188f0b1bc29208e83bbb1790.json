{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n    boolean changed = false;\n    ImmutableList.Builder<JSType> resolvedInterfaces = ImmutableList.builder();\n    for (JSType iface : implementedInterfaces) {\n      if (iface.isConstructor() || iface.isInterface()) {\n        ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n        resolvedInterfaces.add(resolvedIface);\n        changed |= (resolvedIface != iface);\n      } else {\n        resolvedInterfaces.add(iface);\n      }\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, subTypes.get(i).resolve(t, scope).autobox());\n      }\n    }\n    return super.resolveInternal(t, scope);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..b97477cf 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -859,35 +859,30 @@ public class FunctionType extends PrototypeObjectType {\n   }\n \n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n     setResolvedTypeInternal(this);\n-\n     call = (ArrowType) safeResolve(call, t, scope);\n     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n-\n-    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n-    // is handled further upstream.\n-    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n     typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n-\n     boolean changed = false;\n-    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n-        ImmutableList.builder();\n-    for (ObjectType iface : implementedInterfaces) {\n-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n-      resolvedInterfaces.add(resolvedIface);\n-      changed |= (resolvedIface != iface);\n+    ImmutableList.Builder<JSType> resolvedInterfaces = ImmutableList.builder();\n+    for (JSType iface : implementedInterfaces) {\n+      if (iface.isConstructor() || iface.isInterface()) {\n+        ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n+        resolvedInterfaces.add(resolvedIface);\n+        changed |= (resolvedIface != iface);\n+      } else {\n+        resolvedInterfaces.add(iface);\n+      }\n     }\n     if (changed) {\n       implementedInterfaces = resolvedInterfaces.build();\n     }\n-\n     if (subTypes != null) {\n       for (int i = 0; i < subTypes.size(); i++) {\n-        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n+        subTypes.set(i, subTypes.get(i).resolve(t, scope).autobox());\n       }\n     }\n-\n     return super.resolveInternal(t, scope);\n   }\n ",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}