{
    "patch": "public static double regularizedGammaFunction(double a, double x) {\n    double integrationLimit = 1000;\n    double delta = 1e-15;\n    if (x < 0.0 || a <= 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a+1) {\n        return 1 - regularizedIncompleteGammaFunction(a, x);\n    }\n    double s = regularizedIncompleteGammaFunction(a, x);\n    double c = Math.exp(-x + a * Math.log(x) - logGamma(a));\n    double sum = c * x / a;\n    double term = sum;\n    int i = 1;\n    while (Math.abs(term) > delta * Math.abs(sum) && i <= MAX_ITERATIONS) {\n        i++;\n        term *= (x + a - i) / a;\n        sum += term;\n    }\n    return sum * s;\n}\n\npublic static double regularizedIncompleteGammaFunction(double a, double x) {\n    double integrationLimit = 1000;\n    if (x < 0.0 || a <= 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    double xPower = Math.pow(x, a);\n    double term = xPower / a;\n    double sum = term;\n    for (int i = 1; i <= MAX_ITERATIONS; i++) {\n        term *= x / (a + i);\n        sum += term;\n        if (Math.abs(term) < Math.abs(sum) * TOLERANCE) {\n            return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n        }\n        if (x / (a + i) > integrationLimit) {\n            return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n        }\n    }\n    return Double.NaN;\n}\n\npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + Constants.EULER) - x + Constants.LN_SQRT_2_PI + 1.0 / (12.0 * x);\n    double series = 0.0;\n    double z = 1.0 / (x * x);\n    for (int i = 0; i < 8; i++) {\n        tmp += A[i] * z;\n        A[i] += B[i] / x;\n        z *= (1.0 / x);\n        series += A[i] * z;\n    }\n    return tmp + Math.log(series / x);\n}\n\nprivate static final double[] A = { 0.9999999999995183, 676.5203681218851, -1259.139216722289,\n        771.3234287757674, -176.6150291621406, 12.5073432786869, -0.13857109526572012, 9.984369578019571e-6,\n        1.5056327351493116e-7 };\n\nprivate static final double[] B = { -0.6423611111111112, -0.3571428571428571, 0.8333333333333333,\n        0.8518518518518519, -0.6122448979591837, 0.5595238095238095, -0.13333333333333333, 0.17321428571428573 };\nprivate static final int MAX_ITERATIONS = 1000;\nprivate static final double TOLERANCE = 10e-15;",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..6b5c4fe48 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,76 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaFunction(double a, double x) {\n+    double integrationLimit = 1000;\n+    double delta = 1e-15;\n+    if (x < 0.0 || a <= 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a+1) {\n+        return 1 - regularizedIncompleteGammaFunction(a, x);\n+    }\n+    double s = regularizedIncompleteGammaFunction(a, x);\n+    double c = Math.exp(-x + a * Math.log(x) - logGamma(a));\n+    double sum = c * x / a;\n+    double term = sum;\n+    int i = 1;\n+    while (Math.abs(term) > delta * Math.abs(sum) && i <= MAX_ITERATIONS) {\n+        i++;\n+        term *= (x + a - i) / a;\n+        sum += term;\n+    }\n+    return sum * s;\n+}\n+\n+public static double regularizedIncompleteGammaFunction(double a, double x) {\n+    double integrationLimit = 1000;\n+    if (x < 0.0 || a <= 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    double xPower = Math.pow(x, a);\n+    double term = xPower / a;\n+    double sum = term;\n+    for (int i = 1; i <= MAX_ITERATIONS; i++) {\n+        term *= x / (a + i);\n+        sum += term;\n+        if (Math.abs(term) < Math.abs(sum) * TOLERANCE) {\n+            return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+        }\n+        if (x / (a + i) > integrationLimit) {\n+            return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+        }\n+    }\n+    return Double.NaN;\n+}\n+\n+public static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + Constants.EULER) - x + Constants.LN_SQRT_2_PI + 1.0 / (12.0 * x);\n+    double series = 0.0;\n+    double z = 1.0 / (x * x);\n+    for (int i = 0; i < 8; i++) {\n+        tmp += A[i] * z;\n+        A[i] += B[i] / x;\n+        z *= (1.0 / x);\n+        series += A[i] * z;\n+    }\n+    return tmp + Math.log(series / x);\n+}\n+\n+private static final double[] A = { 0.9999999999995183, 676.5203681218851, -1259.139216722289,\n+        771.3234287757674, -176.6150291621406, 12.5073432786869, -0.13857109526572012, 9.984369578019571e-6,\n+        1.5056327351493116e-7 };\n+\n+private static final double[] B = { -0.6423611111111112, -0.3571428571428571, 0.8333333333333333,\n+        0.8518518518518519, -0.6122448979591837, 0.5595238095238095, -0.13333333333333333, 0.17321428571428573 };\n+private static final int MAX_ITERATIONS = 1000;\n+private static final double TOLERANCE = 10e-15;\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}