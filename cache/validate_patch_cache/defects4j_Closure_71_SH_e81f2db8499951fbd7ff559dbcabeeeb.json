{
    "patch": "      boolean isOverride = parent.getType() == Token.ASSIGN &&\n          getprop.isQualifiedName() &&\n          ObjectType.cast(getprop.getFirstChild().getObjectLiteralCast().getJSType()) != null &&\n          t.inGlobalScope() &&\n          parent.getFirstChild() == getprop.getFirstChild().getObjectLiteralCast() &&\n          objectType.matchesOwnerType(\n              normalizeClassType(ObjectType.cast(\n                  getprop.getFirstFirstChild().getJSType())));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..7fc84f21 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,14 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      boolean isOverride = parent.getType() == Token.ASSIGN &&\n+          getprop.isQualifiedName() &&\n+          ObjectType.cast(getprop.getFirstChild().getObjectLiteralCast().getJSType()) != null &&\n+          t.inGlobalScope() &&\n+          parent.getFirstChild() == getprop.getFirstChild().getObjectLiteralCast() &&\n+          objectType.matchesOwnerType(\n+              normalizeClassType(ObjectType.cast(\n+                  getprop.getFirstFirstChild().getJSType())));\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}