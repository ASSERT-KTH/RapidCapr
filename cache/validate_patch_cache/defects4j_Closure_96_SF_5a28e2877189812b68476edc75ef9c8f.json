{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parametersIter = functionType.getParameters().iterator();\n    Queue<Node> parameters = new LinkedList<>();\n    while (parametersIter.hasNext()) {\n      Node parameter = parametersIter.next();\n      parameters.add(parameter);\n    }\n\n    int ordinal = 0;\n    Node argument = null;\n    while (arguments.hasNext()) {\n      if (parameters.isEmpty()) {\n        // If there are no remaining parameters then this must be a varargs\n        // function, so just consume remaining arguments without validation.\n        argument = arguments.next();\n        validator.expectArgumentMatchesParameter(\n            t, argument, getJSType(argument), null, call, ++ordinal);\n      } else {\n        Node parameter = parameters.poll();\n        argument = arguments.next();\n        validator.expectArgumentMatchesParameter(\n            t, argument, getJSType(argument), getJSType(parameter), call, ++ordinal);\n      }\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if ((!parameters.isEmpty() && !functionType.hasOptionalParameters()) ||\n        (minArgs > numArgs && !functionType.hasRestFormals())) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs),\n              functionType.hasRestFormals() ? String.valueOf(minArgs) : String.valueOf(minArgs - parameters.size()),",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..e4c0b385 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,44 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n+private void visitParameterList(NodeTraversal t, Node call,\n       FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n+    Iterator<Node> parametersIter = functionType.getParameters().iterator();\n+    Queue<Node> parameters = new LinkedList<>();\n+    while (parametersIter.hasNext()) {\n+      Node parameter = parametersIter.next();\n+      parameters.add(parameter);\n+    }\n+\n     int ordinal = 0;\n-    Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+    while (arguments.hasNext()) {\n+      if (parameters.isEmpty()) {\n+        // If there are no remaining parameters then this must be a varargs\n+        // function, so just consume remaining arguments without validation.\n+        argument = arguments.next();\n+        validator.expectArgumentMatchesParameter(\n+            t, argument, getJSType(argument), null, call, ++ordinal);\n+      } else {\n+        Node parameter = parameters.poll();\n+        argument = arguments.next();\n+        validator.expectArgumentMatchesParameter(\n+            t, argument, getJSType(argument), getJSType(parameter), call, ++ordinal);\n+      }\n     }\n \n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n+    if ((!parameters.isEmpty() && !functionType.hasOptionalParameters()) ||\n+        (minArgs > numArgs && !functionType.hasRestFormals())) {\n       report(t, call, WRONG_ARGUMENT_COUNT,\n               validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n-    }\n-  }\n+              String.valueOf(numArgs),\n+              functionType.hasRestFormals() ? String.valueOf(minArgs) : String.valueOf(minArgs - parameters.size()),\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}