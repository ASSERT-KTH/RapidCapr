{
    "patch": "    private static RealMatrix squareRoot(RealMatrix m) {\n        // Compute the Schur decomposition of the matrix\n        SchurDecomposition schur = new SchurDecomposition(m);\n        RealMatrix t = schur.getT();\n        RealMatrix q = schur.getQ();\n\n        // Compute the square root of the diagonal matrix\n        for (int i = 0; i < t.getRowDimension(); i++) {\n            if (t.getEntry(i, i) < 0) {\n                throw new IllegalArgumentException(\"Matrix is not positive definite\");\n            }\n            t.setEntry(i, i, Math.sqrt(t.getEntry(i, i)));\n        }\n\n        // Compute the square root of the matrix using QR decomposition\n        QRDecomposition qr = new QRDecomposition(t.multiply(q.transpose()));\n        RealMatrix r = MatrixUtils.createRealMatrix(qr.getR().getData());\n        return q.multiply(r).multiply(q.transpose());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..1cf7d554a 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,22 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+    private static RealMatrix squareRoot(RealMatrix m) {\n+        // Compute the Schur decomposition of the matrix\n+        SchurDecomposition schur = new SchurDecomposition(m);\n+        RealMatrix t = schur.getT();\n+        RealMatrix q = schur.getQ();\n+\n+        // Compute the square root of the diagonal matrix\n+        for (int i = 0; i < t.getRowDimension(); i++) {\n+            if (t.getEntry(i, i) < 0) {\n+                throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+            }\n+            t.setEntry(i, i, Math.sqrt(t.getEntry(i, i)));\n+        }\n+\n+        // Compute the square root of the matrix using QR decomposition\n+        QRDecomposition qr = new QRDecomposition(t.multiply(q.transpose()));\n+        RealMatrix r = MatrixUtils.createRealMatrix(qr.getR().getData());\n+        return q.multiply(r).multiply(q.transpose());\n }",
    "result_reason": "error: reached end of file while parsing",
    "test_result": "ERROR"
}