{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n        if (m.getRowDimension() <= 500) {\n            try {\n                final CholeskyDecomposition dec = new CholeskyDecomposition(m);\n                return dec.getL();\n            } catch (NonPositiveDefiniteMatrixException e) {\n                throw new IllegalArgumentException(\"Matrix not positive definite\");\n            }\n        } else {\n            final SingularValueDecomposition dec = new SingularValueDecomposition(m);\n            final RealMatrix sqrt = dec.getS().scalarMultiply(0.5);\n            return dec.getU().multiply(sqrt).multiply(dec.getUT());\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..9997f1c2f 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,17 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+        if (m.getRowDimension() <= 500) {\n+            try {\n+                final CholeskyDecomposition dec = new CholeskyDecomposition(m);\n+                return dec.getL();\n+            } catch (NonPositiveDefiniteMatrixException e) {\n+                throw new IllegalArgumentException(\"Matrix not positive definite\");\n+            }\n+        } else {\n+            final SingularValueDecomposition dec = new SingularValueDecomposition(m);\n+            final RealMatrix sqrt = dec.getS().scalarMultiply(0.5);\n+            return dec.getU().multiply(sqrt).multiply(dec.getUT());\n+        }\n }",
    "result_reason": "error: reached end of file while parsing",
    "test_result": "ERROR"
}