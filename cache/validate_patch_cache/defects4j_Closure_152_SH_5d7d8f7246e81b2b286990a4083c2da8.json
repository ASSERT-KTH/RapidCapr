{
    "patch": "    if (typeOfThis != null) {\n      ObjectType resolvedTypeOfThis = (ObjectType) typeOfThis.resolve(t, scope);\n      if (resolvedTypeOfThis == null) {\n        t.report(JSError.make(getTypeOfThis().getSource(), CANNOT_CONVERT_OBJECT_TO_TYPE, \"this\"));\n      } else {\n        typeOfThis = resolvedTypeOfThis;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..83e244e9 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,14 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    if (typeOfThis != null) {\n+      ObjectType resolvedTypeOfThis = (ObjectType) typeOfThis.resolve(t, scope);\n+      if (resolvedTypeOfThis == null) {\n+        t.report(JSError.make(getTypeOfThis().getSource(), CANNOT_CONVERT_OBJECT_TO_TYPE, \"this\"));\n+      } else {\n+        typeOfThis = resolvedTypeOfThis;\n+      }\n+    }\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}