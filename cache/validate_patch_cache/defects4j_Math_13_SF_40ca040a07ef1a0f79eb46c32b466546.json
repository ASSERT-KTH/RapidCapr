{
    "patch": "        // check if the matrix is symmetric\n        if (!m.isSymmetric(TOLERANCE)) {\n            throw new NonSquareMatrixException(m.getRowDimension(), m.getColumnDimension());\n        }\n        // perform the Cholesky decomposition\n        CholeskyDecomposition dec = new CholeskyDecomposition(m);\n        RealMatrix l = dec.getL();\n        // calculate the square root of each element in L\n        for (int i = 0; i < l.getRowDimension(); i++) {\n            for (int j = 0; j < l.getColumnDimension(); j++) {\n                l.setEntry(i, j, Math.sqrt(l.getEntry(i, j)));\n            }\n        }\n        // return L * L^T\n        return l.multiply(l.transpose());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..7821a52c5 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,19 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+        // check if the matrix is symmetric\n+        if (!m.isSymmetric(TOLERANCE)) {\n+            throw new NonSquareMatrixException(m.getRowDimension(), m.getColumnDimension());\n+        }\n+        // perform the Cholesky decomposition\n+        CholeskyDecomposition dec = new CholeskyDecomposition(m);\n+        RealMatrix l = dec.getL();\n+        // calculate the square root of each element in L\n+        for (int i = 0; i < l.getRowDimension(); i++) {\n+            for (int j = 0; j < l.getColumnDimension(); j++) {\n+                l.setEntry(i, j, Math.sqrt(l.getEntry(i, j)));\n+            }\n+        }\n+        // return L * L^T\n+        return l.multiply(l.transpose());\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}