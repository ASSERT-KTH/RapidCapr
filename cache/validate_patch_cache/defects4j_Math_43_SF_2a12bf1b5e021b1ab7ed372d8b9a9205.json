{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    secondMoment.increment(value);\n    if (meanImpl instanceof Mean) {\n        ((Mean) meanImpl).increment(value);\n    } else {\n        meanImpl.increment(value);\n    }\n    if (varianceImpl instanceof Variance) {\n        ((Variance) varianceImpl).increment(value);\n    } else {\n        double prevMean = meanImpl.getResult();\n        double delta = value - prevMean;\n        meanImpl.increment(delta / (n + 1));\n        double m2 = secondMoment.getResult() + delta * delta * (n / (n + 1.0));\n        varianceImpl.increment(m2 - prevMean * prevMean);\n    }\n    if (value > 0) {\n        sumLogImpl.increment(Math.log(value));\n        if (geoMeanImpl instanceof GeometricMean) {\n            ((GeometricMean) geoMeanImpl).increment(Math.log(value));\n        } else {\n            geoMeanImpl.increment(value);\n        }\n    } else {\n        if (geoMeanImpl instanceof GeometricMean) {\n            ((GeometricMean) geoMeanImpl).increment(Double.NaN);\n        } else {\n            geoMeanImpl.increment(value);\n        }\n    }\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..aeeaeef45 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,26 +146,42 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n-        }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    secondMoment.increment(value);\n+    if (meanImpl instanceof Mean) {\n+        ((Mean) meanImpl).increment(value);\n+    } else {\n+        meanImpl.increment(value);\n+    }\n+    if (varianceImpl instanceof Variance) {\n+        ((Variance) varianceImpl).increment(value);\n+    } else {\n+        double prevMean = meanImpl.getResult();\n+        double delta = value - prevMean;\n+        meanImpl.increment(delta / (n + 1));\n+        double m2 = secondMoment.getResult() + delta * delta * (n / (n + 1.0));\n+        varianceImpl.increment(m2 - prevMean * prevMean);\n+    }\n+    if (value > 0) {\n+        sumLogImpl.increment(Math.log(value));\n+        if (geoMeanImpl instanceof GeometricMean) {\n+            ((GeometricMean) geoMeanImpl).increment(Math.log(value));\n+        } else {\n+            geoMeanImpl.increment(value);\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n+    } else {\n+        if (geoMeanImpl instanceof GeometricMean) {\n+            ((GeometricMean) geoMeanImpl).increment(Double.NaN);\n+        } else {\n             geoMeanImpl.increment(value);\n         }\n-        n++;\n     }\n+    n++;\n+}\n \n     /**\n      * Returns the number of available values",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<NaN>",
    "test_result": "FAIL"
}