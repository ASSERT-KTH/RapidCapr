{
    "patch": "public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                 final double relativeSymmetryThreshold,\n                                 final double absolutePositivityThreshold)\n        throws NonSquareMatrixException,\n        NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n    if (!matrix.isSquare()) {\n        throw new NonSquareMatrixException(matrix.getRowDimension(),\n                matrix.getColumnDimension());\n    }\n\n    final int order = matrix.getRowDimension();\n    lTData = matrix.getData();\n    cachedL = null;\n    cachedLT = null;\n\n    // transform the matrix\n    for (int i = 0; i < order; ++i) {\n        final double[] ltI = lTData[i];\n\n        double sum = ltI[i];\n        for (int k = 0; k < i; k++) {\n            sum -= ltI[k] * ltI[k];\n        }\n\n        // Check for positive definiteness\n        if (sum <= absolutePositivityThreshold) {\n            throw new NotPositiveDefiniteMatrixException();\n        }\n\n        ltI[i] = Math.sqrt(sum);\n        final double inverse = 1.0 / ltI[i];\n\n        for (int j = i + 1; j < order; ++j) {\n            ltI[j] *= inverse;\n            final double[] ltJ = lTData[j];\n            double sum2 = ltJ[j];\n            for (int k = 0; k < i; k++) {\n                sum2 -= ltI[k] * ltJ[k];\n            }\n            ltJ[j] = sum2 = (sum2 - ltI[i] * ltI[i]);\n            for (int k = i + 1; k < j; k++) {\n                sum2 -= ltI[k] * ltJ[k];\n            }\n            // Check for positive definiteness\n            if (sum2 <= absolutePositivityThreshold) {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n            ltJ[i] = sum2 / (ltI[i] * ltI[i]);\n        }\n    }\n\n    // Check for symmetry\n    for (int i = 0; i < order; i++) {\n        final double[] ltI = lTData[i];\n        for (int j = i + 1; j < order; j++) {\n            final double[] ltJ = lTData[j];\n            double diff = 0;\n            for (int k = 0; k <= i; k++) {\n                diff += ltI[k] * ltJ[k];\n            }\n            for (int k = i + 1; k < j; k++) {\n                diff += ltI[k] * ltJ[k] + ltJ[k] * ltI[k];\n            }\n            diff += ltI[j] * ltJ[j] - lTData[j][i];\n            double norm = Math.max(Math.abs(lTData[i][j]), Math.abs(lTData[j][i]));\n            if (Math.abs(diff) > relativeSymmetryThreshold * norm) {\n                throw new NotSymmetricMatrixException();\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java b/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\nindex acd9222f6..926de0827 100644\n--- a/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n@@ -90,65 +90,78 @@ public class CholeskyDecompositionImpl implements CholeskyDecomposition {\n      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n      */\n-    public CholeskyDecompositionImpl(final RealMatrix matrix,\n-                                     final double relativeSymmetryThreshold,\n-                                     final double absolutePositivityThreshold)\n+public CholeskyDecompositionImpl(final RealMatrix matrix,\n+                                 final double relativeSymmetryThreshold,\n+                                 final double absolutePositivityThreshold)\n         throws NonSquareMatrixException,\n-               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n-\n-        if (!matrix.isSquare()) {\n-            throw new NonSquareMatrixException(matrix.getRowDimension(),\n-                                               matrix.getColumnDimension());\n-        }\n+        NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n \n-        final int order = matrix.getRowDimension();\n-        lTData   = matrix.getData();\n-        cachedL  = null;\n-        cachedLT = null;\n+    if (!matrix.isSquare()) {\n+        throw new NonSquareMatrixException(matrix.getRowDimension(),\n+                matrix.getColumnDimension());\n+    }\n \n-        // check the matrix before transformation\n-        for (int i = 0; i < order; ++i) {\n+    final int order = matrix.getRowDimension();\n+    lTData = matrix.getData();\n+    cachedL = null;\n+    cachedLT = null;\n \n-            final double[] lI = lTData[i];\n+    // transform the matrix\n+    for (int i = 0; i < order; ++i) {\n+        final double[] ltI = lTData[i];\n \n-            if (lTData[i][i] < absolutePositivityThreshold) {\n-                throw new NotPositiveDefiniteMatrixException();\n-            }\n-            // check off-diagonal elements (and reset them to 0)\n-            for (int j = i + 1; j < order; ++j) {\n-                final double[] lJ = lTData[j];\n-                final double lIJ = lI[j];\n-                final double lJI = lJ[i];\n-                final double maxDelta =\n-                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n-                if (Math.abs(lIJ - lJI) > maxDelta) {\n-                    throw new NotSymmetricMatrixException();\n-                }\n-                lJ[i] = 0;\n-           }\n+        double sum = ltI[i];\n+        for (int k = 0; k < i; k++) {\n+            sum -= ltI[k] * ltI[k];\n         }\n \n-        // transform the matrix\n-        for (int i = 0; i < order; ++i) {\n-\n-            final double[] ltI = lTData[i];\n-\n-            // check diagonal element\n+        // Check for positive definiteness\n+        if (sum <= absolutePositivityThreshold) {\n+            throw new NotPositiveDefiniteMatrixException();\n+        }\n \n-            ltI[i] = Math.sqrt(ltI[i]);\n-            final double inverse = 1.0 / ltI[i];\n+        ltI[i] = Math.sqrt(sum);\n+        final double inverse = 1.0 / ltI[i];\n \n-            for (int q = order - 1; q > i; --q) {\n-                ltI[q] *= inverse;\n-                final double[] ltQ = lTData[q];\n-                for (int p = q; p < order; ++p) {\n-                    ltQ[p] -= ltI[q] * ltI[p];\n-                }\n+        for (int j = i + 1; j < order; ++j) {\n+            ltI[j] *= inverse;\n+            final double[] ltJ = lTData[j];\n+            double sum2 = ltJ[j];\n+            for (int k = 0; k < i; k++) {\n+                sum2 -= ltI[k] * ltJ[k];\n             }\n-\n+            ltJ[j] = sum2 = (sum2 - ltI[i] * ltI[i]);\n+            for (int k = i + 1; k < j; k++) {\n+                sum2 -= ltI[k] * ltJ[k];\n+            }\n+            // Check for positive definiteness\n+            if (sum2 <= absolutePositivityThreshold) {\n+                throw new NotPositiveDefiniteMatrixException();\n+            }\n+            ltJ[i] = sum2 / (ltI[i] * ltI[i]);\n         }\n+    }\n \n+    // Check for symmetry\n+    for (int i = 0; i < order; i++) {\n+        final double[] ltI = lTData[i];\n+        for (int j = i + 1; j < order; j++) {\n+            final double[] ltJ = lTData[j];\n+            double diff = 0;\n+            for (int k = 0; k <= i; k++) {\n+                diff += ltI[k] * ltJ[k];\n+            }\n+            for (int k = i + 1; k < j; k++) {\n+                diff += ltI[k] * ltJ[k] + ltJ[k] * ltI[k];\n+            }\n+            diff += ltI[j] * ltJ[j] - lTData[j][i];\n+            double norm = Math.max(Math.abs(lTData[i][j]), Math.abs(lTData[j][i]));\n+            if (Math.abs(diff) > relativeSymmetryThreshold * norm) {\n+                throw new NotSymmetricMatrixException();\n+            }\n+        }\n     }\n+}\n \n     /** {@inheritDoc} */\n     public RealMatrix getL() {",
    "result_reason": "org.apache.commons.math.linear.NotPositiveDefiniteMatrixException: not positive definite matrix",
    "test_result": "FAIL"
}