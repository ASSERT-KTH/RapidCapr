{
    "patch": "import com.google.javascript.jscomp.NodeUtil;\nimport com.google.javascript.jscomp.Scope;\nimport com.google.javascript.jscomp.parsing.parser.trees.BinaryOperatorTree;\nimport com.google.javascript.jscomp.parsing.parser.util.format.SimpleFormat;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\n\nimport java.util.BitSet;\n\npublic class FixBug {\n\n    private Scope scope;\n    private BitSet reads;\n\n    private boolean isArgumentsName(Node n) {\n        return \"arguments\".equals(n.getString()) && n.isName();\n    }\n\n    private void markAllParametersEscaped() {\n        for (Scope.Var v : scope.getParameters()) {\n            if (!v.isExtern()) {\n                reads.set(v.getIndex());\n            }\n        }\n    }\n\n    private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {\n        switch (n.getType()) {\n            case Token.SCRIPT:\n            case Token.BLOCK:\n            case Token.FUNCTION:\n                return;\n            case Token.WHILE:\n            case Token.DO:\n            case Token.IF:\n                computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n                return;\n            case Token.FOR:\n                if (!NodeUtil.isForIn(n)) {\n                    computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n                } else {\n                    // for(x in y) {...}\n                    Node lhs = n.getFirstChild();\n                    Node rhs = lhs.getNext();\n                    if (NodeUtil.isVar(lhs)) {\n                        // for(var x in y) {...}\n                        lhs = lhs.getLastChild();\n                    }\n                    addToKillIfLocal(lhs, kill);\n                    addToGenIfLocal(lhs, gen);\n                    computeGenKill(rhs, gen, kill, conditional);\n                }\n                return;\n            case Token.VAR:\n                for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n                    if (c.hasChildren()) {\n                        computeGenKill(c.getFirstChild(), gen, kill, conditional);\n                        if (!conditional) {\n                            addToKillIfLocal(c.getFirstChild(), kill);\n                        }\n                    }\n                }\n                return;\n            case Token.AND:\n            case Token.OR:\n                computeGenKill(n.getFirstChild(), gen, kill, conditional);\n                // May short circuit.\n                computeGenKill(n.getLastChild(), gen, kill, true);\n                return;\n            case Token.HOOK:\n                computeGenKill(n.getFirstChild(), gen, kill, conditional);\n                // Assume both sides are conditional.\n                computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n                computeGenKill(n.getLastChild(), gen, kill, true);\n                return;\n            case Token.NAME:\n                if (isArgumentsName(n)) {\n                    markAllParametersEscaped();\n                } else {\n                    addToGenIfLocal(n, gen);\n                }\n                return;\n            default:\n                if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n                    Node lhs = n.getFirstChild();\n                    if (!conditional) {\n                        addToKillIfLocal(lhs, kill);\n                    }\n                    if (!NodeUtil.isAssign(n)) {\n                        // assignments such as a += 1 reads a.\n                        addToGenIfLocal(lhs, gen);\n                    }\n                    computeGenKill(lhs.getNext(), gen, kill, conditional);\n                } else {\n                    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n                        computeGenKill(c, gen, kill, conditional);\n                    }\n                }\n                return;\n        }\n    }\n\n    private void addToKillIfLocal(Node n, BitSet set) {\n        if (n.getType() == Token.NAME) {\n            Scope.Var var = scope.getVar(n.getString());\n            if (var == null) {\n                var = scope.getArgumentsVar();\n            }\n            if (var != null && !var.isExtern()) {\n                set.set(var.getIndex());\n            }\n        }\n    }\n\n    private void addToGenIfLocal(Node n, BitSet set) {\n        if (n.getType() == Token.NAME) {\n            Scope.Var var = scope.getVar(n.getString());\n            if (var == null) {\n                var = scope.getArgumentsVar();\n            }\n            if (var != null && !var.isExtern()) {\n                if (!reads.get(var.getIndex())) {\n                    set.set(var.getIndex());\n                }\n                reads.set(var.getIndex());\n            }\n        } else if (n instanceof BinaryOperatorTree) {\n            BinaryOperatorTree binaryOperatorTree = (BinaryOperatorTree) n;\n            addToGenIfLocal(binaryOperatorTree.left, set);\n            addToGenIfLocal(binaryOperatorTree.right, set);\n        }\n    }\n\n    public void analyze() {\n        Node externsRoot = null;\n        Node astRoot = null;\n\n        // Control flow analysis requires typed Scope creator.\n        TypedScopeCreator scopeCreator = new TypedScopeCreator();\n\n        // Variable usage analysis for variable renaming and extern exporting.\n        VariableUsageAnalysis variableUsageAnalysis =\n                new VariableUsageAnalysis(\n                        astRoot,\n                        (Scope.Creator) scopeCreator,\n                        true, // include function expression names.\n                        false); // don't include constant properties.\n\n        // Create the scope and fill it with data from variable usage analysis.\n        TypedScope topScope =\n                scopeCreator.createScope(astRoot, null);\n        variableUsageAnalysis.process(t -> { }, topScope);\n\n        scope = topScope;\n        reads = new BitSet(scope.getVars().size());\n\n        if (astRoot != null) {\n            computeGenKill(astRoot, new BitSet(scope.getVars().size()), new BitSet(scope.getVars().size()), false);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\nindex 7999db40..6f43bda9 100644\n--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n@@ -175,92 +175,167 @@ class LiveVariablesAnalysis extends\n    * @param conditional {@code true} if any assignments encountered are\n    *        conditionally executed. These assignments might not kill a variable.\n    */\n-  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n-      boolean conditional) {\n-\n-    switch (n.getType()) {\n-      case Token.SCRIPT:\n-      case Token.BLOCK:\n-      case Token.FUNCTION:\n-        return;\n-\n-      case Token.WHILE:\n-      case Token.DO:\n-      case Token.IF:\n-        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-            conditional);\n-        return;\n-\n-      case Token.FOR:\n-        if (!NodeUtil.isForIn(n)) {\n-          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-              conditional);\n-        } else {\n-          // for(x in y) {...}\n-          Node lhs = n.getFirstChild();\n-          Node rhs = lhs.getNext();\n-          if (NodeUtil.isVar(lhs)) {\n-            // for(var x in y) {...}\n-            lhs = lhs.getLastChild();\n-          }\n-            addToSetIfLocal(lhs, kill);\n-            addToSetIfLocal(lhs, gen);\n-          computeGenKill(rhs, gen, kill, conditional);\n+import com.google.javascript.jscomp.NodeUtil;\n+import com.google.javascript.jscomp.Scope;\n+import com.google.javascript.jscomp.parsing.parser.trees.BinaryOperatorTree;\n+import com.google.javascript.jscomp.parsing.parser.util.format.SimpleFormat;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+\n+import java.util.BitSet;\n+\n+public class FixBug {\n+\n+    private Scope scope;\n+    private BitSet reads;\n+\n+    private boolean isArgumentsName(Node n) {\n+        return \"arguments\".equals(n.getString()) && n.isName();\n+    }\n+\n+    private void markAllParametersEscaped() {\n+        for (Scope.Var v : scope.getParameters()) {\n+            if (!v.isExtern()) {\n+                reads.set(v.getIndex());\n+            }\n         }\n-        return;\n-\n-      case Token.VAR:\n-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-          if (c.hasChildren()) {\n-            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n-            if (!conditional) {\n-              addToSetIfLocal(c, kill);\n+    }\n+\n+    private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {\n+        switch (n.getType()) {\n+            case Token.SCRIPT:\n+            case Token.BLOCK:\n+            case Token.FUNCTION:\n+                return;\n+            case Token.WHILE:\n+            case Token.DO:\n+            case Token.IF:\n+                computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n+                return;\n+            case Token.FOR:\n+                if (!NodeUtil.isForIn(n)) {\n+                    computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n+                } else {\n+                    // for(x in y) {...}\n+                    Node lhs = n.getFirstChild();\n+                    Node rhs = lhs.getNext();\n+                    if (NodeUtil.isVar(lhs)) {\n+                        // for(var x in y) {...}\n+                        lhs = lhs.getLastChild();\n+                    }\n+                    addToKillIfLocal(lhs, kill);\n+                    addToGenIfLocal(lhs, gen);\n+                    computeGenKill(rhs, gen, kill, conditional);\n+                }\n+                return;\n+            case Token.VAR:\n+                for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+                    if (c.hasChildren()) {\n+                        computeGenKill(c.getFirstChild(), gen, kill, conditional);\n+                        if (!conditional) {\n+                            addToKillIfLocal(c.getFirstChild(), kill);\n+                        }\n+                    }\n+                }\n+                return;\n+            case Token.AND:\n+            case Token.OR:\n+                computeGenKill(n.getFirstChild(), gen, kill, conditional);\n+                // May short circuit.\n+                computeGenKill(n.getLastChild(), gen, kill, true);\n+                return;\n+            case Token.HOOK:\n+                computeGenKill(n.getFirstChild(), gen, kill, conditional);\n+                // Assume both sides are conditional.\n+                computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n+                computeGenKill(n.getLastChild(), gen, kill, true);\n+                return;\n+            case Token.NAME:\n+                if (isArgumentsName(n)) {\n+                    markAllParametersEscaped();\n+                } else {\n+                    addToGenIfLocal(n, gen);\n+                }\n+                return;\n+            default:\n+                if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n+                    Node lhs = n.getFirstChild();\n+                    if (!conditional) {\n+                        addToKillIfLocal(lhs, kill);\n+                    }\n+                    if (!NodeUtil.isAssign(n)) {\n+                        // assignments such as a += 1 reads a.\n+                        addToGenIfLocal(lhs, gen);\n+                    }\n+                    computeGenKill(lhs.getNext(), gen, kill, conditional);\n+                } else {\n+                    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+                        computeGenKill(c, gen, kill, conditional);\n+                    }\n+                }\n+                return;\n+        }\n+    }\n+\n+    private void addToKillIfLocal(Node n, BitSet set) {\n+        if (n.getType() == Token.NAME) {\n+            Scope.Var var = scope.getVar(n.getString());\n+            if (var == null) {\n+                var = scope.getArgumentsVar();\n+            }\n+            if (var != null && !var.isExtern()) {\n+                set.set(var.getIndex());\n             }\n-          }\n         }\n-        return;\n-\n-      case Token.AND:\n-      case Token.OR:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // May short circuit.\n-        computeGenKill(n.getLastChild(), gen, kill, true);\n-        return;\n-\n-      case Token.HOOK:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // Assume both sides are conditional.\n-        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n-        computeGenKill(n.getLastChild(), gen, kill, true);\n-        return;\n-\n-      case Token.NAME:\n-        if (isArgumentsName(n)) {\n-          markAllParametersEscaped();\n-        } else {\n-          addToSetIfLocal(n, gen);\n+    }\n+\n+    private void addToGenIfLocal(Node n, BitSet set) {\n+        if (n.getType() == Token.NAME) {\n+            Scope.Var var = scope.getVar(n.getString());\n+            if (var == null) {\n+                var = scope.getArgumentsVar();\n+            }\n+            if (var != null && !var.isExtern()) {\n+                if (!reads.get(var.getIndex())) {\n+                    set.set(var.getIndex());\n+                }\n+                reads.set(var.getIndex());\n+            }\n+        } else if (n instanceof BinaryOperatorTree) {\n+            BinaryOperatorTree binaryOperatorTree = (BinaryOperatorTree) n;\n+            addToGenIfLocal(binaryOperatorTree.left, set);\n+            addToGenIfLocal(binaryOperatorTree.right, set);\n         }\n-        return;\n-\n-      default:\n-        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n-          Node lhs = n.getFirstChild();\n-          if (!conditional) {\n-            addToSetIfLocal(lhs, kill);\n-          }\n-          if (!NodeUtil.isAssign(n)) {\n-            // assignments such as a += 1 reads a.\n-            addToSetIfLocal(lhs, gen);\n-          }\n-          computeGenKill(lhs.getNext(), gen, kill, conditional);\n-        } else {\n-          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-            computeGenKill(c, gen, kill, conditional);\n-          }\n+    }\n+\n+    public void analyze() {\n+        Node externsRoot = null;\n+        Node astRoot = null;\n+\n+        // Control flow analysis requires typed Scope creator.\n+        TypedScopeCreator scopeCreator = new TypedScopeCreator();\n+\n+        // Variable usage analysis for variable renaming and extern exporting.\n+        VariableUsageAnalysis variableUsageAnalysis =\n+                new VariableUsageAnalysis(\n+                        astRoot,\n+                        (Scope.Creator) scopeCreator,\n+                        true, // include function expression names.\n+                        false); // don't include constant properties.\n+\n+        // Create the scope and fill it with data from variable usage analysis.\n+        TypedScope topScope =\n+                scopeCreator.createScope(astRoot, null);\n+        variableUsageAnalysis.process(t -> { }, topScope);\n+\n+        scope = topScope;\n+        reads = new BitSet(scope.getVars().size());\n+\n+        if (astRoot != null) {\n+            computeGenKill(astRoot, new BitSet(scope.getVars().size()), new BitSet(scope.getVars().size()), false);\n         }\n-        return;\n     }\n-  }\n+}\n \n   private void addToSetIfLocal(Node node, BitSet set) {\n     Preconditions.checkState(NodeUtil.isName(node));",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}