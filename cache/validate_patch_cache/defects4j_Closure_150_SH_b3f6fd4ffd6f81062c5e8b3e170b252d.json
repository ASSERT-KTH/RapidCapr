{
    "patch": "attachLiteralTypes(n);\nswitch (n.getType()) {\n  case Token.FUNCTION:\n    if (NodeUtil.isFunctionExpression(n)) {\n      defineDeclaredFunction(n, parent);\n    } else if (parent != null) {\n      switch (parent.getType()) {\n        case Token.NAME:\n          return;\n        case Token.ASSIGN:\n          Node maybeName = parent.getFirstChild();\n          if (maybeName != null && maybeName.getNext() == n) {\n            defineDeclaredFunction(n, parent);\n          }\n          break;\n        case Token.SCRIPT:\n        case Token.BLOCK:\n          defineDeclaredFunction(n, parent);\n          break;\n        default:\n          break;\n      }\n    }\n    break;\n  case Token.VAR:\n    defineVar(n, parent);\n    break;\n  case Token.CATCH:\n    defineCatch(n, parent);\n    break;\n  case Token.LP:\n    if (!NodeUtil.isFunctionExpression(parent) && parent == scope.getRootNode()) {\n      handleFunctionInputs(n);\n    } else if (NodeUtil.isFunctionExpression(parent)) {\n      defineDeclaredFunction(parent, parent.getParent());\n    }\n    break;\n  default:\n    break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..d845a371 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,22 +1448,47 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+attachLiteralTypes(n);\n+switch (n.getType()) {\n+  case Token.FUNCTION:\n+    if (NodeUtil.isFunctionExpression(n)) {\n+      defineDeclaredFunction(n, parent);\n+    } else if (parent != null) {\n+      switch (parent.getType()) {\n+        case Token.NAME:\n+          return;\n+        case Token.ASSIGN:\n+          Node maybeName = parent.getFirstChild();\n+          if (maybeName != null && maybeName.getNext() == n) {\n+            defineDeclaredFunction(n, parent);\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n+        case Token.SCRIPT:\n+        case Token.BLOCK:\n+          defineDeclaredFunction(n, parent);\n           break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n+        default:\n           break;\n       }\n     }\n+    break;\n+  case Token.VAR:\n+    defineVar(n, parent);\n+    break;\n+  case Token.CATCH:\n+    defineCatch(n, parent);\n+    break;\n+  case Token.LP:\n+    if (!NodeUtil.isFunctionExpression(parent) && parent == scope.getRootNode()) {\n+      handleFunctionInputs(n);\n+    } else if (NodeUtil.isFunctionExpression(parent)) {\n+      defineDeclaredFunction(parent, parent.getParent());\n+    }\n+    break;\n+  default:\n+    break;\n+}\n+    }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}