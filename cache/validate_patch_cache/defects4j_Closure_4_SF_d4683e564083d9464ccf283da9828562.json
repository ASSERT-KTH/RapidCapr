{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // TODO(user): Investigate whether it is really necessary to keep two\n    // different mechanisms for resolving named types, and if so, which order\n    // makes more sense. Now, resolution via registry is first in order to\n    // avoid triggering the warnings built into the resolution via properties.\n    boolean registryResolved = resolveViaRegistry(t, enclosing);\n    boolean propertiesResolved = false;\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    if (registryResolved) {\n      propertiesResolved = resolveViaProperties(t, enclosing);\n    }\n\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    super.resolveInternal(t, enclosing);\n\n    if (registryResolved) {\n      finishPropertyContinuations();\n    }\n\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..bb4b1700 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -186,27 +186,30 @@ class NamedType extends ProxyObjectType {\n     // different mechanisms for resolving named types, and if so, which order\n     // makes more sense. Now, resolution via registry is first in order to\n     // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+    boolean registryResolved = resolveViaRegistry(t, enclosing);\n+    boolean propertiesResolved = false;\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+    if (registryResolved) {\n+      propertiesResolved = resolveViaProperties(t, enclosing);\n     }\n \n-    resolveViaProperties(t, enclosing);\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n \n     super.resolveInternal(t, enclosing);\n+\n+    if (registryResolved) {\n+      finishPropertyContinuations();\n+    }\n+\n     if (isResolved()) {\n       finishPropertyContinuations();\n     }\n+\n     return registry.isLastGeneration() ?\n         getReferencedType() : this;\n   }",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}