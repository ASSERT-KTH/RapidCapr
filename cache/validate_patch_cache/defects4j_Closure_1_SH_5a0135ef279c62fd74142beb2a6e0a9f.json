{
    "patch": "    // Gather all the arugments in the function declaration.\n    List<Node> args = new ArrayList<>();\n    for (Node arg : argList.children()) {\n      args.add(arg);\n    }\n    \n    // Search for unreferenced binding in argument list for deletion.\n    for (int i = args.size() - 1; i >= 0; i--) {\n      Var var = fnScope.getVar(args.get(i).getString());\n      if (!referenced.contains(var)) {\n        argList.removeChild(args.get(i));\n        compiler.reportCodeChange();\n      } else {\n        // Found a referenced argument, exit the loop.\n        break;\n      }\n    }\n    \n    if (modifyCallers) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..7b17e1f1 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,25 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Gather all the arugments in the function declaration.\n+    List<Node> args = new ArrayList<>();\n+    for (Node arg : argList.children()) {\n+      args.add(arg);\n+    }\n+    \n+    // Search for unreferenced binding in argument list for deletion.\n+    for (int i = args.size() - 1; i >= 0; i--) {\n+      Var var = fnScope.getVar(args.get(i).getString());\n+      if (!referenced.contains(var)) {\n+        argList.removeChild(args.get(i));\n+        compiler.reportCodeChange();\n+      } else {\n+        // Found a referenced argument, exit the loop.\n+        break;\n+      }\n+    }\n+    \n+    if (modifyCallers) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}