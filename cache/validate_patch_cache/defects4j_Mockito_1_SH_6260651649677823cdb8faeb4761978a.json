{
    "patch": "            Object[] args = invocation.getRawArguments();\n\t\t\tfor (int position = 0; position < matchers.size(); position++) {\n\t\t\t\tMatcher m = matchers.get(position);\n\t\t\t\tif (m instanceof CapturesArguments && args.length > position) {\n\t\t\t\t\tif (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n\t\t\t\t\t\tObject array = args[position];\n\t\t\t\t\t\tfor (int i = 0; i < Array.getLength(array); i++) {\n\t\t\t\t\t\t\t((CapturesArguments) m).captureFrom(Array.get(array, i));\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t((CapturesArguments) m).captureFrom(args[position]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..07e6925a5 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,21 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Object[] args = invocation.getRawArguments();\n+\t\t\tfor (int position = 0; position < matchers.size(); position++) {\n+\t\t\t\tMatcher m = matchers.get(position);\n+\t\t\t\tif (m instanceof CapturesArguments && args.length > position) {\n+\t\t\t\t\tif (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n+\t\t\t\t\t\tObject array = args[position];\n+\t\t\t\t\t\tfor (int i = 0; i < Array.getLength(array); i++) {\n+\t\t\t\t\t\t\t((CapturesArguments) m).captureFrom(Array.get(array, i));\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\t((CapturesArguments) m).captureFrom(args[position]);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}