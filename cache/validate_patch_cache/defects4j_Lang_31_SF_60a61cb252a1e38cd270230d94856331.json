{
    "patch": "import java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class StringUtils {\n\n    public static boolean containsAny(final char[] str, final char[] searchChars) {\n        if (searchChars.length == 0) {\n            return false; // empty searchChars array means no match\n        }\n        if (str.length == 0) {\n            return false; // empty string has no characters\n        }\n        final Set<Character> chars = new HashSet<Character>();\n        for (char c : searchChars) {\n            chars.add(Character.valueOf(c));\n        }\n        for (char c : str) {\n            if (chars.contains(Character.valueOf(c))) {\n                return true; // found a character in the searchChars array\n            }\n        }\n        return false; // no characters found in the searchChars array\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..d663b00e 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,31 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class StringUtils {\n+\n+    public static boolean containsAny(final char[] str, final char[] searchChars) {\n+        if (searchChars.length == 0) {\n+            return false; // empty searchChars array means no match\n+        }\n+        if (str.length == 0) {\n+            return false; // empty string has no characters\n+        }\n+        final Set<Character> chars = new HashSet<Character>();\n+        for (char c : searchChars) {\n+            chars.add(Character.valueOf(c));\n+        }\n+        for (char c : str) {\n+            if (chars.contains(Character.valueOf(c))) {\n+                return true; // found a character in the searchChars array\n+            }\n+        }\n+        return false; // no characters found in the searchChars array\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}