{
    "patch": "      // Make sure there are no other assignments.\n      for (Reference otherRef : references) {\n        if (!ref.equals(otherRef)\n            && otherRef.isDeclarationOrSimpleAssignment()\n            && otherRef.getBasicBlock().getIndex() >= ref.getBasicBlock().getIndex()) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..2987fc64 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,11 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      // Make sure there are no other assignments.\n+      for (Reference otherRef : references) {\n+        if (!ref.equals(otherRef)\n+            && otherRef.isDeclarationOrSimpleAssignment()\n+            && otherRef.getBasicBlock().getIndex() >= ref.getBasicBlock().getIndex()) {\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}