{
    "patch": "public void matchConstraint(ObjectType constraintObj) {\n  // We only want to match constraints on anonymous types.\n  if (constraintObj.isNominalConstructor() || !constraintObj.getDisplayName().isEmpty()) {\n    return;\n  }\n\n  // Handle the case where the constraint object is a record type.\n  //\n  // For example, given this constraint:\n  // function f(/** {{foo: string}} */ x) {}\n  //\n  // We want to infer that the type of x.foo is string.\n  if (constraintObj.isRecordType()) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      if (isPropertyTypeDeclared(prop)) {\n        // The property is already declared in this scope, so we skip it.\n        continue;\n      }\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (propType == null) {\n        // If the property type is missing, we infer it as NO_TYPE.\n        propType = getNativeType(JSTypeNative.NO_TYPE);\n      }\n      JSType typeToInfer = propType;\n      if (!hasProperty(prop)) {\n        // If the object literal doesn't have the property, we infer it using a VOID type.\n        JSType voidType = getNativeType(JSTypeNative.VOID_TYPE);\n        if (voidType != null) {\n          typeToInfer = voidType.getLeastSupertype(propType);\n        }\n      }\n      defineInferredProperty(prop, typeToInfer, null);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..1a1db86c 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,30 +552,39 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n+public void matchConstraint(ObjectType constraintObj) {\n+  // We only want to match constraints on anonymous types.\n+  if (constraintObj.isNominalConstructor() || !constraintObj.getDisplayName().isEmpty()) {\n+    return;\n+  }\n+\n+  // Handle the case where the constraint object is a record type.\n+  //\n+  // For example, given this constraint:\n+  // function f(/** {{foo: string}} */ x) {}\n+  //\n+  // We want to infer that the type of x.foo is string.\n+  if (constraintObj.isRecordType()) {\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+      if (isPropertyTypeDeclared(prop)) {\n+        // The property is already declared in this scope, so we skip it.\n+        continue;\n+      }\n+      JSType propType = constraintObj.getPropertyType(prop);\n+      if (propType == null) {\n+        // If the property type is missing, we infer it as NO_TYPE.\n+        propType = getNativeType(JSTypeNative.NO_TYPE);\n+      }\n+      JSType typeToInfer = propType;\n+      if (!hasProperty(prop)) {\n+        // If the object literal doesn't have the property, we infer it using a VOID type.\n+        JSType voidType = getNativeType(JSTypeNative.VOID_TYPE);\n+        if (voidType != null) {\n+          typeToInfer = voidType.getLeastSupertype(propType);\n         }\n       }\n+      defineInferredProperty(prop, typeToInfer, null);\n     }\n   }\n }\n+}",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}