{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) return;\n\n    if (n.isFunction() && !NodeUtil.isFunctionExpression(n) &&\n        NodeUtil.getEnclosingFunction(n) != null) {\n        return;\n    }\n\n    if (n.isScript() && parent == null) {\n        // This is a top-level script node. Fully qualify any\n        // names declared therein with the script's name so that\n        // there is no possibility for namespace collisions.\n        Node splitName = NodeUtil.newQName(compiler,\n            extractLeafNameFromScopeRoot());\n\n        for (Name name : scope.getLocalNames()) {\n            if (name.getParentNode() == n) {\n                name.replaceWith(new Node(Token.GETPROP, splitName.cloneTree(),\n                    NodeUtil.newString(name.getBaseName()).copyTypeFrom(name)));\n            }\n        }\n\n        attachLiteralTypes(n);\n    } else if (n.isBlock() && NodeUtil.isControlStructure(parent)) {\n        checkForLongJumps(n);\n        defineCatchClauses(n);\n        attachLiteralTypes(n);\n    } else {\n        attachLiteralTypes(n);\n        switch (n.getToken()) {\n            case FUNCTION:\n                defineDeclaredFunction(n, parent);\n                break;\n            case CATCH:\n                defineCatch(n, parent);\n                break;\n            case VAR:\n            case LET:\n            case CONST:\n                defineVar(n, parent);\n                break;\n            case CLASS:\n                defineClass(n, parent);\n                break;\n            case GETPROP:\n                checkLhsOfAssign(n);\n                defineGetter(n, parent);\n                if (parent != null && parent.isExprResult()) {\n                    handleSetterProperty(n);\n                }\n                break;\n            case ASSIGN:\n            case ASSIGN_ADD:\n            case ASSIGN_DIV:\n            case ASSIGN_MOD:\n            case ASSIGN_MUL:\n            case ASSIGN_EXPONENT:\n            case ASSIGN_SUB:\n                assign(n, parent);\n                break;\n            case NAME:\n                defineName(n, parent);\n                break;\n            case RETURN:\n                checkForFinallyBlocks(n);\n                break;\n            case WHILE:\n            case DO:\n            case FOR:\n                warnOnFullControlStatment(n);\n                break;\n            case STRING_KEY:\n                // A string key in an object literal that defines a function. Example:\n                //   ({ x: function () {} })\n                // Gather the function name and call defineDeclaredFunction.\n                if (n.getFirstChild().isFunction()) {\n                    defineDeclaredFunction(n.getFirstChild(), parent);\n                }\n                break;\n            case CAST:\n                defineCast(n);\n                break;\n            default:\n                if (parent != null && parent.isExprResult() && !n.matchesQualifiedName(\"goog.provide\")) {\n                    if (n.getToken() != Token.THIS && !NodeUtil.isImmutableValue(n)) {\n                        compiler.report(t.makeError(n, VarCheck.UNUSED_EXPR_WARNING));\n                    }\n                }\n                break;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..ff13b607 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,99 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) return;\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+    if (n.isFunction() && !NodeUtil.isFunctionExpression(n) &&\n+        NodeUtil.getEnclosingFunction(n) != null) {\n         return;\n-      }\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+    if (n.isScript() && parent == null) {\n+        // This is a top-level script node. Fully qualify any\n+        // names declared therein with the script's name so that\n+        // there is no possibility for namespace collisions.\n+        Node splitName = NodeUtil.newQName(compiler,\n+            extractLeafNameFromScopeRoot());\n+\n+        for (Name name : scope.getLocalNames()) {\n+            if (name.getParentNode() == n) {\n+                name.replaceWith(new Node(Token.GETPROP, splitName.cloneTree(),\n+                    NodeUtil.newString(name.getBaseName()).copyTypeFrom(name)));\n+            }\n+        }\n+\n+        attachLiteralTypes(n);\n+    } else if (n.isBlock() && NodeUtil.isControlStructure(parent)) {\n+        checkForLongJumps(n);\n+        defineCatchClauses(n);\n+        attachLiteralTypes(n);\n+    } else {\n+        attachLiteralTypes(n);\n+        switch (n.getToken()) {\n+            case FUNCTION:\n+                defineDeclaredFunction(n, parent);\n+                break;\n+            case CATCH:\n+                defineCatch(n, parent);\n+                break;\n+            case VAR:\n+            case LET:\n+            case CONST:\n+                defineVar(n, parent);\n+                break;\n+            case CLASS:\n+                defineClass(n, parent);\n+                break;\n+            case GETPROP:\n+                checkLhsOfAssign(n);\n+                defineGetter(n, parent);\n+                if (parent != null && parent.isExprResult()) {\n+                    handleSetterProperty(n);\n+                }\n+                break;\n+            case ASSIGN:\n+            case ASSIGN_ADD:\n+            case ASSIGN_DIV:\n+            case ASSIGN_MOD:\n+            case ASSIGN_MUL:\n+            case ASSIGN_EXPONENT:\n+            case ASSIGN_SUB:\n+                assign(n, parent);\n+                break;\n+            case NAME:\n+                defineName(n, parent);\n+                break;\n+            case RETURN:\n+                checkForFinallyBlocks(n);\n+                break;\n+            case WHILE:\n+            case DO:\n+            case FOR:\n+                warnOnFullControlStatment(n);\n+                break;\n+            case STRING_KEY:\n+                // A string key in an object literal that defines a function. Example:\n+                //   ({ x: function () {} })\n+                // Gather the function name and call defineDeclaredFunction.\n+                if (n.getFirstChild().isFunction()) {\n+                    defineDeclaredFunction(n.getFirstChild(), parent);\n+                }\n+                break;\n+            case CAST:\n+                defineCast(n);\n+                break;\n+            default:\n+                if (parent != null && parent.isExprResult() && !n.matchesQualifiedName(\"goog.provide\")) {\n+                    if (n.getToken() != Token.THIS && !NodeUtil.isImmutableValue(n)) {\n+                        compiler.report(t.makeError(n, VarCheck.UNUSED_EXPR_WARNING));\n+                    }\n+                }\n+                break;\n+        }\n     }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}