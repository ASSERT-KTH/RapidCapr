{
    "patch": "// adjust stepSize if needed\nfinal double remainingTime = t - stepStart;\nif (FastMath.abs(stepSize) > FastMath.abs(remainingTime)) {\n    final double factor = FastMath.abs(remainingTime / stepSize);\n    stepSize *= factor;\n    for (int i = 1; i < yDotK.length; i++) {\n        for (int j = 0; j < y.length; j++) {\n            yDotK[i][j] *= factor;\n        }\n    }\n    error = 10; // Reset error to recompute derivatives\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 13ced27d7..454f98081 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -247,6 +247,18 @@ public abstract class EmbeddedRungeKuttaIntegrator\n         }\n \n         stepSize = hNew;\n+// adjust stepSize if needed\n+final double remainingTime = t - stepStart;\n+if (FastMath.abs(stepSize) > FastMath.abs(remainingTime)) {\n+    final double factor = FastMath.abs(remainingTime / stepSize);\n+    stepSize *= factor;\n+    for (int i = 1; i < yDotK.length; i++) {\n+        for (int j = 0; j < y.length; j++) {\n+            yDotK[i][j] *= factor;\n+        }\n+    }\n+    error = 10; // Reset error to recompute derivatives\n+}\n \n         // next stages\n         for (int k = 1; k < stages; ++k) {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}