{
    "patch": "    // Collect function arguments that are referenced in the function body.\n    final Set<String> referencedArgs = Sets.newHashSet();\n    NodeTraversal.traversePostOrder(function.getLastChild(), new NodeTraversal.Callback() {\n      @Override\n      public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n        if (n.isName()) {\n          referencedArgs.add(n.getString());\n        }\n        return true;\n      }\n    });\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Remove function arguments that are not referenced in the function body.\n      Node arg = argList.getFirstChild();\n      while (arg != null) {\n        Node nextArg = arg.getNext();\n        if (!referencedArgs.contains(arg.getString())) {\n          argList.removeChild(arg);\n          compiler.reportCodeChange();\n        }\n        arg = nextArg;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..71486499 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,31 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Collect function arguments that are referenced in the function body.\n+    final Set<String> referencedArgs = Sets.newHashSet();\n+    NodeTraversal.traversePostOrder(function.getLastChild(), new NodeTraversal.Callback() {\n+      @Override\n+      public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+        if (n.isName()) {\n+          referencedArgs.add(n.getString());\n+        }\n+        return true;\n+      }\n+    });\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Remove function arguments that are not referenced in the function body.\n+      Node arg = argList.getFirstChild();\n+      while (arg != null) {\n+        Node nextArg = arg.getNext();\n+        if (!referencedArgs.contains(arg.getString())) {\n+          argList.removeChild(arg);\n+          compiler.reportCodeChange();\n+        }\n+        arg = nextArg;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}