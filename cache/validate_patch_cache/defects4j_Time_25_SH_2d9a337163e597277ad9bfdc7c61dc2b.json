{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // check if we are in or near a DST gap\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    if (nextLocal != nextAdjusted) {\n        // we are in or near a DST gap\n        long prevLocal = previousTransition(instantAdjusted);\n        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n        if (prevLocal != prevAdjusted) {\n            // we are in a DST gap\n            int offsetPrev = getOffset(prevLocal);\n            int offsetNext = getOffset(nextLocal);\n            if (offsetPrev > offsetNext) {\n                // gap with positive offset\n                if (offsetLocal >= offsetPrev || offsetLocal < offsetNext) {\n                    return offsetLocal;\n                } else {\n                    return offsetPrev;\n                }\n            } else {\n                // gap with negative offset\n                if (offsetLocal >= offsetNext || offsetLocal < offsetPrev) {\n                    return offsetNext;\n                } else {\n                    return offsetLocal;\n                }\n            }\n        } else {\n            // we are near a DST gap\n            return (offsetLocal < offsetAdjusted) ? offsetLocal : offsetAdjusted;\n        }\n    } else {\n        // we are not near a DST gap\n        return offsetAdjusted;\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..920531d6 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,43 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // check if we are in or near a DST gap\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    if (nextLocal != nextAdjusted) {\n+        // we are in or near a DST gap\n+        long prevLocal = previousTransition(instantAdjusted);\n+        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+        if (prevLocal != prevAdjusted) {\n+            // we are in a DST gap\n+            int offsetPrev = getOffset(prevLocal);\n+            int offsetNext = getOffset(nextLocal);\n+            if (offsetPrev > offsetNext) {\n+                // gap with positive offset\n+                if (offsetLocal >= offsetPrev || offsetLocal < offsetNext) {\n+                    return offsetLocal;\n+                } else {\n+                    return offsetPrev;\n+                }\n+            } else {\n+                // gap with negative offset\n+                if (offsetLocal >= offsetNext || offsetLocal < offsetPrev) {\n+                    return offsetNext;\n+                } else {\n+                    return offsetLocal;\n+                }\n+            }\n+        } else {\n+            // we are near a DST gap\n+            return (offsetLocal < offsetAdjusted) ? offsetLocal : offsetAdjusted;\n+        }\n+    } else {\n+        // we are not near a DST gap\n+        return offsetAdjusted;\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}