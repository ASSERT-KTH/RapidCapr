{
    "patch": "      ObjectType thisType = functionType.getTypeOfThis();\n      if (thisType != null) {\n        Node parent = n.getParent();\n        if (parent.isGetElem() || parent.isGetProp()) {\n          Node expr = parent.getFirstChild();\n          if (!getJSType(expr).isSubtype(thisType)) {\n            report(t, n, INVALID_THIS_TYPE, thisType.toString());\n          }\n        } else {\n          report(t, n, INVALID_THIS_TYPE, thisType.toString());\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..8cc0601c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      ObjectType thisType = functionType.getTypeOfThis();\n+      if (thisType != null) {\n+        Node parent = n.getParent();\n+        if (parent.isGetElem() || parent.isGetProp()) {\n+          Node expr = parent.getFirstChild();\n+          if (!getJSType(expr).isSubtype(thisType)) {\n+            report(t, n, INVALID_THIS_TYPE, thisType.toString());\n+          }\n+        } else {\n+          report(t, n, INVALID_THIS_TYPE, thisType.toString());\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}