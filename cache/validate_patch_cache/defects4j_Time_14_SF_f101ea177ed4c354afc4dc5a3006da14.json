{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // Overridden as superclass algorithm can't handle 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return Arrays.copyOf(values, values.length);\n    }\n    if (partial.isSupported(DateTimeFieldType.monthOfYear())) {\n        if (!partial.isSupported(DateTimeFieldType.dayOfMonth())) {\n            int year = values[DateTimeFieldType.year().getFieldIndex()];\n            int month = values[DateTimeFieldType.monthOfYear().getFieldIndex()];\n            int newMonth = iChronology.monthOfYear().add(month, valueToAdd);\n            // Handle leap years on February 29th\n            int maxDay = iChronology.dayOfMonth().getMaximumValue(year, newMonth);\n            int day = Math.min(values[DateTimeFieldType.dayOfWeek().getFieldIndex()], maxDay);\n            return new int[]{year, newMonth, day};\n        } else {\n            // Handle addition by a number of months\n            MutableDateTime mut = new MutableDateTime(partial, iChronology);\n            int yearsToAdd = valueToAdd / 12;\n            int monthsToAdd = valueToAdd % 12;\n            mut.addYears(yearsToAdd);\n            mut.addMonths(monthsToAdd);\n            try {\n                return iChronology.get(partial, mut.getMillis());\n            } catch (IllegalArgumentException e) {\n                throw new IllegalArgumentException(\"Resulting date is invalid\", e);\n            }\n        }\n    }\n    // Let the superclass handle non-contiguous partials\n    return super.add(partial, fieldIndex, values, valueToAdd);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..a07df0f5 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,37 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // Overridden as superclass algorithm can't handle 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return Arrays.copyOf(values, values.length);\n+    }\n+    if (partial.isSupported(DateTimeFieldType.monthOfYear())) {\n+        if (!partial.isSupported(DateTimeFieldType.dayOfMonth())) {\n+            int year = values[DateTimeFieldType.year().getFieldIndex()];\n+            int month = values[DateTimeFieldType.monthOfYear().getFieldIndex()];\n+            int newMonth = iChronology.monthOfYear().add(month, valueToAdd);\n+            // Handle leap years on February 29th\n+            int maxDay = iChronology.dayOfMonth().getMaximumValue(year, newMonth);\n+            int day = Math.min(values[DateTimeFieldType.dayOfWeek().getFieldIndex()], maxDay);\n+            return new int[]{year, newMonth, day};\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            // Handle addition by a number of months\n+            MutableDateTime mut = new MutableDateTime(partial, iChronology);\n+            int yearsToAdd = valueToAdd / 12;\n+            int monthsToAdd = valueToAdd % 12;\n+            mut.addYears(yearsToAdd);\n+            mut.addMonths(monthsToAdd);\n+            try {\n+                return iChronology.get(partial, mut.getMillis());\n+            } catch (IllegalArgumentException e) {\n+                throw new IllegalArgumentException(\"Resulting date is invalid\", e);\n+            }\n         }\n     }\n+    // Let the superclass handle non-contiguous partials\n+    return super.add(partial, fieldIndex, values, valueToAdd);\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}