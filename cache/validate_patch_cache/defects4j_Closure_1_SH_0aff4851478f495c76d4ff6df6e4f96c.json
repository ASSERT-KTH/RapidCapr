{
    "patch": "    lastArg : for (Node argNode = argList.getFirstChild(); argNode != null; argNode = argNode.getNext()) {\n      Var var = fnScope.getVar(argNode.getString());\n      if (referenced.contains(var)) {\n        continue;\n      }\n\n      for (Node curNode = argNode.getNext(); curNode != null; curNode = curNode.getNext()) {\n        if (NodeUtil.getFunctionName(curNode) != null) {\n          // don't remove args if the following expression is a named function (x: function (a) { ... })\n          continue lastArg;\n        }\n      }\n\n      // Strip unreferenced args off the end of the function declaration.\n      argList.removeChild(argNode);\n      compiler.reportCodeChange();\n    }\n\n    if (modifyCallers) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b506448f 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,25 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    lastArg : for (Node argNode = argList.getFirstChild(); argNode != null; argNode = argNode.getNext()) {\n+      Var var = fnScope.getVar(argNode.getString());\n+      if (referenced.contains(var)) {\n+        continue;\n+      }\n+\n+      for (Node curNode = argNode.getNext(); curNode != null; curNode = curNode.getNext()) {\n+        if (NodeUtil.getFunctionName(curNode) != null) {\n+          // don't remove args if the following expression is a named function (x: function (a) { ... })\n+          continue lastArg;\n+        }\n+      }\n+\n+      // Strip unreferenced args off the end of the function declaration.\n+      argList.removeChild(argNode);\n+      compiler.reportCodeChange();\n+    }\n+\n+    if (modifyCallers) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}