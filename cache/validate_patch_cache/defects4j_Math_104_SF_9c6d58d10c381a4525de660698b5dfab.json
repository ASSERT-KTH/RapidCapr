{
    "patch": "public static double regularizedGamma(double a, double x) {\n    double lb = 0;\n    double ub = Double.POSITIVE_INFINITY;\n    double q = a;\n    double a1 = q;\n    double b1 = x + q + 1.0;\n    double a2 = x + 1.0;\n    double b2 = b1 * x;\n    double c2 = a2 * b1;\n    double h2 = 1.0;\n    double an = 0;\n    double bn = 1.0;\n    double convergingFactor = 1.0 / c2;\n    double psi = a1;\n\n    while (Math.abs((psi - an)/psi) > DEFAULT_EPSILON) {\n        an = psi;\n        double lambda = psi * (q - psi) * (x + q - psi) / c2;\n        psi = a2 * bn - b2 * an;\n        double dpsi = lambda * (an - psi);\n        double d2psi = -lambda * psi;\n        a2 = a1 + dpsi * h2;\n        h2 = 1.0 / (1.0 - d2psi * h2);\n        b2 = b1 + dpsi * h2;\n        c2 = c2 + d2psi / convergingFactor;\n        convergingFactor = c2 / Math.pow(b2, 2);\n        bn = b2 / convergingFactor;\n        a1 = a2;\n        b1 = b2;\n    }\n\n    double probabilitiesRatio = Math.exp(a * Math.log(x) - x - Gamma.logGamma(a));\n    return 1.0 - probabilitiesRatio * bn;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..ee871e21a 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,40 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    double lb = 0;\n+    double ub = Double.POSITIVE_INFINITY;\n+    double q = a;\n+    double a1 = q;\n+    double b1 = x + q + 1.0;\n+    double a2 = x + 1.0;\n+    double b2 = b1 * x;\n+    double c2 = a2 * b1;\n+    double h2 = 1.0;\n+    double an = 0;\n+    double bn = 1.0;\n+    double convergingFactor = 1.0 / c2;\n+    double psi = a1;\n+\n+    while (Math.abs((psi - an)/psi) > DEFAULT_EPSILON) {\n+        an = psi;\n+        double lambda = psi * (q - psi) * (x + q - psi) / c2;\n+        psi = a2 * bn - b2 * an;\n+        double dpsi = lambda * (an - psi);\n+        double d2psi = -lambda * psi;\n+        a2 = a1 + dpsi * h2;\n+        h2 = 1.0 / (1.0 - d2psi * h2);\n+        b2 = b1 + dpsi * h2;\n+        c2 = c2 + d2psi / convergingFactor;\n+        convergingFactor = c2 / Math.pow(b2, 2);\n+        bn = b2 / convergingFactor;\n+        a1 = a2;\n+        b1 = b2;\n+    }\n+\n+    double probabilitiesRatio = Math.exp(a * Math.log(x) - x - Gamma.logGamma(a));\n+    return 1.0 - probabilitiesRatio * bn;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}