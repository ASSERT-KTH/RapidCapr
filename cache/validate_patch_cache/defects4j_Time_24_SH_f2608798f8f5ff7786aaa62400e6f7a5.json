{
    "patch": "        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n            return millis;\n        } catch (IllegalFieldValueException e) {\n            boolean leapSecondError = false;\n            for (int i = 0; i < count; i++) {\n                try {\n                    millis = savedFields[i].set(millis, resetFields);\n                } catch (IllegalFieldValueException ex) {\n                    if (ex.getMessage().contains(\"Leap\")) {\n                        leapSecondError = true;\n                        if (text != null) {\n                            ex.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                        }\n                        throw ex;\n                    }\n                }\n            }\n            if (!leapSecondError) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            }\n            return millis;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..af717424 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,34 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+            }\n+            return millis;\n+        } catch (IllegalFieldValueException e) {\n+            boolean leapSecondError = false;\n+            for (int i = 0; i < count; i++) {\n+                try {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                } catch (IllegalFieldValueException ex) {\n+                    if (ex.getMessage().contains(\"Leap\")) {\n+                        leapSecondError = true;\n+                        if (text != null) {\n+                            ex.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                        }\n+                        throw ex;\n+                    }\n+                }\n+            }\n+            if (!leapSecondError) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                throw e;\n+            }\n+            return millis;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}