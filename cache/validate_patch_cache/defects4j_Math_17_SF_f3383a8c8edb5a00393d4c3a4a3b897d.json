{
    "patch": "    public Dfp multiply(final int x) {\n            if (isNaN()) {\n                return newInstance(getZero().getField(), digits, NaN);\n            }\n            Dfp result = newInstance(this);\n            for (int i = 0; i < field.getRadixDigits(); i++) {\n                result.mant[i] = result.mant[i] * x;\n            }\n            result.normalize();\n            return result.round();\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..1172619ea 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,15 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+            if (isNaN()) {\n+                return newInstance(getZero().getField(), digits, NaN);\n+            }\n+            Dfp result = newInstance(this);\n+            for (int i = 0; i < field.getRadixDigits(); i++) {\n+                result.mant[i] = result.mant[i] * x;\n+            }\n+            result.normalize();\n+            return result.round();\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}