{
    "patch": "public static Iterable<String> findCommonPrefix(List<String> words) {\n    if (words == null || words.isEmpty()) {\n        return Collections.emptyList();\n    }\n\n    String firstWord = words.get(0);\n    if (firstWord.isEmpty()) {\n        return Collections.emptyList();\n    }\n\n    List<String> prefixList = new ArrayList<>();\n    int prefixLength = firstWord.length();\n\n    for (int i = 1; i < words.size(); i++) {\n        String word = words.get(i);\n        if (word.isEmpty()) {\n            return Collections.emptyList();\n        }\n        prefixLength = Math.min(prefixLength, word.length());\n        for (int j = 0; j < prefixLength; j++) {\n            if (firstWord.charAt(j) != word.charAt(j)) {\n                prefixLength = j;\n                break;\n            }\n        }\n    }\n\n    if (prefixLength == 0) {\n        return Collections.emptyList();\n    }\n\n    return Collections.singleton(firstWord.substring(0, prefixLength));\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..10096e677 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,39 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Iterable<String> findCommonPrefix(List<String> words) {\n+    if (words == null || words.isEmpty()) {\n+        return Collections.emptyList();\n+    }\n+\n+    String firstWord = words.get(0);\n+    if (firstWord.isEmpty()) {\n+        return Collections.emptyList();\n+    }\n+\n+    List<String> prefixList = new ArrayList<>();\n+    int prefixLength = firstWord.length();\n+\n+    for (int i = 1; i < words.size(); i++) {\n+        String word = words.get(i);\n+        if (word.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+        prefixLength = Math.min(prefixLength, word.length());\n+        for (int j = 0; j < prefixLength; j++) {\n+            if (firstWord.charAt(j) != word.charAt(j)) {\n+                prefixLength = j;\n+                break;\n+            }\n+        }\n+    }\n+\n+    if (prefixLength == 0) {\n+        return Collections.emptyList();\n+    }\n+\n+    return Collections.singleton(firstWord.substring(0, prefixLength));\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}