{
    "patch": "public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n    double normU1 = u1.getNorm();\n    double normU2 = u2.getNorm();\n    double normV1 = v1.getNorm();\n    double normV2 = v2.getNorm();\n\n    if (normU1 == 0 || normU2 == 0 || normV1 == 0 || normV2 == 0) {\n        throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n    }\n\n    // create a normalized orthogonal basis {e1, e2, e3}\n    Vector3D e1 = u1.normalize();\n    Vector3D e3 = e1.crossProduct(u2).normalize();\n    Vector3D e2 = e3.crossProduct(e1);\n\n    // create a normalized orthogonal basis {f1, f2, f3}\n    Vector3D f1 = v1.normalize();\n    Vector3D f3 = f1.crossProduct(v2).normalize();\n    Vector3D f2 = f3.crossProduct(f1);\n\n    RealMatrix m = MatrixUtils.createRealMatrix(3, 3);\n\n    // compute matrix elements using the two orthogonal bases\n    for (int i = 0; i < 3; i++) {\n        m.setEntry(i, 0, e1.toArray()[i]);\n        m.setEntry(i, 1, e2.toArray()[i]);\n        m.setEntry(i, 2, e3.toArray()[i]);\n    }\n\n    RealMatrix mt = m.transpose();\n    RealMatrix n = MatrixUtils.createRealMatrix(3, 3);\n\n    for (int i = 0; i < 3; i++) {\n        n.setEntry(i, 0, f1.toArray()[i]);\n        n.setEntry(i, 1, f2.toArray()[i]);\n        n.setEntry(i, 2, f3.toArray()[i]);\n    }\n\n    RealMatrix result = mt.multiply(n);\n\n    double mTrace = result.getTrace();\n\n    if (mTrace > 0.0) {\n        double s = Math.sqrt(mTrace + 1.0);\n        q0 = 0.5 * s;\n        double sInv = 0.5 / s;\n        q1 = (result.getEntry(2, 1) - result.getEntry(1, 2)) * sInv;\n        q2 = (result.getEntry(0, 2) - result.getEntry(2, 0)) * sInv;\n        q3 = (result.getEntry(1, 0) - result.getEntry(0, 1)) * sInv;\n    } else {\n        int i = 0;\n        if (result.getEntry(1, 1) > result.getEntry(0, 0)) {\n            i = 1;\n        }\n        if (result.getEntry(2, 2) > result.getEntry(i, i)) {\n            i = 2;\n        }\n        int[] next = {1, 2, 0};\n        int j = next[i];\n        int k = next[j];\n        double s = Math.sqrt((result.getEntry(i, i) - (result.getEntry(j, j) + result.getEntry(k, k))) + 1.0);\n        double[] qt = {0.0, 0.0, 0.0};\n        qt[i] = 0.5 * s;\n        double invS = 0.5 / s;\n        qt[3] = (result.getEntry(k, j) - result.getEntry(j, k)) * invS;\n        qt[j] = (result.getEntry(j, i) + result.getEntry(i, j)) * invS;\n        qt[k] = (result.getEntry(k, i) + result.getEntry(i, k)) * invS;\n\n        q0 = qt[0];\n        q1 = qt[1];\n        q2 = qt[2];\n        q3 = qt[3];\n    }\n\n    // normalize the quaternion\n    double norm = Math.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);\n    q0 /= norm;\n    q1 /= norm;\n    q2 /= norm;\n    q3 /= norm;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\nindex 20f5b3486..c5beeb1de 100644\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n@@ -310,69 +310,87 @@ public class Rotation implements Serializable {\n    * @param v2 desired image of u2 by the rotation\n    * @exception IllegalArgumentException if the norm of one of the vectors is zero\n    */\n-  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n-\n-  // norms computation\n-  double u1u1 = u1.getNormSq();\n-  double u2u2 = u2.getNormSq();\n-  double v1v1 = v1.getNormSq();\n-  double v2v2 = v2.getNormSq();\n-  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n-    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n-  }\n+public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n+    double normU1 = u1.getNorm();\n+    double normU2 = u2.getNorm();\n+    double normV1 = v1.getNorm();\n+    double normV2 = v2.getNorm();\n \n-  // normalize v1 in order to have (v1'|v1') = (u1|u1)\n-  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n-\n-  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n-  double u1u2   = u1.dotProduct(u2);\n-  double v1v2   = v1.dotProduct(v2);\n-  double coeffU = u1u2 / u1u1;\n-  double coeffV = v1v2 / u1u1;\n-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n-  double alpha  = coeffU - beta * coeffV;\n-  v2 = new Vector3D(alpha, v1, beta, v2);\n-\n-  // preliminary computation\n-  Vector3D uRef  = u1;\n-  Vector3D vRef  = v1;\n-  Vector3D v1Su1 = v1.subtract(u1);\n-  Vector3D v2Su2 = v2.subtract(u2);\n-  Vector3D k     = v1Su1.crossProduct(v2Su2);\n-  Vector3D u3    = u1.crossProduct(u2);\n-  double c       = k.dotProduct(u3);\n-  if (c == 0) {\n-    // the (q1, q2, q3) vector is close to the (u1, u2) plane\n-    // we try other vectors\n-    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n-    Vector3D v3Su3 = v3.subtract(u3);\n-    k = v1Su1.crossProduct(v3Su3);\n-    Vector3D u2Prime = u1.crossProduct(u3);\n-    c = k.dotProduct(u2Prime);\n-\n-    if (c == 0) {\n-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n-      k = v2Su2.crossProduct(v3Su3);;\n-      c = k.dotProduct(u2.crossProduct(u3));;\n-\n-      if (c == 0) {\n-        // the (q1, q2, q3) vector is aligned with everything\n-        // this is really the identity rotation\n-        q0 = 1.0;\n-        q1 = 0.0;\n-        q2 = 0.0;\n-        q3 = 0.0;\n-        return;\n-      }\n+    if (normU1 == 0 || normU2 == 0 || normV1 == 0 || normV2 == 0) {\n+        throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n+    }\n+\n+    // create a normalized orthogonal basis {e1, e2, e3}\n+    Vector3D e1 = u1.normalize();\n+    Vector3D e3 = e1.crossProduct(u2).normalize();\n+    Vector3D e2 = e3.crossProduct(e1);\n \n-      // we will have to use u2 and v2 to compute the scalar part\n-      uRef = u2;\n-      vRef = v2;\n+    // create a normalized orthogonal basis {f1, f2, f3}\n+    Vector3D f1 = v1.normalize();\n+    Vector3D f3 = f1.crossProduct(v2).normalize();\n+    Vector3D f2 = f3.crossProduct(f1);\n \n+    RealMatrix m = MatrixUtils.createRealMatrix(3, 3);\n+\n+    // compute matrix elements using the two orthogonal bases\n+    for (int i = 0; i < 3; i++) {\n+        m.setEntry(i, 0, e1.toArray()[i]);\n+        m.setEntry(i, 1, e2.toArray()[i]);\n+        m.setEntry(i, 2, e3.toArray()[i]);\n     }\n \n-  }\n+    RealMatrix mt = m.transpose();\n+    RealMatrix n = MatrixUtils.createRealMatrix(3, 3);\n+\n+    for (int i = 0; i < 3; i++) {\n+        n.setEntry(i, 0, f1.toArray()[i]);\n+        n.setEntry(i, 1, f2.toArray()[i]);\n+        n.setEntry(i, 2, f3.toArray()[i]);\n+    }\n+\n+    RealMatrix result = mt.multiply(n);\n+\n+    double mTrace = result.getTrace();\n+\n+    if (mTrace > 0.0) {\n+        double s = Math.sqrt(mTrace + 1.0);\n+        q0 = 0.5 * s;\n+        double sInv = 0.5 / s;\n+        q1 = (result.getEntry(2, 1) - result.getEntry(1, 2)) * sInv;\n+        q2 = (result.getEntry(0, 2) - result.getEntry(2, 0)) * sInv;\n+        q3 = (result.getEntry(1, 0) - result.getEntry(0, 1)) * sInv;\n+    } else {\n+        int i = 0;\n+        if (result.getEntry(1, 1) > result.getEntry(0, 0)) {\n+            i = 1;\n+        }\n+        if (result.getEntry(2, 2) > result.getEntry(i, i)) {\n+            i = 2;\n+        }\n+        int[] next = {1, 2, 0};\n+        int j = next[i];\n+        int k = next[j];\n+        double s = Math.sqrt((result.getEntry(i, i) - (result.getEntry(j, j) + result.getEntry(k, k))) + 1.0);\n+        double[] qt = {0.0, 0.0, 0.0};\n+        qt[i] = 0.5 * s;\n+        double invS = 0.5 / s;\n+        qt[3] = (result.getEntry(k, j) - result.getEntry(j, k)) * invS;\n+        qt[j] = (result.getEntry(j, i) + result.getEntry(i, j)) * invS;\n+        qt[k] = (result.getEntry(k, i) + result.getEntry(i, k)) * invS;\n+\n+        q0 = qt[0];\n+        q1 = qt[1];\n+        q2 = qt[2];\n+        q3 = qt[3];\n+    }\n+\n+    // normalize the quaternion\n+    double norm = Math.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);\n+    q0 /= norm;\n+    q1 /= norm;\n+    q2 /= norm;\n+    q3 /= norm;\n+}\n \n   // compute the vectorial part\n   c = FastMath.sqrt(c);",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}