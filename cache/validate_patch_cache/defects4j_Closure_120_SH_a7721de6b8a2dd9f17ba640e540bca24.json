{
    "patch": "      Reference ref = getInitializingReference();\n      if (ref != null) {\n        // Make sure this reference is not in a loop.\n        for (BasicBlock block = ref.getBasicBlock();\n             block != null; block = block.getParent()) {\n          if (block.isFunction) {\n            break;\n          } else if (block.isLoop) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..b58d0df5 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,23 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      Reference ref = getInitializingReference();\n+      if (ref != null) {\n+        // Make sure this reference is not in a loop.\n+        for (BasicBlock block = ref.getBasicBlock();\n+             block != null; block = block.getParent()) {\n+          if (block.isFunction) {\n+            break;\n+          } else if (block.isLoop) {\n+            return false;\n+          }\n+        }\n+\n+        return true;\n+      }\n+\n+      return false;\n+    }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}