{
    "patch": "public static double regularizedGamma(double a, double x){\n    double epsilon = 0.000000000000001;\n    double maxIterations = 1000;\n    double term = 1 / a;\n    double sum = term;\n\n    for (int i = 1; i < maxIterations; i++){\n        term *= x / (a + i);\n        sum += term;\n        if (term < epsilon){\n            break;\n        }\n    }\n\n    return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n}\n\npublic static double regularizedGamma(double a, double x, double epsilon, double maxIterations){\n    double term = 1 / a;\n    double sum = term;\n\n    for (int i = 1; i < maxIterations; i++){\n        term *= x / (a + i);\n        sum += term;\n        if (term < epsilon){\n            break;\n        }\n    }\n\n    return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n}\n\npublic static double logGamma(double x){\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1)\n            + 24.01409822 / (x + 2) - 1.231739516 / (x + 3)\n            + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..38f14936d 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,45 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x){\n+    double epsilon = 0.000000000000001;\n+    double maxIterations = 1000;\n+    double term = 1 / a;\n+    double sum = term;\n+\n+    for (int i = 1; i < maxIterations; i++){\n+        term *= x / (a + i);\n+        sum += term;\n+        if (term < epsilon){\n+            break;\n+        }\n+    }\n+\n+    return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+}\n+\n+public static double regularizedGamma(double a, double x, double epsilon, double maxIterations){\n+    double term = 1 / a;\n+    double sum = term;\n+\n+    for (int i = 1; i < maxIterations; i++){\n+        term *= x / (a + i);\n+        sum += term;\n+        if (term < epsilon){\n+            break;\n+        }\n+    }\n+\n+    return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+}\n+\n+public static double logGamma(double x){\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1)\n+            + 24.01409822 / (x + 2) - 1.231739516 / (x + 3)\n+            + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}