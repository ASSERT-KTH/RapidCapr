{
    "patch": "\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\n        if(mock instanceof Factory) {\n            Factory factory = (Factory) mock;\n\n            Callback[] callbacks = factory.getCallbacks();\n            for (int i = 0; i < callbacks.length; i++) {\n                if (callbacks[i] instanceof MethodInterceptorFilter) {\n                    callbacks[i] = newFilter;\n                    factory.setCallbacks(callbacks);\n                    return;\n                }\n            }\n\n            Callback[] newCallbacks = new Callback[callbacks.length + 1];\n            newCallbacks[0] = newFilter;\n            System.arraycopy(callbacks, 0, newCallbacks, 1, callbacks.length);\n            factory.setCallbacks(newCallbacks);\n        } else if (mock instanceof MockAccess) {\n            ((MockAccess) mock).setMockitoInterceptor(newFilter);\n        } else {\n            throw new IllegalArgumentException(\"Cannot reset mock: \" + mock.getClass().getSimpleName() + \" is not a Mockito mock or spy\");\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..d7e065d0e 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,32 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+        if(mock instanceof Factory) {\n+            Factory factory = (Factory) mock;\n+\n+            Callback[] callbacks = factory.getCallbacks();\n+            for (int i = 0; i < callbacks.length; i++) {\n+                if (callbacks[i] instanceof MethodInterceptorFilter) {\n+                    callbacks[i] = newFilter;\n+                    factory.setCallbacks(callbacks);\n+                    return;\n+                }\n+            }\n+\n+            Callback[] newCallbacks = new Callback[callbacks.length + 1];\n+            newCallbacks[0] = newFilter;\n+            System.arraycopy(callbacks, 0, newCallbacks, 1, callbacks.length);\n+            factory.setCallbacks(newCallbacks);\n+        } else if (mock instanceof MockAccess) {\n+            ((MockAccess) mock).setMockitoInterceptor(newFilter);\n+        } else {\n+            throw new IllegalArgumentException(\"Cannot reset mock: \" + mock.getClass().getSimpleName() + \" is not a Mockito mock or spy\");\n+        }\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}