{
    "patch": "    // Check if the parent of the node is an object literal setter or a default function.\n    boolean isObjectLitSetterOrDefaultFn =\n        NodeUtil.isGetOrSetKey(function.getParent()) || NodeUtil.isDefaultFunction(function);\n\n    Preconditions.checkState(function.isFunction() || isObjectLitSetterOrDefaultFn);\n\n    if (isObjectLitSetterOrDefaultFn) {\n      // The parameters object literal setters and default function parameters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n\n        // Check whether the argument is referenced or if it's being destructured\n        if (!referenced.contains(var) && !lastArg.isDestructuringPattern()) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b29ce134 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,30 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Check if the parent of the node is an object literal setter or a default function.\n+    boolean isObjectLitSetterOrDefaultFn =\n+        NodeUtil.isGetOrSetKey(function.getParent()) || NodeUtil.isDefaultFunction(function);\n+\n+    Preconditions.checkState(function.isFunction() || isObjectLitSetterOrDefaultFn);\n+\n+    if (isObjectLitSetterOrDefaultFn) {\n+      // The parameters object literal setters and default function parameters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+\n+        // Check whether the argument is referenced or if it's being destructured\n+        if (!referenced.contains(var) && !lastArg.isDestructuringPattern()) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}