{
    "patch": "            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // Save the original vertex.\n            final RealPointValuePair[] original = simplex.clone();\n            final RealPointValuePair best = original[0];\n\n            // Perform a reflection step.\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // Compute the expanded simplex.\n                final RealPointValuePair[] expandedSimplex = simplex.clone();\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // Accept the reflected simplex.\n                    simplex = expandedSimplex;\n                } else {\n                    simplex = reflectedToPointValuePair(reflected.getPoint(), expandedSimplex);\n                }\n\n                // Check for convergence.\n                final double range = simplex[simplex.length - 1].getValue() - simplex[0].getValue();\n                final double yTol = getRelativeThreshold(range);\n                final double vBest = best.getValue();\n                final double vRet = reflected.getValue();\n                if (Math.abs(vBest - vRet) <= getAbsoluteThreshold() &&\n                    range <= yTol * getAbsoluteThreshold()) {\n                    return;\n                }\n\n            } else {\n\n                // Compute the contracted simplex.\n                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // Accept the contracted simplex.\n                    simplex = contractedToPointValuePair(contracted.getPoint(), original);\n                } else {\n\n                    boolean shrink = true;\n                    for (int i = 1; i < original.length; i++) {\n                        if (comparator.compare(contracted, original[i]) >= 0) {\n                            shrink = false;\n                            break;\n                        }\n                    }\n\n                    if (shrink) {\n                        simplex = contractAndShrink(original, comparator);\n                    } else {\n                        simplex = contractedToPointValuePair(contracted.getPoint(), original);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Evaluates a new simplex based on the reflection coefficient.\n     *\n     * @param original Simplex.\n     * @param coeff Reflection coefficient.\n     * @param comparator Comparator to select the best vertex.\n     * @return a point/value pair that should be better than the best\n     * vertex of the simplex or {@code null} if such a point does not exist\n     * or could not be evaluated.\n     * @throws FunctionEvaluationException if the function cannot be evaluated due\n     * to an argument out of bounds, or other error.\n     * @throws OptimizationException if the maximal number of evaluations is exceeded.\n     * @throws IllegalArgumentException if {@code original} does not contain at\n     * least two points.\n     */\n    private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original,\n                                                  final double coeff,\n                                                  final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        final double[] xSmallest = original[0].getPointRef();\n        final int n = xSmallest.length;\n\n        // Calculate the centroid.\n        for (int i = 1; i <= n; i++) {\n            centroid[i - 1] = 0;\n            for (int j = 0; j < original.length - 1; j++) {\n                centroid[i - 1] += original[j].getPoint()[i - 1];\n            }\n            centroid[i - 1] /= n;\n        }\n\n        // Create the new point.\n        final double[] xNew = new double[n];\n        for (int i = 0; i < n; i++) {\n            xNew[i] = centroid[i] + coeff * (centroid[i] - xSmallest[i]);\n        }\n\n        final RealPointValuePair reflected = new RealPointValuePair(xNew,\n                                                                     computeObjectiveValue(xNew),\n                                                                     false);\n\n        // Check if the reflected point is better than all but one of the original points.\n        // If not, then return null. If yes, then return the reflected point.\n        int worseCount = 0;\n        for (int i = 1; i < original.length; i++) {\n            if (comparator.compare(reflected, original[i]) >= 0) {\n                worseCount++;\n            }\n            if (worseCount > 1) {\n                return null;\n            }\n        }\n\n        return reflected;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..ea7820d30 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,122 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n \n             incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n+            // Save the original vertex.\n+            final RealPointValuePair[] original = simplex.clone();\n             final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n+            // Perform a reflection step.\n             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n             if (comparator.compare(reflected, best) < 0) {\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n+                // Compute the expanded simplex.\n+                final RealPointValuePair[] expandedSimplex = simplex.clone();\n                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                 if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                    // Accept the reflected simplex.\n+                    simplex = expandedSimplex;\n+                } else {\n+                    simplex = reflectedToPointValuePair(reflected.getPoint(), expandedSimplex);\n                 }\n \n-                return;\n+                // Check for convergence.\n+                final double range = simplex[simplex.length - 1].getValue() - simplex[0].getValue();\n+                final double yTol = getRelativeThreshold(range);\n+                final double vBest = best.getValue();\n+                final double vRet = reflected.getValue();\n+                if (Math.abs(vBest - vRet) <= getAbsoluteThreshold() &&\n+                    range <= yTol * getAbsoluteThreshold()) {\n+                    return;\n+                }\n \n+            } else {\n+\n+                // Compute the contracted simplex.\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // Accept the contracted simplex.\n+                    simplex = contractedToPointValuePair(contracted.getPoint(), original);\n+                } else {\n+\n+                    boolean shrink = true;\n+                    for (int i = 1; i < original.length; i++) {\n+                        if (comparator.compare(contracted, original[i]) >= 0) {\n+                            shrink = false;\n+                            break;\n+                        }\n+                    }\n+\n+                    if (shrink) {\n+                        simplex = contractAndShrink(original, comparator);\n+                    } else {\n+                        simplex = contractedToPointValuePair(contracted.getPoint(), original);\n+                    }\n+                }\n             }\n+        }\n+    }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+    /**\n+     * Evaluates a new simplex based on the reflection coefficient.\n+     *\n+     * @param original Simplex.\n+     * @param coeff Reflection coefficient.\n+     * @param comparator Comparator to select the best vertex.\n+     * @return a point/value pair that should be better than the best\n+     * vertex of the simplex or {@code null} if such a point does not exist\n+     * or could not be evaluated.\n+     * @throws FunctionEvaluationException if the function cannot be evaluated due\n+     * to an argument out of bounds, or other error.\n+     * @throws OptimizationException if the maximal number of evaluations is exceeded.\n+     * @throws IllegalArgumentException if {@code original} does not contain at\n+     * least two points.\n+     */\n+    private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original,\n+                                                  final double coeff,\n+                                                  final Comparator<RealPointValuePair> comparator)\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+\n+        final double[] xSmallest = original[0].getPointRef();\n+        final int n = xSmallest.length;\n \n-            // check convergence\n-                return;\n+        // Calculate the centroid.\n+        for (int i = 1; i <= n; i++) {\n+            centroid[i - 1] = 0;\n+            for (int j = 0; j < original.length - 1; j++) {\n+                centroid[i - 1] += original[j].getPoint()[i - 1];\n             }\n+            centroid[i - 1] /= n;\n+        }\n \n+        // Create the new point.\n+        final double[] xNew = new double[n];\n+        for (int i = 0; i < n; i++) {\n+            xNew[i] = centroid[i] + coeff * (centroid[i] - xSmallest[i]);\n         }\n \n-    }\n+        final RealPointValuePair reflected = new RealPointValuePair(xNew,\n+                                                                     computeObjectiveValue(xNew),\n+                                                                     false);\n+\n+        // Check if the reflected point is better than all but one of the original points.\n+        // If not, then return null. If yes, then return the reflected point.\n+        int worseCount = 0;\n+        for (int i = 1; i < original.length; i++) {\n+            if (comparator.compare(reflected, original[i]) >= 0) {\n+                worseCount++;\n+            }\n+            if (worseCount > 1) {\n+                return null;\n+            }\n+        }\n+\n+        return reflected;\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}