{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n    // Ignore empty nodes and comma nodes\n    if (n.isEmpty() || n.isComma()) {\n        return;\n    }\n\n    // Ignore nodes without a parent, and ignore the first child of a call node\n    if (parent == null || (parent.getType() == Token.CALL && parent.getFirstChild() == n)) {\n        return;\n    }\n\n    // Ignore nodes with a comma parent, unless the parent is a call node with\n    // this node as its first child and second child being a name \"eval\"\n    if (parent.getType() == Token.COMMA && !(\n        parent.getParent().getType() == Token.CALL &&\n        parent.getParent().getFirstChild() == parent &&\n        parent.getNext() == null &&\n        parent.getChildCount() == 2 &&\n        parent.getLastChild().isName() &&\n        \"eval\".equals(parent.getLastChild().getString())\n    )) {\n        return;\n    }\n\n    // If parent is not a BLOCK or EXPR_RESULT node or a first or third child of a for loop,\n    // we expect it to be a simple expression\n    if (!(parent.getType() == Token.BLOCK || parent.getType() == Token.EXPR_RESULT\n        || (parent.getType() == Token.FOR && parent.getChildCount() == 4\n               && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())))) {\n\n        if (NodeUtil.isExpressionNode(n)) {\n            t.getCompiler().report(\n                t.makeError(n, level, USELESS_CODE_ERROR, \"This code lacks side-effects. Is there a bug?\"));\n        }\n        return;\n    }\n\n    // Traverse up through ancestors to find an ancestor node that is a BLOCK or EXPR_RESULT.\n    // If a non-simple expression or anything with side effects is found between the node and ancestor node,\n    // we do not report the node\n    Node ancestor = parent;\n    boolean ancestorFound = false;\n    while (ancestor != null) {\n        int ancestorType = ancestor.getType();\n        if (ancestorType == Token.EXPR_RESULT || ancestorType == Token.BLOCK) {\n            ancestorFound = true;\n            break;\n        }\n        // Do not traverse up comma nodes\n        if (ancestorType == Token.COMMA) {\n            return;\n        }\n        if (ancestorType != Token.FUNCTION && !NodeUtil.isControlStructure(ancestor.getParent())) {\n            // Check for side effects\n            if (NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n                return;\n            }\n        }\n        ancestor = ancestor.getParent();\n    }\n\n    // If ancestor node is already found, it means the node is inside an EXPR_RESULT or BLOCK node, therefore it is simply an unused expression/statement and we can report it\n    if (ancestorFound) {\n        if (!NodeUtil.isStatement(n) && !NodeUtil.isSimpleOperatorType(n.getType())) {\n            t.getCompiler().report(\n                t.makeError(n, level, USELESS_CODE_ERROR, \"This code lacks side-effects. Is there a bug?\"));\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex b9aa412c..9bfcb603 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,78 +81,75 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n-      return;\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    // Ignore empty nodes and comma nodes\n+    if (n.isEmpty() || n.isComma()) {\n+        return;\n+    }\n+\n+    // Ignore nodes without a parent, and ignore the first child of a call node\n+    if (parent == null || (parent.getType() == Token.CALL && parent.getFirstChild() == n)) {\n+        return;\n     }\n \n-    if (parent == null) {\n-      return;\n+    // Ignore nodes with a comma parent, unless the parent is a call node with\n+    // this node as its first child and second child being a name \"eval\"\n+    if (parent.getType() == Token.COMMA && !(\n+        parent.getParent().getType() == Token.CALL &&\n+        parent.getParent().getFirstChild() == parent &&\n+        parent.getNext() == null &&\n+        parent.getChildCount() == 2 &&\n+        parent.getLastChild().isName() &&\n+        \"eval\".equals(parent.getLastChild().getString())\n+    )) {\n+        return;\n     }\n \n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (parent.getType() == Token.COMMA) {\n-      Node gramps = parent.getParent();\n-      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n-      return;\n+    // If parent is not a BLOCK or EXPR_RESULT node or a first or third child of a for loop,\n+    // we expect it to be a simple expression\n+    if (!(parent.getType() == Token.BLOCK || parent.getType() == Token.EXPR_RESULT\n+        || (parent.getType() == Token.FOR && parent.getChildCount() == 4\n+               && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())))) {\n+\n+        if (NodeUtil.isExpressionNode(n)) {\n+            t.getCompiler().report(\n+                t.makeError(n, level, USELESS_CODE_ERROR, \"This code lacks side-effects. Is there a bug?\"));\n         }\n+        return;\n     }\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA)\n-            continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n-            return;\n-          else\n+    // Traverse up through ancestors to find an ancestor node that is a BLOCK or EXPR_RESULT.\n+    // If a non-simple expression or anything with side effects is found between the node and ancestor node,\n+    // we do not report the node\n+    Node ancestor = parent;\n+    boolean ancestorFound = false;\n+    while (ancestor != null) {\n+        int ancestorType = ancestor.getType();\n+        if (ancestorType == Token.EXPR_RESULT || ancestorType == Token.BLOCK) {\n+            ancestorFound = true;\n             break;\n         }\n-      }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n-           n == parent.getFirstChild().getNext().getNext())) {\n-      } else {\n-      return;\n-      }\n+        // Do not traverse up comma nodes\n+        if (ancestorType == Token.COMMA) {\n+            return;\n+        }\n+        if (ancestorType != Token.FUNCTION && !NodeUtil.isControlStructure(ancestor.getParent())) {\n+            // Check for side effects\n+            if (NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n+                return;\n+            }\n+        }\n+        ancestor = ancestor.getParent();\n     }\n \n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (!isResultUsed &&\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n-        return;\n-      } else if (n.isExprResult()) {\n-        return;\n-      }\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n-      }\n-\n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n-      }\n+    // If ancestor node is already found, it means the node is inside an EXPR_RESULT or BLOCK node, therefore it is simply an unused expression/statement and we can report it\n+    if (ancestorFound) {\n+        if (!NodeUtil.isStatement(n) && !NodeUtil.isSimpleOperatorType(n.getType())) {\n+            t.getCompiler().report(\n+                t.makeError(n, level, USELESS_CODE_ERROR, \"This code lacks side-effects. Is there a bug?\"));\n+        }\n     }\n-  }\n+}\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}