{
    "patch": "private static boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node child = n.getFirstChild();\n    if (child.getType() == Token.EXPR_RESULT) {\n      Node stmt = child.getFirstChild();\n      if (stmt.getType() == Token.IF) {\n        Node condition = stmt.getFirstChild();\n        if (condition.getType() == Token.NOT\n            && condition.hasOneChild()\n            && condition.getFirstChild().getType() == Token.NAME) {\n          Node thenBlock = condition.getNext();\n          if (thenBlock != null\n              && thenBlock.getType() == Token.BLOCK\n              && thenBlock.hasOneChild()) {\n            Node thenChild = thenBlock.getFirstChild();\n            if (thenChild.getType() == Token.EXPR_RESULT) {\n              Node thenExpr = thenChild.getFirstChild();\n              if (thenExpr.getType() == Token.OR) {\n                Node left = thenExpr.getFirstChild();\n                Node right = thenExpr.getLastChild();\n                if (left.getType() == Token.NAME\n                    && right.getType() == Token.CALL\n                    && right.getFirstChild().getType() == Token.NAME\n                    && right.getNext() == null) {\n                  String funcName = right.getFirstChild().getString();\n                  if (funcName != null && !funcName.startsWith(\"on\")) {\n                    return true;\n                  }\n                }\n              }\n            }\n          }\n        }\n      } else {\n        return NodeUtil.isExpressionNode(child);\n      }\n    } else {\n      return NodeUtil.isExpressionNode(child);\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..c8fe53ce 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,48 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private static boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    Node child = n.getFirstChild();\n+    if (child.getType() == Token.EXPR_RESULT) {\n+      Node stmt = child.getFirstChild();\n+      if (stmt.getType() == Token.IF) {\n+        Node condition = stmt.getFirstChild();\n+        if (condition.getType() == Token.NOT\n+            && condition.hasOneChild()\n+            && condition.getFirstChild().getType() == Token.NAME) {\n+          Node thenBlock = condition.getNext();\n+          if (thenBlock != null\n+              && thenBlock.getType() == Token.BLOCK\n+              && thenBlock.hasOneChild()) {\n+            Node thenChild = thenBlock.getFirstChild();\n+            if (thenChild.getType() == Token.EXPR_RESULT) {\n+              Node thenExpr = thenChild.getFirstChild();\n+              if (thenExpr.getType() == Token.OR) {\n+                Node left = thenExpr.getFirstChild();\n+                Node right = thenExpr.getLastChild();\n+                if (left.getType() == Token.NAME\n+                    && right.getType() == Token.CALL\n+                    && right.getFirstChild().getType() == Token.NAME\n+                    && right.getNext() == null) {\n+                  String funcName = right.getFirstChild().getString();\n+                  if (funcName != null && !funcName.startsWith(\"on\")) {\n+                    return true;\n+                  }\n+                }\n+              }\n+            }\n+          }\n+        }\n+      } else {\n+        return NodeUtil.isExpressionNode(child);\n       }\n+    } else {\n+      return NodeUtil.isExpressionNode(child);\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}