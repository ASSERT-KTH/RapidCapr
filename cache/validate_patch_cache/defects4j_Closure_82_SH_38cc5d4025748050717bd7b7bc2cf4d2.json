{
    "patch": "    boolean isEmpty = false;\n    if (isNoType() || isNoObjectType() || isNoResolvedType()) {\n        isEmpty = true;\n    } else if (isUnionType()) {\n        for (TypeMirror type : ((UnionType) this).getAlternatives()) {\n            if (!type.isEmptyType()) {\n                return false;\n            }\n        }\n        isEmpty = true;\n    } else if (this.getKind() == TypeKind.ARRAY) {\n        ArrayType arrayType = (ArrayType) this;\n        if (arrayType.getComponentType().isEmptyType()) {\n            isEmpty = true;\n        }\n    }\n    return isEmpty;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex 32a0b250..d663f4ac 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -160,7 +160,23 @@ public abstract class JSType implements Serializable {\n   }\n \n   public final boolean isEmptyType() {\n-    return isNoType() || isNoObjectType() || isNoResolvedType();\n+    boolean isEmpty = false;\n+    if (isNoType() || isNoObjectType() || isNoResolvedType()) {\n+        isEmpty = true;\n+    } else if (isUnionType()) {\n+        for (TypeMirror type : ((UnionType) this).getAlternatives()) {\n+            if (!type.isEmptyType()) {\n+                return false;\n+            }\n+        }\n+        isEmpty = true;\n+    } else if (this.getKind() == TypeKind.ARRAY) {\n+        ArrayType arrayType = (ArrayType) this;\n+        if (arrayType.getComponentType().isEmptyType()) {\n+            isEmpty = true;\n+        }\n+    }\n+    return isEmpty;\n   }\n \n   public boolean isNumberObjectType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}