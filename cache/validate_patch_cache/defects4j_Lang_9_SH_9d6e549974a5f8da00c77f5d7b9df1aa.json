{
    "patch": "if (collector.isEmpty() || (nextStrategy == null && !currentStrategy.addRegex(this, regex)) || (nextStrategy != null && !nextStrategy.addRegex(this, regex))) {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n}\n\nif (nextStrategy == null) {\n    collector.add(currentStrategy);\n} else {\n    collector.add(currentStrategy);\n    collector.add(nextStrategy);\n    currentStrategy = nextStrategy;\n    while (patternMatcher.regionEnd() - patternMatcher.end() > 0) {\n        patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n        if (patternMatcher.lookingAt()) {\n            String nextFormatField = patternMatcher.group();\n            nextStrategy = getStrategy(nextFormatField);\n            if (nextStrategy == null || !nextStrategy.addRegex(this, regex)) {\n                throw new IllegalArgumentException(\"Invalid pattern\");\n            }\n            collector.add(nextStrategy);\n            currentStrategy = nextStrategy;\n        } else {\n            break;\n        }\n    }\n}\ncurrentFormatField = null;\nstrategies = collector.toArray(new Strategy[0]);\nparsePattern = Pattern.compile(regex.toString());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..5c59aad9 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,34 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+if (collector.isEmpty() || (nextStrategy == null && !currentStrategy.addRegex(this, regex)) || (nextStrategy != null && !nextStrategy.addRegex(this, regex))) {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+}\n+\n+if (nextStrategy == null) {\n+    collector.add(currentStrategy);\n+} else {\n+    collector.add(currentStrategy);\n+    collector.add(nextStrategy);\n+    currentStrategy = nextStrategy;\n+    while (patternMatcher.regionEnd() - patternMatcher.end() > 0) {\n+        patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n+        if (patternMatcher.lookingAt()) {\n+            String nextFormatField = patternMatcher.group();\n+            nextStrategy = getStrategy(nextFormatField);\n+            if (nextStrategy == null || !nextStrategy.addRegex(this, regex)) {\n+                throw new IllegalArgumentException(\"Invalid pattern\");\n+            }\n+            collector.add(nextStrategy);\n+            currentStrategy = nextStrategy;\n+        } else {\n+            break;\n+        }\n+    }\n+}\n+currentFormatField = null;\n+strategies = collector.toArray(new Strategy[0]);\n+parsePattern = Pattern.compile(regex.toString());\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}