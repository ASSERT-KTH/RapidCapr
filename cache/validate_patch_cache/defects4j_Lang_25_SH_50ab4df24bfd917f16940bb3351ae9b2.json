{
    "patch": "try {\n    byte[] bs = (\"\\\\\" + PART2).getBytes(\"ISO-8859-1\");\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    for (int i = 0; i < bs.length; i++) {\n        if (bs[i] != '\\\\') {\n            out.write(bs[i]);\n        } else {\n            if (i == bs.length - 1) {\n                // ERROR:\n                // Should never happen!\n                // The last character of a groovy string\n                // cannot be a single backslash. Should\n                // always be a closing quote\n                success = false; // <--- fix: added assignment operator\n                break;\n            }\n            switch (bs[++i]) {\n                case '\"':\n                    out.write(34);\n                    break;\n                case '\\'':\n                    out.write(39);\n                    break;\n                case '\\\\':\n                    out.write(92);\n                    break;\n                case 'b':\n                    out.write(8);\n                    break;\n                case 'f':\n                    out.write(12);\n                    break;\n                case 'n':\n                    out.write(10);\n                    break;\n                case 'r':\n                    out.write(13);\n                    break;\n                case 't':\n                    out.write(9);\n                    break;\n                case 'u':\n                    out.write((byte) Integer.parseInt(\n                            (char)bs[++i] + \"\" +\n                            (char)bs[++i] + \"\" +\n                            (char)bs[++i] + \"\" +\n                            (char)bs[++i] + \"\", 16));\n                    break;\n                default:\n                    // ERROR:\n                    // Should never happen!\n                    // We have already escaped all\n                    // special character in the string\n                    success = false; // <--- fix: added assignment operator\n                    break;\n            }\n        }\n    }\n} catch (UnsupportedEncodingException e) {\n    // Should never happen\n    success = false; // <--- fix: added assignment operator\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}