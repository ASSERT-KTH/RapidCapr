{
    "patch": "      double s1 = v1.getNormSq();\n      double s2 = v2.getNormSq();\n      Vector3D w1 = s2 > s1 ? v1 : v2;\n      Vector3D w2 = s2 > s1 ? v2 : v1;\n\n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n      double c1 = w1.dotProduct(w2);\n      double c2 = w2.getNormSq();\n      double factor = FastMath.rint(c1 / c2);\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      Vector3D v3 = new Vector3D(w1.x - factor * w2.x, w1.y - factor * w2.y, w1.z - factor * w2.z);\n      return new Vector3D(v3.y * w2.z - v3.z * w2.y, v3.z * w2.x - v3.x * w2.z, v3.x * w2.y - v3.y * w2.x);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..62aae362b 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,11 +454,10 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n+      double s1 = v1.getNormSq();\n+      double s2 = v2.getNormSq();\n+      Vector3D w1 = s2 > s1 ? v1 : v2;\n+      Vector3D w2 = s2 > s1 ? v2 : v1;\n \n       // we reduce cancellation errors by preconditioning,\n       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n@@ -467,12 +466,13 @@ public class Vector3D implements Serializable {\n       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n \n       // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n+      double c1 = w1.dotProduct(w2);\n+      double c2 = w2.getNormSq();\n+      double factor = FastMath.rint(c1 / c2);\n \n       // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+      Vector3D v3 = new Vector3D(w1.x - factor * w2.x, w1.y - factor * w2.y, w1.z - factor * w2.z);\n+      return new Vector3D(v3.y * w2.z - v3.z * w2.y, v3.z * w2.x - v3.x * w2.z, v3.x * w2.y - v3.y * w2.x);\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}