{
    "patch": "        return StringDescription.toString(m).equals(\n                arg == null ? \"null\" :\n                        arg.getClass().isArray() ? Arrays.deepToString(new Object[]{arg}) : arg.toString()\n        );",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..27ba27e13 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,10 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+        return StringDescription.toString(m).equals(\n+                arg == null ? \"null\" :\n+                        arg.getClass().isArray() ? Arrays.deepToString(new Object[]{arg}) : arg.toString()\n+        );\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: incompatible types: unexpected return value",
    "test_result": "ERROR"
}