{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int blockSize = 50; // set the size of each block\n    final int n = m.getRowDimension();\n    final RealMatrix sqrtm = new Array2DRowRealMatrix(n, n);\n    \n    for (int i = 0; i < n; i += blockSize) {\n        int p = Math.min(n - i, blockSize);\n        final RealMatrix block = m.getSubMatrix(i, i + p - 1, i, i + p - 1);\n        final EigenDecomposition dec = new EigenDecomposition(block);\n        final RealMatrix sqrtBlock = dec.getSquareRoot();\n        sqrtm.setSubMatrix(sqrtBlock.getData(), i, i);\n    }\n    \n    return sqrtm;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..0265b025e 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,19 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int blockSize = 50; // set the size of each block\n+    final int n = m.getRowDimension();\n+    final RealMatrix sqrtm = new Array2DRowRealMatrix(n, n);\n+    \n+    for (int i = 0; i < n; i += blockSize) {\n+        int p = Math.min(n - i, blockSize);\n+        final RealMatrix block = m.getSubMatrix(i, i + p - 1, i, i + p - 1);\n+        final EigenDecomposition dec = new EigenDecomposition(block);\n+        final RealMatrix sqrtBlock = dec.getSquareRoot();\n+        sqrtm.setSubMatrix(sqrtBlock.getData(), i, i);\n     }\n+    \n+    return sqrtm;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}