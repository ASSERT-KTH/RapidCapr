{
    "patch": "      Node grandparent = parent.getParent();\n      if (grandparent != null && grandparent.getType() == Token.CALL &&\n          (grandparent.getFirstChild().getType() == Token.GETPROP &&\n           (grandparent.getFirstChild().getLastChild().getString().equals(\"bind\") ||\n            grandparent.getFirstChild().getLastChild().getString().equals(\"apply\") ||\n            grandparent.getFirstChild().getLastChild().getString().equals(\"call\")) ||\n           grandparent.getFirstChild().getType() == Token.NAME &&\n           (grandparent.getFirstChild().getString().equals(\"bind\") ||\n            grandparent.getFirstChild().getString().equals(\"apply\") ||\n            grandparent.getFirstChild().getString().equals(\"call\"))) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isGet(parent) && parent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n          // Always traverse the left side of the assignment. To handle\n          // nested assignments properly (e.g., (a = this).property = c;),\n          // assignLhsChild should not be overridden.\n          if (assignLhsChild == null) {\n            assignLhsChild = lhs;\n          }\n        } else {\n          // Only traverse the right side if it's not an assignment to a prototype\n          // property or subproperty.\n          if (NodeUtil.isGet(lhs)) {\n            if (lhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n            Node llhs = lhs.getFirstChild();\n            if (llhs.getType() == Token.GETPROP &&\n                llhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..57993f1f 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,50 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node grandparent = parent.getParent();\n+      if (grandparent != null && grandparent.getType() == Token.CALL &&\n+          (grandparent.getFirstChild().getType() == Token.GETPROP &&\n+           (grandparent.getFirstChild().getLastChild().getString().equals(\"bind\") ||\n+            grandparent.getFirstChild().getLastChild().getString().equals(\"apply\") ||\n+            grandparent.getFirstChild().getLastChild().getString().equals(\"call\")) ||\n+           grandparent.getFirstChild().getType() == Token.NAME &&\n+           (grandparent.getFirstChild().getString().equals(\"bind\") ||\n+            grandparent.getFirstChild().getString().equals(\"apply\") ||\n+            grandparent.getFirstChild().getString().equals(\"call\"))) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent) && parent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n+        return false;\n+      }\n+\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+          // Always traverse the left side of the assignment. To handle\n+          // nested assignments properly (e.g., (a = this).property = c;),\n+          // assignLhsChild should not be overridden.\n+          if (assignLhsChild == null) {\n+            assignLhsChild = lhs;\n+          }\n+        } else {\n+          // Only traverse the right side if it's not an assignment to a prototype\n+          // property or subproperty.\n+          if (NodeUtil.isGet(lhs)) {\n+            if (lhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+            Node llhs = lhs.getFirstChild();\n+            if (llhs.getType() == Token.GETPROP &&\n+                llhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}