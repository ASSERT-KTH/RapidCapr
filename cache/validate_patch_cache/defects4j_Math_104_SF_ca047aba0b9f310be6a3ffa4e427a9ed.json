{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.FastMath;\n\npublic static double regularizedGammaP(double a, double x) {\n    final double epsilon = 1e-15;  // tolerance for stopping iterations\n    final int maxIterations = 1000;  // max iterations\n\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException(\"Invalid input argument\");\n    }\n\n    double p = Gamma.regularizedGammaQ(a, x);\n\n    // if p is very close to 0, return 0\n    if (p < epsilon) {\n        return 0;\n    }\n\n    double logP = FastMath.log(p);\n    double term = 1.0 / a;\n    double sum = term;\n    int i = 1;\n\n    // iterative calculation\n    while (i < maxIterations) {\n        term *= x / (a + i);\n        sum += term;\n        double logTerm = FastMath.log(term);\n        if (logTerm < -Double.MAX_VALUE) {\n            break;\n        }\n        logP += logTerm;\n        if (Math.abs(logTerm) < epsilon) {\n            break;\n        }\n        i++;\n    }\n\n    // if the iterative calculation does not converge, return NaN\n    if (i == maxIterations) {\n        return Double.NaN;\n    }\n\n    return FastMath.exp(logP);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..275cc0efa 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,51 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.FastMath;\n+\n+public static double regularizedGammaP(double a, double x) {\n+    final double epsilon = 1e-15;  // tolerance for stopping iterations\n+    final int maxIterations = 1000;  // max iterations\n+\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException(\"Invalid input argument\");\n+    }\n+\n+    double p = Gamma.regularizedGammaQ(a, x);\n+\n+    // if p is very close to 0, return 0\n+    if (p < epsilon) {\n+        return 0;\n+    }\n+\n+    double logP = FastMath.log(p);\n+    double term = 1.0 / a;\n+    double sum = term;\n+    int i = 1;\n+\n+    // iterative calculation\n+    while (i < maxIterations) {\n+        term *= x / (a + i);\n+        sum += term;\n+        double logTerm = FastMath.log(term);\n+        if (logTerm < -Double.MAX_VALUE) {\n+            break;\n+        }\n+        logP += logTerm;\n+        if (Math.abs(logTerm) < epsilon) {\n+            break;\n+        }\n+        i++;\n+    }\n+\n+    // if the iterative calculation does not converge, return NaN\n+    if (i == maxIterations) {\n+        return Double.NaN;\n+    }\n+\n+    return FastMath.exp(logP);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}