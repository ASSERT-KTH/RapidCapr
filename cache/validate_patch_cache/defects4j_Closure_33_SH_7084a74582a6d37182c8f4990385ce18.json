{
    "patch": "if (!constraintObj.isNominalConstructor()) {\n  return;\n}\nJSType nominalType = constraintObj.toJSType();\nfor (String typeName : nominalType.getRegistry().getTypeNames()) {\n  FunctionType constructorType =\n      nominalType.getRegistry().getConstructor(typeName);\n  if (constructorType != null) {\n    ObjectType instanceType = constructorType.getInstanceType();\n    if (instanceType != null) {\n      matchConstraint(instanceType);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..858707c7 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,20 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+if (!constraintObj.isNominalConstructor()) {\n+  return;\n+}\n+JSType nominalType = constraintObj.toJSType();\n+for (String typeName : nominalType.getRegistry().getTypeNames()) {\n+  FunctionType constructorType =\n+      nominalType.getRegistry().getConstructor(typeName);\n+  if (constructorType != null) {\n+    ObjectType instanceType = constructorType.getInstanceType();\n+    if (instanceType != null) {\n+      matchConstraint(instanceType);\n+    }\n+  }\n+}\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}