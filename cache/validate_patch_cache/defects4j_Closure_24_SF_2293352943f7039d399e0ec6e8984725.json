{
    "patch": "      Node scriptNode = t.getOriginalNode();\n      Preconditions.checkNotNull(scriptNode);\n      Node scopeNode = NodeUtil.getEnclosingNode(\n          t.getClosestHoistScope(), Token.SCRIPT);\n      Preconditions.checkNotNull(scopeNode);\n\n      if (!scriptNode.equals(scopeNode)) {\n        report(t, t.getClosestHoistScope(), GOOG_SCOPE_MISPLACED);\n        return;\n      }\n\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        int type = n.getType();\n        if (type != Token.NAME) {\n          continue;\n        }\n        Node parent = n.getParent();\n\n        if (parent != null && parent.isVar()) {\n          String name = n.getString();\n          boolean isAlias = n.hasChildren() && n.getFirstChild().isQualifiedName();\n\n          if (isAlias) {\n            Var aliasVar = scope.getVar(name);\n            if (aliasVar == null || aliasVar.getInitialValue() == null) {\n              report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n              continue;\n            }\n            aliases.put(name, aliasVar);\n            String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n            transformation.addAlias(name, qualifiedName);\n          } else {\n            // This is not an alias, so it should not appear in the namespace.\n            if (NodeUtil.isWithinFunction(n)) {\n              continue;\n            } else {\n              report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..68730712 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,46 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n+      Node scriptNode = t.getOriginalNode();\n+      Preconditions.checkNotNull(scriptNode);\n+      Node scopeNode = NodeUtil.getEnclosingNode(\n+          t.getClosestHoistScope(), Token.SCRIPT);\n+      Preconditions.checkNotNull(scopeNode);\n+\n+      if (!scriptNode.equals(scopeNode)) {\n+        report(t, t.getClosestHoistScope(), GOOG_SCOPE_MISPLACED);\n+        return;\n+      }\n+\n       for (Var v : scope.getVarIterable()) {\n         Node n = v.getNode();\n         int type = n.getType();\n+        if (type != Token.NAME) {\n+          continue;\n+        }\n         Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+\n+        if (parent != null && parent.isVar()) {\n           String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n-        }\n-      }\n-    }\n+          boolean isAlias = n.hasChildren() && n.getFirstChild().isQualifiedName();\n+\n+          if (isAlias) {\n+            Var aliasVar = scope.getVar(name);\n+            if (aliasVar == null || aliasVar.getInitialValue() == null) {\n+              report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n+              continue;\n+            }\n+            aliases.put(name, aliasVar);\n+            String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+            transformation.addAlias(name, qualifiedName);\n+          } else {\n+            // This is not an alias, so it should not appear in the namespace.\n+            if (NodeUtil.isWithinFunction(n)) {\n+              continue;\n+            } else {\n+              report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n+            }\n+          }\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}