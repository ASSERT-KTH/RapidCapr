{
    "patch": "public Class<?> getGenericType(Field field) {\n    Type generic = field.getGenericType();\n    if (generic instanceof ParameterizedType) {\n        Type actualType = ((ParameterizedType) generic).getActualTypeArguments()[0];\n        if (actualType instanceof Class) {\n            return (Class<?>) actualType;\n        } else if (actualType instanceof ParameterizedType) {\n            return getGenericType((ParameterizedType) actualType);\n        } else if (actualType instanceof GenericArrayType) {\n            Type elementType = ((GenericArrayType) actualType).getGenericComponentType();\n            if (elementType instanceof Class) {\n                return Array.newInstance((Class<?>) elementType, 0).getClass();\n            } else if (elementType instanceof ParameterizedType) {\n                Class<?> componentType = getGenericType((ParameterizedType) elementType);\n                return Array.newInstance(componentType, 0).getClass();\n            } else if (elementType instanceof GenericArrayType) {\n                Class<?> componentType = getArrayType((GenericArrayType) elementType);\n                return Array.newInstance(componentType, 0).getClass();\n            }\n        }\n    }\n    return Object.class;\n}\n\nprivate Class<?> getArrayType(GenericArrayType genericArrayType) {\n    Type elementType = genericArrayType.getGenericComponentType();\n    if (elementType instanceof Class) {\n        return Array.newInstance((Class<?>) elementType, 0).getClass();\n    } else if (elementType instanceof ParameterizedType) {\n        Class<?> componentType = getGenericType((ParameterizedType) elementType);\n        return Array.newInstance(componentType, 0).getClass();\n    } else if (elementType instanceof GenericArrayType) {\n        Class<?> componentType = getArrayType((GenericArrayType) elementType);\n        return Array.newInstance(componentType, 0).getClass();\n    }\n    throw new IllegalStateException(\"Unexpected element type: \" + elementType);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java\nindex 64bf1540f..c8c8e3a19 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMaster.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java\n@@ -13,14 +13,41 @@ public class GenericMaster {\n      * @param field\n      * @return\n      */\n-    public Class getGenericType(Field field) {        \n-        Type generic = field.getGenericType();\n-        if (generic != null && generic instanceof ParameterizedType) {\n-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n-                return (Class) actual;\n-                //in case of nested generics we don't go deep\n-        }\n-        \n-        return Object.class;\n-    }\n+public Class<?> getGenericType(Field field) {\n+    Type generic = field.getGenericType();\n+    if (generic instanceof ParameterizedType) {\n+        Type actualType = ((ParameterizedType) generic).getActualTypeArguments()[0];\n+        if (actualType instanceof Class) {\n+            return (Class<?>) actualType;\n+        } else if (actualType instanceof ParameterizedType) {\n+            return getGenericType((ParameterizedType) actualType);\n+        } else if (actualType instanceof GenericArrayType) {\n+            Type elementType = ((GenericArrayType) actualType).getGenericComponentType();\n+            if (elementType instanceof Class) {\n+                return Array.newInstance((Class<?>) elementType, 0).getClass();\n+            } else if (elementType instanceof ParameterizedType) {\n+                Class<?> componentType = getGenericType((ParameterizedType) elementType);\n+                return Array.newInstance(componentType, 0).getClass();\n+            } else if (elementType instanceof GenericArrayType) {\n+                Class<?> componentType = getArrayType((GenericArrayType) elementType);\n+                return Array.newInstance(componentType, 0).getClass();\n+            }\n+        }\n+    }\n+    return Object.class;\n+}\n+\n+private Class<?> getArrayType(GenericArrayType genericArrayType) {\n+    Type elementType = genericArrayType.getGenericComponentType();\n+    if (elementType instanceof Class) {\n+        return Array.newInstance((Class<?>) elementType, 0).getClass();\n+    } else if (elementType instanceof ParameterizedType) {\n+        Class<?> componentType = getGenericType((ParameterizedType) elementType);\n+        return Array.newInstance(componentType, 0).getClass();\n+    } else if (elementType instanceof GenericArrayType) {\n+        Class<?> componentType = getArrayType((GenericArrayType) elementType);\n+        return Array.newInstance(componentType, 0).getClass();\n+    }\n+    throw new IllegalStateException(\"Unexpected element type: \" + elementType);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}