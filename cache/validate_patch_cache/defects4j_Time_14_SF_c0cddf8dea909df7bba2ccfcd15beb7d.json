{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n            // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            boolean changedLeapYear = false;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                if (i == DateTimeFieldType.monthOfYear().getIndexedField()) {\n                    int curMonth = partial.getValue(i);\n                    // Find a safe starting point for the calculations\n                    // Try the current year with the same month, then\n                    // decrease/increase the year until we find a year\n                    // with the same amount of months, towards the target year\n                    MutableDateTime currentYearMonth = new MutableDateTime()\n                            .setProperty(DateTimeFieldType.year(), values[0])\n                            .setProperty(DateTimeFieldType.monthOfYear(), curMonth)\n                            .setProperty(DateTimeFieldType.dayOfMonth(), 1)\n                            .setProperty(DateTimeFieldType.hourOfDay(), 0)\n                            .setProperty(DateTimeFieldType.minuteOfHour(), 0)\n                            .setProperty(DateTimeFieldType.secondOfMinute(), 0)\n                            .setProperty(DateTimeFieldType.millisOfSecond(), 0);\n                    MutableDateTime targetYearMonth = new MutableDateTime(currentYearMonth)\n                            .addMonths(valueToAdd);\n                    int targetYear = targetYearMonth.getYear();\n                    int delta = curMonth < 2 ? -1 : 1;\n                    int year = delta > 0 ? targetYear : values[0];\n                    // search for target year with same month count\n                    while (year != targetYear) {\n                        currentYearMonth.setYear(year)\n                                         .addMonths(delta);\n                        if (currentYearMonth.getMonthOfYear() == curMonth) {\n                            changedLeapYear |= iChronology.isLeapYear(currentYearMonth.getYear()) != \n                                iChronology.isLeapYear(values[0]);\n                            year += delta;\n                        } else {\n                            break;\n                        }\n                    }\n                    instant = currentYearMonth.getMillis();\n                } else {\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n                }\n            }\n            instant = add(instant, valueToAdd);\n            int[] result = iChronology.get(partial, instant);\n          if (changedLeapYear && !isValidPartial(result, instant)) {\n              throw new org.joda.time.IllegalFieldValueException(\n                      DateTimeFieldType.monthOfYear(), \" leap year is invalid\");\n          }\n            return result;\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..a9127f23 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -209,11 +209,51 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n             // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n+            boolean changedLeapYear = false;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                if (i == DateTimeFieldType.monthOfYear().getIndexedField()) {\n+                    int curMonth = partial.getValue(i);\n+                    // Find a safe starting point for the calculations\n+                    // Try the current year with the same month, then\n+                    // decrease/increase the year until we find a year\n+                    // with the same amount of months, towards the target year\n+                    MutableDateTime currentYearMonth = new MutableDateTime()\n+                            .setProperty(DateTimeFieldType.year(), values[0])\n+                            .setProperty(DateTimeFieldType.monthOfYear(), curMonth)\n+                            .setProperty(DateTimeFieldType.dayOfMonth(), 1)\n+                            .setProperty(DateTimeFieldType.hourOfDay(), 0)\n+                            .setProperty(DateTimeFieldType.minuteOfHour(), 0)\n+                            .setProperty(DateTimeFieldType.secondOfMinute(), 0)\n+                            .setProperty(DateTimeFieldType.millisOfSecond(), 0);\n+                    MutableDateTime targetYearMonth = new MutableDateTime(currentYearMonth)\n+                            .addMonths(valueToAdd);\n+                    int targetYear = targetYearMonth.getYear();\n+                    int delta = curMonth < 2 ? -1 : 1;\n+                    int year = delta > 0 ? targetYear : values[0];\n+                    // search for target year with same month count\n+                    while (year != targetYear) {\n+                        currentYearMonth.setYear(year)\n+                                         .addMonths(delta);\n+                        if (currentYearMonth.getMonthOfYear() == curMonth) {\n+                            changedLeapYear |= iChronology.isLeapYear(currentYearMonth.getYear()) != \n+                                iChronology.isLeapYear(values[0]);\n+                            year += delta;\n+                        } else {\n+                            break;\n+                        }\n+                    }\n+                    instant = currentYearMonth.getMillis();\n+                } else {\n+                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                }\n             }\n             instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            int[] result = iChronology.get(partial, instant);\n+          if (changedLeapYear && !isValidPartial(result, instant)) {\n+              throw new org.joda.time.IllegalFieldValueException(\n+                      DateTimeFieldType.monthOfYear(), \" leap year is invalid\");\n+          }\n+            return result;\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}