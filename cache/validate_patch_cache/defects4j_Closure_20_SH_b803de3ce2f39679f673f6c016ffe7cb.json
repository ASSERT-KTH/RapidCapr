{
    "patch": "    if (callTarget != null && callTarget.isName()\n        && callTarget.getString().equals(\"String\")) {\n\n      Node value = callTarget.getNext();\n      if (value != null) {\n        Node addition = IR.add(\n            IR.string(\"\").srcref(callTarget),\n            value.detachFromParent());\n        n.replaceWith(addition);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..754562dd 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,7 +217,15 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n+    if (callTarget != null && callTarget.isName()\n+        && callTarget.getString().equals(\"String\")) {\n+\n+      Node value = callTarget.getNext();\n       if (value != null) {\n+        Node addition = IR.add(\n+            IR.string(\"\").srcref(callTarget),\n+            value.detachFromParent());\n+        n.replaceWith(addition);\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}