{
    "patch": "                    if (FastMath.abs(f1) < FastMath.abs(f0)) {\n                        f0 = f1;\n                        x0 = x1;\n                    }\n                    break;\n                default:\n                    // Should never happen.\n                    throw new MathInternalError();\n                }\n            }            ",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..74ca7c1a7 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,16 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+                    if (FastMath.abs(f1) < FastMath.abs(f0)) {\n+                        f0 = f1;\n+                        x0 = x1;\n+                    }\n+                    break;\n+                default:\n+                    // Should never happen.\n+                    throw new MathInternalError();\n+                }\n+            }            \n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: orphaned default",
    "test_result": "ERROR"
}