{
    "patch": "        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        if (candidate != null) {\n            boolean isAssignable = field.getType().isAssignableFrom(candidate.getClass());\n            if (isAssignable) {\n                try {\n                    field.setAccessible(true);\n                    field.set(fieldInstance, candidate);\n                    mocks.remove(candidate);\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(\"Unable to inject mock candidate\", e);\n                }\n            } else {\n                throw new RuntimeException(\"Mock candidate \" + candidate.getClass().getSimpleName()\n                        + \" is not compatible with field type \" + field.getType().getSimpleName());\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..e745bc924 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,24 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+        if (candidate != null) {\n+            boolean isAssignable = field.getType().isAssignableFrom(candidate.getClass());\n+            if (isAssignable) {\n+                try {\n+                    field.setAccessible(true);\n+                    field.set(fieldInstance, candidate);\n+                    mocks.remove(candidate);\n+                } catch (IllegalAccessException e) {\n+                    throw new RuntimeException(\"Unable to inject mock candidate\", e);\n+                }\n+            } else {\n+                throw new RuntimeException(\"Mock candidate \" + candidate.getClass().getSimpleName()\n+                        + \" is not compatible with field type \" + field.getType().getSimpleName());\n+            }\n         }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}