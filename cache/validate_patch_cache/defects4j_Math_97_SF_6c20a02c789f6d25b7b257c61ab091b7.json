{
    "patch": "public double solve(double min, double max) throws MaxIterationsExceededException,\n        FunctionEvaluationException {\n\n    clearResult();\n    verifyInterval(min, max);\n\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n\n    // Check if either endpoint is a root\n    if (yMin == 0.0) {\n        setResult(min, 0);\n        return min;\n    }\n    if (yMax == 0.0) {\n        setResult(max, 0);\n        return max;\n    }\n\n    // Verify bracketing\n    if (yMin * yMax > 0) {\n        throw new IllegalArgumentException(\"Function values at endpoints do not have different signs.\" +\n            \"  Endpoints: [\" + min + \",\" + max + \"]\" +\n            \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n    }\n\n    // Solve using Brent's method\n    double ret = Double.NaN;\n    double yMid = 0;\n    double xMid = 0;\n    double oldDelta = 0;\n    double delta = 0;\n    double oldXMid = 0;\n\n    // Initialization phase\n    double x1 = min;\n    double x2 = max;\n    double f1 = yMin;\n    double f2 = yMax;\n    double x3 = 0;\n    double f3 = 0;\n    int iteration = 0;\n\n    while (true) {\n        // Convergence check\n        if ((f2 > 0 ? f2 - f1 : f1 - f2) <= 0 || Math.abs(x2 - x1) < functionValueAccuracy) {\n            if (f1 >= f2) {\n                setResult(x2, f2);\n                ret = x2;\n            } else {\n                setResult(x1, f1);\n                ret = x1;\n            }\n            break;\n        }\n\n        // Compute a tentative new x by interpolating\n        if (yMin == yMax) {\n            xMid = x1 + (x2 - x1) / 2.0;\n        } else {\n            double r = (yMin - f2) * (x2 - x1) / ((f1 - f2) - (yMin - yMax));\n            xMid = x2 - r;\n        }\n\n        // Evaluate new x and update b-c values\n        yMid = f.value(xMid);\n        iteration++;\n\n        oldXMid = xMid;\n        oldDelta = delta;\n        delta = Math.abs(xMid - x2);\n\n        if (iteration == 1) {\n            // First iteration\n            ret = xMid; // this is the root according to Brent's algorithm\n        } else {\n            // Check convergence and update best estimate of the root\n            if (delta <= absoluteAccuracy + relativeAccuracy * Math.abs(xMid)) {\n                ret = xMid; // found the root\n                setResult(ret, yMid);\n                break;\n            } else if (oldDelta <= delta) {\n                ret = oldXMid; // use the last value of xMid\n                setResult(ret, yMid);\n                break;\n            } else if ((Math.abs(yMid) <= functionValueAccuracy)) {\n                ret = xMid;\n                setResult(ret, yMid);\n                break;\n            }\n        }\n\n        // Update b-c values\n        if ((sign(yMid) == sign(yMin))) {\n            x1 = xMid;\n            f1 = yMid;\n            x3 = x2;\n            f3 = yMax;\n        } else if ((sign(yMid) == sign(yMax))) {\n            x2 = xMid;\n            f2 = yMid;\n            x3 = x1;\n            f3 = yMin;\n        } else {\n            x3 = x2;\n            f3 = yMax;\n            x2 = xMid;\n            f2 = yMid;\n            x1 = xMid;\n            f1 = yMid;\n        }\n\n        // Swap values so that we start the next iteration with the best values\n        if (abs(f1) < abs(f2)) {\n            double tmp1 = x1;\n            x1 = x2;\n            x2 = tmp1;\n\n            double tmp2 = f1;\n            f1 = f2;\n            f2 = tmp2;\n        }\n\n        if (abs(f2) < abs(f3)) {\n            double tmp1 = x3;\n            x3 = x2;\n            x2 = tmp1;\n\n            double tmp2 = f3;\n            f3 = f2;\n            f2 = tmp2;\n        }\n    }\n    return ret;\n}\n\nprivate int sign(double x) {\n    return x < 0 ? -1 : (x > 0 ? 1 : 0);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..b974adeba 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,145 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n+public double solve(double min, double max) throws MaxIterationsExceededException,\n         FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n-        \n-        // Verify bracketing\n-        double sign = yMin * yMax;\n-        if (sign >= 0) {\n-            // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+\n+    clearResult();\n+    verifyInterval(min, max);\n+\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n+\n+    // Check if either endpoint is a root\n+    if (yMin == 0.0) {\n+        setResult(min, 0);\n+        return min;\n+    }\n+    if (yMax == 0.0) {\n+        setResult(max, 0);\n+        return max;\n+    }\n+\n+    // Verify bracketing\n+    if (yMin * yMax > 0) {\n+        throw new IllegalArgumentException(\"Function values at endpoints do not have different signs.\" +\n+            \"  Endpoints: [\" + min + \",\" + max + \"]\" +\n+            \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+    }\n+\n+    // Solve using Brent's method\n+    double ret = Double.NaN;\n+    double yMid = 0;\n+    double xMid = 0;\n+    double oldDelta = 0;\n+    double delta = 0;\n+    double oldXMid = 0;\n+\n+    // Initialization phase\n+    double x1 = min;\n+    double x2 = max;\n+    double f1 = yMin;\n+    double f2 = yMax;\n+    double x3 = 0;\n+    double f3 = 0;\n+    int iteration = 0;\n+\n+    while (true) {\n+        // Convergence check\n+        if ((f2 > 0 ? f2 - f1 : f1 - f2) <= 0 || Math.abs(x2 - x1) < functionValueAccuracy) {\n+            if (f1 >= f2) {\n+                setResult(x2, f2);\n+                ret = x2;\n+            } else {\n+                setResult(x1, f1);\n+                ret = x1;\n+            }\n+            break;\n+        }\n+\n+        // Compute a tentative new x by interpolating\n+        if (yMin == yMax) {\n+            xMid = x1 + (x2 - x1) / 2.0;\n+        } else {\n+            double r = (yMin - f2) * (x2 - x1) / ((f1 - f2) - (yMin - yMax));\n+            xMid = x2 - r;\n+        }\n+\n+        // Evaluate new x and update b-c values\n+        yMid = f.value(xMid);\n+        iteration++;\n+\n+        oldXMid = xMid;\n+        oldDelta = delta;\n+        delta = Math.abs(xMid - x2);\n+\n+        if (iteration == 1) {\n+            // First iteration\n+            ret = xMid; // this is the root according to Brent's algorithm\n+        } else {\n+            // Check convergence and update best estimate of the root\n+            if (delta <= absoluteAccuracy + relativeAccuracy * Math.abs(xMid)) {\n+                ret = xMid; // found the root\n+                setResult(ret, yMid);\n+                break;\n+            } else if (oldDelta <= delta) {\n+                ret = oldXMid; // use the last value of xMid\n+                setResult(ret, yMid);\n+                break;\n+            } else if ((Math.abs(yMid) <= functionValueAccuracy)) {\n+                ret = xMid;\n+                setResult(ret, yMid);\n+                break;\n+            }\n+        }\n+\n+        // Update b-c values\n+        if ((sign(yMid) == sign(yMin))) {\n+            x1 = xMid;\n+            f1 = yMid;\n+            x3 = x2;\n+            f3 = yMax;\n+        } else if ((sign(yMid) == sign(yMax))) {\n+            x2 = xMid;\n+            f2 = yMid;\n+            x3 = x1;\n+            f3 = yMin;\n         } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n+            x3 = x2;\n+            f3 = yMax;\n+            x2 = xMid;\n+            f2 = yMid;\n+            x1 = xMid;\n+            f1 = yMid;\n         }\n \n-        return ret;\n+        // Swap values so that we start the next iteration with the best values\n+        if (abs(f1) < abs(f2)) {\n+            double tmp1 = x1;\n+            x1 = x2;\n+            x2 = tmp1;\n+\n+            double tmp2 = f1;\n+            f1 = f2;\n+            f2 = tmp2;\n+        }\n+\n+        if (abs(f2) < abs(f3)) {\n+            double tmp1 = x3;\n+            x3 = x2;\n+            x2 = tmp1;\n+\n+            double tmp2 = f3;\n+            f3 = f2;\n+            f2 = tmp2;\n+        }\n     }\n+    return ret;\n+}\n+\n+private int sign(double x) {\n+    return x < 0 ? -1 : (x > 0 ? 1 : 0);\n+}\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "error: method setResult in class UnivariateRealSolverImpl cannot be applied to given types;",
    "test_result": "ERROR"
}