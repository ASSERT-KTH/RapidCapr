{
    "patch": "\n        // get total millis for the period\n        long totalMillis = getMillis()\n                + (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND))\n                + (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE))\n                + (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR))\n                + (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY))\n                + (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n        // normalize total millis by carrying over excess values\n        int normalizedWeeks = (int) (totalMillis / ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        totalMillis = totalMillis % ((long) DateTimeConstants.MILLIS_PER_WEEK);\n        int normalizedDays = (int) (totalMillis / ((long) DateTimeConstants.MILLIS_PER_DAY));\n        totalMillis = totalMillis % ((long) DateTimeConstants.MILLIS_PER_DAY);\n        int normalizedHours = (int) (totalMillis / ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        totalMillis = totalMillis % ((long) DateTimeConstants.MILLIS_PER_HOUR);\n        int normalizedMinutes = (int) (totalMillis / ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        totalMillis = totalMillis % ((long) DateTimeConstants.MILLIS_PER_MINUTE);\n        int normalizedSeconds = (int) (totalMillis / ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        int normalizedMillis = (int) (totalMillis % ((long) DateTimeConstants.MILLIS_PER_SECOND));\n\n        // construct a normalized period object using only plusX() calls\n        Period result = new Period(normalizedMillis, type, ISOChronology.getInstanceUTC())\n            .plusSeconds(normalizedSeconds)\n            .plusMinutes(normalizedMinutes)\n            .plusHours(normalizedHours)\n            .plusDays(normalizedDays)\n            .plusWeeks(normalizedWeeks)\n            .normalizedStandard(type); // normalize the result\n",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..6bd77757 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,35 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+\n+        // get total millis for the period\n+        long totalMillis = getMillis()\n+                + (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND))\n+                + (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE))\n+                + (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR))\n+                + (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY))\n+                + (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+\n+        // normalize total millis by carrying over excess values\n+        int normalizedWeeks = (int) (totalMillis / ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+        totalMillis = totalMillis % ((long) DateTimeConstants.MILLIS_PER_WEEK);\n+        int normalizedDays = (int) (totalMillis / ((long) DateTimeConstants.MILLIS_PER_DAY));\n+        totalMillis = totalMillis % ((long) DateTimeConstants.MILLIS_PER_DAY);\n+        int normalizedHours = (int) (totalMillis / ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+        totalMillis = totalMillis % ((long) DateTimeConstants.MILLIS_PER_HOUR);\n+        int normalizedMinutes = (int) (totalMillis / ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+        totalMillis = totalMillis % ((long) DateTimeConstants.MILLIS_PER_MINUTE);\n+        int normalizedSeconds = (int) (totalMillis / ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+        int normalizedMillis = (int) (totalMillis % ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+\n+        // construct a normalized period object using only plusX() calls\n+        Period result = new Period(normalizedMillis, type, ISOChronology.getInstanceUTC())\n+            .plusSeconds(normalizedSeconds)\n+            .plusMinutes(normalizedMinutes)\n+            .plusHours(normalizedHours)\n+            .plusDays(normalizedDays)\n+            .plusWeeks(normalizedWeeks)\n+            .normalizedStandard(type); // normalize the result\n+\n \n }",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}