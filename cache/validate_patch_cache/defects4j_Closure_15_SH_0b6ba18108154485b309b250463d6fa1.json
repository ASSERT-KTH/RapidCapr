{
    "patch": "      if (n.isFunction()) {\n        Scope functionScope = n.getScope();\n        for (Var parameter : functionScope.getParameters()) {\n          String name = parameter.getName();\n          Node maybeArg = NodeUtil.getArgumentForName(n.getParent(), name);\n          if (maybeArg != null && apply(maybeArg)) {\n            return true;\n          }\n        }\n      } \n\n      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n          return true;\n        }\n      }\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..da09c3fc 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,24 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+      if (n.isFunction()) {\n+        Scope functionScope = n.getScope();\n+        for (Var parameter : functionScope.getParameters()) {\n+          String name = parameter.getName();\n+          Node maybeArg = NodeUtil.getArgumentForName(n.getParent(), name);\n+          if (maybeArg != null && apply(maybeArg)) {\n+            return true;\n+          }\n+        }\n+      } \n+\n+      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+          return true;\n+        }\n+      }\n+      return false;\n+    }\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}