{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined().autobox();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType.isFunctionType()) {\n        ct = constructorType.toMaybeFunctionType();\n      }\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n      }\n    }\n  }\n  if (type == null) {\n    type = getNativeType(NULL_TYPE);\n  }\n  n.setJSType(type);\n  if (constructor.getNext() != null) {\n    // Constructor arguments are optional, so the NodeList may be empty.\n    for (Node arg = constructor.getNext().getFirstChild(); arg != null; arg = arg.getNext()) {\n      if (arg.getJSType() == null || arg.getJSType().isUnknownType() || arg.getJSType().isAllType() || arg.getJSType().isNoType() || arg.getJSType().isVoidType()) {\n        arg.setJSType(getNativeType(UNKNOWN_TYPE));\n      } else {\n        JSType argType = arg.getJSType().restrictByNotNullOrUndefined().autobox();\n        if (argType.isUnknownType() || argType.isNoType() || argType.isVoidType()) {\n          arg.setJSType(getNativeType(UNKNOWN_TYPE));\n        } else if (type.isConstructor() && argType.isSubtype(type.getInstanceType())) {\n          // The argument type is a subtype of the expected type, so there's no type error.\n        } else {\n          warnings.add(JSError.make(n, JSC_TYPE_MISMATCH, \"No properties on this expression\"));\n        }\n      }\n      scope = traverse(arg, scope);\n    }\n  }\n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..0b18ab1a 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,49 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructor = n.getFirstChild();\n+  scope = traverse(constructor, scope);\n+  JSType constructorType = constructor.getJSType();\n+  JSType type = null;\n+  if (constructorType != null) {\n+    constructorType = constructorType.restrictByNotNullOrUndefined().autobox();\n+    if (constructorType.isUnknownType()) {\n+      type = getNativeType(UNKNOWN_TYPE);\n+    } else {\n+      FunctionType ct = constructorType.toMaybeFunctionType();\n+      if (ct == null && constructorType.isFunctionType()) {\n+        ct = constructorType.toMaybeFunctionType();\n+      }\n+      if (ct != null && ct.isConstructor()) {\n+        type = ct.getInstanceType();\n+      }\n+    }\n+  }\n+  if (type == null) {\n+    type = getNativeType(NULL_TYPE);\n+  }\n+  n.setJSType(type);\n+  if (constructor.getNext() != null) {\n+    // Constructor arguments are optional, so the NodeList may be empty.\n+    for (Node arg = constructor.getNext().getFirstChild(); arg != null; arg = arg.getNext()) {\n+      if (arg.getJSType() == null || arg.getJSType().isUnknownType() || arg.getJSType().isAllType() || arg.getJSType().isNoType() || arg.getJSType().isVoidType()) {\n+        arg.setJSType(getNativeType(UNKNOWN_TYPE));\n       } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+        JSType argType = arg.getJSType().restrictByNotNullOrUndefined().autobox();\n+        if (argType.isUnknownType() || argType.isNoType() || argType.isVoidType()) {\n+          arg.setJSType(getNativeType(UNKNOWN_TYPE));\n+        } else if (type.isConstructor() && argType.isSubtype(type.getInstanceType())) {\n+          // The argument type is a subtype of the expected type, so there's no type error.\n+        } else {\n+          warnings.add(JSError.make(n, JSC_TYPE_MISMATCH, \"No properties on this expression\"));\n         }\n       }\n-    }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n     }\n-    return scope;\n   }\n+  return scope;\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}