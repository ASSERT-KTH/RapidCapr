{
    "patch": "        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n          continue;\n        }\n        break;\n      }\n      // Remove any unreferenced parameters from the call sites.\n      NodeTraversal.traverse(compiler, function, new RemoveUnrefArgs(referenced));\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..e8707d39 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,17 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+          continue;\n+        }\n+        break;\n+      }\n+      // Remove any unreferenced parameters from the call sites.\n+      NodeTraversal.traverse(compiler, function, new RemoveUnrefArgs(referenced));\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}