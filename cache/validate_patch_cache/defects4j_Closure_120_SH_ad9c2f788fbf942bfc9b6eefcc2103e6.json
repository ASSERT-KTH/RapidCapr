{
    "patch": "BasicBlock parentBlock = ref.getBasicBlock();\nif (parentBlock == null) {\n  return false;\n}\nList<DiGraphEdge<Node, Stat>> outEdges = getCfg().getOutEdges(parentBlock.getEntry());\nint numAssignments = 0;\nDiGraphEdge<Node, Stat> lastAssignmentEdge = null;\nfor (DiGraphEdge<Node, Stat> outEdge : outEdges) {\n  if (outEdge.getValue() instanceof Assign) {\n    numAssignments++;\n    lastAssignmentEdge = outEdge;\n  }\n}\nreturn numAssignments == 1 && lastAssignmentEdge != null && lastAssignmentEdge.to() == ref.getBasicBlock().getExit();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..ac211331 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,20 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+BasicBlock parentBlock = ref.getBasicBlock();\n+if (parentBlock == null) {\n+  return false;\n+}\n+List<DiGraphEdge<Node, Stat>> outEdges = getCfg().getOutEdges(parentBlock.getEntry());\n+int numAssignments = 0;\n+DiGraphEdge<Node, Stat> lastAssignmentEdge = null;\n+for (DiGraphEdge<Node, Stat> outEdge : outEdges) {\n+  if (outEdge.getValue() instanceof Assign) {\n+    numAssignments++;\n+    lastAssignmentEdge = outEdge;\n+  }\n+}\n+return numAssignments == 1 && lastAssignmentEdge != null && lastAssignmentEdge.to() == ref.getBasicBlock().getExit();\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}