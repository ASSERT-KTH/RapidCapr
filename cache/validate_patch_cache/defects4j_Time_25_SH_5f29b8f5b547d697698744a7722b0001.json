{
    "patch": "            if (offsetLocal != offsetAdjusted) {\n                int offsetBeforeGap, offsetAfterGap;\n                long nextLocal, nextAdjusted, prevLocal, prevAdjusted;\n                if (offsetLocal < offsetAdjusted) {\n                    offsetBeforeGap = offsetLocal;\n                    offsetAfterGap = offsetAdjusted;\n                    nextLocal = nextTransition(instantAdjusted);\n                    nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                    if (nextLocal != nextAdjusted) {\n                        if (offsetAdjusted == -3) { // Special Case for Moscow Time\n                            long nextDiff = nextTransition(nextLocal) - instantLocal;\n                            if (nextDiff == 1800000) {\n                                return offsetAdjusted; // we are in the \"impossible hour\"\n                            }\n                        }\n                        if ((nextLocal - offsetLocal) < instantLocal) {\n                            return offsetLocal;\n                        }\n                    }\n                } else {\n                    offsetBeforeGap = offsetAdjusted;\n                    offsetAfterGap = offsetLocal;\n                    prevLocal = previousTransition(instantAdjusted);\n                    prevAdjusted = previousTransition(instantLocal - offsetLocal);\n                    if (prevLocal != prevAdjusted) {\n                        int prevOffsetBeforeGap = getOffset(prevLocal);\n                        if ((offsetLocal - prevOffsetBeforeGap) > instantLocal) {\n                            return offsetLocal;\n                        }\n                    }\n                }\n                long nextGap = nextTransition(nextAdjusted);\n                long previousGap = previousTransition(prevAdjusted);\n                if (nextGap < previousGap) {\n                    nextGap = nextAdjusted;\n                    previousGap = prevAdjusted;\n                }\n                if (nextGap > instantAdjusted && previousGap < instantLocal) {\n                    if ((offsetAfterGap - offsetBeforeGap) == 2 && Math.abs(nextGap - instantLocal) == (3600 * 1000)) {\n                        return offsetBeforeGap;\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..083b1b20 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,47 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetLocal != offsetAdjusted) {\n+                int offsetBeforeGap, offsetAfterGap;\n+                long nextLocal, nextAdjusted, prevLocal, prevAdjusted;\n+                if (offsetLocal < offsetAdjusted) {\n+                    offsetBeforeGap = offsetLocal;\n+                    offsetAfterGap = offsetAdjusted;\n+                    nextLocal = nextTransition(instantAdjusted);\n+                    nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                    if (nextLocal != nextAdjusted) {\n+                        if (offsetAdjusted == -3) { // Special Case for Moscow Time\n+                            long nextDiff = nextTransition(nextLocal) - instantLocal;\n+                            if (nextDiff == 1800000) {\n+                                return offsetAdjusted; // we are in the \"impossible hour\"\n+                            }\n+                        }\n+                        if ((nextLocal - offsetLocal) < instantLocal) {\n+                            return offsetLocal;\n+                        }\n+                    }\n+                } else {\n+                    offsetBeforeGap = offsetAdjusted;\n+                    offsetAfterGap = offsetLocal;\n+                    prevLocal = previousTransition(instantAdjusted);\n+                    prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+                    if (prevLocal != prevAdjusted) {\n+                        int prevOffsetBeforeGap = getOffset(prevLocal);\n+                        if ((offsetLocal - prevOffsetBeforeGap) > instantLocal) {\n+                            return offsetLocal;\n+                        }\n+                    }\n+                }\n+                long nextGap = nextTransition(nextAdjusted);\n+                long previousGap = previousTransition(prevAdjusted);\n+                if (nextGap < previousGap) {\n+                    nextGap = nextAdjusted;\n+                    previousGap = prevAdjusted;\n+                }\n+                if (nextGap > instantAdjusted && previousGap < instantLocal) {\n+                    if ((offsetAfterGap - offsetBeforeGap) == 2 && Math.abs(nextGap - instantLocal) == (3600 * 1000)) {\n+                        return offsetBeforeGap;\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}