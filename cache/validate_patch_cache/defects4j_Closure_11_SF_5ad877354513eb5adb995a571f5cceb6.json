{
    "patch": "public String getProp(String propName) {\n    String[] warnings = getWarnings();\n    for (String warning : warnings) {\n        if (warning.contains(propName)) {\n            String[] parts = warning.split(\":\");\n            return parts[1].trim();\n        }\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..bb2e2d58 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getProp(String propName) {\n+    String[] warnings = getWarnings();\n+    for (String warning : warnings) {\n+        if (warning.contains(propName)) {\n+            String[] parts = warning.split(\":\");\n+            return parts[1].trim();\n+        }\n+    }\n+    return null;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}