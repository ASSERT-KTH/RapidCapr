{
    "patch": "    if (n.getType() == Token.FUNCTION) {\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they are actually a part of the code i.e. they are\n      // assigned to an object (including prototype) or to a variable.\n      int parentType = parent.getType();\n      if (!NodeUtil.isAssignmentOp(parentType) && parentType != Token.VAR) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (parentType == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        if (lhs.isQualifiedName()) {\n          String baseName = lhs.getFirstChild().getQualifiedName();\n          if (baseName != null) {\n            return !baseName.endsWith(\".prototype\");\n          }\n        }\n        return false;\n      }\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..c8f228f9 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,38 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+    if (n.getType() == Token.FUNCTION) {\n+      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+      if (jsDoc != null &&\n+          (jsDoc.isConstructor() ||\n+           jsDoc.isInterface() ||\n+           jsDoc.hasThisType() ||\n+           jsDoc.isOverride())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions unless they are actually a part of the code i.e. they are\n+      // assigned to an object (including prototype) or to a variable.\n+      int parentType = parent.getType();\n+      if (!NodeUtil.isAssignmentOp(parentType) && parentType != Token.VAR) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parentType == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        if (lhs.isQualifiedName()) {\n+          String baseName = lhs.getFirstChild().getQualifiedName();\n+          if (baseName != null) {\n+            return !baseName.endsWith(\".prototype\");\n+          }\n+        }\n+        return false;\n+      }\n+    }\n+\n+    return true;\n+  }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}