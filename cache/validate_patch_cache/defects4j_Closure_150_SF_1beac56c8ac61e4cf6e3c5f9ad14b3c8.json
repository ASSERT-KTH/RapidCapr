{
    "patch": "    @Override\n    public final void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == t.getScopeRoot()) {\n        scope = t.getScope();\n      }\n\n      if (n.isBlockScope() && n.getParent().isScript()) {\n        defineBlockScopedVariables(n);\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getToken()) {\n        case FUNCTION:\n          if (NodeUtil.isFunctionDeclaration(n)) {\n            defineDeclaredFunction(n, parent);\n          } else if (NodeUtil.isFunctionExpression(n) && parent.isExprResult()) {\n            defineFunctionExpression(n, parent);\n          }\n          break;\n        case CATCH:\n          defineCatch(n, parent);\n          break;\n        case VAR:\n        case LET:\n        case CONST:\n          defineVar(n, parent);\n          break;\n      }\n\n      if (n.isParamList()\n          && parent != null\n          && parent.isCall()\n          && parent.getFirstChild() == n.getParent()) {\n        handleFunctionInputs(n);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..02aea4e4 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,40 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+    @Override\n+    public final void visit(NodeTraversal t, Node n, Node parent) {\n+      if (n == t.getScopeRoot()) {\n+        scope = t.getScope();\n+      }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n+      if (n.isBlockScope() && n.getParent().isScript()) {\n+        defineBlockScopedVariables(n);\n       }\n \n       attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+      switch (n.getToken()) {\n+        case FUNCTION:\n+          if (NodeUtil.isFunctionDeclaration(n)) {\n+            defineDeclaredFunction(n, parent);\n+          } else if (NodeUtil.isFunctionExpression(n) && parent.isExprResult()) {\n+            defineFunctionExpression(n, parent);\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n-        case Token.CATCH:\n+        case CATCH:\n           defineCatch(n, parent);\n           break;\n-        case Token.VAR:\n+        case VAR:\n+        case LET:\n+        case CONST:\n           defineVar(n, parent);\n           break;\n       }\n-    }\n+\n+      if (n.isParamList()\n+          && parent != null\n+          && parent.isCall()\n+          && parent.getFirstChild() == n.getParent()) {\n+        handleFunctionInputs(n);\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}