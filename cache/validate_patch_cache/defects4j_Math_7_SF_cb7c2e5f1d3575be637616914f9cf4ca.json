{
    "patch": "// Sort the event states by increasing time.\nArrays.sort(eventsStates, new Comparator<EventState>() {\n    public int compare(EventState es0, EventState es1) {\n        return Double.compare(es0.getEventTime(), es1.getEventTime());\n    }\n});\n\n// Loop over all event states to find those that occur during the current step.\nfor (final EventState state : eventsStates) {\n    if (state.evaluateStep(interpolator)) {\n        // The event occurs during the current step.\n        occuringEvents.add(state);\n    }\n}\n\n// Process all events that occur during the current step.\nwhile (!occuringEvents.isEmpty()) {\n\n    // Handle the chronologically first event.\n    final Iterator<EventState> iterator = occuringEvents.iterator();\n    final EventState currentEvent = iterator.next();\n    iterator.remove();\n\n    // Partially advance the integrator to the time of the event.\n    final double eventT = currentEvent.getEventTime();\n    interpolator.setSoftPreviousTime(previousT);\n    interpolator.setSoftCurrentTime(eventT);\n\n    // Get the state of the system at the event time.\n    interpolator.setInterpolatedTime(eventT);\n    final double[] eventY = interpolator.getInterpolatedState().clone();\n\n    // Advance all event states to the time of the event.\n    currentEvent.stepAccepted(eventT, eventY);\n    isLastStep = currentEvent.stop();\n\n    // Handle the part of the step up to the event.\n    for (final StepHandler handler : stepHandlers) {\n        handler.handleStep(interpolator, isLastStep);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex f24f87c39..963947e26 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -313,43 +313,47 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n-                public int compare(EventState es0, EventState es1) {\n-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n-                }\n-\n-            });\n+// Sort the event states by increasing time.\n+Arrays.sort(eventsStates, new Comparator<EventState>() {\n+    public int compare(EventState es0, EventState es1) {\n+        return Double.compare(es0.getEventTime(), es1.getEventTime());\n+    }\n+});\n \n-            for (final EventState state : eventsStates) {\n-                if (state.evaluateStep(interpolator)) {\n-                    // the event occurs during the current step\n-                    occuringEvents.add(state);\n-                }\n-            }\n+// Loop over all event states to find those that occur during the current step.\n+for (final EventState state : eventsStates) {\n+    if (state.evaluateStep(interpolator)) {\n+        // The event occurs during the current step.\n+        occuringEvents.add(state);\n+    }\n+}\n \n-            while (!occuringEvents.isEmpty()) {\n+// Process all events that occur during the current step.\n+while (!occuringEvents.isEmpty()) {\n \n-                // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n-                final EventState currentEvent = iterator.next();\n-                iterator.remove();\n+    // Handle the chronologically first event.\n+    final Iterator<EventState> iterator = occuringEvents.iterator();\n+    final EventState currentEvent = iterator.next();\n+    iterator.remove();\n \n-                // restrict the interpolator to the first part of the step, up to the event\n-                final double eventT = currentEvent.getEventTime();\n-                interpolator.setSoftPreviousTime(previousT);\n-                interpolator.setSoftCurrentTime(eventT);\n+    // Partially advance the integrator to the time of the event.\n+    final double eventT = currentEvent.getEventTime();\n+    interpolator.setSoftPreviousTime(previousT);\n+    interpolator.setSoftCurrentTime(eventT);\n \n-                // get state at event time\n-                interpolator.setInterpolatedTime(eventT);\n-                final double[] eventY = interpolator.getInterpolatedState().clone();\n+    // Get the state of the system at the event time.\n+    interpolator.setInterpolatedTime(eventT);\n+    final double[] eventY = interpolator.getInterpolatedState().clone();\n \n-                // advance all event states to current time\n-                currentEvent.stepAccepted(eventT, eventY);\n-                isLastStep = currentEvent.stop();\n+    // Advance all event states to the time of the event.\n+    currentEvent.stepAccepted(eventT, eventY);\n+    isLastStep = currentEvent.stop();\n \n-                // handle the first part of the step, up to the event\n-                for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n-                }\n+    // Handle the part of the step up to the event.\n+    for (final StepHandler handler : stepHandlers) {\n+        handler.handleStep(interpolator, isLastStep);\n+    }\n+}\n \n                 if (isLastStep) {\n                     // the event asked to stop integration",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}