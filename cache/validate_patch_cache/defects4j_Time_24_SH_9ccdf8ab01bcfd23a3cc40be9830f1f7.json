{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        millis = savedFields[i].set(millis, resetFields);\n    }\n} catch (RuntimeException e) {\n    // Save the exception as this may be the last chronological piece\n    // we parse even though an error happened, and the savedFields\n    // array will then be most helpful for calculation.\n    // Only do this once even if another exception is thrown by set().\n    if (iSavedFields == null) {\n        iSavedFields = new SavedField[savedFields.length];\n        for (int j = 0; j < iSavedFields.length; j++) {\n            iSavedFields[j] = new SavedField(savedFields[j]);\n        }\n        iSavedFieldsCount = count;\n        iSavedFieldsShared = false;\n    }\n    if (text != null) {\n        if (e instanceof IllegalFieldValueException) {\n            ((IllegalFieldValueException) e).prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n        } else {\n            e = new RuntimeException(\"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage(), e);\n        }\n    }\n    throw e;\n}\n// Write back the fields so as to have the correct values for printing/selecting\niSavedFields = savedFields;\niSavedFieldsCount = count;\niSavedFieldsShared = false;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..7b9ac3c3 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,36 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        millis = savedFields[i].set(millis, resetFields);\n+    }\n+} catch (RuntimeException e) {\n+    // Save the exception as this may be the last chronological piece\n+    // we parse even though an error happened, and the savedFields\n+    // array will then be most helpful for calculation.\n+    // Only do this once even if another exception is thrown by set().\n+    if (iSavedFields == null) {\n+        iSavedFields = new SavedField[savedFields.length];\n+        for (int j = 0; j < iSavedFields.length; j++) {\n+            iSavedFields[j] = new SavedField(savedFields[j]);\n+        }\n+        iSavedFieldsCount = count;\n+        iSavedFieldsShared = false;\n+    }\n+    if (text != null) {\n+        if (e instanceof IllegalFieldValueException) {\n+            ((IllegalFieldValueException) e).prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n+        } else {\n+            e = new RuntimeException(\"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage(), e);\n+        }\n+    }\n+    throw e;\n+}\n+// Write back the fields so as to have the correct values for printing/selecting\n+iSavedFields = savedFields;\n+iSavedFieldsCount = count;\n+iSavedFieldsShared = false;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: no suitable constructor found for SavedField(SavedField)",
    "test_result": "ERROR"
}