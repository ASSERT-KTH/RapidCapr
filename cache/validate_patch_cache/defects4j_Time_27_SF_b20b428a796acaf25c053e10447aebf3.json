{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n\n    if (size == 0) {\n        return new PeriodFormatter(null, null);\n    }\n\n    Object first = elementPairs.get(0);\n\n    if (size == 1 && (first instanceof PeriodPrinter || first instanceof PeriodParser)) {\n        // Single element that is either a PeriodPrinter or a PeriodParser\n        PeriodPrinter printer = notPrinter ? null : (PeriodPrinter) (first instanceof PeriodPrinter ? first : null);\n        PeriodParser parser = notParser ? null : (PeriodParser) (first instanceof PeriodParser ? first : null);\n        return new PeriodFormatter(printer, parser);\n    }\n\n    int firstSep = (first instanceof Separator) ? 0 : -1;\n\n    Separator sep = null;\n    List<Object> subList = null;\n\n    for (int i = 0; i < size; i++) {\n        Object obj = elementPairs.get(i);\n        if (i == firstSep) {\n            sep = (Separator) first;\n            subList = elementPairs.subList(i + 1, size);\n        } else if (obj instanceof Separator) {\n            sep = sep.finish(null, null);\n            sep = (Separator) obj;\n            subList = elementPairs.subList(i + 1, size);\n        }\n    }\n\n    if (subList == null || subList.size() == 0) {\n        if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        } else {\n            return new PeriodFormatter(notPrinter ? null : sep, notParser ? null : sep);\n        }\n    }\n\n    Object[] comp = createComposite(subList);\n\n    PeriodPrinter printer = notPrinter ? null : (PeriodPrinter) comp[0];\n    PeriodParser parser = notParser ? null : (PeriodParser) comp[1];\n    PeriodPrinter printer2 = notPrinter ? null : sep.finish(printer, parser);\n    PeriodParser parser2 = notParser ? null : sep.finish(printer, parser);\n    return new PeriodFormatter(printer2, parser2);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..f1815cf2 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,60 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+\n+    if (size == 0) {\n+        return new PeriodFormatter(null, null);\n+    }\n+\n+    Object first = elementPairs.get(0);\n+\n+    if (size == 1 && (first instanceof PeriodPrinter || first instanceof PeriodParser)) {\n+        // Single element that is either a PeriodPrinter or a PeriodParser\n+        PeriodPrinter printer = notPrinter ? null : (PeriodPrinter) (first instanceof PeriodPrinter ? first : null);\n+        PeriodParser parser = notParser ? null : (PeriodParser) (first instanceof PeriodParser ? first : null);\n+        return new PeriodFormatter(printer, parser);\n+    }\n+\n+    int firstSep = (first instanceof Separator) ? 0 : -1;\n+\n+    Separator sep = null;\n+    List<Object> subList = null;\n+\n+    for (int i = 0; i < size; i++) {\n+        Object obj = elementPairs.get(i);\n+        if (i == firstSep) {\n+            sep = (Separator) first;\n+            subList = elementPairs.subList(i + 1, size);\n+        } else if (obj instanceof Separator) {\n+            sep = sep.finish(null, null);\n+            sep = (Separator) obj;\n+            subList = elementPairs.subList(i + 1, size);\n+        }\n+    }\n+\n+    if (subList == null || subList.size() == 0) {\n         if (notPrinter && notParser) {\n             throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            return new PeriodFormatter(notPrinter ? null : sep, notParser ? null : sep);\n         }\n     }\n \n+    Object[] comp = createComposite(subList);\n+\n+    PeriodPrinter printer = notPrinter ? null : (PeriodPrinter) comp[0];\n+    PeriodParser parser = notParser ? null : (PeriodParser) comp[1];\n+    PeriodPrinter printer2 = notPrinter ? null : sep.finish(printer, parser);\n+    PeriodParser parser2 = notParser ? null : sep.finish(printer, parser);\n+    return new PeriodFormatter(printer2, parser2);\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "junit.framework.ComparisonFailure: expected:<[1 year, 2 months, 3 weeks, 4 days, 5 hours, 6 minutes, ]7 seconds and 8 mill...> but was:<[]7 seconds and 8 mill...>",
    "test_result": "FAIL"
}