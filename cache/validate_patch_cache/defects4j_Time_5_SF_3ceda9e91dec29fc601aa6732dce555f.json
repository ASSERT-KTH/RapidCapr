{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    ISOChronology chrono = ISOChronology.getInstanceUTC();\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, chrono);\n\n    if (type.isSupported(DurationFieldType.years()) ||\n            type.isSupported(DurationFieldType.months()) ||\n            type.isSupported(DurationFieldType.weeks())) {\n\n        // Calculate total days in the period\n        long totalDays = getDays() + getWeeks() * 7 + (long) getMonths() * 30 + (long) getYears() * 365;\n\n        // Normalize years and days\n        int years = 0;\n        while (totalDays >= 365) {\n            years++;\n            totalDays -= isLeapYear(years - 1, chrono) ? 366 : 365;\n        }\n\n        // Normalize months and days\n        int months = 0;\n        while (totalDays >= 28) {\n            months++;\n            totalDays -= chrono.getAverageMillisPerMonth() / DateTimeConstants.MILLIS_PER_DAY;\n        }\n\n        // Add years and months to the result\n        if (years > 0) {\n            result = result.plusYears(years);\n        }\n        if (months > 0) {\n            result = result.plusMonths(months);\n        }\n\n        // Calculate total weeks in the remaining days\n        int remainingDays = (int) totalDays;\n        int weeks = remainingDays / 7;\n\n        // Add weeks to the result\n        if (weeks > 0) {\n            result = result.plusWeeks(weeks);\n        }\n\n        // Calculate remaining days and add them to the result\n        remainingDays %= 7;\n        if (remainingDays > 0) {\n            result = result.plusDays(remainingDays);\n        }\n    }\n\n    return result;\n}\n\nprivate boolean isLeapYear(int year, Chronology chrono) {\n    return chrono.isLeapYear(chrono.year().set(0, year).getMillis());\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..181d4e0a 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,67 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    ISOChronology chrono = ISOChronology.getInstanceUTC();\n+    long millis = getMillis();\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+    Period result = new Period(millis, type, chrono);\n+\n+    if (type.isSupported(DurationFieldType.years()) ||\n+            type.isSupported(DurationFieldType.months()) ||\n+            type.isSupported(DurationFieldType.weeks())) {\n+\n+        // Calculate total days in the period\n+        long totalDays = getDays() + getWeeks() * 7 + (long) getMonths() * 30 + (long) getYears() * 365;\n+\n+        // Normalize years and days\n+        int years = 0;\n+        while (totalDays >= 365) {\n+            years++;\n+            totalDays -= isLeapYear(years - 1, chrono) ? 366 : 365;\n+        }\n+\n+        // Normalize months and days\n+        int months = 0;\n+        while (totalDays >= 28) {\n+            months++;\n+            totalDays -= chrono.getAverageMillisPerMonth() / DateTimeConstants.MILLIS_PER_DAY;\n+        }\n+\n+        // Add years and months to the result\n+        if (years > 0) {\n+            result = result.plusYears(years);\n+        }\n+        if (months > 0) {\n+            result = result.plusMonths(months);\n+        }\n+\n+        // Calculate total weeks in the remaining days\n+        int remainingDays = (int) totalDays;\n+        int weeks = remainingDays / 7;\n+\n+        // Add weeks to the result\n+        if (weeks > 0) {\n+            result = result.plusWeeks(weeks);\n+        }\n+\n+        // Calculate remaining days and add them to the result\n+        remainingDays %= 7;\n+        if (remainingDays > 0) {\n+            result = result.plusDays(remainingDays);\n         }\n-        return result;\n     }\n \n+    return result;\n+}\n+\n+private boolean isLeapYear(int year, Chronology chrono) {\n+    return chrono.isLeapYear(chrono.year().set(0, year).getMillis());\n+}\n+\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}