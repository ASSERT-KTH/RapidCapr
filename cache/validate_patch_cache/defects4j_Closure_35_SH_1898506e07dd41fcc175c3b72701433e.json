{
    "patch": "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null && constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = getNativeType(UNKNOWN_TYPE);\n            if (objType.hasProperty(prop)) {\n              typeToInfer = objType.getPropertyType(prop).getLeastSupertype(propType);\n            } else {\n              typeToInfer = propType.getFingerprint().equals(OBJECT_SIG) ?\n                  getNativeObjectType() : propType;\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..04826d5f 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,16 +1118,17 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n+      if (objType != null && constraintObj.isRecordType()) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n           if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+            JSType typeToInfer = getNativeType(UNKNOWN_TYPE);\n+            if (objType.hasProperty(prop)) {\n+              typeToInfer = objType.getPropertyType(prop).getLeastSupertype(propType);\n+            } else {\n+              typeToInfer = propType.getFingerprint().equals(OBJECT_SIG) ?\n+                  getNativeObjectType() : propType;\n             }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}