{
    "patch": "    if (!modifyCallers && argList.hasChildren()) {\n      Node current = argList.getFirstChild();\n      while (current != null) {\n        Node next = current.getNext();\n        if (!referenced.contains(fnScope.getVar(current.getString()))) {\n          argList.removeChild(current);\n          compiler.reportCodeChange();\n        }\n        current = next;\n      }\n    } else if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..ce106e08 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,18 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    if (!modifyCallers && argList.hasChildren()) {\n+      Node current = argList.getFirstChild();\n+      while (current != null) {\n+        Node next = current.getNext();\n+        if (!referenced.contains(fnScope.getVar(current.getString()))) {\n+          argList.removeChild(current);\n+          compiler.reportCodeChange();\n+        }\n+        current = next;\n+      }\n+    } else if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}