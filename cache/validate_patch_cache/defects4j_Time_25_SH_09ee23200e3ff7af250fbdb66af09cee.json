{
    "patch": "            // check if we are near a DST boundary\n            // if yes, return the correct offset\n            long prevTransition = previousTransition(instantAdjusted);\n            long nextTransition = nextTransition(instantAdjusted);\n            if (prevTransition == nextTransition) {\n                return offsetLocal;\n            }\n            int prevOffset = getOffset(prevTransition);\n            int nextOffset = getOffset(nextTransition);\n            if (prevOffset < nextOffset) {\n                return offsetLocal;\n            } else if (prevOffset > nextOffset) {\n                return nextOffset;\n            } else {\n                if (offsetLocal < offsetAdjusted) {\n                    long prevTransitionAdjusted = previousTransition(instantAdjusted);\n                    if (prevTransitionAdjusted <= instantLocal - offsetLocal) {\n                        return offsetAdjusted;\n                    }\n                } else if (offsetLocal > offsetAdjusted) {\n                    long nextTransitionAdjusted = nextTransition(instantAdjusted);\n                    if (nextTransitionAdjusted <= instantLocal - offsetLocal) {\n                        return offsetAdjusted;\n                    }\n                } else {\n                    if ((offsetLocal - offsetAdjusted) < 0) {\n                        long nextLocal = nextTransition(instantAdjusted);\n                        long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n                        if (nextLocal != nextAdjusted) {\n                            // backward transition\n                            long diff = nextAdjusted - instantLocal;\n                            if ((diff + offsetLocal) < 0) {\n                                return offsetLocal;\n                            }\n                            return offsetAdjusted;\n                        } else {\n                            return offsetAdjusted;\n                        }\n                    }\n                }\n                if (offsetAdjusted == 0 && offsetLocal < 0 && nextTransition(instantAdjusted) == instantLocal - offsetLocal) {",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..d863a69e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,47 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            // check if we are near a DST boundary\n+            // if yes, return the correct offset\n+            long prevTransition = previousTransition(instantAdjusted);\n+            long nextTransition = nextTransition(instantAdjusted);\n+            if (prevTransition == nextTransition) {\n+                return offsetLocal;\n+            }\n+            int prevOffset = getOffset(prevTransition);\n+            int nextOffset = getOffset(nextTransition);\n+            if (prevOffset < nextOffset) {\n+                return offsetLocal;\n+            } else if (prevOffset > nextOffset) {\n+                return nextOffset;\n+            } else {\n+                if (offsetLocal < offsetAdjusted) {\n+                    long prevTransitionAdjusted = previousTransition(instantAdjusted);\n+                    if (prevTransitionAdjusted <= instantLocal - offsetLocal) {\n+                        return offsetAdjusted;\n+                    }\n+                } else if (offsetLocal > offsetAdjusted) {\n+                    long nextTransitionAdjusted = nextTransition(instantAdjusted);\n+                    if (nextTransitionAdjusted <= instantLocal - offsetLocal) {\n+                        return offsetAdjusted;\n+                    }\n+                } else {\n+                    if ((offsetLocal - offsetAdjusted) < 0) {\n+                        long nextLocal = nextTransition(instantAdjusted);\n+                        long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+                        if (nextLocal != nextAdjusted) {\n+                            // backward transition\n+                            long diff = nextAdjusted - instantLocal;\n+                            if ((diff + offsetLocal) < 0) {\n+                                return offsetLocal;\n+                            }\n+                            return offsetAdjusted;\n+                        } else {\n+                            return offsetAdjusted;\n+                        }\n+                    }\n+                }\n+                if (offsetAdjusted == 0 && offsetLocal < 0 && nextTransition(instantAdjusted) == instantLocal - offsetLocal) {\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}