{
    "patch": "  public String getLine(int lineNumber) {\n    String js = \"\";\n    try {\n      js = getCode();\n    } catch (IOException e) {\n      return null;\n    }\n\n    int pos = 0;\n    int startLine = 1;\n\n    if (lineNumber >= lastLine) {\n      pos = lastOffset;\n      startLine = lastLine;\n    }\n\n    int count = 0;\n    int len = js.length();\n    for (int i = pos; i < len; i++) {\n      char ch = js.charAt(i);\n      if (ch == '\\n') {\n        count++;\n        if (count == lineNumber - startLine + 1) {\n          return js.substring(pos, i);\n        }\n        pos = i + 1;\n      }\n    }\n    if (count == lineNumber - startLine) {\n      return js.substring(pos);\n    }\n    return null;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/SourceFile.java b/src/com/google/javascript/jscomp/SourceFile.java\nindex fc0cf3fc..23fe6f74 100644\n--- a/src/com/google/javascript/jscomp/SourceFile.java\n+++ b/src/com/google/javascript/jscomp/SourceFile.java\n@@ -205,9 +205,6 @@ public class SourceFile implements StaticSourceFile, Serializable {\n   public String getLine(int lineNumber) {\n     String js = \"\";\n     try {\n-      // NOTE(nicksantos): Right now, this is optimized for few warnings.\n-      // This is probably the right trade-off, but will be slow if there\n-      // are lots of warnings in one file.\n       js = getCode();\n     } catch (IOException e) {\n       return null;\n@@ -216,34 +213,27 @@ public class SourceFile implements StaticSourceFile, Serializable {\n     int pos = 0;\n     int startLine = 1;\n \n-    // If we've saved a previous offset and it's for a line less than the\n-    // one we're searching for, then start at that point.\n     if (lineNumber >= lastLine) {\n       pos = lastOffset;\n       startLine = lastLine;\n     }\n \n-    for (int n = startLine; n < lineNumber; n++) {\n-      int nextpos = js.indexOf('\\n', pos);\n-      if (nextpos == -1) {\n-        return null;\n+    int count = 0;\n+    int len = js.length();\n+    for (int i = pos; i < len; i++) {\n+      char ch = js.charAt(i);\n+      if (ch == '\\n') {\n+        count++;\n+        if (count == lineNumber - startLine + 1) {\n+          return js.substring(pos, i);\n+        }\n+        pos = i + 1;\n       }\n-      pos = nextpos + 1;\n     }\n-\n-    // Remember this offset for the next search we do.\n-    lastOffset = pos;\n-    lastLine = lineNumber;\n-\n-    if (js.indexOf('\\n', pos) == -1) {\n-      // If next new line cannot be found, there are two cases\n-      // 1. pos already reaches the end of file, then null should be returned\n-      // 2. otherwise, return the contents between pos and the end of file.\n-        return null;\n-    } else {\n-      return js.substring(pos, js.indexOf('\\n', pos));\n+    if (count == lineNumber - startLine) {\n+      return js.substring(pos);\n     }\n-  }\n+    return null;\n \n   /**\n    * Get a region around the indicated line number. The exact definition of a",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}