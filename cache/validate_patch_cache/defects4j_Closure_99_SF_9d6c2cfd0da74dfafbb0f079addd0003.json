{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n        \n        if (n == lhs) {\n            // Always traverse the left side of the assignment.\n            if (assignLhsChild == null || n.isGetProp()) {\n                // Always ensure that we have the last child of the getprop.\n                assignLhsChild = getFinalGet(lhs);\n            }\n            return true;\n        } else {\n            Node getter = NodeUtil.isObjectDefineGetProperty(lhs);\n            if (getter != null && getter.getNext() == n) {\n                // Property getter: traverse.\n                return true;\n            } else {\n                if (n.isGetProp()) {\n                    // Traverse object literal keys and any object references that\n                    // we haven't seen before.\n                    if (n.hasChildren() &&\n                            n.getFirstChild().getType() == Token.STRING) {\n                        return true;\n                    } else if (!alreadySeenReferences.contains(n.getQualifiedName())) {\n                        alreadySeenReferences.add(n.getQualifiedName());\n                        return true;\n                    }\n                }\n            }\n            // Only traverse the right side when the left side is not a prototype\n            // or subproperty assignment.\n            return !looksLikePrototypeProperty(lhs);\n        }\n    }\n\n    // Don't traverse into functions if it's not something that can have a 'this'\n    // (such as a script, block or the right side of an assignment).\n    return parent == null ||\n            parent.getType() == Token.SCRIPT ||\n            parent.getType() == Token.BLOCK ||\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.NAME ||\n            !isExprAssignTarget(parent);\n}\n\n/**\n * Returns the final property access node of a getprop chain.\n * @param getPropRoot The root of the getprop chain.\n * @return The final property node, or the input node if it isn't a getprop.\n */\nprivate Node getFinalGet(Node getPropRoot) {\n    if (getPropRoot.isGetProp()) {\n        Node child = getPropRoot.getFirstChild();\n        while (child.getNext() != null) {\n            child = child.getNext();\n        }\n        return child;\n    } else {\n        return getPropRoot;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..f2dae0e3 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,68 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n-    }\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+        \n+        if (n == lhs) {\n+            // Always traverse the left side of the assignment.\n+            if (assignLhsChild == null || n.isGetProp()) {\n+                // Always ensure that we have the last child of the getprop.\n+                assignLhsChild = getFinalGet(lhs);\n+            }\n+            return true;\n+        } else {\n+            Node getter = NodeUtil.isObjectDefineGetProperty(lhs);\n+            if (getter != null && getter.getNext() == n) {\n+                // Property getter: traverse.\n+                return true;\n+            } else {\n+                if (n.isGetProp()) {\n+                    // Traverse object literal keys and any object references that\n+                    // we haven't seen before.\n+                    if (n.hasChildren() &&\n+                            n.getFirstChild().getType() == Token.STRING) {\n+                        return true;\n+                    } else if (!alreadySeenReferences.contains(n.getQualifiedName())) {\n+                        alreadySeenReferences.add(n.getQualifiedName());\n+                        return true;\n+                    }\n+                }\n+            }\n+            // Only traverse the right side when the left side is not a prototype\n+            // or subproperty assignment.\n+            return !looksLikePrototypeProperty(lhs);\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n-      }\n     }\n \n-    return true;\n-  }\n+    // Don't traverse into functions if it's not something that can have a 'this'\n+    // (such as a script, block or the right side of an assignment).\n+    return parent == null ||\n+            parent.getType() == Token.SCRIPT ||\n+            parent.getType() == Token.BLOCK ||\n+            parent.getType() == Token.FUNCTION ||\n+            parent.getType() == Token.NAME ||\n+            !isExprAssignTarget(parent);\n+}\n+\n+/**\n+ * Returns the final property access node of a getprop chain.\n+ * @param getPropRoot The root of the getprop chain.\n+ * @return The final property node, or the input node if it isn't a getprop.\n+ */\n+private Node getFinalGet(Node getPropRoot) {\n+    if (getPropRoot.isGetProp()) {\n+        Node child = getPropRoot.getFirstChild();\n+        while (child.getNext() != null) {\n+            child = child.getNext();\n+        }\n+        return child;\n+    } else {\n+        return getPropRoot;\n+    }\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}