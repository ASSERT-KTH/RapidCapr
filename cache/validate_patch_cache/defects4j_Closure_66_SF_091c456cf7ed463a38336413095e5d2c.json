{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    int numCompleted = 0;\n    int numTasks = 0;\n    try {\n        JSONObject json = new JSONObject(jsonStr);\n        JSONArray tasks = json.getJSONArray(\"tasks\");\n        for (int i = 0; i < tasks.length(); i++) {\n            JSONObject task = tasks.getJSONObject(i);\n            boolean completed;\n            try {\n                completed = task.getBoolean(\"completed\");\n            } catch (JSONException e) {\n                // If \"completed\" field is not a boolean, try it as an integer:\n                int completedInt = task.getInt(\"completed\");\n                completed = (completedInt == 1);\n            }\n            if (completed) {\n                numCompleted++;\n            }\n            numTasks++;\n        }\n    } catch (JSONException e) {\n        return -1; // return -1 to indicate an error\n    }\n    return ((double) numCompleted / numTasks) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..d55c0b12 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,32 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    int numCompleted = 0;\n+    int numTasks = 0;\n+    try {\n+        JSONObject json = new JSONObject(jsonStr);\n+        JSONArray tasks = json.getJSONArray(\"tasks\");\n+        for (int i = 0; i < tasks.length(); i++) {\n+            JSONObject task = tasks.getJSONObject(i);\n+            boolean completed;\n+            try {\n+                completed = task.getBoolean(\"completed\");\n+            } catch (JSONException e) {\n+                // If \"completed\" field is not a boolean, try it as an integer:\n+                int completedInt = task.getInt(\"completed\");\n+                completed = (completedInt == 1);\n+            }\n+            if (completed) {\n+                numCompleted++;\n+            }\n+            numTasks++;\n+        }\n+    } catch (JSONException e) {\n+        return -1; // return -1 to indicate an error\n+    }\n+    return ((double) numCompleted / numTasks) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}