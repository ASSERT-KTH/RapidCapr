{
    "patch": "import com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.NodeTraversal;\nimport com.google.javascript.rhino.StaticScope;\nimport com.google.javascript.rhino.StaticSlot;\nimport com.google.javascript.rhino.StaticSourceFile;\nimport com.google.javascript.jscomp.CompilerInput;\nimport com.google.javascript.jscomp.JSError;\nimport com.google.javascript.jscomp.JSModule;\nimport com.google.javascript.jscomp.SourceFile;\nimport com.google.javascript.jscomp.parsing.parser.util.format.SimpleFormat;\nimport com.google.javascript.rhino.ErrorReporter;\nimport com.google.javascript.rhino.TokenStream;\nimport com.google.javascript.rhino.jstype.FunctionType;\nimport com.google.javascript.rhino.jstype.JSType;\nimport com.google.javascript.rhino.jstype.JSTypeRegistry;\n\npublic class Example {\n  // define necessary variables and functions for the example\n  \n  private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n      FunctionType functionType = (FunctionType) childType;\n\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if(functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceName();\n        CompilerInput functionSource = compiler.getInput(sourceName);\n        isExtern = functionSource.isExtern();\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explcit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      if (functionType.getTypeOfThis() != null) {\n        JSType thisType = functionType.getTypeOfThis();\n        Node callerNode = n.getParent();\n        if (callerNode.isGetProp() || callerNode.isGetElem()) {\n          ensureTyped(t, callerNode.getFirstChild(), thisType);\n        } else {\n          report(t, n, INVALID_THIS_TYPE);\n          ensureTyped(t, n);\n          return;\n        }\n      }\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }\n\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n  }\n\n  // the rest of the code is omitted for brevity\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..c1f6a0b0 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1541,6 +1541,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * scope chain to use in name lookups as well as error reporting.\n    * @param n The node being visited.\n    */\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.NodeTraversal;\n+import com.google.javascript.rhino.StaticScope;\n+import com.google.javascript.rhino.StaticSlot;\n+import com.google.javascript.rhino.StaticSourceFile;\n+import com.google.javascript.jscomp.CompilerInput;\n+import com.google.javascript.jscomp.JSError;\n+import com.google.javascript.jscomp.JSModule;\n+import com.google.javascript.jscomp.SourceFile;\n+import com.google.javascript.jscomp.parsing.parser.util.format.SimpleFormat;\n+import com.google.javascript.rhino.ErrorReporter;\n+import com.google.javascript.rhino.TokenStream;\n+import com.google.javascript.rhino.jstype.FunctionType;\n+import com.google.javascript.rhino.jstype.JSType;\n+import com.google.javascript.rhino.jstype.JSTypeRegistry;\n+\n+public class Example {\n+  // define necessary variables and functions for the example\n+  \n   private void visitCall(NodeTraversal t, Node n) {\n     Node child = n.getFirstChild();\n     JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n@@ -1577,6 +1596,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.getTypeOfThis() != null) {\n+        JSType thisType = functionType.getTypeOfThis();\n+        Node callerNode = n.getParent();\n+        if (callerNode.isGetProp() || callerNode.isGetElem()) {\n+          ensureTyped(t, callerNode.getFirstChild(), thisType);\n+        } else {\n+          report(t, n, INVALID_THIS_TYPE);\n+          ensureTyped(t, n);\n+          return;\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());\n@@ -1589,6 +1619,9 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     // about the non-portability of the call or both.\n   }\n \n+  // the rest of the code is omitted for brevity\n+}\n+\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}