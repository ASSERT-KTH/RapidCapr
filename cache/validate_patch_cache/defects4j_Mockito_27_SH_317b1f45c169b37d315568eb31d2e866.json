{
    "patch": "        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        Callback[] callbacks = ((Factory) mock).getCallbacks();\n        if (callbacks == null) {\n            ((Factory) mock).setCallbacks(new Callback[] { newFilter });\n        } else {\n            boolean filterFound = false;\n            for (int i = 0; i < callbacks.length; i++) {\n                if (callbacks[i] instanceof MethodInterceptorFilter) {\n                    callbacks[i] = newFilter;\n                    filterFound = true;\n                    break;\n                }\n            }\n            if (!filterFound) {\n                int oldCallbackLength = callbacks.length;\n                Callback[] newCallbacks = new Callback[oldCallbackLength + 1];\n                System.arraycopy(callbacks, 0, newCallbacks, 0, oldCallbackLength);\n                newCallbacks[oldCallbackLength] = newFilter;\n                ((Factory) mock).setCallbacks(newCallbacks);\n            } else {\n                ((Factory) mock).setCallbacks(callbacks);\n            }\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..ec9462d38 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,33 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        Callback[] callbacks = ((Factory) mock).getCallbacks();\n+        if (callbacks == null) {\n+            ((Factory) mock).setCallbacks(new Callback[] { newFilter });\n+        } else {\n+            boolean filterFound = false;\n+            for (int i = 0; i < callbacks.length; i++) {\n+                if (callbacks[i] instanceof MethodInterceptorFilter) {\n+                    callbacks[i] = newFilter;\n+                    filterFound = true;\n+                    break;\n+                }\n+            }\n+            if (!filterFound) {\n+                int oldCallbackLength = callbacks.length;\n+                Callback[] newCallbacks = new Callback[oldCallbackLength + 1];\n+                System.arraycopy(callbacks, 0, newCallbacks, 0, oldCallbackLength);\n+                newCallbacks[oldCallbackLength] = newFilter;\n+                ((Factory) mock).setCallbacks(newCallbacks);\n+            } else {\n+                ((Factory) mock).setCallbacks(callbacks);\n+            }\n+        }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}