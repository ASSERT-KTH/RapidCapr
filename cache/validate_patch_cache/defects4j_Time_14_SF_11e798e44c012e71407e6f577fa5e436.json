{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        boolean isLeapYear = false;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (partial.getFieldType(i) == DateTimeFieldType.year()) {\n                int year = values[i];\n                if (iChronology.isLeapYear(year)) {\n                    isLeapYear = true;\n                }\n            }\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        int month = iChronology.monthOfYear().get(instant);\n        int day = iChronology.dayOfMonth().get(instant);\n        if (isLeapYear && month == 2 && day == 29) {\n            instant = iChronology.dayOfMonth().set(instant, instant - 1);\n        }\n        instant = add(instant, valueToAdd);\n        if (isLeapYear) {\n            int year = iChronology.year().get(instant);\n            if (iChronology.isLeapYear(year)) {\n                int newMonth = iChronology.monthOfYear().get(instant);\n                int newDay = iChronology.dayOfMonth().get(instant);\n                if (newMonth == 2 && newDay == 29) {\n                    instant = iChronology.dayOfMonth().set(instant, instant - 1);\n                }\n            }\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..24bfd24b 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,46 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        boolean isLeapYear = false;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (partial.getFieldType(i) == DateTimeFieldType.year()) {\n+                int year = values[i];\n+                if (iChronology.isLeapYear(year)) {\n+                    isLeapYear = true;\n+                }\n+            }\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        }\n+        int month = iChronology.monthOfYear().get(instant);\n+        int day = iChronology.dayOfMonth().get(instant);\n+        if (isLeapYear && month == 2 && day == 29) {\n+            instant = iChronology.dayOfMonth().set(instant, instant - 1);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        instant = add(instant, valueToAdd);\n+        if (isLeapYear) {\n+            int year = iChronology.year().get(instant);\n+            if (iChronology.isLeapYear(year)) {\n+                int newMonth = iChronology.monthOfYear().get(instant);\n+                int newDay = iChronology.dayOfMonth().get(instant);\n+                if (newMonth == 2 && newDay == 29) {\n+                    instant = iChronology.dayOfMonth().set(instant, instant - 1);\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: no suitable method found for set(long,long)",
    "test_result": "ERROR"
}