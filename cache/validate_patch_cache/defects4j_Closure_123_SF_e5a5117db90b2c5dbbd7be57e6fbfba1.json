{
    "patch": "public String fixCode(String code, String test) {\n    String[] lines = code.split(\"\\\\r?\\\\n\");\n    String[] testLines = test.split(\"\\\\r?\\\\n\");\n    int testLineIndex = 0;\n\n    for (int i = 0; i < lines.length; i++) {\n        String line = lines[i];\n        if (testLineIndex < testLines.length && line.contains(\"//\") && line.contains(testLines[testLineIndex])) {\n            int index = line.indexOf(\"//\");\n            lines[i] = line.substring(0, index) + testLines[testLineIndex];\n            testLineIndex++;\n        } else if (line.contains(\"for(\") && line.contains(\"in\")) {\n            int inIndex = line.indexOf(\"in\");\n            int semiIndex = line.indexOf(\";\");\n            String element = line.substring(4, inIndex - 1);\n            String collection = line.substring(inIndex + 3, semiIndex);\n            String newCollection;\n            \n            if (collection.charAt(0) == '[') {\n                newCollection = collection;\n            } else {\n                newCollection = \"[\" + collection + \"]\";\n            }\n\n            lines[i] = \"for(\" + element + \"=0;\" + element + \"<\" + newCollection + \".length;\" + element + \"++)\";\n        }\n    }\n\n    return String.join(\"\\n\", lines);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..71034c2c 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,36 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code, String test) {\n+    String[] lines = code.split(\"\\\\r?\\\\n\");\n+    String[] testLines = test.split(\"\\\\r?\\\\n\");\n+    int testLineIndex = 0;\n+\n+    for (int i = 0; i < lines.length; i++) {\n+        String line = lines[i];\n+        if (testLineIndex < testLines.length && line.contains(\"//\") && line.contains(testLines[testLineIndex])) {\n+            int index = line.indexOf(\"//\");\n+            lines[i] = line.substring(0, index) + testLines[testLineIndex];\n+            testLineIndex++;\n+        } else if (line.contains(\"for(\") && line.contains(\"in\")) {\n+            int inIndex = line.indexOf(\"in\");\n+            int semiIndex = line.indexOf(\";\");\n+            String element = line.substring(4, inIndex - 1);\n+            String collection = line.substring(inIndex + 3, semiIndex);\n+            String newCollection;\n+            \n+            if (collection.charAt(0) == '[') {\n+                newCollection = collection;\n+            } else {\n+                newCollection = \"[\" + collection + \"]\";\n+            }\n+\n+            lines[i] = \"for(\" + element + \"=0;\" + element + \"<\" + newCollection + \".length;\" + element + \"++)\";\n+        }\n+    }\n+\n+    return String.join(\"\\n\", lines);\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}