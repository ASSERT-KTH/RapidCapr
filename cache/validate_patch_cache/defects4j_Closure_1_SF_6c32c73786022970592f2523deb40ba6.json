{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n            && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n        // Strip unreferenced args off the end of the function declaration.\n        Node lastArg = argList.getLastChild();\n        while (lastArg != null) {\n            Var var = fnScope.getVar(lastArg.getString());\n            if (!referenced.contains(var)) {\n                argList.removeChild(lastArg);\n                compiler.reportCodeChange();\n                lastArg = argList.getLastChild();\n            } else {\n                break;\n            }\n        }\n        if (lastArg == null && function.getBooleanProp(Node.FUNCTION_EXPRESSION)) {\n            // If all arguments have been removed and the function is\n            // an anonymous function expression, we must add a single\n            // GOTO statement to keep the same semantics.\n            Node newBody = IR.block().srcref(function);\n            Node block = IR.block(newBody).srcref(function);\n            Node returnNode = IR.returnNode().srcref(function);\n            Node label = IR.labelName(\"\").srcref(function);\n            Node jump = IR.jump(label).srcref(function);\n            newBody.addChildToBack(jump);\n            newBody.addChildToBack(returnNode);\n            function.replaceChild(argList, block);\n            compiler.reportCodeChange();\n        }\n    } else {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0bd90a66 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,48 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n     Node function = fnScope.getRootNode();\n \n     Preconditions.checkState(function.isFunction());\n     if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n+        return;\n     }\n \n     Node argList = getFunctionArgList(function);\n     boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n+            && callSiteOptimizer.canModifyCallers(function);\n     if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+        // Strip unreferenced args off the end of the function declaration.\n+        Node lastArg = argList.getLastChild();\n+        while (lastArg != null) {\n+            Var var = fnScope.getVar(lastArg.getString());\n+            if (!referenced.contains(var)) {\n+                argList.removeChild(lastArg);\n+                compiler.reportCodeChange();\n+                lastArg = argList.getLastChild();\n+            } else {\n+                break;\n+            }\n+        }\n+        if (lastArg == null && function.getBooleanProp(Node.FUNCTION_EXPRESSION)) {\n+            // If all arguments have been removed and the function is\n+            // an anonymous function expression, we must add a single\n+            // GOTO statement to keep the same semantics.\n+            Node newBody = IR.block().srcref(function);\n+            Node block = IR.block(newBody).srcref(function);\n+            Node returnNode = IR.returnNode().srcref(function);\n+            Node label = IR.labelName(\"\").srcref(function);\n+            Node jump = IR.jump(label).srcref(function);\n+            newBody.addChildToBack(jump);\n+            newBody.addChildToBack(returnNode);\n+            function.replaceChild(argList, block);\n+            compiler.reportCodeChange();\n         }\n-      }\n     } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n+        callSiteOptimizer.optimize(fnScope, referenced);\n     }\n-  }\n+}\n \n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}