{
    "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    List<Field> instanceFields = orderedInstanceFieldsFrom(awaitingInjectionClazz);\n\n    for (Field field : instanceFields) {\n        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n\n        if (candidate != null && isAssignableFrom(field.getType(), candidate.getClass())) {\n            try {\n                if (!field.isAccessible()) {\n                    field.setAccessible(true);\n                }\n\n                field.set(fieldInstance, candidate);\n\n                // Inject mocks to inherited fields from object hierarchy\n                if (!field.getDeclaringClass().equals(awaitingInjectionClazz)) {\n                    injectMockCandidate(field.getDeclaringClass(), mocks, fieldInstance);\n                }\n            } catch (IllegalAccessException e) {\n                throw new IllegalStateException(e);\n            }\n\n            return;\n        }\n    }\n}\n\nprivate boolean isAssignableFrom(Class<?> fieldType, Class<?> candidateClazz) {\n    if (fieldType.equals(candidateClazz)) {\n        return true;\n    }\n\n    if (fieldType.isPrimitive()) {\n        if (fieldType.equals(boolean.class) && candidateClazz.equals(Boolean.class)) {\n            return true;\n        } else if (fieldType.equals(byte.class) && candidateClazz.equals(Byte.class)) {\n            return true;\n        } else if (fieldType.equals(short.class) && candidateClazz.equals(Short.class)) {\n            return true;\n        } else if (fieldType.equals(int.class) && candidateClazz.equals(Integer.class)) {\n            return true;\n        } else if (fieldType.equals(long.class) && candidateClazz.equals(Long.class)) {\n            return true;\n        } else if (fieldType.equals(float.class) && candidateClazz.equals(Float.class)) {\n            return true;\n        } else if (fieldType.equals(double.class) && candidateClazz.equals(Double.class)) {\n            return true;\n        } else if (fieldType.equals(char.class) && candidateClazz.equals(Character.class)) {\n            return true;\n        }\n    } else if (fieldType.isInterface()) {\n        for (Class<?> i : candidateClazz.getInterfaces()) {\n            if (fieldType.equals(i)) {\n                return true;\n            }\n        }\n    } else if (fieldType.isAssignableFrom(candidateClazz)) {\n        return true;\n    }\n\n    return false;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..1aa923f6c 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,11 +88,69 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n-        }\n-    }\n+\n+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+    List<Field> instanceFields = orderedInstanceFieldsFrom(awaitingInjectionClazz);\n+\n+    for (Field field : instanceFields) {\n+        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+\n+        if (candidate != null && isAssignableFrom(field.getType(), candidate.getClass())) {\n+            try {\n+                if (!field.isAccessible()) {\n+                    field.setAccessible(true);\n+                }\n+\n+                field.set(fieldInstance, candidate);\n+\n+                // Inject mocks to inherited fields from object hierarchy\n+                if (!field.getDeclaringClass().equals(awaitingInjectionClazz)) {\n+                    injectMockCandidate(field.getDeclaringClass(), mocks, fieldInstance);\n+                }\n+            } catch (IllegalAccessException e) {\n+                throw new IllegalStateException(e);\n+            }\n+\n+            return;\n+        }\n+    }\n+}\n+\n+private boolean isAssignableFrom(Class<?> fieldType, Class<?> candidateClazz) {\n+    if (fieldType.equals(candidateClazz)) {\n+        return true;\n+    }\n+\n+    if (fieldType.isPrimitive()) {\n+        if (fieldType.equals(boolean.class) && candidateClazz.equals(Boolean.class)) {\n+            return true;\n+        } else if (fieldType.equals(byte.class) && candidateClazz.equals(Byte.class)) {\n+            return true;\n+        } else if (fieldType.equals(short.class) && candidateClazz.equals(Short.class)) {\n+            return true;\n+        } else if (fieldType.equals(int.class) && candidateClazz.equals(Integer.class)) {\n+            return true;\n+        } else if (fieldType.equals(long.class) && candidateClazz.equals(Long.class)) {\n+            return true;\n+        } else if (fieldType.equals(float.class) && candidateClazz.equals(Float.class)) {\n+            return true;\n+        } else if (fieldType.equals(double.class) && candidateClazz.equals(Double.class)) {\n+            return true;\n+        } else if (fieldType.equals(char.class) && candidateClazz.equals(Character.class)) {\n+            return true;\n+        }\n+    } else if (fieldType.isInterface()) {\n+        for (Class<?> i : candidateClazz.getInterfaces()) {\n+            if (fieldType.equals(i)) {\n+                return true;\n+            }\n+        }\n+    } else if (fieldType.isAssignableFrom(candidateClazz)) {\n+        return true;\n+    }\n+\n+    return false;\n+}\n \n     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {\n         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}