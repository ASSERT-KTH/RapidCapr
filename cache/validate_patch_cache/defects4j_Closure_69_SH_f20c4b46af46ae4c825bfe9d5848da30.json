{
    "patch": " if (childType instanceof FunctionType) {\n      FunctionType functionType = (FunctionType) childType;\n\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if(functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceName();\n        CompilerInput functionSource = compiler.getInput(sourceName);\n        isExtern = functionSource.isExtern();\n      }\n\n      JSType functionThisType = functionType.getThisType();\n      if (functionThisType != null && !isCallWithGet(functionThisType, n)) {\n        report(t, n, INVALID_THIS_TYPE, functionThisType.toString());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..818a96ac 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+ if (childType instanceof FunctionType) {\n+      FunctionType functionType = (FunctionType) childType;\n+\n+      boolean isExtern = false;\n+      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n+      if(functionJSDocInfo != null) {\n+        String sourceName = functionJSDocInfo.getSourceName();\n+        CompilerInput functionSource = compiler.getInput(sourceName);\n+        isExtern = functionSource.isExtern();\n+      }\n+\n+      JSType functionThisType = functionType.getThisType();\n+      if (functionThisType != null && !isCallWithGet(functionThisType, n)) {\n+        report(t, n, INVALID_THIS_TYPE, functionThisType.toString());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}