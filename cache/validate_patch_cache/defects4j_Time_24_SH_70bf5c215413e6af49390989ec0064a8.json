{
    "patch": "        SavedField lastSavedField = null;\n        for (int i = 0; i < count; i++) {\n            SavedField savedField = savedFields[i];\n            if (lastSavedField != null) {\n                DurationField currentField = lastSavedField.iField.getDurationField();\n                DurationField nextDurationField = savedField.iField.getDurationField();\n                if (compareReverse(currentField, nextDurationField) > 0) {\n                    throw new IllegalArgumentException(\"Fields invalid for parsing: \" + currentField.getName() + \" -> \" + nextDurationField.getName());\n                }\n            }\n            try {\n                millis = savedField.set(millis, resetFields);\n            } catch (IllegalFieldValueException e) {\n                // Year is occasionally interpreted wrong due to Gregorian Reform\n                if (DateTimeFieldType.year().equals(savedFields[i].iField.getType())) {\n                    iDefaultYear = -iDefaultYear;\n                    long instant = savedFields[i].iField.set(0L, iDefaultYear);\n                    millis = savedFields[i].iField.set(instant, savedFields[i].iValue);\n                } else {\n                    DateTimeFieldType fieldType = savedField.iField.getType();\n                    if (fieldType == DateTimeFieldType.weekyear()) {\n                        long instant = savedFields[i].iField.set(0L, iDefaultYear);\n                        millis = savedFields[i].iField.set(instant, savedFields[i].iValue);\n                        DurationField weekField = DurationFieldType.weeks().getField(iChrono);\n                        if (lastSavedField != null) {\n                            DurationField lastDurationField = lastSavedField.iField.getDurationField();\n                            if (compareReverse(weekField, lastDurationField) < 0) {\n                                throw new IllegalArgumentException(\"Fields invalid for parsing: \" + weekField.getName() + \" -> \" + lastDurationField.getName());\n                            }\n                        }\n                    } else if (fieldType == DateTimeFieldType.dayOfMonth() && i < count - 1 && savedFields[i + 1].iField.getType() == DateTimeFieldType.monthOfYear()) {\n                        // Parse error occurred on the day field; try to compensate by setting the day field to 1\n                        savedFields[i + 1].iField.set(millis, 1);\n                        millis = savedField.set(millis, resetFields);\n                    } else if (text != null) {\n                        e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n                        throw e;\n                    } else {\n                        throw e;\n                    }\n                }\n            }\n            lastSavedField = savedField;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..59ec4ed0 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,49 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        SavedField lastSavedField = null;\n+        for (int i = 0; i < count; i++) {\n+            SavedField savedField = savedFields[i];\n+            if (lastSavedField != null) {\n+                DurationField currentField = lastSavedField.iField.getDurationField();\n+                DurationField nextDurationField = savedField.iField.getDurationField();\n+                if (compareReverse(currentField, nextDurationField) > 0) {\n+                    throw new IllegalArgumentException(\"Fields invalid for parsing: \" + currentField.getName() + \" -> \" + nextDurationField.getName());\n+                }\n+            }\n+            try {\n+                millis = savedField.set(millis, resetFields);\n+            } catch (IllegalFieldValueException e) {\n+                // Year is occasionally interpreted wrong due to Gregorian Reform\n+                if (DateTimeFieldType.year().equals(savedFields[i].iField.getType())) {\n+                    iDefaultYear = -iDefaultYear;\n+                    long instant = savedFields[i].iField.set(0L, iDefaultYear);\n+                    millis = savedFields[i].iField.set(instant, savedFields[i].iValue);\n+                } else {\n+                    DateTimeFieldType fieldType = savedField.iField.getType();\n+                    if (fieldType == DateTimeFieldType.weekyear()) {\n+                        long instant = savedFields[i].iField.set(0L, iDefaultYear);\n+                        millis = savedFields[i].iField.set(instant, savedFields[i].iValue);\n+                        DurationField weekField = DurationFieldType.weeks().getField(iChrono);\n+                        if (lastSavedField != null) {\n+                            DurationField lastDurationField = lastSavedField.iField.getDurationField();\n+                            if (compareReverse(weekField, lastDurationField) < 0) {\n+                                throw new IllegalArgumentException(\"Fields invalid for parsing: \" + weekField.getName() + \" -> \" + lastDurationField.getName());\n+                            }\n+                        }\n+                    } else if (fieldType == DateTimeFieldType.dayOfMonth() && i < count - 1 && savedFields[i + 1].iField.getType() == DateTimeFieldType.monthOfYear()) {\n+                        // Parse error occurred on the day field; try to compensate by setting the day field to 1\n+                        savedFields[i + 1].iField.set(millis, 1);\n+                        millis = savedField.set(millis, resetFields);\n+                    } else if (text != null) {\n+                        e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+                        throw e;\n+                    } else {\n+                        throw e;\n+                    }\n+                }\n+            }\n+            lastSavedField = savedField;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}