{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);\n        sep = sep.finish(f.getPrinter(), f.getParser());\n        return new PeriodFormatter(sep, sep);\n    } else if (size == 1) {\n        Object pair = elementPairs.get(0);\n        if (pair instanceof PeriodPrinter) {\n            return new PeriodFormatter((PeriodPrinter) pair, null);\n        } else if (pair instanceof PeriodParser) {\n            return new PeriodFormatter(null, (PeriodParser) pair);\n        } else {\n            throw new IllegalArgumentException(\"Invalid element pair\");\n        }\n    } else {\n        Object[] comp = null;\n\n        int i = 0;\n        boolean startsWithSeparator = false;\n\n        while (i < size) {\n            Object pair = elementPairs.get(i);\n\n            if (pair instanceof Separator) {\n                startsWithSeparator = true;\n                break;\n            } else if (pair instanceof PeriodPrinter && !notPrinter) {\n                comp = createComposite(elementPairs);\n                break;\n            } else if (pair instanceof PeriodParser && !notParser) {\n                comp = createComposite(elementPairs);\n                break;\n            }\n\n            i++;\n        }\n\n        if (comp == null) {\n            int startIndex = startsWithSeparator ? 1 : 0;\n\n            while ((i < size) && !(elementPairs.get(i) instanceof Separator)) {\n                i++;\n            }\n\n            int endIndex = i < size ? i : size;\n\n            comp = createComposite(elementPairs.subList(startIndex, endIndex));\n        }\n\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..33239bc4 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,18 +791,62 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+\n+    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);\n+        sep = sep.finish(f.getPrinter(), f.getParser());\n+        return new PeriodFormatter(sep, sep);\n+    } else if (size == 1) {\n+        Object pair = elementPairs.get(0);\n+        if (pair instanceof PeriodPrinter) {\n+            return new PeriodFormatter((PeriodPrinter) pair, null);\n+        } else if (pair instanceof PeriodParser) {\n+            return new PeriodFormatter(null, (PeriodParser) pair);\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid element pair\");\n+        }\n+    } else {\n+        Object[] comp = null;\n+\n+        int i = 0;\n+        boolean startsWithSeparator = false;\n+\n+        while (i < size) {\n+            Object pair = elementPairs.get(i);\n+\n+            if (pair instanceof Separator) {\n+                startsWithSeparator = true;\n+                break;\n+            } else if (pair instanceof PeriodPrinter && !notPrinter) {\n+                comp = createComposite(elementPairs);\n+                break;\n+            } else if (pair instanceof PeriodParser && !notParser) {\n+                comp = createComposite(elementPairs);\n+                break;\n+            }\n+\n+            i++;\n+        }\n+\n+        if (comp == null) {\n+            int startIndex = startsWithSeparator ? 1 : 0;\n+\n+            while ((i < size) && !(elementPairs.get(i) instanceof Separator)) {\n+                i++;\n+            }\n+\n+            int endIndex = i < size ? i : size;\n+\n+            comp = createComposite(elementPairs.subList(startIndex, endIndex));\n+        }\n+\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n         } else if (notParser) {\n@@ -811,6 +855,7 @@ public class PeriodFormatterBuilder {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}