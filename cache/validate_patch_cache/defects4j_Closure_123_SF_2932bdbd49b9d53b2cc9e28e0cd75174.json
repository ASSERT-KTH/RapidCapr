{
    "patch": "public String fixCode(String code) {\n    String fixedCode = code;\n    if (code.contains(\"for(\") && code.contains(\"in\")) {\n        int startIndex = code.indexOf(\"for(\");\n        int endIndex = code.indexOf(\"{\", startIndex);\n\n        String forLoop = code.substring(startIndex, endIndex);\n        String[] loopComponents = forLoop.split(\";\");\n        String variable = loopComponents[0].substring(4, loopComponents[0].length() - 1);\n        String expression = loopComponents[1].substring(loopComponents[1].indexOf(\" \") + 1);\n\n        String newLoop = \"for(\" + variable + \" : \" + expression + \") {\";\n        for (int i = 2; i < loopComponents.length; i++) {\n            newLoop += loopComponents[i] + \";\";\n        }\n        newLoop += \"}\";\n\n        fixedCode = code.substring(0, startIndex) + newLoop + code.substring(endIndex);\n    }\n    return fixedCode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..f6fc91e4 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,27 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+    String fixedCode = code;\n+    if (code.contains(\"for(\") && code.contains(\"in\")) {\n+        int startIndex = code.indexOf(\"for(\");\n+        int endIndex = code.indexOf(\"{\", startIndex);\n+\n+        String forLoop = code.substring(startIndex, endIndex);\n+        String[] loopComponents = forLoop.split(\";\");\n+        String variable = loopComponents[0].substring(4, loopComponents[0].length() - 1);\n+        String expression = loopComponents[1].substring(loopComponents[1].indexOf(\" \") + 1);\n+\n+        String newLoop = \"for(\" + variable + \" : \" + expression + \") {\";\n+        for (int i = 2; i < loopComponents.length; i++) {\n+            newLoop += loopComponents[i] + \";\";\n+        }\n+        newLoop += \"}\";\n+\n+        fixedCode = code.substring(0, startIndex) + newLoop + code.substring(endIndex);\n+    }\n+    return fixedCode;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}