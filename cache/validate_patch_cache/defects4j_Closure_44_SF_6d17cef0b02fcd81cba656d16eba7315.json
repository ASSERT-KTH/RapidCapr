{
    "patch": "    if (newcode.isEmpty()) {\n      return;\n    }\n\n    boolean needsSpace = false;\n\n    char c = newcode.charAt(0);\n    if ((isWordChar(c) || c == '\\\\') &&\n        isWordChar(getLastChar())) {\n      needsSpace = true;\n    } else if (getLastChar() == '/') {\n      String lastTwoChars = getLastChar() + newcode.substring(0, 1);\n      if (!isRegExp(lastTwoChars)) {\n        needsSpace = true;\n      }\n    }\n\n    if (needsSpace) {\n      append(\" \");\n    }\n\n    append(newcode);\n  }\n\n  private boolean isRegExp(String str) {\n    try {\n      Pattern.compile(str);\n      return true;\n    } catch (PatternSyntaxException e) {\n      return false;\n    }\n  }\n\n  private boolean isWordChar(char c) {\n    return Character.isLetterOrDigit(c) || c == '_' || c == '$';\n  }\n\n  private char getLastChar() {\n    if (sb.length() == 0) {\n      return '\\0';\n    } else {\n      return sb.charAt(sb.length() - 1);\n    }\n  }\n\n  private void append(String str) {\n    sb.append(str);\n  }\n\n  private void maybeEndStatement() {\n    if (endWithSemiColon) {\n      append(\";\");\n      endWithSemiColon = false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 47556652..9eecc0c7 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -178,29 +178,60 @@ abstract class CodeConsumer {\n   void endCaseBody() {\n   }\n \n-  void add(String newcode) {\n-    maybeEndStatement();\n-\n-    if (newcode.length() == 0) {\n+    if (newcode.isEmpty()) {\n       return;\n     }\n \n+    boolean needsSpace = false;\n+\n     char c = newcode.charAt(0);\n     if ((isWordChar(c) || c == '\\\\') &&\n         isWordChar(getLastChar())) {\n-      // need space to separate. This is not pretty printing.\n-      // For example: \"return foo;\"\n+      needsSpace = true;\n+    } else if (getLastChar() == '/') {\n+      String lastTwoChars = getLastChar() + newcode.substring(0, 1);\n+      if (!isRegExp(lastTwoChars)) {\n+        needsSpace = true;\n+      }\n+    }\n+\n+    if (needsSpace) {\n       append(\" \");\n-      // Do not allow a forward slash to appear after a DIV.\n-      // For example,\n-      // REGEXP DIV REGEXP\n-      // is valid and should print like\n-      // / // / /\n     }\n \n     append(newcode);\n   }\n \n+  private boolean isRegExp(String str) {\n+    try {\n+      Pattern.compile(str);\n+      return true;\n+    } catch (PatternSyntaxException e) {\n+      return false;\n+    }\n+  }\n+\n+  private boolean isWordChar(char c) {\n+    return Character.isLetterOrDigit(c) || c == '_' || c == '$';\n+  }\n+\n+  private char getLastChar() {\n+    if (sb.length() == 0) {\n+      return '\\0';\n+    } else {\n+      return sb.charAt(sb.length() - 1);\n+    }\n+  }\n+\n+  private void append(String str) {\n+    sb.append(str);\n+  }\n+\n+  private void maybeEndStatement() {\n+    if (endWithSemiColon) {\n+      append(\";\");\n+      endWithSemiColon = false;\n+\n   void appendOp(String op, boolean binOp) {\n     append(op);\n   }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}