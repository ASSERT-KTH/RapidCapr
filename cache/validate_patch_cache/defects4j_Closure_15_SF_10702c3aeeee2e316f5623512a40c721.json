{
    "patch": "public boolean apply(Node n) {\n    // When the node is null it means, we reached the implicit return\n    // where the function returns (possibly without an return statement)\n    if (n == null) {\n        return false;\n    }\n\n    // TODO(user): We only care about calls to functions that\n    // passes one of the dependent variable to a non-side-effect free\n    // function.\n    if (mayMutateState(n, null)) {\n        return true;\n    }\n\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nprivate boolean mayMutateState(Node n, @Nullable Compiler compiler) {\n    Node target = n.getFirstChild();\n\n    if (NodeUtil.isObjectDefinePropertiesDefinition(compiler, n)) {\n        // Object.defineProperties can receive a descriptor with functions\n        // that could modify the state of the object.\n        return mayMutateState(target.getFirstChild(), compiler);\n    } else if (target.matchesQualifiedName(\"Function.prototype.bind\") || target.matchesQualifiedName(\"Function.prototype.toString\")) {\n        // do nothing: Function.prototype.{bind,toString} must not be considered as having side effects.\n    } else if (target.isCall()) {\n        // Special case for call nodes, don't traverse the first argument to avoid\n        // false-positives.\n        // (Assuming it's similar to \"Function.prototype.bind\").\n        for (Node argNode = target.getSecondChild(); argNode != null; argNode = argNode.getNext()) {\n            if (mayMutateState(argNode, compiler)) {\n                return true;\n            }\n        }\n    } else {\n        for (Node c = target.getFirstChild(); c != null; c = c.getNext()) {\n            if (!ControlFlowGraph.isEnteringNewCfgNode(c) && mayMutateState(c, compiler)) {\n                return true;\n            }\n        }\n        return NodeUtil.mayHaveSideEffects(target, compiler);\n    }\n\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..278a98e1 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -81,32 +81,58 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n   private static final Predicate<Node> SIDE_EFFECT_PREDICATE =\n     new Predicate<Node>() {\n       @Override\n-      public boolean apply(Node n) {\n-        // When the node is null it means, we reached the implicit return\n-        // where the function returns (possibly without an return statement)\n-        if (n == null) {\n-          return false;\n-        }\n+public boolean apply(Node n) {\n+    // When the node is null it means, we reached the implicit return\n+    // where the function returns (possibly without an return statement)\n+    if (n == null) {\n+        return false;\n+    }\n \n-        // TODO(user): We only care about calls to functions that\n-        // passes one of the dependent variable to a non-side-effect free\n-        // function.\n-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n-          return true;\n-        }\n+    // TODO(user): We only care about calls to functions that\n+    // passes one of the dependent variable to a non-side-effect free\n+    // function.\n+    if (mayMutateState(n, null)) {\n+        return true;\n+    }\n \n-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n-          return true;\n+    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+            return true;\n         }\n+    }\n \n+    return false;\n+}\n \n-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n-            return true;\n-          }\n+private boolean mayMutateState(Node n, @Nullable Compiler compiler) {\n+    Node target = n.getFirstChild();\n+\n+    if (NodeUtil.isObjectDefinePropertiesDefinition(compiler, n)) {\n+        // Object.defineProperties can receive a descriptor with functions\n+        // that could modify the state of the object.\n+        return mayMutateState(target.getFirstChild(), compiler);\n+    } else if (target.matchesQualifiedName(\"Function.prototype.bind\") || target.matchesQualifiedName(\"Function.prototype.toString\")) {\n+        // do nothing: Function.prototype.{bind,toString} must not be considered as having side effects.\n+    } else if (target.isCall()) {\n+        // Special case for call nodes, don't traverse the first argument to avoid\n+        // false-positives.\n+        // (Assuming it's similar to \"Function.prototype.bind\").\n+        for (Node argNode = target.getSecondChild(); argNode != null; argNode = argNode.getNext()) {\n+            if (mayMutateState(argNode, compiler)) {\n+                return true;\n+            }\n         }\n-        return false;\n-      }\n+    } else {\n+        for (Node c = target.getFirstChild(); c != null; c = c.getNext()) {\n+            if (!ControlFlowGraph.isEnteringNewCfgNode(c) && mayMutateState(c, compiler)) {\n+                return true;\n+            }\n+        }\n+        return NodeUtil.mayHaveSideEffects(target, compiler);\n+    }\n+\n+    return false;\n+}\n   };\n \n   public FlowSensitiveInlineVariables(AbstractCompiler compiler) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}