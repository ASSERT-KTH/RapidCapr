{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    final double EPSILON = 10e-12;\n    final int MAX_ITERATIONS = 1000;\n\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException(\"Invalid argument for regularizedGammaP function.\");\n    }\n\n    double previousSum = 0.0;\n    double currentSum = 1.0 / a;\n    int n = 1;\n    while (Math.abs(currentSum - previousSum) > EPSILON && n <= MAX_ITERATIONS) {\n        previousSum = currentSum;\n        currentSum += Math.pow(x, n) / (a + n);\n        n++;\n    }\n\n    if (n > MAX_ITERATIONS) {\n        throw new RuntimeException(\"Maximum number of iterations exceeded in regularizedGammaP function.\");\n    }\n\n    return Math.exp(-x) * Math.pow(x, a) * currentSum;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..5472bcddd 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,29 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    final double EPSILON = 10e-12;\n+    final int MAX_ITERATIONS = 1000;\n+\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException(\"Invalid argument for regularizedGammaP function.\");\n+    }\n+\n+    double previousSum = 0.0;\n+    double currentSum = 1.0 / a;\n+    int n = 1;\n+    while (Math.abs(currentSum - previousSum) > EPSILON && n <= MAX_ITERATIONS) {\n+        previousSum = currentSum;\n+        currentSum += Math.pow(x, n) / (a + n);\n+        n++;\n+    }\n+\n+    if (n > MAX_ITERATIONS) {\n+        throw new RuntimeException(\"Maximum number of iterations exceeded in regularizedGammaP function.\");\n+    }\n+\n+    return Math.exp(-x) * Math.pow(x, a) * currentSum;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}