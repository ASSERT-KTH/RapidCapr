{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    boolean isContiguousField = DateTimeUtils.isContiguous(partial) && (\n            (fieldIndex == 0 && partial.size() == 2) || fieldIndex == 1);\n    if (isContiguousField) {\n        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue();\n        int currentMonth = values[fieldIndex];\n        int newMonth = FieldUtils.safeAdd(currentMonth, valueToAdd);\n        if (newMonth < iChronology.monthOfYear().getMinimumValue() || newMonth > iChronology.monthOfYear().getMaximumValue()) {\n            throw new IllegalArgumentException(\"Month value must be between 1 and 12\");\n        }\n        int dayOfMonth = values[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n        if (dayOfMonth > maxDayOfMonth) {\n            dayOfMonth = maxDayOfMonth;\n        }\n        if (newMonth == 2 && dayOfMonth == 29) {\n            dayOfMonth = Math.min(28, maxDayOfMonth - 1);\n        }\n        return new int[]{values[0], newMonth, dayOfMonth};\n    }\n    return super.add(partial, fieldIndex, values, valueToAdd);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..15c5c925 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,30 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    boolean isContiguousField = DateTimeUtils.isContiguous(partial) && (\n+            (fieldIndex == 0 && partial.size() == 2) || fieldIndex == 1);\n+    if (isContiguousField) {\n+        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue();\n+        int currentMonth = values[fieldIndex];\n+        int newMonth = FieldUtils.safeAdd(currentMonth, valueToAdd);\n+        if (newMonth < iChronology.monthOfYear().getMinimumValue() || newMonth > iChronology.monthOfYear().getMaximumValue()) {\n+            throw new IllegalArgumentException(\"Month value must be between 1 and 12\");\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        int dayOfMonth = values[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n+        if (dayOfMonth > maxDayOfMonth) {\n+            dayOfMonth = maxDayOfMonth;\n         }\n+        if (newMonth == 2 && dayOfMonth == 29) {\n+            dayOfMonth = Math.min(28, maxDayOfMonth - 1);\n+        }\n+        return new int[]{values[0], newMonth, dayOfMonth};\n     }\n+    return super.add(partial, fieldIndex, values, valueToAdd);\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}