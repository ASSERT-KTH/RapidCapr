{
    "patch": "    if (!constraintObj.isNominalConstructor() &&\n        constraintObj.isAnonymousObjectType()) {\n      ObjectType objType = (ObjectType) getType();\n      ObjectType matchType = objType.matchObjectType(constraintObj);\n      if (matchType == null) {\n        return;\n      }\n      for (String pname : matchType.getOwnPropertyNames()) {\n        JSType reqPType = matchType.getPropertyType(pname);\n        JSType actPType = getPropertyType(pname);\n        // Add a new property so we don't overwrite actual properties.\n        if (actPType == null) {\n          defineInferredProperty(pname, reqPType, null);\n          continue;\n        }\n        JSType newPType = JSType.join(reqPType, actPType);\n        if (!newPType.equals(actPType)) {\n          if (actPType.isUnknownType()) {\n            defineProperty(pname, newPType, null, false);\n          } else {\n            warnings.add(JSError.make(\n                REDECLARED_PROPERTY_TYPE, \"Type inference\", pname));",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..314071c5 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,28 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+    if (!constraintObj.isNominalConstructor() &&\n+        constraintObj.isAnonymousObjectType()) {\n+      ObjectType objType = (ObjectType) getType();\n+      ObjectType matchType = objType.matchObjectType(constraintObj);\n+      if (matchType == null) {\n+        return;\n+      }\n+      for (String pname : matchType.getOwnPropertyNames()) {\n+        JSType reqPType = matchType.getPropertyType(pname);\n+        JSType actPType = getPropertyType(pname);\n+        // Add a new property so we don't overwrite actual properties.\n+        if (actPType == null) {\n+          defineInferredProperty(pname, reqPType, null);\n+          continue;\n+        }\n+        JSType newPType = JSType.join(reqPType, actPType);\n+        if (!newPType.equals(actPType)) {\n+          if (actPType.isUnknownType()) {\n+            defineProperty(pname, newPType, null, false);\n+          } else {\n+            warnings.add(JSError.make(\n+                REDECLARED_PROPERTY_TYPE, \"Type inference\", pname));\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: reached end of file while parsing",
    "test_result": "ERROR"
}