{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        int monthValueToAdd = ((fieldIndex == DateTimeFieldType.monthOfYear().getFieldIndex())\n                ? valueToAdd\n                : 0);\n        AdjustedMonth am = calculateAdjustedMonth(values, monthValueToAdd);\n        int yearValueToAdd = ((fieldIndex == DateTimeFieldType.year().getFieldIndex())\n                ? valueToAdd\n                : am.ymc.getYear() - values[DateTimeFieldType.year().getFieldIndex()]);\n        long instant = am.iInstant;\n        long minuend = am.iMinuend;\n\n        instant = iChronology.year().add(instant, yearValueToAdd);\n        if (instant < minuend) {\n            if (valueToAdd > 0) {\n                // This cannot happen for year subtraction When adding, the minuend can be lower than the largest value\n                instant = iChronology.year().set(instant, iChronology.year().get(maxSupportInstant()));\n            } else {\n                // We must keep substracting years until we pass the minuend year\n                do {\n                    instant = iChronology.year().add(instant, -1);\n                } while (iChronology.year().get(instant) > minuend);\n            }\n        }\n\n        instant = iChronology.monthOfYear().add(instant, monthValueToAdd);\n        int month = iChronology.monthOfYear().get(instant);\n        if (month != am.ymc.getMonthOfYear()) {\n            throw new org.joda.time.IllegalFieldValueException(DateTimeFieldType.monthOfYear(), String.valueOf(month));\n        }\n        int day = iChronology.dayOfMonth().get(instant);\n        if (day > am.maxDayOfMonth) {\n            instant = iChronology.dayOfMonth().set(instant, am.maxDayOfMonth);\n        }\n\n        int[] result = iChronology.get(partial, instant);\n        validateValueRanges(result, values);\n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n\nprivate AdjustedMonth calculateAdjustedMonth(int[] values, int setValue) {\n    int monthOfYear = -1;\n    int year = -1;\n    int maxDayOfMonth = -1;\n    long instant = 0;\n    long minuend = 0;\n    for (int i = 0; i < values.length; i++) {\n        int value;\n        if (i == DateTimeFieldType.monthOfYear().getFieldIndex()) {\n            value = setValue;\n            monthOfYear = value + values[i];\n            if (monthOfYear <= 0) {\n                monthOfYear += 12;\n                year = values[DateTimeFieldType.year().getFieldIndex()] - 1;\n            } else if (monthOfYear > 12) {\n                monthOfYear -= 12;\n                year = values[DateTimeFieldType.year().getFieldIndex()] + 1;\n            } else {\n                year = values[DateTimeFieldType.year().getFieldIndex()];\n            }\n            maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n            if (values[DateTimeFieldType.dayOfMonth().getFieldIndex()] > maxDayOfMonth) {\n                monthOfYear--;\n                if (monthOfYear == 0) {\n                    monthOfYear = 12;\n                    year--;\n                }\n                maxDayOfMonth = iChronology.dayOfMonth().getMaximumValueAsLong(\n                        iChronology.monthOfYear().set(\n                                iChronology.year().set(instant, year),\n                                monthOfYear\n                        ));\n            }\n        } else if (i == DateTimeFieldType.year().getFieldIndex()) {\n            value = year = setValue;\n        } else {\n            value = values[i];\n        }\n\n        instant = iChronology.getFieldType(i).getField(iChronology).set(instant, value);\n        if (i <= DateTimeFieldType.monthOfYear().getFieldIndex()) {\n            minuend = iChronology.getFieldType(i).getField(iChronology)\n                    .set(minuend, (i == DateTimeFieldType.monthOfYear().getFieldIndex() ? 1 : value));\n        }\n    }\n    return new AdjustedMonth(new YearMonth(year, monthOfYear), maxDayOfMonth, instant, minuend);\n}\n\nstatic class AdjustedMonth {\n    YearMonth ymc;\n    int maxDayOfMonth;\n    long iInstant;\n    long iMinuend;\n\n    AdjustedMonth(YearMonth ymc, int maxDayOfMonth, long iInstant, long iMinuend) {\n        this.ymc = ymc;\n        this.maxDayOfMonth = maxDayOfMonth;\n        this.iInstant = iInstant;\n        this.iMinuend = iMinuend;\n    }\n}\n\nprivate void validateValueRanges(int[] result, int[] original) {\n    for (int i = 0; i < result.length; i++) {\n        final DateTimeField type = iChronology.getFieldType(i);\n        if (type != null && !type.isValidValue(iChronology, result[i])) {\n            throw new org.joda.time.IllegalFieldValueException(type, String.valueOf(result[i]), null, null);\n        }\n\n        if (result[i] != original[i]) {\n            return;\n        }\n    }\n    throw new org.joda.time.IllegalArgumentException(\"No fields were changed in \" + partial);\n}\n\nprivate long maxSupportInstant() {\n    return iChronology.getDateTimeMillis(MAX_SUPPORTED_YEAR, 1, 1, 0);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..4653d4ed 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,131 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        int monthValueToAdd = ((fieldIndex == DateTimeFieldType.monthOfYear().getFieldIndex())\n+                ? valueToAdd\n+                : 0);\n+        AdjustedMonth am = calculateAdjustedMonth(values, monthValueToAdd);\n+        int yearValueToAdd = ((fieldIndex == DateTimeFieldType.year().getFieldIndex())\n+                ? valueToAdd\n+                : am.ymc.getYear() - values[DateTimeFieldType.year().getFieldIndex()]);\n+        long instant = am.iInstant;\n+        long minuend = am.iMinuend;\n+\n+        instant = iChronology.year().add(instant, yearValueToAdd);\n+        if (instant < minuend) {\n+            if (valueToAdd > 0) {\n+                // This cannot happen for year subtraction When adding, the minuend can be lower than the largest value\n+                instant = iChronology.year().set(instant, iChronology.year().get(maxSupportInstant()));\n+            } else {\n+                // We must keep substracting years until we pass the minuend year\n+                do {\n+                    instant = iChronology.year().add(instant, -1);\n+                } while (iChronology.year().get(instant) > minuend);\n+            }\n+        }\n+\n+        instant = iChronology.monthOfYear().add(instant, monthValueToAdd);\n+        int month = iChronology.monthOfYear().get(instant);\n+        if (month != am.ymc.getMonthOfYear()) {\n+            throw new org.joda.time.IllegalFieldValueException(DateTimeFieldType.monthOfYear(), String.valueOf(month));\n+        }\n+        int day = iChronology.dayOfMonth().get(instant);\n+        if (day > am.maxDayOfMonth) {\n+            instant = iChronology.dayOfMonth().set(instant, am.maxDayOfMonth);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+\n+        int[] result = iChronology.get(partial, instant);\n+        validateValueRanges(result, values);\n+        return result;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n+    }\n+}\n+\n+private AdjustedMonth calculateAdjustedMonth(int[] values, int setValue) {\n+    int monthOfYear = -1;\n+    int year = -1;\n+    int maxDayOfMonth = -1;\n+    long instant = 0;\n+    long minuend = 0;\n+    for (int i = 0; i < values.length; i++) {\n+        int value;\n+        if (i == DateTimeFieldType.monthOfYear().getFieldIndex()) {\n+            value = setValue;\n+            monthOfYear = value + values[i];\n+            if (monthOfYear <= 0) {\n+                monthOfYear += 12;\n+                year = values[DateTimeFieldType.year().getFieldIndex()] - 1;\n+            } else if (monthOfYear > 12) {\n+                monthOfYear -= 12;\n+                year = values[DateTimeFieldType.year().getFieldIndex()] + 1;\n+            } else {\n+                year = values[DateTimeFieldType.year().getFieldIndex()];\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n+            if (values[DateTimeFieldType.dayOfMonth().getFieldIndex()] > maxDayOfMonth) {\n+                monthOfYear--;\n+                if (monthOfYear == 0) {\n+                    monthOfYear = 12;\n+                    year--;\n+                }\n+                maxDayOfMonth = iChronology.dayOfMonth().getMaximumValueAsLong(\n+                        iChronology.monthOfYear().set(\n+                                iChronology.year().set(instant, year),\n+                                monthOfYear\n+                        ));\n+            }\n+        } else if (i == DateTimeFieldType.year().getFieldIndex()) {\n+            value = year = setValue;\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            value = values[i];\n+        }\n+\n+        instant = iChronology.getFieldType(i).getField(iChronology).set(instant, value);\n+        if (i <= DateTimeFieldType.monthOfYear().getFieldIndex()) {\n+            minuend = iChronology.getFieldType(i).getField(iChronology)\n+                    .set(minuend, (i == DateTimeFieldType.monthOfYear().getFieldIndex() ? 1 : value));\n         }\n     }\n+    return new AdjustedMonth(new YearMonth(year, monthOfYear), maxDayOfMonth, instant, minuend);\n+}\n+\n+static class AdjustedMonth {\n+    YearMonth ymc;\n+    int maxDayOfMonth;\n+    long iInstant;\n+    long iMinuend;\n+\n+    AdjustedMonth(YearMonth ymc, int maxDayOfMonth, long iInstant, long iMinuend) {\n+        this.ymc = ymc;\n+        this.maxDayOfMonth = maxDayOfMonth;\n+        this.iInstant = iInstant;\n+        this.iMinuend = iMinuend;\n+    }\n+}\n+\n+private void validateValueRanges(int[] result, int[] original) {\n+    for (int i = 0; i < result.length; i++) {\n+        final DateTimeField type = iChronology.getFieldType(i);\n+        if (type != null && !type.isValidValue(iChronology, result[i])) {\n+            throw new org.joda.time.IllegalFieldValueException(type, String.valueOf(result[i]), null, null);\n+        }\n+\n+        if (result[i] != original[i]) {\n+            return;\n+        }\n+    }\n+    throw new org.joda.time.IllegalArgumentException(\"No fields were changed in \" + partial);\n+}\n+\n+private long maxSupportInstant() {\n+    return iChronology.getDateTimeMillis(MAX_SUPPORTED_YEAR, 1, 1, 0);\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}