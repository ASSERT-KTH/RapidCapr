{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        int minPossibleDay = iChronology.getMinimumValue(DateTimeFieldType.dayOfMonth());\n        int maxPossibleDay = iChronology.getMaximumValue(DateTimeFieldType.dayOfMonth());\n        while (true) {\n            long newInstant = add(instant, valueToAdd);\n            int newMonth = iChronology.get(DateTimeFieldType.monthOfYear(), newInstant);\n            int newYear = iChronology.get(DateTimeFieldType.year(), newInstant);\n            if (newMonth != iChronology.get(DateTimeFieldType.monthOfYear(), instant)) {\n                // If adding months caused the month field to overflow (e.g. from February to March)\n                // we can break out of the loop.\n                break;\n            }\n            // Check whether the resulting day is valid.\n            int newDay = iChronology.get(DateTimeFieldType.dayOfMonth(), newInstant);\n            if (newDay >= minPossibleDay && newDay <= maxPossibleDay) {\n                instant = newInstant;\n                break;\n            }\n            // If newDay is invalid, find the last valid day of that month in that year.\n            newDay = Math.max(iChronology.getMinimumValue(DateTimeFieldType.dayOfMonth()),\n                    Math.min(newDay, iChronology.getDaysInYearMonth(newYear, newMonth)));\n            if (newDay == iChronology.get(DateTimeFieldType.dayOfMonth(), instant)) {\n                // If we are stuck in an infinite loop on the same invalid day, break out and return the\n                // current invalid value.\n                break;\n            }\n            // Set the day to the last valid day in that month and continue the loop.\n            int[] newValues = Arrays.copyOf(values, values.length);\n            newValues[iChronology.dayOfMonth().getFieldIndex()] = newDay;\n            values = newValues;\n            instant = iChronology.getDateTimeMillis(newValues);\n        }\n        return iChronology.get(partial, instant);\n    }\n    return super.add(partial, fieldIndex, values, valueToAdd);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..44c3eeb5 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,53 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        int minPossibleDay = iChronology.getMinimumValue(DateTimeFieldType.dayOfMonth());\n+        int maxPossibleDay = iChronology.getMaximumValue(DateTimeFieldType.dayOfMonth());\n+        while (true) {\n+            long newInstant = add(instant, valueToAdd);\n+            int newMonth = iChronology.get(DateTimeFieldType.monthOfYear(), newInstant);\n+            int newYear = iChronology.get(DateTimeFieldType.year(), newInstant);\n+            if (newMonth != iChronology.get(DateTimeFieldType.monthOfYear(), instant)) {\n+                // If adding months caused the month field to overflow (e.g. from February to March)\n+                // we can break out of the loop.\n+                break;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            // Check whether the resulting day is valid.\n+            int newDay = iChronology.get(DateTimeFieldType.dayOfMonth(), newInstant);\n+            if (newDay >= minPossibleDay && newDay <= maxPossibleDay) {\n+                instant = newInstant;\n+                break;\n+            }\n+            // If newDay is invalid, find the last valid day of that month in that year.\n+            newDay = Math.max(iChronology.getMinimumValue(DateTimeFieldType.dayOfMonth()),\n+                    Math.min(newDay, iChronology.getDaysInYearMonth(newYear, newMonth)));\n+            if (newDay == iChronology.get(DateTimeFieldType.dayOfMonth(), instant)) {\n+                // If we are stuck in an infinite loop on the same invalid day, break out and return the\n+                // current invalid value.\n+                break;\n+            }\n+            // Set the day to the last valid day in that month and continue the loop.\n+            int[] newValues = Arrays.copyOf(values, values.length);\n+            newValues[iChronology.dayOfMonth().getFieldIndex()] = newDay;\n+            values = newValues;\n+            instant = iChronology.getDateTimeMillis(newValues);\n         }\n+        return iChronology.get(partial, instant);\n     }\n+    return super.add(partial, fieldIndex, values, valueToAdd);\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}