{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int maxSize = 1000; // maximum size of matrix allowed\n    final int nRows = m.getRowDimension();\n    final int nCols = m.getColumnDimension();\n    if (nRows > maxSize || nCols > maxSize) {\n        // matrix is too large, split it into smaller matrices\n        final int nSubMatrices = (int) Math.ceil((double) nRows / maxSize);\n        final List<RealMatrix> subMatrices = new ArrayList<>(nSubMatrices);\n        for (int i = 0; i < nSubMatrices; i++) {\n            final int startRow = i * maxSize;\n            final int endRow = Math.min(startRow + maxSize, nRows);\n            final int nRowsSub = endRow - startRow;\n            final RealMatrix subMatrix = m.getSubMatrix(startRow, endRow - 1, 0, nCols - 1);\n            subMatrices.add(squareRoot(subMatrix));\n        }\n        // combine the submatrices by direct sum\n        return new BlockRealMatrix(subMatrices);\n    } else {\n        // matrix is small enough, compute square root using eigen decomposition\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..4c1ca29cc 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,27 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int maxSize = 1000; // maximum size of matrix allowed\n+    final int nRows = m.getRowDimension();\n+    final int nCols = m.getColumnDimension();\n+    if (nRows > maxSize || nCols > maxSize) {\n+        // matrix is too large, split it into smaller matrices\n+        final int nSubMatrices = (int) Math.ceil((double) nRows / maxSize);\n+        final List<RealMatrix> subMatrices = new ArrayList<>(nSubMatrices);\n+        for (int i = 0; i < nSubMatrices; i++) {\n+            final int startRow = i * maxSize;\n+            final int endRow = Math.min(startRow + maxSize, nRows);\n+            final int nRowsSub = endRow - startRow;\n+            final RealMatrix subMatrix = m.getSubMatrix(startRow, endRow - 1, 0, nCols - 1);\n+            subMatrices.add(squareRoot(subMatrix));\n+        }\n+        // combine the submatrices by direct sum\n+        return new BlockRealMatrix(subMatrices);\n+    } else {\n+        // matrix is small enough, compute square root using eigen decomposition\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n     }\n }\n+}",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}