{
    "patch": "public Fraction reduce() {\n    if (numerator == 0) {\n        return Fraction.ZERO;\n    } else if (denominator == 0) {\n        return Fraction.NaN;\n    } else {\n        int sign = ((numerator > 0) == (denominator > 0)) ? 1 : -1;\n        int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));\n        return new Fraction(sign * Math.abs(numerator) / gcd, Math.abs(denominator) / gcd);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..83c464ab 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,13 +462,17 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n-        }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+public Fraction reduce() {\n+    if (numerator == 0) {\n+        return Fraction.ZERO;\n+    } else if (denominator == 0) {\n+        return Fraction.NaN;\n+    } else {\n+        int sign = ((numerator > 0) == (denominator > 0)) ? 1 : -1;\n+        int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));\n+        return new Fraction(sign * Math.abs(numerator) / gcd, Math.abs(denominator) / gcd);\n     }\n+}\n \n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}