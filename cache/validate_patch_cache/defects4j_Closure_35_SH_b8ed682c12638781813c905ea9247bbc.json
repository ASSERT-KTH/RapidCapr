{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) { \n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          } else if (objType.isStructuralInterface()\n              && !objType.isPropertyTypeInferred(prop)) {\n            JSType inferredType = ObjectType.maybeMakeNominalType(\n                propType, getCommonTypes());\n            if (inferredType.isStructurallyEquivalentTo(\n                    objType.getDeclaredPropertyType(prop))) {\n              objType.inferProperty(prop, inferredType);\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..73e17c51 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,7 +1118,7 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n+    if (constraintObj != null && constraintObj.isRecordType()) { \n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n@@ -1130,9 +1130,16 @@ class TypeInference\n                   getNativeType(VOID_TYPE).getLeastSupertype(propType);\n             }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n+          } else if (objType.isStructuralInterface()\n+              && !objType.isPropertyTypeInferred(prop)) {\n+            JSType inferredType = ObjectType.maybeMakeNominalType(\n+                propType, getCommonTypes());\n+            if (inferredType.isStructurallyEquivalentTo(\n+                    objType.getDeclaredPropertyType(prop))) {\n+              objType.inferProperty(prop, inferredType);\n+            }\n           }\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}