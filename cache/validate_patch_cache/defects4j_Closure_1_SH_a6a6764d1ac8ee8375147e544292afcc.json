{
    "patch": "for (Var v : fnScope.getVars()) {\n      // Global variables should never be removed.\n      if (!v.isLocal()) {\n        continue;\n      }\n      if (!referenced.contains(v)) {\n        if (v.getParentNode() != null) {\n          // Remove the variable es6 destructuring binding expressions.\n          Node destructuring = v.getParentNode().getParent();\n          if (NodeUtil.isDestructuringLhs(destructuring.getParent())) {\n            destructuring.getParent().removeFirstChild();\n            if (!destructuring.getParent().hasChildren()) {\n              destructuring.getParent().detach();\n            }\n          } else {\n            v.getNameNode().detach();\n            v.getParentNode().detach();\n          }\n          compiler.reportCodeChange();\n        }\n        if (fnScope.isDeclared(v.getName(), true)) {\n          fnScope.undeclare(v.getName());\n        }\n      }\n    }\n\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..37efeef0 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,57 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+for (Var v : fnScope.getVars()) {\n+      // Global variables should never be removed.\n+      if (!v.isLocal()) {\n+        continue;\n+      }\n+      if (!referenced.contains(v)) {\n+        if (v.getParentNode() != null) {\n+          // Remove the variable es6 destructuring binding expressions.\n+          Node destructuring = v.getParentNode().getParent();\n+          if (NodeUtil.isDestructuringLhs(destructuring.getParent())) {\n+            destructuring.getParent().removeFirstChild();\n+            if (!destructuring.getParent().hasChildren()) {\n+              destructuring.getParent().detach();\n+            }\n+          } else {\n+            v.getNameNode().detach();\n+            v.getParentNode().detach();\n+          }\n+          compiler.reportCodeChange();\n+        }\n+        if (fnScope.isDeclared(v.getName(), true)) {\n+          fnScope.undeclare(v.getName());\n+        }\n+      }\n+    }\n+\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: for-each not applicable to expression type",
    "test_result": "ERROR"
}