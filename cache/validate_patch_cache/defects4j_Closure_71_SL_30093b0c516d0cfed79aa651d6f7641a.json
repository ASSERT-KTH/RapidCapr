{
    "patch": "boolean isOverride = NodeUtil.isAssignmentOp(parent.getParent()) &&\n          parent.getParent().getFirstChild() == parent &&\n          parent.getFirstChild() == getprop;\n          \nif (!isOverride) {\n  isOverride = getprop.getParent().isCall() &&\n      parent.getType() == Token.GETPROP &&\n      getprop.getParent().getSecondChild() == getprop;\n  if (isOverride) {\n    String propertyOwner = objectType.toString();\n    propertyOwner = propertyOwner.substring(1, propertyOwner.length() - \".prototype\".length());\n    ObjectType ownerType = ObjectType.cast(getprop.getFirstChild().getJSType());\n    if (ownerType != null && ownerType.isConstructor()) {\n      isOverride = t.inGlobalScope() && \n          ownerType.toString().equals(propertyOwner) &&\n          parent.getParent().getParent().getType() != Token.NEW;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..d54bcea7 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,25 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+boolean isOverride = NodeUtil.isAssignmentOp(parent.getParent()) &&\n+          parent.getParent().getFirstChild() == parent &&\n+          parent.getFirstChild() == getprop;\n+          \n+if (!isOverride) {\n+  isOverride = getprop.getParent().isCall() &&\n+      parent.getType() == Token.GETPROP &&\n+      getprop.getParent().getSecondChild() == getprop;\n+  if (isOverride) {\n+    String propertyOwner = objectType.toString();\n+    propertyOwner = propertyOwner.substring(1, propertyOwner.length() - \".prototype\".length());\n+    ObjectType ownerType = ObjectType.cast(getprop.getFirstChild().getJSType());\n+    if (ownerType != null && ownerType.isConstructor()) {\n+      isOverride = t.inGlobalScope() && \n+          ownerType.toString().equals(propertyOwner) &&\n+          parent.getParent().getParent().getType() != Token.NEW;\n+    }\n+  }\n+}\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}