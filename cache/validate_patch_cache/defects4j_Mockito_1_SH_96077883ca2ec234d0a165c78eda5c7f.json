{
    "patch": "```\nObject[] args = invocation.getRawArguments();\nif (args != null) {\n    for (int i = 0; i < args.length; i++) {\n        Object arg = args[i];\n        for (int j = 0; j < matchers.size(); j++) {\n            Matcher m = matchers.get(j);\n            if (m instanceof CapturesArguments) {\n                if (!(m instanceof VarargMatcher) && j == i) {\n                    ((CapturesArguments) m).captureFrom(arg);\n                } else if (m instanceof VarargMatcher && i == args.length - 1) {\n                    Object varargs = args[i];\n                    if (varargs != null && varargs.getClass().isArray()) {\n                        for (int k = 0; k < Array.getLength(varargs); k++) {\n                            ((CapturesArguments) m).captureFrom(Array.get(varargs, k));\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..03098aeca 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,29 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+```\n+Object[] args = invocation.getRawArguments();\n+if (args != null) {\n+    for (int i = 0; i < args.length; i++) {\n+        Object arg = args[i];\n+        for (int j = 0; j < matchers.size(); j++) {\n+            Matcher m = matchers.get(j);\n+            if (m instanceof CapturesArguments) {\n+                if (!(m instanceof VarargMatcher) && j == i) {\n+                    ((CapturesArguments) m).captureFrom(arg);\n+                } else if (m instanceof VarargMatcher && i == args.length - 1) {\n+                    Object varargs = args[i];\n+                    if (varargs != null && varargs.getClass().isArray()) {\n+                        for (int k = 0; k < Array.getLength(varargs); k++) {\n+                            ((CapturesArguments) m).captureFrom(Array.get(varargs, k));\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+```\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: illegal character: '`'",
    "test_result": "ERROR"
}