{
    "patch": "    public Dfp multiply(final int x) {\n        if (isNaN()) {\n            return newInstance(sign, NaN);\n        }\n\n        if (x == 0) {\n            return newInstance(getField(), 0);\n        }\n\n        if (x == 1) {\n            return newInstance(this);\n        }\n\n        if (x == -1) {\n            return newInstance(sign.negate(), exp, mant);\n        }\n\n\n        final Dfp product = newInstance(this);\n        final int[] productMantissa = product.mant.clone();\n\n        final long carry = product.mult(productMantissa, getSignedMantissa(), x);\n\n        if (carry != 0) {\n            final byte[] newMant = new byte[productMantissa.length + 1];\n            System.arraycopy(productMantissa, 0, newMant, 0, productMantissa.length);\n            newMant[productMantissa.length] = (byte) carry;\n            product.shiftLeft(newMant, product.getFastScale() + 1);\n        } else {\n            product.shiftLeft(productMantissa, product.getFastScale());\n        }\n\n        return product.round(product.getField().getRoundingMode());\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..e3d790feb 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,38 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+        if (isNaN()) {\n+            return newInstance(sign, NaN);\n+        }\n+\n+        if (x == 0) {\n+            return newInstance(getField(), 0);\n+        }\n+\n+        if (x == 1) {\n+            return newInstance(this);\n+        }\n+\n+        if (x == -1) {\n+            return newInstance(sign.negate(), exp, mant);\n+        }\n+\n+\n+        final Dfp product = newInstance(this);\n+        final int[] productMantissa = product.mant.clone();\n+\n+        final long carry = product.mult(productMantissa, getSignedMantissa(), x);\n+\n+        if (carry != 0) {\n+            final byte[] newMant = new byte[productMantissa.length + 1];\n+            System.arraycopy(productMantissa, 0, newMant, 0, productMantissa.length);\n+            newMant[productMantissa.length] = (byte) carry;\n+            product.shiftLeft(newMant, product.getFastScale() + 1);\n+        } else {\n+            product.shiftLeft(productMantissa, product.getFastScale());\n+        }\n+\n+        return product.round(product.getField().getRoundingMode());\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}