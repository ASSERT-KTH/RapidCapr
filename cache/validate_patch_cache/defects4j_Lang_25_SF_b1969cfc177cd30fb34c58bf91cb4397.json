{
    "patch": "public String unescape(String str) {\n    if(str == null) {\n        return null;\n    }\n    StringBuffer result = new StringBuffer(str.length());\n    int i = 0;\n    while(i < str.length()) {\n        char c = str.charAt(i);\n        switch(c) {\n            case '\\\\':\n                if(i + 1 < str.length()) {\n                    char next = str.charAt(i + 1);\n                    switch(next) {\n                        case 'n':\n                            result.append('\\n');\n                            i += 2;\n                            break;\n                        case 'r':\n                            result.append('\\r');\n                            i += 2;\n                            break;\n                        case 't':\n                            result.append('\\t');\n                            i += 2;\n                            break;\n                        case 'f':\n                            result.append('\\f');\n                            i += 2;\n                            break;\n                        case '\\\\':\n                            result.append('\\\\');\n                            i += 2;\n                            break;\n                        case '\\'':\n                            result.append('\\'');\n                            i += 2;\n                            break;\n                        case '\\\"':\n                            result.append('\\\"');\n                            i += 2;\n                            break;\n                        case 'u':\n                            if(i + 5 < str.length()) {\n                                try {\n                                    int charValue = Integer.parseInt(str.substring(i + 2, i + 6), 16);\n                                    result.append((char) charValue);\n                                    i += 6;\n                                } catch(NumberFormatException e) {\n                                    result.append(c);\n                                    i++;\n                                }\n                            } else {\n                                result.append(c);\n                                i++;\n                            }\n                            break;\n                        default:\n                            result.append(c);\n                            i++;\n                            break;\n                    }\n                } else {\n                    result.append(c);\n                    i++;\n                }\n                break;\n            default:\n                result.append(c);\n                i++;\n                break;\n        }\n    }\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..3de09d87 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,80 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public String unescape(String str) {\n+    if(str == null) {\n+        return null;\n+    }\n+    StringBuffer result = new StringBuffer(str.length());\n+    int i = 0;\n+    while(i < str.length()) {\n+        char c = str.charAt(i);\n+        switch(c) {\n+            case '\\\\':\n+                if(i + 1 < str.length()) {\n+                    char next = str.charAt(i + 1);\n+                    switch(next) {\n+                        case 'n':\n+                            result.append('\\n');\n+                            i += 2;\n+                            break;\n+                        case 'r':\n+                            result.append('\\r');\n+                            i += 2;\n+                            break;\n+                        case 't':\n+                            result.append('\\t');\n+                            i += 2;\n+                            break;\n+                        case 'f':\n+                            result.append('\\f');\n+                            i += 2;\n+                            break;\n+                        case '\\\\':\n+                            result.append('\\\\');\n+                            i += 2;\n+                            break;\n+                        case '\\'':\n+                            result.append('\\'');\n+                            i += 2;\n+                            break;\n+                        case '\\\"':\n+                            result.append('\\\"');\n+                            i += 2;\n+                            break;\n+                        case 'u':\n+                            if(i + 5 < str.length()) {\n+                                try {\n+                                    int charValue = Integer.parseInt(str.substring(i + 2, i + 6), 16);\n+                                    result.append((char) charValue);\n+                                    i += 6;\n+                                } catch(NumberFormatException e) {\n+                                    result.append(c);\n+                                    i++;\n+                                }\n+                            } else {\n+                                result.append(c);\n+                                i++;\n+                            }\n+                            break;\n+                        default:\n+                            result.append(c);\n+                            i++;\n+                            break;\n+                    }\n+                } else {\n+                    result.append(c);\n+                    i++;\n+                }\n+                break;\n+            default:\n+                result.append(c);\n+                i++;\n+                break;\n+        }\n+    }\n+    return result.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}