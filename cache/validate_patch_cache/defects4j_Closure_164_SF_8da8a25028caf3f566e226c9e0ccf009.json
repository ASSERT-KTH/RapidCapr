{
    "patch": "  public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    // If that.paramType[i] is a required parameter, then this.paramType[i] must be a required parameter\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam != null && thatParam != null) {\n      // Get the JSType of each parameter\n      JSType thisParamType = thisParam.getJSType();\n      JSType thatParamType = thatParam.getJSType();\n\n      // If thatParamType is required but thisParamType is optional, it's not a subtype.\n      if (thatParamType != null && !thatParamType.isUnknownType() && (thisParamType == null || thisParamType.isUnknownType())) {\n        return false;\n      }\n\n      // Check that thatParamType is a subtype of thisParamType\n      if (thatParamType != null && !thatParamType.isSubtype(thisParamType)) {\n        return false;\n      }\n\n      // Advance to the next parameters\n      thisParam = thisParam.getNext();\n      thatParam = thatParam.getNext();\n    }\n\n    // If there are any remaining optional parameters in the subtype, return false.\n    while (thisParam != null) {\n      if (thisParam.getJSType() != null && !thisParam.getJSType().isUnknownType()) {\n        return false;\n      }\n      thisParam = thisParam.getNext();",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..69a23753 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -93,65 +93,35 @@ final class ArrowType extends JSType {\n     }\n \n     // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n+    // If that.paramType[i] is a required parameter, then this.paramType[i] must be a required parameter\n     Node thisParam = parameters.getFirstChild();\n     Node thatParam = that.parameters.getFirstChild();\n     while (thisParam != null && thatParam != null) {\n+      // Get the JSType of each parameter\n       JSType thisParamType = thisParam.getJSType();\n       JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n-          return false;\n-        }\n-      }\n \n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n-\n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n-\n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n-        thisParam = thisParam.getNext();\n-      }\n-      if (!thatIsVarArgs) {\n-        thatParam = thatParam.getNext();\n+      // If thatParamType is required but thisParamType is optional, it's not a subtype.\n+      if (thatParamType != null && !thatParamType.isUnknownType() && (thisParamType == null || thisParamType.isUnknownType())) {\n+        return false;\n       }\n \n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n+      // Check that thatParamType is a subtype of thisParamType\n+      if (thatParamType != null && !thatParamType.isSubtype(thisParamType)) {\n+        return false;\n       }\n-    }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n+      // Advance to the next parameters\n+      thisParam = thisParam.getNext();\n+      thatParam = thatParam.getNext();\n+    }\n \n-    return true;\n-  }\n+    // If there are any remaining optional parameters in the subtype, return false.\n+    while (thisParam != null) {\n+      if (thisParam.getJSType() != null && !thisParam.getJSType().isUnknownType()) {\n+        return false;\n+      }\n+      thisParam = thisParam.getNext();\n \n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}