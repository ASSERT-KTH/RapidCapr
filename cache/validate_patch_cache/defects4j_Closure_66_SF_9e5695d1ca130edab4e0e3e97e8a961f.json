{
    "patch": "public static double getTypedPercent(List<JsonObject> jsonObjects) {\n    double count = 0.0;\n    double totalCount = 0.0;\n    for (JsonObject jsonObject : jsonObjects) {\n        if (jsonObject.get(\"typed\") != null) {\n            totalCount += 1.0;\n            if (jsonObject.get(\"typed\").getAsBoolean()) {\n                count += 1.0;\n            }\n        }\n    }\n    if (totalCount == 0.0) {\n        return 0.0;\n    }\n    return count / totalCount * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..14c8de87 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(List<JsonObject> jsonObjects) {\n+    double count = 0.0;\n+    double totalCount = 0.0;\n+    for (JsonObject jsonObject : jsonObjects) {\n+        if (jsonObject.get(\"typed\") != null) {\n+            totalCount += 1.0;\n+            if (jsonObject.get(\"typed\").getAsBoolean()) {\n+                count += 1.0;\n+            }\n+        }\n+    }\n+    if (totalCount == 0.0) {\n+        return 0.0;\n+    }\n+    return count / totalCount * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}