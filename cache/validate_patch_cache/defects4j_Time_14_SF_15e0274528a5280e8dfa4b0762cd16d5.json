{
    "patch": "            int instant;\n            int[] newValues = values.clone();\n            // Add the new value to the correct partial field\n            newValues[fieldIndex] += valueToAdd;\n            // Check if field which has just been incremented is a month field\n            if (fieldIndex == 1) {\n                // If the month has become 13 after the addition, set it back to 1 and increment the year field\n                while (newValues[1] > 12) {\n                    newValues[0] = iChronology.year().add(newValues[0], 1);\n                    newValues[1] -= 12;\n                }\n                // If the month has become 0 after the subtraction, set it to 12 and decrement the year field\n                while (newValues[1] < 1) {\n                    newValues[0] = iChronology.year().add(newValues[0], -1);\n                    newValues[1] += 12;\n                }\n            }\n            instant = iChronology.getDateTimeMillis(newValues[0], newValues[1], newValues[2], newValues[3],\n                    newValues[4], newValues[5], newValues[6]);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..30714bc5 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,25 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            int instant;\n+            int[] newValues = values.clone();\n+            // Add the new value to the correct partial field\n+            newValues[fieldIndex] += valueToAdd;\n+            // Check if field which has just been incremented is a month field\n+            if (fieldIndex == 1) {\n+                // If the month has become 13 after the addition, set it back to 1 and increment the year field\n+                while (newValues[1] > 12) {\n+                    newValues[0] = iChronology.year().add(newValues[0], 1);\n+                    newValues[1] -= 12;\n+                }\n+                // If the month has become 0 after the subtraction, set it to 12 and decrement the year field\n+                while (newValues[1] < 1) {\n+                    newValues[0] = iChronology.year().add(newValues[0], -1);\n+                    newValues[1] += 12;\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n-    }\n+            instant = iChronology.getDateTimeMillis(newValues[0], newValues[1], newValues[2], newValues[3],\n+                    newValues[4], newValues[5], newValues[6]);\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: ']' expected",
    "test_result": "ERROR"
}