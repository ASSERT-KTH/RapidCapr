{
    "patch": "public long adjustOffset(long instant, boolean earlierOrLater) {\n    long local = convertUTCToLocal(instant);\n    boolean isGap = false;\n    boolean isOverlap = false;\n    long prevInstant = instant - 1;\n    long nextInstant = instant + 1;\n    \n    // Check if there is a gap or overlap\n    if (convertUTCToLocal(prevInstant) != local) {\n        isGap = true;\n    } else if (convertUTCToLocal(nextInstant) != local) {\n        isOverlap = true;\n    } else {\n        // If there is no gap or overlap, return the input instant\n        return instant;\n    }\n    \n    // Determine the range of instants that have duplicate local times\n    if (isGap) {\n        long localBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        long localAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        \n        // Check if there is an overlap within the range\n        if (localBefore == localAfter) {\n            // If not, return the input instant\n            return instant;\n        }\n        \n        while (localBefore == localAfter) {\n            // Expand the range until an overlap is found\n            localBefore = convertUTCToLocal(prevInstant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n            localAfter = convertUTCToLocal(nextInstant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n            prevInstant -= 3 * DateTimeConstants.MILLIS_PER_HOUR;\n            nextInstant += 3 * DateTimeConstants.MILLIS_PER_HOUR;\n        }\n        \n        return convertLocalToUTC(local, false, earlierOrLater ? nextInstant : prevInstant);\n    } else {\n        long localBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        long localAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        \n        // Check if there is a gap within the range\n        if (localBefore != localAfter) {\n            // If not, return the input instant\n            return instant;\n        }\n        \n        while (localBefore == localAfter) {\n            // Expand the range until a gap is found\n            localBefore = convertUTCToLocal(prevInstant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n            localAfter = convertUTCToLocal(nextInstant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n            prevInstant -= 3 * DateTimeConstants.MILLIS_PER_HOUR;\n            nextInstant += 3 * DateTimeConstants.MILLIS_PER_HOUR;\n        }\n        \n        return convertLocalToUTC(local, false, earlierOrLater ? prevInstant : nextInstant);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802a..8beb7ced 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1160,24 +1160,64 @@ public abstract class DateTimeZone implements Serializable {\n      * @param earlierOrLater  false for earlier, true for later\n      * @return the adjusted instant millis\n      */\n-    public long adjustOffset(long instant, boolean earlierOrLater) {\n-        // a bit messy, but will work in all non-pathological cases\n+public long adjustOffset(long instant, boolean earlierOrLater) {\n+    long local = convertUTCToLocal(instant);\n+    boolean isGap = false;\n+    boolean isOverlap = false;\n+    long prevInstant = instant - 1;\n+    long nextInstant = instant + 1;\n+    \n+    // Check if there is a gap or overlap\n+    if (convertUTCToLocal(prevInstant) != local) {\n+        isGap = true;\n+    } else if (convertUTCToLocal(nextInstant) != local) {\n+        isOverlap = true;\n+    } else {\n+        // If there is no gap or overlap, return the input instant\n+        return instant;\n+    }\n+    \n+    // Determine the range of instants that have duplicate local times\n+    if (isGap) {\n+        long localBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n+        long localAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n+        \n+        // Check if there is an overlap within the range\n+        if (localBefore == localAfter) {\n+            // If not, return the input instant\n+            return instant;\n+        }\n         \n-        // evaluate 3 hours before and after to work out if anything is happening\n-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        if (instantBefore == instantAfter) {\n-            return instant;  // not an overlap (less than is a gap, equal is normal case)\n+        while (localBefore == localAfter) {\n+            // Expand the range until an overlap is found\n+            localBefore = convertUTCToLocal(prevInstant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n+            localAfter = convertUTCToLocal(nextInstant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n+            prevInstant -= 3 * DateTimeConstants.MILLIS_PER_HOUR;\n+            nextInstant += 3 * DateTimeConstants.MILLIS_PER_HOUR;\n         }\n         \n-        // work out range of instants that have duplicate local times\n-        long local = convertUTCToLocal(instant);\n-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n+        return convertLocalToUTC(local, false, earlierOrLater ? nextInstant : prevInstant);\n+    } else {\n+        long localBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n+        long localAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n         \n-        // calculate result\n-          // currently in later offset\n-          // currently in earlier offset\n+        // Check if there is a gap within the range\n+        if (localBefore != localAfter) {\n+            // If not, return the input instant\n+            return instant;\n+        }\n+        \n+        while (localBefore == localAfter) {\n+            // Expand the range until a gap is found\n+            localBefore = convertUTCToLocal(prevInstant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n+            localAfter = convertUTCToLocal(nextInstant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n+            prevInstant -= 3 * DateTimeConstants.MILLIS_PER_HOUR;\n+            nextInstant += 3 * DateTimeConstants.MILLIS_PER_HOUR;\n+        }\n+        \n+        return convertLocalToUTC(local, false, earlierOrLater ? prevInstant : nextInstant);\n     }\n+}\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n \n     //-----------------------------------------------------------------------",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2007-10-28T02:15:00.000+01:00> but was:<2007-10-28T02:15:00.000+02:00>",
    "test_result": "FAIL"
}