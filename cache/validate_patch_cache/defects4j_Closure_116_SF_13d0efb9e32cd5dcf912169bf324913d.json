{
    "patch": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n  int numberOfArgs = NodeUtil.getInvocationArgsCount(callNode);\n\n  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  int numberOfParams = NodeUtil.getFunctionParametersCount(fnNode);\n\n  // Functions called via 'call' and 'apply' have a this-object as\n  // the first parameter, but this is not part of the called function's\n  // parameter list.\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n      numberOfArgs--;\n    } else {\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  // In the following loop we check:\n  //   1. That the number of arguments passed is equal to or less than\n  //      the number of parameters in the function (except of 'this').\n  //   2. Each argument passed has no side effects.\n  //   3. Each argument passed is used only once in the function body.\n  //   4. Each parameter has a corresponding argument.\n  while (fnParam != null && numberOfArgs-- > 0) {\n    if (!fnParam.isName()) {\n      break;\n    }\n\n    // Check for side effects\n    if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n      return CanInlineResult.NO;\n    }\n\n    // Check if argument is used only once\n    String paramName = fnParam.getString();\n    if (NodeUtil.mayEffectMutableState(cArg, compiler) &&\n        NodeUtil.getNameReferenceCount(block, paramName) != 1) {\n      return CanInlineResult.NO;\n    }\n\n    // Move to the next argument and parameter\n    cArg = cArg.getNext();\n    fnParam = fnParam.getNext();\n    numberOfParams--;\n  }\n\n  // Any remaining argument means that there are more arguments than\n  // parameters, or an unnamed parameter was already encountered\n  if (cArg != null) {\n    return CanInlineResult.NO;\n  }\n  \n  // Otherwise, if all parameters have been encountered\n  if (numberOfParams == 0 || (numberOfParams == 1 && NodeUtil.isFunctionThis(fnParam))) {\n    return CanInlineResult.YES;\n  }\n\n  // Any remaining parameter means that there are more parameters\n  // than arguments\n  return CanInlineResult.NO;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..31282a42 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,68 +686,82 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n+private CanInlineResult canInlineReferenceDirectly(\n+    Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  Node block = fnNode.getLastChild();\n \n+  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n+  Node cArg = callNode.getFirstChild().getNext();\n+  int numberOfArgs = NodeUtil.getInvocationArgsCount(callNode);\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n+  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+  int numberOfParams = NodeUtil.getFunctionParametersCount(fnNode);\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+  // Functions called via 'call' and 'apply' have a this-object as\n+  // the first parameter, but this is not part of the called function's\n+  // parameter list.\n+  if (!callNode.getFirstChild().isName()) {\n+    if (NodeUtil.isFunctionObjectCall(callNode)) {\n+      if (cArg == null || !cArg.isThis()) {\n+        return CanInlineResult.NO;\n       }\n+      cArg = cArg.getNext();\n+      numberOfArgs--;\n+    } else {\n+      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n     }\n+  }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+  // In the following loop we check:\n+  //   1. That the number of arguments passed is equal to or less than\n+  //      the number of parameters in the function (except of 'this').\n+  //   2. Each argument passed has no side effects.\n+  //   3. Each argument passed is used only once in the function body.\n+  //   4. Each parameter has a corresponding argument.\n+  while (fnParam != null && numberOfArgs-- > 0) {\n+    if (!fnParam.isName()) {\n+      break;\n+    }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+    // Check for side effects\n+    if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+      return CanInlineResult.NO;\n+    }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n+    // Check if argument is used only once\n+    String paramName = fnParam.getString();\n+    if (NodeUtil.mayEffectMutableState(cArg, compiler) &&\n+        NodeUtil.getNameReferenceCount(block, paramName) != 1) {\n+      return CanInlineResult.NO;\n     }\n \n+    // Move to the next argument and parameter\n+    cArg = cArg.getNext();\n+    fnParam = fnParam.getNext();\n+    numberOfParams--;\n+  }\n+\n+  // Any remaining argument means that there are more arguments than\n+  // parameters, or an unnamed parameter was already encountered\n+  if (cArg != null) {\n+    return CanInlineResult.NO;\n+  }\n+  \n+  // Otherwise, if all parameters have been encountered\n+  if (numberOfParams == 0 || (numberOfParams == 1 && NodeUtil.isFunctionThis(fnParam))) {\n     return CanInlineResult.YES;\n   }\n \n+  // Any remaining parameter means that there are more parameters\n+  // than arguments\n+  return CanInlineResult.NO;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}