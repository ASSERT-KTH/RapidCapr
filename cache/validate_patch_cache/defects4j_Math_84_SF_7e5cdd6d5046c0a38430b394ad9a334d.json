{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n            incrementIterationsCounter();\n            final RealPointValuePair[] previous = simplex;\n\n            // reflect\n            final RealPointValuePair reflected = evaluateNewSimplex(previous, -1.0, comparator);\n            if (comparator.compare(reflected, previous[0]) < 0) {\n                // expand\n                final RealPointValuePair[] e = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(previous, gamma, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    simplex = e;\n                } else {\n                    simplex = reflectedSimplex(reflected, comparator);\n                }\n            } else { // try to contract\n                final RealPointValuePair contracted = evaluateNewSimplex(previous, sigma, comparator);\n                if (comparator.compare(contracted, previous[0]) < 0) {\n                    simplex = contractedSimplex(contracted, comparator);\n                } else {\n                    // Inside contract\n                    final RealPointValuePair[] contractedIn = contractInside(previous, comparator);\n                    if (comparator.compare(contractedIn[0], previous[0]) < 0) {\n                        simplex = contractedIn;\n                    } else {\n                        // shrink\n                        simplex = shrink(previous, comparator);\n                    }\n                }\n            }\n\n            if (isConverged(simplex, previous, comparator)) {\n                return;\n            }\n        }\n    }\n    \n    private RealPointValuePair[] reflectedSimplex(RealPointValuePair reflected, Comparator<RealPointValuePair> comparator) {\n        RealPointValuePair best = simplex[0];\n        final int dim = getDimension();\n        final RealPointValuePair[] reflectedSimplex = simplex.clone();\n        reflectedSimplex[dim] = reflected;\n        Arrays.sort(reflectedSimplex, comparator);\n        if (comparator.compare(reflectedSimplex[0], best) < 0) {\n            return reflectedSimplex;\n        }\n        return null;\n    }\n\n    private RealPointValuePair[] contractedSimplex(RealPointValuePair contracted, Comparator<RealPointValuePair> comparator) {\n        RealPointValuePair best = simplex[0];\n        final int dim = getDimension();\n        final RealPointValuePair[] contractedSimplex = new RealPointValuePair[dim + 1];\n        for (int i = 1; i < simplex.length; i++) {\n            contractedSimplex[i] = new RealPointValuePair(contractCoefficient * contracted.getPointRef()[i - 1] + (1 - contractCoefficient) * simplex[i].getPointRef()[i - 1],\n                simplex[i].getValue());\n        }\n        contractedSimplex[0] = contracted;\n        Arrays.sort(contractedSimplex, comparator);\n        if (comparator.compare(contractedSimplex[0], best) < 0) {\n            return contractedSimplex;\n        }\n        return null;\n    }\n\n    private RealPointValuePair[] contractInside(RealPointValuePair[] previous, Comparator<RealPointValuePair> comparator) {\n        RealPointValuePair best = simplex[0];\n        final int dim = getDimension();\n        final RealPointValuePair[] contracted = new RealPointValuePair[dim + 1];\n        for (int i = 1; i < simplex.length; i++) {\n            contracted[i] = new RealPointValuePair(contractionCoefficient * simplex[0].getPointRef()[i - 1] + (1 - contractionCoefficient) * simplex[i].getPointRef()[i - 1],\n                simplex[i].getValue());\n        }\n        contracted[0] = simplex[0];\n        Arrays.sort(contracted, comparator);\n        if (comparator.compare(contracted[0], best) < 0) {\n            return contracted;\n        }\n        return null;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected boolean isConverged(RealPointValuePair[] simplex,\n                                  RealPointValuePair[] previous,\n                                  Comparator<RealPointValuePair> comparator) {\n        double[] xSmallest = simplex[0].getPointRef();\n        double fxSmallest = simplex[0].getValue();\n        double[] xLargest = simplex[simplex.length - 1].getPointRef();\n        double fxLargest = simplex[simplex.length - 1].getValue();\n        double largestSize = 0;\n        for (int i = 0; i < simplex.length; i++) {\n            final double[] x = simplex[i].getPointRef();\n            double size = 0;\n            for (int j = 0; j < x.length; j++) {\n                size += (x[j] - xLargest[j]) * (x[j] - xLargest[j]);\n            }\n            if (size > largestSize) {\n                largestSize = size;\n            }\n        }\n\n        return largestSize < getAbsoluteThreshold() &&\n               fxSmallest - fxLargest <= getRelativeThreshold() * (Math.abs(fxSmallest) + Math.abs(fxLargest)) + getRelativeThresholdOffset();\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..89bd38e28 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -62,40 +62,111 @@ public class MultiDirectional extends DirectSearchOptimizer {\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n-\n             incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+            final RealPointValuePair[] previous = simplex;\n+\n+            // reflect\n+            final RealPointValuePair reflected = evaluateNewSimplex(previous, -1.0, comparator);\n+            if (comparator.compare(reflected, previous[0]) < 0) {\n+                // expand\n+                final RealPointValuePair[] e = simplex;\n+                final RealPointValuePair expanded = evaluateNewSimplex(previous, gamma, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    simplex = e;\n+                } else {\n+                    simplex = reflectedSimplex(reflected, comparator);\n+                }\n+            } else { // try to contract\n+                final RealPointValuePair contracted = evaluateNewSimplex(previous, sigma, comparator);\n+                if (comparator.compare(contracted, previous[0]) < 0) {\n+                    simplex = contractedSimplex(contracted, comparator);\n+                } else {\n+                    // Inside contract\n+                    final RealPointValuePair[] contractedIn = contractInside(previous, comparator);\n+                    if (comparator.compare(contractedIn[0], previous[0]) < 0) {\n+                        simplex = contractedIn;\n+                    } else {\n+                        // shrink\n+                        simplex = shrink(previous, comparator);\n+                    }\n                 }\n+            }\n \n+            if (isConverged(simplex, previous, comparator)) {\n                 return;\n-\n             }\n+        }\n+    }\n+    \n+    private RealPointValuePair[] reflectedSimplex(RealPointValuePair reflected, Comparator<RealPointValuePair> comparator) {\n+        RealPointValuePair best = simplex[0];\n+        final int dim = getDimension();\n+        final RealPointValuePair[] reflectedSimplex = simplex.clone();\n+        reflectedSimplex[dim] = reflected;\n+        Arrays.sort(reflectedSimplex, comparator);\n+        if (comparator.compare(reflectedSimplex[0], best) < 0) {\n+            return reflectedSimplex;\n+        }\n+        return null;\n+    }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+    private RealPointValuePair[] contractedSimplex(RealPointValuePair contracted, Comparator<RealPointValuePair> comparator) {\n+        RealPointValuePair best = simplex[0];\n+        final int dim = getDimension();\n+        final RealPointValuePair[] contractedSimplex = new RealPointValuePair[dim + 1];\n+        for (int i = 1; i < simplex.length; i++) {\n+            contractedSimplex[i] = new RealPointValuePair(contractCoefficient * contracted.getPointRef()[i - 1] + (1 - contractCoefficient) * simplex[i].getPointRef()[i - 1],\n+                simplex[i].getValue());\n+        }\n+        contractedSimplex[0] = contracted;\n+        Arrays.sort(contractedSimplex, comparator);\n+        if (comparator.compare(contractedSimplex[0], best) < 0) {\n+            return contractedSimplex;\n+        }\n+        return null;\n+    }\n \n-            // check convergence\n-                return;\n-            }\n+    private RealPointValuePair[] contractInside(RealPointValuePair[] previous, Comparator<RealPointValuePair> comparator) {\n+        RealPointValuePair best = simplex[0];\n+        final int dim = getDimension();\n+        final RealPointValuePair[] contracted = new RealPointValuePair[dim + 1];\n+        for (int i = 1; i < simplex.length; i++) {\n+            contracted[i] = new RealPointValuePair(contractionCoefficient * simplex[0].getPointRef()[i - 1] + (1 - contractionCoefficient) * simplex[i].getPointRef()[i - 1],\n+                simplex[i].getValue());\n+        }\n+        contracted[0] = simplex[0];\n+        Arrays.sort(contracted, comparator);\n+        if (comparator.compare(contracted[0], best) < 0) {\n+            return contracted;\n+        }\n+        return null;\n+    }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected boolean isConverged(RealPointValuePair[] simplex,\n+                                  RealPointValuePair[] previous,\n+                                  Comparator<RealPointValuePair> comparator) {\n+        double[] xSmallest = simplex[0].getPointRef();\n+        double fxSmallest = simplex[0].getValue();\n+        double[] xLargest = simplex[simplex.length - 1].getPointRef();\n+        double fxLargest = simplex[simplex.length - 1].getValue();\n+        double largestSize = 0;\n+        for (int i = 0; i < simplex.length; i++) {\n+            final double[] x = simplex[i].getPointRef();\n+            double size = 0;\n+            for (int j = 0; j < x.length; j++) {\n+                size += (x[j] - xLargest[j]) * (x[j] - xLargest[j]);\n+            }\n+            if (size > largestSize) {\n+                largestSize = size;\n+            }\n         }\n \n+        return largestSize < getAbsoluteThreshold() &&\n+               fxSmallest - fxLargest <= getRelativeThreshold() * (Math.abs(fxSmallest) + Math.abs(fxLargest)) + getRelativeThresholdOffset();\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}