{
    "patch": "      if (block.isFunction) {\n        // Declarations within functions are assumed to be assigned to multiple times,\n        // except for variables that are defined in the function scope and used only in the declaration and initialization.\n        if (ref.isInitializingDeclaration() && block != ref.getBasicBlock()) {\n          return false;\n        }\n        break;\n      } else if (block.isLoop) {\n        if (block != ref.getBasicBlock()) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..29d6ed87 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,15 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        // Declarations within functions are assumed to be assigned to multiple times,\n+        // except for variables that are defined in the function scope and used only in the declaration and initialization.\n+        if (ref.isInitializingDeclaration() && block != ref.getBasicBlock()) {\n+          return false;\n+        }\n+        break;\n+      } else if (block.isLoop) {\n+        if (block != ref.getBasicBlock()) {\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}