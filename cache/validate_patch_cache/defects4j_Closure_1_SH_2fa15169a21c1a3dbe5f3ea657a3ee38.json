{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    Node lastArg;\n    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n      Var var = fnScope.getVar(arg.getString());\n      if (!referenced.contains(var)) {\n        lastArg = arg.getPrevious();\n        arg.detachFromParent();\n        compiler.reportCodeChange();\n\n        // We can't just return because we might need to modify callers even\n        // if we don't modify the function body.\n        if (!modifyCallers) {\n          while (lastArg != null) {\n            argList.removeChild(lastArg);\n            compiler.reportCodeChange();\n            lastArg = lastArg.getPrevious();\n          }\n          return;\n        }\n      }\n    }\n\n    // the optimizer will remove references to arguments. Remove an argument\n    // if it's never referenced.\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..6f6345b5 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,44 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    Node lastArg;\n+    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (!referenced.contains(var)) {\n+        lastArg = arg.getPrevious();\n+        arg.detachFromParent();\n+        compiler.reportCodeChange();\n+\n+        // We can't just return because we might need to modify callers even\n+        // if we don't modify the function body.\n+        if (!modifyCallers) {\n+          while (lastArg != null) {\n+            argList.removeChild(lastArg);\n+            compiler.reportCodeChange();\n+            lastArg = lastArg.getPrevious();\n+          }\n+          return;\n+        }\n+      }\n+    }\n+\n+    // the optimizer will remove references to arguments. Remove an argument\n+    // if it's never referenced.\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}