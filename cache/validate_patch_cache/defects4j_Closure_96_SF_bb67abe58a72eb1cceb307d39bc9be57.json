{
    "patch": "private void visitParameterList(\n        NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter;\n    Node argument;\n    while (parameters.hasNext() && arguments.hasNext()) {\n        parameter = parameters.next();\n        argument = arguments.next();\n        ordinal++;\n\n        validator.expectArgumentMatchesParameter(t, argument,\n                getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    int numMissingArgs = Math.max(0, minArgs - numArgs);\n    int numExtraArgs = Math.max(0, numArgs - maxArgs);\n    if (numMissingArgs == 0 && numExtraArgs == 0) {\n        // correct number of arguments\n        return;\n    }\n    String errorMsg = validator.getReadableJSTypeName(call.getFirstChild(), false) +\n            \" is called with \" + numArgs + \" argument(s) but expects \";\n    if (minArgs == maxArgs) {\n        errorMsg += minArgs + \" argument(s).\";\n    } else if (maxArgs == Integer.MAX_VALUE) {\n        errorMsg += \"at least \" + minArgs + \" argument(s).\";\n    } else {\n        errorMsg += \"at least \" + minArgs + \" and no more than \" + maxArgs + \" argument(s).\";\n    }\n    if (numMissingArgs > 0) {\n        if (numMissingArgs == 1) {\n            errorMsg += \" \" + numMissingArgs + \" argument is missing.\";\n        } else {\n            errorMsg += \" \" + numMissingArgs + \" argument(s) are missing.\";\n        }\n    }\n    if (numExtraArgs > 0) {\n        if (numExtraArgs == 1) {\n            errorMsg += \" \" + numExtraArgs + \" argument is too many.\";\n        } else {\n            errorMsg += \" \" + numExtraArgs + \" argument(s) are too many.\";\n        }\n    }\n    report(t, call, WRONG_ARGUMENT_COUNT, errorMsg);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..3e6de0c4 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,58 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+private void visitParameterList(\n+        NodeTraversal t, Node call, FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n     Iterator<Node> parameters = functionType.getParameters().iterator();\n     int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n+    Node parameter;\n+    Node argument;\n+    while (parameters.hasNext() && arguments.hasNext()) {\n         parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n+        argument = arguments.next();\n+        ordinal++;\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+        validator.expectArgumentMatchesParameter(t, argument,\n+                getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n \n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    int numMissingArgs = Math.max(0, minArgs - numArgs);\n+    int numExtraArgs = Math.max(0, numArgs - maxArgs);\n+    if (numMissingArgs == 0 && numExtraArgs == 0) {\n+        // correct number of arguments\n+        return;\n     }\n-  }\n+    String errorMsg = validator.getReadableJSTypeName(call.getFirstChild(), false) +\n+            \" is called with \" + numArgs + \" argument(s) but expects \";\n+    if (minArgs == maxArgs) {\n+        errorMsg += minArgs + \" argument(s).\";\n+    } else if (maxArgs == Integer.MAX_VALUE) {\n+        errorMsg += \"at least \" + minArgs + \" argument(s).\";\n+    } else {\n+        errorMsg += \"at least \" + minArgs + \" and no more than \" + maxArgs + \" argument(s).\";\n+    }\n+    if (numMissingArgs > 0) {\n+        if (numMissingArgs == 1) {\n+            errorMsg += \" \" + numMissingArgs + \" argument is missing.\";\n+        } else {\n+            errorMsg += \" \" + numMissingArgs + \" argument(s) are missing.\";\n+        }\n+    }\n+    if (numExtraArgs > 0) {\n+        if (numExtraArgs == 1) {\n+            errorMsg += \" \" + numExtraArgs + \" argument is too many.\";\n+        } else {\n+            errorMsg += \" \" + numExtraArgs + \" argument(s) are too many.\";\n+        }\n+    }\n+    report(t, call, WRONG_ARGUMENT_COUNT, errorMsg);\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<Function abstractFn[: called with 1 argument(s). Function requires at least 0 argument(s) and no more than 0 argument(s)].> but was:<Function abstractFn[ is called with 1 argument(s) but expects 0 argument(s). 1 argument is too many.: called with {1} argument(s). Function requires at least {2} argument(s){3}].>",
    "test_result": "FAIL"
}