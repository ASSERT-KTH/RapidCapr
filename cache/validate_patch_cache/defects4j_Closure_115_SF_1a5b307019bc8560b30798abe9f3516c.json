{
    "patch": "private CanInlineResult canInlineReferenceDirectly(\n        Node callNode, Node fnNode) {\n    Node paramList = NodeUtil.getFunctionParameters(fnNode);\n    int paramCount = paramList.getChildCount();\n    if (paramList.hasOneChild() && paramList.getFirstChild().isEmpty()) {\n        paramCount = 0;\n    }\n\n    Node argList = callNode.getFirstChild().getNext();\n    int argCount = 0;\n    while (argList != null) {\n        argCount++;\n        argList = argList.getNext();\n    }\n\n    if (argCount < paramCount) {\n        return CanInlineResult.NO;\n    }\n\n    if (argCount > paramCount) {\n        if (NodeUtil.getFunctionBody(fnNode).hasChildren()) {\n            return CanInlineResult.NO;\n        }\n        return CanInlineResult.YES_WITH_DEFINITE_SIDE_EFFECTS;\n    }\n\n    if (NodeUtil.getFunctionBody(fnNode).hasChildren()) {\n        Node fnBlock = NodeUtil.getFunctionBody(fnNode);\n        Node callBlock = callNode.getNext().getFirstChild();\n        Preconditions.checkState(callBlock.isBlock());\n        return mayInlineParametersDirectly(callBlock, fnBlock)\n                ? CanInlineResult.YES_WITH_DEFINITE_SIDE_EFFECTS\n                : CanInlineResult.NO;\n    }\n\n    return CanInlineResult.YES;\n}\n\nprivate static boolean mayInlineParametersDirectly(Node callBlock, Node fnBlock) {\n    Node callStmts = callBlock.hasChildren() ? callBlock.getFirstChild() : null;\n    Node fnStmts = fnBlock.getFirstChild();\n\n    while (callStmts != null && fnStmts != null) {\n        if (callStmts.isExprResult() && fnStmts.isVar()) {\n            Node callNode = callStmts.getFirstChild();\n            Node fnInit = fnStmts.getFirstChild().getFirstChild();\n\n            if (!NodeUtil.matchNode(callNode, Token.ASSIGN, fnInit)) {\n                return false;\n            }\n        } else if (callStmts.isBlock() && fnStmts.isBlock()) {\n            if (!mayInlineParametersDirectly(callStmts, fnStmts)) {\n                return false;\n            }\n        } else if (!NodeUtil.matchNode(callStmts, fnStmts)) {\n            return false;\n        }\n\n        callStmts = callStmts.getNext();\n        fnStmts = fnStmts.getNext();\n    }\n\n    return callStmts == null && fnStmts == null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..ba0f6b62 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,76 +686,70 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n+private CanInlineResult canInlineReferenceDirectly(\n+        Node callNode, Node fnNode) {\n+    Node paramList = NodeUtil.getFunctionParameters(fnNode);\n+    int paramCount = paramList.getChildCount();\n+    if (paramList.hasOneChild() && paramList.getFirstChild().isEmpty()) {\n+        paramCount = 0;\n     }\n \n-    Node block = fnNode.getLastChild();\n-\n-    boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n+    Node argList = callNode.getFirstChild().getNext();\n+    int argCount = 0;\n+    while (argList != null) {\n+        argCount++;\n+        argList = argList.getNext();\n     }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n+    if (argCount < paramCount) {\n+        return CanInlineResult.NO;\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n+    if (argCount > paramCount) {\n+        if (NodeUtil.getFunctionBody(fnNode).hasChildren()) {\n             return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n         }\n+        return CanInlineResult.YES_WITH_DEFINITE_SIDE_EFFECTS;\n+    }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+    if (NodeUtil.getFunctionBody(fnNode).hasChildren()) {\n+        Node fnBlock = NodeUtil.getFunctionBody(fnNode);\n+        Node callBlock = callNode.getNext().getFirstChild();\n+        Preconditions.checkState(callBlock.isBlock());\n+        return mayInlineParametersDirectly(callBlock, fnBlock)\n+                ? CanInlineResult.YES_WITH_DEFINITE_SIDE_EFFECTS\n+                : CanInlineResult.NO;\n+    }\n+\n+    return CanInlineResult.YES;\n+}\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n+private static boolean mayInlineParametersDirectly(Node callBlock, Node fnBlock) {\n+    Node callStmts = callBlock.hasChildren() ? callBlock.getFirstChild() : null;\n+    Node fnStmts = fnBlock.getFirstChild();\n+\n+    while (callStmts != null && fnStmts != null) {\n+        if (callStmts.isExprResult() && fnStmts.isVar()) {\n+            Node callNode = callStmts.getFirstChild();\n+            Node fnInit = fnStmts.getFirstChild().getFirstChild();\n+\n+            if (!NodeUtil.matchNode(callNode, Token.ASSIGN, fnInit)) {\n+                return false;\n+            }\n+        } else if (callStmts.isBlock() && fnStmts.isBlock()) {\n+            if (!mayInlineParametersDirectly(callStmts, fnStmts)) {\n+                return false;\n+            }\n+        } else if (!NodeUtil.matchNode(callStmts, fnStmts)) {\n+            return false;\n         }\n-        cArg = cArg.getNext();\n-      }\n+\n+        callStmts = callStmts.getNext();\n+        fnStmts = fnStmts.getNext();\n     }\n \n-    return CanInlineResult.YES;\n-  }\n+    return callStmts == null && fnStmts == null;\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}