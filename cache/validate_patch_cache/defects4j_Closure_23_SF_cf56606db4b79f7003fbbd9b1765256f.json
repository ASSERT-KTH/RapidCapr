{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  if (!right.isNumber()) {\n    // The index must be a number; otherwise we don't know where to look.\n    return n;\n  }\n\n  double index = right.getDouble();\n  int intIndex = (int) index;\n\n  if (intIndex != index || intIndex < 0) {\n    // We only support non-negative integer indices.\n    error(INVALID_GETELEM_INDEX_ERROR, right);\n    return n;\n  }\n\n  Node current = left;\n  int i = 0;\n\n  while (current != null && i <= intIndex) {\n    if (current.isArrayLit()) {\n      if (i == intIndex && i < current.getChildCount()) {\n        // Found the element at the specified integer index.\n        Node elem = current.getChildAtIndex(intIndex).cloneTree();\n        if (elem.isEmpty()) {\n          // An empty array element evaluates to `undefined`.\n          elem = NodeUtil.newUndefinedNode(n);\n        }\n        n.getParent().replaceChild(n, elem);\n        reportCodeChange();\n        return elem;\n      } else if (i == intIndex) {\n        // The integer index is out of bounds.\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      } else {\n        // Keep looking for the element at the specified integer index.\n        i += 1;\n        current = current.getNext();\n      }\n    } else if (current.isGetElem()) {\n      if (current.getLastChild().isString()) {\n        // We can't evaluate array accesses with a string index.\n        return n;\n      }\n\n      // Evaluate the index of the nested array access.\n      current = tryFoldArrayAccess(current, current.getFirstChild(), current.getLastChild());\n      if (!current.isGetElem() && !current.isArrayLit()) {\n        // The nested access failed to evaluate to an array or array access.\n        return n;\n      }\n    } else {\n      // We can't fold non-array accesses.\n      return n;\n    }\n  }\n\n  // The integer index is out of bounds.\n  error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n  return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..9e2dc55f 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,58 +1419,68 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-    if (isAssignmentTarget(n)) {\n-      return n;\n-    }\n-\n-    if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n-    }\n-\n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n-\n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+  if (!right.isNumber()) {\n+    // The index must be a number; otherwise we don't know where to look.\n+    return n;\n+  }\n \n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n+  double index = right.getDouble();\n+  int intIndex = (int) index;\n \n-      current = current.getNext();\n-    }\n+  if (intIndex != index || intIndex < 0) {\n+    // We only support non-negative integer indices.\n+    error(INVALID_GETELEM_INDEX_ERROR, right);\n+    return n;\n+  }\n \n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n+  Node current = left;\n+  int i = 0;\n+\n+  while (current != null && i <= intIndex) {\n+    if (current.isArrayLit()) {\n+      if (i == intIndex && i < current.getChildCount()) {\n+        // Found the element at the specified integer index.\n+        Node elem = current.getChildAtIndex(intIndex).cloneTree();\n+        if (elem.isEmpty()) {\n+          // An empty array element evaluates to `undefined`.\n+          elem = NodeUtil.newUndefinedNode(n);\n+        }\n+        n.getParent().replaceChild(n, elem);\n+        reportCodeChange();\n+        return elem;\n+      } else if (i == intIndex) {\n+        // The integer index is out of bounds.\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+      } else {\n+        // Keep looking for the element at the specified integer index.\n+        i += 1;\n+        current = current.getNext();\n+      }\n+    } else if (current.isGetElem()) {\n+      if (current.getLastChild().isString()) {\n+        // We can't evaluate array accesses with a string index.\n+        return n;\n+      }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+      // Evaluate the index of the nested array access.\n+      current = tryFoldArrayAccess(current, current.getFirstChild(), current.getLastChild());\n+      if (!current.isGetElem() && !current.isArrayLit()) {\n+        // The nested access failed to evaluate to an array or array access.\n+        return n;\n+      }\n     } else {\n-      left.removeChild(elem);\n+      // We can't fold non-array accesses.\n+      return n;\n     }\n-\n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n   }\n \n+  // The integer index is out of bounds.\n+  error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+  return n;\n+}\n+\n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));\n ",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}