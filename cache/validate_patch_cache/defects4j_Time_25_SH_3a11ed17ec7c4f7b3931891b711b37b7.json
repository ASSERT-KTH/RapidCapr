{
    "patch": "    if ((offsetLocal - offsetAdjusted) < 0) {\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n\n        // If there is transition at 'instantLocal' and 'instantAdjusted', then return 'offsetAdjusted'\n        if (nextLocal == instantLocal && nextAdjusted == instantAdjusted) {\n            return offsetAdjusted;\n        }\n\n        // If there is a transition at 'instantLocal' and no transition at 'instantAdjusted', \n        // then return the offset that is applied before transition\n        if (nextLocal == instantLocal) {\n            int offsetBeforeTransition = getOffset(instantLocal - 1);\n            if (offsetBeforeTransition == offsetAdjusted) {\n                return offsetLocal;\n            } else {\n                return offsetBeforeTransition;\n            }\n        }\n\n        // If there is a transition at 'instantAdjusted' and no transition at 'instantLocal', \n        // then return the offset that was applied after the transition and before 'instantLocal'\n        if (nextAdjusted == instantAdjusted) {\n            int offsetAfterTransition = getOffset(instantAdjusted + 1);\n            if (offsetLocal < offsetAfterTransition) {\n                return offsetLocal;\n            } else {\n                return offsetAfterTransition;\n            }\n        }\n\n        // If there is transition at both 'instantLocal' and 'instantAdjusted',\n        // then decide based on what happens near the transition\n        if (nextLocal != nextAdjusted) {\n            // difference between offsets\n            int offsetDiff = offsetAdjusted - offsetLocal;\n\n            // get the local time of next transition after instantAdjusted\n            long nextLocalTransition = nextTransition(instantAdjusted + offsetDiff);\n\n            // get the adjusted time of next transition after instantLocal\n            long nextAdjustedTransition = nextTransition(instantLocal) - offsetLocal;\n\n            if (nextLocalTransition == nextAdjustedTransition) {\n                // advancing the adjusted time hits the same transition as normal time,\n                // so it is assumed that we are in a DST gap\n                if (offsetDiff > 0) {\n                    // gap is in the past; we are in the overlap\n                    return offsetAdjusted;\n                } else {\n                    // gap is in the future; we are in the gap\n                    return offsetLocal;\n                }\n            } else if (nextLocalTransition > nextAdjustedTransition) {\n                // adjusted time reaches the next transition later than normal time,\n                // so it is assumed to be in an overlap period\n                if (offsetDiff > 0) {\n                    // overlap is in the past; choose the local time just before the overlap\n                    return getOffset(nextLocalTransition - 1 - offsetDiff);\n                } else {\n                    // overlap is in the future; choose the local time in the overlap\n                    return offsetAdjusted;\n                }\n            } else {\n                // adjusted time reaches the next transition earlier than normal time,\n                // so it is assumed to be in a gap period\n                if (offsetDiff > 0) {\n                    // gap is in the past; choose the local time just before the gap\n                    return offsetLocal;\n                } else {\n                    // gap is in the future; choose the local time just after the gap\n                    return getOffset(nextAdjustedTransition);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..e5b01fab 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,78 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+    if ((offsetLocal - offsetAdjusted) < 0) {\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+\n+        // If there is transition at 'instantLocal' and 'instantAdjusted', then return 'offsetAdjusted'\n+        if (nextLocal == instantLocal && nextAdjusted == instantAdjusted) {\n+            return offsetAdjusted;\n+        }\n+\n+        // If there is a transition at 'instantLocal' and no transition at 'instantAdjusted', \n+        // then return the offset that is applied before transition\n+        if (nextLocal == instantLocal) {\n+            int offsetBeforeTransition = getOffset(instantLocal - 1);\n+            if (offsetBeforeTransition == offsetAdjusted) {\n+                return offsetLocal;\n+            } else {\n+                return offsetBeforeTransition;\n+            }\n+        }\n+\n+        // If there is a transition at 'instantAdjusted' and no transition at 'instantLocal', \n+        // then return the offset that was applied after the transition and before 'instantLocal'\n+        if (nextAdjusted == instantAdjusted) {\n+            int offsetAfterTransition = getOffset(instantAdjusted + 1);\n+            if (offsetLocal < offsetAfterTransition) {\n+                return offsetLocal;\n+            } else {\n+                return offsetAfterTransition;\n+            }\n+        }\n+\n+        // If there is transition at both 'instantLocal' and 'instantAdjusted',\n+        // then decide based on what happens near the transition\n+        if (nextLocal != nextAdjusted) {\n+            // difference between offsets\n+            int offsetDiff = offsetAdjusted - offsetLocal;\n+\n+            // get the local time of next transition after instantAdjusted\n+            long nextLocalTransition = nextTransition(instantAdjusted + offsetDiff);\n+\n+            // get the adjusted time of next transition after instantLocal\n+            long nextAdjustedTransition = nextTransition(instantLocal) - offsetLocal;\n+\n+            if (nextLocalTransition == nextAdjustedTransition) {\n+                // advancing the adjusted time hits the same transition as normal time,\n+                // so it is assumed that we are in a DST gap\n+                if (offsetDiff > 0) {\n+                    // gap is in the past; we are in the overlap\n+                    return offsetAdjusted;\n+                } else {\n+                    // gap is in the future; we are in the gap\n+                    return offsetLocal;\n+                }\n+            } else if (nextLocalTransition > nextAdjustedTransition) {\n+                // adjusted time reaches the next transition later than normal time,\n+                // so it is assumed to be in an overlap period\n+                if (offsetDiff > 0) {\n+                    // overlap is in the past; choose the local time just before the overlap\n+                    return getOffset(nextLocalTransition - 1 - offsetDiff);\n+                } else {\n+                    // overlap is in the future; choose the local time in the overlap\n+                    return offsetAdjusted;\n+                }\n+            } else {\n+                // adjusted time reaches the next transition earlier than normal time,\n+                // so it is assumed to be in a gap period\n+                if (offsetDiff > 0) {\n+                    // gap is in the past; choose the local time just before the gap\n+                    return offsetLocal;\n+                } else {\n+                    // gap is in the future; choose the local time just after the gap\n+                    return getOffset(nextAdjustedTransition);\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}