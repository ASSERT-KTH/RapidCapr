{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n      if (NodeUtil.isExpressionNode(maybeExpr) && maybeExpr.isExprResult()) {\n        Node expr = maybeExpr.getFirstChild();\n        if (expr.getType() == Token.AND || expr.getType() == Token.OR) {\n          // We can't fold blocks containing an && or || expression, because\n          // it will change short-circuit behavior.\n          return false;\n        }\n        Node parentNode = n.getParent();\n        if (parentNode.getType() == Token.BLOCK || parentNode.getType() == Token.LABEL) {\n          return true;\n        }\n        if (parentNode.getType() == Token.FOR ||\n            parentNode.getType() == Token.WHILE ||\n            parentNode.getType() == Token.IF) {\n          if (parentNode.getFirstChild() != n) {\n            return false;\n          }\n          Node nextNode = parentNode.getNext();\n          if (nextNode == null || !NodeUtil.isControlStructure(nextNode)) {\n            return true;\n          }\n          if (nextNode.getType() != Token.BLOCK ||\n              !nextNode.hasChildren() ||\n              nextNode.getChildAtIndex(0).getType() != Token.LABEL) {\n            return false;\n          }\n          return nextNode.getChildAtIndex(0).getString().equals(parentNode.getLabelName());\n        }\n      } else if (NodeUtil.isStatementBlock(n)) {\n        // A block containing no statements can be removed.\n        Node child = maybeExpr;\n        while (child != null) {\n          if (!NodeUtil.isStatement(child) &&\n              child.getType() != Token.EMPTY) {\n            return false;\n          }\n          child = child.getNext();\n        }\n        return true;\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..a4a4e518 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,54 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+      if (NodeUtil.isExpressionNode(maybeExpr) && maybeExpr.isExprResult()) {\n+        Node expr = maybeExpr.getFirstChild();\n+        if (expr.getType() == Token.AND || expr.getType() == Token.OR) {\n+          // We can't fold blocks containing an && or || expression, because\n+          // it will change short-circuit behavior.\n+          return false;\n+        }\n+        Node parentNode = n.getParent();\n+        if (parentNode.getType() == Token.BLOCK || parentNode.getType() == Token.LABEL) {\n+          return true;\n+        }\n+        if (parentNode.getType() == Token.FOR ||\n+            parentNode.getType() == Token.WHILE ||\n+            parentNode.getType() == Token.IF) {\n+          if (parentNode.getFirstChild() != n) {\n+            return false;\n+          }\n+          Node nextNode = parentNode.getNext();\n+          if (nextNode == null || !NodeUtil.isControlStructure(nextNode)) {\n+            return true;\n+          }\n+          if (nextNode.getType() != Token.BLOCK ||\n+              !nextNode.hasChildren() ||\n+              nextNode.getChildAtIndex(0).getType() != Token.LABEL) {\n+            return false;\n+          }\n+          return nextNode.getChildAtIndex(0).getString().equals(parentNode.getLabelName());\n+        }\n+      } else if (NodeUtil.isStatementBlock(n)) {\n+        // A block containing no statements can be removed.\n+        Node child = maybeExpr;\n+        while (child != null) {\n+          if (!NodeUtil.isStatement(child) &&\n+              child.getType() != Token.EMPTY) {\n+            return false;\n+          }\n+          child = child.getNext();\n+        }\n+        return true;\n       }\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}