{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    if (DateTimeUtils.isContiguous(partial)) {\n        // Check if month is being added to\n        DateTimeField dateTimeField = partial.getField(fieldIndex);\n        boolean isMonthField = dateTimeField.getType() == DateTimeFieldType.monthOfYear();\n        \n        // Get current values of the partial\n        int[] currentValues = new int[values.length];\n        for (int i = 0; i < values.length; i++) {\n            currentValues[i] = partial.getValue(i);\n        }\n\n        // Add the value to the field and get the new instant\n        int newValue = values[fieldIndex] + valueToAdd;\n        long instant = dateTimeField.set(partial.getChronology().getDateTimeMillis(\n                currentValues), newValue);\n\n        // Get the new values of the partial\n        int[] newValues = partial.getChronology().get(partial, instant);\n\n        // Check if the dayOfMonth value needs to be fixed\n        if (isMonthField) {\n            int maxDayOfMonth = partial.getChronology().dayOfMonth().getMaximumValue(instant);\n            int currentDayOfMonth = partial.getDayOfMonth();\n            \n            if (currentDayOfMonth > maxDayOfMonth) {\n                newValues = partial.getChronology().dayOfMonth()\n                        .set(newValues, maxDayOfMonth);\n            }\n        }\n\n        return newValues;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..ad4d7ce8 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,48 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        // Check if month is being added to\n+        DateTimeField dateTimeField = partial.getField(fieldIndex);\n+        boolean isMonthField = dateTimeField.getType() == DateTimeFieldType.monthOfYear();\n+        \n+        // Get current values of the partial\n+        int[] currentValues = new int[values.length];\n+        for (int i = 0; i < values.length; i++) {\n+            currentValues[i] = partial.getValue(i);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+\n+        // Add the value to the field and get the new instant\n+        int newValue = values[fieldIndex] + valueToAdd;\n+        long instant = dateTimeField.set(partial.getChronology().getDateTimeMillis(\n+                currentValues), newValue);\n+\n+        // Get the new values of the partial\n+        int[] newValues = partial.getChronology().get(partial, instant);\n+\n+        // Check if the dayOfMonth value needs to be fixed\n+        if (isMonthField) {\n+            int maxDayOfMonth = partial.getChronology().dayOfMonth().getMaximumValue(instant);\n+            int currentDayOfMonth = partial.getDayOfMonth();\n+            \n+            if (currentDayOfMonth > maxDayOfMonth) {\n+                newValues = partial.getChronology().dayOfMonth()\n+                        .set(newValues, maxDayOfMonth);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+\n+        return newValues;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n \n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}