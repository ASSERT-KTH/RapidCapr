{
    "patch": "        if (ref == null) {\n            for (BasicBlock block = getBlock(); block != null; block = block.getParent()) {\n                if (block.isFunction) {\n                    return null;\n                }\n                if (block.getDirectWriteCount().getVariableValue(targetName).equals(1)) {\n                    return block.getLastWrite(targetName);\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..c588c7f0 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,16 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (ref == null) {\n+            for (BasicBlock block = getBlock(); block != null; block = block.getParent()) {\n+                if (block.isFunction) {\n+                    return null;\n+                }\n+                if (block.getDirectWriteCount().getVariableValue(targetName).equals(1)) {\n+                    return block.getLastWrite(targetName);\n+                }\n+            }\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}