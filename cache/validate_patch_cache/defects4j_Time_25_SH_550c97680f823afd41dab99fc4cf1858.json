{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n\n                // if next transition is the same after adjustment, we need to \n                // use offset local instead\n                if (nextLocal == nextAdjusted) {\n                    return offsetLocal;\n                }\n                // if not, check if current time is after gap\n                long nextLocalLocal = nextTransition(nextLocal + 1);\n                long nextAdjustedLocal = nextTransition(nextAdjusted + 1);\n                if (nextLocalLocal == nextAdjustedLocal) {\n                    // if it is, can use offset adjusted\n                    return offsetAdjusted;\n                } else {\n                    // otherwise, use offset local\n                    return offsetLocal;\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..cec9ab70 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,29 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                // if we just return offsetAdjusted then the time is pushed\n+                // back before the transition, whereas it should be\n+                // on or after the transition\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+\n+                // if next transition is the same after adjustment, we need to \n+                // use offset local instead\n+                if (nextLocal == nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+                // if not, check if current time is after gap\n+                long nextLocalLocal = nextTransition(nextLocal + 1);\n+                long nextAdjustedLocal = nextTransition(nextAdjusted + 1);\n+                if (nextLocalLocal == nextAdjustedLocal) {\n+                    // if it is, can use offset adjusted\n+                    return offsetAdjusted;\n+                } else {\n+                    // otherwise, use offset local\n+                    return offsetLocal;\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}