{
    "patch": "    private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original,\n            final double coeff, final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException {\n        final int dim = original[0].getPoint().length;\n        final double[] contracted = new double[dim];\n        final double[] reflected = new double[dim];\n        final RealPointValuePair best = original[0];\n        final RealPointValuePair secondBest = original[dim - 1];\n        for (int i = 0; i < dim; i++) {\n            reflected[i] = best.getPoint()[i] + coeff * (best.getPoint()[i] - secondBest.getPoint()[i]);\n        }\n        final double[] x = new double[dim];\n        for (int i = 0; i < dim; i++) {\n            x[i] = reflected[i];\n        }\n        final double y = computeObjectiveValue(x);\n        final RealPointValuePair reflectedVertex = new RealPointValuePair(reflected, y);\n        if (comparator.compare(reflectedVertex, best) < 0) {\n            // return the reflected point\n            return reflectedVertex;\n        } else {\n            // perform a contraction step\n            for (int i = 0; i < dim; i++) {\n                contracted[i] = best.getPoint()[i] + coeff * (reflected[i] - best.getPoint()[i]);\n            }\n            final double[] contractedPoint = new double[dim];\n            for (int i = 0; i < dim; i++) {\n                contractedPoint[i] = contracted[i];\n            }\n            final double contractedValue = computeObjectiveValue(contractedPoint);\n            return new RealPointValuePair(contractedPoint, contractedValue);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..63f56ca70 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,44 +58,38 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n+    private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original,\n+            final double coeff, final Comparator<RealPointValuePair> comparator)\n+            throws FunctionEvaluationException {\n+        final int dim = original[0].getPoint().length;\n+        final double[] contracted = new double[dim];\n+        final double[] reflected = new double[dim];\n+        final RealPointValuePair best = original[0];\n+        final RealPointValuePair secondBest = original[dim - 1];\n+        for (int i = 0; i < dim; i++) {\n+            reflected[i] = best.getPoint()[i] + coeff * (best.getPoint()[i] - secondBest.getPoint()[i]);\n+        }\n+        final double[] x = new double[dim];\n+        for (int i = 0; i < dim; i++) {\n+            x[i] = reflected[i];\n+        }\n+        final double y = computeObjectiveValue(x);\n+        final RealPointValuePair reflectedVertex = new RealPointValuePair(reflected, y);\n+        if (comparator.compare(reflectedVertex, best) < 0) {\n+            // return the reflected point\n+            return reflectedVertex;\n+        } else {\n+            // perform a contraction step\n+            for (int i = 0; i < dim; i++) {\n+                contracted[i] = best.getPoint()[i] + coeff * (reflected[i] - best.getPoint()[i]);\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+            final double[] contractedPoint = new double[dim];\n+            for (int i = 0; i < dim; i++) {\n+                contractedPoint[i] = contracted[i];\n             }\n-\n+            final double contractedValue = computeObjectiveValue(contractedPoint);\n+            return new RealPointValuePair(contractedPoint, contractedValue);\n         }\n-\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: method evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>) is already defined in class MultiDirectional",
    "test_result": "ERROR"
}