{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    if (input == null || input.length() < index + 3) {\n        // Input is not long enough for a potential entity\n        return 0;\n    }\n\n    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (input.charAt(start) == 'x' || input.charAt(start) == 'X') {\n            start++;\n            isHex = true;\n        }\n\n        int end = start;\n        while (end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n\n        if (end == input.length()) {\n            // Entity does not end with a semicolon\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            entityValue = Integer.parseInt(input.subSequence(start, end).toString(), isHex ? 16 : 10);\n        } catch (NumberFormatException e) {\n            // Entity value is not a valid number\n            return 0;\n        }\n\n        if (!Character.isDefined(entityValue)) {\n            // Entity value is not a valid Unicode character\n            return 0;\n        }\n\n        if (Character.isBmpCodePoint(entityValue)) {\n            // Entity value is a BMP (Basic Multilingual Plane) character\n            out.write(entityValue);\n        } else {\n            // Entity value is a non-BMP character\n            char[] chars = Character.toChars(entityValue);\n            out.write(chars[0]);\n            out.write(chars[1]);\n        }\n\n        return end - index + 1;\n    }\n\n    return 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex c3cb8695..56e14a9d 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -32,37 +32,57 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        // TODO: Protect from ArrayIndexOutOfBounds\n-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    if (input == null || input.length() < index + 3) {\n+        // Input is not long enough for a potential entity\n+        return 0;\n+    }\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-            }\n+    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n+        int start = index + 2;\n+        boolean isHex = false;\n \n-            int end = start;\n-            while(input.charAt(end) != ';') {\n-                end++;\n-            }\n+        if (input.charAt(start) == 'x' || input.charAt(start) == 'X') {\n+            start++;\n+            isHex = true;\n+        }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-                return 0;\n-            }\n+        int end = start;\n+        while (end < input.length() && input.charAt(end) != ';') {\n+            end++;\n+        }\n \n-                out.write(entityValue);\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+        if (end == input.length()) {\n+            // Entity does not end with a semicolon\n+            return 0;\n         }\n-        return 0;\n+\n+        int entityValue;\n+        try {\n+            entityValue = Integer.parseInt(input.subSequence(start, end).toString(), isHex ? 16 : 10);\n+        } catch (NumberFormatException e) {\n+            // Entity value is not a valid number\n+            return 0;\n+        }\n+\n+        if (!Character.isDefined(entityValue)) {\n+            // Entity value is not a valid Unicode character\n+            return 0;\n+        }\n+\n+        if (Character.isBmpCodePoint(entityValue)) {\n+            // Entity value is a BMP (Basic Multilingual Plane) character\n+            out.write(entityValue);\n+        } else {\n+            // Entity value is a non-BMP character\n+            char[] chars = Character.toChars(entityValue);\n+            out.write(chars[0]);\n+            out.write(chars[1]);\n+        }\n+\n+        return end - index + 1;\n     }\n+\n+    return 0;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape index 887 expected:<\u0377[\u0378]> but was:<\u0377[&#x378;]>",
    "test_result": "FAIL"
}