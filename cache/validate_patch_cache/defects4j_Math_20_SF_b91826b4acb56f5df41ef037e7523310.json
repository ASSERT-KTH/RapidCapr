{
    "patch": "public double[] repairAndDecode(final double[] x) {\n    double[] decoded = decode(x);\n    for (int i = 0; i < decoded.length; i++) {\n        decoded[i] = Math.min(1.0, Math.max(0.0, decoded[i]));\n    }\n    return decoded;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 4b7dbf6bb..9d81346e5 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -917,10 +917,13 @@ public class CMAESOptimizer\n          * @param x Normalized objective variables.\n          * @return the original objective variables, possibly repaired.\n          */\n-        public double[] repairAndDecode(final double[] x) {\n-            return\n-                decode(x);\n-        }\n+public double[] repairAndDecode(final double[] x) {\n+    double[] decoded = decode(x);\n+    for (int i = 0; i < decoded.length; i++) {\n+        decoded[i] = Math.min(1.0, Math.max(0.0, decoded[i]));\n+    }\n+    return decoded;\n+}\n \n         /**\n          * @param x Normalized objective variables.",
    "result_reason": "junit.framework.AssertionFailedError: Out of bounds (0.9558993770042434 > 0.5)",
    "test_result": "FAIL"
}