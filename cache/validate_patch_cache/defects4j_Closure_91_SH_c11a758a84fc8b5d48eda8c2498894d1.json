{
    "patch": "      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n          // Always traverse the left side of the assignment. To handle\n          // nested assignments properly (e.g., (a = this).property = c;),\n          // assignLhsChild should not be overridden.\n          if (assignLhsChild == null) {\n            assignLhsChild = lhs;\n          }\n        } else {\n          // Only traverse the right side if it's not an assignment to a prototype\n          // property or subproperty.\n          if (NodeUtil.isGet(lhs)) {\n            if (lhs.getType() == Token.GETPROP &&\n                lhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n            Node llhs = lhs.getFirstChild();\n            if (llhs.getType() == Token.GETPROP &&\n                llhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n            NodeUtil.VisitCallback visitCallback =\n                new NodeUtil.VisitCallback() {\n                  @Override\n                  public void visit(Node node) {\n                    if (node.isFunction()) {\n                      JSDocInfo info = NodeUtil.getBestJSDocInfo(node);\n                      // Do not traverse functions that have the @lends annotation\n                      // unless also have the @constructor or @interface annotation\n                      if (info.isLends() && !info.isConstructor() && !info.isInterface()) {\n                        skipFunction = true;\n                        return;\n                      }\n                    }\n                  }\n                };\n            NodeTraversal.traverseEs6(compiler, rhs, visitCallback);\n            if (skipFunction) {\n              skipFunction = false;\n              return false;\n            }\n          }\n        }\n      }\n\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..a94eaa37 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,55 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+          // Always traverse the left side of the assignment. To handle\n+          // nested assignments properly (e.g., (a = this).property = c;),\n+          // assignLhsChild should not be overridden.\n+          if (assignLhsChild == null) {\n+            assignLhsChild = lhs;\n+          }\n+        } else {\n+          // Only traverse the right side if it's not an assignment to a prototype\n+          // property or subproperty.\n+          if (NodeUtil.isGet(lhs)) {\n+            if (lhs.getType() == Token.GETPROP &&\n+                lhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+            Node llhs = lhs.getFirstChild();\n+            if (llhs.getType() == Token.GETPROP &&\n+                llhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+            NodeUtil.VisitCallback visitCallback =\n+                new NodeUtil.VisitCallback() {\n+                  @Override\n+                  public void visit(Node node) {\n+                    if (node.isFunction()) {\n+                      JSDocInfo info = NodeUtil.getBestJSDocInfo(node);\n+                      // Do not traverse functions that have the @lends annotation\n+                      // unless also have the @constructor or @interface annotation\n+                      if (info.isLends() && !info.isConstructor() && !info.isInterface()) {\n+                        skipFunction = true;\n+                        return;\n+                      }\n+                    }\n+                  }\n+                };\n+            NodeTraversal.traverseEs6(compiler, rhs, visitCallback);\n+            if (skipFunction) {\n+              skipFunction = false;\n+              return false;\n+            }\n+          }\n+        }\n+      }\n+\n+      return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}