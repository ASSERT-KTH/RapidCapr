{
    "patch": "    public static String unescape(final String input) {\n        if (input == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter(input.length());\n            unescape(input, writer);\n            return writer.toString();\n        } catch (IOException ioe) {\n            // this should never ever happen while writing to a StringWriter\n            throw new RuntimeException(ioe);\n        }\n    }\n\n    public static void unescape(final String input, final Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int sz = input.length();\n        StringBuilder unicode = new StringBuilder(4);\n        boolean hadSlash = false;\n        boolean inUnicode = false;\n        for (int i = 0; i < sz; i++) {\n            char ch = input.charAt(i);\n            if (inUnicode) {\n                unicode.append(ch);\n                if (unicode.length() == 4) {\n                    String unicodeStr = unicode.toString();\n                    try {\n                        int value = Integer.parseInt(unicodeStr, 16);\n                        out.write((char) value);\n                        unicode.setLength(0);\n                        inUnicode = false;\n                        hadSlash = false;\n                    } catch (NumberFormatException nfe) {\n                        throw new IllegalArgumentException(\n                                \"Unable to parse unicode value: \" + unicodeStr, nfe);\n                    }\n                }\n                continue;\n            }\n            if (hadSlash) {\n                hadSlash = false;\n                switch (ch) {\n                case '\\\\':\n                    out.write('\\\\');\n                    break;\n                case '\\'':\n                    out.write('\\'');\n                    break;\n                case '\\\"':\n                    out.write('\"');\n                    break;\n                case 'r':\n                    out.write('\\r');\n                    break;\n                case 'f':\n                    out.write('\\f');\n                    break;\n                case 't':\n                    out.write('\\t');\n                    break;\n                case 'n':\n                    out.write('\\n');\n                    break;\n                case 'b': >>> [ INFILL ] <<<\n                    out.write('\\b');\n                    break;\n                case 'u':\n                    inUnicode = true;\n                    break;\n                default:\n                    out.write(ch);\n                    break;\n                }\n                continue;\n            } else if (ch == '\\\\') {\n                hadSlash = true;\n                continue;\n            }\n            out.write(ch);\n        }\n        if (hadSlash) {\n            out.write('\\\\');\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..3611563f 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,95 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+    public static String unescape(final String input) {\n+        if (input == null) {\n+            return null;\n+        }\n+        try {\n+            StringWriter writer = new StringWriter(input.length());\n+            unescape(input, writer);\n+            return writer.toString();\n+        } catch (IOException ioe) {\n+            // this should never ever happen while writing to a StringWriter\n+            throw new RuntimeException(ioe);\n+        }\n+    }\n+\n+    public static void unescape(final String input, final Writer out) throws IOException {\n+        if (out == null) {\n+            throw new IllegalArgumentException(\"The Writer must not be null\");\n+        }\n+        if (input == null) {\n+            return;\n+        }\n+        int sz = input.length();\n+        StringBuilder unicode = new StringBuilder(4);\n+        boolean hadSlash = false;\n+        boolean inUnicode = false;\n+        for (int i = 0; i < sz; i++) {\n+            char ch = input.charAt(i);\n+            if (inUnicode) {\n+                unicode.append(ch);\n+                if (unicode.length() == 4) {\n+                    String unicodeStr = unicode.toString();\n+                    try {\n+                        int value = Integer.parseInt(unicodeStr, 16);\n+                        out.write((char) value);\n+                        unicode.setLength(0);\n+                        inUnicode = false;\n+                        hadSlash = false;\n+                    } catch (NumberFormatException nfe) {\n+                        throw new IllegalArgumentException(\n+                                \"Unable to parse unicode value: \" + unicodeStr, nfe);\n+                    }\n+                }\n+                continue;\n+            }\n+            if (hadSlash) {\n+                hadSlash = false;\n+                switch (ch) {\n+                case '\\\\':\n+                    out.write('\\\\');\n+                    break;\n+                case '\\'':\n+                    out.write('\\'');\n+                    break;\n+                case '\\\"':\n+                    out.write('\"');\n+                    break;\n+                case 'r':\n+                    out.write('\\r');\n+                    break;\n+                case 'f':\n+                    out.write('\\f');\n+                    break;\n+                case 't':\n+                    out.write('\\t');\n+                    break;\n+                case 'n':\n+                    out.write('\\n');\n+                    break;\n+                case 'b': >>> [ INFILL ] <<<\n+                    out.write('\\b');\n+                    break;\n+                case 'u':\n+                    inUnicode = true;\n+                    break;\n+                default:\n+                    out.write(ch);\n+                    break;\n+                }\n+                continue;\n+            } else if (ch == '\\\\') {\n+                hadSlash = true;\n+                continue;\n+            }\n+            out.write(ch);\n+        }\n+        if (hadSlash) {\n+            out.write('\\\\');\n+        }\n+    }\n             }\n         }\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}