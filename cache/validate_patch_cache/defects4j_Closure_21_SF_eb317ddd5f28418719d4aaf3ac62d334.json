{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n.isEmpty() || n.isComma() || n.isFunction() || n.isExport()) {\n    return;\n  }\n  \n  boolean isObjectLitProperty = NodeUtil.isObjectLitProperty(n, parent);\n  boolean isClassMember = NodeUtil.isClassMember(n, parent);\n  boolean isArrowFunctionWithSideEffects = NodeUtil.isArrowFunctionWithSideEffects(n);\n\n  if (!NodeUtil.mayHaveSideEffects(n, t.getCompiler()) ||\n      isObjectLitProperty ||\n      isClassMember ||\n      isArrowFunctionWithSideEffects) {\n    // If this is a label, it's not a side-effect.\n    if (n.isLabel()) {\n      return;\n    }\n    // Special case around USE STRICT in function bodies.\n    if (n.isString() && parent != null && !parent.isAdd() &&\n        functionNodeStack.contains(NodeUtil.getEnclosingFunction(n))) {\n      String msg = \"Is there a missing '+' on the previous line?\";\n      t.report(n, USELESS_CODE_ERROR, msg);\n      return;\n    }\n    // Ignore calls to goog.reflect.objectProperty for the noSideEffects\n    // field. Used as an indication to the compiler that the object literal the\n    // property is declared in does not need to have it's properties quoted when\n    // compiled.\n    if (n.isCall() && n.getFirstChild().getQualifiedName() != null &&\n        n.getFirstChild().getQualifiedName().equals(\"goog.reflect.objectProperty\")) {\n      return;\n    }\n    // Apparently some people like putting semicolons after every statement.\n    if (parent != null && parent.isBlock()) {\n      Node nextSibling = n.getNext();\n      if (nextSibling == null && n.getLastChild() != null &&\n          n.getLastChild().isBlock()) {\n        nextSibling = n.getLastChild().getNext();\n      }\n      if (nextSibling == null || nextSibling.isBlock()) {\n        return;\n      }\n      // If there is a sibling then make sure there is not an empty block.\n      if (nextSibling.isBlock() &&\n          (!nextSibling.hasChildren() || !NodeUtil.allChildrenAreEmpty(nextSibling))) {\n        return;\n      }\n    }\n    if (NodeUtil.isExpressionResultUsed(n) ||\n        (parent == null) ||\n        NodeUtil.mayHaveSideEffects(parent, t.getCompiler()) ||\n        parent.isCatch()) {\n      return;\n    }\n    if (NodeUtil.isAssignmentOp(n) || n.isCall() ||\n        (n.isUnary() && NodeUtil.isAssignmentOp(n.getFirstChild()))) {\n      String msg =\n          \"The result of the '\" + NodeUtil.opToStr(n.getType()) + \"' operator is not being used.\";\n      t.report(n, USELESS_CODE_ERROR, msg);\n      return;\n    }\n    if (n.isString()) {\n      String msg = \"Is there a missing '+' on the previous line?\";\n      t.report(n, USELESS_CODE_ERROR, msg);\n      return;\n    }\n    if (!NodeUtil.isStatement(n, parent)) {\n      if (n.isObjectLit()) {\n        if (NodeUtil.isObjectLiteralWithComputedProperties(n)) {\n          // Only report an error if an object literal has an empty computed property.\n          for (Node c : n.children()) {\n            if (c.isEmpty() && c.getBooleanProp(Node.IS_CONSTANT_NAME)) {\n              String msg = \"This computed property has no side-effects. \" +\n                  \"Did you mean to use a variable?\";\n              t.report(c, USELESS_CODE_ERROR, msg);\n            }\n          }\n        }\n      }\n      if (n.isFunction()) {\n        if (n.isArrowFunction()) {\n          if (NodeUtil.isStatementBlock(n.getLastChild())) {\n            String msg = \"This arrow function has no side-effects. \" +\n                \"Did you forget to return your computation?\";\n            t.report(n, USELESS_CODE_ERROR, msg);\n          }\n        }\n        return;\n      }\n      t.report(n, USELESS_CODE_ERROR, \"This code lacks side-effects. Is there a bug?\");\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..82bf82bd 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,71 +81,99 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n-      return;\n-    }\n-\n-    if (parent == null) {\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n.isEmpty() || n.isComma() || n.isFunction() || n.isExport()) {\n+    return;\n+  }\n+  \n+  boolean isObjectLitProperty = NodeUtil.isObjectLitProperty(n, parent);\n+  boolean isClassMember = NodeUtil.isClassMember(n, parent);\n+  boolean isArrowFunctionWithSideEffects = NodeUtil.isArrowFunctionWithSideEffects(n);\n+\n+  if (!NodeUtil.mayHaveSideEffects(n, t.getCompiler()) ||\n+      isObjectLitProperty ||\n+      isClassMember ||\n+      isArrowFunctionWithSideEffects) {\n+    // If this is a label, it's not a side-effect.\n+    if (n.isLabel()) {\n       return;\n     }\n-\n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult()) {\n+    // Special case around USE STRICT in function bodies.\n+    if (n.isString() && parent != null && !parent.isAdd() &&\n+        functionNodeStack.contains(NodeUtil.getEnclosingFunction(n))) {\n+      String msg = \"Is there a missing '+' on the previous line?\";\n+      t.report(n, USELESS_CODE_ERROR, msg);\n       return;\n     }\n-\n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n+    // Ignore calls to goog.reflect.objectProperty for the noSideEffects\n+    // field. Used as an indication to the compiler that the object literal the\n+    // property is declared in does not need to have it's properties quoted when\n+    // compiled.\n+    if (n.isCall() && n.getFirstChild().getQualifiedName() != null &&\n+        n.getFirstChild().getQualifiedName().equals(\"goog.reflect.objectProperty\")) {\n       return;\n     }\n-\n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (parent.getType() == Token.COMMA) {\n-      if (isResultUsed) {\n-        return;\n+    // Apparently some people like putting semicolons after every statement.\n+    if (parent != null && parent.isBlock()) {\n+      Node nextSibling = n.getNext();\n+      if (nextSibling == null && n.getLastChild() != null &&\n+          n.getLastChild().isBlock()) {\n+        nextSibling = n.getLastChild().getNext();\n       }\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n-        }\n+      if (nextSibling == null || nextSibling.isBlock()) {\n+        return;\n       }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+      // If there is a sibling then make sure there is not an empty block.\n+      if (nextSibling.isBlock() &&\n+          (!nextSibling.hasChildren() || !NodeUtil.allChildrenAreEmpty(nextSibling))) {\n         return;\n       }\n     }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n+    if (NodeUtil.isExpressionResultUsed(n) ||\n+        (parent == null) ||\n+        NodeUtil.mayHaveSideEffects(parent, t.getCompiler()) ||\n+        parent.isCatch()) {\n+      return;\n+    }\n+    if (NodeUtil.isAssignmentOp(n) || n.isCall() ||\n+        (n.isUnary() && NodeUtil.isAssignmentOp(n.getFirstChild()))) {\n+      String msg =\n+          \"The result of the '\" + NodeUtil.opToStr(n.getType()) + \"' operator is not being used.\";\n+      t.report(n, USELESS_CODE_ERROR, msg);\n+      return;\n+    }\n+    if (n.isString()) {\n+      String msg = \"Is there a missing '+' on the previous line?\";\n+      t.report(n, USELESS_CODE_ERROR, msg);\n+      return;\n+    }\n+    if (!NodeUtil.isStatement(n, parent)) {\n+      if (n.isObjectLit()) {\n+        if (NodeUtil.isObjectLiteralWithComputedProperties(n)) {\n+          // Only report an error if an object literal has an empty computed property.\n+          for (Node c : n.children()) {\n+            if (c.isEmpty() && c.getBooleanProp(Node.IS_CONSTANT_NAME)) {\n+              String msg = \"This computed property has no side-effects. \" +\n+                  \"Did you mean to use a variable?\";\n+              t.report(c, USELESS_CODE_ERROR, msg);\n+            }\n+          }\n+        }\n       }\n-\n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n+      if (n.isFunction()) {\n+        if (n.isArrowFunction()) {\n+          if (NodeUtil.isStatementBlock(n.getLastChild())) {\n+            String msg = \"This arrow function has no side-effects. \" +\n+                \"Did you forget to return your computation?\";\n+            t.report(n, USELESS_CODE_ERROR, msg);\n+          }\n+        }\n+        return;\n       }\n+      t.report(n, USELESS_CODE_ERROR, \"This code lacks side-effects. Is there a bug?\");\n     }\n   }\n+}\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}