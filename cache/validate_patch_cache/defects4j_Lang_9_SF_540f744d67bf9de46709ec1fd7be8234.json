{
    "patch": "private void init() {\n    nameValues = new ConcurrentHashMap<>();\n    StringBuilder regex = new StringBuilder();\n    List<Strategy> collector = new ArrayList<>();\n\n    Matcher patternMatcher = formatPattern.matcher(pattern);\n    int index = 0;\n\n    while (patternMatcher.find()) {\n        String formatField = patternMatcher.group();\n        if (index > 0 && !formatField.startsWith(currentFormatField)) {\n            Strategy currentStrategy = getStrategy(currentFormatField);\n            if (currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            }\n            currentFormatField = formatField;\n        }\n        index++;\n    }\n\n    Strategy currentStrategy = getStrategy(currentFormatField);\n    if (currentStrategy.addRegex(this, regex)) {\n        collector.add(currentStrategy);\n    }\n\n    currentFormatField = null;\n    strategies = collector.toArray(new Strategy[collector.size()]);\n    parsePattern = Pattern.compile(regex.toString());\n    thisYear = Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..98b4fd84 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -112,43 +112,37 @@ public class FastDateParser implements DateParser, Serializable {\n      * Initialize derived fields from defining fields.\n      * This is called from constructor and from readObject (de-serialization)\n      */\n-    private void init() {\n-        thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n-\n-        nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n-\n-        StringBuilder regex= new StringBuilder();\n-        List<Strategy> collector = new ArrayList<Strategy>();\n-\n-        Matcher patternMatcher= formatPattern.matcher(pattern);\n-        if(!patternMatcher.lookingAt()) {\n-            throw new IllegalArgumentException(\"Invalid pattern\");\n-        }\n-\n-        currentFormatField= patternMatcher.group();\n-        Strategy currentStrategy= getStrategy(currentFormatField);\n-        for(;;) {\n-            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n-            if(!patternMatcher.lookingAt()) {\n-                nextStrategy = null;\n-                break;\n-            }\n-            String nextFormatField= patternMatcher.group();\n-            nextStrategy = getStrategy(nextFormatField);\n-            if(currentStrategy.addRegex(this, regex)) {\n+private void init() {\n+    nameValues = new ConcurrentHashMap<>();\n+    StringBuilder regex = new StringBuilder();\n+    List<Strategy> collector = new ArrayList<>();\n+\n+    Matcher patternMatcher = formatPattern.matcher(pattern);\n+    int index = 0;\n+\n+    while (patternMatcher.find()) {\n+        String formatField = patternMatcher.group();\n+        if (index > 0 && !formatField.startsWith(currentFormatField)) {\n+            Strategy currentStrategy = getStrategy(currentFormatField);\n+            if (currentStrategy.addRegex(this, regex)) {\n                 collector.add(currentStrategy);\n             }\n-            currentFormatField= nextFormatField;\n-            currentStrategy= nextStrategy;\n-        }\n-        if(currentStrategy.addRegex(this, regex)) {\n-            collector.add(currentStrategy);\n+            currentFormatField = formatField;\n         }\n-        currentFormatField= null;\n-        strategies= collector.toArray(new Strategy[collector.size()]);\n-        parsePattern= Pattern.compile(regex.toString());\n+        index++;\n+    }\n+\n+    Strategy currentStrategy = getStrategy(currentFormatField);\n+    if (currentStrategy.addRegex(this, regex)) {\n+        collector.add(currentStrategy);\n     }\n \n+    currentFormatField = null;\n+    strategies = collector.toArray(new Strategy[collector.size()]);\n+    parsePattern = Pattern.compile(regex.toString());\n+    thisYear = Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n+}\n+\n     // Accessors\n     //-----------------------------------------------------------------------\n     /* (non-Javadoc)",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}