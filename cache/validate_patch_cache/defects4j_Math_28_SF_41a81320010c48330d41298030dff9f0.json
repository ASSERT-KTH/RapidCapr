{
    "patch": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    List<Integer> candidatePivotRows = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n\n    /*\n     * Find minimum ratio (excluding negative ratios and ratios corresponding\n     * to unrestricted variables), and the list of rows that have the minRatio.\n     */\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        double entry = tableau.getEntry(i, col);\n        double ratio = rhs / entry;\n\n        if (entry > 0.0 && tableau.getRestriction(i) != Relationship.LEQ) {\n            int comparison = Double.compare(ratio, minRatio);\n            if (comparison == 0) {\n                candidatePivotRows.add(i);\n            } else if (comparison < 0) {\n                minRatio = ratio;\n                candidatePivotRows.clear();\n                candidatePivotRows.add(i);\n            }\n        }\n    }\n\n    if (candidatePivotRows.isEmpty()) {\n        return null;\n    } else if (candidatePivotRows.size() == 1) {\n        return candidatePivotRows.get(0);\n    } else {\n        // Resolve ties using Bland's rule\n        Integer pivotRowIndex = null;\n        int numBasicVars = tableau.getNumObjectiveFunctions();\n        for (Integer row : candidatePivotRows) {\n            int colIndexForRow = tableau.getBasicColumn(row);\n            /* If row has a BASIC variable that is non-artificial AND is in the current column,\n             * choose the row. */\n            if (colIndexForRow < numBasicVars && colIndexForRow == col) {\n                return row;\n            }\n            /* Otherwise, choose the row whose basic variable has smallest index if colIndexForRow\n             * is less than current min index.*/\n            if (colIndexForRow < numBasicVars && colIndexForRow < tableau.getBasicColumn(candidatePivotRows.get(0))) {\n                pivotRowIndex = row;\n            }\n        }\n        return pivotRowIndex != null ? pivotRowIndex : candidatePivotRows.get(0);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\nindex a84438d9b..83dd3b133 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n@@ -87,71 +87,55 @@ public class SimplexSolver extends AbstractLinearOptimizer {\n      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n      * @return row with the minimum ratio\n      */\n-    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n-        // create a list of all the rows that tie for the lowest score in the minimum ratio test\n-        List<Integer> minRatioPositions = new ArrayList<Integer>();\n-        double minRatio = Double.MAX_VALUE;\n-        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n-            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n-            final double entry = tableau.getEntry(i, col);\n-\n-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n-                final double ratio = rhs / entry;\n-                // check if the entry is strictly equal to the current min ratio\n-                // do not use a ulp/epsilon check\n-                final int cmp = Double.compare(ratio, minRatio);\n-                if (cmp == 0) {\n-                    minRatioPositions.add(i);\n-                } else if (cmp < 0) {\n-                    minRatio = ratio;\n-                    minRatioPositions = new ArrayList<Integer>();\n-                    minRatioPositions.add(i);\n-                }\n+private Integer getPivotRow(SimplexTableau tableau, final int col) {\n+    List<Integer> candidatePivotRows = new ArrayList<Integer>();\n+    double minRatio = Double.MAX_VALUE;\n+\n+    /*\n+     * Find minimum ratio (excluding negative ratios and ratios corresponding\n+     * to unrestricted variables), and the list of rows that have the minRatio.\n+     */\n+    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n+        double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n+        double entry = tableau.getEntry(i, col);\n+        double ratio = rhs / entry;\n+\n+        if (entry > 0.0 && tableau.getRestriction(i) != Relationship.LEQ) {\n+            int comparison = Double.compare(ratio, minRatio);\n+            if (comparison == 0) {\n+                candidatePivotRows.add(i);\n+            } else if (comparison < 0) {\n+                minRatio = ratio;\n+                candidatePivotRows.clear();\n+                candidatePivotRows.add(i);\n             }\n         }\n+    }\n \n-        if (minRatioPositions.size() == 0) {\n-            return null;\n-        } else if (minRatioPositions.size() > 1) {\n-            // there's a degeneracy as indicated by a tie in the minimum ratio test\n-\n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n-            // 2. apply Bland's rule to prevent cycling:\n-            //    take the row for which the corresponding basic variable has the smallest index\n-            //\n-            // see http://www.stanford.edu/class/msande310/blandrule.pdf\n-            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n-            //\n-            // Additional heuristic: if we did not get a solution after half of maxIterations\n-            //                       revert to the simple case of just returning the top-most row\n-            // This heuristic is based on empirical data gathered while investigating MATH-828.\n-                Integer minRow = null;\n-                int minIndex = tableau.getWidth();\n-                for (Integer row : minRatioPositions) {\n-                    int i = tableau.getNumObjectiveFunctions();\n-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n-                }\n-                return minRow;\n+    if (candidatePivotRows.isEmpty()) {\n+        return null;\n+    } else if (candidatePivotRows.size() == 1) {\n+        return candidatePivotRows.get(0);\n+    } else {\n+        // Resolve ties using Bland's rule\n+        Integer pivotRowIndex = null;\n+        int numBasicVars = tableau.getNumObjectiveFunctions();\n+        for (Integer row : candidatePivotRows) {\n+            int colIndexForRow = tableau.getBasicColumn(row);\n+            /* If row has a BASIC variable that is non-artificial AND is in the current column,\n+             * choose the row. */\n+            if (colIndexForRow < numBasicVars && colIndexForRow == col) {\n+                return row;\n+            }\n+            /* Otherwise, choose the row whose basic variable has smallest index if colIndexForRow\n+             * is less than current min index.*/\n+            if (colIndexForRow < numBasicVars && colIndexForRow < tableau.getBasicColumn(candidatePivotRows.get(0))) {\n+                pivotRowIndex = row;\n+            }\n         }\n-        return minRatioPositions.get(0);\n+        return pivotRowIndex != null ? pivotRowIndex : candidatePivotRows.get(0);\n     }\n+}\n \n     /**\n      * Runs one iteration of the Simplex method on the given model.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}