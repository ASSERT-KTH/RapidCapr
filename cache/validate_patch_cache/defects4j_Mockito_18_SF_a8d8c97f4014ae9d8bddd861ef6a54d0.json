{
    "patch": "public static <T extends Number> double sumOfSquares(T[] arr) {\n    if (arr == null) {\n        return 0;\n    }\n    double sum = 0;\n    for (T num : arr) {\n        if (num == null) {\n            continue;\n        }\n        double square = num.doubleValue() * num.doubleValue();\n        sum += square;\n    }\n    return sum;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..06d85e237 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,20 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static <T extends Number> double sumOfSquares(T[] arr) {\n+    if (arr == null) {\n+        return 0;\n+    }\n+    double sum = 0;\n+    for (T num : arr) {\n+        if (num == null) {\n+            continue;\n+        }\n+        double square = num.doubleValue() * num.doubleValue();\n+        sum += square;\n+    }\n+    return sum;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}