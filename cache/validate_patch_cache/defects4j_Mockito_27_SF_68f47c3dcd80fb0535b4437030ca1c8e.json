{
    "patch": "import net.sf.cglib.proxy.*;\nimport org.mockito.internal.*;\nimport org.mockito.internal.creation.*;\n\npublic class YourClass {\n\n    /**\n     * Resets the provided mock to its original state.\n     *\n     * @param mock the mock to reset\n     * @param <T>  the type of the mock\n     */\n    public <T> void resetMock(T mock) {\n        MockHandler<T> oldHandler = (MockHandler<T>) MockUtil.getMockHandler(mock);\n        MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n        Enhancer enhancer = new Enhancer();\n        enhancer.setSuperclass(mock.getClass());\n        enhancer.setCallback(newHandler);\n        T newMock = (T) enhancer.create();\n        MockUtil.copyMockListeners(mock, newMock);\n        MockUtil.copyInvocationListeners(mock, newMock);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..ce1daabf5 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,30 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import net.sf.cglib.proxy.*;\n+import org.mockito.internal.*;\n+import org.mockito.internal.creation.*;\n+\n+public class YourClass {\n+\n+    /**\n+     * Resets the provided mock to its original state.\n+     *\n+     * @param mock the mock to reset\n+     * @param <T>  the type of the mock\n+     */\n+    public <T> void resetMock(T mock) {\n+        MockHandler<T> oldHandler = (MockHandler<T>) MockUtil.getMockHandler(mock);\n+        MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n+        Enhancer enhancer = new Enhancer();\n+        enhancer.setSuperclass(mock.getClass());\n+        enhancer.setCallback(newHandler);\n+        T newMock = (T) enhancer.create();\n+        MockUtil.copyMockListeners(mock, newMock);\n+        MockUtil.copyInvocationListeners(mock, newMock);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}