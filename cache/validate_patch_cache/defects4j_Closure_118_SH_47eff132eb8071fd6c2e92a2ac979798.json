{
    "patch": "      boolean hasInvalidProperty = false; // added line\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        // Maybe STRING, GET, SET\n>>>     if (child.getType() == Token.STRING) {\n>>>       continue;\n>>>     }\n \n        // We should never see a mix of numbers and strings.\n        String name = child.getString();\n        T type = typeSystem.getType(getScope(), n, name);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n          hasInvalidProperty = true; // added line\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n      }\n\n      // Added block of code to handle the case when invalid properties are found\n      if (hasInvalidProperty) {\n        // TODO(user): It doesn't look like the user can do much in this\n        // case right now.\n        Node firstChild = n.getFirstChild();\n        String name = firstChild.isGetProp() || firstChild.isStringKey()\n                    ? firstChild.getString()\n                    : \"\";\n        compiler.report(JSError.make(\n            t.getSourceName(), firstChild,\n            \"Object literal contains invalid properties (\" + name + \")\", \n            Warnings.INVALIDATION, \"\", \"\", n.toString(), \"\"));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..1785a4c4 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,42 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+      boolean hasInvalidProperty = false; // added line\n+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+        // Maybe STRING, GET, SET\n+>>>     if (child.getType() == Token.STRING) {\n+>>>       continue;\n+>>>     }\n+ \n+        // We should never see a mix of numbers and strings.\n+        String name = child.getString();\n+        T type = typeSystem.getType(getScope(), n, name);\n+\n+        Property prop = getProperty(name);\n+        if (!prop.scheduleRenaming(child,\n+                                   processProperty(t, prop, type, null))) {\n+          hasInvalidProperty = true; // added line\n+          if (propertiesToErrorFor.containsKey(name)) {\n+            compiler.report(JSError.make(\n+                t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                Warnings.INVALIDATION, name,\n+                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+          }\n+        }\n+      }\n+\n+      // Added block of code to handle the case when invalid properties are found\n+      if (hasInvalidProperty) {\n+        // TODO(user): It doesn't look like the user can do much in this\n+        // case right now.\n+        Node firstChild = n.getFirstChild();\n+        String name = firstChild.isGetProp() || firstChild.isStringKey()\n+                    ? firstChild.getString()\n+                    : \"\";\n+        compiler.report(JSError.make(\n+            t.getSourceName(), firstChild,\n+            \"Object literal contains invalid properties (\" + name + \")\", \n+            Warnings.INVALIDATION, \"\", \"\", n.toString(), \"\"));\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}