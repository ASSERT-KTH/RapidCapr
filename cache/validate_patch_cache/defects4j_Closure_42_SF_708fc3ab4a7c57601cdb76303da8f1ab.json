{
    "patch": "import com.google.common.collect.ImmutableSet;\nimport org.mozilla.javascript.Token;\nimport org.mozilla.javascript.ast.*;\n\nimport java.util.Set;\n\npublic class TransformDispatcher implements NodeVisitor {\n\n    protected final ErrorReporter errorReporter;\n    protected final String sourceName;\n    private final Set<String> ALLOWED_DIRECTIVES =\n            ImmutableSet.of(\n                    \"use strict\", // excludes multiple directives\n                    \"use asm\");\n\n    public TransformDispatcher(ErrorReporter errorReporter, String sourceName) {\n        this.errorReporter = errorReporter;\n        this.sourceName = sourceName;\n    }\n\n    private boolean isDirective(Node n) {\n        if (n == null) return false;\n\n        int nType = n.getType();\n        return nType == Token.EXPR_RESULT &&\n                n.getFirstChild().isString() &&\n                ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n    }\n\n    @Override\n    public boolean visit(AstNode node) {\n        return true;\n    }\n\n    @Override\n    public void visitToken(Token token) {\n        // Do nothing\n    }\n\n    @Override\n    public void visitError(AstNode node, String message, String sourceName, int line, int lineOffset) {\n        // Do nothing\n    }\n\n    @Override\n    public boolean visit(AstNode node, ScriptNode scriptNode) {\n        return true;\n    }\n\n    @Override\n    public void leave(AstNode node, ScriptNode scriptNode) {\n        // Do nothing\n    }\n\n    @Override\n    public boolean visit(ExpressionStatement node) {\n        return true;\n    }\n\n    @Override\n    public void leave(ExpressionStatement node) {\n        Node newNode = newNode(transformTokenType(node.getType()));\n        newNode.addChildToBack(transform(node.getExpression()));\n        node.replaceWith(newNode);\n    }\n\n    @Override\n    public boolean visit(Name node) {\n        return true;\n    }\n\n    @Override\n    public void leave(Name node) {\n        if (isDirective(node.getParent())) {\n            // Remove the node and its parent\n            node.getParent().detachFromParent();\n        }\n    }\n\n    @Override\n    public boolean visit(VariableDeclaration node) {\n        return true;\n    }\n\n    @Override\n    public void leave(VariableDeclaration node) {\n        // Transform var declarations into an assignment statement\n        int size = node.getVariables().size();\n        if (size == 1) {\n            VariableInitializer varInit = node.getVariables().get(0);\n            Node newNode = newNode(Token.EXPR_RESULT, newNode(Token.ASSIGN, transform(varInit.getTarget()), transform(varInit.getInitializer())));\n            node.replaceWith(newNode);\n        } else if (size > 1) {\n            Node newNode = newNode(Token.BLOCK);\n            for (VariableInitializer varInit : node.getVariables()) {\n                newNode.addChildToBack(newNode(Token.EXPR_RESULT, newNode(Token.ASSIGN, transform(varInit.getTarget()), transform(varInit.getInitializer()))));\n            }\n            node.replaceWith(newNode);\n        }\n    }\n\n    @Override\n    public boolean visit(FunctionCall node) {\n        return true;\n    }\n\n    @Override\n    public void leave(FunctionCall node) {\n        if (node.getTarget().getType() == Token.NAME && ((Name) node.getTarget()).getIdentifier().equals(\"print\")) {\n            Node call = newNode(Token.CALL);\n            call.addChildToBack(newNode(Token.NAME, new String(node.getLineno() + \":print\")));\n            for (AstNode arg : node.getArguments()) {\n                call.addChildToBack(transform(arg));\n            }\n            node.replaceWith(call);\n        }\n    }\n\n    @Override\n    public boolean visit(ReturnStatement node) {\n        return true;\n    }\n\n    @Override\n    public void leave(ReturnStatement node) {\n        Node newNode = newNode(Token.RETURN, transform(node.getReturnValue()));\n        node.replaceWith(newNode);\n    }\n\n    private Node newNode(int tokenType) {\n        return new Node(tokenType);\n    }\n\n    private Node newNode(int tokenType, Node child1) {\n        Node node = new Node(tokenType);\n        node.addChildToBack(child1);\n        return node;\n    }\n\n    private Node newNode(int tokenType, Node child1, Node child2) {\n        Node node = new Node(tokenType);\n        node.addChildToBack(child1);\n        node.addChildToBack(child2);\n        return node;\n    }\n\n    private Node newNode(int tokenType, Node child1, Node child2, Node child3) {\n        Node node = new Node(tokenType);\n        node.addChildToBack(child1);\n        node.addChildToBack(child2);\n        node.addChildToBack(child3);\n        return node;\n    }\n\n    private int transformTokenType(int tokenType) {\n        switch (tokenType) {\n            case Token.VAR:\n            case Token.LET: // excludes let*\n            case Token.CONST:\n                return Token.EXPR_RESULT;\n            default:\n                return tokenType;\n        }\n    }\n\n    private Node transform(AstNode node) {\n        return node != null ? node.visit(this) : null;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..a65d7833 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,107 +473,176 @@ class IRFactory {\n       }\n     }\n \n+import com.google.common.collect.ImmutableSet;\n+import org.mozilla.javascript.Token;\n+import org.mozilla.javascript.ast.*;\n+\n+import java.util.Set;\n+\n+public class TransformDispatcher implements NodeVisitor {\n+\n+    protected final ErrorReporter errorReporter;\n+    protected final String sourceName;\n+    private final Set<String> ALLOWED_DIRECTIVES =\n+            ImmutableSet.of(\n+                    \"use strict\", // excludes multiple directives\n+                    \"use asm\");\n+\n+    public TransformDispatcher(ErrorReporter errorReporter, String sourceName) {\n+        this.errorReporter = errorReporter;\n+        this.sourceName = sourceName;\n+    }\n+\n     private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+        if (n == null) return false;\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+        int nType = n.getType();\n+        return nType == Token.EXPR_RESULT &&\n+                n.getFirstChild().isString() &&\n+                ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n     }\n \n     @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n+    public boolean visit(AstNode node) {\n+        return true;\n     }\n \n     @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+    public void visitToken(Token token) {\n+        // Do nothing\n     }\n \n     @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n+    public void visitError(AstNode node, String message, String sourceName, int line, int lineOffset) {\n+        // Do nothing\n     }\n \n     @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+    public boolean visit(AstNode node, ScriptNode scriptNode) {\n+        return true;\n     }\n \n     @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+    public void leave(AstNode node, ScriptNode scriptNode) {\n+        // Do nothing\n     }\n \n     @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+    public boolean visit(ExpressionStatement node) {\n+        return true;\n     }\n \n     @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+    public void leave(ExpressionStatement node) {\n+        Node newNode = newNode(transformTokenType(node.getType()));\n+        newNode.addChildToBack(transform(node.getExpression()));\n+        node.replaceWith(newNode);\n     }\n \n     @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+    public boolean visit(Name node) {\n+        return true;\n     }\n \n     @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+    public void leave(Name node) {\n+        if (isDirective(node.getParent())) {\n+            // Remove the node and its parent\n+            node.getParent().detachFromParent();\n+        }\n     }\n \n     @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n+    public boolean visit(VariableDeclaration node) {\n+        return true;\n+    }\n \n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+    @Override\n+    public void leave(VariableDeclaration node) {\n+        // Transform var declarations into an assignment statement\n+        int size = node.getVariables().size();\n+        if (size == 1) {\n+            VariableInitializer varInit = node.getVariables().get(0);\n+            Node newNode = newNode(Token.EXPR_RESULT, newNode(Token.ASSIGN, transform(varInit.getTarget()), transform(varInit.getInitializer())));\n+            node.replaceWith(newNode);\n+        } else if (size > 1) {\n+            Node newNode = newNode(Token.BLOCK);\n+            for (VariableInitializer varInit : node.getVariables()) {\n+                newNode.addChildToBack(newNode(Token.EXPR_RESULT, newNode(Token.ASSIGN, transform(varInit.getTarget()), transform(varInit.getInitializer()))));\n+            }\n+            node.replaceWith(newNode);\n+        }\n+    }\n+\n+    @Override\n+    public boolean visit(FunctionCall node) {\n+        return true;\n+    }\n+\n+    @Override\n+    public void leave(FunctionCall node) {\n+        if (node.getTarget().getType() == Token.NAME && ((Name) node.getTarget()).getIdentifier().equals(\"print\")) {\n+            Node call = newNode(Token.CALL);\n+            call.addChildToBack(newNode(Token.NAME, new String(node.getLineno() + \":print\")));\n+            for (AstNode arg : node.getArguments()) {\n+                call.addChildToBack(transform(arg));\n+            }\n+            node.replaceWith(call);\n+        }\n     }\n \n+    @Override\n+    public boolean visit(ReturnStatement node) {\n+        return true;\n+    }\n+\n+    @Override\n+    public void leave(ReturnStatement node) {\n+        Node newNode = newNode(Token.RETURN, transform(node.getReturnValue()));\n+        node.replaceWith(newNode);\n+    }\n+\n+    private Node newNode(int tokenType) {\n+        return new Node(tokenType);\n+    }\n+\n+    private Node newNode(int tokenType, Node child1) {\n+        Node node = new Node(tokenType);\n+        node.addChildToBack(child1);\n+        return node;\n+    }\n+\n+    private Node newNode(int tokenType, Node child1, Node child2) {\n+        Node node = new Node(tokenType);\n+        node.addChildToBack(child1);\n+        node.addChildToBack(child2);\n+        return node;\n+    }\n+\n+    private Node newNode(int tokenType, Node child1, Node child2, Node child3) {\n+        Node node = new Node(tokenType);\n+        node.addChildToBack(child1);\n+        node.addChildToBack(child2);\n+        node.addChildToBack(child3);\n+        return node;\n+    }\n+\n+    private int transformTokenType(int tokenType) {\n+        switch (tokenType) {\n+            case Token.VAR:\n+            case Token.LET: // excludes let*\n+            case Token.CONST:\n+                return Token.EXPR_RESULT;\n+            default:\n+                return tokenType;\n+        }\n+    }\n+\n+    private Node transform(AstNode node) {\n+        return node != null ? node.visit(this) : null;\n+    }\n+}\n+\n     @Override\n     Node processForLoop(ForLoop loopNode) {\n       Node node = newNode(",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}