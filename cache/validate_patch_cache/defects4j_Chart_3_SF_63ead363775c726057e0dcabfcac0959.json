{
    "patch": "public TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    int itemCount = 0; //Fix 1: initialize a counter to keep track of the items added to the new TimeSeries copy\n    TimeSeries copy = (TimeSeries) super.clone();\n    copy.data = new java.util.ArrayList();\n    if (this.data.size() > 0) {\n        for (int i = 0; i < this.data.size(); i++) {\n            TimeSeriesDataItem item\n                    = (TimeSeriesDataItem) this.data.get(i);\n            if (itemCount >= start && itemCount <= end) {\n                //Fix 2: add only items satisfying the range condition to the new TimeSeries copy\n                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n                try {\n                    copy.add(clone);\n                }\n                catch (SeriesException e) {\n                    e.printStackTrace();\n                }\n            }\n            else if (itemCount > end) {\n                break; //Fix 3: exit the loop when all items satisfying the range condition have been added to the new TimeSeries copy\n            }\n            itemCount++; //increment the counter for each iteration\n        }\n    }\n    return copy;\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..4a3b73c 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1045,31 +1045,39 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n      *\n      * @throws CloneNotSupportedException if there is a cloning problem.\n      */\n-    public TimeSeries createCopy(int start, int end)\n-            throws CloneNotSupportedException {\n-        if (start < 0) {\n-            throw new IllegalArgumentException(\"Requires start >= 0.\");\n-        }\n-        if (end < start) {\n-            throw new IllegalArgumentException(\"Requires start <= end.\");\n-        }\n-        TimeSeries copy = (TimeSeries) super.clone();\n-        copy.data = new java.util.ArrayList();\n-        if (this.data.size() > 0) {\n-            for (int index = start; index <= end; index++) {\n-                TimeSeriesDataItem item\n-                        = (TimeSeriesDataItem) this.data.get(index);\n-                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n-                try {\n-                    copy.add(clone);\n-                }\n-                catch (SeriesException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        }\n-        return copy;\n-    }\n+public TimeSeries createCopy(int start, int end)\n+        throws CloneNotSupportedException {\n+    if (start < 0) {\n+        throw new IllegalArgumentException(\"Requires start >= 0.\");\n+    }\n+    if (end < start) {\n+        throw new IllegalArgumentException(\"Requires start <= end.\");\n+    }\n+    int itemCount = 0; //Fix 1: initialize a counter to keep track of the items added to the new TimeSeries copy\n+    TimeSeries copy = (TimeSeries) super.clone();\n+    copy.data = new java.util.ArrayList();\n+    if (this.data.size() > 0) {\n+        for (int i = 0; i < this.data.size(); i++) {\n+            TimeSeriesDataItem item\n+                    = (TimeSeriesDataItem) this.data.get(i);\n+            if (itemCount >= start && itemCount <= end) {\n+                //Fix 2: add only items satisfying the range condition to the new TimeSeries copy\n+                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+                try {\n+                    copy.add(clone);\n+                }\n+                catch (SeriesException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+            else if (itemCount > end) {\n+                break; //Fix 3: exit the loop when all items satisfying the range condition have been added to the new TimeSeries copy\n+            }\n+            itemCount++; //increment the counter for each iteration\n+        }\n+    }\n+    return copy;\n+}\n \n     /**\n      * Creates a new timeseries by copying a subset of the data in this time",
    "result_reason": "junit.framework.AssertionFailedError: expected:<101.0> but was:<102.0>",
    "test_result": "FAIL"
}