{
    "patch": "public <T> void resetMock(T mock) {\n    if (mock == null) {\n        return;\n    }\n\n    Mockito.reset(mock);\n\n    if (mock instanceof Factory) {\n        Factory factory = (Factory) mock;\n        Callback[] callbacks = factory.getCallbacks();\n\n        for (int i = 0; i < callbacks.length; i++) {\n            if (callbacks[i] instanceof MethodInterceptorFilter) {\n                callbacks[i] = ((MethodInterceptorFilter) callbacks[i]).getDelegate();\n            }\n        }\n\n        factory.setCallbacks(callbacks);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..0e7357d99 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,27 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    if (mock == null) {\n+        return;\n+    }\n+\n+    Mockito.reset(mock);\n+\n+    if (mock instanceof Factory) {\n+        Factory factory = (Factory) mock;\n+        Callback[] callbacks = factory.getCallbacks();\n+\n+        for (int i = 0; i < callbacks.length; i++) {\n+            if (callbacks[i] instanceof MethodInterceptorFilter) {\n+                callbacks[i] = ((MethodInterceptorFilter) callbacks[i]).getDelegate();\n+            }\n+        }\n+\n+        factory.setCallbacks(callbacks);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}