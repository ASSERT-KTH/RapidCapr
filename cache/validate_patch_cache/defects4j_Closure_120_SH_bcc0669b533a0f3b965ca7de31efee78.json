{
    "patch": "for (BasicBlock block : BasicBlock.findBasicBlocks(\n                       cfg.getEntry().getValue().getAstRoot())) {\n  for (JSError error : syms.getErrors()) {\n    if (error.lineNumber == block.getFirstNode().getLineno()) {\n      block.setInsideTryStatement(true);\n      break;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..2675da7f 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,15 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+for (BasicBlock block : BasicBlock.findBasicBlocks(\n+                       cfg.getEntry().getValue().getAstRoot())) {\n+  for (JSError error : syms.getErrors()) {\n+    if (error.lineNumber == block.getFirstNode().getLineno()) {\n+      block.setInsideTryStatement(true);\n+      break;\n+    }\n+  }\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}