{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    Separator sep = null;\n    List<Object> comp = new ArrayList<>(elementPairs.size());\n    for (Object obj : elementPairs) {\n        if (obj instanceof Separator) {\n            sep = (Separator) obj;\n        } else {\n            comp.add(obj);\n        }\n    }\n    if (sep != null) {\n        PeriodFormatter f = toFormatter(comp, notPrinter, notParser);\n        sep = sep.finish(f.getPrinter(), f.getParser());\n        return new PeriodFormatter(sep, sep);\n    } else {\n        Object[] composite = createComposite(comp);\n        if (notPrinter) {\n            if (composite[1] == null) {\n                throw new IllegalStateException(\"Can't build a printer with no formatter\");\n            }\n            return new PeriodFormatter(null, (PeriodParser) composite[1]);\n        } else if (notParser) {\n            if (composite[0] == null) {\n                throw new IllegalStateException(\"Can't build a parser with no formatter\");\n            }\n            return new PeriodFormatter((PeriodPrinter) composite[0], null);\n        } else {\n            if (composite[0] == null || composite[1] == null) {\n                throw new IllegalStateException(\"Can't build a formatter with no printer and no parser\");\n            }\n            return new PeriodFormatter((PeriodPrinter) composite[0], (PeriodParser) composite[1]);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..9b5bbbcd 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,43 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    Separator sep = null;\n+    List<Object> comp = new ArrayList<>(elementPairs.size());\n+    for (Object obj : elementPairs) {\n+        if (obj instanceof Separator) {\n+            sep = (Separator) obj;\n+        } else {\n+            comp.add(obj);\n+        }\n+    }\n+    if (sep != null) {\n+        PeriodFormatter f = toFormatter(comp, notPrinter, notParser);\n+        sep = sep.finish(f.getPrinter(), f.getParser());\n+        return new PeriodFormatter(sep, sep);\n+    } else {\n+        Object[] composite = createComposite(comp);\n         if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            if (composite[1] == null) {\n+                throw new IllegalStateException(\"Can't build a printer with no formatter\");\n+            }\n+            return new PeriodFormatter(null, (PeriodParser) composite[1]);\n         } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            if (composite[0] == null) {\n+                throw new IllegalStateException(\"Can't build a parser with no formatter\");\n+            }\n+            return new PeriodFormatter((PeriodPrinter) composite[0], null);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            if (composite[0] == null || composite[1] == null) {\n+                throw new IllegalStateException(\"Can't build a formatter with no printer and no parser\");\n+            }\n+            return new PeriodFormatter((PeriodPrinter) composite[0], (PeriodParser) composite[1]);\n         }\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}