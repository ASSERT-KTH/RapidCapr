{
    "patch": "public static double regularizedGamma(double a, double x) {\n    double gamma = gamma(a);\n    double[] p = continuedFraction(a, x);\n    double g = p[0] + p[1] / p[2];\n    double result = Math.exp(-x + a * Math.log(x) - Math.log(gamma)) * g / a;\n    return 1 - result;\n}\n\nprivate static double gamma(double x) {\n    double gamma = Math.sqrt(2 * Math.PI / x) * Math.pow((x / Math.E), x);\n    return gamma;\n}\n\nprivate static double[] continuedFraction(double a, double x) {\n    double eps = 10e-15;\n    int maxIterations = 1000;\n    double numerator = 1;\n    double denominator = x + 1 - a;\n    double cf = denominator == 0 ? eps : numerator / denominator;\n    double g = 0;\n    int i;\n    for (i = 1; i <= maxIterations; i++) {\n        double an = -i * (i - a);\n        numerator = 1 + an * numerator;\n        denominator = x + 1 + an * denominator;\n        if (denominator == 0) {\n            denominator = eps;\n        }\n        g = numerator / denominator;\n        cf *= g;\n        if (Math.abs(g - 1) < eps) {\n            break;\n        }\n    }\n    double[] result = { cf, g, i };\n    return result;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..55641398a 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,43 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    double gamma = gamma(a);\n+    double[] p = continuedFraction(a, x);\n+    double g = p[0] + p[1] / p[2];\n+    double result = Math.exp(-x + a * Math.log(x) - Math.log(gamma)) * g / a;\n+    return 1 - result;\n+}\n+\n+private static double gamma(double x) {\n+    double gamma = Math.sqrt(2 * Math.PI / x) * Math.pow((x / Math.E), x);\n+    return gamma;\n+}\n+\n+private static double[] continuedFraction(double a, double x) {\n+    double eps = 10e-15;\n+    int maxIterations = 1000;\n+    double numerator = 1;\n+    double denominator = x + 1 - a;\n+    double cf = denominator == 0 ? eps : numerator / denominator;\n+    double g = 0;\n+    int i;\n+    for (i = 1; i <= maxIterations; i++) {\n+        double an = -i * (i - a);\n+        numerator = 1 + an * numerator;\n+        denominator = x + 1 + an * denominator;\n+        if (denominator == 0) {\n+            denominator = eps;\n+        }\n+        g = numerator / denominator;\n+        cf *= g;\n+        if (Math.abs(g - 1) < eps) {\n+            break;\n+        }\n+    }\n+    double[] result = { cf, g, i };\n+    return result;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}