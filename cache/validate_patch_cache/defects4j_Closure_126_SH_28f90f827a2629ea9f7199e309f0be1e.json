{
    "patch": "      if (NodeUtil.hasFinally(n)) {\n        Node finallyBlock = n.getLastChild();\n        tryMinimizeExits(finallyBlock, exitType, labelName);\n      } else {\n        Node nextNode = n.getNext();\n        if (nextNode != null) {\n          tryMinimizeExits(nextNode, exitType, labelName);\n        }\n      }\n      \n/* Don't try to minimize the exits of finally blocks, as this\n * can cause problems if it changes the completion type of the finally\n * block. See ECMA 262 Sections 8.9 & 12.14\n */",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..a800ea5c 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -141,7 +141,17 @@ class MinimizeExitPoints\n       if (NodeUtil.hasFinally(n)) {\n         Node finallyBlock = n.getLastChild();\n         tryMinimizeExits(finallyBlock, exitType, labelName);\n+      } else {\n+        Node nextNode = n.getNext();\n+        if (nextNode != null) {\n+          tryMinimizeExits(nextNode, exitType, labelName);\n+        }\n       }\n+      \n+/* Don't try to minimize the exits of finally blocks, as this\n+ * can cause problems if it changes the completion type of the finally\n+ * block. See ECMA 262 Sections 8.9 & 12.14\n+ */\n     }\n \n     // Just a 'label'.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}