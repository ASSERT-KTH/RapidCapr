{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        Chronology chrono = instant.getChronology();\n        long instantMillis = instant.getMillis();\n        int maxAllowedPos = text.length();\n        \n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n                instantMillis, chrono, iLocale, iPivotYear, iDefaultYear\n        );\n        parser.parseInto(bucket, text, position, maxAllowedPos);\n        if (bucket.getParseFailure() != null) {\n            return ~position;\n        }\n        \n        long parsedInstantMillis = bucket.computeMillis(false, text);\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            parsedInstantMillis -= bucket.getOffsetInteger().longValue();\n            chrono = chrono.withZone(DateTimeZone.forOffsetMillis(bucket.getOffsetInteger().intValue()));\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        \n        instant.setMillis(parsedInstantMillis);\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return bucket.getPos();\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..d15e22f0 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -699,28 +699,32 @@ public class DateTimeFormatter {\n         if (instant == null) {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n-        \n-        long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n+        long instantMillis = instant.getMillis();\n+        int maxAllowedPos = text.length();\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n+                instantMillis, chrono, iLocale, iPivotYear, iDefaultYear\n+        );\n+        parser.parseInto(bucket, text, position, maxAllowedPos);\n+        if (bucket.getParseFailure() != null) {\n+            return ~position;\n+        }\n+        \n+        long parsedInstantMillis = bucket.computeMillis(false, text);\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+            parsedInstantMillis -= bucket.getOffsetInteger().longValue();\n+            chrono = chrono.withZone(DateTimeZone.forOffsetMillis(bucket.getOffsetInteger().intValue()));\n         } else if (bucket.getZone() != null) {\n             chrono = chrono.withZone(bucket.getZone());\n         }\n+        \n+        instant.setMillis(parsedInstantMillis);\n         instant.setChronology(chrono);\n         if (iZone != null) {\n             instant.setZone(iZone);\n         }\n-        return newPos;\n+        return bucket.getPos();\n     }\n \n     /**",
    "result_reason": "error: method parseInto in interface DateTimeParser cannot be applied to given types;",
    "test_result": "ERROR"
}