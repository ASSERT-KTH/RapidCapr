{
    "patch": "public static double getTypedPercent(String json) {\n    Gson gson = new Gson();\n    Type totalType = new TypeToken<List<Map<String, Object>>>(){}.getType();\n    List<Map<String, Object>> list = gson.fromJson(json, totalType);\n    int typed = 0;\n    int total = 0;\n    for (Map<String, Object> map : list) {\n        if (map.containsKey(\"type\")) {\n            total++;\n            if (map.get(\"type\").equals(\"typed\")) {\n                typed++;\n            }\n        }\n    }\n    if (total > 0) {\n        return ((double) typed / (double) total) * 100.0;\n    } else {\n        return 0.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..8fd37e8e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    Gson gson = new Gson();\n+    Type totalType = new TypeToken<List<Map<String, Object>>>(){}.getType();\n+    List<Map<String, Object>> list = gson.fromJson(json, totalType);\n+    int typed = 0;\n+    int total = 0;\n+    for (Map<String, Object> map : list) {\n+        if (map.containsKey(\"type\")) {\n+            total++;\n+            if (map.get(\"type\").equals(\"typed\")) {\n+                typed++;\n+            }\n+        }\n+    }\n+    if (total > 0) {\n+        return ((double) typed / (double) total) * 100.0;\n+    } else {\n+        return 0.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}