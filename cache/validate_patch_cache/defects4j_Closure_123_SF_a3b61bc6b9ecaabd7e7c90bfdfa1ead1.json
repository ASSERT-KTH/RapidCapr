{
    "patch": "public static String fixCode(String input) {\n    String[] lines = input.split(\"\\\\r?\\\\n\");\n    String fixed = \"\";\n    int lineIndex = 0;\n    while (lineIndex < lines.length) {\n        String line = lines[lineIndex];\n        if (line.contains(\"for(\")) {\n            int startIndex = line.indexOf(\"for(\") + 4;\n            int endIndex = line.lastIndexOf(\")\");\n            String forLoop = line.substring(startIndex, endIndex);\n            String[] forLoopParts = forLoop.split(\";\");\n            if (forLoopParts[0].contains(\"in\")) {\n                String[] inParts = forLoopParts[0].split(\" \");\n                String inFix = \"(\" + inParts[0] + \" instanceof java.util.Collection ? ((java.util.Collection)\" + inParts[0] + \").isEmpty()\";\n                if (inParts.length > 1) {\n                    inFix += \" : !\" + inParts[2] + \".containsKey(\" + inParts[0] + \"))\";\n                } else {\n                    inFix += \" : \" + inParts[0] + \" == null || !\" + inParts[0] + \".getClass().isArray() || java.util.Arrays\" +\n                            \".getLength(\" + inParts[0] + \") == 0)\";\n                }\n                forLoopParts[0] = inFix;\n                String fixedForLoop = \"for(\" + forLoopParts[0] + \";\" + forLoopParts[1] + \";\" + forLoopParts[2] + \")\";\n                String output = line.substring(0, startIndex) + fixedForLoop + line.substring(endIndex);\n                fixed += output + \"\\n\";\n                lineIndex++;\n            } else {\n                fixed += lines[lineIndex] + \"\\n\";\n                lineIndex++;\n            }\n        } else {\n            fixed += lines[lineIndex] + \"\\n\";\n            lineIndex++;\n        }\n    }\n    return fixed.trim();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..03b45e74 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,42 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String input) {\n+    String[] lines = input.split(\"\\\\r?\\\\n\");\n+    String fixed = \"\";\n+    int lineIndex = 0;\n+    while (lineIndex < lines.length) {\n+        String line = lines[lineIndex];\n+        if (line.contains(\"for(\")) {\n+            int startIndex = line.indexOf(\"for(\") + 4;\n+            int endIndex = line.lastIndexOf(\")\");\n+            String forLoop = line.substring(startIndex, endIndex);\n+            String[] forLoopParts = forLoop.split(\";\");\n+            if (forLoopParts[0].contains(\"in\")) {\n+                String[] inParts = forLoopParts[0].split(\" \");\n+                String inFix = \"(\" + inParts[0] + \" instanceof java.util.Collection ? ((java.util.Collection)\" + inParts[0] + \").isEmpty()\";\n+                if (inParts.length > 1) {\n+                    inFix += \" : !\" + inParts[2] + \".containsKey(\" + inParts[0] + \"))\";\n+                } else {\n+                    inFix += \" : \" + inParts[0] + \" == null || !\" + inParts[0] + \".getClass().isArray() || java.util.Arrays\" +\n+                            \".getLength(\" + inParts[0] + \") == 0)\";\n+                }\n+                forLoopParts[0] = inFix;\n+                String fixedForLoop = \"for(\" + forLoopParts[0] + \";\" + forLoopParts[1] + \";\" + forLoopParts[2] + \")\";\n+                String output = line.substring(0, startIndex) + fixedForLoop + line.substring(endIndex);\n+                fixed += output + \"\\n\";\n+                lineIndex++;\n+            } else {\n+                fixed += lines[lineIndex] + \"\\n\";\n+                lineIndex++;\n+            }\n+        } else {\n+            fixed += lines[lineIndex] + \"\\n\";\n+            lineIndex++;\n+        }\n+    }\n+    return fixed.trim();\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}