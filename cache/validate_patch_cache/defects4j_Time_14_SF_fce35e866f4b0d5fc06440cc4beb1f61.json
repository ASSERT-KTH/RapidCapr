{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        boolean isLeapYear = false;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (partial.getFieldType(i) == DateTimeFieldType.year()) {\n                if (iChronology.isLeapYear(values[i])) {\n                    isLeapYear = true;\n                }\n            }\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        int origYear = iChronology.year().get(instant);\n        int origMonth = iChronology.monthOfYear().get(instant);\n        int origDay = iChronology.dayOfMonth().get(instant);\n        int newYear = origYear;\n        int newMonth = origMonth + valueToAdd;\n        int newDay = origDay;\n        if (newMonth > 12) {\n            newYear += (newMonth - 1) / 12;\n            newMonth = (newMonth - 1) % 12 + 1;\n        } else if (newMonth < 1) {\n            newYear -= (Math.abs(newMonth) / 12 + 1);\n            int deltaMonths = Math.abs(newMonth) % 12;\n            if (deltaMonths != 0) {\n                newMonth = 12 - deltaMonths + 1;\n            } else {\n                newMonth = 12;\n            }\n        }\n        if (isLeapYear && origMonth == 2 && origDay == 29) {\n            // Adjust date to last day of February before adding months\n            instant = iChronology.dayOfMonth().set(instant, 28);\n            origDay = 28;\n        }\n        instant = iChronology.yearMonthDay().set(instant, newYear, newMonth, 1);\n        int daysInNewMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n        if (newDay > daysInNewMonth) {\n            newDay = daysInNewMonth;\n        }\n        instant = iChronology.dayOfMonth().set(instant, newDay);\n        if (isLeapYear && newMonth == 2 && newDay == 28) {\n            // If the result is on 28th Feb, adjust it to 29th Feb\n            instant = iChronology.dayOfMonth().set(instant, 29);\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..fcae793a 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,62 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        boolean isLeapYear = false;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (partial.getFieldType(i) == DateTimeFieldType.year()) {\n+                if (iChronology.isLeapYear(values[i])) {\n+                    isLeapYear = true;\n+                }\n+            }\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        int origYear = iChronology.year().get(instant);\n+        int origMonth = iChronology.monthOfYear().get(instant);\n+        int origDay = iChronology.dayOfMonth().get(instant);\n+        int newYear = origYear;\n+        int newMonth = origMonth + valueToAdd;\n+        int newDay = origDay;\n+        if (newMonth > 12) {\n+            newYear += (newMonth - 1) / 12;\n+            newMonth = (newMonth - 1) % 12 + 1;\n+        } else if (newMonth < 1) {\n+            newYear -= (Math.abs(newMonth) / 12 + 1);\n+            int deltaMonths = Math.abs(newMonth) % 12;\n+            if (deltaMonths != 0) {\n+                newMonth = 12 - deltaMonths + 1;\n+            } else {\n+                newMonth = 12;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        if (isLeapYear && origMonth == 2 && origDay == 29) {\n+            // Adjust date to last day of February before adding months\n+            instant = iChronology.dayOfMonth().set(instant, 28);\n+            origDay = 28;\n+        }\n+        instant = iChronology.yearMonthDay().set(instant, newYear, newMonth, 1);\n+        int daysInNewMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n+        if (newDay > daysInNewMonth) {\n+            newDay = daysInNewMonth;\n+        }\n+        instant = iChronology.dayOfMonth().set(instant, newDay);\n+        if (isLeapYear && newMonth == 2 && newDay == 28) {\n+            // If the result is on 28th Feb, adjust it to 29th Feb\n+            instant = iChronology.dayOfMonth().set(instant, 29);\n+        }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}