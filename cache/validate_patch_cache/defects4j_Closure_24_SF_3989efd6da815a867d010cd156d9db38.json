{
    "patch": "  private void findAliases(NodeTraversal t) {\n    Scope scope = t.getScope();\n    for (Var v : scope.getVarIterable()) {\n      Node n = v.getNode();\n      if (n != null && n.getParent() != null && n.getParent().getType() == Token.NAME) {\n        Node grandparent = n.getParent().getParent();\n        if (grandparent != null && grandparent.getType() == Token.VAR) {\n          if (n.getFirstChild() != null && n.getFirstChild().getType() == Token.GETPROP) {\n            String name = n.getString();\n            Var aliasVar = v;\n            // Only consider local aliases (i.e. not external symbols).\n            // Also, only consider aliases that are assigned to objects with\n            // methods or properties. (i.e. not aliases to strings, numbers, etc.)\n            if (aliasVar.isLocal() && isAssignableToExpression(aliasVar)) {\n              aliases.put(name, aliasVar);\n              if (aliasVar != null && aliasVar.getInitialValue() != null\n                  && aliasVar.getInitialValue().getQualifiedName() != null) {\n                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n                transformation.addAlias(name, qualifiedName);\n              }\n            }\n          } else {\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n          }\n        }\n      }\n    }\n  }\n\n  private static boolean isAssignableToExpression(Var var) {\n    Node initialVal = var.getInitialValue();\n    if (initialVal != null) {\n      int type = initialVal.getToken();\n      return type == Token.OBJECTLIT || type == Token.CALL || type == Token.FUNCTION\n          || type == Token.ADD || type == Token.SUB || type == Token.MUL || type == Token.DIV\n          || type == Token.MOD || type == Token.EQ || type == Token.NE || type == Token.SHEQ\n          || type == Token.SHNE || type == Token.LT || type == Token.LE || type == Token.GT\n          || type == Token.GE || type == Token.AND || type == Token.OR || type == Token.INC\n          || type == Token.DEC || type == Token.BITAND || type == Token.BITOR\n          || type == Token.BITXOR || type == Token.LSH || type == Token.RSH || type == Token.URSH\n          || type == Token.NOT || type == Token.BANG || type == Token.TYPEOF\n          || type == Token.INSTANCEOF || type == Token.CONDITIONAL;\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..6af67f2a 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,51 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+  private void findAliases(NodeTraversal t) {\n+    Scope scope = t.getScope();\n+    for (Var v : scope.getVarIterable()) {\n+      Node n = v.getNode();\n+      if (n != null && n.getParent() != null && n.getParent().getType() == Token.NAME) {\n+        Node grandparent = n.getParent().getParent();\n+        if (grandparent != null && grandparent.getType() == Token.VAR) {\n+          if (n.getFirstChild() != null && n.getFirstChild().getType() == Token.GETPROP) {\n+            String name = n.getString();\n+            Var aliasVar = v;\n+            // Only consider local aliases (i.e. not external symbols).\n+            // Also, only consider aliases that are assigned to objects with\n+            // methods or properties. (i.e. not aliases to strings, numbers, etc.)\n+            if (aliasVar.isLocal() && isAssignableToExpression(aliasVar)) {\n+              aliases.put(name, aliasVar);\n+              if (aliasVar != null && aliasVar.getInitialValue() != null\n+                  && aliasVar.getInitialValue().getQualifiedName() != null) {\n+                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+                transformation.addAlias(name, qualifiedName);\n+              }\n+            }\n+          } else {\n+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+          }\n         }\n       }\n     }\n+  }\n+\n+  private static boolean isAssignableToExpression(Var var) {\n+    Node initialVal = var.getInitialValue();\n+    if (initialVal != null) {\n+      int type = initialVal.getToken();\n+      return type == Token.OBJECTLIT || type == Token.CALL || type == Token.FUNCTION\n+          || type == Token.ADD || type == Token.SUB || type == Token.MUL || type == Token.DIV\n+          || type == Token.MOD || type == Token.EQ || type == Token.NE || type == Token.SHEQ\n+          || type == Token.SHNE || type == Token.LT || type == Token.LE || type == Token.GT\n+          || type == Token.GE || type == Token.AND || type == Token.OR || type == Token.INC\n+          || type == Token.DEC || type == Token.BITAND || type == Token.BITOR\n+          || type == Token.BITXOR || type == Token.LSH || type == Token.RSH || type == Token.URSH\n+          || type == Token.NOT || type == Token.BANG || type == Token.TYPEOF\n+          || type == Token.INSTANCEOF || type == Token.CONDITIONAL;\n+    }\n+    return false;\n+  }\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}