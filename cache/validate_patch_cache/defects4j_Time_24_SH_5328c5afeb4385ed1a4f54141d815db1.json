{
    "patch": "    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        if (e.getDateTimeFieldType() == DateTimeFieldType.year()) {\n            // used savedFieldsCount for message below, but already used it.\n            StringBuilder sb = new StringBuilder(128)\n                .append(\"Cannot parse \\\"\").append(text).append(\"\\\": \")\n                .append(\"Invalid Year of Era '\").append(e.getIllegalValue());\n            String[] validEras = e.getLegalFieldValue().getReadablePartial().getFormatter().getEraNames();\n            if (validEras != null && validEras.length > 0) {\n                sb.append(\"'; \");\n                if (validEras.length == 1) {\n                    sb.append(\"possible values are \");\n                } else {\n                    sb.append(\"possible values are {\");\n                }\n                for (int i = 0; i < validEras.length; i++) {\n                    if (i > 0) {\n                        if (validEras.length > 2) {\n                            sb.append(\", \");\n                        } else {\n                            sb.append(' ');\n                        }\n                        sb.append(i + 1 == validEras.length ? \"or \" : \"\");\n                    }\n                    sb.append(validEras[i]);\n                }\n                if (validEras.length > 1) {\n                    sb.append('}');\n                }\n                sb.append(\" (these are locale-specific and may change without notice)\");\n            } else {\n                sb.append(\"' (valid eras unknown)\");\n            }\n            throw new IllegalArgumentException(sb.toString());\n        }\n        throw e;\n    }       ",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..c89eda1a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,45 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        if (e.getDateTimeFieldType() == DateTimeFieldType.year()) {\n+            // used savedFieldsCount for message below, but already used it.\n+            StringBuilder sb = new StringBuilder(128)\n+                .append(\"Cannot parse \\\"\").append(text).append(\"\\\": \")\n+                .append(\"Invalid Year of Era '\").append(e.getIllegalValue());\n+            String[] validEras = e.getLegalFieldValue().getReadablePartial().getFormatter().getEraNames();\n+            if (validEras != null && validEras.length > 0) {\n+                sb.append(\"'; \");\n+                if (validEras.length == 1) {\n+                    sb.append(\"possible values are \");\n+                } else {\n+                    sb.append(\"possible values are {\");\n+                }\n+                for (int i = 0; i < validEras.length; i++) {\n+                    if (i > 0) {\n+                        if (validEras.length > 2) {\n+                            sb.append(\", \");\n+                        } else {\n+                            sb.append(' ');\n+                        }\n+                        sb.append(i + 1 == validEras.length ? \"or \" : \"\");\n+                    }\n+                    sb.append(validEras[i]);\n+                }\n+                if (validEras.length > 1) {\n+                    sb.append('}');\n+                }\n+                sb.append(\" (these are locale-specific and may change without notice)\");\n+            } else {\n+                sb.append(\"' (valid eras unknown)\");\n+            }\n+            throw new IllegalArgumentException(sb.toString());\n+        }\n+        throw e;\n+    }       \n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}