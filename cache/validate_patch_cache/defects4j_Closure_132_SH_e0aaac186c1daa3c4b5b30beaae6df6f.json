{
    "patch": "              Node value = lhs.getLastChild().detachFromParent();\n              n.removeChild(cond);\n              Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n                                  .srcref(n);\n              Node assign = IR.assign(lhs, hookNode).srcref(n);\n              Node stmt = NodeUtil.newExpr(assign);\n              parent.replaceChild(n, stmt);\n              reportCodeChange();\n              return stmt;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..b6cc110d 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,15 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              Node value = lhs.getLastChild().detachFromParent();\n+              n.removeChild(cond);\n+              Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n+                                  .srcref(n);\n+              Node assign = IR.assign(lhs, hookNode).srcref(n);\n+              Node stmt = NodeUtil.newExpr(assign);\n+              parent.replaceChild(n, stmt);\n+              reportCodeChange();\n+              return stmt;\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}