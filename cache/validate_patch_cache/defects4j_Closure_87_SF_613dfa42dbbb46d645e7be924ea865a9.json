{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n != null && n.getType() == Token.BLOCK && n.hasOneChild()) {\n    // Special case for inline function expressions\n    if (n.getParent().getType() == Token.FUNCTION) {\n      return false;\n    }\n\n    Node expression = n.getFirstChild();\n\n    // Check if the expression is inside a conditional\n    if (NodeUtil.isWithinConditionalControlStructure(expression)) {\n      return false;\n    }\n\n    // Check if the expression is direct child of the Block\n    boolean isDirectChild = expression.getParent() == n;\n\n    // If the expression is not a direct child, it can't be folded\n    if (!isDirectChild) {\n      return false;\n    }\n\n    // Check if the expression node has side effects\n    if (!NodeUtil.mayHaveSideEffects(expression)) {\n      return false;\n    }\n\n    // Traverse up the tree and check if this Block is used as an expression\n    Node parent = n.getParent();\n    while (parent != null) {\n      int type = parent.getType();\n\n      if (NodeUtil.isStatementBlock(type)) {\n        return false;\n      }\n\n      if (type == Token.EXPR_RESULT || type == Token.CALL || type == Token.ASSIGN) {\n        return true;\n      }\n\n      // Special case for AND/OR/TERNARY Expression\n      if (NodeUtil.isConditionalExpression(parent)) {\n        if (expression == parent.getFirstChild()) {\n          if (parent.getType() == Token.QUESTION) {\n            return false;\n          }\n        } else {\n          if (!NodeUtil.mayHaveSideEffects(parent.getFirstChild()) &&\n              !NodeUtil.mayHaveSideEffects(parent.getLastChild())) {\n            return true;\n          }\n        }\n      }\n\n      parent = parent.getParent();\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..4fe1530b 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,65 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n != null && n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    // Special case for inline function expressions\n+    if (n.getParent().getType() == Token.FUNCTION) {\n+      return false;\n     }\n \n-    return false;\n+    Node expression = n.getFirstChild();\n+\n+    // Check if the expression is inside a conditional\n+    if (NodeUtil.isWithinConditionalControlStructure(expression)) {\n+      return false;\n+    }\n+\n+    // Check if the expression is direct child of the Block\n+    boolean isDirectChild = expression.getParent() == n;\n+\n+    // If the expression is not a direct child, it can't be folded\n+    if (!isDirectChild) {\n+      return false;\n+    }\n+\n+    // Check if the expression node has side effects\n+    if (!NodeUtil.mayHaveSideEffects(expression)) {\n+      return false;\n+    }\n+\n+    // Traverse up the tree and check if this Block is used as an expression\n+    Node parent = n.getParent();\n+    while (parent != null) {\n+      int type = parent.getType();\n+\n+      if (NodeUtil.isStatementBlock(type)) {\n+        return false;\n+      }\n+\n+      if (type == Token.EXPR_RESULT || type == Token.CALL || type == Token.ASSIGN) {\n+        return true;\n+      }\n+\n+      // Special case for AND/OR/TERNARY Expression\n+      if (NodeUtil.isConditionalExpression(parent)) {\n+        if (expression == parent.getFirstChild()) {\n+          if (parent.getType() == Token.QUESTION) {\n+            return false;\n+          }\n+        } else {\n+          if (!NodeUtil.mayHaveSideEffects(parent.getFirstChild()) &&\n+              !NodeUtil.mayHaveSideEffects(parent.getLastChild())) {\n+            return true;\n+          }\n+        }\n+      }\n+\n+      parent = parent.getParent();\n+    }\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}