{
    "patch": "if (left.getType() == Token.ARRAYLIT) {\n  if (left.getChildCount() == 0) {\n    if (NodeUtil.isAssignmentOp(parent)) {\n      return n;\n    } else {\n      Node undefinedNode = NodeUtil.newUndefinedNode(n);\n      parent.replaceChild(n, undefinedNode);\n      reportCodeChange();\n      return undefinedNode;\n    }\n  }\n  if (right.getType() == Token.NUMBER) {\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n    if (intIndex < 0 || intIndex >= left.getChildCount()) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n    Node elem = left.getChildAtIndex(intIndex).detachFromParent();\n    if (elem.getType() == Token.EMPTY) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    }\n    parent.replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..e1eef9d3 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,37 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+if (left.getType() == Token.ARRAYLIT) {\n+  if (left.getChildCount() == 0) {\n+    if (NodeUtil.isAssignmentOp(parent)) {\n+      return n;\n+    } else {\n+      Node undefinedNode = NodeUtil.newUndefinedNode(n);\n+      parent.replaceChild(n, undefinedNode);\n+      reportCodeChange();\n+      return undefinedNode;\n+    }\n+  }\n+  if (right.getType() == Token.NUMBER) {\n+    double index = right.getDouble();\n+    int intIndex = (int) index;\n+    if (intIndex != index) {\n+      error(INVALID_GETELEM_INDEX_ERROR, right);\n+      return n;\n+    }\n+    if (intIndex < 0 || intIndex >= left.getChildCount()) {\n+      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+      return n;\n+    }\n+    Node elem = left.getChildAtIndex(intIndex).detachFromParent();\n+    if (elem.getType() == Token.EMPTY) {\n+      elem = NodeUtil.newUndefinedNode(elem);\n+    }\n+    parent.replaceChild(n, elem);\n+    reportCodeChange();\n+    return elem;\n+  }\n+}\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}