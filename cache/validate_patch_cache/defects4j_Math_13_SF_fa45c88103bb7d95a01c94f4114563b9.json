{
    "patch": "import org.apache.commons.math3.linear.*;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealVector eigenValues = dec.getRealEigenvalues();\n\n    final double[] sqrtEigenValues = new double[eigenValues.getDimension()];\n    for (int i = 0; i < sqrtEigenValues.length; i++) {\n        sqrtEigenValues[i] = Math.sqrt(eigenValues.getEntry(i));\n    }\n\n    final ArrayRealVector sqrtEigValuesVec = new ArrayRealVector(sqrtEigenValues);\n    final RealMatrix sqrtEigenValuesMat = MatrixUtils.createRealDiagonalMatrix(sqrtEigenValues);\n\n    final RealMatrix eigenVectors = dec.getV();\n    final RealMatrix eigenVectorsInverse = eigenVectors.inverse();\n\n    return eigenVectors.multiply(sqrtEigenValuesMat).multiply(eigenVectorsInverse);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..eeaae2eab 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,23 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.*;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealVector eigenValues = dec.getRealEigenvalues();\n+\n+    final double[] sqrtEigenValues = new double[eigenValues.getDimension()];\n+    for (int i = 0; i < sqrtEigenValues.length; i++) {\n+        sqrtEigenValues[i] = Math.sqrt(eigenValues.getEntry(i));\n     }\n+\n+    final ArrayRealVector sqrtEigValuesVec = new ArrayRealVector(sqrtEigenValues);\n+    final RealMatrix sqrtEigenValuesMat = MatrixUtils.createRealDiagonalMatrix(sqrtEigenValues);\n+\n+    final RealMatrix eigenVectors = dec.getV();\n+    final RealMatrix eigenVectorsInverse = eigenVectors.inverse();\n+\n+    return eigenVectors.multiply(sqrtEigenValuesMat).multiply(eigenVectorsInverse);\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}