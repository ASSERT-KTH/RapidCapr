{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument == null) {\n        // Try to extract the actual type from the first bound of the type variable instead\n        if (bounds.length > 0) {\n            actualTypeArgument = bounds[0];\n        } else {\n            throw new IllegalStateException(\"Unable to extract actual type for type variable: \" + typeVariable.getTypeName());\n        }\n    }\n    // Register type variables based on bounds\n    for (Type bound : bounds) {\n        registerTypeVariablesOn(bound);\n        if (bound instanceof ParameterizedType) {\n            ParameterizedType boundType = (ParameterizedType) bound;\n            Type[] actualTypeArguments = boundType.getActualTypeArguments();\n            for (Type actualTypeArgumentInBound : actualTypeArguments) {\n                if (actualTypeArgumentInBound instanceof TypeVariable<?>) {\n                    TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArgumentInBound;\n                    for (Type actualTypeVariableBound : actualTypeVariable.getBounds()) {\n                        registerTypeVariablesOn(actualTypeVariableBound);\n                    }\n                } else {\n                    registerTypeVariablesOn(actualTypeArgumentInBound);\n                }\n            }\n        }\n    }\n    // Register actual type argument if found\n    registerTypeVariablesOn(actualTypeArgument);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..e55c68dc5 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,39 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument == null) {\n+        // Try to extract the actual type from the first bound of the type variable instead\n+        if (bounds.length > 0) {\n+            actualTypeArgument = bounds[0];\n+        } else {\n+            throw new IllegalStateException(\"Unable to extract actual type for type variable: \" + typeVariable.getTypeName());\n+        }\n+    }\n+    // Register type variables based on bounds\n+    for (Type bound : bounds) {\n+        registerTypeVariablesOn(bound);\n+        if (bound instanceof ParameterizedType) {\n+            ParameterizedType boundType = (ParameterizedType) bound;\n+            Type[] actualTypeArguments = boundType.getActualTypeArguments();\n+            for (Type actualTypeArgumentInBound : actualTypeArguments) {\n+                if (actualTypeArgumentInBound instanceof TypeVariable<?>) {\n+                    TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArgumentInBound;\n+                    for (Type actualTypeVariableBound : actualTypeVariable.getBounds()) {\n+                        registerTypeVariablesOn(actualTypeVariableBound);\n+                    }\n+                } else {\n+                    registerTypeVariablesOn(actualTypeArgumentInBound);\n+                }\n+            }\n+        }\n+    }\n+    // Register actual type argument if found\n+    registerTypeVariablesOn(actualTypeArgument);\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}