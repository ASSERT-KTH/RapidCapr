{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    int length = partial.size();\n\n    if (length == 1) {\n        int newValue = partial.getFieldType(0).getField(iChronology).addWrapField(values[0], valueToAdd);\n        return new int[] { newValue };\n    }\n\n    if (DateTimeUtils.isContiguous(partial)) {\n        boolean changed = false;\n        DurationField[] fields = new DurationField[length];\n\n        for (int i = 0; i < length; i++) {\n            fields[i] = partial.getFieldType(i).getField(iChronology).getDurationField();\n\n            if (i > 0 && fields[i-1].isSupported() && fields[i].isSupported()) {\n                if (values[i-1] > fields[i-1].getMaximumValue(values[i-2]) && valueToAdd > 0) {\n                    // Must be a year/month roll over\n                    int add = fields[i-1].getMaximumValue(values[i-2]) - values[i-1] + 1;\n                    values[i-1] = getFieldWrapping(partial.getFieldType(i-1), values[i-1], values[i-2], add);\n                    valueToAdd -= add;\n                    changed = true;\n                }\n                if (values[i-1] < fields[i-1].getMinimumValue(values[i-2]) && valueToAdd < 0) {\n                    // Must be a year/month roll over\n                    int add = values[i-1] - fields[i-1].getMinimumValue(values[i-2]) + 1;\n                    values[i-1] = getFieldWrapping(partial.getFieldType(i-1), values[i-1], values[i-2], -add);\n                    valueToAdd += add;\n                    changed = true;\n                }\n            }\n        }\n\n        if (changed) {\n            long instant = 0L;\n            for (int i = 0; i < length; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            return iChronology.get(partial, instant + valueToAdd);\n        }\n    }\n    return super.add(partial, fieldIndex, values, valueToAdd).getValues();\n}\n\nprivate int getFieldWrapping(DateTimeFieldType fieldType, int value, int lowerValue, int wrap) {\n    int fieldMax = fieldType.getField(iChronology).getMaximumValue();\n    int fieldMin = fieldType.getField(iChronology).getMinimumValue();\n    int diff = value - wrap - lowerValue;\n    if (diff > fieldMax) {\n        return fieldMin + (diff - fieldMax - 1) % (fieldMax - fieldMin + 1);\n    }\n    if (diff < fieldMin) {\n        return fieldMax - (fieldMin - diff - 1) % (fieldMax - fieldMin + 1);\n    }\n    return diff;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..ab5b8661 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,67 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    int length = partial.size();\n+\n+    if (length == 1) {\n+        int newValue = partial.getFieldType(0).getField(iChronology).addWrapField(values[0], valueToAdd);\n+        return new int[] { newValue };\n+    }\n+\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        boolean changed = false;\n+        DurationField[] fields = new DurationField[length];\n+\n+        for (int i = 0; i < length; i++) {\n+            fields[i] = partial.getFieldType(i).getField(iChronology).getDurationField();\n+\n+            if (i > 0 && fields[i-1].isSupported() && fields[i].isSupported()) {\n+                if (values[i-1] > fields[i-1].getMaximumValue(values[i-2]) && valueToAdd > 0) {\n+                    // Must be a year/month roll over\n+                    int add = fields[i-1].getMaximumValue(values[i-2]) - values[i-1] + 1;\n+                    values[i-1] = getFieldWrapping(partial.getFieldType(i-1), values[i-1], values[i-2], add);\n+                    valueToAdd -= add;\n+                    changed = true;\n+                }\n+                if (values[i-1] < fields[i-1].getMinimumValue(values[i-2]) && valueToAdd < 0) {\n+                    // Must be a year/month roll over\n+                    int add = values[i-1] - fields[i-1].getMinimumValue(values[i-2]) + 1;\n+                    values[i-1] = getFieldWrapping(partial.getFieldType(i-1), values[i-1], values[i-2], -add);\n+                    valueToAdd += add;\n+                    changed = true;\n+                }\n+            }\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n+\n+        if (changed) {\n             long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            for (int i = 0; i < length; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            return iChronology.get(partial, instant + valueToAdd);\n         }\n     }\n+    return super.add(partial, fieldIndex, values, valueToAdd).getValues();\n+}\n+\n+private int getFieldWrapping(DateTimeFieldType fieldType, int value, int lowerValue, int wrap) {\n+    int fieldMax = fieldType.getField(iChronology).getMaximumValue();\n+    int fieldMin = fieldType.getField(iChronology).getMinimumValue();\n+    int diff = value - wrap - lowerValue;\n+    if (diff > fieldMax) {\n+        return fieldMin + (diff - fieldMax - 1) % (fieldMax - fieldMin + 1);\n+    }\n+    if (diff < fieldMin) {\n+        return fieldMax - (fieldMin - diff - 1) % (fieldMax - fieldMin + 1);\n+    }\n+    return diff;\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}