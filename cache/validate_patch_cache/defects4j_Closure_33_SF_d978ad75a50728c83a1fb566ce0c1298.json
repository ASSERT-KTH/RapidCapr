{
    "patch": "    // Do nothing if the constraint object is not anonymous.\n    if (!constraintObj.isNominalType() && !constraintObj.isFunctionType()) {\n      return;\n    }\n\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          if (hasProperty(prop) && !getPropertyType(prop).isSubtypeOf(propType)) {\n            warnings.add(JSError.make(\n                MISSING_PROPERTY, getPropName(), prop, propType.toString()));\n          }\n          JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                  .getLeastSupertype(propType);\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..54b7d30b 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,27 +552,21 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n+    // Do nothing if the constraint object is not anonymous.\n+    if (!constraintObj.isNominalType() && !constraintObj.isFunctionType()) {\n+      return;\n+    }\n+\n     if (constraintObj.isRecordType()) {\n       for (String prop : constraintObj.getOwnPropertyNames()) {\n         JSType propType = constraintObj.getPropertyType(prop);\n         if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n+          if (hasProperty(prop) && !getPropertyType(prop).isSubtypeOf(propType)) {\n+            warnings.add(JSError.make(\n+                MISSING_PROPERTY, getPropName(), prop, propType.toString()));\n           }\n+          JSType typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+                  .getLeastSupertype(propType);\n           defineInferredProperty(prop, typeToInfer, null);\n         }\n       }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}