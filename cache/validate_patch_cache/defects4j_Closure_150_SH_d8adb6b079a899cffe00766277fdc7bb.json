{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (NodeUtil.isFunctionExpression(parent)) {\n              defineDeclaredFunction(n, parent);\n            }\n          break;\n        case Token.LP:\n          if (parent == scope.getRootNode()) {\n              handleFunctionInputs(parent);\n            }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..ce0a0164 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1451,10 +1451,14 @@ final class TypedScopeCreator implements ScopeCreator {\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n+          if (NodeUtil.isFunctionExpression(parent)) {\n+              defineDeclaredFunction(n, parent);\n+            }\n+          break;\n+        case Token.LP:\n+          if (parent == scope.getRootNode()) {\n+              handleFunctionInputs(parent);\n+            }\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}