{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    // check if matrix is square\n    if (m.getColumnDimension() != m.getRowDimension()) {\n        throw new IllegalArgumentException(\"Matrix must be square.\");\n    }\n\n    // compute Cholesky decomposition\n    CholeskyDecomposition dec = new CholeskyDecomposition(m);\n\n    // extract upper triangular matrix from decomposition\n    RealMatrix R = dec.getL().transpose();\n\n    // compute square root as R times its transpose\n    RealMatrix RTR = R.multiply(R.transpose());\n\n    // check if result is close enough to original matrix\n    double epsilon = 1e-10;\n    if (!RTR.subtract(m).isSmall(epsilon)) {\n        throw new RuntimeException(\"Computation failed.\");\n    }\n\n    return R;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..1537f299d 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,27 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    // check if matrix is square\n+    if (m.getColumnDimension() != m.getRowDimension()) {\n+        throw new IllegalArgumentException(\"Matrix must be square.\");\n     }\n+\n+    // compute Cholesky decomposition\n+    CholeskyDecomposition dec = new CholeskyDecomposition(m);\n+\n+    // extract upper triangular matrix from decomposition\n+    RealMatrix R = dec.getL().transpose();\n+\n+    // compute square root as R times its transpose\n+    RealMatrix RTR = R.multiply(R.transpose());\n+\n+    // check if result is close enough to original matrix\n+    double epsilon = 1e-10;\n+    if (!RTR.subtract(m).isSmall(epsilon)) {\n+        throw new RuntimeException(\"Computation failed.\");\n+    }\n+\n+    return R;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}