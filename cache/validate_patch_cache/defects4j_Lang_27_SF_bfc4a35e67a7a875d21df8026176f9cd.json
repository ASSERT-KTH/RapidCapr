{
    "patch": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n\n    // Normalize `str` by removing underscores and whitespace\n    str = str.replaceAll(\"[_\\\\s]+\", \"\");\n\n    if (str.startsWith(\"--\")) {\n        // Protection for poorness in java.lang.BigDecimal. It accepts this as a legal value,\n        // but it does not appear to be in specification of class. OS X Java parses it to a wrong value.\n        return null;\n    }\n\n    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n        return createInteger(str);\n    }\n\n    int decPos = str.indexOf('.');\n    int expPos = Math.max(str.indexOf('e'), str.indexOf('E'));\n\n    if (expPos > -1 && expPos < decPos) {\n        throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n\n    char lastChar = str.charAt(str.length() - 1);\n\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        // It's a number with a type suffix (`d`, `f`, `l`)\n        String typeSuffix = str.substring(str.length() - 1).toLowerCase(Locale.ROOT);\n\n        String numeric = str.substring(0, str.length() - 1);\n\n        if (typeSuffix.equals(\"l\")) {\n            if (decPos > -1 || expPos > -1) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n\n            if (numeric.charAt(0) == '-') {\n                if (numeric.length() == 1 || !isDigits(numeric.substring(1))) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n            } else {\n                if (!isDigits(numeric)) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n            }\n\n            if (numeric.length() <= 18) {\n                return createLong(numeric);\n            }\n\n            return createBigInteger(numeric);\n        }\n\n        if (typeSuffix.equals(\"d\") || typeSuffix.equals(\"f\")) {\n            Number number = null;\n\n            try {\n                number = createFloat(numeric + typeSuffix);\n            } catch (NumberFormatException ignore) {}\n\n            if (number == null) {\n                try {\n                    number = createDouble(numeric + typeSuffix);\n                } catch (NumberFormatException ignore) {}\n            }\n\n            if (number == null) {\n                try {\n                    number = createBigDecimal(numeric);\n                } catch (NumberFormatException ignore) {}\n            }\n\n            if (number != null) {\n                return number;\n            }\n        }\n\n        throw new NumberFormatException(str + \" is not a valid number.\");\n    } else {\n        // It's a number without a type suffix\n        String mant;\n        String dec;\n        String exp;\n\n        if (expPos > -1) {\n            mant = str.substring(0, expPos);\n        } else {\n            mant = str;\n        }\n\n        if (decPos > -1) {\n            if (expPos > -1) {\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n        } else {\n            dec = null;\n        }\n\n        if (expPos > -1) {\n            if (expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length());\n            } else {\n                exp = null;\n            }\n        } else {\n            exp = null;\n        }\n\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n\n        if (dec == null && exp == null) {\n            // It's an integer\n            if (mant.length() == 0 || mant.length() > 1 && mant.charAt(0) == '0') {\n                // The mantissa is empty or starts with a leading zero\n                return createInteger(mant);\n            }\n\n            if (mant.charAt(0) == '-') {\n                // It's a negative integer\n                if (mant.length() <= 18) {\n                    return createLong(mant);\n                }\n\n                return createBigInteger(mant);\n            }\n\n            // It's a positive integer\n            if (mant.length() < 19) {\n                return createInteger(mant);\n            }\n\n            if (mant.length() == 19 && mant.compareTo(\"9223372036854775807\") <= 0) {\n                return createLong(mant);\n            }\n\n            return createBigInteger(mant);\n        } else {\n            // It's a decimal number\n            if (exp == null) {\n                if (mant.charAt(0) == '-') {\n                    // It's a negative decimal number\n                    return createBigDecimal(str);\n                }\n\n                // It's a positive decimal number\n                if (dec.length() + mant.length() <= 18) {\n                    return createDouble(str);\n                }\n\n                return createBigDecimal(str);\n            } else {\n                // It's a number with exponent\n                if (mant.charAt(0) == '-') {\n                    // It's a negative number with exponent\n                    return createBigDecimal(str);\n                }\n\n                // It's a positive number with exponent\n                if (exp.charAt(0) == '+') {\n                    exp = exp.substring(1);\n                }\n\n                if (dec == null) {\n                    dec = \"0\";\n                }\n\n                int exponent = Integer.parseInt(exp);\n\n                int precision = mant.length() + dec.length();\n\n                if (exponent >= 0) {\n                    if (precision > exponent) {\n                        return createBigDecimal(str);\n                    }\n\n                    String s = mant + dec + Strings.repeat(\"0\", exponent - precision);\n\n                    if (s.length() <= 18) {\n                        return createLong(s);\n                    }\n\n                    return createBigInteger(s);\n                } else {\n                    if (dec.length() + exponent <= 18) {\n                        return createDouble(str);\n                    }\n\n                    return createBigDecimal(str);\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex fd03ab8f..622e3d06 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -449,154 +449,207 @@ public class NumberUtils {\n      * @return Number created from the string\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(String str) throws NumberFormatException {\n-        if (str == null) {\n-            return null;\n+public static Number createNumber(String str) throws NumberFormatException {\n+    if (str == null) {\n+        return null;\n+    }\n+\n+    if (StringUtils.isBlank(str)) {\n+        throw new NumberFormatException(\"A blank string is not a valid number\");\n+    }\n+\n+    // Normalize `str` by removing underscores and whitespace\n+    str = str.replaceAll(\"[_\\\\s]+\", \"\");\n+\n+    if (str.startsWith(\"--\")) {\n+        // Protection for poorness in java.lang.BigDecimal. It accepts this as a legal value,\n+        // but it does not appear to be in specification of class. OS X Java parses it to a wrong value.\n+        return null;\n+    }\n+\n+    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+        return createInteger(str);\n+    }\n+\n+    int decPos = str.indexOf('.');\n+    int expPos = Math.max(str.indexOf('e'), str.indexOf('E'));\n+\n+    if (expPos > -1 && expPos < decPos) {\n+        throw new NumberFormatException(str + \" is not a valid number.\");\n+    }\n+\n+    char lastChar = str.charAt(str.length() - 1);\n+\n+    if (!Character.isDigit(lastChar) && lastChar != '.') {\n+        // It's a number with a type suffix (`d`, `f`, `l`)\n+        String typeSuffix = str.substring(str.length() - 1).toLowerCase(Locale.ROOT);\n+\n+        String numeric = str.substring(0, str.length() - 1);\n+\n+        if (typeSuffix.equals(\"l\")) {\n+            if (decPos > -1 || expPos > -1) {\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n+            }\n+\n+            if (numeric.charAt(0) == '-') {\n+                if (numeric.length() == 1 || !isDigits(numeric.substring(1))) {\n+                    throw new NumberFormatException(str + \" is not a valid number.\");\n+                }\n+            } else {\n+                if (!isDigits(numeric)) {\n+                    throw new NumberFormatException(str + \" is not a valid number.\");\n+                }\n+            }\n+\n+            if (numeric.length() <= 18) {\n+                return createLong(numeric);\n+            }\n+\n+            return createBigInteger(numeric);\n         }\n-        if (StringUtils.isBlank(str)) {\n-            throw new NumberFormatException(\"A blank string is not a valid number\");\n-        }  \n-        if (str.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n+\n+        if (typeSuffix.equals(\"d\") || typeSuffix.equals(\"f\")) {\n+            Number number = null;\n+\n+            try {\n+                number = createFloat(numeric + typeSuffix);\n+            } catch (NumberFormatException ignore) {}\n+\n+            if (number == null) {\n+                try {\n+                    number = createDouble(numeric + typeSuffix);\n+                } catch (NumberFormatException ignore) {}\n+            }\n+\n+            if (number == null) {\n+                try {\n+                    number = createBigDecimal(numeric);\n+                } catch (NumberFormatException ignore) {}\n+            }\n+\n+            if (number != null) {\n+                return number;\n+            }\n         }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n-            return createInteger(str);\n-        }   \n-        char lastChar = str.charAt(str.length() - 1);\n+\n+        throw new NumberFormatException(str + \" is not a valid number.\");\n+    } else {\n+        // It's a number without a type suffix\n         String mant;\n         String dec;\n         String exp;\n-        int decPos = str.indexOf('.');\n-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n \n-        if (decPos > -1) {\n+        if (expPos > -1) {\n+            mant = str.substring(0, expPos);\n+        } else {\n+            mant = str;\n+        }\n \n+        if (decPos > -1) {\n             if (expPos > -1) {\n-                if (expPos < decPos) {\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n                 dec = str.substring(decPos + 1, expPos);\n             } else {\n                 dec = str.substring(decPos + 1);\n             }\n-            mant = str.substring(0, decPos);\n         } else {\n-            if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n-            } else {\n-                mant = str;\n-            }\n             dec = null;\n         }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n+\n+        if (expPos > -1) {\n+            if (expPos < str.length() - 1) {\n+                exp = str.substring(expPos + 1, str.length());\n             } else {\n                 exp = null;\n             }\n-            //Requesting a specific type..\n-            String numeric = str.substring(0, str.length() - 1);\n-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (NumberFormatException nfe) {\n-                            //Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n+        } else {\n+            exp = null;\n+        }\n \n-                    }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n-\n-                    } catch (NumberFormatException nfe) {\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (NumberFormatException nfe) {\n-                        // ignore the bad number\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (NumberFormatException e) {\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n \n+        if (dec == null && exp == null) {\n+            // It's an integer\n+            if (mant.length() == 0 || mant.length() > 1 && mant.charAt(0) == '0') {\n+                // The mantissa is empty or starts with a leading zero\n+                return createInteger(mant);\n             }\n-        } else {\n-            //User doesn't have a preference on the return type, so let's start\n-            //small and go from there...\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length());\n-            } else {\n-                exp = null;\n+\n+            if (mant.charAt(0) == '-') {\n+                // It's a negative integer\n+                if (mant.length() <= 18) {\n+                    return createLong(mant);\n+                }\n+\n+                return createBigInteger(mant);\n             }\n-            if (dec == null && exp == null) {\n-                //Must be an int,long,bigint\n-                try {\n-                    return createInteger(str);\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n+\n+            // It's a positive integer\n+            if (mant.length() < 19) {\n+                return createInteger(mant);\n+            }\n+\n+            if (mant.length() == 19 && mant.compareTo(\"9223372036854775807\") <= 0) {\n+                return createLong(mant);\n+            }\n+\n+            return createBigInteger(mant);\n+        } else {\n+            // It's a decimal number\n+            if (exp == null) {\n+                if (mant.charAt(0) == '-') {\n+                    // It's a negative decimal number\n+                    return createBigDecimal(str);\n                 }\n-                try {\n-                    return createLong(str);\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n+\n+                // It's a positive decimal number\n+                if (dec.length() + mant.length() <= 18) {\n+                    return createDouble(str);\n                 }\n-                return createBigInteger(str);\n \n+                return createBigDecimal(str);\n             } else {\n-                //Must be a float,double,BigDec\n-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-                try {\n-                    Float f = createFloat(str);\n-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                        return f;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n+                // It's a number with exponent\n+                if (mant.charAt(0) == '-') {\n+                    // It's a negative number with exponent\n+                    return createBigDecimal(str);\n                 }\n-                try {\n-                    Double d = createDouble(str);\n-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n+\n+                // It's a positive number with exponent\n+                if (exp.charAt(0) == '+') {\n+                    exp = exp.substring(1);\n                 }\n \n-                return createBigDecimal(str);\n+                if (dec == null) {\n+                    dec = \"0\";\n+                }\n+\n+                int exponent = Integer.parseInt(exp);\n+\n+                int precision = mant.length() + dec.length();\n+\n+                if (exponent >= 0) {\n+                    if (precision > exponent) {\n+                        return createBigDecimal(str);\n+                    }\n+\n+                    String s = mant + dec + Strings.repeat(\"0\", exponent - precision);\n \n+                    if (s.length() <= 18) {\n+                        return createLong(s);\n+                    }\n+\n+                    return createBigInteger(s);\n+                } else {\n+                    if (dec.length() + exponent <= 18) {\n+                        return createDouble(str);\n+                    }\n+\n+                    return createBigDecimal(str);\n+                }\n             }\n         }\n     }\n+}\n \n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}