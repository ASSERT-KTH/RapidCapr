{
    "patch": "public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h = (t1 - t0) / n;\n\n        double ta = t0;\n        double ga = g0;\n        double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n        for (int i = 0; i < n; ++i) {\n\n            tb += h;\n            interpolator.setInterpolatedTime(tb);\n            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n            // Check if we have an event\n            if (g0Positive ^ (gb >= 0.0)) {\n                // We have an event\n                boolean isStrict;\n                if (gb >= ga) {\n                    if (ga >= g0) {\n                        isStrict = true;\n                    } else {\n                        isStrict = false;\n                    }\n                } else {\n                    if (g0 >= ga) {\n                        isStrict = true;\n                    } else {\n                        isStrict = false;\n                    }\n                }\n\n                // Set increase/decrease for initial bracket construction\n                int inc = increasing ? 1 : 0;\n                int laN = increasing ? i : i - 1;\n                if (isStrict) {\n                    inc += (gb >= ga) ? 1 : 0;\n                } else {\n                    inc += (ga <= 0.0) ? 1 : 0;\n                }\n\n                // Evaluate the bracketing interval\n                double tout = tb;\n                boolean tryAgain;\n                do {\n                    // we need to make sure that we change places, so that\n                    // the event is properly bracketed\n                    ta = goBackward ? t1 : t0;\n                    tb = goBackward ? t0 : t1;\n                    double gaPrev = ga;\n                    double tMid = 0.5 * (ta + tb);\n                    interpolator.setInterpolatedTime(tMid);\n                    double gm = handler.g(tMid, interpolator.getInterpolatedState());\n                    if (g0Positive ^ (gm >= 0)) {\n                        tb = tMid;\n                        gb = gm;\n                    } else {\n                        ta = tMid;\n                        ga = gm;\n                    }\n                    boolean isBisected = false;\n                    for (int j = laN; j < i; ++j) {\n                        // Intermediate points, except for last sub-interval\n                        double tj = t0 + (interpolator.isForward() ? (j + 1) : -j - 1) * h;\n                        interpolator.setInterpolatedTime(tj);\n                        double gj = handler.g(tj, interpolator.getInterpolatedState());\n                        if (g0Positive ^ (gj >= 0)) {\n                            if ((gb >= ga)) {\n                                ta = tb;\n                                ga = gb;\n                                tb = tj;\n                                gb = gj;\n                            } else {\n                                tb = ta;\n                                gb = ga;\n                                ta = tj;\n                                ga = gj;\n                            }\n                        }\n                        if (inc > 2) {\n                            // we have tried bracketing with increasing and decreasing\n                            // brackets, try bisection even if convergence has not been reached\n                            isBisected = true;\n                            ta = Math.min(ta, tj);\n                            tb = Math.max(tb, tj);\n                            break;\n                        } else if ((inc == 2) && (ga * gb >= 0)) {\n                            // We are bracketed in the wrong direction\n                            ta = Math.min(ta, tj);\n                            tb = Math.max(tb, tj);\n                            ++inc;\n                        } else if ((inc == 1) && (ga * gb <= 0.0)) {\n                            // We have a bracket and we can try solving it\n                            ++inc;\n                        }\n                        if (inc == 3) {\n                            break;\n                        }\n                    }\n\n                    if (inc == 1) {\n                        // Event not bracketed, we try again with a new sub-step\n                        tryAgain = true;\n                    } else {\n                        // root-finding permitted on the current interval\n                        final UnivariateRealFunction f = new UnivariateRealFunction() {\n                            public double value(final double t) throws FunctionEvaluationException {\n                                try {\n                                    interpolator.setInterpolatedTime(t);\n                                    return handler.g(t, interpolator.getInterpolatedState());\n                                } catch (DerivativeException e) {\n                                    throw new FunctionEvaluationException(e, t);\n                                } catch (EventException e) {\n                                    throw new FunctionEvaluationException(e, t);\n                                }\n                            }\n                        };\n                        final BrentSolver solver = new BrentSolver();\n                        solver.setAbsoluteAccuracy(convergence);\n                        solver.setMaximalIterationCount(maxIterationCount);\n\n                        // Solve using bracketing\n                        double ts = (ga >= 0) ? ta : tb;\n                        double tp = (Math.abs(ga) < Math.abs(gb)) ? ta : tb;\n                        double root = solver.solve(f, ts, tp);\n\n                        if ((Math.abs(root - ta) < convergence) && (Math.abs(root - previousEventTime) < convergence)) {\n                            ta = tb;\n                            ga = gb;\n                            tryAgain = true;\n                        } else {\n                            pendingEventTime = root;\n                            if (pendingEvent && (Math.abs(t1 - pendingEventTime) < convergence)) {\n                                return false;\n                            }\n                            pendingEvent = true;\n                            return true;\n                        }\n                    }\n                } while (tryAgain);\n            } else {\n                ta = tb;\n                ga = gb;\n            }\n        }\n\n        // No sign change found in the interval\n        pendingEvent = false;\n        pendingEventTime = Double.NaN;\n        return false;\n\n    } catch (FunctionEvaluationException e) {\n        final Throwable cause = e.getCause();\n        if ((cause != null) && (cause instanceof DerivativeException)) {\n            throw (DerivativeException) cause;\n        } else if ((cause != null) && (cause instanceof EventException)) {\n            throw (EventException) cause;\n        }\n        throw new EventException(e);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/events/EventState.java b/src/main/java/org/apache/commons/math/ode/events/EventState.java\nindex 50060650e..15e0f0074 100644\n--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java\n@@ -164,103 +164,171 @@ public class EventState {\n      * cannot be evaluated\n      * @exception ConvergenceException if an event cannot be located\n      */\n-    public boolean evaluateStep(final StepInterpolator interpolator)\n+public boolean evaluateStep(final StepInterpolator interpolator)\n         throws DerivativeException, EventException, ConvergenceException {\n \n-        try {\n-\n-            forward = interpolator.isForward();\n-            final double t1 = interpolator.getCurrentTime();\n-            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n-            final double h  = (t1 - t0) / n;\n-\n-            double ta = t0;\n-            double ga = g0;\n-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n-            for (int i = 0; i < n; ++i) {\n-\n-                // evaluate handler value at the end of the substep\n-                tb += h;\n-                interpolator.setInterpolatedTime(tb);\n-                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n-\n-                // check events occurrence\n-                if (g0Positive ^ (gb >= 0)) {\n-                    // there is a sign change: an event is expected during this step\n-\n-                        // this is a corner case:\n-                        // - there was an event near ta,\n-                        // - there is another event between ta and tb\n-                        // - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n-                        // this implies that the real sign of ga is the same as gb, so we need to slightly\n-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain\n-                        // about bracketing\n-                            // this should never happen\n-                         \n-                    // variation direction, with respect to the integration direction\n-                    increasing = gb >= ga;\n-\n-                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n-                        public double value(final double t) throws FunctionEvaluationException {\n-                            try {\n-                                interpolator.setInterpolatedTime(t);\n-                                return handler.g(t, interpolator.getInterpolatedState());\n-                            } catch (DerivativeException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            } catch (EventException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            }\n-                        }\n-                    };\n-                    final BrentSolver solver = new BrentSolver();\n-                    solver.setAbsoluteAccuracy(convergence);\n-                    solver.setMaximalIterationCount(maxIterationCount);\n-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n-                    if ((Math.abs(root - ta) <= convergence) &&\n-                         (Math.abs(root - previousEventTime) <= convergence)) {\n-                        // we have either found nothing or found (again ?) a past event, we simply ignore it\n-                        ta = tb;\n-                        ga = gb;\n-                    } else if (Double.isNaN(previousEventTime) ||\n-                               (Math.abs(previousEventTime - root) > convergence)) {\n-                        pendingEventTime = root;\n-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n-                            // we were already waiting for this event which was\n-                            // found during a previous call for a step that was\n-                            // rejected, this step must now be accepted since it\n-                            // properly ends exactly at the event occurrence\n-                            return false;\n-                        }\n-                        // either we were not waiting for the event or it has\n-                        // moved in such a way the step cannot be accepted\n-                        pendingEvent = true;\n-                        return true;\n+    try {\n+        forward = interpolator.isForward();\n+        final double t1 = interpolator.getCurrentTime();\n+        final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n+        final double h = (t1 - t0) / n;\n+\n+        double ta = t0;\n+        double ga = g0;\n+        double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n+        for (int i = 0; i < n; ++i) {\n+\n+            tb += h;\n+            interpolator.setInterpolatedTime(tb);\n+            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n+\n+            // Check if we have an event\n+            if (g0Positive ^ (gb >= 0.0)) {\n+                // We have an event\n+                boolean isStrict;\n+                if (gb >= ga) {\n+                    if (ga >= g0) {\n+                        isStrict = true;\n+                    } else {\n+                        isStrict = false;\n                     }\n-\n                 } else {\n-                    // no sign change: there is no event for now\n-                    ta = tb;\n-                    ga = gb;\n+                    if (g0 >= ga) {\n+                        isStrict = true;\n+                    } else {\n+                        isStrict = false;\n+                    }\n                 }\n \n-            }\n+                // Set increase/decrease for initial bracket construction\n+                int inc = increasing ? 1 : 0;\n+                int laN = increasing ? i : i - 1;\n+                if (isStrict) {\n+                    inc += (gb >= ga) ? 1 : 0;\n+                } else {\n+                    inc += (ga <= 0.0) ? 1 : 0;\n+                }\n \n-            // no event during the whole step\n-            pendingEvent     = false;\n-            pendingEventTime = Double.NaN;\n-            return false;\n+                // Evaluate the bracketing interval\n+                double tout = tb;\n+                boolean tryAgain;\n+                do {\n+                    // we need to make sure that we change places, so that\n+                    // the event is properly bracketed\n+                    ta = goBackward ? t1 : t0;\n+                    tb = goBackward ? t0 : t1;\n+                    double gaPrev = ga;\n+                    double tMid = 0.5 * (ta + tb);\n+                    interpolator.setInterpolatedTime(tMid);\n+                    double gm = handler.g(tMid, interpolator.getInterpolatedState());\n+                    if (g0Positive ^ (gm >= 0)) {\n+                        tb = tMid;\n+                        gb = gm;\n+                    } else {\n+                        ta = tMid;\n+                        ga = gm;\n+                    }\n+                    boolean isBisected = false;\n+                    for (int j = laN; j < i; ++j) {\n+                        // Intermediate points, except for last sub-interval\n+                        double tj = t0 + (interpolator.isForward() ? (j + 1) : -j - 1) * h;\n+                        interpolator.setInterpolatedTime(tj);\n+                        double gj = handler.g(tj, interpolator.getInterpolatedState());\n+                        if (g0Positive ^ (gj >= 0)) {\n+                            if ((gb >= ga)) {\n+                                ta = tb;\n+                                ga = gb;\n+                                tb = tj;\n+                                gb = gj;\n+                            } else {\n+                                tb = ta;\n+                                gb = ga;\n+                                ta = tj;\n+                                ga = gj;\n+                            }\n+                        }\n+                        if (inc > 2) {\n+                            // we have tried bracketing with increasing and decreasing\n+                            // brackets, try bisection even if convergence has not been reached\n+                            isBisected = true;\n+                            ta = Math.min(ta, tj);\n+                            tb = Math.max(tb, tj);\n+                            break;\n+                        } else if ((inc == 2) && (ga * gb >= 0)) {\n+                            // We are bracketed in the wrong direction\n+                            ta = Math.min(ta, tj);\n+                            tb = Math.max(tb, tj);\n+                            ++inc;\n+                        } else if ((inc == 1) && (ga * gb <= 0.0)) {\n+                            // We have a bracket and we can try solving it\n+                            ++inc;\n+                        }\n+                        if (inc == 3) {\n+                            break;\n+                        }\n+                    }\n \n-        } catch (FunctionEvaluationException e) {\n-            final Throwable cause = e.getCause();\n-            if ((cause != null) && (cause instanceof DerivativeException)) {\n-                throw (DerivativeException) cause;\n-            } else if ((cause != null) && (cause instanceof EventException)) {\n-                throw (EventException) cause;\n+                    if (inc == 1) {\n+                        // Event not bracketed, we try again with a new sub-step\n+                        tryAgain = true;\n+                    } else {\n+                        // root-finding permitted on the current interval\n+                        final UnivariateRealFunction f = new UnivariateRealFunction() {\n+                            public double value(final double t) throws FunctionEvaluationException {\n+                                try {\n+                                    interpolator.setInterpolatedTime(t);\n+                                    return handler.g(t, interpolator.getInterpolatedState());\n+                                } catch (DerivativeException e) {\n+                                    throw new FunctionEvaluationException(e, t);\n+                                } catch (EventException e) {\n+                                    throw new FunctionEvaluationException(e, t);\n+                                }\n+                            }\n+                        };\n+                        final BrentSolver solver = new BrentSolver();\n+                        solver.setAbsoluteAccuracy(convergence);\n+                        solver.setMaximalIterationCount(maxIterationCount);\n+\n+                        // Solve using bracketing\n+                        double ts = (ga >= 0) ? ta : tb;\n+                        double tp = (Math.abs(ga) < Math.abs(gb)) ? ta : tb;\n+                        double root = solver.solve(f, ts, tp);\n+\n+                        if ((Math.abs(root - ta) < convergence) && (Math.abs(root - previousEventTime) < convergence)) {\n+                            ta = tb;\n+                            ga = gb;\n+                            tryAgain = true;\n+                        } else {\n+                            pendingEventTime = root;\n+                            if (pendingEvent && (Math.abs(t1 - pendingEventTime) < convergence)) {\n+                                return false;\n+                            }\n+                            pendingEvent = true;\n+                            return true;\n+                        }\n+                    }\n+                } while (tryAgain);\n+            } else {\n+                ta = tb;\n+                ga = gb;\n             }\n-            throw new EventException(e);\n         }\n \n+        // No sign change found in the interval\n+        pendingEvent = false;\n+        pendingEventTime = Double.NaN;\n+        return false;\n+\n+    } catch (FunctionEvaluationException e) {\n+        final Throwable cause = e.getCause();\n+        if ((cause != null) && (cause instanceof DerivativeException)) {\n+            throw (DerivativeException) cause;\n+        } else if ((cause != null) && (cause instanceof EventException)) {\n+            throw (EventException) cause;\n+        }\n+        throw new EventException(e);\n     }\n+}\n \n     /** Get the occurrence time of the event triggered in the current\n      * step.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}