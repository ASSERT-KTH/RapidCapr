{
    "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) return;\n\n    switch (n.getToken()) {\n        case FUNCTION:\n            if (parent.getToken() == Token.EXPR_RESULT ||\n                    parent.getToken() == Token.ASSIGN ||\n                    parent.getToken() == Token.VAR) {\n                defineDeclaredFunction(n, parent);\n            }\n            break;\n        case CATCH:\n            defineCatch(n, parent);\n            break;\n        case VAR:\n            defineVar(n, parent);\n            break;\n        case CALL:\n            if (parent.getToken() == Token.EXPR_RESULT) {\n                Node callTarget = n.getFirstChild();\n                if (callTarget.getToken() == Token.GETPROP && callTarget.getLastChild().getString().equals(\"extend\")) {\n                    // goog.inherits(goog.ui.ColorMenuButtonRenderer, goog.ui.MenuButtonRenderer);\n                    Node superClassNameNode = callTarget.getNext();\n                    String superClassName = \"\";\n                    if (superClassNameNode.getToken() == Token.GETPROP) {\n                        superClassName = superClassNameNode.getFirstChild().getQualifiedName() + \".\" + superClassNameNode.getLastChild().getString();\n                    } else {\n                        superClassName = superClassNameNode.getString();\n                    }\n                    String subClassName = callTarget.getFirstChild().getLastChild().getString();\n                    defineSubclass(subClassName, superClassName, n);\n                    // We return immediately because we don't want to attachLiteralTypes to this call\n                    return;\n                }\n                handleFunctionInputs(n);\n            }\n            break;\n        default:\n            attachLiteralTypes(n);\n            break;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..d5da28fe 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,48 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+@Override public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) return;\n+\n+    switch (n.getToken()) {\n+        case FUNCTION:\n+            if (parent.getToken() == Token.EXPR_RESULT ||\n+                    parent.getToken() == Token.ASSIGN ||\n+                    parent.getToken() == Token.VAR) {\n+                defineDeclaredFunction(n, parent);\n+            }\n+            break;\n+        case CATCH:\n+            defineCatch(n, parent);\n+            break;\n+        case VAR:\n+            defineVar(n, parent);\n+            break;\n+        case CALL:\n+            if (parent.getToken() == Token.EXPR_RESULT) {\n+                Node callTarget = n.getFirstChild();\n+                if (callTarget.getToken() == Token.GETPROP && callTarget.getLastChild().getString().equals(\"extend\")) {\n+                    // goog.inherits(goog.ui.ColorMenuButtonRenderer, goog.ui.MenuButtonRenderer);\n+                    Node superClassNameNode = callTarget.getNext();\n+                    String superClassName = \"\";\n+                    if (superClassNameNode.getToken() == Token.GETPROP) {\n+                        superClassName = superClassNameNode.getFirstChild().getQualifiedName() + \".\" + superClassNameNode.getLastChild().getString();\n+                    } else {\n+                        superClassName = superClassNameNode.getString();\n+                    }\n+                    String subClassName = callTarget.getFirstChild().getLastChild().getString();\n+                    defineSubclass(subClassName, superClassName, n);\n+                    // We return immediately because we don't want to attachLiteralTypes to this call\n+                    return;\n+                }\n+                handleFunctionInputs(n);\n+            }\n+            break;\n+        default:\n+            attachLiteralTypes(n);\n+            break;\n     }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}