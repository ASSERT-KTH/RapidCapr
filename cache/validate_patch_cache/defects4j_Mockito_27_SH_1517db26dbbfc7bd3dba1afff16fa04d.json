{
    "patch": "\tprivate MockHandler<T> getMockHandler(T mock) {\n\t\tif (!(mock instanceof Factory)) {\n\t\t\tthrow new MockitoException(\"Class \" + mock.getClass().getSimpleName()\n\t\t\t\t\t+ \" is not a Mockito mock\");\n\t\t}\n\t\ttry {\n\t\t\treturn (MockHandler<T>) Deencapsulation.getField(mock, \"handler\");\n\t\t} catch (IllegalArgumentException e) {\n\t\t\t// This might happen when the mock is a Proxy and not a Mockito mock\n\t\t\tthrow new MockitoException(\"Class \" + mock.getClass().getSimpleName()\n\t\t\t\t\t+ \" is not a Mockito mock\");\n\t\t}\n\t}\n\n\tpublic <T> void resetMock(T mock) {\n\t\tMockHandler<T> oldMockHandler = getMockHandler(mock);\n\t\tMockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n\t\tMethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler,\n\t\t\t\t(MockSettingsImpl) org.mockito.Mockito.withSettings()\n\t\t\t\t\t\t.defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\t\t((Factory) mock).setCallback(0, newFilter);\n\t}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..b65ede3fe 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,31 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\tprivate MockHandler<T> getMockHandler(T mock) {\n+\t\tif (!(mock instanceof Factory)) {\n+\t\t\tthrow new MockitoException(\"Class \" + mock.getClass().getSimpleName()\n+\t\t\t\t\t+ \" is not a Mockito mock\");\n+\t\t}\n+\t\ttry {\n+\t\t\treturn (MockHandler<T>) Deencapsulation.getField(mock, \"handler\");\n+\t\t} catch (IllegalArgumentException e) {\n+\t\t\t// This might happen when the mock is a Proxy and not a Mockito mock\n+\t\t\tthrow new MockitoException(\"Class \" + mock.getClass().getSimpleName()\n+\t\t\t\t\t+ \" is not a Mockito mock\");\n+\t\t}\n+\t}\n+\n+\tpublic <T> void resetMock(T mock) {\n+\t\tMockHandler<T> oldMockHandler = getMockHandler(mock);\n+\t\tMockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+\t\tMethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler,\n+\t\t\t\t(MockSettingsImpl) org.mockito.Mockito.withSettings()\n+\t\t\t\t\t\t.defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\t\t((Factory) mock).setCallback(0, newFilter);\n+\t}\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}