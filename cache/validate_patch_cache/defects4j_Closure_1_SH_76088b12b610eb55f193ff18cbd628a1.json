{
    "patch": "    boolean isGetOrSet = NodeUtil.isGetOrSetKey(fnScope.getRootNode().getParent());\n    Node argList = NodeUtil.getFunctionParameters(fnScope.getRootNode()); // replace getFunctionArgList\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(fnScope.getRootNode());\n    if (!modifyCallers && !isGetOrSet) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportChangeToEnclosingScope(lastArg);\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }   ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..dfe426dd 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,25 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    boolean isGetOrSet = NodeUtil.isGetOrSetKey(fnScope.getRootNode().getParent());\n+    Node argList = NodeUtil.getFunctionParameters(fnScope.getRootNode()); // replace getFunctionArgList\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(fnScope.getRootNode());\n+    if (!modifyCallers && !isGetOrSet) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportChangeToEnclosingScope(lastArg);\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }   \n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}