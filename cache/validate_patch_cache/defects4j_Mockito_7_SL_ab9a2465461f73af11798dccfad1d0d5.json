{
    "patch": "Type[] bounds = typeVariable.getBounds();\nType actualType = null;\n\nfor (Type bound : bounds) {\n    if (bound instanceof ParameterizedType) {\n        actualType = getActualTypeArgumentForWithTypeVariable(typeVariable, (ParameterizedType) bound);\n        if (actualType != null) {\n            registerTypeVariablesOn(actualType);\n            return;\n        }\n    } else if (bound instanceof TypeVariable) {\n        actualType = getActualTypeArgumentForWithTypeVariable(typeVariable, (TypeVariable<?>) bound);\n        if (actualType != null) {\n            registerTypeVariablesOn(actualType);\n            return;\n        }\n    } else if (!(bound instanceof WildcardType) && !(bound instanceof TypeVariable) && !bound.equals(Object.class)) {\n        registerTypeVariablesOn(bound);\n        return;\n    }\n}\n\nif (actualType != null) {\n    registerTypeVariablesOn(actualType);\n} else {\n    throw new RuntimeException(\"Unable to extract actual type for type variable: \" + typeVariable.getTypeName());\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..b5041cd1e 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,38 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type[] bounds = typeVariable.getBounds();\n+Type actualType = null;\n+\n+for (Type bound : bounds) {\n+    if (bound instanceof ParameterizedType) {\n+        actualType = getActualTypeArgumentForWithTypeVariable(typeVariable, (ParameterizedType) bound);\n+        if (actualType != null) {\n+            registerTypeVariablesOn(actualType);\n+            return;\n+        }\n+    } else if (bound instanceof TypeVariable) {\n+        actualType = getActualTypeArgumentForWithTypeVariable(typeVariable, (TypeVariable<?>) bound);\n+        if (actualType != null) {\n+            registerTypeVariablesOn(actualType);\n+            return;\n+        }\n+    } else if (!(bound instanceof WildcardType) && !(bound instanceof TypeVariable) && !bound.equals(Object.class)) {\n+        registerTypeVariablesOn(bound);\n+        return;\n+    }\n+}\n+\n+if (actualType != null) {\n+    registerTypeVariablesOn(actualType);\n+} else {\n+    throw new RuntimeException(\"Unable to extract actual type for type variable: \" + typeVariable.getTypeName());\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}