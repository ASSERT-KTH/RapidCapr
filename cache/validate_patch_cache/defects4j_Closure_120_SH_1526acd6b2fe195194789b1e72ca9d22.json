{
    "patch": "          for (Reference r : referenceSet.getReferences()) {\n            if (r != ref && r.isLvalue()) {\n              for (BasicBlock parent = r.getBasicBlock().getParent();\n                   parent != null && parent != block;\n                   parent = parent.getParent()) {\n                if (parent.isLoop) {\n                  return false;\n                }\n              }\n            }\n          }\n          return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..828330db 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,18 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          for (Reference r : referenceSet.getReferences()) {\n+            if (r != ref && r.isLvalue()) {\n+              for (BasicBlock parent = r.getBasicBlock().getParent();\n+                   parent != null && parent != block;\n+                   parent = parent.getParent()) {\n+                if (parent.isLoop) {\n+                  return false;\n+                }\n+              }\n+            }\n+          }\n+          return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}