{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    if (x == Double.POSITIVE_INFINITY) {\n        return 1.0;\n    } else if (x == Double.NEGATIVE_INFINITY || Double.isNaN(x)) {\n        return 0.0;\n    }\n\n    double dev = x - mean;\n    if (dev == 0.0) {\n        return 0.5;\n    } else if (dev < 0.0) {\n        dev = -dev;\n    }\n\n    double ret = 0.0;\n    double xden = standardDeviation * FastMath.sqrt(2.0);\n    if (dev < xden * FastMath.sqrt(2.0)) {\n        ret = 0.5 - 0.5 * Erf.erf(dev / xden);\n    } else {\n        ret = 0.5 * Erf.erfc(dev / (xden * 1.4142135623730951));\n    }\n\n    return ret;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 0e124d852..596ed4d34 100644\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -121,22 +121,31 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * @return CDF evaluated at {@code x}.\n      * @throws MathException if the algorithm fails to converge\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-        final double dev = x - mean;\n-        try {\n-        return 0.5 * (1.0 + Erf.erf((dev) /\n-                    (standardDeviation * FastMath.sqrt(2.0))));\n-        } catch (MaxIterationsExceededException ex) {\n-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n-                return 0;\n-            } else if (x > (mean + 20 * standardDeviation)) {\n-                return 1;\n-            } else {\n-                throw ex;\n-            }\n-        }\n+public double cumulativeProbability(double x) throws MathException {\n+    if (x == Double.POSITIVE_INFINITY) {\n+        return 1.0;\n+    } else if (x == Double.NEGATIVE_INFINITY || Double.isNaN(x)) {\n+        return 0.0;\n+    }\n+\n+    double dev = x - mean;\n+    if (dev == 0.0) {\n+        return 0.5;\n+    } else if (dev < 0.0) {\n+        dev = -dev;\n     }\n \n+    double ret = 0.0;\n+    double xden = standardDeviation * FastMath.sqrt(2.0);\n+    if (dev < xden * FastMath.sqrt(2.0)) {\n+        ret = 0.5 - 0.5 * Erf.erf(dev / xden);\n+    } else {\n+        ret = 0.5 * Erf.erfc(dev / (xden * 1.4142135623730951));\n+    }\n+\n+    return ret;\n+}\n+\n     /**\n      * Return the absolute accuracy setting of the solver used to estimate\n      * inverse cumulative probabilities.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}