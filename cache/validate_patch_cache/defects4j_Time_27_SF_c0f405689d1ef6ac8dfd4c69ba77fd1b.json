{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    if (elementPairs.isEmpty()) {\n        return new PeriodFormatter(null, null);\n    }\n\n    List<Object> affixes = new ArrayList<>();\n    List<Separator> separators = new ArrayList<>();\n\n    for (Object object : elementPairs) {\n        if (object instanceof Separator) {\n            separators.add((Separator) object);\n        } else if (object instanceof PeriodFieldAffix) {\n            affixes.add(object);\n        } else {\n            throw new IllegalStateException(\"Unrecognized element: \" + object);\n        }\n    }\n\n    if (separators.isEmpty()) {\n        Object[] comp = createComposite(affixes);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        }\n        if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        }\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n\n    if (separators.size() != 1) {\n        throw new IllegalStateException(\"Multiple separators between elements found\");\n    }\n\n    int separatorIndex = elementPairs.indexOf(separators.get(0));\n\n    if (separatorIndex == 0 || separatorIndex == elementPairs.size() - 1) {\n        throw new IllegalStateException(\"No separator between elements found\");\n    }\n\n    List<Object> leftPairs = elementPairs.subList(0, separatorIndex);\n    List<Object> rightPairs = elementPairs.subList(separatorIndex + 1, elementPairs.size());\n\n    Object[] leftComp = createComposite(leftPairs);\n    Object[] rightComp = createComposite(rightPairs);\n\n    PeriodPrinter printer = notPrinter ? null :\n        separators.get(0).finish((PeriodPrinter) leftComp[0], (PeriodParser) rightComp[1]);\n    PeriodParser parser = notParser ? null :\n        separators.get(0).finish((PeriodPrinter) rightComp[0], (PeriodParser) leftComp[1]);\n\n    return new PeriodFormatter(printer, parser);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..055ff470 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,63 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    if (elementPairs.isEmpty()) {\n+        return new PeriodFormatter(null, null);\n+    }\n+\n+    List<Object> affixes = new ArrayList<>();\n+    List<Separator> separators = new ArrayList<>();\n+\n+    for (Object object : elementPairs) {\n+        if (object instanceof Separator) {\n+            separators.add((Separator) object);\n+        } else if (object instanceof PeriodFieldAffix) {\n+            affixes.add(object);\n+        } else {\n+            throw new IllegalStateException(\"Unrecognized element: \" + object);\n+        }\n+    }\n+\n+    if (separators.isEmpty()) {\n+        Object[] comp = createComposite(affixes);\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n+        }\n+        if (notParser) {\n             return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n     }\n \n+    if (separators.size() != 1) {\n+        throw new IllegalStateException(\"Multiple separators between elements found\");\n+    }\n+\n+    int separatorIndex = elementPairs.indexOf(separators.get(0));\n+\n+    if (separatorIndex == 0 || separatorIndex == elementPairs.size() - 1) {\n+        throw new IllegalStateException(\"No separator between elements found\");\n+    }\n+\n+    List<Object> leftPairs = elementPairs.subList(0, separatorIndex);\n+    List<Object> rightPairs = elementPairs.subList(separatorIndex + 1, elementPairs.size());\n+\n+    Object[] leftComp = createComposite(leftPairs);\n+    Object[] rightComp = createComposite(rightPairs);\n+\n+    PeriodPrinter printer = notPrinter ? null :\n+        separators.get(0).finish((PeriodPrinter) leftComp[0], (PeriodParser) rightComp[1]);\n+    PeriodParser parser = notParser ? null :\n+        separators.get(0).finish((PeriodPrinter) rightComp[0], (PeriodParser) leftComp[1]);\n+\n+    return new PeriodFormatter(printer, parser);\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}