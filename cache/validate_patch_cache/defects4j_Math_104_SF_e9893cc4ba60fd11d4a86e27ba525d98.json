{
    "patch": "public static double regularizedGamma(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (a == 0.0) {\n        return 1.0;\n    }\n    if (a >= 1.0 && x > 1.0) {\n        return regularizedGamma(a - 1.0, x - 1.0) + (1.0 - Math.pow(x, a) * Math.exp(-x)) / a;\n    }\n    double sum = 1.0 / a;\n    double term = sum;\n    for (int n = 1; n <= 10000000; n++) {\n        term *= x / (a + n);\n        sum += term;\n        if (Math.abs(term / sum) < 10e-15) {\n            return sum * Math.exp(-x + a * Math.log(x) - LogGamma.logGamma(a));\n        }\n    }\n    return Double.NaN;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..4980ba1ed 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,30 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (a == 0.0) {\n+        return 1.0;\n+    }\n+    if (a >= 1.0 && x > 1.0) {\n+        return regularizedGamma(a - 1.0, x - 1.0) + (1.0 - Math.pow(x, a) * Math.exp(-x)) / a;\n+    }\n+    double sum = 1.0 / a;\n+    double term = sum;\n+    for (int n = 1; n <= 10000000; n++) {\n+        term *= x / (a + n);\n+        sum += term;\n+        if (Math.abs(term / sum) < 10e-15) {\n+            return sum * Math.exp(-x + a * Math.log(x) - LogGamma.logGamma(a));\n+        }\n+    }\n+    return Double.NaN;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}