{
    "patch": "public double getTypedPercent(JSONArray jsonArray) {\n    int count = 0;\n    int typedCount = 0;\n    for (int i = 0; i < jsonArray.length(); i++) {\n        if (jsonArray.optJSONObject(i) != null) {\n            count++;\n            if (jsonArray.optJSONObject(i).optString(\"type\", \"\").length() > 0) {\n                typedCount++;\n            }\n        }\n    }\n    if (count == 0) {\n        return 0;\n    }\n    return typedCount * 100.0 / count;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..8e5a57b0 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(JSONArray jsonArray) {\n+    int count = 0;\n+    int typedCount = 0;\n+    for (int i = 0; i < jsonArray.length(); i++) {\n+        if (jsonArray.optJSONObject(i) != null) {\n+            count++;\n+            if (jsonArray.optJSONObject(i).optString(\"type\", \"\").length() > 0) {\n+                typedCount++;\n+            }\n+        }\n+    }\n+    if (count == 0) {\n+        return 0;\n+    }\n+    return typedCount * 100.0 / count;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}