{
    "patch": "if (block.isFunction || (block.isFunctionBlock() && !block.getParent().isModuleScope())) {\n    // The assignment is inside a function that is not in the global scope.\n    // The variable may be reassigned in a subsequent invocation.\n    return false;\n} else if (block.isLoop) {\n    // The block has a loop statement; any change to this variable might\n    // be repeated in subsequent iterations.\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..e3a27097 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,15 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (block.isFunction || (block.isFunctionBlock() && !block.getParent().isModuleScope())) {\n+    // The assignment is inside a function that is not in the global scope.\n+    // The variable may be reassigned in a subsequent invocation.\n+    return false;\n+} else if (block.isLoop) {\n+    // The block has a loop statement; any change to this variable might\n+    // be repeated in subsequent iterations.\n+    return false;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}