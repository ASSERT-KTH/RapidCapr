{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathUtils;\nimport org.apache.commons.math3.util.Precision;\nimport org.apache.commons.math3.stat.inference.TestUtils;\n\npublic class GammaTest {\n\n  private static double regularizedGamma(double a, double x, double epsilon, int maxIterations){\n    if (Double.isNaN(a) || Double.isNaN(x)) {\n        return Double.NaN;\n    }\n    // Check a and x equality to zero with a small margin of error for numerical stability\n    if (Precision.equalsWithRelativeTolerance(a, 0.0, epsilon) && Precision.equalsWithRelativeTolerance(x, 0.0, epsilon)) {\n        return Double.NaN;\n    }\n    // Special cases.\n    if (Precision.equalsWithRelativeTolerance(x, 0.0, epsilon)) {\n        return 0.0;\n    }\n    if (Precision.equalsWithRelativeTolerance(a, 0.0, epsilon) || x == Double.POSITIVE_INFINITY) {\n        return 1.0;\n    }\n\n    // Series representation gamm Q\n    double k = 0;\n    double t = FastMath.pow(x, a) * FastMath.exp(-x) / Gamma.gamma(a + 1);\n    double s = t;\n    while ((Math.abs(t) / s) > epsilon && k < maxIterations && s < Double.POSITIVE_INFINITY) {\n        k++;\n        t *= x / (a + k);\n        s += t;\n    }\n    if (k >= maxIterations) {\n        throw new ArithmeticException(\"Maximal number of iterations reached\");\n    }\n    return s;\n  }\n\n  private static double regularizedGamma(double a, double x){\n        return regularizedGamma(a, x, Math.ulp(1d), 1000);\n  }\n\n  public static void main(String[] args){\n      double actualP = regularizedGamma(1.0, 1.0);\n      double expected = 0.632120558828558;\n      TestUtils.assertEquals(expected, actualP, 10e-15);\n  }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..b94b6077a 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,55 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.util.MathUtils;\n+import org.apache.commons.math3.util.Precision;\n+import org.apache.commons.math3.stat.inference.TestUtils;\n+\n+public class GammaTest {\n+\n+  private static double regularizedGamma(double a, double x, double epsilon, int maxIterations){\n+    if (Double.isNaN(a) || Double.isNaN(x)) {\n+        return Double.NaN;\n+    }\n+    // Check a and x equality to zero with a small margin of error for numerical stability\n+    if (Precision.equalsWithRelativeTolerance(a, 0.0, epsilon) && Precision.equalsWithRelativeTolerance(x, 0.0, epsilon)) {\n+        return Double.NaN;\n+    }\n+    // Special cases.\n+    if (Precision.equalsWithRelativeTolerance(x, 0.0, epsilon)) {\n+        return 0.0;\n+    }\n+    if (Precision.equalsWithRelativeTolerance(a, 0.0, epsilon) || x == Double.POSITIVE_INFINITY) {\n+        return 1.0;\n+    }\n+\n+    // Series representation gamm Q\n+    double k = 0;\n+    double t = FastMath.pow(x, a) * FastMath.exp(-x) / Gamma.gamma(a + 1);\n+    double s = t;\n+    while ((Math.abs(t) / s) > epsilon && k < maxIterations && s < Double.POSITIVE_INFINITY) {\n+        k++;\n+        t *= x / (a + k);\n+        s += t;\n+    }\n+    if (k >= maxIterations) {\n+        throw new ArithmeticException(\"Maximal number of iterations reached\");\n+    }\n+    return s;\n+  }\n+\n+  private static double regularizedGamma(double a, double x){\n+        return regularizedGamma(a, x, Math.ulp(1d), 1000);\n+  }\n+\n+  public static void main(String[] args){\n+      double actualP = regularizedGamma(1.0, 1.0);\n+      double expected = 0.632120558828558;\n+      TestUtils.assertEquals(expected, actualP, 10e-15);\n+  }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}