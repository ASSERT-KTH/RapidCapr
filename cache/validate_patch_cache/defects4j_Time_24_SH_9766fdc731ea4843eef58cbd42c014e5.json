{
    "patch": "for (int i = 0; i < count; i++) {\n    try {\n        millis = savedFields[i].set(millis, resetFields);\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n        }\n        throw e;\n    }\n    if (i == 0) {\n        DateTimeFieldType fieldType = savedFields[i].iField.getType();\n        Object fieldValue = savedFields[i].iField.getField(iChrono).get(millis);\n        if ((fieldType == DateTimeFieldType.monthOfYear() && (Integer) fieldValue == -1)\n                || (fieldType == DateTimeFieldType.year() && (Integer) fieldValue < -292275054)) {\n            throw new IllegalArgumentException(\"The parsed date is before the supported date range\");\n        }\n    }\n    if (millis < iMillis) {\n        throw new IllegalArgumentException(\"The parsed date is before the supported date range\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..2f8a6bbe 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,27 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+for (int i = 0; i < count; i++) {\n+    try {\n+        millis = savedFields[i].set(millis, resetFields);\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+        }\n+        throw e;\n+    }\n+    if (i == 0) {\n+        DateTimeFieldType fieldType = savedFields[i].iField.getType();\n+        Object fieldValue = savedFields[i].iField.getField(iChrono).get(millis);\n+        if ((fieldType == DateTimeFieldType.monthOfYear() && (Integer) fieldValue == -1)\n+                || (fieldType == DateTimeFieldType.year() && (Integer) fieldValue < -292275054)) {\n+            throw new IllegalArgumentException(\"The parsed date is before the supported date range\");\n+        }\n+    }\n+    if (millis < iMillis) {\n+        throw new IllegalArgumentException(\"The parsed date is before the supported date range\");\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}