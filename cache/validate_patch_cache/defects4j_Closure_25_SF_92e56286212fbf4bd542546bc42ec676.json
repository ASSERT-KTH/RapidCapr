{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  JSType constructorType = constructor.getJSType().restrictByNotNullOrUndefined();\n  JSType type = null;\n  if (constructorType.isFunctionType()) {\n    FunctionType ct = constructorType.toMaybeFunctionType();\n    if (ct != null && ct.isConstructor()) {\n      type = ct.getInstanceType();\n    }\n  } else if (constructorType.isEnumType()) {\n    type = constructorType;\n  } else {\n    if (constructor.isCall() && !constructor.isNew()) {\n      JSType resultType = null;\n      if (constructorType.isUnknownType()) {\n        // If the function type is unknown, set the result type to unknown as well\n        resultType = getNativeType(UNKNOWN_TYPE);\n      } else {\n        // Retrieve the return type of the called function\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct != null) {\n          resultType = ct.getReturnType();\n        }\n      }\n      // If the result type is not null, use it as the type for the new node\n      // Otherwise, default to the unknown type\n      type = resultType != null ? resultType : getNativeType(UNKNOWN_TYPE);\n    } else {\n      // If the constructor type is not a function or an enum type, default to unknown\n      type = getNativeType(UNKNOWN_TYPE);\n    }\n  }\n  n.setJSType(type);\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..cb864e18 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,44 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructor = n.getFirstChild();\n+  JSType constructorType = constructor.getJSType().restrictByNotNullOrUndefined();\n+  JSType type = null;\n+  if (constructorType.isFunctionType()) {\n+    FunctionType ct = constructorType.toMaybeFunctionType();\n+    if (ct != null && ct.isConstructor()) {\n+      type = ct.getInstanceType();\n+    }\n+  } else if (constructorType.isEnumType()) {\n+    type = constructorType;\n+  } else {\n+    if (constructor.isCall() && !constructor.isNew()) {\n+      JSType resultType = null;\n       if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n+        // If the function type is unknown, set the result type to unknown as well\n+        resultType = getNativeType(UNKNOWN_TYPE);\n       } else {\n+        // Retrieve the return type of the called function\n         FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+        if (ct != null) {\n+          resultType = ct.getReturnType();\n         }\n       }\n+      // If the result type is not null, use it as the type for the new node\n+      // Otherwise, default to the unknown type\n+      type = resultType != null ? resultType : getNativeType(UNKNOWN_TYPE);\n+    } else {\n+      // If the constructor type is not a function or an enum type, default to unknown\n+      type = getNativeType(UNKNOWN_TYPE);\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n-    }\n-    return scope;\n   }\n+  n.setJSType(type);\n+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+    scope = traverse(arg, scope);\n+  }\n+  return scope;\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}