{
    "patch": "        boolean currentAdded = false;\n        boolean nextAdded = false;\n        if (currentStrategy != null) {\n            currentAdded = currentStrategy.addRegex(this, regex);\n            if (currentAdded) {\n                collector.add(currentStrategy);\n            }\n        } else {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n        if (nextStrategy != null) {\n            nextAdded = nextStrategy.addRegex(this, regex);\n        }\n        while (nextStrategy != null && patternMatcher.find()) {\n            currentStrategy = nextStrategy;\n            currentStrategy.addRegex(this, regex);\n            collector.add(currentStrategy);\n            currentFormatField = patternMatcher.group();\n            nextStrategy = getStrategy(currentFormatField);\n        }\n        if (nextAdded && !currentAdded) {\n            collector.add(nextStrategy);\n        }\n        currentFormatField = null;\n        if (collector.isEmpty()) {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n        strategies = collector.toArray(new Strategy[0]);\n        parsePattern = Pattern.compile(regex.toString());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..e7fc2e72 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,35 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+        boolean currentAdded = false;\n+        boolean nextAdded = false;\n+        if (currentStrategy != null) {\n+            currentAdded = currentStrategy.addRegex(this, regex);\n+            if (currentAdded) {\n+                collector.add(currentStrategy);\n+            }\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid pattern\");\n+        }\n+        if (nextStrategy != null) {\n+            nextAdded = nextStrategy.addRegex(this, regex);\n+        }\n+        while (nextStrategy != null && patternMatcher.find()) {\n+            currentStrategy = nextStrategy;\n+            currentStrategy.addRegex(this, regex);\n+            collector.add(currentStrategy);\n+            currentFormatField = patternMatcher.group();\n+            nextStrategy = getStrategy(currentFormatField);\n+        }\n+        if (nextAdded && !currentAdded) {\n+            collector.add(nextStrategy);\n+        }\n+        currentFormatField = null;\n+        if (collector.isEmpty()) {\n+            throw new IllegalArgumentException(\"Invalid pattern\");\n+        }\n+        strategies = collector.toArray(new Strategy[0]);\n+        parsePattern = Pattern.compile(regex.toString());\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}