{
    "patch": "if (start < 0) {\n    throw new IllegalArgumentException(\"Requires start >= 0.\");\n}\nif (end < start) {\n    throw new IllegalArgumentException(\"Requires start <= end.\");\n}\nint size = getItemCount();\nif (start > size - 1) {\n    throw new IllegalArgumentException(\"Dataset start is out of range.\");\n}\nif (end > size - 1) {\n    end = size - 1;\n}\nTimeSeries copy = (TimeSeries) super.clone();\ncopy.data = new ArrayList();\nfor (int i = start; i <= end; i++) {\n    TimeSeriesDataItem item = this.getDataItem(i);\n    TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n    try {\n        copy.add(clone);\n    } catch (SeriesException e) {\n        throw new RuntimeException(e);\n    }\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..964b510 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,6 +1054,30 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n+if (start < 0) {\n+    throw new IllegalArgumentException(\"Requires start >= 0.\");\n+}\n+if (end < start) {\n+    throw new IllegalArgumentException(\"Requires start <= end.\");\n+}\n+int size = getItemCount();\n+if (start > size - 1) {\n+    throw new IllegalArgumentException(\"Dataset start is out of range.\");\n+}\n+if (end > size - 1) {\n+    end = size - 1;\n+}\n+TimeSeries copy = (TimeSeries) super.clone();\n+copy.data = new ArrayList();\n+for (int i = start; i <= end; i++) {\n+    TimeSeriesDataItem item = this.getDataItem(i);\n+    TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+    try {\n+        copy.add(clone);\n+    } catch (SeriesException e) {\n+        throw new RuntimeException(e);\n+    }\n+}\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {",
    "result_reason": "error: variable copy is already defined in method createCopy(int,int)",
    "test_result": "ERROR"
}