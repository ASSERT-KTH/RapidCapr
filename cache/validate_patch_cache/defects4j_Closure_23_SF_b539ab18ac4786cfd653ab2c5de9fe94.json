{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  double index = right.getDouble();\n  int intIndex = (int) index;\n\n  if (!right.isNumber() || intIndex != index) {   // Invalid index\n    error(INVALID_GETELEM_INDEX_ERROR, right);\n    return n;\n  }\n\n  if (left.isArrayLit() && intIndex >= 0 && intIndex < left.getChildCount()) {\n    // Get the element at the index\n    Node elem = left.getChildAtIndex(intIndex).cloneTree();\n    if (elem.isEmpty()) {\n      // An empty array element equals `undefined`\n      elem = NodeUtil.newUndefinedNode(n);\n    }\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  } else if (left.isGetElem() && left.getParent().isAssign()) {\n    // If this is an assignment expression (i.e. in the form `arr[index] = val`) and the\n    // left operand is a nested GETELEM node, try to fold the nested array access.\n    Node nestedElem = tryFoldArrayAccess(left, left.getFirstChild(), left.getLastChild());\n    if (nestedElem.isGetElem()) {\n      left.replaceChild(left.getLastChild(), nestedElem);\n    } else if (nestedElem.isArrayLit()) {\n      left.replaceChild(left.getFirstChild(), nestedElem);\n      return tryFoldArrayAccess(n, left, right);\n    }\n  }\n\n  return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..da17f67c 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,58 +1419,40 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-    if (isAssignmentTarget(n)) {\n-      return n;\n-    }\n-\n-    if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n-    }\n-\n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n-\n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+  double index = right.getDouble();\n+  int intIndex = (int) index;\n \n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n-    }\n-\n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n+  if (!right.isNumber() || intIndex != index) {   // Invalid index\n+    error(INVALID_GETELEM_INDEX_ERROR, right);\n+    return n;\n+  }\n \n+  if (left.isArrayLit() && intIndex >= 0 && intIndex < left.getChildCount()) {\n+    // Get the element at the index\n+    Node elem = left.getChildAtIndex(intIndex).cloneTree();\n     if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n+      // An empty array element equals `undefined`\n+      elem = NodeUtil.newUndefinedNode(n);\n     }\n-\n-    // Replace the entire GETELEM with the value\n     n.getParent().replaceChild(n, elem);\n     reportCodeChange();\n     return elem;\n+  } else if (left.isGetElem() && left.getParent().isAssign()) {\n+    // If this is an assignment expression (i.e. in the form `arr[index] = val`) and the\n+    // left operand is a nested GETELEM node, try to fold the nested array access.\n+    Node nestedElem = tryFoldArrayAccess(left, left.getFirstChild(), left.getLastChild());\n+    if (nestedElem.isGetElem()) {\n+      left.replaceChild(left.getLastChild(), nestedElem);\n+    } else if (nestedElem.isArrayLit()) {\n+      left.replaceChild(left.getFirstChild(), nestedElem);\n+      return tryFoldArrayAccess(n, left, right);\n+    }\n   }\n \n+  return n;\n+}\n+\n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));\n ",
    "result_reason": "junit.framework.AssertionFailedError: There should be one error. expected:<1> but was:<0>",
    "test_result": "FAIL"
}