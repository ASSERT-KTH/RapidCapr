{
    "patch": "  /**\n   * Checks whether the node's scope is either global or a named function.\n   *\n   * @param n The node to check.\n   * @return Whether the node's scope is either global or a named function.\n   */\n  private static boolean isGlobalOrFunctionScope(Node n) {\n    Node parent = n.getParent();\n    if (parent == null) {\n      return true;\n    }\n    if (parent.isScript() || parent.isBlock()) {\n      return true;\n    }\n    if (parent.isFunction()) {\n      return parent.getFirstChild().getString() != null;\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..8432a134 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,25 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+  /**\n+   * Checks whether the node's scope is either global or a named function.\n+   *\n+   * @param n The node to check.\n+   * @return Whether the node's scope is either global or a named function.\n+   */\n+  private static boolean isGlobalOrFunctionScope(Node n) {\n+    Node parent = n.getParent();\n+    if (parent == null) {\n+      return true;\n+    }\n+    if (parent.isScript() || parent.isBlock()) {\n+      return true;\n+    }\n+    if (parent.isFunction()) {\n+      return parent.getFirstChild().getString() != null;\n+    }\n+    return false;\n+  }\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}