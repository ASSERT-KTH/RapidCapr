{
    "patch": "public static long safeMultiply(long val1, int val2) {\n    checkForOverflow(val1, val2);\n    return val1 * val2;\n}\n\nprivate static void checkForOverflow(long val1, int val2) {\n    if (val1 == 0 || val2 == 0) {\n        return;\n    } else if (val2 == -1) {\n        if (val1 == Long.MIN_VALUE) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n    } else if (val2 == 1) {\n        // no overflow possible\n    } else if (val2 > 0) {\n        if (val1 > Long.MAX_VALUE / val2 ||\n                val1 < Long.MIN_VALUE / val2) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n    } else {\n        if (val1 < Long.MAX_VALUE / val2 ||\n                val1 > Long.MIN_VALUE / val2) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/field/FieldUtils.java b/src/main/java/org/joda/time/field/FieldUtils.java\nindex a0fe7e2d..78ecb8fc 100644\n--- a/src/main/java/org/joda/time/field/FieldUtils.java\n+++ b/src/main/java/org/joda/time/field/FieldUtils.java\n@@ -132,21 +132,32 @@ public class FieldUtils {\n      * @throws ArithmeticException if the value is too big or too small\n      * @since 1.2\n      */\n-    public static long safeMultiply(long val1, int val2) {\n-        switch (val2) {\n-            case -1:\n-                return -val1;\n-            case 0:\n-                return 0L;\n-            case 1:\n-                return val1;\n+public static long safeMultiply(long val1, int val2) {\n+    checkForOverflow(val1, val2);\n+    return val1 * val2;\n+}\n+\n+private static void checkForOverflow(long val1, int val2) {\n+    if (val1 == 0 || val2 == 0) {\n+        return;\n+    } else if (val2 == -1) {\n+        if (val1 == Long.MIN_VALUE) {\n+            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n         }\n-        long total = val1 * val2;\n-        if (total / val2 != val1) {\n-          throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n+    } else if (val2 == 1) {\n+        // no overflow possible\n+    } else if (val2 > 0) {\n+        if (val1 > Long.MAX_VALUE / val2 ||\n+                val1 < Long.MIN_VALUE / val2) {\n+            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n+        }\n+    } else {\n+        if (val1 < Long.MAX_VALUE / val2 ||\n+                val1 > Long.MIN_VALUE / val2) {\n+            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n         }\n-        return total;\n     }\n+}\n \n     /**\n      * Multiply two values throwing an exception if overflow occurs.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}