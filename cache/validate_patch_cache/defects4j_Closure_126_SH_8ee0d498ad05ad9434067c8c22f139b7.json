{
    "patch": "    // If there is code following the block, minimize its exits\n    if (n.getNext() != null) {\n      if (NodeUtil.hasFinally(n)) {\n        Node finallyBlock = n.getLastChild();\n        Node nextNode = finallyBlock.getNext();\n        if (nextNode != null) {\n          tryMinimizeExits(nextNode, exitType, labelName);\n        }\n        /*\n         * Don't try to minimize the exits of finally blocks, as this\n         * can cause problems if it changes the completion type of the finally\n         * block. See ECMA 262 Sections 8.9 & 12.14\n         */\n      } else {\n        tryMinimizeExits(n.getNext(), exitType, labelName);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..612fd9dd 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,11 +138,24 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n+    // If there is code following the block, minimize its exits\n+    if (n.getNext() != null) {\n       if (NodeUtil.hasFinally(n)) {\n         Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n+        Node nextNode = finallyBlock.getNext();\n+        if (nextNode != null) {\n+          tryMinimizeExits(nextNode, exitType, labelName);\n+        }\n+        /*\n+         * Don't try to minimize the exits of finally blocks, as this\n+         * can cause problems if it changes the completion type of the finally\n+         * block. See ECMA 262 Sections 8.9 & 12.14\n+         */\n+      } else {\n+        tryMinimizeExits(n.getNext(), exitType, labelName);\n       }\n     }\n+    }\n \n     // Just a 'label'.\n     if (n.isLabel()) {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}