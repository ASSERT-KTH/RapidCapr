{
    "patch": "        final Class<?> type2 = array2.getClass().getComponentType();\n        final Class<?> commonType = getCommonType(type1, type2);\n\n        T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n\n        return joinedArray;\n    }\n\n    private static Class<?> getCommonType(Class<?> type1, Class<?> type2) {\n        if (type1.isAssignableFrom(type2)) {\n            return type1;\n        } else if (type2.isAssignableFrom(type1)) {\n            return type2;\n        } else if (type1.isPrimitive() || type2.isPrimitive()) {\n            throw new IllegalArgumentException(\"Cannot store incompatible primitive types \" + type1 + \" and \" + type2);\n        } else {\n            return Object.class;",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/ArrayUtils.java b/src/java/org/apache/commons/lang3/ArrayUtils.java\nindex 889497e9..da251208 100644\n--- a/src/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java\n@@ -2950,20 +2950,26 @@ public class ArrayUtils {\n      * @since 2.1\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> T[] addAll(T[] array1, T... array2) {\n-        if (array1 == null) {\n-            return clone(array2);\n-        } else if (array2 == null) {\n-            return clone(array1);\n-        }\n-        final Class<?> type1 = array1.getClass().getComponentType();\n-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n+        final Class<?> type2 = array2.getClass().getComponentType();\n+        final Class<?> commonType = getCommonType(type1, type2);\n+\n+        T[] joinedArray = (T[]) Array.newInstance(commonType, array1.length + array2.length);\n         System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n-            // Check if problem is incompatible types\n+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n+\n         return joinedArray;\n     }\n \n+    private static Class<?> getCommonType(Class<?> type1, Class<?> type2) {\n+        if (type1.isAssignableFrom(type2)) {\n+            return type1;\n+        } else if (type2.isAssignableFrom(type1)) {\n+            return type2;\n+        } else if (type1.isPrimitive() || type2.isPrimitive()) {\n+            throw new IllegalArgumentException(\"Cannot store incompatible primitive types \" + type1 + \" and \" + type2);\n+        } else {\n+            return Object.class;\n+\n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>\n      * <p>The new array contains all of the element of <code>array1</code> followed",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}