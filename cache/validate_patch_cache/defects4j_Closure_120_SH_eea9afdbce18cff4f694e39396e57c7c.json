{
    "patch": "      if (block.isFunction) {\n        // If a variable is assigned again after its first assignment, it is\n        // not assigned once in its lifetime.\n        int count = 0;\n        for (int i = 0; i < references.size(); i++) {\n          if (references.get(i).isAssignmentToName()\n              && references.get(i).getNode() == ref.getNode()) {\n            count++;\n            if (count > 1) {\n              return false;\n            }\n          }\n        }\n\n        break;\n      } else if (block.isLoop) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..3df19beb 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,22 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        // If a variable is assigned again after its first assignment, it is\n+        // not assigned once in its lifetime.\n+        int count = 0;\n+        for (int i = 0; i < references.size(); i++) {\n+          if (references.get(i).isAssignmentToName()\n+              && references.get(i).getNode() == ref.getNode()) {\n+            count++;\n+            if (count > 1) {\n+              return false;\n+            }\n+          }\n+        }\n+\n+        break;\n+      } else if (block.isLoop) {\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}