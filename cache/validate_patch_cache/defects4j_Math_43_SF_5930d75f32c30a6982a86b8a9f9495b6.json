{
    "patch": "import org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic;\nimport org.apache.commons.math3.stat.descriptive.moment.Variance;\nimport org.apache.commons.math3.stat.descriptive.summary.SumOfLogs;\nimport org.apache.commons.math3.stat.descriptive.summary.SumOfSquares;\nimport org.apache.commons.math3.util.FastMath;\n\nimport java.util.Arrays;\n\npublic class SummaryStatistics {\n    private AbstractStorelessUnivariateStatistic sumImpl;\n    private AbstractStorelessUnivariateStatistic sumsqImpl;\n    private AbstractStorelessUnivariateStatistic minImpl;\n    private AbstractStorelessUnivariateStatistic maxImpl;\n    private AbstractStorelessUnivariateStatistic meanImpl;\n    private AbstractStorelessUnivariateStatistic varianceImpl;\n    private AbstractStorelessUnivariateStatistic geoMeanImpl;\n    private AbstractStorelessUnivariateStatistic sumLogImpl;\n    private AbstractStorelessUnivariateStatistic secondMoment;\n\n    private int n;\n\n    public SummaryStatistics() {\n        sumImpl = new org.apache.commons.math3.stat.descriptive.summary.Sum();\n        sumsqImpl = new SumOfSquares();\n        minImpl = new org.apache.commons.math3.stat.descriptive.rank.Min();\n        maxImpl = new org.apache.commons.math3.stat.descriptive.rank.Max();\n        meanImpl = new org.apache.commons.math3.stat.descriptive.moment.Mean();\n        varianceImpl = new org.apache.commons.math3.stat.descriptive.moment.Variance();\n        geoMeanImpl = new org.apache.commons.math3.stat.descriptive.moment.GeometricMean();\n        sumLogImpl = new SumOfLogs();\n        secondMoment = new org.apache.commons.math3.stat.descriptive.moment.SecondMoment();\n    }\n\n    public void addValue(double value) {\n        sumImpl.increment(value);\n        sumsqImpl.increment(value);\n        minImpl.increment(value);\n        maxImpl.increment(value);\n        sumLogImpl.increment(FastMath.log(value));\n        secondMoment.increment(value);\n        if (meanImpl instanceof org.apache.commons.math3.stat.descriptive.moment.Mean) {\n            ((org.apache.commons.math3.stat.descriptive.moment.Mean) meanImpl).increment(value);\n        } else if (meanImpl.getClass().getName().endsWith(\"Mean\")) {\n            try {\n                meanImpl.getClass().getMethod(\"incrementAll\", double[].class).invoke(meanImpl, new double[] {value});\n            } catch (Exception e) {}\n        } else {\n            double oldMean = meanImpl.getResult();\n            double newMean = oldMean + (value - oldMean) / (n + 1);\n            meanImpl.increment(newMean);\n        }\n\n        if (varianceImpl instanceof Variance) {\n            ((Variance) varianceImpl).increment(value);\n        } else if (varianceImpl.getClass().getName().endsWith(\"Variance\")) {\n            try {\n                varianceImpl.getClass().getMethod(\"incrementAll\", double[].class).invoke(varianceImpl, new double[] {value});\n            } catch (Exception e) {}\n        } else {\n            double delta;\n            if (n == 0) {\n                delta = value;\n            } else {\n                double oldMean = meanImpl.getResult();\n                delta = value - oldMean;\n            }\n            double oldVar = varianceImpl.getResult();\n            double newVar = oldVar + (((n + 1) / (double) n) * (delta * delta) / (n + 1));\n            varianceImpl.increment(newVar);\n        }\n\n        geoMeanImpl.increment(FastMath.log(value));\n        n++;\n    }\n\n    public int getN() {\n        return n;\n    }\n\n    public double getSum() {\n        return sumImpl.getResult();\n    }\n\n    public double getSumsq() {\n        return sumsqImpl.getResult();\n    }\n\n    public double getMean() {\n        return meanImpl.getResult();\n    }\n\n    public double getStandardDeviation() {\n        return FastMath.sqrt(getVariance());\n    }\n\n    public double getVariance() {\n        return varianceImpl.getResult();\n    }\n\n    public double getMax() {\n        return maxImpl.getResult();\n    }\n\n    public double getMin() {\n        return minImpl.getResult();\n    }\n\n    public double getGeometricMean() {\n        return FastMath.exp(geoMeanImpl.getResult());\n    }\n\n    public double getSumOfLogs() {\n        return sumLogImpl.getResult();\n    }\n\n    public double[] getSortedValues() {\n        double[] values = new double[n];\n        for (int i = 0; i < n; i++) {\n            values[i] = sumImpl.getValues()[i];\n        }\n        Arrays.sort(values);\n        return values;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..260db6660 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,27 +146,131 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n+import org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic;\n+import org.apache.commons.math3.stat.descriptive.moment.Variance;\n+import org.apache.commons.math3.stat.descriptive.summary.SumOfLogs;\n+import org.apache.commons.math3.stat.descriptive.summary.SumOfSquares;\n+import org.apache.commons.math3.util.FastMath;\n+\n+import java.util.Arrays;\n+\n+public class SummaryStatistics {\n+    private AbstractStorelessUnivariateStatistic sumImpl;\n+    private AbstractStorelessUnivariateStatistic sumsqImpl;\n+    private AbstractStorelessUnivariateStatistic minImpl;\n+    private AbstractStorelessUnivariateStatistic maxImpl;\n+    private AbstractStorelessUnivariateStatistic meanImpl;\n+    private AbstractStorelessUnivariateStatistic varianceImpl;\n+    private AbstractStorelessUnivariateStatistic geoMeanImpl;\n+    private AbstractStorelessUnivariateStatistic sumLogImpl;\n+    private AbstractStorelessUnivariateStatistic secondMoment;\n+\n+    private int n;\n+\n+    public SummaryStatistics() {\n+        sumImpl = new org.apache.commons.math3.stat.descriptive.summary.Sum();\n+        sumsqImpl = new SumOfSquares();\n+        minImpl = new org.apache.commons.math3.stat.descriptive.rank.Min();\n+        maxImpl = new org.apache.commons.math3.stat.descriptive.rank.Max();\n+        meanImpl = new org.apache.commons.math3.stat.descriptive.moment.Mean();\n+        varianceImpl = new org.apache.commons.math3.stat.descriptive.moment.Variance();\n+        geoMeanImpl = new org.apache.commons.math3.stat.descriptive.moment.GeometricMean();\n+        sumLogImpl = new SumOfLogs();\n+        secondMoment = new org.apache.commons.math3.stat.descriptive.moment.SecondMoment();\n+    }\n+\n     public void addValue(double value) {\n         sumImpl.increment(value);\n         sumsqImpl.increment(value);\n         minImpl.increment(value);\n         maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n+        sumLogImpl.increment(FastMath.log(value));\n         secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n-        }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n+        if (meanImpl instanceof org.apache.commons.math3.stat.descriptive.moment.Mean) {\n+            ((org.apache.commons.math3.stat.descriptive.moment.Mean) meanImpl).increment(value);\n+        } else if (meanImpl.getClass().getName().endsWith(\"Mean\")) {\n+            try {\n+                meanImpl.getClass().getMethod(\"incrementAll\", double[].class).invoke(meanImpl, new double[] {value});\n+            } catch (Exception e) {}\n+        } else {\n+            double oldMean = meanImpl.getResult();\n+            double newMean = oldMean + (value - oldMean) / (n + 1);\n+            meanImpl.increment(newMean);\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n+\n+        if (varianceImpl instanceof Variance) {\n+            ((Variance) varianceImpl).increment(value);\n+        } else if (varianceImpl.getClass().getName().endsWith(\"Variance\")) {\n+            try {\n+                varianceImpl.getClass().getMethod(\"incrementAll\", double[].class).invoke(varianceImpl, new double[] {value});\n+            } catch (Exception e) {}\n+        } else {\n+            double delta;\n+            if (n == 0) {\n+                delta = value;\n+            } else {\n+                double oldMean = meanImpl.getResult();\n+                delta = value - oldMean;\n+            }\n+            double oldVar = varianceImpl.getResult();\n+            double newVar = oldVar + (((n + 1) / (double) n) * (delta * delta) / (n + 1));\n+            varianceImpl.increment(newVar);\n         }\n+\n+        geoMeanImpl.increment(FastMath.log(value));\n         n++;\n     }\n \n+    public int getN() {\n+        return n;\n+    }\n+\n+    public double getSum() {\n+        return sumImpl.getResult();\n+    }\n+\n+    public double getSumsq() {\n+        return sumsqImpl.getResult();\n+    }\n+\n+    public double getMean() {\n+        return meanImpl.getResult();\n+    }\n+\n+    public double getStandardDeviation() {\n+        return FastMath.sqrt(getVariance());\n+    }\n+\n+    public double getVariance() {\n+        return varianceImpl.getResult();\n+    }\n+\n+    public double getMax() {\n+        return maxImpl.getResult();\n+    }\n+\n+    public double getMin() {\n+        return minImpl.getResult();\n+    }\n+\n+    public double getGeometricMean() {\n+        return FastMath.exp(geoMeanImpl.getResult());\n+    }\n+\n+    public double getSumOfLogs() {\n+        return sumLogImpl.getResult();\n+    }\n+\n+    public double[] getSortedValues() {\n+        double[] values = new double[n];\n+        for (int i = 0; i < n; i++) {\n+            values[i] = sumImpl.getValues()[i];\n+        }\n+        Arrays.sort(values);\n+        return values;\n+    }\n+}\n+\n     /**\n      * Returns the number of available values\n      * @return The number of available values",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}