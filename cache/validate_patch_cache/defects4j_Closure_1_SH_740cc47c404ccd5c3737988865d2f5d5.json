{
    "patch": "    NodeTraversal.traverse(compiler, function, new NodeTraversal.Callback() {\n      @Override\n      public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n        if (n.isParam()) {\n          // Remove unreferenced parameters from the function expression\n          Var var = fnScope.getVar(n.getString());\n          if (!referenced.contains(var)) {\n            argList.removeChild(n);\n            compiler.reportCodeChange();\n          }\n        }\n        return true;\n      }\n\n      @Override\n      public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n.isCall()) {\n          // If there are fewer args than parameters, add undefined values\n          Node arg = n.getFirstChild().getNext();\n          int expected = getFunctionNode(fnScope.getParent()).getExpectedNumberOfParams();\n          while (arg != null && expected > 1) {\n            arg = arg.getNext();\n            expected--;\n          }\n          while (expected > 1) {\n            Node undefinedArg = IR.undefined().srcref(arg);\n            argList.addChildToBack(undefinedArg);\n            expected--;\n          }\n        }\n      }\n    });",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..74cd0424 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,38 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    NodeTraversal.traverse(compiler, function, new NodeTraversal.Callback() {\n+      @Override\n+      public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n+        if (n.isParam()) {\n+          // Remove unreferenced parameters from the function expression\n+          Var var = fnScope.getVar(n.getString());\n+          if (!referenced.contains(var)) {\n+            argList.removeChild(n);\n+            compiler.reportCodeChange();\n+          }\n+        }\n+        return true;\n+      }\n+\n+      @Override\n+      public void visit(NodeTraversal t, Node n, Node parent) {\n+        if (n.isCall()) {\n+          // If there are fewer args than parameters, add undefined values\n+          Node arg = n.getFirstChild().getNext();\n+          int expected = getFunctionNode(fnScope.getParent()).getExpectedNumberOfParams();\n+          while (arg != null && expected > 1) {\n+            arg = arg.getNext();\n+            expected--;\n+          }\n+          while (expected > 1) {\n+            Node undefinedArg = IR.undefined().srcref(arg);\n+            argList.addChildToBack(undefinedArg);\n+            expected--;\n+          }\n+        }\n+      }\n+    });\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}