{
    "patch": "public static String getPropertyValue(Properties properties, String propertyName) {\n    String value = properties.getProperty(propertyName);\n    if (value == null) {\n      return null;\n    }\n    // Trim leading/trailing white space\n    value = value.trim();\n    // Check for wrapped values, remove new lines and unwanted quotes\n    if (value.startsWith(\"\\\"\") || value.startsWith(\"'\")) {\n      if (value.endsWith(\"\\\"\") || value.endsWith(\"'\")) {\n        value = value.substring(1, value.length() - 1);\n        value = value.replaceAll(\"\\n\", \"\");\n      } else {\n        throw new IllegalArgumentException(\"unclosed string literal: \" + value);\n      }\n    }\n    return value;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..b61ccc8e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getPropertyValue(Properties properties, String propertyName) {\n+    String value = properties.getProperty(propertyName);\n+    if (value == null) {\n+      return null;\n+    }\n+    // Trim leading/trailing white space\n+    value = value.trim();\n+    // Check for wrapped values, remove new lines and unwanted quotes\n+    if (value.startsWith(\"\\\"\") || value.startsWith(\"'\")) {\n+      if (value.endsWith(\"\\\"\") || value.endsWith(\"'\")) {\n+        value = value.substring(1, value.length() - 1);\n+        value = value.replaceAll(\"\\n\", \"\");\n+      } else {\n+        throw new IllegalArgumentException(\"unclosed string literal: \" + value);\n+      }\n+    }\n+    return value;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}