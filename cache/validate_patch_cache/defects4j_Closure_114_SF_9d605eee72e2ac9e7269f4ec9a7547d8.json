{
    "patch": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n\n  if (ns != null) {\n    if (parent.isFor() && !NodeUtil.isForIn(parent) && isForInitOrConditionOrIter(nameNode, parent)) {\n      // If the assignment is in the initialization part, condition, or iteration part of a FOR loop, all three \n      // try to claim the for loop as their dependency scope. We want to associate the right-hand side of the \n      // assignment with the for loop statement node (not just the for loop node).\n      // This prevents incorrect reference edges between referenced and assigned variables.\n      Node forStmt = parent.getNext(); // The parent of the FOR loop is always a statement block node\n      recordDepScope(forStmt, ns);\n    } else if (parent.isExprResult()) {\n      Node enclosingStmt = NodeUtil.getEnclosingStatement(n);\n\n      if (NodeUtil.isLoopStructure(enclosingStmt) && !parent.getParent().hasChildren()) {\n        // If the expression result has no children, it means it was an empty statement (i.e. a semicolon). We should\n        // record the dependencies against the enclosing loop statement, not the empty statement node.\n        enclosingStmt = enclosingStmt.getParent();\n      }\n\n      recordDepScope(enclosingStmt, ns);\n    } else {\n      recordDepScope(recordNode, ns);\n    }\n  }\n}\n\nprivate boolean isForInitOrConditionOrIter(Node nameNode, Node parent) {\n  return parent.getFirstChild().getNext() == nameNode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..72d866c8 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -555,37 +555,38 @@ final class NameAnalyzer implements CompilerPass {\n       }\n     }\n \n-    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n-      Node nameNode = n.getFirstChild();\n-      Node parent = n.getParent();\n-      NameInformation ns = createNameInformation(t, nameNode);\n-      if (ns != null) {\n-        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n-          // Patch for assignments that appear in the init,\n-          // condition or iteration part of a FOR loop.  Without\n-          // this change, all 3 of those parts try to claim the for\n-          // loop as their dependency scope.  The last assignment in\n-          // those three fields wins, which can result in incorrect\n-          // reference edges between referenced and assigned variables.\n-          //\n-          // TODO(user) revisit the dependency scope calculation\n-          // logic.\n-          if (parent.getFirstChild().getNext() != n) {\n-            recordDepScope(recordNode, ns);\n-          } else {\n-            recordDepScope(nameNode, ns);\n-          }\n-        } else {\n-          // The rhs of the assignment is the caller, so it's used by the\n-          // context. Don't associate it w/ the lhs.\n-          // FYI: this fixes only the specific case where the assignment is the\n-          // caller expression, but it could be nested deeper in the caller and\n-          // we would still get a bug.\n-          // See testAssignWithCall2 for an example of this.\n-          recordDepScope(recordNode, ns);\n-        }\n+private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n+  Node nameNode = n.getFirstChild();\n+  Node parent = n.getParent();\n+  NameInformation ns = createNameInformation(t, nameNode);\n+\n+  if (ns != null) {\n+    if (parent.isFor() && !NodeUtil.isForIn(parent) && isForInitOrConditionOrIter(nameNode, parent)) {\n+      // If the assignment is in the initialization part, condition, or iteration part of a FOR loop, all three \n+      // try to claim the for loop as their dependency scope. We want to associate the right-hand side of the \n+      // assignment with the for loop statement node (not just the for loop node).\n+      // This prevents incorrect reference edges between referenced and assigned variables.\n+      Node forStmt = parent.getNext(); // The parent of the FOR loop is always a statement block node\n+      recordDepScope(forStmt, ns);\n+    } else if (parent.isExprResult()) {\n+      Node enclosingStmt = NodeUtil.getEnclosingStatement(n);\n+\n+      if (NodeUtil.isLoopStructure(enclosingStmt) && !parent.getParent().hasChildren()) {\n+        // If the expression result has no children, it means it was an empty statement (i.e. a semicolon). We should\n+        // record the dependencies against the enclosing loop statement, not the empty statement node.\n+        enclosingStmt = enclosingStmt.getParent();\n       }\n+\n+      recordDepScope(enclosingStmt, ns);\n+    } else {\n+      recordDepScope(recordNode, ns);\n     }\n+  }\n+}\n+\n+private boolean isForInitOrConditionOrIter(Node nameNode, Node parent) {\n+  return parent.getFirstChild().getNext() == nameNode;\n+}\n \n     /**\n      * Defines a dependency scope.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}