{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    if (isPositiveDefinite(m)) {\n        return dec.getSquareRoot();\n    } else {\n        throw new RuntimeException(\"Matrix is not positive definite\");\n    }\n}\n\nprivate boolean isPositiveDefinite(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final double[] eigenvalues = dec.getRealEigenvalues();\n    for (double eigenvalue : eigenvalues) {\n        if (eigenvalue <= 0) {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..df4d27659 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,23 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    if (isPositiveDefinite(m)) {\n+        return dec.getSquareRoot();\n+    } else {\n+        throw new RuntimeException(\"Matrix is not positive definite\");\n     }\n }\n+\n+private boolean isPositiveDefinite(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final double[] eigenvalues = dec.getRealEigenvalues();\n+    for (double eigenvalue : eigenvalues) {\n+        if (eigenvalue <= 0) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+}",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}