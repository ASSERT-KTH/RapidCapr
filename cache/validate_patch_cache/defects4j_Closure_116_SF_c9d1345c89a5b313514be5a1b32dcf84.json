{
    "patch": "private CanInlineResult canInlineReferenceDirectly(\n  Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n    Node block = fnNode.getLastChild();\n    Node fnParams = NodeUtil.getFunctionParameters(fnNode);\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n    while (cArg != null || fnParams.hasChildren()) {\n        // Functions called via 'call' and 'apply' have a this-object as\n        // the first parameter, but this is not part of the called function's\n        // parameter list.\n        if (!callNode.getFirstChild().isName()) {\n            if (NodeUtil.isFunctionObjectCall(callNode)) {\n                // TODO(johnlenz): Support replace this with a value.\n                if (cArg == null || !cArg.isThis()) {\n                    return CanInlineResult.NO;\n                }\n                cArg = cArg.getNext();\n            } else {\n                // \".apply\" call should be filtered before this.\n                Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n            }\n        }\n        // Skip non-params (like TypeScript field initializers)\n        while (fnParams.hasChildren() && !fnParams.getFirstChild().isParam()) {\n            fnParams = fnParams.getNext();\n        }\n        if (fnParams.hasChildren() && fnParams.getFirstChild().isDefaultValue()) {\n            // skip the parameter default; the arguments are expected to be provided explicitly\n            fnParams = fnParams.getNext();\n        }\n\n        // For each named parameter check if a mutable argument use more than one.\n        if (fnParams.hasChildren()) {\n            // can't inline if missing actual argument for required parameter\n            if (cArg == null) return CanInlineResult.NO;\n            String name = fnParams.getString();\n            Node formalParam = fnParams.getFirstChild();\n            fnParams = fnParams.getNext();\n            // A rest parameter is always treated as an array.\n            // The entire rest argument is included as a single argument,\n            // so we need to check if the caller provided an array.\n            if (formalParam.isRest()) {\n                if (!cArg.isArrayLit() && !cArg.isName()) {\n                    return CanInlineResult.NO;\n                }\n            } else {\n                if (NodeUtil.mayEffectMutableState(cArg, compiler)\n                    && NodeUtil.getNameReferenceCount(block, name) > 1) {\n                    return CanInlineResult.NO;\n                }\n            }\n        }\n\n        // For each extra argument, check for side-effects.\n        if (cArg != null) {\n            if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n                return CanInlineResult.NO;\n            }\n            cArg = cArg.getNext();\n        }\n    }\n    return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..e2fe7448 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,67 +686,72 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+private CanInlineResult canInlineReferenceDirectly(\n+  Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n+        return CanInlineResult.NO;\n     }\n-\n     Node block = fnNode.getLastChild();\n-\n-\n+    Node fnParams = NodeUtil.getFunctionParameters(fnNode);\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n-\n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n+    while (cArg != null || fnParams.hasChildren()) {\n+        // Functions called via 'call' and 'apply' have a this-object as\n+        // the first parameter, but this is not part of the called function's\n+        // parameter list.\n+        if (!callNode.getFirstChild().isName()) {\n+            if (NodeUtil.isFunctionObjectCall(callNode)) {\n+                // TODO(johnlenz): Support replace this with a value.\n+                if (cArg == null || !cArg.isThis()) {\n+                    return CanInlineResult.NO;\n+                }\n+                cArg = cArg.getNext();\n+            } else {\n+                // \".apply\" call should be filtered before this.\n+                Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+            }\n         }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n-\n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n+        // Skip non-params (like TypeScript field initializers)\n+        while (fnParams.hasChildren() && !fnParams.getFirstChild().isParam()) {\n+            fnParams = fnParams.getNext();\n+        }\n+        if (fnParams.hasChildren() && fnParams.getFirstChild().isDefaultValue()) {\n+            // skip the parameter default; the arguments are expected to be provided explicitly\n+            fnParams = fnParams.getNext();\n         }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+        // For each named parameter check if a mutable argument use more than one.\n+        if (fnParams.hasChildren()) {\n+            // can't inline if missing actual argument for required parameter\n+            if (cArg == null) return CanInlineResult.NO;\n+            String name = fnParams.getString();\n+            Node formalParam = fnParams.getFirstChild();\n+            fnParams = fnParams.getNext();\n+            // A rest parameter is always treated as an array.\n+            // The entire rest argument is included as a single argument,\n+            // so we need to check if the caller provided an array.\n+            if (formalParam.isRest()) {\n+                if (!cArg.isArrayLit() && !cArg.isName()) {\n+                    return CanInlineResult.NO;\n+                }\n+            } else {\n+                if (NodeUtil.mayEffectMutableState(cArg, compiler)\n+                    && NodeUtil.getNameReferenceCount(block, name) > 1) {\n+                    return CanInlineResult.NO;\n+                }\n+            }\n+        }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n+        // For each extra argument, check for side-effects.\n+        if (cArg != null) {\n+            if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+                return CanInlineResult.NO;\n+            }\n+            cArg = cArg.getNext();\n         }\n-        cArg = cArg.getNext();\n-      }\n     }\n-\n     return CanInlineResult.YES;\n-  }\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}