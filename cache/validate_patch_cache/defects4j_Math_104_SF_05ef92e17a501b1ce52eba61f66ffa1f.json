{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    double GAMMA_REL_PRECISION = 1.0e-15;\n    double GAMMA_SERIES_PRECISION = 1.0e-14;\n\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    if (x >= a + 1) {\n        // series representation of incomplete gamma function\n        ContinuedFraction fraction = new ContinuedFraction() {\n            @Override\n            protected double getA(int n, double x) {\n                if (n == 0) {\n                    return 1.0;\n                } else if (n == 1) {\n                    return 1.0 - a;\n                }\n                return (2 * (n - 1) + 1 - a + x);\n            }\n\n            @Override\n            protected double getB(int n, double x) {\n                return n;\n            }\n        };\n\n        double invDiv = 1 / x;\n        double a_n = 1 / x;\n        double b_n = 1;\n        double a_n_1 = (1 - a) / x;\n        double b_n_1 = 0;\n        double term = a_n;\n        double denominator = 1 / a_n;\n\n        while (Math.abs(term / denominator) > GAMMA_SERIES_PRECISION) {\n            double a_n_2 = (((2 * (b_n + 1) - a + x) * a_n_1 + (a - 1) * a_n) / x);\n            double b_n_2 = b_n + 1;\n            a_n = a_n_1;\n            b_n = b_n_1;\n            a_n_1 = a_n_2;\n            b_n_1 = b_n_2;\n            if (b_n_2 > Double.MAX_VALUE / invDiv) {\n                // overflow\n                return 1;\n            }\n            invDiv *= b_n_2;\n            term = a_n_2 * invDiv;\n            denominator += term;\n        }\n\n        return 1 - Math.exp(-x + a * Math.log(x) - logGamma(a)) * denominator;\n    }\n\n    // continued fraction representation of incomplete gamma function\n    ContinuedFraction fraction = new ContinuedFraction() {\n        @Override\n        protected double getA(int n, double x) {\n            return (n + 1 - a);\n        }\n\n        @Override\n        protected double getB(int n, double x) {\n            return x;\n        }\n    };\n\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) / fraction.evaluate(x, GAMMA_REL_PRECISION);\n}\n\nprivate static double logGamma(double x) {\n    double cof[] = { 76.18009172947146, -86.50532032941677, 24.01409824083091,\n            -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5 };\n    double one = 1.0;\n    double tmp = x + 5.5;\n    tmp -= (x + 0.5) * Math.log(tmp);\n    double ser = one + 0.9999999999999978 / x;\n    for (int j = 0; j < 6; j++) {\n        x += 1;\n        ser += cof[j] / x;\n    }\n    return -tmp + Math.log(2.5066282746310005 * ser);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..17f037d51 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,93 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    double GAMMA_REL_PRECISION = 1.0e-15;\n+    double GAMMA_SERIES_PRECISION = 1.0e-14;\n+\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    if (x >= a + 1) {\n+        // series representation of incomplete gamma function\n+        ContinuedFraction fraction = new ContinuedFraction() {\n+            @Override\n+            protected double getA(int n, double x) {\n+                if (n == 0) {\n+                    return 1.0;\n+                } else if (n == 1) {\n+                    return 1.0 - a;\n+                }\n+                return (2 * (n - 1) + 1 - a + x);\n+            }\n+\n+            @Override\n+            protected double getB(int n, double x) {\n+                return n;\n+            }\n+        };\n+\n+        double invDiv = 1 / x;\n+        double a_n = 1 / x;\n+        double b_n = 1;\n+        double a_n_1 = (1 - a) / x;\n+        double b_n_1 = 0;\n+        double term = a_n;\n+        double denominator = 1 / a_n;\n+\n+        while (Math.abs(term / denominator) > GAMMA_SERIES_PRECISION) {\n+            double a_n_2 = (((2 * (b_n + 1) - a + x) * a_n_1 + (a - 1) * a_n) / x);\n+            double b_n_2 = b_n + 1;\n+            a_n = a_n_1;\n+            b_n = b_n_1;\n+            a_n_1 = a_n_2;\n+            b_n_1 = b_n_2;\n+            if (b_n_2 > Double.MAX_VALUE / invDiv) {\n+                // overflow\n+                return 1;\n+            }\n+            invDiv *= b_n_2;\n+            term = a_n_2 * invDiv;\n+            denominator += term;\n+        }\n+\n+        return 1 - Math.exp(-x + a * Math.log(x) - logGamma(a)) * denominator;\n+    }\n+\n+    // continued fraction representation of incomplete gamma function\n+    ContinuedFraction fraction = new ContinuedFraction() {\n+        @Override\n+        protected double getA(int n, double x) {\n+            return (n + 1 - a);\n+        }\n+\n+        @Override\n+        protected double getB(int n, double x) {\n+            return x;\n+        }\n+    };\n+\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) / fraction.evaluate(x, GAMMA_REL_PRECISION);\n+}\n+\n+private static double logGamma(double x) {\n+    double cof[] = { 76.18009172947146, -86.50532032941677, 24.01409824083091,\n+            -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5 };\n+    double one = 1.0;\n+    double tmp = x + 5.5;\n+    tmp -= (x + 0.5) * Math.log(tmp);\n+    double ser = one + 0.9999999999999978 / x;\n+    for (int j = 0; j < 6; j++) {\n+        x += 1;\n+        ser += cof[j] / x;\n+    }\n+    return -tmp + Math.log(2.5066282746310005 * ser);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}