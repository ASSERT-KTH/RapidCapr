{
    "patch": "        boolean increasing = forward;\n        double previousT = stepStart;\n        double currentT = stepStart + stepSize;\n        while ((forward && currentT < t) || (!forward && currentT > t)) {\n            increasing = forward;\n            final double[] tmp = y0.clone();\n            for (int j = 0; j < y0.length; ++j) {\n                double sum = b[0] * yDotK[0][j];\n                for (int l = 1; l < stages; ++l) {\n                    sum += b[l] * yDotK[l][j];\n                }\n                tmp[j] = y0[j] + stepSize * sum;\n            }\n            stepStart = previousT;\n            currentT = Math.min(t, currentT + stepSize);\n            integrateStep(initializer, stepStart, tmp, increasing);\n            System.arraycopy(tmp, 0, y0, 0, tmp.length);\n        }\n\n        final double[] tmp = y0.clone();\n        for (int j = 0; j < y0.length; ++j) {\n            double sum = b[0] * yDotK[0][j];\n            for (int l = 1; l < stages; ++l) {\n                sum += b[l] * yDotK[l][j];\n            }\n            tmp[j] = y0[j] + stepSize * sum;\n        }\n        integrateStep(initializer, previousT, tmp, increasing);\n        System.arraycopy(tmp, 0, y0, 0, tmp.length);\n        return stepStart + stepSize;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 13ced27d7..db039c70e 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -247,6 +247,36 @@ public abstract class EmbeddedRungeKuttaIntegrator\n         }\n \n         stepSize = hNew;\n+        boolean increasing = forward;\n+        double previousT = stepStart;\n+        double currentT = stepStart + stepSize;\n+        while ((forward && currentT < t) || (!forward && currentT > t)) {\n+            increasing = forward;\n+            final double[] tmp = y0.clone();\n+            for (int j = 0; j < y0.length; ++j) {\n+                double sum = b[0] * yDotK[0][j];\n+                for (int l = 1; l < stages; ++l) {\n+                    sum += b[l] * yDotK[l][j];\n+                }\n+                tmp[j] = y0[j] + stepSize * sum;\n+            }\n+            stepStart = previousT;\n+            currentT = Math.min(t, currentT + stepSize);\n+            integrateStep(initializer, stepStart, tmp, increasing);\n+            System.arraycopy(tmp, 0, y0, 0, tmp.length);\n+        }\n+\n+        final double[] tmp = y0.clone();\n+        for (int j = 0; j < y0.length; ++j) {\n+            double sum = b[0] * yDotK[0][j];\n+            for (int l = 1; l < stages; ++l) {\n+                sum += b[l] * yDotK[l][j];\n+            }\n+            tmp[j] = y0[j] + stepSize * sum;\n+        }\n+        integrateStep(initializer, previousT, tmp, increasing);\n+        System.arraycopy(tmp, 0, y0, 0, tmp.length);\n+        return stepStart + stepSize;\n \n         // next stages\n         for (int k = 1; k < stages; ++k) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}