{
    "patch": "for (Node fnNode : cfa.finallyMap.get(parent)) {\n    List<DiGraphEdge<Node, Branch>> edges = cfa.createEdgesBetween(fromNode, fnNode);\n    Preconditions.checkState(edges.size() == 1);\n    edges.get(0).getValue().setExceptionHandler();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..5f2877fc 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,11 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+for (Node fnNode : cfa.finallyMap.get(parent)) {\n+    List<DiGraphEdge<Node, Branch>> edges = cfa.createEdgesBetween(fromNode, fnNode);\n+    Preconditions.checkState(edges.size() == 1);\n+    edges.get(0).getValue().setExceptionHandler();\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}