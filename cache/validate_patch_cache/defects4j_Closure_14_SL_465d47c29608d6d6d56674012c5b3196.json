{
    "patch": "for (Node finallyChild = finallyNode.getFirstChild();\n  finallyChild != null;\n  finallyChild = finallyChild.getNext()) {\n  if (finallyChild.isBlock()) {\n    hasCrossEdges = computeCrossEdges(cfa, fromNode, finallyChild);\n    if (hasCrossEdges) {\n      break;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..ca14303f 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,16 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+for (Node finallyChild = finallyNode.getFirstChild();\n+  finallyChild != null;\n+  finallyChild = finallyChild.getNext()) {\n+  if (finallyChild.isBlock()) {\n+    hasCrossEdges = computeCrossEdges(cfa, fromNode, finallyChild);\n+    if (hasCrossEdges) {\n+      break;\n+    }\n+  }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}