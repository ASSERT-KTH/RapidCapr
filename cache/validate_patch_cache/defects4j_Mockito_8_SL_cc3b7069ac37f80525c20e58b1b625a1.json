{
    "patch": "private Type resolveTypeVariable(Type type, Map<Type, Type> contextualActualTypeParameters) {\n    if (type instanceof TypeVariable && contextualActualTypeParameters.containsKey(type)) {\n        return resolveTypeVariable(contextualActualTypeParameters.get(type), contextualActualTypeParameters);\n    } else if (type instanceof GenericArrayType) {\n        GenericArrayType genericArrayType = (GenericArrayType) type;\n        return Array.newInstance(resolveTypeVariable(genericArrayType.getGenericComponentType(), contextualActualTypeParameters), 0).getClass();\n    } else if (type instanceof ParameterizedType) {\n        ParameterizedType parameterizedType = (ParameterizedType) type;\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n        Type[] resolvedTypeArguments = new Type[actualTypeArguments.length];\n        for (int i = 0; i < actualTypeArguments.length; i++) {\n            resolvedTypeArguments[i] = resolveTypeVariable(actualTypeArguments[i], contextualActualTypeParameters);\n        }\n        return new ParameterizedTypeImpl((Class<?>) parameterizedType.getRawType(), null, resolvedTypeArguments);\n    } else if (type instanceof WildcardType) {\n        WildcardType wildcardType = (WildcardType) type;\n        Type[] lowerBounds = wildcardType.getLowerBounds();\n        Type[] upperBounds = wildcardType.getUpperBounds();\n        if (lowerBounds.length == 0 && upperBounds.length == 1) {\n            return resolveTypeVariable(upperBounds[0], contextualActualTypeParameters);\n        } else if (lowerBounds.length == 1 && upperBounds.length == 0) {\n            return resolveTypeVariable(lowerBounds[0], contextualActualTypeParameters);\n        } else {\n            throw new IllegalStateException(\"Unsupported wildcard type: \" + wildcardType);\n        }\n    } else {\n        return type;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..8827bca52 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,35 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+private Type resolveTypeVariable(Type type, Map<Type, Type> contextualActualTypeParameters) {\n+    if (type instanceof TypeVariable && contextualActualTypeParameters.containsKey(type)) {\n+        return resolveTypeVariable(contextualActualTypeParameters.get(type), contextualActualTypeParameters);\n+    } else if (type instanceof GenericArrayType) {\n+        GenericArrayType genericArrayType = (GenericArrayType) type;\n+        return Array.newInstance(resolveTypeVariable(genericArrayType.getGenericComponentType(), contextualActualTypeParameters), 0).getClass();\n+    } else if (type instanceof ParameterizedType) {\n+        ParameterizedType parameterizedType = (ParameterizedType) type;\n+        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+        Type[] resolvedTypeArguments = new Type[actualTypeArguments.length];\n+        for (int i = 0; i < actualTypeArguments.length; i++) {\n+            resolvedTypeArguments[i] = resolveTypeVariable(actualTypeArguments[i], contextualActualTypeParameters);\n+        }\n+        return new ParameterizedTypeImpl((Class<?>) parameterizedType.getRawType(), null, resolvedTypeArguments);\n+    } else if (type instanceof WildcardType) {\n+        WildcardType wildcardType = (WildcardType) type;\n+        Type[] lowerBounds = wildcardType.getLowerBounds();\n+        Type[] upperBounds = wildcardType.getUpperBounds();\n+        if (lowerBounds.length == 0 && upperBounds.length == 1) {\n+            return resolveTypeVariable(upperBounds[0], contextualActualTypeParameters);\n+        } else if (lowerBounds.length == 1 && upperBounds.length == 0) {\n+            return resolveTypeVariable(lowerBounds[0], contextualActualTypeParameters);\n+        } else {\n+            throw new IllegalStateException(\"Unsupported wildcard type: \" + wildcardType);\n+        }\n+    } else {\n+        return type;\n+    }\n+}\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}