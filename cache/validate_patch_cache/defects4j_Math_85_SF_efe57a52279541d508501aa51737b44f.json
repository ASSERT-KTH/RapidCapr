{
    "patch": "public static double[] bracket(UnivariateRealFunction function,\n            double initial, double lowerBound, double upperBound, \n            int maximumIterations) throws ConvergenceException, \n            FunctionEvaluationException {\n        final double functionValue = function.value(initial);\n\n        if (Double.isNaN(functionValue)) {\n            throw new ConvergenceException(\"Initial guess returned NaN value\");\n        }\n        if (initial < lowerBound || initial > upperBound) {\n            throw new IllegalArgumentException(\n                  \"Initial guess is not in search interval.\");\n        }\n\n        int numIterations = 0;\n        double xMin = initial;\n        double xMax = initial;\n        double yMin = functionValue;\n        double yMax = functionValue;\n        double xMid = initial;\n        double yMid = functionValue;\n\n        while (numIterations++ <= maximumIterations) {\n            final double xOld = xMid;\n            final double yOld = yMid;\n            xMid = 0.5 * (xMin + xMax);\n            try {\n                yMid = function.value(xMid);\n            } catch (FunctionEvaluationException ex) {\n                throw new ConvergenceException(\n                        \"Function evaluation error\"\n                        + \" at initial position {0}\", ex, initial);\n            }\n            if (Double.isNaN(yMid)) {\n                throw new ConvergenceException(\n                        \"Illegal function value: NaN encountered\"\n                        + \" at {0}\", xMid);\n            }\n            if (yMid * yMin <= 0) {\n                xMax = xMid;\n                yMax = yMid;\n            } else if (yMid * yMax <= 0) {\n                xMin = xMid;\n                yMin = yMid;\n            } else if (yMid == 0) {\n                return new double[] { xMid, xMid };\n            } else {\n                if ((yMin < 0 && yMid < yMin) || (yMax > 0 && yMid > yMax)) {\n                    xMax = xMid;\n                    yMax = yMid;\n                } else {\n                    xMin = xMid;\n                    yMin = yMid;\n                }\n            }\n            if (FastMath.abs(xMax - xMin) <= FastMath.max(FastMath.ulp(xMin),\n                                                           FastMath.ulp(xMax))) {\n                return new double[] { xMin, xMax };\n            }\n        }\n        throw new ConvergenceException(\"maximum number of iterations ({0}) \"\n            + \"exceeded\", maximumIterations);\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..86cc90b36 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,49 +162,68 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n+public static double[] bracket(UnivariateRealFunction function,\n             double initial, double lowerBound, double upperBound, \n             int maximumIterations) throws ConvergenceException, \n             FunctionEvaluationException {\n-        \n-        if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n-        }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n+        final double functionValue = function.value(initial);\n+\n+        if (Double.isNaN(functionValue)) {\n+            throw new ConvergenceException(\"Initial guess returned NaN value\");\n         }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n+        if (initial < lowerBound || initial > upperBound) {\n+            throw new IllegalArgumentException(\n+                  \"Initial guess is not in search interval.\");\n         }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n-            \n-            fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+\n+        int numIterations = 0;\n+        double xMin = initial;\n+        double xMax = initial;\n+        double yMin = functionValue;\n+        double yMax = functionValue;\n+        double xMid = initial;\n+        double yMid = functionValue;\n+\n+        while (numIterations++ <= maximumIterations) {\n+            final double xOld = xMid;\n+            final double yOld = yMid;\n+            xMid = 0.5 * (xMin + xMax);\n+            try {\n+                yMid = function.value(xMid);\n+            } catch (FunctionEvaluationException ex) {\n+                throw new ConvergenceException(\n+                        \"Function evaluation error\"\n+                        + \" at initial position {0}\", ex, initial);\n+            }\n+            if (Double.isNaN(yMid)) {\n+                throw new ConvergenceException(\n+                        \"Illegal function value: NaN encountered\"\n+                        + \" at {0}\", xMid);\n+            }\n+            if (yMid * yMin <= 0) {\n+                xMax = xMid;\n+                yMax = yMid;\n+            } else if (yMid * yMax <= 0) {\n+                xMin = xMid;\n+                yMin = yMid;\n+            } else if (yMid == 0) {\n+                return new double[] { xMid, xMid };\n+            } else {\n+                if ((yMin < 0 && yMid < yMin) || (yMax > 0 && yMid > yMax)) {\n+                    xMax = xMid;\n+                    yMax = yMid;\n+                } else {\n+                    xMin = xMid;\n+                    yMin = yMid;\n+                }\n+            }\n+            if (FastMath.abs(xMax - xMin) <= FastMath.max(FastMath.ulp(xMin),\n+                                                           FastMath.ulp(xMax))) {\n+                return new double[] { xMin, xMax };\n+            }\n         }\n-        \n-        return new double[]{a, b};\n+        throw new ConvergenceException(\"maximum number of iterations ({0}) \"\n+            + \"exceeded\", maximumIterations);\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}