{
    "patch": "            DurationField field = e.getDurationField();\n            if (field == null || !field.equals(DurationFieldType.year())) {\n                throw e;\n            } else {\n                int yearValue = e.getIllegalIntValue();\n                if (yearValue < iChrono.getMinYear() || yearValue > iChrono.getMaxYear()) {\n                    throw e;\n                }\n                for (int i = 0; i < count; i++) {\n                    SavedField savedField = savedFields[i];\n                    if (savedField.iField.getType().equals(DateTimeFieldType.year())) {\n                        savedField.iValue = yearValue;\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..8eced6df 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,20 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            DurationField field = e.getDurationField();\n+            if (field == null || !field.equals(DurationFieldType.year())) {\n+                throw e;\n+            } else {\n+                int yearValue = e.getIllegalIntValue();\n+                if (yearValue < iChrono.getMinYear() || yearValue > iChrono.getMaxYear()) {\n+                    throw e;\n+                }\n+                for (int i = 0; i < count; i++) {\n+                    SavedField savedField = savedFields[i];\n+                    if (savedField.iField.getType().equals(DateTimeFieldType.year())) {\n+                        savedField.iValue = yearValue;\n+                    }\n+                }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}