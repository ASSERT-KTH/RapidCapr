{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n\n    for (Type bound : typeVariable.getBounds()) {\n        if (!(bound instanceof TypeVariable)) {\n            registerTypeVariablesOn(bound);\n            continue;\n        }\n\n        // Handle TypeVariable upper bounds recursively\n        TypeVariable<?> typeVar = (TypeVariable<?>) bound;\n        if (isObjectClassBounds(typeVar.getBounds())) {\n            // Ignore Object bounds\n            continue;\n        } else {\n            registerTypeVariablesOn(typeVar);\n            readTypeVariablesForTypeVariable(typeVar);\n        }\n    }\n\n    registerActualTypeArgumentsForTypeVariable(typeVariable);\n}\n\nprivate void readTypeVariablesForTypeVariable(TypeVariable<?> typeVar) {\n    for (Type bound : typeVar.getBounds()) {\n        if (!(bound instanceof TypeVariable)) {\n            registerTypeVariablesOn(bound);\n            continue;\n        }\n\n        // Handle TypeVariable upper bounds recursively\n        TypeVariable<?> nestedTypeVar = (TypeVariable<?>) bound;\n        if (isMultipleBounds(nestedTypeVar.getBounds())) {\n            registerTypeVariablesOn(nestedTypeVar);\n            readTypeVariablesForTypeVariable(nestedTypeVar);\n        }\n    }\n}\n\nprivate void registerActualTypeArgumentsForTypeVariable(TypeVariable<?> typeVar) {\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVar);\n    \n    if (actualTypeArgument != null) {\n        if (!(actualTypeArgument instanceof TypeVariable)) {\n            registerTypeVariablesOn(actualTypeArgument);\n        } else {\n            // Handle actual type argument with multiple bounds\n            TypeVariable<?> actualTypeVar = (TypeVariable<?>) actualTypeArgument;\n            if (isMultipleBounds(actualTypeVar.getBounds())) {\n                registerTypeVariablesOn(actualTypeVar);\n                readTypeVariablesForTypeVariable(actualTypeVar);\n            }\n        }\n    }\n}\n\nprivate boolean isObjectClassBounds(Type[] bounds) {\n    if (bounds.length == 1 && bounds[0] == Object.class) {\n        return true;\n    }\n\n    return false;\n}\n\nprivate boolean isMultipleBounds(Type[] bounds) {\n    if (bounds.length > 1) {\n        return true;\n    }\n\n    return false;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..183eda102 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,80 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+\n+    for (Type bound : typeVariable.getBounds()) {\n+        if (!(bound instanceof TypeVariable)) {\n+            registerTypeVariablesOn(bound);\n+            continue;\n+        }\n+\n+        // Handle TypeVariable upper bounds recursively\n+        TypeVariable<?> typeVar = (TypeVariable<?>) bound;\n+        if (isObjectClassBounds(typeVar.getBounds())) {\n+            // Ignore Object bounds\n+            continue;\n+        } else {\n+            registerTypeVariablesOn(typeVar);\n+            readTypeVariablesForTypeVariable(typeVar);\n+        }\n+    }\n+\n+    registerActualTypeArgumentsForTypeVariable(typeVariable);\n+}\n+\n+private void readTypeVariablesForTypeVariable(TypeVariable<?> typeVar) {\n+    for (Type bound : typeVar.getBounds()) {\n+        if (!(bound instanceof TypeVariable)) {\n+            registerTypeVariablesOn(bound);\n+            continue;\n+        }\n+\n+        // Handle TypeVariable upper bounds recursively\n+        TypeVariable<?> nestedTypeVar = (TypeVariable<?>) bound;\n+        if (isMultipleBounds(nestedTypeVar.getBounds())) {\n+            registerTypeVariablesOn(nestedTypeVar);\n+            readTypeVariablesForTypeVariable(nestedTypeVar);\n+        }\n+    }\n+}\n+\n+private void registerActualTypeArgumentsForTypeVariable(TypeVariable<?> typeVar) {\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVar);\n+    \n+    if (actualTypeArgument != null) {\n+        if (!(actualTypeArgument instanceof TypeVariable)) {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        } else {\n+            // Handle actual type argument with multiple bounds\n+            TypeVariable<?> actualTypeVar = (TypeVariable<?>) actualTypeArgument;\n+            if (isMultipleBounds(actualTypeVar.getBounds())) {\n+                registerTypeVariablesOn(actualTypeVar);\n+                readTypeVariablesForTypeVariable(actualTypeVar);\n+            }\n+        }\n+    }\n+}\n+\n+private boolean isObjectClassBounds(Type[] bounds) {\n+    if (bounds.length == 1 && bounds[0] == Object.class) {\n+        return true;\n+    }\n+\n+    return false;\n+}\n+\n+private boolean isMultipleBounds(Type[] bounds) {\n+    if (bounds.length > 1) {\n+        return true;\n+    }\n+\n+    return false;\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}