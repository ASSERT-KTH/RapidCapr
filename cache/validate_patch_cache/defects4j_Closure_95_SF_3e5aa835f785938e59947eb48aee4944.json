{
    "patch": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n    Preconditions.checkArgument(!inferred || type != null);\n\n    // Only allow declarations of NAMEs and qualified names.\n    boolean shouldDeclareOnGlobalThis = false;\n\n    if (n.getType() == Token.NAME) {\n        int parentType = parent.getType();\n        switch (parentType) {\n            case Token.FUNCTION:\n            case Token.VAR:\n            case Token.LP:\n            case Token.CATCH:\n                shouldDeclareOnGlobalThis = scope.isGlobal()\n                        && (parentType == Token.VAR || parentType == Token.FUNCTION);\n                break;\n            case Token.PARAM_LIST:\n                Preconditions.checkArgument(\n                        parent.getParent().getType() == Token.FUNCTION,\n                        \"Illegal function parameter\");\n                break;\n            case Token.CLASS:\n                if (parent.getBooleanProp(Node.CONSTANT_PROPERTY)) {\n                    inferred = false;\n                    type = getNativeType(UNKNOWN_TYPE);\n                }\n                break;\n            case Token.THIS:\n                break;\n            default:\n                throw new IllegalStateException(\n                        Token.name(parentType) + \" parent not supported in a NAME: \" + n);\n        }\n    } else {\n        Preconditions.checkArgument(\n                n.getType() == Token.GETPROP\n                        && (parent.getType() == Token.ASSIGN || parent.getType() == Token.EXPR_RESULT)\n                        || NodeUtil.isAssignmentOp(parent));\n\n        // we must have a valid chain of qualified names, either all of them are quoted properties,\n        // or none of them are.\n        if (n.getLastChild().isString()) {\n            Node maybeQualifiedName = n.getFirstChild();\n            while (maybeQualifiedName.isGetProp()) {\n                String propName = maybeQualifiedName.getLastChild().getString();\n                if (!TokenStream.isJSIdentifier(propName)) {\n                    return;\n                }\n                maybeQualifiedName = maybeQualifiedName.getFirstChild();\n            }\n        }\n    }\n\n    String variableName = n.getQualifiedName();\n    if (variableName == null || variableName.isEmpty()) {\n        return;\n    }\n\n    // If n is a property, then we should really declare it in the\n    // scope where the root object appears. This helps out people\n    // who declare \"global\" names in an anonymous namespace.\n    Scope scopeToDeclareIn = scope;\n\n    // declared in closest scope?\n    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        if (parent.getFirstChild().getType() == Token.ASSIGN\n                || parent.getFirstChild().getType() == Token.CALL\n                || parent.getFirstChild().getType() == Token.DECLARE) {\n            Var oldVar = scopeToDeclareIn.getVar(variableName);\n            type = oldVar.getType();\n            if (inferred && type != null && type.isUnknownType()) {\n                type = null;\n            }\n        } else {\n            Var oldVar = scopeToDeclareIn.getVar(variableName);\n            validator.expectUndeclaredVariable(\n                    sourceName, n, parent, oldVar, variableName, type);\n        }\n    } else {\n        CompilerInput input = compiler.getInput(sourceName);\n        if (!inferred) {\n            setDeferredType(n, type);\n        }\n        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n        if (shouldDeclareOnGlobalThis) {\n            ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n            boolean isExtern = input.isExtern();\n            if (inferred) {\n                globalThis.defineInferredProperty(\n                        variableName,\n                        type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,\n                        isExtern);\n            } else {\n                globalThis.defineDeclaredProperty(variableName, type, isExtern);\n            }\n        }\n\n        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n            FunctionType fnType = (FunctionType) type;\n            if (fnType.isConstructor() || fnType.isInterface()) {\n                FunctionType superClassCtor = fnType.getSuperClassConstructor();\n                scopeToDeclareIn.declare(\n                        variableName + \".prototype\",\n                        n,\n                        fnType.getPrototype(),\n                        input,\n                        superClassCtor == null\n                                || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..842ce13a 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,80 +869,119 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n-      } else {\n+void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+    Preconditions.checkArgument(!inferred || type != null);\n+\n+    // Only allow declarations of NAMEs and qualified names.\n+    boolean shouldDeclareOnGlobalThis = false;\n+\n+    if (n.getType() == Token.NAME) {\n+        int parentType = parent.getType();\n+        switch (parentType) {\n+            case Token.FUNCTION:\n+            case Token.VAR:\n+            case Token.LP:\n+            case Token.CATCH:\n+                shouldDeclareOnGlobalThis = scope.isGlobal()\n+                        && (parentType == Token.VAR || parentType == Token.FUNCTION);\n+                break;\n+            case Token.PARAM_LIST:\n+                Preconditions.checkArgument(\n+                        parent.getParent().getType() == Token.FUNCTION,\n+                        \"Illegal function parameter\");\n+                break;\n+            case Token.CLASS:\n+                if (parent.getBooleanProp(Node.CONSTANT_PROPERTY)) {\n+                    inferred = false;\n+                    type = getNativeType(UNKNOWN_TYPE);\n+                }\n+                break;\n+            case Token.THIS:\n+                break;\n+            default:\n+                throw new IllegalStateException(\n+                        Token.name(parentType) + \" parent not supported in a NAME: \" + n);\n+        }\n+    } else {\n         Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n-      }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n+                n.getType() == Token.GETPROP\n+                        && (parent.getType() == Token.ASSIGN || parent.getType() == Token.EXPR_RESULT)\n+                        || NodeUtil.isAssignmentOp(parent));\n+\n+        // we must have a valid chain of qualified names, either all of them are quoted properties,\n+        // or none of them are.\n+        if (n.getLastChild().isString()) {\n+            Node maybeQualifiedName = n.getFirstChild();\n+            while (maybeQualifiedName.isGetProp()) {\n+                String propName = maybeQualifiedName.getLastChild().getString();\n+                if (!TokenStream.isJSIdentifier(propName)) {\n+                    return;\n+                }\n+                maybeQualifiedName = maybeQualifiedName.getFirstChild();\n+            }\n         }\n+    }\n+\n+    String variableName = n.getQualifiedName();\n+    if (variableName == null || variableName.isEmpty()) {\n+        return;\n+    }\n+\n+    // If n is a property, then we should really declare it in the\n+    // scope where the root object appears. This helps out people\n+    // who declare \"global\" names in an anonymous namespace.\n+    Scope scopeToDeclareIn = scope;\n+\n+    // declared in closest scope?\n+    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n+        if (parent.getFirstChild().getType() == Token.ASSIGN\n+                || parent.getFirstChild().getType() == Token.CALL\n+                || parent.getFirstChild().getType() == Token.DECLARE) {\n+            Var oldVar = scopeToDeclareIn.getVar(variableName);\n+            type = oldVar.getType();\n+            if (inferred && type != null && type.isUnknownType()) {\n+                type = null;\n+            }\n+        } else {\n+            Var oldVar = scopeToDeclareIn.getVar(variableName);\n+            validator.expectUndeclaredVariable(\n+                    sourceName, n, parent, oldVar, variableName, type);\n+        }\n+    } else {\n         CompilerInput input = compiler.getInput(sourceName);\n+        if (!inferred) {\n+            setDeferredType(n, type);\n+        }\n         scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n \n         if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n+            ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+            boolean isExtern = input.isExtern();\n+            if (inferred) {\n+                globalThis.defineInferredProperty(\n+                        variableName,\n+                        type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,\n+                        isExtern);\n+            } else {\n+                globalThis.defineDeclaredProperty(variableName, type, isExtern);\n+            }\n         }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n         if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n+            FunctionType fnType = (FunctionType) type;\n+            if (fnType.isConstructor() || fnType.isInterface()) {\n+                FunctionType superClassCtor = fnType.getSuperClassConstructor();\n+                scopeToDeclareIn.declare(\n+                        variableName + \".prototype\",\n+                        n,\n+                        fnType.getPrototype(),\n+                        input,\n+                        superClassCtor == null\n+                                || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n+            }\n         }\n-      }\n     }\n+}\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}