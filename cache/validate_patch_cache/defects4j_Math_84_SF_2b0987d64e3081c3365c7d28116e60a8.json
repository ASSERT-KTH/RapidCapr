{
    "patch": "                if (comparator.compare(expanded, reflectedSimplex[0]) < 0) {\n                    // accept the expanded simplex\n                    simplex = expandedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n                return;\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, original[0]) < 0) {\n                // accept the contracted simplex\n                simplex = simplexWithContractedVertex(original, contracted, comparator);\n            }\n\n            // check convergence\n            final RealPointValuePair currentBest = simplex[0];\n            final RealPointValuePair[] ordered = orderAllVertices(original, currentBest, comparator);\n            final double largestDifference = Math.abs(ordered[ordered.length - 1].getValue() - ordered[0].getValue());\n            final double relativeDifference = 2 * largestDifference / (Math.abs(ordered[ordered.length - 1].getValue()) + Math.abs(ordered[0].getValue()) + RHO);\n\n            if (relativeDifference < this.getRelativeThreshold() ||\n                largestDifference < this.getAbsoluteThreshold()) {",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..22c2f92f7 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,31 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                if (comparator.compare(expanded, reflectedSimplex[0]) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = expandedSimplex;\n+                } else {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n-\n                 return;\n-\n             }\n \n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n+            if (comparator.compare(contracted, original[0]) < 0) {\n                 // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+                simplex = simplexWithContractedVertex(original, contracted, comparator);\n             }\n \n-        }\n+            // check convergence\n+            final RealPointValuePair currentBest = simplex[0];\n+            final RealPointValuePair[] ordered = orderAllVertices(original, currentBest, comparator);\n+            final double largestDifference = Math.abs(ordered[ordered.length - 1].getValue() - ordered[0].getValue());\n+            final double relativeDifference = 2 * largestDifference / (Math.abs(ordered[ordered.length - 1].getValue()) + Math.abs(ordered[0].getValue()) + RHO);\n \n-    }\n+            if (relativeDifference < this.getRelativeThreshold() ||\n+                largestDifference < this.getAbsoluteThreshold()) {\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}