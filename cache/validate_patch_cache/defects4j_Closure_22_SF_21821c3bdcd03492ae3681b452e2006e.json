{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Check if this node is a root node and ignore it.\n    if (parent.getParent() == null) {\n      return;\n    }\n\n    boolean isTopLevel = NodeUtil.isTopLevel(n);\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean hasSideEffects = NodeUtil.mayHaveSideEffects(n, t.getCompiler());\n\n    // Ignore nodes already checked by child nodes or with results used.\n    if (isResultUsed) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. \n    // We already handle these cases when we visit the child, \n    // and the peephole passes will fix up the tree in more \n    // clever ways when these are removed.\n    if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.BLOCK || parent.getType() == Token.COMMA) {\n      return;\n    }\n\n    // Ignore nodes with side effects or top level assignments.\n    if (hasSideEffects || (isTopLevel && NodeUtil.isAssignmentOp(n))) {\n      return;\n    }\n\n    // Ignore FOR loop clauses.\n    if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n         n == parent.getFirstChild().getNext().getNext())) {\n      return;\n    }\n\n    // Ignore exported nodes and @nocollapse nodes.\n    if (n.getBooleanProp(Node.EXPORT_DEFAULT) || n.getBooleanProp(Node.NOCOLLAPSE_PROPERTY)) {\n      return;\n    }\n\n    // Check ancestors for blocks or expr results with side effect free assignments.\n    boolean isCandidate = false;\n    for (Node ancestor : parent.getAncestors()) {\n      int ancestorType = ancestor.getType();\n      if (ancestorType == Token.BLOCK || ancestorType == Token.EXPR_RESULT) {\n        if (!NodeUtil.mayHaveSideEffects(ancestor, t.getCompiler())) {\n          for (Node child : ancestor.children()) {\n            if (NodeUtil.isAssignmentOp(child) &&\n                !NodeUtil.mayHaveSideEffects(child, t.getCompiler())) {\n              isCandidate = true;\n              break;\n            }\n          }\n        }\n        if (isCandidate) {\n          break;\n        }\n      }\n    }\n\n    // Report warning for side effect free statements without visible effects.\n    if (!isCandidate) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (NodeUtil.isSimpleOperatorType(n.getType())) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex b9aa412c..87bda3f2 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,7 +81,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public void visit(NodeTraversal t, Node n, Node parent) {\n     // VOID nodes appear when there are extra semicolons at the BLOCK level.\n     // I've been unable to think of any cases where this indicates a bug,\n     // and apparently some people like keeping these semicolons around,\n@@ -95,59 +95,76 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n       return;\n     }\n \n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (parent.getType() == Token.COMMA) {\n-      Node gramps = parent.getParent();\n-      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n+    // Check if this node is a root node and ignore it.\n+    if (parent.getParent() == null) {\n       return;\n-        }\n     }\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA)\n-            continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n-            return;\n-          else\n-            break;\n-        }\n-      }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n-           n == parent.getFirstChild().getNext().getNext())) {\n-      } else {\n+    boolean isTopLevel = NodeUtil.isTopLevel(n);\n+    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n+    boolean hasSideEffects = NodeUtil.mayHaveSideEffects(n, t.getCompiler());\n+\n+    // Ignore nodes already checked by child nodes or with results used.\n+    if (isResultUsed) {\n       return;\n-      }\n     }\n \n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (!isResultUsed &&\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n-        return;\n-      } else if (n.isExprResult()) {\n-        return;\n+    // Do not try to remove a block or an expr result. \n+    // We already handle these cases when we visit the child, \n+    // and the peephole passes will fix up the tree in more \n+    // clever ways when these are removed.\n+    if (parent.getType() == Token.EXPR_RESULT || parent.getType() == Token.BLOCK || parent.getType() == Token.COMMA) {\n+      return;\n+    }\n+\n+    // Ignore nodes with side effects or top level assignments.\n+    if (hasSideEffects || (isTopLevel && NodeUtil.isAssignmentOp(n))) {\n+      return;\n+    }\n+\n+    // Ignore FOR loop clauses.\n+    if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n+         n == parent.getFirstChild().getNext().getNext())) {\n+      return;\n+    }\n+\n+    // Ignore exported nodes and @nocollapse nodes.\n+    if (n.getBooleanProp(Node.EXPORT_DEFAULT) || n.getBooleanProp(Node.NOCOLLAPSE_PROPERTY)) {\n+      return;\n+    }\n+\n+    // Check ancestors for blocks or expr results with side effect free assignments.\n+    boolean isCandidate = false;\n+    for (Node ancestor : parent.getAncestors()) {\n+      int ancestorType = ancestor.getType();\n+      if (ancestorType == Token.BLOCK || ancestorType == Token.EXPR_RESULT) {\n+        if (!NodeUtil.mayHaveSideEffects(ancestor, t.getCompiler())) {\n+          for (Node child : ancestor.children()) {\n+            if (NodeUtil.isAssignmentOp(child) &&\n+                !NodeUtil.mayHaveSideEffects(child, t.getCompiler())) {\n+              isCandidate = true;\n+              break;\n+            }\n+          }\n+        }\n+        if (isCandidate) {\n+          break;\n+        }\n       }\n+    }\n+\n+    // Report warning for side effect free statements without visible effects.\n+    if (!isCandidate) {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n         msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n+      } else if (NodeUtil.isSimpleOperatorType(n.getType())) {\n         msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n             \"' operator is not being used.\";\n       }\n \n       t.getCompiler().report(\n           t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n       if (!NodeUtil.isStatement(n)) {\n         problemNodes.add(n);\n       }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}