{
    "patch": "        for (int i = 0; i < count; i++) {\n            SavedField savedField = savedFields[i];\n            try {\n                millis = savedField.set(millis, resetFields);\n                if (i + 1 < count) {\n                    DateTimeField currentField = savedField.iField;\n                    DateTimeField nextField = savedFields[i + 1].iField;\n                    if (currentField.isSupported() && nextField.isSupported()) {\n                        long currentValue = currentField.get(millis);\n                        long nextValue = nextField.get(millis);\n                        if (nextField.isStrictlyAfter(currentField)) {\n                            nextValue = nextField.roundFloor(nextValue);\n                        }\n                        if (currentValue > nextValue) {\n                            throw new IllegalArgumentException(String.format(\"Cannot parse \\\"%s\\\": value of \\\"%s\\\" (%d) cannot be more than value of \\\"%s\\\" (%d).\",\n                             text, savedField.iField.getName(), currentValue, savedFields[i+1].iField.getName(), nextValue));\n                        }\n                    }\n                }\n            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n                }\n                if (DateTimeFieldType.year().equals(savedField.iField.getType())) {\n                    long instant = savedField.iField.set(0L, iDefaultYear);\n                    millis = savedField.iField.set(instant, savedField.iValue);\n                } else {\n                    throw e;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..4eb161bd 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,34 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        for (int i = 0; i < count; i++) {\n+            SavedField savedField = savedFields[i];\n+            try {\n+                millis = savedField.set(millis, resetFields);\n+                if (i + 1 < count) {\n+                    DateTimeField currentField = savedField.iField;\n+                    DateTimeField nextField = savedFields[i + 1].iField;\n+                    if (currentField.isSupported() && nextField.isSupported()) {\n+                        long currentValue = currentField.get(millis);\n+                        long nextValue = nextField.get(millis);\n+                        if (nextField.isStrictlyAfter(currentField)) {\n+                            nextValue = nextField.roundFloor(nextValue);\n+                        }\n+                        if (currentValue > nextValue) {\n+                            throw new IllegalArgumentException(String.format(\"Cannot parse \\\"%s\\\": value of \\\"%s\\\" (%d) cannot be more than value of \\\"%s\\\" (%d).\",\n+                             text, savedField.iField.getName(), currentValue, savedFields[i+1].iField.getName(), nextValue));\n+                        }\n+                    }\n+                }\n+            } catch (IllegalFieldValueException e) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+                }\n+                if (DateTimeFieldType.year().equals(savedField.iField.getType())) {\n+                    long instant = savedField.iField.set(0L, iDefaultYear);\n+                    millis = savedField.iField.set(instant, savedField.iValue);\n+                } else {\n+                    throw e;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}