{
    "patch": "            char c = str.charAt(i);\n            String entityName = this.entityName(c);\n            if (entityName == null) {\n                if (c > 0x7F) {\n                    writer.write(\"&#\");\n                    writer.write(Integer.toString(c, 10));\n                    writer.write(';');\n                } else if (c > 0xD7FF && c < 0xE000) {\n                    // code point is a high-surrogate, see if there is a next character\n                    if (i + 1 < len) {\n                        char d = str.charAt(i + 1);\n                        // test if the next character is a low-surrogate, if yes:\n                        if (d > 0xDFFF && d < 0xE000) {\n                            // write high surrogate character as numeric entity:\n                            int codePoint = Character.toCodePoint(c, d);\n                            writer.write(\"&#\");\n                            writer.write(Integer.toString(codePoint, 10));\n                            writer.write(';');\n                            i++; // skip the next character\n                        } else {\n                            // next character is not a low-surrogate, write high-surrogate as is:\n                            writer.write(c);\n                        }\n                    } else {\n                        // we are at the end of the string and the high-surrogate is not paired with a low-surrogate\n                        writer.write(c);\n                    }\n                } else {\n                    // write character as is:",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/Entities.java b/src/java/org/apache/commons/lang/Entities.java\nindex 900e1a89..9165e9a5 100644\n--- a/src/java/org/apache/commons/lang/Entities.java\n+++ b/src/java/org/apache/commons/lang/Entities.java\n@@ -822,9 +822,6 @@ class Entities {\n      * @see #escape(String)\n      * @see Writer\n      */\n-    public void escape(Writer writer, String str) throws IOException {\n-        int len = str.length();\n-        for (int i = 0; i < len; i++) {\n             char c = str.charAt(i);\n             String entityName = this.entityName(c);\n             if (entityName == null) {\n@@ -832,16 +829,28 @@ class Entities {\n                     writer.write(\"&#\");\n                     writer.write(Integer.toString(c, 10));\n                     writer.write(';');\n+                } else if (c > 0xD7FF && c < 0xE000) {\n+                    // code point is a high-surrogate, see if there is a next character\n+                    if (i + 1 < len) {\n+                        char d = str.charAt(i + 1);\n+                        // test if the next character is a low-surrogate, if yes:\n+                        if (d > 0xDFFF && d < 0xE000) {\n+                            // write high surrogate character as numeric entity:\n+                            int codePoint = Character.toCodePoint(c, d);\n+                            writer.write(\"&#\");\n+                            writer.write(Integer.toString(codePoint, 10));\n+                            writer.write(';');\n+                            i++; // skip the next character\n+                        } else {\n+                            // next character is not a low-surrogate, write high-surrogate as is:\n+                            writer.write(c);\n+                        }\n+                    } else {\n+                        // we are at the end of the string and the high-surrogate is not paired with a low-surrogate\n+                        writer.write(c);\n+                    }\n                 } else {\n-                    writer.write(c);\n-                }\n-            } else {\n-                writer.write('&');\n-                writer.write(entityName);\n-                writer.write(';');\n-            }\n-        }\n-    }\n+                    // write character as is:\n \n     /**\n      * <p>",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}