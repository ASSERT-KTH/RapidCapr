{
    "patch": "public boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n  ArrowType that = (ArrowType) other;\n\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  boolean thisHasVarArgs = parameters.hasVarArgs();\n  boolean thatHasVarArgs = that.parameters.hasVarArgs();\n  int thisMinArgs = parameters.getMinArguments();\n  int thatMinArgs = that.parameters.getMinArguments();\n\n  if (thisHasVarArgs && thatHasVarArgs && thisMinArgs > thatMinArgs) {\n    return false;\n  }\n\n  if (thisMinArgs > thatMinArgs || parameters.countOfRequiredParameters() < thatMinArgs) {\n    return false;\n  }\n\n  if (thisHasVarArgs && !thatHasVarArgs) {\n    parameters = parameters.withoutVarArgs();\n  }\n\n  if (thisHasVarArgs || thatHasVarArgs) {\n    // Check that rest parameter types are compatible\n    // First handle non-rest parameters\n    if (parameters.hasNonVarArgsRequiredParameter()) {\n      Node curr = parameters.getFirstChild();\n      Node thatCurr = that.parameters.getFirstChild();\n      for (int i = 0; i < thatMinArgs; i++) {\n        JSType expectedParamType = thatCurr.getJSType();\n        if (expectedParamType == null) {\n          thatCurr = thatCurr.getNext();\n          continue;\n        }\n        JSType actualParamType = curr.getJSType();\n        if (actualParamType == null) {\n          curr = curr.getNext();\n          continue;\n        }\n        if (!expectedParamType.isSubtype(actualParamType)) {\n          return false;\n        }\n        curr = curr.getNext();\n        thatCurr = thatCurr.getNext();\n      }\n    }\n\n    // Now handle rest parameters\n    if (thatHasVarArgs) {\n      int numRestParamsAppliedTo = parameters.getChildCount();\n      JSType expectedRestParamType = that.parameters.getRestParameterType();\n      for (int i = thisMinArgs; i < numRestParamsAppliedTo; i++) {\n        JSType actualParamType = parameters.getChildAtIndex(i).getJSType();\n        if (actualParamType == null) {\n          continue;\n        }\n        if (!expectedRestParamType.isSubtype(actualParamType)) {\n          return false;\n        }\n      }\n    }\n  } else {\n    for (int i = 0; i < thatMinArgs; i++) {\n      JSType expectedParamType = that.parameters.getChildAtIndex(i).getJSType();\n      JSType actualParamType = parameters.getChildAtIndex(i).getJSType();\n      if (expectedParamType != null && actualParamType != null) {\n        if (!expectedParamType.isSubtype(actualParamType)) {\n          return false;\n        }\n      }\n      if (parameters.getChildAtIndex(i).isOptional()) {\n        parameters = parameters.withoutChild(parameters.getChildAtIndex(i));\n      }\n    }\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..ed45bf30 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,82 +77,90 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n-    if (!(other instanceof ArrowType)) {\n-      return false;\n-    }\n+public boolean isSubtype(JSType other) {\n+  if (!(other instanceof ArrowType)) {\n+    return false;\n+  }\n+  ArrowType that = (ArrowType) other;\n \n-    ArrowType that = (ArrowType) other;\n+  if (!this.returnType.isSubtype(that.returnType)) {\n+    return false;\n+  }\n \n-    // This is described in Draft 2 of the ES4 spec,\n-    // Section 3.4.7: Subtyping Function Types.\n+  boolean thisHasVarArgs = parameters.hasVarArgs();\n+  boolean thatHasVarArgs = that.parameters.hasVarArgs();\n+  int thisMinArgs = parameters.getMinArguments();\n+  int thatMinArgs = that.parameters.getMinArguments();\n \n-    // this.returnType <: that.returnType (covariant)\n-    if (!this.returnType.isSubtype(that.returnType)) {\n-      return false;\n-    }\n+  if (thisHasVarArgs && thatHasVarArgs && thisMinArgs > thatMinArgs) {\n+    return false;\n+  }\n \n-    // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n-    Node thisParam = parameters.getFirstChild();\n-    Node thatParam = that.parameters.getFirstChild();\n-    while (thisParam != null && thatParam != null) {\n-      JSType thisParamType = thisParam.getJSType();\n-      JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n+  if (thisMinArgs > thatMinArgs || parameters.countOfRequiredParameters() < thatMinArgs) {\n+    return false;\n+  }\n+\n+  if (thisHasVarArgs && !thatHasVarArgs) {\n+    parameters = parameters.withoutVarArgs();\n+  }\n+\n+  if (thisHasVarArgs || thatHasVarArgs) {\n+    // Check that rest parameter types are compatible\n+    // First handle non-rest parameters\n+    if (parameters.hasNonVarArgsRequiredParameter()) {\n+      Node curr = parameters.getFirstChild();\n+      Node thatCurr = that.parameters.getFirstChild();\n+      for (int i = 0; i < thatMinArgs; i++) {\n+        JSType expectedParamType = thatCurr.getJSType();\n+        if (expectedParamType == null) {\n+          thatCurr = thatCurr.getNext();\n+          continue;\n+        }\n+        JSType actualParamType = curr.getJSType();\n+        if (actualParamType == null) {\n+          curr = curr.getNext();\n+          continue;\n+        }\n+        if (!expectedParamType.isSubtype(actualParamType)) {\n           return false;\n         }\n+        curr = curr.getNext();\n+        thatCurr = thatCurr.getNext();\n       }\n+    }\n \n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n-\n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n-\n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n-        thisParam = thisParam.getNext();\n+    // Now handle rest parameters\n+    if (thatHasVarArgs) {\n+      int numRestParamsAppliedTo = parameters.getChildCount();\n+      JSType expectedRestParamType = that.parameters.getRestParameterType();\n+      for (int i = thisMinArgs; i < numRestParamsAppliedTo; i++) {\n+        JSType actualParamType = parameters.getChildAtIndex(i).getJSType();\n+        if (actualParamType == null) {\n+          continue;\n+        }\n+        if (!expectedRestParamType.isSubtype(actualParamType)) {\n+          return false;\n+        }\n       }\n-      if (!thatIsVarArgs) {\n-        thatParam = thatParam.getNext();\n+    }\n+  } else {\n+    for (int i = 0; i < thatMinArgs; i++) {\n+      JSType expectedParamType = that.parameters.getChildAtIndex(i).getJSType();\n+      JSType actualParamType = parameters.getChildAtIndex(i).getJSType();\n+      if (expectedParamType != null && actualParamType != null) {\n+        if (!expectedParamType.isSubtype(actualParamType)) {\n+          return false;\n+        }\n       }\n-\n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n+      if (parameters.getChildAtIndex(i).isOptional()) {\n+        parameters = parameters.withoutChild(parameters.getChildAtIndex(i));\n       }\n     }\n-\n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n-\n-    return true;\n   }\n \n+  return true;\n+}\n+\n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter\n    *     spec.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}