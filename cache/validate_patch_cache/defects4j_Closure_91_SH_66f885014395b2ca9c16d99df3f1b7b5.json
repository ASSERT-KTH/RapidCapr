{
    "patch": "      boolean isLentToPrototype = parent != null &&\n          (NodeUtil.isGet(parent) &&\n              NodeUtil.isGet(parent.getFirstChild()) &&\n              parent.getFirstChild().getLastChild().getString().equals(\"prototype\"));\n      boolean isLentToScopedEval = parent != null &&\n          (NodeUtil.isGet(parent) &&\n              NodeUtil.isGet(parent.getFirstChild()) &&\n              parent.getFirstChild().getLastChild().getString().equals(\"$jscomp$scopedEval\"));\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (isLentToPrototype || isLentToScopedEval) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..9c9747fb 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,17 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      boolean isLentToPrototype = parent != null &&\n+          (NodeUtil.isGet(parent) &&\n+              NodeUtil.isGet(parent.getFirstChild()) &&\n+              parent.getFirstChild().getLastChild().getString().equals(\"prototype\"));\n+      boolean isLentToScopedEval = parent != null &&\n+          (NodeUtil.isGet(parent) &&\n+              NodeUtil.isGet(parent.getFirstChild()) &&\n+              parent.getFirstChild().getLastChild().getString().equals(\"$jscomp$scopedEval\"));\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (isLentToPrototype || isLentToScopedEval) {\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}