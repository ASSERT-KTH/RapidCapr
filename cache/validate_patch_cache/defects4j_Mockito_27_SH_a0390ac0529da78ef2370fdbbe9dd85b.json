{
    "patch": "MockHandler<T> oldMockHandler = getMockHandler(mock);\nMockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\nMethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) Mockito.withSettings().defaultAnswer(Mockito.RETURNS_DEFAULTS));\n\nInvocationHandler currentHandler = Proxy.getInvocationHandler(mock);\nif (!(currentHandler instanceof InterceptingMockHandler)) {\n    throw new RuntimeException(\"Unexpected handler type: \" + currentHandler.getClass().getSimpleName());\n}\nInterceptingMockHandler<T> interceptingMockHandler = (InterceptingMockHandler<T>) currentHandler;\ninterceptingMockHandler.setHandlerFilter(newFilter);",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..01b06568e 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,19 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+MockHandler<T> oldMockHandler = getMockHandler(mock);\n+MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n+MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) Mockito.withSettings().defaultAnswer(Mockito.RETURNS_DEFAULTS));\n+\n+InvocationHandler currentHandler = Proxy.getInvocationHandler(mock);\n+if (!(currentHandler instanceof InterceptingMockHandler)) {\n+    throw new RuntimeException(\"Unexpected handler type: \" + currentHandler.getClass().getSimpleName());\n+}\n+InterceptingMockHandler<T> interceptingMockHandler = (InterceptingMockHandler<T>) currentHandler;\n+interceptingMockHandler.setHandlerFilter(newFilter);\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}