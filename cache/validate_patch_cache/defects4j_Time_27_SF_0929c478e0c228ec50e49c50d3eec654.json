{
    "patch": "        // separate handling of leading separator (if present) and remaining pairs\n        // bug fix [2495455]\n        if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        }\n        int size = elementPairs.size();\n        boolean leadingSeparator = size >= 2 && elementPairs.get(0) instanceof Separator;\n        Object[] comp = createComposite(leadingSeparator ? elementPairs.subList(1, size) : elementPairs);\n        if (leadingSeparator && comp[0] == null && comp[1] == null) {\n            // a separator by itself is illegal\n            throw new IllegalArgumentException(\"No valid printer or parser found in composite\");\n        }\n        SeparatedParser separatedParser = null;\n        if (leadingSeparator && comp[1] instanceof PeriodParser) {\n            // determine the parser if there is a leading separator\n            separatedParser = new SeparatedParser(((Separator) elementPairs.get(0)).getSeparator(), (PeriodParser) comp[1]);\n            comp[1] = separatedParser;\n        }\n        PeriodPrinter printer = (comp[0] instanceof PeriodPrinter ? (PeriodPrinter) comp[0] : null);\n        PeriodParser parser = (comp[1] instanceof PeriodParser ? (PeriodParser) comp[1] : null);\n        if (notPrinter) {\n            if (parser == null) {\n                throw new IllegalStateException(\"Builder has created a parser but not a printer\");\n            }\n            return new PeriodFormatter(null, parser);\n        } else if (notParser) {\n            if (printer == null) {\n                throw new IllegalStateException(\"Builder has created a printer but not a parser\");\n            }\n            return new PeriodFormatter(printer, null);\n        } else {\n            if (printer == null && parser == null) {\n                throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n            }\n            if (printer instanceof Composite && ((Composite) printer).size() == 0) {\n                printer = null;\n            }\n            if (parser instanceof Composite && ((Composite) parser).size() == 0) {\n                parser = null;\n            }\n            // determine the formatter\n            if (printer != null && parser != null) {\n                if (printer == parser) {\n                    return new PeriodFormatter(printer, parser);\n                } else {\n                    if (separatedParser != null) {\n                        return new PeriodFormatter(printer, new SeparatedParser(separatedParser, parser));\n                    } else {\n                        return new PeriodFormatter(printer, new MatchingParser(parser, printer));\n                    }\n                }\n            } else {\n                return new PeriodFormatter(printer, parser);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..b28a382f 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,60 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+        // separate handling of leading separator (if present) and remaining pairs\n+        // bug fix [2495455]\n         if (notPrinter && notParser) {\n             throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n         }\n         int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n+        boolean leadingSeparator = size >= 2 && elementPairs.get(0) instanceof Separator;\n+        Object[] comp = createComposite(leadingSeparator ? elementPairs.subList(1, size) : elementPairs);\n+        if (leadingSeparator && comp[0] == null && comp[1] == null) {\n+            // a separator by itself is illegal\n+            throw new IllegalArgumentException(\"No valid printer or parser found in composite\");\n+        }\n+        SeparatedParser separatedParser = null;\n+        if (leadingSeparator && comp[1] instanceof PeriodParser) {\n+            // determine the parser if there is a leading separator\n+            separatedParser = new SeparatedParser(((Separator) elementPairs.get(0)).getSeparator(), (PeriodParser) comp[1]);\n+            comp[1] = separatedParser;\n+        }\n+        PeriodPrinter printer = (comp[0] instanceof PeriodPrinter ? (PeriodPrinter) comp[0] : null);\n+        PeriodParser parser = (comp[1] instanceof PeriodParser ? (PeriodParser) comp[1] : null);\n         if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            if (parser == null) {\n+                throw new IllegalStateException(\"Builder has created a parser but not a printer\");\n+            }\n+            return new PeriodFormatter(null, parser);\n         } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            if (printer == null) {\n+                throw new IllegalStateException(\"Builder has created a printer but not a parser\");\n+            }\n+            return new PeriodFormatter(printer, null);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n-        }\n-    }\n+            if (printer == null && parser == null) {\n+                throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+            }\n+            if (printer instanceof Composite && ((Composite) printer).size() == 0) {\n+                printer = null;\n+            }\n+            if (parser instanceof Composite && ((Composite) parser).size() == 0) {\n+                parser = null;\n+            }\n+            // determine the formatter\n+            if (printer != null && parser != null) {\n+                if (printer == parser) {\n+                    return new PeriodFormatter(printer, parser);\n+                } else {\n+                    if (separatedParser != null) {\n+                        return new PeriodFormatter(printer, new SeparatedParser(separatedParser, parser));\n+                    } else {\n+                        return new PeriodFormatter(printer, new MatchingParser(parser, printer));\n+                    }\n+                }\n+            } else {\n+                return new PeriodFormatter(printer, parser);\n+            }\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}