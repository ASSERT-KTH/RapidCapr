{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n.isEmpty() ||\n      n.isComma() ||\n      n.isFunction() ||\n      n.isExport()) {\n    // Do not touch export nodes, function nodes, or empty/extra semicolon blocks.\n    return;\n  }\n\n  if (parent == null) {\n    // Root node, do not do anything.\n    return;\n  }\n\n  // Do not try to remove an expression result, an object destructuring assignment, a\n  // default value assignment, or an exported object accessor. We already handle these\n  // cases when we visit the child, and the peephole passes will fix up the tree in more\n  // clever ways when these are removed.\n  if (n.isExprResult() ||\n      n.isObjectPattern() ||\n      n.isDefaultValue() ||\n     (n.isStringKey() && n.getParent().isObjectPattern() && n.hasChildren())) {\n    return;\n  }\n\n  // This no-op statement was there so that JSDoc information could\n  // be attached to the name. This check should not complain about it.\n  if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n    return;\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n  if (parent.getType() == Token.COMMA &&\n      (!n.isComma() || isResultUsed)) {\n    // The node is part of a comma-separated expression, but its result is used or\n    // it is not a comma node.\n    return;\n  }\n  if (parent.getType() == Token.EXPR_RESULT &&\n      (n.isAssign() ||\n       n.isDelProp() ||\n       n.isInc() ||\n       n.isDec() ||\n       n.isGetProp() && n.getFirstChild().getType() == Token.EXPORT ||\n       n.isName() && n.getString().equals(\"undefined\") && !isResultUsed)) {\n    // The node is part of an expression statement where the result is not used or it\n    // is an internal statement that should not be removed (assignment, delete property,\n    // increment or decrement, or the undefined value).\n    return;\n  }\n  if (n.isGetProp() &&\n      n.getFirstChild().getType() == Token.EXPORT &&\n      parent.getType() == Token.EXPORT &&\n      parent.getParent().getType() == Token.EXPORT_SPEC &&\n      parent.getParent().getParent().getType() == Token.EXPORT_SPEC_LIST &&\n      t.getScope().isDeclared(n.getLastChild().getString(), false)) {\n    // The node is an exported property and has a corresponding exported object\n    // accessor that should not be removed.\n    return;\n  }\n  if (!isSimpleOp && NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n    // The node may have side effects and should not be removed.\n    return;\n  }\n\n  String msg = \"This code lacks side-effects. Is there a bug?\";\n  if (n.isString() || n.isTemplateLit()) {\n    msg = \"Is there a missing '+' on the previous line?\";\n  } else if (isSimpleOp) {\n    msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n        \"' operator is not being used.\";\n  }\n  t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..0b6267c0 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,71 +81,81 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n-      return;\n-    }\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n.isEmpty() ||\n+      n.isComma() ||\n+      n.isFunction() ||\n+      n.isExport()) {\n+    // Do not touch export nodes, function nodes, or empty/extra semicolon blocks.\n+    return;\n+  }\n \n-    if (parent == null) {\n-      return;\n-    }\n+  if (parent == null) {\n+    // Root node, do not do anything.\n+    return;\n+  }\n \n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult()) {\n-      return;\n-    }\n+  // Do not try to remove an expression result, an object destructuring assignment, a\n+  // default value assignment, or an exported object accessor. We already handle these\n+  // cases when we visit the child, and the peephole passes will fix up the tree in more\n+  // clever ways when these are removed.\n+  if (n.isExprResult() ||\n+      n.isObjectPattern() ||\n+      n.isDefaultValue() ||\n+     (n.isStringKey() && n.getParent().isObjectPattern() && n.hasChildren())) {\n+    return;\n+  }\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n-      return;\n-    }\n+  // This no-op statement was there so that JSDoc information could\n+  // be attached to the name. This check should not complain about it.\n+  if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n+    return;\n+  }\n \n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (parent.getType() == Token.COMMA) {\n-      if (isResultUsed) {\n-        return;\n-      }\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n-        }\n-      }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n-        return;\n-      }\n-    }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n-      }\n+  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n+  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n+  if (parent.getType() == Token.COMMA &&\n+      (!n.isComma() || isResultUsed)) {\n+    // The node is part of a comma-separated expression, but its result is used or\n+    // it is not a comma node.\n+    return;\n+  }\n+  if (parent.getType() == Token.EXPR_RESULT &&\n+      (n.isAssign() ||\n+       n.isDelProp() ||\n+       n.isInc() ||\n+       n.isDec() ||\n+       n.isGetProp() && n.getFirstChild().getType() == Token.EXPORT ||\n+       n.isName() && n.getString().equals(\"undefined\") && !isResultUsed)) {\n+    // The node is part of an expression statement where the result is not used or it\n+    // is an internal statement that should not be removed (assignment, delete property,\n+    // increment or decrement, or the undefined value).\n+    return;\n+  }\n+  if (n.isGetProp() &&\n+      n.getFirstChild().getType() == Token.EXPORT &&\n+      parent.getType() == Token.EXPORT &&\n+      parent.getParent().getType() == Token.EXPORT_SPEC &&\n+      parent.getParent().getParent().getType() == Token.EXPORT_SPEC_LIST &&\n+      t.getScope().isDeclared(n.getLastChild().getString(), false)) {\n+    // The node is an exported property and has a corresponding exported object\n+    // accessor that should not be removed.\n+    return;\n+  }\n+  if (!isSimpleOp && NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n+    // The node may have side effects and should not be removed.\n+    return;\n+  }\n \n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n-      }\n-    }\n+  String msg = \"This code lacks side-effects. Is there a bug?\";\n+  if (n.isString() || n.isTemplateLit()) {\n+    msg = \"Is there a missing '+' on the previous line?\";\n+  } else if (isSimpleOp) {\n+    msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n+        \"' operator is not being used.\";\n   }\n+  t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n+}\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}