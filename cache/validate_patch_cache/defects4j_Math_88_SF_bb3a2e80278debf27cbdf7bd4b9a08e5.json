{
    "patch": "protected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    Integer basicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n    double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n    for (int i = 0; i < coefficients.length; i++) {\n        basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        if (basicRow == null) {\n            coefficients[i] = 0.0;\n        } else {\n            coefficients[i] = getEntry(basicRow, getRhsOffset());\n            // Check if multiple variables can take a given value. Use only the first variable.\n            int j = getNumObjectiveFunctions();\n            while (j < getNumObjectiveFunctions() + i && tableau.getEntry(basicRow, j) == 0) {\n                j++;\n            }\n            if (j < getNumObjectiveFunctions() + i) {\n                double value = coefficients[j - getNumObjectiveFunctions()] * tableau.getEntry(basicRow, j);\n                coefficients[i] -= value;\n            }\n        }\n        if (!restrictToNonNegative) {\n            coefficients[i] -= mostNegative;\n        }\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f2a..133e7449d 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -321,28 +321,32 @@ class SimplexTableau implements Serializable {\n      * </p>\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n-        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-        Integer basicRow =\n-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n-        for (int i = 0; i < coefficients.length; i++) {\n-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n-                // if multiple variables can take a given value \n-                // then we choose the first and set the rest equal to 0\n-                coefficients[i] =\n-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                    (restrictToNonNegative ? 0 : mostNegative);\n-            if (basicRow != null) {\n-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n-                    if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n-                    }\n-                }\n+protected RealPointValuePair getSolution() {\n+    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n+    Integer basicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n+    double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n+    for (int i = 0; i < coefficients.length; i++) {\n+        basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n+        if (basicRow == null) {\n+            coefficients[i] = 0.0;\n+        } else {\n+            coefficients[i] = getEntry(basicRow, getRhsOffset());\n+            // Check if multiple variables can take a given value. Use only the first variable.\n+            int j = getNumObjectiveFunctions();\n+            while (j < getNumObjectiveFunctions() + i && tableau.getEntry(basicRow, j) == 0) {\n+                j++;\n+            }\n+            if (j < getNumObjectiveFunctions() + i) {\n+                double value = coefficients[j - getNumObjectiveFunctions()] * tableau.getEntry(basicRow, j);\n+                coefficients[i] -= value;\n             }\n         }\n-        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+        if (!restrictToNonNegative) {\n+            coefficients[i] -= mostNegative;\n+        }\n     }\n+    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+}\n \n     /**\n      * Subtracts a multiple of one row from another.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<8.0> but was:<6.0>",
    "test_result": "FAIL"
}