{
    "patch": "public static double regularizedGammaQ(double a, double x) {\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException(\"Invalid argument for regularizedGammaQ function.\");\n    }\n    double y = x / a;\n    double g = Math.exp(-x + a * Math.log(x) - StatUtils.logGamma(a));\n    if (x >= a + 1.0) {\n        double f = 1.0;\n        double c = 1.0;\n        double s = f;\n        double z = 1.0 - y;\n        while (f >= Double.MIN_VALUE * s) {\n            c += 1.0;\n            f *= z / c;\n            s += f;\n        }\n        return g * s;\n    } else {\n        double f = 1.0 + y - a;\n        double c = 0.0;\n        double pkm2 = 1.0;\n        double qkm2 = y;\n        double pkm1 = y + 1.0 - a;\n        double qkm1 = y;\n        double ans = pkm1;\n        double r = ans;\n        while (ans >= Double.MIN_VALUE * r) {\n            c += 1.0;\n            double temp = ((c - a) * pkm1 + (2.0 * c + 1.0 - y) * pkm2) / c;\n            pkm2 = pkm1;\n            pkm1 = temp;\n            temp = ((c - a) * qkm1 + (2.0 * c + 1.0 - y) * qkm2) / c;\n            qkm2 = qkm1;\n            qkm1 = temp;\n            if (qkm1 != 0) {\n                r = pkm1 / qkm1;\n                ans = r * ans;\n            } else {\n                ans = pkm1;\n            }\n        }\n        return 1.0 - g * ans;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..8654bdc36 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,50 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaQ(double a, double x) {\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException(\"Invalid argument for regularizedGammaQ function.\");\n+    }\n+    double y = x / a;\n+    double g = Math.exp(-x + a * Math.log(x) - StatUtils.logGamma(a));\n+    if (x >= a + 1.0) {\n+        double f = 1.0;\n+        double c = 1.0;\n+        double s = f;\n+        double z = 1.0 - y;\n+        while (f >= Double.MIN_VALUE * s) {\n+            c += 1.0;\n+            f *= z / c;\n+            s += f;\n+        }\n+        return g * s;\n+    } else {\n+        double f = 1.0 + y - a;\n+        double c = 0.0;\n+        double pkm2 = 1.0;\n+        double qkm2 = y;\n+        double pkm1 = y + 1.0 - a;\n+        double qkm1 = y;\n+        double ans = pkm1;\n+        double r = ans;\n+        while (ans >= Double.MIN_VALUE * r) {\n+            c += 1.0;\n+            double temp = ((c - a) * pkm1 + (2.0 * c + 1.0 - y) * pkm2) / c;\n+            pkm2 = pkm1;\n+            pkm1 = temp;\n+            temp = ((c - a) * qkm1 + (2.0 * c + 1.0 - y) * qkm2) / c;\n+            qkm2 = qkm1;\n+            qkm1 = temp;\n+            if (qkm1 != 0) {\n+                r = pkm1 / qkm1;\n+                ans = r * ans;\n+            } else {\n+                ans = pkm1;\n+            }\n+        }\n+        return 1.0 - g * ans;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}