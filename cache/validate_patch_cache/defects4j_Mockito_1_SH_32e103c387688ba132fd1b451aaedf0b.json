{
    "patch": "    public void captureArgumentsFrom(Invocation invocation) {\n        Object[] rawArguments = invocation.getRawArguments();\n        for (int i = 0; i < matchers.size() && i < rawArguments.length; i++) {\n            Matcher m = matchers.get(i);\n            if (m instanceof CapturesArguments) {\n                Object arg;\n                if (isVariableArgument(invocation, i) && isVarargMatcher(m)) {\n                    Object varArgObject = rawArguments[i];\n                    if (varArgObject != null && varArgObject.getClass().isArray()) {\n                        int varArgLength = Array.getLength(varArgObject);\n                        Object[] varArgs = new Object[varArgLength];\n                        for (int j = 0; j < varArgLength; j++) {\n                            varArgs[j] = Array.get(varArgObject, j);\n                        }\n                        arg = varArgs;\n                    } else {\n                        arg = new Object[]{varArgObject};\n                    }\n                } else {\n                    arg = rawArguments[i];\n                }\n                ((CapturesArguments) m).captureFrom(arg);\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..c9be8bcd4 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,31 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+    public void captureArgumentsFrom(Invocation invocation) {\n+        Object[] rawArguments = invocation.getRawArguments();\n+        for (int i = 0; i < matchers.size() && i < rawArguments.length; i++) {\n+            Matcher m = matchers.get(i);\n+            if (m instanceof CapturesArguments) {\n+                Object arg;\n+                if (isVariableArgument(invocation, i) && isVarargMatcher(m)) {\n+                    Object varArgObject = rawArguments[i];\n+                    if (varArgObject != null && varArgObject.getClass().isArray()) {\n+                        int varArgLength = Array.getLength(varArgObject);\n+                        Object[] varArgs = new Object[varArgLength];\n+                        for (int j = 0; j < varArgLength; j++) {\n+                            varArgs[j] = Array.get(varArgObject, j);\n+                        }\n+                        arg = varArgs;\n+                    } else {\n+                        arg = new Object[]{varArgObject};\n+                    }\n+                } else {\n+                    arg = rawArguments[i];\n+                }\n+                ((CapturesArguments) m).captureFrom(arg);\n+            }\n+        }\n+    }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}