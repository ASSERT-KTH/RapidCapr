{
    "patch": "        // Make sure this assignment is not in a loop or a nested function.\n        BasicBlock currentBlock = ref.getBasicBlock();\n        while (currentBlock != null) {\n          if (currentBlock.isFunction) {\n            return currentBlock == ref.getBasicBlock().getParent();\n          } else if (currentBlock.isLoop) {\n            return false;\n          }\n          currentBlock = currentBlock.getParent();\n        }\n\n        return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..9fd45358 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,18 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        // Make sure this assignment is not in a loop or a nested function.\n+        BasicBlock currentBlock = ref.getBasicBlock();\n+        while (currentBlock != null) {\n+          if (currentBlock.isFunction) {\n+            return currentBlock == ref.getBasicBlock().getParent();\n+          } else if (currentBlock.isLoop) {\n+            return false;\n+          }\n+          currentBlock = currentBlock.getParent();\n+        }\n+\n+        return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}