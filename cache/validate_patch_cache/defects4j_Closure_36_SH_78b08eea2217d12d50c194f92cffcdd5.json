{
    "patch": "if (value.isFunction()) {\n  Node callNode = reference.getParent();\n  if (callNode != null && callNode.isCall()) {\n    CodingConvention convention = compiler.getCodingConvention();\n    // Bug 2388531: Don't inline subclass definitions into class defining\n    // calls as this confused class removing logic.\n    SubclassRelationship relationship =\n        convention.getClassesDefinedByCall(callNode);\n    if (relationship != null) {\n      return false;\n    }\n\n    if (callNode.getParent().isExprResult()\n        && callNode.hasOneChild()\n        && callNode.getFirstChild().isAssign()) {\n      Node assignment = callNode.getFirstChild();\n      Node assignmentValue = assignment.getLastChild();\n      if (assignmentValue == value\n          && assignmentValue.isFunction()) {\n        // Don't inline singleton getter methods\n        // calls as this confused class removing logic.\n        return false;\n      }\n    }\n\n    if (callNode.getParent().isExprResult()\n        && callNode.hasOneChild()\n        && callNode.getFirstChild().isAssign()) {\n      Node assignment = callNode.getFirstChild();\n      if (assignment.hasOneChild()\n          && assignment.getFirstChild().isGetProp()) {\n        value = assignment.getFirstChild();\n      }\n    }\n\n    // Don't inline functions into other function calls.\n    if (reference.getParent().isFunction()) {\n      return false;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..27dd3381 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,47 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+if (value.isFunction()) {\n+  Node callNode = reference.getParent();\n+  if (callNode != null && callNode.isCall()) {\n+    CodingConvention convention = compiler.getCodingConvention();\n+    // Bug 2388531: Don't inline subclass definitions into class defining\n+    // calls as this confused class removing logic.\n+    SubclassRelationship relationship =\n+        convention.getClassesDefinedByCall(callNode);\n+    if (relationship != null) {\n+      return false;\n+    }\n+\n+    if (callNode.getParent().isExprResult()\n+        && callNode.hasOneChild()\n+        && callNode.getFirstChild().isAssign()) {\n+      Node assignment = callNode.getFirstChild();\n+      Node assignmentValue = assignment.getLastChild();\n+      if (assignmentValue == value\n+          && assignmentValue.isFunction()) {\n+        // Don't inline singleton getter methods\n+        // calls as this confused class removing logic.\n+        return false;\n+      }\n+    }\n+\n+    if (callNode.getParent().isExprResult()\n+        && callNode.hasOneChild()\n+        && callNode.getFirstChild().isAssign()) {\n+      Node assignment = callNode.getFirstChild();\n+      if (assignment.hasOneChild()\n+          && assignment.getFirstChild().isGetProp()) {\n+        value = assignment.getFirstChild();\n+      }\n+    }\n+\n+    // Don't inline functions into other function calls.\n+    if (reference.getParent().isFunction()) {\n+      return false;\n+    }\n+  }\n+}\n         }\n       }\n ",
    "result_reason": "error: variable callNode is already defined in method canInline(Reference,Reference,Reference)",
    "test_result": "ERROR"
}