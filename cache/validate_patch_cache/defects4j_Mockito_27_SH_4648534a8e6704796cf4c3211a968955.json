{
    "patch": "public <T> void resetMock(T mock) {\n    Class<?>[] interfaces = mock.getClass().getInterfaces();\n    MockHandler<T> mockHandler = new MockHandler<T>();\n    T newMock = (T) Proxy.newProxyInstance(getClass().getClassLoader(), interfaces, mockHandler);\n    MockSettings settings = withSettings().spiedInstance(newMock);\n    MethodInterceptorFilter filter = new MethodInterceptorFilter(mockHandler, (MockSettingsImpl) settings);\n    ((Factory) mock).setCallback(-1, filter);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..7d23cb915 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,17 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+public <T> void resetMock(T mock) {\n+    Class<?>[] interfaces = mock.getClass().getInterfaces();\n+    MockHandler<T> mockHandler = new MockHandler<T>();\n+    T newMock = (T) Proxy.newProxyInstance(getClass().getClassLoader(), interfaces, mockHandler);\n+    MockSettings settings = withSettings().spiedInstance(newMock);\n+    MethodInterceptorFilter filter = new MethodInterceptorFilter(mockHandler, (MockSettingsImpl) settings);\n+    ((Factory) mock).setCallback(-1, filter);\n+}\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}