{
    "patch": "    /**\n     * Draws the label for the axis and returns the updated state. If the label\n     * is {@code null} or blank, the current state is returned unmodified.\n     * \n     * @param label the label ({@code null} permitted).\n     * @param g2 the graphics device.\n     * @param plotArea the area in which the plot and axes should be drawn.\n     * @param dataArea the area in which the data is to be plotted.\n     * @param edge the edge along which the axis lies.\n     * @param state the axis state ({@code null} not permitted).\n     * @param plotState collects information about the plot ({@code null}\n     *                  permitted).\n     * \n     * @return The updated axis state (the input state is not modified).\n     * \n     * @throws IllegalArgumentException if {@code state} is {@code null}.\n     */\n    protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea,\n                                  RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n        \n        // it is unlikely that 'state' will be null, but check anyway...\n        if (state == null) {\n            throw new IllegalArgumentException(\"Null 'state' argument.\");\n        }\n        \n        if ((label == null) || (label.trim().isEmpty())) {\n            return state; // Nothing to do\n        }\n\n        Font font = getLabelFont();\n        g2.setFont(font);\n\n        Paint paint = getLabelPaint();\n        g2.setPaint(paint);\n\n        TextBlock anchor = createLabel(label, state.getAxis().getTickLabelFont(), paint);\n        Size2D size = anchor.calculateDimensions(g2);\n\n        state.moveCursor(getAxisLabelInsets().calculateTopOutset(size.getHeight()));\n        \n        double labelX = 0.0;\n        double labelY = 0.0;\n        double labelAngle = 0.0;\n\n        if (edge == RectangleEdge.TOP) {\n            labelX = dataArea.getCenterX();\n            labelY = state.getCursor();\n            labelAngle = 0.0;\n            state.moveCursor(size.getHeight());\n        } else if (edge == RectangleEdge.BOTTOM) {\n            labelX = dataArea.getCenterX();\n            labelY = state.getCursor();\n            labelAngle = 0.0;\n            state.moveCursor(size.getHeight());\n        } else if (edge == Rectangl",
    "patch_diff": "diff --git a/source/org/jfree/chart/axis/Axis.java b/source/org/jfree/chart/axis/Axis.java\nindex 78a6c66..9c6053e 100644\n--- a/source/org/jfree/chart/axis/Axis.java\n+++ b/source/org/jfree/chart/axis/Axis.java\n@@ -1089,115 +1089,61 @@ public abstract class Axis implements Cloneable, Serializable {\n      *\n      * @return Information about the axis.\n      */\n-    protected AxisState drawLabel(String label, Graphics2D g2, \n-            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, \n-            AxisState state, PlotRenderingInfo plotState) {\n-\n-        // it is unlikely that 'state' will be null, but check anyway...\n-        if (state == null) {\n-            throw new IllegalArgumentException(\"Null 'state' argument.\");\n-        }\n-        \n-        if ((label == null) || (label.equals(\"\"))) {\n-            return state;\n-        }\n-\n-        Font font = getLabelFont();\n-        RectangleInsets insets = getLabelInsets();\n-        g2.setFont(font);\n-        g2.setPaint(getLabelPaint());\n-        FontMetrics fm = g2.getFontMetrics();\n-        Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n-        Shape hotspot = null;\n-        \n-        if (edge == RectangleEdge.TOP) {\n-            AffineTransform t = AffineTransform.getRotateInstance(\n-                    getLabelAngle(), labelBounds.getCenterX(), \n-                    labelBounds.getCenterY());\n-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-            labelBounds = rotatedLabelBounds.getBounds2D();\n-            float w = (float) labelBounds.getWidth();\n-            float h = (float) labelBounds.getHeight();\n-            float labelx = (float) dataArea.getCenterX();\n-            float labely = (float) (state.getCursor() - insets.getBottom() \n-                    - h / 2.0);\n-            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n-                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n-                    labely - h / 2.0f, w, h);\n-            state.cursorUp(insets.getTop() + labelBounds.getHeight() \n-                    + insets.getBottom());\n-        }\n-        else if (edge == RectangleEdge.BOTTOM) {\n-            AffineTransform t = AffineTransform.getRotateInstance(\n-                    getLabelAngle(), labelBounds.getCenterX(), \n-                    labelBounds.getCenterY());\n-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-            labelBounds = rotatedLabelBounds.getBounds2D();\n-            float w = (float) labelBounds.getWidth();\n-            float h = (float) labelBounds.getHeight();\n-            float labelx = (float) dataArea.getCenterX();\n-            float labely = (float) (state.getCursor() + insets.getTop() \n-                    + h / 2.0);\n-            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n-                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n-                    labely - h / 2.0f, w, h);\n-            state.cursorDown(insets.getTop() + labelBounds.getHeight() \n-                    + insets.getBottom());\n-        }\n-        else if (edge == RectangleEdge.LEFT) {\n-            AffineTransform t = AffineTransform.getRotateInstance(\n-                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), \n-                    labelBounds.getCenterY());\n-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-            labelBounds = rotatedLabelBounds.getBounds2D();\n-            float w = (float) labelBounds.getWidth();\n-            float h = (float) labelBounds.getHeight();\n-            float labelx = (float) (state.getCursor() - insets.getRight() \n-                    - w / 2.0);\n-            float labely = (float) dataArea.getCenterY();\n-            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n-                    TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, \n-                    TextAnchor.CENTER);\n-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n-                    labely - h / 2.0f, w, h);\n-            state.cursorLeft(insets.getLeft() + labelBounds.getWidth() \n-                    + insets.getRight());\n-        }\n-        else if (edge == RectangleEdge.RIGHT) {\n-\n-            AffineTransform t = AffineTransform.getRotateInstance(\n-                    getLabelAngle() + Math.PI / 2.0, \n-                    labelBounds.getCenterX(), labelBounds.getCenterY());\n-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-            labelBounds = rotatedLabelBounds.getBounds2D();\n-            float w = (float) labelBounds.getWidth();\n-            float h = (float) labelBounds.getHeight();\n-            float labelx = (float) (state.getCursor() \n-                            + insets.getLeft() + w / 2.0);\n-            float labely = (float) (dataArea.getY() + dataArea.getHeight() \n-                    / 2.0);\n-            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n-                    TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, \n-                    TextAnchor.CENTER);\n-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n-                    labely - h / 2.0f, w, h);\n-            state.cursorRight(insets.getLeft() + labelBounds.getWidth() \n-                    + insets.getRight());\n-\n-        }\n-        if (plotState != null && hotspot != null) {\n-            ChartRenderingInfo owner = plotState.getOwner();\n-                EntityCollection entities = owner.getEntityCollection();\n-                if (entities != null) {\n-                    entities.add(new AxisLabelEntity(this, hotspot, \n-                            this.labelToolTip, this.labelURL));\n-                }\n-        }\n-        return state;\n-\n-    }\n+    /**\n+     * Draws the label for the axis and returns the updated state. If the label\n+     * is {@code null} or blank, the current state is returned unmodified.\n+     * \n+     * @param label the label ({@code null} permitted).\n+     * @param g2 the graphics device.\n+     * @param plotArea the area in which the plot and axes should be drawn.\n+     * @param dataArea the area in which the data is to be plotted.\n+     * @param edge the edge along which the axis lies.\n+     * @param state the axis state ({@code null} not permitted).\n+     * @param plotState collects information about the plot ({@code null}\n+     *                  permitted).\n+     * \n+     * @return The updated axis state (the input state is not modified).\n+     * \n+     * @throws IllegalArgumentException if {@code state} is {@code null}.\n+     */\n+    protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea,\n+                                  RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n+        \n+        // it is unlikely that 'state' will be null, but check anyway...\n+        if (state == null) {\n+            throw new IllegalArgumentException(\"Null 'state' argument.\");\n+        }\n+        \n+        if ((label == null) || (label.trim().isEmpty())) {\n+            return state; // Nothing to do\n+        }\n+\n+        Font font = getLabelFont();\n+        g2.setFont(font);\n+\n+        Paint paint = getLabelPaint();\n+        g2.setPaint(paint);\n+\n+        TextBlock anchor = createLabel(label, state.getAxis().getTickLabelFont(), paint);\n+        Size2D size = anchor.calculateDimensions(g2);\n+\n+        state.moveCursor(getAxisLabelInsets().calculateTopOutset(size.getHeight()));\n+        \n+        double labelX = 0.0;\n+        double labelY = 0.0;\n+        double labelAngle = 0.0;\n+\n+        if (edge == RectangleEdge.TOP) {\n+            labelX = dataArea.getCenterX();\n+            labelY = state.getCursor();\n+            labelAngle = 0.0;\n+            state.moveCursor(size.getHeight());\n+        } else if (edge == RectangleEdge.BOTTOM) {\n+            labelX = dataArea.getCenterX();\n+            labelY = state.getCursor();\n+            labelAngle = 0.0;\n+            state.moveCursor(size.getHeight());\n+        } else if (edge == Rectangl\n \n     /**\n      * Draws an axis line at the current cursor position and edge.",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}