{
    "patch": "private static final double DEFAULT_EPSILON = 1E-9;\n\npublic static double regularizedGammaP(double a, double x) {\n    return regularizedGammaP(a,x,DEFAULT_EPSILON, Integer.MAX_VALUE);\n}\n\n/**\n* Returns the regularized gamma function P(a, x).\n*\n* @param a the a parameter. a must be positive.\n* @param x the x parameter. x must be non-negative.\n* @param epsilon the maximum absolute error.\n* @param maxIterations the maximum number of iterations.\n* @return the regularized gamma function P(a, x).\n*/\npublic static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    if (x >= a + 1) {\n        // use regularizedGammaQ because it should converge faster in this case.\n        return 1 - regularizedGammaQ(a, x, epsilon, maxIterations);\n    }\n\n    final Fraction e = new ContinuedFraction() {\n        @Override\n        protected double getA(int n, double x) {\n            if (n == 0) {\n                return 1.0;\n            }\n            if (n == 1) {\n                return 1 + (a - 1) - x;\n            }\n            return n - 1 + (a - 1) * 2 + (n - 1) * (1 - x);\n        }\n\n        @Override\n        protected double getB(int n, double x) {\n            return n;\n        }\n    }.evaluate(x, epsilon, maxIterations);\n\n    final double t = a * FastMath.log(x) - x - FastMath.log(e);\n    if (t < -Double.MAX_VALUE || t > Double.MAX_VALUE) {\n        return Double.NaN;\n    }\n    return FastMath.exp(t);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bade3b581 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,7 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}