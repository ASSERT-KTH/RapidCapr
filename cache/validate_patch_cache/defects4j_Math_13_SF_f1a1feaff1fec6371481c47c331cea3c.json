{
    "patch": "import org.apache.commons.math3.linear.*;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    final SingularValueDecomposition dec = new SingularValueDecomposition(m);\n    final RealMatrix u = dec.getU();\n    final RealMatrix s = dec.getS();\n    final RealMatrix v = dec.getVT();\n    \n    for(int i=0;i<s.getRowDimension();i++) {\n        if(s.getEntry(i,i)<0.0) {\n            throw new IllegalArgumentException(m.toString()+\" is not positive definite\");\n        }\n        s.setEntry(i, i, FastMath.sqrt(s.getEntry(i, i)));\n    }\n    \n    final RealMatrix sqrt = u.multiply(s).multiply(v.transpose());        \n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..38b6303d5 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,22 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.*;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final SingularValueDecomposition dec = new SingularValueDecomposition(m);\n+    final RealMatrix u = dec.getU();\n+    final RealMatrix s = dec.getS();\n+    final RealMatrix v = dec.getVT();\n+    \n+    for(int i=0;i<s.getRowDimension();i++) {\n+        if(s.getEntry(i,i)<0.0) {\n+            throw new IllegalArgumentException(m.toString()+\" is not positive definite\");\n+        }\n+        s.setEntry(i, i, FastMath.sqrt(s.getEntry(i, i)));\n     }\n+    \n+    final RealMatrix sqrt = u.multiply(s).multiply(v.transpose());        \n+    return sqrt;\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}