{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n        boolean isPrototypeAssignment = false;\n\n        if (n == lhs && rhs != null && rhs.getType() == Token.FUNCTION) {\n          // Traversing method definitions with a prototype assignment.\n          isPrototypeAssignment = NodeUtil.isPrototypeAssignment(parent);\n        } else if (NodeUtil.isGet(lhs)) {\n          // Don't traverse functions that are getting lent to a prototype.\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            isPrototypeAssignment = true;\n          }\n        }\n\n        if (isPrototypeAssignment) {\n          return false;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..4019ddaf 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,28 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+        boolean isPrototypeAssignment = false;\n+\n+        if (n == lhs && rhs != null && rhs.getType() == Token.FUNCTION) {\n+          // Traversing method definitions with a prototype assignment.\n+          isPrototypeAssignment = NodeUtil.isPrototypeAssignment(parent);\n+        } else if (NodeUtil.isGet(lhs)) {\n+          // Don't traverse functions that are getting lent to a prototype.\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.GETPROP &&\n+              llhs.getLastChild().getString().equals(\"prototype\")) {\n+            isPrototypeAssignment = true;\n+          }\n+        }\n+\n+        if (isPrototypeAssignment) {\n+          return false;\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}