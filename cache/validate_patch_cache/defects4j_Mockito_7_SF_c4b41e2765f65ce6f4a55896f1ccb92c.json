{
    "patch": "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n        if (type instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType) type;\n            for (Type actualTypeArgument : parameterizedType.getActualTypeArguments()) {\n                if (actualTypeArgument instanceof TypeVariable) {\n                    TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArgument;\n                    for (Type actualTypeVariableBound : actualTypeVariable.getBounds()) {\n                        registerTypeVariablesOn(actualTypeVariableBound);\n                    }\n                } else {\n                    registerTypeVariablesOn(actualTypeArgument);\n                }\n            }\n        }\n    }\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    } else {\n        throw new IllegalStateException(\"Unable to extract actual type for type variable: \" + typeVariable.getTypeName());\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..177a85199 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,31 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+        if (type instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType) type;\n+            for (Type actualTypeArgument : parameterizedType.getActualTypeArguments()) {\n+                if (actualTypeArgument instanceof TypeVariable) {\n+                    TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArgument;\n+                    for (Type actualTypeVariableBound : actualTypeVariable.getBounds()) {\n+                        registerTypeVariablesOn(actualTypeVariableBound);\n+                    }\n+                } else {\n+                    registerTypeVariablesOn(actualTypeArgument);\n+                }\n+            }\n+        }\n+    }\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    } else {\n+        throw new IllegalStateException(\"Unable to extract actual type for type variable: \" + typeVariable.getTypeName());\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "java.lang.IllegalStateException: Unable to extract actual type for type variable: MC3",
    "test_result": "FAIL"
}