{
    "patch": "for (BasicBlock block = ref.getBasicBlock();\n     block != null; block = block.getParent()) {\n  if (block.isFunction) {\n    break;\n  } else if (block.isLoop) {\n    return false;\n  }\n  List<Reference> candidates = block.getAssignmentsByName(ref);\n  if (candidates.size() > 1) {\n    return false;\n  }\n}\nreturn true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..0c837b63 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,19 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+for (BasicBlock block = ref.getBasicBlock();\n+     block != null; block = block.getParent()) {\n+  if (block.isFunction) {\n+    break;\n+  } else if (block.isLoop) {\n+    return false;\n+  }\n+  List<Reference> candidates = block.getAssignmentsByName(ref);\n+  if (candidates.size() > 1) {\n+    return false;\n+  }\n+}\n+return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}