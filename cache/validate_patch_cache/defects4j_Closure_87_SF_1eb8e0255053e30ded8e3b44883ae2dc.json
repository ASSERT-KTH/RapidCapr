{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    Node parent = n.getParent();\n    if (parent != null && \n        (parent.getType() == Token.EXPR_RESULT ||\n         parent.getType() == Token.FOR ||\n         parent.getType() == Token.WHILE || \n         parent.getType() == Token.DO)) { \n      // Don't fold if this is a statement block\n      return false;\n    }\n    if (n.getChildCount() == 1) {\n      if(n.getFirstChild().getType() != Token.VAR &&\n         n.getFirstChild().getType() != Token.IF && \n         n.getFirstChild().getType() != Token.EXPR_RESULT) {\n        // Beautify-like pass unluckily emits labels in a block. We can ignore these.\n        return NodeUtil.isExpressionNode(n.getFirstChild());\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..79eaf7b7 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,28 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    Node parent = n.getParent();\n+    if (parent != null && \n+        (parent.getType() == Token.EXPR_RESULT ||\n+         parent.getType() == Token.FOR ||\n+         parent.getType() == Token.WHILE || \n+         parent.getType() == Token.DO)) { \n+      // Don't fold if this is a statement block\n+      return false;\n+    }\n+    if (n.getChildCount() == 1) {\n+      if(n.getFirstChild().getType() != Token.VAR &&\n+         n.getFirstChild().getType() != Token.IF && \n+         n.getFirstChild().getType() != Token.EXPR_RESULT) {\n+        // Beautify-like pass unluckily emits labels in a block. We can ignore these.\n+        return NodeUtil.isExpressionNode(n.getFirstChild());\n       }\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}