{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.MathUtils;\nimport org.apache.commons.math3.util.Precision;\nimport org.apache.commons.math3.util.FastMath;\n\npublic class GammaFunction {\n\n    /**\n     * Computes the regularized gamma function P(a, x).\n     *\n     * @param a the shape parameter.\n     * @param x the value at which to evaluate the function.\n     * @return the regularized gamma function P(a, x).\n     */\n    public static double regularizedGamma(double a, double x) {\n        if (a <= 0.0) {\n            throw new IllegalArgumentException(\"Invalid argument: a must be greater than 0.\");\n        }\n\n        if (x < 0.0) {\n            throw new IllegalArgumentException(\"Invalid argument: x cannot be negative.\");\n        }\n\n        if (x == 0.0) {\n            return 0.0;\n        }\n\n        if (x >= a + 1.0) {\n            return 1.0 - Gamma.regularizedGammaQ(a, x);\n        }\n\n        double term = 1.0 / a;\n        double sum = term;\n        int n = 1;\n\n        while (Precision.equals(term, 0.0, 10e-15) == false && n < 100000) {\n            term *= x / (a + n);\n            sum += term;\n            n++;\n        }\n\n        if (n == 100000) {\n            throw new RuntimeException(\"Failed to converge to a solution\");\n        }\n\n        return FastMath.exp(-x + a * FastMath.log(x) - Gamma.logGamma(a)) * sum;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..81286a728 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,54 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.MathUtils;\n+import org.apache.commons.math3.util.Precision;\n+import org.apache.commons.math3.util.FastMath;\n+\n+public class GammaFunction {\n+\n+    /**\n+     * Computes the regularized gamma function P(a, x).\n+     *\n+     * @param a the shape parameter.\n+     * @param x the value at which to evaluate the function.\n+     * @return the regularized gamma function P(a, x).\n+     */\n+    public static double regularizedGamma(double a, double x) {\n+        if (a <= 0.0) {\n+            throw new IllegalArgumentException(\"Invalid argument: a must be greater than 0.\");\n+        }\n+\n+        if (x < 0.0) {\n+            throw new IllegalArgumentException(\"Invalid argument: x cannot be negative.\");\n+        }\n+\n+        if (x == 0.0) {\n+            return 0.0;\n+        }\n+\n+        if (x >= a + 1.0) {\n+            return 1.0 - Gamma.regularizedGammaQ(a, x);\n+        }\n+\n+        double term = 1.0 / a;\n+        double sum = term;\n+        int n = 1;\n+\n+        while (Precision.equals(term, 0.0, 10e-15) == false && n < 100000) {\n+            term *= x / (a + n);\n+            sum += term;\n+            n++;\n+        }\n+\n+        if (n == 100000) {\n+            throw new RuntimeException(\"Failed to converge to a solution\");\n+        }\n+\n+        return FastMath.exp(-x + a * FastMath.log(x) - Gamma.logGamma(a)) * sum;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}