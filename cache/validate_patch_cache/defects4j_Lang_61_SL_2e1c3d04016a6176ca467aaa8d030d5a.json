{
    "patch": "public int indexOf(String str, int startIndex) {\n    startIndex = (startIndex < 0 ? 0 : startIndex);\n    if (str == null || startIndex >= size) {\n        return -1;\n    }\n    int strLen = str.length();\n    if (strLen == 1) {\n        return indexOf(str.charAt(0), startIndex);\n    }\n    if (strLen == 0) {\n        return startIndex;\n    }\n    if (strLen > size) {\n        return -1;\n    }\n    char[] thisBuf = buffer;\n    int len = size - strLen; // updated\n    outer:\n    for (int i = startIndex; i <= len; i++) { // updated\n        for (int j = 0; j < strLen; j++) {\n            if (str.charAt(j) != thisBuf[i + j]) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/StrBuilder.java b/src/java/org/apache/commons/lang/text/StrBuilder.java\nindex 0e889892..bf05f91d 100644\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n@@ -1773,7 +1773,34 @@ public class StrBuilder implements Cloneable {\n             return -1;\n         }\n         char[] thisBuf = buffer;\n-        int len = thisBuf.length - strLen;\n+public int indexOf(String str, int startIndex) {\n+    startIndex = (startIndex < 0 ? 0 : startIndex);\n+    if (str == null || startIndex >= size) {\n+        return -1;\n+    }\n+    int strLen = str.length();\n+    if (strLen == 1) {\n+        return indexOf(str.charAt(0), startIndex);\n+    }\n+    if (strLen == 0) {\n+        return startIndex;\n+    }\n+    if (strLen > size) {\n+        return -1;\n+    }\n+    char[] thisBuf = buffer;\n+    int len = size - strLen; // updated\n+    outer:\n+    for (int i = startIndex; i <= len; i++) { // updated\n+        for (int j = 0; j < strLen; j++) {\n+            if (str.charAt(j) != thisBuf[i + j]) {\n+                continue outer;\n+            }\n+        }\n+        return i;\n+    }\n+    return -1;\n+}\n         outer:\n         for (int i = startIndex; i < len; i++) {\n             for (int j = 0; j < strLen; j++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}