{
    "patch": "public ReturnValue execute(MethodCall call) throws Throwable {\n    ReturnValue values = null;\n    try {\n        values = inner.execute(call);\n    } catch (Throwable e) {\n        values = ReturnValues.createException(e);\n    }\n    if (values.hasReturnValue() && values.getReturnValue() != null && Iterable.class.isAssignableFrom(values.getReturnValue().getClass())) {\n        Iterable iterable = (Iterable) values.getReturnValue();\n        Iterator iterator = iterable.iterator();\n        boolean hasNext = iterator.hasNext();\n        if(hasNext) {\n            return values;\n        } else {\n            return ReturnValues.createVoidValue();\n        }\n    }\n    return values;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}