{
    "patch": "    private boolean hasExceptionHandler(Node cfgNode) {\n      List<DiGraphEdge<Node, Branch>> inEdges = getCfg().getInEdges(cfgNode);\n      for (DiGraphEdge<Node, Branch> edge : inEdges) {\n        if (edge.getValue() == Branch.ON_EX) {\n          return true;\n        }\n      }\n      return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..92d65a4a 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,14 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+    private boolean hasExceptionHandler(Node cfgNode) {\n+      List<DiGraphEdge<Node, Branch>> inEdges = getCfg().getInEdges(cfgNode);\n+      for (DiGraphEdge<Node, Branch> edge : inEdges) {\n+        if (edge.getValue() == Branch.ON_EX) {\n+          return true;\n+        }\n+      }\n+      return false;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}