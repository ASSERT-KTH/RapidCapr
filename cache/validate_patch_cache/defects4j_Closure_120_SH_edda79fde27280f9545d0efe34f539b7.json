{
    "patch": "          if (block.isFunction) {\n            // If the variable is declared inside the function, it may be assigned\n            // multiple times during execution, so it's not assigned once in lifetime.\n            if (isInCurrentFunction(ref)) {\n              return false;\n            }\n            // Otherwise, it's assigned only during initialization\n            return true;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..b4332d5d 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,15 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          if (block.isFunction) {\n+            // If the variable is declared inside the function, it may be assigned\n+            // multiple times during execution, so it's not assigned once in lifetime.\n+            if (isInCurrentFunction(ref)) {\n+              return false;\n+            }\n+            // Otherwise, it's assigned only during initialization\n+            return true;\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}