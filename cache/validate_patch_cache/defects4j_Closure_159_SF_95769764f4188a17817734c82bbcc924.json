{
    "patch": "private void findCalledFunctions(\n      Node node, Set<String> changed) {\n    Preconditions.checkNotNull(changed, \"changed cannot be null\");\n    // For each referenced function, add a new reference\n    if (node.getToken() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getToken() == Token.NAME) {\n        changed.add(child.getString());\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      if (c.getToken() != Token.FUNCTION) { //avoid function declarations\n        findCalledFunctions(c, changed);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..60afc40d 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -770,19 +770,21 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n   /**\n    * @see #findCalledFunctions(Node)\n    */\n-  private void findCalledFunctions(\n+private void findCalledFunctions(\n       Node node, Set<String> changed) {\n-    Preconditions.checkArgument(changed != null);\n+    Preconditions.checkNotNull(changed, \"changed cannot be null\");\n     // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n+    if (node.getToken() == Token.CALL) {\n       Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n+      if (child.getToken() == Token.NAME) {\n         changed.add(child.getString());\n       }\n     }\n \n     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n-      findCalledFunctions(c, changed);\n+      if (c.getToken() != Token.FUNCTION) { //avoid function declarations\n+        findCalledFunctions(c, changed);\n+      }\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}