{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        boolean isLeapYear = iChronology.year().isLeap(values[0]);\n        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(values[0], values[1]);\n\n        int newMonth = 0;\n        int newDay = 0;\n\n        if (valueToAdd > 0) {\n            int monthsToAdd = valueToAdd % 12;\n            int yearsToAdd = valueToAdd / 12;\n\n            int numYearsToLeapYear = 0;\n            if (values[1] == 2 && values[2] == 29 && !isLeapYear && monthsToAdd > 0) {\n                // Adding a month to a non-leap-year February 29\n                numYearsToLeapYear = 1;\n                monthsToAdd--;\n            }\n\n            int newYear = values[0] + yearsToAdd + numYearsToLeapYear;\n            isLeapYear = iChronology.year().isLeap(newYear);\n            newMonth = values[1] + monthsToAdd;\n\n            if (newMonth > 12) {\n                newMonth -= 12;\n                newYear++;\n                isLeapYear = iChronology.year().isLeap(newYear);\n            }\n\n            if (values[2] > maxDayOfMonth) {\n                newDay = maxDayOfMonth;\n            } else {\n                newDay = values[2];\n            }\n        } else {\n            int monthsToSubtract = Math.abs(valueToAdd) % 12;\n            int yearsToSubtract = Math.abs(valueToAdd) / 12;\n\n            int numYearsToLeapYear = 0;\n            if (values[1] == 2 && values[2] == 29 && !isLeapYear && monthsToSubtract > 0) {\n                // Subtracting a month from a non-leap-year February 29\n                numYearsToLeapYear = 1;\n                monthsToSubtract--;\n            }\n\n            int newYear = values[0] - yearsToSubtract - numYearsToLeapYear;\n            isLeapYear = iChronology.year().isLeap(newYear);\n            newMonth = values[1] - monthsToSubtract;\n\n            if (newMonth < 1) {\n                newMonth += 12;\n                newYear--;\n                isLeapYear = iChronology.year().isLeap(newYear);\n            }\n\n            if (values[2] > maxDayOfMonth) {\n                newDay = maxDayOfMonth;\n            } else {\n                newDay = values[2];\n            }\n        }\n\n        if (values[2] == 29 && newMonth == 2 && !isLeapYear) {\n            // Special case for February 29 in non-leap years\n            newDay = 28;\n        }\n\n        return new int[] { newYear, newMonth, newDay };\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..1c0b2f49 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,81 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        boolean isLeapYear = iChronology.year().isLeap(values[0]);\n+        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(values[0], values[1]);\n+\n+        int newMonth = 0;\n+        int newDay = 0;\n+\n+        if (valueToAdd > 0) {\n+            int monthsToAdd = valueToAdd % 12;\n+            int yearsToAdd = valueToAdd / 12;\n+\n+            int numYearsToLeapYear = 0;\n+            if (values[1] == 2 && values[2] == 29 && !isLeapYear && monthsToAdd > 0) {\n+                // Adding a month to a non-leap-year February 29\n+                numYearsToLeapYear = 1;\n+                monthsToAdd--;\n+            }\n+\n+            int newYear = values[0] + yearsToAdd + numYearsToLeapYear;\n+            isLeapYear = iChronology.year().isLeap(newYear);\n+            newMonth = values[1] + monthsToAdd;\n+\n+            if (newMonth > 12) {\n+                newMonth -= 12;\n+                newYear++;\n+                isLeapYear = iChronology.year().isLeap(newYear);\n+            }\n+\n+            if (values[2] > maxDayOfMonth) {\n+                newDay = maxDayOfMonth;\n+            } else {\n+                newDay = values[2];\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            int monthsToSubtract = Math.abs(valueToAdd) % 12;\n+            int yearsToSubtract = Math.abs(valueToAdd) / 12;\n+\n+            int numYearsToLeapYear = 0;\n+            if (values[1] == 2 && values[2] == 29 && !isLeapYear && monthsToSubtract > 0) {\n+                // Subtracting a month from a non-leap-year February 29\n+                numYearsToLeapYear = 1;\n+                monthsToSubtract--;\n+            }\n+\n+            int newYear = values[0] - yearsToSubtract - numYearsToLeapYear;\n+            isLeapYear = iChronology.year().isLeap(newYear);\n+            newMonth = values[1] - monthsToSubtract;\n+\n+            if (newMonth < 1) {\n+                newMonth += 12;\n+                newYear--;\n+                isLeapYear = iChronology.year().isLeap(newYear);\n+            }\n+\n+            if (values[2] > maxDayOfMonth) {\n+                newDay = maxDayOfMonth;\n+            } else {\n+                newDay = values[2];\n+            }\n         }\n+\n+        if (values[2] == 29 && newMonth == 2 && !isLeapYear) {\n+            // Special case for February 29 in non-leap years\n+            newDay = 28;\n+        }\n+\n+        return new int[] { newYear, newMonth, newDay };\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: no suitable method found for getMaximumValue(int,int)",
    "test_result": "ERROR"
}