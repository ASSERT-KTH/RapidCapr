{
    "patch": "    if (!NodeUtil.isFunctionExpression(n)) {\n        return false;\n    }\n\n    Node parent = n.getParent();\n    if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.ASSIGN &&\n            parent.getType() != Token.VAR &&\n            (parent.getType() != Token.BLOCK || parent.getParent().getType() != Token.FUNCTION)) {\n        return false;\n    }\n\n    // Check if the function name is null or is a reserved keyword.\n    String functionName = n.getFirstChild().getString();\n    if (TokenStream.isKeyword(functionName, LanguageMode.ECMASCRIPT_2015)) {\n        return false;\n    }\n\n    return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..4066700b 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,24 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+    if (!NodeUtil.isFunctionExpression(n)) {\n+        return false;\n+    }\n+\n+    Node parent = n.getParent();\n+    if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.ASSIGN &&\n+            parent.getType() != Token.VAR &&\n+            (parent.getType() != Token.BLOCK || parent.getParent().getType() != Token.FUNCTION)) {\n+        return false;\n+    }\n+\n+    // Check if the function name is null or is a reserved keyword.\n+    String functionName = n.getFirstChild().getString();\n+    if (TokenStream.isKeyword(functionName, LanguageMode.ECMASCRIPT_2015)) {\n+        return false;\n+    }\n+\n+    return true;\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}