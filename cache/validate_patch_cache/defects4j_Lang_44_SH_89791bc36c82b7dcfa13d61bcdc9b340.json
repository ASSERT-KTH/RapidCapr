{
    "patch": "        boolean dotSeen = false;\n        boolean eSeen = false;\n        boolean negSeen = false;\n        boolean lastChWasE = false;\n        int sz = val.length();\n        for (int i = 0; i < sz; i++) {\n            char ch = val.charAt(i);\n            if (ch >= '0' && ch <= '9' || ch == '.') {\n                if (ch == '.') {\n                    if (dotSeen || eSeen) {\n                        return null;\n                    }\n                    dotSeen = true;\n                } else if (ch == 'e' || ch == 'E') {\n                    if (eSeen) {\n                        return null;\n                    }\n                    if (i == sz - 1) {\n                        return null;\n                    }\n                    eSeen = true;\n                    lastChWasE = true;\n                } else if (ch == '+' || ch == '-') {\n                    if (i != 0 && !lastChWasE) {\n                        return null;\n                    }\n                    if (i == sz - 1) {\n                        return null;\n                    }\n                    negSeen = ch == '-';\n                    lastChWasE = false;\n                } else {\n                    lastChWasE = false;\n                }\n            } else {\n                return null;\n            }\n        }\n        if (negSeen && (dotSeen || eSeen)) {\n            return null;\n        }\n        if (dotSeen || eSeen) {\n            try {\n                return createBigDecimal(val);\n            } catch (NumberFormatException e) {\n                // empty catch\n            }\n            try {\n                return createDouble(val);\n            } catch (NumberFormatException e) {\n                // empty catch\n            }\n            return createFloat(val);\n        } else {\n            try {\n                return createInteger(val);\n            } catch (NumberFormatException e) {\n                // empty catch\n            }\n            try {\n                return createLong(val);\n            } catch (NumberFormatException e) {\n                // empty catch\n            }\n            return createBigInteger(val);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..e9c339d3 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,71 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        boolean dotSeen = false;\n+        boolean eSeen = false;\n+        boolean negSeen = false;\n+        boolean lastChWasE = false;\n+        int sz = val.length();\n+        for (int i = 0; i < sz; i++) {\n+            char ch = val.charAt(i);\n+            if (ch >= '0' && ch <= '9' || ch == '.') {\n+                if (ch == '.') {\n+                    if (dotSeen || eSeen) {\n+                        return null;\n+                    }\n+                    dotSeen = true;\n+                } else if (ch == 'e' || ch == 'E') {\n+                    if (eSeen) {\n+                        return null;\n+                    }\n+                    if (i == sz - 1) {\n+                        return null;\n+                    }\n+                    eSeen = true;\n+                    lastChWasE = true;\n+                } else if (ch == '+' || ch == '-') {\n+                    if (i != 0 && !lastChWasE) {\n+                        return null;\n+                    }\n+                    if (i == sz - 1) {\n+                        return null;\n+                    }\n+                    negSeen = ch == '-';\n+                    lastChWasE = false;\n+                } else {\n+                    lastChWasE = false;\n+                }\n+            } else {\n+                return null;\n+            }\n+        }\n+        if (negSeen && (dotSeen || eSeen)) {\n+            return null;\n+        }\n+        if (dotSeen || eSeen) {\n+            try {\n+                return createBigDecimal(val);\n+            } catch (NumberFormatException e) {\n+                // empty catch\n+            }\n+            try {\n+                return createDouble(val);\n+            } catch (NumberFormatException e) {\n+                // empty catch\n+            }\n+            return createFloat(val);\n+        } else {\n+            try {\n+                return createInteger(val);\n+            } catch (NumberFormatException e) {\n+                // empty catch\n+            }\n+            try {\n+                return createLong(val);\n+            } catch (NumberFormatException e) {\n+                // empty catch\n+            }\n+            return createBigInteger(val);\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}