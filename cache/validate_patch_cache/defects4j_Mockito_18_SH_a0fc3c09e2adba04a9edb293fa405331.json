{
    "patch": "public ReturnValue execute(ExecutionEvent event) throws ExecutionException {\n    IWorkbenchWindow workbenchWindow = HandlerUtil.getActiveWorkbenchWindow(event);\n    if(workbenchWindow == null) {\n        return new ReturnValue(null, Status.OK_STATUS);\n    }\n    IWorkbenchPage workbenchPage = workbenchWindow.getActivePage();\n    if(workbenchPage == null) {\n        return new ReturnValue(null, Status.OK_STATUS);\n    }\n    IEditorPart editorPart = workbenchPage.getActiveEditor();\n    if(editorPart == null) {\n        return new ReturnValue(null, Status.OK_STATUS);\n    }\n    IDocumentProvider docProvider = editorPart.getAdapter(IDocumentProvider.class);\n    if(docProvider == null) {\n       return new ReturnValue(null, Status.OK_STATUS);\n    }\n\n    IDocument doc = docProvider.getDocument(editorPart.getEditorInput());\n    if (doc == null) {\n        return new ReturnValue(null, Status.OK_STATUS);\n    }\n\n    ISelection selection = workbenchPage.getSelection();\n    if (selection instanceof ITextSelection) {\n        ITextSelection textSelection = (ITextSelection) selection;\n        String selectedText = textSelection.getText();\n        if (selectedText != null && selectedText.trim().length() > 0) {\n            final int selectionOffset = textSelection.getOffset();\n            final int selectionLength = textSelection.getLength();\n\n            try {\n                // Find the line numbers of the beginning and ending of the selected text\n                int beginningLine = doc.getLineOfOffset(selectionOffset);\n                int endingLine = doc.getLineOfOffset(selectionOffset + selectionLength);\n\n                String[] lines = doc.get().split(\"\\\\r?\\\\n\");\n\n                List<String> output = new ArrayList<String>();\n                for (int i = beginningLine; i <= endingLine; i++) {\n                    output.add(lines[i]);\n                }\n                return new ReturnValue(output, Status.OK_STATUS);\n            } catch (BadLocationException e) {\n                return new ReturnValue(null, new Status(IStatus.ERROR, Activator.PLUGIN_ID, \"Bad location.\", e));\n            }\n        }\n    }\n\n    return new ReturnValue(Collections.EMPTY_LIST, Status.OK_STATUS);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}