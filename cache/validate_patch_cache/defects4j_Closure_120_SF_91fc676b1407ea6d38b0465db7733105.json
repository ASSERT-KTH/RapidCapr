{
    "patch": "private boolean isInitializingAssignmentAt(int index) {\n    if (index <= 0 || index >= references.size()) {\n        return false;\n    }\n\n    Reference prev = references.get(index - 1);\n    if (!prev.isVarDeclaration()) {\n        return false;\n    }\n\n    Preconditions.checkState(!prev.isInitializingDeclaration());\n    Reference curr = references.get(index);\n    return curr.isSimpleAssignmentToName();\n}\n\n/**\n * @return The reference that provides the value for the variable at the\n * time of the first read, if known, otherwise null.\n *\n * This is either the variable declaration (\"var a = ...\") or first\n * reference following the declaration if it is an assignment.\n */\nReference getInitializingReference() {\n    if (isInitializingDeclarationAt(0)) {\n        return references.get(0);\n    } else if (isInitializingAssignmentAt(1)) {\n        return references.get(1);\n    }\n    return null;\n}\n\n/**\n * Constants are allowed to be defined after their first use.\n */\nReference getInitializingReferenceForConstants() {\n    for (int i = 0; i < references.size(); i++) {\n        if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {\n            return references.get(i);\n        }\n    }\n    return null;\n}\n\n/**\n * @return Whether the variable is only assigned a value once for its lifetime.\n */\nboolean isAssignedOnceInLifetime() {\n    Reference ref = getOneAndOnlyAssignment();\n    if (ref == null || ref.isSimpleAssignmentToName()) {\n        // Variable not assigned or initialized with a simple assignment\n        return true;\n    }\n\n    if (!ref.isVarDeclaration() && !ref.getVarStatements().isConst()) {\n        // Not a var declaration or const, cannot guarantee single assignment\n        return false;\n    }\n\n    int assignments = 0;\n    BasicBlock block = ref.getBasicBlock();\n    for (Reference curr : references) {\n        if (!curr.isSimpleAssignment()) {\n            continue;\n        }\n\n        if (curr.isInitializingDeclaration() || curr.isInitializingAssignment()) {\n            continue;\n        }\n\n        if (curr.isLValue() && curr.getTargetName().equals(ref.getTargetName())) {\n            if (block != null && curr.getBasicBlock().isLoop()) {\n                // This assignment is inside a loop, variable is not assigned once\n                return false;\n            }\n\n            assignments++;\n            if (assignments > 1) {\n                // Variable has more than one assignment, not assigned once\n                return false;\n            }\n        }\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..6bd88c09 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -371,72 +371,92 @@ class ReferenceCollectingCallback implements ScopedCallback,\n      * follow a variable declaration that itself does not initialize the\n      * variable.\n      */\n-    private boolean isInitializingAssignmentAt(int index) {\n-      if (index < references.size() && index > 0) {\n-        Reference maybeDecl = references.get(index - 1);\n-        if (maybeDecl.isVarDeclaration()) {\n-          Preconditions.checkState(!maybeDecl.isInitializingDeclaration());\n-          Reference maybeInit = references.get(index);\n-          if (maybeInit.isSimpleAssignmentToName()) {\n-            return true;\n-          }\n-        }\n-      }\n-      return false;\n+private boolean isInitializingAssignmentAt(int index) {\n+    if (index <= 0 || index >= references.size()) {\n+        return false;\n     }\n \n-    /**\n-     * @return The reference that provides the value for the variable at the\n-     * time of the first read, if known, otherwise null.\n-     *\n-     * This is either the variable declaration (\"var a = ...\") or first\n-     * reference following the declaration if it is an assignment.\n-     */\n-    Reference getInitializingReference() {\n-      if (isInitializingDeclarationAt(0)) {\n+    Reference prev = references.get(index - 1);\n+    if (!prev.isVarDeclaration()) {\n+        return false;\n+    }\n+\n+    Preconditions.checkState(!prev.isInitializingDeclaration());\n+    Reference curr = references.get(index);\n+    return curr.isSimpleAssignmentToName();\n+}\n+\n+/**\n+ * @return The reference that provides the value for the variable at the\n+ * time of the first read, if known, otherwise null.\n+ *\n+ * This is either the variable declaration (\"var a = ...\") or first\n+ * reference following the declaration if it is an assignment.\n+ */\n+Reference getInitializingReference() {\n+    if (isInitializingDeclarationAt(0)) {\n         return references.get(0);\n-      } else if (isInitializingAssignmentAt(1)) {\n+    } else if (isInitializingAssignmentAt(1)) {\n         return references.get(1);\n-      }\n-      return null;\n     }\n+    return null;\n+}\n \n-    /**\n-     * Constants are allowed to be defined after their first use.\n-     */\n-    Reference getInitializingReferenceForConstants() {\n-      int size = references.size();\n-      for (int i = 0; i < size; i++) {\n+/**\n+ * Constants are allowed to be defined after their first use.\n+ */\n+Reference getInitializingReferenceForConstants() {\n+    for (int i = 0; i < references.size(); i++) {\n         if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {\n-          return references.get(i);\n+            return references.get(i);\n         }\n-      }\n-      return null;\n     }\n+    return null;\n+}\n \n-    /**\n-     * @return Whether the variable is only assigned a value once for its\n-     *     lifetime.\n-     */\n-    boolean isAssignedOnceInLifetime() {\n-      Reference ref = getOneAndOnlyAssignment();\n-      if (ref == null) {\n+/**\n+ * @return Whether the variable is only assigned a value once for its lifetime.\n+ */\n+boolean isAssignedOnceInLifetime() {\n+    Reference ref = getOneAndOnlyAssignment();\n+    if (ref == null || ref.isSimpleAssignmentToName()) {\n+        // Variable not assigned or initialized with a simple assignment\n+        return true;\n+    }\n+\n+    if (!ref.isVarDeclaration() && !ref.getVarStatements().isConst()) {\n+        // Not a var declaration or const, cannot guarantee single assignment\n         return false;\n-      }\n+    }\n \n-      // Make sure this assignment is not in a loop.\n-      for (BasicBlock block = ref.getBasicBlock();\n-           block != null; block = block.getParent()) {\n-        if (block.isFunction) {\n-          break;\n-        } else if (block.isLoop) {\n-          return false;\n+    int assignments = 0;\n+    BasicBlock block = ref.getBasicBlock();\n+    for (Reference curr : references) {\n+        if (!curr.isSimpleAssignment()) {\n+            continue;\n         }\n-      }\n \n-      return true;\n+        if (curr.isInitializingDeclaration() || curr.isInitializingAssignment()) {\n+            continue;\n+        }\n+\n+        if (curr.isLValue() && curr.getTargetName().equals(ref.getTargetName())) {\n+            if (block != null && curr.getBasicBlock().isLoop()) {\n+                // This assignment is inside a loop, variable is not assigned once\n+                return false;\n+            }\n+\n+            assignments++;\n+            if (assignments > 1) {\n+                // Variable has more than one assignment, not assigned once\n+                return false;\n+            }\n+        }\n     }\n \n+    return true;\n+}\n+\n     /**\n      * @return The one and only assignment. Returns if there are 0 or 2+\n      *    assignments.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}