{
    "patch": "                // Ensure the millisecond value is within the valid range\n                if (millis < 0 || millis >= DateTimeUtils.MILLIS_PER_DAY) {\n                    throw new IllegalFieldValueException(savedFields[i].iField.getType(),\n                            Long.valueOf(millis), savedFields[i].iField.getRangeDurationField().getType());\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..fc3aded6 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,11 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                // Ensure the millisecond value is within the valid range\n+                if (millis < 0 || millis >= DateTimeUtils.MILLIS_PER_DAY) {\n+                    throw new IllegalFieldValueException(savedFields[i].iField.getType(),\n+                            Long.valueOf(millis), savedFields[i].iField.getRangeDurationField().getType());\n+                }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}