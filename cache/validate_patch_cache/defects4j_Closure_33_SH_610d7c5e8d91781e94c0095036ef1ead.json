{
    "patch": "    if (!(\"\".equals(getName()) || getName() == null)) {\n      varsWithoutTypes.forEach((String var) -> {\n        NodeTraversal.traverse(compiler, scope.getRootNode(), new UnassignedVarsFinder(var));\n        if (!transpileVariables.contains(var) && !hasDeclaredType(var, scope)) {\n          JSType t = unknownType;\n          if (options.shouldUseTypesForLocalOptimization()) {\n            t = getNativeType(JSTypeNative.NO_TYPE);\n          }\n          defineInferredVariable(scope, var, t);\n        }\n      });\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..f69a2d42 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,18 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+    if (!(\"\".equals(getName()) || getName() == null)) {\n+      varsWithoutTypes.forEach((String var) -> {\n+        NodeTraversal.traverse(compiler, scope.getRootNode(), new UnassignedVarsFinder(var));\n+        if (!transpileVariables.contains(var) && !hasDeclaredType(var, scope)) {\n+          JSType t = unknownType;\n+          if (options.shouldUseTypesForLocalOptimization()) {\n+            t = getNativeType(JSTypeNative.NO_TYPE);\n+          }\n+          defineInferredVariable(scope, var, t);\n+        }\n+      });\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}