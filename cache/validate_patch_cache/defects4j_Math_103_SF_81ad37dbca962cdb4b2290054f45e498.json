{
    "patch": "    public double cumulativeProbability(double x) throws MathException {\n        if (Double.isInfinite(x)) {\n            return x < 0 ? 0.0 : 1.0;\n        }\n        if (Double.isNaN(x)) {\n            return 0.0;\n        }\n        double z = (x - mean) / standardDeviation;\n        double p;\n        if (z < -8.0) {\n            p = 0.0;\n        } else if (z > 8.0) {\n            p = 1.0;\n        } else {\n            double y = 0.5 * Erf.erfc(-z / Math.sqrt(2.0));\n            if (z < 0) {\n                p = y / 2.0;\n            } else {\n                p = 1.0 - y / 2.0;\n            }\n        }\n        return p;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..9ea500f0b 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -106,8 +106,27 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n     public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+        if (Double.isInfinite(x)) {\n+            return x < 0 ? 0.0 : 1.0;\n+        }\n+        if (Double.isNaN(x)) {\n+            return 0.0;\n+        }\n+        double z = (x - mean) / standardDeviation;\n+        double p;\n+        if (z < -8.0) {\n+            p = 0.0;\n+        } else if (z > 8.0) {\n+            p = 1.0;\n+        } else {\n+            double y = 0.5 * Erf.erfc(-z / Math.sqrt(2.0));\n+            if (z < 0) {\n+                p = y / 2.0;\n+            } else {\n+                p = 1.0 - y / 2.0;\n+            }\n+        }\n+        return p;\n     }\n     \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}