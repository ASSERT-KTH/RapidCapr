{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected.getValue(), best.getValue()) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] expanded = simplex;\n            final RealPointValuePair trial = evaluateNewSimplex(original, gamma, comparator);\n\n            if (comparator.compare(trial.getValue(), best.getValue()) < 0) {\n                // accept the reflected simplex\n                simplex = expanded;\n            } else {\n                // accept the contracted simplex\n                simplex = contract(original, beta, comparator);\n            }\n            return;\n\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n        if (comparator.compare(contracted.getValue(), best.getValue()) < 0) {\n            // accept the contracted simplex\n            simplex = contracted;\n        } else {\n            // perform a shrinking step\n            simplex = shrink(original, comparator);\n        }\n\n        // check convergence\n        final boolean isConverged = isConverged(comparator);\n        if (isConverged) {\n            return;\n        }\n\n    }\n}\n\nprivate static RealPointValuePair[] contract(final RealPointValuePair[] points,\n        final double contractionFactor,\n        final Comparator<RealPointValuePair> comparator) {\n    final RealPointValuePair best = points[0];\n    final int n = points.length;\n    final double[] xSmallest = points[n - 1].getPointRef(); // stored worst point\n    final double[] xNew = new double[xSmallest.length];\n\n    // contract the simplex from the worst point\n    for (int i = 0; i < xNew.length; i++) {\n        xNew[i] = best.getPoint()[i] + contractionFactor * (xSmallest[i] - best.getPoint()[i]);\n    }\n\n    final RealPointValuePair contracted = new RealPointValuePair(xNew, Double.NaN);\n    evaluateVertex(contract, points, comparator);\n\n    // create the new simplex\n    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[n];\n    contractedSimplex[0] = best;\n    System.arraycopy(points, 1, contractedSimplex, 1, n - 1);\n    contractedSimplex[n - 1] = contracted;\n\n    return contractedSimplex;\n}\n\nprivate static RealPointValuePair[] shrink(final RealPointValuePair[] points,\n        final Comparator<RealPointValuePair> comparator) {\n    final RealPointValuePair best = points[0];\n    final int n = points.length;\n    final double[] xBest = best.getPointRef();\n    final RealPointValuePair[] shrunk = new RealPointValuePair[n];\n    shrunk[0] = best;\n\n    for (int i = 1; i < n; i++) {\n        final double[] x = points[i].getPointRef();\n        final double[] newX = new double[x.length];\n        for (int j = 0; j < x.length; j++) {\n            newX[j] = xi * xBest[j] + (1 - xi) * x[j];\n        }\n        shrunk[i] = new RealPointValuePair(newX, Double.NaN);\n    }\n\n    evaluateSimplex(shrunk, comparator);\n\n    return shrunk;\n}\n\nprivate boolean isConverged(final Comparator<RealPointValuePair> comparator) {\n    final RealPointValuePair best = simplex[0];\n    final RealPointValuePair worst = simplex[simplex.length - 1];\n    final double bestVal = best.getValue();\n    final double worstVal = worst.getValue();\n    final double rtol = getRelativeThreshold();\n    final double atol = getAbsoluteThreshold();\n    final double max = Math.max(Math.abs(worstVal), Math.abs(bestVal));\n    return comparator.compare(Math.abs(worstVal - bestVal), atol + rtol * max) < 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..f466407e2 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,112 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected.getValue(), best.getValue()) < 0) {\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+            // compute the expanded simplex\n+            final RealPointValuePair[] expanded = simplex;\n+            final RealPointValuePair trial = evaluateNewSimplex(original, gamma, comparator);\n \n+            if (comparator.compare(trial.getValue(), best.getValue()) < 0) {\n+                // accept the reflected simplex\n+                simplex = expanded;\n+            } else {\n+                // accept the contracted simplex\n+                simplex = contract(original, beta, comparator);\n             }\n+            return;\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+        }\n \n-            // check convergence\n-                return;\n-            }\n+        // compute the contracted simplex\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+        if (comparator.compare(contracted.getValue(), best.getValue()) < 0) {\n+            // accept the contracted simplex\n+            simplex = contracted;\n+        } else {\n+            // perform a shrinking step\n+            simplex = shrink(original, comparator);\n+        }\n \n+        // check convergence\n+        final boolean isConverged = isConverged(comparator);\n+        if (isConverged) {\n+            return;\n         }\n \n     }\n+}\n+\n+private static RealPointValuePair[] contract(final RealPointValuePair[] points,\n+        final double contractionFactor,\n+        final Comparator<RealPointValuePair> comparator) {\n+    final RealPointValuePair best = points[0];\n+    final int n = points.length;\n+    final double[] xSmallest = points[n - 1].getPointRef(); // stored worst point\n+    final double[] xNew = new double[xSmallest.length];\n+\n+    // contract the simplex from the worst point\n+    for (int i = 0; i < xNew.length; i++) {\n+        xNew[i] = best.getPoint()[i] + contractionFactor * (xSmallest[i] - best.getPoint()[i]);\n+    }\n+\n+    final RealPointValuePair contracted = new RealPointValuePair(xNew, Double.NaN);\n+    evaluateVertex(contract, points, comparator);\n+\n+    // create the new simplex\n+    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[n];\n+    contractedSimplex[0] = best;\n+    System.arraycopy(points, 1, contractedSimplex, 1, n - 1);\n+    contractedSimplex[n - 1] = contracted;\n+\n+    return contractedSimplex;\n+}\n+\n+private static RealPointValuePair[] shrink(final RealPointValuePair[] points,\n+        final Comparator<RealPointValuePair> comparator) {\n+    final RealPointValuePair best = points[0];\n+    final int n = points.length;\n+    final double[] xBest = best.getPointRef();\n+    final RealPointValuePair[] shrunk = new RealPointValuePair[n];\n+    shrunk[0] = best;\n+\n+    for (int i = 1; i < n; i++) {\n+        final double[] x = points[i].getPointRef();\n+        final double[] newX = new double[x.length];\n+        for (int j = 0; j < x.length; j++) {\n+            newX[j] = xi * xBest[j] + (1 - xi) * x[j];\n+        }\n+        shrunk[i] = new RealPointValuePair(newX, Double.NaN);\n+    }\n+\n+    evaluateSimplex(shrunk, comparator);\n+\n+    return shrunk;\n+}\n+\n+private boolean isConverged(final Comparator<RealPointValuePair> comparator) {\n+    final RealPointValuePair best = simplex[0];\n+    final RealPointValuePair worst = simplex[simplex.length - 1];\n+    final double bestVal = best.getValue();\n+    final double worstVal = worst.getValue();\n+    final double rtol = getRelativeThreshold();\n+    final double atol = getAbsoluteThreshold();\n+    final double max = Math.max(Math.abs(worstVal), Math.abs(bestVal));\n+    return comparator.compare(Math.abs(worstVal - bestVal), atol + rtol * max) < 0;\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: method compare in interface Comparator<T> cannot be applied to given types;",
    "test_result": "ERROR"
}