{
    "patch": "      Node fnNameNode = n.getFirstChild();\n      String fnName = fnNameNode.getString();\n      \n      if (parent.getType() == Token.VAR) {\n        return true;\n      }\n      \n      if (NodeUtil.isObjectLitKey(fnNameNode)) {\n        return true;\n      }\n      \n      if (NodeUtil.isPrototypePropertyDeclaration(parent) ||\n          NodeUtil.isFunctionBind(parent)) {\n        return true;\n      }\n      \n      if (NodeUtil.isFunctionObjectCall(parent)) {\n        Node fnCall = parent.getParent().getParent();\n        if (fnCall.getType() == Token.CALL &&\n            fnCall.getFirstChild() == parent.getParent() &&\n            // calling `function.bind()`,\n            fnCall.getSecondChild().getFirstFirstChild().getString().equals(\"bind\")) {\n          return true;\n        }\n      }\n      \n      return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..7adb4407 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,33 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node fnNameNode = n.getFirstChild();\n+      String fnName = fnNameNode.getString();\n+      \n+      if (parent.getType() == Token.VAR) {\n+        return true;\n+      }\n+      \n+      if (NodeUtil.isObjectLitKey(fnNameNode)) {\n+        return true;\n+      }\n+      \n+      if (NodeUtil.isPrototypePropertyDeclaration(parent) ||\n+          NodeUtil.isFunctionBind(parent)) {\n+        return true;\n+      }\n+      \n+      if (NodeUtil.isFunctionObjectCall(parent)) {\n+        Node fnCall = parent.getParent().getParent();\n+        if (fnCall.getType() == Token.CALL &&\n+            fnCall.getFirstChild() == parent.getParent() &&\n+            // calling `function.bind()`,\n+            fnCall.getSecondChild().getFirstFirstChild().getString().equals(\"bind\")) {\n+          return true;\n+        }\n+      }\n+      \n+      return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: method isObjectLitKey in class NodeUtil cannot be applied to given types;",
    "test_result": "ERROR"
}