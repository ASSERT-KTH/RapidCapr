{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            try {\n                instant = add(instant, valueToAdd);\n            } catch (IllegalArgumentException iae) {\n                // Handle leap year edge case\n                if (partial instanceof LocalDate && fieldIndex == 1 && iChronology.isLeapYear(((LocalDate) partial).getYear())) {\n                    LocalDate adjusted = ((LocalDate) partial).withDayOfMonth(1).plusMonths(valueToAdd).dayOfMonth().withMaximumValue();\n                    return iChronology.get(partial, adjusted.toLocalDateTime(LocalTime.MIDNIGHT).toInstant(iChronology.getZone()));\n                }\n                throw iae;\n            }\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..94c94a38 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,13 +206,22 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n+            try {\n+                instant = add(instant, valueToAdd);\n+            } catch (IllegalArgumentException iae) {\n+                // Handle leap year edge case\n+                if (partial instanceof LocalDate && fieldIndex == 1 && iChronology.isLeapYear(((LocalDate) partial).getYear())) {\n+                    LocalDate adjusted = ((LocalDate) partial).withDayOfMonth(1).plusMonths(valueToAdd).dayOfMonth().withMaximumValue();\n+                    return iChronology.get(partial, adjusted.toLocalDateTime(LocalTime.MIDNIGHT).toInstant(iChronology.getZone()));\n+                }\n+                throw iae;\n+            }\n             return iChronology.get(partial, instant);\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}