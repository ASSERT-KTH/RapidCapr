{
    "patch": "        if (block.isFunction) {\n          Reference initRef = getInitializingReference();\n          // Only consider an assignment within a function block an initializing assignment\n          // if it is the first assignment or declaration of the variable's lifetime.\n          if (initRef == null || (initRef == ref.getPrevious() && initRef.isInitializingDeclaration()) ||\n              (initRef == ref && !ref.isVarDeclaration())) {\n            return true;\n          } else {\n            return false;\n          }\n        } else if (block.isLoop && block != ref.getBasicBlock()) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..0b28a97a 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,17 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          Reference initRef = getInitializingReference();\n+          // Only consider an assignment within a function block an initializing assignment\n+          // if it is the first assignment or declaration of the variable's lifetime.\n+          if (initRef == null || (initRef == ref.getPrevious() && initRef.isInitializingDeclaration()) ||\n+              (initRef == ref && !ref.isVarDeclaration())) {\n+            return true;\n+          } else {\n+            return false;\n+          }\n+        } else if (block.isLoop && block != ref.getBasicBlock()) {\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}