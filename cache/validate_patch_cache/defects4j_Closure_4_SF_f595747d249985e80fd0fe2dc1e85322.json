{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n    boolean cycleDetected = detectImplicitPrototypeCycle();\n\n    if (resolvedViaRegistry && !cycleDetected) {\n      resolveInternalViaRegistry(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    if (cycleDetected) {\n      handleTypeCycle(t);\n      resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n      cycleDetected = detectImplicitPrototypeCycle();\n\n      if (resolvedViaRegistry && !cycleDetected) {\n        resolveInternalViaRegistry(t, enclosing);\n        finishPropertyContinuations();\n        return registry.isLastGeneration() ? getReferencedType() : this;\n      }\n    }\n\n    resolveViaProperties(t, enclosing);\n    boolean resolvedViaProperties = isResolved();\n\n    if (!resolvedViaRegistry && !resolvedViaProperties && !cycleDetected) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    if (cycleDetected) {\n      handleTypeCycle(t);\n    }\n\n    if (resolvedViaRegistry || resolvedViaProperties) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    return this;\n  }\n\n  private void resolveInternalViaRegistry(ErrorReporter t, StaticScope<JSType> enclosing) {",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..8de4402d 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,52 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+    boolean cycleDetected = detectImplicitPrototypeCycle();\n+\n+    if (resolvedViaRegistry && !cycleDetected) {\n+      resolveInternalViaRegistry(t, enclosing);\n+      finishPropertyContinuations();\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n+    }\n+\n+    if (cycleDetected) {\n       handleTypeCycle(t);\n+      resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+      cycleDetected = detectImplicitPrototypeCycle();\n+\n+      if (resolvedViaRegistry && !cycleDetected) {\n+        resolveInternalViaRegistry(t, enclosing);\n+        finishPropertyContinuations();\n+        return registry.isLastGeneration() ? getReferencedType() : this;\n+      }\n     }\n \n-    if (resolved) {\n+    resolveViaProperties(t, enclosing);\n+    boolean resolvedViaProperties = isResolved();\n+\n+    if (!resolvedViaRegistry && !resolvedViaProperties && !cycleDetected) {\n       super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n+    if (cycleDetected) {\n       handleTypeCycle(t);\n     }\n \n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n+    if (resolvedViaRegistry || resolvedViaProperties) {\n+      super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+\n+    return this;\n   }\n \n+  private void resolveInternalViaRegistry(ErrorReporter t, StaticScope<JSType> enclosing) {\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}