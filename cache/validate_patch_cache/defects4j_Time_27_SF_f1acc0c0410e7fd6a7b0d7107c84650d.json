{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    List<Object> newElementPairs = new ArrayList<>();\n\n    Separator separator = null;\n\n    // Merge consecutive separator objects into a single separator object\n    for (Object elementPair : elementPairs) {\n        if (elementPair instanceof Separator) {\n            Separator current = (Separator) elementPair;\n            if (separator == null) {\n                separator = current;\n            } else {\n                separator = separator.merge(current);\n            }\n        } else {\n            if (separator != null) {\n                newElementPairs.add(separator);\n                separator = null;\n            }\n            newElementPairs.add(elementPair);\n        }\n    }\n\n    if (separator != null) {\n        newElementPairs.add(separator);\n    }\n\n    Object[] comp = createComposite(newElementPairs);\n\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..83447e61 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,48 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    List<Object> newElementPairs = new ArrayList<>();\n+\n+    Separator separator = null;\n+\n+    // Merge consecutive separator objects into a single separator object\n+    for (Object elementPair : elementPairs) {\n+        if (elementPair instanceof Separator) {\n+            Separator current = (Separator) elementPair;\n+            if (separator == null) {\n+                separator = current;\n+            } else {\n+                separator = separator.merge(current);\n+            }\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            if (separator != null) {\n+                newElementPairs.add(separator);\n+                separator = null;\n+            }\n+            newElementPairs.add(elementPair);\n         }\n     }\n \n+    if (separator != null) {\n+        newElementPairs.add(separator);\n+    }\n+\n+    Object[] comp = createComposite(newElementPairs);\n+\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}