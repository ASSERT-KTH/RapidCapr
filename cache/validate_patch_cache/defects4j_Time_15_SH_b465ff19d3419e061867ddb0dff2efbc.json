{
    "patch": "        if (val2 < -1 || val2 > 1) { // added check for cases where val2 is outside [-1,1]\n            throw new IllegalArgumentException(\"val2 must be between -1 and 1 (inclusive)\");\n        } else if (val2 == -1) {\n            if (val1 == Long.MIN_VALUE) {\n                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n            }\n            return -val1;\n        } else if (val2 == 0) {\n            return 0L;\n        } else {\n            return val1; // val2 must be 1, return val1\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/field/FieldUtils.java b/src/main/java/org/joda/time/field/FieldUtils.java\nindex a0fe7e2d..1f437447 100644\n--- a/src/main/java/org/joda/time/field/FieldUtils.java\n+++ b/src/main/java/org/joda/time/field/FieldUtils.java\n@@ -135,6 +135,18 @@ public class FieldUtils {\n     public static long safeMultiply(long val1, int val2) {\n         switch (val2) {\n             case -1:\n+        if (val2 < -1 || val2 > 1) { // added check for cases where val2 is outside [-1,1]\n+            throw new IllegalArgumentException(\"val2 must be between -1 and 1 (inclusive)\");\n+        } else if (val2 == -1) {\n+            if (val1 == Long.MIN_VALUE) {\n+                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n+            }\n+            return -val1;\n+        } else if (val2 == 0) {\n+            return 0L;\n+        } else {\n+            return val1; // val2 must be 1, return val1\n+        }\n                 return -val1;\n             case 0:\n                 return 0L;",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}