{
    "patch": "      if (name.props.isEmpty() && name.aliasingGets == 1) {\n        Ref alias = Iterables.getOnlyElement(name.getRefs());\n        if (inlineAliasIfPossible(alias, namespace)) {\n          name.removeRef(alias);\n        }\n        continue;\n      }\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n      \n      // condition (c)\n      List<Ref> refs = Lists.newArrayList(name.getRefs());\n      for (Ref ref : refs) {\n        if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n          if (inlineAliasIfPossible(ref, namespace)) {\n            name.removeRef(ref);\n          }\n        }\n      }\n\n      // condition (b)\n      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets == 0 && !name.isTopLevel() &&\n          name.getParent().props != null) {\n        Ref setRef = null;\n        Ref getRef = null;\n        for (Ref ref : name.getRefs()) {\n          if (ref.type == Type.SET_FROM_GLOBAL) {\n            setRef = ref;\n          } else if (ref.type == Type.GET || ref.type == Type.CALL_GET) {\n            getRef = ref;\n          }\n        }\n        if (setRef != null && getRef != null &&\n            setRef.getParent().getLastChild() == setRef) {\n          inlineAccessorIfBetter(name, setRef, getRef, namespace);\n        }\n      }\n\n      // condition (a)\n      if ((name.type == Name.Type.OBJECTLIT ||\n           name.type == Name.Type.FUNCTION) &&\n          name.aliasingGets == 0 && name.props != null) {\n        workList.addAll(name.props);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..6779cecd 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,54 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n+      if (name.props.isEmpty() && name.aliasingGets == 1) {\n+        Ref alias = Iterables.getOnlyElement(name.getRefs());\n+        if (inlineAliasIfPossible(alias, namespace)) {\n+          name.removeRef(alias);\n+        }\n+        continue;\n+      }\n+\n+      // Don't attempt to inline a getter or setter property as a variable.\n+      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+        continue;\n+      }\n+      \n+      // condition (c)\n+      List<Ref> refs = Lists.newArrayList(name.getRefs());\n+      for (Ref ref : refs) {\n+        if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+          if (inlineAliasIfPossible(ref, namespace)) {\n+            name.removeRef(ref);\n+          }\n+        }\n+      }\n+\n+      // condition (b)\n       if (name.globalSets == 1 && name.localSets == 0 &&\n+          name.aliasingGets == 0 && !name.isTopLevel() &&\n+          name.getParent().props != null) {\n+        Ref setRef = null;\n+        Ref getRef = null;\n+        for (Ref ref : name.getRefs()) {\n+          if (ref.type == Type.SET_FROM_GLOBAL) {\n+            setRef = ref;\n+          } else if (ref.type == Type.GET || ref.type == Type.CALL_GET) {\n+            getRef = ref;\n+          }\n+        }\n+        if (setRef != null && getRef != null &&\n+            setRef.getParent().getLastChild() == setRef) {\n+          inlineAccessorIfBetter(name, setRef, getRef, namespace);\n+        }\n+      }\n+\n+      // condition (a)\n+      if ((name.type == Name.Type.OBJECTLIT ||\n+           name.type == Name.Type.FUNCTION) &&\n+          name.aliasingGets == 0 && name.props != null) {\n+        workList.addAll(name.props);\n+      }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}