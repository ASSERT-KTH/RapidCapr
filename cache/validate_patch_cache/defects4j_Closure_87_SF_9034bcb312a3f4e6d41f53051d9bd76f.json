{
    "patch": "private static boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node child = n.getFirstChild();\n    if (child.getType() == Token.EXPR_RESULT) {\n      Node stmt = child.getFirstChild();\n      if (stmt.getType() == Token.IF && stmt.hasTwoChildren()) {\n        Node condition = stmt.getFirstChild();\n        Node thenBranch = condition.getNext();\n        if (condition.getType() == Token.NOT && condition.hasOneChild()) {\n          Node boolExpr = condition.getFirstChild();\n          if (boolExpr.getType() == Token.NAME) {\n            Node thenStmts = thenBranch;\n            if (thenStmts.getType() == Token.BLOCK && thenStmts.hasOneChild()) {\n              Node thenChild = thenStmts.getFirstChild();\n              if (thenChild.getType() == Token.EXPR_RESULT && thenChild.hasOneChild()) {\n                Node expr = thenChild.getFirstChild();\n                if (expr.getType() == Token.OR && expr.hasTwoChildren()) {\n                  Node leftOperand = expr.getFirstChild();\n                  Node rightOperand = expr.getLastChild();\n                  if (leftOperand.getType() == Token.NAME\n                      && rightOperand.getType() == Token.CALL\n                      && rightOperand.hasOneChild()) {\n                    Node funcName = rightOperand.getFirstChild();\n                    if (funcName.getType() == Token.NAME\n                        && !funcName.getString().startsWith(\"on\")) {\n                      return true;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      } else {\n        return NodeUtil.isExpressionNode(child);\n      }\n    } else {\n      return NodeUtil.isExpressionNode(child);\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..72384b17 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,48 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private static boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    Node child = n.getFirstChild();\n+    if (child.getType() == Token.EXPR_RESULT) {\n+      Node stmt = child.getFirstChild();\n+      if (stmt.getType() == Token.IF && stmt.hasTwoChildren()) {\n+        Node condition = stmt.getFirstChild();\n+        Node thenBranch = condition.getNext();\n+        if (condition.getType() == Token.NOT && condition.hasOneChild()) {\n+          Node boolExpr = condition.getFirstChild();\n+          if (boolExpr.getType() == Token.NAME) {\n+            Node thenStmts = thenBranch;\n+            if (thenStmts.getType() == Token.BLOCK && thenStmts.hasOneChild()) {\n+              Node thenChild = thenStmts.getFirstChild();\n+              if (thenChild.getType() == Token.EXPR_RESULT && thenChild.hasOneChild()) {\n+                Node expr = thenChild.getFirstChild();\n+                if (expr.getType() == Token.OR && expr.hasTwoChildren()) {\n+                  Node leftOperand = expr.getFirstChild();\n+                  Node rightOperand = expr.getLastChild();\n+                  if (leftOperand.getType() == Token.NAME\n+                      && rightOperand.getType() == Token.CALL\n+                      && rightOperand.hasOneChild()) {\n+                    Node funcName = rightOperand.getFirstChild();\n+                    if (funcName.getType() == Token.NAME\n+                        && !funcName.getString().startsWith(\"on\")) {\n+                      return true;\n+                    }\n+                  }\n+                }\n+              }\n+            }\n+          }\n+        }\n+      } else {\n+        return NodeUtil.isExpressionNode(child);\n       }\n+    } else {\n+      return NodeUtil.isExpressionNode(child);\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}