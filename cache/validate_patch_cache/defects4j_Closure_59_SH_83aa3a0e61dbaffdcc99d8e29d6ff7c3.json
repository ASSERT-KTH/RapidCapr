{
    "patch": "    // Set warning level for DiagnosticGroups.GLOBAL_THIS.\n    switch (options.checkGlobalThisLevel) {\n      case ERROR:\n        options.setWarningLevel(\n            DiagnosticGroups.GLOBAL_THIS, CheckLevel.ERROR);\n        break;\n      case WARNING:\n        options.setWarningLevel(\n            DiagnosticGroups.GLOBAL_THIS, CheckLevel.WARNING);\n        break;\n      case OFF:\n        // do nothing\n        break;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..962e3043 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,20 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n+    // Set warning level for DiagnosticGroups.GLOBAL_THIS.\n+    switch (options.checkGlobalThisLevel) {\n+      case ERROR:\n+        options.setWarningLevel(\n+            DiagnosticGroups.GLOBAL_THIS, CheckLevel.ERROR);\n+        break;\n+      case WARNING:\n+        options.setWarningLevel(\n+            DiagnosticGroups.GLOBAL_THIS, CheckLevel.WARNING);\n+        break;\n+      case OFF:\n+        // do nothing\n+        break;\n+    }\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}