{
    "patch": "private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    return Arrays.stream(typeVariable.getGenericDeclaration().getTypeParameters())\n            .filter(tv -> tv.getName().equals(typeVariable.getName()))\n            .findFirst()\n            .map(typeParameter -> {\n                Type[] types = typeParameter.getBounds();\n                if (types != null && types.length > 0) {\n                    return types[0];\n                } else {\n                    return null;\n                }\n            })\n            .orElse(null);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..688a75df4 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,25 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    return Arrays.stream(typeVariable.getGenericDeclaration().getTypeParameters())\n+            .filter(tv -> tv.getName().equals(typeVariable.getName()))\n+            .findFirst()\n+            .map(typeParameter -> {\n+                Type[] types = typeParameter.getBounds();\n+                if (types != null && types.length > 0) {\n+                    return types[0];\n+                } else {\n+                    return null;\n+                }\n+            })\n+            .orElse(null);\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}