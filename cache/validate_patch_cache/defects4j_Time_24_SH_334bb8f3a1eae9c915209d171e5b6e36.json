{
    "patch": "        SavedField lastSavedField = null;\n        for (int i = 0; i < count; i++) {\n            SavedField savedField = savedFields[i];\n            if (lastSavedField != null) {\n                DurationField currentField = lastSavedField.iField.getDurationField();\n                DurationField nextDurationField = savedField.iField.getDurationField();\n                if (compareReverse(currentField, nextDurationField) > 0) {\n                    throw new IllegalArgumentException(\"Fields invalid for parsing: \" + currentField.getName() + \" -> \" + nextDurationField.getName());\n                }\n            }\n            try {\n                millis = savedField.set(millis, resetFields);\n            } catch (IllegalFieldValueException e) {\n                if (savedField.iField.getType() == DateTimeFieldType.weekyear()) {\n                    // attempt to parse week based date into standard date\n                    SavedField jan1 = null;\n                    for (SavedField field : savedFields) {\n                        if (field != savedField) {\n                            if (field.iField.getType() == DateTimeFieldType.weekyear()) {\n                                if (jan1 == null) {\n                                    jan1 = field;\n                                }\n                            } else if (field.iField.getType() == DateTimeFieldType.weekOfWeekyear()) {\n                                jan1 = fieldForYearOfWeek(jan1, field);\n                            }\n                        }\n                    }\n                    if (jan1 != null && (lastSavedField == null || jan1.iField.getDurationField().compareTo(lastSavedField.iField.getDurationField()) >= 0)) {\n                        int woyYear = jan1.iValue;\n                        int woyWeek = savedField.iValue;\n                        long instant = 0;\n                        if (chrono instanceof GregorianChronology) {\n                            // jan1 is 01-jan-year\n                            try {\n                                LocalDate date = LocalDate.of(woyYear, 1, 1);\n                                date = date.plusWeeks(woyWeek - 1);\n                                instant = date.toEpochDay() * DateTimeConstants.MILLIS_PER_DAY;\n                            } catch (Exception ex) {\n                                throw new IllegalArgumentException(\"Invalid weekyear date: \" + ex.getMessage());\n                            }\n                        } else {\n                            // calculate date of first day of year\n                            instant = jan1.iField.set(0, woyYear);\n                            // calculate 1st January of 'woyYear' - 1\n                            instant = savedField.iChrono.weekyear().roundCeiling(instant);\n                            // add number of weeks to get 'woyYear'\n                            instant += (woyWeek - 1) * (long) DateTimeConstants.MILLIS_PER_WEEK;\n                        }\n                        millis = savedField.iField.set(instant, savedField.iValue);\n                        for (int j = 0; j < i; j++) {\n                            millis = savedFields[j].set(millis, resetFields);\n                        }\n                        for (int j = i + 1; j < count; j++) {\n                            millis = savedFields[j].set(millis, resetFields);\n                        }\n                    } else {\n                        throw e;\n                    }\n                } else if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n                    throw e;\n                } else {\n                    throw e;\n                }\n            }\n            lastSavedField = savedField;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..47e785e7 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,72 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        SavedField lastSavedField = null;\n+        for (int i = 0; i < count; i++) {\n+            SavedField savedField = savedFields[i];\n+            if (lastSavedField != null) {\n+                DurationField currentField = lastSavedField.iField.getDurationField();\n+                DurationField nextDurationField = savedField.iField.getDurationField();\n+                if (compareReverse(currentField, nextDurationField) > 0) {\n+                    throw new IllegalArgumentException(\"Fields invalid for parsing: \" + currentField.getName() + \" -> \" + nextDurationField.getName());\n+                }\n+            }\n+            try {\n+                millis = savedField.set(millis, resetFields);\n+            } catch (IllegalFieldValueException e) {\n+                if (savedField.iField.getType() == DateTimeFieldType.weekyear()) {\n+                    // attempt to parse week based date into standard date\n+                    SavedField jan1 = null;\n+                    for (SavedField field : savedFields) {\n+                        if (field != savedField) {\n+                            if (field.iField.getType() == DateTimeFieldType.weekyear()) {\n+                                if (jan1 == null) {\n+                                    jan1 = field;\n+                                }\n+                            } else if (field.iField.getType() == DateTimeFieldType.weekOfWeekyear()) {\n+                                jan1 = fieldForYearOfWeek(jan1, field);\n+                            }\n+                        }\n+                    }\n+                    if (jan1 != null && (lastSavedField == null || jan1.iField.getDurationField().compareTo(lastSavedField.iField.getDurationField()) >= 0)) {\n+                        int woyYear = jan1.iValue;\n+                        int woyWeek = savedField.iValue;\n+                        long instant = 0;\n+                        if (chrono instanceof GregorianChronology) {\n+                            // jan1 is 01-jan-year\n+                            try {\n+                                LocalDate date = LocalDate.of(woyYear, 1, 1);\n+                                date = date.plusWeeks(woyWeek - 1);\n+                                instant = date.toEpochDay() * DateTimeConstants.MILLIS_PER_DAY;\n+                            } catch (Exception ex) {\n+                                throw new IllegalArgumentException(\"Invalid weekyear date: \" + ex.getMessage());\n+                            }\n+                        } else {\n+                            // calculate date of first day of year\n+                            instant = jan1.iField.set(0, woyYear);\n+                            // calculate 1st January of 'woyYear' - 1\n+                            instant = savedField.iChrono.weekyear().roundCeiling(instant);\n+                            // add number of weeks to get 'woyYear'\n+                            instant += (woyWeek - 1) * (long) DateTimeConstants.MILLIS_PER_WEEK;\n+                        }\n+                        millis = savedField.iField.set(instant, savedField.iValue);\n+                        for (int j = 0; j < i; j++) {\n+                            millis = savedFields[j].set(millis, resetFields);\n+                        }\n+                        for (int j = i + 1; j < count; j++) {\n+                            millis = savedFields[j].set(millis, resetFields);\n+                        }\n+                    } else {\n+                        throw e;\n+                    }\n+                } else if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+                    throw e;\n+                } else {\n+                    throw e;\n+                }\n+            }\n+            lastSavedField = savedField;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}