{
    "patch": "    public Dfp multiply(final int x) {\n            if (isNaN()) {\n                return newInstance(getZero()).dotrap(Dfp.TRAP_INVALID, MULTIPLY_TRAP, newInstance(x));\n            }\n            if (x == 0) {\n                return newInstance(getZero());\n            }\n            if (x == 1) {\n                return newInstance(this);\n            }\n\n            int intSign = 1;\n            if (x < 0) {\n                intSign = -1;\n            }\n\n            Dfp result = newInstance();\n\n            Dfp powerOfTwo = newInstance(this);\n            int i = intSign * x;\n            powerOfTwo.precision = precision;\n\n            while (i != 0) {\n                if ((i & 1) != 0) {\n                    result = result.add(powerOfTwo);\n                }\n\n                i /= 2;\n                if (i != 0) {\n                    powerOfTwo = powerOfTwo.add(powerOfTwo);\n                }\n            }\n\n            result.sign = sign == intSign ? 1 : -1;\n            return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..467649f76 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,40 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+            if (isNaN()) {\n+                return newInstance(getZero()).dotrap(Dfp.TRAP_INVALID, MULTIPLY_TRAP, newInstance(x));\n+            }\n+            if (x == 0) {\n+                return newInstance(getZero());\n+            }\n+            if (x == 1) {\n+                return newInstance(this);\n+            }\n+\n+            int intSign = 1;\n+            if (x < 0) {\n+                intSign = -1;\n+            }\n+\n+            Dfp result = newInstance();\n+\n+            Dfp powerOfTwo = newInstance(this);\n+            int i = intSign * x;\n+            powerOfTwo.precision = precision;\n+\n+            while (i != 0) {\n+                if ((i & 1) != 0) {\n+                    result = result.add(powerOfTwo);\n+                }\n+\n+                i /= 2;\n+                if (i != 0) {\n+                    powerOfTwo = powerOfTwo.add(powerOfTwo);\n+                }\n+            }\n+\n+            result.sign = sign == intSign ? 1 : -1;\n+            return result;\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}