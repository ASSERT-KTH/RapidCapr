{
    "patch": "for (int i = 0; i < count; i++) {\n    try {\n        millis = savedFields[i].set(millis, resetFields);\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n        }\n        throw e;\n    }\n    if (i == 0) {\n        // check if the field is month and value is -1\n        if (savedFields[i].iField.getType() == DateTimeFieldType.monthOfYear() && savedFields[i].iValue == -1) {\n            boolean yearSet = false;\n            int year = iDefaultYear - 1;\n            for (int j = 0; j < count; j++) {\n                DurationField field = savedFields[j].iField.getDurationField();\n                if (field != null && field.getType() == DurationFieldType.years()) {\n                    year = savedFields[j].iValue; // found year field\n                    yearSet = true;\n                    break;\n                }\n            }\n            if (!yearSet) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n\n            LocalDate dt = new LocalDate(year, 12, 1, iChrono);\n            for (int j = 0; j < count; j++) {\n                dt = savedFields[j].set(dt, savedFields[j].iValue, resetFields);\n            }\n\n            // Check that parsing doesn't jump over a month.\n            if (chrono.year().get(dt.toDateTimeAtCurrentTime()).get() != year\n                    || chrono.monthOfYear().get(dt.toDateTimeAtCurrentTime()).get() != 12) {\n                throw new IllegalArgumentException(\"The parsed date is before the supported date range\");\n            }\n\n            return iChrono.set(dt.getYear(), dt.getMonthOfYear(), dt.getDayOfMonth(), 0, 0, 0, 0);\n        }\n    }\n    if (millis < iMillis) {\n        throw new IllegalArgumentException(\"The parsed date is before the supported date range\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..1ce2eb65 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,51 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+for (int i = 0; i < count; i++) {\n+    try {\n+        millis = savedFields[i].set(millis, resetFields);\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+        }\n+        throw e;\n+    }\n+    if (i == 0) {\n+        // check if the field is month and value is -1\n+        if (savedFields[i].iField.getType() == DateTimeFieldType.monthOfYear() && savedFields[i].iValue == -1) {\n+            boolean yearSet = false;\n+            int year = iDefaultYear - 1;\n+            for (int j = 0; j < count; j++) {\n+                DurationField field = savedFields[j].iField.getDurationField();\n+                if (field != null && field.getType() == DurationFieldType.years()) {\n+                    year = savedFields[j].iValue; // found year field\n+                    yearSet = true;\n+                    break;\n+                }\n+            }\n+            if (!yearSet) {\n+                saveField(DateTimeFieldType.year(), iDefaultYear);\n+                return computeMillis(resetFields, text);\n+            }\n+\n+            LocalDate dt = new LocalDate(year, 12, 1, iChrono);\n+            for (int j = 0; j < count; j++) {\n+                dt = savedFields[j].set(dt, savedFields[j].iValue, resetFields);\n+            }\n+\n+            // Check that parsing doesn't jump over a month.\n+            if (chrono.year().get(dt.toDateTimeAtCurrentTime()).get() != year\n+                    || chrono.monthOfYear().get(dt.toDateTimeAtCurrentTime()).get() != 12) {\n+                throw new IllegalArgumentException(\"The parsed date is before the supported date range\");\n+            }\n+\n+            return iChrono.set(dt.getYear(), dt.getMonthOfYear(), dt.getDayOfMonth(), 0, 0, 0, 0);\n+        }\n+    }\n+    if (millis < iMillis) {\n+        throw new IllegalArgumentException(\"The parsed date is before the supported date range\");\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}