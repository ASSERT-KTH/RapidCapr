{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n      // If the expression is a return statement, we need to look at its child.\n      if (maybeExpr.getType() == Token.RETURN) {\n        Node returnedNode = maybeExpr.getFirstChild();\n        return isReturnNodeFoldable(returnedNode);\n      } else {\n        return isNodeFoldable(maybeExpr);\n      }\n    }\n  }\n\n  return false;\n}\n\n/**\n * Checks if the node is eligible to be folded (without breaking the code).\n *\n * @param n The node to check.\n * @return True if the node is eligible to be folded, false otherwise.\n */\nprivate boolean isNodeFoldable(Node n) {\n  // If the node is not an expression, it's always a foldable block.\n  if (!NodeUtil.isExpressionNode(n)) {\n    return true;\n  }\n\n  switch (n.getType()) {\n    case Token.NOT:\n    case Token.BITNOT:\n    case Token.POS:\n    case Token.NEG:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.ADD:\n      // Unary operators are foldable if their child is foldable.\n      return isNodeFoldable(n.getOnlyChild());\n\n    case Token.AND:\n    case Token.OR: {\n      // Logicals are foldable if both their children are foldable.\n      Node lhs = n.getFirstChild();\n      Node rhs = n.getLastChild();\n      return isNodeFoldable(lhs) && isNodeFoldable(rhs);\n    }\n\n    case Token.COMMA: {\n      // Commas are foldable if their RHS is foldable.\n      Node rhs = n.getLastChild();\n      return isNodeFoldable(rhs);\n    }\n\n    case Token.HOOK: {\n      // Conditional operators are foldable if both operands are foldable.\n      Node lhs = n.getSecondChild();\n      Node rhs = n.getLastChild();\n      return isNodeFoldable(lhs) && isNodeFoldable(rhs);\n    }\n\n    case Token.CALL:\n    case Token.NEW: {\n      // Function calls and constructors are only foldable if the arg expressions are foldable.\n      for (Node child = n.getFirstChild().getNext(); child != null; child = child.getNext()) {\n        if (!isNodeFoldable(child)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    case Token.COMPUTED_PROP: {\n      // Computed props are only foldable if their key and value are foldable.\n      Node key = n.getSecondChild();\n      Node value = n.getLastChild();\n      return isNodeFoldable(key) && isNodeFoldable(value);\n    }\n\n    case Token.OBJECTLIT: {\n      // Object literals are only foldable if all of their children are foldable.\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        if (!isNodeFoldable(child.getLastChild())) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    default:\n      return true;\n  }\n}\n\n/**\n * Checks if the given return node is eligible to be folded (without breaking the code).\n * Returns true if the node is foldable, false otherwise.\n *\n * @param node The return node to check.\n * @return True if the node is foldable, false otherwise.\n */\nprivate boolean isReturnNodeFoldable(Node node) {\n  // If the node is not an expression, just return true.\n  if (!NodeUtil.isExpressionNode(node)) {\n    return true;\n  }\n\n  // Otherwise, we need to check if the expression is eligible to be folded.\n  return isNodeFoldable(node);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..b1a60372 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,116 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+      // If the expression is a return statement, we need to look at its child.\n+      if (maybeExpr.getType() == Token.RETURN) {\n+        Node returnedNode = maybeExpr.getFirstChild();\n+        return isReturnNodeFoldable(returnedNode);\n+      } else {\n+        return isNodeFoldable(maybeExpr);\n       }\n     }\n+  }\n \n-    return false;\n+  return false;\n+}\n+\n+/**\n+ * Checks if the node is eligible to be folded (without breaking the code).\n+ *\n+ * @param n The node to check.\n+ * @return True if the node is eligible to be folded, false otherwise.\n+ */\n+private boolean isNodeFoldable(Node n) {\n+  // If the node is not an expression, it's always a foldable block.\n+  if (!NodeUtil.isExpressionNode(n)) {\n+    return true;\n+  }\n+\n+  switch (n.getType()) {\n+    case Token.NOT:\n+    case Token.BITNOT:\n+    case Token.POS:\n+    case Token.NEG:\n+    case Token.TYPEOF:\n+    case Token.VOID:\n+    case Token.ADD:\n+      // Unary operators are foldable if their child is foldable.\n+      return isNodeFoldable(n.getOnlyChild());\n+\n+    case Token.AND:\n+    case Token.OR: {\n+      // Logicals are foldable if both their children are foldable.\n+      Node lhs = n.getFirstChild();\n+      Node rhs = n.getLastChild();\n+      return isNodeFoldable(lhs) && isNodeFoldable(rhs);\n+    }\n+\n+    case Token.COMMA: {\n+      // Commas are foldable if their RHS is foldable.\n+      Node rhs = n.getLastChild();\n+      return isNodeFoldable(rhs);\n+    }\n+\n+    case Token.HOOK: {\n+      // Conditional operators are foldable if both operands are foldable.\n+      Node lhs = n.getSecondChild();\n+      Node rhs = n.getLastChild();\n+      return isNodeFoldable(lhs) && isNodeFoldable(rhs);\n+    }\n+\n+    case Token.CALL:\n+    case Token.NEW: {\n+      // Function calls and constructors are only foldable if the arg expressions are foldable.\n+      for (Node child = n.getFirstChild().getNext(); child != null; child = child.getNext()) {\n+        if (!isNodeFoldable(child)) {\n+          return false;\n+        }\n+      }\n+      return true;\n+    }\n+\n+    case Token.COMPUTED_PROP: {\n+      // Computed props are only foldable if their key and value are foldable.\n+      Node key = n.getSecondChild();\n+      Node value = n.getLastChild();\n+      return isNodeFoldable(key) && isNodeFoldable(value);\n+    }\n+\n+    case Token.OBJECTLIT: {\n+      // Object literals are only foldable if all of their children are foldable.\n+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+        if (!isNodeFoldable(child.getLastChild())) {\n+          return false;\n+        }\n+      }\n+      return true;\n+    }\n+\n+    default:\n+      return true;\n   }\n+}\n+\n+/**\n+ * Checks if the given return node is eligible to be folded (without breaking the code).\n+ * Returns true if the node is foldable, false otherwise.\n+ *\n+ * @param node The return node to check.\n+ * @return True if the node is foldable, false otherwise.\n+ */\n+private boolean isReturnNodeFoldable(Node node) {\n+  // If the node is not an expression, just return true.\n+  if (!NodeUtil.isExpressionNode(node)) {\n+    return true;\n+  }\n+\n+  // Otherwise, we need to check if the expression is eligible to be folded.\n+  return isNodeFoldable(node);\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}