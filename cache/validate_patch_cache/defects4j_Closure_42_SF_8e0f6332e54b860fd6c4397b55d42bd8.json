{
    "patch": "private class TransformDispatcher implements IRFactory.TypeSafeDispatcher<Node> {\n  @Override\n  public Node processArrayComprehension(ArrayComprehension node) {\n    return transformArrayComprehension(node);\n  }\n\n  @Override\n  public Node processArrayLiteral(ArrayLiteral node) {\n    return newNode(Token.ARRAYLIT, transformExprList(node.getElements()));\n  }\n\n  @Override\n  public Node processAssignment(Assignment node) {\n    return transformAssignment(node);\n  }\n\n  @Override\n  public Node processBinary(BinaryExpression node) {\n    return transformBinary(node);\n  }\n\n  @Override\n  public Node processBlock(Block node) {\n    return transformBlock(node);\n  }\n\n  @Override\n  public Node processBreak(BreakStatement node) {\n    return processBreakStatement(node);\n  }\n\n  @Override\n  public Node processCall(Call node) {\n    return transformCall(node);\n  }\n\n  @Override\n  public Node processCatch(CatchClause node) {\n    return processCatchClause(node);\n  }\n\n  @Override\n  public Node processChain(ChainableInvocation node) {\n    return transformChainableInvocation(node);\n  }\n\n  @Override\n  public Node processConditionalExpression(ConditionalExpression node) {\n    return processConditionalExpression(node);\n  }\n\n  @Override\n  public Node processContinue(ContinueStatement node) {\n    return processContinueStatement(node);\n  }\n\n  @Override\n  public Node processDoLoop(DoLoop node) {\n    return processDoLoop(node);\n  }\n\n  @Override\n  public Node processElementGet(ElementGet node) {\n    return processElementGet(node);\n  }\n\n  @Override\n  public Node processEmpty(EmptyExpression node) {\n    return processEmptyExpression(node);\n  }\n\n  @Override\n  public Node processExprStmt(ExpressionStatement node) {\n    return processExpressionStatement(node);\n  }\n\n  @Override\n  public Node processForInLoop(ForInLoop node) {\n    return processForInLoop(node);\n  }\n\n  @Override\n  public Node processForLoop(ForLoop node) {\n    return processForLoop(node);\n  }\n\n  @Override\n  public Node processFunction(FunctionNode node) {\n    return transformFunction(node);\n  }\n\n  @Override\n  public Node processGetter(FunctionNode node) {\n    return transformGetter(node);\n  }\n\n  @Override\n  public Node processHook(TernaryExpression node) {\n    return transformConditional(node);\n  }\n\n  @Override\n  public Node processIf(IfStatement node) {\n    return transformIf(node);\n  }\n\n  @Override\n  public Node processInfix(InfixExpression node) {\n    return newNode(Token.INFIX, node.getOperator().toString(),\n            transform(node.getLeft()), transform(node.getRight()));\n  }\n\n  @Override\n  public Node processKeywordLiteral(KeywordLiteral node) {\n    return newNode(Token.KEYWORD, node.toSource());\n  }\n\n  @Override\n  public Node processLabel(Label node) {\n    return transformLabel(node);\n  }\n\n  @Override\n  public Node processName(Name node) {\n    return newNode(Token.NAME, node.getIdentifier());\n  }\n\n  @Override\n  public Node processNew(NewExpression node) {\n    return transformNew(node);\n  }\n\n  @Override\n  public Node processNumber(NumberLiteral node) {\n    return newNode(Token.NUMBER, node.getValue());\n  }\n\n  @Override\n  public Node processObject(ObjectLiteral node) {\n    return transformObject(node);\n  }\n\n  @Override\n  public Node processParenExpr(ParenthesizedExpression node) {\n    return newNode(Token.LP, transform(node.getExpression()));\n  }\n\n  @Override\n  public Node processPropertyGet(PropertyGet node) {\n    return newNode(Token.GETPROP, transform(node.getTarget()),\n            newNode(Token.STRING, node.getProperty()));\n  }\n\n  @Override\n  public Node processRegExp(RegExpLiteral node) {\n    return newNode(Token.REGEXP, node.getValue());\n  }\n\n  @Override\n  public Node processReturn(ReturnStatement node) {\n    return processReturnStatement(node);\n  }\n\n  @Override\n  public Node processString(StringLiteral node) {\n    return newNode(Token.STRING, node.getValue());\n  }\n\n  @Override\n  public Node processSwitch(SwitchStatement node) {\n    return transformSwitch(node);\n  }\n\n  @Override\n  public Node processThrow(ThrowStatement node) {\n    return transformThrow(node);\n  }\n\n  @Override\n  public Node processTry(TryStatement node) {\n    return transformTry(node);\n  }\n\n  @Override\n  public Node processUnary(UnaryExpression node) {\n    return newNode(Token.UNARY, node.getOperator().toString(),\n            transform(node.getOperand()));\n  }\n\n  @Override\n  public Node processVariable(VariableDeclaration node) {\n    return transformVariable(node);\n  }\n\n  @Override\n  public Node processWhileLoop(WhileLoop node) {\n    return processWhile(node);\n  }\n\n  @Override\n  public Node processWith(WithStatement node) {\n    return transformWith(node);\n  }\n  \n  @Override\n  public Node processExpressionStatement(ExpressionStatement statementNode) {\n    Node node = newNode(transformTokenType(statementNode.getType()));\n    node.addChildToBack(transform(statementNode.getExpression()));\n    return node;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..e48e67de 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,106 +473,217 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+private class TransformDispatcher implements IRFactory.TypeSafeDispatcher<Node> {\n+  @Override\n+  public Node processArrayComprehension(ArrayComprehension node) {\n+    return transformArrayComprehension(node);\n+  }\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n+  @Override\n+  public Node processArrayLiteral(ArrayLiteral node) {\n+    return newNode(Token.ARRAYLIT, transformExprList(node.getElements()));\n+  }\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n+  @Override\n+  public Node processAssignment(Assignment node) {\n+    return transformAssignment(node);\n+  }\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n+  @Override\n+  public Node processBinary(BinaryExpression node) {\n+    return transformBinary(node);\n+  }\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n+  @Override\n+  public Node processBlock(Block node) {\n+    return transformBlock(node);\n+  }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n+  @Override\n+  public Node processBreak(BreakStatement node) {\n+    return processBreakStatement(node);\n+  }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n+  @Override\n+  public Node processCall(Call node) {\n+    return transformCall(node);\n+  }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n+  @Override\n+  public Node processCatch(CatchClause node) {\n+    return processCatchClause(node);\n+  }\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n+  @Override\n+  public Node processChain(ChainableInvocation node) {\n+    return transformChainableInvocation(node);\n+  }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n+  @Override\n+  public Node processConditionalExpression(ConditionalExpression node) {\n+    return processConditionalExpression(node);\n+  }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n+  @Override\n+  public Node processContinue(ContinueStatement node) {\n+    return processContinueStatement(node);\n+  }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n+  @Override\n+  public Node processDoLoop(DoLoop node) {\n+    return processDoLoop(node);\n+  }\n \n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n+  @Override\n+  public Node processElementGet(ElementGet node) {\n+    return processElementGet(node);\n+  }\n+\n+  @Override\n+  public Node processEmpty(EmptyExpression node) {\n+    return processEmptyExpression(node);\n+  }\n+\n+  @Override\n+  public Node processExprStmt(ExpressionStatement node) {\n+    return processExpressionStatement(node);\n+  }\n+\n+  @Override\n+  public Node processForInLoop(ForInLoop node) {\n+    return processForInLoop(node);\n+  }\n+\n+  @Override\n+  public Node processForLoop(ForLoop node) {\n+    return processForLoop(node);\n+  }\n+\n+  @Override\n+  public Node processFunction(FunctionNode node) {\n+    return transformFunction(node);\n+  }\n+\n+  @Override\n+  public Node processGetter(FunctionNode node) {\n+    return transformGetter(node);\n+  }\n+\n+  @Override\n+  public Node processHook(TernaryExpression node) {\n+    return transformConditional(node);\n+  }\n+\n+  @Override\n+  public Node processIf(IfStatement node) {\n+    return transformIf(node);\n+  }\n+\n+  @Override\n+  public Node processInfix(InfixExpression node) {\n+    return newNode(Token.INFIX, node.getOperator().toString(),\n+            transform(node.getLeft()), transform(node.getRight()));\n+  }\n+\n+  @Override\n+  public Node processKeywordLiteral(KeywordLiteral node) {\n+    return newNode(Token.KEYWORD, node.toSource());\n+  }\n+\n+  @Override\n+  public Node processLabel(Label node) {\n+    return transformLabel(node);\n+  }\n+\n+  @Override\n+  public Node processName(Name node) {\n+    return newNode(Token.NAME, node.getIdentifier());\n+  }\n+\n+  @Override\n+  public Node processNew(NewExpression node) {\n+    return transformNew(node);\n+  }\n+\n+  @Override\n+  public Node processNumber(NumberLiteral node) {\n+    return newNode(Token.NUMBER, node.getValue());\n+  }\n+\n+  @Override\n+  public Node processObject(ObjectLiteral node) {\n+    return transformObject(node);\n+  }\n+\n+  @Override\n+  public Node processParenExpr(ParenthesizedExpression node) {\n+    return newNode(Token.LP, transform(node.getExpression()));\n+  }\n+\n+  @Override\n+  public Node processPropertyGet(PropertyGet node) {\n+    return newNode(Token.GETPROP, transform(node.getTarget()),\n+            newNode(Token.STRING, node.getProperty()));\n+  }\n+\n+  @Override\n+  public Node processRegExp(RegExpLiteral node) {\n+    return newNode(Token.REGEXP, node.getValue());\n+  }\n+\n+  @Override\n+  public Node processReturn(ReturnStatement node) {\n+    return processReturnStatement(node);\n+  }\n+\n+  @Override\n+  public Node processString(StringLiteral node) {\n+    return newNode(Token.STRING, node.getValue());\n+  }\n+\n+  @Override\n+  public Node processSwitch(SwitchStatement node) {\n+    return transformSwitch(node);\n+  }\n+\n+  @Override\n+  public Node processThrow(ThrowStatement node) {\n+    return transformThrow(node);\n+  }\n+\n+  @Override\n+  public Node processTry(TryStatement node) {\n+    return transformTry(node);\n+  }\n+\n+  @Override\n+  public Node processUnary(UnaryExpression node) {\n+    return newNode(Token.UNARY, node.getOperator().toString(),\n+            transform(node.getOperand()));\n+  }\n+\n+  @Override\n+  public Node processVariable(VariableDeclaration node) {\n+    return transformVariable(node);\n+  }\n+\n+  @Override\n+  public Node processWhileLoop(WhileLoop node) {\n+    return processWhile(node);\n+  }\n+\n+  @Override\n+  public Node processWith(WithStatement node) {\n+    return transformWith(node);\n+  }\n+  \n+  @Override\n+  public Node processExpressionStatement(ExpressionStatement statementNode) {\n+    Node node = newNode(transformTokenType(statementNode.getType()));\n+    node.addChildToBack(transform(statementNode.getExpression()));\n+    return node;\n+  }\n+}\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: class IRFactory.TransformDispatcher is already defined in class IRFactory",
    "test_result": "ERROR"
}