{
    "patch": "import java.lang.Character;\n\npublic class StringUtils {\n\n    public static boolean containsAny(char[] arr1, char[] arr2) {\n        if (arr1 == null || arr2 == null) {\n            return false;\n        }\n        for (int i = 0; i < arr1.length; ++i) {\n            char c = arr1[i];\n            for (int j = 0; j < arr2.length; ++j) {\n                if (arr2[j] == c) {\n                    return true;\n                } else if (Character.isHighSurrogate(c) && j < arr2.length - 1\n                        && arr2[j + 1] != 0 && Character.isLowSurrogate(arr2[j + 1])\n                        && Character.toCodePoint(c, arr2[j + 1]) == Character.codePointAt(arr2, j)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..9522232b 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,29 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+import java.lang.Character;\n+\n+public class StringUtils {\n+\n+    public static boolean containsAny(char[] arr1, char[] arr2) {\n+        if (arr1 == null || arr2 == null) {\n+            return false;\n+        }\n+        for (int i = 0; i < arr1.length; ++i) {\n+            char c = arr1[i];\n+            for (int j = 0; j < arr2.length; ++j) {\n+                if (arr2[j] == c) {\n+                    return true;\n+                } else if (Character.isHighSurrogate(c) && j < arr2.length - 1\n+                        && arr2[j + 1] != 0 && Character.isLowSurrogate(arr2[j + 1])\n+                        && Character.toCodePoint(c, arr2[j + 1]) == Character.codePointAt(arr2, j)) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}