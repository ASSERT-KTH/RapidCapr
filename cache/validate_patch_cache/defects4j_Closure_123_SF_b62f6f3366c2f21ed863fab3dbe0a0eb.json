{
    "patch": "public String fixCode(String code) {\n\n    int index = code.indexOf(\"for(\");\n    while (index >= 0) {\n        int endIndex = findEndOfForLoop(code, index);\n        String loopSection = code.substring(index, endIndex);\n        String[] parts = loopSection.split(\";\");\n        if (parts.length == 2 && parts[1].trim().equals(\")\")) {\n            // nothing to fix\n        } else {\n            // insert \"true\" after the condition\n            int conditionEndIndex = index + parts[0].length();\n            String fixedLoopSection = loopSection.substring(0, conditionEndIndex) + \"true;\" + loopSection.substring(conditionEndIndex);\n            code = code.substring(0, index) + fixedLoopSection + code.substring(endIndex);\n        }\n        index = code.indexOf(\"for(\", endIndex + 1);\n    }\n    return code;\n}\n\n// helper method to find the end of a for loop\nprivate int findEndOfForLoop(String code, int startIndex) {\n    int count = 0;\n    int index = startIndex;\n    while (index < code.length()) {\n        char c = code.charAt(index);\n        if (c == '(') {\n            count++;\n        } else if (c == ')') {\n            count--;\n            if (count == 0) {\n                return index + 1;\n            }\n        }\n        index++;\n    }\n    return -1;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..984c4e2d 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,44 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+\n+    int index = code.indexOf(\"for(\");\n+    while (index >= 0) {\n+        int endIndex = findEndOfForLoop(code, index);\n+        String loopSection = code.substring(index, endIndex);\n+        String[] parts = loopSection.split(\";\");\n+        if (parts.length == 2 && parts[1].trim().equals(\")\")) {\n+            // nothing to fix\n+        } else {\n+            // insert \"true\" after the condition\n+            int conditionEndIndex = index + parts[0].length();\n+            String fixedLoopSection = loopSection.substring(0, conditionEndIndex) + \"true;\" + loopSection.substring(conditionEndIndex);\n+            code = code.substring(0, index) + fixedLoopSection + code.substring(endIndex);\n+        }\n+        index = code.indexOf(\"for(\", endIndex + 1);\n+    }\n+    return code;\n+}\n+\n+// helper method to find the end of a for loop\n+private int findEndOfForLoop(String code, int startIndex) {\n+    int count = 0;\n+    int index = startIndex;\n+    while (index < code.length()) {\n+        char c = code.charAt(index);\n+        if (c == '(') {\n+            count++;\n+        } else if (c == ')') {\n+            count--;\n+            if (count == 0) {\n+                return index + 1;\n+            }\n+        }\n+        index++;\n+    }\n+    return -1;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}