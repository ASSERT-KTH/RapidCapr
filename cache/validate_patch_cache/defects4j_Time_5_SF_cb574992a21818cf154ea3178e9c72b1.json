{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();\n    millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n    millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n    millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;\n    millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;\n    millis += ((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK;\n\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    \n    int remainingDays = getDays() + getWeeks() * 7;\n    int totalMonths = getMonths() + remainingDays / 30;\n    int remainingMonths = totalMonths % 12;\n    int totalYears = getYears() + totalMonths / 12;\n    \n    result = totalYears != 0 ? result.withYears(totalYears) : result;\n    result = remainingMonths != 0 ? result.withMonths(remainingMonths) : result;\n    \n    remainingDays = remainingDays % 30;\n    result = remainingDays != 0 ? result.withDays(remainingDays) : result;\n    \n    return result.normalizedStandard();\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..07f75e04 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,29 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis();\n+    millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n+    millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n+    millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;\n+    millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;\n+    millis += ((long) getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK;\n+\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+    \n+    int remainingDays = getDays() + getWeeks() * 7;\n+    int totalMonths = getMonths() + remainingDays / 30;\n+    int remainingMonths = totalMonths % 12;\n+    int totalYears = getYears() + totalMonths / 12;\n+    \n+    result = totalYears != 0 ? result.withYears(totalYears) : result;\n+    result = remainingMonths != 0 ? result.withMonths(remainingMonths) : result;\n+    \n+    remainingDays = remainingDays % 30;\n+    result = remainingDays != 0 ? result.withDays(remainingDays) : result;\n+    \n+    return result.normalizedStandard();\n+}\n \n }",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}