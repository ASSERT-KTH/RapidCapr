{
    "patch": "public Fraction reduce() {\n    if (numerator == 0) {\n        return ZERO;\n    }\n\n    int numSign = Integer.signum(numerator);\n    int denSign = Integer.signum(denominator);\n    int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));\n\n    if (gcd == 1) {\n        return this;\n    }\n\n    int newNumerator = numSign * (Math.abs(numerator) / gcd);\n    int newDenominator = denSign * (Math.abs(denominator) / gcd);\n    return new Fraction(newNumerator, newDenominator);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..59626a3e 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,14 +462,24 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n-        }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+public Fraction reduce() {\n+    if (numerator == 0) {\n+        return ZERO;\n     }\n \n+    int numSign = Integer.signum(numerator);\n+    int denSign = Integer.signum(denominator);\n+    int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));\n+\n+    if (gcd == 1) {\n+        return this;\n+    }\n+\n+    int newNumerator = numSign * (Math.abs(numerator) / gcd);\n+    int newDenominator = denSign * (Math.abs(denominator) / gcd);\n+    return new Fraction(newNumerator, newDenominator);\n+}\n+\n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>\n      * ",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<0/1> was not:<0/1>",
    "test_result": "FAIL"
}