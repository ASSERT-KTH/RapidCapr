{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // Get the initial offset at `instantLocal`\n    int initialOffset = getOffset(instantLocal);\n\n    // Convert `instantLocal` to UTC\n    long instantUTC = instantLocal - initialOffset;\n\n    // Get the offset at the new UTC instant. It may be different from `initialOffset`\n    int newOffset = getOffset(instantUTC);\n\n    // If the `initialOffset` and `newOffset` match, return `newOffset`\n    if (initialOffset == newOffset) {\n        return newOffset;\n    }\n\n    // Find the next and previous local DST transition instants\n    long nextTransitionLocal = nextTransition(instantLocal);\n    long prevTransitionLocal = previousTransition(instantLocal);\n\n    // Find the next and previous UTC DST transition instants\n    long nextTransitionUTC = nextTransition(instantUTC);\n    long prevTransitionUTC = previousTransition(instantUTC);\n\n    // If the next local DST transition matches the next UTC DST transition, and the new offset is correct, return `newOffset`\n    if (nextTransitionLocal == nextTransitionUTC && getOffset(nextTransitionLocal) == newOffset) {\n        return newOffset;\n    }\n\n    // If the previous local DST transition matches the previous UTC DST transition, and the initial offset is correct, return `initialOffset`\n    if (prevTransitionLocal == prevTransitionUTC && getOffset(prevTransitionLocal) == initialOffset) {\n        return initialOffset;\n    }\n\n    // If the local instant is in an overlap where the previous transition is not the previous UTC transition, return the initial offset\n    if (initialOffset > newOffset && prevTransitionLocal != prevTransitionUTC) {\n        return initialOffset;\n    }\n\n    // If the local instant is in a gap where the next transition is not the next UTC transition, return the new offset\n    if (newOffset > initialOffset && nextTransitionLocal != nextTransitionUTC) {\n        return newOffset;\n    }\n\n    // Check if the local instant is within a gap or overlap\n    if (initialOffset > newOffset) { // Gap\n        return getOffset(nextTransitionLocal - newOffset);\n    } else if (newOffset > initialOffset) { // Overlap\n        return getOffset(prevTransitionLocal - initialOffset);\n    }\n\n    // If the function has not returned yet, return the new offset\n    return newOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..c32cff03 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,60 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        }\n-        return offsetAdjusted;\n+public int getOffsetFromLocal(long instantLocal) {\n+    // Get the initial offset at `instantLocal`\n+    int initialOffset = getOffset(instantLocal);\n+\n+    // Convert `instantLocal` to UTC\n+    long instantUTC = instantLocal - initialOffset;\n+\n+    // Get the offset at the new UTC instant. It may be different from `initialOffset`\n+    int newOffset = getOffset(instantUTC);\n+\n+    // If the `initialOffset` and `newOffset` match, return `newOffset`\n+    if (initialOffset == newOffset) {\n+        return newOffset;\n+    }\n+\n+    // Find the next and previous local DST transition instants\n+    long nextTransitionLocal = nextTransition(instantLocal);\n+    long prevTransitionLocal = previousTransition(instantLocal);\n+\n+    // Find the next and previous UTC DST transition instants\n+    long nextTransitionUTC = nextTransition(instantUTC);\n+    long prevTransitionUTC = previousTransition(instantUTC);\n+\n+    // If the next local DST transition matches the next UTC DST transition, and the new offset is correct, return `newOffset`\n+    if (nextTransitionLocal == nextTransitionUTC && getOffset(nextTransitionLocal) == newOffset) {\n+        return newOffset;\n+    }\n+\n+    // If the previous local DST transition matches the previous UTC DST transition, and the initial offset is correct, return `initialOffset`\n+    if (prevTransitionLocal == prevTransitionUTC && getOffset(prevTransitionLocal) == initialOffset) {\n+        return initialOffset;\n+    }\n+\n+    // If the local instant is in an overlap where the previous transition is not the previous UTC transition, return the initial offset\n+    if (initialOffset > newOffset && prevTransitionLocal != prevTransitionUTC) {\n+        return initialOffset;\n     }\n \n+    // If the local instant is in a gap where the next transition is not the next UTC transition, return the new offset\n+    if (newOffset > initialOffset && nextTransitionLocal != nextTransitionUTC) {\n+        return newOffset;\n+    }\n+\n+    // Check if the local instant is within a gap or overlap\n+    if (initialOffset > newOffset) { // Gap\n+        return getOffset(nextTransitionLocal - newOffset);\n+    } else if (newOffset > initialOffset) { // Overlap\n+        return getOffset(prevTransitionLocal - initialOffset);\n+    }\n+\n+    // If the function has not returned yet, return the new offset\n+    return newOffset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}