{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    // First pass through the argument list removes any unreferenced args.\n    Node arg = argList.getFirstChild();\n    while (arg != null) {\n      Var var = fnScope.getVar(arg.getString());\n      if (!referenced.contains(var)) {\n        Node next = arg.getNext();\n        argList.removeChild(arg);\n        compiler.reportCodeChange();\n        arg = next;\n      } else {\n        arg = arg.getNext();\n      }\n    }\n\n    if (argList.hasChildren() && argList.getFirstChild().isName()) {\n      // Second pass through the argument list removes any inline defaults\n      // for unreferenced parameters. Also, the rest parameter may have been\n      // inlined so we need to check if it's an unused reference.\n      List<Node> children = argList.children();\n      int end = children.size() - 1;\n\n      for (int i = 0; i <= end; i++) {\n        Node argNode = children.get(i);\n        Var var = fnScope.getVar(argNode.getString());\n\n        if (var == null) {\n          continue;\n        }\n\n        Node defaultValue = null;\n        if (argNode.hasChildren() && argNode.getLastChild().isDefaultValue()) {\n          defaultValue = argNode.getLastChild();\n        }\n\n        if (referenced.contains(var)) {\n          if (defaultValue != null) {\n            removeDefaultValueForLiveParameter(defaultValue);\n\n            // When the last parameter has inlined default value, and if it \n            // is referred in the function body, remove the inline default value.\n            // So that the length of the parameter list does not misrepresent\n            // amount of parameters callers need to pass in. Follow the link\n            // for more concrete example:\n            // https://github.com/google/closure-compiler/pull/2381#issuecomment-534848900\n            if (i == end) {\n              Node functionBody = NodeUtil.getFunctionBody(function);\n              if (functionBody != null && NodeUtil.has(NodeUtil.getAllNodesCrossingThreshold(\n                  functionBody,\n                  1,\n                  n -> n.isName() && argNode.getString().equals(n.getString())))) {\n                removeDefaultValue(defaultValue);\n              }\n            }\n          }\n        } else if (defaultValue != null) {\n          argNode.removeChild(defaultValue);\n          compiler.reportCodeChange();\n        }\n      }\n    }\n\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..25663a00 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,82 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    // First pass through the argument list removes any unreferenced args.\n+    Node arg = argList.getFirstChild();\n+    while (arg != null) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (!referenced.contains(var)) {\n+        Node next = arg.getNext();\n+        argList.removeChild(arg);\n+        compiler.reportCodeChange();\n+        arg = next;\n+      } else {\n+        arg = arg.getNext();\n+      }\n+    }\n+\n+    if (argList.hasChildren() && argList.getFirstChild().isName()) {\n+      // Second pass through the argument list removes any inline defaults\n+      // for unreferenced parameters. Also, the rest parameter may have been\n+      // inlined so we need to check if it's an unused reference.\n+      List<Node> children = argList.children();\n+      int end = children.size() - 1;\n+\n+      for (int i = 0; i <= end; i++) {\n+        Node argNode = children.get(i);\n+        Var var = fnScope.getVar(argNode.getString());\n+\n+        if (var == null) {\n+          continue;\n+        }\n+\n+        Node defaultValue = null;\n+        if (argNode.hasChildren() && argNode.getLastChild().isDefaultValue()) {\n+          defaultValue = argNode.getLastChild();\n+        }\n+\n+        if (referenced.contains(var)) {\n+          if (defaultValue != null) {\n+            removeDefaultValueForLiveParameter(defaultValue);\n+\n+            // When the last parameter has inlined default value, and if it \n+            // is referred in the function body, remove the inline default value.\n+            // So that the length of the parameter list does not misrepresent\n+            // amount of parameters callers need to pass in. Follow the link\n+            // for more concrete example:\n+            // https://github.com/google/closure-compiler/pull/2381#issuecomment-534848900\n+            if (i == end) {\n+              Node functionBody = NodeUtil.getFunctionBody(function);\n+              if (functionBody != null && NodeUtil.has(NodeUtil.getAllNodesCrossingThreshold(\n+                  functionBody,\n+                  1,\n+                  n -> n.isName() && argNode.getString().equals(n.getString())))) {\n+                removeDefaultValue(defaultValue);\n+              }\n+            }\n+          }\n+        } else if (defaultValue != null) {\n+          argNode.removeChild(defaultValue);\n+          compiler.reportCodeChange();\n+        }\n+      }\n+    }\n+\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}