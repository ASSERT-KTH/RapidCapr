{
    "patch": "private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    if (typeVariable.getGenericDeclaration() instanceof Class) {\n        Class<?> clazz = (Class<?>) typeVariable.getGenericDeclaration();\n        Type superClassType = clazz.getGenericSuperclass();\n        if (superClassType instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType) superClassType;\n            TypeVariable<?>[] typeParameters = clazz.getTypeParameters();\n            for (int i = 0; i < typeParameters.length; i++) {\n                if (typeParameters[i].equals(typeVariable)) {\n                    return parameterizedType.getActualTypeArguments()[i];\n                }\n            }\n        }\n        Type[] genericInterfaceTypes = clazz.getGenericInterfaces();\n        for (Type genericInterfaceType : genericInterfaceTypes) {\n            if (genericInterfaceType instanceof ParameterizedType) {\n                ParameterizedType parameterizedType = (ParameterizedType) genericInterfaceType;\n                TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n                for (int i = 0; i < typeParameters.length; i++) {\n                    if (typeParameters[i].equals(typeVariable)) {\n                        return parameterizedType.getActualTypeArguments()[i];\n                    }\n                }\n            }\n        }\n    }\n    // If we can't determine the actual type argument, return Object.class\n    return Object.class;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..e8d6158ca 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,40 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    if (typeVariable.getGenericDeclaration() instanceof Class) {\n+        Class<?> clazz = (Class<?>) typeVariable.getGenericDeclaration();\n+        Type superClassType = clazz.getGenericSuperclass();\n+        if (superClassType instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType) superClassType;\n+            TypeVariable<?>[] typeParameters = clazz.getTypeParameters();\n+            for (int i = 0; i < typeParameters.length; i++) {\n+                if (typeParameters[i].equals(typeVariable)) {\n+                    return parameterizedType.getActualTypeArguments()[i];\n+                }\n+            }\n+        }\n+        Type[] genericInterfaceTypes = clazz.getGenericInterfaces();\n+        for (Type genericInterfaceType : genericInterfaceTypes) {\n+            if (genericInterfaceType instanceof ParameterizedType) {\n+                ParameterizedType parameterizedType = (ParameterizedType) genericInterfaceType;\n+                TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n+                for (int i = 0; i < typeParameters.length; i++) {\n+                    if (typeParameters[i].equals(typeVariable)) {\n+                        return parameterizedType.getActualTypeArguments()[i];\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    // If we can't determine the actual type argument, return Object.class\n+    return Object.class;\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}