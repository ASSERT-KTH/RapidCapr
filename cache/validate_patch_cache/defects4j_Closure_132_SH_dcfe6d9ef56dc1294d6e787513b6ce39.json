{
    "patch": "              // NOTE: assignments to 'this' may change the value of 'this' and\n              // should be treated as an external effect.\n              // Also, assignment to the LHS of an addition operator could have side effects and\n              // should be treated as an external effect.\n              (!mayEffectMutableState(lhs)\n                  || lhs.isThis()\n                  || (lhs.getParent().isAdd() && lhs == lhs.getParent().getFirstChild()))) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..2b8df0fe 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,13 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              // NOTE: assignments to 'this' may change the value of 'this' and\n+              // should be treated as an external effect.\n+              // Also, assignment to the LHS of an addition operator could have side effects and\n+              // should be treated as an external effect.\n+              (!mayEffectMutableState(lhs)\n+                  || lhs.isThis()\n+                  || (lhs.getParent().isAdd() && lhs == lhs.getParent().getFirstChild()))) {\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}