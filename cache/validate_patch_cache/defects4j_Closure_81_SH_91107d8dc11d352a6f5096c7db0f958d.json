{
    "patch": "@Override\n    Node processFunctionNode(FunctionNode functionNode) {\n        Name name = functionNode.getFunctionName();\n        Boolean isUnnamedFunction = false;\n        if (name == null) {\n            name = new Name();\n            name.setIdentifier(\"\");\n            isUnnamedFunction = true;\n        }\n        Node node = newNode(Token.FUNCTION);\n        Node newName = transform(name);\n        if (isUnnamedFunction) {\n            // Old Rhino tagged the empty name node with the line number of the\n            // declaration.\n            newName.setLineno(functionNode.getLineno());\n            // TODO(bowdidge) Mark line number of paren correctly.\n            // Same problem as below - the left paren might not be on the\n            // same line as the function keyword.\n            int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n            newName.setCharno(position2charno(lpColumn));\n        }\n\n        node.addChildToBack(newName);\n        Node lp = newNode(Token.LP);\n        Name fnName = functionNode.getFunctionName();\n        if (fnName != null) {\n            lp.setLineno(fnName.getLineno());\n        } else {\n            lp.setLineno(functionNode.getLineno());\n        }\n        lp.setCharno(\n            position2charno(\n                functionNode.getAbsolutePosition() + functionNode.getLp()));\n        for (AstNode param : functionNode.getParams()) {\n            lp.addChildToBack(transform(param));\n        }\n        node.addChildToBack(lp);\n\n        Node bodyNode = transform(functionNode.getBody());\n        parseDirectives(bodyNode);\n        node.addChildToBack(bodyNode);\n        return node;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..6ab01f7b 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,48 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+@Override\n+    Node processFunctionNode(FunctionNode functionNode) {\n+        Name name = functionNode.getFunctionName();\n+        Boolean isUnnamedFunction = false;\n+        if (name == null) {\n+            name = new Name();\n+            name.setIdentifier(\"\");\n+            isUnnamedFunction = true;\n+        }\n+        Node node = newNode(Token.FUNCTION);\n+        Node newName = transform(name);\n+        if (isUnnamedFunction) {\n+            // Old Rhino tagged the empty name node with the line number of the\n+            // declaration.\n+            newName.setLineno(functionNode.getLineno());\n+            // TODO(bowdidge) Mark line number of paren correctly.\n+            // Same problem as below - the left paren might not be on the\n+            // same line as the function keyword.\n+            int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n+            newName.setCharno(position2charno(lpColumn));\n+        }\n+\n+        node.addChildToBack(newName);\n+        Node lp = newNode(Token.LP);\n+        Name fnName = functionNode.getFunctionName();\n+        if (fnName != null) {\n+            lp.setLineno(fnName.getLineno());\n+        } else {\n+            lp.setLineno(functionNode.getLineno());\n+        }\n+        lp.setCharno(\n+            position2charno(\n+                functionNode.getAbsolutePosition() + functionNode.getLp()));\n+        for (AstNode param : functionNode.getParams()) {\n+            lp.addChildToBack(transform(param));\n+        }\n+        node.addChildToBack(lp);\n+\n+        Node bodyNode = transform(functionNode.getBody());\n+        parseDirectives(bodyNode);\n+        node.addChildToBack(bodyNode);\n+        return node;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}