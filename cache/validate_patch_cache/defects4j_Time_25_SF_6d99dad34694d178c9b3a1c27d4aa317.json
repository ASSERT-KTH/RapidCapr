{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int offset = getOffset(instantLocal);\n    long nextTransition = nextTransition(instantLocal - offset);\n    if (nextTransition == instantLocal) {\n        return offset;\n    }\n    int nextOffset = getOffset(nextTransition);\n    if (offset < nextOffset) {\n        return offset;\n    }\n    long prevTransition = previousTransition(instantLocal - offset);\n    if (prevTransition < nextTransition) {\n        int prevOffset = getOffset(prevTransition);\n        if (prevOffset <= nextOffset) {\n            return offset;\n        }\n    }\n    return nextOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..8d8ed935 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,25 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int offset = getOffset(instantLocal);\n+    long nextTransition = nextTransition(instantLocal - offset);\n+    if (nextTransition == instantLocal) {\n+        return offset;\n+    }\n+    int nextOffset = getOffset(nextTransition);\n+    if (offset < nextOffset) {\n+        return offset;\n+    }\n+    long prevTransition = previousTransition(instantLocal - offset);\n+    if (prevTransition < nextTransition) {\n+        int prevOffset = getOffset(prevTransition);\n+        if (prevOffset <= nextOffset) {\n+            return offset;\n         }\n-        return offsetAdjusted;\n     }\n+    return nextOffset;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}