{
    "patch": "        if (offsetLocal != offsetAdjusted) {\n            long nextTransitionInstant, prevTransitionInstant;\n            if (offsetLocal < offsetAdjusted) {\n                nextTransitionInstant = nextTransition(instantAdjusted);\n                prevTransitionInstant = previousTransition(instantLocal - offsetLocal);\n                if (nextTransitionInstant == prevTransitionInstant) {\n                    return offsetLocal;\n                } else if (instantLocal - offsetLocal == prevTransitionInstant) {\n                    return offsetAdjusted;\n                } else {\n                    return offsetLocal;\n                }\n            } else {\n                prevTransitionInstant = previousTransition(instantAdjusted);\n                nextTransitionInstant = nextTransition(instantLocal - offsetAdjusted);\n                if (nextTransitionInstant == prevTransitionInstant) {\n                    return offsetLocal;\n                } else if (instantLocal - offsetAdjusted == nextTransitionInstant) {\n                    return offsetLocal;\n                } else {\n                    return offsetAdjusted;\n                }\n            }\n        }\n        return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..5e5aef95 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,31 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+        if (offsetLocal != offsetAdjusted) {\n+            long nextTransitionInstant, prevTransitionInstant;\n+            if (offsetLocal < offsetAdjusted) {\n+                nextTransitionInstant = nextTransition(instantAdjusted);\n+                prevTransitionInstant = previousTransition(instantLocal - offsetLocal);\n+                if (nextTransitionInstant == prevTransitionInstant) {\n+                    return offsetLocal;\n+                } else if (instantLocal - offsetLocal == prevTransitionInstant) {\n+                    return offsetAdjusted;\n+                } else {\n+                    return offsetLocal;\n+                }\n+            } else {\n+                prevTransitionInstant = previousTransition(instantAdjusted);\n+                nextTransitionInstant = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextTransitionInstant == prevTransitionInstant) {\n+                    return offsetLocal;\n+                } else if (instantLocal - offsetAdjusted == nextTransitionInstant) {\n+                    return offsetLocal;\n+                } else {\n+                    return offsetAdjusted;\n+                }\n+            }\n+        }\n+        return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}