{
    "patch": "int ch;\nwhile ((ch = in.read()) > -1) {\n    if (ch == '\\\\') {\n        int escape = in.read();\n        if (escape == 'n') {\n            out.write('\\n');\n        } else if (escape == 'r') {\n            out.write('\\r');\n        } else if (escape == 't') {\n            out.write('\\t');\n        } else if (escape == 'f') {\n            out.write('\\f');\n        } else if (escape == 'b') {\n            out.write('\\b');\n        } else if (escape == '\\\"') {\n            out.write('\\\"');\n        } else if (escape == '\\'') {\n            out.write('\\'');\n        } else if (escape == '\\\\') {\n            out.write('\\\\');\n        } else if (escape == ' ') {\n            out.write(' ');\n        } else if (escape == '\\t') {\n            out.write('\\t');\n        } else if (escape == '\\r') {\n            out.write('\\r');\n        } else if (escape == '\\n') {\n            out.write('\\n');\n        } else if (escape == 'u') {\n            // Read the xxxx\n            char[] unicode = new char[4];\n            for (int i = 0; i < 4; i++) {\n                unicode[i] = (char) in.read();\n            }\n            String unicodeStr = new String(unicode);\n            try {\n                int value = Integer.parseInt(unicodeStr, 16);\n                out.write(value);\n            } catch (NumberFormatException nfe) {\n                throw new IOException(\n                    \"Unable to parse unicode value: \" + unicodeStr, nfe);\n            }\n        } else {\n            fail(String.format(\"invalid escape sequence: \\\\%c\", escape));\n        }\n    } else {\n        out.write(ch);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}