{
    "patch": "import com.google.javascript.jscomp.AbstractScope;\nimport com.google.javascript.jscomp.ControlFlowGraph;\nimport com.google.javascript.jscomp.ControlFlowGraph.Branch;\nimport com.google.javascript.jscomp.ControlFlowGraph.BranchEdge;\nimport com.google.javascript.jscomp.ControlFlowGraph.CfgNode;\nimport com.google.javascript.jscomp.DiagnosticType;\nimport com.google.javascript.jscomp.JSCompiler;\nimport com.google.javascript.jscomp.NodeUtil;\nimport com.google.javascript.jscomp.SymbolTable;\nimport com.google.javascript.jscomp.TypedScopeCreator;\nimport com.google.javascript.jscomp.scope.GlobalScope;\nimport com.google.javascript.jscomp.scope.Scope;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\nimport com.google.javascript.rhino.jstype.JSType;\n\nDiagnosticType REFERENCE_BEFORE_DECLARE_ERROR = DiagnosticType.warning(\n    \"JSC_REFERENCE_BEFORE_DECLARE_ERROR\",\n    \"Reference to undefined variable {0}.\");\n\n/**\n * If we access a property of a symbol, then that symbol is not\n * null or undefined.\n */\nFlowScope dereferencePointer(Node n, FlowScope scope) {\n  if (n.isQualifiedName()) {\n    JSType type = getJSType(n);\n    JSType narrowed = type.restrictByNotNullOrUndefined();\n    if (type != narrowed) {\n      scope = narrowScope(scope, n, narrowed);\n    }\n  }\n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..a2433911 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,42 +1111,40 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n-    if (type == null || constraint == null) {\n-      return;\n-    }\n+import com.google.javascript.jscomp.AbstractScope;\n+import com.google.javascript.jscomp.ControlFlowGraph;\n+import com.google.javascript.jscomp.ControlFlowGraph.Branch;\n+import com.google.javascript.jscomp.ControlFlowGraph.BranchEdge;\n+import com.google.javascript.jscomp.ControlFlowGraph.CfgNode;\n+import com.google.javascript.jscomp.DiagnosticType;\n+import com.google.javascript.jscomp.JSCompiler;\n+import com.google.javascript.jscomp.NodeUtil;\n+import com.google.javascript.jscomp.SymbolTable;\n+import com.google.javascript.jscomp.TypedScopeCreator;\n+import com.google.javascript.jscomp.scope.GlobalScope;\n+import com.google.javascript.jscomp.scope.Scope;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.jstype.JSType;\n \n-    ObjectType constraintObj =\n-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n-        }\n-      }\n+DiagnosticType REFERENCE_BEFORE_DECLARE_ERROR = DiagnosticType.warning(\n+    \"JSC_REFERENCE_BEFORE_DECLARE_ERROR\",\n+    \"Reference to undefined variable {0}.\");\n+\n+/**\n+ * If we access a property of a symbol, then that symbol is not\n+ * null or undefined.\n+ */\n+FlowScope dereferencePointer(Node n, FlowScope scope) {\n+  if (n.isQualifiedName()) {\n+    JSType type = getJSType(n);\n+    JSType narrowed = type.restrictByNotNullOrUndefined();\n+    if (type != narrowed) {\n+      scope = narrowScope(scope, n, narrowed);\n     }\n   }\n-\n-  /**\n-   * If we access a property of a symbol, then that symbol is not\n-   * null or undefined.\n-   */\n-  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n-    if (n.isQualifiedName()) {\n-      JSType type = getJSType(n);\n-      JSType narrowed = type.restrictByNotNullOrUndefined();\n-      if (type != narrowed) {\n-        scope = narrowScope(scope, n, narrowed);\n-      }\n+  return scope;\n+}\n     }\n     return scope;\n   }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}