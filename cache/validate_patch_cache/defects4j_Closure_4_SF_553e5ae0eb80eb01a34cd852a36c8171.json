{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolved = resolveViaRegistry(t, enclosing);\n    boolean cycleDetectedViaRegistry = detectImplicitPrototypeCycle();\n\n    // If resolution succeeded without a cycle detected, continue with it.\n    if (resolved && !cycleDetectedViaRegistry) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n    }\n\n    // If resolution failed via registry but a cycle was detected, handle the cycle\n    // and then retry registry resolution.\n    if (!resolved && cycleDetectedViaRegistry) {\n      handleTypeCycle(t);\n      return resolveInternal(t, enclosing);\n    }\n\n    // Otherwise, attempt resolution via properties.\n    resolveViaProperties(t, enclosing);\n\n    boolean cycleDetectedViaProperties = detectImplicitPrototypeCycle();\n\n    // If resolution succeeded via properties without a cycle detected, continue with it.\n    if (isResolved() && !cycleDetectedViaProperties) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n    }\n\n    // If resolution failed via properties but a cycle was detected, handle the cycle\n    // and then try both mechanisms again.\n    if ((!isResolved() && cycleDetectedViaProperties)\n        || (resolved && cycleDetectedViaRegistry && cycleDetectedViaProperties)) {\n      handleTypeCycle(t);\n      resolved = resolveViaRegistry(t, enclosing);\n      cycleDetectedViaRegistry = detectImplicitPrototypeCycle();\n      if (!resolved && cycleDetectedViaRegistry) {\n        handleTypeCycle(t);\n        super.resolveInternal(t, enclosing);\n        finishPropertyContinuations();\n        return this;\n      }\n      return resolveInternal(t, enclosing);\n    }\n\n    // If we reach here, that means neither mechanism was successful and we didn't\n    // detect any cycle. We call the super method and finish property continuations\n    // if the type was resolved via registry.\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n\n    return registry.isLastGeneration() ? getReferencedType() : this;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..c373f13c 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,63 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n     boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n+    boolean cycleDetectedViaRegistry = detectImplicitPrototypeCycle();\n+\n+    // If resolution succeeded without a cycle detected, continue with it.\n+    if (resolved && !cycleDetectedViaRegistry) {\n+      super.resolveInternal(t, enclosing);\n+      finishPropertyContinuations();\n+      return registry.isLastGeneration() ?\n+          getReferencedType() : this;\n+    }\n+\n+    // If resolution failed via registry but a cycle was detected, handle the cycle\n+    // and then retry registry resolution.\n+    if (!resolved && cycleDetectedViaRegistry) {\n       handleTypeCycle(t);\n+      return resolveInternal(t, enclosing);\n     }\n \n-    if (resolved) {\n+    // Otherwise, attempt resolution via properties.\n+    resolveViaProperties(t, enclosing);\n+\n+    boolean cycleDetectedViaProperties = detectImplicitPrototypeCycle();\n+\n+    // If resolution succeeded via properties without a cycle detected, continue with it.\n+    if (isResolved() && !cycleDetectedViaProperties) {\n       super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n       return registry.isLastGeneration() ?\n           getReferencedType() : this;\n     }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n+    // If resolution failed via properties but a cycle was detected, handle the cycle\n+    // and then try both mechanisms again.\n+    if ((!isResolved() && cycleDetectedViaProperties)\n+        || (resolved && cycleDetectedViaRegistry && cycleDetectedViaProperties)) {\n       handleTypeCycle(t);\n+      resolved = resolveViaRegistry(t, enclosing);\n+      cycleDetectedViaRegistry = detectImplicitPrototypeCycle();\n+      if (!resolved && cycleDetectedViaRegistry) {\n+        handleTypeCycle(t);\n+        super.resolveInternal(t, enclosing);\n+        finishPropertyContinuations();\n+        return this;\n+      }\n+      return resolveInternal(t, enclosing);\n     }\n \n+    // If we reach here, that means neither mechanism was successful and we didn't\n+    // detect any cycle. We call the super method and finish property continuations\n+    // if the type was resolved via registry.\n     super.resolveInternal(t, enclosing);\n     if (isResolved()) {\n       finishPropertyContinuations();\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}