{
    "patch": "            if (len >= 7 && str.charAt(5) == '_') {\n                if (len == 7 || len == 8 && str.charAt(6) == '_') {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                } else {\n                    int nextIndex = str.indexOf('_', 6);\n                    if (nextIndex == -1) {\n                        nextIndex = len;\n                    }\n                    String language = str.substring(0, 2);\n                    String country = str.substring(3, 5);\n                    String variant = str.substring(6, nextIndex);\n                    if (!isValidSubtag(language) || !isValidSubtag(country) || !isValidSubtag(variant)) {\n                        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                    }\n                    return new Locale(language, country, variant);\n                }\n            } else {\n                return new Locale.Builder().setLanguageTag(str).build();\n            }\n        }\n        \n        private static boolean isValidSubtag(String subtag) {\n            if (subtag.isEmpty() || subtag.length() > 8) {\n                return false;\n            }\n            char firstChar = subtag.charAt(0);\n            if (!Character.isLowerCase(firstChar)) {\n                return false;\n            }\n            for (int i = 1; i < subtag.length(); i++) {\n                char ch = subtag.charAt(i);\n                if (!(Character.isLowerCase(ch) || Character.isDigit(ch) || ch == '-')) {\n                    return false;\n                }\n            }\n            return true;",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex 139d9a7f..7e916523 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -111,6 +111,42 @@ public class LocaleUtils {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             char ch3 = str.charAt(3);\n+            if (len >= 7 && str.charAt(5) == '_') {\n+                if (len == 7 || len == 8 && str.charAt(6) == '_') {\n+                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+                } else {\n+                    int nextIndex = str.indexOf('_', 6);\n+                    if (nextIndex == -1) {\n+                        nextIndex = len;\n+                    }\n+                    String language = str.substring(0, 2);\n+                    String country = str.substring(3, 5);\n+                    String variant = str.substring(6, nextIndex);\n+                    if (!isValidSubtag(language) || !isValidSubtag(country) || !isValidSubtag(variant)) {\n+                        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+                    }\n+                    return new Locale(language, country, variant);\n+                }\n+            } else {\n+                return new Locale.Builder().setLanguageTag(str).build();\n+            }\n+        }\n+        \n+        private static boolean isValidSubtag(String subtag) {\n+            if (subtag.isEmpty() || subtag.length() > 8) {\n+                return false;\n+            }\n+            char firstChar = subtag.charAt(0);\n+            if (!Character.isLowerCase(firstChar)) {\n+                return false;\n+            }\n+            for (int i = 1; i < subtag.length(); i++) {\n+                char ch = subtag.charAt(i);\n+                if (!(Character.isLowerCase(ch) || Character.isDigit(ch) || ch == '-')) {\n+                    return false;\n+                }\n+            }\n+            return true;\n             char ch4 = str.charAt(4);\n             if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}