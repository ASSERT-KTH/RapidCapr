{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            boolean isDayOfMonthUpdated = false;\n            int monthOfInstant = 0;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                if (!isDayOfMonthUpdated) {\n                    if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n                        monthOfInstant = (values[i] + valueToAdd) - 1;\n                        isDayOfMonthUpdated = true;\n                    }\n                    if (partial.getFieldType(i).equals(DateTimeFieldType.dayOfMonth())) {\n                        isDayOfMonthUpdated = true;\n                    }\n                }\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            if (valueToAdd > 0 && monthOfInstant < 0) {\n                monthOfInstant = monthOfInstant + 12;\n            } else if (valueToAdd < 0 && monthOfInstant > 11) {\n                monthOfInstant = monthOfInstant - 12;\n            }\n            instant = iChronology.monthOfYear().set(instant, monthOfInstant);\n            if (!isDayOfMonthUpdated) {\n                int dayOfMonth = iChronology.getDayOfMonth(instant);\n                instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n            }\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..42d5e751 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,12 +206,33 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n+            boolean isDayOfMonthUpdated = false;\n+            int monthOfInstant = 0;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n+                if (!isDayOfMonthUpdated) {\n+                    if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n+                        monthOfInstant = (values[i] + valueToAdd) - 1;\n+                        isDayOfMonthUpdated = true;\n+                    }\n+                    if (partial.getFieldType(i).equals(DateTimeFieldType.dayOfMonth())) {\n+                        isDayOfMonthUpdated = true;\n+                    }\n+                }\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n+            if (valueToAdd > 0 && monthOfInstant < 0) {\n+                monthOfInstant = monthOfInstant + 12;\n+            } else if (valueToAdd < 0 && monthOfInstant > 11) {\n+                monthOfInstant = monthOfInstant - 12;\n+            }\n+            instant = iChronology.monthOfYear().set(instant, monthOfInstant);\n+            if (!isDayOfMonthUpdated) {\n+                int dayOfMonth = iChronology.getDayOfMonth(instant);\n+                instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n+            }\n             instant = add(instant, valueToAdd);\n             return iChronology.get(partial, instant);\n         } else {",
    "result_reason": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]",
    "test_result": "FAIL"
}