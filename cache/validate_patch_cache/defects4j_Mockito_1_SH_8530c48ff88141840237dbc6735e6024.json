{
    "patch": "            Matcher varargMatcher = matchers.get(indexOfVararg);\n            if (varargMatcher instanceof CapturesArguments) {\n                int varargLength = invocation.getRawArguments().length - indexOfVararg - 1;\n                Object[] varargArray = new Object[varargLength];\n                System.arraycopy(invocation.getRawArguments(), indexOfVararg, varargArray, 0, varargLength);\n                ((CapturesArguments) varargMatcher).captureFrom(varargArray);\n            } else {\n                throw new UnsupportedOperationException();",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..b43826488 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,14 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Matcher varargMatcher = matchers.get(indexOfVararg);\n+            if (varargMatcher instanceof CapturesArguments) {\n+                int varargLength = invocation.getRawArguments().length - indexOfVararg - 1;\n+                Object[] varargArray = new Object[varargLength];\n+                System.arraycopy(invocation.getRawArguments(), indexOfVararg, varargArray, 0, varargLength);\n+                ((CapturesArguments) varargMatcher).captureFrom(varargArray);\n+            } else {\n+                throw new UnsupportedOperationException();\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}