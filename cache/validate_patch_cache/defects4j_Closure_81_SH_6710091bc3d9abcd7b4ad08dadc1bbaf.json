{
    "patch": "@Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      Node node;\n      if (name == null) {\n        node = newNode(Token.FUNCTION);\n      } else {\n        node = newNode(Token.FUNCTION, transform(name));\n      }\n      Node lp = newNode(Token.LP);\n      for (Node paramName : functionNode.getParams()) {\n        lp.addChildToBack(transform(paramName));\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n\n      return node;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..8e42b4b4 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,27 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+@Override\n+    Node processFunctionNode(FunctionNode functionNode) {\n+      Name name = functionNode.getFunctionName();\n+      Node node;\n+      if (name == null) {\n+        node = newNode(Token.FUNCTION);\n+      } else {\n+        node = newNode(Token.FUNCTION, transform(name));\n+      }\n+      Node lp = newNode(Token.LP);\n+      for (Node paramName : functionNode.getParams()) {\n+        lp.addChildToBack(transform(paramName));\n+      }\n+      node.addChildToBack(lp);\n+\n+      Node bodyNode = transform(functionNode.getBody());\n+      parseDirectives(bodyNode);\n+      node.addChildToBack(bodyNode);\n+\n+      return node;\n+    }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}