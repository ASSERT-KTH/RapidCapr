{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    if (!right.isNumber() && !right.isBigInt()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index;\n    try {\n      index = right.getDouble();\n    } catch (NumberFormatException e) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    // BigInts and negative numbers can't be used as indexes\n    if (index < 0 || (!right.isNumber() && right.isBigInt())) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node current = left.getFirstChild();\n    Node elem = null;\n    for (int i = 0; current != null && i < index; i++) {\n      elem = current;\n      current = current.getNext();\n    }\n\n    if (elem == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    if (elem.isEmpty()) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..6a171945 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,7 +1419,7 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n@@ -1428,29 +1428,30 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n       return n;\n     }\n \n-    if (!right.isNumber()) {\n+    if (!right.isNumber() && !right.isBigInt()) {\n       // Sometimes people like to use complex expressions to index into\n       // arrays, or strings to index into array methods.\n       return n;\n     }\n \n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n+    double index;\n+    try {\n+      index = right.getDouble();\n+    } catch (NumberFormatException e) {\n       error(INVALID_GETELEM_INDEX_ERROR, right);\n       return n;\n     }\n \n-    if (intIndex < 0) {\n+    // BigInts and negative numbers can't be used as indexes\n+    if (index < 0 || (!right.isNumber() && right.isBigInt())) {\n       error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }\n \n     Node current = left.getFirstChild();\n     Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n+    for (int i = 0; current != null && i < index; i++) {\n+      elem = current;\n       current = current.getNext();\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}