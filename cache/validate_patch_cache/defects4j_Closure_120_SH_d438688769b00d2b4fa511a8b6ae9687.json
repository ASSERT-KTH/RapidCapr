{
    "patch": "if (block.isFunction && block != ref.getBasicBlock()) {\n  // Don't assume assignments in inner function scopes won't\n  // be executed multiple times.\n  return false;\n} else if (block.isLoop) {\n  return false;\n}\n// Consider the lifetime of the variable to be the lifetime of the function.\nwhile (block.getParent() != null) {\n  block = block.getParent();\n  // Don't assume assignments in inner function scopes won't\n  // be executed multiple times.\n  if (block.isFunction && !block.equals(ref.getBasicBlock())) {\n    return false;\n  } else if (block.isLoop) {\n    return false;\n  }\n}\nreturn true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..b009fa62 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,25 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (block.isFunction && block != ref.getBasicBlock()) {\n+  // Don't assume assignments in inner function scopes won't\n+  // be executed multiple times.\n+  return false;\n+} else if (block.isLoop) {\n+  return false;\n+}\n+// Consider the lifetime of the variable to be the lifetime of the function.\n+while (block.getParent() != null) {\n+  block = block.getParent();\n+  // Don't assume assignments in inner function scopes won't\n+  // be executed multiple times.\n+  if (block.isFunction && !block.equals(ref.getBasicBlock())) {\n+    return false;\n+  } else if (block.isLoop) {\n+    return false;\n+  }\n+}\n+return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}