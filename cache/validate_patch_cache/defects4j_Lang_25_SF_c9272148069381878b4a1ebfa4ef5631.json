{
    "patch": "import java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.nio.charset.StandardCharsets;\nimport java.util.BitSet;\n\npublic class URLUtils {\n\n    private static final BitSet ALLOWED_CHARS = new BitSet(256);\n\n    static {\n        // Alpha characters\n        for (int i = 'a'; i <= 'z'; i++) {\n            ALLOWED_CHARS.set(i);\n        }\n        for (int i = 'A'; i <= 'Z'; i++) {\n            ALLOWED_CHARS.set(i);\n        }\n        // Numeric characters\n        for (int i = '0'; i <= '9'; i++) {\n            ALLOWED_CHARS.set(i);\n        }\n        // Rationale: https://stackoverflow.com/questions/1903191/\n        ALLOWED_CHARS.set('-');\n        ALLOWED_CHARS.set('_');\n        ALLOWED_CHARS.set('.');\n        ALLOWED_CHARS.set('*');\n    }\n\n    /**\n     * Percent encoding of reserved characters in URLs, as defined in RFC 3986.\n     * <p>\n     * Returns the input string with all non-ASCII and some ASCII characters replaced\n     * by escaped hexadecimal sequences (%xx) according to UTF-8 encoding. Reserved\n     * characters are not escaped.\n     * </p>\n     * <p>\n     * <strong>Note:</strong> Use this method for query string and path segment encoding only.\n     * </p>\n     * \n     * @param input the input string\n     * @return the encoded string\n     * @throws UnsupportedEncodingException if UTF-8 is not supported\n     */\n    public static String encodeURIComponent(String input) throws UnsupportedEncodingException {\n        StringBuilder result = new StringBuilder();\n        for (char c : input.toCharArray()) {\n            if (ALLOWED_CHARS.get(c)) {\n                result.append(c);\n            } else {\n                // UTF-8 encoding: convert c to one or more bytes\n                byte[] bytes = String.valueOf(c).getBytes(StandardCharsets.UTF_8);\n                for (byte b : bytes) {\n                    result.append('%');\n                    result.append(String.format(\"%02X\", b));\n                }\n            }\n        }\n        return result.toString();\n    }\n\n    /**\n     * Decodes an application/x-www-form-urlencoded string using a specific encoding scheme.\n     * This method replaces each escape sequence in the encoded string with the character\n     * that it represents. It also replaces \"+\" with spaces in the encoded string.\n     * \n     * @param input a string to decode\n     * @param charsetName the name of a supported character encoding\n     * @return the decoded string\n     * @throws UnsupportedEncodingException if the named encoding is not supported.\n     */\n    public static String decodeURIComponent(String input, String charsetName) throws UnsupportedEncodingException {\n        return URLDecoder.decode(input, charsetName);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..3a7f4a7d 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,80 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLDecoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.BitSet;\n+\n+public class URLUtils {\n+\n+    private static final BitSet ALLOWED_CHARS = new BitSet(256);\n+\n+    static {\n+        // Alpha characters\n+        for (int i = 'a'; i <= 'z'; i++) {\n+            ALLOWED_CHARS.set(i);\n+        }\n+        for (int i = 'A'; i <= 'Z'; i++) {\n+            ALLOWED_CHARS.set(i);\n+        }\n+        // Numeric characters\n+        for (int i = '0'; i <= '9'; i++) {\n+            ALLOWED_CHARS.set(i);\n+        }\n+        // Rationale: https://stackoverflow.com/questions/1903191/\n+        ALLOWED_CHARS.set('-');\n+        ALLOWED_CHARS.set('_');\n+        ALLOWED_CHARS.set('.');\n+        ALLOWED_CHARS.set('*');\n+    }\n+\n+    /**\n+     * Percent encoding of reserved characters in URLs, as defined in RFC 3986.\n+     * <p>\n+     * Returns the input string with all non-ASCII and some ASCII characters replaced\n+     * by escaped hexadecimal sequences (%xx) according to UTF-8 encoding. Reserved\n+     * characters are not escaped.\n+     * </p>\n+     * <p>\n+     * <strong>Note:</strong> Use this method for query string and path segment encoding only.\n+     * </p>\n+     * \n+     * @param input the input string\n+     * @return the encoded string\n+     * @throws UnsupportedEncodingException if UTF-8 is not supported\n+     */\n+    public static String encodeURIComponent(String input) throws UnsupportedEncodingException {\n+        StringBuilder result = new StringBuilder();\n+        for (char c : input.toCharArray()) {\n+            if (ALLOWED_CHARS.get(c)) {\n+                result.append(c);\n+            } else {\n+                // UTF-8 encoding: convert c to one or more bytes\n+                byte[] bytes = String.valueOf(c).getBytes(StandardCharsets.UTF_8);\n+                for (byte b : bytes) {\n+                    result.append('%');\n+                    result.append(String.format(\"%02X\", b));\n+                }\n+            }\n+        }\n+        return result.toString();\n+    }\n+\n+    /**\n+     * Decodes an application/x-www-form-urlencoded string using a specific encoding scheme.\n+     * This method replaces each escape sequence in the encoded string with the character\n+     * that it represents. It also replaces \"+\" with spaces in the encoded string.\n+     * \n+     * @param input a string to decode\n+     * @param charsetName the name of a supported character encoding\n+     * @return the decoded string\n+     * @throws UnsupportedEncodingException if the named encoding is not supported.\n+     */\n+    public static String decodeURIComponent(String input, String charsetName) throws UnsupportedEncodingException {\n+        return URLDecoder.decode(input, charsetName);\n+    }\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}