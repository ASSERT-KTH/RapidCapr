{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        try {\n            return iChronology.get(partial, instant);\n        } catch (IllegalFieldValueException e) {\n            if (fieldIndex <= 0 || fieldIndex >= partial.size()) {\n                // nowhere to go to try to resolve the problem, so...\n                throw e;\n            }\n            int max = iChronology.getMaximumValue(partial.getFieldType(fieldIndex));\n            int newValues[] = Arrays.copyOf(values, values.length);\n            if (partial.getFieldType(fieldIndex) == DateTimeFieldType.monthOfYear()) {\n                while (valueToAdd > 0) {\n                    int month = newValues[fieldIndex] + 1;\n                    if (month > max) {\n                        // advance to first day of next month\n                        month = iChronology.getMinimumValue(DateTimeFieldType.monthOfYear());\n                        newValues = iChronology.add(partial, fieldIndex, newValues, 1);\n                    }\n                    newValues[fieldIndex] = month;\n                    valueToAdd--;\n                }\n                while (valueToAdd < 0) {\n                    int month = newValues[fieldIndex] - 1;\n                    if (month < iChronology.getMinimumValue(DateTimeFieldType.monthOfYear())) {\n                        // back to last day of previous month\n                        month = max;\n                        newValues = iChronology.add(partial, fieldIndex, newValues, -1);\n                    }\n                    newValues[fieldIndex] = month;\n                    valueToAdd++;\n                }\n            } else {\n                // we assume all other fields behave like dayOfMonth and have a maximum value of 31\n                while (valueToAdd > 0) {\n                    int day = newValues[fieldIndex] + 1;\n                    if (day > max) {\n                        // advance to first day of next month\n                        day = 1;\n                        newValues = iChronology.add(partial, fieldIndex, newValues, 1);\n                    }\n                    newValues[fieldIndex] = day;\n                    valueToAdd--;\n                }\n                while (valueToAdd < 0) {\n                    int day = newValues[fieldIndex] - 1;\n                    if (day < 1) {\n                        // back to last day of previous month\n                        day = max;\n                        newValues = iChronology.add(partial, fieldIndex, newValues, -1);\n                    }\n                    newValues[fieldIndex] = day;\n                    valueToAdd++;\n                }\n            }\n            return add(partial, fieldIndex + 1, newValues, 0);\n        }\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..57ab9a71 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,78 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n+        instant = add(instant, valueToAdd);\n+        try {\n             return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        } catch (IllegalFieldValueException e) {\n+            if (fieldIndex <= 0 || fieldIndex >= partial.size()) {\n+                // nowhere to go to try to resolve the problem, so...\n+                throw e;\n+            }\n+            int max = iChronology.getMaximumValue(partial.getFieldType(fieldIndex));\n+            int newValues[] = Arrays.copyOf(values, values.length);\n+            if (partial.getFieldType(fieldIndex) == DateTimeFieldType.monthOfYear()) {\n+                while (valueToAdd > 0) {\n+                    int month = newValues[fieldIndex] + 1;\n+                    if (month > max) {\n+                        // advance to first day of next month\n+                        month = iChronology.getMinimumValue(DateTimeFieldType.monthOfYear());\n+                        newValues = iChronology.add(partial, fieldIndex, newValues, 1);\n+                    }\n+                    newValues[fieldIndex] = month;\n+                    valueToAdd--;\n+                }\n+                while (valueToAdd < 0) {\n+                    int month = newValues[fieldIndex] - 1;\n+                    if (month < iChronology.getMinimumValue(DateTimeFieldType.monthOfYear())) {\n+                        // back to last day of previous month\n+                        month = max;\n+                        newValues = iChronology.add(partial, fieldIndex, newValues, -1);\n+                    }\n+                    newValues[fieldIndex] = month;\n+                    valueToAdd++;\n+                }\n+            } else {\n+                // we assume all other fields behave like dayOfMonth and have a maximum value of 31\n+                while (valueToAdd > 0) {\n+                    int day = newValues[fieldIndex] + 1;\n+                    if (day > max) {\n+                        // advance to first day of next month\n+                        day = 1;\n+                        newValues = iChronology.add(partial, fieldIndex, newValues, 1);\n+                    }\n+                    newValues[fieldIndex] = day;\n+                    valueToAdd--;\n+                }\n+                while (valueToAdd < 0) {\n+                    int day = newValues[fieldIndex] - 1;\n+                    if (day < 1) {\n+                        // back to last day of previous month\n+                        day = max;\n+                        newValues = iChronology.add(partial, fieldIndex, newValues, -1);\n+                    }\n+                    newValues[fieldIndex] = day;\n+                    valueToAdd++;\n+                }\n+            }\n+            return add(partial, fieldIndex + 1, newValues, 0);\n         }\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}