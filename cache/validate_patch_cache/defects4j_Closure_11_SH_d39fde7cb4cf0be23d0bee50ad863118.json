{
    "patch": "// If this is an assign, we don't want to check the left side twice so\n// we just check the right side.\nif (parent != null && parent.isAssign()) {\n  return;\n}\n// Declared constant values aren't really constant.  They could be\n// the result of a goog.abstractMethod call.\nif (isConstantVar(n) && (n.getFirstChild() == null ||\n    NodeUtil.isImmutableValue(n.getFirstChild()))) {\n  return;\n}\n// Functions are checked at declaration time.\nif (n.isFunction()) {\n  return;\n}\nif (n.getJSDocInfo() != null && n.getJSDocInfo().hasType()) {\n  return;\n}\n// Skip known uncheckable JSTypes.\nJSType type = n.getJSType();\nif (type != null &&\n    (type.isUnknownType() || type.isAllType() ||\n        type.isNoType())) {\n  return;\n} else if (type != null) {\n  JSType realType = type.restrictByNotNullOrUndefined();\n  if (realType.isEnumElementType() || realType.isEnumType()) {\n    // Enum tags and their elements are checked in other ways.\n    return;\n  } else if (realType.isFunctionType() &&\n             !mayHaveSideEffects(n.getFirstChild())) {\n    // Check function return types only if the function body\n    // may not have side effects. This is conservatively True.\n    return;\n  } else if (realType.isStructType()) {\n    // TODO(mwytock): Use a more appropriate warning message.\n    warnings.add(JSError.make(n, VAR_ASSIGN_STRUCT));\n    return;\n  }\n}\nString prop = getPropName(n);\nif (prop == null) {\n  // Don't know how to check this node.\n  return;\n}\nif (UNSAFE_PROPERTY_PATTERN.matcher(prop).find()) {\n  warnings.add(JSError.make(n, UNSAFE_PROP));\n  return;\n}\n\nif (!compiler.getOptions().isIdeMode() && NodeUtil.isPrototypeProperty(n)) {\n  warnings.add(JSError.make(n, PROTOTYPE_ASSIGNMENT));\n  return;\n}\n\nif (n.getJSType() != null && parent.isAssign()) {\n  warnings.add(JSError.make(n, UNSAFE_PROP_ASSIGN));\n  return;\n}\n// Recurse on the subexpressions.\nif (n.getFirstChild() != null) {\n  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n    checkForBadUsesHelper(c, warnings, n);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}