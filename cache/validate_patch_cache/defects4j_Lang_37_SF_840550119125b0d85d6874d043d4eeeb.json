{
    "patch": "public static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n\n    Class<?> componentType1 = array1.getClass().getComponentType();\n    Class<?> componentType2 = array2.getClass().getComponentType();\n\n    if (componentType1.isPrimitive() && componentType2.isPrimitive()) {\n        // If both arrays are primitive, ensure that they have the same type\n        if (!componentType1.equals(componentType2)) {\n            throw new IllegalArgumentException(\"Cannot store \" + componentType2.getName() + \" in an array of \" + componentType1.getName());\n        }\n\n        T[] result = (T[]) Array.newInstance(componentType1, array1.length + array2.length);\n        System.arraycopy(array1, 0, result, 0, array1.length);\n        System.arraycopy(array2, 0, result, array1.length, array2.length);\n        return result;\n    } else {\n        // If at least one array is not primitive, use Object as a common supertype\n        T[] result = (T[]) Array.newInstance(Object.class, array1.length + array2.length);\n        System.arraycopy(array1, 0, result, 0, array1.length);\n        System.arraycopy(array2, 0, result, array1.length, array2.length);\n        return result;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/ArrayUtils.java b/src/java/org/apache/commons/lang3/ArrayUtils.java\nindex 889497e9..541db711 100644\n--- a/src/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java\n@@ -2950,19 +2950,34 @@ public class ArrayUtils {\n      * @since 2.1\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> T[] addAll(T[] array1, T... array2) {\n-        if (array1 == null) {\n-            return clone(array2);\n-        } else if (array2 == null) {\n-            return clone(array1);\n+public static <T> T[] addAll(T[] array1, T... array2) {\n+    if (array1 == null) {\n+        return clone(array2);\n+    } else if (array2 == null) {\n+        return clone(array1);\n+    }\n+\n+    Class<?> componentType1 = array1.getClass().getComponentType();\n+    Class<?> componentType2 = array2.getClass().getComponentType();\n+\n+    if (componentType1.isPrimitive() && componentType2.isPrimitive()) {\n+        // If both arrays are primitive, ensure that they have the same type\n+        if (!componentType1.equals(componentType2)) {\n+            throw new IllegalArgumentException(\"Cannot store \" + componentType2.getName() + \" in an array of \" + componentType1.getName());\n         }\n-        final Class<?> type1 = array1.getClass().getComponentType();\n-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n-        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n-            // Check if problem is incompatible types\n-        return joinedArray;\n+\n+        T[] result = (T[]) Array.newInstance(componentType1, array1.length + array2.length);\n+        System.arraycopy(array1, 0, result, 0, array1.length);\n+        System.arraycopy(array2, 0, result, array1.length, array2.length);\n+        return result;\n+    } else {\n+        // If at least one array is not primitive, use Object as a common supertype\n+        T[] result = (T[]) Array.newInstance(Object.class, array1.length + array2.length);\n+        System.arraycopy(array1, 0, result, 0, array1.length);\n+        System.arraycopy(array2, 0, result, array1.length, array2.length);\n+        return result;\n     }\n+}\n \n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>",
    "result_reason": "java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Ljava.lang.Number;",
    "test_result": "FAIL"
}