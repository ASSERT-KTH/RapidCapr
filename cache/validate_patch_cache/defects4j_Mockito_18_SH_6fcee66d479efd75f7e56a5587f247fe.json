{
    "patch": "public SimulationResult mockSimulationResult() {\n    // Create a mock Result object\n    Result result = mock(Result.class);\n    when(result.getValue()).thenReturn(\"mockResult\");\n    // Create a mock Values object\n    Values values = mock(Values.class);\n    // Return an empty iterable for the getValue() method called with Iterable.class as an argument\n    when(values.returnValueFor(Iterable.class)).thenReturn(Collections.emptyList());\n    // Return the mock Result object for the getValue() method called with Result.class as an argument\n    when(values.returnValueFor(Result.class)).thenReturn(result);\n    // Create a mock SimulationResult object\n    SimulationResult simulationResult = mock(SimulationResult.class);\n    // Return the mock Values object for the getValues() method\n    when(simulationResult.getValues()).thenReturn(values);\n    // Return the mock SimulationResult object\n    return simulationResult;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}