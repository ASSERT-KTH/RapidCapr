{
    "patch": "StringBuffer out = new StringBuffer();\nint length = input == null ? 0 : input.length();\nchar c;\n\nfor (int i = 0; i < length; i++) {\n    c = input.charAt(i);\n    if (c <= 127) {\n        if (c == '\\n') {\n            out.append(\"\\\\n\");\n        } else if (c == '\\r') {\n            out.append(\"\\\\r\");\n        } else {\n            out.append(c);\n        }\n    } else {\n        out.append(\"\\\\u\");\n        out.append(Character.forDigit((c >>> 12) & 0xF, 16));\n        out.append(Character.forDigit((c >>> 8) & 0xF, 16));\n        out.append(Character.forDigit((c >>> 4) & 0xF, 16));\n        out.append(Character.forDigit((c) & 0xF, 16));                                      \n    }\n}\nString output = out.toString(); // corrected line",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}