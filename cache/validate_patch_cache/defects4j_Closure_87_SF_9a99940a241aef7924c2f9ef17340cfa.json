{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n\n      // don't fold a block that contains a single labeled statement\n      if(NodeUtil.isLabeledStatement(maybeExpr.getParent())) {\n        return false;\n      }\n\n      if (NodeUtil.isFunctionExpression(maybeExpr)\n          || NodeUtil.isParenthesizedExpression(maybeExpr)\n          || NodeUtil.isAddressableAssignmentTarget(maybeExpr)) {\n        return true;\n      }\n\n      if (NodeUtil.isExpressionNode(maybeExpr) &&\n          !(NodeUtil.isExpressionStatement(maybeExpr.getParent()) &&\n           !NodeUtil.mayHaveSideEffects(maybeExpr))) {\n        return true;\n      }\n\n      // Handle the weird IE bug for EXPR and EXPR_RESULT nodes.\n      if (maybeExpr.getType() == Token.EXPR_RESULT || maybeExpr.getType() == Token.EXPR_VOID) {\n        Node expr = maybeExpr.getFirstChild();\n        if (expr == null || !NodeUtil.isExpressionNode(expr)) {\n          return false;\n        }\n\n        if (maybeExpr.getType() == Token.EXPR_RESULT && (NodeUtil.isControlStructure(expr) || NodeUtil.isStatementBlock(expr) || NodeUtil.isFunctionDeclaration(expr))) {\n          return false;\n        }\n\n        return NodeUtil.mayHaveSideEffects(expr);\n      }\n    }\n\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..69f3359b 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -517,20 +517,38 @@ public class PeepholeSubstituteAlternateSyntax\n    *     an expression.\n    */\n   private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+\n+      // don't fold a block that contains a single labeled statement\n+      if(NodeUtil.isLabeledStatement(maybeExpr.getParent())) {\n+        return false;\n+      }\n+\n+      if (NodeUtil.isFunctionExpression(maybeExpr)\n+          || NodeUtil.isParenthesizedExpression(maybeExpr)\n+          || NodeUtil.isAddressableAssignmentTarget(maybeExpr)) {\n+        return true;\n+      }\n+\n+      if (NodeUtil.isExpressionNode(maybeExpr) &&\n+          !(NodeUtil.isExpressionStatement(maybeExpr.getParent()) &&\n+           !NodeUtil.mayHaveSideEffects(maybeExpr))) {\n+        return true;\n+      }\n+\n+      // Handle the weird IE bug for EXPR and EXPR_RESULT nodes.\n+      if (maybeExpr.getType() == Token.EXPR_RESULT || maybeExpr.getType() == Token.EXPR_VOID) {\n+        Node expr = maybeExpr.getFirstChild();\n+        if (expr == null || !NodeUtil.isExpressionNode(expr)) {\n+          return false;\n+        }\n+\n+        if (maybeExpr.getType() == Token.EXPR_RESULT && (NodeUtil.isControlStructure(expr) || NodeUtil.isStatementBlock(expr) || NodeUtil.isFunctionDeclaration(expr))) {\n+          return false;\n+        }\n+\n+        return NodeUtil.mayHaveSideEffects(expr);\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}