{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0) {\n        return Double.NaN;\n    }\n    if (x == 0) {\n        return 0;\n    }\n    if (x >= 1.0 && x > a) {\n        return 1 - regularizedGammaQ(a, x);\n    }\n    double sum = 1 / a;\n    double term = sum;\n    while (Math.abs(term) > RELATIVE_ERROR_TOLERANCE * Math.abs(sum)) {\n        ++a;\n        term *= x / a;\n        sum += term;\n    }\n    return Math.exp(-x + Math.log(sum));\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0) {\n        return Double.NaN;\n    }\n    if (x == 0) {\n        return 1;\n    }\n    if (x < a || Double.isInfinite(x)) {\n        return 1 - regularizedGammaP(a, x);\n    }\n    double w = Math.exp(-(x - a) * Math.log(x) + logGamma(a));\n    double z = x - a;\n    double y = z + 1;\n    double c = 0;\n    double p = 1;\n    double q = z;\n    double a1 = q;\n    double b1 = y * q - a * p;\n    double eps = DOUBLE_EPSILON * a1;\n    while (Math.abs(q / p - c) > eps) {\n        c = q / p;\n        ++a;\n        z += 2;\n        double aa = (a * z - b1) * q;\n        double bb = y * q - a * p;\n        aa = aa < 0 ? -aa : aa;\n        bb = bb < 0 ? -bb : bb;\n        double t = aa > bb ? aa / bb : bb / aa;\n        if (t < LOWER_REGION_ASIMPTOTIC_BEHAVIOR_EPSILON) {\n            t = p / (a * density(z));\n        } else {\n            p = aa;\n            q = bb;\n        }\n        a1 = t * a1;\n        b1 = t * b1;\n        p *= t;\n        q *= t;\n        if (a1 > MAX_VALUE_INV) {\n            p *= MAX_VALUE;\n            q *= MAX_VALUE;\n            a1 *= MAX_VALUE_INV;\n            b1 *= MAX_VALUE_INV;\n        }\n    }\n    return w * a1;\n}\n\nprivate static double density(double x) {\n    return Math.exp(-0.5 * x * x - HALF_LOG_2_PI);\n}\n\nprivate static final double HALF_LOG_2_PI = 0.5 * Math.log(2 * Math.PI);\n\nprivate static final double LOWER_REGION_ASIMPTOTIC_BEHAVIOR_EPSILON = 1e-20;\n\nprivate static final double DOUBLE_EPSILON = Math.ulp(1d);\n\nprivate static final double MAX_VALUE = Double.MAX_VALUE;\n\nprivate static final double MAX_VALUE_INV = 1d / Double.MAX_VALUE;\n\nprivate static final double RELATIVE_ERROR_TOLERANCE = 10e-15;\n\nprivate static double logGamma(final double x) {\n    double ret;\n    double tmp = x + 5.5;\n    tmp -= (x + 0.5) * Math.log(tmp);\n    double ser = 1.000000000190015 + 76.18009172947146 / (x + 1) - 86.50532032941677 / (x + 2) + 24.01409824083091 / (x + 3) - 1.231739572450155 / (x + 4) + 1.208650973866179e-3 / (x+5) - 5.395239384953e-6 / (x + 6);\n    ret = -tmp + Math.log(2.5066282746310005 * ser / x);\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..c98b3b3ed 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,98 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0) {\n+        return 0;\n+    }\n+    if (x >= 1.0 && x > a) {\n+        return 1 - regularizedGammaQ(a, x);\n+    }\n+    double sum = 1 / a;\n+    double term = sum;\n+    while (Math.abs(term) > RELATIVE_ERROR_TOLERANCE * Math.abs(sum)) {\n+        ++a;\n+        term *= x / a;\n+        sum += term;\n+    }\n+    return Math.exp(-x + Math.log(sum));\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0) {\n+        return 1;\n+    }\n+    if (x < a || Double.isInfinite(x)) {\n+        return 1 - regularizedGammaP(a, x);\n+    }\n+    double w = Math.exp(-(x - a) * Math.log(x) + logGamma(a));\n+    double z = x - a;\n+    double y = z + 1;\n+    double c = 0;\n+    double p = 1;\n+    double q = z;\n+    double a1 = q;\n+    double b1 = y * q - a * p;\n+    double eps = DOUBLE_EPSILON * a1;\n+    while (Math.abs(q / p - c) > eps) {\n+        c = q / p;\n+        ++a;\n+        z += 2;\n+        double aa = (a * z - b1) * q;\n+        double bb = y * q - a * p;\n+        aa = aa < 0 ? -aa : aa;\n+        bb = bb < 0 ? -bb : bb;\n+        double t = aa > bb ? aa / bb : bb / aa;\n+        if (t < LOWER_REGION_ASIMPTOTIC_BEHAVIOR_EPSILON) {\n+            t = p / (a * density(z));\n+        } else {\n+            p = aa;\n+            q = bb;\n+        }\n+        a1 = t * a1;\n+        b1 = t * b1;\n+        p *= t;\n+        q *= t;\n+        if (a1 > MAX_VALUE_INV) {\n+            p *= MAX_VALUE;\n+            q *= MAX_VALUE;\n+            a1 *= MAX_VALUE_INV;\n+            b1 *= MAX_VALUE_INV;\n+        }\n+    }\n+    return w * a1;\n+}\n+\n+private static double density(double x) {\n+    return Math.exp(-0.5 * x * x - HALF_LOG_2_PI);\n+}\n+\n+private static final double HALF_LOG_2_PI = 0.5 * Math.log(2 * Math.PI);\n+\n+private static final double LOWER_REGION_ASIMPTOTIC_BEHAVIOR_EPSILON = 1e-20;\n+\n+private static final double DOUBLE_EPSILON = Math.ulp(1d);\n+\n+private static final double MAX_VALUE = Double.MAX_VALUE;\n+\n+private static final double MAX_VALUE_INV = 1d / Double.MAX_VALUE;\n+\n+private static final double RELATIVE_ERROR_TOLERANCE = 10e-15;\n+\n+private static double logGamma(final double x) {\n+    double ret;\n+    double tmp = x + 5.5;\n+    tmp -= (x + 0.5) * Math.log(tmp);\n+    double ser = 1.000000000190015 + 76.18009172947146 / (x + 1) - 86.50532032941677 / (x + 2) + 24.01409824083091 / (x + 3) - 1.231739572450155 / (x + 4) + 1.208650973866179e-3 / (x+5) - 5.395239384953e-6 / (x + 6);\n+    ret = -tmp + Math.log(2.5066282746310005 * ser / x);\n+    return ret;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}