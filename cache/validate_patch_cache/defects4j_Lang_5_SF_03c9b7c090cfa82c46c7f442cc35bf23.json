{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null || str.isEmpty()) {\n        return null;\n    }\n    final int len = str.length();\n    if (len < 2 || len > 10) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (str.startsWith(\"_\")) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    final String[] split = StringUtils.split(str, '_');\n    final int size = split.length;\n    final String language = split[0];\n    if (!isValidLanguage(language)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (size == 1) {\n        return new Locale(language);\n    }\n    final String country = split[1];\n    if (!isValidCountry(country)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (size == 2) {\n        return new Locale(language, country);\n    }\n    final String variant = split[2];\n    if (!isValidVariant(variant)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (size == 3) {\n        return new Locale(language, country, variant);\n    }\n    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n}\n\nprivate static boolean isValidLanguage(final String lang) {\n    return lang.matches(\"[a-zA-Z]{2,8}\");\n}\n\nprivate static boolean isValidCountry(final String country) {\n    return country.matches(\"[a-zA-Z]{2}|[0-9]{3}\");\n}\n\nprivate static boolean isValidVariant(final String variant) {\n    return variant.matches(\"[0-9][a-zA-Z0-9]{0,7}|[a-zA-Z0-9]{5,8}\");\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..90e9c9aa 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,47 +85,54 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        final int len = str.length();\n-        if (len < 2) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+public static Locale toLocale(final String str) {\n+    if (str == null || str.isEmpty()) {\n+        return null;\n+    }\n+    final int len = str.length();\n+    if (len < 2 || len > 10) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (str.startsWith(\"_\")) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n     }\n+    final String[] split = StringUtils.split(str, '_');\n+    final int size = split.length;\n+    final String language = split[0];\n+    if (!isValidLanguage(language)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (size == 1) {\n+        return new Locale(language);\n+    }\n+    final String country = split[1];\n+    if (!isValidCountry(country)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (size == 2) {\n+        return new Locale(language, country);\n+    }\n+    final String variant = split[2];\n+    if (!isValidVariant(variant)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (size == 3) {\n+        return new Locale(language, country, variant);\n+    }\n+    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+}\n+\n+private static boolean isValidLanguage(final String lang) {\n+    return lang.matches(\"[a-zA-Z]{2,8}\");\n+}\n+\n+private static boolean isValidCountry(final String country) {\n+    return country.matches(\"[a-zA-Z]{2}|[0-9]{3}\");\n+}\n+\n+private static boolean isValidVariant(final String variant) {\n+    return variant.matches(\"[0-9][a-zA-Z0-9]{0,7}|[a-zA-Z0-9]{5,8}\");\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "java.lang.IllegalArgumentException: Invalid locale format: fr__P",
    "test_result": "FAIL"
}