{
    "patch": "private Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {\n        double result;\n        double lval = left.getDouble();\n        double rval = right.getDouble();\n\n        // check ranges. We do not do anything that would clip the double to a 32-bit range,\n        // since the user likely does not intend that.\n        if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n            error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n            return n;\n        }\n\n        // In JavaScript, only the lower 5 bits of the shift value are used when shifting,\n        // so do nothing if the shift amount is outside [0, 32)\n        int rShiftAmt = (int) rval;\n        if (rShiftAmt < 0 || rShiftAmt >= 32) {\n            error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n            return n;\n        }\n\n        // Convert the numbers to longs as operations might exceed int range\n        long lvalLong = (long) lval;\n        if (lvalLong != lval) {\n            error(FRACTIONAL_BITWISE_OPERAND, left);\n            return n;\n        }\n\n        long resultLong = 0L;\n        switch (n.getType()) {\n            case Token.LSH:\n                resultLong = lvalLong << rShiftAmt;\n                break;\n            case Token.RSH:\n                resultLong = lvalLong >> rShiftAmt;\n                break;\n            case Token.URSH:\n                // In Java, the >>> operator is treated as a signed right shift,\n                // so we need to convert the result back to an unsigned value\n                resultLong = Long.remainderUnsigned(lvalLong, 1L << 32) >>> rShiftAmt;\n                break;\n            default:\n                throw new AssertionError(String.format(\"Unknown shift operator: %s\",\n                        Node.tokenToName(n.getType())));\n        }\n\n        // If the result falls within the 32-bit range, return it as an integer\n        if (resultLong >= Integer.MIN_VALUE && resultLong <= Integer.MAX_VALUE) {\n            result = (double) resultLong;\n        } else {\n            // otherwise, return as a double\n            result = resultLong;\n        }\n\n        Node newNumber = Node.newNumber(result);\n        n.getParent().replaceChild(n, newNumber);\n        reportCodeChange();\n\n        return newNumber;\n    }\n\n    return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex d6c194a3..84f0f91c 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -649,68 +649,69 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n   /**\n    * Try to fold shift operations\n    */\n-  private Node tryFoldShift(Node n, Node left, Node right) {\n-    if (left.getType() == Token.NUMBER &&\n-        right.getType() == Token.NUMBER) {\n-\n-      double result;\n-      double lval = left.getDouble();\n-      double rval = right.getDouble();\n-\n-      // check ranges.  We do not do anything that would clip the double to\n-      // a 32-bit range, since the user likely does not intend that.\n-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n-        error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n-        return n;\n-      }\n+private Node tryFoldShift(Node n, Node left, Node right) {\n+    if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {\n+        double result;\n+        double lval = left.getDouble();\n+        double rval = right.getDouble();\n+\n+        // check ranges. We do not do anything that would clip the double to a 32-bit range,\n+        // since the user likely does not intend that.\n+        if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n+            error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n+            return n;\n+        }\n \n-      // only the lower 5 bits are used when shifting, so don't do anything\n-      // if the shift amount is outside [0,32)\n-      if (!(rval >= 0 && rval < 32)) {\n-        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n-        return n;\n-      }\n+        // In JavaScript, only the lower 5 bits of the shift value are used when shifting,\n+        // so do nothing if the shift amount is outside [0, 32)\n+        int rShiftAmt = (int) rval;\n+        if (rShiftAmt < 0 || rShiftAmt >= 32) {\n+            error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n+            return n;\n+        }\n \n-      // Convert the numbers to ints\n-      int lvalInt = (int) lval;\n-      if (lvalInt != lval) {\n-        error(FRACTIONAL_BITWISE_OPERAND, left);\n-        return n;\n-      }\n+        // Convert the numbers to longs as operations might exceed int range\n+        long lvalLong = (long) lval;\n+        if (lvalLong != lval) {\n+            error(FRACTIONAL_BITWISE_OPERAND, left);\n+            return n;\n+        }\n \n-      int rvalInt = (int) rval;\n-      if (rvalInt != rval) {\n-        error(FRACTIONAL_BITWISE_OPERAND, right);\n-        return n;\n-      }\n+        long resultLong = 0L;\n+        switch (n.getType()) {\n+            case Token.LSH:\n+                resultLong = lvalLong << rShiftAmt;\n+                break;\n+            case Token.RSH:\n+                resultLong = lvalLong >> rShiftAmt;\n+                break;\n+            case Token.URSH:\n+                // In Java, the >>> operator is treated as a signed right shift,\n+                // so we need to convert the result back to an unsigned value\n+                resultLong = Long.remainderUnsigned(lvalLong, 1L << 32) >>> rShiftAmt;\n+                break;\n+            default:\n+                throw new AssertionError(String.format(\"Unknown shift operator: %s\",\n+                        Node.tokenToName(n.getType())));\n+        }\n \n-      switch (n.getType()) {\n-        case Token.LSH:\n-          result = lvalInt << rvalInt;\n-          break;\n-        case Token.RSH:\n-          result = lvalInt >> rvalInt;\n-          break;\n-        case Token.URSH:\n-          // JavaScript handles zero shifts on signed numbers differently than\n-          // Java as an Java int can not represent the unsigned 32-bit number\n-          // where JavaScript can so use a long here.\n-          result = lvalInt >>> rvalInt;\n-          break;\n-        default:\n-          throw new AssertionError(\"Unknown shift operator: \" +\n-              Node.tokenToName(n.getType()));\n-      }\n+        // If the result falls within the 32-bit range, return it as an integer\n+        if (resultLong >= Integer.MIN_VALUE && resultLong <= Integer.MAX_VALUE) {\n+            result = (double) resultLong;\n+        } else {\n+            // otherwise, return as a double\n+            result = resultLong;\n+        }\n \n-      Node newNumber = Node.newNumber(result);\n-      n.getParent().replaceChild(n, newNumber);\n-      reportCodeChange();\n+        Node newNumber = Node.newNumber(result);\n+        n.getParent().replaceChild(n, newNumber);\n+        reportCodeChange();\n \n-      return newNumber;\n+        return newNumber;\n     }\n \n     return n;\n-  }\n+}\n \n   /**\n    * Try to fold comparison nodes, e.g ==",
    "result_reason": "junit.framework.AssertionFailedError: There should be one error. expected:<1> but was:<0>",
    "test_result": "FAIL"
}