{
    "patch": "import org.apache.commons.math3.util.FastMath;\n\nprotected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n        // increment iterations counter\n        incrementIterationsCounter();\n\n        // this will hold the original simplex\n        final RealPointValuePair[] vertices = simplex.clone();\n        final RealPointValuePair best = vertices[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(vertices, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair expanded;\n            try {\n                expanded = evaluateNewSimplex(vertices, rho, comparator);\n            } catch (FunctionEvaluationException e) {\n                expanded = reflected; // keep the reflected simplex\n            }\n\n            // accept the reflection if it is better than the original vertex\n            if (comparator.compare(expanded, reflected) < 0) {\n                simplex = replaceWorstPoint(vertices, expanded, comparator);\n\n                // try to extend the reflected simplex\n                final RealPointValuePair extended =\n                        evaluateNewSimplex(simplex, sigma, comparator);\n                if (comparator.compare(extended, expanded) < 0) {\n                    simplex = replaceWorstPoint(vertices, extended, comparator);\n                }\n            } else {\n                simplex = replaceWorstPoint(vertices, reflected, comparator);\n            }\n        } else {\n            // calculate the contracted simplex\n            final RealPointValuePair contracted;\n            try {\n                contracted = evaluateNewSimplex(vertices, -gamma, comparator);\n            } catch (FunctionEvaluationException e) {\n                contracted = reflected; // keep the reflected simplex\n            }\n\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = replaceWorstPoint(vertices, contracted, comparator);\n            } else {\n                // perform a shrink\n                final RealPointValuePair[] shrunkSimplex = shrink(vertices, comparator);\n                if (comparator.compare(shrunkSimplex[0], vertices[0]) >= 0) {\n                    simplex = sortSimplex(shrunkSimplex, comparator);\n                } else {\n                    simplex = replaceWorstPoint(vertices, shrunkSimplex[0], comparator);\n                }\n            }\n        }\n\n        // check convergence\n        final double[] xSmallest = simplex[0].getPoint();\n        boolean converged = true;\n        for (int i = 0; i < simplex.length && converged; ++i) {\n            converged = converged && (comparator.compare(simplex[i], simplex[simplex.length - 1]) <= 0)\n                    && (getConvergenceChecker() == null || getConvergenceChecker().converged(\n                            getIterations(), null, null, null,\n                            simplex[i], simplex[simplex.length - 1]));\n        }\n        if (converged || getIterations() >= getMaxIterations()) {\n            return;\n        }\n    }\n}\n\nprivate RealPointValuePair[] shrink(final RealPointValuePair[] vertices, final Comparator<RealPointValuePair> comparator) {\n    final RealPointValuePair[] out = new RealPointValuePair[vertices.length];\n    final double[] bestPoint = vertices[0].getPoint();\n    final RealPointValuePair best = new RealPointValuePair(bestPoint, computeObjectiveValue(bestPoint));\n    out[0] = best;\n    for (int i = 1; i < out.length; ++i) {\n        final double[] original = vertices[i].getPoint();\n        final double[] point = new double[original.length];\n        for (int j = 0; j < point.length; ++j) {\n            point[j] = bestPoint[j] + beta * (original[j] - bestPoint[j]);\n        }\n        out[i] = new RealPointValuePair(point, computeObjectiveValue(point));\n    }\n    return out;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..800effddd 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,97 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+import org.apache.commons.math3.util.FastMath;\n \n-        while (true) {\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-            incrementIterationsCounter();\n+    while (true) {\n+        // increment iterations counter\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // this will hold the original simplex\n+        final RealPointValuePair[] vertices = simplex.clone();\n+        final RealPointValuePair best = vertices[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(vertices, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+            // compute the expanded simplex\n+            final RealPointValuePair expanded;\n+            try {\n+                expanded = evaluateNewSimplex(vertices, rho, comparator);\n+            } catch (FunctionEvaluationException e) {\n+                expanded = reflected; // keep the reflected simplex\n+            }\n \n-                return;\n+            // accept the reflection if it is better than the original vertex\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                simplex = replaceWorstPoint(vertices, expanded, comparator);\n \n+                // try to extend the reflected simplex\n+                final RealPointValuePair extended =\n+                        evaluateNewSimplex(simplex, sigma, comparator);\n+                if (comparator.compare(extended, expanded) < 0) {\n+                    simplex = replaceWorstPoint(vertices, extended, comparator);\n+                }\n+            } else {\n+                simplex = replaceWorstPoint(vertices, reflected, comparator);\n+            }\n+        } else {\n+            // calculate the contracted simplex\n+            final RealPointValuePair contracted;\n+            try {\n+                contracted = evaluateNewSimplex(vertices, -gamma, comparator);\n+            } catch (FunctionEvaluationException e) {\n+                contracted = reflected; // keep the reflected simplex\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+                simplex = replaceWorstPoint(vertices, contracted, comparator);\n+            } else {\n+                // perform a shrink\n+                final RealPointValuePair[] shrunkSimplex = shrink(vertices, comparator);\n+                if (comparator.compare(shrunkSimplex[0], vertices[0]) >= 0) {\n+                    simplex = sortSimplex(shrunkSimplex, comparator);\n+                } else {\n+                    simplex = replaceWorstPoint(vertices, shrunkSimplex[0], comparator);\n+                }\n             }\n+        }\n \n+        // check convergence\n+        final double[] xSmallest = simplex[0].getPoint();\n+        boolean converged = true;\n+        for (int i = 0; i < simplex.length && converged; ++i) {\n+            converged = converged && (comparator.compare(simplex[i], simplex[simplex.length - 1]) <= 0)\n+                    && (getConvergenceChecker() == null || getConvergenceChecker().converged(\n+                            getIterations(), null, null, null,\n+                            simplex[i], simplex[simplex.length - 1]));\n         }\n+        if (converged || getIterations() >= getMaxIterations()) {\n+            return;\n+        }\n+    }\n+}\n \n+private RealPointValuePair[] shrink(final RealPointValuePair[] vertices, final Comparator<RealPointValuePair> comparator) {\n+    final RealPointValuePair[] out = new RealPointValuePair[vertices.length];\n+    final double[] bestPoint = vertices[0].getPoint();\n+    final RealPointValuePair best = new RealPointValuePair(bestPoint, computeObjectiveValue(bestPoint));\n+    out[0] = best;\n+    for (int i = 1; i < out.length; ++i) {\n+        final double[] original = vertices[i].getPoint();\n+        final double[] point = new double[original.length];\n+        for (int j = 0; j < point.length; ++j) {\n+            point[j] = bestPoint[j] + beta * (original[j] - bestPoint[j]);\n+        }\n+        out[i] = new RealPointValuePair(point, computeObjectiveValue(point));\n     }\n+    return out;\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}