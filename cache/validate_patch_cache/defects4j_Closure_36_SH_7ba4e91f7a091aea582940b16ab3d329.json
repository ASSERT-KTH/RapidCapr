{
    "patch": "if (value.isFunction()) {\n    Node callNode = reference.getParent();\n    if (reference.getParent().isCall()) {\n        CodingConvention convention = compiler.getCodingConvention();\n        // Bug 2388531: Don't inline subclass definitions into class defining\n        // calls as this confused class removing logic.\n        SubclassRelationship relationship =\n                convention.getClassesDefinedByCall(callNode);\n        if (relationship != null) {\n            return false;\n        }\n\n        // issue 668: Don't inline singleton getter methods calls as this confused class removing logic.\n        if (convention.getSingletonGetterClassName(value) != null) {\n            return false;\n        }\n    }\n    // issue 668: Don't inline singleton getter methods assignments.\n    // Assigning a function to a prototype is potentially unsafe.\n    if (NodeUtil.isAssignmentOp(parentNode = value.getParent())\n            || ((parentNode = value.getParent()) != null\n                && parentNode.isExprResult()\n                        && NodeUtil.isAssignmentOp(parentNode = parentNode.getParent()))) {\n        Node lvalue = parentNode.getChildAtIndex(0);\n        compiler.report(JSError.make(\n                declaration, SINGLETON_FUNCTION_GETTER_ASSIGNMENT_ERROR, convention.getSingletonClassName(lvalue)));\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..5949d695 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,35 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+if (value.isFunction()) {\n+    Node callNode = reference.getParent();\n+    if (reference.getParent().isCall()) {\n+        CodingConvention convention = compiler.getCodingConvention();\n+        // Bug 2388531: Don't inline subclass definitions into class defining\n+        // calls as this confused class removing logic.\n+        SubclassRelationship relationship =\n+                convention.getClassesDefinedByCall(callNode);\n+        if (relationship != null) {\n+            return false;\n+        }\n+\n+        // issue 668: Don't inline singleton getter methods calls as this confused class removing logic.\n+        if (convention.getSingletonGetterClassName(value) != null) {\n+            return false;\n+        }\n+    }\n+    // issue 668: Don't inline singleton getter methods assignments.\n+    // Assigning a function to a prototype is potentially unsafe.\n+    if (NodeUtil.isAssignmentOp(parentNode = value.getParent())\n+            || ((parentNode = value.getParent()) != null\n+                && parentNode.isExprResult()\n+                        && NodeUtil.isAssignmentOp(parentNode = parentNode.getParent()))) {\n+        Node lvalue = parentNode.getChildAtIndex(0);\n+        compiler.report(JSError.make(\n+                declaration, SINGLETON_FUNCTION_GETTER_ASSIGNMENT_ERROR, convention.getSingletonClassName(lvalue)));\n+        return false;\n+    }\n+}\n         }\n       }\n ",
    "result_reason": "error: variable callNode is already defined in method canInline(Reference,Reference,Reference)",
    "test_result": "ERROR"
}