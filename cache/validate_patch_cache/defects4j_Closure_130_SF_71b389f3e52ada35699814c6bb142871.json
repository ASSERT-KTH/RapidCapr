{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n    Deque<Name> worklist = new ArrayDeque<>(namespace.getNameForest());\n    while (!worklist.isEmpty()) {\n        Name name = worklist.pop();\n\n        // Skip names that cannot be inlined\n        if (name.type != Name.Type.LET && name.type != Name.Type.CONST && name.type != Name.Type.VAR) {\n            continue;\n        }\n\n        // Check if the name can be inlined\n        if (name.getRefs().stream().anyMatch(ref -> ref.type == Ref.Type.ALIASING_GET) &&\n                name.globalSets == 1 &&\n                name.localSets == 0 &&\n                name.getDeclaration() != null &&\n                name.getDeclaration().getNode().getParent().isBlock() &&\n                name.canEliminate() &&\n                !name.isModuleExport()) {\n\n            // Get the JSDocInfo for the name\n            JSDocInfo info = NodeUtil.getBestJSDocInfo(name.getDeclaration().getNode());\n\n            // Check if the name is annotated as a constant\n            boolean isConstant = info != null && info.isConstant();\n\n            // Inline each of the aliases\n            for (Ref ref : ImmutableList.copyOf(name.getRefs())) {\n                if (ref.type == Ref.Type.ALIASING_GET && ref.scope.isLocal()) {\n                    if (!isConstant && !ref.getScope().isDeclared(Var.ANY, ref.node.getString())) {\n                        continue;\n                    }\n                    if (inlineAliasIfPossible(ref, namespace)) {\n                        name.removeRef(ref);\n                    }\n                }\n            }\n        }\n\n        // Add the children of the name to the worklist\n        if (name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) {\n            for (Name child : name.props) {\n                if (child.getAliasingGets() == 0) {\n                    worklist.add(child);\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..bfe5491c 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,43 +158,54 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n-    // Invariant: All the names in the worklist meet condition (a).\n-    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n-    while (!workList.isEmpty()) {\n-      Name name = workList.pop();\n-\n-      // Don't attempt to inline a getter or setter property as a variable.\n-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n-        continue;\n-      }\n+private void inlineAliases(GlobalNamespace namespace) {\n+    Deque<Name> worklist = new ArrayDeque<>(namespace.getNameForest());\n+    while (!worklist.isEmpty()) {\n+        Name name = worklist.pop();\n+\n+        // Skip names that cannot be inlined\n+        if (name.type != Name.Type.LET && name.type != Name.Type.CONST && name.type != Name.Type.VAR) {\n+            continue;\n+        }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+        // Check if the name can be inlined\n+        if (name.getRefs().stream().anyMatch(ref -> ref.type == Ref.Type.ALIASING_GET) &&\n+                name.globalSets == 1 &&\n+                name.localSets == 0 &&\n+                name.getDeclaration() != null &&\n+                name.getDeclaration().getNode().getParent().isBlock() &&\n+                name.canEliminate() &&\n+                !name.isModuleExport()) {\n+\n+            // Get the JSDocInfo for the name\n+            JSDocInfo info = NodeUtil.getBestJSDocInfo(name.getDeclaration().getNode());\n+\n+            // Check if the name is annotated as a constant\n+            boolean isConstant = info != null && info.isConstant();\n+\n+            // Inline each of the aliases\n+            for (Ref ref : ImmutableList.copyOf(name.getRefs())) {\n+                if (ref.type == Ref.Type.ALIASING_GET && ref.scope.isLocal()) {\n+                    if (!isConstant && !ref.getScope().isDeclared(Var.ANY, ref.node.getString())) {\n+                        continue;\n+                    }\n+                    if (inlineAliasIfPossible(ref, namespace)) {\n+                        name.removeRef(ref);\n+                    }\n+                }\n             }\n-          }\n         }\n-      }\n \n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n-      }\n+        // Add the children of the name to the worklist\n+        if (name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) {\n+            for (Name child : name.props) {\n+                if (child.getAliasingGets() == 0) {\n+                    worklist.add(child);\n+                }\n+            }\n+        }\n     }\n-  }\n+}\n \n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}