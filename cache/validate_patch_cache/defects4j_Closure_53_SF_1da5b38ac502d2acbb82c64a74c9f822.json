{
    "patch": "private void replaceAssignmentExpression(Var v, Reference ref,\n                                         Map<String, String> varmap) {\n  List<Node> nodes = Lists.newArrayList();\n  Node val = ref.getAssignedValue();\n  blacklistVarReferencesInTree(val, v.scope);\n  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n  Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n    String var = key.getString();\n    Node value = key.removeFirstChild();\n    // TODO(user): Copy type information.\n    nodes.add(buildAssignNode(varmap.get(var), value, val.isQuotedString()));\n    all.remove(var);\n  }\n\n  for (String var : all) {\n    nodes.add(buildAssignNode(varmap.get(var), NodeUtil.newUndefinedNode(null), false));\n  }\n\n  Node replacement = new Node(Token.COMMA);\n  for (Node node : nodes) {\n    replacement.addChildToBack(node);\n  }\n  replacement.addChildToBack(new Node(Token.TRUE));\n  replacement.useSourceInfoIfMissingFromForTree(ref.getParent());\n  Node replace = ref.getParent();\n  Node parent = replace.getParent();\n  if (replace.getParent().isLabel()) {\n    replace = replace.getParent();\n  }\n  Node prev = replace.getPrevious();\n  if (prev != null && prev.getType() == Token.EXPR_RESULT\n      && prev.getFirstChild().getType() == Token.COMMA) {\n    // The previous expression is a comma, so just add the nodes to it.\n    Node existing = prev.getFirstChild();\n    existing.removeLastChild();\n    existing.addChildrenToBack(replacement.removeChildren());\n    replacement = existing;\n  } else if (replace.getType() == Token.EXPR_RESULT) {\n    // There's nothing to do here.\n    return;\n  } else {\n    Node exprResult = new Node(Token.EXPR_RESULT, replacement);\n    exprResult.useSourceInfoIfMissingFromForTree(replace);\n    replace = exprResult;\n  }\n  if (replace.getParent().getType() == Token.LABEL) {\n    // The entire statement is a labeled statement, like\n    // HERE: something();\n    // replace \"something()\" with the new expression.\n    Node newStatement = new Node(Token.EXPR_RESULT, replacement);\n    newStatement.useSourceInfoIfMissingFrom(replace.getParent());\n    replace = IR.label(\n               replace.getParent().getFirstChild().getString(),\n               newStatement)\n                 .useSourceInfoIfMissingFrom(replace.getParent());\n  }\n  parent.replaceChild(replace, replacement);\n}\nprivate Node buildAssignNode(String name, Node value, boolean isQuotedString) {\n  Node result = new Node(Token.ASSIGN, Node.newString(Token.NAME, name), value);\n  if (isQuotedString) {\n    result.setQuotedString();\n  }\n  return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9061925d..8f09c28c 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -300,64 +300,72 @@ class InlineObjectLiterals implements CompilerPass {\n      * Note that the resulting expression will always evaluate to\n      * true, as would the x = {...} expression.\n      */\n-    private void replaceAssignmentExpression(Var v, Reference ref,\n-                                             Map<String, String> varmap) {\n-      // Compute all of the assignments necessary\n-      List<Node> nodes = Lists.newArrayList();\n-      Node val = ref.getAssignedValue();\n-      blacklistVarReferencesInTree(val, v.scope);\n-      Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n-      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n-      for (Node key = val.getFirstChild(); key != null;\n-           key = key.getNext()) {\n-        String var = key.getString();\n-        Node value = key.removeFirstChild();\n-        // TODO(user): Copy type information.\n-        nodes.add(\n-          new Node(Token.ASSIGN,\n-                   Node.newString(Token.NAME, varmap.get(var)), value));\n-        all.remove(var);\n-      }\n-\n-      // TODO(user): Better source information.\n-      for (String var : all) {\n-        nodes.add(\n-          new Node(Token.ASSIGN,\n-                   Node.newString(Token.NAME, varmap.get(var)),\n-                   NodeUtil.newUndefinedNode(null)));\n-      }\n-\n-      Node replacement;\n-        // All assignments evaluate to true, so make sure that the\n-        // expr statement evaluates to true in case it matters.\n-        nodes.add(new Node(Token.TRUE));\n-\n-        // Join these using COMMA.  A COMMA node must have 2 children, so we\n-        // create a tree. In the tree the first child be the COMMA to match\n-        // the parser, otherwise tree equality tests fail.\n-        nodes = Lists.reverse(nodes);\n-        replacement = new Node(Token.COMMA);\n-        Node cur = replacement;\n-        int i;\n-        for (i = 0; i < nodes.size() - 2; i++) {\n-          cur.addChildToFront(nodes.get(i));\n-          Node t = new Node(Token.COMMA);\n-          cur.addChildToFront(t);\n-          cur = t;\n-        }\n-        cur.addChildToFront(nodes.get(i));\n-        cur.addChildToFront(nodes.get(i + 1));\n+private void replaceAssignmentExpression(Var v, Reference ref,\n+                                         Map<String, String> varmap) {\n+  List<Node> nodes = Lists.newArrayList();\n+  Node val = ref.getAssignedValue();\n+  blacklistVarReferencesInTree(val, v.scope);\n+  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n+  Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n+  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n+    String var = key.getString();\n+    Node value = key.removeFirstChild();\n+    // TODO(user): Copy type information.\n+    nodes.add(buildAssignNode(varmap.get(var), value, val.isQuotedString()));\n+    all.remove(var);\n+  }\n \n-      Node replace = ref.getParent();\n-      replacement.copyInformationFromForTree(replace);\n+  for (String var : all) {\n+    nodes.add(buildAssignNode(varmap.get(var), NodeUtil.newUndefinedNode(null), false));\n+  }\n \n-      if (replace.getType() == Token.VAR) {\n-        replace.getParent().replaceChild(\n-            replace, NodeUtil.newExpr(replacement));\n-      } else {\n-        replace.getParent().replaceChild(replace, replacement);\n-      }\n-    }\n+  Node replacement = new Node(Token.COMMA);\n+  for (Node node : nodes) {\n+    replacement.addChildToBack(node);\n+  }\n+  replacement.addChildToBack(new Node(Token.TRUE));\n+  replacement.useSourceInfoIfMissingFromForTree(ref.getParent());\n+  Node replace = ref.getParent();\n+  Node parent = replace.getParent();\n+  if (replace.getParent().isLabel()) {\n+    replace = replace.getParent();\n+  }\n+  Node prev = replace.getPrevious();\n+  if (prev != null && prev.getType() == Token.EXPR_RESULT\n+      && prev.getFirstChild().getType() == Token.COMMA) {\n+    // The previous expression is a comma, so just add the nodes to it.\n+    Node existing = prev.getFirstChild();\n+    existing.removeLastChild();\n+    existing.addChildrenToBack(replacement.removeChildren());\n+    replacement = existing;\n+  } else if (replace.getType() == Token.EXPR_RESULT) {\n+    // There's nothing to do here.\n+    return;\n+  } else {\n+    Node exprResult = new Node(Token.EXPR_RESULT, replacement);\n+    exprResult.useSourceInfoIfMissingFromForTree(replace);\n+    replace = exprResult;\n+  }\n+  if (replace.getParent().getType() == Token.LABEL) {\n+    // The entire statement is a labeled statement, like\n+    // HERE: something();\n+    // replace \"something()\" with the new expression.\n+    Node newStatement = new Node(Token.EXPR_RESULT, replacement);\n+    newStatement.useSourceInfoIfMissingFrom(replace.getParent());\n+    replace = IR.label(\n+               replace.getParent().getFirstChild().getString(),\n+               newStatement)\n+                 .useSourceInfoIfMissingFrom(replace.getParent());\n+  }\n+  parent.replaceChild(replace, replacement);\n+}\n+private Node buildAssignNode(String name, Node value, boolean isQuotedString) {\n+  Node result = new Node(Token.ASSIGN, Node.newString(Token.NAME, name), value);\n+  if (isQuotedString) {\n+    result.setQuotedString();\n+  }\n+  return result;\n+}\n \n     /**\n      * Splits up the object literal into individual variables, and",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}