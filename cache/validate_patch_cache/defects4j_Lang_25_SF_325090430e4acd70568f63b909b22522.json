{
    "patch": "public String unescape(String s) {\n    if (s == null) {\n        return null;\n    }\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < s.length();) {\n        char c = s.charAt(i);\n        if (c == '\\\\') {\n            char nextChar = (i == s.length() - 1) ? '\\\\' : s.charAt(i + 1);\n            // Octal escape?\n            if (nextChar >= '0' && nextChar <= '7') {\n                String code = \"\" + nextChar;\n                i += 2;\n                if ((i < s.length()) && s.charAt(i) >= '0' && s.charAt(i) <= '7') {\n                    code += s.charAt(i++);\n                    if ((i < s.length()) && s.charAt(i) >= '0' && s.charAt(i) <= '7') {\n                        code += s.charAt(i++);\n                    }\n                }\n                sb.append((char) Integer.parseInt(code, 8));\n                continue;\n            }\n            switch (nextChar) {\n                case '\\\\':\n                    c = '\\\\';\n                    break;\n                case 'b':\n                    c = '\\b';\n                    break;\n                case 'f':\n                    c = '\\f';\n                    break;\n                case 'n':\n                    c = '\\n';\n                    break;\n                case 'r':\n                    c = '\\r';\n                    break;\n                case 't':\n                    c = '\\t';\n                    break;\n                case '\\\"':\n                    c = '\\\"';\n                    break;\n                case '\\'':\n                    c = '\\'';\n                    break;\n                // Hex Unicode: u????    \n                case 'u':\n                    if (i >= s.length() - 5) {\n                        c = 'u';\n                        break;\n                    }\n                    int code = Integer.parseInt(\n                        \"\" + s.charAt(i + 2) + s.charAt(i + 3) +\n                        s.charAt(i + 4) + s.charAt(i + 5), 16);\n                    sb.append(Character.toChars(code));\n                    i += 6;\n                    continue;\n            }\n            i += 2;\n        } else {\n            i++;\n        }\n        sb.append(c);\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..c752c14e 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,74 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public String unescape(String s) {\n+    if (s == null) {\n+        return null;\n+    }\n+    StringBuilder sb = new StringBuilder();\n+    for (int i = 0; i < s.length();) {\n+        char c = s.charAt(i);\n+        if (c == '\\\\') {\n+            char nextChar = (i == s.length() - 1) ? '\\\\' : s.charAt(i + 1);\n+            // Octal escape?\n+            if (nextChar >= '0' && nextChar <= '7') {\n+                String code = \"\" + nextChar;\n+                i += 2;\n+                if ((i < s.length()) && s.charAt(i) >= '0' && s.charAt(i) <= '7') {\n+                    code += s.charAt(i++);\n+                    if ((i < s.length()) && s.charAt(i) >= '0' && s.charAt(i) <= '7') {\n+                        code += s.charAt(i++);\n+                    }\n+                }\n+                sb.append((char) Integer.parseInt(code, 8));\n+                continue;\n+            }\n+            switch (nextChar) {\n+                case '\\\\':\n+                    c = '\\\\';\n+                    break;\n+                case 'b':\n+                    c = '\\b';\n+                    break;\n+                case 'f':\n+                    c = '\\f';\n+                    break;\n+                case 'n':\n+                    c = '\\n';\n+                    break;\n+                case 'r':\n+                    c = '\\r';\n+                    break;\n+                case 't':\n+                    c = '\\t';\n+                    break;\n+                case '\\\"':\n+                    c = '\\\"';\n+                    break;\n+                case '\\'':\n+                    c = '\\'';\n+                    break;\n+                // Hex Unicode: u????    \n+                case 'u':\n+                    if (i >= s.length() - 5) {\n+                        c = 'u';\n+                        break;\n+                    }\n+                    int code = Integer.parseInt(\n+                        \"\" + s.charAt(i + 2) + s.charAt(i + 3) +\n+                        s.charAt(i + 4) + s.charAt(i + 5), 16);\n+                    sb.append(Character.toChars(code));\n+                    i += 6;\n+                    continue;\n+            }\n+            i += 2;\n+        } else {\n+            i++;\n+        }\n+        sb.append(c);\n+    }\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}