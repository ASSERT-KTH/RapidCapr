{
    "patch": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class BugFix {\n\n    public Iterable<Integer> getPositiveNumbers(List<Integer> numbers) {\n        List<Integer> positiveNumbers = new ArrayList<Integer>();\n        for (Integer number : numbers) {\n            if (number > 0) {\n                positiveNumbers.add(number);\n            }\n        }\n        return positiveNumbers;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..1d0aa69d1 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,21 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class BugFix {\n+\n+    public Iterable<Integer> getPositiveNumbers(List<Integer> numbers) {\n+        List<Integer> positiveNumbers = new ArrayList<Integer>();\n+        for (Integer number : numbers) {\n+            if (number > 0) {\n+                positiveNumbers.add(number);\n+            }\n+        }\n+        return positiveNumbers;\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}