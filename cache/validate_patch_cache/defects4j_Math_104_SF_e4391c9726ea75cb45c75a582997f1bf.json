{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.FastMath;\n\npublic class RegularizedGammaFunction {\n\n    public static double regularizedGamma(double a, double x) {\n        if (a <= 0) {\n            throw new IllegalArgumentException(\"Parameter a must be positive.\");\n        }\n\n        if (x < 0) {\n            throw new IllegalArgumentException(\"Parameter x cannot be negative.\");\n        }\n\n        if (FastMath.abs(FastMath.floor(x)) == x && x <= 0) {\n            throw new IllegalArgumentException(\"Parameter x cannot be a non-positive integer.\");\n        }\n\n        double eps = 10e-15;\n        int maxIterations = 100;\n\n        double result;\n        double gamma = Gamma.gamma(a);\n        double ga = Gamma.regularizedGammaP(a, x);\n\n        if (x < a + 1) {\n            result = ga * continuedFraction(a, x, eps, maxIterations) / a;\n        } else {\n            result = 1 - ga * continuedFractionConvergent(a, x, eps, maxIterations) / a;\n        }\n\n        return result * gamma;\n    }\n\n    private static double continuedFraction(double a, double x, double eps, int maxIterations) {\n        double cf = 0;\n        double rv = 1 / a;\n        double delta = rv;\n\n        for (int i = 1; i <= maxIterations; i++) {\n            double denom = x + a + i - 1;\n            double term = -(a + i - 1) * rv * delta;\n            cf += term;\n            if (FastMath.abs(term) < eps * FastMath.abs(cf)) {\n                return cf;\n            }\n            delta = term / denom;\n            rv = denom / term;\n        }\n\n        throw new IllegalStateException(\"Continued fraction failed to converge.\");\n    }\n\n    private static double continuedFractionConvergent(double a, double x, double eps, int maxIterations) {\n        double f2 = 0;\n        double f1 = 1;\n        double f0 = x / a;\n        double cf = f0;\n\n        for (int i = 1; i <= maxIterations; i++) {\n            double a1 = 2 * i;\n            double b1 = x + 2 * i + a - 1;\n            double f2Prev = f1;\n            f1 = f0;\n            f0 = b1 * f1 + a1 * f0;\n            if (FastMath.abs(f0) > Double.MAX_VALUE) {\n                f2 /= Double.MAX_VALUE;\n                f1 /= Double.MAX_VALUE;\n                f0 /= Double.MAX_VALUE;\n            }\n            if (FastMath.abs(f0) < Double.MIN_VALUE) {\n                f2 *= Double.MIN_VALUE;\n                f1 *= Double.MIN_VALUE;\n                f0 *= Double.MIN_VALUE;\n            }\n            if (f0 == 0) {\n                return cf;\n            }\n            double delta = f1 / f0;\n            cf *= delta;\n            cf += 1;\n            if (FastMath.abs(delta - 1) < eps) {\n                return cf;\n            }\n            f2 = f2Prev;\n        }\n\n        throw new IllegalStateException(\"Continued fraction failed to converge.\");\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..52463fb96 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,96 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.FastMath;\n+\n+public class RegularizedGammaFunction {\n+\n+    public static double regularizedGamma(double a, double x) {\n+        if (a <= 0) {\n+            throw new IllegalArgumentException(\"Parameter a must be positive.\");\n+        }\n+\n+        if (x < 0) {\n+            throw new IllegalArgumentException(\"Parameter x cannot be negative.\");\n+        }\n+\n+        if (FastMath.abs(FastMath.floor(x)) == x && x <= 0) {\n+            throw new IllegalArgumentException(\"Parameter x cannot be a non-positive integer.\");\n+        }\n+\n+        double eps = 10e-15;\n+        int maxIterations = 100;\n+\n+        double result;\n+        double gamma = Gamma.gamma(a);\n+        double ga = Gamma.regularizedGammaP(a, x);\n+\n+        if (x < a + 1) {\n+            result = ga * continuedFraction(a, x, eps, maxIterations) / a;\n+        } else {\n+            result = 1 - ga * continuedFractionConvergent(a, x, eps, maxIterations) / a;\n+        }\n+\n+        return result * gamma;\n+    }\n+\n+    private static double continuedFraction(double a, double x, double eps, int maxIterations) {\n+        double cf = 0;\n+        double rv = 1 / a;\n+        double delta = rv;\n+\n+        for (int i = 1; i <= maxIterations; i++) {\n+            double denom = x + a + i - 1;\n+            double term = -(a + i - 1) * rv * delta;\n+            cf += term;\n+            if (FastMath.abs(term) < eps * FastMath.abs(cf)) {\n+                return cf;\n+            }\n+            delta = term / denom;\n+            rv = denom / term;\n+        }\n+\n+        throw new IllegalStateException(\"Continued fraction failed to converge.\");\n+    }\n+\n+    private static double continuedFractionConvergent(double a, double x, double eps, int maxIterations) {\n+        double f2 = 0;\n+        double f1 = 1;\n+        double f0 = x / a;\n+        double cf = f0;\n+\n+        for (int i = 1; i <= maxIterations; i++) {\n+            double a1 = 2 * i;\n+            double b1 = x + 2 * i + a - 1;\n+            double f2Prev = f1;\n+            f1 = f0;\n+            f0 = b1 * f1 + a1 * f0;\n+            if (FastMath.abs(f0) > Double.MAX_VALUE) {\n+                f2 /= Double.MAX_VALUE;\n+                f1 /= Double.MAX_VALUE;\n+                f0 /= Double.MAX_VALUE;\n+            }\n+            if (FastMath.abs(f0) < Double.MIN_VALUE) {\n+                f2 *= Double.MIN_VALUE;\n+                f1 *= Double.MIN_VALUE;\n+                f0 *= Double.MIN_VALUE;\n+            }\n+            if (f0 == 0) {\n+                return cf;\n+            }\n+            double delta = f1 / f0;\n+            cf *= delta;\n+            cf += 1;\n+            if (FastMath.abs(delta - 1) < eps) {\n+                return cf;\n+            }\n+            f2 = f2Prev;\n+        }\n+\n+        throw new IllegalStateException(\"Continued fraction failed to converge.\");\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}