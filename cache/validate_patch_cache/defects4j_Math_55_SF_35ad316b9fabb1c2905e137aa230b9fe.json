{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    final double maxx = FastMath.max(FastMath.max(FastMath.abs(v1.getX()), FastMath.abs(v1.getY())), FastMath.abs(v1.getZ()));\n    final double maxy = FastMath.max(FastMath.max(FastMath.abs(v2.getX()), FastMath.abs(v2.getY())), FastMath.abs(v2.getZ()));\n    final double scale = FastMath.max(maxx, maxy);\n    final double inv = 1.0 / scale;\n    final double nx = v1.getX() * inv;\n    final double ny = v1.getY() * inv;\n    final double nz = v1.getZ() * inv;\n    final double vx = v2.getX();\n    final double vy = v2.getY();\n    final double vz = v2.getZ();\n\n    // compute cross-product using scaled 2x2 determinant\n    final double a = ny * vz - nz * vy;\n    final double b = nz * vx - nx * vz;\n    final double c = nx * vy - ny * vx;\n\n    return new Vector3D(a, b, c);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..b27602024 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,26 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+    final double maxx = FastMath.max(FastMath.max(FastMath.abs(v1.getX()), FastMath.abs(v1.getY())), FastMath.abs(v1.getZ()));\n+    final double maxy = FastMath.max(FastMath.max(FastMath.abs(v2.getX()), FastMath.abs(v2.getY())), FastMath.abs(v2.getZ()));\n+    final double scale = FastMath.max(maxx, maxy);\n+    final double inv = 1.0 / scale;\n+    final double nx = v1.getX() * inv;\n+    final double ny = v1.getY() * inv;\n+    final double nz = v1.getZ() * inv;\n+    final double vx = v2.getX();\n+    final double vy = v2.getY();\n+    final double vz = v2.getZ();\n+\n+    // compute cross-product using scaled 2x2 determinant\n+    final double a = ny * vz - nz * vy;\n+    final double b = nz * vx - nx * vz;\n+    final double c = nx * vy - ny * vx;\n+\n+    return new Vector3D(a, b, c);\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<0.18878460970471067>",
    "test_result": "FAIL"
}