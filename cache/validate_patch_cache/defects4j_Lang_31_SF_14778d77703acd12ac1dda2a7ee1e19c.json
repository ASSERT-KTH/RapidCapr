{
    "patch": "public static boolean containsAny(char[] str, char[] searchChars) {\n\t    if (str == null || searchChars == null) {\n\t        return false;\n\t    }\n\t    int len = str.length;\n\t    int searchLen = searchChars.length;\n\t    int delimLen = 1;\n\t    if (len == 0 || searchLen == 0) {\n\t        return false;\n\t    }\n\t    \n\t    // If the search length is big, use Boyer-Moore algorithm\n\t    if (searchLen == 1) {\n\t        return contains(str, searchChars[0]);\n\t    }\n\t    \n\t    if (searchLen == 2) {\n\t        return contains(str, searchChars[0]) || contains(str, searchChars[1]);\n\t    }\n\n\t    boolean[] search = new boolean[Character.MAX_VALUE];\n\t    for (char c : searchChars) {\n\t        search[c] = true;\n\t    }\n\t    for (int i = 0; i < len; i++) {\n\t        char ch = str[i];\n\t        if (Character.isHighSurrogate(ch) && i < len - 1) {\n\t            char ch2 = str[i + 1];\n\t            if (Character.isLowSurrogate(ch2)) {\n\t                ch = Character.toCodePoint(ch, ch2);\n\t                i++;\n\t            }\n\t        }\n\t        if (search[ch]) {\n\t            return true;\n\t        }\n\t    }\n\t    return false;\n\t}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..0a57beaf 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,45 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(char[] str, char[] searchChars) {\n+\t    if (str == null || searchChars == null) {\n+\t        return false;\n+\t    }\n+\t    int len = str.length;\n+\t    int searchLen = searchChars.length;\n+\t    int delimLen = 1;\n+\t    if (len == 0 || searchLen == 0) {\n+\t        return false;\n+\t    }\n+\t    \n+\t    // If the search length is big, use Boyer-Moore algorithm\n+\t    if (searchLen == 1) {\n+\t        return contains(str, searchChars[0]);\n+\t    }\n+\t    \n+\t    if (searchLen == 2) {\n+\t        return contains(str, searchChars[0]) || contains(str, searchChars[1]);\n+\t    }\n+\n+\t    boolean[] search = new boolean[Character.MAX_VALUE];\n+\t    for (char c : searchChars) {\n+\t        search[c] = true;\n+\t    }\n+\t    for (int i = 0; i < len; i++) {\n+\t        char ch = str[i];\n+\t        if (Character.isHighSurrogate(ch) && i < len - 1) {\n+\t            char ch2 = str[i + 1];\n+\t            if (Character.isLowSurrogate(ch2)) {\n+\t                ch = Character.toCodePoint(ch, ch2);\n+\t                i++;\n+\t            }\n+\t        }\n+\t        if (search[ch]) {\n+\t            return true;\n+\t        }\n+\t    }\n+\t    return false;\n+\t}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}