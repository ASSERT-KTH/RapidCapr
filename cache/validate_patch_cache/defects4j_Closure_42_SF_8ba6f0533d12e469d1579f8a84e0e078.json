{
    "patch": "public class IRFactory {\n    \n    private final String sourceName;\n    private final ErrorReporter errorReporter;\n    private final RewriteJsx rewriteJsx;\n\n    public IRFactory(String sourceName, ErrorReporter errorReporter, RewriteJsx rewriteJsx) {\n        this.sourceName = sourceName;\n        this.errorReporter = errorReporter;\n        this.rewriteJsx = rewriteJsx;\n    }\n\n    public Node transform(final AstNode node) {\n        if (node == null) {\n            return null;\n        }\n        \n        return node.visit(new NodeVisitor<Node>() {\n            @Override\n            public Node visit(AstNode node) {\n                throw new UnsupportedOperationException(node.getClass().getCanonicalName());\n            }\n\n            @Override\n            public Node visitArrayComprehension(ArrayComprehension node) {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public Node visitArrayComprehensionLoop(ArrayComprehensionLoop node) {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public Node visitArrayLiteral(ArrayLiteral node) {\n                Node n = new Node(Token.ARRAYLIT, node.getLineno(), node.getCharno());\n                for (AstNode element : node.getElements()) {\n                    n.addChildToBack(transform(element));\n                }\n                if (node.isDestructuring()) {\n                    n.putIntProp(Node.DESTRUCTURING_ARRAY_LENGTH_PROP, node.getDestructuringLength());\n                }\n                return n;\n            }\n\n            @Override\n            public Node visitAstRoot(AstRoot node) {\n                return new Node(Token.SCRIPT, transform(node));\n            }\n\n            @Override\n            public Node visitBlock(Block node) {\n                Node n = new Node(Token.BLOCK, node.getLineno(), node.getCharno());\n                for (Node child : node) {\n                    n.addChildToBack(transform(child));\n                }\n                n.setIsScopeBlock(node.isScope());\n                return n;\n            }\n\n            @Override\n            public Node visitBreakStatement(BreakStatement node) {\n                Node n = new Node(Token.BREAK);\n                if (node.getBreakLabel() != null) {\n                    Node label = transform(node.getBreakLabel());\n                    label.setType(Token.LABEL_NAME);\n                    n.addChildToBack(label);\n                }\n                n.setLineno(node.getLineno());\n                n.setCharno(node.getCharno());\n                return n;\n            }\n\n            @Override\n            public Node visitCatchClause(CatchClause node) {\n                Node n = new Node(Token.CATCH, transform(node.getVarName()));\n                if (node.getCatchCondition() != null) {\n                    errorReporter.error(\n                        \"Catch clauses are not supported\",\n                        sourceName,\n                        node.getCatchCondition().getLineno(),\n                        \"\",\n                        0);\n                }\n                n.addChildToBack(transform(node.getBody()));\n                n.setLineno(node.getLineno());\n                n.setCharno(node.getCharno());\n                return n;\n            }\n\n            @Override\n            public Node visitComment(Comment node) {\n                Node n = new Node(Token.EMPTY);\n                n.setString(node.getValue());\n                n.setLineno(node.getLineno());\n                n.setCharno(node.getCharno());\n                return n;\n            }\n\n            @Override\n            public Node visitConditionalExpression(ConditionalExpression node) {\n                Node n = new Node(Token.HOOK);\n                n.addChildToBack(transform(node.getTestExpression()));\n                n.addChildToBack(transform(node.getTrueExpression()));\n                n.addChildToBack(transform(node.getFalseExpression()));\n                n.setLineno(node.getLineno());\n                n.setCharno(node.getCharno());\n                return n;\n            }\n\n            @Override\n            public Node visitContinueStatement(ContinueStatement node) {\n                Node n = new Node(Token.CONTINUE);\n                if (node.getLabel() != null) {\n                    Node label = transform(node.getLabel());\n                    label.setType(Token.LABEL_NAME);\n                    n.addChildToBack(label);\n                }\n                n.setLineno(node.getLineno());\n                n.setCharno(node.getCharno());\n                return n;\n            }\n\n            @Override\n            public Node visitDoLoop(DoLoop node) {\n                Node n = new Node(Token.DO);\n                n.addChildToBack(transform(node.getBody()));\n                n.addChildToBack(transform(node.getCondition()));\n                n.setLineno(node.getLineno());\n                n.setCharno(node.getCharno());\n                return n;\n            }\n\n            @Override\n            public Node visitElementGet(ElementGet node) {\n                Node n = new Node(Token.GETELEM, transform(node.getTarget()));\n                n.addChildToBack(transform(node.getElement()));\n                n.setLineno(node.getLinen",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..8c767f89 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,106 +473,144 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+public class IRFactory {\n+    \n+    private final String sourceName;\n+    private final ErrorReporter errorReporter;\n+    private final RewriteJsx rewriteJsx;\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+    public IRFactory(String sourceName, ErrorReporter errorReporter, RewriteJsx rewriteJsx) {\n+        this.sourceName = sourceName;\n+        this.errorReporter = errorReporter;\n+        this.rewriteJsx = rewriteJsx;\n     }\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n-\n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n-\n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n-\n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n-\n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n-\n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-\n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n+    public Node transform(final AstNode node) {\n+        if (node == null) {\n+            return null;\n+        }\n+        \n+        return node.visit(new NodeVisitor<Node>() {\n+            @Override\n+            public Node visit(AstNode node) {\n+                throw new UnsupportedOperationException(node.getClass().getCanonicalName());\n+            }\n+\n+            @Override\n+            public Node visitArrayComprehension(ArrayComprehension node) {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            @Override\n+            public Node visitArrayComprehensionLoop(ArrayComprehensionLoop node) {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            @Override\n+            public Node visitArrayLiteral(ArrayLiteral node) {\n+                Node n = new Node(Token.ARRAYLIT, node.getLineno(), node.getCharno());\n+                for (AstNode element : node.getElements()) {\n+                    n.addChildToBack(transform(element));\n+                }\n+                if (node.isDestructuring()) {\n+                    n.putIntProp(Node.DESTRUCTURING_ARRAY_LENGTH_PROP, node.getDestructuringLength());\n+                }\n+                return n;\n+            }\n+\n+            @Override\n+            public Node visitAstRoot(AstRoot node) {\n+                return new Node(Token.SCRIPT, transform(node));\n+            }\n+\n+            @Override\n+            public Node visitBlock(Block node) {\n+                Node n = new Node(Token.BLOCK, node.getLineno(), node.getCharno());\n+                for (Node child : node) {\n+                    n.addChildToBack(transform(child));\n+                }\n+                n.setIsScopeBlock(node.isScope());\n+                return n;\n+            }\n+\n+            @Override\n+            public Node visitBreakStatement(BreakStatement node) {\n+                Node n = new Node(Token.BREAK);\n+                if (node.getBreakLabel() != null) {\n+                    Node label = transform(node.getBreakLabel());\n+                    label.setType(Token.LABEL_NAME);\n+                    n.addChildToBack(label);\n+                }\n+                n.setLineno(node.getLineno());\n+                n.setCharno(node.getCharno());\n+                return n;\n+            }\n+\n+            @Override\n+            public Node visitCatchClause(CatchClause node) {\n+                Node n = new Node(Token.CATCH, transform(node.getVarName()));\n+                if (node.getCatchCondition() != null) {\n+                    errorReporter.error(\n+                        \"Catch clauses are not supported\",\n+                        sourceName,\n+                        node.getCatchCondition().getLineno(),\n+                        \"\",\n+                        0);\n+                }\n+                n.addChildToBack(transform(node.getBody()));\n+                n.setLineno(node.getLineno());\n+                n.setCharno(node.getCharno());\n+                return n;\n+            }\n+\n+            @Override\n+            public Node visitComment(Comment node) {\n+                Node n = new Node(Token.EMPTY);\n+                n.setString(node.getValue());\n+                n.setLineno(node.getLineno());\n+                n.setCharno(node.getCharno());\n+                return n;\n+            }\n+\n+            @Override\n+            public Node visitConditionalExpression(ConditionalExpression node) {\n+                Node n = new Node(Token.HOOK);\n+                n.addChildToBack(transform(node.getTestExpression()));\n+                n.addChildToBack(transform(node.getTrueExpression()));\n+                n.addChildToBack(transform(node.getFalseExpression()));\n+                n.setLineno(node.getLineno());\n+                n.setCharno(node.getCharno());\n+                return n;\n+            }\n+\n+            @Override\n+            public Node visitContinueStatement(ContinueStatement node) {\n+                Node n = new Node(Token.CONTINUE);\n+                if (node.getLabel() != null) {\n+                    Node label = transform(node.getLabel());\n+                    label.setType(Token.LABEL_NAME);\n+                    n.addChildToBack(label);\n+                }\n+                n.setLineno(node.getLineno());\n+                n.setCharno(node.getCharno());\n+                return n;\n+            }\n+\n+            @Override\n+            public Node visitDoLoop(DoLoop node) {\n+                Node n = new Node(Token.DO);\n+                n.addChildToBack(transform(node.getBody()));\n+                n.addChildToBack(transform(node.getCondition()));\n+                n.setLineno(node.getLineno());\n+                n.setCharno(node.getCharno());\n+                return n;\n+            }\n+\n+            @Override\n+            public Node visitElementGet(ElementGet node) {\n+                Node n = new Node(Token.GETELEM, transform(node.getTarget()));\n+                n.addChildToBack(transform(node.getElement()));\n+                n.setLineno(node.getLinen\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}