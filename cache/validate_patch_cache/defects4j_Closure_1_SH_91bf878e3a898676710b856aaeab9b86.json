{
    "patch": "    // Count the number of references per argument.\n    Map<String, Integer> refCount = countReferences(fnScope, argList, referenced);\n\n    // Count the total number of references passed in.\n    int totalRefCount = referenced.size();\n\n    // Remove any not referenced (and not used in a rest parameter).\n    Iterator<Node> iter = argList.children().iterator();\n    while (iter.hasNext()) {\n      Node arg = iter.next();\n      int count = refCount.getOrDefault(arg.getString(), 0);\n      if (count == 0 && !arg.isRest() && iter.hasNext()) {\n        // If there is only one argument left after this,\n        // and it is a rest parameter, then don't remove\n        // this arg. Removing it would cause a syntax error.\n        iter.remove();\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..727e390a 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,23 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Count the number of references per argument.\n+    Map<String, Integer> refCount = countReferences(fnScope, argList, referenced);\n+\n+    // Count the total number of references passed in.\n+    int totalRefCount = referenced.size();\n+\n+    // Remove any not referenced (and not used in a rest parameter).\n+    Iterator<Node> iter = argList.children().iterator();\n+    while (iter.hasNext()) {\n+      Node arg = iter.next();\n+      int count = refCount.getOrDefault(arg.getString(), 0);\n+      if (count == 0 && !arg.isRest() && iter.hasNext()) {\n+        // If there is only one argument left after this,\n+        // and it is a rest parameter, then don't remove\n+        // this arg. Removing it would cause a syntax error.\n+        iter.remove();\n+        compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}