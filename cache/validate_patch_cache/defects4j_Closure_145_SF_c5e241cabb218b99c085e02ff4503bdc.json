{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node n) {\n    if (n.getType() == Token.LABEL) {\n        // Get the labeled statement\n        Node labeledStatement = n.getLastChild();\n        if (labeledStatement.getType() == Token.EMPTY) {\n            labeledStatement = labeledStatement.getPrevious();\n        }\n\n        // Recurse on the labeled statement\n        return isOneExactlyFunctionOrDo(labeledStatement);\n    } else if (n.getType() == Token.BLOCK) {\n        // Check if there's exactly one non-empty child node\n        int childCount = n.getChildCount();\n        boolean foundNonEmptyChild = false;\n        \n        for (int i = 0; i < childCount; i++) {\n            Node child = n.getChildAtIndex(i);\n            if (child.getType() != Token.EMPTY) {\n                if (!foundNonEmptyChild && isOneExactlyFunctionOrDo(child)) {\n                    foundNonEmptyChild = true;\n                } else {\n                    return false;\n                }\n            }\n        }\n        \n        return foundNonEmptyChild;\n    } else {\n        // Check if node is a FUNCTION or DO\n        return n.getType() == Token.FUNCTION || n.getType() == Token.DO;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..a85f558d 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,38 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n-  }\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+    if (n.getType() == Token.LABEL) {\n+        // Get the labeled statement\n+        Node labeledStatement = n.getLastChild();\n+        if (labeledStatement.getType() == Token.EMPTY) {\n+            labeledStatement = labeledStatement.getPrevious();\n+        }\n+\n+        // Recurse on the labeled statement\n+        return isOneExactlyFunctionOrDo(labeledStatement);\n+    } else if (n.getType() == Token.BLOCK) {\n+        // Check if there's exactly one non-empty child node\n+        int childCount = n.getChildCount();\n+        boolean foundNonEmptyChild = false;\n+        \n+        for (int i = 0; i < childCount; i++) {\n+            Node child = n.getChildAtIndex(i);\n+            if (child.getType() != Token.EMPTY) {\n+                if (!foundNonEmptyChild && isOneExactlyFunctionOrDo(child)) {\n+                    foundNonEmptyChild = true;\n+                } else {\n+                    return false;\n+                }\n+            }\n+        }\n+        \n+        return foundNonEmptyChild;\n+    } else {\n+        // Check if node is a FUNCTION or DO\n+        return n.getType() == Token.FUNCTION || n.getType() == Token.DO;\n+    }\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}