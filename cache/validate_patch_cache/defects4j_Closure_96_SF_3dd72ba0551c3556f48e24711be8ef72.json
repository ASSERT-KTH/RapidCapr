{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n                                   FunctionType functionType) {\n      // get the number of arguments in the function call\n      int numArgs = call.getChildCount() - 1;\n\n      // check whether the number of arguments is within the function signature bounds\n      if (numArgs < functionType.getMinArguments() ||\n          (functionType.getMaxArguments() != -1 && numArgs > functionType.getMaxArguments())) {\n        String functionName = validator.getReadableJSTypeName(call.getFirstChild(), false);\n\n        // get the expected number of arguments string\n        String expectedNumArgs = getExpectedNumArgsString(functionType);\n\n        // report the error\n        report(t, call, WRONG_ARGUMENT_COUNT, functionName, String.valueOf(numArgs), expectedNumArgs);\n        return; // stop the validation\n      }\n\n      // If we made it here, the number of arguments is correct,\n      // so we can check the types of the arguments\n      Iterator<Node> arguments = call.children().iterator();\n      arguments.next(); // skip the function name\n\n      Iterator<Node> parameters = functionType.getParameters().iterator();\n      int ordinal = 0;\n      while (arguments.hasNext() && parameters.hasNext()) {\n        Node argument = arguments.next();\n        Node parameter = parameters.next();\n        ordinal++;\n\n        // Check the type of each argument against the corresponding parameter type\n        validator.expectArgumentMatchesParameter(t, argument,\n                                                  getJSType(argument), getJSType(parameter), call, ordinal);\n      }\n\n      // if the function allows varargs, which is indicated by the last parameter being a Rest Parameter,\n      // then any additional arguments are allowed\n      if (parameters.hasNext() && parameters.next().isRest()) {\n        while (arguments.hasNext()) {\n          Node argument = arguments.next();\n          ordinal++;\n          validator.expectArgumentMatchesParameter(t, argument,\n                                                    getJSType(argument), null, call, ordinal);\n        }\n      }\n    }\n\n    private String getExpectedNumArgsString(FunctionType functionType) {\n      String expectedNumArgs;\n\n      int minArgs = functionType.getMinArguments();\n      int maxArgs = functionType.getMaxArguments();\n\n      if (maxArgs == -1) {\n        expectedNumArgs = \"at least \" + minArgs + \" argument(s)\";\n      } else if (minArgs == maxArgs) {\n        expectedNumArgs = minArgs + \" argument(s)\";\n      } else {\n        expectedNumArgs = minArgs + \" - \" + maxArgs + \" argument(s)\";\n      }\n\n      if (functionType.isVarArgs()) {\n        expectedNumArgs += \" and any number of extra arguments\";\n      }\n\n      return expectedNumArgs;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..b6a018dc 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,73 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+private void visitParameterList(NodeTraversal t, Node call,\n+                                   FunctionType functionType) {\n+      // get the number of arguments in the function call\n+      int numArgs = call.getChildCount() - 1;\n+\n+      // check whether the number of arguments is within the function signature bounds\n+      if (numArgs < functionType.getMinArguments() ||\n+          (functionType.getMaxArguments() != -1 && numArgs > functionType.getMaxArguments())) {\n+        String functionName = validator.getReadableJSTypeName(call.getFirstChild(), false);\n+\n+        // get the expected number of arguments string\n+        String expectedNumArgs = getExpectedNumArgsString(functionType);\n+\n+        // report the error\n+        report(t, call, WRONG_ARGUMENT_COUNT, functionName, String.valueOf(numArgs), expectedNumArgs);\n+        return; // stop the validation\n+      }\n+\n+      // If we made it here, the number of arguments is correct,\n+      // so we can check the types of the arguments\n+      Iterator<Node> arguments = call.children().iterator();\n+      arguments.next(); // skip the function name\n+\n+      Iterator<Node> parameters = functionType.getParameters().iterator();\n+      int ordinal = 0;\n+      while (arguments.hasNext() && parameters.hasNext()) {\n+        Node argument = arguments.next();\n+        Node parameter = parameters.next();\n+        ordinal++;\n+\n+        // Check the type of each argument against the corresponding parameter type\n+        validator.expectArgumentMatchesParameter(t, argument,\n+                                                  getJSType(argument), getJSType(parameter), call, ordinal);\n+      }\n+\n+      // if the function allows varargs, which is indicated by the last parameter being a Rest Parameter,\n+      // then any additional arguments are allowed\n+      if (parameters.hasNext() && parameters.next().isRest()) {\n+        while (arguments.hasNext()) {\n+          Node argument = arguments.next();\n+          ordinal++;\n+          validator.expectArgumentMatchesParameter(t, argument,\n+                                                    getJSType(argument), null, call, ordinal);\n+        }\n+      }\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    private String getExpectedNumArgsString(FunctionType functionType) {\n+      String expectedNumArgs;\n+\n+      int minArgs = functionType.getMinArguments();\n+      int maxArgs = functionType.getMaxArguments();\n+\n+      if (maxArgs == -1) {\n+        expectedNumArgs = \"at least \" + minArgs + \" argument(s)\";\n+      } else if (minArgs == maxArgs) {\n+        expectedNumArgs = minArgs + \" argument(s)\";\n+      } else {\n+        expectedNumArgs = minArgs + \" - \" + maxArgs + \" argument(s)\";\n+      }\n+\n+      if (functionType.isVarArgs()) {\n+        expectedNumArgs += \" and any number of extra arguments\";\n+      }\n+\n+      return expectedNumArgs;\n     }\n-  }\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}