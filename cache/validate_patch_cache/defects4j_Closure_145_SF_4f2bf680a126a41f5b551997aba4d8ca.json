{
    "patch": "  private boolean isOneExactlyFunctionOrDo(Node n) {\n    if (n.hasChildren() && n.getFirstChild().isBlock()) {\n      Node block = n.getFirstChild();\n      if (block.hasChildren() && block.getLastChild().isContextIndependent()) {\n        int nonEmptyChildCount = 0;\n        for (Node c = block.getFirstChild(); c != null; c = c.getNext()) {\n          if (!c.isEmpty()) {\n            nonEmptyChildCount++;\n            if (nonEmptyChildCount > 1) {\n              return false;\n            }\n          }\n        }\n        return nonEmptyChildCount == 1 && (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..867af6af 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -706,12 +706,22 @@ class CodeGenerator {\n    * labels).\n    */\n   private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n+    if (n.hasChildren() && n.getFirstChild().isBlock()) {\n+      Node block = n.getFirstChild();\n+      if (block.hasChildren() && block.getLastChild().isContextIndependent()) {\n+        int nonEmptyChildCount = 0;\n+        for (Node c = block.getFirstChild(); c != null; c = c.getNext()) {\n+          if (!c.isEmpty()) {\n+            nonEmptyChildCount++;\n+            if (nonEmptyChildCount > 1) {\n+              return false;\n+            }\n+          }\n+        }\n+        return nonEmptyChildCount == 1 && (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n+      }\n+    }\n+    return false;\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}