{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    final double EPSILON = 1e-15;\n    final int MAX_ITERATIONS = 100000;\n\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0 || x < 0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    if (x >= a + 1.0) {\n        // use regularizedGammaQ\n        return 1.0 - regularizedGammaQ(a, x);\n    }\n\n    double term = 1 / a;\n    double sum = term;\n\n    for (int n = 1; n < MAX_ITERATIONS; n++) {\n        term *= x / (a + n);\n        sum += term;\n\n        if (Math.abs(term) < EPSILON * Math.abs(sum)) {\n            return Math.exp(-x + a * Math.log(x) - LogGamma.logGamma(a)) * sum;\n        }\n    }\n\n    throw new ArithmeticException(\"Maximum number of iterations exceeded.\");\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    final double EPSILON = 1e-15;\n    final int MAX_ITERATIONS = 100000;\n\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0 || x < 0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 1.0;\n    }\n\n    if (x < a + 1.0) {\n        // use regularizedGammaP\n        return 1.0 - regularizedGammaP(a, x);\n    }\n\n    double c = 1.0 / regularizedGammaPSeries(a, x);\n    double d = 1.0 / (1.0 + a / x);\n\n    double term = c * d;\n    double sum = term;\n\n    for (int n = 1; n < MAX_ITERATIONS; n++) {\n        term *= ((a + n - 1.0) / n) * (x / (a + n));\n        sum += term;\n\n        if (Math.abs(term) < EPSILON * Math.abs(sum)) {\n            return 1.0 - Math.exp(-x + a * Math.log(x) - LogGamma.logGamma(a)) * sum;\n        }\n    }\n\n    throw new ArithmeticException(\"Maximum number of iterations exceeded.\");\n}\n\nprivate static double regularizedGammaPSeries(double a, double x) {\n    final double EPSILON = 1e-15;\n    final int MAX_ITERATIONS = 100000;\n\n    double term = 1 / a;\n    double sum = term;\n\n    for (int n = 1; n < MAX_ITERATIONS; n++) {\n        term *= x / (a + n);\n        sum += term;\n\n        if (Math.abs(term) < EPSILON * Math.abs(sum)) {\n            return sum * Math.exp(-x + a * Math.log(x) - LogGamma.logGamma(a));\n        }\n    }\n\n    throw new ArithmeticException(\"Maximum number of iterations exceeded.\");\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..4931c4673 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,91 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    final double EPSILON = 1e-15;\n+    final int MAX_ITERATIONS = 100000;\n+\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0 || x < 0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    if (x >= a + 1.0) {\n+        // use regularizedGammaQ\n+        return 1.0 - regularizedGammaQ(a, x);\n+    }\n+\n+    double term = 1 / a;\n+    double sum = term;\n+\n+    for (int n = 1; n < MAX_ITERATIONS; n++) {\n+        term *= x / (a + n);\n+        sum += term;\n+\n+        if (Math.abs(term) < EPSILON * Math.abs(sum)) {\n+            return Math.exp(-x + a * Math.log(x) - LogGamma.logGamma(a)) * sum;\n+        }\n+    }\n+\n+    throw new ArithmeticException(\"Maximum number of iterations exceeded.\");\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    final double EPSILON = 1e-15;\n+    final int MAX_ITERATIONS = 100000;\n+\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0 || x < 0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+\n+    if (x < a + 1.0) {\n+        // use regularizedGammaP\n+        return 1.0 - regularizedGammaP(a, x);\n+    }\n+\n+    double c = 1.0 / regularizedGammaPSeries(a, x);\n+    double d = 1.0 / (1.0 + a / x);\n+\n+    double term = c * d;\n+    double sum = term;\n+\n+    for (int n = 1; n < MAX_ITERATIONS; n++) {\n+        term *= ((a + n - 1.0) / n) * (x / (a + n));\n+        sum += term;\n+\n+        if (Math.abs(term) < EPSILON * Math.abs(sum)) {\n+            return 1.0 - Math.exp(-x + a * Math.log(x) - LogGamma.logGamma(a)) * sum;\n+        }\n+    }\n+\n+    throw new ArithmeticException(\"Maximum number of iterations exceeded.\");\n+}\n+\n+private static double regularizedGammaPSeries(double a, double x) {\n+    final double EPSILON = 1e-15;\n+    final int MAX_ITERATIONS = 100000;\n+\n+    double term = 1 / a;\n+    double sum = term;\n+\n+    for (int n = 1; n < MAX_ITERATIONS; n++) {\n+        term *= x / (a + n);\n+        sum += term;\n+\n+        if (Math.abs(term) < EPSILON * Math.abs(sum)) {\n+            return sum * Math.exp(-x + a * Math.log(x) - LogGamma.logGamma(a));\n+        }\n+    }\n+\n+    throw new ArithmeticException(\"Maximum number of iterations exceeded.\");\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}