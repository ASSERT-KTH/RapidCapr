{
    "patch": "      Node grandparent = parent.getParent();\n      if (grandparent != null &&\n          (grandparent.getType() == Token.EXPR_RESULT ||\n          (grandparent.getType() == Token.VAR &&\n          grandparent.getParent() != null &&\n          grandparent.getParent().getType() == Token.SCRIPT))) {\n        return false;\n      }\n\n      grandparent = n.getParent();\n      if (grandparent.getType() == Token.CALL &&\n          (n.isGetProp() && (n.getLastChild().getString().equals(\"bind\") ||\n                   n.getLastChild().getString().equals(\"apply\") ||\n                   n.getLastChild().getString().equals(\"call\")) || // For `fn.bind(this)`\n           n.isName() && (n.getString().equals(\"bind\") ||\n                   n.getString().equals(\"apply\") ||\n                   n.getString().equals(\"call\")))) { // For `bind(fn, this)`.\n        return false;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..ccad8282 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,25 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node grandparent = parent.getParent();\n+      if (grandparent != null &&\n+          (grandparent.getType() == Token.EXPR_RESULT ||\n+          (grandparent.getType() == Token.VAR &&\n+          grandparent.getParent() != null &&\n+          grandparent.getParent().getType() == Token.SCRIPT))) {\n+        return false;\n+      }\n+\n+      grandparent = n.getParent();\n+      if (grandparent.getType() == Token.CALL &&\n+          (n.isGetProp() && (n.getLastChild().getString().equals(\"bind\") ||\n+                   n.getLastChild().getString().equals(\"apply\") ||\n+                   n.getLastChild().getString().equals(\"call\")) || // For `fn.bind(this)`\n+           n.isName() && (n.getString().equals(\"bind\") ||\n+                   n.getString().equals(\"apply\") ||\n+                   n.getString().equals(\"call\")))) { // For `bind(fn, this)`.\n+        return false;\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}