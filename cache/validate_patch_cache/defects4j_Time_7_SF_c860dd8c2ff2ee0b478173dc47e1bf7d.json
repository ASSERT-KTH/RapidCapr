{
    "patch": "  \n        Chronology chrono = instant.getChronology();\n        long instantMillis = instant.getMillis();\n        long offsetMillis = chrono.getZone().getOffset(instantMillis);\n        Chronology selectedChrono = selectChronology(chrono, text);\n        if (selectedChrono == null) {\n            throw new IllegalArgumentException(\"No valid ISO8601 format found.\");\n        }\n        long instantLocal = instantMillis + offsetMillis;\n        int defaultYear = selectedChrono.year().get(instantLocal);\n        if (defaultYear <= 0) {\n            defaultYear = 2000;\n        }\n  \n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n                instantLocal, selectedChrono, iLocale, iPivotYear, defaultYear);\n        bucket.setOffset(offsetMillis);\n        int newPos = parser.parseInto(bucket, text, position);\n        instant.setMillis(bucket.computeMillis());\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            selectedChrono = selectedChrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            selectedChrono = selectedChrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(selectedChrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }\n  \n    private Chronology selectChronology(Chronology chrono, String text) {\n        DateTimeParser parser = DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss\").getParser();\n        DateTimeParserBucket bucket = new DateTimeParserBucket(0L, chrono, iLocale, iPivotYear);\n        int p = parser.parseInto(bucket, text, 0);\n        if (p < 0) {\n            return null;\n        }\n        if (bucket.getOffsetInteger() != null) {\n            final int offset = bucket.getOffsetInteger();\n            if (offset < -8 || offset > 8) {\n                 return null;\n            }\n        }\n        DateTimeZone newZone = bucket.getZone();\n        Chronology selectedChrono = chrono;\n        if (newZone != null) {\n            selectedChrono = chrono.withZone(newZone);\n        }\n        return selectedChrono;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..da5f9ef1 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,58 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n+  \n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n+        long instantMillis = instant.getMillis();\n+        long offsetMillis = chrono.getZone().getOffset(instantMillis);\n+        Chronology selectedChrono = selectChronology(chrono, text);\n+        if (selectedChrono == null) {\n+            throw new IllegalArgumentException(\"No valid ISO8601 format found.\");\n+        }\n+        long instantLocal = instantMillis + offsetMillis;\n+        int defaultYear = selectedChrono.year().get(instantLocal);\n+        if (defaultYear <= 0) {\n+            defaultYear = 2000;\n+        }\n+  \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+                instantLocal, selectedChrono, iLocale, iPivotYear, defaultYear);\n+        bucket.setOffset(offsetMillis);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n+        instant.setMillis(bucket.computeMillis());\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();\n             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+            selectedChrono = selectedChrono.withZone(parsedZone);\n         } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+            selectedChrono = selectedChrono.withZone(bucket.getZone());\n         }\n-        instant.setChronology(chrono);\n+        instant.setChronology(selectedChrono);\n         if (iZone != null) {\n             instant.setZone(iZone);\n         }\n         return newPos;\n     }\n+  \n+    private Chronology selectChronology(Chronology chrono, String text) {\n+        DateTimeParser parser = DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss\").getParser();\n+        DateTimeParserBucket bucket = new DateTimeParserBucket(0L, chrono, iLocale, iPivotYear);\n+        int p = parser.parseInto(bucket, text, 0);\n+        if (p < 0) {\n+            return null;\n+        }\n+        if (bucket.getOffsetInteger() != null) {\n+            final int offset = bucket.getOffsetInteger();\n+            if (offset < -8 || offset > 8) {\n+                 return null;\n+            }\n+        }\n+        DateTimeZone newZone = bucket.getZone();\n+        Chronology selectedChrono = chrono;\n+        if (newZone != null) {\n+            selectedChrono = chrono.withZone(newZone);\n+        }\n+        return selectedChrono;\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}