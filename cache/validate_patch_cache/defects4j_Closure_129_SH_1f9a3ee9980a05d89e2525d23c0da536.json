{
    "patch": "  private void annotateCalls(Node n) {\n    Preconditions.checkState(n.isCall());\n\n    // Keep track of the \"this\" context of a call.\n    Node child = n.getFirstChild();\n    Node parent = n.getParent();\n\n    if (child.isDestructuringPattern()) {\n      child = child.getLastChild();\n    }\n\n    // Ignore cast nodes.\n    if (!NodeUtil.isGet(child)) {\n      // Free function call.\n      n.putBooleanProp(Node.FREE_CALL, true);\n    } else {\n      // Keep track of the context in which \"eval\" is called.\n      if (isDirectEvalCall(child)) {\n        NodeUtil.getEnclosingFunction(n).putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n\n      // Property call.\n      Node target = child.getFirstChild();\n      if (target.isThis()) {\n        // \"this.\" property call.\n        if (isInGlobalScope(parent)) {\n          // Global declaration.\n          declarePropertiesOnGlobalScope(child.getLastChild());\n        } else {\n          // Object properties.\n          declarePropertiesOnObject(child.getLastChild());\n        }\n      } else {\n        // Free object call.\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..c65d8bcf 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,44 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+  private void annotateCalls(Node n) {\n+    Preconditions.checkState(n.isCall());\n+\n+    // Keep track of the \"this\" context of a call.\n+    Node child = n.getFirstChild();\n+    Node parent = n.getParent();\n+\n+    if (child.isDestructuringPattern()) {\n+      child = child.getLastChild();\n+    }\n+\n+    // Ignore cast nodes.\n+    if (!NodeUtil.isGet(child)) {\n+      // Free function call.\n+      n.putBooleanProp(Node.FREE_CALL, true);\n+    } else {\n+      // Keep track of the context in which \"eval\" is called.\n+      if (isDirectEvalCall(child)) {\n+        NodeUtil.getEnclosingFunction(n).putBooleanProp(Node.DIRECT_EVAL, true);\n+      }\n+\n+      // Property call.\n+      Node target = child.getFirstChild();\n+      if (target.isThis()) {\n+        // \"this.\" property call.\n+        if (isInGlobalScope(parent)) {\n+          // Global declaration.\n+          declarePropertiesOnGlobalScope(child.getLastChild());\n+        } else {\n+          // Object properties.\n+          declarePropertiesOnObject(child.getLastChild());\n+        }\n+      } else {\n+        // Free object call.\n+        n.putBooleanProp(Node.FREE_CALL, true);\n+      }\n+    }\n+  }\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}