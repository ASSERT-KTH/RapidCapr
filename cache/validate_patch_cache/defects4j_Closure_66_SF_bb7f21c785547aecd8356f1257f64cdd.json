{
    "patch": "public static double getTypedPercent(String json) {\n    Gson gson = new Gson();\n    TypeToken<ArrayList<UsageStatsData>> token = new TypeToken<ArrayList<UsageStatsData>>() {};\n    ArrayList<UsageStatsData> usageStatsDataArrayList = gson.fromJson(json, token.getType());\n    if (usageStatsDataArrayList.isEmpty()) {\n        return 0.0;\n    }\n    double typedCount = 0.0;\n    double totalCount = 0.0;\n    for (UsageStatsData usageStatsData : usageStatsDataArrayList) {\n        typedCount += usageStatsData.typedCount;\n        totalCount += usageStatsData.totalCount;\n    }\n    return (typedCount / totalCount) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..d7d73822 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    Gson gson = new Gson();\n+    TypeToken<ArrayList<UsageStatsData>> token = new TypeToken<ArrayList<UsageStatsData>>() {};\n+    ArrayList<UsageStatsData> usageStatsDataArrayList = gson.fromJson(json, token.getType());\n+    if (usageStatsDataArrayList.isEmpty()) {\n+        return 0.0;\n+    }\n+    double typedCount = 0.0;\n+    double totalCount = 0.0;\n+    for (UsageStatsData usageStatsData : usageStatsDataArrayList) {\n+        typedCount += usageStatsData.typedCount;\n+        totalCount += usageStatsData.totalCount;\n+    }\n+    return (typedCount / totalCount) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}