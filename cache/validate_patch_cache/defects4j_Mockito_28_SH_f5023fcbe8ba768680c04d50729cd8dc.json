{
    "patch": "Field bestMatchingField = null;\nObject bestMatchingCandidate = null;\nfor (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n    Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n    if (candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n        if (bestMatchingField == null) {\n            bestMatchingField = field;\n            bestMatchingCandidate = candidate;\n        } else if (isBetterMatchingField(field, bestMatchingField)) {\n            bestMatchingField = field;\n            bestMatchingCandidate = candidate;\n        }\n    }\n}\nif (bestMatchingField != null) {\n    bestMatchingField.setAccessible(true);\n    try {\n        bestMatchingField.set(fieldInstance, bestMatchingCandidate);\n    } catch (IllegalAccessException e) {\n        e.printStackTrace();\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..1d35d7b8d 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,31 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Field bestMatchingField = null;\n+Object bestMatchingCandidate = null;\n+for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+    Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+    if (candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n+        if (bestMatchingField == null) {\n+            bestMatchingField = field;\n+            bestMatchingCandidate = candidate;\n+        } else if (isBetterMatchingField(field, bestMatchingField)) {\n+            bestMatchingField = field;\n+            bestMatchingCandidate = candidate;\n+        }\n+    }\n+}\n+if (bestMatchingField != null) {\n+    bestMatchingField.setAccessible(true);\n+    try {\n+        bestMatchingField.set(fieldInstance, bestMatchingCandidate);\n+    } catch (IllegalAccessException e) {\n+        e.printStackTrace();\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "error: variable field is already defined in method injectMockCandidate(Class<?>,Set<Object>,Object)",
    "test_result": "ERROR"
}