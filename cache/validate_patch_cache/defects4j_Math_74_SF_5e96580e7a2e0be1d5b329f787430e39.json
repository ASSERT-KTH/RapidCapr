{
    "patch": "public double integrate(final FirstOrderDifferentialEquations equations,\n                        final double t0, final double[] y0,\n                        final double t, final double[] y)\nthrows DerivativeException, IntegratorException {\n\n  // Create some internal working arrays\n  final int stages = c.length + 1;\n  final double[][] yDotK = new double[stages][y0.length];\n  final double[] yTmp = new double[y0.length];\n\n  // Step handler to check for events\n  EventHandler handler = null;\n  if (!eventsHandlers.isEmpty()) {\n    handler = (event, t1, y1, forwards) -> {\n      if (event > 0.0) {\n        throw new StopConditionException();\n      }\n    };\n  }\n\n  // Set up integration control objects\n  double h = (t > t0) ? Math.abs(hMax) : -Math.abs(hMax);\n  double tCurr = t0;\n  double[] yCurr = Arrays.copyOf(y0, y0.length);\n\n  // Main integration loop\n  while (true) {\n\n    // Check for step size overshoot\n    h = ((tCurr + h) > t) ? (t - tCurr) : h;\n\n    // Compute next step\n    for (int i = 0; i < stages; i++) {\n      if (i == 0) {\n        equations.computeDerivatives(tCurr, yCurr, yDotK[0]);\n      } else {\n        double subStep = c[i - 1] * h;\n        for (int j = 0; j < yCurr.length; j++) {\n          yTmp[j] = yCurr[j];\n          for (int k = 0; k < i - 1; k++) {\n            yTmp[j] += a[i - 1][k] * h * yDotK[k][j];\n          }\n        }\n        equations.computeDerivatives(tCurr + subStep, yTmp, yDotK[i]);\n      }\n    }\n\n    // Check for events\n    if (handler != null) {\n      double event = eventsHandlers.evaluateEvent(tCurr, yCurr, yDotK[0], handler);\n      if (event >= 0) {\n        double[] y1 = Arrays.copyOf(yCurr, yCurr.length);\n        interpolator.storeTime(tCurr).storeState(yCurr).setInterpolatedTime(tCurr);\n        eventsHandlers.handleEvent(event, tCurr, y1, yDotK[0], interpolator::setCurrentTime);\n        System.arraycopy(y1, 0, yCurr, 0, y1.length);\n        return tCurr;\n      }\n    }\n\n    // Compute step output\n    for (int i = 0; i < yCurr.length; i++) {\n      double sum = b[0] * yDotK[0][i];\n      for (int j = 1; j < stages; j++) {\n        sum += b[j] * yDotK[j][i];\n      }\n      yTmp[i] = yCurr[i] + h * sum;\n    }\n\n    // Store results\n    interpolator.storeTime(tCurr).storeState(yCurr);\n    System.arraycopy(yTmp, 0, yCurr, 0, y0.length);\n    interpolator.setInterpolatedTime(tCurr + h);\n\n    if (Math.abs(t - tCurr) <= 1.0e-12 * Math.abs(t)) {\n      return t;\n    }\n\n    // Prepare for next step\n    tCurr += h;\n\n    // Compute optimal step size\n    double error = 0.0;\n    for (int i = 0; i < yCurr.length; i++) {\n      double scale = Math.max(Math.abs(yCurr[i]), Math.abs(yTmp[i]));\n      error += Math.pow((yTmp[i] - yCurr[i]) / scale, 2.0);\n    }\n    error = Math.sqrt(error / yCurr.length);\n    double hNew = 0.9 * h * Math.pow(safety * error, -0.25);\n    hNew = (h > 0) ? Math.min(hNew, hMax) : Math.max(hNew, -hMax);\n\n    // Stop if step size becomes too small\n    if (Math.abs(hNew) <= 1.0e-12 * Math.abs(tCurr)) {\n      throw new IntegrationException(\"Step size became too small\");\n    }\n\n    // Stop if integration has reached endpoint, or if step changes sign\n    if ((tCurr >= t) || (Math.abs(hNew) < hMin)) {\n      return tCurr;\n    }\n\n    // Update step size\n    h = hNew;\n\n  }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 6f3e88358..7eeff958d 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -189,175 +189,113 @@ public abstract class EmbeddedRungeKuttaIntegrator\n \n   /** {@inheritDoc} */\n   @Override\n-  public double integrate(final FirstOrderDifferentialEquations equations,\n-                          final double t0, final double[] y0,\n-                          final double t, final double[] y)\n-  throws DerivativeException, IntegratorException {\n-\n-    sanityChecks(equations, t0, y0, t, y);\n-    setEquations(equations);\n-    resetEvaluations();\n-    final boolean forward = t > t0;\n-\n-    // create some internal working arrays\n-    final int stages = c.length + 1;\n-    if (y != y0) {\n-      System.arraycopy(y0, 0, y, 0, y0.length);\n-    }\n-    final double[][] yDotK = new double[stages][y0.length];\n-    final double[] yTmp = new double[y0.length];\n-\n-    // set up an interpolator sharing the integrator arrays\n-    AbstractStepInterpolator interpolator;\n-    if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {\n-      final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n-      rki.reinitialize(this, yTmp, yDotK, forward);\n-      interpolator = rki;\n-    } else {\n-      interpolator = new DummyStepInterpolator(yTmp, forward);\n-    }\n-    interpolator.storeTime(t0);\n-\n-    // set up integration control objects\n-    stepStart         = t0;\n-    double  hNew      = 0;\n-    boolean firstTime = true;\n-    for (StepHandler handler : stepHandlers) {\n-        handler.reset();\n-    }\n-    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n-    boolean lastStep = false;\n-\n-    // main integration loop\n-    while (!lastStep) {\n-\n-      interpolator.shift();\n-\n-      double error = 0;\n-      for (boolean loop = true; loop;) {\n-\n-        if (firstTime || !fsal) {\n-          // first stage\n-          computeDerivatives(stepStart, y, yDotK[0]);\n-        }\n-\n-        if (firstTime) {\n-          final double[] scale;\n-          if (vecAbsoluteTolerance == null) {\n-              scale = new double[y0.length];\n-              java.util.Arrays.fill(scale, scalAbsoluteTolerance);\n-            } else {\n-              scale = vecAbsoluteTolerance;\n-            }\n-          hNew = initializeStep(equations, forward, getOrder(), scale,\n-                                stepStart, y, yDotK[0], yTmp, yDotK[1]);\n-          firstTime = false;\n-        }\n-\n-        stepSize = hNew;\n-\n-        // next stages\n-        for (int k = 1; k < stages; ++k) {\n-\n-          for (int j = 0; j < y0.length; ++j) {\n-            double sum = a[k-1][0] * yDotK[0][j];\n-            for (int l = 1; l < k; ++l) {\n-              sum += a[k-1][l] * yDotK[l][j];\n-            }\n-            yTmp[j] = y[j] + stepSize * sum;\n-          }\n-\n-          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n-\n-        }\n+public double integrate(final FirstOrderDifferentialEquations equations,\n+                        final double t0, final double[] y0,\n+                        final double t, final double[] y)\n+throws DerivativeException, IntegratorException {\n+\n+  // Create some internal working arrays\n+  final int stages = c.length + 1;\n+  final double[][] yDotK = new double[stages][y0.length];\n+  final double[] yTmp = new double[y0.length];\n+\n+  // Step handler to check for events\n+  EventHandler handler = null;\n+  if (!eventsHandlers.isEmpty()) {\n+    handler = (event, t1, y1, forwards) -> {\n+      if (event > 0.0) {\n+        throw new StopConditionException();\n+      }\n+    };\n+  }\n \n-        // estimate the state at the end of the step\n-        for (int j = 0; j < y0.length; ++j) {\n-          double sum    = b[0] * yDotK[0][j];\n-          for (int l = 1; l < stages; ++l) {\n-            sum    += b[l] * yDotK[l][j];\n+  // Set up integration control objects\n+  double h = (t > t0) ? Math.abs(hMax) : -Math.abs(hMax);\n+  double tCurr = t0;\n+  double[] yCurr = Arrays.copyOf(y0, y0.length);\n+\n+  // Main integration loop\n+  while (true) {\n+\n+    // Check for step size overshoot\n+    h = ((tCurr + h) > t) ? (t - tCurr) : h;\n+\n+    // Compute next step\n+    for (int i = 0; i < stages; i++) {\n+      if (i == 0) {\n+        equations.computeDerivatives(tCurr, yCurr, yDotK[0]);\n+      } else {\n+        double subStep = c[i - 1] * h;\n+        for (int j = 0; j < yCurr.length; j++) {\n+          yTmp[j] = yCurr[j];\n+          for (int k = 0; k < i - 1; k++) {\n+            yTmp[j] += a[i - 1][k] * h * yDotK[k][j];\n           }\n-          yTmp[j] = y[j] + stepSize * sum;\n         }\n+        equations.computeDerivatives(tCurr + subStep, yTmp, yDotK[i]);\n+      }\n+    }\n \n-        // estimate the error at the end of the step\n-        error = estimateError(yDotK, y, yTmp, stepSize);\n-        if (error <= 1.0) {\n-\n-          // discrete events handling\n-          interpolator.storeTime(stepStart + stepSize);\n-          if (manager.evaluateStep(interpolator)) {\n-              final double dt = manager.getEventTime() - stepStart;\n-              if (Math.abs(dt) <= Math.ulp(stepStart)) {\n-                  // rejecting the step would lead to a too small next step, we accept it\n-                  loop = false;\n-              } else {\n-                  // reject the step to match exactly the next switch time\n-                  hNew = dt;\n-              }\n-          } else {\n-            // accept the step\n-            loop = false;\n-          }\n-\n-        } else {\n-          // reject the step and attempt to reduce error by stepsize control\n-          final double factor =\n-              Math.min(maxGrowth,\n-                       Math.max(minReduction, safety * Math.pow(error, exp)));\n-          hNew = filterStep(stepSize * factor, forward, false);\n-        }\n+    // Check for events\n+    if (handler != null) {\n+      double event = eventsHandlers.evaluateEvent(tCurr, yCurr, yDotK[0], handler);\n+      if (event >= 0) {\n+        double[] y1 = Arrays.copyOf(yCurr, yCurr.length);\n+        interpolator.storeTime(tCurr).storeState(yCurr).setInterpolatedTime(tCurr);\n+        eventsHandlers.handleEvent(event, tCurr, y1, yDotK[0], interpolator::setCurrentTime);\n+        System.arraycopy(y1, 0, yCurr, 0, y1.length);\n+        return tCurr;\n+      }\n+    }\n \n+    // Compute step output\n+    for (int i = 0; i < yCurr.length; i++) {\n+      double sum = b[0] * yDotK[0][i];\n+      for (int j = 1; j < stages; j++) {\n+        sum += b[j] * yDotK[j][i];\n       }\n+      yTmp[i] = yCurr[i] + h * sum;\n+    }\n \n-      // the step has been accepted\n-      final double nextStep = stepStart + stepSize;\n-      System.arraycopy(yTmp, 0, y, 0, y0.length);\n-      manager.stepAccepted(nextStep, y);\n-      lastStep = manager.stop();\n+    // Store results\n+    interpolator.storeTime(tCurr).storeState(yCurr);\n+    System.arraycopy(yTmp, 0, yCurr, 0, y0.length);\n+    interpolator.setInterpolatedTime(tCurr + h);\n \n-      // provide the step data to the step handler\n-      interpolator.storeTime(nextStep);\n-      for (StepHandler handler : stepHandlers) {\n-          handler.handleStep(interpolator, lastStep);\n-      }\n-      stepStart = nextStep;\n+    if (Math.abs(t - tCurr) <= 1.0e-12 * Math.abs(t)) {\n+      return t;\n+    }\n \n-      if (fsal) {\n-        // save the last evaluation for the next step\n-        System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);\n-      }\n+    // Prepare for next step\n+    tCurr += h;\n \n-      if (manager.reset(stepStart, y) && ! lastStep) {\n-        // some event handler has triggered changes that\n-        // invalidate the derivatives, we need to recompute them\n-        computeDerivatives(stepStart, y, yDotK[0]);\n-      }\n+    // Compute optimal step size\n+    double error = 0.0;\n+    for (int i = 0; i < yCurr.length; i++) {\n+      double scale = Math.max(Math.abs(yCurr[i]), Math.abs(yTmp[i]));\n+      error += Math.pow((yTmp[i] - yCurr[i]) / scale, 2.0);\n+    }\n+    error = Math.sqrt(error / yCurr.length);\n+    double hNew = 0.9 * h * Math.pow(safety * error, -0.25);\n+    hNew = (h > 0) ? Math.min(hNew, hMax) : Math.max(hNew, -hMax);\n \n-      if (! lastStep) {\n-        // in some rare cases we may get here with stepSize = 0, for example\n-        // when an event occurs at integration start, reducing the first step\n-        // to zero; we have to reset the step to some safe non zero value\n-          stepSize = filterStep(stepSize, forward, true);\n-\n-        // stepsize control for next step\n-        final double factor = Math.min(maxGrowth,\n-                                       Math.max(minReduction,\n-                                                safety * Math.pow(error, exp)));\n-        final double  scaledH    = stepSize * factor;\n-        final double  nextT      = stepStart + scaledH;\n-        final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n-        hNew = filterStep(scaledH, forward, nextIsLast);\n-      }\n+    // Stop if step size becomes too small\n+    if (Math.abs(hNew) <= 1.0e-12 * Math.abs(tCurr)) {\n+      throw new IntegrationException(\"Step size became too small\");\n+    }\n \n+    // Stop if integration has reached endpoint, or if step changes sign\n+    if ((tCurr >= t) || (Math.abs(hNew) < hMin)) {\n+      return tCurr;\n     }\n \n-    final double stopTime = stepStart;\n-    resetInternalState();\n-    return stopTime;\n+    // Update step size\n+    h = hNew;\n \n   }\n \n+}\n+\n   /** Get the minimal reduction factor for stepsize control.\n    * @return minimal reduction factor\n    */",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}