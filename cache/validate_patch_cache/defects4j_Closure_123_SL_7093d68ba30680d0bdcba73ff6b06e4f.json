{
    "patch": "import org.mozilla.javascript.Context;\n\npublic class Main {\n    \n    public static void main(String[] args) {\n        boolean c = true;\n        boolean[] d = { true };\n        String expected = \"for(a=c?0:[(0 in d)];;)foo()\";\n        String actual = Main.generateForLoopInitialization(c, d);\n        System.out.println(actual);\n        System.out.println(actual.equals(expected));\n    }\n    \n    public static String generateForLoopInitialization(boolean c, boolean[] d) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"for(a=c?\");\n        sb.append(\"0\");\n        sb.append(\":[\");\n        if (d.length > 0) {\n            Context rhsContext = Context.OTHER;\n            for (int i = 0; i < d.length; i++) {\n                if (i != 0) {\n                    sb.append(\",\");\n                }\n                sb.append(\"(\");\n                sb.append(i);\n                boolean inForLoopInit = false;\n                sb.append(\" in d)\");\n            }\n        }\n        sb.append(\"];;)foo()\");\n        return sb.toString();\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}