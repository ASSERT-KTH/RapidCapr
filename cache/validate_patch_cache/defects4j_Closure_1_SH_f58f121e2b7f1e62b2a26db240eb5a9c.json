{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        String paramName = lastArg.getString();\n        Var var = fnScope.getVar(paramName);\n        if (!referenced.contains(var)) {\n          Node defaultValue = lastArg.getFirstChild();\n          Node next;\n          if (defaultValue != null) {\n            // The argument has a default value.\n            next = defaultValue.getNext();\n            argList.removeChild(defaultValue);\n            compiler.reportCodeChange();\n          } else {\n            next = lastArg.getPrevious();\n            argList.removeChild(lastArg);\n            compiler.reportCodeChange();\n          }\n          compiler.addToDebugLog(\"Removed unused parameter: \" + paramName);\n          // Remove the argument from all call sites and its references\n          // from within the function body itself.\n          for (Reference ref : var.getRefs()) {\n            NodeUtil.deleteNode(ref.getNode());\n            compiler.reportCodeChange();\n          }\n          for (Node callsite : fnScope.getCallsNodes()) {\n            int numArgs = callsite.getChildCount();\n            for (int i = 0; i < numArgs; i++) {\n              Node arg = callsite.getChildAt(i);\n              if (arg.getOriginalName().equals(paramName)) {\n                if (defaultValue != null) {\n                  callsite.addChildBefore(\n                      defaultValue.detachFromParent().cloneTree(),\n                      arg.getNext());\n                }\n                arg.detachFromParent();\n                compiler.reportCodeChange();\n              }\n            }\n          }\n          lastArg = next;\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..05cdbc60 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,66 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        String paramName = lastArg.getString();\n+        Var var = fnScope.getVar(paramName);\n+        if (!referenced.contains(var)) {\n+          Node defaultValue = lastArg.getFirstChild();\n+          Node next;\n+          if (defaultValue != null) {\n+            // The argument has a default value.\n+            next = defaultValue.getNext();\n+            argList.removeChild(defaultValue);\n+            compiler.reportCodeChange();\n+          } else {\n+            next = lastArg.getPrevious();\n+            argList.removeChild(lastArg);\n+            compiler.reportCodeChange();\n+          }\n+          compiler.addToDebugLog(\"Removed unused parameter: \" + paramName);\n+          // Remove the argument from all call sites and its references\n+          // from within the function body itself.\n+          for (Reference ref : var.getRefs()) {\n+            NodeUtil.deleteNode(ref.getNode());\n+            compiler.reportCodeChange();\n+          }\n+          for (Node callsite : fnScope.getCallsNodes()) {\n+            int numArgs = callsite.getChildCount();\n+            for (int i = 0; i < numArgs; i++) {\n+              Node arg = callsite.getChildAt(i);\n+              if (arg.getOriginalName().equals(paramName)) {\n+                if (defaultValue != null) {\n+                  callsite.addChildBefore(\n+                      defaultValue.detachFromParent().cloneTree(),\n+                      arg.getNext());\n+                }\n+                arg.detachFromParent();\n+                compiler.reportCodeChange();\n+              }\n+            }\n+          }\n+          lastArg = next;\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}