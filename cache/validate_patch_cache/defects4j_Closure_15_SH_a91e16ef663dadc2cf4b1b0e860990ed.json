{
    "patch": "        // where the function returns (possibly without a return statement)\n        if (n == null) {\n          return false;\n        }\n\n        // We care about calls to functions and function expressions that potentially modify\n        // dependent variables.\n        if (NodeUtil.isCallOrNew(n)) {\n          if (NodeUtil.mayHaveSideEffects(n)) {\n            return true;\n          }\n          if (NodeUtil.mayImpactMutableState(n)) {\n            return true;\n          }\n        }\n\n        // Recurse on child nodes",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..d2204298 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,23 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+        // where the function returns (possibly without a return statement)\n+        if (n == null) {\n+          return false;\n+        }\n+\n+        // We care about calls to functions and function expressions that potentially modify\n+        // dependent variables.\n+        if (NodeUtil.isCallOrNew(n)) {\n+          if (NodeUtil.mayHaveSideEffects(n)) {\n+            return true;\n+          }\n+          if (NodeUtil.mayImpactMutableState(n)) {\n+            return true;\n+          }\n+        }\n+\n+        // Recurse on child nodes\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}