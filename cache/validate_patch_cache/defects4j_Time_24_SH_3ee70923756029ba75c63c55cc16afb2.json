{
    "patch": "        try {\n            for (int i = 0; i < count; i++) {\n                long newMillis = savedFields[i].set(millis, resetFields);\n                if (millis > 0 && newMillis < 0) {\n                    throw new IllegalArgumentException(\"The datetime is too large to be represented\");\n                }\n                if (millis < 0 && newMillis > 0) {\n                    throw new IllegalArgumentException(\"The datetime is too small to be represented\");\n                }\n                millis = newMillis;\n            }\n        } catch (IllegalFieldValueException e) {\n            boolean leapSecondError = false;\n            if (e.getMessage().contains(\"Leap\")) {\n                leapSecondError = true;\n            }\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            if (!leapSecondError) {\n                throw e;\n            } else {\n                for (int i = 0; i < count; i++) {\n                    try {\n                        millis = savedFields[i].set(millis, resetFields);\n                    } catch (IllegalFieldValueException ex) {\n                        if (!ex.getMessage().contains(\"Leap\")) {\n                            throw ex;\n                        }\n                    }\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..34623e1d 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,39 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                long newMillis = savedFields[i].set(millis, resetFields);\n+                if (millis > 0 && newMillis < 0) {\n+                    throw new IllegalArgumentException(\"The datetime is too large to be represented\");\n+                }\n+                if (millis < 0 && newMillis > 0) {\n+                    throw new IllegalArgumentException(\"The datetime is too small to be represented\");\n+                }\n+                millis = newMillis;\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            boolean leapSecondError = false;\n+            if (e.getMessage().contains(\"Leap\")) {\n+                leapSecondError = true;\n+            }\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            if (!leapSecondError) {\n+                throw e;\n+            } else {\n+                for (int i = 0; i < count; i++) {\n+                    try {\n+                        millis = savedFields[i].set(millis, resetFields);\n+                    } catch (IllegalFieldValueException ex) {\n+                        if (!ex.getMessage().contains(\"Leap\")) {\n+                            throw ex;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "java.lang.IllegalArgumentException: The datetime is too large to be represented",
    "test_result": "FAIL"
}