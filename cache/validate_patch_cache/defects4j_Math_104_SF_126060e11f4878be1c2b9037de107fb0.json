{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.MathUtils;\n\npublic class RegularizedGamma {\n\n    public static double calculate(double a, double x) {\n        if (a <= 0.0 || x < 0.0) {\n            throw new IllegalArgumentException(\"Invalid argument for Regularized Gamma Function\");\n        }\n        double eps = 1e-15;\n        double gln = Gamma.logGamma(a);\n        double ax = a * Math.log(x) - x - gln;\n        if (ax < -709.782715 || Double.isNaN(ax)) {\n            return 0.0;\n        }\n        if (x == 0.0) {\n            return 0.0;\n        }\n        double y = 1.0 - a;\n        double z = x + y + 1.0;\n        double c = 0.0;\n        double pkm2 = 1.0;\n        double qkm2 = x;\n        double pkm1 = x + 1.0;\n        double qkm1 = z * x;\n        double ans = pkm1 / qkm1;\n        double pk = 0.0;\n        double qk = 0.0;\n        for (int k = 1; k <= 1000; k++) {\n            c = y + 2.0 * k;\n            pk = pkm1 * c - pkm2 * y;\n            qk = qkm1 * c - qkm2 * y;\n            if (qk != 0.0) {\n                double r = pk / qk;\n                double t = Math.abs((ans - r) / r);\n                ans = r;\n                if (t < eps) {\n                    return MathUtils.round(ans, 15);\n                }\n            }\n            pkm2 = pkm1;\n            pkm1 = pk;\n            qkm2 = qkm1;\n            qkm1 = qk;\n            if (Math.abs(pk) > 1.0e30) {\n                pk *= 1.0e-30;\n                qk *= 1.0e-30;\n                pkm2 *= 1.0e-30;\n                pkm1 *= 1.0e-30;\n                qkm2 *= 1.0e-30;\n                qkm1 *= 1.0e-30;\n            }\n        }\n        return MathUtils.round(ans, 15);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..c37f6180b 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,62 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.MathUtils;\n+\n+public class RegularizedGamma {\n+\n+    public static double calculate(double a, double x) {\n+        if (a <= 0.0 || x < 0.0) {\n+            throw new IllegalArgumentException(\"Invalid argument for Regularized Gamma Function\");\n+        }\n+        double eps = 1e-15;\n+        double gln = Gamma.logGamma(a);\n+        double ax = a * Math.log(x) - x - gln;\n+        if (ax < -709.782715 || Double.isNaN(ax)) {\n+            return 0.0;\n+        }\n+        if (x == 0.0) {\n+            return 0.0;\n+        }\n+        double y = 1.0 - a;\n+        double z = x + y + 1.0;\n+        double c = 0.0;\n+        double pkm2 = 1.0;\n+        double qkm2 = x;\n+        double pkm1 = x + 1.0;\n+        double qkm1 = z * x;\n+        double ans = pkm1 / qkm1;\n+        double pk = 0.0;\n+        double qk = 0.0;\n+        for (int k = 1; k <= 1000; k++) {\n+            c = y + 2.0 * k;\n+            pk = pkm1 * c - pkm2 * y;\n+            qk = qkm1 * c - qkm2 * y;\n+            if (qk != 0.0) {\n+                double r = pk / qk;\n+                double t = Math.abs((ans - r) / r);\n+                ans = r;\n+                if (t < eps) {\n+                    return MathUtils.round(ans, 15);\n+                }\n+            }\n+            pkm2 = pkm1;\n+            pkm1 = pk;\n+            qkm2 = qkm1;\n+            qkm1 = qk;\n+            if (Math.abs(pk) > 1.0e30) {\n+                pk *= 1.0e-30;\n+                qk *= 1.0e-30;\n+                pkm2 *= 1.0e-30;\n+                pkm1 *= 1.0e-30;\n+                qkm2 *= 1.0e-30;\n+                qkm1 *= 1.0e-30;\n+            }\n+        }\n+        return MathUtils.round(ans, 15);\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}