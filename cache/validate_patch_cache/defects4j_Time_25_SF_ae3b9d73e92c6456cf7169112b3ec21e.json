{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int initialOffset = getOffset(instantLocal);\n    final long instantAdjusted = instantLocal - initialOffset;\n\n    final long nextTransition = nextTransition(instantAdjusted);\n\n    if (nextTransition != instantLocal) {\n        final int transitionOffset = getOffset(nextTransition);\n        if (initialOffset < transitionOffset) {\n            // gap is fully before instantLocal, so we can use the current std offset\n            return initialOffset;\n        } else if (initialOffset > transitionOffset) {\n            // gap is fully after instantLocal, so we can use the new std offset\n            return transitionOffset;\n        } else {\n            // instantLocal is inside the gap, handle this below\n        }\n    }\n\n    // At this point, instantLocal is either in the gap (and initialOffset == transitionOffset)\n    // or hasn't advanced to the nextTransition yet (nextTransition == instantLocal).\n\n    final long prevTransition = previousTransition(instantAdjusted);\n    final long nextLocalTransition = nextTransition(instantLocal);\n\n    if (prevTransition == nextLocalTransition) {\n        // both instants are in the same transition, so they share the same offset\n        return getOffset(instantAdjusted);\n    }\n\n    final int prevOffset = getOffset(prevTransition);\n    final int currOffset = getOffset(nextLocalTransition);\n    if (prevOffset < currOffset) {\n        // current offset is the new one\n        return currOffset;\n    } else if (prevOffset > currOffset) {\n        // current offset is the old one\n        return prevOffset;\n    } else {\n        // instants are in the gap\n        return currOffset - 1;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..17d89275 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,50 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int initialOffset = getOffset(instantLocal);\n+    final long instantAdjusted = instantLocal - initialOffset;\n+\n+    final long nextTransition = nextTransition(instantAdjusted);\n+\n+    if (nextTransition != instantLocal) {\n+        final int transitionOffset = getOffset(nextTransition);\n+        if (initialOffset < transitionOffset) {\n+            // gap is fully before instantLocal, so we can use the current std offset\n+            return initialOffset;\n+        } else if (initialOffset > transitionOffset) {\n+            // gap is fully after instantLocal, so we can use the new std offset\n+            return transitionOffset;\n+        } else {\n+            // instantLocal is inside the gap, handle this below\n         }\n-        return offsetAdjusted;\n     }\n \n+    // At this point, instantLocal is either in the gap (and initialOffset == transitionOffset)\n+    // or hasn't advanced to the nextTransition yet (nextTransition == instantLocal).\n+\n+    final long prevTransition = previousTransition(instantAdjusted);\n+    final long nextLocalTransition = nextTransition(instantLocal);\n+\n+    if (prevTransition == nextLocalTransition) {\n+        // both instants are in the same transition, so they share the same offset\n+        return getOffset(instantAdjusted);\n+    }\n+\n+    final int prevOffset = getOffset(prevTransition);\n+    final int currOffset = getOffset(nextLocalTransition);\n+    if (prevOffset < currOffset) {\n+        // current offset is the new one\n+        return currOffset;\n+    } else if (prevOffset > currOffset) {\n+        // current offset is the old one\n+        return prevOffset;\n+    } else {\n+        // instants are in the gap\n+        return currOffset - 1;\n+    }\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "java.lang.IllegalArgumentException: Illegal instant due to time zone offset transition: 2006-06-09T11:00:00.000",
    "test_result": "FAIL"
}