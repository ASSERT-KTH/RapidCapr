{
    "patch": "          } else if (parent.getCatchBlock() == node){  // corrected line\n            if (NodeUtil.hasFinally(parent)) {\n              return computeFallThrough(node.getNext());\n            } else {\n              return computeFollowNode(fromNode, parent, cfa);\n            }\n          } else if (parent.getLastChild() == node){\n            if (cfa != null) {\n              for (Node finallyNode : cfa.finallyMap.get(parent)) {\n                cfa.createEdge(fromNode, Branch.EXCEPTION, finallyNode); // old line\n                cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n              }\n            }\n            return computeFollowNode(fromNode, parent, cfa);\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..72dc17e3 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,21 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+          } else if (parent.getCatchBlock() == node){  // corrected line\n+            if (NodeUtil.hasFinally(parent)) {\n+              return computeFallThrough(node.getNext());\n+            } else {\n+              return computeFollowNode(fromNode, parent, cfa);\n+            }\n+          } else if (parent.getLastChild() == node){\n+            if (cfa != null) {\n+              for (Node finallyNode : cfa.finallyMap.get(parent)) {\n+                cfa.createEdge(fromNode, Branch.EXCEPTION, finallyNode); // old line\n+                cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+              }\n+            }\n+            return computeFollowNode(fromNode, parent, cfa);\n+          }\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}