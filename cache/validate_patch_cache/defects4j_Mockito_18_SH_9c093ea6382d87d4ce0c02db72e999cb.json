{
    "patch": "public void test() {\n    // create an instance of the class under test\n    MyClass myClass = new MyClass();\n\n    // call the method to be tested\n    ReturnValues values = myClass.myMethod();\n\n    // assert that the returned iterable is empty\n    Iterable iterable = (Iterable) values.returnValueFor(Iterable.class);\n    assertFalse(iterable.iterator().hasNext()); // fix\n\n    // assert that the returned map is not null and is empty\n    Map map = (Map) values.returnValueFor(Map.class);\n    assertNotNull(map);\n    assertTrue(map.isEmpty());\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}