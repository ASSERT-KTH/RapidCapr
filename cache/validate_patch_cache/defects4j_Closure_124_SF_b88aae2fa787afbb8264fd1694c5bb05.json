{
    "patch": "private boolean isSafeReplacement(Node node, Node replacement) {\n  if(node.isName()) {\n    return true;\n  }\n\n  if(node.isGetProp()) {\n    // Check if any of the intermediate nodes are assigned to the replacement node.\n    Node currentNode = node.getFirstChild();\n    while(currentNode != null) {\n      if(currentNode.isName()) {\n        if(isNameAssignedTo(currentNode.getString(), replacement)) {\n          return false;\n        }\n      }\n      else if(!isSafeReplacement(currentNode, replacement)) {\n        return false;\n      }\n\n      currentNode = currentNode.getNext();\n    }\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java\nindex 0f03e355..e26ccf95 100644\n--- a/src/com/google/javascript/jscomp/ExploitAssigns.java\n+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java\n@@ -203,22 +203,31 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n    * changed.\n    * @return Whether the replacement can be made.\n    */\n-  private boolean isSafeReplacement(Node node, Node replacement) {\n-    // No checks are needed for simple names.\n-    if (node.isName()) {\n-      return true;\n-    }\n-    Preconditions.checkArgument(node.isGetProp());\n+private boolean isSafeReplacement(Node node, Node replacement) {\n+  if(node.isName()) {\n+    return true;\n+  }\n \n-      node = node.getFirstChild();\n-    if (node.isName()\n-        && isNameAssignedTo(node.getString(), replacement)) {\n-      return false;\n-    }\n+  if(node.isGetProp()) {\n+    // Check if any of the intermediate nodes are assigned to the replacement node.\n+    Node currentNode = node.getFirstChild();\n+    while(currentNode != null) {\n+      if(currentNode.isName()) {\n+        if(isNameAssignedTo(currentNode.getString(), replacement)) {\n+          return false;\n+        }\n+      }\n+      else if(!isSafeReplacement(currentNode, replacement)) {\n+        return false;\n+      }\n \n-    return true;\n+      currentNode = currentNode.getNext();\n+    }\n   }\n \n+  return true;\n+}\n+\n   /**\n    * @return Whether name is assigned in the expression rooted at node.\n    */\n@@ -241,4 +250,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n \n     return false;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}