{
    "patch": "      // Check whether this is an assignment to a property on the prototype\n      boolean isOverride = parent != null &&\n          parent.getType() == Token.ASSIGN &&\n          getprop.getFirstChild().getType() == Token.GETPROP &&\n          parent.getFirstChild() == getprop.getFirstChild() &&\n          parent.getFirstFirstChild().getType() == Token.THIS &&\n          parent.getFirstFirstChild().getNext().getString().equals(\"prototype\") &&\n          !isCoreObjectMethod(propertyName);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..98ab4a13 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,14 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      // Check whether this is an assignment to a property on the prototype\n+      boolean isOverride = parent != null &&\n+          parent.getType() == Token.ASSIGN &&\n+          getprop.getFirstChild().getType() == Token.GETPROP &&\n+          parent.getFirstChild() == getprop.getFirstChild() &&\n+          parent.getFirstFirstChild().getType() == Token.THIS &&\n+          parent.getFirstFirstChild().getNext().getString().equals(\"prototype\") &&\n+          !isCoreObjectMethod(propertyName);\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}