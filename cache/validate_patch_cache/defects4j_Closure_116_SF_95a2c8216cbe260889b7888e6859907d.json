{
    "patch": "private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    boolean hasThisArg = false;\n    if (!callNode.getFirstChild().isName()) {\n      hasThisArg = true;\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    Node fnParamTail = NodeUtil.getFunctionParameters(fnNode).getLastChild();\n    Node lastFnParam = fnParamTail;\n    while (fnParam != null && cArg != null) {\n      // Check if a mutable argument is evaluated more than once for a named parameter.\n      if (!hasThisArg && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1 &&\n          NodeUtil.mayEffectMutableState(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n\n      lastFnParam = fnParam;\n      fnParam = fnParam.getNext();\n\n      cArg = cArg.getNext();\n    }\n\n    boolean hasRestParam = lastFnParam.isRest();\n    if (hasThisArg) {\n      // If the call has a this reference skip the first named parameter.\n      lastFnParam = lastFnParam.getPrevious();\n    }\n\n    // Check that there aren't any extra args.\n    while (cArg != null) {\n      if (!hasRestParam) {\n        return CanInlineResult.NO;\n      }\n\n      Node restParam = lastFnParam.getLastChild();\n      if (restParam == null) {\n        return CanInlineResult.NO;\n      }\n\n      if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n\n      cArg = cArg.getNext();\n    }\n\n    // Check that all parameters have been given an argument, except for any rest parameter.\n    while (fnParam != null) {\n      if (!fnParam.isRest()) {\n        return CanInlineResult.NO;\n      }\n      fnParam = fnParam.getNext();\n    }\n\n    return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..a1103520 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,7 +686,7 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n+private CanInlineResult canInlineReferenceDirectly(\n       Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n@@ -694,14 +694,15 @@ class FunctionInjector {\n \n     Node block = fnNode.getLastChild();\n \n-\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n \n     // Functions called via 'call' and 'apply' have a this-object as\n     // the first parameter, but this is not part of the called function's\n     // parameter list.\n+    boolean hasThisArg = false;\n     if (!callNode.getFirstChild().isName()) {\n+      hasThisArg = true;\n       if (NodeUtil.isFunctionObjectCall(callNode)) {\n         // TODO(johnlenz): Support replace this with a value.\n         if (cArg == null || !cArg.isThis()) {\n@@ -716,37 +717,55 @@ class FunctionInjector {\n \n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+    Node fnParamTail = NodeUtil.getFunctionParameters(fnNode).getLastChild();\n+    Node lastFnParam = fnParamTail;\n+    while (fnParam != null && cArg != null) {\n+      // Check if a mutable argument is evaluated more than once for a named parameter.\n+      if (!hasThisArg && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1 &&\n+          NodeUtil.mayEffectMutableState(cArg, compiler)) {\n+        return CanInlineResult.NO;\n+      }\n+\n+      lastFnParam = fnParam;\n+      fnParam = fnParam.getNext();\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+      cArg = cArg.getNext();\n+    }\n+\n+    boolean hasRestParam = lastFnParam.isRest();\n+    if (hasThisArg) {\n+      // If the call has a this reference skip the first named parameter.\n+      lastFnParam = lastFnParam.getPrevious();\n+    }\n+\n+    // Check that there aren't any extra args.\n+    while (cArg != null) {\n+      if (!hasRestParam) {\n+        return CanInlineResult.NO;\n       }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+      Node restParam = lastFnParam.getLastChild();\n+      if (restParam == null) {\n+        return CanInlineResult.NO;\n+      }\n+\n+      if (NodeUtil.mayEffectMutableState(cArg, compiler)) {\n+        return CanInlineResult.NO;\n+      }\n+\n+      cArg = cArg.getNext();\n+    }\n+\n+    // Check that all parameters have been given an argument, except for any rest parameter.\n+    while (fnParam != null) {\n+      if (!fnParam.isRest()) {\n+        return CanInlineResult.NO;\n       }\n+      fnParam = fnParam.getNext();\n     }\n \n     return CanInlineResult.YES;\n-  }\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}