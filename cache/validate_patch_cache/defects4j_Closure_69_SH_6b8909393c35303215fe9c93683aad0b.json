{
    "patch": "      ObjectType thisType = functionType.getTypeOfThis();\n      if (thisType != null && thisType.isFunctionType()) {\n        if (n.getParent().isGetProp() || n.getParent().isGetElem()) {\n          ensureTyped(t, n, functionType.getReturnType());\n        } else {\n          report(t, n, FUNCTION_CONSTRUCTOR_NO_PARAMS);\n          ensureTyped(t, n);\n        }\n      } else {\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..6747cd00 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      ObjectType thisType = functionType.getTypeOfThis();\n+      if (thisType != null && thisType.isFunctionType()) {\n+        if (n.getParent().isGetProp() || n.getParent().isGetElem()) {\n+          ensureTyped(t, n, functionType.getReturnType());\n+        } else {\n+          report(t, n, FUNCTION_CONSTRUCTOR_NO_PARAMS);\n+          ensureTyped(t, n);\n+        }\n+      } else {\n+        visitParameterList(t, n, functionType);\n+        ensureTyped(t, n, functionType.getReturnType());\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}