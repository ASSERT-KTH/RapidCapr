{
    "patch": "if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n    if (nameNode.isQualifiedName()) {\n        Node targetNode = nameNode.getFirstChild();\n        while (targetNode.getType() == Token.GETPROP) {\n            targetNode = targetNode.getFirstChild();\n        }\n        String targetName = targetNode.getString();\n        if (targetName != null && \n            (targetName.equals(\"Math\") || \n             targetName.equals(\"console\") || \n             targetName.equals(\"JSON\"))) {\n            return false;\n        }\n    }\n    if (nameNode.getFirstChild().getType() == Token.REGEXP\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n          return false;\n    } else if (nameNode.getFirstChild().getType() == Token.STRING\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString())) {\n          Node param = nameNode.getNext();\n          if (param != null &&\n              (param.getType() == Token.STRING\n                  || param.getType() == Token.REGEXP))\n          return false;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 1844b18a..b1dadfe8 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -955,6 +955,33 @@ public final class NodeUtil {\n       }\n \n       // Functions in the \"Math\" namespace have no side effects.\n+if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n+    if (nameNode.isQualifiedName()) {\n+        Node targetNode = nameNode.getFirstChild();\n+        while (targetNode.getType() == Token.GETPROP) {\n+            targetNode = targetNode.getFirstChild();\n+        }\n+        String targetName = targetNode.getString();\n+        if (targetName != null && \n+            (targetName.equals(\"Math\") || \n+             targetName.equals(\"console\") || \n+             targetName.equals(\"JSON\"))) {\n+            return false;\n+        }\n+    }\n+    if (nameNode.getFirstChild().getType() == Token.REGEXP\n+            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n+          return false;\n+    } else if (nameNode.getFirstChild().getType() == Token.STRING\n+            && STRING_REGEXP_METHODS.contains(\n+                nameNode.getLastChild().getString())) {\n+          Node param = nameNode.getNext();\n+          if (param != null &&\n+              (param.getType() == Token.STRING\n+                  || param.getType() == Token.REGEXP))\n+          return false;\n+    }\n+}\n \n       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n         if (nameNode.getFirstChild().getType() == Token.REGEXP",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}