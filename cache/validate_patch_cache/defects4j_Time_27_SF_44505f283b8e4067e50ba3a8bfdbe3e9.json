{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    LinkedList<Object> stack = new LinkedList<>(elementPairs);\n    Separator sep = null;\n\n    while (!stack.isEmpty()) {\n        Object obj = stack.pop();\n        if (obj instanceof Separator) {\n            if (sep != null) {\n                sep = sep.finish((PeriodPrinter)stack.peek(), (PeriodParser)stack.peek());\n            } else {\n                sep = (Separator) obj;\n            }\n        } else {\n            Object[] comp = createComposite(Collections.singletonList(obj));\n            if (notPrinter) {\n                return sep == null ? new PeriodFormatter(null, (PeriodParser) comp[1]) :\n                                     new PeriodFormatter(sep.finish(null, (PeriodParser) comp[1]), sep);\n            } else if (notParser) {\n                return sep == null ? new PeriodFormatter((PeriodPrinter) comp[0], null) :\n                                     new PeriodFormatter(sep.finish((PeriodPrinter) comp[0], null), sep);\n            } else {\n                return sep == null ? new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]) :\n                                     new PeriodFormatter(sep.finish((PeriodPrinter) comp[0], (PeriodParser) comp[1]), sep);\n            }\n        }\n    }\n\n    throw new IllegalArgumentException(\"Invalid configuration\");\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..6e385d6e 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,40 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    LinkedList<Object> stack = new LinkedList<>(elementPairs);\n+    Separator sep = null;\n+\n+    while (!stack.isEmpty()) {\n+        Object obj = stack.pop();\n+        if (obj instanceof Separator) {\n+            if (sep != null) {\n+                sep = sep.finish((PeriodPrinter)stack.peek(), (PeriodParser)stack.peek());\n+            } else {\n+                sep = (Separator) obj;\n+            }\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            Object[] comp = createComposite(Collections.singletonList(obj));\n+            if (notPrinter) {\n+                return sep == null ? new PeriodFormatter(null, (PeriodParser) comp[1]) :\n+                                     new PeriodFormatter(sep.finish(null, (PeriodParser) comp[1]), sep);\n+            } else if (notParser) {\n+                return sep == null ? new PeriodFormatter((PeriodPrinter) comp[0], null) :\n+                                     new PeriodFormatter(sep.finish((PeriodPrinter) comp[0], null), sep);\n+            } else {\n+                return sep == null ? new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]) :\n+                                     new PeriodFormatter(sep.finish((PeriodPrinter) comp[0], (PeriodParser) comp[1]), sep);\n+            }\n         }\n     }\n \n+    throw new IllegalArgumentException(\"Invalid configuration\");\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}