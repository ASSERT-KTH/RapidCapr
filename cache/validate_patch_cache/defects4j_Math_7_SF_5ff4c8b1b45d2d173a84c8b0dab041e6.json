{
    "patch": "private List<EventState> computeAndSortEvents(final double t, final double[] y, final boolean forward) {\n\n    // search events\n    eventsEntries.ensureCapacity(maximalSize);\n    final int n = searcher.search(eventsEntries, new EventsSearchInterval(t, y, forward));\n\n    // prepare switching function calls\n    final EventState[] eventsStates = new EventState[n];\n    boolean isIncreasing = true;\n    for (int i = 0; i < n; ++i) {\n        final Transition transition      = eventsEntries.get(i).getEvent().evaluate(y);\n        eventsStates[i]                  = new EventState(i, eventsEntries.get(i).getEvent(), transition);\n        isIncreasing                     = isIncreasing && transition.goesUp();\n    }\n\n    // sort events\n    final Comparator<EventState> comparator = new Comparator<EventState>() {\n        public int compare(EventState es0, EventState es1) {\n            return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n        }\n    };\n\n    Arrays.sort(eventsStates, comparator);\n\n    // some event checkers may not have been selected by the search procedure if several events occur simultaneously\n    final List<EventState> occuringEvents = new ArrayList<EventState>();\n    for (final EventState state : eventsStates) {\n        if (state.evaluateStep(interpolator)) {\n            // the event occurs during the current step\n            occuringEvents.add(state);\n        }\n    }\n\n    while (!occuringEvents.isEmpty()) {\n\n        // handle the chronologically first event\n        final Iterator<EventState> iterator = occuringEvents.iterator();\n        final EventState currentEvent = iterator.next();\n        iterator.remove();\n\n        // restrict the interpolator to the first part of the step, up to the event\n        final double eventT = currentEvent.getEventTime();\n        interpolator.setSoftPreviousTime(previousT);\n        interpolator.setSoftCurrentTime(eventT);\n\n        // get state at event time\n        interpolator.setInterpolatedTime(eventT);\n        final double[] eventY = interpolator.getInterpolatedState().clone();\n\n        // advance all event states to current time\n        currentEvent.stepAccepted(eventT, eventY);\n        isLastStep = currentEvent.stop();\n\n        // handle the first part of the step, up to the event\n        for (final StepHandler handler : stepHandlers) {\n            handler.handleStep(interpolator, isLastStep);\n        }\n    }\n\n    return occuringEvents;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex f24f87c39..7dcf28195 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -313,43 +313,67 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n-                public int compare(EventState es0, EventState es1) {\n-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n-                }\n+private List<EventState> computeAndSortEvents(final double t, final double[] y, final boolean forward) {\n+\n+    // search events\n+    eventsEntries.ensureCapacity(maximalSize);\n+    final int n = searcher.search(eventsEntries, new EventsSearchInterval(t, y, forward));\n+\n+    // prepare switching function calls\n+    final EventState[] eventsStates = new EventState[n];\n+    boolean isIncreasing = true;\n+    for (int i = 0; i < n; ++i) {\n+        final Transition transition      = eventsEntries.get(i).getEvent().evaluate(y);\n+        eventsStates[i]                  = new EventState(i, eventsEntries.get(i).getEvent(), transition);\n+        isIncreasing                     = isIncreasing && transition.goesUp();\n+    }\n \n-            });\n+    // sort events\n+    final Comparator<EventState> comparator = new Comparator<EventState>() {\n+        public int compare(EventState es0, EventState es1) {\n+            return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n+        }\n+    };\n \n-            for (final EventState state : eventsStates) {\n-                if (state.evaluateStep(interpolator)) {\n-                    // the event occurs during the current step\n-                    occuringEvents.add(state);\n-                }\n-            }\n+    Arrays.sort(eventsStates, comparator);\n \n-            while (!occuringEvents.isEmpty()) {\n+    // some event checkers may not have been selected by the search procedure if several events occur simultaneously\n+    final List<EventState> occuringEvents = new ArrayList<EventState>();\n+    for (final EventState state : eventsStates) {\n+        if (state.evaluateStep(interpolator)) {\n+            // the event occurs during the current step\n+            occuringEvents.add(state);\n+        }\n+    }\n \n-                // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n-                final EventState currentEvent = iterator.next();\n-                iterator.remove();\n+    while (!occuringEvents.isEmpty()) {\n \n-                // restrict the interpolator to the first part of the step, up to the event\n-                final double eventT = currentEvent.getEventTime();\n-                interpolator.setSoftPreviousTime(previousT);\n-                interpolator.setSoftCurrentTime(eventT);\n+        // handle the chronologically first event\n+        final Iterator<EventState> iterator = occuringEvents.iterator();\n+        final EventState currentEvent = iterator.next();\n+        iterator.remove();\n \n-                // get state at event time\n-                interpolator.setInterpolatedTime(eventT);\n-                final double[] eventY = interpolator.getInterpolatedState().clone();\n+        // restrict the interpolator to the first part of the step, up to the event\n+        final double eventT = currentEvent.getEventTime();\n+        interpolator.setSoftPreviousTime(previousT);\n+        interpolator.setSoftCurrentTime(eventT);\n \n-                // advance all event states to current time\n-                currentEvent.stepAccepted(eventT, eventY);\n-                isLastStep = currentEvent.stop();\n+        // get state at event time\n+        interpolator.setInterpolatedTime(eventT);\n+        final double[] eventY = interpolator.getInterpolatedState().clone();\n \n-                // handle the first part of the step, up to the event\n-                for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n-                }\n+        // advance all event states to current time\n+        currentEvent.stepAccepted(eventT, eventY);\n+        isLastStep = currentEvent.stop();\n+\n+        // handle the first part of the step, up to the event\n+        for (final StepHandler handler : stepHandlers) {\n+            handler.handleStep(interpolator, isLastStep);\n+        }\n+    }\n+\n+    return occuringEvents;\n+}\n \n                 if (isLastStep) {\n                     // the event asked to stop integration",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}