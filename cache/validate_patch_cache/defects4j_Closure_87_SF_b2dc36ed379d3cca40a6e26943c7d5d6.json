{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node onlyChild = n.getFirstChild();\n\n    // check parent type and child type\n    if (n.getParent().isCall()) {\n      return false;\n    }\n\n    // check for empty statement\n    if (onlyChild.getType() == Token.EMPTY) {\n      return false;\n    }\n\n    // do not fold result if parent is expression void or if statement\n    switch (n.getParent().getType()) {\n      case Token.EXPR_VOID:\n      case Token.IF:\n        return false;\n    }\n\n    // do not fold result if it is a string being passed as function argument\n    if (onlyChild.isString()) {\n      Node superParent = n.getParent().getParent();\n      if (superParent.isCall() && superParent.getChildCount() > 1 && \n          superParent.getFirstChild().equals(n.getParent())) {\n        return false;\n      }\n    }\n\n    return NodeUtil.isExpressionNode(onlyChild);\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..04adfa60 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,42 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    Node onlyChild = n.getFirstChild();\n+\n+    // check parent type and child type\n+    if (n.getParent().isCall()) {\n+      return false;\n+    }\n+\n+    // check for empty statement\n+    if (onlyChild.getType() == Token.EMPTY) {\n+      return false;\n+    }\n+\n+    // do not fold result if parent is expression void or if statement\n+    switch (n.getParent().getType()) {\n+      case Token.EXPR_VOID:\n+      case Token.IF:\n+        return false;\n+    }\n+\n+    // do not fold result if it is a string being passed as function argument\n+    if (onlyChild.isString()) {\n+      Node superParent = n.getParent().getParent();\n+      if (superParent.isCall() && superParent.getChildCount() > 1 && \n+          superParent.getFirstChild().equals(n.getParent())) {\n+        return false;\n       }\n     }\n \n-    return false;\n+    return NodeUtil.isExpressionNode(onlyChild);\n   }\n \n+  return false;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}