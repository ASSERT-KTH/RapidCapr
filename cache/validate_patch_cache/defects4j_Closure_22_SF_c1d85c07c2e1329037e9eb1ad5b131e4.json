{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  // VOID nodes appear when there are extra semicolons at the BLOCK level.\n  // I've been unable to think of any cases where this indicates a bug,\n  // and apparently some people like keeping these semicolons around,\n  // so we'll allow it.\n  if (n.isEmpty() ||\n      n.isComma()) {\n    return;\n  }\n\n  if (parent == null) {\n    return;\n  }\n\n  // Do not try to remove a block or an expr result. We already handle\n  // these cases when we visit the child, and the peephole passes will\n  // fix up the tree in more clever ways when these are removed.\n  if (parent.getType() == Token.COMMA) {\n    Node gramps = parent.getParent();\n    if (gramps.isCall() && parent == gramps.getFirstChild()) {\n      if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n        return;\n      }\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n == parent.getLastChild()) {\n      for (Node an : parent.getAncestors()) {\n        int ancestorType = an.getType();\n        if (ancestorType == Token.COMMA) {\n          continue;\n        }\n        if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {\n          return;\n        } else {\n          break;\n        }\n      }\n    }\n  } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n    if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n        n == parent.getFirstChild().getNext().getNext())) {\n    } else {\n      return;\n    }\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n  if (!isResultUsed &&\n      (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n    if (n.isString()) {\n      // Don't warn about strings whose literals have side effects.\n      if (NodeUtil.mayHaveSideEffects(n.getFirstChild(), t.getCompiler())) {\n        return;\n      }\n\n      String msg = \"Is there a missing '+' on the previous line?\";\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      problemNodes.add(n);\n    } else if (!n.isQualifiedName() && !n.isFunction() &&\n               !n.getParent().isImport() &&\n               !NodeUtil.referencesThis(n)) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      // TODO(johnlenz): determine if it is necessary to\n      // try to protect side-effect free statements as well.\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  } else if (!isSimpleOp && !n.isFunction()) {\n    Node ancestor = n.getParent();\n    if (n.isName() &&\n        (ancestor.isAssign() || ancestor.isInc() || ancestor.isDec()) &&\n        ancestor.getFirstChild() == n) {\n      // In case like `a = ++b;`, it is okay not to use a.\n      return;\n    }\n\n    // OK if value is used and function is called only for side-effects.\n    if (n.isCall() && n.getFirstChild().isQualifiedName()) {\n      Node fn = n.getFirstChild().getFunction();\n      if (fn != null && fn.getLastChild() != null) {\n        int lastType = fn.getLastChild().getType();\n        if (lastType == Token.RETURN || lastType == Token.THROW) {\n          Node target = NodeUtil.getEnclosingStatement(n);\n          if (target != null && NodeUtil.isStatement(target)) {\n            if (target.getNext() != null) {\n              Node sibling = target.getNext().getFirstChild();\n              if (sibling != null && NodeUtil.mayHaveSideEffects(sibling)) {\n                return;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    String msg = \"This code is also calling a function for its side-effect\";\n    t.getCompiler().report(\n        t.makeError(n, level, USELESS_CODE_ERROR, msg));\n    // TODO(johnlenz): determine if it is necessary to\n    // try to protect side-effect free expressions as well.\n    problemNodes.add(n);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex b9aa412c..b5aa93a3 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,65 +81,73 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n-      return;\n-    }\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  // VOID nodes appear when there are extra semicolons at the BLOCK level.\n+  // I've been unable to think of any cases where this indicates a bug,\n+  // and apparently some people like keeping these semicolons around,\n+  // so we'll allow it.\n+  if (n.isEmpty() ||\n+      n.isComma()) {\n+    return;\n+  }\n \n-    if (parent == null) {\n-      return;\n-    }\n+  if (parent == null) {\n+    return;\n+  }\n \n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (parent.getType() == Token.COMMA) {\n-      Node gramps = parent.getParent();\n-      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n-      return;\n-        }\n+  // Do not try to remove a block or an expr result. We already handle\n+  // these cases when we visit the child, and the peephole passes will\n+  // fix up the tree in more clever ways when these are removed.\n+  if (parent.getType() == Token.COMMA) {\n+    Node gramps = parent.getParent();\n+    if (gramps.isCall() && parent == gramps.getFirstChild()) {\n+      if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n+        return;\n+      }\n     }\n \n     // This no-op statement was there so that JSDoc information could\n     // be attached to the name. This check should not complain about it.\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA)\n-            continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n-            return;\n-          else\n-            break;\n+    if (n == parent.getLastChild()) {\n+      for (Node an : parent.getAncestors()) {\n+        int ancestorType = an.getType();\n+        if (ancestorType == Token.COMMA) {\n+          continue;\n+        }\n+        if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {\n+          return;\n+        } else {\n+          break;\n         }\n       }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n-           n == parent.getFirstChild().getNext().getNext())) {\n-      } else {\n+    }\n+  } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n+    if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n+        n == parent.getFirstChild().getNext().getNext())) {\n+    } else {\n       return;\n-      }\n     }\n+  }\n \n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (!isResultUsed &&\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n-        return;\n-      } else if (n.isExprResult()) {\n+  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n+  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n+  if (!isResultUsed &&\n+      (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n+    if (n.isString()) {\n+      // Don't warn about strings whose literals have side effects.\n+      if (NodeUtil.mayHaveSideEffects(n.getFirstChild(), t.getCompiler())) {\n         return;\n       }\n+\n+      String msg = \"Is there a missing '+' on the previous line?\";\n+      t.getCompiler().report(\n+          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n+      problemNodes.add(n);\n+    } else if (!n.isQualifiedName() && !n.isFunction() &&\n+               !n.getParent().isImport() &&\n+               !NodeUtil.referencesThis(n)) {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n+      if (isSimpleOp) {\n         msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n             \"' operator is not being used.\";\n       }\n@@ -152,7 +160,42 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n         problemNodes.add(n);\n       }\n     }\n+  } else if (!isSimpleOp && !n.isFunction()) {\n+    Node ancestor = n.getParent();\n+    if (n.isName() &&\n+        (ancestor.isAssign() || ancestor.isInc() || ancestor.isDec()) &&\n+        ancestor.getFirstChild() == n) {\n+      // In case like `a = ++b;`, it is okay not to use a.\n+      return;\n+    }\n+\n+    // OK if value is used and function is called only for side-effects.\n+    if (n.isCall() && n.getFirstChild().isQualifiedName()) {\n+      Node fn = n.getFirstChild().getFunction();\n+      if (fn != null && fn.getLastChild() != null) {\n+        int lastType = fn.getLastChild().getType();\n+        if (lastType == Token.RETURN || lastType == Token.THROW) {\n+          Node target = NodeUtil.getEnclosingStatement(n);\n+          if (target != null && NodeUtil.isStatement(target)) {\n+            if (target.getNext() != null) {\n+              Node sibling = target.getNext().getFirstChild();\n+              if (sibling != null && NodeUtil.mayHaveSideEffects(sibling)) {\n+                return;\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+\n+    String msg = \"This code is also calling a function for its side-effect\";\n+    t.getCompiler().report(\n+        t.makeError(n, level, USELESS_CODE_ERROR, msg));\n+    // TODO(johnlenz): determine if it is necessary to\n+    // try to protect side-effect free expressions as well.\n+    problemNodes.add(n);\n   }\n+}\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}