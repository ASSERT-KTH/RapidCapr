{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    long prevLocal = previousTransition(instantAdjusted);\n    long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n    if (offsetLocal > offsetAdjusted) {\n        if (prevLocal != prevAdjusted) {\n            int diff = offsetLocal - offsetAdjusted;\n            long newAdjusted = prevLocal + diff;\n            int newOffset = getOffset(newAdjusted);\n            return offsetLocal == newOffset ? offsetLocal : offsetAdjusted;\n        }\n    } else if (offsetLocal < offsetAdjusted) {\n        if (nextLocal != nextAdjusted) {\n            int diff = offsetAdjusted - offsetLocal;\n            long newAdjusted = nextLocal - diff;\n            int newOffset = getOffset(newAdjusted);\n            return offsetLocal == newOffset ? offsetLocal : offsetAdjusted;\n        }\n    } else {\n        return offsetAdjusted;\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..5d6be09c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,30 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    long prevLocal = previousTransition(instantAdjusted);\n+    long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+    if (offsetLocal > offsetAdjusted) {\n+        if (prevLocal != prevAdjusted) {\n+            int diff = offsetLocal - offsetAdjusted;\n+            long newAdjusted = prevLocal + diff;\n+            int newOffset = getOffset(newAdjusted);\n+            return offsetLocal == newOffset ? offsetLocal : offsetAdjusted;\n+        }\n+    } else if (offsetLocal < offsetAdjusted) {\n+        if (nextLocal != nextAdjusted) {\n+            int diff = offsetAdjusted - offsetLocal;\n+            long newAdjusted = nextLocal - diff;\n+            int newOffset = getOffset(newAdjusted);\n+            return offsetLocal == newOffset ? offsetLocal : offsetAdjusted;\n+        }\n+    } else {\n+        return offsetAdjusted;\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}