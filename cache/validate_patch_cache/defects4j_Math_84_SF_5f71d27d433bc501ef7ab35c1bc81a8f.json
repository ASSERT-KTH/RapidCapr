{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                simplex = expanded;\n            } else {\n                simplex = reflected;\n            }\n\n            return;\n\n        }\n\n        final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            simplex = contracted;\n            continue;\n        }\n\n        for (int i = 1; i < original.length; i++) {\n            final RealPointValuePair pair = original[i];\n            final double[] point = pair.getPoint();\n            final double[] newPoint = new double[point.length];\n            for (int j = 0; j < point.length; j++) {\n                newPoint[j] = best.getPoint()[j] + sigma * (point[j] - best.getPoint()[j]);\n            }\n            simplex[i] = new RealPointValuePair(newPoint, Double.NaN);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..3806fe929 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,47 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n+            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                simplex = expanded;\n+            } else {\n+                simplex = reflected;\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            return;\n \n-            // check convergence\n-                return;\n-            }\n+        }\n \n+        final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+        if (comparator.compare(contracted, best) < 0) {\n+            simplex = contracted;\n+            continue;\n         }\n \n+        for (int i = 1; i < original.length; i++) {\n+            final RealPointValuePair pair = original[i];\n+            final double[] point = pair.getPoint();\n+            final double[] newPoint = new double[point.length];\n+            for (int j = 0; j < point.length; j++) {\n+                newPoint[j] = best.getPoint()[j] + sigma * (point[j] - best.getPoint()[j]);\n+            }\n+            simplex[i] = new RealPointValuePair(newPoint, Double.NaN);\n+        }\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}