{
    "patch": "MockCandidateFilter.Result result = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\nif (result.candidate != null) {\n    field.setAccessible(true);\n    try {\n        field.set(fieldInstance, result.candidate);\n        return;\n    } catch (IllegalAccessException e) {\n        throw new RuntimeException(\"Failed to inject mock candidate\", e);\n    }\n} else if (fieldInstance == null && result.optional) {\n    field.setAccessible(true);\n    try {\n        field.set(fieldInstance, null);\n        return;\n    } catch (IllegalAccessException e) {\n        throw new RuntimeException(\"Failed to inject null value\", e);\n    }\n} else if (result.optional) {\n    return;\n} else {\n    throw new RuntimeException(\"No candidate found!\");\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..26fd4e39c 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,31 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+MockCandidateFilter.Result result = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+if (result.candidate != null) {\n+    field.setAccessible(true);\n+    try {\n+        field.set(fieldInstance, result.candidate);\n+        return;\n+    } catch (IllegalAccessException e) {\n+        throw new RuntimeException(\"Failed to inject mock candidate\", e);\n+    }\n+} else if (fieldInstance == null && result.optional) {\n+    field.setAccessible(true);\n+    try {\n+        field.set(fieldInstance, null);\n+        return;\n+    } catch (IllegalAccessException e) {\n+        throw new RuntimeException(\"Failed to inject null value\", e);\n+    }\n+} else if (result.optional) {\n+    return;\n+} else {\n+    throw new RuntimeException(\"No candidate found!\");\n+}\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}