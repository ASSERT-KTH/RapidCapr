{
    "patch": "          } else if (block.isLoop) {\n            return false;\n          }\n        }\n\n        // Make sure the variable is not read before or after the assignment.\n        Set<BasicBlock> visited = new HashSet<>();\n        Stack<BasicBlock> stack = new Stack<>();\n        visited.add(ref.getBasicBlock());\n        stack.add(ref.getBasicBlock());\n        while (!stack.isEmpty()) {\n          BasicBlock block = stack.pop();\n          for (DiGraphEdge<BasicBlock, Branch> edge : block.getOutgoingEdges()) {\n            BasicBlock succ = edge.getTarget();\n            if (visited.add(succ)) {\n              if (edge.getValue().isTrue()) {\n                if (succ != ref.getBasicBlock() || ref.getStatementIndex() > edge.getValue().getStatementIndex()) {\n                  return false;\n                }\n              }\n              stack.add(succ);\n            }\n          }\n        }\n\n        return true;\n      }\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..5ecf1794 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,35 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          } else if (block.isLoop) {\n+            return false;\n+          }\n+        }\n+\n+        // Make sure the variable is not read before or after the assignment.\n+        Set<BasicBlock> visited = new HashSet<>();\n+        Stack<BasicBlock> stack = new Stack<>();\n+        visited.add(ref.getBasicBlock());\n+        stack.add(ref.getBasicBlock());\n+        while (!stack.isEmpty()) {\n+          BasicBlock block = stack.pop();\n+          for (DiGraphEdge<BasicBlock, Branch> edge : block.getOutgoingEdges()) {\n+            BasicBlock succ = edge.getTarget();\n+            if (visited.add(succ)) {\n+              if (edge.getValue().isTrue()) {\n+                if (succ != ref.getBasicBlock() || ref.getStatementIndex() > edge.getValue().getStatementIndex()) {\n+                  return false;\n+                }\n+              }\n+              stack.add(succ);\n+            }\n+          }\n+        }\n+\n+        return true;\n+      }\n+      return false;\n+    }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}