{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      boolean isPropertyAssignment = false;\n      boolean isNewCall = false;\n      if (parent != null) {\n        Node grandParent = parent.getParent();\n        if (grandParent != null) {\n          if (grandParent.getType() == Token.CALL) {\n            isPropertyAssignment = grandParent.getFirstChild() != parent;\n            isNewCall = NodeUtil.isNew(grandParent.getFirstChild());\n          } else if (grandParent.getType() == Token.ASSIGN) {\n            isPropertyAssignment = grandParent.getLastChild() != parent;\n            isNewCall = NodeUtil.isNew(grandParent.getLastChild());\n          }\n        }\n        if (NodeUtil.isGet(parent)) {\n          Node lhs = parent.getFirstChild();\n          if (isPropertyAssignment && lhs.getType() == Token.GETPROP &&\n              \"prototype\".equals(lhs.getLastChild().getString())) {\n            return false;\n          }\n        }\n      }\n      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface())) {\n        return !isNewCall && isPropertyAssignment;\n      }\n      if (NodeUtil.isPrototypeProperty(parent)) {\n        return false;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..09d1adff 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,34 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      boolean isPropertyAssignment = false;\n+      boolean isNewCall = false;\n+      if (parent != null) {\n+        Node grandParent = parent.getParent();\n+        if (grandParent != null) {\n+          if (grandParent.getType() == Token.CALL) {\n+            isPropertyAssignment = grandParent.getFirstChild() != parent;\n+            isNewCall = NodeUtil.isNew(grandParent.getFirstChild());\n+          } else if (grandParent.getType() == Token.ASSIGN) {\n+            isPropertyAssignment = grandParent.getLastChild() != parent;\n+            isNewCall = NodeUtil.isNew(grandParent.getLastChild());\n+          }\n+        }\n+        if (NodeUtil.isGet(parent)) {\n+          Node lhs = parent.getFirstChild();\n+          if (isPropertyAssignment && lhs.getType() == Token.GETPROP &&\n+              \"prototype\".equals(lhs.getLastChild().getString())) {\n+            return false;\n+          }\n+        }\n+      }\n+      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface())) {\n+        return !isNewCall && isPropertyAssignment;\n+      }\n+      if (NodeUtil.isPrototypeProperty(parent)) {\n+        return false;\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 110 expected:<0> but was:<1>",
    "test_result": "FAIL"
}