{
    "patch": "    Set<Node> removableArgs = new HashSet<>();\n    int numArgsToRemove = 0;\n    boolean isRemoveLastArg = false;\n    int startRemovingAfter = argList.getChildCount();\n\n    // Mark unreferenced parameters as removable.\n    for (Node arg : argList.children()) {\n      Var var = fnScope.getVar(arg.getString());\n      if (!referenced.contains(var)) {\n        if (!modifyCallers) {\n          removableArgs.add(arg);\n        } else {\n          // Since we're optimizing callers, only remove non-matching param\n          // names in the function declaration.\n          isRemoveLastArg = true;\n          break;\n        }\n      } else {\n        // Once we encounter a referenced parameter, we can stop.\n        // We'll only remove params after any referenced params.\n        startRemovingAfter = argList.getChildIndex(arg);\n        break;\n      }\n    }\n\n    if (!modifyCallers && removableArgs.size() > 0) {\n      // We can safely remove unreferenced parameters from the arg list.\n      for (Node arg : removableArgs) {\n        argList.removeChild(arg);\n        numArgsToRemove++;\n      }\n    } else if (isRemoveLastArg) {\n      // Only remove parameters with names mismatched with the call sites.\n      callSiteOptimizer.removeUnmatchedFunctionArgs(fnScope);\n    }\n\n    if (numArgsToRemove > 0 || modifyCallers) {\n      compiler.reportCodeChange();\n      if (numArgsToRemove > 0) {\n        removeFunctionArgs(fnScope, numArgsToRemove);\n      }\n    }\n\n    // Remove unreferenced parameters from call sites.\n    if (modifyCallers) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d0adc677 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,51 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Set<Node> removableArgs = new HashSet<>();\n+    int numArgsToRemove = 0;\n+    boolean isRemoveLastArg = false;\n+    int startRemovingAfter = argList.getChildCount();\n+\n+    // Mark unreferenced parameters as removable.\n+    for (Node arg : argList.children()) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (!referenced.contains(var)) {\n+        if (!modifyCallers) {\n+          removableArgs.add(arg);\n+        } else {\n+          // Since we're optimizing callers, only remove non-matching param\n+          // names in the function declaration.\n+          isRemoveLastArg = true;\n+          break;\n+        }\n+      } else {\n+        // Once we encounter a referenced parameter, we can stop.\n+        // We'll only remove params after any referenced params.\n+        startRemovingAfter = argList.getChildIndex(arg);\n+        break;\n+      }\n+    }\n+\n+    if (!modifyCallers && removableArgs.size() > 0) {\n+      // We can safely remove unreferenced parameters from the arg list.\n+      for (Node arg : removableArgs) {\n+        argList.removeChild(arg);\n+        numArgsToRemove++;\n+      }\n+    } else if (isRemoveLastArg) {\n+      // Only remove parameters with names mismatched with the call sites.\n+      callSiteOptimizer.removeUnmatchedFunctionArgs(fnScope);\n+    }\n+\n+    if (numArgsToRemove > 0 || modifyCallers) {\n+      compiler.reportCodeChange();\n+      if (numArgsToRemove > 0) {\n+        removeFunctionArgs(fnScope, numArgsToRemove);\n+      }\n+    }\n+\n+    // Remove unreferenced parameters from call sites.\n+    if (modifyCallers) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}