{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n    if (typeVariable instanceof ParameterizedType) {\n        Type[] actualTypeArguments = ((ParameterizedType) typeVariable).getActualTypeArguments();\n        if (actualTypeArguments != null) {\n            for (Type actualTypeArgument : actualTypeArguments) {\n                if (actualTypeArgument != null) {\n                    registerTypeVariablesOn(actualTypeArgument);\n                }\n            }\n        }\n    } else if (typeVariable instanceof TypeVariableImpl) {\n        Type[] bounds = ((TypeVariableImpl)typeVariable).getBounds();\n        if (bounds != null) {\n            for (Type bound : bounds) {\n                if (bound instanceof TypeVariable) {\n                    readTypeVariables((TypeVariable<?>) bound);\n                } else {\n                    if (bound != null) {\n                        registerTypeVariablesOn(bound);\n                    }\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..29666c1db 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,38 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+    if (typeVariable instanceof ParameterizedType) {\n+        Type[] actualTypeArguments = ((ParameterizedType) typeVariable).getActualTypeArguments();\n+        if (actualTypeArguments != null) {\n+            for (Type actualTypeArgument : actualTypeArguments) {\n+                if (actualTypeArgument != null) {\n+                    registerTypeVariablesOn(actualTypeArgument);\n+                }\n+            }\n+        }\n+    } else if (typeVariable instanceof TypeVariableImpl) {\n+        Type[] bounds = ((TypeVariableImpl)typeVariable).getBounds();\n+        if (bounds != null) {\n+            for (Type bound : bounds) {\n+                if (bound instanceof TypeVariable) {\n+                    readTypeVariables((TypeVariable<?>) bound);\n+                } else {\n+                    if (bound != null) {\n+                        registerTypeVariablesOn(bound);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}