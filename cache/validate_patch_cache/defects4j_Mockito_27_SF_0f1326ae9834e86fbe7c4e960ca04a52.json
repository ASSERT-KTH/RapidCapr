{
    "patch": "public <T> void resetMock(T mock) {\n    try {\n        Object oldCallback = ((Factory) mock).getCallback(0);\n        MethodInterceptorFilter newFilter = null;\n        if (oldCallback instanceof MockHandlerInterface) {\n            MockHandler<T> newMockHandler = new MockHandler<T>((MockHandlerInterface<T>) oldCallback);\n            newFilter = new MethodInterceptorFilter(newMockHandler,\n                    (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        } else if (oldCallback instanceof MethodInterceptorFilter) {\n            newFilter = (MethodInterceptorFilter) oldCallback;\n            MockHandlerInterface<T> oldMockHandler = (MockHandlerInterface<T>) ((MethodInterceptorFilter) oldCallback).getHandler();\n            MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n            newFilter.setHandler(newMockHandler);\n        }\n        if (newFilter != null) {\n            ((Factory) mock).setCallback(0, newFilter);\n        }\n    } catch (Throwable t) {\n        throw new RuntimeException(t);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..395a6d316 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,28 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    try {\n+        Object oldCallback = ((Factory) mock).getCallback(0);\n+        MethodInterceptorFilter newFilter = null;\n+        if (oldCallback instanceof MockHandlerInterface) {\n+            MockHandler<T> newMockHandler = new MockHandler<T>((MockHandlerInterface<T>) oldCallback);\n+            newFilter = new MethodInterceptorFilter(newMockHandler,\n+                    (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        } else if (oldCallback instanceof MethodInterceptorFilter) {\n+            newFilter = (MethodInterceptorFilter) oldCallback;\n+            MockHandlerInterface<T> oldMockHandler = (MockHandlerInterface<T>) ((MethodInterceptorFilter) oldCallback).getHandler();\n+            MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+            newFilter.setHandler(newMockHandler);\n+        }\n+        if (newFilter != null) {\n+            ((Factory) mock).setCallback(0, newFilter);\n+        }\n+    } catch (Throwable t) {\n+        throw new RuntimeException(t);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}