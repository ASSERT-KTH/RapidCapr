{
    "patch": "public class StringUtils {\n\n    public static boolean containsAny(CharSequence sequence, char... searchChars) {\n        if (isEmpty(sequence) || searchChars == null || searchChars.length == 0) {\n            return false;\n        }\n\n        int strLen = sequence.length();\n        int searchLen = searchChars.length;\n        int index = -1;\n\n        // Check if any search character is a supplementary Unicode character\n        for (int i = 0; i < searchLen; i++) {\n            if (Character.isHighSurrogate(searchChars[i])) {\n                if (i < searchLen - 1 && Character.isLowSurrogate(searchChars[i + 1])) {\n                    i++;\n                } else {\n                    throw new IllegalArgumentException(\"Invalid surrogate pair at \" + i);\n                }\n            }\n        }\n\n        // Search the input sequence for any character present in the search characters\n        outer: for (int i = 0; i < strLen; i++) {\n            char ch = sequence.charAt(i);\n\n            // Check if the current character matches any of the search characters\n            for (int j = 0; j < searchLen; j++) {\n                char searchChar = searchChars[j];\n                if (searchChar == ch) {\n                    index = i;\n                    break outer;\n                }\n                if (Character.isHighSurrogate(searchChar)) {\n                    if (j < searchLen - 1 && i < strLen - 1) {\n                        if (searchChars[j + 1] == sequence.charAt(i + 1) &&\n                                Character.isLowSurrogate(sequence.charAt(i))) {\n                            index = i;\n                            break outer;\n                        }\n                    }\n                }\n            }\n        }\n        return index >= 0;\n    }\n\n    private static boolean isEmpty(CharSequence cs) {\n        return cs == null || cs.length() == 0;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..05f5bfa0 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,57 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public class StringUtils {\n+\n+    public static boolean containsAny(CharSequence sequence, char... searchChars) {\n+        if (isEmpty(sequence) || searchChars == null || searchChars.length == 0) {\n+            return false;\n+        }\n+\n+        int strLen = sequence.length();\n+        int searchLen = searchChars.length;\n+        int index = -1;\n+\n+        // Check if any search character is a supplementary Unicode character\n+        for (int i = 0; i < searchLen; i++) {\n+            if (Character.isHighSurrogate(searchChars[i])) {\n+                if (i < searchLen - 1 && Character.isLowSurrogate(searchChars[i + 1])) {\n+                    i++;\n+                } else {\n+                    throw new IllegalArgumentException(\"Invalid surrogate pair at \" + i);\n+                }\n+            }\n+        }\n+\n+        // Search the input sequence for any character present in the search characters\n+        outer: for (int i = 0; i < strLen; i++) {\n+            char ch = sequence.charAt(i);\n+\n+            // Check if the current character matches any of the search characters\n+            for (int j = 0; j < searchLen; j++) {\n+                char searchChar = searchChars[j];\n+                if (searchChar == ch) {\n+                    index = i;\n+                    break outer;\n+                }\n+                if (Character.isHighSurrogate(searchChar)) {\n+                    if (j < searchLen - 1 && i < strLen - 1) {\n+                        if (searchChars[j + 1] == sequence.charAt(i + 1) &&\n+                                Character.isLowSurrogate(sequence.charAt(i))) {\n+                            index = i;\n+                            break outer;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return index >= 0;\n+    }\n+\n+    private static boolean isEmpty(CharSequence cs) {\n+        return cs == null || cs.length() == 0;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}