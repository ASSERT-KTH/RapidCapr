{
    "patch": "public String addInOperator(String input) {\n    String[] lines = input.split(\"\\n\");\n    StringBuilder result = new StringBuilder();\n    boolean inForLoop = false;\n    for (String line : lines) {\n        if (inForLoop) {\n            int startIndex = 0;\n            int inIndex = line.indexOf(\"in\", startIndex);\n            while (inIndex != -1) {\n                if (line.charAt(inIndex - 1) != '\\'' && line.charAt(inIndex - 1) != '\\\"' \n                        && line.charAt(inIndex + 2) != '\\'' && line.charAt(inIndex + 2) != '\\\"' ) {\n                    line = line.substring(0, inIndex) + \"[\" + line.substring(inIndex, inIndex + 2) + \"]\" + line.substring(inIndex + 2);\n                }\n                startIndex = inIndex + 3;\n                inIndex = line.indexOf(\"in\", startIndex);\n            }\n            result.append(line).append(\"\\n\");\n            if (line.contains(\"{\")) {\n                inForLoop = false;\n            }\n        } else {\n            result.append(line).append(\"\\n\");\n            if (line.contains(\"for\")) {\n                inForLoop = true;\n            }\n        }\n    }\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..25c8143c 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,35 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String addInOperator(String input) {\n+    String[] lines = input.split(\"\\n\");\n+    StringBuilder result = new StringBuilder();\n+    boolean inForLoop = false;\n+    for (String line : lines) {\n+        if (inForLoop) {\n+            int startIndex = 0;\n+            int inIndex = line.indexOf(\"in\", startIndex);\n+            while (inIndex != -1) {\n+                if (line.charAt(inIndex - 1) != '\\'' && line.charAt(inIndex - 1) != '\\\"' \n+                        && line.charAt(inIndex + 2) != '\\'' && line.charAt(inIndex + 2) != '\\\"' ) {\n+                    line = line.substring(0, inIndex) + \"[\" + line.substring(inIndex, inIndex + 2) + \"]\" + line.substring(inIndex + 2);\n+                }\n+                startIndex = inIndex + 3;\n+                inIndex = line.indexOf(\"in\", startIndex);\n+            }\n+            result.append(line).append(\"\\n\");\n+            if (line.contains(\"{\")) {\n+                inForLoop = false;\n+            }\n+        } else {\n+            result.append(line).append(\"\\n\");\n+            if (line.contains(\"for\")) {\n+                inForLoop = true;\n+            }\n+        }\n+    }\n+    return result.toString();\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}