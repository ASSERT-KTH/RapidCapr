{
    "patch": "public <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\n        if (mock instanceof MockAccess) {\n            MockAccess mockAccess = (MockAccess) mock;\n            CglibMockMaker cglibMockMaker = new CglibMockMaker();\n            Class<?> mockClass = mock.getClass();\n\n            if (CglibMockMaker.isMock(mock)) {\n                mockClass = mockClass.getSuperclass();\n            }\n\n            Enhancer enhancer = new Enhancer();\n            enhancer.setSuperclass(mockClass);\n            enhancer.setCallbackType(MethodInterceptor.class);\n            Class<?> proxyClass = enhancer.createClass();\n\n            MethodInterceptorFilter filter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) withSettings().defaultAnswer(RETURNS_DEFAULTS));\n\n            MethodInterceptor[] callbackInstances = new MethodInterceptor[] { filter, (MethodInterceptor) mockAccess.getMockHandler(), UNDEFINED };\n\n            Object newProxyInstance = cglibMockMaker.createMock(proxyClass, callbackInstances);\n\n            mockAccess.setMockitoInterceptor((MethodInterceptor) newProxyInstance);\n            mockAccess.setMockHandler(newMockHandler);\n        } else if(mock instanceof Factory) {\n            Factory factory = (Factory) mock;\n            Callback[] callbacks = new Callback[factory.getCallbacks().length + 1];\n            callbacks[0] = newFilter;\n            System.arraycopy(factory.getCallbacks(), 0, callbacks, 1, factory.getCallbacks().length);\n            factory.setCallbacks(callbacks);\n        } else {\n            // It's a regular mock object\n            ((MockImpl) mock).getInvocationContainer().setHandler(newMockHandler);\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..d36c125fd 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,46 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+        if (mock instanceof MockAccess) {\n+            MockAccess mockAccess = (MockAccess) mock;\n+            CglibMockMaker cglibMockMaker = new CglibMockMaker();\n+            Class<?> mockClass = mock.getClass();\n+\n+            if (CglibMockMaker.isMock(mock)) {\n+                mockClass = mockClass.getSuperclass();\n+            }\n+\n+            Enhancer enhancer = new Enhancer();\n+            enhancer.setSuperclass(mockClass);\n+            enhancer.setCallbackType(MethodInterceptor.class);\n+            Class<?> proxyClass = enhancer.createClass();\n+\n+            MethodInterceptorFilter filter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) withSettings().defaultAnswer(RETURNS_DEFAULTS));\n+\n+            MethodInterceptor[] callbackInstances = new MethodInterceptor[] { filter, (MethodInterceptor) mockAccess.getMockHandler(), UNDEFINED };\n+\n+            Object newProxyInstance = cglibMockMaker.createMock(proxyClass, callbackInstances);\n+\n+            mockAccess.setMockitoInterceptor((MethodInterceptor) newProxyInstance);\n+            mockAccess.setMockHandler(newMockHandler);\n+        } else if(mock instanceof Factory) {\n+            Factory factory = (Factory) mock;\n+            Callback[] callbacks = new Callback[factory.getCallbacks().length + 1];\n+            callbacks[0] = newFilter;\n+            System.arraycopy(factory.getCallbacks(), 0, callbacks, 1, factory.getCallbacks().length);\n+            factory.setCallbacks(callbacks);\n+        } else {\n+            // It's a regular mock object\n+            ((MockImpl) mock).getInvocationContainer().setHandler(newMockHandler);\n+        }\n+    }\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}