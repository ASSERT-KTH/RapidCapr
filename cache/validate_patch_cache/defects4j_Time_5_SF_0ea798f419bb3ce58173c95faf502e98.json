{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    DurationFieldType[] setFields = type.getFields();\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    for (DurationFieldType setField : setFields) {\n        if (setField.equals(DurationFieldType.years())) {\n            millis = FieldUtils.safeAdd(millis, (((long) getYears()) * ((long) DateTimeConstants.MILLIS_PER_YEAR)));\n        }\n        else if (setField.equals(DurationFieldType.months())) {\n            millis = FieldUtils.safeAdd(millis, (((long) getMonths()) * ((long) DateTimeConstants.MILLIS_PER_MONTH)));\n        }\n        else if (setField.equals(DurationFieldType.weeks())) {\n            millis = FieldUtils.safeAdd(millis, (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)));\n        }\n        else if (setField.equals(DurationFieldType.days())) {\n            millis = FieldUtils.safeAdd(millis, (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)));\n        }\n        else if (setField.equals(DurationFieldType.hours())) {\n            millis = FieldUtils.safeAdd(millis, (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)));\n        }\n        else if (setField.equals(DurationFieldType.minutes())) {\n            millis = FieldUtils.safeAdd(millis, (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)));\n        }\n        else if (setField.equals(DurationFieldType.seconds())) {\n            millis = FieldUtils.safeAdd(millis, (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)));\n        }\n        else if (setField.equals(DurationFieldType.millis())) {\n            millis = FieldUtils.safeAdd(millis, getMillis());\n        }\n    }\n\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n        int years = getYears();\n        int months = getMonths();\n        if (years != 0 || months != 0) {\n            if (type.isSupported(DurationFieldType.years())) {\n                result = result.withYears(years);\n                months = months % 12;\n            }\n            if (type.isSupported(DurationFieldType.months())) {\n                result = result.withMonths(months);\n            }\n        }\n    }\n\n    return result.normalizedStandard();\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..9b89c330 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,54 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    DurationFieldType[] setFields = type.getFields();\n+    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+    for (DurationFieldType setField : setFields) {\n+        if (setField.equals(DurationFieldType.years())) {\n+            millis = FieldUtils.safeAdd(millis, (((long) getYears()) * ((long) DateTimeConstants.MILLIS_PER_YEAR)));\n+        }\n+        else if (setField.equals(DurationFieldType.months())) {\n+            millis = FieldUtils.safeAdd(millis, (((long) getMonths()) * ((long) DateTimeConstants.MILLIS_PER_MONTH)));\n+        }\n+        else if (setField.equals(DurationFieldType.weeks())) {\n+            millis = FieldUtils.safeAdd(millis, (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)));\n+        }\n+        else if (setField.equals(DurationFieldType.days())) {\n+            millis = FieldUtils.safeAdd(millis, (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)));\n+        }\n+        else if (setField.equals(DurationFieldType.hours())) {\n+            millis = FieldUtils.safeAdd(millis, (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)));\n+        }\n+        else if (setField.equals(DurationFieldType.minutes())) {\n+            millis = FieldUtils.safeAdd(millis, (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)));\n+        }\n+        else if (setField.equals(DurationFieldType.seconds())) {\n+            millis = FieldUtils.safeAdd(millis, (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)));\n+        }\n+        else if (setField.equals(DurationFieldType.millis())) {\n+            millis = FieldUtils.safeAdd(millis, getMillis());\n+        }\n+    }\n+\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+\n+    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n         int years = getYears();\n         int months = getMonths();\n         if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n+            if (type.isSupported(DurationFieldType.years())) {\n                 result = result.withYears(years);\n+                months = months % 12;\n             }\n-            if (months != 0) {\n+            if (type.isSupported(DurationFieldType.months())) {\n                 result = result.withMonths(months);\n             }\n         }\n-        return result;\n     }\n \n+    return result.normalizedStandard();\n+}\n+\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}