{
    "patch": "        if (currentStrategy == null) {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n        if(currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n        while (patternMatcher.find()) {\n            String nextFormatField = patternMatcher.group();\n            nextStrategy = getStrategy(nextFormatField);\n            if (currentStrategy != nextStrategy) {\n                if (!currentStrategy.addRegex(this, regex)) {\n                    collector.remove(currentStrategy);\n                }\n                currentStrategy = nextStrategy;\n                if (currentStrategy == null) {\n                    break;\n                }\n                if (!currentStrategy.addRegex(this, regex)) {\n                    collector.remove(currentStrategy);\n                }\n            }\n            currentFormatField = nextFormatField;\n        }\n        currentFormatField = null;\n        if (currentStrategy != null) {\n            collector.remove(currentStrategy);\n            if (currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            }\n        }\n        if (collector.isEmpty()) {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n        strategies = collector.toArray(new Strategy[collector.size()]);\n        parsePattern = Pattern.compile(regex.toString());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..825e93e9 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,41 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+        if (currentStrategy == null) {\n+            throw new IllegalArgumentException(\"Invalid pattern\");\n+        }\n+        if(currentStrategy.addRegex(this, regex)) {\n+            collector.add(currentStrategy);\n+        }\n+        while (patternMatcher.find()) {\n+            String nextFormatField = patternMatcher.group();\n+            nextStrategy = getStrategy(nextFormatField);\n+            if (currentStrategy != nextStrategy) {\n+                if (!currentStrategy.addRegex(this, regex)) {\n+                    collector.remove(currentStrategy);\n+                }\n+                currentStrategy = nextStrategy;\n+                if (currentStrategy == null) {\n+                    break;\n+                }\n+                if (!currentStrategy.addRegex(this, regex)) {\n+                    collector.remove(currentStrategy);\n+                }\n+            }\n+            currentFormatField = nextFormatField;\n+        }\n+        currentFormatField = null;\n+        if (currentStrategy != null) {\n+            collector.remove(currentStrategy);\n+            if (currentStrategy.addRegex(this, regex)) {\n+                collector.add(currentStrategy);\n+            }\n+        }\n+        if (collector.isEmpty()) {\n+            throw new IllegalArgumentException(\"Invalid pattern\");\n+        }\n+        strategies = collector.toArray(new Strategy[collector.size()]);\n+        parsePattern = Pattern.compile(regex.toString());\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}