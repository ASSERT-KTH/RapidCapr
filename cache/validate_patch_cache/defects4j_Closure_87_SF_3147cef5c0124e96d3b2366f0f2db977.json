{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  // Check that the node is a BLOCK node with only one child.\n  if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n    return false;\n  }\n  Node child = n.getFirstChild();\n\n  // Check that the child is a simple expression and not a function call.\n  if (!isSimpleExpression(child) || child.getType() == Token.CALL) {\n    return false;\n  }\n  Node parent = n.getParent();\n  if (parent == null) {\n    return false;\n  }\n  int parentType = parent.getType();\n  switch (parentType) {\n    // Block contents used in var/let declarations are foldable.\n    case Token.VAR:\n    case Token.LET:\n      return true;\n    // Block contents used as the RHS of assignments are foldable.\n    case Token.ASSIGN: {\n      Node lhs = parent.getFirstChild();\n      return lhs != null && lhs.canBeLeftHandSideOfAssign();\n    }\n    // Block contents used as EXPR_RESULT are foldable if the result is used.\n    case Token.EXPR_RESULT:\n      return isParentResultUsed(n);\n    // Block contents used as the body of control flow statements are foldable.\n    case Token.IF:\n    case Token.WHILE:\n    case Token.DO:\n    case Token.FOR:\n    case Token.FOR_OF:\n    case Token.FOR_AWAIT_OF:\n      Node grandparent = parent.getParent();\n      return grandparent != null && isFoldableControlStructure(grandparent);\n    default:\n      return false;\n  }\n}\n\nprivate boolean isSimpleExpression(Node n) {\n  int type = n.getType();\n  return type == Token.NAME || type == Token.STRING || type == Token.NUMBER\n      || type == Token.NULL || type == Token.FALSE || type == Token.TRUE;\n}\n\nprivate boolean isParentResultUsed(Node n) {\n  Node parent = n.getParent();\n  if (parent == null) {\n    return false;\n  }\n  int parentType = parent.getType();\n  switch (parentType) {\n    // Return statements will use the result of an EXPR_RESULT.\n    case Token.RETURN:\n      return true;\n    // If the EXPR_RESULT is the only child of another EXPR_RESULT,\n    // the parent is also evaluated for its result.\n    case Token.EXPR_RESULT:\n      return parent.getChildCount() == 1 || isParentResultUsed(parent);\n    default:\n      return false;\n  }\n}\n\nprivate boolean isFoldableControlStructure(Node n) {\n  int type = n.getType();\n  return type == Token.IF || type == Token.WHILE || type == Token.DO || type == Token.FOR ||\n      type == Token.FOR_OF || type == Token.FOR_AWAIT_OF;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..842d72cd 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,79 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+private boolean isFoldableExpressBlock(Node n) {\n+  // Check that the node is a BLOCK node with only one child.\n+  if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n+    return false;\n+  }\n+  Node child = n.getFirstChild();\n+\n+  // Check that the child is a simple expression and not a function call.\n+  if (!isSimpleExpression(child) || child.getType() == Token.CALL) {\n+    return false;\n+  }\n+  Node parent = n.getParent();\n+  if (parent == null) {\n+    return false;\n+  }\n+  int parentType = parent.getType();\n+  switch (parentType) {\n+    // Block contents used in var/let declarations are foldable.\n+    case Token.VAR:\n+    case Token.LET:\n+      return true;\n+    // Block contents used as the RHS of assignments are foldable.\n+    case Token.ASSIGN: {\n+      Node lhs = parent.getFirstChild();\n+      return lhs != null && lhs.canBeLeftHandSideOfAssign();\n     }\n+    // Block contents used as EXPR_RESULT are foldable if the result is used.\n+    case Token.EXPR_RESULT:\n+      return isParentResultUsed(n);\n+    // Block contents used as the body of control flow statements are foldable.\n+    case Token.IF:\n+    case Token.WHILE:\n+    case Token.DO:\n+    case Token.FOR:\n+    case Token.FOR_OF:\n+    case Token.FOR_AWAIT_OF:\n+      Node grandparent = parent.getParent();\n+      return grandparent != null && isFoldableControlStructure(grandparent);\n+    default:\n+      return false;\n+  }\n+}\n+\n+private boolean isSimpleExpression(Node n) {\n+  int type = n.getType();\n+  return type == Token.NAME || type == Token.STRING || type == Token.NUMBER\n+      || type == Token.NULL || type == Token.FALSE || type == Token.TRUE;\n+}\n \n+private boolean isParentResultUsed(Node n) {\n+  Node parent = n.getParent();\n+  if (parent == null) {\n     return false;\n   }\n+  int parentType = parent.getType();\n+  switch (parentType) {\n+    // Return statements will use the result of an EXPR_RESULT.\n+    case Token.RETURN:\n+      return true;\n+    // If the EXPR_RESULT is the only child of another EXPR_RESULT,\n+    // the parent is also evaluated for its result.\n+    case Token.EXPR_RESULT:\n+      return parent.getChildCount() == 1 || isParentResultUsed(parent);\n+    default:\n+      return false;\n+  }\n+}\n+\n+private boolean isFoldableControlStructure(Node n) {\n+  int type = n.getType();\n+  return type == Token.IF || type == Token.WHILE || type == Token.DO || type == Token.FOR ||\n+      type == Token.FOR_OF || type == Token.FOR_AWAIT_OF;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}