{
    "patch": "private boolean isThisContext(Node n) {\n  Node parent = n.getParent();\n  if (parent == null) {\n    return false;\n  }\n  if (parent.isGetProp() && parent.getFirstChild() == n) {\n    return true;\n  }\n  if (parent.isCall() && parent.getFirstChild() == n) {\n    Node grandparent = parent.getParent();\n    if (grandparent != null && grandparent.isGetProp()) {\n      return true;\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..eca394fd 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+private boolean isThisContext(Node n) {\n+  Node parent = n.getParent();\n+  if (parent == null) {\n+    return false;\n+  }\n+  if (parent.isGetProp() && parent.getFirstChild() == n) {\n+    return true;\n+  }\n+  if (parent.isCall() && parent.getFirstChild() == n) {\n+    Node grandparent = parent.getParent();\n+    if (grandparent != null && grandparent.isGetProp()) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}