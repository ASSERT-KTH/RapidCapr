{
    "patch": "if (hasInfiniteBounds) {\n    // If there is at least one finite bound, none can be infinite,\n    // because mixed cases are not supported by the current code.\n    throw new NumberIsTooLargeException(0, Double.POSITIVE_INFINITY, false);\n} else {\n    // Convert API to internal handling of boundaries.\n    boundaries = new double[2][];\n    boundaries[0] = lB;\n    boundaries[1] = uB;\n\n    // Abort early if the normalization will overflow (cf. \"encode\" method).\n    double boundaryRange = boundaries[1][0] - boundaries[0][0];\n    double inputSigmaMax = inputSigma != null ? Arrays.stream(inputSigma).max().getAsDouble() : 0.0;\n    if (boundaryRange > Double.MAX_VALUE / inputSigmaMax) {\n        throw new NumberIsTooLargeException(boundaryRange, Double.MAX_VALUE / inputSigmaMax, true);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..06da0cf7a 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,23 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+if (hasInfiniteBounds) {\n+    // If there is at least one finite bound, none can be infinite,\n+    // because mixed cases are not supported by the current code.\n+    throw new NumberIsTooLargeException(0, Double.POSITIVE_INFINITY, false);\n+} else {\n+    // Convert API to internal handling of boundaries.\n+    boundaries = new double[2][];\n+    boundaries[0] = lB;\n+    boundaries[1] = uB;\n+\n+    // Abort early if the normalization will overflow (cf. \"encode\" method).\n+    double boundaryRange = boundaries[1][0] - boundaries[0][0];\n+    double inputSigmaMax = inputSigma != null ? Arrays.stream(inputSigma).max().getAsDouble() : 0.0;\n+    if (boundaryRange > Double.MAX_VALUE / inputSigmaMax) {\n+        throw new NumberIsTooLargeException(boundaryRange, Double.MAX_VALUE / inputSigmaMax, true);\n+    }\n+}\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "java.lang.Exception: Unexpected exception, expected<org.apache.commons.math3.exception.NumberIsTooLargeException> but was<org.apache.commons.math3.exception.MathIllegalStateException>",
    "test_result": "FAIL"
}