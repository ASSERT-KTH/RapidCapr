{
    "patch": "// Functions with explicit 'this' types must be called in a GETPROP\n// or GETELEM.\nJSType typeOfThis = functionType.getTypeOfThis();\nif (typeOfThis != null) {\n  boolean isValidThis = false;\n  Node parent = n.getParent();\n  if (NodeUtil.isGetOrSetKey(parent) || NodeUtil.isFunctionExpression(parent)) {\n    isValidThis = true;\n  } else if (parent.isCall() || parent.isNew()) {\n    Node method = parent.getFirstChild();\n    Node receiver = method.getFirstChild();\n    JSType receiverType = getJSType(receiver).restrictByNotNullOrUndefined();\n    isValidThis = receiverType.equals(typeOfThis);\n  }\n  if (!isValidThis) {\n    report(t, n, EXPECTED_THIS_TYPE, typeOfThis.toString());\n    return;\n  }\n}\nvisitParameterList(t, n, functionType);\nensureTyped(t, n, functionType.getReturnType());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..81b24c42 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+// Functions with explicit 'this' types must be called in a GETPROP\n+// or GETELEM.\n+JSType typeOfThis = functionType.getTypeOfThis();\n+if (typeOfThis != null) {\n+  boolean isValidThis = false;\n+  Node parent = n.getParent();\n+  if (NodeUtil.isGetOrSetKey(parent) || NodeUtil.isFunctionExpression(parent)) {\n+    isValidThis = true;\n+  } else if (parent.isCall() || parent.isNew()) {\n+    Node method = parent.getFirstChild();\n+    Node receiver = method.getFirstChild();\n+    JSType receiverType = getJSType(receiver).restrictByNotNullOrUndefined();\n+    isValidThis = receiverType.equals(typeOfThis);\n+  }\n+  if (!isValidThis) {\n+    report(t, n, EXPECTED_THIS_TYPE, typeOfThis.toString());\n+    return;\n+  }\n+}\n+visitParameterList(t, n, functionType);\n+ensureTyped(t, n, functionType.getReturnType());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}