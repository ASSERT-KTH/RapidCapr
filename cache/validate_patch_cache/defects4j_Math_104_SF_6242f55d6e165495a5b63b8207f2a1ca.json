{
    "patch": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (Math.abs(x - a * Math.log(x)) < Double.MIN_VALUE) {\n        return 0.0;\n    }\n    if (x == 0.0) {\n        return a == 0.0 ? Double.NaN : 0.0;\n    }\n    int i = 0;\n    double err = Double.MAX_VALUE;\n    double p = Math.exp(-x + a * Math.log(x));\n    while (i < maxIterations && err > epsilon) {\n        i++;\n        double oldP = p;\n        p += Math.exp(a * Math.log(x) - x + i * Math.log(x) - LogGamma.logGamma(a + i));\n        err = Math.abs(p - oldP);\n    }\n    if (i == maxIterations) {\n        throw new ArithmeticException(\"Maximal number of iterations (\" + maxIterations + \") exceeded\");\n    }\n    return p;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..9c4443328 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,30 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (Math.abs(x - a * Math.log(x)) < Double.MIN_VALUE) {\n+        return 0.0;\n+    }\n+    if (x == 0.0) {\n+        return a == 0.0 ? Double.NaN : 0.0;\n+    }\n+    int i = 0;\n+    double err = Double.MAX_VALUE;\n+    double p = Math.exp(-x + a * Math.log(x));\n+    while (i < maxIterations && err > epsilon) {\n+        i++;\n+        double oldP = p;\n+        p += Math.exp(a * Math.log(x) - x + i * Math.log(x) - LogGamma.logGamma(a + i));\n+        err = Math.abs(p - oldP);\n+    }\n+    if (i == maxIterations) {\n+        throw new ArithmeticException(\"Maximal number of iterations (\" + maxIterations + \") exceeded\");\n+    }\n+    return p;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}