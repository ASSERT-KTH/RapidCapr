{
    "patch": "public ReturnValue execute(ExecutionEvent event) {\n    IWorkbench workbench = PlatformUI.getWorkbench();\n    if (workbench == null) {\n        return ReturnValue.error(\"Failed to obtain Workbench instance.\");\n    }\n    IWorkbenchWindow window = workbench.getActiveWorkbenchWindow();\n    if (window == null) {\n        return ReturnValue.error(\"Failed to obtain Workbench window instance.\");\n    }\n    IWorkbenchPage page = window.getActivePage();\n    if (page == null) {\n        return ReturnValue.error(\"Failed to obtain Workbench page instance.\");\n    }\n    IEditorPart activeEditor = page.getActiveEditor();\n    if(activeEditor == null){\n        return ReturnValue.error(\"Failed to obtain active editor instance.\");\n    }\n    ITextEditor textEditor = activeEditor.getAdapter(ITextEditor.class);\n    if (textEditor == null) {\n        return ReturnValue.error(\"Failed to obtain text editor instance.\");\n    }\n    IDocumentProvider documentProvider = textEditor.getDocumentProvider();\n    if(documentProvider == null){\n        return ReturnValue.error(\"Failed to obtain document provider instance.\");\n    }\n    IDocument document = documentProvider.getDocument(textEditor.getEditorInput());\n    if(document == null){\n        return ReturnValue.error(\"Failed to obtain document instance.\");\n    }\n    String text = document.get();\n    if (text == null) {\n        return ReturnValue.error(\"Failed to obtain file content.\");\n    }\n    String[] lines = text.split(\"\\\\r?\\\\n\");\n    if (lines == null) {\n        return ReturnValue.error(\"Failed to split file content into separate lines.\");\n    }\n    // remove blank lines\n    List<String> linesList = Arrays.asList(lines);\n    linesList.removeIf(s -> s.trim().isEmpty()); // <-- the fixed line\n    lines = linesList.toArray(new String[0]);\n    return new ReturnValue(lines);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}