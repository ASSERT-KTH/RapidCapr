{
    "patch": "        // The parameters object literal setters can not be removed.\n        return;\n    }\n    Node argList = NodeUtil.getFunctionParameters(function);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n        // Strip unreferenced args off the end of the function declaration.\n        Node argNode = argList.getFirstChild();\n        while (argNode != null && !referenced.contains(fnScope.getVar(argNode.getString()))) {\n            argNode = argList.removeChild(argNode);\n            compiler.reportCodeChange();\n        }\n        // Strip unreferenced args in the middle or at the beginning of the function declaration.\n        while (argNode != null) {\n            Node next = argNode.getNext();\n            if (!referenced.contains(fnScope.getVar(argNode.getString()))) {\n                argList.removeChild(argNode);\n                compiler.reportCodeChange();\n            }\n            argNode = next;\n        }\n        // Strip parameter names on function expressions\n        if (argList.hasMoreThanOneChild()) {\n            for (Node argNodeTemp = argList.getFirstChild(), paramNode = function.getFirstChild().getNext(); \n                  argNodeTemp != null; \n                  argNodeTemp = argNodeTemp.getNext(), paramNode = paramNode.getNext()) {\n                if (argNodeTemp.isName()) {\n                    Preconditions.checkState(paramNode.isParamList());\n                    paramNode.setParamName(argNodeTemp.getString());\n                }\n            }\n        }\n    } else {\n        callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d1b8918a 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,40 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+        // The parameters object literal setters can not be removed.\n+        return;\n+    }\n+    Node argList = NodeUtil.getFunctionParameters(function);\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+        // Strip unreferenced args off the end of the function declaration.\n+        Node argNode = argList.getFirstChild();\n+        while (argNode != null && !referenced.contains(fnScope.getVar(argNode.getString()))) {\n+            argNode = argList.removeChild(argNode);\n+            compiler.reportCodeChange();\n+        }\n+        // Strip unreferenced args in the middle or at the beginning of the function declaration.\n+        while (argNode != null) {\n+            Node next = argNode.getNext();\n+            if (!referenced.contains(fnScope.getVar(argNode.getString()))) {\n+                argList.removeChild(argNode);\n+                compiler.reportCodeChange();\n+            }\n+            argNode = next;\n+        }\n+        // Strip parameter names on function expressions\n+        if (argList.hasMoreThanOneChild()) {\n+            for (Node argNodeTemp = argList.getFirstChild(), paramNode = function.getFirstChild().getNext(); \n+                  argNodeTemp != null; \n+                  argNodeTemp = argNodeTemp.getNext(), paramNode = paramNode.getNext()) {\n+                if (argNodeTemp.isName()) {\n+                    Preconditions.checkState(paramNode.isParamList());\n+                    paramNode.setParamName(argNodeTemp.getString());\n+                }\n+            }\n+        }\n+    } else {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}