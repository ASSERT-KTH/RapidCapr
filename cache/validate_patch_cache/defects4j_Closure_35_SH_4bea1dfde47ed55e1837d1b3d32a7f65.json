{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String propName : constraintObj.getOwnPropertyNames()) {\n          if (objType.hasProperty(propName)) continue;\n          JSType propType = constraintObj.getPropertyType(propName);\n          JSType narrowedType = propType.restrictByNotNullOrUndefined();\n          if (narrowedType.isBottom()) continue;\n          objType.defineInferredProperty(propName, narrowedType, null);\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..7bf075de 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1121,16 +1121,12 @@ class TypeInference\n     if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n+        for (String propName : constraintObj.getOwnPropertyNames()) {\n+          if (objType.hasProperty(propName)) continue;\n+          JSType propType = constraintObj.getPropertyType(propName);\n+          JSType narrowedType = propType.restrictByNotNullOrUndefined();\n+          if (narrowedType.isBottom()) continue;\n+          objType.defineInferredProperty(propName, narrowedType, null);\n         }\n       }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}