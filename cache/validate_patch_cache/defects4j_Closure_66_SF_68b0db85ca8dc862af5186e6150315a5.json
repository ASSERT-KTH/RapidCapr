{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    JsonObject jsonObject = JsonParser.parseString(jsonStr).getAsJsonObject();\n    double totalCount = jsonObject.get(\"totalCount\").getAsDouble();    \n    double typedCount = jsonObject.getAsJsonObject(\"typeCount\").entrySet().stream()\n        .filter(e -> isTyped(e.getKey()))\n        .mapToDouble(e -> e.getValue().getAsDouble())\n        .sum();\n    return (typedCount / totalCount) * 100;\n}\n\nprivate static boolean isTyped(String type) {\n    return type.matches(\"[A-Z]\\\\d+\");\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..85d1be81 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    JsonObject jsonObject = JsonParser.parseString(jsonStr).getAsJsonObject();\n+    double totalCount = jsonObject.get(\"totalCount\").getAsDouble();    \n+    double typedCount = jsonObject.getAsJsonObject(\"typeCount\").entrySet().stream()\n+        .filter(e -> isTyped(e.getKey()))\n+        .mapToDouble(e -> e.getValue().getAsDouble())\n+        .sum();\n+    return (typedCount / totalCount) * 100;\n+}\n+\n+private static boolean isTyped(String type) {\n+    return type.matches(\"[A-Z]\\\\d+\");\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}