{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);\n        sep = sep.finish(f.getPrinter(), f.getParser());\n        return new PeriodFormatter(sep, sep);\n    }\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}\n\nprivate static Object[] createComposite(List<Object> elementPairs) {\n    List printers = new ArrayList(elementPairs.size() / 2);\n    List parsers = new ArrayList(elementPairs.size() / 2);\n    for (Iterator it = elementPairs.iterator(); it.hasNext(); ) {\n        Object element = it.next();\n        boolean isPrinter = it.next() != null;\n        if (isPrinter) {\n            printers.add(element);\n        } else {\n            parsers.add(element);\n        }\n    }\n    PeriodPrinter printer;\n    if (printers.size() == 0) {\n        printer = null;\n    } else if (printers.size() == 1) {\n        printer = (PeriodPrinter) printers.get(0);\n    } else {\n        printer = new Composite((PeriodPrinter[]) printers.toArray(new PeriodPrinter[printers.size()]));\n    }\n    PeriodParser parser;\n    if (parsers.size() == 0) {\n        parser = null;\n    } else if (parsers.size() == 1) {\n        parser = (PeriodParser) parsers.get(0);\n    } else {\n        parser = new Composite((PeriodParser[]) parsers.toArray(new PeriodParser[parsers.size()]));\n    }\n    return new Object[] { printer, parser };\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..b07e59f8 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,57 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        PeriodFormatter f = toFormatter(elementPairs.subList(1, size), notPrinter, notParser);\n+        sep = sep.finish(f.getPrinter(), f.getParser());\n+        return new PeriodFormatter(sep, sep);\n+    }\n+    Object[] comp = createComposite(elementPairs);\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n+\n+private static Object[] createComposite(List<Object> elementPairs) {\n+    List printers = new ArrayList(elementPairs.size() / 2);\n+    List parsers = new ArrayList(elementPairs.size() / 2);\n+    for (Iterator it = elementPairs.iterator(); it.hasNext(); ) {\n+        Object element = it.next();\n+        boolean isPrinter = it.next() != null;\n+        if (isPrinter) {\n+            printers.add(element);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            parsers.add(element);\n         }\n     }\n+    PeriodPrinter printer;\n+    if (printers.size() == 0) {\n+        printer = null;\n+    } else if (printers.size() == 1) {\n+        printer = (PeriodPrinter) printers.get(0);\n+    } else {\n+        printer = new Composite((PeriodPrinter[]) printers.toArray(new PeriodPrinter[printers.size()]));\n+    }\n+    PeriodParser parser;\n+    if (parsers.size() == 0) {\n+        parser = null;\n+    } else if (parsers.size() == 1) {\n+        parser = (PeriodParser) parsers.get(0);\n+    } else {\n+        parser = new Composite((PeriodParser[]) parsers.toArray(new PeriodParser[parsers.size()]));\n+    }\n+    return new Object[] { printer, parser };\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: method createComposite(List<Object>) is already defined in class PeriodFormatterBuilder",
    "test_result": "ERROR"
}