{
    "patch": "public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Start index must be greater than or equal to 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"End index must be greater than or equal to the start index.\");\n    }\n    TimeSeries copy = (TimeSeries) super.clone();\n    copy.clear();\n    if (this.data.size() > 0) {\n        int maxIndex = Math.min(end, this.getItemCount() - 1);\n        for (int index = start; index <= maxIndex; index++) {\n            TimeSeriesDataItem item = this.getDataItem(index);\n            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n            try {\n                copy.add(clone);\n            } catch (SeriesException e) {\n                throw new RuntimeException(\"Failed to add a cloned data item to the series\", e);\n            }\n        }\n    }\n    return copy;\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..275dd70 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1045,31 +1045,29 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n      *\n      * @throws CloneNotSupportedException if there is a cloning problem.\n      */\n-    public TimeSeries createCopy(int start, int end)\n-            throws CloneNotSupportedException {\n-        if (start < 0) {\n-            throw new IllegalArgumentException(\"Requires start >= 0.\");\n-        }\n-        if (end < start) {\n-            throw new IllegalArgumentException(\"Requires start <= end.\");\n-        }\n-        TimeSeries copy = (TimeSeries) super.clone();\n-        copy.data = new java.util.ArrayList();\n-        if (this.data.size() > 0) {\n-            for (int index = start; index <= end; index++) {\n-                TimeSeriesDataItem item\n-                        = (TimeSeriesDataItem) this.data.get(index);\n-                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n-                try {\n-                    copy.add(clone);\n-                }\n-                catch (SeriesException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        }\n-        return copy;\n-    }\n+public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {\n+    if (start < 0) {\n+        throw new IllegalArgumentException(\"Start index must be greater than or equal to 0.\");\n+    }\n+    if (end < start) {\n+        throw new IllegalArgumentException(\"End index must be greater than or equal to the start index.\");\n+    }\n+    TimeSeries copy = (TimeSeries) super.clone();\n+    copy.clear();\n+    if (this.data.size() > 0) {\n+        int maxIndex = Math.min(end, this.getItemCount() - 1);\n+        for (int index = start; index <= maxIndex; index++) {\n+            TimeSeriesDataItem item = this.getDataItem(index);\n+            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+            try {\n+                copy.add(clone);\n+            } catch (SeriesException e) {\n+                throw new RuntimeException(\"Failed to add a cloned data item to the series\", e);\n+            }\n+        }\n+    }\n+    return copy;\n+}\n \n     /**\n      * Creates a new timeseries by copying a subset of the data in this time",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1> but was:<0>",
    "test_result": "FAIL"
}