{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long prevLocal = previousTransition(instantAdjusted);\n                int offsetPrev = getOffset(prevLocal);\n                if (offsetPrev == offsetAdjusted) {\n                    return offsetAdjusted;\n                } else {\n                    long nextLocal = nextTransition(instantAdjusted);\n                    int offsetNext = getOffset(nextLocal);\n                    if (offsetNext == offsetLocal) {\n                        return offsetAdjusted;\n                    } else if (offsetPrev < offsetNext) {\n                        return offsetPrev;\n                    } else {\n                        return offsetNext;\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..bcbd7647 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,23 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long prevLocal = previousTransition(instantAdjusted);\n+                int offsetPrev = getOffset(prevLocal);\n+                if (offsetPrev == offsetAdjusted) {\n+                    return offsetAdjusted;\n+                } else {\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    int offsetNext = getOffset(nextLocal);\n+                    if (offsetNext == offsetLocal) {\n+                        return offsetAdjusted;\n+                    } else if (offsetPrev < offsetNext) {\n+                        return offsetPrev;\n+                    } else {\n+                        return offsetNext;\n+                    }\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}