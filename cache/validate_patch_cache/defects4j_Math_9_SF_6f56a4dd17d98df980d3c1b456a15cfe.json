{
    "patch": "@Test\npublic void testRevert() {\n    final Point a = new Point(0.0, 0.0);\n    final Point b = new Point(0.02858, 0.00719);\n    final Line line = new Line(a, b);\n    final Line reverted = line.revert();\n    final Vector2D expected = new Vector2D(0.02858, 0.00719);\n    final Vector2D actual = reverted.getDirection();\n    final double delta = 1e-10; // set a tolerance value\n    assertEquals(expected.getX(), actual.getX(), delta);\n    assertEquals(expected.getY(), actual.getY(), delta);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..726782b76 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,18 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+@Test\n+public void testRevert() {\n+    final Point a = new Point(0.0, 0.0);\n+    final Point b = new Point(0.02858, 0.00719);\n+    final Line line = new Line(a, b);\n+    final Line reverted = line.revert();\n+    final Vector2D expected = new Vector2D(0.02858, 0.00719);\n+    final Vector2D actual = reverted.getDirection();\n+    final double delta = 1e-10; // set a tolerance value\n+    assertEquals(expected.getX(), actual.getX(), delta);\n+    assertEquals(expected.getY(), actual.getY(), delta);\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}