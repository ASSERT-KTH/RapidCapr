{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n            // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            boolean changed = false;\n            DateTimeField[] fields = DateTimeUtils.getChronology(partial.getChronology()).getDateTimeFields();\n            int[] newValues = Arrays.copyOf(values, values.length);\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                int index = partial.getFieldType(i).ordinal();\n                if (index >= fieldIndex && fields[index].getDurationField().getType() == DurationFieldType.months()) {\n                    if (newValues[i] != 0) {\n                        int max = fields[i].getMaximumValue(newValues, newValues[i]);\n                        int value = (newValues[i] - 1) * valueToAdd;\n                        if (newValues[index] > (max - value)) {\n                            newValues[index] = max;\n                        } else {\n                            newValues[index] += value;\n                        }\n                        newValues[i] = 0;\n                        changed = true;\n                    }\n                }\n            }\n            if (changed) {\n                return iChronology.get(partial, fields, newValues);\n            } else {\n                return values;\n            }\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..86ed6188 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -208,12 +208,30 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         }\n             // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n+            boolean changed = false;\n+            DateTimeField[] fields = DateTimeUtils.getChronology(partial.getChronology()).getDateTimeFields();\n+            int[] newValues = Arrays.copyOf(values, values.length);\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                int index = partial.getFieldType(i).ordinal();\n+                if (index >= fieldIndex && fields[index].getDurationField().getType() == DurationFieldType.months()) {\n+                    if (newValues[i] != 0) {\n+                        int max = fields[i].getMaximumValue(newValues, newValues[i]);\n+                        int value = (newValues[i] - 1) * valueToAdd;\n+                        if (newValues[index] > (max - value)) {\n+                            newValues[index] = max;\n+                        } else {\n+                            newValues[index] += value;\n+                        }\n+                        newValues[i] = 0;\n+                        changed = true;\n+                    }\n+                }\n+            }\n+            if (changed) {\n+                return iChronology.get(partial, fields, newValues);\n+            } else {\n+                return values;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}