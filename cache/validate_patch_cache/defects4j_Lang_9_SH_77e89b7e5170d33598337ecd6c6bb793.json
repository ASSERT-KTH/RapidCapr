{
    "patch": "currentFormatField= null;\nif(currentStrategy == null) {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n}\nif(!currentStrategy.addRegex(this, regex)) {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n}\ncollector.add(currentStrategy);\nwhile(patternMatcher.regionStart() != patternMatcher.regionEnd()) {\n    if(!patternMatcher.lookingAt()) {\n        throw new IllegalArgumentException(\"Invalid pattern\");\n    }\n    String nextFormatField= patternMatcher.group();\n    nextStrategy = getStrategy(nextFormatField);\n    if(!currentStrategy.conflict(nextStrategy)) {\n        if(!currentStrategy.addRegex(this, regex)) {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n        currentStrategy = nextStrategy;\n        collector.add(currentStrategy);\n    }\n    currentFormatField= nextFormatField;\n    nextStrategy= null;\n    patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n}\nstrategies= collector.toArray(new Strategy[collector.size()]);\nparsePattern= Pattern.compile(regex.toString());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..e4a62e4b 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,33 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+currentFormatField= null;\n+if(currentStrategy == null) {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+}\n+if(!currentStrategy.addRegex(this, regex)) {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+}\n+collector.add(currentStrategy);\n+while(patternMatcher.regionStart() != patternMatcher.regionEnd()) {\n+    if(!patternMatcher.lookingAt()) {\n+        throw new IllegalArgumentException(\"Invalid pattern\");\n+    }\n+    String nextFormatField= patternMatcher.group();\n+    nextStrategy = getStrategy(nextFormatField);\n+    if(!currentStrategy.conflict(nextStrategy)) {\n+        if(!currentStrategy.addRegex(this, regex)) {\n+            throw new IllegalArgumentException(\"Invalid pattern\");\n+        }\n+        currentStrategy = nextStrategy;\n+        collector.add(currentStrategy);\n+    }\n+    currentFormatField= nextFormatField;\n+    nextStrategy= null;\n+    patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n+}\n+strategies= collector.toArray(new Strategy[collector.size()]);\n+parsePattern= Pattern.compile(regex.toString());\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}