{
    "patch": "        long millis = getMillis();\n        long seconds = getSeconds();\n        if (seconds < 0 && millis > 0) {\n            seconds += 1;\n            millis -= DateTimeConstants.MILLIS_PER_SECOND;\n        }\n        // ... rest of the code ...\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        int years = getYears();\n        int months = getMonths();\n        if (years != 0 || months != 0) {\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n            if (years != 0) {\n                result = result.withYears(years);\n            }\n            if (months != 0) {\n                result = result.withMonths(months);\n            }\n        }\n        // ... rest of the code ...\n        if (containsUnsupportedField(type, PeriodType.YEARS)) {\n            int year = iChronology.year().get(getStartMillis());\n            result = result.plusYears(year - 1970);\n        }\n        if (containsUnsupportedField(type, PeriodType.MONTHS)) {\n            int month = iChronology.monthOfYear().get(getStartMillis(), getYears());\n            result = result.plusMonths(month - 1);\n        }\n        if (containsUnsupportedField(type, PeriodType.WEEKS)) {\n            long week = iChronology.weekOfWeekyear().get(getStartMillis());\n            result = result.plusWeeks((int)week - 1);\n        }\n        if (containsUnsupportedField(type, PeriodType.DAYS)) {\n            long day = iChronology.dayOfYear().get(getStartMillis(), getYears());\n            result = result.plusDays((int)day - 1);\n        }\n        if (containsUnsupportedField(type, PeriodType.HOURS)) {\n            int hour = iChronology.hourOfDay().get(getStartMillis());\n            result = result.plusHours(hour);\n        }\n        if (containsUnsupportedField(type, PeriodType.MINUTES)) {\n            int minute = iChronology.minuteOfDay().get(getStartMillis());\n            result = result.plusMinutes(minute);\n        }\n        if (containsUnsupportedField(type, PeriodType.SECONDS)) {\n            int second = iChronology.secondOfDay().get(getStartMillis());\n            result = result.plusSeconds(second);\n        }\n        if (containsUnsupportedField(type, PeriodType.MILLIS)) {\n            int millis = iChronology.millisOfDay().get(getStartMillis());\n            result = result.plusMillis(millis);\n        }\n        return result;\n    }\n    \n    private boolean containsUnsupportedField(PeriodType type, PeriodType fieldType) {\n        return type.isSupported(fieldType) && !isSupported(fieldType);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..5e760487 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,13 +1613,13 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+        long millis = getMillis();\n+        long seconds = getSeconds();\n+        if (seconds < 0 && millis > 0) {\n+            seconds += 1;\n+            millis -= DateTimeConstants.MILLIS_PER_SECOND;\n+        }\n+        // ... rest of the code ...\n         millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n         Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n         int years = getYears();\n@@ -1634,7 +1634,43 @@ public final class Period\n                 result = result.withMonths(months);\n             }\n         }\n+        // ... rest of the code ...\n+        if (containsUnsupportedField(type, PeriodType.YEARS)) {\n+            int year = iChronology.year().get(getStartMillis());\n+            result = result.plusYears(year - 1970);\n+        }\n+        if (containsUnsupportedField(type, PeriodType.MONTHS)) {\n+            int month = iChronology.monthOfYear().get(getStartMillis(), getYears());\n+            result = result.plusMonths(month - 1);\n+        }\n+        if (containsUnsupportedField(type, PeriodType.WEEKS)) {\n+            long week = iChronology.weekOfWeekyear().get(getStartMillis());\n+            result = result.plusWeeks((int)week - 1);\n+        }\n+        if (containsUnsupportedField(type, PeriodType.DAYS)) {\n+            long day = iChronology.dayOfYear().get(getStartMillis(), getYears());\n+            result = result.plusDays((int)day - 1);\n+        }\n+        if (containsUnsupportedField(type, PeriodType.HOURS)) {\n+            int hour = iChronology.hourOfDay().get(getStartMillis());\n+            result = result.plusHours(hour);\n+        }\n+        if (containsUnsupportedField(type, PeriodType.MINUTES)) {\n+            int minute = iChronology.minuteOfDay().get(getStartMillis());\n+            result = result.plusMinutes(minute);\n+        }\n+        if (containsUnsupportedField(type, PeriodType.SECONDS)) {\n+            int second = iChronology.secondOfDay().get(getStartMillis());\n+            result = result.plusSeconds(second);\n+        }\n+        if (containsUnsupportedField(type, PeriodType.MILLIS)) {\n+            int millis = iChronology.millisOfDay().get(getStartMillis());\n+            result = result.plusMillis(millis);\n+        }\n         return result;\n     }\n+    \n+    private boolean containsUnsupportedField(PeriodType type, PeriodType fieldType) {\n+        return type.isSupported(fieldType) && !isSupported(fieldType);\n \n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}