{
    "patch": "if (cfa != null && parent.getNext() != null) {\n  Node followNode = computeFollowNode(fromNode, parent.getNext(), cfa);\n  if (followNode != null) {\n    cfa.createEdge(fromNode, Branch.UNCOND, followNode);\n  } else if (parent.getNext().getType() == Token.CATCH) {\n    // Create a hidden return node that terminates the try block.\n    Node catchNode = parent.getNext();\n    Node hiddenReturnNode = new Node(Token.RETURN);\n    hiddenReturnNode.putBooleanProp(Node.ES6_FEATURE, true);\n    catchNode.getLastChild().addChildAfter(hiddenReturnNode, null);\n    // Create an edge from hiddenReturnNode to the catch block.\n    cfa.createEdge(hiddenReturnNode, Branch.UNCOND, catchNode);\n    // Create an edge from fromNode to the hidden return node.\n    cfa.createEdge(fromNode, Branch.UNCOND, hiddenReturnNode);\n  } else {\n    cfa.createEdge(fromNode, Branch.UNCOND, parent.getNext());\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..38fdcc44 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,24 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null && parent.getNext() != null) {\n+  Node followNode = computeFollowNode(fromNode, parent.getNext(), cfa);\n+  if (followNode != null) {\n+    cfa.createEdge(fromNode, Branch.UNCOND, followNode);\n+  } else if (parent.getNext().getType() == Token.CATCH) {\n+    // Create a hidden return node that terminates the try block.\n+    Node catchNode = parent.getNext();\n+    Node hiddenReturnNode = new Node(Token.RETURN);\n+    hiddenReturnNode.putBooleanProp(Node.ES6_FEATURE, true);\n+    catchNode.getLastChild().addChildAfter(hiddenReturnNode, null);\n+    // Create an edge from hiddenReturnNode to the catch block.\n+    cfa.createEdge(hiddenReturnNode, Branch.UNCOND, catchNode);\n+    // Create an edge from fromNode to the hidden return node.\n+    cfa.createEdge(fromNode, Branch.UNCOND, hiddenReturnNode);\n+  } else {\n+    cfa.createEdge(fromNode, Branch.UNCOND, parent.getNext());\n+  }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}