{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  \n  // Traverse the constructor\n  scope = traverse(constructor, scope);\n  \n  // Check if the constructor type is a function\n  if (!constructor.getJSType().isFunctionType()) {\n    n.setJSType(getNativeType(UNKNOWN_TYPE));\n    return scope;\n  }\n  \n  // Get the instance type from the constructor prototype\n  FunctionType functionType = constructor.getJSType().toMaybeFunctionType();\n  JSType instanceType = functionType.getInstanceType();\n  \n  if (instanceType == null) {\n    // If there's no instance type, set the type to UNKNOWN_TYPE\n    n.setJSType(getNativeType(UNKNOWN_TYPE));\n    return scope;\n  }\n  \n  // Set the type of the new expression to the instance type\n  n.setJSType(instanceType);\n  \n  // Traverse the arguments\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  \n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..9c3d632a 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,38 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n-      }\n-    }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n-    }\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructor = n.getFirstChild();\n+  \n+  // Traverse the constructor\n+  scope = traverse(constructor, scope);\n+  \n+  // Check if the constructor type is a function\n+  if (!constructor.getJSType().isFunctionType()) {\n+    n.setJSType(getNativeType(UNKNOWN_TYPE));\n+    return scope;\n+  }\n+  \n+  // Get the instance type from the constructor prototype\n+  FunctionType functionType = constructor.getJSType().toMaybeFunctionType();\n+  JSType instanceType = functionType.getInstanceType();\n+  \n+  if (instanceType == null) {\n+    // If there's no instance type, set the type to UNKNOWN_TYPE\n+    n.setJSType(getNativeType(UNKNOWN_TYPE));\n     return scope;\n   }\n+  \n+  // Set the type of the new expression to the instance type\n+  n.setJSType(instanceType);\n+  \n+  // Traverse the arguments\n+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+    scope = traverse(arg, scope);\n+  }\n+  \n+  return scope;\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "java.lang.IllegalStateException",
    "test_result": "FAIL"
}