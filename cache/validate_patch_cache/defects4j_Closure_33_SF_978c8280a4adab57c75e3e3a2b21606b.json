{
    "patch": "public void matchConstraint(ObjectType constraintObj) {\n    // We only want to match constraints on anonymous types or constructor functions.\n    if (!constraintObj.isFunctionType() || constraintObj.isNominalConstructor()) {\n        return;\n    }\n\n    if (constraintObj.isRecordType()) {\n        // Apply the properties from the record type to this object.\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = propType;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n                }\n                defineInferredProperty(prop, typeToInfer, null);\n            }\n        }\n    } else if (constraintObj.isDict()) {\n        // We will consider all properties of a dictionary type required.\n        for (String prop : getPropertyNames()) {\n            JSType propType = getPropertyType(prop);\n            if (constraintObj.isLoose() || constraintObj.isUnknown() || constraintObj.isTop() ||\n                    !constraintObj.isPropertyTypeDeclared(prop)) {\n                constraintObj.defineDeclaredProperty(prop, propType, null);\n            }\n            JSType typeToInfer = AbstractObjectType.inferPropertyType(propType, constraintObj.getPropertyType(prop), typeRegistry);\n            ObjectType inferredObj = typeToInfer.getObjectType();\n            if (inferredObj != null) {\n                defineInferredProperty(prop, typeToInfer, null);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..c56d23e9 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,30 +552,38 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n+public void matchConstraint(ObjectType constraintObj) {\n+    // We only want to match constraints on anonymous types or constructor functions.\n+    if (!constraintObj.isFunctionType() || constraintObj.isNominalConstructor()) {\n+        return;\n+    }\n+\n     if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n+        // Apply the properties from the record type to this object.\n+        for (String prop : constraintObj.getOwnPropertyNames()) {\n+            JSType propType = constraintObj.getPropertyType(prop);\n+            if (!isPropertyTypeDeclared(prop)) {\n+                JSType typeToInfer = propType;\n+                if (!hasProperty(prop)) {\n+                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n+                }\n+                defineInferredProperty(prop, typeToInfer, null);\n+            }\n+        }\n+    } else if (constraintObj.isDict()) {\n+        // We will consider all properties of a dictionary type required.\n+        for (String prop : getPropertyNames()) {\n+            JSType propType = getPropertyType(prop);\n+            if (constraintObj.isLoose() || constraintObj.isUnknown() || constraintObj.isTop() ||\n+                    !constraintObj.isPropertyTypeDeclared(prop)) {\n+                constraintObj.defineDeclaredProperty(prop, propType, null);\n+            }\n+            JSType typeToInfer = AbstractObjectType.inferPropertyType(propType, constraintObj.getPropertyType(prop), typeRegistry);\n+            ObjectType inferredObj = typeToInfer.getObjectType();\n+            if (inferredObj != null) {\n+                defineInferredProperty(prop, typeToInfer, null);\n+            }\n         }\n-      }\n     }\n-  }\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}