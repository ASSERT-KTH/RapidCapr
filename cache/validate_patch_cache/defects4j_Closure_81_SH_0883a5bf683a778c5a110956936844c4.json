{
    "patch": "private boolean isDirective(Node n) {\n    if (n == null) {\n        return false;\n    }\n    if (n.getType() == Token.EXPR_RESULT) {\n        Node firstChild = n.getFirstChild();\n        if (firstChild.getType() == Token.STRING && ALLOWED_DIRECTIVES.contains(firstChild.getString())) {\n            return true;\n        }\n    } else if (n.getType() == Token.EXPR_VOID) {\n        Node firstChild = n.getFirstChild();\n        if (firstChild.getType() == Token.CALL) {\n            Node target = firstChild.getFirstChild();\n            if (target.getType() == Token.NAME) {\n                String functionName = target.getString();\n                if (FUNCTION_DIRECTIVES.contains(functionName)) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..a6c7c334 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,29 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+private boolean isDirective(Node n) {\n+    if (n == null) {\n+        return false;\n+    }\n+    if (n.getType() == Token.EXPR_RESULT) {\n+        Node firstChild = n.getFirstChild();\n+        if (firstChild.getType() == Token.STRING && ALLOWED_DIRECTIVES.contains(firstChild.getString())) {\n+            return true;\n+        }\n+    } else if (n.getType() == Token.EXPR_VOID) {\n+        Node firstChild = n.getFirstChild();\n+        if (firstChild.getType() == Token.CALL) {\n+            Node target = firstChild.getFirstChild();\n+            if (target.getType() == Token.NAME) {\n+                String functionName = target.getString();\n+                if (FUNCTION_DIRECTIVES.contains(functionName)) {\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}