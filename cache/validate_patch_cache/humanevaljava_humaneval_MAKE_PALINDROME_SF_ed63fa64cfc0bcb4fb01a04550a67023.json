{
    "patch": "public static String make_palindrome(String str) {\n    if (str.length() == 0) {\n        return \"\";\n    }\n\n    int beginning_of_suffix = str.length();\n    while (beginning_of_suffix > 0 && !is_palindrome(str.substring(0, beginning_of_suffix))) {\n        beginning_of_suffix--;\n    }\n\n    StringBuilder sb = new StringBuilder(str.substring(beginning_of_suffix));\n    return sb.reverse().toString() + str;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/MAKE_PALINDROME.java b/src/main/java/humaneval/buggy/MAKE_PALINDROME.java\nindex 05f44d8..f6fbde2 100644\n--- a/src/main/java/humaneval/buggy/MAKE_PALINDROME.java\n+++ b/src/main/java/humaneval/buggy/MAKE_PALINDROME.java\n@@ -9,17 +9,17 @@ public class MAKE_PALINDROME {\n         return true;\n     }\n \n-    public static String make_palindrome(String str){\n-        if (str.length() == 0)\n-            return \"\";\n+public static String make_palindrome(String str) {\n+    if (str.length() == 0) {\n+        return \"\";\n+    }\n \n-        int beginning_of_suffix = 0;\n-        while (! is_palindrome(str.substring(beginning_of_suffix))){\n-            beginning_of_suffix += 1;\n-        }\n-        \n-        String result = str;\n-        result += str.substring(0, beginning_of_suffix);\n-        return result;\n+    int beginning_of_suffix = str.length();\n+    while (beginning_of_suffix > 0 && !is_palindrome(str.substring(0, beginning_of_suffix))) {\n+        beginning_of_suffix--;\n     }\n+\n+    StringBuilder sb = new StringBuilder(str.substring(beginning_of_suffix));\n+    return sb.reverse().toString() + str;\n+}\n }",
    "result_reason": "   TEST_MAKE_PALINDROME.test_2:23 expected:<[zyxyz]> but was:<[xyzyx]>",
    "test_result": "FAIL"
}