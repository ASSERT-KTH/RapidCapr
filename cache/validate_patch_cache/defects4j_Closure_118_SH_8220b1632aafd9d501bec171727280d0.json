{
    "patch": "switch (child.getToken()) {\n    case STRING:\n        // Regular property name.\n        String name = child.getString();\n        T type = typeSystem.getType(getScope(), n, name);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n            // TODO(user): It doesn't look like the user can do much in this\n            // case right now.\n            if (propertiesToErrorFor.containsKey(name)) {\n                compiler.report(JSError.make(\n                        t.getSourceName(), child, propertiesToErrorFor.get(name),\n                        Warnings.INVALIDATION, name,\n                        (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n            }\n        }\n        break;\n\n    case GETPROP:\n        // Setter or getter.\n        handleObjectLit(t, child);\n        break;\n\n    case GETELEM:\n        // Property accessed using string literal or expression.\n        // Like: {'appId': data['app_id'] || ''}\n        Node key = child.getFirstChild().getNext();\n        JSType keyType = typeSystem.getNativeType(STRING_TYPE);\n        if (key.isString()) {\n            keyType = typeSystem.getNativeType(STRING_TYPE);\n        } else {\n            keyType = typeInferringProcessor.inferSlotType(key);\n        }\n        T typeE = (T) ObjectType.builder()\n                .setProperty(child.getFirstChild().getString(), keyType).build();\n        Property propE = getProperty(child.getFirstChild().getString());\n        if (!propE.scheduleRenaming(child,\n                processProperty(t, propE, typeE, null))) {\n            if (propertiesToErrorFor.containsKey(child.getFirstChild().getString())) {\n                compiler.report(JSError.make(\n                        t.getSourceName(), child, propertiesToErrorFor.get(child.getFirstChild().getString()),\n                        Warnings.INVALIDATION, child.getFirstChild().getString(),\n                        (typeE == null ? \"null\" : typeE.toString()), n.toString(), \"\"));\n            }\n        }\n        break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..8f87f1ea 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,54 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+switch (child.getToken()) {\n+    case STRING:\n+        // Regular property name.\n+        String name = child.getString();\n+        T type = typeSystem.getType(getScope(), n, name);\n+\n+        Property prop = getProperty(name);\n+        if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+            // TODO(user): It doesn't look like the user can do much in this\n+            // case right now.\n+            if (propertiesToErrorFor.containsKey(name)) {\n+                compiler.report(JSError.make(\n+                        t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                        Warnings.INVALIDATION, name,\n+                        (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+            }\n+        }\n+        break;\n+\n+    case GETPROP:\n+        // Setter or getter.\n+        handleObjectLit(t, child);\n+        break;\n+\n+    case GETELEM:\n+        // Property accessed using string literal or expression.\n+        // Like: {'appId': data['app_id'] || ''}\n+        Node key = child.getFirstChild().getNext();\n+        JSType keyType = typeSystem.getNativeType(STRING_TYPE);\n+        if (key.isString()) {\n+            keyType = typeSystem.getNativeType(STRING_TYPE);\n+        } else {\n+            keyType = typeInferringProcessor.inferSlotType(key);\n+        }\n+        T typeE = (T) ObjectType.builder()\n+                .setProperty(child.getFirstChild().getString(), keyType).build();\n+        Property propE = getProperty(child.getFirstChild().getString());\n+        if (!propE.scheduleRenaming(child,\n+                processProperty(t, propE, typeE, null))) {\n+            if (propertiesToErrorFor.containsKey(child.getFirstChild().getString())) {\n+                compiler.report(JSError.make(\n+                        t.getSourceName(), child, propertiesToErrorFor.get(child.getFirstChild().getString()),\n+                        Warnings.INVALIDATION, child.getFirstChild().getString(),\n+                        (typeE == null ? \"null\" : typeE.toString()), n.toString(), \"\"));\n+            }\n+        }\n+        break;\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}