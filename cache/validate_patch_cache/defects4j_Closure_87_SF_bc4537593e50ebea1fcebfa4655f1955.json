{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node maybeExpr = n.getFirstChild();\n    if (maybeExpr.getType() == Token.RETURN || maybeExpr.getType() == Token.THROW) {\n      return false;\n    } else if (maybeExpr.getType() == Token.EXPR_RESULT) {\n      Node child = maybeExpr.getFirstChild();\n      if (child != null && NodeUtil.isExpressionNode(child)) {\n        Node parent = n.getParent();\n        if (parent != null) {\n          if (NodeUtil.isFunctionExpression(parent)) {\n            // if it's a part of a function, make sure that all siblings are\n            // also foldable\n            for (Node sibling = maybeExpr.getNext(); sibling != null; sibling = sibling.getNext()) {\n              if (!isFoldableExpressBlock(sibling)) {\n                return false;\n              }\n            }\n          } else if (parent.getType() == Token.IF || parent.getType() == Token.HOOK) {\n            // if it's inside the condition of an IF or a HOOK expression\n            // then it's probably not safe to fold it\n            return false;\n          }\n        }\n        return true;\n      }\n    } else if (NodeUtil.isExpressionNode(maybeExpr) || maybeExpr.getType() == Token.IF) {\n      Node parent = n.getParent();\n      if (parent != null) {\n        if (NodeUtil.isFunctionExpression(parent)) {\n          // if it's a part of a function, make sure that all siblings are\n          // also foldable\n          for (Node sibling = maybeExpr.getNext(); sibling != null; sibling = sibling.getNext()) {\n            if (!isFoldableExpressBlock(sibling)) {\n              return false;\n            }\n          }\n        } else if (parent.getType() == Token.IF || parent.getType() == Token.HOOK) {\n          // if it's inside the condition of an IF or a HOOK expression\n          // then it's probably not safe to fold it\n          return false;\n        }\n      }\n      return true;\n    }\n  } else if (n.getType() == Token.FUNCTION && n.getChildCount() >= 2) {\n    // A function node should only be considered foldable if it has only\n    // two or more children: the name (optional), the parameters, and the block.\n    // The name is optional, but the function node should always have a parameters node and a block node.\n    Node name = n.getFirstChild();\n    Node params = name.getNext();\n    Node block = params.getNext();\n    return isFoldableExpressBlock(block);\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..06e23fea 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,62 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    Node maybeExpr = n.getFirstChild();\n+    if (maybeExpr.getType() == Token.RETURN || maybeExpr.getType() == Token.THROW) {\n+      return false;\n+    } else if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+      Node child = maybeExpr.getFirstChild();\n+      if (child != null && NodeUtil.isExpressionNode(child)) {\n+        Node parent = n.getParent();\n+        if (parent != null) {\n+          if (NodeUtil.isFunctionExpression(parent)) {\n+            // if it's a part of a function, make sure that all siblings are\n+            // also foldable\n+            for (Node sibling = maybeExpr.getNext(); sibling != null; sibling = sibling.getNext()) {\n+              if (!isFoldableExpressBlock(sibling)) {\n+                return false;\n+              }\n+            }\n+          } else if (parent.getType() == Token.IF || parent.getType() == Token.HOOK) {\n+            // if it's inside the condition of an IF or a HOOK expression\n+            // then it's probably not safe to fold it\n+            return false;\n+          }\n+        }\n+        return true;\n+      }\n+    } else if (NodeUtil.isExpressionNode(maybeExpr) || maybeExpr.getType() == Token.IF) {\n+      Node parent = n.getParent();\n+      if (parent != null) {\n+        if (NodeUtil.isFunctionExpression(parent)) {\n+          // if it's a part of a function, make sure that all siblings are\n+          // also foldable\n+          for (Node sibling = maybeExpr.getNext(); sibling != null; sibling = sibling.getNext()) {\n+            if (!isFoldableExpressBlock(sibling)) {\n+              return false;\n+            }\n+          }\n+        } else if (parent.getType() == Token.IF || parent.getType() == Token.HOOK) {\n+          // if it's inside the condition of an IF or a HOOK expression\n+          // then it's probably not safe to fold it\n+          return false;\n+        }\n       }\n+      return true;\n     }\n-\n-    return false;\n+  } else if (n.getType() == Token.FUNCTION && n.getChildCount() >= 2) {\n+    // A function node should only be considered foldable if it has only\n+    // two or more children: the name (optional), the parameters, and the block.\n+    // The name is optional, but the function node should always have a parameters node and a block node.\n+    Node name = n.getFirstChild();\n+    Node params = name.getNext();\n+    Node block = params.getNext();\n+    return isFoldableExpressBlock(block);\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}