{
    "patch": "if (this.isUnknownType() || that.isUnknownType()) {\n  return new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());\n}\n\nJSType thisType = this.restrictByNotNullOrUndefined();\nJSType thatType = that.restrictByNotNullOrUndefined();\nif (thisType.isEquivalentTo(thatType)) {\n  return new TypePair(thisType, thatType);\n}\n\nreturn new TypePair(thisType, thatType);",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..bdcb2c97 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,17 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+if (this.isUnknownType() || that.isUnknownType()) {\n+  return new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());\n+}\n+\n+JSType thisType = this.restrictByNotNullOrUndefined();\n+JSType thatType = that.restrictByNotNullOrUndefined();\n+if (thisType.isEquivalentTo(thatType)) {\n+  return new TypePair(thisType, thatType);\n+}\n+\n+return new TypePair(thisType, thatType);\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}