{
    "patch": "TypeVariable<?>[] typeParameters = declaringClass.getTypeParameters();\nType[] bounds;\nif (typeParameters.length > 0) {\n    // try to get type variable bounds\n    for (TypeParameter<?> typeParameter : typeParameters) {\n        if (typeParameter.getName().equals(typeVariable.getName())) {\n            bounds = typeParameter.getBounds();\n            if (bounds.length > 0) {\n                registerTypeVariablesOn(bounds[0]);\n            }\n            return;\n        }\n    }\n}\nType actualTypeArgument = getActualTypeArgumentFor(typeVariable);\nif (actualTypeArgument != null) {\n    registerTypeVariablesOn(actualTypeArgument);\n} else if (typeVariable.getBounds().length == 0) {\n    registerTypeVariablesOn(typeVariable);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..64fb0f05a 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,31 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+TypeVariable<?>[] typeParameters = declaringClass.getTypeParameters();\n+Type[] bounds;\n+if (typeParameters.length > 0) {\n+    // try to get type variable bounds\n+    for (TypeParameter<?> typeParameter : typeParameters) {\n+        if (typeParameter.getName().equals(typeVariable.getName())) {\n+            bounds = typeParameter.getBounds();\n+            if (bounds.length > 0) {\n+                registerTypeVariablesOn(bounds[0]);\n+            }\n+            return;\n+        }\n+    }\n+}\n+Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+if (actualTypeArgument != null) {\n+    registerTypeVariablesOn(actualTypeArgument);\n+} else if (typeVariable.getBounds().length == 0) {\n+    registerTypeVariablesOn(typeVariable);\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}