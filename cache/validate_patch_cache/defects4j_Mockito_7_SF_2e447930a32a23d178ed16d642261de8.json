{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return; // or throw an exception as appropriate\n    }\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds.length > 0) {\n        for (Type type : bounds) {\n            if (type != null) {\n                registerTypeVariablesOn(type);\n            }\n        }\n    } else {\n        Type classType = typeVariable.getGenericDeclaration();\n        if (classType instanceof Class<?>) {\n            Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n            if (actualTypeArgument != null) {\n                registerTypeVariablesOn(actualTypeArgument);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..c04ad2d54 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,28 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return; // or throw an exception as appropriate\n+    }\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds.length > 0) {\n+        for (Type type : bounds) {\n+            if (type != null) {\n+                registerTypeVariablesOn(type);\n+            }\n+        }\n+    } else {\n+        Type classType = typeVariable.getGenericDeclaration();\n+        if (classType instanceof Class<?>) {\n+            Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+            if (actualTypeArgument != null) {\n+                registerTypeVariablesOn(actualTypeArgument);\n+            }\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: incompatible types: GenericDeclaration cannot be converted to Type",
    "test_result": "ERROR"
}