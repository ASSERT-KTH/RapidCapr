{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    int[] newValues = values.clone();\n    long instant = 0L;\n\n    boolean monthBased = false;\n    boolean dayBased = false;\n    int monthIndex = -1;\n    int dayIndex = -1;\n    int monthOfYear = 0;\n    int dayOfMonth = 0;\n\n    for (int i = 0, isize = partial.size(); i < isize; i++) {\n        DateTimeFieldType type = partial.getFieldType(i);\n        int value = values[i];\n\n        if (type == DateTimeFieldType.monthOfYear()) {\n            monthBased = true;\n            monthIndex = i;\n            monthOfYear = value;\n            int totalMonths = iChronology.year().get(instant) * 12 + monthOfYear - 1 + valueToAdd;\n            int year = totalMonths / 12;\n            monthOfYear = totalMonths % 12 + 1;\n            if (monthOfYear != value) {\n                int maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n                dayOfMonth = values[dayIndex];\n                while (dayOfMonth > maxDay) {\n                    instant = iChronology.monthOfYear().add(instant, 1);\n                    dayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n                }\n                newValues[dayIndex] = dayOfMonth;\n            }\n            instant = iChronology.year().set(instant, year);\n            instant = iChronology.monthOfYear().set(instant, monthOfYear);\n            newValues[i] = monthOfYear;\n        } else if (type == DateTimeFieldType.dayOfMonth()) {\n            dayBased = true;\n            dayIndex = i;\n            dayOfMonth = value + valueToAdd;\n            int maxDay = iChronology.dayOfMonth().getMaximumValue(instant.withField(DateTimeFieldType.monthOfYear(), monthOfYear));\n            if (dayOfMonth < 1 || dayOfMonth > maxDay) {\n                instant = iChronology.monthOfYear().set(instant, monthOfYear);\n                while (dayOfMonth < 1) {\n                    instant = iChronology.monthOfYear().add(instant, -1);\n                    dayOfMonth = dayOfMonth + iChronology.dayOfMonth().getMaximumValue(instant);\n                    monthOfYear = iChronology.monthOfYear().get(instant);\n                }\n                while (dayOfMonth > maxDay) {\n                    dayOfMonth = dayOfMonth - maxDay;\n                    instant = iChronology.monthOfYear().add(instant, 1);\n                    maxDay = iChronology.dayOfMonth().getMaximumValue(instant.withField(DateTimeFieldType.monthOfYear(), monthOfYear));\n                    monthOfYear = iChronology.monthOfYear().get(instant);\n                }\n                newValues[monthIndex] = monthOfYear;\n                newValues[i] = dayOfMonth;\n            } else {\n                instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n                newValues[i] = dayOfMonth;\n            }\n        } else if (type == DateTimeFieldType.year()) {\n            int year = value + valueToAdd;\n            if (!iChronology.year().isLeap(year)) {\n                int maxDay = iChronology.dayOfMonth().getMaximumValue(instant.withField(DateTimeFieldType.monthOfYear(), monthOfYear));\n                if (dayOfMonth > maxDay) {\n                    instant = iChronology.monthOfYear().add(instant, 1);\n                    dayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n                    monthOfYear = iChronology.monthOfYear().get(instant);\n                    newValues[monthIndex] = monthOfYear;\n                    newValues[dayIndex] = dayOfMonth;\n                }\n            }\n            instant = iChronology.year().set(instant, year);\n            newValues[i] = year;\n        } else {\n            instant = type.getField(iChronology).set(instant, value);\n        }\n    }\n\n    return iChronology.get(partial, instant);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..6ef5f5c2 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,90 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    int[] newValues = values.clone();\n+    long instant = 0L;\n+\n+    boolean monthBased = false;\n+    boolean dayBased = false;\n+    int monthIndex = -1;\n+    int dayIndex = -1;\n+    int monthOfYear = 0;\n+    int dayOfMonth = 0;\n+\n+    for (int i = 0, isize = partial.size(); i < isize; i++) {\n+        DateTimeFieldType type = partial.getFieldType(i);\n+        int value = values[i];\n+\n+        if (type == DateTimeFieldType.monthOfYear()) {\n+            monthBased = true;\n+            monthIndex = i;\n+            monthOfYear = value;\n+            int totalMonths = iChronology.year().get(instant) * 12 + monthOfYear - 1 + valueToAdd;\n+            int year = totalMonths / 12;\n+            monthOfYear = totalMonths % 12 + 1;\n+            if (monthOfYear != value) {\n+                int maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n+                dayOfMonth = values[dayIndex];\n+                while (dayOfMonth > maxDay) {\n+                    instant = iChronology.monthOfYear().add(instant, 1);\n+                    dayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n+                }\n+                newValues[dayIndex] = dayOfMonth;\n+            }\n+            instant = iChronology.year().set(instant, year);\n+            instant = iChronology.monthOfYear().set(instant, monthOfYear);\n+            newValues[i] = monthOfYear;\n+        } else if (type == DateTimeFieldType.dayOfMonth()) {\n+            dayBased = true;\n+            dayIndex = i;\n+            dayOfMonth = value + valueToAdd;\n+            int maxDay = iChronology.dayOfMonth().getMaximumValue(instant.withField(DateTimeFieldType.monthOfYear(), monthOfYear));\n+            if (dayOfMonth < 1 || dayOfMonth > maxDay) {\n+                instant = iChronology.monthOfYear().set(instant, monthOfYear);\n+                while (dayOfMonth < 1) {\n+                    instant = iChronology.monthOfYear().add(instant, -1);\n+                    dayOfMonth = dayOfMonth + iChronology.dayOfMonth().getMaximumValue(instant);\n+                    monthOfYear = iChronology.monthOfYear().get(instant);\n+                }\n+                while (dayOfMonth > maxDay) {\n+                    dayOfMonth = dayOfMonth - maxDay;\n+                    instant = iChronology.monthOfYear().add(instant, 1);\n+                    maxDay = iChronology.dayOfMonth().getMaximumValue(instant.withField(DateTimeFieldType.monthOfYear(), monthOfYear));\n+                    monthOfYear = iChronology.monthOfYear().get(instant);\n+                }\n+                newValues[monthIndex] = monthOfYear;\n+                newValues[i] = dayOfMonth;\n+            } else {\n+                instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n+                newValues[i] = dayOfMonth;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+        } else if (type == DateTimeFieldType.year()) {\n+            int year = value + valueToAdd;\n+            if (!iChronology.year().isLeap(year)) {\n+                int maxDay = iChronology.dayOfMonth().getMaximumValue(instant.withField(DateTimeFieldType.monthOfYear(), monthOfYear));\n+                if (dayOfMonth > maxDay) {\n+                    instant = iChronology.monthOfYear().add(instant, 1);\n+                    dayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n+                    monthOfYear = iChronology.monthOfYear().get(instant);\n+                    newValues[monthIndex] = monthOfYear;\n+                    newValues[dayIndex] = dayOfMonth;\n+                }\n+            }\n+            instant = iChronology.year().set(instant, year);\n+            newValues[i] = year;\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            instant = type.getField(iChronology).set(instant, value);\n         }\n     }\n \n+    return iChronology.get(partial, instant);\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: long cannot be dereferenced",
    "test_result": "ERROR"
}