{
    "patch": "private void findAliases(NodeTraversal t) {\n    Scope scope = t.getScope();\n    for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        if (n == null) {\n            continue;\n        }\n\n        Node parent = n.getParent();\n        if (parent == null || !parent.isVar()) {\n            continue;\n        }\n\n        Node grandparent = parent.getParent();\n        if (grandparent == null || !grandparent.isFunction()) {\n            continue;\n        }\n\n        if (!n.hasChildren()) {\n            // The var statement doesn't have any children, so it is a variable declaration\n            // without an initializer, and should be treated as a non-alias local.\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n            continue;\n        }\n\n        Node initialValue = n.getFirstChild();\n        if (!initialValue.isQualifiedName()) {\n            continue;\n        }\n\n        String name = n.getString();\n        Var aliasVar = scope.getVar(name);\n\n        if (aliasVar != null && aliasVar.getInitialValue() != null) {\n            aliases.put(name, aliasVar);\n            String qualifiedName =\n                    aliasVar.getInitialValue().getQualifiedName();\n            transformation.addAlias(name, qualifiedName);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..7b296ce8 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,47 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n+private void findAliases(NodeTraversal t) {\n+    Scope scope = t.getScope();\n+    for (Var v : scope.getVarIterable()) {\n         Node n = v.getNode();\n-        int type = n.getType();\n+        if (n == null) {\n+            continue;\n+        }\n+\n         Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+        if (parent == null || !parent.isVar()) {\n+            continue;\n         }\n+\n+        Node grandparent = parent.getParent();\n+        if (grandparent == null || !grandparent.isFunction()) {\n+            continue;\n+        }\n+\n+        if (!n.hasChildren()) {\n+            // The var statement doesn't have any children, so it is a variable declaration\n+            // without an initializer, and should be treated as a non-alias local.\n+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+            continue;\n+        }\n+\n+        Node initialValue = n.getFirstChild();\n+        if (!initialValue.isQualifiedName()) {\n+            continue;\n+        }\n+\n+        String name = n.getString();\n+        Var aliasVar = scope.getVar(name);\n+\n+        if (aliasVar != null && aliasVar.getInitialValue() != null) {\n+            aliases.put(name, aliasVar);\n+            String qualifiedName =\n+                    aliasVar.getInitialValue().getQualifiedName();\n+            transformation.addAlias(name, qualifiedName);\n         }\n-      }\n     }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}