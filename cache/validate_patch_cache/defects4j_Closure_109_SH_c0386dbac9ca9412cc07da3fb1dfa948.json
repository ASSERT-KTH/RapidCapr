{
    "patch": "          if(isNullable(token)) {\n              advance();\n              Node type = parseContextTypeExpression();\n              return IR.compoundType(new Node(Token.BANG, \"!\" + Token.NAME), type, Token.BAR);\n          } else {\n              return parseTypeName(token);\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..6b2026b4 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,13 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+          if(isNullable(token)) {\n+              advance();\n+              Node type = parseContextTypeExpression();\n+              return IR.compoundType(new Node(Token.BANG, \"!\" + Token.NAME), type, Token.BAR);\n+          } else {\n+              return parseTypeName(token);\n+          }\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}