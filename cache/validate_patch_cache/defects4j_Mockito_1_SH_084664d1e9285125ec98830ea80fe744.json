{
    "patch": "        Object[] rawArguments = invocation.getRawArguments();\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                Object arg = null;\n                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n                    Object varArg = rawArguments[position];\n                    if (varArg != null && varArg.getClass().isArray()) {\n                        int varArgLength = Array.getLength(varArg);\n                        Object[] varArgArray = new Object[varArgLength];\n                        for (int i = 0; i < varArgLength; i++) {\n                            varArgArray[i] = Array.get(varArg, i);\n                        }\n                        arg = varArgArray;\n                    } else {\n                        arg = new Object[] {varArg};\n                    }\n                } else {\n                    arg = invocation.getArgumentAt(position, Object.class);\n                }\n                ((CapturesArguments) m).captureFrom(arg);\n            }\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..940e8ec12 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,29 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+        Object[] rawArguments = invocation.getRawArguments();\n+        for (int position = 0; position < matchers.size(); position++) {\n+            Matcher m = matchers.get(position);\n+            if (m instanceof CapturesArguments) {\n+                Object arg = null;\n+                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n+                    Object varArg = rawArguments[position];\n+                    if (varArg != null && varArg.getClass().isArray()) {\n+                        int varArgLength = Array.getLength(varArg);\n+                        Object[] varArgArray = new Object[varArgLength];\n+                        for (int i = 0; i < varArgLength; i++) {\n+                            varArgArray[i] = Array.get(varArg, i);\n+                        }\n+                        arg = varArgArray;\n+                    } else {\n+                        arg = new Object[] {varArg};\n+                    }\n+                } else {\n+                    arg = invocation.getArgumentAt(position, Object.class);\n+                }\n+                ((CapturesArguments) m).captureFrom(arg);\n+            }\n+        }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}