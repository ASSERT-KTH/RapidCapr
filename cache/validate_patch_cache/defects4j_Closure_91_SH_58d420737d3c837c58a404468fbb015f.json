{
    "patch": "      if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n        Node expr = parent.getFirstChild();\n        if (expr != null && expr.isCall()) {\n          Node callee = expr.getFirstChild();\n          if (callee != null && callee.isName()) {\n            String functionName = callee.getString();\n            if (isAddDefinesFunction(functionName)) {\n              return false;\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..0ec6d078 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,17 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n+        Node expr = parent.getFirstChild();\n+        if (expr != null && expr.isCall()) {\n+          Node callee = expr.getFirstChild();\n+          if (callee != null && callee.isName()) {\n+            String functionName = callee.getString();\n+            if (isAddDefinesFunction(functionName)) {\n+              return false;\n+            }\n+          }\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}