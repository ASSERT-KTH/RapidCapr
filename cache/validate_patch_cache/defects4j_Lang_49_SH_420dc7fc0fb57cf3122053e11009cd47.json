{
    "patch": "public Fraction reduce() {\n     int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));\n     if (gcd == 1) {\n         return this;\n     }\n     int newNumerator = numerator / gcd;\n     int newDenominator = denominator / gcd;\n     return new Fraction(newNumerator, newDenominator);\n }\n\nprivate int greatestCommonDivisor(int a, int b) {\n     if (b == 0) {\n         return a;\n     }\n     return greatestCommonDivisor(b, a % b);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..05c75089 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,6 +463,22 @@ public final class Fraction extends Number implements Comparable {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n+public Fraction reduce() {\n+     int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));\n+     if (gcd == 1) {\n+         return this;\n+     }\n+     int newNumerator = numerator / gcd;\n+     int newDenominator = denominator / gcd;\n+     return new Fraction(newNumerator, newDenominator);\n+ }\n+\n+private int greatestCommonDivisor(int a, int b) {\n+     if (b == 0) {\n+         return a;\n+     }\n+     return greatestCommonDivisor(b, a % b);\n+}\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}