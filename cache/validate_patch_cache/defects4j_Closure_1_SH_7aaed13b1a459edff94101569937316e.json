{
    "patch": "    Node functionParent = function.getParent();\n    if (NodeUtil.isGetOrSetKey(functionParent)) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = NodeUtil.getFunctionParameters(function);\n\n    boolean modifyCallers =\n        modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      Node lastParam = argList.getFirstChild();\n      while (lastParam != null) {\n        Var var = fnScope.getVar(lastParam.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastParam);\n          compiler.reportChangeToEnclosingScope(argList);\n        } else {\n          lastParam = lastParam.getNext();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..a8bca8c3 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,25 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node functionParent = function.getParent();\n+    if (NodeUtil.isGetOrSetKey(functionParent)) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = NodeUtil.getFunctionParameters(function);\n+\n+    boolean modifyCallers =\n+        modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      Node lastParam = argList.getFirstChild();\n+      while (lastParam != null) {\n+        Var var = fnScope.getVar(lastParam.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastParam);\n+          compiler.reportChangeToEnclosingScope(argList);\n+        } else {\n+          lastParam = lastParam.getNext();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}