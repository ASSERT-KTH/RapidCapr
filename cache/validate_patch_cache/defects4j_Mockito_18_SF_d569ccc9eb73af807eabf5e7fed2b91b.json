{
    "patch": "import org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.junit.Before;\nimport static org.junit.Assert.*;\n\npublic class MyClassTest {\n\n    @Mock\n    Values values;\n\n    private MyClass myClass;\n\n    @Before\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n        myClass = new MyClass(values);\n    }\n\n    @Test\n    public void should_return_empty_iterable() {\n        when(values.returnValueFor(Iterable.class)).thenReturn(Collections.emptyList());\n        assertFalse(((Iterable) values.returnValueFor(Iterable.class)).iterator().hasNext());\n    }\n\n    // Other tests\n\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..a7c0091a1 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,33 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.junit.Before;\n+import static org.junit.Assert.*;\n+\n+public class MyClassTest {\n+\n+    @Mock\n+    Values values;\n+\n+    private MyClass myClass;\n+\n+    @Before\n+    public void setUp() {\n+        MockitoAnnotations.openMocks(this);\n+        myClass = new MyClass(values);\n+    }\n+\n+    @Test\n+    public void should_return_empty_iterable() {\n+        when(values.returnValueFor(Iterable.class)).thenReturn(Collections.emptyList());\n+        assertFalse(((Iterable) values.returnValueFor(Iterable.class)).iterator().hasNext());\n+    }\n+\n+    // Other tests\n+\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}