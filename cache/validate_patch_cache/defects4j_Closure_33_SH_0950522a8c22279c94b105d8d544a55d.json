{
    "patch": "    if (!getType().isNominalConstructor()\n        && !getType().isInterface()\n        && constraintObj.isNominalConstructor()) {\n      NominalType constraintNt = constraintObj.getNominalTypeIfSingleton();\n      if (constraintNt != null) {\n        FunctionType constructorType = constraintNt.getAsNominalType().getConstructorFunction();\n        JSType receiverType = constructorType.getTypeOfThis();\n        if (!receiverType.isUnknownType() && !receiverType.isTop()) {\n          FunctionType thisFnType = receiverType.getFunTypeIfSingleton();\n          if (thisFnType != null) {\n            JSType otherType = getType().toObjectType();\n            ObjectType proto = otherType.getImplicitPrototype();\n            equalTypes(thisFnType, proto);\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..77e25db7 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,23 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+    if (!getType().isNominalConstructor()\n+        && !getType().isInterface()\n+        && constraintObj.isNominalConstructor()) {\n+      NominalType constraintNt = constraintObj.getNominalTypeIfSingleton();\n+      if (constraintNt != null) {\n+        FunctionType constructorType = constraintNt.getAsNominalType().getConstructorFunction();\n+        JSType receiverType = constructorType.getTypeOfThis();\n+        if (!receiverType.isUnknownType() && !receiverType.isTop()) {\n+          FunctionType thisFnType = receiverType.getFunTypeIfSingleton();\n+          if (thisFnType != null) {\n+            JSType otherType = getType().toObjectType();\n+            ObjectType proto = otherType.getImplicitPrototype();\n+            equalTypes(thisFnType, proto);\n+          }\n+        }\n+      }\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}