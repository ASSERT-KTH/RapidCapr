{
    "patch": "public static Integer next_smallest(int[] lst) {\n    if (lst == null || lst.length < 2) {\n        return null;\n    }\n\n    Integer min = Integer.MAX_VALUE;\n    Integer secondMin = null;\n\n    for (int n : lst) {\n        if (n < min) {\n            secondMin = min;\n            min = n;\n        } else if (n < secondMin || secondMin == null && n != min) {\n            secondMin = n;\n        }\n    }\n\n    return secondMin;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/NEXT_SMALLEST.java b/src/main/java/humaneval/buggy/NEXT_SMALLEST.java\nindex 7791efd..2dfe2b6 100644\n--- a/src/main/java/humaneval/buggy/NEXT_SMALLEST.java\n+++ b/src/main/java/humaneval/buggy/NEXT_SMALLEST.java\n@@ -12,15 +12,23 @@ next_smallest([]) == None\n next_smallest([1, 1]) == None */\n \n public class NEXT_SMALLEST {\n-    public static Integer next_smallest(int[] lst) {\n-        List<Integer> numbers = new ArrayList<Integer>();\n-        for (Integer n : lst)\n-            numbers.add(n);\n-        Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n-        Arrays.sort(no_duplicate);\n+public static Integer next_smallest(int[] lst) {\n+    if (lst == null || lst.length < 2) {\n+        return null;\n+    }\n+\n+    Integer min = Integer.MAX_VALUE;\n+    Integer secondMin = null;\n \n-        if (no_duplicate.length < 2)\n-            return null;\n-        return no_duplicate[1];\n+    for (int n : lst) {\n+        if (n < min) {\n+            secondMin = min;\n+            min = n;\n+        } else if (n < secondMin || secondMin == null && n != min) {\n+            secondMin = n;\n+        }\n     }\n+\n+    return secondMin;\n+}\n }",
    "result_reason": "   TEST_NEXT_SMALLEST.test_3:31 expected:<1> but was:<null>",
    "test_result": "FAIL"
}