{
    "patch": "    public Dfp multiply(final int x) {\n            if (isNaN()) {\n                return newInstance(qnan);\n            }\n            Dfp result = newInstance(this);\n            if (x == 0) {\n                result = newInstance(getZero());\n            } else if (x == 1) {\n                //nothing to do\n            } else if (x == -1) {\n                result = negate();\n            } else if (x == 2) {\n                result.selfMultiply();\n            } else if (x == -2) {\n                result.selfMultiply();\n                result = result.negate();\n            } else {\n                Dfp r = newInstance(getZero());\n                Dfp s = newInstance(this);\n                int ab = Math.abs(x);\n\n                while (ab != 0) {\n                    if ((ab & 1) != 0) {\n                        r.selfAdd(s);\n                    }\n                    ab >>= 1;\n                    s.selfAdd(s);\n                }\n\n                if (x < 0) {\n                    r = r.negate();\n                }\n                result = r;\n            }\n            if (x > 0 && result.classify() == NEGATIVE_INFINITY) {\n                getIEEEFlags().setFlag(BIT_INVALID);\n                result = newInstance(qnan);\n            }\n            return dotrap(getZero(), \"multiply\", result);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..a907dd6f7 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,44 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+            if (isNaN()) {\n+                return newInstance(qnan);\n+            }\n+            Dfp result = newInstance(this);\n+            if (x == 0) {\n+                result = newInstance(getZero());\n+            } else if (x == 1) {\n+                //nothing to do\n+            } else if (x == -1) {\n+                result = negate();\n+            } else if (x == 2) {\n+                result.selfMultiply();\n+            } else if (x == -2) {\n+                result.selfMultiply();\n+                result = result.negate();\n+            } else {\n+                Dfp r = newInstance(getZero());\n+                Dfp s = newInstance(this);\n+                int ab = Math.abs(x);\n+\n+                while (ab != 0) {\n+                    if ((ab & 1) != 0) {\n+                        r.selfAdd(s);\n+                    }\n+                    ab >>= 1;\n+                    s.selfAdd(s);\n+                }\n+\n+                if (x < 0) {\n+                    r = r.negate();\n+                }\n+                result = r;\n+            }\n+            if (x > 0 && result.classify() == NEGATIVE_INFINITY) {\n+                getIEEEFlags().setFlag(BIT_INVALID);\n+                result = newInstance(qnan);\n+            }\n+            return dotrap(getZero(), \"multiply\", result);\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}