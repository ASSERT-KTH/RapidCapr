{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n        final int n = m.getRowDimension();\n        final int maxIter = n * n * 100;\n        final int maxEigenIterations = n *10;\n        final double relTol = 1.0e-9;\n        final LanczosEigenSolver les = new LanczosEigenSolver(m, maxIter, maxEigenIterations, relTol);\n        final RealMatrix V = les.getV();\n        final RealMatrix T = les.getT();\n        final double[] diag = T.getData()[0];\n\n        for (int i = 0; i < n; i++) {\n            if (diag[i] < 0.0) {\n                throw new IllegalArgumentException(\"Matrix must be positive semidefinite\");\n            }\n            diag[i] = FastMath.sqrt(diag[i]);\n        }\n        final RealMatrix D = MatrixUtils.createRealDiagonalMatrix(diag);\n        final RealMatrix Vt = V.transpose();\n        return V.multiply(D).multiply(Vt);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..94cca2310 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,23 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+        final int n = m.getRowDimension();\n+        final int maxIter = n * n * 100;\n+        final int maxEigenIterations = n *10;\n+        final double relTol = 1.0e-9;\n+        final LanczosEigenSolver les = new LanczosEigenSolver(m, maxIter, maxEigenIterations, relTol);\n+        final RealMatrix V = les.getV();\n+        final RealMatrix T = les.getT();\n+        final double[] diag = T.getData()[0];\n+\n+        for (int i = 0; i < n; i++) {\n+            if (diag[i] < 0.0) {\n+                throw new IllegalArgumentException(\"Matrix must be positive semidefinite\");\n+            }\n+            diag[i] = FastMath.sqrt(diag[i]);\n+        }\n+        final RealMatrix D = MatrixUtils.createRealDiagonalMatrix(diag);\n+        final RealMatrix Vt = V.transpose();\n+        return V.multiply(D).multiply(Vt);\n     }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}