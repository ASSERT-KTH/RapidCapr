{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    try {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        final RealMatrix v = dec.getV();\n        final RealMatrix d = dec.getD();\n        final int n = m.getRowDimension();\n\n        // Check if all eigenvalues are non-negative\n        for (int i = 0; i < n; i++) {\n            if (d.getEntry(i, i) < 0) {\n                throw new IllegalArgumentException(\"Matrix must be positive semi-definite\");\n            }\n        }\n\n        // Set negative eigenvalues to zero\n        final RealMatrix dSqrt = MatrixUtils.createRealDiagonalMatrix(new double[n]);\n        for (int i = 0; i < n; i++) {\n            double rootVal = Math.sqrt(d.getEntry(i, i));\n            if (Double.isNaN(rootVal)) {\n                throw new IllegalArgumentException(\"Matrix cannot be square rooted\");\n            }\n            dSqrt.setEntry(i, i, rootVal);\n        }\n\n        // Compute square root of matrix M using V*D*V^T\n        final RealMatrix vT = v.transpose();\n        return v.multiply(dSqrt).multiply(vT);\n    } catch (NullPointerException | NotStrictlyPositiveException e) {\n        throw new IllegalArgumentException(\"Matrix does not have a square root.\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..34e523acf 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,35 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    try {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        final RealMatrix v = dec.getV();\n+        final RealMatrix d = dec.getD();\n+        final int n = m.getRowDimension();\n+\n+        // Check if all eigenvalues are non-negative\n+        for (int i = 0; i < n; i++) {\n+            if (d.getEntry(i, i) < 0) {\n+                throw new IllegalArgumentException(\"Matrix must be positive semi-definite\");\n+            }\n+        }\n+\n+        // Set negative eigenvalues to zero\n+        final RealMatrix dSqrt = MatrixUtils.createRealDiagonalMatrix(new double[n]);\n+        for (int i = 0; i < n; i++) {\n+            double rootVal = Math.sqrt(d.getEntry(i, i));\n+            if (Double.isNaN(rootVal)) {\n+                throw new IllegalArgumentException(\"Matrix cannot be square rooted\");\n+            }\n+            dSqrt.setEntry(i, i, rootVal);\n+        }\n+\n+        // Compute square root of matrix M using V*D*V^T\n+        final RealMatrix vT = v.transpose();\n+        return v.multiply(dSqrt).multiply(vT);\n+    } catch (NullPointerException | NotStrictlyPositiveException e) {\n+        throw new IllegalArgumentException(\"Matrix does not have a square root.\");\n     }\n }\n+}",
    "result_reason": "error: multi-catch statement is not supported in -source 1.5",
    "test_result": "ERROR"
}