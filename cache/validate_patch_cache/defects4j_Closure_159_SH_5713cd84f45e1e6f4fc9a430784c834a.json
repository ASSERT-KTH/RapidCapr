{
    "patch": "    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        String calledFunction = child.getString();\n        if (!changed.contains(calledFunction)) {\n          changed.add(calledFunction);\n          Node functionNode = functionByName.get(calledFunction);\n          if (functionNode != null) {\n            findCalledFunctions(functionNode, changed);\n          }\n        }\n      }\n    }\n\n    for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n      findCalledFunctions(child, changed);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..9252c987 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -777,7 +777,21 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n     if (node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n       if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+        String calledFunction = child.getString();\n+        if (!changed.contains(calledFunction)) {\n+          changed.add(calledFunction);\n+          Node functionNode = functionByName.get(calledFunction);\n+          if (functionNode != null) {\n+            findCalledFunctions(functionNode, changed);\n+          }\n+        }\n+      }\n+    }\n+\n+    for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n+      findCalledFunctions(child, changed);\n+    }\n+  }\n       }\n     }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}