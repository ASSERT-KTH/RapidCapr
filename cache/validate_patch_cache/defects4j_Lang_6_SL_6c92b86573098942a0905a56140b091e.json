{
    "patch": "if (pos < len && Character.isHighSurrogate(input.charAt(pos))) {\n    if (pos + 1 == len) {\n        throw new IllegalStateException(\"invalid UTF-16 codepoint\");\n    }\n    if (Character.isLowSurrogate(input.charAt(pos + 1))) {\n        pos += 2;\n    } else {\n        throw new IllegalStateException(\"invalid UTF-16 codepoint\");\n    }\n} else {\n    pos += Character.charCount(Character.codePointAt(input, pos));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..82a86cd6 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,18 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+if (pos < len && Character.isHighSurrogate(input.charAt(pos))) {\n+    if (pos + 1 == len) {\n+        throw new IllegalStateException(\"invalid UTF-16 codepoint\");\n+    }\n+    if (Character.isLowSurrogate(input.charAt(pos + 1))) {\n+        pos += 2;\n+    } else {\n+        throw new IllegalStateException(\"invalid UTF-16 codepoint\");\n+    }\n+} else {\n+    pos += Character.charCount(Character.codePointAt(input, pos));\n+}\n             }\n         }\n     }",
    "result_reason": "java.lang.StringIndexOutOfBoundsException: String index out of range: 2",
    "test_result": "FAIL"
}