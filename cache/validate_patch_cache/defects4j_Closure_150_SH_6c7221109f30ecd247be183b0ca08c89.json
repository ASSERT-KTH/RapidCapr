{
    "patch": "switch (n.getType()) {\n    case Token.FUNCTION:\n        if (NodeUtil.isFunctionExpression(n)) {\n            if (parent != null && parent.getType() == Token.CATCH) {\n                defineDeclaredFunction(n, parent);\n                break;\n            }\n            boolean isDeclaration = parent != null && (parent.getType() == Token.VAR || parent.getType() == Token.EXPR_RESULT);\n            boolean isNested = parent != null && parent.getParent() != null && parent.getParent().getType() == Token.FUNCTION;\n            if (isDeclaration || isNested) {\n                defineDeclaredFunction(n, parent);\n                break;\n            }\n        } else {\n            if (parent != null && parent.getType() == Token.NAME) {\n                return;\n            }\n        }\n        attachLiteralTypes(n);\n        defineDeclaredFunction(n, parent);\n        break;\n    case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n    case Token.VAR:\n    case Token.CONST:\n    case Token.LET:\n        defineVar(n, parent);\n        attachLiteralTypes(n);\n        break;\n    case Token.DEFAULT_VALUE:\n        defineDefaultValue(n, parent);\n        attachLiteralTypes(n);\n        break;\n    default:\n        attachLiteralTypes(n);\n        break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..81198573 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,44 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+switch (n.getType()) {\n+    case Token.FUNCTION:\n+        if (NodeUtil.isFunctionExpression(n)) {\n+            if (parent != null && parent.getType() == Token.CATCH) {\n+                defineDeclaredFunction(n, parent);\n+                break;\n+            }\n+            boolean isDeclaration = parent != null && (parent.getType() == Token.VAR || parent.getType() == Token.EXPR_RESULT);\n+            boolean isNested = parent != null && parent.getParent() != null && parent.getParent().getType() == Token.FUNCTION;\n+            if (isDeclaration || isNested) {\n+                defineDeclaredFunction(n, parent);\n+                break;\n+            }\n+        } else {\n+            if (parent != null && parent.getType() == Token.NAME) {\n+                return;\n+            }\n+        }\n+        attachLiteralTypes(n);\n+        defineDeclaredFunction(n, parent);\n+        break;\n+    case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+    case Token.VAR:\n+    case Token.CONST:\n+    case Token.LET:\n+        defineVar(n, parent);\n+        attachLiteralTypes(n);\n+        break;\n+    case Token.DEFAULT_VALUE:\n+        defineDefaultValue(n, parent);\n+        attachLiteralTypes(n);\n+        break;\n+    default:\n+        attachLiteralTypes(n);\n+        break;\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}