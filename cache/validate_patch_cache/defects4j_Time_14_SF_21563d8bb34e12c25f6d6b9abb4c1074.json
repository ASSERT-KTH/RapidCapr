{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        boolean hasLeapYear = false;\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i == fieldIndex) {\n                int newValue = FieldUtils.safeAdd(values[i], valueToAdd);\n                if (iChronology.monthOfYear().getField(iChronology).isValidValue(newValue)) {\n                    values[i] = newValue;\n                } else {\n                    // handle invalid value for monthOfYear\n                    int month = values[i];\n                    int year = iChronology.year().get(instant);\n                    if (valueToAdd < 0) {\n                        // subtract years to get a valid value for month\n                        year--;\n                    }\n                    instant = iChronology.year().set(instant, year);\n                    instant = iChronology.monthOfYear().set(instant, month);\n                    hasLeapYear = iChronology.monthOfYear().isLeap(instant);\n                    if (hasLeapYear && month == 2 && iChronology.dayOfMonth().get(instant) == 29) {\n                        instant = iChronology.dayOfMonth().set(instant, 28);\n                    }\n                    continue;\n                }\n            }\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            if (i == 1 && iChronology.monthOfYear().isLeap(instant)) {\n                hasLeapYear = true;\n            }\n        }\n        instant = add(instant, valueToAdd);\n        if (hasLeapYear && iChronology.monthOfYear().get(instant) == 3 && iChronology.dayOfMonth().get(instant) == 1) {\n            instant = iChronology.monthOfYear().set(instant, 2);\n            instant = iChronology.dayOfMonth().set(instant, 29);\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..ba78ff91 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,53 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        boolean hasLeapYear = false;\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i == fieldIndex) {\n+                int newValue = FieldUtils.safeAdd(values[i], valueToAdd);\n+                if (iChronology.monthOfYear().getField(iChronology).isValidValue(newValue)) {\n+                    values[i] = newValue;\n+                } else {\n+                    // handle invalid value for monthOfYear\n+                    int month = values[i];\n+                    int year = iChronology.year().get(instant);\n+                    if (valueToAdd < 0) {\n+                        // subtract years to get a valid value for month\n+                        year--;\n+                    }\n+                    instant = iChronology.year().set(instant, year);\n+                    instant = iChronology.monthOfYear().set(instant, month);\n+                    hasLeapYear = iChronology.monthOfYear().isLeap(instant);\n+                    if (hasLeapYear && month == 2 && iChronology.dayOfMonth().get(instant) == 29) {\n+                        instant = iChronology.dayOfMonth().set(instant, 28);\n+                    }\n+                    continue;\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            if (i == 1 && iChronology.monthOfYear().isLeap(instant)) {\n+                hasLeapYear = true;\n+            }\n+        }\n+        instant = add(instant, valueToAdd);\n+        if (hasLeapYear && iChronology.monthOfYear().get(instant) == 3 && iChronology.dayOfMonth().get(instant) == 1) {\n+            instant = iChronology.monthOfYear().set(instant, 2);\n+            instant = iChronology.dayOfMonth().set(instant, 29);\n         }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}