{
    "patch": "      if (functionType.getTypeOfThis() != null &&\n          n.getParent().isCall() &&\n          n.getParent().getFirstChild() == n) {\n        visitGetPropOrGetElem(t, n.getParent(), n, functionType.getTypeOfThis(), false);\n        // No checking of the arguments if the call may throw an exception.\n        checkArgumentTypes(t, n.getParent().getNext(), functionType.getParameterTypes(),\n            functionType.hasRestFormals());\n      } else {\n        visitParameterList(t, n, functionType);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..2bc58923 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.getTypeOfThis() != null &&\n+          n.getParent().isCall() &&\n+          n.getParent().getFirstChild() == n) {\n+        visitGetPropOrGetElem(t, n.getParent(), n, functionType.getTypeOfThis(), false);\n+        // No checking of the arguments if the call may throw an exception.\n+        checkArgumentTypes(t, n.getParent().getNext(), functionType.getParameterTypes(),\n+            functionType.hasRestFormals());\n+      } else {\n+        visitParameterList(t, n, functionType);\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}