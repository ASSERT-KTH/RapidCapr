{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // First, try to resolve via properties since it's cheaper and usually gives more accurate results.\n    resolveViaProperties(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    if (isResolved()) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    // If failed to resolve via properties, try to resolve via registry.\n    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    if (resolvedViaRegistry) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    // If unable to resolve via registry or properties, proceed to resolve as regular.\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..9e5c733d 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -182,33 +182,34 @@ class NamedType extends ProxyObjectType {\n    */\n   @Override\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+    // First, try to resolve via properties since it's cheaper and usually gives more accurate results.\n+    resolveViaProperties(t, enclosing);\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n-\n-    if (resolved) {\n+    if (isResolved()) {\n       super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n \n-    resolveViaProperties(t, enclosing);\n+    // If failed to resolve via properties, try to resolve via registry.\n+    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n+    if (resolvedViaRegistry) {\n+      super.resolveInternal(t, enclosing);\n+      finishPropertyContinuations();\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n+    }\n \n+    // If unable to resolve via registry or properties, proceed to resolve as regular.\n     super.resolveInternal(t, enclosing);\n     if (isResolved()) {\n       finishPropertyContinuations();\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n   }\n \n   /**",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...ong;",
    "test_result": "FAIL"
}