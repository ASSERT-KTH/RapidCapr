{
    "patch": "public static String unescapeJava(String str) {\n    if (str == null) {\n        return null;\n    }\n    int length = str.length();\n    StringBuilder sb = new StringBuilder(length);\n    for (int i = 0; i < length; i++) {\n        char ch = str.charAt(i);\n        if (ch == '\\\\') {\n            if (++i >= length) {\n                throw new IllegalStateException(\"Invalid escape sequence in input\");\n            }\n            ch = str.charAt(i);\n            switch (ch) {\n            case '\"':\n            case '\\'':\n            case '\\\\':\n            case '/':\n                sb.append(ch);\n                break;\n            case 'b':\n                sb.append('\\b');\n                break;\n            case 'f':\n                sb.append('\\f');\n                break;\n            case 'n':\n                sb.append('\\n');\n                break;\n            case 'r':\n                sb.append('\\r');\n                break;\n            case 't':\n                sb.append('\\t');\n                break;\n            case 'u':\n                if (i+4 >= length) {\n                    throw new IllegalStateException(\"Invalid escape sequence in input\");\n                }\n                try {\n                    int codePoint = Integer.parseInt(str.substring(i+1,i+5), 16);\n                    sb.append(Character.toChars(codePoint));\n                    i += 4;\n                } catch (NumberFormatException e) {\n                    throw new IllegalStateException(\"Invalid Unicode escape sequence in input\", e);\n                }\n                break;\n            default:\n                throw new IllegalStateException(\"Invalid escape sequence in input\");\n            }\n        } else {\n            sb.append(ch);\n        }\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..75ba211d 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,62 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescapeJava(String str) {\n+    if (str == null) {\n+        return null;\n+    }\n+    int length = str.length();\n+    StringBuilder sb = new StringBuilder(length);\n+    for (int i = 0; i < length; i++) {\n+        char ch = str.charAt(i);\n+        if (ch == '\\\\') {\n+            if (++i >= length) {\n+                throw new IllegalStateException(\"Invalid escape sequence in input\");\n+            }\n+            ch = str.charAt(i);\n+            switch (ch) {\n+            case '\"':\n+            case '\\'':\n+            case '\\\\':\n+            case '/':\n+                sb.append(ch);\n+                break;\n+            case 'b':\n+                sb.append('\\b');\n+                break;\n+            case 'f':\n+                sb.append('\\f');\n+                break;\n+            case 'n':\n+                sb.append('\\n');\n+                break;\n+            case 'r':\n+                sb.append('\\r');\n+                break;\n+            case 't':\n+                sb.append('\\t');\n+                break;\n+            case 'u':\n+                if (i+4 >= length) {\n+                    throw new IllegalStateException(\"Invalid escape sequence in input\");\n+                }\n+                try {\n+                    int codePoint = Integer.parseInt(str.substring(i+1,i+5), 16);\n+                    sb.append(Character.toChars(codePoint));\n+                    i += 4;\n+                } catch (NumberFormatException e) {\n+                    throw new IllegalStateException(\"Invalid Unicode escape sequence in input\", e);\n+                }\n+                break;\n+            default:\n+                throw new IllegalStateException(\"Invalid escape sequence in input\");\n+            }\n+        } else {\n+            sb.append(ch);\n+        }\n+    }\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}