{
    "patch": "private final InvocationListener invocationListener = mock(InvocationListener.class);\nprivate final Log log = mock(Log.class);\n\n// ...\n\n@Before\npublic void setupMocks() {\n    MockitoAnnotations.initMocks(this);\n    mockSettings = new MockSettingsImpl<Object>()\n            .defaultAnswer(RETURNS_DEFAULTS)\n            .invocationListeners(Collections.singletonList(invocationListener));\n}\n\npublic <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    ((Factory) mock).setCallback(0, newFilter);\n}\n\n@Test\npublic void test() {\n    MyInterface mockObject = mock(MyInterface.class, mockSettings);\n    resetMock(mockObject);\n\n    // ...\n\n    verify(invocationListener).reportInvocation(any(MethodInvocationReport.class));\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..e24a0ce79 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,36 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+private final InvocationListener invocationListener = mock(InvocationListener.class);\n+private final Log log = mock(Log.class);\n+\n+// ...\n+\n+@Before\n+public void setupMocks() {\n+    MockitoAnnotations.initMocks(this);\n+    mockSettings = new MockSettingsImpl<Object>()\n+            .defaultAnswer(RETURNS_DEFAULTS)\n+            .invocationListeners(Collections.singletonList(invocationListener));\n+}\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    ((Factory) mock).setCallback(0, newFilter);\n+}\n+\n+@Test\n+public void test() {\n+    MyInterface mockObject = mock(MyInterface.class, mockSettings);\n+    resetMock(mockObject);\n+\n+    // ...\n+\n+    verify(invocationListener).reportInvocation(any(MethodInvocationReport.class));\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}