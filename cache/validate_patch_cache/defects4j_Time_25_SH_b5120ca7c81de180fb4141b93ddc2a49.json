{
    "patch": "if (offsetLocal == offsetAdjusted) {\n    if (offsetLocal != 0) {\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n        if (nextLocal != nextAdjusted) {\n            return offsetLocal;\n        }\n    }\n    return offsetAdjusted;\n}\nif (offsetLocal < offsetAdjusted) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    if (nextLocal != nextAdjusted) {\n        return offsetLocal;\n    }\n} else {\n    long prevAdjusted = previousTransition(instantAdjusted);\n    long prevLocal = previousTransition(instantLocal - offsetLocal);\n    if (prevAdjusted <= prevLocal) {\n        long nextAdjusted = nextTransition(instantAdjusted);\n        long nextLocal = nextTransition(instantLocal - offsetAdjusted);\n        if (nextAdjusted > nextLocal) {\n            return offsetAdjusted;\n        }\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..ba944bd1 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,34 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal == offsetAdjusted) {\n+    if (offsetLocal != 0) {\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+        if (nextLocal != nextAdjusted) {\n+            return offsetLocal;\n+        }\n+    }\n+    return offsetAdjusted;\n+}\n+if (offsetLocal < offsetAdjusted) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    if (nextLocal != nextAdjusted) {\n+        return offsetLocal;\n+    }\n+} else {\n+    long prevAdjusted = previousTransition(instantAdjusted);\n+    long prevLocal = previousTransition(instantLocal - offsetLocal);\n+    if (prevAdjusted <= prevLocal) {\n+        long nextAdjusted = nextTransition(instantAdjusted);\n+        long nextLocal = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextAdjusted > nextLocal) {\n+            return offsetAdjusted;\n+        }\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}