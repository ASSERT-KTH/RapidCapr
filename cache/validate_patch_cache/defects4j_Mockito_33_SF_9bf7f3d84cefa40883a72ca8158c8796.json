{
    "patch": "    public boolean hasSameMethod(Invocation candidate) {        \n        Method m1 = invocation.getMethod();\n        Method m2 = candidate.getMethod();\n\n        // Check if the declaring class and method names are the same\n        return m1.getDeclaringClass().getName().equals(m2.getDeclaringClass().getName()) && \n               m1.getName().equals(m2.getName());\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 203413fc9..9f0675105 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -90,13 +90,12 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n     }\n \n     public boolean hasSameMethod(Invocation candidate) {        \n-        //not using method.equals() for 1 good reason:\n-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest\n         Method m1 = invocation.getMethod();\n         Method m2 = candidate.getMethod();\n-        \n-        \t/* Avoid unnecessary cloning */\n-        return m1.equals(m2);\n+\n+        // Check if the declaring class and method names are the same\n+        return m1.getDeclaringClass().getName().equals(m2.getDeclaringClass().getName()) && \n+               m1.getName().equals(m2.getName());\n     }\n     \n     public Location getLocation() {\n@@ -126,4 +125,4 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n \n         return out;\n     }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}