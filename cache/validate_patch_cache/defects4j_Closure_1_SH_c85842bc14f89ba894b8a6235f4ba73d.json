{
    "patch": "      Node lastArg = argList.getLastChild();\n      while (lastArg != null && lastArg.isName()) {\n        String argName = lastArg.getString();\n        Var var = fnScope.getOwnSlot(argName);\n        if (var == null || !referenced.contains(var)) {\n          NodeUtil.removeChild(argList, lastArg);\n          compiler.reportCodeChange();\n          lastArg = argList.getLastChild();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..73acc905 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,14 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null && lastArg.isName()) {\n+        String argName = lastArg.getString();\n+        Var var = fnScope.getOwnSlot(argName);\n+        if (var == null || !referenced.contains(var)) {\n+          NodeUtil.removeChild(argList, lastArg);\n+          compiler.reportCodeChange();\n+          lastArg = argList.getLastChild();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}