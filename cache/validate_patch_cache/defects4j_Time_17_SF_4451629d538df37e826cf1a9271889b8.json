{
    "patch": "public long adjustOffset(long instant, boolean earlierOrLater) {\n    // find nearest transition times before and after the given instant\n    long transitionBefore = previousTransition(instant);\n    long transitionAfter = nextTransition(instant);\n    \n    // if there are no transitions, then there is no overlap or gap\n    if (transitionBefore == instant || transitionAfter == instant) {\n        return instant;\n    }\n    \n    // check if the transitions have different offsets\n    boolean overlap = getOffset(transitionBefore) != getOffset(transitionAfter);\n\n    // calculate the result based on whether we want to move earlier or later\n    if (overlap && earlierOrLater) {\n        return transitionAfter;\n    } else if (overlap && !earlierOrLater) {\n        return transitionBefore;\n    } else {\n        return instant;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802a..917410e7 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1160,24 +1160,28 @@ public abstract class DateTimeZone implements Serializable {\n      * @param earlierOrLater  false for earlier, true for later\n      * @return the adjusted instant millis\n      */\n-    public long adjustOffset(long instant, boolean earlierOrLater) {\n-        // a bit messy, but will work in all non-pathological cases\n-        \n-        // evaluate 3 hours before and after to work out if anything is happening\n-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        if (instantBefore == instantAfter) {\n-            return instant;  // not an overlap (less than is a gap, equal is normal case)\n-        }\n-        \n-        // work out range of instants that have duplicate local times\n-        long local = convertUTCToLocal(instant);\n-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n-        \n-        // calculate result\n-          // currently in later offset\n-          // currently in earlier offset\n+public long adjustOffset(long instant, boolean earlierOrLater) {\n+    // find nearest transition times before and after the given instant\n+    long transitionBefore = previousTransition(instant);\n+    long transitionAfter = nextTransition(instant);\n+    \n+    // if there are no transitions, then there is no overlap or gap\n+    if (transitionBefore == instant || transitionAfter == instant) {\n+        return instant;\n+    }\n+    \n+    // check if the transitions have different offsets\n+    boolean overlap = getOffset(transitionBefore) != getOffset(transitionAfter);\n+\n+    // calculate the result based on whether we want to move earlier or later\n+    if (overlap && earlierOrLater) {\n+        return transitionAfter;\n+    } else if (overlap && !earlierOrLater) {\n+        return transitionBefore;\n+    } else {\n+        return instant;\n     }\n+}\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n \n     //-----------------------------------------------------------------------",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2007-10-28T02:15:00.000+01:00> but was:<2007-10-28T02:15:00.000+02:00>",
    "test_result": "FAIL"
}