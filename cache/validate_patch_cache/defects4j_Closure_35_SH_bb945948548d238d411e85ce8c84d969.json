{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          if (objType.hasProperty(prop)) continue;\n          JSType propType = constraintObj.getPropertyType(prop);\n          JSType typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n          objType.defineInferredProperty(\n              prop, typeToInfer.restrictByNotNullOrUndefined(), null);\n          if (propType.equals(getNativeType(UNKNOWN_TYPE))) {\n            warnings.add(createWarningMessage(\n                n, JSError.make(UndeclaredVarsCheck.UNDECLARED_REFERENCE_WARNING,\n                    prop, n.getQualifiedName())));\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..cbeb12ba 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1122,17 +1122,17 @@ class TypeInference\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n+          if (objType.hasProperty(prop)) continue;\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+          JSType typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+          objType.defineInferredProperty(\n+              prop, typeToInfer.restrictByNotNullOrUndefined(), null);\n+          if (propType.equals(getNativeType(UNKNOWN_TYPE))) {\n+            warnings.add(createWarningMessage(\n+                n, JSError.make(UndeclaredVarsCheck.UNDECLARED_REFERENCE_WARNING,\n+                    prop, n.getQualifiedName())));\n           }\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}