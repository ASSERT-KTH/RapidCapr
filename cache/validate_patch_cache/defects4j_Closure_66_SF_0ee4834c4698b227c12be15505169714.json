{
    "patch": "public static double getTypedPercent(String js) {\n    int correctCount = 0;\n    String[] lines = js.split(\"\\\\r?\\\\n\");\n    for (String line : lines) {\n        String[] parts = line.split(\":\");\n        String type = parts[0].trim();\n        String answer = parts[1].trim();\n        if (type.equals(\"String\") && answer.startsWith(\"\\\"\") && answer.endsWith(\"\\\"\")) {\n            correctCount++;\n        } else if (type.equals(\"Number\") && answer.matches(\"\\\\d+\")) {\n            correctCount++;\n        } else if (type.equals(\"Boolean\") && (answer.equals(\"true\") || answer.equals(\"false\"))) {\n            correctCount++;\n        }\n    }\n    return ((double) correctCount / lines.length) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..e0bf787e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String js) {\n+    int correctCount = 0;\n+    String[] lines = js.split(\"\\\\r?\\\\n\");\n+    for (String line : lines) {\n+        String[] parts = line.split(\":\");\n+        String type = parts[0].trim();\n+        String answer = parts[1].trim();\n+        if (type.equals(\"String\") && answer.startsWith(\"\\\"\") && answer.endsWith(\"\\\"\")) {\n+            correctCount++;\n+        } else if (type.equals(\"Number\") && answer.matches(\"\\\\d+\")) {\n+            correctCount++;\n+        } else if (type.equals(\"Boolean\") && (answer.equals(\"true\") || answer.equals(\"false\"))) {\n+            correctCount++;\n+        }\n+    }\n+    return ((double) correctCount / lines.length) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}