{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException(\"Invalid argument for regularized gamma function.\");\n    }\n\n    double eps = 10e-15;\n    double gamma = Gamma.gamma(a);\n    double incompleteGamma = Gamma.incompleteGamma(a, x);\n\n    if (a > 300) {\n        if (incompleteGamma / gamma > 1 - eps) {\n            return 1;\n        } else if (incompleteGamma / gamma < eps) {\n            return 0;\n        }\n    } else {\n        double sum = 0;\n        double term = 1 / a;\n        double n = 1;\n        while (term != 0) {\n            sum += term;\n            term *= x / (a + n);\n            n++;\n        }\n        double regularizedGamma = Math.exp(-x + a * Math.log(x) - Math.log(gamma)) * sum;\n        if (regularizedGamma > 1 - eps) {\n            return 1;\n        } else if (regularizedGamma < eps) {\n            return 0;\n        }\n    }\n    return incompleteGamma / gamma;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bf4a59da9 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,39 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException(\"Invalid argument for regularized gamma function.\");\n+    }\n+\n+    double eps = 10e-15;\n+    double gamma = Gamma.gamma(a);\n+    double incompleteGamma = Gamma.incompleteGamma(a, x);\n+\n+    if (a > 300) {\n+        if (incompleteGamma / gamma > 1 - eps) {\n+            return 1;\n+        } else if (incompleteGamma / gamma < eps) {\n+            return 0;\n+        }\n+    } else {\n+        double sum = 0;\n+        double term = 1 / a;\n+        double n = 1;\n+        while (term != 0) {\n+            sum += term;\n+            term *= x / (a + n);\n+            n++;\n+        }\n+        double regularizedGamma = Math.exp(-x + a * Math.log(x) - Math.log(gamma)) * sum;\n+        if (regularizedGamma > 1 - eps) {\n+            return 1;\n+        } else if (regularizedGamma < eps) {\n+            return 0;\n+        }\n+    }\n+    return incompleteGamma / gamma;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}