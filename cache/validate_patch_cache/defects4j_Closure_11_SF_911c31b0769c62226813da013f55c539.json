{
    "patch": "public String getprop(String key, String defaultValue) {\n    Runtime runtime = Runtime.getRuntime();\n    try {\n        Process process = runtime.exec(new String[] { \"getprop\", key });\n        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()), 1024);\n        String result = reader.readLine();\n        reader.close();\n\n        if (result != null && !result.equals(\"\")) {\n            return result;\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n\n    return defaultValue;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..35b6aca9 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop(String key, String defaultValue) {\n+    Runtime runtime = Runtime.getRuntime();\n+    try {\n+        Process process = runtime.exec(new String[] { \"getprop\", key });\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()), 1024);\n+        String result = reader.readLine();\n+        reader.close();\n+\n+        if (result != null && !result.equals(\"\")) {\n+            return result;\n+        }\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+    }\n+\n+    return defaultValue;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}