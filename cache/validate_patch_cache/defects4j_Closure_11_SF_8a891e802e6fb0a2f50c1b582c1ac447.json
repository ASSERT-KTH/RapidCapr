{
    "patch": "public static String getProperty(String key) {\n    if (key == null || key.length() == 0) {\n        throw new IllegalArgumentException(\"key cannot be null or empty\");\n    }\n\n    Properties properties = new Properties();\n    InputStream inputStream = null;\n    String value = null;\n\n    try {\n        inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"config.properties\");\n\n        if (inputStream != null) {\n            properties.load(inputStream);\n            value = properties.getProperty(key);\n        } else {\n            System.err.println(\"Unable to load properties file!\");\n        }\n    } catch (IOException e) {\n        System.err.println(\"Exception caught: \" + e.getMessage());\n    } finally {\n        if (inputStream != null) {\n            try {\n                inputStream.close();\n            } catch (IOException e) {\n                System.err.println(\"Exception caught: \" + e.getMessage());\n            }\n        }\n    }\n\n    if (value == null) {\n        System.out.println(\"Unable to find property value for key: \" + key);\n    }\n\n    return value;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..44d736d5 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,42 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getProperty(String key) {\n+    if (key == null || key.length() == 0) {\n+        throw new IllegalArgumentException(\"key cannot be null or empty\");\n+    }\n+\n+    Properties properties = new Properties();\n+    InputStream inputStream = null;\n+    String value = null;\n+\n+    try {\n+        inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"config.properties\");\n+\n+        if (inputStream != null) {\n+            properties.load(inputStream);\n+            value = properties.getProperty(key);\n+        } else {\n+            System.err.println(\"Unable to load properties file!\");\n+        }\n+    } catch (IOException e) {\n+        System.err.println(\"Exception caught: \" + e.getMessage());\n+    } finally {\n+        if (inputStream != null) {\n+            try {\n+                inputStream.close();\n+            } catch (IOException e) {\n+                System.err.println(\"Exception caught: \" + e.getMessage());\n+            }\n+        }\n+    }\n+\n+    if (value == null) {\n+        System.out.println(\"Unable to find property value for key: \" + key);\n+    }\n+\n+    return value;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}