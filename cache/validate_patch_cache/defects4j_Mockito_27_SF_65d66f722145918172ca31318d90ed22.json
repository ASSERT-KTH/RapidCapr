{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    \n    if (mock instanceof Factory) {\n        Factory factory = (Factory) mock;\n        Callback[] existingCallbacks = factory.getCallbacks();\n        Callback[] newCallbacks = Arrays.copyOf(existingCallbacks, existingCallbacks.length + 1);\n        newCallbacks[existingCallbacks.length] = newFilter;\n        factory.setCallbacks(newCallbacks);\n    } else if (mock instanceof MockitoMock) {\n        MockitoMock<T> mockitoMock = (MockitoMock<T>) mock;\n        Map<Object, MockHandlerImpl> oldHandlerMap = mockitoMock.getMockitoMockHandler().getMockHandlers();\n        Map<Object, MockHandlerImpl> newHandlerMap = new HashMap<>(oldHandlerMap);\n        Object mockitoMockHandler = mockitoMock.getMockitoMockHandler();\n        newHandlerMap.put(mockitoMockHandler, newMockHandler);\n        mockitoMock.setMockitoMockHandler(new MockHandlerRepositoryImpl<>(newHandlerMap));\n    }\n    \n    mock = Mockito.spy(mock);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..569ab9821 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,29 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    \n+    if (mock instanceof Factory) {\n+        Factory factory = (Factory) mock;\n+        Callback[] existingCallbacks = factory.getCallbacks();\n+        Callback[] newCallbacks = Arrays.copyOf(existingCallbacks, existingCallbacks.length + 1);\n+        newCallbacks[existingCallbacks.length] = newFilter;\n+        factory.setCallbacks(newCallbacks);\n+    } else if (mock instanceof MockitoMock) {\n+        MockitoMock<T> mockitoMock = (MockitoMock<T>) mock;\n+        Map<Object, MockHandlerImpl> oldHandlerMap = mockitoMock.getMockitoMockHandler().getMockHandlers();\n+        Map<Object, MockHandlerImpl> newHandlerMap = new HashMap<>(oldHandlerMap);\n+        Object mockitoMockHandler = mockitoMock.getMockitoMockHandler();\n+        newHandlerMap.put(mockitoMockHandler, newMockHandler);\n+        mockitoMock.setMockitoMockHandler(new MockHandlerRepositoryImpl<>(newHandlerMap));\n+    }\n+    \n+    mock = Mockito.spy(mock);\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}