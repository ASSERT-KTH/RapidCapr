{
    "patch": "      if (parent != null) {\n        switch(parent.getType()) {\n          // Don't traverse functions that are getting lent to a prototype.\n          case Token.ASSIGN:\n            Node lhs = parent.getFirstChild();\n            if (NodeUtil.isGet(lhs)) {\n              if (lhs.getType() == Token.GETPROP &&\n                  lhs.getLastChild().getString().equals(\"prototype\")) {\n                return false;\n              }\n              Node llhs = lhs.getFirstChild();\n              if (llhs.getType() == Token.GETPROP &&\n                  llhs.getLastChild().getString().equals(\"prototype\")) {\n                return false;\n              }\n            }\n            break;\n          case Token.OBJECTLIT:\n            Node objLitParent = parent.getParent();\n            if (NodeUtil.isCall(objLitParent) &&\n                NodeUtil.isGet(objLitParent.getFirstChild()) &&\n                objLitParent.getFirstChild().getFirstChild().matchesQualifiedName(\"Object.defineProperties\")) {\n              return false;\n            }\n            if (parent.getParent().getType() == Token.ASSIGN &&\n                parent.getParent().getParent().getType() == Token.EXPR_RESULT) {\n              return false;\n            }\n            break;\n          case Token.FUNCTION:\n            JSDocInfo jsDoc = getFunctionJsDocInfo(parent);\n            // Don't traverse functions that are constructors or have the @this or @override annotation.\n            if (jsDoc != null && (\n                    jsDoc.isConstructor() ||\n                            jsDoc.isInterface() ||\n                            jsDoc.hasThisType() ||\n                            jsDoc.isOverride())) {\n              return false;\n            }\n\n            // Don't traverse functions that are getting lent to a prototype.\n            if (parent.getParent() != null &&\n                NodeUtil.isPrototypeProperty(parent.getParent())) {\n              return false;\n            }\n            // Don't traverse functions unless they would normally be able to have a @this annotation.\n            int pType = parent.getType();\n            if (!(pType == Token.BLOCK ||\n                    pType == Token.SCRIPT ||\n                    pType == Token.NAME ||\n                    pType == Token.ASSIGN ||\n\n                    // object literal keys\n                    pType == Token.STRING ||\n                    pType == Token.NUMBER)) {\n              return false;\n            }\n            break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..1ddac88a 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,64 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null) {\n+        switch(parent.getType()) {\n+          // Don't traverse functions that are getting lent to a prototype.\n+          case Token.ASSIGN:\n+            Node lhs = parent.getFirstChild();\n+            if (NodeUtil.isGet(lhs)) {\n+              if (lhs.getType() == Token.GETPROP &&\n+                  lhs.getLastChild().getString().equals(\"prototype\")) {\n+                return false;\n+              }\n+              Node llhs = lhs.getFirstChild();\n+              if (llhs.getType() == Token.GETPROP &&\n+                  llhs.getLastChild().getString().equals(\"prototype\")) {\n+                return false;\n+              }\n+            }\n+            break;\n+          case Token.OBJECTLIT:\n+            Node objLitParent = parent.getParent();\n+            if (NodeUtil.isCall(objLitParent) &&\n+                NodeUtil.isGet(objLitParent.getFirstChild()) &&\n+                objLitParent.getFirstChild().getFirstChild().matchesQualifiedName(\"Object.defineProperties\")) {\n+              return false;\n+            }\n+            if (parent.getParent().getType() == Token.ASSIGN &&\n+                parent.getParent().getParent().getType() == Token.EXPR_RESULT) {\n+              return false;\n+            }\n+            break;\n+          case Token.FUNCTION:\n+            JSDocInfo jsDoc = getFunctionJsDocInfo(parent);\n+            // Don't traverse functions that are constructors or have the @this or @override annotation.\n+            if (jsDoc != null && (\n+                    jsDoc.isConstructor() ||\n+                            jsDoc.isInterface() ||\n+                            jsDoc.hasThisType() ||\n+                            jsDoc.isOverride())) {\n+              return false;\n+            }\n+\n+            // Don't traverse functions that are getting lent to a prototype.\n+            if (parent.getParent() != null &&\n+                NodeUtil.isPrototypeProperty(parent.getParent())) {\n+              return false;\n+            }\n+            // Don't traverse functions unless they would normally be able to have a @this annotation.\n+            int pType = parent.getType();\n+            if (!(pType == Token.BLOCK ||\n+                    pType == Token.SCRIPT ||\n+                    pType == Token.NAME ||\n+                    pType == Token.ASSIGN ||\n+\n+                    // object literal keys\n+                    pType == Token.STRING ||\n+                    pType == Token.NUMBER)) {\n+              return false;\n+            }\n+            break;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}