{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    secondMoment.increment(value);\n    n++;\n\n    // If mean, variance, or geometric mean have been overridden,\n    // we need to increment these with special handling for NaN or zero values\n    if (!(meanImpl instanceof Mean)) {\n        if (Double.isNaN(value)) {\n            ((Mean) meanImpl).increment(0);\n        } else {\n            ((Mean) meanImpl).increment(value);\n        }\n    }\n    if (!(varianceImpl instanceof Variance)) {\n        if (Double.isNaN(value)) {\n            ((Variance) varianceImpl).increment(0);\n        } else {\n            ((Variance) varianceImpl).increment(value);\n        }\n    }\n    if (!(geoMeanImpl instanceof GeometricMean)) {\n        if (value <= 0.0 || Double.isNaN(value)) {\n            return;\n        }\n        ((GeometricMean) geoMeanImpl).increment(value);\n    }\n\n    if (Double.isNaN(value)) {\n        sumLogImpl.increment(0.0);\n    } else {\n        sumLogImpl.increment(Math.log(value));\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..83d7f698c 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,27 +146,44 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    secondMoment.increment(value);\n+    n++;\n+\n+    // If mean, variance, or geometric mean have been overridden,\n+    // we need to increment these with special handling for NaN or zero values\n+    if (!(meanImpl instanceof Mean)) {\n+        if (Double.isNaN(value)) {\n+            ((Mean) meanImpl).increment(0);\n+        } else {\n+            ((Mean) meanImpl).increment(value);\n         }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n+    }\n+    if (!(varianceImpl instanceof Variance)) {\n+        if (Double.isNaN(value)) {\n+            ((Variance) varianceImpl).increment(0);\n+        } else {\n+            ((Variance) varianceImpl).increment(value);\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n+    }\n+    if (!(geoMeanImpl instanceof GeometricMean)) {\n+        if (value <= 0.0 || Double.isNaN(value)) {\n+            return;\n         }\n-        n++;\n+        ((GeometricMean) geoMeanImpl).increment(value);\n     }\n \n+    if (Double.isNaN(value)) {\n+        sumLogImpl.increment(0.0);\n+    } else {\n+        sumLogImpl.increment(Math.log(value));\n+    }\n+}\n+\n     /**\n      * Returns the number of available values\n      * @return The number of available values",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<NaN>",
    "test_result": "FAIL"
}