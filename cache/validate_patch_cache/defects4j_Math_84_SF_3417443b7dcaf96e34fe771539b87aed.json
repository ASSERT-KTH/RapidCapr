{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            } else {\n                simplex = contract(original, best, comparator);\n            }\n\n        } else {\n            simplex = contract(original, best, comparator);\n        }\n\n        double range = 0;\n        for (int i = 1; i < simplex.length; i++) {\n            range = FastMath.max(range,\n                    getPointDistance(simplex[0].getPoint(), simplex[i].getPoint()));\n        }\n\n        if (range < simplexSideLengthTolerance && minJacobian > jacobianEvaluations) {\n            throw new OptimizationException(\n                    new MaxCountExceededException(maxIterations), \"Unable to converge\");\n        } else if (range < simplexSideLengthTolerance) {\n            return;\n        }\n\n    }\n\n}\n\nprotected RealPointValuePair[] contract(final RealPointValuePair[] original,\n        final RealPointValuePair best, final Comparator<RealPointValuePair> comparator) {\n\n    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n    for (int i = 1; i < original.length; i++) {\n        final double[] contracted = new double[original[i].getPoint().length];\n        for (int j = 0; j < contracted.length; j++) {\n            contracted[j] = contractionFactor * best.getPoint()[j]\n                    + (1 - contractionFactor) * original[i].getPoint()[j];\n        }\n        final double value = computeObjectiveValue(contracted);\n        contractedSimplex[i - 1] = new RealPointValuePair(contracted, value);\n    }\n    contractedSimplex[original.length - 1] = original[0];\n    Arrays.sort(contractedSimplex, comparator);\n\n    return contractedSimplex;\n}\n\nprivate double getPointDistance(final double[] pointA, final double[] pointB) {\n    double sum = 0.0;\n    for (int i = 0; i < pointA.length; i++) {\n        final double dp = pointA[i] - pointB[i];\n        sum += dp * dp;\n    }\n    return Math.sqrt(sum);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..f71dae485 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,79 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                simplex = contract(original, best, comparator);\n+            }\n \n-                return;\n+        } else {\n+            simplex = contract(original, best, comparator);\n+        }\n \n-            }\n+        double range = 0;\n+        for (int i = 1; i < simplex.length; i++) {\n+            range = FastMath.max(range,\n+                    getPointDistance(simplex[0].getPoint(), simplex[i].getPoint()));\n+        }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+        if (range < simplexSideLengthTolerance && minJacobian > jacobianEvaluations) {\n+            throw new OptimizationException(\n+                    new MaxCountExceededException(maxIterations), \"Unable to converge\");\n+        } else if (range < simplexSideLengthTolerance) {\n+            return;\n+        }\n \n-            // check convergence\n-                return;\n-            }\n+    }\n \n+}\n+\n+protected RealPointValuePair[] contract(final RealPointValuePair[] original,\n+        final RealPointValuePair best, final Comparator<RealPointValuePair> comparator) {\n+\n+    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+    for (int i = 1; i < original.length; i++) {\n+        final double[] contracted = new double[original[i].getPoint().length];\n+        for (int j = 0; j < contracted.length; j++) {\n+            contracted[j] = contractionFactor * best.getPoint()[j]\n+                    + (1 - contractionFactor) * original[i].getPoint()[j];\n         }\n+        final double value = computeObjectiveValue(contracted);\n+        contractedSimplex[i - 1] = new RealPointValuePair(contracted, value);\n+    }\n+    contractedSimplex[original.length - 1] = original[0];\n+    Arrays.sort(contractedSimplex, comparator);\n \n+    return contractedSimplex;\n+}\n+\n+private double getPointDistance(final double[] pointA, final double[] pointB) {\n+    double sum = 0.0;\n+    for (int i = 0; i < pointA.length; i++) {\n+        final double dp = pointA[i] - pointB[i];\n+        sum += dp * dp;\n     }\n+    return Math.sqrt(sum);\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}