{
    "patch": "if (!modifier.isDeclared()) {\n      ObjectType objType = (ObjectType) constraintObj;\n      for (String prop : objType.getOwnPropertyNames()) {\n        JSType propType = objType.getPropertyType(prop);\n        if (prop.equals(\"arguments\")) {\n          continue;\n        }\n        JSType inferredType =\n            hasProperty(prop) ? getInferredPropertyType(prop) : getNativeType(NULL_TYPE);\n        if (propType.isNumberValueType() && inferredType.isNumberValueType()) {\n          if (!inferredType.isSubtypeOf(propType)) {\n            defineInferredProperty(prop, getNativeType(NUMBER_TYPE), null);\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..c80c8ceb 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,22 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+if (!modifier.isDeclared()) {\n+      ObjectType objType = (ObjectType) constraintObj;\n+      for (String prop : objType.getOwnPropertyNames()) {\n+        JSType propType = objType.getPropertyType(prop);\n+        if (prop.equals(\"arguments\")) {\n+          continue;\n+        }\n+        JSType inferredType =\n+            hasProperty(prop) ? getInferredPropertyType(prop) : getNativeType(NULL_TYPE);\n+        if (propType.isNumberValueType() && inferredType.isNumberValueType()) {\n+          if (!inferredType.isSubtypeOf(propType)) {\n+            defineInferredProperty(prop, getNativeType(NUMBER_TYPE), null);\n+          }\n+        }\n+      }\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}