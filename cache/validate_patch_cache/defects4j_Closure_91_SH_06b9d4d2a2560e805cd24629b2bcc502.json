{
    "patch": "      if (NodeUtil.isGet(lhs)) {\n        if (lhs.getFirstChild().getType() == Token.BLOCK) {\n          // function.prototype.xxx = yyy, where xxx is any string.\n          return false;\n        }\n\n        // We must check the grandparent in the cases of \"(a.b).c = d\"\n        // so that we don't traverse into an object literal that is being\n        // defined and is assigned in a property on its prototype.\n        Node grandparent = NodeUtil.getGrandparent(n);\n        // Cases of \"a[y] = z\"\n        if (grandparent != null\n            && grandparent.getType() == Token.GETPROP\n            && grandparent.getParent().getType() == Token.ASSIGN) {\n          Node methodNode = grandparent.getFirstChild();\n          if (NodeUtil.isObjectType(methodNode.getFirstChild())) {\n            if (methodNode.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n          }\n        }\n\n        // Don't traverse things that look like:\n        // SomeObject.prototype.someFunction.call(...)\n        // SomeObject.prototype.someFunction.apply(...)\n        if (lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\") &&\n            lhs.getParent().getType() == Token.CALL &&\n            lhs.getNext().getString().equals(\"call\")) {\n          return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..498c3f8a 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,36 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(lhs)) {\n+        if (lhs.getFirstChild().getType() == Token.BLOCK) {\n+          // function.prototype.xxx = yyy, where xxx is any string.\n+          return false;\n+        }\n+\n+        // We must check the grandparent in the cases of \"(a.b).c = d\"\n+        // so that we don't traverse into an object literal that is being\n+        // defined and is assigned in a property on its prototype.\n+        Node grandparent = NodeUtil.getGrandparent(n);\n+        // Cases of \"a[y] = z\"\n+        if (grandparent != null\n+            && grandparent.getType() == Token.GETPROP\n+            && grandparent.getParent().getType() == Token.ASSIGN) {\n+          Node methodNode = grandparent.getFirstChild();\n+          if (NodeUtil.isObjectType(methodNode.getFirstChild())) {\n+            if (methodNode.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+          }\n+        }\n+\n+        // Don't traverse things that look like:\n+        // SomeObject.prototype.someFunction.call(...)\n+        // SomeObject.prototype.someFunction.apply(...)\n+        if (lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\") &&\n+            lhs.getParent().getType() == Token.CALL &&\n+            lhs.getNext().getString().equals(\"call\")) {\n+          return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}