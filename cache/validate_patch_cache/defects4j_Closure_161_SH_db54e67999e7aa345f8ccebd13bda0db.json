{
    "patch": "    if (left.getType() == Token.ARRAYLIT && left.getFirstChild() == null) {\n      // Empty array literal GETELEM always returns undefined.\n      Node undefinedResult = NodeUtil.newUndefinedNode(left);\n      parent.replaceChild(n, undefinedResult);\n      reportCodeChange();\n      return undefinedResult;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..87497e43 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,12 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+    if (left.getType() == Token.ARRAYLIT && left.getFirstChild() == null) {\n+      // Empty array literal GETELEM always returns undefined.\n+      Node undefinedResult = NodeUtil.newUndefinedNode(left);\n+      parent.replaceChild(n, undefinedResult);\n+      reportCodeChange();\n+      return undefinedResult;\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}