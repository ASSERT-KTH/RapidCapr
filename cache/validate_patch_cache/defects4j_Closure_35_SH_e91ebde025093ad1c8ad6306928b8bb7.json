{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    } else if (constraintObj != null && constraintObj.isFunctionType()) {\n      FunctionType funType = JSType.toMaybeFunctionType(type);\n      if (funType != null) {\n        inferFormalTypes(funType.getParameterNames(), funType.getParameterTypes(),\n            constraintObj.toMaybeFunctionType());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..9f98ce23 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1133,6 +1133,11 @@ class TypeInference\n           }\n         }\n       }\n+    } else if (constraintObj != null && constraintObj.isFunctionType()) {\n+      FunctionType funType = JSType.toMaybeFunctionType(type);\n+      if (funType != null) {\n+        inferFormalTypes(funType.getParameterNames(), funType.getParameterTypes(),\n+            constraintObj.toMaybeFunctionType());\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}