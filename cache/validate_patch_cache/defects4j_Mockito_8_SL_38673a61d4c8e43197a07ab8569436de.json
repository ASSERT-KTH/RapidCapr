{
    "patch": "} else if (actualTypeArgument instanceof TypeVariable<?> && !contextualActualTypeParameters.containsKey(actualTypeArgument)) {\n                contextualActualTypeParameters.put(typeParameter, Object.class);\n                TypeVariable<?> typeVariable = (TypeVariable<?>) actualTypeArgument;\n                Type[] bounds = typeVariable.getBounds();\n                for (Type bound : bounds) {\n                    if (bound instanceof TypeVariable<?>) {\n                        Type resolvedType = contextualActualTypeParameters.get(bound);\n                        if (resolvedType == null) {\n                            resolveTypeParametersOfVariables(bound, contextualActualTypeParameters, visited);\n                        }\n                        resolvedType = contextualActualTypeParameters.get(bound);\n                        if (!resolvedType.equals(Object.class)) {\n                            contextualActualTypeParameters.put(typeParameter, resolvedType);\n                            break;\n                        }\n                    } else {\n                        contextualActualTypeParameters.put(typeParameter, bound);\n                        break;\n                    }\n                }\n            } else {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..cfea59e81 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,29 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+} else if (actualTypeArgument instanceof TypeVariable<?> && !contextualActualTypeParameters.containsKey(actualTypeArgument)) {\n+                contextualActualTypeParameters.put(typeParameter, Object.class);\n+                TypeVariable<?> typeVariable = (TypeVariable<?>) actualTypeArgument;\n+                Type[] bounds = typeVariable.getBounds();\n+                for (Type bound : bounds) {\n+                    if (bound instanceof TypeVariable<?>) {\n+                        Type resolvedType = contextualActualTypeParameters.get(bound);\n+                        if (resolvedType == null) {\n+                            resolveTypeParametersOfVariables(bound, contextualActualTypeParameters, visited);\n+                        }\n+                        resolvedType = contextualActualTypeParameters.get(bound);\n+                        if (!resolvedType.equals(Object.class)) {\n+                            contextualActualTypeParameters.put(typeParameter, resolvedType);\n+                            break;\n+                        }\n+                    } else {\n+                        contextualActualTypeParameters.put(typeParameter, bound);\n+                        break;\n+                    }\n+                }\n+            } else {\n+                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+            }\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}