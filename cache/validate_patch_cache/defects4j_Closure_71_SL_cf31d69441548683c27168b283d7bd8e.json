{
    "patch": "boolean isOverride = parent != null && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop && (t.inGlobalScope() || (t.getScopeDepth() == 2 && t.getScope().isGlobal())) &&``` \n\nThis infill considers the case when the block in which the property assignment occurs is nested within a function or a block",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..7bc7557c 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,9 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+boolean isOverride = parent != null && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop && (t.inGlobalScope() || (t.getScopeDepth() == 2 && t.getScope().isGlobal())) &&``` \n+\n+This infill considers the case when the block in which the property assignment occurs is nested within a function or a block\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}