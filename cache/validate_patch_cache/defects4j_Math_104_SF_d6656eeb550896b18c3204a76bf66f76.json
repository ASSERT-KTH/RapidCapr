{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.MathUtils;\n\npublic class MyMath {\n\n    public static double regularizedGamma(double a, double x) {\n        if (a <= 0) {\n            throw new IllegalArgumentException(\"a must be positive.\");\n        }\n        if (x < 0) {\n            throw new IllegalArgumentException(\"x must be non-negative.\");\n        }\n        if (x == 0) {\n            return 0.0;\n        }\n        if (Double.isInfinite(a)) {\n            return Double.NaN;\n        }\n        if (Double.isInfinite(x)) {\n            return 1.0;\n        }\n        if (a > 100) {\n            return Gamma.regularizedGammaQ(a, x);\n        }\n        double s = 1 / a;\n        double r = s;\n        for (int i = 1; i <= 100 && !MathUtils.equals(s, 0, 1); ++i) {\n            s *= x / (a + i);\n            r += s;\n        }\n        return Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a)) * r;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..cea82d8c2 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,39 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.MathUtils;\n+\n+public class MyMath {\n+\n+    public static double regularizedGamma(double a, double x) {\n+        if (a <= 0) {\n+            throw new IllegalArgumentException(\"a must be positive.\");\n+        }\n+        if (x < 0) {\n+            throw new IllegalArgumentException(\"x must be non-negative.\");\n+        }\n+        if (x == 0) {\n+            return 0.0;\n+        }\n+        if (Double.isInfinite(a)) {\n+            return Double.NaN;\n+        }\n+        if (Double.isInfinite(x)) {\n+            return 1.0;\n+        }\n+        if (a > 100) {\n+            return Gamma.regularizedGammaQ(a, x);\n+        }\n+        double s = 1 / a;\n+        double r = s;\n+        for (int i = 1; i <= 100 && !MathUtils.equals(s, 0, 1); ++i) {\n+            s *= x / (a + i);\n+            r += s;\n+        }\n+        return Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a)) * r;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}