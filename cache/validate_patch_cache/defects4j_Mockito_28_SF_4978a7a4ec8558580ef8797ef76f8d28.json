{
    "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n        boolean accessible = field.canAccess(fieldInstance);\n        field.setAccessible(true);\n        Object matchingMock = mocks.stream()\n                .filter(mock -> field.getType().isAssignableFrom(mock.getClass()))\n                .findFirst()\n                .orElse(null);\n        if (matchingMock != null) {\n            try {\n                field.set(fieldInstance, matchingMock);\n            } catch (IllegalAccessException e) {\n                throw new RuntimeException(\"Failed to inject mock candidate into field\", e);\n            }\n        }\n        field.setAccessible(accessible);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..b3fdf48d2 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,11 +88,25 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n-        }\n-    }\n+\n+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+        boolean accessible = field.canAccess(fieldInstance);\n+        field.setAccessible(true);\n+        Object matchingMock = mocks.stream()\n+                .filter(mock -> field.getType().isAssignableFrom(mock.getClass()))\n+                .findFirst()\n+                .orElse(null);\n+        if (matchingMock != null) {\n+            try {\n+                field.set(fieldInstance, matchingMock);\n+            } catch (IllegalAccessException e) {\n+                throw new RuntimeException(\"Failed to inject mock candidate into field\", e);\n+            }\n+        }\n+        field.setAccessible(accessible);\n+    }\n+}\n \n     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {\n         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();",
    "result_reason": "error: lambda expressions are not supported in -source 1.5",
    "test_result": "ERROR"
}