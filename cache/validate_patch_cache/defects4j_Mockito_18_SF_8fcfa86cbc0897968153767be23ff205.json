{
    "patch": "public class MyClass {\n    public static <T> MethodValues returnValueFor(final T clazz) {\n        return new MethodValues() {\n            public Object returnValueFor(Method method, Object[] args) {\n                if (clazz.equals(method.getReturnType())) {\n                    if (clazz.equals(Iterable.class)) {\n                        return Collections.emptyList();\n                    }\n                    return null;\n                }\n                return NOT_FOUND;\n            }\n        };\n    }\n}\n\ninterface MethodValues {\n    Object returnValueFor(Method method, Object[] args);\n\n    public static final Object NOT_FOUND = new Object();\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..a254f18cb 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,27 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public class MyClass {\n+    public static <T> MethodValues returnValueFor(final T clazz) {\n+        return new MethodValues() {\n+            public Object returnValueFor(Method method, Object[] args) {\n+                if (clazz.equals(method.getReturnType())) {\n+                    if (clazz.equals(Iterable.class)) {\n+                        return Collections.emptyList();\n+                    }\n+                    return null;\n+                }\n+                return NOT_FOUND;\n+            }\n+        };\n+    }\n+}\n+\n+interface MethodValues {\n+    Object returnValueFor(Method method, Object[] args);\n+\n+    public static final Object NOT_FOUND = new Object();\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}