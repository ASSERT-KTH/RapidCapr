{
    "patch": "    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n        if (hoursOffset == 0 && minutesOffset == 0) {\n            return DateTimeZone.UTC;\n        }\n        if (hoursOffset < -23 || hoursOffset > 23) {\n            throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n        }\n        int totalOffsetInMinutes = hoursOffset * 60 + minutesOffset;\n        if (totalOffsetInMinutes < -12 * 60 || totalOffsetInMinutes > 14 * 60) {\n            throw new IllegalArgumentException(\"Offset is too large\");\n        }\n        int offset = totalOffsetInMinutes * DateTimeConstants.MILLIS_PER_MINUTE;\n        return forOffsetMillis(offset);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 7d1719bc..afc3dbc2 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -276,21 +276,11 @@ public abstract class DateTimeZone implements Serializable {\n         if (hoursOffset < -23 || hoursOffset > 23) {\n             throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n         }\n-        if (minutesOffset < 0 || minutesOffset > 59) {\n-            throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n-        }\n-        int offset = 0;\n-        try {\n-            int hoursInMinutes = hoursOffset * 60;\n-            if (hoursInMinutes < 0) {\n-                minutesOffset = hoursInMinutes - minutesOffset;\n-            } else {\n-                minutesOffset = hoursInMinutes + minutesOffset;\n-            }\n-            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n-        } catch (ArithmeticException ex) {\n+        int totalOffsetInMinutes = hoursOffset * 60 + minutesOffset;\n+        if (totalOffsetInMinutes < -12 * 60 || totalOffsetInMinutes > 14 * 60) {\n             throw new IllegalArgumentException(\"Offset is too large\");\n         }\n+        int offset = totalOffsetInMinutes * DateTimeConstants.MILLIS_PER_MINUTE;\n         return forOffsetMillis(offset);\n     }\n ",
    "result_reason": "java.lang.IllegalArgumentException: Offset is too large",
    "test_result": "FAIL"
}