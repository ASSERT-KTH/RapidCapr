{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // Estimate the offset for instantLocal\n    final int offsetEstimate = getOffset(instantLocal);\n    // If instantLocal is within a transition, we need to adjust it\n    final long instantAdjusted = instantLocal - offsetEstimate;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // If we still land within a transition, we need to adjust again\n    final long instant2Adjusted = instantLocal - offsetAdjusted;\n    final int offset2Adjusted = getOffset(instant2Adjusted);\n\n    if (offsetEstimate == offset2Adjusted) {\n        // No transition, return the initial estimate\n        return offsetEstimate;\n    } else if (offsetEstimate < offset2Adjusted) {\n        // We are in the gap period of a DST transition, return the standard offset\n        long nextTransition = nextTransition(instant2Adjusted);\n        int standardOffset = getStandardOffset(nextTransition);\n        if (offsetEstimate < standardOffset && standardOffset == offset2Adjusted) {\n            return standardOffset;\n        }\n        return offset2Adjusted;\n    } else {\n        // We are in the overlap period of a DST transition, return the DST offset\n        long prevTransition = previousTransition(instant2Adjusted);\n        int dstOffset = getOffset(prevTransition);\n        if (dstOffset == offset2Adjusted) {\n            return dstOffset;\n        }\n        return offsetAdjusted;\n    }\n\n}\n\nprivate int getStandardOffset(long instant) {\n    int originalOffset = getOffset(instant);\n    long nextTransition = nextTransition(instant);\n    int standardOffset = getOffset(nextTransition);\n    if (originalOffset < standardOffset) {\n        // We are in a DST period, adjust down to the standard offset\n        return originalOffset;\n    }\n    return standardOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..af52abf8 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,50 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // Estimate the offset for instantLocal\n+    final int offsetEstimate = getOffset(instantLocal);\n+    // If instantLocal is within a transition, we need to adjust it\n+    final long instantAdjusted = instantLocal - offsetEstimate;\n+    final int offsetAdjusted = getOffset(instantAdjusted);\n+    // If we still land within a transition, we need to adjust again\n+    final long instant2Adjusted = instantLocal - offsetAdjusted;\n+    final int offset2Adjusted = getOffset(instant2Adjusted);\n+\n+    if (offsetEstimate == offset2Adjusted) {\n+        // No transition, return the initial estimate\n+        return offsetEstimate;\n+    } else if (offsetEstimate < offset2Adjusted) {\n+        // We are in the gap period of a DST transition, return the standard offset\n+        long nextTransition = nextTransition(instant2Adjusted);\n+        int standardOffset = getStandardOffset(nextTransition);\n+        if (offsetEstimate < standardOffset && standardOffset == offset2Adjusted) {\n+            return standardOffset;\n+        }\n+        return offset2Adjusted;\n+    } else {\n+        // We are in the overlap period of a DST transition, return the DST offset\n+        long prevTransition = previousTransition(instant2Adjusted);\n+        int dstOffset = getOffset(prevTransition);\n+        if (dstOffset == offset2Adjusted) {\n+            return dstOffset;\n         }\n         return offsetAdjusted;\n     }\n \n+}\n+\n+private int getStandardOffset(long instant) {\n+    int originalOffset = getOffset(instant);\n+    long nextTransition = nextTransition(instant);\n+    int standardOffset = getOffset(nextTransition);\n+    if (originalOffset < standardOffset) {\n+        // We are in a DST period, adjust down to the standard offset\n+        return originalOffset;\n+    }\n+    return standardOffset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "error: method getStandardOffset(long) is already defined in class DateTimeZone",
    "test_result": "ERROR"
}