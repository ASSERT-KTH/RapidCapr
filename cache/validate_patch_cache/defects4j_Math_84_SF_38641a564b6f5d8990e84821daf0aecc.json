{
    "patch": "                if (comparator.compare(expanded, reflected) < 0) {\n                    simplex = expandedSimplex;\n                } else {\n                    simplex = reflectedSimplex;\n                }\n\n            } else {\n\n                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    simplex = contractedSimplex;\n                } else {\n\n                    final RealPointValuePair[] shrinkedSimplex = simplex;\n                    for (int i = 1; i < simplex.length; i++) {\n                        final RealPointValuePair pair = simplex[i];\n                        final double[] coordinates = pair.getPoint();\n                        final double[] coordinates0 = best.getPoint();\n                        for (int j = 0; j < coordinates.length; j++) {\n                            coordinates[j] = shrunk * (coordinates[j] - coordinates0[j]) + coordinates0[j];\n                        }\n                        simplex[i] = new RealPointValuePair(coordinates, Double.NaN, false);\n                    }\n\n                }\n\n            }\n\n            if (isConverged(simplex, comparator)) {",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..ed7425d2c 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,35 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    simplex = expandedSimplex;\n+                } else {\n                     simplex = reflectedSimplex;\n                 }\n \n-                return;\n+            } else {\n \n-            }\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    simplex = contractedSimplex;\n+                } else {\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+                    final RealPointValuePair[] shrinkedSimplex = simplex;\n+                    for (int i = 1; i < simplex.length; i++) {\n+                        final RealPointValuePair pair = simplex[i];\n+                        final double[] coordinates = pair.getPoint();\n+                        final double[] coordinates0 = best.getPoint();\n+                        for (int j = 0; j < coordinates.length; j++) {\n+                            coordinates[j] = shrunk * (coordinates[j] - coordinates0[j]) + coordinates0[j];\n+                        }\n+                        simplex[i] = new RealPointValuePair(coordinates, Double.NaN, false);\n+                    }\n \n-            // check convergence\n-                return;\n-            }\n+                }\n \n-        }\n+            }\n \n-    }\n+            if (isConverged(simplex, comparator)) {\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}