{
    "patch": "private void findAliases(NodeTraversal t) {\n    for (Var v : t.getScope().getVarIterable()) {\n        Node n = v.getNode();\n        if (n == null) {\n            continue;\n        }\n\n        Node parent = n.getParent();\n        if (parent == null || !parent.isVar()) {\n            continue;\n        }\n\n        Node initializer = n.getFirstChild();\n        if (initializer == null || !initializer.isQualifiedName()) {\n            continue;\n        }\n\n        String name = n.getString();\n        Var aliasVar = t.getScope().getVar(name);\n        if (aliasVar == null) {\n            continue;\n        }\n\n        aliases.put(name, aliasVar);\n        Node initialValueNode = aliasVar.getInitialValue();\n        if (initialValueNode != null && initialValueNode.isGetProp()) {\n            String qualifiedName = initialValueNode.getQualifiedName();\n            if (qualifiedName != null) {\n                transformation.addAlias(name, qualifiedName);\n            }\n        }\n\n        // Bleeding functions already get a BAD_PARAMETERS error, so just\n        // do nothing.\n        // Parameters of the scope function also get a BAD_PARAMETERS\n        // error.\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..4fa2b2d4 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,44 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n+private void findAliases(NodeTraversal t) {\n+    for (Var v : t.getScope().getVarIterable()) {\n         Node n = v.getNode();\n-        int type = n.getType();\n+        if (n == null) {\n+            continue;\n+        }\n+\n         Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+        if (parent == null || !parent.isVar()) {\n+            continue;\n         }\n+\n+        Node initializer = n.getFirstChild();\n+        if (initializer == null || !initializer.isQualifiedName()) {\n+            continue;\n         }\n-      }\n+\n+        String name = n.getString();\n+        Var aliasVar = t.getScope().getVar(name);\n+        if (aliasVar == null) {\n+            continue;\n+        }\n+\n+        aliases.put(name, aliasVar);\n+        Node initialValueNode = aliasVar.getInitialValue();\n+        if (initialValueNode != null && initialValueNode.isGetProp()) {\n+            String qualifiedName = initialValueNode.getQualifiedName();\n+            if (qualifiedName != null) {\n+                transformation.addAlias(name, qualifiedName);\n+            }\n+        }\n+\n+        // Bleeding functions already get a BAD_PARAMETERS error, so just\n+        // do nothing.\n+        // Parameters of the scope function also get a BAD_PARAMETERS\n+        // error.\n     }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "junit.framework.ComparisonFailure: expected:<goog> but was:<null>",
    "test_result": "FAIL"
}