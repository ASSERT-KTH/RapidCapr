{
    "patch": "String input = \"Test string\";\nint length = input.length();\nfor (int i = 0; i < length; i++) {\n    char c = input.charAt(i);\n    if (c < 128) {\n        // this block was modified,\n        // using the existing char variable instead of declaring a new one.\n        if (c == '\\n') {\n            assertEquals(\"\\\\n\", StringEscapeUtils.escapeJava(String.valueOf(c)));\n        } else if (c == '\\t') {\n            assertEquals(\"\\\\t\", StringEscapeUtils.escapeJava(String.valueOf(c)));\n        } else if (c == '\\r') {\n            assertEquals(\"\\\\r\", StringEscapeUtils.escapeJava(String.valueOf(c)));\n        } else if (c == '\\f') {\n            assertEquals(\"\\\\f\", StringEscapeUtils.escapeJava(String.valueOf(c)));\n        } else if (c == '\\b') {\n            assertEquals(\"\\\\b\", StringEscapeUtils.escapeJava(String.valueOf(c)));\n        } else if (c == '\\\"') {\n            assertEquals(\"\\\\\\\"\", StringEscapeUtils.escapeJava(String.valueOf(c)));\n        } else if (c == '\\'') {\n            assertEquals(\"\\\\\\'\", StringEscapeUtils.escapeJava(String.valueOf(c)));\n        } else if (c == '\\\\') {\n            assertEquals(\"\\\\\\\\\", StringEscapeUtils.escapeJava(String.valueOf(c)));\n        } else {\n            assertEquals(String.valueOf(c), StringEscapeUtils.escapeJava(String.valueOf(c)));\n        }\n    } else {\n        assertEquals(\"\\\\u\" + StringUtils.leftPad(Integer.toHexString(c), 4, '0'), StringEscapeUtils.escapeJava(String.valueOf(c)));\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}