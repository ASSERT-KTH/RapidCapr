{
    "patch": "public double solve(double min, double max) throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifyInterval(min, max);\n\n    double ret = Double.NaN;\n\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n\n    // Verify bracketing\n    double sign = yMin * yMax;\n\n    if (sign >= 0) {\n        // check if either value is close to a zero\n        if (Math.abs(yMin) < FunctionUtils.EPSILON) {\n            setResult(min, min, 0);\n            return min;\n        } else if (Math.abs(yMax) < FunctionUtils.EPSILON) {\n            setResult(max, max, 0);\n            return max;\n        }\n\n        // check if function changes sign in the interval\n        boolean foundBracketing = false;\n        double x = min;\n        double y = yMin;\n        double x1 = x + 0.5 * (max - min);\n        double y1 = f.value(x1);\n\n        while (!foundBracketing && Math.abs(max - min) > FunctionUtils.EPSILON) {\n            if (y * y1 < 0) {\n                foundBracketing = true;\n            } else {\n                x = x1;\n                y = y1;\n                x1 = x + 0.5 * (max - min);\n                y1 = f.value(x1);\n            }\n        }\n\n        if (!foundBracketing) {\n            throw new IllegalArgumentException(\"Function values at endpoints do not have different signs.\" +\n                    \"  Endpoints: [\" + min + \",\" + max + \"]\" +\n                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n        }\n\n        // solve using the found bracketing interval\n        ret = solve(x, y, x1, y1, min, yMin);\n\n    } else {\n        // either min or max is a root\n        if (yMin == 0) {\n            ret = min;\n        } else {\n            ret = max;\n        }\n    }\n\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..84561b72a 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,67 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n-        FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n-        \n-        // Verify bracketing\n-        double sign = yMin * yMax;\n-        if (sign >= 0) {\n-            // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n-        } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n+public double solve(double min, double max) throws MaxIterationsExceededException, FunctionEvaluationException {\n+\n+    clearResult();\n+    verifyInterval(min, max);\n+\n+    double ret = Double.NaN;\n+\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n+\n+    // Verify bracketing\n+    double sign = yMin * yMax;\n+\n+    if (sign >= 0) {\n+        // check if either value is close to a zero\n+        if (Math.abs(yMin) < FunctionUtils.EPSILON) {\n+            setResult(min, min, 0);\n+            return min;\n+        } else if (Math.abs(yMax) < FunctionUtils.EPSILON) {\n+            setResult(max, max, 0);\n+            return max;\n         }\n \n-        return ret;\n+        // check if function changes sign in the interval\n+        boolean foundBracketing = false;\n+        double x = min;\n+        double y = yMin;\n+        double x1 = x + 0.5 * (max - min);\n+        double y1 = f.value(x1);\n+\n+        while (!foundBracketing && Math.abs(max - min) > FunctionUtils.EPSILON) {\n+            if (y * y1 < 0) {\n+                foundBracketing = true;\n+            } else {\n+                x = x1;\n+                y = y1;\n+                x1 = x + 0.5 * (max - min);\n+                y1 = f.value(x1);\n+            }\n+        }\n+\n+        if (!foundBracketing) {\n+            throw new IllegalArgumentException(\"Function values at endpoints do not have different signs.\" +\n+                    \"  Endpoints: [\" + min + \",\" + max + \"]\" +\n+                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+        }\n+\n+        // solve using the found bracketing interval\n+        ret = solve(x, y, x1, y1, min, yMin);\n+\n+    } else {\n+        // either min or max is a root\n+        if (yMin == 0) {\n+            ret = min;\n+        } else {\n+            ret = max;\n+        }\n     }\n+\n+    return ret;\n+}\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}