{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MockSettingsImpl settings = new MockSettingsImpl();\n    settings.defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS);\n    if (mock.getClass().getInterfaces().length > 0) {\n        settings.extraInterfaces(mock.getClass().getInterfaces());\n    }\n    if (mock.getClass().getSuperclass() != Object.class) {\n        settings.defaultAnswer(new ReturnsSmartNulls());\n    }\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, settings);\n    ((Factory) mock).setCallback(0, newFilter);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..743a73ae4 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,21 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MockSettingsImpl settings = new MockSettingsImpl();\n+    settings.defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS);\n+    if (mock.getClass().getInterfaces().length > 0) {\n+        settings.extraInterfaces(mock.getClass().getInterfaces());\n+    }\n+    if (mock.getClass().getSuperclass() != Object.class) {\n+        settings.defaultAnswer(new ReturnsSmartNulls());\n+    }\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, settings);\n+    ((Factory) mock).setCallback(0, newFilter);\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}