{
    "patch": "        && callSiteOptimizer.canModifyCallers(fnScope);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      int numArgsToRemove = countUnusedArgs(argList, referenced, fnScope);\n      for (int i = 0; i < numArgsToRemove; i++) {\n        Node lastArg = argList.getLastChild();\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0767a382 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,17 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+        && callSiteOptimizer.canModifyCallers(fnScope);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      int numArgsToRemove = countUnusedArgs(argList, referenced, fnScope);\n+      for (int i = 0; i < numArgsToRemove; i++) {\n+        Node lastArg = argList.getLastChild();\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}