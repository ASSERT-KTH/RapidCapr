{
    "patch": "public Dfp multiply(final int x) {\n    if (x >= 0 && x < RADIX) {\n        return multiplyFast(x);\n    } else {\n        final Dfp v = newInstance(x);\n        final Dfp result = newInstance();\n        result.exp = exp;\n        result.mant = new int[mant.length];\n        result.sign = sign == v.sign;\n        result.setInfinite(false);\n        result.setNaN(false);\n        for (int i = 0; i < mant.length; i++) {\n            result.mant[i] = 0;\n        }\n        for (int i = 0; i < mant.length; i++) {\n            int digit = mant[i] * x;\n            for (int j = 0; digit != 0 && j < mant.length; j++) {\n                digit += result.mant[i+j];\n                result.mant[i+j] = digit % RADIX;\n                digit /= RADIX;\n            }\n        }\n        result.normalize();\n        return dotrap(Dfp.TRAP_INVALID, \"invalid multiplication\", this, v, result);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..6f2e5b1e6 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,32 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public Dfp multiply(final int x) {\n+    if (x >= 0 && x < RADIX) {\n+        return multiplyFast(x);\n+    } else {\n+        final Dfp v = newInstance(x);\n+        final Dfp result = newInstance();\n+        result.exp = exp;\n+        result.mant = new int[mant.length];\n+        result.sign = sign == v.sign;\n+        result.setInfinite(false);\n+        result.setNaN(false);\n+        for (int i = 0; i < mant.length; i++) {\n+            result.mant[i] = 0;\n+        }\n+        for (int i = 0; i < mant.length; i++) {\n+            int digit = mant[i] * x;\n+            for (int j = 0; digit != 0 && j < mant.length; j++) {\n+                digit += result.mant[i+j];\n+                result.mant[i+j] = digit % RADIX;\n+                digit /= RADIX;\n+            }\n+        }\n+        result.normalize();\n+        return dotrap(Dfp.TRAP_INVALID, \"invalid multiplication\", this, v, result);\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}