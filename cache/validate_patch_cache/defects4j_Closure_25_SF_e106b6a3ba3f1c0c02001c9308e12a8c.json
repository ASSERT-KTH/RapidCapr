{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    if (constructorType == null) {\n        n.setJSType(getNativeType(UNKNOWN_TYPE));\n    } else if (constructorType.isFunctionType() && constructorType.toMaybeFunctionType().isConstructor()) {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct.getInstanceType() != null) {\n            n.setJSType(ct.getInstanceType());\n        } else {\n            ct.setInstanceType(createFreshUnknownType());\n            n.setJSType(ct.getInstanceType());\n        }\n    } else {\n        n.setJSType(getNativeType(UNKNOWN_TYPE));\n    }\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n    return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..e66e312b 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,28 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n+    if (constructorType == null) {\n+        n.setJSType(getNativeType(UNKNOWN_TYPE));\n+    } else if (constructorType.isFunctionType() && constructorType.toMaybeFunctionType().isConstructor()) {\n         FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+        if (ct.getInstanceType() != null) {\n+            n.setJSType(ct.getInstanceType());\n+        } else {\n+            ct.setInstanceType(createFreshUnknownType());\n+            n.setJSType(ct.getInstanceType());\n         }\n-      }\n+    } else {\n+        n.setJSType(getNativeType(UNKNOWN_TYPE));\n     }\n-    n.setJSType(type);\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+        scope = traverse(arg, scope);\n     }\n     return scope;\n-  }\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}