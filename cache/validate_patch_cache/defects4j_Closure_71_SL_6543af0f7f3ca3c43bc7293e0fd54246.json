{
    "patch": "  /**\n   * Checks if a property is being overridden in a constructor call or object\n   * literal.\n   *\n   * @param getprop The GETPROP node for the property access.\n   * @param parent The PAREN node containing the GETPROP node.\n   *\n   * @return Whether the property is being overridden.\n   */\n  private boolean isPropertyRedeclaration(Node getprop, Node parent) {\n    String propertyName = getprop.getLastChild().getString();\n\n    Node grandparent = parent.getParent();\n    if (grandparent != null) {\n      int grandparentType = grandparent.getType();\n      if (grandparentType == Token.CALL) {\n        // Check for a constructor call that redefines the property.\n        Node callee = grandparent.getFirstChild();\n        return callee != null && callee.isGetProp()\n            && callee.getLastChild().getString().equals(propertyName);\n      } else if (grandparentType == Token.OBJECTLIT) {\n        // Check for an object literal that redefines the property.\n        for (Node key = grandparent.getFirstChild(); key != null;\n             key = key.getNext()) {\n          if (key.isString() && key.getString().equals(propertyName)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..65c24ac7 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,38 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+  /**\n+   * Checks if a property is being overridden in a constructor call or object\n+   * literal.\n+   *\n+   * @param getprop The GETPROP node for the property access.\n+   * @param parent The PAREN node containing the GETPROP node.\n+   *\n+   * @return Whether the property is being overridden.\n+   */\n+  private boolean isPropertyRedeclaration(Node getprop, Node parent) {\n+    String propertyName = getprop.getLastChild().getString();\n+\n+    Node grandparent = parent.getParent();\n+    if (grandparent != null) {\n+      int grandparentType = grandparent.getType();\n+      if (grandparentType == Token.CALL) {\n+        // Check for a constructor call that redefines the property.\n+        Node callee = grandparent.getFirstChild();\n+        return callee != null && callee.isGetProp()\n+            && callee.getLastChild().getString().equals(propertyName);\n+      } else if (grandparentType == Token.OBJECTLIT) {\n+        // Check for an object literal that redefines the property.\n+        for (Node key = grandparent.getFirstChild(); key != null;\n+             key = key.getNext()) {\n+          if (key.isString() && key.getString().equals(propertyName)) {\n+            return true;\n+          }\n+        }\n+      }\n+    }\n+    return false;\n+  }\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}