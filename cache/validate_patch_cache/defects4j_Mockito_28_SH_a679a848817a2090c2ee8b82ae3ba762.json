{
    "patch": "Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\nif (fieldInstance != null) {\n    return;\n} else if (candidate != null) {\n    setField(field, fieldInstance, candidate);\n    return;\n} else {\n    String errorMsg = String.format(\n            \"Unable to inject mock candidate for field [%s] in class [%s]. Candidate not found!\",\n            field.getName(), awaitingInjectionClazz.getName());\n    throw new RuntimeException(errorMsg);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..663ab2f74 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,21 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+if (fieldInstance != null) {\n+    return;\n+} else if (candidate != null) {\n+    setField(field, fieldInstance, candidate);\n+    return;\n+} else {\n+    String errorMsg = String.format(\n+            \"Unable to inject mock candidate for field [%s] in class [%s]. Candidate not found!\",\n+            field.getName(), awaitingInjectionClazz.getName());\n+    throw new RuntimeException(errorMsg);\n+}\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}