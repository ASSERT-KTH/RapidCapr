{
    "patch": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION && !isLendedToPrototype(n)) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n            pType == Token.CATCH ||\n\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n    } else {\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n          // Always traverse the left side of the assignment. To handle\n          // nested assignments properly (e.g., (a = this).property = c;),\n          // assignLhsChild should not be overridden.\n          if (assignLhsChild == null) {\n            assignLhsChild = lhs;\n          }\n          return true;\n        } else {\n          // Only traverse the right side if:\n          // 1. It's not an assignment to a prototype property or subproperty.\n          // 2. It's not a function being defined inside an object literal.\n          if (NodeUtil.isGet(lhs)) {\n            if (lhs.getType() == Token.GETPROP &&\n                lhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n            Node llhs = lhs.getFirstChild();\n            if (llhs.getType() == Token.GETPROP &&\n                llhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n          }\n          if (NodeUtil.isObjectLitKey(parent, lhs)) {\n            // Don't traverse function expressions in object literals.\n            if (n.getParent().getType() != Token.CATCH) {\n              return false;\n            }\n          } else if (!NodeUtil.isFunctionExpression(n) && !NodeUtil.isName(n)) {\n            // Only traverse function declarations, function expressions, and variables.\n            return false;\n          }\n          return true;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  private boolean isLendedToPrototype(Node n) {\n    // Don't traverse functions that are getting lent to a prototype.\n    // Don't traverse vars that are assigned a class or interface in an IIFE.\n    Node parent = n.getParent();\n    if (parent.getType() == Token.EXPR_RESULT) {\n      parent = parent.getParent();\n      if (parent.getType() == Token.FUNCTION &&\n          parent.getParent().getType() == Token.EXPR_RESULT) {\n        if (getFunctionJsDocInfo(parent).isInterface()) {\n          return true;\n        }\n      }\n    }\n    if (parent.getType() != Token.ASSIGN ||\n        (!NodeUtil.isGet(parent.getFirstChild()) &&\n         !parent.getFirstChild().isQualifiedName())) {\n      return false;\n    }\n    if (!isPrototypeProperty(getPrototypeProperty(parent.getFirstChild()))) {\n      return false;\n    }\n    return true;\n  }\n\n  private Node getPrototypeProperty(Node getpropNode) {\n    if (!getpropNode.isGetProp() ||\n        !\"prototype\".equals(getpropNode.getLastChild().getString())) {\n      return null;\n    }\n    while (getpropNode.getParent() != null) {\n      getpropNode = getpropNode.getParent();\n      if (getpropNode.getType() == Token.ASSIGN ||\n          getpropNode.getType() == Token.VAR) {\n        return getpropNode;\n      }\n    }\n    return null;\n  }\n\n  private boolean isPrototypeProperty(Node n) {\n    if (n == null) {\n      return false;\n    }\n    if (n.getType() == Token.VAR && n.getFirstChild().hasChildren()) {\n      // Ignore `var a = {prototype: {...}};`\n      return false;\n    }\n    Node rhs = n.getLastChild();\n    if (rhs == null) {\n      return false;\n    }\n    if (rhs.getType() == Token.FUNCTION &&\n        !getFunctionJsDocInfo(rhs).isConstructor()) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Gets the JSDocInfo object associated with a function node.\n   *\n   * @param n a function node.\n   * @return the associated JSDocInfo, or null if there is none.\n   */\n  private JSDocInfo getFunctionJsDocInfo(Node n) {\n    Node jsDocNode = NodeUtil.getBestJSDocInfoNode(n);\n    if (jsDocNode != null) {\n      return JSDocInfo.Builder.fromAstRoot(getAstRoot(t.getInput())).build(jsDocNode);\n    }\n    return null;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..deaa6e63 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,7 +81,7 @@ final class CheckGlobalThis implements Callback {\n    */\n   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n \n-    if (n.getType() == Token.FUNCTION) {\n+    if (n.getType() == Token.FUNCTION && !isLendedToPrototype(n)) {\n       // Don't traverse functions that are constructors or have the @this\n       // or @override annotation.\n       JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n@@ -104,40 +104,51 @@ final class CheckGlobalThis implements Callback {\n             pType == Token.SCRIPT ||\n             pType == Token.NAME ||\n             pType == Token.ASSIGN ||\n+            pType == Token.CATCH ||\n \n             // object literal keys\n             pType == Token.STRING ||\n             pType == Token.NUMBER)) {\n         return false;\n       }\n+    } else {\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n \n-      // Don't traverse functions that are getting lent to a prototype.\n-    }\n-\n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-\n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n+        if (n == lhs) {\n+          // Always traverse the left side of the assignment. To handle\n+          // nested assignments properly (e.g., (a = this).property = c;),\n+          // assignLhsChild should not be overridden.\n+          if (assignLhsChild == null) {\n+            assignLhsChild = lhs;\n           }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n+          return true;\n+        } else {\n+          // Only traverse the right side if:\n+          // 1. It's not an assignment to a prototype property or subproperty.\n+          // 2. It's not a function being defined inside an object literal.\n+          if (NodeUtil.isGet(lhs)) {\n+            if (lhs.getType() == Token.GETPROP &&\n+                lhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+            Node llhs = lhs.getFirstChild();\n+            if (llhs.getType() == Token.GETPROP &&\n+                llhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+          }\n+          if (NodeUtil.isObjectLitKey(parent, lhs)) {\n+            // Don't traverse function expressions in object literals.\n+            if (n.getParent().getType() != Token.CATCH) {\n+              return false;\n+            }\n+          } else if (!NodeUtil.isFunctionExpression(n) && !NodeUtil.isName(n)) {\n+            // Only traverse function declarations, function expressions, and variables.\n             return false;\n           }\n+          return true;\n         }\n       }\n     }\n@@ -145,6 +156,78 @@ final class CheckGlobalThis implements Callback {\n     return true;\n   }\n \n+  private boolean isLendedToPrototype(Node n) {\n+    // Don't traverse functions that are getting lent to a prototype.\n+    // Don't traverse vars that are assigned a class or interface in an IIFE.\n+    Node parent = n.getParent();\n+    if (parent.getType() == Token.EXPR_RESULT) {\n+      parent = parent.getParent();\n+      if (parent.getType() == Token.FUNCTION &&\n+          parent.getParent().getType() == Token.EXPR_RESULT) {\n+        if (getFunctionJsDocInfo(parent).isInterface()) {\n+          return true;\n+        }\n+      }\n+    }\n+    if (parent.getType() != Token.ASSIGN ||\n+        (!NodeUtil.isGet(parent.getFirstChild()) &&\n+         !parent.getFirstChild().isQualifiedName())) {\n+      return false;\n+    }\n+    if (!isPrototypeProperty(getPrototypeProperty(parent.getFirstChild()))) {\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  private Node getPrototypeProperty(Node getpropNode) {\n+    if (!getpropNode.isGetProp() ||\n+        !\"prototype\".equals(getpropNode.getLastChild().getString())) {\n+      return null;\n+    }\n+    while (getpropNode.getParent() != null) {\n+      getpropNode = getpropNode.getParent();\n+      if (getpropNode.getType() == Token.ASSIGN ||\n+          getpropNode.getType() == Token.VAR) {\n+        return getpropNode;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private boolean isPrototypeProperty(Node n) {\n+    if (n == null) {\n+      return false;\n+    }\n+    if (n.getType() == Token.VAR && n.getFirstChild().hasChildren()) {\n+      // Ignore `var a = {prototype: {...}};`\n+      return false;\n+    }\n+    Node rhs = n.getLastChild();\n+    if (rhs == null) {\n+      return false;\n+    }\n+    if (rhs.getType() == Token.FUNCTION &&\n+        !getFunctionJsDocInfo(rhs).isConstructor()) {\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  /**\n+   * Gets the JSDocInfo object associated with a function node.\n+   *\n+   * @param n a function node.\n+   * @return the associated JSDocInfo, or null if there is none.\n+   */\n+  private JSDocInfo getFunctionJsDocInfo(Node n) {\n+    Node jsDocNode = NodeUtil.getBestJSDocInfoNode(n);\n+    if (jsDocNode != null) {\n+      return JSDocInfo.Builder.fromAstRoot(getAstRoot(t.getInput())).build(jsDocNode);\n+    }\n+    return null;\n+  }\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n       compiler.report(t.makeError(n, level, GLOBAL_THIS));",
    "result_reason": "error: method getFunctionJsDocInfo(Node) is already defined in class CheckGlobalThis",
    "test_result": "ERROR"
}