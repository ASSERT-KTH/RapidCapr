{
    "patch": "public Object execute(ExecutionEvent event) throws ExecutionException {\n    IWorkbenchWindow window = HandlerUtil.getActiveWorkbenchWindowChecked(event);\n    ISelection selection = window.getSelectionService().getSelection();\n\n    List<String> values = new ArrayList<>();\n\n    if (selection instanceof IStructuredSelection) {\n        IStructuredSelection structuredSelection = (IStructuredSelection) selection;\n\n        for (Object element : structuredSelection.toArray()) {\n            if (element instanceof IAdaptable) {\n                IResource resource = (IResource) ((IAdaptable) element).getAdapter(IResource.class);\n\n                if (resource != null) {\n                    values.add(resource.getLocation().toOSString());\n                }\n            }\n        }\n    }\n\n    return values;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}