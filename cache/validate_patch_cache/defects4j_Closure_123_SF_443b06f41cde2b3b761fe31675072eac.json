{
    "patch": "public static String fixCode(String code, String test) {\n    String expected = parseExpectedResult(test);\n    String error = \"\";\n    try {\n        error = compileCode(code, test);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    if (error.isEmpty()) {\n        return code;\n    } else {\n        Matcher m = Pattern.compile(\"\\\\[.*?:(\\\\d+)]\").matcher(error);\n        if (m.find()) {\n            int line = Integer.parseInt(m.group(1));\n            String[] lines = code.split(\"\\n\");\n            String buggyLine = lines[line - 1];\n            String fixedLine = buggyLine.replaceFirst(\"\\\\?\", \"(?)\");\n            lines[line - 1] = fixedLine;\n            return String.join(\"\\n\", lines);\n        }\n        return null;\n    }\n}\n\nprivate static String compileCode(String code, String test) throws IOException {\n    String fileName = \"Test.java\";\n    try (PrintWriter out = new PrintWriter(fileName)) {\n        out.println(\"import static org.junit.Assert.*;\");\n        out.println(\"import org.junit.Test;\");\n        out.println(\"import java.util.*;\");\n        out.println(\"public class Test {\");\n        out.println(\"    \" + code);\n        out.println(\"    @Test\");\n        out.println(\"    public void test() {\");\n        out.println(\"        \" + test);\n        out.println(\"    }\");\n        out.println(\"}\");\n    }\n    Process javac = Runtime.getRuntime().exec(\"javac \" + fileName);\n    return IOUtils.toString(javac.getErrorStream(), StandardCharsets.UTF_8);\n}\n\nprivate static String parseExpectedResult(String test) {\n    int start = test.indexOf(\"expected<\") + \"expected<\".length();\n    int end = test.indexOf(\">\", start);\n    return test.substring(start, end);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6c1c52d2 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,53 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code, String test) {\n+    String expected = parseExpectedResult(test);\n+    String error = \"\";\n+    try {\n+        error = compileCode(code, test);\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+    }\n+    if (error.isEmpty()) {\n+        return code;\n+    } else {\n+        Matcher m = Pattern.compile(\"\\\\[.*?:(\\\\d+)]\").matcher(error);\n+        if (m.find()) {\n+            int line = Integer.parseInt(m.group(1));\n+            String[] lines = code.split(\"\\n\");\n+            String buggyLine = lines[line - 1];\n+            String fixedLine = buggyLine.replaceFirst(\"\\\\?\", \"(?)\");\n+            lines[line - 1] = fixedLine;\n+            return String.join(\"\\n\", lines);\n+        }\n+        return null;\n+    }\n+}\n+\n+private static String compileCode(String code, String test) throws IOException {\n+    String fileName = \"Test.java\";\n+    try (PrintWriter out = new PrintWriter(fileName)) {\n+        out.println(\"import static org.junit.Assert.*;\");\n+        out.println(\"import org.junit.Test;\");\n+        out.println(\"import java.util.*;\");\n+        out.println(\"public class Test {\");\n+        out.println(\"    \" + code);\n+        out.println(\"    @Test\");\n+        out.println(\"    public void test() {\");\n+        out.println(\"        \" + test);\n+        out.println(\"    }\");\n+        out.println(\"}\");\n+    }\n+    Process javac = Runtime.getRuntime().exec(\"javac \" + fileName);\n+    return IOUtils.toString(javac.getErrorStream(), StandardCharsets.UTF_8);\n+}\n+\n+private static String parseExpectedResult(String test) {\n+    int start = test.indexOf(\"expected<\") + \"expected<\".length();\n+    int end = test.indexOf(\">\", start);\n+    return test.substring(start, end);\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: try-with-resources is not supported in -source 1.6",
    "test_result": "ERROR"
}