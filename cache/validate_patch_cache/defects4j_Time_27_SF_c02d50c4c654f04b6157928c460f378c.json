{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    int size = elementPairs.size();\n    if (size == 0) {\n        // If the elementPairs list is empty, return an empty formatter\n        return new PeriodFormatter(null, null);\n    }\n    // Check if there's a Separator as the first element\n    Object firstObject = elementPairs.get(0);\n    if (firstObject instanceof Separator) {\n        Separator sep = (Separator) firstObject;\n        List<Object> remainder = elementPairs.subList(1, elementPairs.size());\n        PeriodFormatter subFormatter = toFormatter(remainder, false, false);\n        PeriodPrinter printer = subFormatter.getPrinter() == null ? null : sep.finish(subFormatter.getPrinter(), null);\n        PeriodParser parser = subFormatter.getParser() == null ? null : sep.finish(null, subFormatter.getParser());\n        return new PeriodFormatter(printer, parser);\n    } else {\n        // If there's no Separator as the first element, create composite directly\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            if (comp[1] == null) {\n                return null;\n            }\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            if (comp[0] == null) {\n                return null;\n            }\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..53f55f50 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,39 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    int size = elementPairs.size();\n+    if (size == 0) {\n+        // If the elementPairs list is empty, return an empty formatter\n+        return new PeriodFormatter(null, null);\n+    }\n+    // Check if there's a Separator as the first element\n+    Object firstObject = elementPairs.get(0);\n+    if (firstObject instanceof Separator) {\n+        Separator sep = (Separator) firstObject;\n+        List<Object> remainder = elementPairs.subList(1, elementPairs.size());\n+        PeriodFormatter subFormatter = toFormatter(remainder, false, false);\n+        PeriodPrinter printer = subFormatter.getPrinter() == null ? null : sep.finish(subFormatter.getPrinter(), null);\n+        PeriodParser parser = subFormatter.getParser() == null ? null : sep.finish(null, subFormatter.getParser());\n+        return new PeriodFormatter(printer, parser);\n+    } else {\n+        // If there's no Separator as the first element, create composite directly\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n+            if (comp[1] == null) {\n+                return null;\n+            }\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n         } else if (notParser) {\n+            if (comp[0] == null) {\n+                return null;\n+            }\n             return new PeriodFormatter((PeriodPrinter) comp[0], null);\n         } else {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}