{
    "patch": "       T type = typeSystem.getType(getScope(), n, name);\n+      if (type == null) {\n+        type = typeSystem.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+      }\n \n       Property prop = getProperty(name);\n       if (!prop.scheduleRenaming(child,",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..68005886 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,13 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+       T type = typeSystem.getType(getScope(), n, name);\n++      if (type == null) {\n++        type = typeSystem.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n++      }\n+ \n+       Property prop = getProperty(name);\n+       if (!prop.scheduleRenaming(child,\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}