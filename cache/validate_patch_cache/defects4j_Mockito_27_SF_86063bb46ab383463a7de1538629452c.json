{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    try {\n        ((Factory) mock).getCallback(0);\n        ((Factory) mock).setCallback(0, null);\n    } catch (IllegalArgumentException e) {}\n    MethodInterceptor oldCallback = ((Factory) mock).getCallback(1);\n    ((Factory) mock).setCallback(1, newFilter);\n    if (oldCallback instanceof MethodInterceptorFilter) {\n        MockHandlerInterface<?> oldMockHandlerInterface = ((MethodInterceptorFilter) oldCallback).getHandler();\n        ((MethodInterceptorFilter) oldCallback).setHandler(new MockHandler<Object>(oldMockHandlerInterface));\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..92f07ae11 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,22 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    try {\n+        ((Factory) mock).getCallback(0);\n+        ((Factory) mock).setCallback(0, null);\n+    } catch (IllegalArgumentException e) {}\n+    MethodInterceptor oldCallback = ((Factory) mock).getCallback(1);\n+    ((Factory) mock).setCallback(1, newFilter);\n+    if (oldCallback instanceof MethodInterceptorFilter) {\n+        MockHandlerInterface<?> oldMockHandlerInterface = ((MethodInterceptorFilter) oldCallback).getHandler();\n+        ((MethodInterceptorFilter) oldCallback).setHandler(new MockHandler<Object>(oldMockHandlerInterface));\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}