{
    "patch": "public static ReturnObject max(ArrayList<Integer> list) {\n\n    if(list == null) {\n        return new ReturnObjectImpl(ErrorMessage.INVALID_ARGUMENT);\n    }\n    else if(list.size() == 0) {\n        return new ReturnObjectImpl(ErrorMessage.EMPTY_STRUCTURE);\n    }\n    else {\n        int max = Integer.MIN_VALUE;\n        for(int i = 0; i < list.size(); i++) {\n            if(list.get(i) == null) {\n                return new ReturnObjectImpl(ErrorMessage.INVALID_ARGUMENT);\n            }\n            if(list.get(i) > max) {\n                max = list.get(i);\n            }\n        }\n        return new ReturnObjectImpl(max);\n    }    \n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..1270e6a75 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,27 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static ReturnObject max(ArrayList<Integer> list) {\n+\n+    if(list == null) {\n+        return new ReturnObjectImpl(ErrorMessage.INVALID_ARGUMENT);\n+    }\n+    else if(list.size() == 0) {\n+        return new ReturnObjectImpl(ErrorMessage.EMPTY_STRUCTURE);\n+    }\n+    else {\n+        int max = Integer.MIN_VALUE;\n+        for(int i = 0; i < list.size(); i++) {\n+            if(list.get(i) == null) {\n+                return new ReturnObjectImpl(ErrorMessage.INVALID_ARGUMENT);\n+            }\n+            if(list.get(i) > max) {\n+                max = list.get(i);\n+            }\n+        }\n+        return new ReturnObjectImpl(max);\n+    }    \n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}