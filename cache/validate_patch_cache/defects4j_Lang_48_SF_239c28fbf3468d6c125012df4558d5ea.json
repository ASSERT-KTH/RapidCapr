{
    "patch": "import java.lang.reflect.Array;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\npublic class EqualsBuilder {\n\n    private boolean isEquals;\n\n    public EqualsBuilder() {\n        isEquals = true;\n    }\n\n    public static boolean reflectionEquals(Object lhs, Object rhs) {\n        return reflectionEquals(lhs, rhs, false);\n    }\n\n    public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients) {\n        if (lhs == rhs) {\n            return true;\n        }\n        if (lhs == null || rhs == null) {\n            return false;\n        }\n        Class<?> lhsClass = lhs.getClass();\n        Class<?> rhsClass = rhs.getClass();\n        if (!lhsClass.isInstance(rhs)) {\n            return false;\n        }\n        if (lhsClass != rhsClass) {\n            return false;\n        }\n        if (lhsClass.isArray()) {\n            return new EqualsBuilder().append(lhs, rhs).isEquals();\n        }\n        try {\n            Method equalsMethod = lhsClass.getMethod(\"equals\", new Class[]{ Object.class });\n            if (equalsMethod.getDeclaringClass() != Object.class) {\n                return ((Boolean) equalsMethod.invoke(lhs, new Object[]{ rhs })).booleanValue();\n            }\n        } catch (NoSuchMethodException ex) {\n        } catch (IllegalAccessException ex) {\n        } catch (InvocationTargetException ex) {\n        }\n        FieldComparator comparator = new FieldComparator(lhs, rhs, testTransients);\n        return comparator.isEquals();\n    }\n\n    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        Class lhsClass = lhs.getClass();\n        if (!lhsClass.isArray()) {\n            // The simple case, not an array, just test the element\n            isEquals = lhs.equals(rhs);\n        } else {\n            // 'Switch' on type of array, to dispatch to the correct handler\n            // This handles multi dimensional arrays of the same depth\n            if (lhsClass != rhs.getClass()) {\n                // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n                this.setEquals(false);\n                return this;\n            }\n            int lhsLength = Array.getLength(lhs);\n            if (lhsLength != Array.getLength(rhs)) {\n                this.setEquals(false);\n                return this;\n            }\n            for (int i = 0; i < lhsLength; ++i) {\n                Object lhsElement = Array.get(lhs, i);\n                Object rhsElement = Array.get(rhs, i);\n                append(lhsElement, rhsElement);\n                if (!isEquals) {\n                    return this;\n                }\n            }\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(Object[] lhs, Object[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < lhs.length; i++) {\n            append(lhs[i], rhs[i]);\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(long lhs, long rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = lhs == rhs;\n        return this;\n    }\n\n    public EqualsBuilder append(int lhs, int rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = lhs == rhs;\n        return this;\n    }\n\n    public EqualsBuilder append(short lhs, short rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = lhs == rhs;\n        return this;\n    }\n\n    public EqualsBuilder append(char lhs, char rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = lhs == rhs;\n        return this;\n    }\n\n    public EqualsBuilder append(byte lhs, byte rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = lhs == rhs;\n        return this;\n    }\n\n    public EqualsBuilder append(double lhs, double rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        return append(Double.doubleToLongBits(lhs), Double.doubleToLongBits(rhs));\n    }\n\n    public EqualsBuilder append(float lhs, float rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        return append(Float.floatToIntBits(lhs), Float.floatToIntBits(rhs));\n    }\n\n    public EqualsBuilder append(boolean lhs, boolean rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        isEquals = lhs == rhs;\n        return this;\n    }\n\n    public EqualsBuilder append(Object[] lhs, Object rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        return append(lhs, new Object[] { rhs });\n    }\n\n    public EqualsBuilder append(Object lhs, Object[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        return append(new Object[] { lhs }, rhs);\n    }\n\n    static class FieldComparator {\n\n        private final Object lhs;\n        private final Object rhs;\n        private final boolean testTransients;\n\n        private FieldComparator(Object lhs, Object rhs, boolean testTransients) {\n            this.lhs = lhs;\n            this.rhs = rhs;\n            this.testTransients = testTransients;\n        }\n\n        public boolean isEquals() {\n            return new EqualsBuilder().reflectionAppend(lhs, rhs, testTransients).isEquals();\n        }\n    }\n\n    public EqualsBuilder reflectionAppend(Object lhs, Object rhs) {\n        return reflectionAppend(lhs, rhs, false);\n    }\n\n    public EqualsBuilder reflectionAppend(Object lhs, Object rhs, boolean testTransients) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        Class lhsClass = lhs.getClass();\n        if (!lhsClass.isInstance(rhs)) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhsClass.isArray()) {\n            append(lhs, rhs);\n            return this;\n        }\n        Field[] fields = getAllFields(lhsClass);\n        AccessibleObject.setAccessible(fields, true);\n        for (int i = 0; i < fields.length && isEquals; i++) {\n            Field f = fields[i];\n            if (!isTransient(f.getModifiers()) || testTransients) {\n                try {\n                    append(f.get(lhs), f.get(rhs));\n                } catch (IllegalAccessException e) {\n                    // It is unlikely that this would occur as it would be caught earlier in \n                    // getAllFields\n                    throw new InternalError(\"Unexpected IllegalAccessException\");\n                }\n            }\n        }\n        return this;\n    }\n\n    private static boolean isTransient(int modifiers) {\n        return Modifier.isTransient(modifiers);\n    }\n\n    public boolean isEquals() {\n        return isEquals;\n    }\n\n    public void setEquals(boolean isEquals) {\n        this.isEquals = isEquals;\n    }\n\n    private static Field[] getAllFields(Class<?> clazz) {\n        List<Field> fieldsList = new ArrayList<Field>();\n        while (clazz != null) {\n            fieldsList.addAll(Arrays.asList(clazz.getDeclaredFields()));\n            clazz = clazz.getSuperclass();\n        }\n        return fieldsList.toArray(new Field[fieldsList.size()]);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..6cba9bec 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,6 +364,53 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n+import java.lang.reflect.Array;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+public class EqualsBuilder {\n+\n+    private boolean isEquals;\n+\n+    public EqualsBuilder() {\n+        isEquals = true;\n+    }\n+\n+    public static boolean reflectionEquals(Object lhs, Object rhs) {\n+        return reflectionEquals(lhs, rhs, false);\n+    }\n+\n+    public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients) {\n+        if (lhs == rhs) {\n+            return true;\n+        }\n+        if (lhs == null || rhs == null) {\n+            return false;\n+        }\n+        Class<?> lhsClass = lhs.getClass();\n+        Class<?> rhsClass = rhs.getClass();\n+        if (!lhsClass.isInstance(rhs)) {\n+            return false;\n+        }\n+        if (lhsClass != rhsClass) {\n+            return false;\n+        }\n+        if (lhsClass.isArray()) {\n+            return new EqualsBuilder().append(lhs, rhs).isEquals();\n+        }\n+        try {\n+            Method equalsMethod = lhsClass.getMethod(\"equals\", new Class[]{ Object.class });\n+            if (equalsMethod.getDeclaringClass() != Object.class) {\n+                return ((Boolean) equalsMethod.invoke(lhs, new Object[]{ rhs })).booleanValue();\n+            }\n+        } catch (NoSuchMethodException ex) {\n+        } catch (IllegalAccessException ex) {\n+        } catch (InvocationTargetException ex) {\n+        }\n+        FieldComparator comparator = new FieldComparator(lhs, rhs, testTransients);\n+        return comparator.isEquals();\n+    }\n+\n     public EqualsBuilder append(Object lhs, Object rhs) {\n         if (isEquals == false) {\n             return this;\n@@ -377,37 +424,210 @@ public class EqualsBuilder {\n         }\n         Class lhsClass = lhs.getClass();\n         if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n+            // The simple case, not an array, just test the element\n+            isEquals = lhs.equals(rhs);\n+        } else {\n+            // 'Switch' on type of array, to dispatch to the correct handler\n+            // This handles multi dimensional arrays of the same depth\n+            if (lhsClass != rhs.getClass()) {\n+                // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n+                this.setEquals(false);\n+                return this;\n+            }\n+            int lhsLength = Array.getLength(lhs);\n+            if (lhsLength != Array.getLength(rhs)) {\n+                this.setEquals(false);\n+                return this;\n+            }\n+            for (int i = 0; i < lhsLength; ++i) {\n+                Object lhsElement = Array.get(lhs, i);\n+                Object rhsElement = Array.get(rhs, i);\n+                append(lhsElement, rhsElement);\n+                if (!isEquals) {\n+                    return this;\n+                }\n+            }\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(Object[] lhs, Object[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        if (lhs == rhs) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n             this.setEquals(false);\n+            return this;\n         }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n-        } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n-        } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n-        } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n-        } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n-        } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n-        } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n-        } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n-        } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        for (int i = 0; i < lhs.length; i++) {\n+            append(lhs[i], rhs[i]);\n         }\n         return this;\n     }\n \n+    public EqualsBuilder append(long lhs, long rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = lhs == rhs;\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(int lhs, int rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = lhs == rhs;\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(short lhs, short rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = lhs == rhs;\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(char lhs, char rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = lhs == rhs;\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(byte lhs, byte rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = lhs == rhs;\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(double lhs, double rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        return append(Double.doubleToLongBits(lhs), Double.doubleToLongBits(rhs));\n+    }\n+\n+    public EqualsBuilder append(float lhs, float rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        return append(Float.floatToIntBits(lhs), Float.floatToIntBits(rhs));\n+    }\n+\n+    public EqualsBuilder append(boolean lhs, boolean rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        isEquals = lhs == rhs;\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(Object[] lhs, Object rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        return append(lhs, new Object[] { rhs });\n+    }\n+\n+    public EqualsBuilder append(Object lhs, Object[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        return append(new Object[] { lhs }, rhs);\n+    }\n+\n+    static class FieldComparator {\n+\n+        private final Object lhs;\n+        private final Object rhs;\n+        private final boolean testTransients;\n+\n+        private FieldComparator(Object lhs, Object rhs, boolean testTransients) {\n+            this.lhs = lhs;\n+            this.rhs = rhs;\n+            this.testTransients = testTransients;\n+        }\n+\n+        public boolean isEquals() {\n+            return new EqualsBuilder().reflectionAppend(lhs, rhs, testTransients).isEquals();\n+        }\n+    }\n+\n+    public EqualsBuilder reflectionAppend(Object lhs, Object rhs) {\n+        return reflectionAppend(lhs, rhs, false);\n+    }\n+\n+    public EqualsBuilder reflectionAppend(Object lhs, Object rhs, boolean testTransients) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        if (lhs == rhs) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        Class lhsClass = lhs.getClass();\n+        if (!lhsClass.isInstance(rhs)) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhsClass.isArray()) {\n+            append(lhs, rhs);\n+            return this;\n+        }\n+        Field[] fields = getAllFields(lhsClass);\n+        AccessibleObject.setAccessible(fields, true);\n+        for (int i = 0; i < fields.length && isEquals; i++) {\n+            Field f = fields[i];\n+            if (!isTransient(f.getModifiers()) || testTransients) {\n+                try {\n+                    append(f.get(lhs), f.get(rhs));\n+                } catch (IllegalAccessException e) {\n+                    // It is unlikely that this would occur as it would be caught earlier in \n+                    // getAllFields\n+                    throw new InternalError(\"Unexpected IllegalAccessException\");\n+                }\n+            }\n+        }\n+        return this;\n+    }\n+\n+    private static boolean isTransient(int modifiers) {\n+        return Modifier.isTransient(modifiers);\n+    }\n+\n+    public boolean isEquals() {\n+        return isEquals;\n+    }\n+\n+    public void setEquals(boolean isEquals) {\n+        this.isEquals = isEquals;\n+    }\n+\n+    private static Field[] getAllFields(Class<?> clazz) {\n+        List<Field> fieldsList = new ArrayList<Field>();\n+        while (clazz != null) {\n+            fieldsList.addAll(Arrays.asList(clazz.getDeclaredFields()));\n+            clazz = clazz.getSuperclass();\n+        }\n+        return fieldsList.toArray(new Field[fieldsList.size()]);\n+    }\n+}\n+\n     /**\n      * <p>\n      * Test if two <code>long</code> s are equal.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}