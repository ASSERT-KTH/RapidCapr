{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (getIterations() < maxIterations) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex.clone();\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex.clone();\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    // accept the reflected point\n                    simplex[0] = reflected;\n                }\n                continue;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, original[original.length - 1]) < 0) {\n                // accept the contracted simplex\n                simplex[original.length - 1] = contracted;\n            } else {\n                // perform a contraction of the simplex\n                final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n                contractedSimplex[0] = best;\n                for (int i = 1; i < original.length; i++) {\n                    contractedSimplex[i] = new RealPointValuePair(\n                            Contract(original[0].getPoint(), original[i].getPoint(), 0.5),\n                            evaluate(Contract(original[0].getPoint(), original[i].getPoint(), 0.5)));\n                }\n                simplex = contractedSimplex;\n            }\n\n            // check convergence\n            final RealPointValuePair newBest = simplex[0];\n            double newValue = newBest.getValue();\n            if (Math.abs(newValue - best.getValue()) < this.relativeThreshold * (Math.abs(best.getValue()) + Math.abs(newValue)) + this.absoluteThreshold) {\n                return;\n            }\n        }\n        throw new OptimizationException(new MaxIterationsExceededException(maxIterations));\n    }\n\n    protected double[] Contract(double[] point1, double[] point2, double contractionRatio) {\n        double[] contractedPoint = new double[point1.length];\n        for (int i = 0; i < point1.length; i++) {\n            contractedPoint[i] = point1[i] + contractionRatio * (point2[i] - point1[i]);\n        }\n        return contractedPoint;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..03905a2d2 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -59,14 +59,14 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     /** {@inheritDoc} */\n     @Override\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+        while (getIterations() < maxIterations) {\n \n             incrementIterationsCounter();\n \n             // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n+            final RealPointValuePair[] original = simplex.clone();\n             final RealPointValuePair best = original[0];\n \n             // perform a reflection step\n@@ -74,28 +74,52 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             if (comparator.compare(reflected, best) < 0) {\n \n                 // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n+                final RealPointValuePair[] reflectedSimplex = simplex.clone();\n                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    // accept the reflected point\n+                    simplex[0] = reflected;\n                 }\n-\n-                return;\n+                continue;\n \n             }\n \n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n+            if (comparator.compare(contracted, original[original.length - 1]) < 0) {\n                 // accept the contracted simplex\n+                simplex[original.length - 1] = contracted;\n+            } else {\n+                // perform a contraction of the simplex\n+                final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+                contractedSimplex[0] = best;\n+                for (int i = 1; i < original.length; i++) {\n+                    contractedSimplex[i] = new RealPointValuePair(\n+                            Contract(original[0].getPoint(), original[i].getPoint(), 0.5),\n+                            evaluate(Contract(original[0].getPoint(), original[i].getPoint(), 0.5)));\n+                }\n+                simplex = contractedSimplex;\n+            }\n \n             // check convergence\n+            final RealPointValuePair newBest = simplex[0];\n+            double newValue = newBest.getValue();\n+            if (Math.abs(newValue - best.getValue()) < this.relativeThreshold * (Math.abs(best.getValue()) + Math.abs(newValue)) + this.absoluteThreshold) {\n                 return;\n             }\n-\n         }\n+        throw new OptimizationException(new MaxIterationsExceededException(maxIterations));\n+    }\n \n+    protected double[] Contract(double[] point1, double[] point2, double contractionRatio) {\n+        double[] contractedPoint = new double[point1.length];\n+        for (int i = 0; i < point1.length; i++) {\n+            contractedPoint[i] = point1[i] + contractionRatio * (point2[i] - point1[i]);\n+        }\n+        return contractedPoint;\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: maxIterations has private access in DirectSearchOptimizer",
    "test_result": "ERROR"
}