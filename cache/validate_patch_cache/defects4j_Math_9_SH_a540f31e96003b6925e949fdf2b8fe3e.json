{
    "patch": "        final Vector3D revertedDirection = direction.negate();\n        final double norm = revertedDirection.getNorm();\n        if (norm == 0) {\n            throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n        }\n        final Vector3D normalizedDirection = new Vector3D(\n                revertedDirection.getX() / norm,\n                revertedDirection.getY() / norm,\n                revertedDirection.getZ() / norm);\n        final Vector3D zero = Vector3D.ZERO;\n        final Line reverted = new Line(zero, normalizedDirection);\n        return reverted;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..585f8f0c3 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -84,7 +84,18 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n      * @return a new instance, with reversed direction\n      */\n     public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n+        final Vector3D revertedDirection = direction.negate();\n+        final double norm = revertedDirection.getNorm();\n+        if (norm == 0) {\n+            throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n+        }\n+        final Vector3D normalizedDirection = new Vector3D(\n+                revertedDirection.getX() / norm,\n+                revertedDirection.getY() / norm,\n+                revertedDirection.getZ() / norm);\n+        final Vector3D zero = Vector3D.ZERO;\n+        final Line reverted = new Line(zero, normalizedDirection);\n+        return reverted;\n         return reverted;\n     }\n ",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}