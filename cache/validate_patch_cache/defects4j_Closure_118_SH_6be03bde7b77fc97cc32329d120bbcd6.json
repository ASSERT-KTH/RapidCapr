{
    "patch": "// Handle STRING, GETPROP, GET, SET, OBJECTLIT\nif (child.isGetProp()) {\n    child = child.getFirstChild();\n}\nif (NodeUtil.isObjectLitKey(child)) {\n    // Object literal key could be a STRING node or a COMPUTED_PROPERTY node.\n    if (child.isString()) {\n        String name = child.getString();\n        T type = typeSystem.getType(getScope(), n, name);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n            if (propertiesToErrorFor.containsKey(name)) {\n                String errorMsg = propertiesToErrorFor.get(name);\n                compiler.report(JSError.make(\n                        t.getSourceName(), child, errorMsg, Warnings.INVALIDATION,\n                        name, (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n            }\n        }\n    } else {\n        // COMPUTED_PROPERTY\n        processProperty(t, null, null, child);\n    }\n} else if (child.isString()) {\n    // STRING node\n    String name = child.getString();\n    T type = typeSystem.getType(getScope(), n, name);\n\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child,\n                               processProperty(t, prop, type, null))) {\n        if (propertiesToErrorFor.containsKey(name)) {\n            String errorMsg = propertiesToErrorFor.get(name);\n            compiler.report(JSError.make(\n                    t.getSourceName(), child, errorMsg, Warnings.INVALIDATION,\n                    name, (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..9fd60bd8 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,46 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+// Handle STRING, GETPROP, GET, SET, OBJECTLIT\n+if (child.isGetProp()) {\n+    child = child.getFirstChild();\n+}\n+if (NodeUtil.isObjectLitKey(child)) {\n+    // Object literal key could be a STRING node or a COMPUTED_PROPERTY node.\n+    if (child.isString()) {\n+        String name = child.getString();\n+        T type = typeSystem.getType(getScope(), n, name);\n+\n+        Property prop = getProperty(name);\n+        if (!prop.scheduleRenaming(child,\n+                                   processProperty(t, prop, type, null))) {\n+            if (propertiesToErrorFor.containsKey(name)) {\n+                String errorMsg = propertiesToErrorFor.get(name);\n+                compiler.report(JSError.make(\n+                        t.getSourceName(), child, errorMsg, Warnings.INVALIDATION,\n+                        name, (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+            }\n+        }\n+    } else {\n+        // COMPUTED_PROPERTY\n+        processProperty(t, null, null, child);\n+    }\n+} else if (child.isString()) {\n+    // STRING node\n+    String name = child.getString();\n+    T type = typeSystem.getType(getScope(), n, name);\n+\n+    Property prop = getProperty(name);\n+    if (!prop.scheduleRenaming(child,\n+                               processProperty(t, prop, type, null))) {\n+        if (propertiesToErrorFor.containsKey(name)) {\n+            String errorMsg = propertiesToErrorFor.get(name);\n+            compiler.report(JSError.make(\n+                    t.getSourceName(), child, errorMsg, Warnings.INVALIDATION,\n+                    name, (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+        }\n+    }\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}