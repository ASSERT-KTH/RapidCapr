{
    "patch": "List<Strategy> collector = new ArrayList<Strategy>();\nStringBuilder regex = new StringBuilder();\ncurrentFormatField = null;\n\nif (nextStrategy != null) {\n    for (;;) {\n        boolean currentAdded = false;\n        boolean nextAdded = false;\n        if (currentStrategy != null) {\n            currentAdded = currentStrategy.addRegex(this, regex);\n            if (currentAdded) {\n                collector.add(currentStrategy);\n            }\n        } else {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n        if (nextStrategy != null) {\n            nextAdded = nextStrategy.addRegex(this, regex);\n            if (nextAdded && !currentAdded) {\n                collector.add(nextStrategy);\n            }\n        }\n        if (!currentAdded && !nextAdded) {\n            break;\n        }\n        if (patternMatcher.regionEnd() - patternMatcher.end() == 0) {\n            break;\n        }\n        currentFormatField = nextFormatField;\n        currentStrategy = nextStrategy;\n        patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n        if (!patternMatcher.lookingAt()) {\n            break;\n        }\n        nextFormatField = patternMatcher.group();\n        nextStrategy = getStrategy(nextFormatField);\n        if (nextStrategy == null) {\n            break;\n        }\n    }\n}\n\nif (collector.isEmpty()) {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n} else {\n    strategies = collector.toArray(new Strategy[0]);\n    parsePattern = Pattern.compile(regex.toString());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..18972643 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,54 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+List<Strategy> collector = new ArrayList<Strategy>();\n+StringBuilder regex = new StringBuilder();\n+currentFormatField = null;\n+\n+if (nextStrategy != null) {\n+    for (;;) {\n+        boolean currentAdded = false;\n+        boolean nextAdded = false;\n+        if (currentStrategy != null) {\n+            currentAdded = currentStrategy.addRegex(this, regex);\n+            if (currentAdded) {\n+                collector.add(currentStrategy);\n+            }\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid pattern\");\n+        }\n+        if (nextStrategy != null) {\n+            nextAdded = nextStrategy.addRegex(this, regex);\n+            if (nextAdded && !currentAdded) {\n+                collector.add(nextStrategy);\n+            }\n+        }\n+        if (!currentAdded && !nextAdded) {\n+            break;\n+        }\n+        if (patternMatcher.regionEnd() - patternMatcher.end() == 0) {\n+            break;\n+        }\n+        currentFormatField = nextFormatField;\n+        currentStrategy = nextStrategy;\n+        patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n+        if (!patternMatcher.lookingAt()) {\n+            break;\n+        }\n+        nextFormatField = patternMatcher.group();\n+        nextStrategy = getStrategy(nextFormatField);\n+        if (nextStrategy == null) {\n+            break;\n+        }\n+    }\n+}\n+\n+if (collector.isEmpty()) {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+} else {\n+    strategies = collector.toArray(new Strategy[0]);\n+    parsePattern = Pattern.compile(regex.toString());\n+}\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: variable collector is already defined in method init()",
    "test_result": "ERROR"
}