{
    "patch": "private String getRemainingJSDocLine() {\n    String result = stream.getRemainingJSDocLine();\n    if (result == null) {\n        throw new IllegalStateException(\"JSDoc line is null\");\n    }\n    \n    result = result.trim();\n    if (result.isEmpty()) {\n        return \"\";\n    }\n    \n    StringBuilder sb = new StringBuilder();\n    boolean seenNonSpaceChar = false;\n    for (int i = 0; i < result.length(); i++) {\n        char c = result.charAt(i);\n        if (Character.isWhitespace(c)) {\n            if (seenNonSpaceChar) {\n                sb.append(' ');\n                seenNonSpaceChar = false;\n            }\n        } else {\n            sb.append(c);\n            seenNonSpaceChar = true;\n        }\n    }\n\n    result = sb.toString();\n    if (!result.isEmpty() && result.charAt(result.length() - 1) == '.') {\n        result = result.substring(0, result.length() - 1).trim();\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..1cc1831f 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,39 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n+private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+    if (result == null) {\n+        throw new IllegalStateException(\"JSDoc line is null\");\n+    }\n+    \n+    result = result.trim();\n+    if (result.isEmpty()) {\n+        return \"\";\n+    }\n+    \n+    StringBuilder sb = new StringBuilder();\n+    boolean seenNonSpaceChar = false;\n+    for (int i = 0; i < result.length(); i++) {\n+        char c = result.charAt(i);\n+        if (Character.isWhitespace(c)) {\n+            if (seenNonSpaceChar) {\n+                sb.append(' ');\n+                seenNonSpaceChar = false;\n+            }\n+        } else {\n+            sb.append(c);\n+            seenNonSpaceChar = true;\n+        }\n+    }\n+\n+    result = sb.toString();\n+    if (!result.isEmpty() && result.charAt(result.length() - 1) == '.') {\n+        result = result.substring(0, result.length() - 1).trim();\n+    }\n+\n     return result;\n-  }\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "junit.framework.ComparisonFailure: expected:<Another[ function.]> but was:<Another[function]>",
    "test_result": "FAIL"
}