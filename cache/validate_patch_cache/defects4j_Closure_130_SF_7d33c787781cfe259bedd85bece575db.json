{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n      \n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.getType() == Name.Type.GET || name.getType() == Name.Type.SET) {\n        continue;\n      }\n\n      if ((name.getGlobalSets() == 1 || name.getAliasingGets() > 0) && \n          name.getLocalSets() == 0 && name.getDeclaration() != null && \n          !name.isModuleExport() && name.canEliminate()) {\n        \n        Ref decl = name.getDeclaration();\n        JSDocInfo info = NodeUtil.getBestJSDocInfo(decl.getNode());\n        if (info != null && info.isConstant()) {\n          \n          List<Ref> refs = Lists.newArrayList(name.getRefs());\n          for (Ref ref : refs) {\n            \n            if (ref.type == Ref.Type.ALIASING_GET && ref.scope.isLocal()) {\n              \n              // Update the stored local references for this name before inlining the alias.\n              name.removeRef(ref);\n              name.addRef(decl);\n              \n              // Inline the alias.\n              inlineRef(ref, decl);\n            }\n          }\n        }\n      }\n      \n      if ((name.getType() == Name.Type.OBJECTLIT || name.getType() == Name.Type.FUNCTION) && name.getAliasingGets() == 0 && name.getProps() != null) {\n        for (Name prop : name.getProps()) {\n          if (prop.isInlinableProperty()) {\n            workList.push(prop);\n          }\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..ea3870f5 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,40 +158,47 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n+private void inlineAliases(GlobalNamespace namespace) {\n     // Invariant: All the names in the worklist meet condition (a).\n     Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n     while (!workList.isEmpty()) {\n       Name name = workList.pop();\n-\n+      \n       // Don't attempt to inline a getter or setter property as a variable.\n-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+      if (name.getType() == Name.Type.GET || name.getType() == Name.Type.SET) {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n+      if ((name.getGlobalSets() == 1 || name.getAliasingGets() > 0) && \n+          name.getLocalSets() == 0 && name.getDeclaration() != null && \n+          !name.isModuleExport() && name.canEliminate()) {\n+        \n+        Ref decl = name.getDeclaration();\n+        JSDocInfo info = NodeUtil.getBestJSDocInfo(decl.getNode());\n+        if (info != null && info.isConstant()) {\n+          \n+          List<Ref> refs = Lists.newArrayList(name.getRefs());\n+          for (Ref ref : refs) {\n+            \n+            if (ref.type == Ref.Type.ALIASING_GET && ref.scope.isLocal()) {\n+              \n+              // Update the stored local references for this name before inlining the alias.\n               name.removeRef(ref);\n+              name.addRef(decl);\n+              \n+              // Inline the alias.\n+              inlineRef(ref, decl);\n             }\n           }\n         }\n       }\n-\n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n+      \n+      if ((name.getType() == Name.Type.OBJECTLIT || name.getType() == Name.Type.FUNCTION) && name.getAliasingGets() == 0 && name.getProps() != null) {\n+        for (Name prop : name.getProps()) {\n+          if (prop.isInlinableProperty()) {\n+            workList.push(prop);\n+          }\n+        }\n       }\n     }\n   }",
    "result_reason": "error: incomparable types: JSType and Type",
    "test_result": "ERROR"
}