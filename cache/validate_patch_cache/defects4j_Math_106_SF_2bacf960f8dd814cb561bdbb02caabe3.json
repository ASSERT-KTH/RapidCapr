{
    "patch": "public Fraction parse(String source, ParsePosition pos) {\n    // try to parse improper fraction\n    Fraction ret = super.parse(source, pos);\n    if (ret != null) {\n        return ret;\n    }\n    \n    int initialIndex = pos.getIndex();\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse whole\n    Number whole = getWholeFormat().parse(source, pos);\n    if (whole == null) {\n        // invalid integer number\n        // set index back to initial, error index should already be set\n        // character examined.\n        pos.setIndex(initialIndex);\n        return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n    \n    // parse numerator\n    Number num = getNumeratorFormat().parse(source, pos);\n    if (num == null) {\n        // invalid integer number\n        // set index back to initial, error index should already be set\n        // character examined.\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    \n    // check for minus sign in the numerator\n    boolean hasMinusSign = false;\n    if (num instanceof Long) {\n        long n = (Long) num;\n        if (n < 0) {\n            hasMinusSign = true;\n            num = -n;\n        }\n    } else if (num instanceof Double) {\n        double n = (Double) num;\n        if (n < 0) {\n            hasMinusSign = true;\n            num = -n;\n        }\n    } else if (num instanceof BigInteger) {\n        BigInteger n = (BigInteger) num;\n        if (n.signum() < 0) {\n            hasMinusSign = true;\n            num = n.negate();\n        }\n    } else if (num instanceof BigDecimal) {\n        BigDecimal n = (BigDecimal) num;\n        if (n.signum() < 0) {\n            hasMinusSign = true;\n            num = n.negate();\n        }\n    }\n    \n    // parse '/'\n    int startIndex = pos.getIndex();\n    char c = parseNextCharacter(source, pos);\n    switch (c) {\n    case 0 :\n        // no '/'\n        // return num as a fraction\n        return new Fraction(num.intValue(), 1);\n    case '/' :\n        // found '/', continue parsing denominator\n        break;\n    default :\n        // invalid '/'\n        // set index back to initial, error index should be the last\n        // character examined.\n        pos.setIndex(initialIndex);\n        pos.setErrorIndex(startIndex - 1); //subtract 1 from startIndex to get the beginning index of the invalid character\n        return null;\n    }\n\n    // parse whitespace\n    parseAndIgnoreWhitespace(source, pos);\n\n    // parse denominator\n    Number den = getDenominatorFormat().parse(source, pos);\n    if (den == null) {\n        // invalid integer number\n        // set index back to initial, error index should already be set\n        // character examined.\n        pos.setIndex(initialIndex);\n        return null;\n    }\n    \n    // check for minus sign in the denominator\n    if (den instanceof Long) {\n        if ((Long) den < 0) {\n            // minus sign should be leading\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(pos.getIndex() - 1);\n            return null;\n        }\n    } else if (den instanceof BigInteger) {\n        BigInteger n = (BigInteger) den;\n        if (n.signum() < 0) {\n            // minus sign should be leading\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(pos.getIndex() - 1);\n            return null;\n        }\n    } else if (den instanceof BigDecimal) {\n        BigDecimal n = (BigDecimal) den;\n        if (n.signum() < 0) {\n            // minus sign should be leading\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(pos.getIndex() - 1);\n            return null;\n        }\n    }\n    \n    int w = whole.intValue();\n    int n = num.intValue();\n    int d = den.intValue();\n    if (hasMinusSign) {\n        n = -n;\n    }\n    return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java b/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\nindex df2713da8..3e139d54a 100644\n--- a/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\n+++ b/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\n@@ -127,83 +127,136 @@ public class ProperFractionFormat extends FractionFormat {\n      * @param pos input/ouput parsing parameter.\n      * @return the parsed {@link Fraction} object.\n      */\n-    public Fraction parse(String source, ParsePosition pos) {\n-        // try to parse improper fraction\n-        Fraction ret = super.parse(source, pos);\n-        if (ret != null) {\n-            return ret;\n-        }\n-        \n-        int initialIndex = pos.getIndex();\n-\n-        // parse whitespace\n-        parseAndIgnoreWhitespace(source, pos);\n-\n-        // parse whole\n-        Number whole = getWholeFormat().parse(source, pos);\n-        if (whole == null) {\n-            // invalid integer number\n-            // set index back to initial, error index should already be set\n-            // character examined.\n-            pos.setIndex(initialIndex);\n-            return null;\n-        }\n-\n-        // parse whitespace\n-        parseAndIgnoreWhitespace(source, pos);\n-        \n-        // parse numerator\n-        Number num = getNumeratorFormat().parse(source, pos);\n-        if (num == null) {\n-            // invalid integer number\n-            // set index back to initial, error index should already be set\n-            // character examined.\n-            pos.setIndex(initialIndex);\n-            return null;\n-        }\n-        \n-            // minus signs should be leading, invalid expression\n-\n-        // parse '/'\n-        int startIndex = pos.getIndex();\n-        char c = parseNextCharacter(source, pos);\n-        switch (c) {\n-        case 0 :\n-            // no '/'\n-            // return num as a fraction\n-            return new Fraction(num.intValue(), 1);\n-        case '/' :\n-            // found '/', continue parsing denominator\n-            break;\n-        default :\n-            // invalid '/'\n-            // set index back to initial, error index should be the last\n-            // character examined.\n-            pos.setIndex(initialIndex);\n-            pos.setErrorIndex(startIndex);\n-            return null;\n-        }\n-\n-        // parse whitespace\n-        parseAndIgnoreWhitespace(source, pos);\n-\n-        // parse denominator\n-        Number den = getDenominatorFormat().parse(source, pos);\n-        if (den == null) {\n-            // invalid integer number\n-            // set index back to initial, error index should already be set\n-            // character examined.\n-            pos.setIndex(initialIndex);\n-            return null;\n-        }\n-        \n-            // minus signs must be leading, invalid\n-\n-        int w = whole.intValue();\n-        int n = num.intValue();\n-        int d = den.intValue();\n-        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n-    }\n+public Fraction parse(String source, ParsePosition pos) {\n+    // try to parse improper fraction\n+    Fraction ret = super.parse(source, pos);\n+    if (ret != null) {\n+        return ret;\n+    }\n+    \n+    int initialIndex = pos.getIndex();\n+\n+    // parse whitespace\n+    parseAndIgnoreWhitespace(source, pos);\n+\n+    // parse whole\n+    Number whole = getWholeFormat().parse(source, pos);\n+    if (whole == null) {\n+        // invalid integer number\n+        // set index back to initial, error index should already be set\n+        // character examined.\n+        pos.setIndex(initialIndex);\n+        return null;\n+    }\n+\n+    // parse whitespace\n+    parseAndIgnoreWhitespace(source, pos);\n+    \n+    // parse numerator\n+    Number num = getNumeratorFormat().parse(source, pos);\n+    if (num == null) {\n+        // invalid integer number\n+        // set index back to initial, error index should already be set\n+        // character examined.\n+        pos.setIndex(initialIndex);\n+        return null;\n+    }\n+    \n+    // check for minus sign in the numerator\n+    boolean hasMinusSign = false;\n+    if (num instanceof Long) {\n+        long n = (Long) num;\n+        if (n < 0) {\n+            hasMinusSign = true;\n+            num = -n;\n+        }\n+    } else if (num instanceof Double) {\n+        double n = (Double) num;\n+        if (n < 0) {\n+            hasMinusSign = true;\n+            num = -n;\n+        }\n+    } else if (num instanceof BigInteger) {\n+        BigInteger n = (BigInteger) num;\n+        if (n.signum() < 0) {\n+            hasMinusSign = true;\n+            num = n.negate();\n+        }\n+    } else if (num instanceof BigDecimal) {\n+        BigDecimal n = (BigDecimal) num;\n+        if (n.signum() < 0) {\n+            hasMinusSign = true;\n+            num = n.negate();\n+        }\n+    }\n+    \n+    // parse '/'\n+    int startIndex = pos.getIndex();\n+    char c = parseNextCharacter(source, pos);\n+    switch (c) {\n+    case 0 :\n+        // no '/'\n+        // return num as a fraction\n+        return new Fraction(num.intValue(), 1);\n+    case '/' :\n+        // found '/', continue parsing denominator\n+        break;\n+    default :\n+        // invalid '/'\n+        // set index back to initial, error index should be the last\n+        // character examined.\n+        pos.setIndex(initialIndex);\n+        pos.setErrorIndex(startIndex - 1); //subtract 1 from startIndex to get the beginning index of the invalid character\n+        return null;\n+    }\n+\n+    // parse whitespace\n+    parseAndIgnoreWhitespace(source, pos);\n+\n+    // parse denominator\n+    Number den = getDenominatorFormat().parse(source, pos);\n+    if (den == null) {\n+        // invalid integer number\n+        // set index back to initial, error index should already be set\n+        // character examined.\n+        pos.setIndex(initialIndex);\n+        return null;\n+    }\n+    \n+    // check for minus sign in the denominator\n+    if (den instanceof Long) {\n+        if ((Long) den < 0) {\n+            // minus sign should be leading\n+            pos.setIndex(initialIndex);\n+            pos.setErrorIndex(pos.getIndex() - 1);\n+            return null;\n+        }\n+    } else if (den instanceof BigInteger) {\n+        BigInteger n = (BigInteger) den;\n+        if (n.signum() < 0) {\n+            // minus sign should be leading\n+            pos.setIndex(initialIndex);\n+            pos.setErrorIndex(pos.getIndex() - 1);\n+            return null;\n+        }\n+    } else if (den instanceof BigDecimal) {\n+        BigDecimal n = (BigDecimal) den;\n+        if (n.signum() < 0) {\n+            // minus sign should be leading\n+            pos.setIndex(initialIndex);\n+            pos.setErrorIndex(pos.getIndex() - 1);\n+            return null;\n+        }\n+    }\n+    \n+    int w = whole.intValue();\n+    int n = num.intValue();\n+    int d = den.intValue();\n+    if (hasMinusSign) {\n+        n = -n;\n+    }\n+    return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);\n+}\n     \n     /**\n      * Modify the whole format.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}