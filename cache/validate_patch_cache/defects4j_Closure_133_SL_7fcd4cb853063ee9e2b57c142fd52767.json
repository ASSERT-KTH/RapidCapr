{
    "patch": "public JsDocInfo parse() throws ParseException {\n    ErrorHandler error_handler = new ErrorHandler();\n    error_handler.setReportBadTypes(false);\n    CompilerOptions options = new CompilerOptions();\n    options.setSkipAllPasses(true);\n    options.setWarningLevel(\n        DiagnosticGroups.JSC_TYPE_PARSE_ERROR, CheckLevel.OFF);\n    options.setParseJsDocDocumentationElements(true);\n    options.setLanguageOut(ECMASCRIPT5);\n\n    ParseResult<JsDocInfo> result =\n        ParserRunner.parseWithDocInfo(jsdoc, \"\", options,\n            SourceKind.JSDOC, keep_going_after_errors, error_handler);\n    return result.getResult().getOrThrow();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..1ffd59f7 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,21 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+public JsDocInfo parse() throws ParseException {\n+    ErrorHandler error_handler = new ErrorHandler();\n+    error_handler.setReportBadTypes(false);\n+    CompilerOptions options = new CompilerOptions();\n+    options.setSkipAllPasses(true);\n+    options.setWarningLevel(\n+        DiagnosticGroups.JSC_TYPE_PARSE_ERROR, CheckLevel.OFF);\n+    options.setParseJsDocDocumentationElements(true);\n+    options.setLanguageOut(ECMASCRIPT5);\n+\n+    ParseResult<JsDocInfo> result =\n+        ParserRunner.parseWithDocInfo(jsdoc, \"\", options,\n+            SourceKind.JSDOC, keep_going_after_errors, error_handler);\n+    return result.getResult().getOrThrow();\n+  }\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}