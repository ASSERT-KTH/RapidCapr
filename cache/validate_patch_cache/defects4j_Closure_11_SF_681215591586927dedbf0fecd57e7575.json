{
    "patch": "public static String getprop(String property) {\n    String value = null;\n    Properties props = new Properties();\n\n    try {\n        InputStream input = new FileInputStream(\"config.properties\");\n        props.load(input);\n        value = props.getProperty(property);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n\n    if (value == null) {\n        System.err.println(\"The property \" + property + \" could not be found in the configuration file.\");\n    }\n\n    return value;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..910218bd 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getprop(String property) {\n+    String value = null;\n+    Properties props = new Properties();\n+\n+    try {\n+        InputStream input = new FileInputStream(\"config.properties\");\n+        props.load(input);\n+        value = props.getProperty(property);\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+    }\n+\n+    if (value == null) {\n+        System.err.println(\"The property \" + property + \" could not be found in the configuration file.\");\n+    }\n+\n+    return value;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}