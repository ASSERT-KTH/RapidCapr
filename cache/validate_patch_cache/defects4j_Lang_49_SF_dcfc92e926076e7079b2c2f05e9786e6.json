{
    "patch": "public Fraction reduce() {\n        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n        if (gcd == 1) {\n            return this;\n        } else if (numerator > 0 && denominator < 0) {\n            return Fraction.getFraction(-(numerator / gcd), -(denominator / gcd));\n        } else {\n            return Fraction.getFraction(numerator / gcd, denominator / gcd);\n        }\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..e04329c1 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,12 +462,15 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n+public Fraction reduce() {\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;\n+        } else if (numerator > 0 && denominator < 0) {\n+            return Fraction.getFraction(-(numerator / gcd), -(denominator / gcd));\n+        } else {\n+            return Fraction.getFraction(numerator / gcd, denominator / gcd);\n         }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1> but was:<100>",
    "test_result": "FAIL"
}