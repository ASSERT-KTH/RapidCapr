{
    "patch": "// Don't traverse functions that are getting lent to a prototype.\nif (parent != null && NodeUtil.isGet(parent)) {\n  Node root = NodeUtil.getRootOfQualifiedName(parent);\n\n  if (root != null) {\n    Node ancestor = parent.getParent();\n\n    while (ancestor != null &&\n           !NodeUtil.isFunctionExpression(ancestor) &&\n           !NodeUtil.isFunctionDeclaration(ancestor)) {\n      ancestor = ancestor.getParent();\n    }\n\n    if (ancestor != null) {\n      boolean isAssignmentToPrototype = false;\n\n      if (root.getType() == Token.NAME &&\n          NodeUtil.isNameDeclaration(root.getParent())) {\n        Node initializer = root.getFirstChild();\n        if (initializer != null && initializer.getNext() == null) {\n          Node rhs = initializer.getFirstChild();\n          if (rhs != null && rhs.isFunction()) {\n            Node grandparent = ancestor.getParent();\n            if (grandparent != null &&\n                grandparent.getType() == Token.BLOCK &&\n                ancestor.getType() == Token.FUNCTION &&\n                ancestor.getFirstChild() != null &&\n                ancestor.getFirstChild().isName() &&\n                ancestor.getFirstChild().getString().equals(root.getString())) {\n              isAssignmentToPrototype = true;\n            }\n          }\n        }\n      } else if (root.getType() == Token.GETPROP) {\n        Node grandparent = ancestor.getParent();\n\n        if (grandparent != null &&\n            grandparent.getType() == Token.ASSIGN &&\n            root.getFirstChild().isName() &&\n            root.getFirstChild().getString().equals(\"prototype\") &&\n            ancestor.getType() == Token.FUNCTION &&\n            NodeUtil.isObjectLitKey(root.getParent().getParent())) {\n          isAssignmentToPrototype = true;\n        }\n      } else if (root.getType() == Token.STRING_KEY) {\n        Node grandparent = ancestor.getParent();\n\n        if (grandparent != null &&\n            grandparent.getType() == Token.OBJECTLIT &&\n            root.getFirstChild().getString().equals(\"prototype\") &&\n            ancestor.getType() == Token.FUNCTION) {\n          isAssignmentToPrototype = true;\n        }\n      }\n\n      if (isAssignmentToPrototype) {\n        return false;\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..a884bb5f 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,67 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+// Don't traverse functions that are getting lent to a prototype.\n+if (parent != null && NodeUtil.isGet(parent)) {\n+  Node root = NodeUtil.getRootOfQualifiedName(parent);\n+\n+  if (root != null) {\n+    Node ancestor = parent.getParent();\n+\n+    while (ancestor != null &&\n+           !NodeUtil.isFunctionExpression(ancestor) &&\n+           !NodeUtil.isFunctionDeclaration(ancestor)) {\n+      ancestor = ancestor.getParent();\n+    }\n+\n+    if (ancestor != null) {\n+      boolean isAssignmentToPrototype = false;\n+\n+      if (root.getType() == Token.NAME &&\n+          NodeUtil.isNameDeclaration(root.getParent())) {\n+        Node initializer = root.getFirstChild();\n+        if (initializer != null && initializer.getNext() == null) {\n+          Node rhs = initializer.getFirstChild();\n+          if (rhs != null && rhs.isFunction()) {\n+            Node grandparent = ancestor.getParent();\n+            if (grandparent != null &&\n+                grandparent.getType() == Token.BLOCK &&\n+                ancestor.getType() == Token.FUNCTION &&\n+                ancestor.getFirstChild() != null &&\n+                ancestor.getFirstChild().isName() &&\n+                ancestor.getFirstChild().getString().equals(root.getString())) {\n+              isAssignmentToPrototype = true;\n+            }\n+          }\n+        }\n+      } else if (root.getType() == Token.GETPROP) {\n+        Node grandparent = ancestor.getParent();\n+\n+        if (grandparent != null &&\n+            grandparent.getType() == Token.ASSIGN &&\n+            root.getFirstChild().isName() &&\n+            root.getFirstChild().getString().equals(\"prototype\") &&\n+            ancestor.getType() == Token.FUNCTION &&\n+            NodeUtil.isObjectLitKey(root.getParent().getParent())) {\n+          isAssignmentToPrototype = true;\n+        }\n+      } else if (root.getType() == Token.STRING_KEY) {\n+        Node grandparent = ancestor.getParent();\n+\n+        if (grandparent != null &&\n+            grandparent.getType() == Token.OBJECTLIT &&\n+            root.getFirstChild().getString().equals(\"prototype\") &&\n+            ancestor.getType() == Token.FUNCTION) {\n+          isAssignmentToPrototype = true;\n+        }\n+      }\n+\n+      if (isAssignmentToPrototype) {\n+        return false;\n+      }\n+    }\n+  }\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}