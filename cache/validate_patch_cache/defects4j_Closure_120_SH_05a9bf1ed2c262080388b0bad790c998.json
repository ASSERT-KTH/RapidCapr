{
    "patch": "BasicBlock containingBlock = ref.getBasicBlock();\n      int assignmentCount = 1;\n      for (Reference otherRef : containingBlock.getRefsInThisBlock()) {\n        if (otherRef.isAssignmentTo(variable)) {\n          // if there's more than 1 assignment in this block, it's definitely not\n          // assigned only once in its lifetime.\n          if (++assignmentCount > 1) {\n            return false;\n          }\n        }\n      }\n      if (assignmentCount > 1) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..301cfbe8 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,18 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+BasicBlock containingBlock = ref.getBasicBlock();\n+      int assignmentCount = 1;\n+      for (Reference otherRef : containingBlock.getRefsInThisBlock()) {\n+        if (otherRef.isAssignmentTo(variable)) {\n+          // if there's more than 1 assignment in this block, it's definitely not\n+          // assigned only once in its lifetime.\n+          if (++assignmentCount > 1) {\n+            return false;\n+          }\n+        }\n+      }\n+      if (assignmentCount > 1) {\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}