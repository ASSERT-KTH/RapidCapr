{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n\n    if (!Double.isNaN(value)) {\n        boolean meanUpdated = false;\n        if (meanImpl instanceof StorelessUnivariateStatistic) {\n            meanImpl.increment(value);\n            meanUpdated = true;\n        } else if (meanImpl instanceof AbstractStorelessUnivariateStatistic) {\n            double currentMean = meanImpl.getResult();\n            double delta = value - currentMean;\n            meanImpl.increment(delta / n);\n            meanUpdated = true;\n        }\n\n        if (varianceImpl instanceof StorelessUnivariateStatistic) {\n            varianceImpl.increment(value);\n        } else if (varianceImpl instanceof AbstractStorelessUnivariateStatistic && meanUpdated) {\n            ((AbstractStorelessUnivariateStatistic) varianceImpl).increment(value - meanImpl.getResult());\n        }\n\n        if (geoMeanImpl instanceof StorelessUnivariateStatistic) {\n            geoMeanImpl.increment(value);\n        }\n    }\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..02ff3e265 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,26 +146,38 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+\n+    if (!Double.isNaN(value)) {\n+        boolean meanUpdated = false;\n+        if (meanImpl instanceof StorelessUnivariateStatistic) {\n             meanImpl.increment(value);\n+            meanUpdated = true;\n+        } else if (meanImpl instanceof AbstractStorelessUnivariateStatistic) {\n+            double currentMean = meanImpl.getResult();\n+            double delta = value - currentMean;\n+            meanImpl.increment(delta / n);\n+            meanUpdated = true;\n         }\n-        if (!(varianceImpl instanceof Variance)) {\n+\n+        if (varianceImpl instanceof StorelessUnivariateStatistic) {\n             varianceImpl.increment(value);\n+        } else if (varianceImpl instanceof AbstractStorelessUnivariateStatistic && meanUpdated) {\n+            ((AbstractStorelessUnivariateStatistic) varianceImpl).increment(value - meanImpl.getResult());\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n+\n+        if (geoMeanImpl instanceof StorelessUnivariateStatistic) {\n             geoMeanImpl.increment(value);\n         }\n-        n++;\n     }\n+    n++;\n+}\n \n     /**\n      * Returns the number of available values",
    "result_reason": "junit.framework.AssertionFailedError: expected:<4.0> but was:<8.0>",
    "test_result": "FAIL"
}