{
    "patch": "public static String getprop(String name) {\n    String result = \"\";\n    try {\n        Runtime rt = Runtime.getRuntime();\n        Process pr = rt.exec(\"getprop \" + name);\n        StreamReader sr = new StreamReader(pr.getInputStream());\n        Thread.sleep(500); \n        pr.destroy();\n        result = sr.getResult();\n    } catch (IOException e) {\n        e.printStackTrace();\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    return result;\n}\n\npublic static class StreamReader extends Thread {\n    private InputStream is;\n    private StringWriter sw;\n\n    public StreamReader(InputStream is) {\n        this.is = is;\n        this.sw = new StringWriter();\n    }\n\n    public void run() {\n        try {\n            int c;\n            while ((c = is.read()) != -1)\n                sw.write(c);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public String getResult() {\n        return sw.toString();\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..5f416c13 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,46 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getprop(String name) {\n+    String result = \"\";\n+    try {\n+        Runtime rt = Runtime.getRuntime();\n+        Process pr = rt.exec(\"getprop \" + name);\n+        StreamReader sr = new StreamReader(pr.getInputStream());\n+        Thread.sleep(500); \n+        pr.destroy();\n+        result = sr.getResult();\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+    } catch (InterruptedException e) {\n+        e.printStackTrace();\n+    }\n+    return result;\n+}\n+\n+public static class StreamReader extends Thread {\n+    private InputStream is;\n+    private StringWriter sw;\n+\n+    public StreamReader(InputStream is) {\n+        this.is = is;\n+        this.sw = new StringWriter();\n+    }\n+\n+    public void run() {\n+        try {\n+            int c;\n+            while ((c = is.read()) != -1)\n+                sw.write(c);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public String getResult() {\n+        return sw.toString();\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}