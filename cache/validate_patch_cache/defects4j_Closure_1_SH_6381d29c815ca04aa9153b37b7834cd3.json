{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    // Variables to track the removal of unused parameters.\n    Node param = argList.getFirstChild();\n    Node nextParam = null;\n    int removedParams = 0;\n\n    // Check each function parameter to see if it is used. If it is not, and there is\n    // no usage to its right, remove it.\n    while (param != null) {\n      // Get the next parameter before it may be removed.\n      nextParam = param.getNext();\n\n      // Check if the parameter is used in the function body or any nested scopes.\n      Var var = fnScope.getVar(param.getString());\n      if (!referenced.contains(var) && (nextParam == null || referenced.contains(fnScope.getVar(nextParam.getString())))) {\n        argList.removeChild(param);\n        removedParams++;\n        compiler.reportCodeChange();\n      }\n\n      // Check the next parameter.\n      param = nextParam;\n    }\n\n    // Optimize call sites if possible.\n    if (modifyCallers && removedParams > 0) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..e1c8e295 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,44 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    // Variables to track the removal of unused parameters.\n+    Node param = argList.getFirstChild();\n+    Node nextParam = null;\n+    int removedParams = 0;\n+\n+    // Check each function parameter to see if it is used. If it is not, and there is\n+    // no usage to its right, remove it.\n+    while (param != null) {\n+      // Get the next parameter before it may be removed.\n+      nextParam = param.getNext();\n+\n+      // Check if the parameter is used in the function body or any nested scopes.\n+      Var var = fnScope.getVar(param.getString());\n+      if (!referenced.contains(var) && (nextParam == null || referenced.contains(fnScope.getVar(nextParam.getString())))) {\n+        argList.removeChild(param);\n+        removedParams++;\n+        compiler.reportCodeChange();\n+      }\n+\n+      // Check the next parameter.\n+      param = nextParam;\n+    }\n+\n+    // Optimize call sites if possible.\n+    if (modifyCallers && removedParams > 0) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: variable function is already defined in method removeUnreferencedFunctionArgs(Scope)",
    "test_result": "ERROR"
}