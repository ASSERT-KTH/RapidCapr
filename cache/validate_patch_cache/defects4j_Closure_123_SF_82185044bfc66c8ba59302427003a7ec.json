{
    "patch": "public static String fixCode(String code) {\n    String pattern1 = \"^for\\\\(.*:(.*)\\\\)\";\n    String pattern2 = \"(\\\\w+)\\\\sin\\\\s(.*)(.*)\";\n    Pattern p1 = Pattern.compile(pattern1);\n    Pattern p2 = Pattern.compile(pattern2, Pattern.MULTILINE);\n    Matcher m1 = p1.matcher(code);\n    Matcher m2 = p2.matcher(code);\n\n    while (m1.find()) {\n        String variable = m1.group(1).trim();\n        code = code.replaceFirst(variable, \"temp_\" + variable);\n    }\n\n    while (m2.find()) {\n        String variable = m2.group(1);\n        String listName = m2.group(2);\n        String remainingCode = m2.group(3).trim();\n        String replacementCode = \"\";\n        if (!listName.startsWith(\"(\") && !listName.startsWith(\"[\")) {\n            listName = \"(\" + listName + \")\";\n        }\n        if (remainingCode.startsWith(\":\")) {\n            remainingCode = remainingCode.substring(1).trim();\n        }\n        if (remainingCode.startsWith(\"{\")) {\n            int closingBracketIndex = findClosingBracketIndex(remainingCode);\n            if (closingBracketIndex == -1) {\n                return \"Error: Invalid syntax\";\n            }\n            String innerCode = remainingCode.substring(1, closingBracketIndex);\n            replacementCode = \"{ for (Object \" + variable + \" : \" + listName\n                    + \") { \" + innerCode + \" } \"\n                    + remainingCode.substring(closingBracketIndex);\n        } else {\n            replacementCode = \"for (Object \" + variable + \" : \" + listName + \")\" + remainingCode;\n        }\n        code = code.replace(m2.group(0), replacementCode);\n    }\n\n    return code;\n}\n\nprivate static int findClosingBracketIndex(String code) {\n    int count = 0;\n    for (int i = 0; i < code.length(); i++) {\n        if (code.charAt(i) == '{') {\n            count++;\n        } else if (code.charAt(i) == '}') {\n            count--;\n        }\n        if (count == 0) {\n            return i;\n        }\n    }\n    return -1;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..06d9fb3f 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,62 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    String pattern1 = \"^for\\\\(.*:(.*)\\\\)\";\n+    String pattern2 = \"(\\\\w+)\\\\sin\\\\s(.*)(.*)\";\n+    Pattern p1 = Pattern.compile(pattern1);\n+    Pattern p2 = Pattern.compile(pattern2, Pattern.MULTILINE);\n+    Matcher m1 = p1.matcher(code);\n+    Matcher m2 = p2.matcher(code);\n+\n+    while (m1.find()) {\n+        String variable = m1.group(1).trim();\n+        code = code.replaceFirst(variable, \"temp_\" + variable);\n+    }\n+\n+    while (m2.find()) {\n+        String variable = m2.group(1);\n+        String listName = m2.group(2);\n+        String remainingCode = m2.group(3).trim();\n+        String replacementCode = \"\";\n+        if (!listName.startsWith(\"(\") && !listName.startsWith(\"[\")) {\n+            listName = \"(\" + listName + \")\";\n+        }\n+        if (remainingCode.startsWith(\":\")) {\n+            remainingCode = remainingCode.substring(1).trim();\n+        }\n+        if (remainingCode.startsWith(\"{\")) {\n+            int closingBracketIndex = findClosingBracketIndex(remainingCode);\n+            if (closingBracketIndex == -1) {\n+                return \"Error: Invalid syntax\";\n+            }\n+            String innerCode = remainingCode.substring(1, closingBracketIndex);\n+            replacementCode = \"{ for (Object \" + variable + \" : \" + listName\n+                    + \") { \" + innerCode + \" } \"\n+                    + remainingCode.substring(closingBracketIndex);\n+        } else {\n+            replacementCode = \"for (Object \" + variable + \" : \" + listName + \")\" + remainingCode;\n+        }\n+        code = code.replace(m2.group(0), replacementCode);\n+    }\n+\n+    return code;\n+}\n+\n+private static int findClosingBracketIndex(String code) {\n+    int count = 0;\n+    for (int i = 0; i < code.length(); i++) {\n+        if (code.charAt(i) == '{') {\n+            count++;\n+        } else if (code.charAt(i) == '}') {\n+            count--;\n+        }\n+        if (count == 0) {\n+            return i;\n+        }\n+    }\n+    return -1;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}