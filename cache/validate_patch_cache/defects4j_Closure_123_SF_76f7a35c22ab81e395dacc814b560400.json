{
    "patch": "public String fixCode(String code) {\n    String pattern = \"for\\\\((.*?);(.*?);(.*?)\\\\)\";\n    Pattern r = Pattern.compile(pattern);\n    Matcher m = r.matcher(code);\n\n    StringBuffer sb = new StringBuffer();\n\n    while (m.find()) {\n        String match = m.group(0);\n        String first = m.group(1);\n        String second = m.group(2);\n        String third = m.group(3);\n\n        if (second.contains(\"in\")) {\n            second = \"(\" + second + \")\";\n        }\n\n        String replacement = \"for(\" + first + \";\" + second + \";\" + third + \")\";\n        m.appendReplacement(sb, Matcher.quoteReplacement(replacement));\n    }\n    m.appendTail(sb);\n\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..4104d91a 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,30 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+    String pattern = \"for\\\\((.*?);(.*?);(.*?)\\\\)\";\n+    Pattern r = Pattern.compile(pattern);\n+    Matcher m = r.matcher(code);\n+\n+    StringBuffer sb = new StringBuffer();\n+\n+    while (m.find()) {\n+        String match = m.group(0);\n+        String first = m.group(1);\n+        String second = m.group(2);\n+        String third = m.group(3);\n+\n+        if (second.contains(\"in\")) {\n+            second = \"(\" + second + \")\";\n+        }\n+\n+        String replacement = \"for(\" + first + \";\" + second + \";\" + third + \")\";\n+        m.appendReplacement(sb, Matcher.quoteReplacement(replacement));\n+    }\n+    m.appendTail(sb);\n+\n+    return sb.toString();\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}