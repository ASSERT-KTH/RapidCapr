{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + 1) {\n        return 1 - regularizedGammaQ(a, x);\n    }\n    double n = 0.0;\n    double an = 1.0 / a;\n    double sum = an;\n    while (Math.abs(an / sum) > PRECISION && n < MAX_ITERATIONS) {\n        n += 1.0;\n        an *= x / (a + n);\n        sum += an;\n    }\n    if (n >= MAX_ITERATIONS) {\n        throw new MaxIterationsExceededException(MAX_ITERATIONS);\n    }\n    return Math.exp(-x + a * Math.log(x) - LogGamma.logGamma(a)) * sum;\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 1.0;\n    }\n    if (x < a + 1) {\n        return 1 - regularizedGammaP(a, x);\n    }\n    ContinuedFraction fraction = new ContinuedFraction() {\n\n        @Override\n        protected double getA(int n, double x) {\n            if (n == 0) {\n                return 1.0;\n            } else if (n == 1) {\n                return 1 - a;\n            } else {\n                return (2 * n - 1 - a) + x;\n            }\n        }\n\n        @Override\n        protected double getB(int n, double x) {\n            if (n == 0) {\n                return 0.0;\n            } else {\n                return n * (a - n);\n            }\n        }\n    };\n    double y = fraction.evaluate(x / (a + 1));\n    return Math.exp(-x + a * Math.log(x) - LogGamma.logGamma(a)) * y;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..ab867ca43 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,65 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + 1) {\n+        return 1 - regularizedGammaQ(a, x);\n+    }\n+    double n = 0.0;\n+    double an = 1.0 / a;\n+    double sum = an;\n+    while (Math.abs(an / sum) > PRECISION && n < MAX_ITERATIONS) {\n+        n += 1.0;\n+        an *= x / (a + n);\n+        sum += an;\n+    }\n+    if (n >= MAX_ITERATIONS) {\n+        throw new MaxIterationsExceededException(MAX_ITERATIONS);\n+    }\n+    return Math.exp(-x + a * Math.log(x) - LogGamma.logGamma(a)) * sum;\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+    if (x < a + 1) {\n+        return 1 - regularizedGammaP(a, x);\n+    }\n+    ContinuedFraction fraction = new ContinuedFraction() {\n+\n+        @Override\n+        protected double getA(int n, double x) {\n+            if (n == 0) {\n+                return 1.0;\n+            } else if (n == 1) {\n+                return 1 - a;\n+            } else {\n+                return (2 * n - 1 - a) + x;\n+            }\n+        }\n+\n+        @Override\n+        protected double getB(int n, double x) {\n+            if (n == 0) {\n+                return 0.0;\n+            } else {\n+                return n * (a - n);\n+            }\n+        }\n+    };\n+    double y = fraction.evaluate(x / (a + 1));\n+    return Math.exp(-x + a * Math.log(x) - LogGamma.logGamma(a)) * y;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}