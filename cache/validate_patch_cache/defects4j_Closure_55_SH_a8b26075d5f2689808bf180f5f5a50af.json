{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n    if(n==null || !n.isFunction()){\n       return false;\n    }\n    Node parent = n.getParent();\n    if (parent == null) {\n        return true;\n    }\n    int parentType = parent.getType();\n    if (parentType == Token.CALL || parentType == Token.NEW || parentType == Token.OPTCHAIN_CALL) {\n        return false;\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..329699ee 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,20 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+private static boolean isReduceableFunctionExpression(Node n) {\n+    if(n==null || !n.isFunction()){\n+       return false;\n+    }\n+    Node parent = n.getParent();\n+    if (parent == null) {\n+        return true;\n+    }\n+    int parentType = parent.getType();\n+    if (parentType == Token.CALL || parentType == Token.NEW || parentType == Token.OPTCHAIN_CALL) {\n+        return false;\n+    }\n+    return true;\n+}\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}