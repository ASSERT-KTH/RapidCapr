{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node maybeExpr = n.getFirstChild();\n    if (isSimpleExpression(maybeExpr)) {\n      Node parent = n.getParent();\n      if (parent != null) {\n        int parentType = parent.getType();\n        if (parentType == Token.EXPR_RESULT) {\n          Node gramp = parent.getParent();\n          if (gramp != null) {\n            int grandparentType = gramp.getType();\n            if (grandparentType == Token.BLOCK) {\n              Node greatGramp = gramp.getParent();\n              if (greatGramp != null) {\n                int greatGrandparentType = greatGramp.getType();\n                if (greatGrandparentType == Token.IF) {\n                  // If the block immediately precedes an if that covers it completely\n                  // it cannot be folded.\n                  if (isEntireIf(greatGramp, gramp)) {\n                    return false;\n                  }\n                  // The parent of a block containing a simple expression must be ASSIGN, VAR or EXPR_RESULT.\n                  return greatGramp.getParent().getType() == Token.EXPR_RESULT;\n                } else if (isAnnotatedExpression(gramp)) {\n                  // The parent of a block containing a simple expression should not be an annotated expression.\n                  return false;\n                }\n              }\n            } else if (parentType == Token.VAR || parentType == Token.ASSIGN) {\n              // The parent of a block containing a simple expression must be either\n              // another expression statement, a var declaration or an assignment.\n              return true;\n            }\n          }\n        }\n      }\n    }\n  }\n  return false;\n}\n\n/**\n * Returns whether a node is entirely enclosed in an if statement.\n *\n * @param parent an if statement node\n * @param child some descendant of parent\n * @return whether parent covers child with no enclosing nodes\n */\nprivate boolean isEntireIf(Node parent, Node child) {\n  while (child.getParent() != parent) {\n    child = child.getParent();\n    if (!NodeUtil.isStatementBlock(child)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Returns whether a node is an ANNOTATION, or a CALL that's the direct child of an ANNOTATION.\n * That is, an annotation that wrapped an expression in parentheses.\n */\nprivate boolean isAnnotatedExpression(Node n) {\n  if (n.isCall() && n.getParent() != null && n.getParent().isGetProp()) {\n    n = n.getParent();\n  }\n  if (n.isGetProp() && n.getParent() != null && n.getParent().isFunction()) {\n    n = n.getParent();\n  }\n  return n.isFunction() && NodeUtil.isFunctionDeclaration(n.getParent())\n      || n.getType() == Token.CALL && n.getParent().getType() == Token.ANNOTATION;\n}\n\nprivate boolean isSimpleExpression(Node n) {\n  int type = n.getType();\n  return type == Token.NAME || type == Token.STRING || type == Token.NUMBER\n      || type == Token.NULL || type == Token.FALSE || type == Token.TRUE;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..f687987e 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,84 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    Node maybeExpr = n.getFirstChild();\n+    if (isSimpleExpression(maybeExpr)) {\n+      Node parent = n.getParent();\n+      if (parent != null) {\n+        int parentType = parent.getType();\n+        if (parentType == Token.EXPR_RESULT) {\n+          Node gramp = parent.getParent();\n+          if (gramp != null) {\n+            int grandparentType = gramp.getType();\n+            if (grandparentType == Token.BLOCK) {\n+              Node greatGramp = gramp.getParent();\n+              if (greatGramp != null) {\n+                int greatGrandparentType = greatGramp.getType();\n+                if (greatGrandparentType == Token.IF) {\n+                  // If the block immediately precedes an if that covers it completely\n+                  // it cannot be folded.\n+                  if (isEntireIf(greatGramp, gramp)) {\n+                    return false;\n+                  }\n+                  // The parent of a block containing a simple expression must be ASSIGN, VAR or EXPR_RESULT.\n+                  return greatGramp.getParent().getType() == Token.EXPR_RESULT;\n+                } else if (isAnnotatedExpression(gramp)) {\n+                  // The parent of a block containing a simple expression should not be an annotated expression.\n+                  return false;\n+                }\n+              }\n+            } else if (parentType == Token.VAR || parentType == Token.ASSIGN) {\n+              // The parent of a block containing a simple expression must be either\n+              // another expression statement, a var declaration or an assignment.\n+              return true;\n+            }\n+          }\n+        }\n       }\n     }\n+  }\n+  return false;\n+}\n \n-    return false;\n+/**\n+ * Returns whether a node is entirely enclosed in an if statement.\n+ *\n+ * @param parent an if statement node\n+ * @param child some descendant of parent\n+ * @return whether parent covers child with no enclosing nodes\n+ */\n+private boolean isEntireIf(Node parent, Node child) {\n+  while (child.getParent() != parent) {\n+    child = child.getParent();\n+    if (!NodeUtil.isStatementBlock(child)) {\n+      return false;\n+    }\n   }\n+  return true;\n+}\n+\n+/**\n+ * Returns whether a node is an ANNOTATION, or a CALL that's the direct child of an ANNOTATION.\n+ * That is, an annotation that wrapped an expression in parentheses.\n+ */\n+private boolean isAnnotatedExpression(Node n) {\n+  if (n.isCall() && n.getParent() != null && n.getParent().isGetProp()) {\n+    n = n.getParent();\n+  }\n+  if (n.isGetProp() && n.getParent() != null && n.getParent().isFunction()) {\n+    n = n.getParent();\n+  }\n+  return n.isFunction() && NodeUtil.isFunctionDeclaration(n.getParent())\n+      || n.getType() == Token.CALL && n.getParent().getType() == Token.ANNOTATION;\n+}\n+\n+private boolean isSimpleExpression(Node n) {\n+  int type = n.getType();\n+  return type == Token.NAME || type == Token.STRING || type == Token.NUMBER\n+      || type == Token.NULL || type == Token.FALSE || type == Token.TRUE;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}