{
    "patch": "public abstract class TransformDispatcher extends TypeSafeDispatcher<Node> {\n\n  private final ErrorReporter errorReporter;\n  private final String sourceName;\n  private final Set<String> ALLOWED_DIRECTIVES;\n\n  public TransformDispatcher(ErrorReporter errorReporter, String sourceName, Set<String> directives) {\n    this.errorReporter = errorReporter;\n    this.sourceName = sourceName;\n    this.ALLOWED_DIRECTIVES = directives;\n  }\n\n  abstract Node processArrayLiteral(ArrayLiteral node);\n\n  abstract Node processAssignment(Assignment node);\n\n  abstract Node processBinary(BinaryExpression node);\n\n  abstract Node processBlock(Block node);\n\n  abstract Node processBreakStatement(BreakStatement node);\n\n  abstract Node processCall(Call node);\n\n  abstract Node processCaseClause(CaseClause node);\n\n  abstract Node processCatchClause(CatchClause node);\n\n  abstract Node processComment(Comment node);\n\n  abstract Node processConditionalExpression(ConditionalExpression node);\n\n  abstract Node processContinueStatement(ContinueStatement node);\n\n  abstract Node processDefaultCase(DefaultCase node);\n\n  abstract Node processDoLoop(DoLoop node);\n\n  abstract Node processElementGet(ElementGet node);\n\n  abstract Node processEmptyExpression(EmptyExpression node);\n\n  abstract Node processExpressionStatement(ExpressionStatement node);\n\n  abstract Node processForInLoop(ForInLoop node);\n\n  abstract Node processForLoop(ForLoop node);\n\n  abstract Node processFunctionCall(FunctionCall node);\n\n  abstract Node processFunctionNode(FunctionNode node);\n\n  abstract Node processIfStatement(IfStatement node);\n\n  abstract Node processInfixExpression(InfixExpression node);\n\n  abstract Node processKeywordLiteral(KeywordLiteral node);\n\n  abstract Node processName(Name node);\n\n  abstract Node processNewExpression(NewExpression node);\n\n  abstract Node processNumberLiteral(NumberLiteral node);\n\n  abstract Node processObjectLiteral(ObjectLiteral node);\n\n  abstract Node processParenthesizedExpression(ParenthesizedExpression node);\n\n  abstract Node processRegExpLiteral(RegExpLiteral node);\n\n  abstract Node processReturnStatement(ReturnStatement node);\n\n  abstract Node processStringLiteral(StringLiteral node);\n\n  abstract Node processSwitchStatement(SwitchStatement node);\n\n  abstract Node processThrowStatement(ThrowStatement node);\n\n  abstract Node processTryStatement(TryStatement node);\n\n  abstract Node processUnary(UnaryExpression node);\n\n  abstract Node processVariableDeclaration(VariableDeclaration node);\n\n  abstract Node processVariableInitializer(VariableInitializer node);\n\n  abstract Node processWhileLoop(WhileLoop node);\n\n  abstract Node processWithStatement(WithStatement node);\n\n  @Override\n  Node defaultValue(Node node) {\n    throw new IllegalStateException(\"No process node implementation for \" + node);\n  }\n\n  private void error(AstNode node, String message) {\n    errorReporter.error(message, sourceName, node.getLineno(), \"\", 0);\n  }\n\n  protected Node transform(AstNode node) {\n    return node == null ? null : node.visit(this);\n  }\n\n  private Node newNode(int type, AstNode... children) {\n    Node node = new Node(type);\n    for (AstNode child : children) {\n      node.addChildToBack(transform(child));\n    }\n    return node;\n  }\n\n  private int transformTokenType(TokenType type) {\n    return Token.getTokenFromType(type);\n  }\n\n  protected Node transformBlock(Block node) {\n    Node block = newNode(Token.BLOCK);\n    for (Node child : node) {\n      if (isDirective(child)) {\n        block.addChildToBack(transform(child));\n      } else {\n        // ignore static initializers and beyond, because they should be\n        // handled by the passes that introduce them.\n        break;\n      }\n    }\n    return block;\n  }\n\n  private boolean isDirective(Node n) {\n    if (n == null) return false;\n\n    int nType = n.getType();\n    return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n        n.getFirstChild().getType() == Token.STRING &&\n        ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n  }\n\n  protected Node createBinop(int type, AstNode left, AstNode right) {\n    Node result = new Node(type);\n    result.addChildToBack(transform(left));\n    result.addChildToBack(transform(right));\n    return result;\n  }\n\n  private Node createAssign(int type, AstNode left, AstNode right) {\n    Node result = new Node(type);\n    result.addChildToBack(transform(left));\n    result.addChildToBack(transform(right));\n    return result;\n  }\n\n  private Node rewriteFunction(FunctionNode fnNode) {\n    Name name = fnNode.getFunctionName();\n    Boolean isUnnamedFunction = false;\n    if (name == null) {\n      name = new Name();\n      name.setIdentifier(\"\");\n      isUnnamedFunction = true;\n    }\n    Node node = new Node(Token.FUNCTION);\n    Node newName = transform(name);\n    if (isUnnamedFunction) {\n      // Old Rhino tagged the empty name node with the line number of the\n      // declaration.\n      newName.setLineno(fnNode.getLineno());\n      // TODO(bowdidge) Mark line number of paren correctly.\n      // Same problem as below - the left paren might not be on the\n      // same line as the function keyword.\n      int lpColumn = fnNode.getAbsolutePosition() +\n          fnNode.getLp();\n      newName.setCharno(position2charno(lpColumn));\n    }\n\n    node.addChildToBack(newName);\n    Node lp = newNode(Token.LP);\n    // The left paren's complicated because it's not represented by an\n    // AstNode, so there's nothing that has the actual line number that it\n    // appeared on.  We know the paren has to appear on the same line as the\n    // function name (or else a semicolon will be inserted.)  If there's no\n    // function name, assume the paren was on the same line as the function.\n    // TODO(bowdidge): Mark line number of paren correctly.\n    Name fnName = fnNode.getFunctionName();\n    if (fnName != null) {\n      lp.setLineno(fnName.getLineno());\n    } else {\n      lp.setLineno(fnNode.getLineno());\n    }\n    int lparenCharno = fnNode.getLp() +\n        fnNode.getAbsolutePosition();\n    lp.setCharno(position2charno(lparenCharno));\n    for (AstNode param : fnNode.getParams()) {\n      lp.addChildToBack(transform(param));\n    }\n    node.addChildToBack(lp);\n\n    Node bodyNode = transform(fnNode.getBody());\n    parseDirectives(bodyNode);\n    node.addChildToBack(bodyNode);\n    Node member = new Node(Token.MEMBER_DEF,\n        newName instanceof Name ? newName.getString() : \"\",\n        node);\n    return member;\n  }\n\n  private int position2charno(int position) {\n    return position - sourceName.lastIndexOf('\\n', position) - 1;\n  }\n\n  private void parseDirectives(Node n) {\n    for (AstNode directive : Node.getAllDirectives(n)) {\n      String directiveStr = directive.getString().toLowerCase(Locale.ENGLISH);\n      if (!ALLOWED_DIRECTIVES.contains(directiveStr)) {\n        error(directive, \"Illegal 'use strict' directive in function with non-simple parameter list\");\n      }\n      Node.useDirective(new Directive(directiveStr));\n    }\n  }\n\n  @Override\n  Node processArrayLiteral(ArrayLiteral node) {\n    Node n = new Node(Token.ARRAYLIT);\n    for (AstNode child : node.getElements()) {\n      // Add EMPTY nodes to represent the elisions.\n      if (child == null) {\n        n.addChildToBack(new Node(Token.EMPTY));\n      } else {\n        n.addChildToBack(transform(child));\n      }\n    }\n    return n;\n  }\n\n  @Override\n  Node processAssignment(Assignment node) {\n    int tt = transformTokenType(node.getType());\n    if (node.getLeft() instanceof PropertyGet) {\n      // x.y = expr ->\n      //   IRFactory.createAssign(IRFactory.createGetProp(x, \"y\"), expr)\n      PropertyGet propGet = (PropertyGet) node.getLeft();\n      Node target = newNode(Token.GETPROP,\n          transform(propGet.getTarget()),\n          new StringLiteral(propGet.getProperty().getIdentifierName()));\n      return createAssign(tt, target, node.getRight());\n    } else {\n      return createAssign(tt, node.getLeft(), node.getRight());\n    }\n  }\n\n  @Override\n  Node processBinary(BinaryExpression node) {\n    int type = transformTokenType(node.getType());\n    return createBinop(type, node.getLeft(), node.getRight());\n  }\n\n  @Override\n  Node processCall(Call node) {\n    Node ref = transform(node.getTarget());\n    Node call = newNode(Token.CALL, ref);\n    for (AstNode child : node.getArguments()) {\n      call.addChildToBack(transform(child));\n    }\n\n    if (node.getType() == TokenType.NEW) {\n      call.putProp(Node.ISCTOR, Node.ISCTOR);\n    }\n\n    int leftParamPos = node.getAbsolutePosition() + node.getLp();\n    call.setLineno(node.getLineno());\n    call.setCharno(position2charno(leftParamPos));\n\n    return call;\n  }\n\n  @Override\n  Node processCaseClause(CaseClause node) {\n    if (node.getType() == Token.DEFAULT) {\n      return new Node(Token.DEFAULT_CASE, transform(node.getStatements()));\n    } else {\n      return new Node(Token.CASE, transform(node.getExpression()), transform(node.getStatements()));\n    }\n  }\n\n  @Override\n  Node processComment(Comment node) {\n    return new Node(Token.EMPTY);\n  }\n\n  @Override\n  Node processIfStatement(IfStatement node) {\n    AstNode elsePart = node.getElsePart();\n    Node result = newNode(Token.IF, transform(node.getCondition()),\n        transform(node.getThenPart()), elsePart == null ? null : transform(elsePart));\n    int elsePos = position2charno(node.getElseLineno(), node.getElseColumn());\n    int ifEnd = position2charno(node.getLineno(), node.getIfColumn() + 2);\n    result.setCharno(ifEnd);\n    if (elsePart == null) {\n      result.setLength(position2charno(node.getLineno(), node.getParenthesizedLineno() + 1) - ifEnd);\n    } else {\n      int elseEnd = position2charno(node.getElseLineno(), node.getElseColumn() + 4);\n      result.setLength(elseEnd - ifEnd);\n    }\n\n    return result;\n  }\n\n  @Override\n  Node processInfixExpression(InfixExpression node) {\n    if (node.isLogicalOperator()) {\n      return new Node(transformTokenType(node.getType()),\n          transform(node.getLeft()),\n          transform(node.getRight()));\n    } else {\n      return createBinop(transformTokenType(node.getType()), node.getLeft(), node.getRight());\n    }\n  }\n\n  @Override\n  Node processKeywordLiteral(KeywordLiteral node) {\n    int type = transformTokenType(node.getType());\n    if (node.getType() == TokenType.NULL) {\n      return new Node(Token.NULL);\n    } else if (node.getType() == TokenType.THIS) {\n      return new Node(Token.THIS);\n    } else {\n      return new Node(type);\n    }\n  }\n\n  @Override\n  Node processName(Name node) {\n    if (node.getIdentifier().equals(\"undefined\")) {\n      return new Node(Token.UNDEFINED);\n    } else {\n      return new Node(Token.NAME, node.getIdentifier());\n    }\n  }\n\n  @Override\n  Node processNewExpression(NewExpression node) {\n    Node newNode;\n\n    AstNode ctorNode = node.getTarget();\n    if (ctorNode instanceof FunctionNode) {\n      Node member = rewriteFunction((FunctionNode)ctorNode);\n      Node ref = new Node(Token.GETPROP, member, \"prototype\");\n      newNode = new Node(Token.NEW, ref);\n      if (!node.getArguments().isEmpty()) {\n        Node call = new Node(Token.CALL);\n        call.addChildToBack(newNode);\n        for (AstNode child : node.getArguments()) {\n          call.addChildToBack(transform(child));\n        }\n        newNode = call;\n      }\n      return newNode;\n    } else {\n      newNode = new Node(Token.NEW);\n      newNode.addChildToBack(transform(ctorNode));\n      for (AstNode child : node.getArguments()) {\n        newNode.addChildToBack(transform(child));\n      }\n      retur",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..2073b367 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -385,181 +385,369 @@ public class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+public abstract class TransformDispatcher extends TypeSafeDispatcher<Node> {\n \n-      int nType = n.getType();\n-      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n-          n.getFirstChild().getType() == Token.STRING &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n+  private final ErrorReporter errorReporter;\n+  private final String sourceName;\n+  private final Set<String> ALLOWED_DIRECTIVES;\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n+  public TransformDispatcher(ErrorReporter errorReporter, String sourceName, Set<String> directives) {\n+    this.errorReporter = errorReporter;\n+    this.sourceName = sourceName;\n+    this.ALLOWED_DIRECTIVES = directives;\n+  }\n+\n+  abstract Node processArrayLiteral(ArrayLiteral node);\n+\n+  abstract Node processAssignment(Assignment node);\n+\n+  abstract Node processBinary(BinaryExpression node);\n+\n+  abstract Node processBlock(Block node);\n+\n+  abstract Node processBreakStatement(BreakStatement node);\n+\n+  abstract Node processCall(Call node);\n+\n+  abstract Node processCaseClause(CaseClause node);\n+\n+  abstract Node processCatchClause(CatchClause node);\n+\n+  abstract Node processComment(Comment node);\n+\n+  abstract Node processConditionalExpression(ConditionalExpression node);\n+\n+  abstract Node processContinueStatement(ContinueStatement node);\n+\n+  abstract Node processDefaultCase(DefaultCase node);\n+\n+  abstract Node processDoLoop(DoLoop node);\n+\n+  abstract Node processElementGet(ElementGet node);\n+\n+  abstract Node processEmptyExpression(EmptyExpression node);\n+\n+  abstract Node processExpressionStatement(ExpressionStatement node);\n+\n+  abstract Node processForInLoop(ForInLoop node);\n+\n+  abstract Node processForLoop(ForLoop node);\n+\n+  abstract Node processFunctionCall(FunctionCall node);\n+\n+  abstract Node processFunctionNode(FunctionNode node);\n+\n+  abstract Node processIfStatement(IfStatement node);\n+\n+  abstract Node processInfixExpression(InfixExpression node);\n+\n+  abstract Node processKeywordLiteral(KeywordLiteral node);\n+\n+  abstract Node processName(Name node);\n+\n+  abstract Node processNewExpression(NewExpression node);\n+\n+  abstract Node processNumberLiteral(NumberLiteral node);\n+\n+  abstract Node processObjectLiteral(ObjectLiteral node);\n+\n+  abstract Node processParenthesizedExpression(ParenthesizedExpression node);\n+\n+  abstract Node processRegExpLiteral(RegExpLiteral node);\n+\n+  abstract Node processReturnStatement(ReturnStatement node);\n+\n+  abstract Node processStringLiteral(StringLiteral node);\n+\n+  abstract Node processSwitchStatement(SwitchStatement node);\n+\n+  abstract Node processThrowStatement(ThrowStatement node);\n+\n+  abstract Node processTryStatement(TryStatement node);\n+\n+  abstract Node processUnary(UnaryExpression node);\n+\n+  abstract Node processVariableDeclaration(VariableDeclaration node);\n+\n+  abstract Node processVariableInitializer(VariableInitializer node);\n+\n+  abstract Node processWhileLoop(WhileLoop node);\n+\n+  abstract Node processWithStatement(WithStatement node);\n+\n+  @Override\n+  Node defaultValue(Node node) {\n+    throw new IllegalStateException(\"No process node implementation for \" + node);\n+  }\n+\n+  private void error(AstNode node, String message) {\n+    errorReporter.error(message, sourceName, node.getLineno(), \"\", 0);\n+  }\n+\n+  protected Node transform(AstNode node) {\n+    return node == null ? null : node.visit(this);\n+  }\n+\n+  private Node newNode(int type, AstNode... children) {\n+    Node node = new Node(type);\n+    for (AstNode child : children) {\n+      node.addChildToBack(transform(child));\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n+  private int transformTokenType(TokenType type) {\n+    return Token.getTokenFromType(type);\n+  }\n+\n+  protected Node transformBlock(Block node) {\n+    Node block = newNode(Token.BLOCK);\n+    for (Node child : node) {\n+      if (isDirective(child)) {\n+        block.addChildToBack(transform(child));\n+      } else {\n+        // ignore static initializers and beyond, because they should be\n+        // handled by the passes that introduce them.\n+        break;\n       }\n-      return node;\n     }\n+    return block;\n+  }\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n+  private boolean isDirective(Node n) {\n+    if (n == null) return false;\n+\n+    int nType = n.getType();\n+    return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n+        n.getFirstChild().getType() == Token.STRING &&\n+        ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+  }\n+\n+  protected Node createBinop(int type, AstNode left, AstNode right) {\n+    Node result = new Node(type);\n+    result.addChildToBack(transform(left));\n+    result.addChildToBack(transform(right));\n+    return result;\n+  }\n+\n+  private Node createAssign(int type, AstNode left, AstNode right) {\n+    Node result = new Node(type);\n+    result.addChildToBack(transform(left));\n+    result.addChildToBack(transform(right));\n+    return result;\n+  }\n+\n+  private Node rewriteFunction(FunctionNode fnNode) {\n+    Name name = fnNode.getFunctionName();\n+    Boolean isUnnamedFunction = false;\n+    if (name == null) {\n+      name = new Name();\n+      name.setIdentifier(\"\");\n+      isUnnamedFunction = true;\n+    }\n+    Node node = new Node(Token.FUNCTION);\n+    Node newName = transform(name);\n+    if (isUnnamedFunction) {\n+      // Old Rhino tagged the empty name node with the line number of the\n+      // declaration.\n+      newName.setLineno(fnNode.getLineno());\n+      // TODO(bowdidge) Mark line number of paren correctly.\n+      // Same problem as below - the left paren might not be on the\n+      // same line as the function keyword.\n+      int lpColumn = fnNode.getAbsolutePosition() +\n+          fnNode.getLp();\n+      newName.setCharno(position2charno(lpColumn));\n     }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+    node.addChildToBack(newName);\n+    Node lp = newNode(Token.LP);\n+    // The left paren's complicated because it's not represented by an\n+    // AstNode, so there's nothing that has the actual line number that it\n+    // appeared on.  We know the paren has to appear on the same line as the\n+    // function name (or else a semicolon will be inserted.)  If there's no\n+    // function name, assume the paren was on the same line as the function.\n+    // TODO(bowdidge): Mark line number of paren correctly.\n+    Name fnName = fnNode.getFunctionName();\n+    if (fnName != null) {\n+      lp.setLineno(fnName.getLineno());\n+    } else {\n+      lp.setLineno(fnNode.getLineno());\n     }\n+    int lparenCharno = fnNode.getLp() +\n+        fnNode.getAbsolutePosition();\n+    lp.setCharno(position2charno(lparenCharno));\n+    for (AstNode param : fnNode.getParams()) {\n+      lp.addChildToBack(transform(param));\n+    }\n+    node.addChildToBack(lp);\n+\n+    Node bodyNode = transform(fnNode.getBody());\n+    parseDirectives(bodyNode);\n+    node.addChildToBack(bodyNode);\n+    Node member = new Node(Token.MEMBER_DEF,\n+        newName instanceof Name ? newName.getString() : \"\",\n+        node);\n+    return member;\n+  }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n+  private int position2charno(int position) {\n+    return position - sourceName.lastIndexOf('\\n', position) - 1;\n+  }\n+\n+  private void parseDirectives(Node n) {\n+    for (AstNode directive : Node.getAllDirectives(n)) {\n+      String directiveStr = directive.getString().toLowerCase(Locale.ENGLISH);\n+      if (!ALLOWED_DIRECTIVES.contains(directiveStr)) {\n+        error(directive, \"Illegal 'use strict' directive in function with non-simple parameter list\");\n       }\n-      return node;\n+      Node.useDirective(new Directive(directiveStr));\n     }\n+  }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+  @Override\n+  Node processArrayLiteral(ArrayLiteral node) {\n+    Node n = new Node(Token.ARRAYLIT);\n+    for (AstNode child : node.getElements()) {\n+      // Add EMPTY nodes to represent the elisions.\n+      if (child == null) {\n+        n.addChildToBack(new Node(Token.EMPTY));\n+      } else {\n+        n.addChildToBack(transform(child));\n+      }\n     }\n+    return n;\n+  }\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+  @Override\n+  Node processAssignment(Assignment node) {\n+    int tt = transformTokenType(node.getType());\n+    if (node.getLeft() instanceof PropertyGet) {\n+      // x.y = expr ->\n+      //   IRFactory.createAssign(IRFactory.createGetProp(x, \"y\"), expr)\n+      PropertyGet propGet = (PropertyGet) node.getLeft();\n+      Node target = newNode(Token.GETPROP,\n+          transform(propGet.getTarget()),\n+          new StringLiteral(propGet.getProperty().getIdentifierName()));\n+      return createAssign(tt, target, node.getRight());\n+    } else {\n+      return createAssign(tt, node.getLeft(), node.getRight());\n     }\n+  }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n+  @Override\n+  Node processBinary(BinaryExpression node) {\n+    int type = transformTokenType(node.getType());\n+    return createBinop(type, node.getLeft(), node.getRight());\n+  }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+  @Override\n+  Node processCall(Call node) {\n+    Node ref = transform(node.getTarget());\n+    Node call = newNode(Token.CALL, ref);\n+    for (AstNode child : node.getArguments()) {\n+      call.addChildToBack(transform(child));\n     }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+    if (node.getType() == TokenType.NEW) {\n+      call.putProp(Node.ISCTOR, Node.ISCTOR);\n     }\n \n-    @Override\n-    Node processForLoop(ForLoop loopNode) {\n-      Node node = newNode(\n-          Token.FOR,\n-          transform(loopNode.getInitializer()),\n-          transform(loopNode.getCondition()),\n-          transform(loopNode.getIncrement()));\n-      node.addChildToBack(transformBlock(loopNode.getBody()));\n-      return node;\n+    int leftParamPos = node.getAbsolutePosition() + node.getLp();\n+    call.setLineno(node.getLineno());\n+    call.setCharno(position2charno(leftParamPos));\n+\n+    return call;\n+  }\n+\n+  @Override\n+  Node processCaseClause(CaseClause node) {\n+    if (node.getType() == Token.DEFAULT) {\n+      return new Node(Token.DEFAULT_CASE, transform(node.getStatements()));\n+    } else {\n+      return new Node(Token.CASE, transform(node.getExpression()), transform(node.getStatements()));\n     }\n+  }\n \n-    @Override\n-    Node processFunctionCall(FunctionCall callNode) {\n-      Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n-      for (AstNode child : callNode.getArguments()) {\n-        node.addChildToBack(transform(child));\n-      }\n+  @Override\n+  Node processComment(Comment node) {\n+    return new Node(Token.EMPTY);\n+  }\n \n-      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n-      node.setLineno(callNode.getLineno());\n-      node.setCharno(position2charno(leftParamPos));\n-      return node;\n+  @Override\n+  Node processIfStatement(IfStatement node) {\n+    AstNode elsePart = node.getElsePart();\n+    Node result = newNode(Token.IF, transform(node.getCondition()),\n+        transform(node.getThenPart()), elsePart == null ? null : transform(elsePart));\n+    int elsePos = position2charno(node.getElseLineno(), node.getElseColumn());\n+    int ifEnd = position2charno(node.getLineno(), node.getIfColumn() + 2);\n+    result.setCharno(ifEnd);\n+    if (elsePart == null) {\n+      result.setLength(position2charno(node.getLineno(), node.getParenthesizedLineno() + 1) - ifEnd);\n+    } else {\n+      int elseEnd = position2charno(node.getElseLineno(), node.getElseColumn() + 4);\n+      result.setLength(elseEnd - ifEnd);\n     }\n \n-    @Override\n-    Node processFunctionNode(FunctionNode functionNode) {\n-      Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n-      if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n-        isUnnamedFunction = true;\n-      }\n-      Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n-      if (isUnnamedFunction) {\n-        // Old Rhino tagged the empty name node with the line number of the\n-        // declaration.\n-        newName.setLineno(functionNode.getLineno());\n-        // TODO(bowdidge) Mark line number of paren correctly.\n-        // Same problem as below - the left paren might not be on the\n-        // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n-        newName.setCharno(position2charno(lpColumn));\n-      }\n+    return result;\n+  }\n \n-      node.addChildToBack(newName);\n-      Node lp = newNode(Token.LP);\n-      // The left paren's complicated because it's not represented by an\n-      // AstNode, so there's nothing that has the actual line number that it\n-      // appeared on.  We know the paren has to appear on the same line as the\n-      // function name (or else a semicolon will be inserted.)  If there's no\n-      // function name, assume the paren was on the same line as the function.\n-      // TODO(bowdidge): Mark line number of paren correctly.\n-      Name fnName = functionNode.getFunctionName();\n-      if (fnName != null) {\n-        lp.setLineno(fnName.getLineno());\n-      } else {\n-        lp.setLineno(functionNode.getLineno());\n-      }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n+  @Override\n+  Node processInfixExpression(InfixExpression node) {\n+    if (node.isLogicalOperator()) {\n+      return new Node(transformTokenType(node.getType()),\n+          transform(node.getLeft()),\n+          transform(node.getRight()));\n+    } else {\n+      return createBinop(transformTokenType(node.getType()), node.getLeft(), node.getRight());\n+    }\n+  }\n \n-      lp.setCharno(position2charno(lparenCharno));\n-      for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n-      }\n-      node.addChildToBack(lp);\n+  @Override\n+  Node processKeywordLiteral(KeywordLiteral node) {\n+    int type = transformTokenType(node.getType());\n+    if (node.getType() == TokenType.NULL) {\n+      return new Node(Token.NULL);\n+    } else if (node.getType() == TokenType.THIS) {\n+      return new Node(Token.THIS);\n+    } else {\n+      return new Node(type);\n+    }\n+  }\n \n-      Node bodyNode = transform(functionNode.getBody());\n-      parseDirectives(bodyNode);\n-      node.addChildToBack(bodyNode);\n-     return node;\n+  @Override\n+  Node processName(Name node) {\n+    if (node.getIdentifier().equals(\"undefined\")) {\n+      return new Node(Token.UNDEFINED);\n+    } else {\n+      return new Node(Token.NAME, node.getIdentifier());\n     }\n+  }\n+\n+  @Override\n+  Node processNewExpression(NewExpression node) {\n+    Node newNode;\n+\n+    AstNode ctorNode = node.getTarget();\n+    if (ctorNode instanceof FunctionNode) {\n+      Node member = rewriteFunction((FunctionNode)ctorNode);\n+      Node ref = new Node(Token.GETPROP, member, \"prototype\");\n+      newNode = new Node(Token.NEW, ref);\n+      if (!node.getArguments().isEmpty()) {\n+        Node call = new Node(Token.CALL);\n+        call.addChildToBack(newNode);\n+        for (AstNode child : node.getArguments()) {\n+          call.addChildToBack(transform(child));\n+        }\n+        newNode = call;\n+      }\n+      return newNode;\n+    } else {\n+      newNode = new Node(Token.NEW);\n+      newNode.addChildToBack(transform(ctorNode));\n+      for (AstNode child : node.getArguments()) {\n+        newNode.addChildToBack(transform(child));\n+      }\n+      retur\n \n     @Override\n     Node processIfStatement(IfStatement statementNode) {",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}