{
    "patch": "    boolean hasDefaults = NodeUtil.functionHasDefaultParameters(function);\n    Node param = argList.getFirstChild();\n    while (param != null) {\n      Node nextParam = param.getNext();\n      int type = param.getToken();\n      if (type == Token.DEFAULT_VALUE) {\n        param = nextParam;\n        continue;\n      }\n      String argName = param.getString();\n      \n      if (!referenced.contains(fnScope.getVar(argName))) {\n        if (modifyCallers) {\n          if (!hasDefaults) {\n            // In this case `fn` and `caller` scopes will differ.\n            // Therefore, for performance reasons, just remove the parameters.\n            argList.removeChild(param);\n            compiler.reportCodeChange();\n          } else {\n            param.replaceWith(IR.defaultValue(param.detach()));\n            compiler.reportCodeChange();\n          }\n        } else {\n          boolean canModify = function\n              .getBooleanProp(Node.FUNCTION_IS_ARGUMENT_USED);\n          boolean isRestParam = type == Token.REST || type == Token.DEFAULT_VALUE;\n          \n          if (!canModify || (isRestParam && !canRemoveRestParams)) {\n            break;\n          }\n          \n          if (!hasDefaults && !isRestParam & param.getNext() == null) {\n            // last positional arg\n            param.removeFirstChild();\n            NodeUtil.tryRemoveUnusedParameter(compiler, param);\n          } else {\n            NodeUtil.tryRemoveUnusedParameter(compiler, param);\n          }\n        }\n      }\n      param = nextParam;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..9adc289d 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,47 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    boolean hasDefaults = NodeUtil.functionHasDefaultParameters(function);\n+    Node param = argList.getFirstChild();\n+    while (param != null) {\n+      Node nextParam = param.getNext();\n+      int type = param.getToken();\n+      if (type == Token.DEFAULT_VALUE) {\n+        param = nextParam;\n+        continue;\n+      }\n+      String argName = param.getString();\n+      \n+      if (!referenced.contains(fnScope.getVar(argName))) {\n+        if (modifyCallers) {\n+          if (!hasDefaults) {\n+            // In this case `fn` and `caller` scopes will differ.\n+            // Therefore, for performance reasons, just remove the parameters.\n+            argList.removeChild(param);\n+            compiler.reportCodeChange();\n+          } else {\n+            param.replaceWith(IR.defaultValue(param.detach()));\n+            compiler.reportCodeChange();\n+          }\n+        } else {\n+          boolean canModify = function\n+              .getBooleanProp(Node.FUNCTION_IS_ARGUMENT_USED);\n+          boolean isRestParam = type == Token.REST || type == Token.DEFAULT_VALUE;\n+          \n+          if (!canModify || (isRestParam && !canRemoveRestParams)) {\n+            break;\n+          }\n+          \n+          if (!hasDefaults && !isRestParam & param.getNext() == null) {\n+            // last positional arg\n+            param.removeFirstChild();\n+            NodeUtil.tryRemoveUnusedParameter(compiler, param);\n+          } else {\n+            NodeUtil.tryRemoveUnusedParameter(compiler, param);\n+          }\n+        }\n+      }\n+      param = nextParam;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}