{
    "patch": "private static final int[][] FIELDS = {\n        {Calendar.MILLISECOND},\n        {Calendar.SECOND},\n        {Calendar.MINUTE},\n        {Calendar.HOUR_OF_DAY, Calendar.HOUR},\n        {Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM /* Calendar.DAY_OF_YEAR, Calendar.DAY_OF_WEEK, */},\n        {Calendar.MONTH}\n};\n\n/**\n * Truncate a calendar field. For example, if you have a <code>Calendar</code>\n * object with year = 2005, month = 8, dayOfMonth = 29, hourOfDay = 14,\n * minute = 30 and second = 45, and you truncate it on the field\n * <code>Calendar.HOUR_OF_DAY</code> (thus leaving the field year, month,\n * dayOfMonth, and minute alone), it will be reset to year = 2005, month = 8,\n * dayOfMonth = 29, hourOfDay = 0, minute = 0 and second = 0.\n *\n * @param val    the calendar to truncate, not null\n * @param field  the field to truncate, see the calendar class, not null\n * @param round  whether to round up if the time is in the middle of a unit\n * @throws IllegalArgumentException if the date is null or the field is not supported\n */\nprivate static void truncate(Calendar val, int field, boolean round) {\n    if (val == null) {\n        throw new IllegalArgumentException(\"The date must not be null\");\n    }\n\n    int i = 0;\n    int max = FIELDS.length;\n\n    // Find the lowest field that is above the given field\n    while (i < max && FIELDS[i][0] < field) {\n        i++;\n    }\n\n    // We now have the first field that's either exactly the right one\n    // or higher than it (i==fields.length or fields[i][0] >= field)\n    if (i == max) {\n        // The field is higher than all the fields contained in this object.\n        // Therefore, all fields can be cleared.\n        val.setTimeInMillis(0);\n        return;\n    }\n\n    int[] resetFields = FIELDS[i];\n    // We need to take care of AM and PM specially since they both have the\n    // same value.\n    boolean roundUp = false;\n    int offset = 0;\n    boolean offsetSet = false;\n    while (true) {\n        // Clear the current field\n        int min = val.getActualMinimum(resetFields[0]);\n        int max = val.getActualMaximum(resetFields[0]);\n        if (round && (resetFields[0] == Calendar.AM_PM || resetFields[0] == Calendar.HOUR_OF_DAY)) {\n            // Adjust the offset if we are doing rounding.\n            if (resetFields[0] == Calendar.AM_PM) {\n                offset = val.get(Calendar.HOUR_OF_DAY);\n                if (offset >= 12) {\n                    offset -= 12;\n                }\n            } else {\n                offset = val.get(resetFields[0]) - min;\n                if (offset >= (max / 2)) {\n                    offset = max - resetFields.length - offset;\n                }\n            }\n            roundUp = offset > 0;\n        }\n        val.set(resetFields[0], roundUp ? max : min);\n\n        // Stop if we're done the highest field\n        if (resetFields.length == 1) {\n            break;\n        }\n\n        // We need to roll over to the next field.\n        i++;\n        resetFields = FIELDS[i];\n        if (offsetSet) {\n            offset = val.get(resetFields[0]) - val.getActualMinimum(resetFields[0]);\n            roundUp = offset > (val.getActualMaximum(resetFields[0]) - val.getActualMinimum(resetFields[0])) / 2;\n        }\n        // Leave if we can't roll over anymore.\n        if (roundUp && (resetFields[0] == Calendar.MONTH || resetFields[0] == Calendar.DATE || resetFields[0] == Calendar.HOUR_OF_DAY)) {\n            // Cannot round up the date/month anymore since the maximum value\n            // would be rolled over. Quit.\n            break;\n        }\n    }\n\n    // Sometimes, the milliseconds field is not completely cleared\n    // We clear it manually here\n    val.set(Calendar.MILLISECOND, 0);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/time/DateUtils.java b/src/java/org/apache/commons/lang/time/DateUtils.java\nindex 531e73fc..3783e0c4 100644\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n@@ -616,102 +616,102 @@ public class DateUtils {\n      * @param round  true to round, false to truncate\n      * @throws ArithmeticException if the year is over 280 million\n      */\n-    private static void modify(Calendar val, int field, boolean round) {\n-        if (val.get(Calendar.YEAR) > 280000000) {\n-            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n-        }\n-        \n+private static final int[][] FIELDS = {\n+        {Calendar.MILLISECOND},\n+        {Calendar.SECOND},\n+        {Calendar.MINUTE},\n+        {Calendar.HOUR_OF_DAY, Calendar.HOUR},\n+        {Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM /* Calendar.DAY_OF_YEAR, Calendar.DAY_OF_WEEK, */},\n+        {Calendar.MONTH}\n+};\n+\n+/**\n+ * Truncate a calendar field. For example, if you have a <code>Calendar</code>\n+ * object with year = 2005, month = 8, dayOfMonth = 29, hourOfDay = 14,\n+ * minute = 30 and second = 45, and you truncate it on the field\n+ * <code>Calendar.HOUR_OF_DAY</code> (thus leaving the field year, month,\n+ * dayOfMonth, and minute alone), it will be reset to year = 2005, month = 8,\n+ * dayOfMonth = 29, hourOfDay = 0, minute = 0 and second = 0.\n+ *\n+ * @param val    the calendar to truncate, not null\n+ * @param field  the field to truncate, see the calendar class, not null\n+ * @param round  whether to round up if the time is in the middle of a unit\n+ * @throws IllegalArgumentException if the date is null or the field is not supported\n+ */\n+private static void truncate(Calendar val, int field, boolean round) {\n+    if (val == null) {\n+        throw new IllegalArgumentException(\"The date must not be null\");\n+    }\n+\n+    int i = 0;\n+    int max = FIELDS.length;\n+\n+    // Find the lowest field that is above the given field\n+    while (i < max && FIELDS[i][0] < field) {\n+        i++;\n+    }\n+\n+    // We now have the first field that's either exactly the right one\n+    // or higher than it (i==fields.length or fields[i][0] >= field)\n+    if (i == max) {\n+        // The field is higher than all the fields contained in this object.\n+        // Therefore, all fields can be cleared.\n+        val.setTimeInMillis(0);\n+        return;\n+    }\n \n-        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n-        // see http://issues.apache.org/jira/browse/LANG-59\n-        //\n-        // Manually truncate milliseconds, seconds and minutes, rather than using\n-        // Calendar methods.\n-\n-\n-        // truncate milliseconds\n-\n-        // truncate seconds\n-\n-        // truncate minutes\n-\n-        // reset time\n-        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n-\n-        boolean roundUp = false;\n-        for (int i = 0; i < fields.length; i++) {\n-            for (int j = 0; j < fields[i].length; j++) {\n-                if (fields[i][j] == field) {\n-                    //This is our field... we stop looping\n-                    if (round && roundUp) {\n-                        if (field == DateUtils.SEMI_MONTH) {\n-                            //This is a special case that's hard to generalize\n-                            //If the date is 1, we round up to 16, otherwise\n-                            //  we subtract 15 days and add 1 month\n-                            if (val.get(Calendar.DATE) == 1) {\n-                                val.add(Calendar.DATE, 15);\n-                            } else {\n-                                val.add(Calendar.DATE, -15);\n-                                val.add(Calendar.MONTH, 1);\n-                            }\n-                        } else {\n-                            //We need at add one to this field since the\n-                            //  last number causes us to round up\n-                            val.add(fields[i][0], 1);\n-                        }\n-                    }\n-                    return;\n+    int[] resetFields = FIELDS[i];\n+    // We need to take care of AM and PM specially since they both have the\n+    // same value.\n+    boolean roundUp = false;\n+    int offset = 0;\n+    boolean offsetSet = false;\n+    while (true) {\n+        // Clear the current field\n+        int min = val.getActualMinimum(resetFields[0]);\n+        int max = val.getActualMaximum(resetFields[0]);\n+        if (round && (resetFields[0] == Calendar.AM_PM || resetFields[0] == Calendar.HOUR_OF_DAY)) {\n+            // Adjust the offset if we are doing rounding.\n+            if (resetFields[0] == Calendar.AM_PM) {\n+                offset = val.get(Calendar.HOUR_OF_DAY);\n+                if (offset >= 12) {\n+                    offset -= 12;\n+                }\n+            } else {\n+                offset = val.get(resetFields[0]) - min;\n+                if (offset >= (max / 2)) {\n+                    offset = max - resetFields.length - offset;\n                 }\n             }\n-            //We have various fields that are not easy roundings\n-            int offset = 0;\n-            boolean offsetSet = false;\n-            //These are special types of fields that require different rounding rules\n-            switch (field) {\n-                case DateUtils.SEMI_MONTH:\n-                    if (fields[i][0] == Calendar.DATE) {\n-                        //If we're going to drop the DATE field's value,\n-                        //  we want to do this our own way.\n-                        //We need to subtrace 1 since the date has a minimum of 1\n-                        offset = val.get(Calendar.DATE) - 1;\n-                        //If we're above 15 days adjustment, that means we're in the\n-                        //  bottom half of the month and should stay accordingly.\n-                        if (offset >= 15) {\n-                            offset -= 15;\n-                        }\n-                        //Record whether we're in the top or bottom half of that range\n-                        roundUp = offset > 7;\n-                        offsetSet = true;\n-                    }\n-                    break;\n-                case Calendar.AM_PM:\n-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n-                        //If we're going to drop the HOUR field's value,\n-                        //  we want to do this our own way.\n-                        offset = val.get(Calendar.HOUR_OF_DAY);\n-                        if (offset >= 12) {\n-                            offset -= 12;\n-                        }\n-                        roundUp = offset > 6;\n-                        offsetSet = true;\n-                    }\n-                    break;\n-            }\n-            if (!offsetSet) {\n-                int min = val.getActualMinimum(fields[i][0]);\n-                int max = val.getActualMaximum(fields[i][0]);\n-                //Calculate the offset from the minimum allowed value\n-                offset = val.get(fields[i][0]) - min;\n-                //Set roundUp if this is more than half way between the minimum and maximum\n-                roundUp = offset > ((max - min) / 2);\n-            }\n-            //We need to remove this field\n-                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n+            roundUp = offset > 0;\n         }\n-        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n+        val.set(resetFields[0], roundUp ? max : min);\n \n+        // Stop if we're done the highest field\n+        if (resetFields.length == 1) {\n+            break;\n+        }\n+\n+        // We need to roll over to the next field.\n+        i++;\n+        resetFields = FIELDS[i];\n+        if (offsetSet) {\n+            offset = val.get(resetFields[0]) - val.getActualMinimum(resetFields[0]);\n+            roundUp = offset > (val.getActualMaximum(resetFields[0]) - val.getActualMinimum(resetFields[0])) / 2;\n+        }\n+        // Leave if we can't roll over anymore.\n+        if (roundUp && (resetFields[0] == Calendar.MONTH || resetFields[0] == Calendar.DATE || resetFields[0] == Calendar.HOUR_OF_DAY)) {\n+            // Cannot round up the date/month anymore since the maximum value\n+            // would be rolled over. Quit.\n+            break;\n+        }\n     }\n \n+    // Sometimes, the milliseconds field is not completely cleared\n+    // We clear it manually here\n+    val.set(Calendar.MILLISECOND, 0);\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>This constructs an <code>Iterator</code> over each day in a date",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}