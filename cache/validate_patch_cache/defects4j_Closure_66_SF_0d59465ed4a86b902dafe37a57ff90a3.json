{
    "patch": "public static double getTypedPercent(String jsonObjectStr) {\n    double correct = 0;\n    double total = 0;\n\n    try {\n        JSONObject obj = new JSONObject(jsonObjectStr);\n\n        JSONArray questions = obj.getJSONArray(\"questions\");\n\n        for (int i = 0; i < questions.length(); i++) {\n            JSONObject question = questions.getJSONObject(i);\n            String actual = question.getString(\"actual\");\n            String expected = question.getString(\"expected\");\n\n            if (actual.equals(expected)) {\n                correct++;\n            }\n\n            total++;\n        }\n    } catch (JSONException e) {\n        e.printStackTrace();\n    }\n\n    if (total == 0) {\n        return 0;\n    }\n\n    return (correct / total) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..0574b0c2 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,36 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonObjectStr) {\n+    double correct = 0;\n+    double total = 0;\n+\n+    try {\n+        JSONObject obj = new JSONObject(jsonObjectStr);\n+\n+        JSONArray questions = obj.getJSONArray(\"questions\");\n+\n+        for (int i = 0; i < questions.length(); i++) {\n+            JSONObject question = questions.getJSONObject(i);\n+            String actual = question.getString(\"actual\");\n+            String expected = question.getString(\"expected\");\n+\n+            if (actual.equals(expected)) {\n+                correct++;\n+            }\n+\n+            total++;\n+        }\n+    } catch (JSONException e) {\n+        e.printStackTrace();\n+    }\n+\n+    if (total == 0) {\n+        return 0;\n+    }\n+\n+    return (correct / total) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}