{
    "patch": "if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n    // see issue 184\n    // mocks should follow the natural ordering of the objects they represent\n    Object[] arguments = invocation.getArguments();\n    Object other = arguments[0];\n    if (invocation.getMock().getClass().isInstance(other)) {\n        // if the other object is of the same type than the mock, then we return the result of comparing hashCode.\n        return Integer.compare(invocation.getMock().hashCode(), other.hashCode());\n    } else {\n        // if the other object is not of the same type, then we return a different value depending on whether the mock hashCode is greater or less than the other object hashCode.\n        int diff = Integer.compare(invocation.getMock().hashCode(), other.hashCode());\n        if (diff == 0) {\n            // this can only happen if the hashCodes are also the same, meaning the objects are equal\n            return 0;\n        } else if (diff > 0) {\n            return 1;\n        } else {\n            return -1;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 4c00f50b1..56a72fb42 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -73,7 +73,27 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             //see issue 184.\n             //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).\n             //Only for compareTo() method by the Comparable interface\n+if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n+    // see issue 184\n+    // mocks should follow the natural ordering of the objects they represent\n+    Object[] arguments = invocation.getArguments();\n+    Object other = arguments[0];\n+    if (invocation.getMock().getClass().isInstance(other)) {\n+        // if the other object is of the same type than the mock, then we return the result of comparing hashCode.\n+        return Integer.compare(invocation.getMock().hashCode(), other.hashCode());\n+    } else {\n+        // if the other object is not of the same type, then we return a different value depending on whether the mock hashCode is greater or less than the other object hashCode.\n+        int diff = Integer.compare(invocation.getMock().hashCode(), other.hashCode());\n+        if (diff == 0) {\n+            // this can only happen if the hashCodes are also the same, meaning the objects are equal\n+            return 0;\n+        } else if (diff > 0) {\n             return 1;\n+        } else {\n+            return -1;\n+        }\n+    }\n+}\n         }\n         \n         Class<?> returnType = invocation.getMethod().getReturnType();\n@@ -120,4 +140,4 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n         return null;\n     }\n \n-}\n\\ No newline at end of file\n+}",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}