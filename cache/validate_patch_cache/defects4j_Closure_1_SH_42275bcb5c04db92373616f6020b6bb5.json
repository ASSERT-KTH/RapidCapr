{
    "patch": "    // Strip unreferenced args off the end of the function declaration.\n    Node lastArg = argList.getLastChild();\n    while (lastArg != null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n      argList.removeChild(lastArg);\n      lastArg = argList.getLastChild();\n      compiler.reportCodeChange();\n    }\n\n    if (modifyCallers) {\n      // If we're modifying callers of this function, we need to do a bit more work.\n      // For each call site, we need to remove any unused arguments, then replace any\n      // that aren't passed constants with new symbols.\n      callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..5cd66129 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,19 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node lastArg = argList.getLastChild();\n+    while (lastArg != null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n+      argList.removeChild(lastArg);\n+      lastArg = argList.getLastChild();\n+      compiler.reportCodeChange();\n+    }\n+\n+    if (modifyCallers) {\n+      // If we're modifying callers of this function, we need to do a bit more work.\n+      // For each call site, we need to remove any unused arguments, then replace any\n+      // that aren't passed constants with new symbols.\n+      callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}