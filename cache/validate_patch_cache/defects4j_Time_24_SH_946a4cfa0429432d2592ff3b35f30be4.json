{
    "patch": "try {\n    int successfulFields = 0;\n    for (int i = 0; i < count; i++) {\n        try {\n            millis = savedFields[i].set(millis, resetFields);\n            successfulFields = i + 1;\n        } catch (IllegalArgumentException e) {\n            if (text != null) {\n                e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n            }\n            throw e;\n        }\n    }\n    if (resetFields && successfulFields != count) {\n        if (count == 1) {\n            throw new IllegalArgumentException(\"Failed to parse field\");\n        } else {\n            for (int j = 1; j < count; j++) {\n                if (!savedFields[j].restore(millis)) {\n                    for (int k = 0; k < j; k++) {\n                        savedFields[k].restore(millis);\n                    }\n                    throw new IllegalArgumentException(\"Failed to parse fields\");\n                }\n            }\n        }\n    }\n} catch (IllegalArgumentException e) {\n    if (text != null) {\n        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..766beb33 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,39 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    int successfulFields = 0;\n+    for (int i = 0; i < count; i++) {\n+        try {\n+            millis = savedFields[i].set(millis, resetFields);\n+            successfulFields = i + 1;\n+        } catch (IllegalArgumentException e) {\n+            if (text != null) {\n+                e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n+            }\n+            throw e;\n+        }\n+    }\n+    if (resetFields && successfulFields != count) {\n+        if (count == 1) {\n+            throw new IllegalArgumentException(\"Failed to parse field\");\n+        } else {\n+            for (int j = 1; j < count; j++) {\n+                if (!savedFields[j].restore(millis)) {\n+                    for (int k = 0; k < j; k++) {\n+                        savedFields[k].restore(millis);\n+                    }\n+                    throw new IllegalArgumentException(\"Failed to parse fields\");\n+                }\n+            }\n+        }\n+    }\n+} catch (IllegalArgumentException e) {\n+    if (text != null) {\n+        e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + '\"', e);\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}