{
    "patch": "        if (lastArg.isDefaultValue()) {\n          if (!referenced.contains(fnScope.getVar(lastArg.getFirstChild().getString()))) {\n            argList.removeChild(lastArg);\n            compiler.reportCodeChange();\n          } else {\n            break;\n          }\n        } else if (lastArg.isRest()) {\n          // The reference to the rest parameter gets counted during the\n          // pass over the function block, so we don't need to do anything here.\n          break;\n        } else {\n          Var var = fnScope.getVar(lastArg.getString());\n          if (!referenced.contains(var)) {\n            argList.removeChild(lastArg);\n            compiler.reportCodeChange();\n          } else {\n            break;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..ec12094e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,25 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+        if (lastArg.isDefaultValue()) {\n+          if (!referenced.contains(fnScope.getVar(lastArg.getFirstChild().getString()))) {\n+            argList.removeChild(lastArg);\n+            compiler.reportCodeChange();\n+          } else {\n+            break;\n+          }\n+        } else if (lastArg.isRest()) {\n+          // The reference to the rest parameter gets counted during the\n+          // pass over the function block, so we don't need to do anything here.\n+          break;\n+        } else {\n+          Var var = fnScope.getVar(lastArg.getString());\n+          if (!referenced.contains(var)) {\n+            argList.removeChild(lastArg);\n+            compiler.reportCodeChange();\n+          } else {\n+            break;\n+          }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}