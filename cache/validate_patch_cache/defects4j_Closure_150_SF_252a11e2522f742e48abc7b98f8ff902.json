{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  switch (n.getToken()) {\n    case FUNCTION:\n      if (NodeUtil.isFunctionExpression(n)) {\n        if (parent.isCall()) {\n          return;\n        }\n        defineDeclaredFunction(n, parent);\n      } else if (NodeUtil.isFunctionDeclaration(n)) {\n        defineDeclaredFunction(n, parent);\n      }\n      break;\n    case VAR:\n      defineVar(n, parent);\n      break;\n    case CATCH:\n      defineCatch(n, parent);\n      break;\n    case LP:\n      if (parent.isFunction()) {\n        handleFunctionInputs(parent);\n      }\n      break;\n    default:\n      attachLiteralTypes(n);\n      break;\n  }\n}\n\nprivate void handleFunctionInputs(Node paramList) {\n  Node paramNode = paramList.getFirstChild();\n  while (paramNode != null) {\n    if (paramNode.isName()) {\n      JSDocInfo info =\n          JSDocInfo.builder().recordType(new JSTypeExpression(new Node(Token.QMARK))).build();\n      String name = paramNode.getString();\n      Var var = scope.getVar(name);\n      if (var == null) {\n        scope.declare(name, paramNode, info, null);\n      } else {\n        var.addAnnotation(info);\n      }\n    }\n    paramNode = paramNode.getNext();\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..f1e05d40 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,55 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n == scope.getRootNode()) return;\n+\n+  switch (n.getToken()) {\n+    case FUNCTION:\n+      if (NodeUtil.isFunctionExpression(n)) {\n+        if (parent.isCall()) {\n+          return;\n+        }\n+        defineDeclaredFunction(n, parent);\n+      } else if (NodeUtil.isFunctionDeclaration(n)) {\n+        defineDeclaredFunction(n, parent);\n+      }\n+      break;\n+    case VAR:\n+      defineVar(n, parent);\n+      break;\n+    case CATCH:\n+      defineCatch(n, parent);\n+      break;\n+    case LP:\n+      if (parent.isFunction()) {\n         handleFunctionInputs(parent);\n-        return;\n       }\n-\n+      break;\n+    default:\n       attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+      break;\n+  }\n+}\n+\n+private void handleFunctionInputs(Node paramList) {\n+  Node paramNode = paramList.getFirstChild();\n+  while (paramNode != null) {\n+    if (paramNode.isName()) {\n+      JSDocInfo info =\n+          JSDocInfo.builder().recordType(new JSTypeExpression(new Node(Token.QMARK))).build();\n+      String name = paramNode.getString();\n+      Var var = scope.getVar(name);\n+      if (var == null) {\n+        scope.declare(name, paramNode, info, null);\n+      } else {\n+        var.addAnnotation(info);\n       }\n     }\n+    paramNode = paramNode.getNext();\n+  }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: method handleFunctionInputs(Node) is already defined in class TypedScopeCreator.LocalScopeBuilder",
    "test_result": "ERROR"
}