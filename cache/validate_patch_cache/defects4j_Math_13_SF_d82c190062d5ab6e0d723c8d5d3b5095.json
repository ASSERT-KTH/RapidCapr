{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int blockSize = 100; // size of each sub-matrix\n    final int n = m.getRowDimension();\n    final RealMatrix sqrtM = MatrixUtils.createRealMatrix(n, n);\n\n    // process each block of the matrix\n    for (int i = 0; i < n; i += blockSize) {\n        for (int j = 0; j < n; j += blockSize) {\n            int iMax = Math.min(i + blockSize, n);\n            int jMax = Math.min(j + blockSize, n);\n            RealMatrix blockM = m.getSubMatrix(i, iMax - 1, j, jMax - 1);\n            RealMatrix blockSqrt = new EigenDecomposition(blockM).getSquareRoot();\n            sqrtM.setSubMatrix(blockSqrt.getData(), i, j);\n        }\n    }\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..410da2e18 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,21 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int blockSize = 100; // size of each sub-matrix\n+    final int n = m.getRowDimension();\n+    final RealMatrix sqrtM = MatrixUtils.createRealMatrix(n, n);\n+\n+    // process each block of the matrix\n+    for (int i = 0; i < n; i += blockSize) {\n+        for (int j = 0; j < n; j += blockSize) {\n+            int iMax = Math.min(i + blockSize, n);\n+            int jMax = Math.min(j + blockSize, n);\n+            RealMatrix blockM = m.getSubMatrix(i, iMax - 1, j, jMax - 1);\n+            RealMatrix blockSqrt = new EigenDecomposition(blockM).getSquareRoot();\n+            sqrtM.setSubMatrix(blockSqrt.getData(), i, j);\n+        }\n     }\n+    return sqrtM;\n+}\n }",
    "result_reason": "org.apache.commons.math3.exception.MathUnsupportedOperationException: unsupported operation",
    "test_result": "FAIL"
}