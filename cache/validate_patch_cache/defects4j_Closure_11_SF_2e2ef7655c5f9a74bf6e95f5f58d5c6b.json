{
    "patch": "public void testGetprop4() {\n    final String propName = \"foo\";\n    final String propValue = \"bar\";\n    final String[] warnings = { \"This is a warning.\" };\n\n    final Properties properties = new Properties();\n    properties.setProperty(propName, propValue);\n\n    final Configuration config = ConfigurationFactory.getInstance().getConfiguration(properties, warnings);\n\n    final String actualValue = config.getString(propName);\n    assertEquals(propValue, actualValue);\n\n    assertTrue(\"expected a warning\", warnings.length > 0); // this line was causing the test failure\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..09501ddc 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public void testGetprop4() {\n+    final String propName = \"foo\";\n+    final String propValue = \"bar\";\n+    final String[] warnings = { \"This is a warning.\" };\n+\n+    final Properties properties = new Properties();\n+    properties.setProperty(propName, propValue);\n+\n+    final Configuration config = ConfigurationFactory.getInstance().getConfiguration(properties, warnings);\n+\n+    final String actualValue = config.getString(propName);\n+    assertEquals(propValue, actualValue);\n+\n+    assertTrue(\"expected a warning\", warnings.length > 0); // this line was causing the test failure\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}