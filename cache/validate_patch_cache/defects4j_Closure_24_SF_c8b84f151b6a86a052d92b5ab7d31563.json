{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    if (n == null || !n.getParent().isVar()) {\n      continue;\n    }\n    Node value = v.getInitialValue();\n    if (value == null || !value.isQualifiedName()) {\n      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n      continue;\n    }\n    String name = n.getString();\n    String qualifiedName = value.getQualifiedName();\n    if (!qualifiedName.equals(name)) {\n      boolean found = false;\n      for (Scope s = v.getScope().getParent(); s != null; s = s.getParent()) {\n        Var aliasVar = s.getVar(qualifiedName);\n        if (aliasVar != null && aliasVar.getScope().getRootNode() == scope.getRootNode()) {\n          found = true;\n          aliases.put(name, aliasVar);\n          transformation.addAlias(name, qualifiedName);\n          break;\n        }\n      }\n      if (!found) {\n        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..fb8fd883 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,37 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    if (n == null || !n.getParent().isVar()) {\n+      continue;\n+    }\n+    Node value = v.getInitialValue();\n+    if (value == null || !value.isQualifiedName()) {\n+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+      continue;\n+    }\n+    String name = n.getString();\n+    String qualifiedName = value.getQualifiedName();\n+    if (!qualifiedName.equals(name)) {\n+      boolean found = false;\n+      for (Scope s = v.getScope().getParent(); s != null; s = s.getParent()) {\n+        Var aliasVar = s.getVar(qualifiedName);\n+        if (aliasVar != null && aliasVar.getScope().getRootNode() == scope.getRootNode()) {\n+          found = true;\n           aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n           transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+          break;\n         }\n       }\n+      if (!found) {\n+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n+      }\n     }\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_GOOG_SCOPE_NON_ALIAS_LOCAL. The local variable x is in a goog.scope and is not an alias. at testcode line 1 : 27 expected:<0> but was:<1>",
    "test_result": "FAIL"
}