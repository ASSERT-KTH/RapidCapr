{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        millis = savedFields[i].set(millis, resetFields);\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n}\n\nif (count > 0) {\n    DurationField months = DurationFieldType.months().getField(iChrono);\n    DurationField days = DurationFieldType.days().getField(iChrono);\n\n    DurationField first = savedFields[0].iField.getDurationField();\n    if ((compareReverse(first, months) >= 0 && compareReverse(first, days) < 0) || \n            compareReverse(first, months) > 0 ) {\n        int year = iDefaultYear;\n        int monthOfYear = 1;\n        int dayOfMonth = 1;\n\n        Partial partial = new Partial();\n        for (int i=0; i<count; i++) {\n            DurationField field = savedFields[i].iField.getDurationField();\n            int value = savedFields[i].iValue;\n            if (field == months) {\n                monthOfYear = value;\n            } else if (field == days) {\n                dayOfMonth = value;\n            } else if (field == DateTimeFieldType.year()) {\n                year = value;\n            }\n        }\n        LocalDate date = new LocalDate(year, monthOfYear, dayOfMonth, iChrono);\n\n        int resolvedDefaultYear = date.getYear();\n        if (iDefaultYear != resolvedDefaultYear) {\n            savedFields = savedFields.clone();  // array is cloned once all field have been extracted\n            for (int i=0; i<count; i++) {\n                if (savedFields[i].iField == DateTimeFieldType.year()) {\n                    savedFields[i] = new SavedField(DateTimeFieldType.year(), resolvedDefaultYear);\n                }\n            }\n        }\n        return date.getMillis();\n    }\n}\n\nif (iZone == null) {\n    millis -= iOffset;\n} else {\n    int offset = iZone.getOffsetFromLocal(millis);\n    millis -= offset;\n    if (offset != iZone.getOffset(millis)) {\n        String message =\n            \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n        if (text != null) {\n            message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n        }\n        throw new IllegalArgumentException(message);\n    }\n}\n\nreturn millis;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..73cc47f0 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,71 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        millis = savedFields[i].set(millis, resetFields);\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+}\n+\n+if (count > 0) {\n+    DurationField months = DurationFieldType.months().getField(iChrono);\n+    DurationField days = DurationFieldType.days().getField(iChrono);\n+\n+    DurationField first = savedFields[0].iField.getDurationField();\n+    if ((compareReverse(first, months) >= 0 && compareReverse(first, days) < 0) || \n+            compareReverse(first, months) > 0 ) {\n+        int year = iDefaultYear;\n+        int monthOfYear = 1;\n+        int dayOfMonth = 1;\n+\n+        Partial partial = new Partial();\n+        for (int i=0; i<count; i++) {\n+            DurationField field = savedFields[i].iField.getDurationField();\n+            int value = savedFields[i].iValue;\n+            if (field == months) {\n+                monthOfYear = value;\n+            } else if (field == days) {\n+                dayOfMonth = value;\n+            } else if (field == DateTimeFieldType.year()) {\n+                year = value;\n+            }\n+        }\n+        LocalDate date = new LocalDate(year, monthOfYear, dayOfMonth, iChrono);\n+\n+        int resolvedDefaultYear = date.getYear();\n+        if (iDefaultYear != resolvedDefaultYear) {\n+            savedFields = savedFields.clone();  // array is cloned once all field have been extracted\n+            for (int i=0; i<count; i++) {\n+                if (savedFields[i].iField == DateTimeFieldType.year()) {\n+                    savedFields[i] = new SavedField(DateTimeFieldType.year(), resolvedDefaultYear);\n+                }\n+            }\n+        }\n+        return date.getMillis();\n+    }\n+}\n+\n+if (iZone == null) {\n+    millis -= iOffset;\n+} else {\n+    int offset = iZone.getOffsetFromLocal(millis);\n+    millis -= offset;\n+    if (offset != iZone.getOffset(millis)) {\n+        String message =\n+            \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+        if (text != null) {\n+            message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+        }\n+        throw new IllegalArgumentException(message);\n+    }\n+}\n+\n+return millis;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}