{
    "patch": "private String format(JSError error, boolean warning) {\n    // extract source excerpt\n    SourceExcerptProvider source = getSource();\n    String sourceExcerpt = source == null ? null :\n            excerpt.get(source, error.sourceName, error.lineNumber, excerptFormatter);\n\n    // formatting the message\n    StringBuilder b = new StringBuilder();\n    if (error.sourceName != null) {\n        b.append(error.sourceName);\n        if (error.lineNumber > 0) {\n            b.append(':');\n            b.append(error.lineNumber);\n        }\n        b.append(\": \");\n    }\n\n    b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n    b.append(\" - \");\n\n    b.append(error.description);\n    b.append('\\n');\n    if (sourceExcerpt != null) {\n        b.append(sourceExcerpt);\n        int charno = error.getCharno();\n\n        // padding equal to the excerpt and arrow at the end\n        // charno >= sourceExcerpt.length() means there is something missing at the end of the line\n        if (LINE.equals(excerpt) && 0 <= charno && charno < sourceExcerpt.length()) {\n            b.append('\\n');\n            for (int i = 0; i < charno; i++) {\n                char c = sourceExcerpt.charAt(i);\n                if (Character.isWhitespace(c)) {\n                    b.append(c);\n                } else {\n                    b.append(' ');\n                }\n            }\n            b.append('^');\n        } else if (LINE.equals(excerpt) && charno >= sourceExcerpt.length()) {\n            b.append('\\n');\n            for (int i = 0; i < sourceExcerpt.length(); i++) {\n                char c = sourceExcerpt.charAt(i);\n                if (Character.isWhitespace(c)) {\n                    b.append(c);\n                } else {\n                    b.append(' ');\n                }\n            }\n            b.append('^');\n        }\n        b.append('\\n');\n    }\n    return b.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\nindex 5a4f884c..030eda6e 100644\n--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n@@ -63,22 +63,21 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {\n     return format(warning, true);\n   }\n \n-  private String format(JSError error, boolean warning) {\n+private String format(JSError error, boolean warning) {\n     // extract source excerpt\n     SourceExcerptProvider source = getSource();\n     String sourceExcerpt = source == null ? null :\n-        excerpt.get(\n-            source, error.sourceName, error.lineNumber, excerptFormatter);\n+            excerpt.get(source, error.sourceName, error.lineNumber, excerptFormatter);\n \n     // formatting the message\n     StringBuilder b = new StringBuilder();\n     if (error.sourceName != null) {\n-      b.append(error.sourceName);\n-      if (error.lineNumber > 0) {\n-        b.append(':');\n-        b.append(error.lineNumber);\n-      }\n-      b.append(\": \");\n+        b.append(error.sourceName);\n+        if (error.lineNumber > 0) {\n+            b.append(':');\n+            b.append(error.lineNumber);\n+        }\n+        b.append(\": \");\n     }\n \n     b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n@@ -87,28 +86,38 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {\n     b.append(error.description);\n     b.append('\\n');\n     if (sourceExcerpt != null) {\n-      b.append(sourceExcerpt);\n-      b.append('\\n');\n-      int charno = error.getCharno();\n-\n-      // padding equal to the excerpt and arrow at the end\n-      // charno == sourceExpert.length() means something is missing\n-      // at the end of the line\n-      if (excerpt.equals(LINE)\n-          && 0 <= charno && charno < sourceExcerpt.length()) {\n-        for (int i = 0; i < charno; i++) {\n-          char c = sourceExcerpt.charAt(i);\n-          if (Character.isWhitespace(c)) {\n-            b.append(c);\n-          } else {\n-            b.append(' ');\n-          }\n+        b.append(sourceExcerpt);\n+        int charno = error.getCharno();\n+\n+        // padding equal to the excerpt and arrow at the end\n+        // charno >= sourceExcerpt.length() means there is something missing at the end of the line\n+        if (LINE.equals(excerpt) && 0 <= charno && charno < sourceExcerpt.length()) {\n+            b.append('\\n');\n+            for (int i = 0; i < charno; i++) {\n+                char c = sourceExcerpt.charAt(i);\n+                if (Character.isWhitespace(c)) {\n+                    b.append(c);\n+                } else {\n+                    b.append(' ');\n+                }\n+            }\n+            b.append('^');\n+        } else if (LINE.equals(excerpt) && charno >= sourceExcerpt.length()) {\n+            b.append('\\n');\n+            for (int i = 0; i < sourceExcerpt.length(); i++) {\n+                char c = sourceExcerpt.charAt(i);\n+                if (Character.isWhitespace(c)) {\n+                    b.append(c);\n+                } else {\n+                    b.append(' ');\n+                }\n+            }\n+            b.append('^');\n         }\n-        b.append(\"^\\n\");\n-      }\n+        b.append('\\n');\n     }\n     return b.toString();\n-  }\n+}\n \n   /**\n    * Formats a region by appending line numbers in front, e.g.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}