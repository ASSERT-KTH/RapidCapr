{
    "patch": "// next stages\nfor (int k = 1; k < stages; ++k) {\n  for (int j = 0; j < y0.length; ++j) {\n    double sum = a[k-1][0] * yDotK[0][j];\n    for (int l = 1; l < k; ++l) {\n      sum += a[k-1][l] * yDotK[l][j];\n    }\n    yTmp[j] = y[j] + stepSize * sum;\n  }\n  computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n}\n\n// estimate the state at the end of the step\nfor (int j = 0; j < y0.length; ++j) {\n  double sum = b[0] * yDotK[0][j];\n  for (int l = 1; l < stages; ++l) {\n    sum += b[l] * yDotK[l][j];\n  }\n  yTmp[j] = y[j] + stepSize * sum;\n}\n\n// estimate the error at the end of the step\nerror = estimateError(yDotK, y, yTmp, stepSize);\nif (error >= 1.0) {\n  // reject the step and attempt to reduce error by stepsize control\n  final double factor =\n      FastMath.min(maxGrowth,\n                   FastMath.max(minReduction, safety * FastMath.pow(error, exp)));\n  hNew = filterStep(stepSize * factor, forward, false);\n  if (Double.isNaN(hNew)) {\n    throw new MathIllegalStateException(LocalizedFormats.NAN_STEP_SIZE_IN_NON_LINEAR_INTERPOLATION, hNew);\n  } else if (hNew == 0) {\n    throw new MathIllegalStateException(LocalizedFormats.ZERO_STEP_SIZE, stepSize);\n  }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 13ced27d7..cef4c302b 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -247,6 +247,41 @@ public abstract class EmbeddedRungeKuttaIntegrator\n         }\n \n         stepSize = hNew;\n+// next stages\n+for (int k = 1; k < stages; ++k) {\n+  for (int j = 0; j < y0.length; ++j) {\n+    double sum = a[k-1][0] * yDotK[0][j];\n+    for (int l = 1; l < k; ++l) {\n+      sum += a[k-1][l] * yDotK[l][j];\n+    }\n+    yTmp[j] = y[j] + stepSize * sum;\n+  }\n+  computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n+}\n+\n+// estimate the state at the end of the step\n+for (int j = 0; j < y0.length; ++j) {\n+  double sum = b[0] * yDotK[0][j];\n+  for (int l = 1; l < stages; ++l) {\n+    sum += b[l] * yDotK[l][j];\n+  }\n+  yTmp[j] = y[j] + stepSize * sum;\n+}\n+\n+// estimate the error at the end of the step\n+error = estimateError(yDotK, y, yTmp, stepSize);\n+if (error >= 1.0) {\n+  // reject the step and attempt to reduce error by stepsize control\n+  final double factor =\n+      FastMath.min(maxGrowth,\n+                   FastMath.max(minReduction, safety * FastMath.pow(error, exp)));\n+  hNew = filterStep(stepSize * factor, forward, false);\n+  if (Double.isNaN(hNew)) {\n+    throw new MathIllegalStateException(LocalizedFormats.NAN_STEP_SIZE_IN_NON_LINEAR_INTERPOLATION, hNew);\n+  } else if (hNew == 0) {\n+    throw new MathIllegalStateException(LocalizedFormats.ZERO_STEP_SIZE, stepSize);\n+  }\n+}\n \n         // next stages\n         for (int k = 1; k < stages; ++k) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}