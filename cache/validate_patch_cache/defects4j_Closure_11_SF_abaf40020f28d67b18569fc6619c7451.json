{
    "patch": "public static String getProp(String key) {\n    Properties props = loadProps();\n\n    return props.getProperty(key);\n}\n\npublic static Properties loadProps() {\n    try {\n        InputStream inputStream = Example.class.getClassLoader()\n            .getResourceAsStream(\"example.properties\");\n\n        if (inputStream != null) {\n            Properties props = new Properties();\n            props.load(inputStream);\n            return props;\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n\n    return null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..a869114f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getProp(String key) {\n+    Properties props = loadProps();\n+\n+    return props.getProperty(key);\n+}\n+\n+public static Properties loadProps() {\n+    try {\n+        InputStream inputStream = Example.class.getClassLoader()\n+            .getResourceAsStream(\"example.properties\");\n+\n+        if (inputStream != null) {\n+            Properties props = new Properties();\n+            props.load(inputStream);\n+            return props;\n+        }\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+    }\n+\n+    return null;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}