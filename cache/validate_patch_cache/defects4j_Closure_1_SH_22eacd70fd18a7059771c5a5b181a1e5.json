{
    "patch": "    // Strip unreferenced args off the end of the function declaration.\n    Node argList = getFunctionArgList(function);\n    Node lastArg = null;\n    for (Node node = argList.getFirstChild(); node != null; node = node.getNext()) {\n        lastArg = node;\n    }\n    while (lastArg != null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n      argList.removeChild(lastArg);\n      lastArg = lastArg.getPrevious();\n      compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..2191126a 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,16 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node argList = getFunctionArgList(function);\n+    Node lastArg = null;\n+    for (Node node = argList.getFirstChild(); node != null; node = node.getNext()) {\n+        lastArg = node;\n+    }\n+    while (lastArg != null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n+      argList.removeChild(lastArg);\n+      lastArg = lastArg.getPrevious();\n+      compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}