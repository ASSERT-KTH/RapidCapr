{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    for (Type bound : bounds) {\n        readTypeVariablesOn(bound);\n    }\n\n    Type actualTypeArgumentForTypeVariable = getActualTypeArgumentFor(typeVariable);\n\n    if (actualTypeArgumentForTypeVariable == null) {\n        return;\n    }\n\n    if (actualTypeArgumentForTypeVariable instanceof TypeVariable) {\n        TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArgumentForTypeVariable;\n        Type actualTypeArgument = getActualTypeArgumentFor(actualTypeVariable);\n        if (actualTypeArgument == null) {\n            for (Type bound : actualTypeVariable.getBounds()) {\n                readTypeVariablesOn(bound);\n            }\n        } else {\n            readTypeVariablesOn(actualTypeArgument);\n        }\n    } else {\n        readTypeVariablesOn(actualTypeArgumentForTypeVariable);\n    }\n}\n\nprivate Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    Type[] interfaceTypes = typeVariable.getGenericDeclaration().getGenericInterfaces();\n    Type superclassType = typeVariable.getGenericDeclaration().getGenericSuperclass();\n\n    Type expectedType = null;\n    if (superclassType instanceof ParameterizedType) {\n        expectedType = searchTypeArguments((ParameterizedType) superclassType, typeVariable);\n    }\n    for (Type interfaceType : interfaceTypes) {\n        if (interfaceType instanceof ParameterizedType) {\n            Type typeArgument = searchTypeArguments((ParameterizedType) interfaceType, typeVariable);\n            if (typeArgument != null) {\n                expectedType = typeArgument;\n                break;\n            }\n        }\n    }\n    return expectedType;\n}\n\nprivate Type searchTypeArguments(ParameterizedType parameterizedType, TypeVariable<?> typeVariable) {\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    Type[] typeParameters = typeVariable.getGenericDeclaration().getTypeParameters();\n    for (int i = 0; i < actualTypeArguments.length; ++i) {\n        Type typeArgument = actualTypeArguments[i];\n        if (typeArgument instanceof TypeVariable) {\n            TypeVariable<?> typeVariableArgument = (TypeVariable<?>) typeArgument;\n            if (typeVariableArgument.getName().equals(typeVariable.getName())) {\n                return parameterizedType.getActualTypeArguments()[i];\n            }\n        }\n        if (typeArgument instanceof ParameterizedType) {\n            Type searchResult = searchTypeArguments((ParameterizedType) typeArgument, typeVariable);\n            if (searchResult != null) {\n                return searchResult;\n            }\n        }\n    }\n    return null;\n}\n\nprivate void readTypeVariablesOn(Type type) {\n    if (type instanceof ParameterizedType) {\n        Type[] actualTypeArguments = ((ParameterizedType) type).getActualTypeArguments();\n        for (Type argument : actualTypeArguments) {\n            readTypeVariablesOn(argument);\n        }\n    } else if (type instanceof TypeVariable) {\n        TypeVariable<?> variable = (TypeVariable<?>) type;\n        Type[] bounds = variable.getBounds();\n        for (Type bound : bounds) {\n            readTypeVariablesOn(bound);\n        }\n    }\n    registerTypeVariablesOn(type);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..9d432fce1 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,90 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    for (Type bound : bounds) {\n+        readTypeVariablesOn(bound);\n+    }\n+\n+    Type actualTypeArgumentForTypeVariable = getActualTypeArgumentFor(typeVariable);\n+\n+    if (actualTypeArgumentForTypeVariable == null) {\n+        return;\n+    }\n+\n+    if (actualTypeArgumentForTypeVariable instanceof TypeVariable) {\n+        TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArgumentForTypeVariable;\n+        Type actualTypeArgument = getActualTypeArgumentFor(actualTypeVariable);\n+        if (actualTypeArgument == null) {\n+            for (Type bound : actualTypeVariable.getBounds()) {\n+                readTypeVariablesOn(bound);\n+            }\n+        } else {\n+            readTypeVariablesOn(actualTypeArgument);\n+        }\n+    } else {\n+        readTypeVariablesOn(actualTypeArgumentForTypeVariable);\n+    }\n+}\n+\n+private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    Type[] interfaceTypes = typeVariable.getGenericDeclaration().getGenericInterfaces();\n+    Type superclassType = typeVariable.getGenericDeclaration().getGenericSuperclass();\n+\n+    Type expectedType = null;\n+    if (superclassType instanceof ParameterizedType) {\n+        expectedType = searchTypeArguments((ParameterizedType) superclassType, typeVariable);\n+    }\n+    for (Type interfaceType : interfaceTypes) {\n+        if (interfaceType instanceof ParameterizedType) {\n+            Type typeArgument = searchTypeArguments((ParameterizedType) interfaceType, typeVariable);\n+            if (typeArgument != null) {\n+                expectedType = typeArgument;\n+                break;\n+            }\n+        }\n+    }\n+    return expectedType;\n+}\n+\n+private Type searchTypeArguments(ParameterizedType parameterizedType, TypeVariable<?> typeVariable) {\n+    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+    Type[] typeParameters = typeVariable.getGenericDeclaration().getTypeParameters();\n+    for (int i = 0; i < actualTypeArguments.length; ++i) {\n+        Type typeArgument = actualTypeArguments[i];\n+        if (typeArgument instanceof TypeVariable) {\n+            TypeVariable<?> typeVariableArgument = (TypeVariable<?>) typeArgument;\n+            if (typeVariableArgument.getName().equals(typeVariable.getName())) {\n+                return parameterizedType.getActualTypeArguments()[i];\n+            }\n+        }\n+        if (typeArgument instanceof ParameterizedType) {\n+            Type searchResult = searchTypeArguments((ParameterizedType) typeArgument, typeVariable);\n+            if (searchResult != null) {\n+                return searchResult;\n+            }\n+        }\n+    }\n+    return null;\n+}\n+\n+private void readTypeVariablesOn(Type type) {\n+    if (type instanceof ParameterizedType) {\n+        Type[] actualTypeArguments = ((ParameterizedType) type).getActualTypeArguments();\n+        for (Type argument : actualTypeArguments) {\n+            readTypeVariablesOn(argument);\n+        }\n+    } else if (type instanceof TypeVariable) {\n+        TypeVariable<?> variable = (TypeVariable<?>) type;\n+        Type[] bounds = variable.getBounds();\n+        for (Type bound : bounds) {\n+            readTypeVariablesOn(bound);\n+        }\n+    }\n+    registerTypeVariablesOn(type);\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: name clash: getActualTypeArgumentFor(TypeVariable<?>) in TypeVariableReturnType and getActualTypeArgumentFor(TypeVariable) in GenericMetadataSupport have the same erasure, yet neither overrides the other",
    "test_result": "ERROR"
}