{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    \n    List<Object> simplifiedPairs = new ArrayList<>();\n\n    for (Object pair : elementPairs) {\n        if (pair instanceof Separator) {\n            Separator sep = (Separator) pair;\n            List<Object> sublist = elementPairs.subList(elementPairs.indexOf(sep) + 1, elementPairs.size());\n\n            if (sublist.stream().anyMatch(o -> o instanceof Separator)) {\n                PeriodFormatter f = toFormatter(sublist, notPrinter, notParser);\n                sep = sep.finish(f.getPrinter(), f.getParser());\n                simplifiedPairs.add(sep);\n                break;\n            }\n        }\n\n        simplifiedPairs.add(pair);\n    }\n\n    Object[] comp = createComposite(simplifiedPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..276333d4 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,39 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    \n+    List<Object> simplifiedPairs = new ArrayList<>();\n+\n+    for (Object pair : elementPairs) {\n+        if (pair instanceof Separator) {\n+            Separator sep = (Separator) pair;\n+            List<Object> sublist = elementPairs.subList(elementPairs.indexOf(sep) + 1, elementPairs.size());\n+\n+            if (sublist.stream().anyMatch(o -> o instanceof Separator)) {\n+                PeriodFormatter f = toFormatter(sublist, notPrinter, notParser);\n                 sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+                simplifiedPairs.add(sep);\n+                break;\n+            }\n         }\n+\n+        simplifiedPairs.add(pair);\n     }\n \n+    Object[] comp = createComposite(simplifiedPairs);\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}