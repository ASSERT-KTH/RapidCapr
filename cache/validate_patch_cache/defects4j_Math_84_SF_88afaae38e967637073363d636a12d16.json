{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    int numIterations = 0;\n    final int maxIterations = getMaxIterations();\n    while (numIterations < maxIterations) {\n\n        incrementIterationsCounter();\n        numIterations++;\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(expanded, reflected) < 0) { // fixed comparison operator\n\n                // accept the expanded simplex\n                simplex = reflectedSimplex;\n\n            } else {\n\n                // accept the reflected simplex\n                simplex = new RealPointValuePair[original.length];\n                simplex[0] = reflected;\n                for (int i = 1; i < simplex.length; ++i) {\n                    simplex[i] = original[i - 1];\n                }\n\n            }\n\n            return;\n\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            simplex = evaluateNewSimplex(original, sigma, comparator);\n\n            return;\n        }\n\n    }\n\n    throw new OptimizationException(\"Maximal number of iterations exceeded: \" + maxIterations);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..ae3509701 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,60 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+    int numIterations = 0;\n+    final int maxIterations = getMaxIterations();\n+    while (numIterations < maxIterations) {\n \n-        while (true) {\n+        incrementIterationsCounter();\n+        numIterations++;\n \n-            incrementIterationsCounter();\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) { // fixed comparison operator\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+                // accept the expanded simplex\n+                simplex = reflectedSimplex;\n+\n+            } else {\n \n-                return;\n+                // accept the reflected simplex\n+                simplex = new RealPointValuePair[original.length];\n+                simplex[0] = reflected;\n+                for (int i = 1; i < simplex.length; ++i) {\n+                    simplex[i] = original[i - 1];\n+                }\n \n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            return;\n \n-            // check convergence\n-                return;\n-            }\n+        }\n+\n+        // compute the contracted simplex\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+        if (comparator.compare(contracted, best) < 0) {\n+            // accept the contracted simplex\n+            simplex = evaluateNewSimplex(original, sigma, comparator);\n \n+            return;\n         }\n \n     }\n \n+    throw new OptimizationException(\"Maximal number of iterations exceeded: \" + maxIterations);\n+}\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}