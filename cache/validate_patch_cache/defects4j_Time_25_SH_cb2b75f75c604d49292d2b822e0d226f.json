{
    "patch": "            if (offsetLocal < offsetAdjusted) {\n                // we need to ensure that time is always after the DST gap\n                // this happens naturally for positive offsets, but not for negative\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n            } else if (offsetLocal > offsetAdjusted) {\n                // we need to ensure that time is always before the DST overlap\n                // this happens naturally for negative offsets, but not for positive\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                if (prevLocal == prevAdjusted) {\n                    // OK, we are still overlapping, so use the offset of instantAdjusted\n                    return offsetAdjusted;\n                } else {\n                    // we have fallen out of the overlap into a DST gap, return the previous offset\n                    return getOffset(prevAdjusted);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..8ce23099 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,25 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetLocal < offsetAdjusted) {\n+                // we need to ensure that time is always after the DST gap\n+                // this happens naturally for positive offsets, but not for negative\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+            } else if (offsetLocal > offsetAdjusted) {\n+                // we need to ensure that time is always before the DST overlap\n+                // this happens naturally for negative offsets, but not for positive\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                if (prevLocal == prevAdjusted) {\n+                    // OK, we are still overlapping, so use the offset of instantAdjusted\n+                    return offsetAdjusted;\n+                } else {\n+                    // we have fallen out of the overlap into a DST gap, return the previous offset\n+                    return getOffset(prevAdjusted);\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}