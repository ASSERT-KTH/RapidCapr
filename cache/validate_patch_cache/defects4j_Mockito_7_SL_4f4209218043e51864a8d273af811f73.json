{
    "patch": "    private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n        if (typeVariable.getGenericDeclaration() instanceof Class) {\n            // Can't extract actual type argument for non-parameterized types\n            return Object.class;\n        }\n        Type[] actualTypeArguments = ((ParameterizedType) typeVariable\n            .getGenericDeclaration()).getActualTypeArguments();\n        for (int i = 0; i < actualTypeArguments.length; i++) {\n            Type typeArgument = actualTypeArguments[i];\n            TypeVariable<?> typeParameter =\n                ((TypeVariable<?>) typeVariable.getGenericDeclaration())\n                    .getTypeParameters()[i];\n            if (typeParameter.equals(typeVariable)) {\n                return typeArgument;\n            }\n        }\n        return Object.class;\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..df2024336 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,29 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+    private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+        if (typeVariable.getGenericDeclaration() instanceof Class) {\n+            // Can't extract actual type argument for non-parameterized types\n+            return Object.class;\n+        }\n+        Type[] actualTypeArguments = ((ParameterizedType) typeVariable\n+            .getGenericDeclaration()).getActualTypeArguments();\n+        for (int i = 0; i < actualTypeArguments.length; i++) {\n+            Type typeArgument = actualTypeArguments[i];\n+            TypeVariable<?> typeParameter =\n+                ((TypeVariable<?>) typeVariable.getGenericDeclaration())\n+                    .getTypeParameters()[i];\n+            if (typeParameter.equals(typeVariable)) {\n+                return typeArgument;\n+            }\n+        }\n+        return Object.class;\n+    }\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}