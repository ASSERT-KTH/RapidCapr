{
    "patch": "Node parent = n.getParent();\nif (parent != null &&\n    !NodeUtil.isCall(parent) &&\n    !NodeUtil.isNew(parent) &&\n    !NodeUtil.isObjectLitKey(parent) &&\n    !NodeUtil.isUnaryExpression(parent) &&\n    !NodeUtil.isBinaryOperator(parent) &&\n    !NodeUtil.isCountOperation(parent)) {\n  Node grandParent = parent.getParent();\n  if (grandParent == null) {\n    return false;\n  }\n  int grandParentType = grandParent.getType();\n  if (grandParentType == Token.RETURN) {\n    return grandParent.getFirstChild() == n;\n  } else if (grandParentType == Token.FUNCTION)  {\n    Node functionBody = grandParent.getLastChild();\n    if (functionBody == null) {\n      return false;\n    }\n    if (functionBody.getType() == Token.BLOCK) {\n      Node stmt = functionBody.getFirstChild();\n      while (stmt != null) {\n        int stmtType = stmt.getType();\n        if (stmtType == Token.FUNCTION || stmtType == Token.VAR || stmtType == Token.LET ||\n            stmtType == Token.CONST || stmtType == Token.RETURN ||\n            (stmtType == Token.EXPRESSION_STATEMENT && stmt.getFirstChild() == n)) {\n          return true;\n        } else if (stmtType != Token.EMPTY) {\n          break;\n        }\n        stmt = stmt.getNext();\n      }\n      return NodeUtil.isTopLevelFunction(grandParent.getParent());\n    } else if (NodeUtil.isExpressionNode(functionBody)) {\n      return grandParent.getFirstChild() == n;\n    }\n  }\n}\nreturn false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..6070077b 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,46 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+Node parent = n.getParent();\n+if (parent != null &&\n+    !NodeUtil.isCall(parent) &&\n+    !NodeUtil.isNew(parent) &&\n+    !NodeUtil.isObjectLitKey(parent) &&\n+    !NodeUtil.isUnaryExpression(parent) &&\n+    !NodeUtil.isBinaryOperator(parent) &&\n+    !NodeUtil.isCountOperation(parent)) {\n+  Node grandParent = parent.getParent();\n+  if (grandParent == null) {\n+    return false;\n+  }\n+  int grandParentType = grandParent.getType();\n+  if (grandParentType == Token.RETURN) {\n+    return grandParent.getFirstChild() == n;\n+  } else if (grandParentType == Token.FUNCTION)  {\n+    Node functionBody = grandParent.getLastChild();\n+    if (functionBody == null) {\n+      return false;\n+    }\n+    if (functionBody.getType() == Token.BLOCK) {\n+      Node stmt = functionBody.getFirstChild();\n+      while (stmt != null) {\n+        int stmtType = stmt.getType();\n+        if (stmtType == Token.FUNCTION || stmtType == Token.VAR || stmtType == Token.LET ||\n+            stmtType == Token.CONST || stmtType == Token.RETURN ||\n+            (stmtType == Token.EXPRESSION_STATEMENT && stmt.getFirstChild() == n)) {\n+          return true;\n+        } else if (stmtType != Token.EMPTY) {\n+          break;\n+        }\n+        stmt = stmt.getNext();\n+      }\n+      return NodeUtil.isTopLevelFunction(grandParent.getParent());\n+    } else if (NodeUtil.isExpressionNode(functionBody)) {\n+      return grandParent.getFirstChild() == n;\n+    }\n+  }\n+}\n+return false;\n   }\n \n   /**",
    "result_reason": "error: method isObjectLitKey in class NodeUtil cannot be applied to given types;",
    "test_result": "ERROR"
}