{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    double lgm = logGamma(a);\n    double yp = x + a;\n    double d = x + 1.0 - a;\n    double ap = a;\n    double s = 1.0 / d;\n    double h = s;\n\n    double sum = 0.0;\n    double small = 1e-15 / s;\n    int maxIterations = 1000000;\n    int n = 1;\n    while (n <= maxIterations) {\n        ap += 1.0;\n        d += 2.0;\n        s = ap * s + d;\n        if (Math.abs(s) < small) {\n            s = small;\n        }\n        h = d / s;\n        sum += h;\n        if (Math.abs(h - 1.0) < 3e-14) {\n            break;\n        }\n        n++;\n    }\n\n    double p = Math.exp(-yp + Math.log(yp) * a - lgm) * sum;\n    return (p > 1.0) ? 1.0 : p;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..3d5e8acbc 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,44 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    double lgm = logGamma(a);\n+    double yp = x + a;\n+    double d = x + 1.0 - a;\n+    double ap = a;\n+    double s = 1.0 / d;\n+    double h = s;\n+\n+    double sum = 0.0;\n+    double small = 1e-15 / s;\n+    int maxIterations = 1000000;\n+    int n = 1;\n+    while (n <= maxIterations) {\n+        ap += 1.0;\n+        d += 2.0;\n+        s = ap * s + d;\n+        if (Math.abs(s) < small) {\n+            s = small;\n+        }\n+        h = d / s;\n+        sum += h;\n+        if (Math.abs(h - 1.0) < 3e-14) {\n+            break;\n+        }\n+        n++;\n+    }\n+\n+    double p = Math.exp(-yp + Math.log(yp) * a - lgm) * sum;\n+    return (p > 1.0) ? 1.0 : p;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}