{
    "patch": ">>    int nameType = Token.NAME;\n>>    if (name == null || name.getIdentifier().isEmpty()) {\n>>      name = new Name();\n>>      name.setIdentifier(\"\");\n>>      isUnnamedFunction = true;\n>>      nameType = Token.EMPTY;\n>>    }\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n>>    newName.setType(nameType);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..5f21a5fc 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,16 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+>>    int nameType = Token.NAME;\n+>>    if (name == null || name.getIdentifier().isEmpty()) {\n+>>      name = new Name();\n+>>      name.setIdentifier(\"\");\n+>>      isUnnamedFunction = true;\n+>>      nameType = Token.EMPTY;\n+>>    }\n+      Node node = newNode(Token.FUNCTION);\n+      Node newName = transform(name);\n+>>    newName.setType(nameType);\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}