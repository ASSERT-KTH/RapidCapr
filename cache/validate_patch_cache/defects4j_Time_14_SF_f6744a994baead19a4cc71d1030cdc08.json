{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        // handle 29 February on leap year\n        int month = iChronology.monthOfYear().get(instant);\n        if (month == 2 && iChronology.dayOfMonth().get(instant) == 29 && !iChronology.year().isLeap(iChronology.year().get(instant))) {\n            instant = iChronology.dayOfMonth().set(instant, 28);\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        long instant = 0L; // initialize the instant to zero\n        for (int i = 0; i < partial.size(); i++) {\n            int fieldValue = values[i];\n            PartialField field = partial.getField(i);\n            // check if the field is the one we're adding to\n            if (i == fieldIndex) {\n                fieldValue = FieldUtils.safeAdd(fieldValue, valueToAdd);\n            }\n            try {\n                // set the current field value in the instant\n                instant = field.getField(iChronology).set(instant, fieldValue);\n            } catch (IllegalArgumentException e) {\n                // If the given partial is not contiguous, use the superclass method to add the value\n                return super.add(partial, fieldIndex, values, valueToAdd);\n            }\n        }\n        // handle 29 February on leap year\n        int month = iChronology.monthOfYear().get(instant);\n        if (month == 2 && iChronology.dayOfMonth().get(instant) == 29 && !iChronology.year().isLeap(iChronology.year().get(instant))) {\n            instant = iChronology.dayOfMonth().set(instant, 28);\n        }\n        return iChronology.get(partial, instant);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..0d7174c8 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,50 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        }\n+        instant = add(instant, valueToAdd);\n+        // handle 29 February on leap year\n+        int month = iChronology.monthOfYear().get(instant);\n+        if (month == 2 && iChronology.dayOfMonth().get(instant) == 29 && !iChronology.year().isLeap(iChronology.year().get(instant))) {\n+            instant = iChronology.dayOfMonth().set(instant, 28);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        return iChronology.get(partial, instant);\n+    } else {\n+        long instant = 0L; // initialize the instant to zero\n+        for (int i = 0; i < partial.size(); i++) {\n+            int fieldValue = values[i];\n+            PartialField field = partial.getField(i);\n+            // check if the field is the one we're adding to\n+            if (i == fieldIndex) {\n+                fieldValue = FieldUtils.safeAdd(fieldValue, valueToAdd);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            try {\n+                // set the current field value in the instant\n+                instant = field.getField(iChronology).set(instant, fieldValue);\n+            } catch (IllegalArgumentException e) {\n+                // If the given partial is not contiguous, use the superclass method to add the value\n+                return super.add(partial, fieldIndex, values, valueToAdd);\n+            }\n+        }\n+        // handle 29 February on leap year\n+        int month = iChronology.monthOfYear().get(instant);\n+        if (month == 2 && iChronology.dayOfMonth().get(instant) == 29 && !iChronology.year().isLeap(iChronology.year().get(instant))) {\n+            instant = iChronology.dayOfMonth().set(instant, 28);\n         }\n+        return iChronology.get(partial, instant);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}