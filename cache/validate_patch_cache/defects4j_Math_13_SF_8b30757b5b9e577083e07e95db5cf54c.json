{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealMatrix vt = v.transpose();\n    final double[] s = dec.getRealEigenvalues();\n    final int n = s.length;\n\n    // Invert negative and zero eigenvalues\n    for (int i = 0; i < n; i++) {\n        if (s[i] <= 0.0) {\n            s[i] = 0.0;\n        } else {\n            s[i] = Math.sqrt(s[i]);\n        }\n    }\n    RealMatrix sqrtMatrix = v.scalarMultiply(s[0]).multiply(vt);\n    for (int i = 1; i < n; i++) {\n        RealMatrix temp = v.scalarMultiply(s[i]).multiply(vt);\n        sqrtMatrix = sqrtMatrix.add(temp);\n    }\n\n    return sqrtMatrix;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..328e00488 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,27 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix vt = v.transpose();\n+    final double[] s = dec.getRealEigenvalues();\n+    final int n = s.length;\n+\n+    // Invert negative and zero eigenvalues\n+    for (int i = 0; i < n; i++) {\n+        if (s[i] <= 0.0) {\n+            s[i] = 0.0;\n+        } else {\n+            s[i] = Math.sqrt(s[i]);\n+        }\n+    }\n+    RealMatrix sqrtMatrix = v.scalarMultiply(s[0]).multiply(vt);\n+    for (int i = 1; i < n; i++) {\n+        RealMatrix temp = v.scalarMultiply(s[i]).multiply(vt);\n+        sqrtMatrix = sqrtMatrix.add(temp);\n     }\n+\n+    return sqrtMatrix;\n+}\n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3496978.1837704973> but was:<3496978.1842644885>",
    "test_result": "FAIL"
}