{
    "patch": "                // if the offsets differ by more than 1 hour and we are in overlap\n                if (Math.abs(offsetLocal - offsetAdjusted) > DateTimeConstants.MILLIS_PER_HOUR &&\n                   (offsetLocal > offsetAdjusted)) {\n                    // we are in overlap and the time is ambiguous, so adjust it to the standard offset\n                    long nextTransition = nextTransition(instantAdjusted);\n                    long prevTransition = previousTransition(instantAdjusted);\n                    long diffNext = Math.abs((nextTransition - instantAdjusted));\n                    long diffPrev = Math.abs((instantAdjusted - prevTransition));\n                    int standardOffset = getStandardOffset(instantAdjusted);\n                    if (diffNext >= diffPrev) {\n                        if (getOffset(nextTransition) == standardOffset) {\n                            instantAdjusted = nextTransition;\n                        } else {\n                            instantAdjusted = prevTransition;\n                        }\n                    } else {\n                        if (getOffset(prevTransition) == standardOffset) {\n                            instantAdjusted = prevTransition;\n                        } else {\n                            instantAdjusted = nextTransition;\n                        }\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..21d8fdc6 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,28 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // if the offsets differ by more than 1 hour and we are in overlap\n+                if (Math.abs(offsetLocal - offsetAdjusted) > DateTimeConstants.MILLIS_PER_HOUR &&\n+                   (offsetLocal > offsetAdjusted)) {\n+                    // we are in overlap and the time is ambiguous, so adjust it to the standard offset\n+                    long nextTransition = nextTransition(instantAdjusted);\n+                    long prevTransition = previousTransition(instantAdjusted);\n+                    long diffNext = Math.abs((nextTransition - instantAdjusted));\n+                    long diffPrev = Math.abs((instantAdjusted - prevTransition));\n+                    int standardOffset = getStandardOffset(instantAdjusted);\n+                    if (diffNext >= diffPrev) {\n+                        if (getOffset(nextTransition) == standardOffset) {\n+                            instantAdjusted = nextTransition;\n+                        } else {\n+                            instantAdjusted = prevTransition;\n+                        }\n+                    } else {\n+                        if (getOffset(prevTransition) == standardOffset) {\n+                            instantAdjusted = prevTransition;\n+                        } else {\n+                            instantAdjusted = nextTransition;\n+                        }\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}