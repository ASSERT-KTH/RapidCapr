{
    "patch": "      if (NodeUtil.isLValue(parent)) {\n        Node target = NodeUtil.getBestLValueIndex(parent);\n        if (target != null && target.getType() == Token.GETPROP) {\n          Node propAccess = target;\n          while (propAccess.getType() == Token.GETPROP) {\n            propAccess = propAccess.getFirstChild();\n          }\n          if (propAccess.getType() == Token.NAME &&\n              \"prototype\".equals(propAccess.getString())) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..29ddef31 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,15 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isLValue(parent)) {\n+        Node target = NodeUtil.getBestLValueIndex(parent);\n+        if (target != null && target.getType() == Token.GETPROP) {\n+          Node propAccess = target;\n+          while (propAccess.getType() == Token.GETPROP) {\n+            propAccess = propAccess.getFirstChild();\n+          }\n+          if (propAccess.getType() == Token.NAME &&\n+              \"prototype\".equals(propAccess.getString())) {\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}