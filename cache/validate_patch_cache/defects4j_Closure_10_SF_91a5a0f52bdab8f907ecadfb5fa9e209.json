{
    "patch": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (!n.isString() && n.isTemplateLit()) {\n      return true;\n    }\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    } else {\n      return mayBeStringHelper(n);\n    }\n  }\n\n  private static Predicate<Node> MAY_BE_STRING_PREDICATE = n -> mayBeStringHelper(n);\n\n  private static boolean mayBeStringHelper(Node n) {\n    if (n.isString()) {\n      return true;\n    } else if (n.isArrayLit()) {\n      for (Node child : n.children()) {\n        if (!mayBeString(child, true)) {\n          return false;\n        }\n      }\n      return true;\n    } else if (n.isObjectLit()) {\n      for (Node child : n.children()) {\n        if (!mayBeString(child.getFirstChild())) {\n          return false;\n        }\n      }\n      return true;\n    } else if (n.isFunction()) {\n      return false;\n    } else {\n      return mayBeStringHelperGeneralCase(n);\n    }\n  }\n\n  private static boolean mayBeStringHelperGeneralCase(Node n) {\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n      if (mayBeString(child, true)) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..2e471481 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1413,6 +1413,9 @@ public final class NodeUtil {\n   }\n \n   static boolean mayBeString(Node n, boolean recurse) {\n+    if (!n.isString() && n.isTemplateLit()) {\n+      return true;\n+    }\n     if (recurse) {\n       return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n     } else {\n@@ -1420,6 +1423,41 @@ public final class NodeUtil {\n     }\n   }\n \n+  private static Predicate<Node> MAY_BE_STRING_PREDICATE = n -> mayBeStringHelper(n);\n+\n+  private static boolean mayBeStringHelper(Node n) {\n+    if (n.isString()) {\n+      return true;\n+    } else if (n.isArrayLit()) {\n+      for (Node child : n.children()) {\n+        if (!mayBeString(child, true)) {\n+          return false;\n+        }\n+      }\n+      return true;\n+    } else if (n.isObjectLit()) {\n+      for (Node child : n.children()) {\n+        if (!mayBeString(child.getFirstChild())) {\n+          return false;\n+        }\n+      }\n+      return true;\n+    } else if (n.isFunction()) {\n+      return false;\n+    } else {\n+      return mayBeStringHelperGeneralCase(n);\n+    }\n+  }\n+\n+  private static boolean mayBeStringHelperGeneralCase(Node n) {\n+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+      if (mayBeString(child, true)) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n   static boolean mayBeStringHelper(Node n) {\n     return !isNumericResult(n) && !isBooleanResult(n)\n         && !isUndefined(n) && !n.isNull();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}