{
    "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n        if (field.isAnnotationPresent(InjectMocks.class)) {\n            if (fieldInstance.getClass() != field.getType()) {\n                continue;\n            }\n            field.setAccessible(true);\n            try {\n                field.set(fieldInstance, mocks.stream()\n                        .filter(mockInstance -> field.getType().isAssignableFrom(mockInstance.getClass()))\n                        .findFirst()\n                        .orElse(null));\n            } catch (IllegalAccessException e) {\n                throw new RuntimeException(\"Unable to inject mock\");\n            }\n            break;\n        } else if (field.isAnnotationPresent(Mock.class)) {\n            Object mock = findMatchingMock(mocks, field);\n            if (mock != null) {\n                field.setAccessible(true);\n                try {\n                    field.set(fieldInstance, mock);\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(\"Unable to inject mock\");\n                }\n            }\n        }\n    }\n}\n\nprivate Object findMatchingMock(Set<Object> mocks, Field field) {\n    return mocks.stream()\n            .filter(mock -> field.getType().isAssignableFrom(mock.getClass()))\n            .findFirst()\n            .orElse(null);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..9db1c7be4 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,11 +88,43 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n-        }\n-    }\n+\n+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+        if (field.isAnnotationPresent(InjectMocks.class)) {\n+            if (fieldInstance.getClass() != field.getType()) {\n+                continue;\n+            }\n+            field.setAccessible(true);\n+            try {\n+                field.set(fieldInstance, mocks.stream()\n+                        .filter(mockInstance -> field.getType().isAssignableFrom(mockInstance.getClass()))\n+                        .findFirst()\n+                        .orElse(null));\n+            } catch (IllegalAccessException e) {\n+                throw new RuntimeException(\"Unable to inject mock\");\n+            }\n+            break;\n+        } else if (field.isAnnotationPresent(Mock.class)) {\n+            Object mock = findMatchingMock(mocks, field);\n+            if (mock != null) {\n+                field.setAccessible(true);\n+                try {\n+                    field.set(fieldInstance, mock);\n+                } catch (IllegalAccessException e) {\n+                    throw new RuntimeException(\"Unable to inject mock\");\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+private Object findMatchingMock(Set<Object> mocks, Field field) {\n+    return mocks.stream()\n+            .filter(mock -> field.getType().isAssignableFrom(mock.getClass()))\n+            .findFirst()\n+            .orElse(null);\n+}\n \n     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {\n         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();",
    "result_reason": "error: lambda expressions are not supported in -source 1.5",
    "test_result": "ERROR"
}