{
    "patch": "ObjectType thisType = null;\nif (functionType.getTypeOfThis() != null && functionType.getTypeOfThis() instanceof ObjectType) {\n  thisType = (ObjectType) functionType.getTypeOfThis();\n}\nif (thisType != null) {\n  if (child.isGetProp()) {\n    Node getPropFirstChild = child.getFirstChild();\n    JSType getPropFirstChildType = getJSType(getPropFirstChild);\n    JSType thisTypeAfterInstantiation = thisType.instantiateGenericsFromArgumentTypes(getPropFirstChild.getNext());\n    if (!thisTypeAfterInstantiation.isSubtypeOf(getPropFirstChildType)) {\n      warnings.add(\n          JSError.make(\n              THIS_TYPE_MISMATCH,\n              t.getSourceName(),\n              t.getLineNumber(n),\n              t.getCharno(n)));\n    }\n  } else if (child.isGetElem()) {\n    Node getElemFirstChild = child.getFirstChild();\n    JSType getElemFirstChildType = getJSType(getElemFirstChild);\n    JSType thisTypeAfterInstantiation = thisType.instantiateGenericsFromArgumentTypes(getElemFirstChild.getNext());\n    if (!thisTypeAfterInstantiation.isSubtypeOf(getElemFirstChildType)) {\n      warnings.add(\n          JSError.make(\n              THIS_TYPE_MISMATCH,\n              t.getSourceName(),\n              t.getLineNumber(n),\n              t.getCharno(n)));\n    }\n  } else {\n    report(t, child, MUST_BE_GET_OR_SET, \"'this' before calling a function with @this\");\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..a14d2321 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,39 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+ObjectType thisType = null;\n+if (functionType.getTypeOfThis() != null && functionType.getTypeOfThis() instanceof ObjectType) {\n+  thisType = (ObjectType) functionType.getTypeOfThis();\n+}\n+if (thisType != null) {\n+  if (child.isGetProp()) {\n+    Node getPropFirstChild = child.getFirstChild();\n+    JSType getPropFirstChildType = getJSType(getPropFirstChild);\n+    JSType thisTypeAfterInstantiation = thisType.instantiateGenericsFromArgumentTypes(getPropFirstChild.getNext());\n+    if (!thisTypeAfterInstantiation.isSubtypeOf(getPropFirstChildType)) {\n+      warnings.add(\n+          JSError.make(\n+              THIS_TYPE_MISMATCH,\n+              t.getSourceName(),\n+              t.getLineNumber(n),\n+              t.getCharno(n)));\n+    }\n+  } else if (child.isGetElem()) {\n+    Node getElemFirstChild = child.getFirstChild();\n+    JSType getElemFirstChildType = getJSType(getElemFirstChild);\n+    JSType thisTypeAfterInstantiation = thisType.instantiateGenericsFromArgumentTypes(getElemFirstChild.getNext());\n+    if (!thisTypeAfterInstantiation.isSubtypeOf(getElemFirstChildType)) {\n+      warnings.add(\n+          JSError.make(\n+              THIS_TYPE_MISMATCH,\n+              t.getSourceName(),\n+              t.getLineNumber(n),\n+              t.getCharno(n)));\n+    }\n+  } else {\n+    report(t, child, MUST_BE_GET_OR_SET, \"'this' before calling a function with @this\");\n+  }\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}