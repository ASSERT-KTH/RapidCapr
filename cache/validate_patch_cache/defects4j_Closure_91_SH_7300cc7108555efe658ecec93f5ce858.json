{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      Node grandParent = parent.getParent();\n      if (grandParent != null &&\n          (grandParent.getType() == Token.ASSIGN ||\n           grandParent.getType() == Token.VAR)) {\n        Node calleeNode = parent.getFirstChild();\n        boolean isPrototypeAssignment =\n            calleeNode.getType() == Token.GETPROP &&\n            calleeNode.getLastChild().getString().equals(\"prototype\");\n        if (isPrototypeAssignment) {\n          Node lhs = grandParent.getFirstChild();\n          while (lhs.getType() == Token.ASSIGN) {\n            lhs = lhs.getFirstChild();\n          }\n          boolean shouldTraverse = false;\n          if (NodeUtil.isThis(lhs) || NodeUtil.isName(lhs)) {\n            String lhsName = lhs.getString();\n            Node target = calleeNode.getFirstChild();\n            String targetQualified = target.getQualifiedName();\n            // Check if target is global or built-in object (although not foolproof)\n            boolean isGlobalOrBuiltIn =\n                targetQualified == null || targetQualified.isEmpty() ||\n                targetQualified.startsWith(\"jspb\") || // Google Closure Library\n                targetQualified.startsWith(\"goog\") || // Google Closure Library\n                targetQualified.startsWith(\"Global\") || // xregexp\n                targetQualified.startsWith(\"RegExp\") ||\n                targetQualified.startsWith(\"Math\") ||\n                targetQualified.startsWith(\"Array\") ||\n                targetQualified.startsWith(\"Date\") ||\n                targetQualified.startsWith(\"Object\") ||\n                targetQualified.startsWith(\"Function\") ||\n                targetQualified.startsWith(\"console\"); // commonly used global\n            if (!isGlobalOrBuiltIn) {\n              shouldTraverse = true;\n            } else if (target.getType() == Token.NAME &&\n                       target.getString().equals(\"Object\")) {\n              shouldTraverse = lhsName.equals(\"Number\") ||\n                                lhsName.equals(\"Boolean\") ||\n                                lhsName.equals(\"String\");\n            }\n          }\n          if (!shouldTraverse) {\n            return false;\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..63ba0b70 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,52 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      Node grandParent = parent.getParent();\n+      if (grandParent != null &&\n+          (grandParent.getType() == Token.ASSIGN ||\n+           grandParent.getType() == Token.VAR)) {\n+        Node calleeNode = parent.getFirstChild();\n+        boolean isPrototypeAssignment =\n+            calleeNode.getType() == Token.GETPROP &&\n+            calleeNode.getLastChild().getString().equals(\"prototype\");\n+        if (isPrototypeAssignment) {\n+          Node lhs = grandParent.getFirstChild();\n+          while (lhs.getType() == Token.ASSIGN) {\n+            lhs = lhs.getFirstChild();\n+          }\n+          boolean shouldTraverse = false;\n+          if (NodeUtil.isThis(lhs) || NodeUtil.isName(lhs)) {\n+            String lhsName = lhs.getString();\n+            Node target = calleeNode.getFirstChild();\n+            String targetQualified = target.getQualifiedName();\n+            // Check if target is global or built-in object (although not foolproof)\n+            boolean isGlobalOrBuiltIn =\n+                targetQualified == null || targetQualified.isEmpty() ||\n+                targetQualified.startsWith(\"jspb\") || // Google Closure Library\n+                targetQualified.startsWith(\"goog\") || // Google Closure Library\n+                targetQualified.startsWith(\"Global\") || // xregexp\n+                targetQualified.startsWith(\"RegExp\") ||\n+                targetQualified.startsWith(\"Math\") ||\n+                targetQualified.startsWith(\"Array\") ||\n+                targetQualified.startsWith(\"Date\") ||\n+                targetQualified.startsWith(\"Object\") ||\n+                targetQualified.startsWith(\"Function\") ||\n+                targetQualified.startsWith(\"console\"); // commonly used global\n+            if (!isGlobalOrBuiltIn) {\n+              shouldTraverse = true;\n+            } else if (target.getType() == Token.NAME &&\n+                       target.getString().equals(\"Object\")) {\n+              shouldTraverse = lhsName.equals(\"Number\") ||\n+                                lhsName.equals(\"Boolean\") ||\n+                                lhsName.equals(\"String\");\n+            }\n+          }\n+          if (!shouldTraverse) {\n+            return false;\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 110 expected:<0> but was:<1>",
    "test_result": "FAIL"
}