{
    "patch": "        ObjectPropertyNamingProps objectPropertyNaming =\n            compiler.getOptions().getObjectPropertyNamingProps();\n        String name = child.getString();\n        T type = typeSystem.getType(getScope(), n, name);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(\n            child,\n            processProperty(t, prop, type, objectPropertyNaming))) {\n\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(\n                JSError.make(\n                    t.getSourceName(),\n                    child,\n                    propertiesToErrorFor.get(name),\n                    Warnings.INVALIDATION,\n                    name,\n                    (type == null ? \"null\" : type.toString()),\n                    n.toString(),\n                    \"\"));\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..ea447bf1 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,29 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+        ObjectPropertyNamingProps objectPropertyNaming =\n+            compiler.getOptions().getObjectPropertyNamingProps();\n+        String name = child.getString();\n+        T type = typeSystem.getType(getScope(), n, name);\n+\n+        Property prop = getProperty(name);\n+        if (!prop.scheduleRenaming(\n+            child,\n+            processProperty(t, prop, type, objectPropertyNaming))) {\n+\n+          if (propertiesToErrorFor.containsKey(name)) {\n+            compiler.report(\n+                JSError.make(\n+                    t.getSourceName(),\n+                    child,\n+                    propertiesToErrorFor.get(name),\n+                    Warnings.INVALIDATION,\n+                    name,\n+                    (type == null ? \"null\" : type.toString()),\n+                    n.toString(),\n+                    \"\"));\n+          }\n+        }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}