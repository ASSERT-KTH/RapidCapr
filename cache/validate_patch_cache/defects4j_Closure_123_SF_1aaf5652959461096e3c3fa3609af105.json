{
    "patch": "public String fixCode(String code) {\n    int index = code.indexOf(\"for(\");\n    if (index == -1) {\n        return code;\n    }\n    int end = findMatchingClosingParenthesis(code, index + 3);\n    String forLoop = code.substring(index, end + 1);\n    String[] segments = forLoop.split(\";\");\n    if (segments.length < 2 || segments.length > 3) {\n        return code;\n    }\n    String condition = segments[1];\n    if (isInOperatorInForLoop(condition)) {\n        String fixedCode = code.substring(0, index) + \"for(\" + fixInOperatorInForLoop(condition);\n        if (segments.length == 2) {\n            fixedCode += \";\" + code.substring(end + 1);\n        } else {\n            fixedCode += \";\" + segments[2] + \";\" + code.substring(end + 1);\n        }\n        return fixedCode;\n    } else {\n        return code;\n    }\n}\n\nprivate static boolean isInOperatorInForLoop(String condition) {\n    String[] tokens = condition.split(\" \");\n    if (tokens.length != 3) {\n        return false;\n    }\n    return tokens[1].equals(\"in\") && tokens[0].matches(\".+\\\\[.+]\") && tokens[2].matches(\".+\\\\(?.*\\\\)?.*\");\n}\n\nprivate static String fixInOperatorInForLoop(String condition) {\n    String[] tokens = condition.split(\" \");\n    String array = tokens[0];\n    String variable = tokens[2];\n    String fixedArray = array.replace(\"[\", \"\");\n    fixedArray = fixedArray.replace(\"]\", \"\");\n    fixedArray = \"(\" + fixedArray + \".indexOf(\" + variable + \") != -1)\";\n    return fixedArray;\n}\n\nprivate static int findMatchingClosingParenthesis(String code, int openingParen) {\n    int count = 1;\n    for (int i = openingParen; i < code.length(); i++) {\n        if (code.charAt(i) == '(') {\n            count++;\n        } else if (code.charAt(i) == ')') {\n            count--;\n        }\n        if (count == 0) {\n            return i;\n        }\n    }\n    return -1;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..83c47e1d 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,63 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+    int index = code.indexOf(\"for(\");\n+    if (index == -1) {\n+        return code;\n+    }\n+    int end = findMatchingClosingParenthesis(code, index + 3);\n+    String forLoop = code.substring(index, end + 1);\n+    String[] segments = forLoop.split(\";\");\n+    if (segments.length < 2 || segments.length > 3) {\n+        return code;\n+    }\n+    String condition = segments[1];\n+    if (isInOperatorInForLoop(condition)) {\n+        String fixedCode = code.substring(0, index) + \"for(\" + fixInOperatorInForLoop(condition);\n+        if (segments.length == 2) {\n+            fixedCode += \";\" + code.substring(end + 1);\n+        } else {\n+            fixedCode += \";\" + segments[2] + \";\" + code.substring(end + 1);\n+        }\n+        return fixedCode;\n+    } else {\n+        return code;\n+    }\n+}\n+\n+private static boolean isInOperatorInForLoop(String condition) {\n+    String[] tokens = condition.split(\" \");\n+    if (tokens.length != 3) {\n+        return false;\n+    }\n+    return tokens[1].equals(\"in\") && tokens[0].matches(\".+\\\\[.+]\") && tokens[2].matches(\".+\\\\(?.*\\\\)?.*\");\n+}\n+\n+private static String fixInOperatorInForLoop(String condition) {\n+    String[] tokens = condition.split(\" \");\n+    String array = tokens[0];\n+    String variable = tokens[2];\n+    String fixedArray = array.replace(\"[\", \"\");\n+    fixedArray = fixedArray.replace(\"]\", \"\");\n+    fixedArray = \"(\" + fixedArray + \".indexOf(\" + variable + \") != -1)\";\n+    return fixedArray;\n+}\n+\n+private static int findMatchingClosingParenthesis(String code, int openingParen) {\n+    int count = 1;\n+    for (int i = openingParen; i < code.length(); i++) {\n+        if (code.charAt(i) == '(') {\n+            count++;\n+        } else if (code.charAt(i) == ')') {\n+            count--;\n+        }\n+        if (count == 0) {\n+            return i;\n+        }\n+    }\n+    return -1;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}