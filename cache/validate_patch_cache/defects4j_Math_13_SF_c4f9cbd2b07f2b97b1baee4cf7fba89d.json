{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final EigenDecomposition dec;\n    if (n <= 200) {\n        dec = new EigenDecomposition(m);\n    } else {\n        final RealMatrix v = MatrixUtils.createRealMatrix(n, n);\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                v.setEntry(i, j, m.getEntry(i, j) * FastMath.sqrt(n));\n            }\n        }\n        final RealMatrix scaled = v.multiply(v.transpose());\n        dec = new EigenDecomposition(scaled);\n    }\n    return dec.getSquareRoot();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..25231c47e 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,21 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition dec;\n+    if (n <= 200) {\n+        dec = new EigenDecomposition(m);\n+    } else {\n+        final RealMatrix v = MatrixUtils.createRealMatrix(n, n);\n+        for (int i = 0; i < n; i++) {\n+            for (int j = 0; j < n; j++) {\n+                v.setEntry(i, j, m.getEntry(i, j) * FastMath.sqrt(n));\n+            }\n+        }\n+        final RealMatrix scaled = v.multiply(v.transpose());\n+        dec = new EigenDecomposition(scaled);\n     }\n+    return dec.getSquareRoot();\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}