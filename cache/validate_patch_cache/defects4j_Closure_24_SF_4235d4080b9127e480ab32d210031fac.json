{
    "patch": "        if (n == null) {\n          continue;\n        }\n        Node parent = n.getParent();\n        if (parent.isVar()) {\n          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n            String name = n.getString();\n            Var aliasVar = scope.getVar(name);\n            AliasKey key = new AliasKey(scope, n);\n            aliases.put(key, aliasVar);\n  \n            String qualifiedName =\n                aliasVar.getInitialValue().getQualifiedName();\n            transformation.addAlias(key, qualifiedName);\n          } else {\n            report(\n                t,\n                n,\n                CheckLevel.WARNING,\n                GOOG_SCOPE_ALIAS_CYCLE,\n                \"Alias definitions must have qualified names. Found \" +\n                name);\n          }\n        } else if (!NodeUtil.isLhsByDestructuring(parent)) {\n          report(\n              t,\n              n,\n              CheckLevel.WARNING,\n              GOOG_SCOPE_NON_ALIAS_LOCAL,\n              \"Aliased symbols must be declared with var or let. Found \" +\n              \"assignment expression on line \" +\n              parent.getLineno());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..d5e48d7f 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,38 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n+        if (n == null) {\n+          continue;\n+        }\n         Node parent = n.getParent();\n         if (parent.isVar()) {\n           if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n-        }\n-      }\n-    }\n+            String name = n.getString();\n+            Var aliasVar = scope.getVar(name);\n+            AliasKey key = new AliasKey(scope, n);\n+            aliases.put(key, aliasVar);\n+  \n+            String qualifiedName =\n+                aliasVar.getInitialValue().getQualifiedName();\n+            transformation.addAlias(key, qualifiedName);\n+          } else {\n+            report(\n+                t,\n+                n,\n+                CheckLevel.WARNING,\n+                GOOG_SCOPE_ALIAS_CYCLE,\n+                \"Alias definitions must have qualified names. Found \" +\n+                name);\n+          }\n+        } else if (!NodeUtil.isLhsByDestructuring(parent)) {\n+          report(\n+              t,\n+              n,\n+              CheckLevel.WARNING,\n+              GOOG_SCOPE_NON_ALIAS_LOCAL,\n+              \"Aliased symbols must be declared with var or let. Found \" +\n+              \"assignment expression on line \" +\n+              parent.getLineno());\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}