{
    "patch": "public boolean getprop(String key) {\n    boolean result = false;\n    try {\n        Runtime rt = Runtime.getRuntime();\n        Process proc = rt.exec(\"getprop \" + key);\n        InputStream stdin = proc.getInputStream();\n        InputStreamReader isr = new InputStreamReader(stdin);\n        BufferedReader br = new BufferedReader(isr);\n        String line = null;\n        while ((line = br.readLine()) != null) {\n            // There should only be one line, so this will be the last one\n            if (line.length() > 0) {\n                String value = line.trim();\n                if (value.equals(\"true\") || value.equals(\"false\")) {\n                    result = Boolean.valueOf(value);\n                }\n            }\n        }\n        br.close();\n        isr.close();\n        stdin.close();\n        proc.destroy();\n    } catch (Exception ex) {\n        System.err.println(\"Exception in getprop: \" + ex.getMessage());\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..03907564 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,33 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public boolean getprop(String key) {\n+    boolean result = false;\n+    try {\n+        Runtime rt = Runtime.getRuntime();\n+        Process proc = rt.exec(\"getprop \" + key);\n+        InputStream stdin = proc.getInputStream();\n+        InputStreamReader isr = new InputStreamReader(stdin);\n+        BufferedReader br = new BufferedReader(isr);\n+        String line = null;\n+        while ((line = br.readLine()) != null) {\n+            // There should only be one line, so this will be the last one\n+            if (line.length() > 0) {\n+                String value = line.trim();\n+                if (value.equals(\"true\") || value.equals(\"false\")) {\n+                    result = Boolean.valueOf(value);\n+                }\n+            }\n+        }\n+        br.close();\n+        isr.close();\n+        stdin.close();\n+        proc.destroy();\n+    } catch (Exception ex) {\n+        System.err.println(\"Exception in getprop: \" + ex.getMessage());\n+    }\n+    return result;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}