{
    "patch": "import org.apache.commons.math3.stat.inference.TestUtils;\nimport org.apache.commons.math3.special.Gamma;\n\n/**\n * Returns the regularized gamma function P(a, x).\n * @param a a positive real number\n * @param x a non-negative real number\n * @return the regularized gamma function P(a, x)\n */\npublic static double regularizedGamma(double a, double x) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException(\"Invalid arguments for the regularized gamma function.\");\n    }\n    double gamma = Gamma.gamma(a);\n    double incompleteGamma = Gamma.regularizedGammaP(a, x);\n    return incompleteGamma * gamma;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..eb5e257d3 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,23 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.stat.inference.TestUtils;\n+import org.apache.commons.math3.special.Gamma;\n+\n+/**\n+ * Returns the regularized gamma function P(a, x).\n+ * @param a a positive real number\n+ * @param x a non-negative real number\n+ * @return the regularized gamma function P(a, x)\n+ */\n+public static double regularizedGamma(double a, double x) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException(\"Invalid arguments for the regularized gamma function.\");\n+    }\n+    double gamma = Gamma.gamma(a);\n+    double incompleteGamma = Gamma.regularizedGammaP(a, x);\n+    return incompleteGamma * gamma;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}