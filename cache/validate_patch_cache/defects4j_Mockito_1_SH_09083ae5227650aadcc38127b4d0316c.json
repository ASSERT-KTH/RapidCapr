{
    "patch": "        if (invocation.getMethod().isVarArgs()) {\n            int indexOfVararg = invocation.getRawArguments().length - 1;\n\n            // We don't support capturing varargs\n            if (isVariableArgument(invocation, indexOfVararg)) {\n                throw new UnsupportedOperationException(\"Cannot capture varargs\");\n            }\n            Matcher m = matchers.get(indexOfVararg);\n            if (m instanceof CapturesArguments) {\n                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(indexOfVararg, Object.class));\n            }\n        } else {\n            for (int position = 0; position < matchers.size(); position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..e8c0baf48 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,25 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+        if (invocation.getMethod().isVarArgs()) {\n+            int indexOfVararg = invocation.getRawArguments().length - 1;\n+\n+            // We don't support capturing varargs\n+            if (isVariableArgument(invocation, indexOfVararg)) {\n+                throw new UnsupportedOperationException(\"Cannot capture varargs\");\n+            }\n+            Matcher m = matchers.get(indexOfVararg);\n+            if (m instanceof CapturesArguments) {\n+                ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(indexOfVararg, Object.class));\n+            }\n+        } else {\n+            for (int position = 0; position < matchers.size(); position++) {\n+                Matcher m = matchers.get(position);\n+                if (m instanceof CapturesArguments) {\n+                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n+                }\n+            }\n+        }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: variable indexOfVararg is already defined in method captureArgumentsFrom(Invocation)",
    "test_result": "ERROR"
}