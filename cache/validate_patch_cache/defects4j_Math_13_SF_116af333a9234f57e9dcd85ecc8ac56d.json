{
    "patch": "        try {\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n        } catch (OutOfMemoryError e) {\n            // Increase heap size and try again\n            final int maxMemory = (int) (Runtime.getRuntime().maxMemory() / (1024 * 1024));\n            final int newMemory = Math.min(maxMemory, 2048);\n            final long newMemoryBytes = newMemory * 1024L * 1024L;\n            System.gc();\n            System.runFinalization();\n            System.gc();\n            final long currentFreeMemory = Runtime.getRuntime().freeMemory();\n            final long memoryToAllocate = newMemoryBytes - currentFreeMemory;\n            if (memoryToAllocate > 0) {\n                final byte[] allocation;\n                try {\n                    allocation = new byte[(int) memoryToAllocate];\n                } catch (OutOfMemoryError ex) {\n                    // Unable to allocate memory even with larger heap size\n                    throw e;\n                }\n            }\n            // Try again\n            return squareRoot(m);\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..3759bcc14 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,29 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n+        try {\n             final EigenDecomposition dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n-    }\n+        } catch (OutOfMemoryError e) {\n+            // Increase heap size and try again\n+            final int maxMemory = (int) (Runtime.getRuntime().maxMemory() / (1024 * 1024));\n+            final int newMemory = Math.min(maxMemory, 2048);\n+            final long newMemoryBytes = newMemory * 1024L * 1024L;\n+            System.gc();\n+            System.runFinalization();\n+            System.gc();\n+            final long currentFreeMemory = Runtime.getRuntime().freeMemory();\n+            final long memoryToAllocate = newMemoryBytes - currentFreeMemory;\n+            if (memoryToAllocate > 0) {\n+                final byte[] allocation;\n+                try {\n+                    allocation = new byte[(int) memoryToAllocate];\n+                } catch (OutOfMemoryError ex) {\n+                    // Unable to allocate memory even with larger heap size\n+                    throw e;\n+                }\n+            }\n+            // Try again\n+            return squareRoot(m);\n+        }\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}