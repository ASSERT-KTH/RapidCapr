{
    "patch": "if (this.ftype instanceof FunctionTypeI &&\n    ((FunctionTypeI) this.ftype).getFunctionNodeType() == Token.FUNCTION) {\n  FunctionTypeI functionTypeI = (FunctionTypeI) this.ftype;\n  if (functionTypeI.getNumParams() == 0 &&\n        functionTypeI.isReturnTypeInferred()) {\n    return;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..d079a119 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,14 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+if (this.ftype instanceof FunctionTypeI &&\n+    ((FunctionTypeI) this.ftype).getFunctionNodeType() == Token.FUNCTION) {\n+  FunctionTypeI functionTypeI = (FunctionTypeI) this.ftype;\n+  if (functionTypeI.getNumParams() == 0 &&\n+        functionTypeI.isReturnTypeInferred()) {\n+    return;\n+  }\n+}\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}