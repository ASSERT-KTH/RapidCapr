{
    "patch": "// Remove any unreferenced parameters from the beginning of the argument list.\nNode argsNode = getFunctionArgList(fnNode);\nSet<String> referencedArgs = new HashSet<>();\nfor (Var var : referenced) {\n  referencedArgs.add(var.name);\n}\nfor (Node arg : argsNode.children()) {\n  String argName = arg.getString();\n  if (!referencedArgs.contains(argName)) {\n    argsNode.removeChild(arg);\n    compiler.reportChangeToEnclosingScope(argsNode);\n  } else {\n    break;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..ac985d57 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,21 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Remove any unreferenced parameters from the beginning of the argument list.\n+Node argsNode = getFunctionArgList(fnNode);\n+Set<String> referencedArgs = new HashSet<>();\n+for (Var var : referenced) {\n+  referencedArgs.add(var.name);\n+}\n+for (Node arg : argsNode.children()) {\n+  String argName = arg.getString();\n+  if (!referencedArgs.contains(argName)) {\n+    argsNode.removeChild(arg);\n+    compiler.reportChangeToEnclosingScope(argsNode);\n+  } else {\n+    break;\n+  }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}