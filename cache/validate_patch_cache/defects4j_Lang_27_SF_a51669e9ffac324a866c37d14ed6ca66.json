{
    "patch": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    if (str.startsWith(\"--\")) {\n        // this is protection for poorness in java.lang.BigDecimal.\n        // it accepts this as a legal value, but it does not appear \n        // to be in specification of class. OS X Java parses it to \n        // a wrong value.\n        return null;\n    }\n\n    char lastChar = str.charAt(str.length() - 1);\n    String mant;\n    String dec;\n    String exp;\n\n    boolean floatingPointNumber = false;\n    int decPos = str.indexOf('.');\n    int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n\n    if (decPos > -1 || expPos > -1) {\n        // This is a floating point number.\n        floatingPointNumber = true;\n\n        if (decPos > -1 && expPos > -1) {\n            if (expPos < decPos) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            exp = str.substring(expPos);\n            dec = str.substring(decPos + 1, expPos);\n            mant = str.substring(0, decPos);\n        } else if (decPos > -1) {\n            dec = str.substring(decPos + 1);\n            mant = str.substring(0, decPos);\n            exp = null;\n        } else {\n            exp = str.substring(expPos);\n            mant = str.substring(0, expPos);\n            dec = null;\n        }\n    } else {\n        mant = str;\n        dec = null;\n        exp = null;\n    }\n\n    // Handle non-floating point numbers.\n    if (!floatingPointNumber) {\n        if (!Character.isDigit(lastChar)) {\n            if (lastChar == 'f' || lastChar == 'F') {\n                try {\n                    return NumberUtils.createFloat(str);\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                //$FALL-THROUGH$\n            } else if (lastChar == 'l' || lastChar == 'L') {\n                try {\n                    return NumberUtils.createLong(str.substring(0, str.length() - 1));\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                return NumberUtils.createBigInteger(str.substring(0, str.length() - 1));\n            }\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        } else {\n            // Try to parse as an integer.\n            try {\n                return NumberUtils.createInteger(str);\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n\n            // Try to parse as a long.\n            try {\n                return NumberUtils.createLong(str);\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n\n            // Try to parse as a BigInteger.\n            return NumberUtils.createBigInteger(str);\n        }\n    }\n\n    // Handle floating point numbers.\n    if (!Character.isDigit(lastChar)) {\n        if (lastChar == 'f' || lastChar == 'F') {\n            try {\n                Float f = NumberUtils.createFloat(str);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !isAllZeros(mant) && !isAllZeros(exp)))) {\n                    return f;\n                }\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n        } else if (lastChar == 'd' || lastChar == 'D') {\n            try {\n                Double d = NumberUtils.createDouble(str);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !isAllZeros(mant) && !isAllZeros(exp)))) {\n                    return d;\n                }\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n            try {\n                return NumberUtils.createBigDecimal(str);\n            } catch (NumberFormatException e) {\n                // ignore the bad number\n            }\n        }\n        throw new NumberFormatException(str + \" is not a valid number.\");\n    } else {\n        // Try to parse as a BigDecimal.\n        try {\n            BigDecimal bd = new BigDecimal(str);\n            if (!(bd.doubleValue() == 0.0D && !isAllZeros(mant) && !isAllZeros(exp))) {\n                return bd;\n            }\n        } catch (NumberFormatException nfe) {\n            // ignore the bad number\n        }\n\n        // Try to parse as a Double.\n        try {\n            Double d = Double.valueOf(str);\n            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !isAllZeros(mant) && !isAllZeros(exp)))) {\n                return d;\n            }\n        } catch (NumberFormatException nfe) {\n            // ignore the bad number\n        }\n\n        // Try to parse as a Float.\n        try {\n            Float f = Float.valueOf(str);\n            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !isAllZeros(mant) && !isAllZeros(exp)))) {\n                return f;\n            }\n        } catch (NumberFormatException nfe) {\n            // ignore the bad number\n        }\n\n        throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex fd03ab8f..c8574676 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -449,154 +449,156 @@ public class NumberUtils {\n      * @return Number created from the string\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(String str) throws NumberFormatException {\n-        if (str == null) {\n-            return null;\n-        }\n-        if (StringUtils.isBlank(str)) {\n-            throw new NumberFormatException(\"A blank string is not a valid number\");\n-        }  \n-        if (str.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n-        }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n-            return createInteger(str);\n-        }   \n-        char lastChar = str.charAt(str.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        int decPos = str.indexOf('.');\n-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n-\n-        if (decPos > -1) {\n-\n-            if (expPos > -1) {\n-                if (expPos < decPos) {\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                dec = str.substring(decPos + 1, expPos);\n-            } else {\n-                dec = str.substring(decPos + 1);\n+public static Number createNumber(String str) throws NumberFormatException {\n+    if (str == null) {\n+        return null;\n+    }\n+    if (StringUtils.isBlank(str)) {\n+        throw new NumberFormatException(\"A blank string is not a valid number\");\n+    }\n+    if (str.startsWith(\"--\")) {\n+        // this is protection for poorness in java.lang.BigDecimal.\n+        // it accepts this as a legal value, but it does not appear \n+        // to be in specification of class. OS X Java parses it to \n+        // a wrong value.\n+        return null;\n+    }\n+\n+    char lastChar = str.charAt(str.length() - 1);\n+    String mant;\n+    String dec;\n+    String exp;\n+\n+    boolean floatingPointNumber = false;\n+    int decPos = str.indexOf('.');\n+    int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n+\n+    if (decPos > -1 || expPos > -1) {\n+        // This is a floating point number.\n+        floatingPointNumber = true;\n+\n+        if (decPos > -1 && expPos > -1) {\n+            if (expPos < decPos) {\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n             }\n+            exp = str.substring(expPos);\n+            dec = str.substring(decPos + 1, expPos);\n             mant = str.substring(0, decPos);\n+        } else if (decPos > -1) {\n+            dec = str.substring(decPos + 1);\n+            mant = str.substring(0, decPos);\n+            exp = null;\n         } else {\n-            if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n-            } else {\n-                mant = str;\n-            }\n+            exp = str.substring(expPos);\n+            mant = str.substring(0, expPos);\n             dec = null;\n         }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            String numeric = str.substring(0, str.length() - 1);\n-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (NumberFormatException nfe) {\n-                            //Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n-\n-                    }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n-\n-                    } catch (NumberFormatException nfe) {\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (NumberFormatException nfe) {\n-                        // ignore the bad number\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (NumberFormatException e) {\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+    } else {\n+        mant = str;\n+        dec = null;\n+        exp = null;\n+    }\n \n-            }\n-        } else {\n-            //User doesn't have a preference on the return type, so let's start\n-            //small and go from there...\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length());\n-            } else {\n-                exp = null;\n-            }\n-            if (dec == null && exp == null) {\n-                //Must be an int,long,bigint\n+    // Handle non-floating point numbers.\n+    if (!floatingPointNumber) {\n+        if (!Character.isDigit(lastChar)) {\n+            if (lastChar == 'f' || lastChar == 'F') {\n                 try {\n-                    return createInteger(str);\n+                    return NumberUtils.createFloat(str);\n                 } catch (NumberFormatException nfe) {\n                     // ignore the bad number\n                 }\n+                //$FALL-THROUGH$\n+            } else if (lastChar == 'l' || lastChar == 'L') {\n                 try {\n-                    return createLong(str);\n+                    return NumberUtils.createLong(str.substring(0, str.length() - 1));\n                 } catch (NumberFormatException nfe) {\n                     // ignore the bad number\n                 }\n-                return createBigInteger(str);\n+                return NumberUtils.createBigInteger(str.substring(0, str.length() - 1));\n+            }\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n+        } else {\n+            // Try to parse as an integer.\n+            try {\n+                return NumberUtils.createInteger(str);\n+            } catch (NumberFormatException nfe) {\n+                // ignore the bad number\n+            }\n \n-            } else {\n-                //Must be a float,double,BigDec\n-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-                try {\n-                    Float f = createFloat(str);\n-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                        return f;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n+            // Try to parse as a long.\n+            try {\n+                return NumberUtils.createLong(str);\n+            } catch (NumberFormatException nfe) {\n+                // ignore the bad number\n+            }\n+\n+            // Try to parse as a BigInteger.\n+            return NumberUtils.createBigInteger(str);\n+        }\n+    }\n+\n+    // Handle floating point numbers.\n+    if (!Character.isDigit(lastChar)) {\n+        if (lastChar == 'f' || lastChar == 'F') {\n+            try {\n+                Float f = NumberUtils.createFloat(str);\n+                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !isAllZeros(mant) && !isAllZeros(exp)))) {\n+                    return f;\n                 }\n-                try {\n-                    Double d = createDouble(str);\n-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n+            } catch (NumberFormatException nfe) {\n+                // ignore the bad number\n+            }\n+        } else if (lastChar == 'd' || lastChar == 'D') {\n+            try {\n+                Double d = NumberUtils.createDouble(str);\n+                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !isAllZeros(mant) && !isAllZeros(exp)))) {\n+                    return d;\n                 }\n+            } catch (NumberFormatException nfe) {\n+                // ignore the bad number\n+            }\n+            try {\n+                return NumberUtils.createBigDecimal(str);\n+            } catch (NumberFormatException e) {\n+                // ignore the bad number\n+            }\n+        }\n+        throw new NumberFormatException(str + \" is not a valid number.\");\n+    } else {\n+        // Try to parse as a BigDecimal.\n+        try {\n+            BigDecimal bd = new BigDecimal(str);\n+            if (!(bd.doubleValue() == 0.0D && !isAllZeros(mant) && !isAllZeros(exp))) {\n+                return bd;\n+            }\n+        } catch (NumberFormatException nfe) {\n+            // ignore the bad number\n+        }\n \n-                return createBigDecimal(str);\n+        // Try to parse as a Double.\n+        try {\n+            Double d = Double.valueOf(str);\n+            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !isAllZeros(mant) && !isAllZeros(exp)))) {\n+                return d;\n+            }\n+        } catch (NumberFormatException nfe) {\n+            // ignore the bad number\n+        }\n \n+        // Try to parse as a Float.\n+        try {\n+            Float f = Float.valueOf(str);\n+            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !isAllZeros(mant) && !isAllZeros(exp)))) {\n+                return f;\n             }\n+        } catch (NumberFormatException nfe) {\n+            // ignore the bad number\n         }\n+\n+        throw new NumberFormatException(str + \" is not a valid number.\");\n     }\n+}\n \n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>",
    "result_reason": "junit.framework.AssertionFailedError: createNumber(String) 1 failed expected:<1234.5> but was:<1234.5>",
    "test_result": "FAIL"
}