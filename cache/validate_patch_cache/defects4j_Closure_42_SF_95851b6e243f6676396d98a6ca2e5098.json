{
    "patch": "import org.mozilla.javascript.ErrorReporter;\nimport org.mozilla.javascript.Node;\nimport org.mozilla.javascript.Token;\nimport org.mozilla.javascript.ast.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass TransformDispatcher implements NodeVisitor {\n\n    private static final String ALLOWED_DIRECTIVES = \"__allow_directive__\";\n    private static final String SECRET_FLAG_PREFIX = \"zj\";\n\n    private final ErrorReporter errorReporter;\n    private final String sourceName;\n\n    public TransformDispatcher(ErrorReporter errorReporter, String sourceName) {\n        this.errorReporter = errorReporter;\n        this.sourceName = sourceName;\n    }\n\n    protected Node newNode(int type) {\n        return new Node(type);\n    }\n\n    protected Node newNode(int type, AstNode child) {\n        Node n = new Node(type);\n        n.addChildToBack(transform(child));\n        return n;\n    }\n\n    protected Node newNode(int type, AstNode child1, AstNode child2) {\n        Node n = new Node(type);\n        n.addChildToBack(transform(child1));\n        n.addChildToBack(transform(child2));\n        return n;\n    }\n\n    protected Node newNode(int type, AstNode child1, AstNode child2, AstNode child3) {\n        Node n = new Node(type);\n        n.addChildToBack(transform(child1));\n        n.addChildToBack(transform(child2));\n        n.addChildToBack(transform(child3));\n        return n;\n    }\n\n    protected Node transformGeneric(AstNode n) {\n        if (n == null) return newNode(Token.EMPTY);\n\n        if (n instanceof Name) {\n            Name name = (Name) n;\n            Node node = new Node(Token.NAME, name.getIdentifier());\n\n            if (isDirective(n.getParent())) {\n                node.putIntProp(Node.IS_DIRECTIVE, 1);\n            }\n\n            return node;\n        }\n\n        if (n instanceof ParenthesizedExpression) {\n            return transform(((ParenthesizedExpression) n).getExpression());\n        }\n\n        if (n instanceof StringLiteral) {\n            return new Node(Token.STRING, n.getString());\n        }\n        if (n instanceof NumberLiteral) {\n            return Node.newNumber(n.getDouble());\n        }\n        if (n instanceof FunctionNode) {\n            return processFunction((FunctionNode) n);\n        }\n        if (n instanceof ReturnStatement) {\n            return processReturnStatement((ReturnStatement) n);\n        }\n        if (n instanceof IfStatement) {\n            return processIfStatement((IfStatement) n);\n        }\n        if (n instanceof SwitchStatement) {\n            return processSwitchStatement((SwitchStatement) n);\n        }\n        if (n instanceof CaseClause) {\n            return processCaseClause((CaseClause) n);\n        }\n        if (n instanceof BreakStatement) {\n            return processBreakStatement((BreakStatement) n);\n        }\n        if (n instanceof ContinueStatement) {\n            return processContinueStatement((ContinueStatement) n);\n        }\n        if (n instanceof DoLoop) {\n            return processDoLoop((DoLoop) n);\n        }\n        if (n instanceof WhileLoop) {\n            return processWhileLoop((WhileLoop) n);\n        }\n        if (n instanceof ForLoop) {\n            return processForLoop((ForLoop) n);\n        }\n        if (n instanceof ForInLoop) {\n            return processForInLoop((ForInLoop) n);\n        }\n        if (n instanceof VariableDeclaration) {\n            return processVariableDeclaration((VariableDeclaration) n);\n        }\n        if (n instanceof FunctionCall) {\n            return processFunctionCall((FunctionCall) n);\n        }\n        if (n instanceof PropertyGet) {\n            return processPropertyGet((PropertyGet) n);\n        }\n        if (n instanceof ElementGet) {\n            return processElementGet((ElementGet) n);\n        }\n        if (n instanceof ExpressionStatement) {\n            return processExpressionStatement((ExpressionStatement) n);\n        }\n        if (n instanceof TryStatement) {\n            return processTryStatement((TryStatement) n);\n        }\n        if (n instanceof ThrowStatement) {\n            return processThrowStatement((ThrowStatement) n);\n        }\n        if (n instanceof UnaryExpression) {\n            return processUnaryExpression((UnaryExpression) n);\n        }\n        if (n instanceof InfixExpression) {\n            return processInfixExpression((InfixExpression) n);\n        }\n        if (n instanceof ConditionalExpression) {\n            return processConditionalExpression((ConditionalExpression) n);\n        }\n        if (n instanceof RegExpLiteral) {\n            return processRegExpLiteral((RegExpLiteral) n);\n        }\n        if (n instanceof ArrayLiteral) {\n            return processArrayLiteral((ArrayLiteral) n);\n        }\n        if (n instanceof ObjectLiteral) {\n            return processObjectLiteral((ObjectLiteral) n);\n        }\n        if (n instanceof NewExpression) {\n            return processNewExpression((NewExpression) n);\n        }\n        if (n instanceof ConditionalExpression) {\n            return processConditionalExpression((ConditionalExpression) n);\n        }\n        if (n instanceof EmptyExpression) {\n            return processEmptyExpression((EmptyExpression) n);\n        }\n        throw new RuntimeException(\"Unable to transform AST node[\" + n.getClass().getName() + \"]: \" + n.toString());\n    }\n\n    // Implementations of the interface methods\n    protected Node transform(AstNode n) {\n        if (n == null) {\n            return newNode(Token.EMPTY);\n        }\n        Node result = (Node) n.visit(this);\n        result.copyPropFrom(n);\n        return result;\n    }\n\n    public boolean visit(AstNode node) {\n        throw new RuntimeException(\"not reached\");\n    }\n\n    public boolean visit(Assignment node) {\n        return false;\n    }\n\n    public boolean visit(AstRoot node) {\n        return true;\n    }\n\n    public boolean visit(Block node) {\n        return false;\n    }\n\n    public boolean visit(BreakStatement node) {\n        return false;\n    }\n\n    public boolean visit(CatchClause node) {\n        return false;\n    }\n\n    public boolean visit(ConditionalExpression node) {\n        return false;\n    }\n\n    public boolean visit(ContinueStatement node) {\n        return false;\n    }\n\n    public boolean visit(DoLoop node) {\n        return false;\n    }\n\n    public boolean visit(ElementGet node) {\n        return false;\n    }\n\n    public boolean visit(EmptyExpression node) {\n        return false;\n    }\n\n    public boolean visit(ExpressionStatement node) {\n        return false;\n    }\n\n    public boolean visit(ForInLoop node) {\n        return false;\n    }\n\n    public boolean visit(ForLoop node) {\n        return false;\n    }\n\n    public boolean visit(FunctionCall node) {\n        return false;\n    }\n\n    public boolean visit(FunctionNode node) {\n        return false;\n    }\n\n    public boolean visit(InfixExpression node) {\n        return false;\n    }\n\n    public boolean visit(LabeledStatement node) {\n        return false;\n    }\n\n    public boolean visit(LetNode node) {\n        return false;\n    }\n\n    public boolean visit(Name node) {\n        return false;\n    }\n\n    public boolean visit(NewExpression node) {\n        return false;\n    }\n\n    public boolean visit(NumberLiteral node) {\n        return false;\n    }\n\n    public boolean visit(ObjectLiteral node) {\n        return false;\n    }\n\n    public boolean visit(ParenthesizedExpression node) {\n        return false;\n    }\n\n    public boolean visit(RegExpLiteral node) {\n        return false;\n    }\n\n    public boolean visit(ReturnStatement node) {\n        return false;\n    }\n\n    public boolean visit(Scope node) {\n        return true;\n    }\n\n    public boolean visit(ScriptNode node) {\n        return true;\n    }\n\n    public boolean visit(StringLiteral node) {\n        return false;\n    }\n\n    public boolean visit(SwitchCase node) {\n        return false;\n    }\n\n    public boolean visit(SwitchStatement node) {\n        return false;\n    }\n\n    public boolean visit(ThrowStatement node) {\n        return false;\n    }\n\n    public boolean visit(TryStatement node) {\n        return false;\n    }\n\n    public boolean visit(UnaryExpression node) {\n        return false;\n    }\n\n    public boolean visit(VariableDeclaration node) {\n        return false;\n    }\n\n    public boolean visit(VariableInitializer node) {\n        return false;\n    }\n\n    public boolean visit(WhileLoop node) {\n        return false;\n    }\n\n    // Utility functions\n    private boolean isDirective(Node n) {\n        if (n == null) {\n            return false;\n        }\n\n        int nType = n.getType();\n        return nType == Token.EXPR_RESULT &&\n                n.getFirstChild().isString() &&\n                ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n    }\n\n    private String createSecretFlag(int count) {\n        return SECRET_FLAG_PREFIX + \"_\" + count;\n    }\n\n    private Node processFunction(FunctionNode node) {\n        Node function = newNode(Token.FUNCTION);\n        Node name = transform(node.getFunctionName());\n        Node args = new Node(Token.PARAM_LIST);\n\n        List<Node> functionNodes = new ArrayList<>();\n\n        PushScope functionScope = new PushScope(functionNodes);\n        functionScope.visit(node);\n\n        for (int i = 0; i < node.getParamCount(); i++) {\n            args.addChildToBack(transform(node.getParam(i)));\n        }\n        function.addChildrenToBack(name, args);\n\n        Node body = newNode(Token.BLOCK);\n        Node block = transform(node.getBody());\n        for (Node n : functionNodes) {\n            block.addChildToFront(n);\n        }\n        body.addChildToBack(block);\n        function.addChildToBack(body);\n\n        return function;\n    }\n\n    private Node processReturnStatement(ReturnStatement node) {\n        Node n = newNode(Token.RETURN);\n        if (node.getReturnValue() != null) {\n            n.addChildToBack(transform(node.getReturnValue()));\n        }\n        return n;\n    }\n\n    private Node processIfStatement(IfStatement node) {\n        return newNode(\n                Token.IF,\n                transform(node.getCondition()),\n                transformBlock(node.getThenPart()),\n                transformBlock(node.getElsePart()));\n    }\n\n    private Node processSwitchStatement(SwitchStatement node) {\n        Node n = newNode(Token.SWITCH, transform(node.getExpression()));\n        for (SwitchCase sc : node.getCases()) {\n            n.addChildToBack(transform(sc));\n        }\n        return n;\n    }\n\n    private Node processCaseClause(CaseClause node) {\n        Node n = newNode(Token.CASE, transform(node.getExpression()));\n        for (AstNode stmt : node.getStatements()) {\n            n.addChildToBack(transform(stmt));\n        }\n        return n;\n    }\n\n    private Node processBreakStatement(BreakStatement node) {\n        Node n = newNode(Token.BREAK);\n        if (node.getBreakLabel() != null) {\n            Node labelName = transform(node.getBreakLabel());\n\n            labelName.setType(Token.LABEL_NAME);\n            n.addChildToBack(labelName);\n        }\n        return n;\n    }\n\n    private Node processContinueStatement(ContinueStatement node) {\n        Node n = newNode(Token.CONTINUE);\n        if (node.getLabel() != null) {\n            Node labelName = transform(node.getLabel());\n\n            labelName.setType(Token.LABEL_NAME);\n            n.addChildToBack(labelName);\n        }\n        return n;\n    }\n\n    private Node processDoLoop(DoLoop node) {\n        return newNode(\n                Token.DO,\n                transformBlock(node.getBody()),\n                transform(node.getCondition()));\n    }\n\n    private Node processWhileLoop(WhileLoop node) {\n        return newNode(\n                Token.WHILE,\n                transform(node.getCondition()),\n                transformBlock(node.getBody()));\n    }\n\n    private Node processForLoop(ForLoop node) {\n        Node init = newNode(Token.EMPTY);\n        Node test = newNode(Token.EMPTY);\n        Node incr = newNode(Token.EMPTY);\n\n        if (node.getInitializer() != null) {\n            init = transform(node.getInitializer());\n        }\n        if (node.getCondition() != null) {\n            test = transform(node.getCondition());\n        }\n        if (node.getIncrement() != null) {\n            incr = transform(node.getIncrement());\n        }\n        return newNode(\n                Token.FOR,\n                init,\n                test,\n                incr,\n                transformBlock(node.getBody()));\n    }\n\n    private Node processVariableDeclaration(VariableDeclaration node) {\n        Node n = newNode(Token.VAR);\n        for (VariableInitializer init : node.getVariables()) {\n            n.addChildToBack(transform(init));\n        }\n        return n;\n    }\n\n    private Node processFunctionCall(FunctionCall node) {\n        Node n = newNode(Token.CALL, transform(node.getTarget()));\n        for (AstNode arg : node.getArguments()) {\n            n.addChildToBack(transform(arg));\n        }\n        return n;\n    }\n\n    private Node processPropertyGet(PropertyGet node) {\n        Node n = newNode(Token.GETPROP, transform(node.getTarget()));\n        n.addChildToBack(transform(node.getProperty()));\n        return n;\n    }\n\n    private Node processThrowStatement(ThrowStatement node) {\n        return newNode(\n                Token.THROW,\n                transform(node.getExpression()));\n    }\n\n    private Node processUnaryExpression(UnaryExpression node) {\n        return newNode(\n                node.getType(),\n                transform(node.getOperand()));\n    }\n\n    private Node processInfixExpression(InfixExpression node) {\n        return newNode(\n                node.getType(),\n                transform(node.getLeft()),\n                transform(node.getRight()));\n    }\n\n    private Node processRegExpLiteral(RegExpLiteral node) {\n        Node n = new Node(Token.REGEXP);\n        n.putProp(Node.LENGTH_PROP, node.getValue().length());\n        n.addString(node.getValue());\n        n.addString(node.getFlags());\n        return n;\n    }\n\n    private Node processArrayLiteral(ArrayLiteral node) {\n        Node n = newNode(Token.ARRAYLIT);\n        for (AstNode element : node.getElements()) {\n            if (element == null) {\n                n.addChildToBack(newNode(Token.EMPTY));\n            } else {\n                n.addChildToBack(transform(elemen",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..607fecf5 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,107 +473,507 @@ class IRFactory {\n       }\n     }\n \n+import org.mozilla.javascript.ErrorReporter;\n+import org.mozilla.javascript.Node;\n+import org.mozilla.javascript.Token;\n+import org.mozilla.javascript.ast.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+class TransformDispatcher implements NodeVisitor {\n+\n+    private static final String ALLOWED_DIRECTIVES = \"__allow_directive__\";\n+    private static final String SECRET_FLAG_PREFIX = \"zj\";\n+\n+    private final ErrorReporter errorReporter;\n+    private final String sourceName;\n+\n+    public TransformDispatcher(ErrorReporter errorReporter, String sourceName) {\n+        this.errorReporter = errorReporter;\n+        this.sourceName = sourceName;\n+    }\n+\n+    protected Node newNode(int type) {\n+        return new Node(type);\n+    }\n+\n+    protected Node newNode(int type, AstNode child) {\n+        Node n = new Node(type);\n+        n.addChildToBack(transform(child));\n+        return n;\n+    }\n+\n+    protected Node newNode(int type, AstNode child1, AstNode child2) {\n+        Node n = new Node(type);\n+        n.addChildToBack(transform(child1));\n+        n.addChildToBack(transform(child2));\n+        return n;\n+    }\n+\n+    protected Node newNode(int type, AstNode child1, AstNode child2, AstNode child3) {\n+        Node n = new Node(type);\n+        n.addChildToBack(transform(child1));\n+        n.addChildToBack(transform(child2));\n+        n.addChildToBack(transform(child3));\n+        return n;\n+    }\n+\n+    protected Node transformGeneric(AstNode n) {\n+        if (n == null) return newNode(Token.EMPTY);\n+\n+        if (n instanceof Name) {\n+            Name name = (Name) n;\n+            Node node = new Node(Token.NAME, name.getIdentifier());\n+\n+            if (isDirective(n.getParent())) {\n+                node.putIntProp(Node.IS_DIRECTIVE, 1);\n+            }\n+\n+            return node;\n+        }\n+\n+        if (n instanceof ParenthesizedExpression) {\n+            return transform(((ParenthesizedExpression) n).getExpression());\n+        }\n+\n+        if (n instanceof StringLiteral) {\n+            return new Node(Token.STRING, n.getString());\n+        }\n+        if (n instanceof NumberLiteral) {\n+            return Node.newNumber(n.getDouble());\n+        }\n+        if (n instanceof FunctionNode) {\n+            return processFunction((FunctionNode) n);\n+        }\n+        if (n instanceof ReturnStatement) {\n+            return processReturnStatement((ReturnStatement) n);\n+        }\n+        if (n instanceof IfStatement) {\n+            return processIfStatement((IfStatement) n);\n+        }\n+        if (n instanceof SwitchStatement) {\n+            return processSwitchStatement((SwitchStatement) n);\n+        }\n+        if (n instanceof CaseClause) {\n+            return processCaseClause((CaseClause) n);\n+        }\n+        if (n instanceof BreakStatement) {\n+            return processBreakStatement((BreakStatement) n);\n+        }\n+        if (n instanceof ContinueStatement) {\n+            return processContinueStatement((ContinueStatement) n);\n+        }\n+        if (n instanceof DoLoop) {\n+            return processDoLoop((DoLoop) n);\n+        }\n+        if (n instanceof WhileLoop) {\n+            return processWhileLoop((WhileLoop) n);\n+        }\n+        if (n instanceof ForLoop) {\n+            return processForLoop((ForLoop) n);\n+        }\n+        if (n instanceof ForInLoop) {\n+            return processForInLoop((ForInLoop) n);\n+        }\n+        if (n instanceof VariableDeclaration) {\n+            return processVariableDeclaration((VariableDeclaration) n);\n+        }\n+        if (n instanceof FunctionCall) {\n+            return processFunctionCall((FunctionCall) n);\n+        }\n+        if (n instanceof PropertyGet) {\n+            return processPropertyGet((PropertyGet) n);\n+        }\n+        if (n instanceof ElementGet) {\n+            return processElementGet((ElementGet) n);\n+        }\n+        if (n instanceof ExpressionStatement) {\n+            return processExpressionStatement((ExpressionStatement) n);\n+        }\n+        if (n instanceof TryStatement) {\n+            return processTryStatement((TryStatement) n);\n+        }\n+        if (n instanceof ThrowStatement) {\n+            return processThrowStatement((ThrowStatement) n);\n+        }\n+        if (n instanceof UnaryExpression) {\n+            return processUnaryExpression((UnaryExpression) n);\n+        }\n+        if (n instanceof InfixExpression) {\n+            return processInfixExpression((InfixExpression) n);\n+        }\n+        if (n instanceof ConditionalExpression) {\n+            return processConditionalExpression((ConditionalExpression) n);\n+        }\n+        if (n instanceof RegExpLiteral) {\n+            return processRegExpLiteral((RegExpLiteral) n);\n+        }\n+        if (n instanceof ArrayLiteral) {\n+            return processArrayLiteral((ArrayLiteral) n);\n+        }\n+        if (n instanceof ObjectLiteral) {\n+            return processObjectLiteral((ObjectLiteral) n);\n+        }\n+        if (n instanceof NewExpression) {\n+            return processNewExpression((NewExpression) n);\n+        }\n+        if (n instanceof ConditionalExpression) {\n+            return processConditionalExpression((ConditionalExpression) n);\n+        }\n+        if (n instanceof EmptyExpression) {\n+            return processEmptyExpression((EmptyExpression) n);\n+        }\n+        throw new RuntimeException(\"Unable to transform AST node[\" + n.getClass().getName() + \"]: \" + n.toString());\n+    }\n+\n+    // Implementations of the interface methods\n+    protected Node transform(AstNode n) {\n+        if (n == null) {\n+            return newNode(Token.EMPTY);\n+        }\n+        Node result = (Node) n.visit(this);\n+        result.copyPropFrom(n);\n+        return result;\n+    }\n+\n+    public boolean visit(AstNode node) {\n+        throw new RuntimeException(\"not reached\");\n+    }\n+\n+    public boolean visit(Assignment node) {\n+        return false;\n+    }\n+\n+    public boolean visit(AstRoot node) {\n+        return true;\n+    }\n+\n+    public boolean visit(Block node) {\n+        return false;\n+    }\n+\n+    public boolean visit(BreakStatement node) {\n+        return false;\n+    }\n+\n+    public boolean visit(CatchClause node) {\n+        return false;\n+    }\n+\n+    public boolean visit(ConditionalExpression node) {\n+        return false;\n+    }\n+\n+    public boolean visit(ContinueStatement node) {\n+        return false;\n+    }\n+\n+    public boolean visit(DoLoop node) {\n+        return false;\n+    }\n+\n+    public boolean visit(ElementGet node) {\n+        return false;\n+    }\n+\n+    public boolean visit(EmptyExpression node) {\n+        return false;\n+    }\n+\n+    public boolean visit(ExpressionStatement node) {\n+        return false;\n+    }\n+\n+    public boolean visit(ForInLoop node) {\n+        return false;\n+    }\n+\n+    public boolean visit(ForLoop node) {\n+        return false;\n+    }\n+\n+    public boolean visit(FunctionCall node) {\n+        return false;\n+    }\n+\n+    public boolean visit(FunctionNode node) {\n+        return false;\n+    }\n+\n+    public boolean visit(InfixExpression node) {\n+        return false;\n+    }\n+\n+    public boolean visit(LabeledStatement node) {\n+        return false;\n+    }\n+\n+    public boolean visit(LetNode node) {\n+        return false;\n+    }\n+\n+    public boolean visit(Name node) {\n+        return false;\n+    }\n+\n+    public boolean visit(NewExpression node) {\n+        return false;\n+    }\n+\n+    public boolean visit(NumberLiteral node) {\n+        return false;\n+    }\n+\n+    public boolean visit(ObjectLiteral node) {\n+        return false;\n+    }\n+\n+    public boolean visit(ParenthesizedExpression node) {\n+        return false;\n+    }\n+\n+    public boolean visit(RegExpLiteral node) {\n+        return false;\n+    }\n+\n+    public boolean visit(ReturnStatement node) {\n+        return false;\n+    }\n+\n+    public boolean visit(Scope node) {\n+        return true;\n+    }\n+\n+    public boolean visit(ScriptNode node) {\n+        return true;\n+    }\n+\n+    public boolean visit(StringLiteral node) {\n+        return false;\n+    }\n+\n+    public boolean visit(SwitchCase node) {\n+        return false;\n+    }\n+\n+    public boolean visit(SwitchStatement node) {\n+        return false;\n+    }\n+\n+    public boolean visit(ThrowStatement node) {\n+        return false;\n+    }\n+\n+    public boolean visit(TryStatement node) {\n+        return false;\n+    }\n+\n+    public boolean visit(UnaryExpression node) {\n+        return false;\n+    }\n+\n+    public boolean visit(VariableDeclaration node) {\n+        return false;\n+    }\n+\n+    public boolean visit(VariableInitializer node) {\n+        return false;\n+    }\n+\n+    public boolean visit(WhileLoop node) {\n+        return false;\n+    }\n+\n+    // Utility functions\n     private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+        if (n == null) {\n+            return false;\n+        }\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+        int nType = n.getType();\n+        return nType == Token.EXPR_RESULT &&\n+                n.getFirstChild().isString() &&\n+                ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n     }\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n+    private String createSecretFlag(int count) {\n+        return SECRET_FLAG_PREFIX + \"_\" + count;\n     }\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+    private Node processFunction(FunctionNode node) {\n+        Node function = newNode(Token.FUNCTION);\n+        Node name = transform(node.getFunctionName());\n+        Node args = new Node(Token.PARAM_LIST);\n+\n+        List<Node> functionNodes = new ArrayList<>();\n+\n+        PushScope functionScope = new PushScope(functionNodes);\n+        functionScope.visit(node);\n+\n+        for (int i = 0; i < node.getParamCount(); i++) {\n+            args.addChildToBack(transform(node.getParam(i)));\n+        }\n+        function.addChildrenToBack(name, args);\n+\n+        Node body = newNode(Token.BLOCK);\n+        Node block = transform(node.getBody());\n+        for (Node n : functionNodes) {\n+            block.addChildToFront(n);\n+        }\n+        body.addChildToBack(block);\n+        function.addChildToBack(body);\n+\n+        return function;\n     }\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n+    private Node processReturnStatement(ReturnStatement node) {\n+        Node n = newNode(Token.RETURN);\n+        if (node.getReturnValue() != null) {\n+            n.addChildToBack(transform(node.getReturnValue()));\n+        }\n+        return n;\n     }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+    private Node processIfStatement(IfStatement node) {\n+        return newNode(\n+                Token.IF,\n+                transform(node.getCondition()),\n+                transformBlock(node.getThenPart()),\n+                transformBlock(node.getElsePart()));\n     }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+    private Node processSwitchStatement(SwitchStatement node) {\n+        Node n = newNode(Token.SWITCH, transform(node.getExpression()));\n+        for (SwitchCase sc : node.getCases()) {\n+            n.addChildToBack(transform(sc));\n+        }\n+        return n;\n     }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+    private Node processCaseClause(CaseClause node) {\n+        Node n = newNode(Token.CASE, transform(node.getExpression()));\n+        for (AstNode stmt : node.getStatements()) {\n+            n.addChildToBack(transform(stmt));\n+        }\n+        return n;\n     }\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+    private Node processBreakStatement(BreakStatement node) {\n+        Node n = newNode(Token.BREAK);\n+        if (node.getBreakLabel() != null) {\n+            Node labelName = transform(node.getBreakLabel());\n+\n+            labelName.setType(Token.LABEL_NAME);\n+            n.addChildToBack(labelName);\n+        }\n+        return n;\n     }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+    private Node processContinueStatement(ContinueStatement node) {\n+        Node n = newNode(Token.CONTINUE);\n+        if (node.getLabel() != null) {\n+            Node labelName = transform(node.getLabel());\n+\n+            labelName.setType(Token.LABEL_NAME);\n+            n.addChildToBack(labelName);\n+        }\n+        return n;\n     }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+    private Node processDoLoop(DoLoop node) {\n+        return newNode(\n+                Token.DO,\n+                transformBlock(node.getBody()),\n+                transform(node.getCondition()));\n     }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n+    private Node processWhileLoop(WhileLoop node) {\n+        return newNode(\n+                Token.WHILE,\n+                transform(node.getCondition()),\n+                transformBlock(node.getBody()));\n+    }\n \n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+    private Node processForLoop(ForLoop node) {\n+        Node init = newNode(Token.EMPTY);\n+        Node test = newNode(Token.EMPTY);\n+        Node incr = newNode(Token.EMPTY);\n+\n+        if (node.getInitializer() != null) {\n+            init = transform(node.getInitializer());\n+        }\n+        if (node.getCondition() != null) {\n+            test = transform(node.getCondition());\n+        }\n+        if (node.getIncrement() != null) {\n+            incr = transform(node.getIncrement());\n+        }\n+        return newNode(\n+                Token.FOR,\n+                init,\n+                test,\n+                incr,\n+                transformBlock(node.getBody()));\n+    }\n+\n+    private Node processVariableDeclaration(VariableDeclaration node) {\n+        Node n = newNode(Token.VAR);\n+        for (VariableInitializer init : node.getVariables()) {\n+            n.addChildToBack(transform(init));\n+        }\n+        return n;\n+    }\n+\n+    private Node processFunctionCall(FunctionCall node) {\n+        Node n = newNode(Token.CALL, transform(node.getTarget()));\n+        for (AstNode arg : node.getArguments()) {\n+            n.addChildToBack(transform(arg));\n+        }\n+        return n;\n     }\n \n+    private Node processPropertyGet(PropertyGet node) {\n+        Node n = newNode(Token.GETPROP, transform(node.getTarget()));\n+        n.addChildToBack(transform(node.getProperty()));\n+        return n;\n+    }\n+\n+    private Node processThrowStatement(ThrowStatement node) {\n+        return newNode(\n+                Token.THROW,\n+                transform(node.getExpression()));\n+    }\n+\n+    private Node processUnaryExpression(UnaryExpression node) {\n+        return newNode(\n+                node.getType(),\n+                transform(node.getOperand()));\n+    }\n+\n+    private Node processInfixExpression(InfixExpression node) {\n+        return newNode(\n+                node.getType(),\n+                transform(node.getLeft()),\n+                transform(node.getRight()));\n+    }\n+\n+    private Node processRegExpLiteral(RegExpLiteral node) {\n+        Node n = new Node(Token.REGEXP);\n+        n.putProp(Node.LENGTH_PROP, node.getValue().length());\n+        n.addString(node.getValue());\n+        n.addString(node.getFlags());\n+        return n;\n+    }\n+\n+    private Node processArrayLiteral(ArrayLiteral node) {\n+        Node n = newNode(Token.ARRAYLIT);\n+        for (AstNode element : node.getElements()) {\n+            if (element == null) {\n+                n.addChildToBack(newNode(Token.EMPTY));\n+            } else {\n+                n.addChildToBack(transform(elemen\n+\n     @Override\n     Node processForLoop(ForLoop loopNode) {\n       Node node = newNode(",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}