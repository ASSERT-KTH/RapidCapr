{
    "patch": "Node first = n.getFirstChild();\nNode firstChild = first == null ? null : first.getFirstChild();\nif (n.isFunction()) {\n  attachLiteralTypes(first);\n  if (parent.getType() == Token.EXPR_RESULT) {\n    if (firstChild != null && firstChild.getType() == Token.NAME) {\n      defineDeclaredFunction(firstChild, first);\n    } else {\n      defineDeclaredFunction(first, parent);\n    }\n  } else if (firstChild != null && firstChild.getType() == Token.NAME) {\n    defineDeclaredFunction(firstChild, first);\n  }\n} else {\n  switch (n.getType()) {\n    case Token.VAR:\n      if (firstChild != null && firstChild.getType() == Token.NAME) {\n        defineVar(firstChild, n);\n      }\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.LP:\n      if (parent == scope.getRootNode() && firstChild != null && firstChild.getType() == Token.FUNCTION) {\n        defineDeclaredFunction(firstChild, n);\n        handleFunctionInputs(n);\n      }\n      break;\n    default:\n      attachLiteralTypes(n);\n      break;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..e9980091 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,40 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+Node first = n.getFirstChild();\n+Node firstChild = first == null ? null : first.getFirstChild();\n+if (n.isFunction()) {\n+  attachLiteralTypes(first);\n+  if (parent.getType() == Token.EXPR_RESULT) {\n+    if (firstChild != null && firstChild.getType() == Token.NAME) {\n+      defineDeclaredFunction(firstChild, first);\n+    } else {\n+      defineDeclaredFunction(first, parent);\n+    }\n+  } else if (firstChild != null && firstChild.getType() == Token.NAME) {\n+    defineDeclaredFunction(firstChild, first);\n+  }\n+} else {\n+  switch (n.getType()) {\n+    case Token.VAR:\n+      if (firstChild != null && firstChild.getType() == Token.NAME) {\n+        defineVar(firstChild, n);\n       }\n+      break;\n+    case Token.CATCH:\n+      defineCatch(n, parent);\n+      break;\n+    case Token.LP:\n+      if (parent == scope.getRootNode() && firstChild != null && firstChild.getType() == Token.FUNCTION) {\n+        defineDeclaredFunction(firstChild, n);\n+        handleFunctionInputs(n);\n+      }\n+      break;\n+    default:\n+      attachLiteralTypes(n);\n+      break;\n+  }\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}