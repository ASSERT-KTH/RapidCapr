{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    // if we just return offsetAdjusted then the time is pushed\n    // back before the transition, whereas it should be\n    // on or after the transition\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n    if (nextLocal != nextAdjusted) {\n        // The next transition adjusted is not equals to the next local transition, we need to adjust the offset\n        // accordingly\n        int newOffsetAdjusted = getOffset(nextAdjusted);\n        int diff = newOffsetAdjusted - offsetAdjusted;\n        instantAdjusted -= diff * DateTimeConstants.MILLIS_PER_HOUR;\n\n        // Update the local and adjusted offsets\n        final int newOffsetLocal = getOffset(instantAdjusted);\n        final int newOffsetAdjusted2 = getOffset(instantLocal - offsetLocal - diff * DateTimeConstants.MILLIS_PER_HOUR);\n\n        if (newOffsetLocal == offsetLocal && newOffsetAdjusted2 == newOffsetAdjusted) {\n            return newOffsetAdjusted;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..60285be1 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,28 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    // if we just return offsetAdjusted then the time is pushed\n+    // back before the transition, whereas it should be\n+    // on or after the transition\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+    if (nextLocal != nextAdjusted) {\n+        // The next transition adjusted is not equals to the next local transition, we need to adjust the offset\n+        // accordingly\n+        int newOffsetAdjusted = getOffset(nextAdjusted);\n+        int diff = newOffsetAdjusted - offsetAdjusted;\n+        instantAdjusted -= diff * DateTimeConstants.MILLIS_PER_HOUR;\n+\n+        // Update the local and adjusted offsets\n+        final int newOffsetLocal = getOffset(instantAdjusted);\n+        final int newOffsetAdjusted2 = getOffset(instantLocal - offsetLocal - diff * DateTimeConstants.MILLIS_PER_HOUR);\n+\n+        if (newOffsetLocal == offsetLocal && newOffsetAdjusted2 == newOffsetAdjusted) {\n+            return newOffsetAdjusted;\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot assign a value to final variable instantAdjusted",
    "test_result": "ERROR"
}