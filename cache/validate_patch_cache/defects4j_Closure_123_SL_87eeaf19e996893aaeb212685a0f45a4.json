{
    "patch": "public static String printInOperatorInForLoop(boolean c, Object[] d) {\n    Context lhsContext = Context.OTHER;\n    String expected = \"for(a=c?0:[\";\n    Object[] arrayValues = c? new Object[] { 0 } : Arrays.stream(d).filter(x -> x instanceof Number || x instanceof String).toArray();\n    boolean breakLoop = false;\n\n    for (int i = 0; i < arrayValues.length; i++) {\n        try {\n            lhsContext.getSafe(new InOperator(lhsContext, arrayValues[i], Boolean.TRUE));\n            expected += i + \" in d\";\n            break;\n        } catch (AnalysisException e) {\n            if (i == arrayValues.length - 1) {\n                expected += i + \" in d];;)foo()\";\n            }\n        }\n    }\n    return expected;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}