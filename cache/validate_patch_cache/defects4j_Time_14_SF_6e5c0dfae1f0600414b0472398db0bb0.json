{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // The adjustment is initialized to 0\n        int adjustment = 0;\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            // if after addition MonthDay is invalid, we decrement the month and adjust by the number of days remaining\n            try {\n                return iChronology.get(partial, instant);\n            } catch (IllegalFieldValueException ifve) {\n                if (DateTimeFieldType.monthOfYear().getField(iChronology).getFieldValue(instant) == 2 && DateTimeFieldType.dayOfMonth().getField(iChronology).get(instant) == 29) {\n                    int lastDayOfMonth = DateTimeFieldType.dayOfMonth().getField(iChronology).getMaximumValue(instant);\n                    // invalid dates such as 29th Feb in a non-leap year are handled using the adjustment\n                    adjustment = DateTimeFieldType.dayOfMonth().getField(iChronology).getMaximumValue(instant) - 28;\n                }\n                instant = DateTimeFieldType.monthOfYear().getField(iChronology).add(instant, -1);\n                instant = DateTimeFieldType.dayOfMonth().getField(iChronology).add(instant, adjustment);\n                return iChronology.get(partial, instant);\n            }\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..34f9733e 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,20 +200,34 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n         // overridden as superclass algorithm can't handle\n         // 2004-02-29 + 48 months -> 2008-02-29 type dates\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // The adjustment is initialized to 0\n+        int adjustment = 0;\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n             instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            // if after addition MonthDay is invalid, we decrement the month and adjust by the number of days remaining\n+            try {\n+                return iChronology.get(partial, instant);\n+            } catch (IllegalFieldValueException ifve) {\n+                if (DateTimeFieldType.monthOfYear().getField(iChronology).getFieldValue(instant) == 2 && DateTimeFieldType.dayOfMonth().getField(iChronology).get(instant) == 29) {\n+                    int lastDayOfMonth = DateTimeFieldType.dayOfMonth().getField(iChronology).getMaximumValue(instant);\n+                    // invalid dates such as 29th Feb in a non-leap year are handled using the adjustment\n+                    adjustment = DateTimeFieldType.dayOfMonth().getField(iChronology).getMaximumValue(instant) - 28;\n+                }\n+                instant = DateTimeFieldType.monthOfYear().getField(iChronology).add(instant, -1);\n+                instant = DateTimeFieldType.dayOfMonth().getField(iChronology).add(instant, adjustment);\n+                return iChronology.get(partial, instant);\n+            }\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}