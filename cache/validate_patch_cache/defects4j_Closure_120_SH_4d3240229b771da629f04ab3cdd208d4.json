{
    "patch": "          // if the function contains any other assignments to this variable,\n          // we can't say that it's only assigned once in its lifetime.\n          for (int i = ref.getIndex() + 1; i < references.size(); i++) {\n            if (references.get(i).getCanonicalName().equals(ref.getCanonicalName())) {\n              return false;\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..24240ea1 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,13 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // if the function contains any other assignments to this variable,\n+          // we can't say that it's only assigned once in its lifetime.\n+          for (int i = ref.getIndex() + 1; i < references.size(); i++) {\n+            if (references.get(i).getCanonicalName().equals(ref.getCanonicalName())) {\n+              return false;\n+            }\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}