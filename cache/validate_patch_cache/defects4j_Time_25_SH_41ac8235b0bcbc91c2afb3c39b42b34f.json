{
    "patch": "            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal == nextAdjusted) {\n                // We are in the middle of a transition\n                int diff = offsetAdjusted - offsetLocal;\n                if (offsetLocal < offsetAdjusted) {\n                    // Moving clock hands back in time (gap)\n                    if ((nextLocal - instantAdjusted) <= diff * DateTimeConstants.MILLIS_PER_HOUR) {\n                        return offsetLocal;\n                    }\n                } else {\n                    // Moving clock hands forward in time (overlap)\n                    if ((nextLocal - instantAdjusted) < diff * DateTimeConstants.MILLIS_PER_HOUR) {\n                        return offsetNext;\n                    } else if ((nextAdjusted - instantLocal) >= diff * DateTimeConstants.MILLIS_PER_HOUR) {\n                        return offsetLocal;\n                    }\n                }\n            } else {\n                // We are not in the middle of a transition\n                int diff1 = offsetAdjusted - offsetLocal;\n                int diff2 = getOffset(nextAdjusted - 1) - offsetAdjusted;\n\n                if (diff1 < 0 && (nextAdjusted - instantLocal) < diff1 * DateTimeConstants.MILLIS_PER_HOUR) {\n                    return offsetAdjusted;\n                } else if (diff1 > 0 && (instantLocal - nextLocal) < diff1 * DateTimeConstants.MILLIS_PER_HOUR) {\n                    return offsetLocal;\n                } else if (diff2 < 0 && (nextAdjusted - instantLocal) < diff2 * DateTimeConstants.MILLIS_PER_HOUR) {\n                    return offsetAdjusted;\n                } else if (diff2 > 0 && (instantLocal - nextLocal) < diff2 * DateTimeConstants.MILLIS_PER_HOUR) {\n                    return offsetLocal;\n                } else if (offsetLocal > offsetAdjusted) {\n                    return getOffset(nextAdjusted - 1);\n                } else {",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..69db7ff2 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,40 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            if (nextLocal == nextAdjusted) {\n+                // We are in the middle of a transition\n+                int diff = offsetAdjusted - offsetLocal;\n+                if (offsetLocal < offsetAdjusted) {\n+                    // Moving clock hands back in time (gap)\n+                    if ((nextLocal - instantAdjusted) <= diff * DateTimeConstants.MILLIS_PER_HOUR) {\n+                        return offsetLocal;\n+                    }\n+                } else {\n+                    // Moving clock hands forward in time (overlap)\n+                    if ((nextLocal - instantAdjusted) < diff * DateTimeConstants.MILLIS_PER_HOUR) {\n+                        return offsetNext;\n+                    } else if ((nextAdjusted - instantLocal) >= diff * DateTimeConstants.MILLIS_PER_HOUR) {\n+                        return offsetLocal;\n+                    }\n+                }\n+            } else {\n+                // We are not in the middle of a transition\n+                int diff1 = offsetAdjusted - offsetLocal;\n+                int diff2 = getOffset(nextAdjusted - 1) - offsetAdjusted;\n+\n+                if (diff1 < 0 && (nextAdjusted - instantLocal) < diff1 * DateTimeConstants.MILLIS_PER_HOUR) {\n+                    return offsetAdjusted;\n+                } else if (diff1 > 0 && (instantLocal - nextLocal) < diff1 * DateTimeConstants.MILLIS_PER_HOUR) {\n+                    return offsetLocal;\n+                } else if (diff2 < 0 && (nextAdjusted - instantLocal) < diff2 * DateTimeConstants.MILLIS_PER_HOUR) {\n+                    return offsetAdjusted;\n+                } else if (diff2 > 0 && (instantLocal - nextLocal) < diff2 * DateTimeConstants.MILLIS_PER_HOUR) {\n+                    return offsetLocal;\n+                } else if (offsetLocal > offsetAdjusted) {\n+                    return getOffset(nextAdjusted - 1);\n+                } else {\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}