{
    "patch": "            if (hasInfiniteBounds) {\n                // If there is at least one finite bound, none can be infinite,\n                // because mixed cases are not supported by the current code.\n                throw new MathUnsupportedOperationException();\n            } else if (Double.isInfinite(LinearObjectiveFunction.NORM_HIGH_THRESHOLD * FastMath.max(FastMath.abs(init), FastMath.abs(uB)))) {\n                // Convert API to internal handling of boundaries.\n                throw new NumberIsTooLargeException(LinearObjectiveFunction.NORM_HIGH_THRESHOLD * FastMath.max(FastMath.abs(init), FastMath.abs(uB)),\n                                                    Double.POSITIVE_INFINITY, true);\n            } else {\n                // Convert API to internal handling of boundaries.\n                boundaries = new double[2][];\n                boundaries[0] = lB;\n                boundaries[1] = uB;\n\n                // Check if the number of inequality constraints exceeds the number of decision variables.\n                // The constraints are Ax = b, with A a rectangular matrix of order n x m, x a vector of\n                // m decision variables, and b a vector of n values.\n                if (getConstraints() != null) {\n                    int n = getConstraints().getWidth();\n                    int m = getStartPoint().length;\n                    if (n > m) {\n                        throw new NotStrictlyPositiveException(n - m);\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..e41117647 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,31 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+            if (hasInfiniteBounds) {\n+                // If there is at least one finite bound, none can be infinite,\n+                // because mixed cases are not supported by the current code.\n+                throw new MathUnsupportedOperationException();\n+            } else if (Double.isInfinite(LinearObjectiveFunction.NORM_HIGH_THRESHOLD * FastMath.max(FastMath.abs(init), FastMath.abs(uB)))) {\n+                // Convert API to internal handling of boundaries.\n+                throw new NumberIsTooLargeException(LinearObjectiveFunction.NORM_HIGH_THRESHOLD * FastMath.max(FastMath.abs(init), FastMath.abs(uB)),\n+                                                    Double.POSITIVE_INFINITY, true);\n+            } else {\n+                // Convert API to internal handling of boundaries.\n+                boundaries = new double[2][];\n+                boundaries[0] = lB;\n+                boundaries[1] = uB;\n+\n+                // Check if the number of inequality constraints exceeds the number of decision variables.\n+                // The constraints are Ax = b, with A a rectangular matrix of order n x m, x a vector of\n+                // m decision variables, and b a vector of n values.\n+                if (getConstraints() != null) {\n+                    int n = getConstraints().getWidth();\n+                    int m = getStartPoint().length;\n+                    if (n > m) {\n+                        throw new NotStrictlyPositiveException(n - m);\n+                    }\n+                }\n+            }\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}