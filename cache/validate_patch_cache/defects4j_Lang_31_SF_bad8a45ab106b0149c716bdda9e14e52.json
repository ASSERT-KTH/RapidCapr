{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int strLength = str.length();\n    int searchLength = searchChars.length;\n    int[][] codePoints = toCodePoints(searchChars, 0, searchLength);\n    for (int i = 0; i < strLength; i++) {\n        int cp = Character.codePointAt(str, i);\n        for (int[] arr : codePoints) {\n            if (ArrayUtils.contains(arr, cp)) {\n                return true;\n            }\n        }\n        if (cp > Character.MAX_VALUE) {\n            i++;\n        }\n    }\n    return false;\n}\n\nprivate static int[][] toCodePoints(char[] chars, int offset, int count) {\n    List<Integer> codePoints = new ArrayList<>();\n    int end = offset + count;\n    for (int i = offset; i < end; ) {\n        int cp = Character.codePointAt(chars, i, end);\n        codePoints.add(cp);\n        i += Character.charCount(cp);\n    }\n    int[][] result = new int[codePoints.size()][];\n    for (int i = 0; i < result.length; i++) {\n        result[i] = new int[] {codePoints.get(i)};\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..2ca683cc 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,41 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    int strLength = str.length();\n+    int searchLength = searchChars.length;\n+    int[][] codePoints = toCodePoints(searchChars, 0, searchLength);\n+    for (int i = 0; i < strLength; i++) {\n+        int cp = Character.codePointAt(str, i);\n+        for (int[] arr : codePoints) {\n+            if (ArrayUtils.contains(arr, cp)) {\n+                return true;\n+            }\n+        }\n+        if (cp > Character.MAX_VALUE) {\n+            i++;\n+        }\n+    }\n+    return false;\n+}\n+\n+private static int[][] toCodePoints(char[] chars, int offset, int count) {\n+    List<Integer> codePoints = new ArrayList<>();\n+    int end = offset + count;\n+    for (int i = offset; i < end; ) {\n+        int cp = Character.codePointAt(chars, i, end);\n+        codePoints.add(cp);\n+        i += Character.charCount(cp);\n+    }\n+    int[][] result = new int[codePoints.size()][];\n+    for (int i = 0; i < result.length; i++) {\n+        result[i] = new int[] {codePoints.get(i)};\n+    }\n+    return result;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}