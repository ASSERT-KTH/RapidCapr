{
    "patch": "public static double[] find_closest_elements(double[] numbers) {\n    if (numbers == null || numbers.length < 2) {\n        throw new IllegalArgumentException(\"Input array must contain at least 2 elements\");\n    }\n\n    double[] result = new double[2];\n    double minDistance = Double.MAX_VALUE;\n    int index1 = 0, index2 = 1;\n\n    // iterate over all pairs of elements\n    for (int i = 0; i < numbers.length - 1; i++) {\n        for (int j = i + 1; j < numbers.length; j++) {\n            double newDistance = Math.abs(numbers[i] - numbers[j]);\n            if (newDistance < minDistance) {\n                minDistance = newDistance;\n                index1 = i;\n                index2 = j;\n            }\n        }\n    }\n\n    // assign the smaller number to result[0] and the larger to result[1]\n    if (numbers[index1] < numbers[index2]) {\n        result[0] = numbers[index1];\n        result[1] = numbers[index2];\n    } else {\n        result[0] = numbers[index2];\n        result[1] = numbers[index1];\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/FIND_CLOSEST_ELEMENTS.java b/src/main/java/humaneval/buggy/FIND_CLOSEST_ELEMENTS.java\nindex 72388af..3059a56 100644\n--- a/src/main/java/humaneval/buggy/FIND_CLOSEST_ELEMENTS.java\n+++ b/src/main/java/humaneval/buggy/FIND_CLOSEST_ELEMENTS.java\n@@ -1,25 +1,36 @@\n package humaneval.buggy;\n \n public class FIND_CLOSEST_ELEMENTS {\n-    public static double[] find_closest_elements(double[] numbers) {\n-        double[] result = new double[2];\n+public static double[] find_closest_elements(double[] numbers) {\n+    if (numbers == null || numbers.length < 2) {\n+        throw new IllegalArgumentException(\"Input array must contain at least 2 elements\");\n+    }\n+\n+    double[] result = new double[2];\n+    double minDistance = Double.MAX_VALUE;\n+    int index1 = 0, index2 = 1;\n \n-        double distance = Double.MAX_VALUE;\n-        for (int i = 0; i < numbers.length; i += 1){\n-            for (int j = 0; j < numbers.length; j += 1){\n-                double new_distance = Math.abs(numbers[i] - numbers[j]);\n-                if (new_distance < distance){\n-                    distance = new_distance;\n-                    if (numbers[i] < numbers[j]){\n-                        result[0] = numbers[i];\n-                        result[1] = numbers[j];\n-                    } else{\n-                        result[0] = numbers[j];\n-                        result[1] = numbers[i];\n-                    }\n-                }\n+    // iterate over all pairs of elements\n+    for (int i = 0; i < numbers.length - 1; i++) {\n+        for (int j = i + 1; j < numbers.length; j++) {\n+            double newDistance = Math.abs(numbers[i] - numbers[j]);\n+            if (newDistance < minDistance) {\n+                minDistance = newDistance;\n+                index1 = i;\n+                index2 = j;\n             }\n         }\n-        return result;\n     }\n+\n+    // assign the smaller number to result[0] and the larger to result[1]\n+    if (numbers[index1] < numbers[index2]) {\n+        result[0] = numbers[index1];\n+        result[1] = numbers[index2];\n+    } else {\n+        result[0] = numbers[index2];\n+        result[1] = numbers[index1];\n+    }\n+\n+    return result;\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}