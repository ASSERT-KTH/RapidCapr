{
    "patch": "It can be fixed by the following hunk:\n``` java\nStrategy nextStrategy;\n        if(currentFormatField!=null) {\n            if(currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            }\n            nextStrategy = null;\n            currentFormatField = null;\n            currentStrategy = getStrategy(currentFormatField);\n        }\n\n        for(;;) {\n            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n            if(!patternMatcher.lookingAt()) {\n                nextStrategy = null;\n                break;\n            }\n            String nextFormatField= patternMatcher.group();\n            nextStrategy = getStrategy(nextFormatField);\n            if(currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            }\n            currentFormatField= nextFormatField;\n            currentStrategy= nextStrategy;\n        }\n\n        if(currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n\n        strategies= collector.toArray(new Strategy[collector.size()]);\n        parsePattern= Pattern.compile(regex.toString());\n    }\n```",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..e82ef6ce 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,41 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+It can be fixed by the following hunk:\n+``` java\n+Strategy nextStrategy;\n+        if(currentFormatField!=null) {\n+            if(currentStrategy.addRegex(this, regex)) {\n+                collector.add(currentStrategy);\n+            }\n+            nextStrategy = null;\n+            currentFormatField = null;\n+            currentStrategy = getStrategy(currentFormatField);\n+        }\n+\n+        for(;;) {\n+            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n+            if(!patternMatcher.lookingAt()) {\n+                nextStrategy = null;\n+                break;\n+            }\n+            String nextFormatField= patternMatcher.group();\n+            nextStrategy = getStrategy(nextFormatField);\n+            if(currentStrategy.addRegex(this, regex)) {\n+                collector.add(currentStrategy);\n+            }\n+            currentFormatField= nextFormatField;\n+            currentStrategy= nextStrategy;\n+        }\n+\n+        if(currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n+            collector.add(currentStrategy);\n+        }\n+\n+        strategies= collector.toArray(new Strategy[collector.size()]);\n+        parsePattern= Pattern.compile(regex.toString());\n+    }\n+```\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}