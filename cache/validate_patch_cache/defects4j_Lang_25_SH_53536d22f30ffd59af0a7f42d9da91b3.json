{
    "patch": "public static String unescape(final String str) {\n    if (str == null) {\n        return null;\n    }\n    final StringBuilder result = new StringBuilder(str.length());\n    final int length = str.length();\n    for (int i = 0; i < length; i++) {\n        final char currentChar = str.charAt(i);\n        if (currentChar == StringUtil.BACKSLASH_CHAR) {\n            final char nextChar = (i == length - 1) ? StringUtil.BACKSLASH_CHAR : str.charAt(i + 1);\n            // Character Escapes\n            if (nextChar == 'b') { // backspace BS\n                result.append('\\b');\n                i++;\n            } else if (nextChar == 't') { // horizontal tab HT\n                result.append('\\t');\n                i++;\n            } else if (nextChar == 'n') { // linefeed LF\n                result.append('\\n');\n                i++;\n            } else if (nextChar == 'f') { // form feed FF\n                result.append('\\f');\n                i++;\n            } else if (nextChar == 'r') { // carriage return CR\n                result.append('\\r');\n                i++;\n            } else if (nextChar == StringUtil.BACKSLASH_CHAR) {\n                result.append(StringUtil.BACKSLASH_CHAR);\n                i++;\n            } else if (nextChar == '\\'') {\n                result.append('\\'');\n                i++;\n            } else if (nextChar == '\\\"') {\n                result.append('\\\"');\n                i++;\n            } else if (nextChar == 'u') {\n                try {\n                    final char unicodeChar = (char) Integer.parseInt(str.substring(i + 2, i + 6), 16);\n                    result.append(unicodeChar);\n                    i += 5;\n                } catch (final Exception e) {\n                    throw new IllegalArgumentException(\n                            \"Unable to parse unicode value: \" + str.substring(i, i + 6), e);\n                }\n            } else {\n                throw new IllegalArgumentException(\"Invalid escape sequence: \\\\\" + nextChar);\n            }\n        } else {\n            result.append(currentChar);\n        }\n    }\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}