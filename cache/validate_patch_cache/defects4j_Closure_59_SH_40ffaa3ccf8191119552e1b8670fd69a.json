{
    "patch": "if (options.checkGlobalThisLevel != null) {\n    if (options.checkGlobalThisLevel.isOn()) {\n        options.setWarningLevel(\n            DiagnosticGroups.GLOBAL_THIS,\n            options.checkGlobalThisLevel);\n    } else if (!composedGuards.enables(DiagnosticGroups.GLOBAL_THIS)) {\n        composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n            DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF));\n    }\n} else {\n    options.setWarningLevel(\n        DiagnosticGroups.GLOBAL_THIS,\n        CheckLevel.WARNING);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..42e1502c 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,20 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n+if (options.checkGlobalThisLevel != null) {\n     if (options.checkGlobalThisLevel.isOn()) {\n+        options.setWarningLevel(\n+            DiagnosticGroups.GLOBAL_THIS,\n+            options.checkGlobalThisLevel);\n+    } else if (!composedGuards.enables(DiagnosticGroups.GLOBAL_THIS)) {\n+        composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n+            DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF));\n+    }\n+} else {\n+    options.setWarningLevel(\n+        DiagnosticGroups.GLOBAL_THIS,\n+        CheckLevel.WARNING);\n+}\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}