{
    "patch": "MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\nMockSettingsImpl settings = new MockSettingsImpl();\nsettings.spiedInstance(mock);\nMethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, settings.defaultAnswer(Mockito.RETURNS_DEFAULTS));\nif (mock instanceof Class<?>)\n    ((Class<?>) mock).setName(((Class<?>) mock).getName() + \"$$MockitoMock\");\n((MockitoMock) mock).setMockitoInterceptor(newFilter);\nif (mock instanceof Factory) {\n    ((Factory) mock).setCallbacks(new Callback[]{newFilter});\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..66c150196 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,19 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+MockSettingsImpl settings = new MockSettingsImpl();\n+settings.spiedInstance(mock);\n+MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, settings.defaultAnswer(Mockito.RETURNS_DEFAULTS));\n+if (mock instanceof Class<?>)\n+    ((Class<?>) mock).setName(((Class<?>) mock).getName() + \"$$MockitoMock\");\n+((MockitoMock) mock).setMockitoInterceptor(newFilter);\n+if (mock instanceof Factory) {\n+    ((Factory) mock).setCallbacks(new Callback[]{newFilter});\n+}\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}