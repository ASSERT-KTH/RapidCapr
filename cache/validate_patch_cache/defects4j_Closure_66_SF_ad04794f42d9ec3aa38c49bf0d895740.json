{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    double typed = 0;\n    double total = 0;\n\n    JSONObject jsonObject = new JSONObject(jsonStr);\n    JSONArray jsonArray = jsonObject.getJSONArray(\"data\");\n\n    for (int i = 0; i < jsonArray.length(); i++) {\n        JSONObject obj = jsonArray.getJSONObject(i);\n\n        if (obj.has(\"type\")) {\n            total++;\n\n            String type = obj.getString(\"type\");\n            if (!type.isEmpty()) {\n                typed++;\n            }\n        }\n    }\n\n    if (total == 0) {\n       return 0;\n    }\n\n    return (typed / total) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..5f7fad06 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,32 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    double typed = 0;\n+    double total = 0;\n+\n+    JSONObject jsonObject = new JSONObject(jsonStr);\n+    JSONArray jsonArray = jsonObject.getJSONArray(\"data\");\n+\n+    for (int i = 0; i < jsonArray.length(); i++) {\n+        JSONObject obj = jsonArray.getJSONObject(i);\n+\n+        if (obj.has(\"type\")) {\n+            total++;\n+\n+            String type = obj.getString(\"type\");\n+            if (!type.isEmpty()) {\n+                typed++;\n+            }\n+        }\n+    }\n+\n+    if (total == 0) {\n+       return 0;\n+    }\n+\n+    return (typed / total) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}