{
    "patch": "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        if (type instanceof TypeVariable) {\n            readTypeVariablesOnExtendingBounds((TypeVariable<?>) type);\n        } else if (type instanceof ParameterizedType) {\n            registerTypeVariablesOn(((ParameterizedType) type).getActualTypeArguments());\n        }\n    }\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument instanceof TypeVariable) {\n        readTypeVariablesOnExtendingBounds((TypeVariable<?>) actualTypeArgument);\n    } else if (actualTypeArgument instanceof ParameterizedType) {\n        registerTypeVariablesOn(((ParameterizedType) actualTypeArgument).getActualTypeArguments());\n    }\n}\n\nprivate void readTypeVariablesOnExtendingBounds(TypeVariable<?> typeVariable) {\n    for (Type type : typeVariable.getBounds()) {\n        if (type instanceof TypeVariable) {\n            readTypeVariablesOnExtendingBounds((TypeVariable<?>) type);\n        } else if (type instanceof ParameterizedType) {\n            registerTypeVariablesOn(((ParameterizedType) type).getActualTypeArguments());\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..e85e1fede 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,32 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    for (Type type : typeVariable.getBounds()) {\n+        if (type instanceof TypeVariable) {\n+            readTypeVariablesOnExtendingBounds((TypeVariable<?>) type);\n+        } else if (type instanceof ParameterizedType) {\n+            registerTypeVariablesOn(((ParameterizedType) type).getActualTypeArguments());\n+        }\n+    }\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument instanceof TypeVariable) {\n+        readTypeVariablesOnExtendingBounds((TypeVariable<?>) actualTypeArgument);\n+    } else if (actualTypeArgument instanceof ParameterizedType) {\n+        registerTypeVariablesOn(((ParameterizedType) actualTypeArgument).getActualTypeArguments());\n+    }\n+}\n+\n+private void readTypeVariablesOnExtendingBounds(TypeVariable<?> typeVariable) {\n+    for (Type type : typeVariable.getBounds()) {\n+        if (type instanceof TypeVariable) {\n+            readTypeVariablesOnExtendingBounds((TypeVariable<?>) type);\n+        } else if (type instanceof ParameterizedType) {\n+            registerTypeVariablesOn(((ParameterizedType) type).getActualTypeArguments());\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: incompatible types: Type[] cannot be converted to Type",
    "test_result": "ERROR"
}