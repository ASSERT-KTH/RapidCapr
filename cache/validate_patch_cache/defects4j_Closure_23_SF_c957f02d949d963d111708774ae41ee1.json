{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  if (!right.isNumber()) {\n    return n;\n  }\n\n  double index = right.getDouble();\n  if (index < 0 || !Double.isFinite(index) || index != (int) index) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  Node current = left;\n  int i = 0;\n  while (current != null) {\n    if (current.isArrayLit()) {\n      int size = current.getChildCount();\n      if (size <= index) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      }\n\n      // Return the array element.\n      Node elem = current.getChildAt((int) index).cloneTree();\n      if (elem.isEmpty()) {\n        elem = NodeUtil.newUndefinedNode(left);\n      }\n\n      n.getParent().replaceChild(n, elem);\n      reportCodeChange();\n      return elem;\n    } else if (current.isGetElem()) {\n      Node indexNode = current.getLastChild();\n      if (!indexNode.isNumber()) {\n        return n;\n      }\n      double nestedIndex = indexNode.getDouble();\n      if (nestedIndex < 0 || !Double.isFinite(nestedIndex) || nestedIndex != (int) nestedIndex) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, indexNode);\n        return n;\n      }\n\n      // Evaluate the nested access.\n      Node nested = tryFoldArrayAccess(current, current.getFirstChild(), indexNode);\n      if (nested != current) {\n        current = nested;\n        continue;\n      }\n    }\n\n    current = current.getNext();\n  }\n\n  error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n  return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..34875b7b 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,58 +1419,62 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-    if (isAssignmentTarget(n)) {\n-      return n;\n-    }\n-\n-    if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n-    }\n-\n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+  if (!right.isNumber()) {\n+    return n;\n+  }\n \n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n+  double index = right.getDouble();\n+  if (index < 0 || !Double.isFinite(index) || index != (int) index) {\n+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    return n;\n+  }\n \n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n+  Node current = left;\n+  int i = 0;\n+  while (current != null) {\n+    if (current.isArrayLit()) {\n+      int size = current.getChildCount();\n+      if (size <= index) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+      }\n \n-      current = current.getNext();\n-    }\n+      // Return the array element.\n+      Node elem = current.getChildAt((int) index).cloneTree();\n+      if (elem.isEmpty()) {\n+        elem = NodeUtil.newUndefinedNode(left);\n+      }\n \n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n+      n.getParent().replaceChild(n, elem);\n+      reportCodeChange();\n+      return elem;\n+    } else if (current.isGetElem()) {\n+      Node indexNode = current.getLastChild();\n+      if (!indexNode.isNumber()) {\n+        return n;\n+      }\n+      double nestedIndex = indexNode.getDouble();\n+      if (nestedIndex < 0 || !Double.isFinite(nestedIndex) || nestedIndex != (int) nestedIndex) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, indexNode);\n+        return n;\n+      }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n+      // Evaluate the nested access.\n+      Node nested = tryFoldArrayAccess(current, current.getFirstChild(), indexNode);\n+      if (nested != current) {\n+        current = nested;\n+        continue;\n+      }\n     }\n \n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n+    current = current.getNext();\n   }\n \n+  error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+  return n;\n+}\n+\n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}