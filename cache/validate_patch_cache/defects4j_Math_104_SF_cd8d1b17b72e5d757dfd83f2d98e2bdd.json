{
    "patch": "public static double regularizedGammaP(double a, double x, double epsilon,\n      int maxIterations) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0) {\n        return 0;\n    }\n\n    ContinuedFraction fraction = new ContinuedFraction() {\n\n        @Override\n        protected double getB(int n, double x) {\n            if (n == 1) {\n                return 1.0;\n            } else {\n                return 2.0 * (a - n + 1) * x / ((2 * a - n + 1) + x);\n            }\n        }\n\n        @Override\n        protected double getA(int n, double x) {\n            if (n == 0) {\n                return 0.0;\n            } else {\n                return 1.0;\n            }\n        }\n    };\n\n    double ret = Double.NaN;\n    try {\n        ret = 1.0 - fraction.evaluate(x / a, epsilon, maxIterations);\n    } catch (MaxIterationsExceededException e) {\n        // Ignore.\n    }\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..f7f6fb057 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,44 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double epsilon,\n+      int maxIterations) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0) {\n+        return 0;\n+    }\n+\n+    ContinuedFraction fraction = new ContinuedFraction() {\n+\n+        @Override\n+        protected double getB(int n, double x) {\n+            if (n == 1) {\n+                return 1.0;\n+            } else {\n+                return 2.0 * (a - n + 1) * x / ((2 * a - n + 1) + x);\n+            }\n+        }\n+\n+        @Override\n+        protected double getA(int n, double x) {\n+            if (n == 0) {\n+                return 0.0;\n+            } else {\n+                return 1.0;\n+            }\n+        }\n+    };\n+\n+    double ret = Double.NaN;\n+    try {\n+        ret = 1.0 - fraction.evaluate(x / a, epsilon, maxIterations);\n+    } catch (MaxIterationsExceededException e) {\n+        // Ignore.\n+    }\n+    return ret;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}