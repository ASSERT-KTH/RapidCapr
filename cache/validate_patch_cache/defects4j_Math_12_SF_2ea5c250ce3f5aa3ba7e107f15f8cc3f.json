{
    "patch": " public double[] distributionClone(double[] genotypeProbabilities, int M, int D, int N) {\n    double[][] dp = new double[2][M];\n    double sum;\n\n    for(int i=0;i<M;i++)\n        dp[0][i] = genotypeProbabilities[i];\n\n    for(int d = 1; d <= D; d++) {\n        for(int i = 0; i < M; i++) {\n            sum = 0;\n            for(int j = 0; j < M; j++) {\n                sum += dp[(d-1)%2][j] * genotypeProbabilities[getDominant(i, j, M)];\n            }\n            dp[d%2][i] = sum;\n        }\n    }\n\n    int binom = (1 << D) - 1;\n    double[] res = new double[N+1];\n    for(int i=0;i<M;i++)\n        res[populationCount(i & binom)] += dp[D%2][i];\n\n    for(int i=0;i<N+1;i++)\n        res[i] /= Math.pow(M, D);\n\n    return res;\n}\n\npublic int getDominant(int i,int j,int M){\n    if(j > i)\n        return getDominant(j, i, M);\n    int ind = ((M * (M-1))/2) - ((M-i) * (M-i-1)) / 2 + j - i -1;\n    return ind;\n}\n\npublic int populationCount(int i) {\n    int cnt = 0;\n    for(int j=0;j<=22;j++) {\n        if( (i & 1) == 1)\n            cnt += 1;\n        i = i >> 1;\n    }\n    return cnt;\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}