{
    "patch": "private Object getArgumentAt(Invocation invocation, int position, Object varargValue) {\n    if (isVariableArgument(invocation, position)) {\n        Object[] varargs = asArray(invocation.getRawArguments()[position]);\n        Object[] args = new Object[varargs.length + 1];\n        System.arraycopy(varargs, 0, args, 0, varargs.length);\n        args[varargs.length] = varargValue;\n        return args;\n    } else {\n        return invocation.getArgumentAt(position, Object.class);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..2e52610cb 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,17 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+private Object getArgumentAt(Invocation invocation, int position, Object varargValue) {\n+    if (isVariableArgument(invocation, position)) {\n+        Object[] varargs = asArray(invocation.getRawArguments()[position]);\n+        Object[] args = new Object[varargs.length + 1];\n+        System.arraycopy(varargs, 0, args, 0, varargs.length);\n+        args[varargs.length] = varargValue;\n+        return args;\n+    } else {\n+        return invocation.getArgumentAt(position, Object.class);\n+    }\n+}\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}