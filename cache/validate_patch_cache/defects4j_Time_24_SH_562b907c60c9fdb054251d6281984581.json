{
    "patch": "        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (resetFields == false) {\n              if (e.getDateTimeFieldType().equals(DateTimeFieldType.year())){\n                throw new IllegalFieldValueException(e.getDateTimeFieldType(),\"Cannot parse \\\"\" + text + \"\\\" as year may exceed maximum value\",null,e.getIllegalValue());\n              }\n              else{\n                throw e;\n              }\n            } else {\n              if (text != null) {\n                  e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n              }\n              throw e;\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..5c8e21ec 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,25 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            if (resetFields == false) {\n+              if (e.getDateTimeFieldType().equals(DateTimeFieldType.year())){\n+                throw new IllegalFieldValueException(e.getDateTimeFieldType(),\"Cannot parse \\\"\" + text + \"\\\" as year may exceed maximum value\",null,e.getIllegalValue());\n+              }\n+              else{\n+                throw e;\n+              }\n+            } else {\n+              if (text != null) {\n+                  e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+              }\n+              throw e;\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}