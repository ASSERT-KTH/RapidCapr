{
    "patch": "Node parseInputs() {\n  boolean devMode = options.devMode != DevMode.OFF;\n\n  if (options.instrumentForCoverage) {\n    instrumentationBuilder = new CoverageInstrumentationBuilder(this, codingConvention);\n  }\n\n  if (options.processCommonJSModules) {\n    commonJs = new ProcessCommonJSModules(this, modules, options);\n    commonJs.process();\n    if (hasErrors()) {\n      return null;\n    }\n  }\n\n  if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n    if (!options.skipAllPasses) {\n      inputs = updatedInputs(commonJs.getInputs(), inputs, options.dependencyOptions, modules);\n    }\n  }\n\n  if (externsRoot != null) {\n    externsRoot.detachChildren();\n  }\n  if (jsRoot != null) {\n    jsRoot.detachChildren();\n  }\n  jsRoot = IR.block();\n  jsRoot.setIsSyntheticBlock(true);\n  externsRoot = IR.block();\n  externsRoot.setIsSyntheticBlock(true);\n  unorderedExternsRoot = IR.block();\n  unorderedExternsRoot.setIsSyntheticBlock(true);\n  unorderedJsRoot = IR.block();\n  unorderedJsRoot.setIsSyntheticBlock(true);\n  externAndJsRoot = IR.block(externsRoot, jsRoot);\n  externAndJsRoot.setIsSyntheticBlock(true);\n\n  if (options.tracer.isOn()) {\n    // Poor-man's exclusive time tracking: don't bother instrumenting\n    // the time spent in the first read of the sources, because\n    // the disk access overheads tend to skew the results.\n    tracker = new PerformanceTracker(jsRoot, options.tracer);\n    addChangeHandler(tracker.getCodeChangeHandler());\n  }\n\n  boolean parseJsDocDocumentation = options.parseJsDocDocumentation;\n  if (options.jsDocParsingMode == Options.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE) {\n    options.parseJsDocDocumentation = true;\n  }\n  try {\n    parseInputsInternal(inputs, externs, jsRoot, externsRoot, unorderedJsRoot, unorderedExternsRoot);\n    if (hasErrors()) {\n      stopTracer(tracer, \"parseInputs\");\n      return null;\n    }\n\n    if (options.findTypesForLocalOptimization) {\n      // Call the type inference algorithm.\n      ArrayList<Node> typeRoots = Lists.newArrayList();\n      typeRoots.add(jsRoot);\n      TypeInferencePass inferencePass = new TypeInferencePass(this, typeRoots);\n      inferencePass.process(null);\n    }\n\n    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n      for (CompilerInput input : inputs) {\n        InputId inputId = input.getInputId();\n        if (inputId.isModule()) {\n          // Double check to make sure that we've ruled out all invalid\n          // module declarations.\n          if (!commonJs.getAllModuleIds().contains(inputId.getId())) {\n            report(JSError.make(INVALID_MODULE_DECLARATION, input.getName()));\n          }\n        }\n      }\n    }\n\n    if (options.dependencyOptions.needsManagement() &&\n        !options.skipAllPasses &&\n        options.closurePass) {\n      buildDependenciesFromInputs(inputs, options.dependencyOptions, modules);\n    }\n\n    if (options.warningLevel.verbose && options.checkGlobalThisLevel.isOn()) {\n      CheckGlobalThis checkGlobalThis =\n          new CheckGlobalThis(this, options.checkGlobalThisLevel, options.languageIn);\n      NodeTraversal.traverse(this, jsRoot, checkGlobalThis);\n      if (hasErrors()) {\n        reportCodeChange();\n        stopTracer(tracer, \"parseInputs\");\n        return null;\n      }\n    }\n\n    if (options.checkSymbols) {\n      CheckSymbols symbolChecker =\n          new CheckSymbols(this, options.enforceAccessControlCodingConventions);\n      NodeTraversal.traverse(this, jsRoot, symbolChecker);\n      if (hasErrors()) {\n        reportCodeChange();\n        stopTracer(tracer, \"parseInputs\");\n        return null;\n      }\n    }\n\n    if (options.enableTypedInference) {\n      TypeInferencePass inferencePass =\n          new TypeInferencePass(this, ImmutableList.of(jsRoot));\n      inferencePass.process(null);\n      if (hasErrors()) {\n        reportCodeChange();\n        stopTracer(tracer, \"parseInputs\");\n        return null;\n      }\n    }\n\n    if (options.newTypeInference) {\n      inferTypes();\n      if (hasErrors()) {\n        reportCodeChange();\n        stopTracer(tracer, \"parseInputs\");\n        return null;\n      }\n    }\n\n    if (options.instrumentForCoverage) {\n      instrumentationBuilder.process();\n    }\n\n    return externAndJsRoot;\n  } finally {\n    options.parseJsDocDocumentation = parseJsDocDocumentation;\n    stopTracer(tracer, \"parseInputs\");\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b76bbb5c..3f92846d 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -1200,191 +1200,142 @@ public class Compiler extends AbstractCompiler {\n   }\n \n   @Override\n-  public ReverseAbstractInterpreter getReverseAbstractInterpreter() {\n-    if (abstractInterpreter == null) {\n-      ChainableReverseAbstractInterpreter interpreter =\n-          new SemanticReverseAbstractInterpreter(\n-              getCodingConvention(), getTypeRegistry());\n-      if (options.closurePass) {\n-        interpreter = new ClosureReverseAbstractInterpreter(\n-            getCodingConvention(), getTypeRegistry())\n-            .append(interpreter).getFirst();\n-      }\n-      abstractInterpreter = interpreter;\n-    }\n-    return abstractInterpreter;\n+Node parseInputs() {\n+  boolean devMode = options.devMode != DevMode.OFF;\n+\n+  if (options.instrumentForCoverage) {\n+    instrumentationBuilder = new CoverageInstrumentationBuilder(this, codingConvention);\n   }\n \n-  @Override\n-  TypeValidator getTypeValidator() {\n-    if (typeValidator == null) {\n-      typeValidator = new TypeValidator(this);\n+  if (options.processCommonJSModules) {\n+    commonJs = new ProcessCommonJSModules(this, modules, options);\n+    commonJs.process();\n+    if (hasErrors()) {\n+      return null;\n     }\n-    return typeValidator;\n   }\n \n-  //------------------------------------------------------------------------\n-  // Parsing\n-  //------------------------------------------------------------------------\n-\n-  /**\n-   * Parses the externs and main inputs.\n-   *\n-   * @return A synthetic root node whose two children are the externs root\n-   *     and the main root\n-   */\n-  Node parseInputs() {\n-    boolean devMode = options.devMode != DevMode.OFF;\n-\n-    // If old roots exist (we are parsing a second time), detach each of the\n-    // individual file parse trees.\n-    if (externsRoot != null) {\n-      externsRoot.detachChildren();\n-    }\n-    if (jsRoot != null) {\n-      jsRoot.detachChildren();\n+  if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n+    if (!options.skipAllPasses) {\n+      inputs = updatedInputs(commonJs.getInputs(), inputs, options.dependencyOptions, modules);\n     }\n+  }\n \n-    // Parse main js sources.\n-    jsRoot = IR.block();\n-    jsRoot.setIsSyntheticBlock(true);\n-\n-    externsRoot = IR.block();\n-    externsRoot.setIsSyntheticBlock(true);\n+  if (externsRoot != null) {\n+    externsRoot.detachChildren();\n+  }\n+  if (jsRoot != null) {\n+    jsRoot.detachChildren();\n+  }\n+  jsRoot = IR.block();\n+  jsRoot.setIsSyntheticBlock(true);\n+  externsRoot = IR.block();\n+  externsRoot.setIsSyntheticBlock(true);\n+  unorderedExternsRoot = IR.block();\n+  unorderedExternsRoot.setIsSyntheticBlock(true);\n+  unorderedJsRoot = IR.block();\n+  unorderedJsRoot.setIsSyntheticBlock(true);\n+  externAndJsRoot = IR.block(externsRoot, jsRoot);\n+  externAndJsRoot.setIsSyntheticBlock(true);\n \n-    externAndJsRoot = IR.block(externsRoot, jsRoot);\n-    externAndJsRoot.setIsSyntheticBlock(true);\n+  if (options.tracer.isOn()) {\n+    // Poor-man's exclusive time tracking: don't bother instrumenting\n+    // the time spent in the first read of the sources, because\n+    // the disk access overheads tend to skew the results.\n+    tracker = new PerformanceTracker(jsRoot, options.tracer);\n+    addChangeHandler(tracker.getCodeChangeHandler());\n+  }\n \n-    if (options.tracer.isOn()) {\n-      tracker = new PerformanceTracker(jsRoot, options.tracer);\n-      addChangeHandler(tracker.getCodeChangeHandler());\n+  boolean parseJsDocDocumentation = options.parseJsDocDocumentation;\n+  if (options.jsDocParsingMode == Options.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE) {\n+    options.parseJsDocDocumentation = true;\n+  }\n+  try {\n+    parseInputsInternal(inputs, externs, jsRoot, externsRoot, unorderedJsRoot, unorderedExternsRoot);\n+    if (hasErrors()) {\n+      stopTracer(tracer, \"parseInputs\");\n+      return null;\n     }\n \n-    Tracer tracer = newTracer(\"parseInputs\");\n-\n-    try {\n-      // Parse externs sources.\n-      for (CompilerInput input : externs) {\n-        Node n = input.getAstRoot(this);\n-        if (hasErrors()) {\n-          return null;\n-        }\n-        externsRoot.addChildToBack(n);\n-      }\n-\n-      // Modules inferred in ProcessCommonJS pass.\n-      if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n-        processAMDAndCommonJSModules();\n-      }\n-\n-      // Check if inputs need to be rebuilt from modules.\n-      boolean staleInputs = false;\n-\n-      // Check if the sources need to be re-ordered.\n-      if (options.dependencyOptions.needsManagement() &&\n-          !options.skipAllPasses &&\n-          options.closurePass) {\n-        for (CompilerInput input : inputs) {\n-          // Forward-declare all the provided types, so that they\n-          // are not flagged even if they are dropped from the process.\n-          for (String provide : input.getProvides()) {\n-            getTypeRegistry().forwardDeclareType(provide);\n-          }\n-        }\n-\n-        try {\n-          inputs =\n-              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n-              .manageDependencies(options.dependencyOptions, inputs);\n-          staleInputs = true;\n-        } catch (CircularDependencyException e) {\n-          report(JSError.make(\n-              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n-\n-          // If in IDE mode, we ignore the error and keep going.\n-          if (hasErrors()) {\n-            return null;\n-          }\n-        } catch (MissingProvideException e) {\n-          report(JSError.make(\n-              MISSING_ENTRY_ERROR, e.getMessage()));\n+    if (options.findTypesForLocalOptimization) {\n+      // Call the type inference algorithm.\n+      ArrayList<Node> typeRoots = Lists.newArrayList();\n+      typeRoots.add(jsRoot);\n+      TypeInferencePass inferencePass = new TypeInferencePass(this, typeRoots);\n+      inferencePass.process(null);\n+    }\n \n-          // If in IDE mode, we ignore the error and keep going.\n-          if (hasErrors()) {\n-            return null;\n+    if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n+      for (CompilerInput input : inputs) {\n+        InputId inputId = input.getInputId();\n+        if (inputId.isModule()) {\n+          // Double check to make sure that we've ruled out all invalid\n+          // module declarations.\n+          if (!commonJs.getAllModuleIds().contains(inputId.getId())) {\n+            report(JSError.make(INVALID_MODULE_DECLARATION, input.getName()));\n           }\n         }\n       }\n+    }\n \n-      for (CompilerInput input : inputs) {\n-        Node n = input.getAstRoot(this);\n-\n-        // Inputs can have a null AST during initial parse.\n-        if (n == null) {\n-          continue;\n-        }\n+    if (options.dependencyOptions.needsManagement() &&\n+        !options.skipAllPasses &&\n+        options.closurePass) {\n+      buildDependenciesFromInputs(inputs, options.dependencyOptions, modules);\n+    }\n \n-        if (n.getJSDocInfo() != null) {\n-          JSDocInfo info = n.getJSDocInfo();\n-          if (info.isExterns()) {\n-            // If the input file is explicitly marked as an externs file, then\n-            // assume the programmer made a mistake and throw it into\n-            // the externs pile anyways.\n-            externsRoot.addChildToBack(n);\n-            input.setIsExtern(true);\n-\n-            input.getModule().remove(input);\n-\n-            externs.add(input);\n-            staleInputs = true;\n-          } else if (info.isNoCompile()) {\n-            input.getModule().remove(input);\n-            staleInputs = true;\n-          }\n-        }\n+    if (options.warningLevel.verbose && options.checkGlobalThisLevel.isOn()) {\n+      CheckGlobalThis checkGlobalThis =\n+          new CheckGlobalThis(this, options.checkGlobalThisLevel, options.languageIn);\n+      NodeTraversal.traverse(this, jsRoot, checkGlobalThis);\n+      if (hasErrors()) {\n+        reportCodeChange();\n+        stopTracer(tracer, \"parseInputs\");\n+        return null;\n       }\n+    }\n \n-      if (staleInputs) {\n-        fillEmptyModules(modules);\n-        rebuildInputsFromModules();\n+    if (options.checkSymbols) {\n+      CheckSymbols symbolChecker =\n+          new CheckSymbols(this, options.enforceAccessControlCodingConventions);\n+      NodeTraversal.traverse(this, jsRoot, symbolChecker);\n+      if (hasErrors()) {\n+        reportCodeChange();\n+        stopTracer(tracer, \"parseInputs\");\n+        return null;\n       }\n+    }\n \n-      // Build the AST.\n-      for (CompilerInput input : inputs) {\n-        Node n = input.getAstRoot(this);\n-        if (n == null) {\n-          continue;\n-        }\n-\n-        if (devMode) {\n-          runSanityCheck();\n-          if (hasErrors()) {\n-            return null;\n-          }\n-        }\n-\n-        if (options.sourceMapOutputPath != null ||\n-            options.nameReferenceReportPath != null) {\n-\n-          // Annotate the nodes in the tree with information from the\n-          // input file. This information is used to construct the SourceMap.\n-          SourceInformationAnnotator sia =\n-              new SourceInformationAnnotator(\n-                  input.getName(), options.devMode != DevMode.OFF);\n-          NodeTraversal.traverse(this, n, sia);\n-        }\n-\n-        jsRoot.addChildToBack(n);\n+    if (options.enableTypedInference) {\n+      TypeInferencePass inferencePass =\n+          new TypeInferencePass(this, ImmutableList.of(jsRoot));\n+      inferencePass.process(null);\n+      if (hasErrors()) {\n+        reportCodeChange();\n+        stopTracer(tracer, \"parseInputs\");\n+        return null;\n       }\n+    }\n \n+    if (options.newTypeInference) {\n+      inferTypes();\n       if (hasErrors()) {\n+        reportCodeChange();\n+        stopTracer(tracer, \"parseInputs\");\n         return null;\n       }\n-      return externAndJsRoot;\n-    } finally {\n-      stopTracer(tracer, \"parseInputs\");\n     }\n+\n+    if (options.instrumentForCoverage) {\n+      instrumentationBuilder.process();\n+    }\n+\n+    return externAndJsRoot;\n+  } finally {\n+    options.parseJsDocDocumentation = parseJsDocDocumentation;\n+    stopTracer(tracer, \"parseInputs\");\n   }\n+}\n \n   /**\n    * Transforms AMD and CJS modules to something closure compiler can",
    "result_reason": "error: Compiler is not abstract and does not override abstract method getReverseAbstractInterpreter() in AbstractCompiler",
    "test_result": "ERROR"
}