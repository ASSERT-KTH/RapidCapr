{
    "patch": "public Fraction reduce() {\n    // calculate gcd\n    int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n\n    // reduce fraction\n    if (gcd == 1) {\n        return this;\n    }\n\n    int reducedNumerator = numerator / gcd;\n    int reducedDenominator = denominator / gcd;\n\n    // if the denominator is negative, flip the signs of the numerator and denominator\n    if (reducedDenominator < 0) {\n        reducedNumerator = -reducedNumerator;\n        reducedDenominator = -reducedDenominator;\n    }\n\n    // return the reduced fraction as a new Fraction instance\n    return new Fraction(reducedNumerator, reducedDenominator);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..98e7980c 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,14 +462,28 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n-        }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+public Fraction reduce() {\n+    // calculate gcd\n+    int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n+\n+    // reduce fraction\n+    if (gcd == 1) {\n+        return this;\n+    }\n+\n+    int reducedNumerator = numerator / gcd;\n+    int reducedDenominator = denominator / gcd;\n+\n+    // if the denominator is negative, flip the signs of the numerator and denominator\n+    if (reducedDenominator < 0) {\n+        reducedNumerator = -reducedNumerator;\n+        reducedDenominator = -reducedDenominator;\n     }\n \n+    // return the reduced fraction as a new Fraction instance\n+    return new Fraction(reducedNumerator, reducedDenominator);\n+}\n+\n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>\n      * ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1> but was:<100>",
    "test_result": "FAIL"
}