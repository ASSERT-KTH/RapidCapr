{
    "patch": "public EqualsBuilder append(final Object lhs, final Object rhs) {\n    if (isEquals == false) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null || rhs == null) {\n        this.setEquals(lhs == rhs);\n        return this;\n    }\n    final Class<?> lhsClass = lhs.getClass();\n    if (!lhsClass.isArray()) {\n        // handle the simplest case, when lhs is not an array\n        isEquals = lhs.equals(rhs);\n    } else {\n        final Class<?> rhsClass = rhs.getClass();\n        if (lhsClass != rhsClass) {\n            // handle arrays of different types\n            this.setEquals(false);\n        } else if (lhs instanceof long[]) {\n            // handle the case of long[] arrays\n            append((long[]) lhs, (long[]) rhs);\n        } else if (lhs instanceof int[]) {\n            // handle the case of int[] arrays\n            append((int[]) lhs, (int[]) rhs);\n        } else if (lhs instanceof short[]) {\n            // handle the case of short[] arrays\n            append((short[]) lhs, (short[]) rhs);\n        } else if (lhs instanceof char[]) {\n            // handle the case of char[] arrays\n            append((char[]) lhs, (char[]) rhs);\n        } else if (lhs instanceof byte[]) {\n            // handle the case of byte[] arrays\n            append((byte[]) lhs, (byte[]) rhs);\n        } else if (lhs instanceof double[]) {\n            // handle the case of double[] arrays\n            append((double[]) lhs, (double[]) rhs);\n        } else if (lhs instanceof float[]) {\n            // handle the case of float[] arrays\n            append((float[]) lhs, (float[]) rhs);\n        } else if (lhs instanceof boolean[]) {\n            // handle the case of boolean[] arrays\n            append((boolean[]) lhs, (boolean[]) rhs);\n        } else {\n            // handle the case of Object[] arrays\n            append((Object[]) lhs, (Object[]) rhs);\n        }\n    }\n    return this;\n}\n\nprivate void append(final long[] lhs, final long[] rhs) {\n    if (isEquals == false) {\n        return;\n    }\n    isEquals = Arrays.equals(lhs, rhs);\n}\n\nprivate void append(final int[] lhs, final int[] rhs) {\n    if (isEquals == false) {\n        return;\n    }\n    isEquals = Arrays.equals(lhs, rhs);\n}\n\nprivate void append(final short[] lhs, final short[] rhs) {\n    if (isEquals == false) {\n        return;\n    }\n    isEquals = Arrays.equals(lhs, rhs);\n}\n\nprivate void append(final char[] lhs, final char[] rhs) {\n    if (isEquals == false) {\n        return;\n    }\n    isEquals = Arrays.equals(lhs, rhs);\n}\n\nprivate void append(final byte[] lhs, final byte[] rhs) {\n    if (isEquals == false) {\n        return;\n    }\n    isEquals = Arrays.equals(lhs, rhs);\n}\n\nprivate void append(final double[] lhs, final double[] rhs) {\n    if (isEquals == false) {\n        return;\n    }\n    isEquals = Arrays.equals(lhs, rhs);\n}\n\nprivate void append(final float[] lhs, final float[] rhs) {\n    if (isEquals == false) {\n        return;\n    }\n    isEquals = Arrays.equals(lhs, rhs);\n}\n\nprivate void append(final boolean[] lhs, final boolean[] rhs) {\n    if (isEquals == false) {\n        return;\n    }\n    isEquals = Arrays.equals(lhs, rhs);\n}\n\nprivate void append(final Object[] lhs, final Object[] rhs) {\n    if (isEquals == false) {\n        return;\n    }\n    isEquals = Arrays.deepEquals(lhs, rhs);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..f34fd816 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,49 +364,120 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n-    public EqualsBuilder append(Object lhs, Object rhs) {\n-        if (isEquals == false) {\n-            return this;\n-        }\n-        if (lhs == rhs) {\n-            return this;\n-        }\n-        if (lhs == null || rhs == null) {\n-            this.setEquals(false);\n-            return this;\n-        }\n-        Class lhsClass = lhs.getClass();\n-        if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n+public EqualsBuilder append(final Object lhs, final Object rhs) {\n+    if (isEquals == false) {\n+        return this;\n+    }\n+    if (lhs == rhs) {\n+        return this;\n+    }\n+    if (lhs == null || rhs == null) {\n+        this.setEquals(lhs == rhs);\n+        return this;\n+    }\n+    final Class<?> lhsClass = lhs.getClass();\n+    if (!lhsClass.isArray()) {\n+        // handle the simplest case, when lhs is not an array\n+        isEquals = lhs.equals(rhs);\n+    } else {\n+        final Class<?> rhsClass = rhs.getClass();\n+        if (lhsClass != rhsClass) {\n+            // handle arrays of different types\n             this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n+        } else if (lhs instanceof long[]) {\n+            // handle the case of long[] arrays\n             append((long[]) lhs, (long[]) rhs);\n         } else if (lhs instanceof int[]) {\n+            // handle the case of int[] arrays\n             append((int[]) lhs, (int[]) rhs);\n         } else if (lhs instanceof short[]) {\n+            // handle the case of short[] arrays\n             append((short[]) lhs, (short[]) rhs);\n         } else if (lhs instanceof char[]) {\n+            // handle the case of char[] arrays\n             append((char[]) lhs, (char[]) rhs);\n         } else if (lhs instanceof byte[]) {\n+            // handle the case of byte[] arrays\n             append((byte[]) lhs, (byte[]) rhs);\n         } else if (lhs instanceof double[]) {\n+            // handle the case of double[] arrays\n             append((double[]) lhs, (double[]) rhs);\n         } else if (lhs instanceof float[]) {\n+            // handle the case of float[] arrays\n             append((float[]) lhs, (float[]) rhs);\n         } else if (lhs instanceof boolean[]) {\n+            // handle the case of boolean[] arrays\n             append((boolean[]) lhs, (boolean[]) rhs);\n         } else {\n-            // Not an array of primitives\n+            // handle the case of Object[] arrays\n             append((Object[]) lhs, (Object[]) rhs);\n         }\n-        return this;\n     }\n+    return this;\n+}\n+\n+private void append(final long[] lhs, final long[] rhs) {\n+    if (isEquals == false) {\n+        return;\n+    }\n+    isEquals = Arrays.equals(lhs, rhs);\n+}\n+\n+private void append(final int[] lhs, final int[] rhs) {\n+    if (isEquals == false) {\n+        return;\n+    }\n+    isEquals = Arrays.equals(lhs, rhs);\n+}\n+\n+private void append(final short[] lhs, final short[] rhs) {\n+    if (isEquals == false) {\n+        return;\n+    }\n+    isEquals = Arrays.equals(lhs, rhs);\n+}\n+\n+private void append(final char[] lhs, final char[] rhs) {\n+    if (isEquals == false) {\n+        return;\n+    }\n+    isEquals = Arrays.equals(lhs, rhs);\n+}\n+\n+private void append(final byte[] lhs, final byte[] rhs) {\n+    if (isEquals == false) {\n+        return;\n+    }\n+    isEquals = Arrays.equals(lhs, rhs);\n+}\n+\n+private void append(final double[] lhs, final double[] rhs) {\n+    if (isEquals == false) {\n+        return;\n+    }\n+    isEquals = Arrays.equals(lhs, rhs);\n+}\n+\n+private void append(final float[] lhs, final float[] rhs) {\n+    if (isEquals == false) {\n+        return;\n+    }\n+    isEquals = Arrays.equals(lhs, rhs);\n+}\n+\n+private void append(final boolean[] lhs, final boolean[] rhs) {\n+    if (isEquals == false) {\n+        return;\n+    }\n+    isEquals = Arrays.equals(lhs, rhs);\n+}\n+\n+private void append(final Object[] lhs, final Object[] rhs) {\n+    if (isEquals == false) {\n+        return;\n+    }\n+    isEquals = Arrays.deepEquals(lhs, rhs);\n+}\n \n     /**\n      * <p>",
    "result_reason": "error: generics are not supported in -source 1.3",
    "test_result": "ERROR"
}