{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    // Track the last argument that could not be removed.\n    Node lastGoodArg = null;\n\n    // Get the number of referenced arguments so we can change 'length'.\n    int numReferences = 0;\n\n    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n      Var var = fnScope.getVar(arg.getString());\n      if (referenced.contains(var)) {\n        lastGoodArg = arg;\n        numReferences++;\n      } else if (!modifyCallers) {\n        arg.detach();\n        compiler.reportCodeChange();\n      }\n    }\n\n    if (!modifyCallers) {\n      // If lastGoodArg is in the middle of the list, it will\n      // be replaced by an object that retains the original length.\n      // This is important for reflecting on 'length', but it's not\n      // what the user would expect. So we only do it if it changes\n      // the value of 'length'.\n      Object lengthBeforeOpt = getFunctionParameterValueCount(function);\n      if (argList.getLastChild() != lastGoodArg) {\n        argList.replaceChild(lastGoodArg,\n            createUndefinedExpression().srcref(lastGoodArg));\n      }\n      Object lengthAfterOpt = getFunctionParameterValueCount(function);\n\n      if (lengthBeforeOpt != lengthAfterOpt) {\n        function.putProp(Node.LENGTH, lengthAfterOpt);\n      }\n\n      // If the function had no arguments and lengthBeforeOpt was undefined,\n      // setting the length after the optimization to null will help us keep\n      // track of the arity. This is necessary because we're removing\n      // parameter nodes when there are no references to them.\n      if (lengthBeforeOpt == ScriptRuntime.UNDEFINED && argList.getFirstChild() == null) {\n        function.putProp(Node.LENGTH, null);\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..aaed8035 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,62 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    // Track the last argument that could not be removed.\n+    Node lastGoodArg = null;\n+\n+    // Get the number of referenced arguments so we can change 'length'.\n+    int numReferences = 0;\n+\n+    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (referenced.contains(var)) {\n+        lastGoodArg = arg;\n+        numReferences++;\n+      } else if (!modifyCallers) {\n+        arg.detach();\n+        compiler.reportCodeChange();\n+      }\n+    }\n+\n+    if (!modifyCallers) {\n+      // If lastGoodArg is in the middle of the list, it will\n+      // be replaced by an object that retains the original length.\n+      // This is important for reflecting on 'length', but it's not\n+      // what the user would expect. So we only do it if it changes\n+      // the value of 'length'.\n+      Object lengthBeforeOpt = getFunctionParameterValueCount(function);\n+      if (argList.getLastChild() != lastGoodArg) {\n+        argList.replaceChild(lastGoodArg,\n+            createUndefinedExpression().srcref(lastGoodArg));\n+      }\n+      Object lengthAfterOpt = getFunctionParameterValueCount(function);\n+\n+      if (lengthBeforeOpt != lengthAfterOpt) {\n+        function.putProp(Node.LENGTH, lengthAfterOpt);\n+      }\n+\n+      // If the function had no arguments and lengthBeforeOpt was undefined,\n+      // setting the length after the optimization to null will help us keep\n+      // track of the arity. This is necessary because we're removing\n+      // parameter nodes when there are no references to them.\n+      if (lengthBeforeOpt == ScriptRuntime.UNDEFINED && argList.getFirstChild() == null) {\n+        function.putProp(Node.LENGTH, null);\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}