{
    "patch": "public double getTypedPercent(JSONObject object) {\n    int count = 0;\n    int typed = 0;\n\n    for (Iterator<String> it = object.keys(); it.hasNext(); ) {\n        String key = it.next();\n        count++;\n        if (object.get(key) instanceof String) {\n            typed++;\n        }\n    }\n\n    if (count == 0) {\n        return 0;\n    } else {\n        return ((double) typed / count) * 100.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..b14d0ee8 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(JSONObject object) {\n+    int count = 0;\n+    int typed = 0;\n+\n+    for (Iterator<String> it = object.keys(); it.hasNext(); ) {\n+        String key = it.next();\n+        count++;\n+        if (object.get(key) instanceof String) {\n+            typed++;\n+        }\n+    }\n+\n+    if (count == 0) {\n+        return 0;\n+    } else {\n+        return ((double) typed / count) * 100.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}