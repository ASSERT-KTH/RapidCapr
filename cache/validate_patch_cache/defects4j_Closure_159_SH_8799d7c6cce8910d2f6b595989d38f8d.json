{
    "patch": "    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child != null && child.getType() == Token.NAME) {\n        String functionName = child.getString();\n        if (functionName != null && !functionName.startsWith(\"$\") && !functionName.startsWith(\"goog.\")) {\n          changed.add(functionName);\n        } else if (functionName == null && child.getChildCount() > 0) { // handle cases with a function call expression without a name\n          Node grandChild = child.getFirstChild();\n          if (grandChild.getType() == Token.NAME) {\n            String grandChildName = grandChild.getString();\n            if (grandChildName != null && !grandChildName.startsWith(\"$\") && !grandChildName.startsWith(\"goog.\")) {\n              changed.add(grandChildName);\n            }\n          }\n        }\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..fd5d3e37 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -776,8 +776,25 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n     // For each referenced function, add a new reference\n     if (node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+      if (child != null && child.getType() == Token.NAME) {\n+        String functionName = child.getString();\n+        if (functionName != null && !functionName.startsWith(\"$\") && !functionName.startsWith(\"goog.\")) {\n+          changed.add(functionName);\n+        } else if (functionName == null && child.getChildCount() > 0) { // handle cases with a function call expression without a name\n+          Node grandChild = child.getFirstChild();\n+          if (grandChild.getType() == Token.NAME) {\n+            String grandChildName = grandChild.getString();\n+            if (grandChildName != null && !grandChildName.startsWith(\"$\") && !grandChildName.startsWith(\"goog.\")) {\n+              changed.add(grandChildName);\n+            }\n+          }\n+        }\n+      }\n+    }\n+\n+    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+      findCalledFunctions(c, changed);\n+    }\n       }\n     }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}