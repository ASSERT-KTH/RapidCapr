{
    "patch": "      if (ref == null) {\n        return false;\n      }\n\n      Set<BasicBlock> visited = Sets.newIdentityHashSet();\n      for (BasicBlock block = ref.getBasicBlock();\n           block != null && !visited.contains(block); \n           block = block.getParent()) {\n        visited.add(block);\n        if (block.isLoop) {\n          return false;\n        }\n      }\n\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..02dd0344 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,21 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (ref == null) {\n+        return false;\n+      }\n+\n+      Set<BasicBlock> visited = Sets.newIdentityHashSet();\n+      for (BasicBlock block = ref.getBasicBlock();\n+           block != null && !visited.contains(block); \n+           block = block.getParent()) {\n+        visited.add(block);\n+        if (block.isLoop) {\n+          return false;\n+        }\n+      }\n+\n+      return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}