{
    "patch": "import com.google.common.base.Preconditions;\nimport com.google.javascript.jscomp.*;\nimport com.google.javascript.rhino.*;\nimport java.util.*;\n\npublic class ProgramRepairTool {\n    private final Set<Var> referenced = new HashSet<>();\n    private final AbstractCompiler compiler;\n    private final boolean modifyCallSites;\n    private final CallSiteOptimizer callSiteOptimizer = new CallSiteOptimizer();\n\n    ProgramRepairTool(AbstractCompiler compiler, boolean modifyCallSites) {\n        this.compiler = compiler;\n        this.modifyCallSites = modifyCallSites;\n    }\n\n    private Node getFunctionArgList(Node function) {\n        Node paramList = NodeUtil.getFunctionParameters(function);\n        if (paramList != null) {\n            return paramList;\n        }\n        return null;\n    }\n\n    void removeUnreferencedFunctionArgs(Scope fnScope) {\n        Node function = fnScope.getRootNode();\n        Preconditions.checkState(function.isFunction());\n        if (NodeUtil.isGetOrSetKey(function.getParent())) {\n            return;\n        }\n\n        Node argList = getFunctionArgList(function);\n        boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n        if (!modifyCallers) {\n            for (Node parameter : argList.children()) {\n                final String parameterName = parameter.getString();\n                final Var var = fnScope.getVar(parameterName);\n                if (!referenced.contains(var) && !var.getParentNode().isParamList()) {\n                    parameter.detachFromParent();\n                    compiler.reportChangeToEnclosingScope(parameter);\n                } else {\n                    referenced.addAll(var.getRefs().stream().map(Ref::getScope).collect(Collectors.toList()));\n                    referenced.add(var);\n                }\n            }\n        } else {\n            callSiteOptimizer.optimize(fnScope, referenced);\n        }\n    }\n\n    private class CallSiteOptimizer {\n        boolean canModifyCallers(Node functionNode) {\n            checkState(functionNode.isFunction(), functionNode);\n            return NodeUtil.getFunctionParameters(functionNode).hasChildren()\n                    && NodeUtil.getFunctionBody(functionNode).hasChildren();\n        }\n\n        void optimize(Scope functionScope, Set<Var> seen) {\n            Node function = functionScope.getRootNode();\n            checkState(function.isFunction(), function);\n            Node functionBody = NodeUtil.getFunctionBody(function);\n\n            for (Node callSite : findCallSites(functionScope)) {\n                int parameterCount = findParameterCount(function);\n                int argumentsCount = findArgumentsCount(callSite, function);\n\n                for (int i = 0; i < parameterCount; i++) {\n                    String paramName = NodeUtil.getFunctionParameterNameAt(function, i);\n                    final Var var = functionScope.getVar(paramName);\n                    if (i >= argumentsCount) {\n                        if (!seen.contains(var) && !var.getParentNode().isParamList()) {\n                            // Delete parameter and remove from function scope.\n                            Node argToRemove = NodeUtil.getFunctionParameterAt(function, i);\n                            NodeUtil.deleteNode(argToRemove, compiler);\n                            seen.add(var);\n                        }\n                    } else {\n                        seen.addAll(var.getRefs().stream().map(Ref::getScope).collect(Collectors.toList()));\n                        seen.add(var);\n                    }\n                }\n            }\n        }\n\n        private Collection<Node> findCallSites(final Scope fnScope) {\n            final Node rootNode = fnScope.getRootNode();\n            final List<Node> callSites = new ArrayList<>();\n            final CollectNamedFunctions namedFunctions = new CollectNamedFunctions();\n            NodeUtil.visitPreOrder(rootNode, namedFunctions);\n\n            for (Node namedFunction : namedFunctions.getFunctions()) {\n                final String functionName = namedFunction.getString();\n                final List<Var> vars = fnScope.getVarList(functionName);\n                for (Var var : vars) {\n                    for (Node ancestor = var.getParentNode(); ancestor != rootNode; ancestor = ancestor.getParent()) {\n                        if (NodeUtil.isFunctionCall(ancestor, functionName)) {\n                            callSites.add(ancestor);\n                        }\n                    }\n                }\n            }\n\n            return callSites;\n        }\n\n        private int findParameterCount(Node function) {\n            Node argList = NodeUtil.getFunctionParameters(function);\n            return argList.getChildCount();\n        }\n\n        private int findArgumentsCount(Node callSite, Node function) {\n            Node argList = callSite.getNext();\n            if (argList.isObjectLit() || argList.isArrayLit()) {\n                return argList.getChildCount();\n            }\n            if (argList.isCall() || argList.isNew()) {\n                return argList.getChildCount();\n            }\n            Node argParentType = NodeUtil.getFunctionParameters(function).getParent().getTypeI();\n            if (argParentType != Token.PARAM_LIST) {\n                return argList.getChildCount();\n            }\n            return countRealArguments(argList.children());\n        }\n\n        private int countRealArguments(Iterable<Node> arguments) {\n            int realArguments = 0;\n            for (Node argument : arguments) {\n                if (argument.isObjectLit()) {\n                    realArguments += countRealArguments(argument.children());\n                } else if (!argument.isDefaultValue()) {\n                    realArguments++;\n                }\n            }\n            return realArguments;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..a755733b 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,144 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n+import com.google.common.base.Preconditions;\n+import com.google.javascript.jscomp.*;\n+import com.google.javascript.rhino.*;\n+import java.util.*;\n+\n+public class ProgramRepairTool {\n+    private final Set<Var> referenced = new HashSet<>();\n+    private final AbstractCompiler compiler;\n+    private final boolean modifyCallSites;\n+    private final CallSiteOptimizer callSiteOptimizer = new CallSiteOptimizer();\n+\n+    ProgramRepairTool(AbstractCompiler compiler, boolean modifyCallSites) {\n+        this.compiler = compiler;\n+        this.modifyCallSites = modifyCallSites;\n+    }\n+\n+    private Node getFunctionArgList(Node function) {\n+        Node paramList = NodeUtil.getFunctionParameters(function);\n+        if (paramList != null) {\n+            return paramList;\n+        }\n+        return null;\n+    }\n+\n+    void removeUnreferencedFunctionArgs(Scope fnScope) {\n+        Node function = fnScope.getRootNode();\n+        Preconditions.checkState(function.isFunction());\n+        if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+            return;\n+        }\n+\n+        Node argList = getFunctionArgList(function);\n+        boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+        if (!modifyCallers) {\n+            for (Node parameter : argList.children()) {\n+                final String parameterName = parameter.getString();\n+                final Var var = fnScope.getVar(parameterName);\n+                if (!referenced.contains(var) && !var.getParentNode().isParamList()) {\n+                    parameter.detachFromParent();\n+                    compiler.reportChangeToEnclosingScope(parameter);\n+                } else {\n+                    referenced.addAll(var.getRefs().stream().map(Ref::getScope).collect(Collectors.toList()));\n+                    referenced.add(var);\n+                }\n+            }\n         } else {\n-          break;\n+            callSiteOptimizer.optimize(fnScope, referenced);\n         }\n-      }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n     }\n-  }\n+\n+    private class CallSiteOptimizer {\n+        boolean canModifyCallers(Node functionNode) {\n+            checkState(functionNode.isFunction(), functionNode);\n+            return NodeUtil.getFunctionParameters(functionNode).hasChildren()\n+                    && NodeUtil.getFunctionBody(functionNode).hasChildren();\n+        }\n+\n+        void optimize(Scope functionScope, Set<Var> seen) {\n+            Node function = functionScope.getRootNode();\n+            checkState(function.isFunction(), function);\n+            Node functionBody = NodeUtil.getFunctionBody(function);\n+\n+            for (Node callSite : findCallSites(functionScope)) {\n+                int parameterCount = findParameterCount(function);\n+                int argumentsCount = findArgumentsCount(callSite, function);\n+\n+                for (int i = 0; i < parameterCount; i++) {\n+                    String paramName = NodeUtil.getFunctionParameterNameAt(function, i);\n+                    final Var var = functionScope.getVar(paramName);\n+                    if (i >= argumentsCount) {\n+                        if (!seen.contains(var) && !var.getParentNode().isParamList()) {\n+                            // Delete parameter and remove from function scope.\n+                            Node argToRemove = NodeUtil.getFunctionParameterAt(function, i);\n+                            NodeUtil.deleteNode(argToRemove, compiler);\n+                            seen.add(var);\n+                        }\n+                    } else {\n+                        seen.addAll(var.getRefs().stream().map(Ref::getScope).collect(Collectors.toList()));\n+                        seen.add(var);\n+                    }\n+                }\n+            }\n+        }\n+\n+        private Collection<Node> findCallSites(final Scope fnScope) {\n+            final Node rootNode = fnScope.getRootNode();\n+            final List<Node> callSites = new ArrayList<>();\n+            final CollectNamedFunctions namedFunctions = new CollectNamedFunctions();\n+            NodeUtil.visitPreOrder(rootNode, namedFunctions);\n+\n+            for (Node namedFunction : namedFunctions.getFunctions()) {\n+                final String functionName = namedFunction.getString();\n+                final List<Var> vars = fnScope.getVarList(functionName);\n+                for (Var var : vars) {\n+                    for (Node ancestor = var.getParentNode(); ancestor != rootNode; ancestor = ancestor.getParent()) {\n+                        if (NodeUtil.isFunctionCall(ancestor, functionName)) {\n+                            callSites.add(ancestor);\n+                        }\n+                    }\n+                }\n+            }\n+\n+            return callSites;\n+        }\n+\n+        private int findParameterCount(Node function) {\n+            Node argList = NodeUtil.getFunctionParameters(function);\n+            return argList.getChildCount();\n+        }\n+\n+        private int findArgumentsCount(Node callSite, Node function) {\n+            Node argList = callSite.getNext();\n+            if (argList.isObjectLit() || argList.isArrayLit()) {\n+                return argList.getChildCount();\n+            }\n+            if (argList.isCall() || argList.isNew()) {\n+                return argList.getChildCount();\n+            }\n+            Node argParentType = NodeUtil.getFunctionParameters(function).getParent().getTypeI();\n+            if (argParentType != Token.PARAM_LIST) {\n+                return argList.getChildCount();\n+            }\n+            return countRealArguments(argList.children());\n+        }\n+\n+        private int countRealArguments(Iterable<Node> arguments) {\n+            int realArguments = 0;\n+            for (Node argument : arguments) {\n+                if (argument.isObjectLit()) {\n+                    realArguments += countRealArguments(argument.children());\n+                } else if (!argument.isDefaultValue()) {\n+                    realArguments++;\n+                }\n+            }\n+            return realArguments;\n+        }\n+    }\n+}\n \n \n   /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}