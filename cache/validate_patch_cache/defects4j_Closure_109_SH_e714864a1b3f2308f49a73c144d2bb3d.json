{
    "patch": "private Node parseContextTypeExpression(JsDocToken token) {\n    // parse the type expression\n    Node typeExpression = parseTypeExpression(token);\n    if (typeExpression == null) {\n       return parseTypeName(token);\n    } else if (isName(token.getText())) {\n       // If the token is a name, then this is probably a type expression\n       // with the optional parameters that follow it\n       Node node = createNode(NodeType.TYPE_EXPRESSION, token);\n       addChildToNode(node, typeExpression);\n       while (tokenIterator.hasNext()) {\n          token = tokenIterator.next();\n          if (token.getType() == JsDocToken.TokenType.LPAREN) {\n             node = parseParameterList(node);\n          } else if (token.getType() == JsDocToken.TokenType.LBRACKET) {\n             node = parseArrayType(node);\n          } else if (token.getType() == JsDocToken.TokenType.PIPE) {\n             node = parseUnionTypeExpression(node);\n             break;\n          } else {\n             tokenIterator.previous();\n             break;\n          }\n       }\n       return node;\n    } else {\n       return typeExpression;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..8eb37d4e 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,35 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+private Node parseContextTypeExpression(JsDocToken token) {\n+    // parse the type expression\n+    Node typeExpression = parseTypeExpression(token);\n+    if (typeExpression == null) {\n+       return parseTypeName(token);\n+    } else if (isName(token.getText())) {\n+       // If the token is a name, then this is probably a type expression\n+       // with the optional parameters that follow it\n+       Node node = createNode(NodeType.TYPE_EXPRESSION, token);\n+       addChildToNode(node, typeExpression);\n+       while (tokenIterator.hasNext()) {\n+          token = tokenIterator.next();\n+          if (token.getType() == JsDocToken.TokenType.LPAREN) {\n+             node = parseParameterList(node);\n+          } else if (token.getType() == JsDocToken.TokenType.LBRACKET) {\n+             node = parseArrayType(node);\n+          } else if (token.getType() == JsDocToken.TokenType.PIPE) {\n+             node = parseUnionTypeExpression(node);\n+             break;\n+          } else {\n+             tokenIterator.previous();\n+             break;\n+          }\n+       }\n+       return node;\n+    } else {\n+       return typeExpression;\n+    }\n+}\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}