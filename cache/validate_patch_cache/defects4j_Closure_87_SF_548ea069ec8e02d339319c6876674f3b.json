{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node maybeStmt = n.getFirstChild();\n    if (maybeStmt.getType() == Token.EXPR_RESULT) {\n      Node maybeExpr = maybeStmt.getFirstChild();\n      if (maybeExpr.getType() == Token.ASSIGN) {\n        Node lhs = maybeExpr.getFirstChild();\n        Node rhs = maybeExpr.getLastChild();\n        if (lhs.getType() == Token.NAME && !NodeUtil.mayHaveSideEffects(rhs)) {\n          Node grandparent = n.getParent();\n          if (grandparent != null && grandparent.getType() == Token.BLOCK) {\n            Node greatGrandparent = grandparent.getParent();\n            if (greatGrandparent == null || greatGrandparent.getType() != Token.BLOCK) {\n              // It is not contained within another block.\n              Node ancestor = maybeStmt;\n              while (ancestor != null && ancestor != grandparent) {\n                if (NodeUtil.isLoopStructure(ancestor) || NodeUtil.isIfStructure(ancestor)) {\n                  // It is contained within a loop or an if statement.\n                  return false;\n                }\n                ancestor = ancestor.getParent();\n              }\n              // It is not contained within an if/for/while statement.\n              return true;\n            }\n          }\n        }\n      }\n    } else if (NodeUtil.isExpressionNode(maybeStmt)) {\n      // It is an expression statement.\n      return true;\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..991801b6 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,41 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    Node maybeStmt = n.getFirstChild();\n+    if (maybeStmt.getType() == Token.EXPR_RESULT) {\n+      Node maybeExpr = maybeStmt.getFirstChild();\n+      if (maybeExpr.getType() == Token.ASSIGN) {\n+        Node lhs = maybeExpr.getFirstChild();\n+        Node rhs = maybeExpr.getLastChild();\n+        if (lhs.getType() == Token.NAME && !NodeUtil.mayHaveSideEffects(rhs)) {\n+          Node grandparent = n.getParent();\n+          if (grandparent != null && grandparent.getType() == Token.BLOCK) {\n+            Node greatGrandparent = grandparent.getParent();\n+            if (greatGrandparent == null || greatGrandparent.getType() != Token.BLOCK) {\n+              // It is not contained within another block.\n+              Node ancestor = maybeStmt;\n+              while (ancestor != null && ancestor != grandparent) {\n+                if (NodeUtil.isLoopStructure(ancestor) || NodeUtil.isIfStructure(ancestor)) {\n+                  // It is contained within a loop or an if statement.\n+                  return false;\n+                }\n+                ancestor = ancestor.getParent();\n+              }\n+              // It is not contained within an if/for/while statement.\n+              return true;\n+            }\n+          }\n+        }\n       }\n+    } else if (NodeUtil.isExpressionNode(maybeStmt)) {\n+      // It is an expression statement.\n+      return true;\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}