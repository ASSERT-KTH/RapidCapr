{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n\n      // If we have an EXPR_FUNCTION, we can fold it\n      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n        Node stmt = maybeExpr.getFirstChild();\n        if (stmt.getType() == Token.FUNCTION && !stmt.hasChildren()) {\n          Node body = stmt.getLastChild();\n          if (!body.hasChildren()) {\n            return false;\n          }\n          Node child = body.getFirstChild();\n          if (child.getType() != Token.IF) {\n            return false;\n          }\n          Node condition = child.getFirstChild();\n          if (condition.getType() != Token.NOT) {\n            return false;\n          }\n          Node expr = condition.getFirstChild();\n          if (expr.getType() != Token.NAME) {\n            return false;\n          }\n          String varName = expr.getString();\n          child = child.getLastChild();\n          if (child.getType() != Token.EXPR_RESULT) {\n            return false;\n          }\n          Node call = child.getFirstChild();\n          if (call.getType() != Token.CALL) {\n            return false;\n          }\n          if (call.getFirstChild().getType() != Token.NAME) {\n            return false;\n          }\n          String callee = call.getFirstChild().getString();\n          if (callee.startsWith(\"on\")) {\n            return false;\n          }\n          if (call.getChildCount() != 1) {\n            return false;\n          }\n          Node arg = call.getFirstChild();\n          if (arg.getType() != Token.NAME || !arg.getString().equals(varName)) {\n            return false;\n          }\n          return true;\n        }\n      } else {\n        return NodeUtil.isExpressionNode(maybeExpr);\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..61124eec 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,63 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+\n+      // If we have an EXPR_FUNCTION, we can fold it\n+      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+        Node stmt = maybeExpr.getFirstChild();\n+        if (stmt.getType() == Token.FUNCTION && !stmt.hasChildren()) {\n+          Node body = stmt.getLastChild();\n+          if (!body.hasChildren()) {\n+            return false;\n+          }\n+          Node child = body.getFirstChild();\n+          if (child.getType() != Token.IF) {\n+            return false;\n+          }\n+          Node condition = child.getFirstChild();\n+          if (condition.getType() != Token.NOT) {\n+            return false;\n+          }\n+          Node expr = condition.getFirstChild();\n+          if (expr.getType() != Token.NAME) {\n+            return false;\n+          }\n+          String varName = expr.getString();\n+          child = child.getLastChild();\n+          if (child.getType() != Token.EXPR_RESULT) {\n+            return false;\n+          }\n+          Node call = child.getFirstChild();\n+          if (call.getType() != Token.CALL) {\n+            return false;\n+          }\n+          if (call.getFirstChild().getType() != Token.NAME) {\n+            return false;\n+          }\n+          String callee = call.getFirstChild().getString();\n+          if (callee.startsWith(\"on\")) {\n+            return false;\n+          }\n+          if (call.getChildCount() != 1) {\n+            return false;\n+          }\n+          Node arg = call.getFirstChild();\n+          if (arg.getType() != Token.NAME || !arg.getString().equals(varName)) {\n+            return false;\n+          }\n+          return true;\n+        }\n+      } else {\n+        return NodeUtil.isExpressionNode(maybeExpr);\n       }\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}