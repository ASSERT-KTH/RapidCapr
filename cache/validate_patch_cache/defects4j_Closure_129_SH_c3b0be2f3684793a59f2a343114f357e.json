{
    "patch": "      if (NodeUtil.isGet(first)) {\n        Node getTarget = first.getFirstChild();\n        if (getTarget.isName() && externs.containsName(getTarget.getString())) {\n          // Treat extern methods as always having a \"this\" value of unknown.\n          first.putBooleanProp(Node.FREE_CALL, true);\n        }\n      } else {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..086f25a5 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,13 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+      if (NodeUtil.isGet(first)) {\n+        Node getTarget = first.getFirstChild();\n+        if (getTarget.isName() && externs.containsName(getTarget.getString())) {\n+          // Treat extern methods as always having a \"this\" value of unknown.\n+          first.putBooleanProp(Node.FREE_CALL, true);\n+        }\n+      } else {\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}