{
    "patch": "public long adjustOffset(long instant, boolean earlierOrLater) {\n    long localInstant = convertUTCToLocal(instant);\n    long before = instant - DateTimeConstants.MILLIS_PER_HOUR;\n    long after = instant + DateTimeConstants.MILLIS_PER_HOUR;\n\n    long localBefore = convertUTCToLocal(before);\n    long localAfter = convertUTCToLocal(after);\n\n    boolean isOverlap = localBefore < localAfter;\n\n    if (!isOverlap) {\n        return convertLocalToUTC(localInstant, false, earlierOrLater ? after : before);\n    }\n\n    if (earlierOrLater) {\n        return convertLocalToUTC(localAfter, false, after);\n    } else {\n        if (localInstant == localBefore) {\n            return convertLocalToUTC(localBefore, false, before);\n        } else {\n            return convertLocalToUTC(localInstant, false, after);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802a..d3e36c22 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1160,24 +1160,30 @@ public abstract class DateTimeZone implements Serializable {\n      * @param earlierOrLater  false for earlier, true for later\n      * @return the adjusted instant millis\n      */\n-    public long adjustOffset(long instant, boolean earlierOrLater) {\n-        // a bit messy, but will work in all non-pathological cases\n-        \n-        // evaluate 3 hours before and after to work out if anything is happening\n-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        if (instantBefore == instantAfter) {\n-            return instant;  // not an overlap (less than is a gap, equal is normal case)\n+public long adjustOffset(long instant, boolean earlierOrLater) {\n+    long localInstant = convertUTCToLocal(instant);\n+    long before = instant - DateTimeConstants.MILLIS_PER_HOUR;\n+    long after = instant + DateTimeConstants.MILLIS_PER_HOUR;\n+\n+    long localBefore = convertUTCToLocal(before);\n+    long localAfter = convertUTCToLocal(after);\n+\n+    boolean isOverlap = localBefore < localAfter;\n+\n+    if (!isOverlap) {\n+        return convertLocalToUTC(localInstant, false, earlierOrLater ? after : before);\n+    }\n+\n+    if (earlierOrLater) {\n+        return convertLocalToUTC(localAfter, false, after);\n+    } else {\n+        if (localInstant == localBefore) {\n+            return convertLocalToUTC(localBefore, false, before);\n+        } else {\n+            return convertLocalToUTC(localInstant, false, after);\n         }\n-        \n-        // work out range of instants that have duplicate local times\n-        long local = convertUTCToLocal(instant);\n-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n-        \n-        // calculate result\n-          // currently in later offset\n-          // currently in earlier offset\n     }\n+}\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n \n     //-----------------------------------------------------------------------",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<2007-10-28T03:15:00.000+01:00> was not:<2007-10-28T04:15:00.000+01:00>",
    "test_result": "FAIL"
}