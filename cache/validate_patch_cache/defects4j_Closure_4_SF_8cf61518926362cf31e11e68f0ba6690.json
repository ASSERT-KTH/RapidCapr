{
    "patch": " JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolved = resolveViaRegistry(t, enclosing);\n    boolean registryResolved = resolved, propsResolved = false;\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    if (resolved) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      if (getRegistry().isLastGeneration()) {\n        return getReferencedType();\n      }\n    } else {\n      resolveViaProperties(t, enclosing);\n      propsResolved = isResolved();\n      if (!propsResolved) {\n        handleTypeCycle(t);\n      }\n      super.resolveInternal(t, enclosing);\n      if (propsResolved) {\n        finishPropertyContinuations();\n        if (getRegistry().isLastGeneration()) {\n          return referencedType != null ? referencedType : this;\n        }\n      }\n    }\n    if (registryResolved) {\n      return this;\n    }\n    if (!propsResolved) {\n      handleTypeCycle(t);\n    }\n    return this;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..8180961c 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,39 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n+ JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n     boolean resolved = resolveViaRegistry(t, enclosing);\n+    boolean registryResolved = resolved, propsResolved = false;\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n-\n     if (resolved) {\n       super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+      if (getRegistry().isLastGeneration()) {\n+        return getReferencedType();\n+      }\n+    } else {\n+      resolveViaProperties(t, enclosing);\n+      propsResolved = isResolved();\n+      if (!propsResolved) {\n+        handleTypeCycle(t);\n+      }\n+      super.resolveInternal(t, enclosing);\n+      if (propsResolved) {\n+        finishPropertyContinuations();\n+        if (getRegistry().isLastGeneration()) {\n+          return referencedType != null ? referencedType : this;\n+        }\n+      }\n     }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    if (registryResolved) {\n+      return this;\n     }\n-\n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n+    if (!propsResolved) {\n+      handleTypeCycle(t);\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+    return this;\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}