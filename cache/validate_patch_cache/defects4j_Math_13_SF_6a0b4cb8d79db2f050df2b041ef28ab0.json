{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int chunkSize = 1000; // Set chunk size to a reasonable value\n    final int n = m.getRowDimension();\n    RealMatrix result = new Array2DRowRealMatrix(n, n);\n    EigenDecomposition dec = new EigenDecomposition(m);\n    for (int i = 0; i < n; i += chunkSize) {\n        int elemCount = Math.min(chunkSize, n - i);\n        double[][] chunk = new double[elemCount][n];\n        for (int j = 0; j < elemCount; j++) {\n            System.arraycopy(m.getRow(i + j), 0, chunk[j], 0, n);\n        }\n        RealMatrix chunkMat = new Array2DRowRealMatrix(chunk);\n        RealMatrix chunkRoot = dec.getSquareRoot(chunkMat);\n        for (int j = 0; j < elemCount; j++) {\n            result.setRow(i + j, chunkRoot.getRow(j));\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..d37f7438d 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,23 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int chunkSize = 1000; // Set chunk size to a reasonable value\n+    final int n = m.getRowDimension();\n+    RealMatrix result = new Array2DRowRealMatrix(n, n);\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    for (int i = 0; i < n; i += chunkSize) {\n+        int elemCount = Math.min(chunkSize, n - i);\n+        double[][] chunk = new double[elemCount][n];\n+        for (int j = 0; j < elemCount; j++) {\n+            System.arraycopy(m.getRow(i + j), 0, chunk[j], 0, n);\n+        }\n+        RealMatrix chunkMat = new Array2DRowRealMatrix(chunk);\n+        RealMatrix chunkRoot = dec.getSquareRoot(chunkMat);\n+        for (int j = 0; j < elemCount; j++) {\n+            result.setRow(i + j, chunkRoot.getRow(j));\n+        }\n     }\n+    return result;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}