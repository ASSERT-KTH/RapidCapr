{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    // month is largest field and being added to, such as month-day\n    if (fieldIndex == 1) {\n        int month = values[0];\n        int dayOfMonth = values[1];\n\n        // Compute new month and check for year overflows\n        int newMonth = ((((month - 1) + valueToAdd) % 12) + 12) % 12 + 1;\n        int yearsToAdd = (((month - 1) + valueToAdd) / 12);\n\n        // Compute the new day-of-month, correcting for month overflow\n        int newDayOfMonth = Math.min(dayOfMonth, iChronology.dayOfMonth().getMaximumValue(newMonth));\n\n        // Create a new partial with the updated values and add the years if needed\n        Partial newPartial = new Partial(partial, new DateTimeFieldType[] {DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }, new int[] { newMonth, newDayOfMonth });\n        if (yearsToAdd != 0) {\n            try {\n                newPartial = newPartial.withFieldAdded(DurationFieldType.years(), yearsToAdd);\n            } catch (IllegalArgumentException e) {\n                // Overflow, set year to maximum or minimum value\n                newPartial = newPartial.withField(DateTimeFieldType.year(), yearsToAdd > 0 ? iChronology.year().getMaximumValue() : iChronology.year().getMinimumValue());\n            }\n        }\n\n        return iChronology.get(newPartial, 0L);\n    }\n\n    // delegate to superclass for other fields\n    return super.add(partial, fieldIndex, values, valueToAdd);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..d531dbb5 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,41 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    // month is largest field and being added to, such as month-day\n+    if (fieldIndex == 1) {\n+        int month = values[0];\n+        int dayOfMonth = values[1];\n+\n+        // Compute new month and check for year overflows\n+        int newMonth = ((((month - 1) + valueToAdd) % 12) + 12) % 12 + 1;\n+        int yearsToAdd = (((month - 1) + valueToAdd) / 12);\n+\n+        // Compute the new day-of-month, correcting for month overflow\n+        int newDayOfMonth = Math.min(dayOfMonth, iChronology.dayOfMonth().getMaximumValue(newMonth));\n+\n+        // Create a new partial with the updated values and add the years if needed\n+        Partial newPartial = new Partial(partial, new DateTimeFieldType[] {DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() }, new int[] { newMonth, newDayOfMonth });\n+        if (yearsToAdd != 0) {\n+            try {\n+                newPartial = newPartial.withFieldAdded(DurationFieldType.years(), yearsToAdd);\n+            } catch (IllegalArgumentException e) {\n+                // Overflow, set year to maximum or minimum value\n+                newPartial = newPartial.withField(DateTimeFieldType.year(), yearsToAdd > 0 ? iChronology.year().getMaximumValue() : iChronology.year().getMinimumValue());\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+\n+        return iChronology.get(newPartial, 0L);\n     }\n \n+    // delegate to superclass for other fields\n+    return super.add(partial, fieldIndex, values, valueToAdd);\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}