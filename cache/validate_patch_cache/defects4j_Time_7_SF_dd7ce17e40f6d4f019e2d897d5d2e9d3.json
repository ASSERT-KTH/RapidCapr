{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = instant.getChronology();\n    long instantMillis = instant.getMillis();\n    ZoneOffset instantOffset = chrono.getZone().getOffset(instantMillis);\n    long instantLocal = instantMillis + instantOffset.getTotalSeconds() * 1000;\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n                     instantLocal, chrono, iLocale, iPivotYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos < 0) {\n        instant.setMillis(instantMillis);\n        return newPos;\n    }\n\n    // Determine date fields\n    Chronology bucketChrono = bucket.getChronology();\n    chrono = selectChronology(bucketChrono);\n    long newInstantLocal = bucket.computeMillis(true, text);\n\n    if (bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        if (chrono == null) {\n            chrono = bucketChrono.withZone(DateTimeZone.forOffsetMillis(parsedOffset));\n        } else if (chrono.getZone().getOffset(newInstantLocal) != parsedOffset) {\n            throw new IllegalArgumentException(\"The instant is not valid\");\n        }\n    } else if (bucket.getZone() != null) {\n        DateTimeZone parsedZone = bucket.getZone();\n        if (chrono == null) {\n            chrono = bucketChrono.withZone(parsedZone);\n        } else if (!chrono.getZone().equals(parsedZone)) {\n            throw new IllegalArgumentException(\"The instant is not valid\");\n        }\n    }\n    if (chrono == null) {\n        chrono = bucketChrono;\n    }\n\n    // Ensure that the instant is valid\n    long offset = chrono.getZone().getOffsetFromLocal(newInstantLocal);\n    long instantAdjusted = newInstantLocal - offset;\n    if (instantAdjusted != instantLocal) {\n        throw new IllegalArgumentException(\"The instant is not valid\");\n    }\n\n    instant.setMillis(chrono.getZone().adjustOffset(instantAdjusted, false));\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..143d1eca 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,64 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = instant.getChronology();\n+    long instantMillis = instant.getMillis();\n+    ZoneOffset instantOffset = chrono.getZone().getOffset(instantMillis);\n+    long instantLocal = instantMillis + instantOffset.getTotalSeconds() * 1000;\n+\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+                     instantLocal, chrono, iLocale, iPivotYear);\n+    int newPos = parser.parseInto(bucket, text, position);\n+    if (newPos < 0) {\n+        instant.setMillis(instantMillis);\n+        return newPos;\n+    }\n+\n+    // Determine date fields\n+    Chronology bucketChrono = bucket.getChronology();\n+    chrono = selectChronology(bucketChrono);\n+    long newInstantLocal = bucket.computeMillis(true, text);\n+\n+    if (bucket.getOffsetInteger() != null) {\n+        int parsedOffset = bucket.getOffsetInteger();\n+        if (chrono == null) {\n+            chrono = bucketChrono.withZone(DateTimeZone.forOffsetMillis(parsedOffset));\n+        } else if (chrono.getZone().getOffset(newInstantLocal) != parsedOffset) {\n+            throw new IllegalArgumentException(\"The instant is not valid\");\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+    } else if (bucket.getZone() != null) {\n+        DateTimeZone parsedZone = bucket.getZone();\n+        if (chrono == null) {\n+            chrono = bucketChrono.withZone(parsedZone);\n+        } else if (!chrono.getZone().equals(parsedZone)) {\n+            throw new IllegalArgumentException(\"The instant is not valid\");\n         }\n-        return newPos;\n     }\n+    if (chrono == null) {\n+        chrono = bucketChrono;\n+    }\n+\n+    // Ensure that the instant is valid\n+    long offset = chrono.getZone().getOffsetFromLocal(newInstantLocal);\n+    long instantAdjusted = newInstantLocal - offset;\n+    if (instantAdjusted != instantLocal) {\n+        throw new IllegalArgumentException(\"The instant is not valid\");\n+    }\n+\n+    instant.setMillis(chrono.getZone().adjustOffset(instantAdjusted, false));\n+    instant.setChronology(chrono);\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+    }\n+\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}