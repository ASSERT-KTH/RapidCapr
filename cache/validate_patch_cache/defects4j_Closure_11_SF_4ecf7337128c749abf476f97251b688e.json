{
    "patch": "public String getprop(String key, String defaultValue) {\n    String ret = null;\n    try {\n        Class<?> clazz = Class.forName(\"android.os.SystemProperties\");\n        Method method = clazz.getMethod(\"get\", String.class);\n        ret = (String) method.invoke(null, key);\n    } catch (Exception e) {\n        String message = \"Failed to get property '\" + key + \"'\";\n        if (defaultValue != null) {\n            message += \", returning default value '\" + defaultValue + \"'\";\n        }\n        System.err.println(message);\n    }\n    if (ret == null && defaultValue != null) {\n        System.err.println(\"Property not found, returning default value '\" + defaultValue + \"'\");\n        ret = defaultValue;\n    }\n    return ret;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..74f890cd 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop(String key, String defaultValue) {\n+    String ret = null;\n+    try {\n+        Class<?> clazz = Class.forName(\"android.os.SystemProperties\");\n+        Method method = clazz.getMethod(\"get\", String.class);\n+        ret = (String) method.invoke(null, key);\n+    } catch (Exception e) {\n+        String message = \"Failed to get property '\" + key + \"'\";\n+        if (defaultValue != null) {\n+            message += \", returning default value '\" + defaultValue + \"'\";\n+        }\n+        System.err.println(message);\n+    }\n+    if (ret == null && defaultValue != null) {\n+        System.err.println(\"Property not found, returning default value '\" + defaultValue + \"'\");\n+        ret = defaultValue;\n+    }\n+    return ret;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}