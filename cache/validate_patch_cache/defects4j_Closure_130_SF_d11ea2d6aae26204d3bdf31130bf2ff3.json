{
    "patch": "  private void inlineAliases(GlobalNamespace globalNamespace) {\n    Deque<Name> workList = new ArrayDeque<>(globalNamespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n      // Check if {@code name} meets condition (b).\n      if (name.localSets == 0 && name.globalSets == 1 && name.getDeclaration() != null && name.aliasingGets == 0) {\n        // Find all of {@code name}'s local aliases and try to inline them.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n            // Try to inline the alias by replacing the reference to the aliased name with\n            // the reference to the original name's declaration.\n            if (inlineAliasIfPossible(ref, globalNamespace)) {\n              name.removeRef(ref);\n              // After inlining, check if the original name has become a candidate for further\n              // inlining due to having no remaining local refs.\n              if (name.localSets == 0 && name.aliasingGets == 0 && name.props != null) {\n                workList.addAll(name.props);\n              }\n            }\n          }\n        }\n      }\n\n      // Check if {@code name} meets condition (a).\n      boolean allChildrenMeetA = true;\n      if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets == 0 && name.props != null) {\n        for (Name prop : name.props) {\n          if (!prop.isInlinableInParent()) {\n            allChildrenMeetA = false;\n            break;\n          }\n        }\n        if (allChildrenMeetA) {\n          workList.addAll(name.props);\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..2a6e233f 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,9 +158,8 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n-    // Invariant: All the names in the worklist meet condition (a).\n-    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n+  private void inlineAliases(GlobalNamespace globalNamespace) {\n+    Deque<Name> workList = new ArrayDeque<>(globalNamespace.getNameForest());\n     while (!workList.isEmpty()) {\n       Name name = workList.pop();\n \n@@ -169,29 +168,38 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n+      // Check if {@code name} meets condition (b).\n+      if (name.localSets == 0 && name.globalSets == 1 && name.getDeclaration() != null && name.aliasingGets == 0) {\n+        // Find all of {@code name}'s local aliases and try to inline them.\n         List<Ref> refs = Lists.newArrayList(name.getRefs());\n         for (Ref ref : refs) {\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n+            // Try to inline the alias by replacing the reference to the aliased name with\n+            // the reference to the original name's declaration.\n+            if (inlineAliasIfPossible(ref, globalNamespace)) {\n               name.removeRef(ref);\n+              // After inlining, check if the original name has become a candidate for further\n+              // inlining due to having no remaining local refs.\n+              if (name.localSets == 0 && name.aliasingGets == 0 && name.props != null) {\n+                workList.addAll(name.props);\n+              }\n             }\n           }\n         }\n       }\n \n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n+      // Check if {@code name} meets condition (a).\n+      boolean allChildrenMeetA = true;\n+      if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets == 0 && name.props != null) {\n+        for (Name prop : name.props) {\n+          if (!prop.isInlinableInParent()) {\n+            allChildrenMeetA = false;\n+            break;\n+          }\n+        }\n+        if (allChildrenMeetA) {\n+          workList.addAll(name.props);\n+        }\n       }\n     }\n   }",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}