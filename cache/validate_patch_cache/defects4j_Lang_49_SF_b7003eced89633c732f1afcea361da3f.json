{
    "patch": "public Fraction reduce() {\n        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n        if (gcd == 1) {\n            return this;\n        }\n        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n    }\n\n    private int greatestCommonDivisor(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return Math.abs(a);\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..45de7c0c 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,7 +462,7 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n+public Fraction reduce() {\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;\n@@ -470,6 +470,15 @@ public final class Fraction extends Number implements Comparable {\n         return Fraction.getFraction(numerator / gcd, denominator / gcd);\n     }\n \n+    private int greatestCommonDivisor(int a, int b) {\n+        while (b != 0) {\n+            int temp = b;\n+            b = a % b;\n+            a = temp;\n+        }\n+        return Math.abs(a);\n+    }\n+\n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>\n      * ",
    "result_reason": "error: method greatestCommonDivisor(int,int) is already defined in class Fraction",
    "test_result": "ERROR"
}