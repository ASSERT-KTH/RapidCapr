{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n\n      // Check if child node is an EXPR_RESULT\n      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n        maybeExpr = maybeExpr.getFirstChild();\n\n        // Check if child of EXPR_RESULT is an expression node\n        if (NodeUtil.isExpressionNode(maybeExpr)) {\n          Node parent = n.getParent();\n          while (parent != null) {\n            int type = parent.getType();\n\n            // Check if parent is a HOOK, AND/OR, FOR/WHILE/DO loop, or IF node with an expression condition\n            if (type == Token.HOOK || type == Token.AND || type == Token.OR ||\n                NodeUtil.isLoopStructure(parent) || (type == Token.IF && isExpressionNodeInConditional(parent))) {\n              return false;\n            }\n\n            // Check if parent is a function with an expression in a default parameter\n            if (type == Token.PARAM_LIST && parent.getParent().getType() == Token.FUNCTION) {\n              Node grandparent = parent.getParent().getParent();\n              if (grandparent != null && grandparent.getType() == Token.DEFAULT_VALUE) {\n                Node condition = grandparent.getFirstChild();\n                if (NodeUtil.isExpressionNode(condition)) {\n                  return false;\n                }\n              }\n              break;\n            }\n\n            // Check if parent is an expression\n            if (!NodeUtil.isExpressionNode(parent)) {\n              break;\n            }\n\n            // Move up the tree\n            parent = parent.getParent();\n          }\n\n          return true;\n        }\n      } else {\n        // Check if child node is an expression node\n        return NodeUtil.isExpressionNode(maybeExpr);\n      }\n    }\n  }\n  return false;\n}\n\nprivate boolean isExpressionNodeInConditional(Node conditional) {\n  if (conditional.getType() == Token.IF) {\n    Node condition = conditional.getFirstChild();\n    if (NodeUtil.isExpressionNode(condition)) {\n      return true;\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..0a843e40 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,68 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+\n+      // Check if child node is an EXPR_RESULT\n+      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+        maybeExpr = maybeExpr.getFirstChild();\n+\n+        // Check if child of EXPR_RESULT is an expression node\n+        if (NodeUtil.isExpressionNode(maybeExpr)) {\n+          Node parent = n.getParent();\n+          while (parent != null) {\n+            int type = parent.getType();\n+\n+            // Check if parent is a HOOK, AND/OR, FOR/WHILE/DO loop, or IF node with an expression condition\n+            if (type == Token.HOOK || type == Token.AND || type == Token.OR ||\n+                NodeUtil.isLoopStructure(parent) || (type == Token.IF && isExpressionNodeInConditional(parent))) {\n+              return false;\n+            }\n+\n+            // Check if parent is a function with an expression in a default parameter\n+            if (type == Token.PARAM_LIST && parent.getParent().getType() == Token.FUNCTION) {\n+              Node grandparent = parent.getParent().getParent();\n+              if (grandparent != null && grandparent.getType() == Token.DEFAULT_VALUE) {\n+                Node condition = grandparent.getFirstChild();\n+                if (NodeUtil.isExpressionNode(condition)) {\n+                  return false;\n+                }\n+              }\n+              break;\n+            }\n+\n+            // Check if parent is an expression\n+            if (!NodeUtil.isExpressionNode(parent)) {\n+              break;\n+            }\n+\n+            // Move up the tree\n+            parent = parent.getParent();\n+          }\n+\n+          return true;\n+        }\n+      } else {\n+        // Check if child node is an expression node\n+        return NodeUtil.isExpressionNode(maybeExpr);\n       }\n     }\n+  }\n+  return false;\n+}\n \n-    return false;\n+private boolean isExpressionNodeInConditional(Node conditional) {\n+  if (conditional.getType() == Token.IF) {\n+    Node condition = conditional.getFirstChild();\n+    if (NodeUtil.isExpressionNode(condition)) {\n+      return true;\n+    }\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}