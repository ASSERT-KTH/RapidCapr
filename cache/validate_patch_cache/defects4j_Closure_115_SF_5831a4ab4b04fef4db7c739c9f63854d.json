{
    "patch": "private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    // Make sure that direct call node replacement is possible.\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n    \n    // Get the block node of `fnNode`.\n    Node block = fnNode.getLastChild();\n    \n    // Check if `block` has any side effects.\n    // If it does, then we cannot inline.\n    boolean hasSideEffects = false;\n    if (block.hasChildren()) {\n      Node stmt = block.getFirstChild();\n      if (stmt.isReturn()) {\n        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n      }\n    }\n    if (hasSideEffects) {\n      return CanInlineResult.NO;\n    }\n    \n    // Check the argument nodes of `callNode`.\n    Node cArg = callNode.getFirstChild().getNext();\n    while (cArg != null) {\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    }\n    \n    // Get the parameter nodes of `fnNode`.\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (fnParam != null) {\n      // If a parameter node is not a NAME node with a string value, or if it is a `arguments` node,\n      // then we cannot inline.\n      if (!fnParam.isName() || fnParam.getString().equals(\"arguments\")) {\n        return CanInlineResult.NO;\n      }\n      fnParam = fnParam.getNext();\n    }\n    \n    // If we have reached this point, then we can inline the call node.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..95d8a2db 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,76 +686,50 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n+private CanInlineResult canInlineReferenceDirectly(\n       Node callNode, Node fnNode) {\n+    // Make sure that direct call node replacement is possible.\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n     }\n-\n+    \n+    // Get the block node of `fnNode`.\n     Node block = fnNode.getLastChild();\n-\n+    \n+    // Check if `block` has any side effects.\n+    // If it does, then we cannot inline.\n     boolean hasSideEffects = false;\n     if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n       Node stmt = block.getFirstChild();\n       if (stmt.isReturn()) {\n         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n       }\n     }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n+    if (hasSideEffects) {\n+      return CanInlineResult.NO;\n+    }\n+    \n+    // Check the argument nodes of `callNode`.\n     Node cArg = callNode.getFirstChild().getNext();\n-\n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+    while (cArg != null) {\n+      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+        return CanInlineResult.NO;\n       }\n+      cArg = cArg.getNext();\n     }\n-\n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n+    \n+    // Get the parameter nodes of `fnNode`.\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+    while (fnParam != null) {\n+      // If a parameter node is not a NAME node with a string value, or if it is a `arguments` node,\n+      // then we cannot inline.\n+      if (!fnParam.isName() || fnParam.getString().equals(\"arguments\")) {\n+        return CanInlineResult.NO;\n       }\n+      fnParam = fnParam.getNext();\n     }\n-\n-    return CanInlineResult.YES;\n-  }\n+    \n+    // If we have reached this point, then we can inline the call node.\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}