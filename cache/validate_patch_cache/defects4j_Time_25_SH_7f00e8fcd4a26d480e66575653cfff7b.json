{
    "patch": "if (offsetLocal > offsetAdjusted) {\n    // We may have hit a DST transition backward and thus have\n    // skipped some local time. Find the transition that we skipped.\n    long nextAdjustForward = nextTransition(instantLocal);\n    long nextAdjustBackward = nextTransition(instantAdjusted + 1);\n    if (nextAdjustForward == nextAdjustBackward) {\n        // We're in an ambiguous time, where the clocks shifted\n        // backward. Find the offset of the previous non-ambiguous\n        // moment and use that. This ensures that the returned\n        // value is always on or after the correct offset transition.\n        long prevNonAmbiguous = previousTransition(nextAdjustForward - 1);\n        int offsetPrevNonAmbiguous = getOffset(prevNonAmbiguous);\n        if (offsetPrevNonAmbiguous < offsetLocal) {\n            return offsetPrevNonAmbiguous;\n        }\n    } else {\n        // We have not entered an ambiguous local time. Use the\n        // offset adjusted beforehand.\n        return offsetAdjusted;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..650ae3fa 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,27 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal > offsetAdjusted) {\n+    // We may have hit a DST transition backward and thus have\n+    // skipped some local time. Find the transition that we skipped.\n+    long nextAdjustForward = nextTransition(instantLocal);\n+    long nextAdjustBackward = nextTransition(instantAdjusted + 1);\n+    if (nextAdjustForward == nextAdjustBackward) {\n+        // We're in an ambiguous time, where the clocks shifted\n+        // backward. Find the offset of the previous non-ambiguous\n+        // moment and use that. This ensures that the returned\n+        // value is always on or after the correct offset transition.\n+        long prevNonAmbiguous = previousTransition(nextAdjustForward - 1);\n+        int offsetPrevNonAmbiguous = getOffset(prevNonAmbiguous);\n+        if (offsetPrevNonAmbiguous < offsetLocal) {\n+            return offsetPrevNonAmbiguous;\n+        }\n+    } else {\n+        // We have not entered an ambiguous local time. Use the\n+        // offset adjusted beforehand.\n+        return offsetAdjusted;\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}