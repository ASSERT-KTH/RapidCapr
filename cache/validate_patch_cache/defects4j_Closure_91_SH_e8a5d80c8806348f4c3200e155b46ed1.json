{
    "patch": "      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        if (NodeUtil.isGet(lhs)) {\n          Node llhs = lhs.getFirstChild();\n          boolean isPrototypeAssignment = llhs.getLastChild().getString().equals(\"prototype\");\n          if (isPrototypeAssignment) {\n            if (llhs.getParent().getType() != Token.GETPROP) {\n              // Assignment to prototype should follow the pattern\n              // X.prototype.Y = ...\n              return false;\n            }\n            if (llhs.getNext() != lhs) {\n              // If the value of the assignment isn't the function itself,\n              // then we don't need to traverse it.\n              return false;\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..90b33527 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,23 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        if (NodeUtil.isGet(lhs)) {\n+          Node llhs = lhs.getFirstChild();\n+          boolean isPrototypeAssignment = llhs.getLastChild().getString().equals(\"prototype\");\n+          if (isPrototypeAssignment) {\n+            if (llhs.getParent().getType() != Token.GETPROP) {\n+              // Assignment to prototype should follow the pattern\n+              // X.prototype.Y = ...\n+              return false;\n+            }\n+            if (llhs.getNext() != lhs) {\n+              // If the value of the assignment isn't the function itself,\n+              // then we don't need to traverse it.\n+              return false;\n+            }\n+          }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}