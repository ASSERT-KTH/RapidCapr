{
    "patch": "      if (parent.getType() == Token.CALL && parent.getFirstChild() == n) {\n        // Don't traverse function calls (pass in a constructor, for example)\n        Node callee = NodeUtil.getFunctionNameNode(parent);\n        if (callee != null && callee.matchesQualifiedName(\"goog.reflect.object\")) {\n          // Don't traverse goog.reflect.object calls\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..c5c65614 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,13 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent.getType() == Token.CALL && parent.getFirstChild() == n) {\n+        // Don't traverse function calls (pass in a constructor, for example)\n+        Node callee = NodeUtil.getFunctionNameNode(parent);\n+        if (callee != null && callee.matchesQualifiedName(\"goog.reflect.object\")) {\n+          // Don't traverse goog.reflect.object calls\n+          return false;\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}