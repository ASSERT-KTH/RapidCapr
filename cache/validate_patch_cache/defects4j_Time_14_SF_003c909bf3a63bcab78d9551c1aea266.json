{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    // Determine whether the field being added to is the largest contiguous field (e.g. month-day)\n    boolean isContiguousField = DateTimeUtils.isContiguous(partial) &&\n            ((fieldIndex == 0 && partial.size() == 2) || fieldIndex == 1);\n\n    if (isContiguousField) {\n        int originalMonthOfYear = values[0];\n        int originalDayOfMonth = values[1];\n\n        // Check if the current month has 29 days and is on a leap year\n        boolean isLeapYear = iChronology.year().isLeap(partial);\n        boolean isFeb29Leaped = originalMonthOfYear == 2 && originalDayOfMonth == 29 && isLeapYear;\n\n        // Add months to the field value\n        int newMonthOfYear = FieldUtils.safeAdd(originalMonthOfYear, valueToAdd);\n\n        if (newMonthOfYear < iChronology.monthOfYear().getMinimumValue() || \n            newMonthOfYear > iChronology.monthOfYear().getMaximumValue()) {\n            throw new IllegalArgumentException(\"Month value must be between 1 and 12\");\n        }\n\n        // Create a new partial with the updated month value\n        Partial newPartial = new Partial().with(DateTimeFieldType.monthOfYear(), newMonthOfYear);\n\n        // If it's Feb 29 on a leap year, and we're not adding months that will push it over the year,\n        // we can set the new day of month to 29 and return immediately\n        if (isFeb29Leaped && valueToAdd < 12 && newMonthOfYear == 2 && \n            iChronology.year().isLeap(iChronology.set(partial, newPartial))) {\n            return newPartial.get(iChronology, partial.toDateTime(newPartial).getMillis());\n        }\n\n        // If the new month has fewer days than the previous month, reduce the day of month\n        if (iChronology.getDaysInYearMonth(iChronology.get(partial, partial.toDateTime(newPartial).getMillis())) \n            < originalDayOfMonth) {\n            int newDayOfMonth = iChronology.getDaysInYearMonth(newPartial, \n                    iChronology.dayOfMonth().getMaximumValue(newMonthOfYear));\n            newPartial = newPartial.with(DateTimeFieldType.dayOfMonth(), \n                    newDayOfMonth < originalDayOfMonth ? newDayOfMonth : originalDayOfMonth);\n        } else {\n            // Otherwise, use the original day of month\n            newPartial = newPartial.with(DateTimeFieldType.dayOfMonth(), originalDayOfMonth);\n        }\n\n        return newPartial.get(iChronology, partial.toDateTime(newPartial).getMillis());\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..65f0e2c4 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,60 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    // Determine whether the field being added to is the largest contiguous field (e.g. month-day)\n+    boolean isContiguousField = DateTimeUtils.isContiguous(partial) &&\n+            ((fieldIndex == 0 && partial.size() == 2) || fieldIndex == 1);\n+\n+    if (isContiguousField) {\n+        int originalMonthOfYear = values[0];\n+        int originalDayOfMonth = values[1];\n+\n+        // Check if the current month has 29 days and is on a leap year\n+        boolean isLeapYear = iChronology.year().isLeap(partial);\n+        boolean isFeb29Leaped = originalMonthOfYear == 2 && originalDayOfMonth == 29 && isLeapYear;\n+\n+        // Add months to the field value\n+        int newMonthOfYear = FieldUtils.safeAdd(originalMonthOfYear, valueToAdd);\n+\n+        if (newMonthOfYear < iChronology.monthOfYear().getMinimumValue() || \n+            newMonthOfYear > iChronology.monthOfYear().getMaximumValue()) {\n+            throw new IllegalArgumentException(\"Month value must be between 1 and 12\");\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+\n+        // Create a new partial with the updated month value\n+        Partial newPartial = new Partial().with(DateTimeFieldType.monthOfYear(), newMonthOfYear);\n+\n+        // If it's Feb 29 on a leap year, and we're not adding months that will push it over the year,\n+        // we can set the new day of month to 29 and return immediately\n+        if (isFeb29Leaped && valueToAdd < 12 && newMonthOfYear == 2 && \n+            iChronology.year().isLeap(iChronology.set(partial, newPartial))) {\n+            return newPartial.get(iChronology, partial.toDateTime(newPartial).getMillis());\n+        }\n+\n+        // If the new month has fewer days than the previous month, reduce the day of month\n+        if (iChronology.getDaysInYearMonth(iChronology.get(partial, partial.toDateTime(newPartial).getMillis())) \n+            < originalDayOfMonth) {\n+            int newDayOfMonth = iChronology.getDaysInYearMonth(newPartial, \n+                    iChronology.dayOfMonth().getMaximumValue(newMonthOfYear));\n+            newPartial = newPartial.with(DateTimeFieldType.dayOfMonth(), \n+                    newDayOfMonth < originalDayOfMonth ? newDayOfMonth : originalDayOfMonth);\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            // Otherwise, use the original day of month\n+            newPartial = newPartial.with(DateTimeFieldType.dayOfMonth(), originalDayOfMonth);\n         }\n+\n+        return newPartial.get(iChronology, partial.toDateTime(newPartial).getMillis());\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: method isLeap in class DateTimeField cannot be applied to given types;",
    "test_result": "ERROR"
}