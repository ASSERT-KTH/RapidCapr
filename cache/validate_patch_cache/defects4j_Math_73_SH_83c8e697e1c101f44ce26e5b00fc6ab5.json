{
    "patch": "        // check if function is linear\n        boolean isLinear = false;\n        if (Math.abs(yInitial - yMin) <= functionValueAccuracy || Math.abs(yMax - yInitial) <= functionValueAccuracy || Math.abs(yMax - yMin) <= functionValueAccuracy) {\n            isLinear = true;\n            // check if initial guess falls within interval\n            if (!(initial > min && initial < max)) {\n                throw new IllegalArgumentException(\"Initial guess is not within the provided interval. Interval: [\" + min + \",\" + max + \"], Initial guess value: \" + initial);\n            }\n        }\n        \n        // return the initial guess if the function is linear\n        if (isLinear) {\n            setResult(initial, 0);\n            return result;\n        }\n        \n        // find the root using the full Brent algorithm\n        return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..72a4933fc 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,24 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+        // check if function is linear\n+        boolean isLinear = false;\n+        if (Math.abs(yInitial - yMin) <= functionValueAccuracy || Math.abs(yMax - yInitial) <= functionValueAccuracy || Math.abs(yMax - yMin) <= functionValueAccuracy) {\n+            isLinear = true;\n+            // check if initial guess falls within interval\n+            if (!(initial > min && initial < max)) {\n+                throw new IllegalArgumentException(\"Initial guess is not within the provided interval. Interval: [\" + min + \",\" + max + \"], Initial guess value: \" + initial);\n+            }\n+        }\n+        \n+        // return the initial guess if the function is linear\n+        if (isLinear) {\n+            setResult(initial, 0);\n+            return result;\n+        }\n+        \n+        // find the root using the full Brent algorithm\n+        return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}