{
    "patch": "public void initOptions(CompilerOptions options) {\n    this.options = options;\n    if (errorManager == null) {\n      if (outStream == null) {\n          setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));\n      } else {\n          PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream);\n          printer.setSummaryDetailLevel(options.summaryDetailLevel);\n          setErrorManager(printer);\n      }\n    }\n\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = false;\n    } else if (!options.checkTypes) {\n      // If DiagnosticGroups did not override the plain checkTypes\n      // option, and checkTypes is enabled, then turn off the\n      // parser type warnings.\n      options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);\n    }\n\n    if (options.checkGlobalThisLevel.isOn()) {\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);\n    }\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList();\n    guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));\n    guards.add(options.getWarningsGuard());\n\n\n    boolean checkVarsEnabled = false;\n    boolean checkVarsDisabled = false;\n    for (WarningsGuard guard : guards) {\n      if (guard.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n        checkVarsEnabled = true;\n      }\n      if (guard.disables(DiagnosticGroups.CHECK_VARIABLES)) {\n        checkVarsDisabled = true;\n      }\n    }\n    boolean checkVars = false;\n    if (options.checkSymbols) {\n      // If checkSymbols is true, enable CHECK_VARIABLES.\n      checkVars = true;\n    } else {\n      // If checkSymbols is false, disable CHECK_VARIABLES.\n      if (!checkVarsDisabled && (warningsGuard == null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n        guards.add(new DiagnosticGroupWarningsGuard(\n            DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n      }\n    }\n    if (checkVars && !checkVarsEnabled) {\n      guards.add(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.WARNING));\n    }\n\n    this.warningsGuard = new ComposeWarningsGuard(guards);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 11850211..1c4da18f 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -223,17 +223,15 @@ public class Compiler extends AbstractCompiler {\n    * Initialize the compiler options. Only necessary if you're not doing\n    * a normal compile() job.\n    */\n-  public void initOptions(CompilerOptions options) {\n+public void initOptions(CompilerOptions options) {\n     this.options = options;\n     if (errorManager == null) {\n       if (outStream == null) {\n-        setErrorManager(\n-            new LoggerErrorManager(createMessageFormatter(), logger));\n+          setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));\n       } else {\n-        PrintStreamErrorManager printer =\n-            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n-        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n-        setErrorManager(printer);\n+          PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream);\n+          printer.setSummaryDetailLevel(options.summaryDetailLevel);\n+          setErrorManager(printer);\n       }\n     }\n \n@@ -266,20 +264,33 @@ public class Compiler extends AbstractCompiler {\n     guards.add(options.getWarningsGuard());\n \n \n-    // All passes must run the variable check. This synthesizes\n-    // variables later so that the compiler doesn't crash. It also\n-    // checks the externs file for validity. If you don't want to warn\n-    // about missing variable declarations, we shut that specific\n-    // error off.\n-    if (!options.checkSymbols &&\n-        (warningsGuard == null || !warningsGuard.disables(\n-            DiagnosticGroups.CHECK_VARIABLES))) {\n+    boolean checkVarsEnabled = false;\n+    boolean checkVarsDisabled = false;\n+    for (WarningsGuard guard : guards) {\n+      if (guard.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n+        checkVarsEnabled = true;\n+      }\n+      if (guard.disables(DiagnosticGroups.CHECK_VARIABLES)) {\n+        checkVarsDisabled = true;\n+      }\n+    }\n+    boolean checkVars = false;\n+    if (options.checkSymbols) {\n+      // If checkSymbols is true, enable CHECK_VARIABLES.\n+      checkVars = true;\n+    } else {\n+      // If checkSymbols is false, disable CHECK_VARIABLES.\n+      if (!checkVarsDisabled && (warningsGuard == null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n+        guards.add(new DiagnosticGroupWarningsGuard(\n+            DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n+      }\n+    }\n+    if (checkVars && !checkVarsEnabled) {\n       guards.add(new DiagnosticGroupWarningsGuard(\n-          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n+          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.WARNING));\n     }\n \n     this.warningsGuard = new ComposeWarningsGuard(guards);\n-  }\n \n   /**\n    * Initializes the instance state needed for a compile job.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}