{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n\n    boolean isMeanOverridden = !(meanImpl instanceof Mean);\n    boolean isVarianceOverridden = !(varianceImpl instanceof Variance);\n    boolean isGeoMeanOverridden = !(geoMeanImpl instanceof GeometricMean);\n\n    if (isMeanOverridden) {\n        meanImpl.increment(value);\n    }\n\n    if (isVarianceOverridden) {\n        double delta = value - stats.getMean();\n        long prevN = n;\n        n++;\n        double meanDelta = (value - stats.getMean()) / n;\n        double delta2 = value - stats.getMean();\n        minImpl.increment(value);\n        maxImpl.increment(value);\n        sumsqImpl.increment(value);\n        sumLogImpl.increment(value);\n        secondMoment.increment(value);\n\n        stats.setMean(stats.getMean() + meanDelta);\n        stats.setSumSq(stats.getSumSq() + delta * delta2);\n        stats.setStandardDeviation(Double.NaN);\n        stats.setVariance(Double.NaN);\n    } else {\n        varianceImpl.increment(value);\n    }\n\n    if (isGeoMeanOverridden) {\n        geoMeanImpl.increment(value > 0 ? Math.log(value) : Double.NaN);\n    } else if (geoMeanImpl != null) {\n        geoMeanImpl.increment(Math.log(value));\n    }\n\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..7bdfde0a1 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,27 +146,51 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+\n+    boolean isMeanOverridden = !(meanImpl instanceof Mean);\n+    boolean isVarianceOverridden = !(varianceImpl instanceof Variance);\n+    boolean isGeoMeanOverridden = !(geoMeanImpl instanceof GeometricMean);\n+\n+    if (isMeanOverridden) {\n+        meanImpl.increment(value);\n+    }\n+\n+    if (isVarianceOverridden) {\n+        double delta = value - stats.getMean();\n+        long prevN = n;\n+        n++;\n+        double meanDelta = (value - stats.getMean()) / n;\n+        double delta2 = value - stats.getMean();\n         minImpl.increment(value);\n         maxImpl.increment(value);\n+        sumsqImpl.increment(value);\n         sumLogImpl.increment(value);\n         secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n-        }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n-        }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n-        }\n-        n++;\n+\n+        stats.setMean(stats.getMean() + meanDelta);\n+        stats.setSumSq(stats.getSumSq() + delta * delta2);\n+        stats.setStandardDeviation(Double.NaN);\n+        stats.setVariance(Double.NaN);\n+    } else {\n+        varianceImpl.increment(value);\n     }\n \n+    if (isGeoMeanOverridden) {\n+        geoMeanImpl.increment(value > 0 ? Math.log(value) : Double.NaN);\n+    } else if (geoMeanImpl != null) {\n+        geoMeanImpl.increment(Math.log(value));\n+    }\n+\n+    n++;\n+}\n+\n     /**\n      * Returns the number of available values\n      * @return The number of available values",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}