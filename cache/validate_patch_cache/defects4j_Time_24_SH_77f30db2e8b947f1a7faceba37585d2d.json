{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        millis = savedFields[i].set(millis, resetFields);\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    // alter base year for parsing if necessary\n    DateTimeField first = savedFields[0].iField;\n    DateTimeFieldType firstType = first.getType();\n    DurationField years = DurationFieldType.years().getField(iChrono);\n    DurationField weeks = DurationFieldType.weeks().getField(iChrono);\n    if (compareReverse(first.getDurationField(), years) <= 0 || firstType == DateTimeFieldType.weekyear()\n            || firstType == DateTimeFieldType.weekyearOfCentury() || firstType == DateTimeFieldType.monthOfYear()\n            || firstType == DateTimeFieldType.dayOfMonth()) {\n        int year = iDefaultYear;\n        for (int i = 0; i < count; i++) {\n            DateTimeField field = savedFields[i].iField;\n            if (field.getType() == DateTimeFieldType.year()) {\n                year = savedFields[i].iValue;\n                break;\n            }\n        }\n        saveField(DateTimeFieldType.year(), year);\n        return computeMillis(resetFields, text);\n    } else if (firstType == DateTimeFieldType.era()) {\n        // Not sure about this one. There can be only one era field, so set it to the lowest value.\n        millis = first.withValue(0).roundFloor(millis);\n        for (int i = 1; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } else {\n        throw e;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..6739796b 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,42 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        millis = savedFields[i].set(millis, resetFields);\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    // alter base year for parsing if necessary\n+    DateTimeField first = savedFields[0].iField;\n+    DateTimeFieldType firstType = first.getType();\n+    DurationField years = DurationFieldType.years().getField(iChrono);\n+    DurationField weeks = DurationFieldType.weeks().getField(iChrono);\n+    if (compareReverse(first.getDurationField(), years) <= 0 || firstType == DateTimeFieldType.weekyear()\n+            || firstType == DateTimeFieldType.weekyearOfCentury() || firstType == DateTimeFieldType.monthOfYear()\n+            || firstType == DateTimeFieldType.dayOfMonth()) {\n+        int year = iDefaultYear;\n+        for (int i = 0; i < count; i++) {\n+            DateTimeField field = savedFields[i].iField;\n+            if (field.getType() == DateTimeFieldType.year()) {\n+                year = savedFields[i].iValue;\n+                break;\n+            }\n+        }\n+        saveField(DateTimeFieldType.year(), year);\n+        return computeMillis(resetFields, text);\n+    } else if (firstType == DateTimeFieldType.era()) {\n+        // Not sure about this one. There can be only one era field, so set it to the lowest value.\n+        millis = first.withValue(0).roundFloor(millis);\n+        for (int i = 1; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n+        }\n+    } else {\n+        throw e;\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}