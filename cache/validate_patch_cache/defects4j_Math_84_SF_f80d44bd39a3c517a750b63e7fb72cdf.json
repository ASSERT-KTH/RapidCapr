{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    // accept the reflected point\n                    simplex[0] = reflected;\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n                contractedSimplex[0] = best;\n                for (int i = 1; i < original.length; i++) {\n                    contractedSimplex[i] = new RealPointValuePair(\n                            original[i - 1].getPoint().add(\n                                    contracted.getPoint().subtract(original[i - 1].getPoint())\n                                            .scalarMultiply(sigma)),\n                            Double.NaN);\n                }\n                simplex = contractedSimplex;\n            } else {\n                // check convergence\n                return;\n            }\n\n        }\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..606076207 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -79,6 +79,9 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 if (comparator.compare(reflected, expanded) <= 0) {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    // accept the reflected point\n+                    simplex[0] = reflected;\n                 }\n \n                 return;\n@@ -88,9 +91,18 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n+                final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+                contractedSimplex[0] = best;\n+                for (int i = 1; i < original.length; i++) {\n+                    contractedSimplex[i] = new RealPointValuePair(\n+                            original[i - 1].getPoint().add(\n+                                    contracted.getPoint().subtract(original[i - 1].getPoint())\n+                                            .scalarMultiply(sigma)),\n+                            Double.NaN);\n+                }\n+                simplex = contractedSimplex;\n+            } else {\n+                // check convergence\n                 return;\n             }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}