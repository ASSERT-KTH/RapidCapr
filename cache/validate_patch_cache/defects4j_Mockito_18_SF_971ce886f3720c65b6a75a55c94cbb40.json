{
    "patch": "import java.util.*;\n\npublic class StringList {\n\n    private List<String> list = new ArrayList<>();\n\n    public void add(String str) {\n        if (str != null && !str.isEmpty()) {\n            list.add(str);\n        }\n    }\n\n    public int size() {\n        return list.size();\n    }\n\n    public String get(int index) {\n        if (index >= 0 && index < list.size()) {\n            return list.get(index);\n        }\n        return null;\n    }\n\n    public List<String> getAll() {\n        return new ArrayList<>(list);\n    }\n\n    public boolean isEmpty() {\n        return list.isEmpty();\n    }\n\n    public Iterable<String> asIterable() {\n        return list;\n    }\n\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..391dcfe3c 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,42 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+import java.util.*;\n+\n+public class StringList {\n+\n+    private List<String> list = new ArrayList<>();\n+\n+    public void add(String str) {\n+        if (str != null && !str.isEmpty()) {\n+            list.add(str);\n+        }\n+    }\n+\n+    public int size() {\n+        return list.size();\n+    }\n+\n+    public String get(int index) {\n+        if (index >= 0 && index < list.size()) {\n+            return list.get(index);\n+        }\n+        return null;\n+    }\n+\n+    public List<String> getAll() {\n+        return new ArrayList<>(list);\n+    }\n+\n+    public boolean isEmpty() {\n+        return list.isEmpty();\n+    }\n+\n+    public Iterable<String> asIterable() {\n+        return list;\n+    }\n+\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}