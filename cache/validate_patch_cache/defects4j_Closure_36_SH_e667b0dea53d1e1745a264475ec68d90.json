{
    "patch": "  void testSimpleDotExport() {\n    Set<String> expected = new HashSet<>();\n    expected.add(\"dummy a\");\n    expected.add(\"dummy b\");\n\n    File tmpDir = testFolder.getRoot();\n    // Make sure the dummy files exist.\n    assertNotNull(testSimpleDotExport.createDummyFile(tmpDir, \"a.js\"));\n    assertNotNull(testSimpleDotExport.createDummyFile(tmpDir, \"b.js\"));\n\n    String[] expectedLines = {\n        \"strict digraph {\",\n        \"   graph [\",\n        \"     rankdir = \\\"LR\\\"\",\n        \"   ]\",\n        \"   node [\",\n        \"     fontsize = 10,\",\n        \"     shape = box\",\n        \"   ]\",\n        \"   splines=false;\",\n\n        \"  \\\"aexport\\\"[\",\n        \"    type=\\\"Ecma6Module\\\",\",\n        \"    module=\\\"goog:a\\\"\",\n        \"  ];\",\n        \"  \\\"bexport\\\"[\",\n        \"    type=\\\"Ecma6Module\\\",\",\n        \"    module=\\\"goog:b\\\"\",\n        \"  ];\",\n        \"  \\\"entrypoint\\\"[\",\n        \"    label=\\\"entry\\\",\",\n        \"    type=\\\"Script\\\"\",\n        \"  ];\",\n        \"  \\\"afile\\\" [\",\n        \"    fontsize=10,\",\n        \"    label=\\\"dummy a\\\",\",\n        \"    shape=box\",\n        \"  ];\",\n        \"  \\\"bfile\\\" [\",\n        \"    fontsize=10,\",\n        \"    label=\\\"dummy b\\\",\",\n        \"    shape=box\",\n        \"  ];\",\n        \"  \\\"entrypoint\\\" -> \\\"aexport\\\"[\",\n        \"    label=\\\" 0\\\"\",\n        \"  ];\",\n        \"  \\\"entrypoint\\\" -> \\\"bexport\\\"[\",\n        \"    label=\\\" 1\\\"\",\n        \"  ];\",\n        \"  \\\"aexport\\\" -> \\\"afile\\\";\",\n        \"  \\\"bexport\\\" -> \\\"bfile\\\";\",\n    };\n\n    String[] args = {\n        \"--dependency_mode=PRUNE\",\n        \"--entry_point=goog:entrypoint\",\n        \"--hide_warnings_for=\" + testSimpleDotExport.DUMMY_WARNING_CODE,\n        \"--format=DOT\",\n        testSimpleDotExport.getFilename(\n            \"simple_dot_export_entrypoint.js\",\n            testSimpleDotExport.LOAD_TYPE.BROWSER)\n    };\n    String result = AbstractCommandLineRunnerTest.srcsToString(args);\n\n    testSimpleDotExport.checkDotOutput(expectedLines, result);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..c2e1782d 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,72 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+  void testSimpleDotExport() {\n+    Set<String> expected = new HashSet<>();\n+    expected.add(\"dummy a\");\n+    expected.add(\"dummy b\");\n+\n+    File tmpDir = testFolder.getRoot();\n+    // Make sure the dummy files exist.\n+    assertNotNull(testSimpleDotExport.createDummyFile(tmpDir, \"a.js\"));\n+    assertNotNull(testSimpleDotExport.createDummyFile(tmpDir, \"b.js\"));\n+\n+    String[] expectedLines = {\n+        \"strict digraph {\",\n+        \"   graph [\",\n+        \"     rankdir = \\\"LR\\\"\",\n+        \"   ]\",\n+        \"   node [\",\n+        \"     fontsize = 10,\",\n+        \"     shape = box\",\n+        \"   ]\",\n+        \"   splines=false;\",\n+\n+        \"  \\\"aexport\\\"[\",\n+        \"    type=\\\"Ecma6Module\\\",\",\n+        \"    module=\\\"goog:a\\\"\",\n+        \"  ];\",\n+        \"  \\\"bexport\\\"[\",\n+        \"    type=\\\"Ecma6Module\\\",\",\n+        \"    module=\\\"goog:b\\\"\",\n+        \"  ];\",\n+        \"  \\\"entrypoint\\\"[\",\n+        \"    label=\\\"entry\\\",\",\n+        \"    type=\\\"Script\\\"\",\n+        \"  ];\",\n+        \"  \\\"afile\\\" [\",\n+        \"    fontsize=10,\",\n+        \"    label=\\\"dummy a\\\",\",\n+        \"    shape=box\",\n+        \"  ];\",\n+        \"  \\\"bfile\\\" [\",\n+        \"    fontsize=10,\",\n+        \"    label=\\\"dummy b\\\",\",\n+        \"    shape=box\",\n+        \"  ];\",\n+        \"  \\\"entrypoint\\\" -> \\\"aexport\\\"[\",\n+        \"    label=\\\" 0\\\"\",\n+        \"  ];\",\n+        \"  \\\"entrypoint\\\" -> \\\"bexport\\\"[\",\n+        \"    label=\\\" 1\\\"\",\n+        \"  ];\",\n+        \"  \\\"aexport\\\" -> \\\"afile\\\";\",\n+        \"  \\\"bexport\\\" -> \\\"bfile\\\";\",\n+    };\n+\n+    String[] args = {\n+        \"--dependency_mode=PRUNE\",\n+        \"--entry_point=goog:entrypoint\",\n+        \"--hide_warnings_for=\" + testSimpleDotExport.DUMMY_WARNING_CODE,\n+        \"--format=DOT\",\n+        testSimpleDotExport.getFilename(\n+            \"simple_dot_export_entrypoint.js\",\n+            testSimpleDotExport.LOAD_TYPE.BROWSER)\n+    };\n+    String result = AbstractCommandLineRunnerTest.srcsToString(args);\n+\n+    testSimpleDotExport.checkDotOutput(expectedLines, result);\n+  }\n         }\n       }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}