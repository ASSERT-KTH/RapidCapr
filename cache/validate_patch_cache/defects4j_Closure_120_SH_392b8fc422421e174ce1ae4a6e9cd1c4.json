{
    "patch": "        if (block.isFunction) {\n          break;\n        } else if (block.isLoop) {\n          return false;\n        } else if (block.isExitBlock) {\n          for (DiGraphEdge<BasicBlock, Branch> edge : cfg.getInEdges(block)) {\n            if (edge.getValue() == Branch.ON_TRUE) {\n              if (edge.getSource().getLastStatement().getBlockType() != BlockType.EXPRESSION) {\n                return false;\n              }\n            } else if (edge.getValue() == Branch.ON_FALSE) {\n              for (DiGraphEdge<BasicBlock, Branch> innerEdge : cfg.getInEdges(edge.getSource())) {\n                if (innerEdge.getValue() == Branch.ON_EX) {\n                  return false;\n                }\n              }\n              if (edge.getSource().getLastStatement().getBlockType() != BlockType.EXPRESSION) {\n                return false;\n              }\n            }\n          }\n          break;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..80455129 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,29 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoop) {\n+          return false;\n+        } else if (block.isExitBlock) {\n+          for (DiGraphEdge<BasicBlock, Branch> edge : cfg.getInEdges(block)) {\n+            if (edge.getValue() == Branch.ON_TRUE) {\n+              if (edge.getSource().getLastStatement().getBlockType() != BlockType.EXPRESSION) {\n+                return false;\n+              }\n+            } else if (edge.getValue() == Branch.ON_FALSE) {\n+              for (DiGraphEdge<BasicBlock, Branch> innerEdge : cfg.getInEdges(edge.getSource())) {\n+                if (innerEdge.getValue() == Branch.ON_EX) {\n+                  return false;\n+                }\n+              }\n+              if (edge.getSource().getLastStatement().getBlockType() != BlockType.EXPRESSION) {\n+                return false;\n+              }\n+            }\n+          }\n+          break;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}