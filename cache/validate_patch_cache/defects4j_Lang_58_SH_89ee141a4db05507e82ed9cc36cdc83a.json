{
    "patch": "if (!Character.isDigit(lastChar)) {\n    if (expPos > -1 && expPos < str.length() - 1) {\n        exp = str.substring(expPos + 1, str.length() - 1);\n    } else {\n        exp = null;\n    }\n    // Requesting a specific type..\n    String numeric = str.substring(0, str.length() - 1);\n    boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n\n    if (lastChar == 'l' || lastChar == 'L') {\n        numeric = numeric.substring(0, numeric.length() - 1);\n        try {\n            return createLong(numeric);\n        } catch (NumberFormatException nfe) {\n            //Too big for a long\n        }\n        return createBigInteger(numeric);\n    }\n\n    ...\n\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/NumberUtils.java b/src/java/org/apache/commons/lang/math/NumberUtils.java\nindex c0f06a47..7759221a 100644\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -451,8 +451,29 @@ public class NumberUtils {\n                 case 'L' :\n                     if (dec == null\n                         && exp == null\n-                        && isDigits(numeric.substring(1))\n-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n+if (!Character.isDigit(lastChar)) {\n+    if (expPos > -1 && expPos < str.length() - 1) {\n+        exp = str.substring(expPos + 1, str.length() - 1);\n+    } else {\n+        exp = null;\n+    }\n+    // Requesting a specific type..\n+    String numeric = str.substring(0, str.length() - 1);\n+    boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+\n+    if (lastChar == 'l' || lastChar == 'L') {\n+        numeric = numeric.substring(0, numeric.length() - 1);\n+        try {\n+            return createLong(numeric);\n+        } catch (NumberFormatException nfe) {\n+            //Too big for a long\n+        }\n+        return createBigInteger(numeric);\n+    }\n+\n+    ...\n+\n+}\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}