{
    "patch": "import java.util.Arrays;\n\npublic class GenotypeProbabilities {\n\n    private static final double EPSILON = 1e-9;\n\n    public double[] distributionClone(double[] genotypeProbabilities, int M, int D, int N) {\n\n        int size = (1 << D);\n\n        double[] dp = new double[size];\n        dp[0] = 1.0;\n\n        for (int i = 0; i < M; i++) {\n            double[] newdp = new double[size];\n            for (int j = 0; j < size; j++) {\n                int count = Integer.bitCount(j);\n                for (int k = 0; k < M; k++) {\n                    int dominant = getDominant(i, k, M);\n                    int next = (1 << dominant) | j;\n                    if ((Integer.bitCount(next) == count + 1)) {\n                        newdp[next] += dp[j] * genotypeProbabilities[dominant];\n                    }\n                }\n            }\n            dp = newdp;\n        }\n\n        double[] distribution = new double[N + 1];\n\n        for (int i = 0; i < size; i++) {\n            int count = Integer.bitCount(i);\n            if (count <= N) {\n                distribution[count] += dp[i];\n            }\n        }\n\n        for (int i = 0; i <= N; i++) {\n            distribution[i] /= Math.pow(M, D);\n        }\n\n        return distribution;\n    }\n\n    private int getDominant(int i, int j, int M) {\n        if (j > i) {\n            return getDominant(j, i, M);\n        }\n\n        int count = 0;\n\n        for (int k = 0; k < i; k++) {\n            count += M - k;\n        }\n\n        return count + j;\n    }\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}