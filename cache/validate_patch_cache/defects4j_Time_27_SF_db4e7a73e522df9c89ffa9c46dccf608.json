{
    "patch": "    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n        if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        }\n        int size = elementPairs.size();\n        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n            Separator sep = (Separator) elementPairs.get(0);\n                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n                sep = sep.finish(f.getPrinter(), f.getParser());\n                return new PeriodFormatter(sep, sep);\n        }\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter && comp[1] instanceof Composite) {\n            return new PeriodFormatter(null, new Composite((PeriodPrinter) comp[0], (PeriodParser) ((Composite) comp[1]).getUnderlying()));\n        } else if (notParser && comp[0] instanceof Composite) {\n            return new PeriodFormatter(new Composite((PeriodPrinter) ((Composite) comp[0]).getUnderlying(), (PeriodParser) comp[1]), null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..48928c57 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -803,10 +803,10 @@ public class PeriodFormatterBuilder {\n                 return new PeriodFormatter(sep, sep);\n         }\n         Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+        if (notPrinter && comp[1] instanceof Composite) {\n+            return new PeriodFormatter(null, new Composite((PeriodPrinter) comp[0], (PeriodParser) ((Composite) comp[1]).getUnderlying()));\n+        } else if (notParser && comp[0] instanceof Composite) {\n+            return new PeriodFormatter(new Composite((PeriodPrinter) ((Composite) comp[0]).getUnderlying(), (PeriodParser) comp[1]), null);\n         } else {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}