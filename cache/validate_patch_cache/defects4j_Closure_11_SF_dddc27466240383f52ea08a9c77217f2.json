{
    "patch": "public static String getProperty(String key) {\n        String value = null;\n        InputStream input = null;\n        try {\n            Properties prop = new Properties();\n            input = ClassLoader.getSystemResourceAsStream(\"config.properties\");\n            if (input == null) {\n                throw new FileNotFoundException(\"Property file config.properties not found\");\n            }\n            prop.load(input);\n            value = prop.getProperty(key);\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        } finally {\n            if (input != null) {\n                try {\n                    input.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return value;\n    } ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..23e70b5f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,30 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getProperty(String key) {\n+        String value = null;\n+        InputStream input = null;\n+        try {\n+            Properties prop = new Properties();\n+            input = ClassLoader.getSystemResourceAsStream(\"config.properties\");\n+            if (input == null) {\n+                throw new FileNotFoundException(\"Property file config.properties not found\");\n+            }\n+            prop.load(input);\n+            value = prop.getProperty(key);\n+        } catch (IOException ex) {\n+            ex.printStackTrace();\n+        } finally {\n+            if (input != null) {\n+                try {\n+                    input.close();\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        }\n+        return value;\n+    } \n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}