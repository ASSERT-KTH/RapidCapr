{
    "patch": "case Token.CATCH:\n  // Handle undefined catch parameter name (e.g. e)\n  if (!n.hasChildren()) {\n    handleGet(module, scope, n, parent, \"undefined\");\n    return;\n  }\n  name = n.getFirstChild().getString();\n  Node catchBlock = n.getLastChild();\n  if (catchBlock.hasOneChild()) {\n    Node catchBody = catchBlock.getFirstChild();\n    Node catchVarName = NodeUtil.getVarNameNode(catchBody, name);\n    if (catchVarName != null) {\n      handleSetFromLocal(module, scope, catchVarName, catchVarName.getParent(), name);\n    } else {\n      handleGet(module, scope, n, parent, name);\n    }\n  }\n  break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..8a7e97a2 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -363,6 +363,24 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+case Token.CATCH:\n+  // Handle undefined catch parameter name (e.g. e)\n+  if (!n.hasChildren()) {\n+    handleGet(module, scope, n, parent, \"undefined\");\n+    return;\n+  }\n+  name = n.getFirstChild().getString();\n+  Node catchBlock = n.getLastChild();\n+  if (catchBlock.hasOneChild()) {\n+    Node catchBody = catchBlock.getFirstChild();\n+    Node catchVarName = NodeUtil.getVarNameNode(catchBody, name);\n+    if (catchVarName != null) {\n+      handleSetFromLocal(module, scope, catchVarName, catchVarName.getParent(), name);\n+    } else {\n+      handleGet(module, scope, n, parent, name);\n+    }\n+  }\n+  break;\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}