{
    "patch": "if (options.checkGlobalThisLevel != null) {\n    CheckLevel globalThisLevel = CheckLevel.OFF;\n    if (options.checkGlobalThisLevel.isOn())\n        globalThisLevel = CheckLevel.ERROR;\n    else if (options.checkGlobalThisLevel == CheckLevel.WARNING)\n        globalThisLevel = CheckLevel.WARNING;\n    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, globalThisLevel);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..606fe22b 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,14 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n+if (options.checkGlobalThisLevel != null) {\n+    CheckLevel globalThisLevel = CheckLevel.OFF;\n+    if (options.checkGlobalThisLevel.isOn())\n+        globalThisLevel = CheckLevel.ERROR;\n+    else if (options.checkGlobalThisLevel == CheckLevel.WARNING)\n+        globalThisLevel = CheckLevel.WARNING;\n+    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, globalThisLevel);\n+}\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}