{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    if (Double.isNaN(x)) {\n        throw new MathException(\"Input is NaN\");\n    } else if (Double.isInfinite(x)) {\n        return x < 0 ? 0.0 : 1.0;\n    } else {\n        double z = (x - mean) / standardDeviation;\n        if (Math.abs(z) > 6.0) {\n            return z < 0.0 ? 0.0 : 1.0;\n        } else {\n            double t = 1.0 / (1.0 + 0.2316419 * Math.abs(z));\n            double y = t * (0.31938153 + t * (-0.356563782\n                                + t * (1.781477937 + t * (-1.821255978 + 1.330274429 * t))));\n            double approx = 1.0 - NormalDistributionImpl.ONE_OVER_SQRT_TWO_PI * Math.exp(-(z * z) / 2.0) * y;\n            return z < 0.0 ? approx : 1.0 - approx;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..6a61f85c3 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -105,10 +105,24 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * x is more than 20 standard deviations from the mean, in which case the\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+public double cumulativeProbability(double x) throws MathException {\n+    if (Double.isNaN(x)) {\n+        throw new MathException(\"Input is NaN\");\n+    } else if (Double.isInfinite(x)) {\n+        return x < 0 ? 0.0 : 1.0;\n+    } else {\n+        double z = (x - mean) / standardDeviation;\n+        if (Math.abs(z) > 6.0) {\n+            return z < 0.0 ? 0.0 : 1.0;\n+        } else {\n+            double t = 1.0 / (1.0 + 0.2316419 * Math.abs(z));\n+            double y = t * (0.31938153 + t * (-0.356563782\n+                                + t * (1.781477937 + t * (-1.821255978 + 1.330274429 * t))));\n+            double approx = 1.0 - NormalDistributionImpl.ONE_OVER_SQRT_TWO_PI * Math.exp(-(z * z) / 2.0) * y;\n+            return z < 0.0 ? approx : 1.0 - approx;\n+        }\n     }\n+}\n     \n     /**\n      * For this distribution, X, this method returns the critical point x, such",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}