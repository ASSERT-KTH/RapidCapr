{
    "patch": "public RealMatrix getCorrelationPValues() throws MathException {\n    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n    int nVars = correlationMatrix.getColumnDimension();\n    double[][] out = new double[nVars][nVars];\n    final double pValueMinThreshold = Double.MIN_VALUE;\n    final double pValueMaxThreshold = 1 - pValueMinThreshold;\n    for (int i = 0; i < nVars; i++) {\n        for (int j = i + 1; j < nVars; j++) {\n            double r = correlationMatrix.getEntry(i, j);\n            double t = Math.abs(r * Math.sqrt((nObs - 2) / (1 - r * r)));\n            double pValue = 2 * (1 - tDistribution.cumulativeProbability(t));\n            if (pValue <= pValueMinThreshold) {\n                pValue = pValueMinThreshold;\n            } else if (pValue >= pValueMaxThreshold) {\n                pValue = pValueMaxThreshold;\n            }\n            out[i][j] = pValue;\n            out[j][i] = pValue;\n        }\n    }\n    return new BlockRealMatrix(out);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\nindex 83b4c4130..17ad2204f 100644\n--- a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n+++ b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n@@ -157,23 +157,28 @@ public class PearsonsCorrelation {\n      * @return matrix of p-values\n      * @throws MathException if an error occurs estimating probabilities\n      */\n-    public RealMatrix getCorrelationPValues() throws MathException {\n-        TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n-        int nVars = correlationMatrix.getColumnDimension();\n-        double[][] out = new double[nVars][nVars];\n-        for (int i = 0; i < nVars; i++) {\n-            for (int j = 0; j < nVars; j++) {\n-                if (i == j) {\n-                    out[i][j] = 0d;\n-                } else {\n-                    double r = correlationMatrix.getEntry(i, j);\n-                    double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n-                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n-                }\n+public RealMatrix getCorrelationPValues() throws MathException {\n+    TDistribution tDistribution = new TDistributionImpl(nObs - 2);\n+    int nVars = correlationMatrix.getColumnDimension();\n+    double[][] out = new double[nVars][nVars];\n+    final double pValueMinThreshold = Double.MIN_VALUE;\n+    final double pValueMaxThreshold = 1 - pValueMinThreshold;\n+    for (int i = 0; i < nVars; i++) {\n+        for (int j = i + 1; j < nVars; j++) {\n+            double r = correlationMatrix.getEntry(i, j);\n+            double t = Math.abs(r * Math.sqrt((nObs - 2) / (1 - r * r)));\n+            double pValue = 2 * (1 - tDistribution.cumulativeProbability(t));\n+            if (pValue <= pValueMinThreshold) {\n+                pValue = pValueMinThreshold;\n+            } else if (pValue >= pValueMaxThreshold) {\n+                pValue = pValueMaxThreshold;\n             }\n+            out[i][j] = pValue;\n+            out[j][i] = pValue;\n         }\n-        return new BlockRealMatrix(out);\n     }\n+    return new BlockRealMatrix(out);\n+}\n \n \n     /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}