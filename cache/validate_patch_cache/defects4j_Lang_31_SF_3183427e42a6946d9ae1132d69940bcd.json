{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    if (str == null || searchChars == null) {\n        return false;\n    }\n    int strLen = str.length();\n    int searchLen = searchChars.length;\n    if (strLen == 0 || searchLen == 0) {\n        return false;\n    }\n    for (int i = 0; i < strLen; i++) {\n        char ch = str.charAt(i);\n        if (Character.isHighSurrogate(ch) && i < strLen - 1) {\n            int codePoint = Character.toCodePoint(ch, str.charAt(i + 1));\n            if (containsCodePoint(searchChars, codePoint)) {\n                return true;\n            }\n            i++; //skip low surrogate\n        } else {\n            if (contains(searchChars, ch)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nprivate static boolean contains(char[] arr, char ch) {\n    for (char c : arr) {\n        if (c == ch) {\n            return true;\n        }\n    }\n    return false;\n}\n\nprivate static boolean containsCodePoint(char[] arr, int codePoint) {\n    for (char c : arr) {\n        if (Character.codePointAt(new char[] { c }, 0) == codePoint) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..75e54a64 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,49 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    if (str == null || searchChars == null) {\n+        return false;\n+    }\n+    int strLen = str.length();\n+    int searchLen = searchChars.length;\n+    if (strLen == 0 || searchLen == 0) {\n+        return false;\n+    }\n+    for (int i = 0; i < strLen; i++) {\n+        char ch = str.charAt(i);\n+        if (Character.isHighSurrogate(ch) && i < strLen - 1) {\n+            int codePoint = Character.toCodePoint(ch, str.charAt(i + 1));\n+            if (containsCodePoint(searchChars, codePoint)) {\n+                return true;\n+            }\n+            i++; //skip low surrogate\n+        } else {\n+            if (contains(searchChars, ch)) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean contains(char[] arr, char ch) {\n+    for (char c : arr) {\n+        if (c == ch) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean containsCodePoint(char[] arr, int codePoint) {\n+    for (char c : arr) {\n+        if (Character.codePointAt(new char[] { c }, 0) == codePoint) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}