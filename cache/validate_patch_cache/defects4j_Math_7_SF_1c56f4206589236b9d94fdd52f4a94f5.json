{
    "patch": "public int compare(EventState es0, EventState es1) {\n    return Double.compare(es0.getEventTime(), es1.getEventTime()) * orderingSign;\n}\n\npublic void addEvent(EventState evState) throws NumberIsTooSmallException {\n    double t = evState.getEventTime();\n    if (t < (interpolator.getCurrentTime() + convergence)) {\n        throw new NumberIsTooSmallException(t, interpolator.getCurrentTime() + convergence, false);\n    }\n    eventsStates.add(evState);\n}\n\npublic void clearEvents() {\n    eventsStates.clear();\n}\n\npublic Collection<EventState> getEvents() {\n    return eventsStates;\n}\n\npublic void setConvergence(double convergence) {\n    this.convergence = convergence;\n}\n\npublic double getConvergence() {\n    return convergence;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex f24f87c39..1bc616bd1 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -313,43 +313,33 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n-                public int compare(EventState es0, EventState es1) {\n-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n-                }\n-\n-            });\n-\n-            for (final EventState state : eventsStates) {\n-                if (state.evaluateStep(interpolator)) {\n-                    // the event occurs during the current step\n-                    occuringEvents.add(state);\n-                }\n-            }\n-\n-            while (!occuringEvents.isEmpty()) {\n+public int compare(EventState es0, EventState es1) {\n+    return Double.compare(es0.getEventTime(), es1.getEventTime()) * orderingSign;\n+}\n \n-                // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n-                final EventState currentEvent = iterator.next();\n-                iterator.remove();\n+public void addEvent(EventState evState) throws NumberIsTooSmallException {\n+    double t = evState.getEventTime();\n+    if (t < (interpolator.getCurrentTime() + convergence)) {\n+        throw new NumberIsTooSmallException(t, interpolator.getCurrentTime() + convergence, false);\n+    }\n+    eventsStates.add(evState);\n+}\n \n-                // restrict the interpolator to the first part of the step, up to the event\n-                final double eventT = currentEvent.getEventTime();\n-                interpolator.setSoftPreviousTime(previousT);\n-                interpolator.setSoftCurrentTime(eventT);\n+public void clearEvents() {\n+    eventsStates.clear();\n+}\n \n-                // get state at event time\n-                interpolator.setInterpolatedTime(eventT);\n-                final double[] eventY = interpolator.getInterpolatedState().clone();\n+public Collection<EventState> getEvents() {\n+    return eventsStates;\n+}\n \n-                // advance all event states to current time\n-                currentEvent.stepAccepted(eventT, eventY);\n-                isLastStep = currentEvent.stop();\n+public void setConvergence(double convergence) {\n+    this.convergence = convergence;\n+}\n \n-                // handle the first part of the step, up to the event\n-                for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n-                }\n+public double getConvergence() {\n+    return convergence;\n+}\n \n                 if (isLastStep) {\n                     // the event asked to stop integration",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}