{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    try {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        final double[] realEigenvalues = dec.getRealEigenvalues();\n        boolean isPositiveDefinite = true;\n        for (double eigenvalue : realEigenvalues) {\n            if (eigenvalue <= 0.0) {\n                isPositiveDefinite = false;\n                break;\n            }\n        }\n        if (isPositiveDefinite) {\n            final int n = m.getRowDimension();\n            final RealMatrix eigenvectors = dec.getV();\n            final RealMatrix eigenvalues = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n            final RealMatrix sqrtEigenvalues = MatrixUtils.createRealMatrix(n, n);\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < n; j++) {\n                    if (i == j) {\n                        double sqrtValue = Math.sqrt(eigenvalues.getEntry(i, i));\n                        sqrtEigenvalues.setEntry(i, j, sqrtValue);\n                    }\n                }\n            }\n            final RealMatrix sqrtMatrix = eigenvectors.multiply(sqrtEigenvalues).multiply(eigenvectors.transpose());\n            return sqrtMatrix;\n        } else {\n            throw new IllegalArgumentException(\"Matrix must be positive definite\");\n        }\n    } catch (OutOfMemoryError e) {\n        System.gc();\n        throw new OutOfMemoryError(\"Java heap space limit reached\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..34e7232c0 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,38 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    try {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        final double[] realEigenvalues = dec.getRealEigenvalues();\n+        boolean isPositiveDefinite = true;\n+        for (double eigenvalue : realEigenvalues) {\n+            if (eigenvalue <= 0.0) {\n+                isPositiveDefinite = false;\n+                break;\n+            }\n+        }\n+        if (isPositiveDefinite) {\n+            final int n = m.getRowDimension();\n+            final RealMatrix eigenvectors = dec.getV();\n+            final RealMatrix eigenvalues = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);\n+            final RealMatrix sqrtEigenvalues = MatrixUtils.createRealMatrix(n, n);\n+            for (int i = 0; i < n; i++) {\n+                for (int j = 0; j < n; j++) {\n+                    if (i == j) {\n+                        double sqrtValue = Math.sqrt(eigenvalues.getEntry(i, i));\n+                        sqrtEigenvalues.setEntry(i, j, sqrtValue);\n+                    }\n+                }\n+            }\n+            final RealMatrix sqrtMatrix = eigenvectors.multiply(sqrtEigenvalues).multiply(eigenvectors.transpose());\n+            return sqrtMatrix;\n+        } else {\n+            throw new IllegalArgumentException(\"Matrix must be positive definite\");\n+        }\n+    } catch (OutOfMemoryError e) {\n+        System.gc();\n+        throw new OutOfMemoryError(\"Java heap space limit reached\");\n     }\n }\n+}",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space limit reached",
    "test_result": "FAIL"
}