{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n\n    // If mean, variance or geomean have been overridden, need to increment these\n    if (meanImpl != null && meanImpl.getClass() == Mean.class) {\n        meanImpl.increment(value);\n    } else {\n        meanImpl = new Mean();\n        if (n > 0) {\n            meanImpl.increment(getSum());\n            meanImpl.increment(value);\n        }\n    }\n    if (varianceImpl != null && varianceImpl.getClass() == Variance.class) {\n        varianceImpl.increment(value);\n    } else {\n        varianceImpl = new Variance();\n        if (n > 0) {\n            varianceImpl.increment(getSum());\n            varianceImpl.increment(getSumsq());\n            varianceImpl.increment(value);\n        }\n    }\n    if (geoMeanImpl != null && geoMeanImpl.getClass() == GeometricMean.class) {\n        geoMeanImpl.increment(value);\n    } else {\n        geoMeanImpl = new GeometricMean();\n        if (n > 0) {\n            geoMeanImpl.increment(Math.exp(getSumLog() / n));\n            geoMeanImpl.increment(value);\n        }\n    }\n    \n    n++;\n\n    // Handle case where n is zero\n    if (n == 0) {\n        meanImpl.clear();\n        varianceImpl.clear();\n        geoMeanImpl.clear();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..ad161a065 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,26 +146,53 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+\n+    // If mean, variance or geomean have been overridden, need to increment these\n+    if (meanImpl != null && meanImpl.getClass() == Mean.class) {\n+        meanImpl.increment(value);\n+    } else {\n+        meanImpl = new Mean();\n+        if (n > 0) {\n+            meanImpl.increment(getSum());\n             meanImpl.increment(value);\n         }\n-        if (!(varianceImpl instanceof Variance)) {\n+    }\n+    if (varianceImpl != null && varianceImpl.getClass() == Variance.class) {\n+        varianceImpl.increment(value);\n+    } else {\n+        varianceImpl = new Variance();\n+        if (n > 0) {\n+            varianceImpl.increment(getSum());\n+            varianceImpl.increment(getSumsq());\n             varianceImpl.increment(value);\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n+    }\n+    if (geoMeanImpl != null && geoMeanImpl.getClass() == GeometricMean.class) {\n+        geoMeanImpl.increment(value);\n+    } else {\n+        geoMeanImpl = new GeometricMean();\n+        if (n > 0) {\n+            geoMeanImpl.increment(Math.exp(getSumLog() / n));\n             geoMeanImpl.increment(value);\n         }\n-        n++;\n     }\n+    \n+    n++;\n+\n+    // Handle case where n is zero\n+    if (n == 0) {\n+        meanImpl.clear();\n+        varianceImpl.clear();\n+        geoMeanImpl.clear();\n+    }\n+}\n \n     /**\n      * Returns the number of available values",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}