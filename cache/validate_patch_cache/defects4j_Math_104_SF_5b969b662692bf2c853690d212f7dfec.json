{
    "patch": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n    if (a <= 0) {\n        throw new IllegalArgumentException(\"a must be positive.\");\n    }\n    if (x < 0) {\n        throw new IllegalArgumentException(\"x must be non-negative.\");\n    }\n\n    if (x == 0) {\n        return 0;\n    } else if (x >= a + 1) {\n        return 1 - regularizedGammaQ(a, x, epsilon, maxIterations);\n    } else {\n        double n = 0;\n        double an = 1 / a;\n        double sum = an;\n\n        while (Math.abs(an / sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {\n            n += 1;\n            an *= x / (a + n);\n            sum += an;\n        }\n\n        if (n >= maxIterations && Math.abs(an / sum) > epsilon) {\n            throw new RuntimeException(\"Maximum number of iterations (\" + maxIterations + \") exceeded\");\n        }\n\n        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n    }\n}\n\npublic static double regularizedGammaQ(double a, double x, double epsilon, int maxIterations) {\n    if (a <= 0) {\n        throw new IllegalArgumentException(\"a must be positive.\");\n    }\n    if (x < 0) {\n        throw new IllegalArgumentException(\"x must be non-negative.\");\n    }\n\n    if (x == 0) {\n        return 1;\n    } else if (x < a + 1) {\n        return 1 - regularizedGammaP(a, x, epsilon, maxIterations);\n    } else {\n        ContinuedFraction fraction = new ContinuedFraction() {\n            @Override\n            protected double getA(int n, double x) {\n                if (n == 0) {\n                    return 1;\n                } else if (n == 1) {\n                    return 1 + a - x;\n                } else {\n                    return (2 * n - 1) + a - x;\n                }\n            }\n\n            @Override\n            protected double getB(int n, double x) {\n                if (n == 0) {\n                    return 0;\n                } else {\n                    return n * (a - n);\n                }\n            }\n        };\n\n        return 1 / fraction.evaluate(x, epsilon, maxIterations);\n    }\n}\n\npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1) + 24.01409822 / (x + 2) - 1.231739516 / (x + 3) + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..d6c16f0cb 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,81 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n+    if (a <= 0) {\n+        throw new IllegalArgumentException(\"a must be positive.\");\n+    }\n+    if (x < 0) {\n+        throw new IllegalArgumentException(\"x must be non-negative.\");\n+    }\n+\n+    if (x == 0) {\n+        return 0;\n+    } else if (x >= a + 1) {\n+        return 1 - regularizedGammaQ(a, x, epsilon, maxIterations);\n+    } else {\n+        double n = 0;\n+        double an = 1 / a;\n+        double sum = an;\n+\n+        while (Math.abs(an / sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {\n+            n += 1;\n+            an *= x / (a + n);\n+            sum += an;\n+        }\n+\n+        if (n >= maxIterations && Math.abs(an / sum) > epsilon) {\n+            throw new RuntimeException(\"Maximum number of iterations (\" + maxIterations + \") exceeded\");\n+        }\n+\n+        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+    }\n+}\n+\n+public static double regularizedGammaQ(double a, double x, double epsilon, int maxIterations) {\n+    if (a <= 0) {\n+        throw new IllegalArgumentException(\"a must be positive.\");\n+    }\n+    if (x < 0) {\n+        throw new IllegalArgumentException(\"x must be non-negative.\");\n+    }\n+\n+    if (x == 0) {\n+        return 1;\n+    } else if (x < a + 1) {\n+        return 1 - regularizedGammaP(a, x, epsilon, maxIterations);\n+    } else {\n+        ContinuedFraction fraction = new ContinuedFraction() {\n+            @Override\n+            protected double getA(int n, double x) {\n+                if (n == 0) {\n+                    return 1;\n+                } else if (n == 1) {\n+                    return 1 + a - x;\n+                } else {\n+                    return (2 * n - 1) + a - x;\n+                }\n+            }\n+\n+            @Override\n+            protected double getB(int n, double x) {\n+                if (n == 0) {\n+                    return 0;\n+                } else {\n+                    return n * (a - n);\n+                }\n+            }\n+        };\n+\n+        return 1 / fraction.evaluate(x, epsilon, maxIterations);\n+    }\n+}\n+\n+public static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173 / (x + 0) - 86.50532033 / (x + 1) + 24.01409822 / (x + 2) - 1.231739516 / (x + 3) + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}