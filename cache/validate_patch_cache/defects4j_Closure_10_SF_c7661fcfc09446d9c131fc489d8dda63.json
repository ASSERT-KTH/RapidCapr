{
    "patch": "  static boolean mayBeString(Node n, boolean recurse) {\n    Predicate<Node> MAY_BE_STRING_PREDICATE = input -> {\n      return input.isStringLiteral() || input.isName() || input.isFunctionExpression() || input.isUnary() && \"+\".equals(input.getOperator()) && mayBeString(input.getFirstChild(), false) || input.isBinary() && (\"+\".equals(input.getOperator()) ||\n            \"+=\".equals(input.getOperator())) && (mayBeString(input.getFirstChild(), false) || mayBeString(input.getLastChild(), false));\n    };\n    \n    if (recurse) {\n      return allResultsMatch(n.getChildNodes(), MAY_BE_STRING_PREDICATE);\n    } else {\n      return mayBeStringHelper(n);\n    }\n  }\n  \n  private static boolean allResultsMatch(List<? extends Node> nodes, Predicate<Node> pred) {\n    for (Node n : nodes) {\n      if (!pred.test(n)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..6d5929dc 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1413,12 +1413,27 @@ public final class NodeUtil {\n   }\n \n   static boolean mayBeString(Node n, boolean recurse) {\n+    Predicate<Node> MAY_BE_STRING_PREDICATE = input -> {\n+      return input.isStringLiteral() || input.isName() || input.isFunctionExpression() || input.isUnary() && \"+\".equals(input.getOperator()) && mayBeString(input.getFirstChild(), false) || input.isBinary() && (\"+\".equals(input.getOperator()) ||\n+            \"+=\".equals(input.getOperator())) && (mayBeString(input.getFirstChild(), false) || mayBeString(input.getLastChild(), false));\n+    };\n+    \n     if (recurse) {\n-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n+      return allResultsMatch(n.getChildNodes(), MAY_BE_STRING_PREDICATE);\n     } else {\n       return mayBeStringHelper(n);\n     }\n   }\n+  \n+  private static boolean allResultsMatch(List<? extends Node> nodes, Predicate<Node> pred) {\n+    for (Node n : nodes) {\n+      if (!pred.test(n)) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+  \n \n   static boolean mayBeStringHelper(Node n) {\n     return !isNumericResult(n) && !isBooleanResult(n)",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}