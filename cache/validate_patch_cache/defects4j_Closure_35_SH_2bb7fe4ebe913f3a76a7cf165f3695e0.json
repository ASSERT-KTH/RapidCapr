{
    "patch": "if (constraintObj != null && constraintObj.isRecordType()) {\n  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType != null) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!objType.hasProperty(prop)) {\n        objType.defineInferredProperty(prop, propType, null);\n      }\n    }\n    // additional check for undeclared properties\n    for (String undeclaredProp : objType.getUndeclaredPropertyNames()) {\n      DiagnosticType warning = CheckTypes.UNDECLARED_PROPERTY;\n      JSType unknownType = getNativeType(UNKNOWN_TYPE);\n      report(t.makeError(n, warning, undeclaredProp, unknownType));\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..b5cec682 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,22 +1118,24 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n-        }\n+if (constraintObj != null && constraintObj.isRecordType()) {\n+  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+  if (objType != null) {\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+      JSType propType = constraintObj.getPropertyType(prop);\n+      if (!objType.hasProperty(prop)) {\n+        objType.defineInferredProperty(prop, propType, null);\n       }\n     }\n+    // additional check for undeclared properties\n+    for (String undeclaredProp : objType.getUndeclaredPropertyNames()) {\n+      DiagnosticType warning = CheckTypes.UNDECLARED_PROPERTY;\n+      JSType unknownType = getNativeType(UNKNOWN_TYPE);\n+      report(t.makeError(n, warning, undeclaredProp, unknownType));\n+    }\n+  }\n+}\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}