{
    "patch": "Partial newPartial = new Partial(newTypes, newValues, iChronology);\nnewPartial = newPartial.withField(newTypes[0], newValues[0]).withField(newTypes[1], newValues[1])\n    .withField(newTypes[2], newValues[2]).withField(newTypes[3], newValues[3])\n    .withField(newTypes[4], newValues[4]).withField(newTypes[5], newValues[5])\n    .withField(newTypes[6], newValues[6]).withField(newTypes[7], newValues[7])\n    .withField(newTypes[8], newValues[8]).withField(newTypes[9], newValues[9]);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..7f361f4d 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -461,7 +461,12 @@ public final class Partial\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+Partial newPartial = new Partial(newTypes, newValues, iChronology);\n+newPartial = newPartial.withField(newTypes[0], newValues[0]).withField(newTypes[1], newValues[1])\n+    .withField(newTypes[2], newValues[2]).withField(newTypes[3], newValues[3])\n+    .withField(newTypes[4], newValues[4]).withField(newTypes[5], newValues[5])\n+    .withField(newTypes[6], newValues[6]).withField(newTypes[7], newValues[7])\n+    .withField(newTypes[8], newValues[8]).withField(newTypes[9], newValues[9]);\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }",
    "result_reason": "java.lang.ArrayIndexOutOfBoundsException: 2",
    "test_result": "FAIL"
}