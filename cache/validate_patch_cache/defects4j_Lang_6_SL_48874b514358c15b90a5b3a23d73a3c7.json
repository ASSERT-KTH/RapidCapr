{
    "patch": "pos += Character.isHighSurrogate(input.charAt(pos)) && pos + 1 < len \n       && Character.isLowSurrogate(input.charAt(pos + 1)) ? 2 : 1;\nif (pos < len && Character.isLowSurrogate(input.charAt(pos - 1)) && Character.isHighSurrogate(input.charAt(pos))) {\n    // combine adjacent surrogate pairs\n    int codePoint = Character.toCodePoint(input.charAt(pos - 1), input.charAt(pos));\n    out.write(new String(Character.toChars(codePoint)));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..3391df86 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,13 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+pos += Character.isHighSurrogate(input.charAt(pos)) && pos + 1 < len \n+       && Character.isLowSurrogate(input.charAt(pos + 1)) ? 2 : 1;\n+if (pos < len && Character.isLowSurrogate(input.charAt(pos - 1)) && Character.isHighSurrogate(input.charAt(pos))) {\n+    // combine adjacent surrogate pairs\n+    int codePoint = Character.toCodePoint(input.charAt(pos - 1), input.charAt(pos));\n+    out.write(new String(Character.toChars(codePoint)));\n+}\n             }\n         }\n     }",
    "result_reason": "java.lang.IllegalArgumentException",
    "test_result": "FAIL"
}