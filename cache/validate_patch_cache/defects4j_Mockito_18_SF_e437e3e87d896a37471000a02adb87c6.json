{
    "patch": "public static int maxSumSubArray(int[] arr){\n    int maxSoFar = arr[0];\n    int currentMax = arr[0];\n    for(int i=1;i<arr.length;i++){\n        currentMax = Math.max(arr[i], currentMax+arr[i]);\n        maxSoFar = Math.max(maxSoFar, currentMax);\n    }\n    return maxSoFar;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..ef4cb94fd 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,15 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static int maxSumSubArray(int[] arr){\n+    int maxSoFar = arr[0];\n+    int currentMax = arr[0];\n+    for(int i=1;i<arr.length;i++){\n+        currentMax = Math.max(arr[i], currentMax+arr[i]);\n+        maxSoFar = Math.max(maxSoFar, currentMax);\n+    }\n+    return maxSoFar;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}