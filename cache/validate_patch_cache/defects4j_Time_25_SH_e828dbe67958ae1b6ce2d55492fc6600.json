{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal == nextAdjusted) {\n                    // In case of overlap, when local time is in the overlapped period, return the earlier offset\n                    if (offsetAdjusted > offsetLocal) {\n                        return offsetLocal;\n                    }\n                    // In case of gap, when local time is in the missing period, return the latest offset\n                    return getOffset(nextLocal - 1);\n                }\n                if (offsetAdjusted == getOffset(nextAdjusted - 1)) {\n                    return offsetAdjusted;\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..01da3094 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,21 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal == nextAdjusted) {\n+                    // In case of overlap, when local time is in the overlapped period, return the earlier offset\n+                    if (offsetAdjusted > offsetLocal) {\n+                        return offsetLocal;\n+                    }\n+                    // In case of gap, when local time is in the missing period, return the latest offset\n+                    return getOffset(nextLocal - 1);\n+                }\n+                if (offsetAdjusted == getOffset(nextAdjusted - 1)) {\n+                    return offsetAdjusted;\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}