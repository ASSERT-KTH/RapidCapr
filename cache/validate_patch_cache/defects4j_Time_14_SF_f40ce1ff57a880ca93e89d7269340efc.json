{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            int[] newValues = values.clone();\n            long instant = 0L;\n            int day = 0;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                DateTimeFieldType fieldType = partial.getFieldType(i);\n                int fieldValue;\n                if (i == fieldIndex) {\n                    fieldValue = partial.getField(i).addWrapField(values[i], valueToAdd);\n                    if (fieldType == DateTimeFieldType.monthOfYear()) {\n                        int year = newValues[DateTimeFieldType.year().getIndexedField()];\n                        int month = fieldValue;\n                        int dayLimit = iChronology.dayOfMonth().getMaximumValue(\n                                iChronology.yearMonth().set(iChronology.monthOfYear().set(0, year), month));\n                        day = Math.min(dayLimit, newValues[DateTimeFieldType.dayOfMonth().getIndexedField()]);\n                        instant = iChronology.yearMonthDay().set(0, year, month, day).getMillis();\n                    }\n                } else {\n                    fieldValue = values[i];\n                }\n                instant = fieldType.getField(iChronology).set(instant, fieldValue);\n            }\n            instant = add(instant, valueToAdd);\n            int[] result = iChronology.get(partial, instant);\n            if (result[fieldIndex] != newValues[fieldIndex]) {\n                // Did not work, try to avoid wrapping\n                long instant2 = 0L;\n                for (int i = 0, isize = partial.size(); i < isize; i++) {\n                    DateTimeFieldType fieldType = partial.getFieldType(i);\n                    int fieldValue;\n                    if (i == fieldIndex) {\n                        fieldValue = partial.getField(i).getMaximumValue();\n                        fieldValue = iChronology.getWrappedField(fieldType).set(this, fieldValue, newValues[i], valueToAdd);\n                        if (fieldType == DateTimeFieldType.monthOfYear()) {\n                            int year = result[DateTimeFieldType.year().getIndexedField()];\n                            int month = fieldValue;\n                            int dayLimit = iChronology.dayOfMonth().getMaximumValue(\n                                    iChronology.yearMonth().set(iChronology.monthOfYear().set(0, year), month));\n                            day = Math.min(dayLimit, newValues[DateTimeFieldType.dayOfMonth().getIndexedField()]);\n                            instant2 = iChronology.yearMonthDay().set(0, year, month, day).getMillis();\n                        }\n                    } else {\n                        fieldValue = newValues[i];\n                    }\n                    instant2 = fieldType.getField(iChronology).set(instant2, fieldValue);\n                }\n                instant2 = add(instant2, valueToAdd);\n                int[] result2 = iChronology.get(partial, instant2);\n                if (result2[fieldIndex] == newValues[fieldIndex]) {\n                    result = result2;\n                }\n            }\n            return result;\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..865671d4 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,14 +206,60 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n+            int[] newValues = values.clone();\n             long instant = 0L;\n+            int day = 0;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                DateTimeFieldType fieldType = partial.getFieldType(i);\n+                int fieldValue;\n+                if (i == fieldIndex) {\n+                    fieldValue = partial.getField(i).addWrapField(values[i], valueToAdd);\n+                    if (fieldType == DateTimeFieldType.monthOfYear()) {\n+                        int year = newValues[DateTimeFieldType.year().getIndexedField()];\n+                        int month = fieldValue;\n+                        int dayLimit = iChronology.dayOfMonth().getMaximumValue(\n+                                iChronology.yearMonth().set(iChronology.monthOfYear().set(0, year), month));\n+                        day = Math.min(dayLimit, newValues[DateTimeFieldType.dayOfMonth().getIndexedField()]);\n+                        instant = iChronology.yearMonthDay().set(0, year, month, day).getMillis();\n+                    }\n+                } else {\n+                    fieldValue = values[i];\n+                }\n+                instant = fieldType.getField(iChronology).set(instant, fieldValue);\n             }\n             instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            int[] result = iChronology.get(partial, instant);\n+            if (result[fieldIndex] != newValues[fieldIndex]) {\n+                // Did not work, try to avoid wrapping\n+                long instant2 = 0L;\n+                for (int i = 0, isize = partial.size(); i < isize; i++) {\n+                    DateTimeFieldType fieldType = partial.getFieldType(i);\n+                    int fieldValue;\n+                    if (i == fieldIndex) {\n+                        fieldValue = partial.getField(i).getMaximumValue();\n+                        fieldValue = iChronology.getWrappedField(fieldType).set(this, fieldValue, newValues[i], valueToAdd);\n+                        if (fieldType == DateTimeFieldType.monthOfYear()) {\n+                            int year = result[DateTimeFieldType.year().getIndexedField()];\n+                            int month = fieldValue;\n+                            int dayLimit = iChronology.dayOfMonth().getMaximumValue(\n+                                    iChronology.yearMonth().set(iChronology.monthOfYear().set(0, year), month));\n+                            day = Math.min(dayLimit, newValues[DateTimeFieldType.dayOfMonth().getIndexedField()]);\n+                            instant2 = iChronology.yearMonthDay().set(0, year, month, day).getMillis();\n+                        }\n+                    } else {\n+                        fieldValue = newValues[i];\n+                    }\n+                    instant2 = fieldType.getField(iChronology).set(instant2, fieldValue);\n+                }\n+                instant2 = add(instant2, valueToAdd);\n+                int[] result2 = iChronology.get(partial, instant2);\n+                if (result2[fieldIndex] == newValues[fieldIndex]) {\n+                    result = result2;\n+                }\n+            }\n+            return result;\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}