{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalculate the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        long transition;\n        if (offsetLocal > offsetAdjusted) { // gap\n            transition = nextTransition(instantAdjusted - 1);\n            if (transition == instantAdjusted - 1) {\n                // transition occurs at same instant as instantAdjusted\n                // check if this is a gap or overlap\n                int prevOffset = getOffset(transition - 1);\n                int nextOffset = getOffset(transition);\n                if (prevOffset <= offsetLocal && nextOffset > offsetAdjusted) {\n                    return nextOffset;\n                } else {\n                    return offsetLocal;\n                }\n            } else if (getOffset(transition - 1) <= offsetLocal && getOffset(transition) > offsetAdjusted) {\n                // transition is in gap\n                return getOffset(transition);\n            } else {\n                // transition is not in gap\n                return offsetLocal;\n            }\n        } else { // overlap\n            transition = previousTransition(instantAdjusted);\n            int prevOffset = getOffset(transition);\n            if (prevOffset <= offsetLocal) {\n                // check if an instant exists in the overlap\n                long nextTransition = nextTransition(instantAdjusted - 1);\n                if (nextTransition <= instantLocal - offsetLocal) {\n                    int nextOffset = getOffset(nextTransition);\n                    if (nextOffset > offsetLocal) {\n                        return offsetLocal;\n                    } else {\n                        return prevOffset;\n                    }\n                }\n            }\n            // in gap or before overlap\n            return prevOffset;\n        }\n    }\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..55e52a42 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,55 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    final int offsetLocal = getOffset(instantLocal);\n+    // adjust instantLocal using the estimate and recalculate the offset\n+    final long instantAdjusted = instantLocal - offsetLocal;\n+    final int offsetAdjusted = getOffset(instantAdjusted);\n+    // if the offsets differ, we must be near a DST boundary\n+    if (offsetLocal != offsetAdjusted) {\n+        long transition;\n+        if (offsetLocal > offsetAdjusted) { // gap\n+            transition = nextTransition(instantAdjusted - 1);\n+            if (transition == instantAdjusted - 1) {\n+                // transition occurs at same instant as instantAdjusted\n+                // check if this is a gap or overlap\n+                int prevOffset = getOffset(transition - 1);\n+                int nextOffset = getOffset(transition);\n+                if (prevOffset <= offsetLocal && nextOffset > offsetAdjusted) {\n+                    return nextOffset;\n+                } else {\n                     return offsetLocal;\n                 }\n+            } else if (getOffset(transition - 1) <= offsetLocal && getOffset(transition) > offsetAdjusted) {\n+                // transition is in gap\n+                return getOffset(transition);\n+            } else {\n+                // transition is not in gap\n+                return offsetLocal;\n             }\n+        } else { // overlap\n+            transition = previousTransition(instantAdjusted);\n+            int prevOffset = getOffset(transition);\n+            if (prevOffset <= offsetLocal) {\n+                // check if an instant exists in the overlap\n+                long nextTransition = nextTransition(instantAdjusted - 1);\n+                if (nextTransition <= instantLocal - offsetLocal) {\n+                    int nextOffset = getOffset(nextTransition);\n+                    if (nextOffset > offsetLocal) {\n+                        return offsetLocal;\n+                    } else {\n+                        return prevOffset;\n+                    }\n+                }\n+            }\n+            // in gap or before overlap\n+            return prevOffset;\n         }\n-        return offsetAdjusted;\n     }\n+    return offsetAdjusted;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}