{
    "patch": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay,\n        int minuteOfHour, int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException {\n        \n    // check if date is a leap year in Julian or Gregorian calendar\n    boolean isLeapGregorian = ISOChronology.getInstanceUTC().isLeapYear(year);\n    boolean isLeapJulian = iJulianChronology.isLeapYear(year);\n    \n    // check if given date is valid according to Julian or Gregorian calendar, depending on year\n    if (year < 1582 || (year == 1582 && monthOfYear < 10) || (year == 1582 && monthOfYear == 10 && dayOfMonth < 15)) {\n        if (!isLeapJulian && monthOfYear == 2 && dayOfMonth == 29) {\n            throw new IllegalArgumentException(\"February 29th not valid on non-leap year in Julian calendar.\");\n        } else {\n            IllegalFieldValueException.checkValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, iJulianChronology.getDaysInYearMonth(year, monthOfYear));\n            return iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n    } else {\n        if (!isLeapGregorian && monthOfYear == 2 && dayOfMonth == 29) {\n            throw new IllegalArgumentException(\"February 29th not valid on non-leap year in Gregorian calendar.\");\n        } else {\n            IllegalFieldValueException.checkValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, ISOChronology.getInstanceUTC().getDaysInYearMonth(year, monthOfYear));\n            return iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 29e559d4..490a30bd 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -347,35 +347,33 @@ public final class GJChronology extends AssembledChronology {\n         return instant;\n     }\n \n-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n-                                  int hourOfDay, int minuteOfHour,\n-                                  int secondOfMinute, int millisOfSecond)\n-        throws IllegalArgumentException\n-    {\n-        Chronology base;\n-        if ((base = getBase()) != null) {\n-            return base.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay,\n+        int minuteOfHour, int secondOfMinute, int millisOfSecond)\n+        throws IllegalArgumentException {\n+        \n+    // check if date is a leap year in Julian or Gregorian calendar\n+    boolean isLeapGregorian = ISOChronology.getInstanceUTC().isLeapYear(year);\n+    boolean isLeapJulian = iJulianChronology.isLeapYear(year);\n+    \n+    // check if given date is valid according to Julian or Gregorian calendar, depending on year\n+    if (year < 1582 || (year == 1582 && monthOfYear < 10) || (year == 1582 && monthOfYear == 10 && dayOfMonth < 15)) {\n+        if (!isLeapJulian && monthOfYear == 2 && dayOfMonth == 29) {\n+            throw new IllegalArgumentException(\"February 29th not valid on non-leap year in Julian calendar.\");\n+        } else {\n+            IllegalFieldValueException.checkValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, iJulianChronology.getDaysInYearMonth(year, monthOfYear));\n+            return iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n         }\n-\n-        // Assume date is Gregorian.\n-        long instant;\n-            instant = iGregorianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        if (instant < iCutoverMillis) {\n-            // Maybe it's Julian.\n-            instant = iJulianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-            if (instant >= iCutoverMillis) {\n-                // Okay, it's in the illegal cutover gap.\n-                throw new IllegalArgumentException(\"Specified date does not exist\");\n-            }\n+    } else {\n+        if (!isLeapGregorian && monthOfYear == 2 && dayOfMonth == 29) {\n+            throw new IllegalArgumentException(\"February 29th not valid on non-leap year in Gregorian calendar.\");\n+        } else {\n+            IllegalFieldValueException.checkValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, ISOChronology.getInstanceUTC().getDaysInYearMonth(year, monthOfYear));\n+            return iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n         }\n-        return instant;\n     }\n+}\n \n     /**\n      * Gets the cutover instant between Gregorian and Julian chronologies.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}