{
    "patch": "    boolean assignedOnce = false;\n\n    Reference ref = getOneAndOnlyAssignment();\n    if (ref != null) {\n      // Make sure this assignment is not in a loop.\n      for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          break;\n        } else if (block.isLoop) {\n          return false;\n        }\n      }\n      assignedOnce = true;\n    } else {\n      int numAssignments = 0;\n      int size = references.size();\n      for (int i = 0; i < size; i++) {\n        if (references.get(i).isAssignmentToName()) {\n          numAssignments++;\n          if (numAssignments > 1) {\n            return false;\n          }\n          for (BasicBlock block = references.get(i).getBasicBlock();\n               block != null; block = block.getParent()) {\n            if (block.isFunction) {\n              break;\n            } else if (block.isLoop) {\n              return false;\n            }\n          }\n        }\n      }\n      assignedOnce = numAssignments == 1;\n    }\n\n    return assignedOnce;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..47bc5241 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,42 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+    boolean assignedOnce = false;\n+\n+    Reference ref = getOneAndOnlyAssignment();\n+    if (ref != null) {\n+      // Make sure this assignment is not in a loop.\n+      for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoop) {\n+          return false;\n+        }\n+      }\n+      assignedOnce = true;\n+    } else {\n+      int numAssignments = 0;\n+      int size = references.size();\n+      for (int i = 0; i < size; i++) {\n+        if (references.get(i).isAssignmentToName()) {\n+          numAssignments++;\n+          if (numAssignments > 1) {\n+            return false;\n+          }\n+          for (BasicBlock block = references.get(i).getBasicBlock();\n+               block != null; block = block.getParent()) {\n+            if (block.isFunction) {\n+              break;\n+            } else if (block.isLoop) {\n+              return false;\n+            }\n+          }\n+        }\n+      }\n+      assignedOnce = numAssignments == 1;\n+    }\n+\n+    return assignedOnce;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable ref is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}