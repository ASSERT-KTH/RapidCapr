{
    "patch": "protected double doSolve() throws TooManyEvaluationsException {\n    double min = getMin();\n    double max = getMax();\n    double startValue = getStartValue();\n    double targetY = getTargetY();\n    final double absoluteAccuracy = getAbsoluteAccuracy();\n\n    double yMin = computeObjectiveValue(min);\n    if (FastMath.abs(yMin - targetY) <= absoluteAccuracy)\n        return min;\n\n    double yMax = computeObjectiveValue(max);\n    if (FastMath.abs(yMax - targetY) <= absoluteAccuracy)\n        return max;\n\n    double yStart = computeObjectiveValue(startValue);\n    if (FastMath.abs(yStart - targetY) <= absoluteAccuracy)\n        return startValue;\n\n    verifySequence(min, startValue, max);\n\n    // Iteration loop.\n    double x0 = min;\n    double x1 = startValue;\n    double x2 = max;\n    double y0 = yMin;\n    double y1 = yStart;\n    double y2 = yMax;\n    double oldY = Double.POSITIVE_INFINITY;\n    double nextX = Double.NaN;\n    while (max - min > absoluteAccuracy\n            && ((nextX = getNextX(x0, y0, x1, y1, x2, y2)) != x1 || FastMath.abs(oldY - y1) > absoluteAccuracy)) {\n        final double nextY = computeObjectiveValue(nextX);\n        if (FastMath.abs(nextY - targetY) <= absoluteAccuracy)\n            return nextX;\n\n        if (nextX < x1) {\n            x2 = x1;\n            y2 = y1;\n        } else {\n            x0 = x1;\n            y0 = y1;\n        }\n        oldY = y1;\n        x1 = nextX;\n        y1 = nextY;\n    }\n\n    // Compute the last value tried.\n    final double xTol = getAbsoluteAccuracy() + getRelativeAccuracy() * FastMath.max(FastMath.abs(x1), FastMath.abs(max));\n    final double lastY = computeObjectiveValue(nextX);\n\n    switch (getUnallowedSolution()) {\n    case BRACKET:\n        if (y0 < y1 && y0 < y2) {\n            if (y0 <= targetY && targetY <= lastY) {\n                return brent.minimize(x0, x2, getFunctionValueAccuracy(), getAbsoluteAccuracy(), getRelativeAccuracy(), getMaximalIterationCount(), computeObjectiveValue).getPoint();\n            }\n            if (lastY <= targetY && targetY <= y0) {\n                return brent.minimize(nextX, x2, getFunctionValueAccuracy(), getAbsoluteAccuracy(), getRelativeAccuracy(), getMaximalIterationCount(), computeObjectiveValue).getPoint();\n            }\n        }\n        if (y1 < y0 && y1 < y2) {\n            if (y1 <= targetY && targetY <= lastY) {\n                return brent.minimize(x1, x2, getFunctionValueAccuracy(), getAbsoluteAccuracy(), getRelativeAccuracy(), getMaximalIterationCount(), computeObjectiveValue).getPoint();\n            }\n            if (lastY <= targetY && targetY <= y1) {\n                return brent.minimize(nextX, x1, getFunctionValueAccuracy(), getAbsoluteAccuracy(), getRelativeAccuracy(), getMaximalIterationCount(), computeObjectiveValue).getPoint();\n            }\n            if (y0 <= targetY && targetY <= y1) {\n                return brent.minimize(x0, x1, getFunctionValueAccuracy(), getAbsoluteAccuracy(), getRelativeAccuracy(), getMaximalIterationCount(), computeObjectiveValue).getPoint();\n            }\n        }\n        if (y2 < y0 && y2 < y1) {\n            if (y2 <= targetY && targetY <= lastY) {\n                return brent.minimize(x0, x2, getFunctionValueAccuracy(), getAbsoluteAccuracy(), getRelativeAccuracy(), getMaximalIterationCount(), computeObjectiveValue).getPoint();\n            }\n            if (lastY <= targetY && targetY <= y2) {\n                return brent.minimize(nextX, x2, getFunctionValueAccuracy(), getAbsoluteAccuracy(), getRelativeAccuracy(), getMaximalIterationCount(), computeObjectiveValue).getPoint();\n            }\n            if (y1 <= targetY && targetY <= y2) {\n                return brent.minimize(x1, x2, getFunctionValueAccuracy(), getAbsoluteAccuracy(), getRelativeAccuracy(), getMaximalIterationCount(), computeObjectiveValue).getPoint();\n            }\n        }\n        break;\n    case ANY_SIDE:\n        return nextX;\n    case LEFT_SIDE:\n        if (y0 < y2) {\n            if (y0 <= targetY && targetY <= lastY) {\n                return brent.minimize(x0, nextX, getFunctionValueAccuracy(), getAbsoluteAccuracy(), getRelativeAccuracy(), getMaximalIterationCount(), computeObjectiveValue).getPoint();\n            }\n        }\n        if (y2 < y0) {\n            if (y2 <= targetY && targetY <= lastY) {\n                return brent.minimize(x2, nextX, getFunctionValueAccuracy(), getAbsoluteAccuracy(), getRelativeAccuracy(), getMaximalIterationCount(), computeObjectiveValue).getPoint();\n            }\n        }\n        break;\n    case RIGHT_SIDE:\n        if (y0 > y2) {\n            if (lastY <= targetY && targetY <= y0) {\n                return brent.minimize(nextX, x0, getFunctionValueAccuracy(), getAbsoluteAccuracy(), getRelativeAccuracy(), getMaximalIterationCount(), computeObjectiveValue).getPoint();\n            }\n        }\n        if (y2 > y0) {\n            if (lastY <= targetY && targetY <= y2) {\n                return brent.minimize(nextX, x2, getFunctionValueAccuracy(), getAbsoluteAccuracy(), getRelativeAccuracy(), getMaximalIterationCount(), computeObjectiveValue).getPoint();\n            }\n        }\n        break;\n    case NaN:\n        break;\n    default:\n        throw new MathInternalError();\n    }\n    throw new NoBracketingException(LocalizedFormats.FAILED_BRACKETING,\n            min, max, yMin, yMax,\n            \"target value\", targetY, 0, getMaximalIterationCount() - getEvaluations());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..8837cc1fd 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -126,129 +126,126 @@ public abstract class BaseSecantSolver\n     }\n \n     /** {@inheritDoc} */\n-    protected final double doSolve() {\n-        // Get initial solution\n-        double x0 = getMin();\n-        double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n+protected double doSolve() throws TooManyEvaluationsException {\n+    double min = getMin();\n+    double max = getMax();\n+    double startValue = getStartValue();\n+    double targetY = getTargetY();\n+    final double absoluteAccuracy = getAbsoluteAccuracy();\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n+    double yMin = computeObjectiveValue(min);\n+    if (FastMath.abs(yMin - targetY) <= absoluteAccuracy)\n+        return min;\n \n-        // Verify bracketing of initial solution.\n-        verifyBracketing(x0, x1);\n+    double yMax = computeObjectiveValue(max);\n+    if (FastMath.abs(yMax - targetY) <= absoluteAccuracy)\n+        return max;\n \n-        // Get accuracies.\n-        final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+    double yStart = computeObjectiveValue(startValue);\n+    if (FastMath.abs(yStart - targetY) <= absoluteAccuracy)\n+        return startValue;\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n-        // larger than the right bound.\n-        boolean inverted = false;\n+    verifySequence(min, startValue, max);\n \n-        // Keep finding better approximations.\n-        while (true) {\n-            // Calculate the next approximation.\n-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+    // Iteration loop.\n+    double x0 = min;\n+    double x1 = startValue;\n+    double x2 = max;\n+    double y0 = yMin;\n+    double y1 = yStart;\n+    double y2 = yMax;\n+    double oldY = Double.POSITIVE_INFINITY;\n+    double nextX = Double.NaN;\n+    while (max - min > absoluteAccuracy\n+            && ((nextX = getNextX(x0, y0, x1, y1, x2, y2)) != x1 || FastMath.abs(oldY - y1) > absoluteAccuracy)) {\n+        final double nextY = computeObjectiveValue(nextX);\n+        if (FastMath.abs(nextY - targetY) <= absoluteAccuracy)\n+            return nextX;\n \n-            // If the new approximation is the exact root, return it. Since\n-            // this is not an under-approximation or an over-approximation,\n-            // we can return it regardless of the allowed solutions.\n-            if (fx == 0.0) {\n-                return x;\n-            }\n+        if (nextX < x1) {\n+            x2 = x1;\n+            y2 = y1;\n+        } else {\n+            x0 = x1;\n+            y0 = y1;\n+        }\n+        oldY = y1;\n+        x1 = nextX;\n+        y1 = nextY;\n+    }\n \n-            // Update the bounds with the new approximation.\n-            if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n-                // the interval.\n-                x0 = x1;\n-                f0 = f1;\n-                inverted = !inverted;\n-            } else {\n-                switch (method) {\n-                case ILLINOIS:\n-                    f0 *= 0.5;\n-                    break;\n-                case PEGASUS:\n-                    f0 *= f1 / (f1 + fx);\n-                    break;\n-                case REGULA_FALSI:\n-                    // Detect early that algorithm is stuck, instead of waiting\n-                    // for the maximum number of iterations to be exceeded.\n-                    break;\n-                default:\n-                    // Should never happen.\n-                    throw new MathInternalError();\n-                }\n-            }\n-            // Update from [x0, x1] to [x0, x].\n-            x1 = x;\n-            f1 = fx;\n+    // Compute the last value tried.\n+    final double xTol = getAbsoluteAccuracy() + getRelativeAccuracy() * FastMath.max(FastMath.abs(x1), FastMath.abs(max));\n+    final double lastY = computeObjectiveValue(nextX);\n \n-            // If the function value of the last approximation is too small,\n-            // given the function value accuracy, then we can't get closer to\n-            // the root than we already are.\n-            if (FastMath.abs(f1) <= ftol) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    if (inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case RIGHT_SIDE:\n-                    if (!inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case BELOW_SIDE:\n-                    if (f1 <= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                case ABOVE_SIDE:\n-                    if (f1 >= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                default:\n-                    throw new MathInternalError();\n-                }\n+    switch (getUnallowedSolution()) {\n+    case BRACKET:\n+        if (y0 < y1 && y0 < y2) {\n+            if (y0 <= targetY && targetY <= lastY) {\n+                return brent.minimize(x0, x2, getFunctionValueAccuracy(), getAbsoluteAccuracy(), getRelativeAccuracy(), getMaximalIterationCount(), computeObjectiveValue).getPoint();\n             }\n-\n-            // If the current interval is within the given accuracies, we\n-            // are satisfied with the current approximation.\n-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n-                                                     atol)) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    return inverted ? x1 : x0;\n-                case RIGHT_SIDE:\n-                    return inverted ? x0 : x1;\n-                case BELOW_SIDE:\n-                    return (f1 <= 0) ? x1 : x0;\n-                case ABOVE_SIDE:\n-                    return (f1 >= 0) ? x1 : x0;\n-                default:\n-                    throw new MathInternalError();\n-                }\n+            if (lastY <= targetY && targetY <= y0) {\n+                return brent.minimize(nextX, x2, getFunctionValueAccuracy(), getAbsoluteAccuracy(), getRelativeAccuracy(), getMaximalIterationCount(), computeObjectiveValue).getPoint();\n+            }\n+        }\n+        if (y1 < y0 && y1 < y2) {\n+            if (y1 <= targetY && targetY <= lastY) {\n+                return brent.minimize(x1, x2, getFunctionValueAccuracy(), getAbsoluteAccuracy(), getRelativeAccuracy(), getMaximalIterationCount(), computeObjectiveValue).getPoint();\n+            }\n+            if (lastY <= targetY && targetY <= y1) {\n+                return brent.minimize(nextX, x1, getFunctionValueAccuracy(), getAbsoluteAccuracy(), getRelativeAccuracy(), getMaximalIterationCount(), computeObjectiveValue).getPoint();\n+            }\n+            if (y0 <= targetY && targetY <= y1) {\n+                return brent.minimize(x0, x1, getFunctionValueAccuracy(), getAbsoluteAccuracy(), getRelativeAccuracy(), getMaximalIterationCount(), computeObjectiveValue).getPoint();\n+            }\n+        }\n+        if (y2 < y0 && y2 < y1) {\n+            if (y2 <= targetY && targetY <= lastY) {\n+                return brent.minimize(x0, x2, getFunctionValueAccuracy(), getAbsoluteAccuracy(), getRelativeAccuracy(), getMaximalIterationCount(), computeObjectiveValue).getPoint();\n+            }\n+            if (lastY <= targetY && targetY <= y2) {\n+                return brent.minimize(nextX, x2, getFunctionValueAccuracy(), getAbsoluteAccuracy(), getRelativeAccuracy(), getMaximalIterationCount(), computeObjectiveValue).getPoint();\n+            }\n+            if (y1 <= targetY && targetY <= y2) {\n+                return brent.minimize(x1, x2, getFunctionValueAccuracy(), getAbsoluteAccuracy(), getRelativeAccuracy(), getMaximalIterationCount(), computeObjectiveValue).getPoint();\n+            }\n+        }\n+        break;\n+    case ANY_SIDE:\n+        return nextX;\n+    case LEFT_SIDE:\n+        if (y0 < y2) {\n+            if (y0 <= targetY && targetY <= lastY) {\n+                return brent.minimize(x0, nextX, getFunctionValueAccuracy(), getAbsoluteAccuracy(), getRelativeAccuracy(), getMaximalIterationCount(), computeObjectiveValue).getPoint();\n+            }\n+        }\n+        if (y2 < y0) {\n+            if (y2 <= targetY && targetY <= lastY) {\n+                return brent.minimize(x2, nextX, getFunctionValueAccuracy(), getAbsoluteAccuracy(), getRelativeAccuracy(), getMaximalIterationCount(), computeObjectiveValue).getPoint();\n+            }\n+        }\n+        break;\n+    case RIGHT_SIDE:\n+        if (y0 > y2) {\n+            if (lastY <= targetY && targetY <= y0) {\n+                return brent.minimize(nextX, x0, getFunctionValueAccuracy(), getAbsoluteAccuracy(), getRelativeAccuracy(), getMaximalIterationCount(), computeObjectiveValue).getPoint();\n             }\n         }\n+        if (y2 > y0) {\n+            if (lastY <= targetY && targetY <= y2) {\n+                return brent.minimize(nextX, x2, getFunctionValueAccuracy(), getAbsoluteAccuracy(), getRelativeAccuracy(), getMaximalIterationCount(), computeObjectiveValue).getPoint();\n+            }\n+        }\n+        break;\n+    case NaN:\n+        break;\n+    default:\n+        throw new MathInternalError();\n     }\n+    throw new NoBracketingException(LocalizedFormats.FAILED_BRACKETING,\n+            min, max, yMin, yMax,\n+            \"target value\", targetY, 0, getMaximalIterationCount() - getEvaluations());\n+}\n \n     /** <em>Secant</em>-based root-finding methods. */\n     protected enum Method {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}