{
    "patch": "if (maybeDecl.isVarDeclaration() && !maybeDecl.isInitializingDeclaration()) {\n  Reference maybeInit = references.get(index);\n\n  if (maybeInit.isSimpleAssignmentToName() || maybeInit.isFunctionExpression()\n          || maybeInit.isFunctionDeclaration()) {\n\n    return true;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..8cee0b61 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,15 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (maybeDecl.isVarDeclaration() && !maybeDecl.isInitializingDeclaration()) {\n+  Reference maybeInit = references.get(index);\n+\n+  if (maybeInit.isSimpleAssignmentToName() || maybeInit.isFunctionExpression()\n+          || maybeInit.isFunctionDeclaration()) {\n+\n+    return true;\n+  }\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}