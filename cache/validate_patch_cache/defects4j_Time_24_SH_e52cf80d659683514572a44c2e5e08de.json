{
    "patch": "                SavedField savedField = savedFields[i];\n                DateTimeField field = savedField.iField;\n                if (field != null) {\n                    int year = field.getDurationType() == DurationFieldType.years() ? this.iDefaultYear : 2000;\n                    savedFields[i] = new SavedField(\n                            field.getType(),\n                            field.isSupported(),\n                            field.get(year),\n                            savedField.iValue,\n                            savedField.iText,\n                            savedField.iLocale\n                    );\n                }\n            }\n            millis = iChrono.millisOfDay().set(0L, millis);\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n            if (iStrict) {\n                throw e;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..aee668a9 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,26 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                SavedField savedField = savedFields[i];\n+                DateTimeField field = savedField.iField;\n+                if (field != null) {\n+                    int year = field.getDurationType() == DurationFieldType.years() ? this.iDefaultYear : 2000;\n+                    savedFields[i] = new SavedField(\n+                            field.getType(),\n+                            field.isSupported(),\n+                            field.get(year),\n+                            savedField.iValue,\n+                            savedField.iText,\n+                            savedField.iLocale\n+                    );\n+                }\n+            }\n+            millis = iChrono.millisOfDay().set(0L, millis);\n+            for (int i = 0; i < count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+            }\n+            if (iStrict) {\n+                throw e;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'try' without 'catch' or 'finally'",
    "test_result": "ERROR"
}