{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction(), function);\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n\n      List<Node> paramNodes = new ArrayList<>();\n      for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n        if (arg.isName()) {\n          Var var = fnScope.getVar(arg.getString());\n          if (!referenced.contains(var)) {\n            paramNodes.add(arg);\n          }\n        }\n      }\n\n      for (Node param: paramNodes) {\n        // If no more references to the parameter are found,\n        // remove it from the parameter list.\n        removeUnusedParameter(param);\n      }\n\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }\n  \n  private void removeUnusedParameter(Node parameterNameNode) {\n    Preconditions.checkArgument(parameterNameNode.isName());\n\n    Node parameterNode = parameterNameNode.getParent();\n    Preconditions.checkArgument(parameterNode.isParamList());\n\n    Node functionNode = parameterNode.getParent();\n\n    parameterNode.removeChild(parameterNameNode);\n\n    for(Node currentFunction = functionNode.getFirstChild(); currentFunction != null; currentFunction = currentFunction.getNext()) {\n      markUnreferencedLocals(currentFunction);\n    }\n\n    compiler.reportCodeChange();\n  }\n  \n  private void markUnreferencedLocals(Node n) {\n    if (n.isFunction()) {\n      markUnreferencedLocals(n.getFirstChild());\n      Set<String> usedLocals = getUsedLocalVariablesNames(n.getFirstChild(), n.getLastChild());\n      for(Node currentParam = getFunctionArgList(n).getFirstChild(); currentParam != null; currentParam = currentParam.getNext()) {\n        String argumentName = currentParam.getString();\n        if (!usedLocals.contains(argumentName)) {\n          Var argumentVar = n.getScope().getVar(argumentName);\n          argumentVar.clearInitialValue();\n          n.removeChild(currentParam);\n          break;  // one argument deleted - exit the list\n        }\n      }\n    } else if (n.isScope()) {\n      for(Node currentChild = n.getFirstChild(); currentChild != null; currentChild = currentChild.getNext()) {\n        markUnreferencedLocals(currentChild);\n      }\n    } else if(n.getType() == Token.CATCH) {\n      markUnreferencedLocals(n.getFirstChild());\n    } else if(n.getType() == Token.VAR) {\n      for(Node currentChild = n.getFirstChild(); currentChild != null; currentChild = currentChild.getNext()) {\n        markUnreferencedLocals(currentChild);\n      }\n    }\n  }\n  \n  private Set<String> getUsedLocalVariablesNames(Node startNode, Node endNode) {\n    final Set<String> usedLocals = new HashSet<>();\n\n    NodeTraversal.traverseSyntactic(\n        compiler,\n        startNode,\n        new AbstractShallowExpressionCallback() {\n          @Override\n          public void visit(NodeTraversal t, Node n, Node parent) {\n            if (n.isName()) {\n              Var var = t.getScope().getVar(n.getString());\n              if (var != null) {\n                if (!var.isGlobal() && !var.getNameNode().isFunction()) {\n                  usedLocals.add(var.getName());\n                }\n              }\n            }\n          }\n        },\n        endNode);\n\n    return usedLocals;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..2ab32776 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,105 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction(), function);\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+\n+      List<Node> paramNodes = new ArrayList<>();\n+      for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+        if (arg.isName()) {\n+          Var var = fnScope.getVar(arg.getString());\n+          if (!referenced.contains(var)) {\n+            paramNodes.add(arg);\n+          }\n+        }\n+      }\n+\n+      for (Node param: paramNodes) {\n+        // If no more references to the parameter are found,\n+        // remove it from the parameter list.\n+        removeUnusedParameter(param);\n+      }\n+\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+  }\n+  \n+  private void removeUnusedParameter(Node parameterNameNode) {\n+    Preconditions.checkArgument(parameterNameNode.isName());\n+\n+    Node parameterNode = parameterNameNode.getParent();\n+    Preconditions.checkArgument(parameterNode.isParamList());\n+\n+    Node functionNode = parameterNode.getParent();\n+\n+    parameterNode.removeChild(parameterNameNode);\n+\n+    for(Node currentFunction = functionNode.getFirstChild(); currentFunction != null; currentFunction = currentFunction.getNext()) {\n+      markUnreferencedLocals(currentFunction);\n+    }\n+\n+    compiler.reportCodeChange();\n+  }\n+  \n+  private void markUnreferencedLocals(Node n) {\n+    if (n.isFunction()) {\n+      markUnreferencedLocals(n.getFirstChild());\n+      Set<String> usedLocals = getUsedLocalVariablesNames(n.getFirstChild(), n.getLastChild());\n+      for(Node currentParam = getFunctionArgList(n).getFirstChild(); currentParam != null; currentParam = currentParam.getNext()) {\n+        String argumentName = currentParam.getString();\n+        if (!usedLocals.contains(argumentName)) {\n+          Var argumentVar = n.getScope().getVar(argumentName);\n+          argumentVar.clearInitialValue();\n+          n.removeChild(currentParam);\n+          break;  // one argument deleted - exit the list\n+        }\n+      }\n+    } else if (n.isScope()) {\n+      for(Node currentChild = n.getFirstChild(); currentChild != null; currentChild = currentChild.getNext()) {\n+        markUnreferencedLocals(currentChild);\n+      }\n+    } else if(n.getType() == Token.CATCH) {\n+      markUnreferencedLocals(n.getFirstChild());\n+    } else if(n.getType() == Token.VAR) {\n+      for(Node currentChild = n.getFirstChild(); currentChild != null; currentChild = currentChild.getNext()) {\n+        markUnreferencedLocals(currentChild);\n+      }\n+    }\n+  }\n+  \n+  private Set<String> getUsedLocalVariablesNames(Node startNode, Node endNode) {\n+    final Set<String> usedLocals = new HashSet<>();\n+\n+    NodeTraversal.traverseSyntactic(\n+        compiler,\n+        startNode,\n+        new AbstractShallowExpressionCallback() {\n+          @Override\n+          public void visit(NodeTraversal t, Node n, Node parent) {\n+            if (n.isName()) {\n+              Var var = t.getScope().getVar(n.getString());\n+              if (var != null) {\n+                if (!var.isGlobal() && !var.getNameNode().isFunction()) {\n+                  usedLocals.add(var.getName());\n+                }\n+              }\n+            }\n+          }\n+        },\n+        endNode);\n+\n+    return usedLocals;\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}