{
    "patch": "    public void captureArgumentsFrom(Invocation invocation) {\n        if (invocation.getMethod().isVarArgs()) {\n            int indexOfVararg = invocation.getRawArguments().length - 1;\n            for (int position = 0; position < matchers.size() && position <= indexOfVararg; position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                }\n            }\n            // Capture varargs if applicable\n            Matcher varargMatcher = null;\n            for (int position = 0; position < matchers.size(); position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof VarargMatcher) {\n                    varargMatcher = m;\n                    break;\n                }\n            }\n            if (varargMatcher != null) {\n                for (int position = indexOfVararg; position < invocation.getRawArguments().length; position++) {\n                    varargMatcher.captureFrom(invocation.getRawArguments()[position]);\n                }\n            }\n        } else {\n            for (int position = 0; position < matchers.size(); position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                }\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..6c6a1a681 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,38 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+    public void captureArgumentsFrom(Invocation invocation) {\n+        if (invocation.getMethod().isVarArgs()) {\n+            int indexOfVararg = invocation.getRawArguments().length - 1;\n+            for (int position = 0; position < matchers.size() && position <= indexOfVararg; position++) {\n+                Matcher m = matchers.get(position);\n+                if (m instanceof CapturesArguments) {\n+                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n+                }\n+            }\n+            // Capture varargs if applicable\n+            Matcher varargMatcher = null;\n+            for (int position = 0; position < matchers.size(); position++) {\n+                Matcher m = matchers.get(position);\n+                if (m instanceof VarargMatcher) {\n+                    varargMatcher = m;\n+                    break;\n+                }\n+            }\n+            if (varargMatcher != null) {\n+                for (int position = indexOfVararg; position < invocation.getRawArguments().length; position++) {\n+                    varargMatcher.captureFrom(invocation.getRawArguments()[position]);\n+                }\n+            }\n+        } else {\n+            for (int position = 0; position < matchers.size(); position++) {\n+                Matcher m = matchers.get(position);\n+                if (m instanceof CapturesArguments) {\n+                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n+                }\n+            }\n+        }\n+    }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}