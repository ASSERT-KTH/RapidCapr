{
    "patch": "import com.google.javascript.rhino.jstype.ObjectType;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\nimport com.google.javascript.rhino.jstype.JSDocInfo;\n\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n\n    // Get the JSDoc information for the function node.\n    JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n\n    // Don't traverse functions that are constructors or have the @this or @override annotation.\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally be able to have a @this annotation associated with them.\n    // If the parent is not one of the allowed types, return false.\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN ||\n          pType == Token.EXPR_RESULT ||\n          pType == Token.OBJECTLIT ||\n          pType == Token.CALL ||\n          pType == Token.NEW)) {\n      return false;\n    }\n\n    // If there is a @this annotation, make sure it is valid.\n    if (jsDoc != null && jsDoc.hasThisType()) {\n      ObjectType type = ObjectType.cast(jsDoc.getTypeOfThis());\n      if (type == null || type.getConstructor() == null) {\n        return false;\n      }\n    }\n  }\n\n  // Don't traverse assignments to prototype properties.\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    Node rhs = lhs.getNext();\n\n    if (n == lhs) {\n      // Always traverse the left side of the assignment. To handle\n      // nested assignments properly (e.g., (a = this).property = c;),\n      // assignLhsChild should not be overridden.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Only traverse the right side if it's not an assignment to a prototype\n      // property or subproperty.\n      if (NodeUtil.isGet(lhs)) {\n        if (lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        Node llhs = lhs.getFirstChild();\n        if (llhs.getType() == Token.GETPROP &&\n            llhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..879dc9b4 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,72 +79,78 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+import com.google.javascript.rhino.jstype.ObjectType;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.jstype.JSDocInfo;\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n-        return false;\n-      }\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+  if (n.getType() == Token.FUNCTION) {\n+\n+    // Get the JSDoc information for the function node.\n+    JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n \n-      // Don't traverse functions that are getting lent to a prototype.\n+    // Don't traverse functions that are constructors or have the @this or @override annotation.\n+    if (jsDoc != null &&\n+        (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n+      return false;\n     }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n+    // Don't traverse functions unless they would normally be able to have a @this annotation associated with them.\n+    // If the parent is not one of the allowed types, return false.\n+    int pType = parent.getType();\n+    if (!(pType == Token.BLOCK ||\n+          pType == Token.SCRIPT ||\n+          pType == Token.NAME ||\n+          pType == Token.ASSIGN ||\n+          pType == Token.EXPR_RESULT ||\n+          pType == Token.OBJECTLIT ||\n+          pType == Token.CALL ||\n+          pType == Token.NEW)) {\n+      return false;\n+    }\n \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+    // If there is a @this annotation, make sure it is valid.\n+    if (jsDoc != null && jsDoc.hasThisType()) {\n+      ObjectType type = ObjectType.cast(jsDoc.getTypeOfThis());\n+      if (type == null || type.getConstructor() == null) {\n+        return false;\n+      }\n+    }\n+  }\n+\n+  // Don't traverse assignments to prototype properties.\n+  if (parent != null && parent.getType() == Token.ASSIGN) {\n+    Node lhs = parent.getFirstChild();\n+    Node rhs = lhs.getNext();\n+\n+    if (n == lhs) {\n+      // Always traverse the left side of the assignment. To handle\n+      // nested assignments properly (e.g., (a = this).property = c;),\n+      // assignLhsChild should not be overridden.\n+      if (assignLhsChild == null) {\n+        assignLhsChild = lhs;\n+      }\n+    } else {\n+      // Only traverse the right side if it's not an assignment to a prototype\n+      // property or subproperty.\n+      if (NodeUtil.isGet(lhs)) {\n+        if (lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n+        Node llhs = lhs.getFirstChild();\n+        if (llhs.getType() == Token.GETPROP &&\n+            llhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n         }\n       }\n     }\n-\n-    return true;\n   }\n \n+  return true;\n+}\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n       compiler.report(t.makeError(n, level, GLOBAL_THIS));",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}