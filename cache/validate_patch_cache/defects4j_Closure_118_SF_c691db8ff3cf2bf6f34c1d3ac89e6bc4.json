{
    "patch": "    private void handleObjectLit(NodeTraversal t, Node n) {\n      boolean hasStringChild = false;\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        // Maybe STRING, GET, SET\n        if (child.isQuotedString()) {\n          hasStringChild = true;\n          continue;\n        }\n\n        // We should never see a mix of numbers and strings.\n        String name = child.getString();\n        T type = typeSystem.getType(getScope(), n, name);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n          // TODO(user): It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n      }\n\n      // If there are only string children, then we shouldn't report an error.\n      if (hasStringChild && n.getChildCount() > 1) {\n        compiler.report(JSError.make(\n            t.getSourceName(), n,\n            CheckConformance.CONFORMANCE_VIOLATION,\n            Warnings.INVALID_MIXED_PROPERTIES));\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..9d243624 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -488,10 +488,15 @@ class DisambiguateProperties<T> implements CompilerPass {\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n+      boolean hasStringChild = false;\n       for (Node child = n.getFirstChild();\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+        if (child.isQuotedString()) {\n+          hasStringChild = true;\n+          continue;\n+        }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();\n@@ -510,6 +515,14 @@ class DisambiguateProperties<T> implements CompilerPass {\n           }\n         }\n       }\n+\n+      // If there are only string children, then we shouldn't report an error.\n+      if (hasStringChild && n.getChildCount() > 1) {\n+        compiler.report(JSError.make(\n+            t.getSourceName(), n,\n+            CheckConformance.CONFORMANCE_VIOLATION,\n+            Warnings.INVALID_MIXED_PROPERTIES));\n+      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}