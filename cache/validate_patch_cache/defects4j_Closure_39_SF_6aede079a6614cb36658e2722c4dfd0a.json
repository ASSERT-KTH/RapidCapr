{
    "patch": "/**\n   * Helper method that checks if an object type is recursive\n   * (i.e., it references itself).\n   *\n   * @param objectType the object type to check\n   * @param visited set of visited object types\n   * @return true if the object type is recursive, false otherwise\n   */\n  private boolean isRecursive(ObjectType objectType, Set<ObjectType> visited) {\n    if (visited.contains(objectType)) {\n      // Object type is recursive: it has already been visited\n      return true;\n    } else {\n      // Add object type to visited set and check its implicit prototype\n      visited.add(objectType);\n      if (objectType.getImplicitPrototype() != null) {\n        return isRecursive(objectType.getImplicitPrototype(), visited);\n      } else {\n        // Object type is not recursive\n        return false;\n      }\n    }\n  }\n\n  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n\n      // Check if this object type is recursive\n      boolean isThisTypeRecursive = isRecursive(this, new HashSet<>());\n\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n\n        Object propertyType = getPropertyType(property);\n        if (propertyType instanceof ObjectType) {\n          ObjectType objectType = (ObjectType) propertyType;\n          if (isThisTypeRecursive && objectType.equals(this)) {\n            sb.append(\"{...}\");\n          } else if (isRecursive(objectType, new HashSet<>())) {\n            sb.append(\"{...}\");\n          } else {\n            sb.append(objectType.toStringHelper(false));\n          }\n        } else {\n          sb.append(propertyType.toString());\n        }\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..c45b5b0f 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,8 +345,28 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n+/**\n+   * Helper method that checks if an object type is recursive\n+   * (i.e., it references itself).\n+   *\n+   * @param objectType the object type to check\n+   * @param visited set of visited object types\n+   * @return true if the object type is recursive, false otherwise\n+   */\n+  private boolean isRecursive(ObjectType objectType, Set<ObjectType> visited) {\n+    if (visited.contains(objectType)) {\n+      // Object type is recursive: it has already been visited\n+      return true;\n+    } else {\n+      // Add object type to visited set and check its implicit prototype\n+      visited.add(objectType);\n+      if (objectType.getImplicitPrototype() != null) {\n+        return isRecursive(objectType.getImplicitPrototype(), visited);\n+      } else {\n+        // Object type is not recursive\n+        return false;\n+      }\n+    }\n   }\n \n   @Override\n@@ -370,6 +390,10 @@ class PrototypeObjectType extends ObjectType {\n       sb.append(\"{\");\n \n       int i = 0;\n+\n+      // Check if this object type is recursive\n+      boolean isThisTypeRecursive = isRecursive(this, new HashSet<>());\n+\n       for (String property : propertyNames) {\n         if (i > 0) {\n           sb.append(\", \");\n@@ -377,23 +401,23 @@ class PrototypeObjectType extends ObjectType {\n \n         sb.append(property);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n \n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n+        Object propertyType = getPropertyType(property);\n+        if (propertyType instanceof ObjectType) {\n+          ObjectType objectType = (ObjectType) propertyType;\n+          if (isThisTypeRecursive && objectType.equals(this)) {\n+            sb.append(\"{...}\");\n+          } else if (isRecursive(objectType, new HashSet<>())) {\n+            sb.append(\"{...}\");\n+          } else {\n+            sb.append(objectType.toStringHelper(false));\n+          }\n+        } else {\n+          sb.append(propertyType.toString());\n         }\n-      }\n \n-      sb.append(\"}\");\n-\n-      prettyPrint = true;\n-      return sb.toString();\n-    } else {\n-      return \"{...}\";\n-    }\n-  }\n+        ++i;\n+        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}