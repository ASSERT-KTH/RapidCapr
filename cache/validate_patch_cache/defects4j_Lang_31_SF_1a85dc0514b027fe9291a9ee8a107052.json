{
    "patch": "import java.util.Arrays;\n\npublic class StringUtils {\n    \n    public static boolean containsAny(final CharSequence sequence, final char... searchCharacters) {\n        if (isEmpty(sequence) || ArrayUtils.isEmpty(searchCharacters)) {\n            return false;\n        }\n        final int length = sequence.length();\n        final int searchLength = searchCharacters.length;\n        if (searchLength == 1) {\n            final char searchChar = searchCharacters[0];\n            for (int i = 0; i < length; i++) {\n                if (sequence.charAt(i) == searchChar) {\n                    return true;\n                }\n            }\n        } else {\n            final int[] searchChars = toCodePoints(searchCharacters);\n            final int[] strChars = toCodePoints(sequence);\n            final int strCount = strChars.length;\n            final int searchCount = searchChars.length;\n            for (int i = 0; i < strCount; i++) {\n                final int ch = strChars[i];\n                boolean chFound = false;\n                for (int j = 0; j < searchCount && !chFound; j++) {\n                    chFound = searchChars[j] == ch;\n                }\n                if (chFound) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    \n    public static boolean isEmpty(CharSequence cs) {\n        return cs == null || cs.length() == 0;\n    }\n    \n    public static int[] toCodePoints(CharSequence sequence) {\n        if (isEmpty(sequence)) {\n            return new int[0];\n        }\n        final String str = sequence.toString();\n        final int strLen = str.length();\n        final int[] codePoints = new int[strLen];\n        int i = 0;\n        int j = 0;\n        while (i < strLen) {\n            final int cp = str.codePointAt(i);\n            codePoints[j++] = cp;\n            i += Character.charCount(cp);\n        }\n        if (j == strLen) {\n            return codePoints;\n        }\n        return Arrays.copyOf(codePoints, j);\n    }\n    \n}\n\nclass ArrayUtils {\n    public static boolean isEmpty(Object[] array) {\n        return array == null || array.length == 0;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..f839813c 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,73 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+import java.util.Arrays;\n+\n+public class StringUtils {\n+    \n+    public static boolean containsAny(final CharSequence sequence, final char... searchCharacters) {\n+        if (isEmpty(sequence) || ArrayUtils.isEmpty(searchCharacters)) {\n+            return false;\n+        }\n+        final int length = sequence.length();\n+        final int searchLength = searchCharacters.length;\n+        if (searchLength == 1) {\n+            final char searchChar = searchCharacters[0];\n+            for (int i = 0; i < length; i++) {\n+                if (sequence.charAt(i) == searchChar) {\n+                    return true;\n+                }\n+            }\n+        } else {\n+            final int[] searchChars = toCodePoints(searchCharacters);\n+            final int[] strChars = toCodePoints(sequence);\n+            final int strCount = strChars.length;\n+            final int searchCount = searchChars.length;\n+            for (int i = 0; i < strCount; i++) {\n+                final int ch = strChars[i];\n+                boolean chFound = false;\n+                for (int j = 0; j < searchCount && !chFound; j++) {\n+                    chFound = searchChars[j] == ch;\n+                }\n+                if (chFound) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+    \n+    public static boolean isEmpty(CharSequence cs) {\n+        return cs == null || cs.length() == 0;\n+    }\n+    \n+    public static int[] toCodePoints(CharSequence sequence) {\n+        if (isEmpty(sequence)) {\n+            return new int[0];\n+        }\n+        final String str = sequence.toString();\n+        final int strLen = str.length();\n+        final int[] codePoints = new int[strLen];\n+        int i = 0;\n+        int j = 0;\n+        while (i < strLen) {\n+            final int cp = str.codePointAt(i);\n+            codePoints[j++] = cp;\n+            i += Character.charCount(cp);\n+        }\n+        if (j == strLen) {\n+            return codePoints;\n+        }\n+        return Arrays.copyOf(codePoints, j);\n+    }\n+    \n+}\n+\n+class ArrayUtils {\n+    public static boolean isEmpty(Object[] array) {\n+        return array == null || array.length == 0;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}