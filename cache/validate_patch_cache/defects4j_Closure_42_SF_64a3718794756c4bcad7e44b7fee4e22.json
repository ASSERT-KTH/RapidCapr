{
    "patch": "import com.google.common.collect.ImmutableSet;\nimport org.mozilla.javascript.Token;\nimport org.mozilla.javascript.ast.*;\n\nimport java.util.Set;\n\npublic class TransformDispatcher implements TypeSafeDispatcher {\n\n    protected final ErrorReporter errorReporter;\n    protected final String sourceName;\n    private final Set<String> ALLOWED_DIRECTIVES =\n            ImmutableSet.of(\n                    \"use strict\", // excludes multiple directives\n                    \"use asm\");\n\n    public TransformDispatcher(ErrorReporter errorReporter, String sourceName) {\n        this.errorReporter = errorReporter;\n        this.sourceName = sourceName;\n    }\n\n    private boolean isDirective(Node n) {\n        if (n == null) return false;\n\n        int nType = n.getType();\n        return nType == Token.EXPR_RESULT &&\n                n.getFirstChild().isString() &&\n                ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n    }\n\n    @Override\n    public boolean traverse(Node node, Node parent) {\n        return true;\n    }\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n        switch (n.getType()) {\n            case Token.FUNCTION:\n                AstFunctionTransformer.transformFunction(errorReporter, sourceName, n, parent);\n                break;\n            case Token.LABEL:\n                AstLabelTransformer.transformLabel(errorReporter, sourceName, n);\n                break;\n            case Token.LET:\n            case Token.CONST:\n                errorReporter.error(\n                        \"ES6 Features are not supported\",\n                        sourceName,\n                        n.getLineno(), \"\", 0);\n                break;\n            case Token.VAR:\n                AstVarTransformer.transformVar(errorReporter, sourceName, n, parent);\n                break;\n            case Token.SETPROP:\n                AstSetterTransformer.transformSetter(errorReporter, sourceName, n, parent);\n                break;\n        }\n    }\n\n    @Override\n    public void visit(NodeTraversal t, Scope scope) {\n        // Do nothing\n    }\n\n    private Node newNode(int tokenType) {\n        return new Node(tokenType);\n    }\n\n    private Node newNode(int tokenType, Node child1) {\n        Node node = new Node(tokenType);\n        node.addChildToBack(child1);\n        return node;\n    }\n\n    private Node newNode(int tokenType, Node child1, Node child2) {\n        Node node = new Node(tokenType);\n        node.addChildToBack(child1);\n        node.addChildToBack(child2);\n        return node;\n    }\n\n    private Node newNode(int tokenType, Node child1, Node child2, Node child3) {\n        Node node = new Node(tokenType);\n        node.addChildToBack(child1);\n        node.addChildToBack(child2);\n        node.addChildToBack(child3);\n        return node;\n    }\n\n    private int transformTokenType(int tokenType) {\n        switch (tokenType) {\n            case Toke",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..64ae4359 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,107 +473,99 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+import com.google.common.collect.ImmutableSet;\n+import org.mozilla.javascript.Token;\n+import org.mozilla.javascript.ast.*;\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n+import java.util.Set;\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n+public class TransformDispatcher implements TypeSafeDispatcher {\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n+    protected final ErrorReporter errorReporter;\n+    protected final String sourceName;\n+    private final Set<String> ALLOWED_DIRECTIVES =\n+            ImmutableSet.of(\n+                    \"use strict\", // excludes multiple directives\n+                    \"use asm\");\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n+    public TransformDispatcher(ErrorReporter errorReporter, String sourceName) {\n+        this.errorReporter = errorReporter;\n+        this.sourceName = sourceName;\n     }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+    private boolean isDirective(Node n) {\n+        if (n == null) return false;\n+\n+        int nType = n.getType();\n+        return nType == Token.EXPR_RESULT &&\n+                n.getFirstChild().isString() &&\n+                ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n     }\n \n     @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+    public boolean traverse(Node node, Node parent) {\n+        return true;\n     }\n \n     @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+        switch (n.getType()) {\n+            case Token.FUNCTION:\n+                AstFunctionTransformer.transformFunction(errorReporter, sourceName, n, parent);\n+                break;\n+            case Token.LABEL:\n+                AstLabelTransformer.transformLabel(errorReporter, sourceName, n);\n+                break;\n+            case Token.LET:\n+            case Token.CONST:\n+                errorReporter.error(\n+                        \"ES6 Features are not supported\",\n+                        sourceName,\n+                        n.getLineno(), \"\", 0);\n+                break;\n+            case Token.VAR:\n+                AstVarTransformer.transformVar(errorReporter, sourceName, n, parent);\n+                break;\n+            case Token.SETPROP:\n+                AstSetterTransformer.transformSetter(errorReporter, sourceName, n, parent);\n+                break;\n+        }\n     }\n \n     @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+    public void visit(NodeTraversal t, Scope scope) {\n+        // Do nothing\n     }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+    private Node newNode(int tokenType) {\n+        return new Node(tokenType);\n     }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+    private Node newNode(int tokenType, Node child1) {\n+        Node node = new Node(tokenType);\n+        node.addChildToBack(child1);\n+        return node;\n     }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n+    private Node newNode(int tokenType, Node child1, Node child2) {\n+        Node node = new Node(tokenType);\n+        node.addChildToBack(child1);\n+        node.addChildToBack(child2);\n+        return node;\n+    }\n \n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+    private Node newNode(int tokenType, Node child1, Node child2, Node child3) {\n+        Node node = new Node(tokenType);\n+        node.addChildToBack(child1);\n+        node.addChildToBack(child2);\n+        node.addChildToBack(child3);\n+        return node;\n     }\n \n+    private int transformTokenType(int tokenType) {\n+        switch (tokenType) {\n+            case Toke\n+\n     @Override\n     Node processForLoop(ForLoop loopNode) {\n       Node node = newNode(",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}