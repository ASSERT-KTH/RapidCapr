{
    "patch": "public static String unescape(final String input) {\n    StringBuffer output = new StringBuffer();\n    for (int i = 0; i < input.length(); ) {\n        char ch = input.charAt(i++);\n        if (ch == '\\\\' && i < input.length()) {\n            ch = input.charAt(i++);\n            if (ch == 'n') {\n                output.append('\\n');\n            } else if (ch == 'r') {\n                output.append('\\r');\n            } else if (ch == 't') {\n                output.append('\\t');\n            } else if (ch == 'f') {\n                output.append('\\f');\n            } else if (ch == '\\\\') {\n                output.append('\\\\');\n            } else if (ch == '\\\"') {\n                output.append('\\\"');\n            } else if (ch == '\\'') {\n                output.append('\\'');\n            } else if (ch >= '0' && ch <= '7') {\n                int next = ch - '0';\n                if (i < input.length() && input.charAt(i) >= '0' && input.charAt(i) <= '7') {\n                    next = next * 8 + input.charAt(i++) - '0';\n                }\n                if (i < input.length() && input.charAt(i) >= '0' && input.charAt(i) <= '7') {\n                    next = next * 8 + input.charAt(i++) - '0';\n                }\n                output.append((char) next);\n                --i;\n            } else {\n                output.append(ch);\n            }\n        } else {\n            output.append(ch);\n        }\n    }\n    return output.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..26d9c3ba 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,45 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(final String input) {\n+    StringBuffer output = new StringBuffer();\n+    for (int i = 0; i < input.length(); ) {\n+        char ch = input.charAt(i++);\n+        if (ch == '\\\\' && i < input.length()) {\n+            ch = input.charAt(i++);\n+            if (ch == 'n') {\n+                output.append('\\n');\n+            } else if (ch == 'r') {\n+                output.append('\\r');\n+            } else if (ch == 't') {\n+                output.append('\\t');\n+            } else if (ch == 'f') {\n+                output.append('\\f');\n+            } else if (ch == '\\\\') {\n+                output.append('\\\\');\n+            } else if (ch == '\\\"') {\n+                output.append('\\\"');\n+            } else if (ch == '\\'') {\n+                output.append('\\'');\n+            } else if (ch >= '0' && ch <= '7') {\n+                int next = ch - '0';\n+                if (i < input.length() && input.charAt(i) >= '0' && input.charAt(i) <= '7') {\n+                    next = next * 8 + input.charAt(i++) - '0';\n+                }\n+                if (i < input.length() && input.charAt(i) >= '0' && input.charAt(i) <= '7') {\n+                    next = next * 8 + input.charAt(i++) - '0';\n+                }\n+                output.append((char) next);\n+                --i;\n+            } else {\n+                output.append(ch);\n+            }\n+        } else {\n+            output.append(ch);\n+        }\n+    }\n+    return output.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}