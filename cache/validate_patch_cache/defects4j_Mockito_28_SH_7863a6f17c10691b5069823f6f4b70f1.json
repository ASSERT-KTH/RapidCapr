{
    "patch": "            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n            if(candidate != null) {\n                if(field.getType().isInstance(candidate)) {\n                    try {\n                        field.setAccessible(true); \n                        field.set(fieldInstance, candidate);\n                    } catch(IllegalAccessException e) {\n                        throw new IllegalArgumentException(e); \n                    }\n                } else if (field.getType().isAssignableFrom(candidate.getClass())) {\n                    try {\n                        field.setAccessible(true);\n                        field.set(fieldInstance, candidate);\n                        injectMockCandidate(field.getType(), mocks, fieldInstance);\n                        return;\n                    } catch(IllegalAccessException e) {\n                        throw new IllegalArgumentException(e);\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..d828e25f5 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,29 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+            if(candidate != null) {\n+                if(field.getType().isInstance(candidate)) {\n+                    try {\n+                        field.setAccessible(true); \n+                        field.set(fieldInstance, candidate);\n+                    } catch(IllegalAccessException e) {\n+                        throw new IllegalArgumentException(e); \n+                    }\n+                } else if (field.getType().isAssignableFrom(candidate.getClass())) {\n+                    try {\n+                        field.setAccessible(true);\n+                        field.set(fieldInstance, candidate);\n+                        injectMockCandidate(field.getType(), mocks, fieldInstance);\n+                        return;\n+                    } catch(IllegalAccessException e) {\n+                        throw new IllegalArgumentException(e);\n+                    }\n+                }\n+            }\n         }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}