{
    "patch": "private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n      String functionName, HashMap<String, ObjectType> properties,\n      HashMap<String, ObjectType> currentProperties,\n      ObjectType interfaceType) {\n    ObjectType implicitProto = interfaceType.getImplicitPrototype();\n    if (implicitProto == null) {\n        // Return if implicit prototype is null\n        return;\n    }\n    Set<String> currentPropertyNames;\n    try {\n        currentPropertyNames = implicitProto.getOwnPropertyNames();\n    } catch (NullPointerException e) {\n        // Catch the NPE and return\n        return;\n    }\n    for (String name : currentPropertyNames) {\n        // Check if th",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex a0f95db9..25be4937 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1563,33 +1563,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * that have been visited\n    * @param interfaceType The super interface that is being visited\n    */\n-  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n+private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n       String functionName, HashMap<String, ObjectType> properties,\n       HashMap<String, ObjectType> currentProperties,\n       ObjectType interfaceType) {\n     ObjectType implicitProto = interfaceType.getImplicitPrototype();\n-    Set<String> currentPropertyNames;\n-      // This can be the case if interfaceType is proxy to a non-existent\n-      // object (which is a bad type annotation, but shouldn't crash).\n-      currentPropertyNames = implicitProto.getOwnPropertyNames();\n-    for (String name : currentPropertyNames) {\n-      ObjectType oType = properties.get(name);\n-      if (oType != null) {\n-        if (!interfaceType.getPropertyType(name).isEquivalentTo(\n-            oType.getPropertyType(name))) {\n-          compiler.report(\n-              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n-                  functionName, name, oType.toString(),\n-                  interfaceType.toString()));\n-        }\n-      }\n-      currentProperties.put(name, interfaceType);\n+    if (implicitProto == null) {\n+        // Return if implicit prototype is null\n+        return;\n     }\n-    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n-      checkInterfaceConflictProperties(t, n, functionName, properties,\n-          currentProperties, iType);\n+    Set<String> currentPropertyNames;\n+    try {\n+        currentPropertyNames = implicitProto.getOwnPropertyNames();\n+    } catch (NullPointerException e) {\n+        // Catch the NPE and return\n+        return;\n     }\n-  }\n+    for (String name : currentPropertyNames) {\n+        // Check if th\n \n   /**\n    * Visits a {@link Token#FUNCTION} node.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}