{
    "patch": "import java.util.regex.*;\n\npublic class StringEscapeUtils {\n  \n  private static final String[][] ESCAPE_JAVA;\n  static {\n    final int size = '\\'';\n    ESCAPE_JAVA = new String[size + 1][];\n    for (int i = 0; i <= size; i++) {\n      ESCAPE_JAVA[i] = new String[] {String.valueOf((char) i), String.valueOf(Character.toChars(i))};\n    }\n    ESCAPE_JAVA['\\''] = new String[] {\"\\'\", \"\\\\\\'\"};\n    ESCAPE_JAVA['\\\\'] = new String[] {\"\\\\\", \"\\\\\\\\\"};\n  }\n  \n  public static Pattern compile(String regex) {\n    boolean success = true;\n    Pattern inputPattern;\n    try {\n      inputPattern = Pattern.compile(regex);\n    } catch (PatternSyntaxException pse) {\n      success = false;\n    }\n\n    assertTrue(\"One or more errors detected\", success);\n    return inputPattern;\n  }\n\n  public static final String escapeJava(String input) {\n    final int sz = input.length();\n\n    StringBuilder output = new StringBuilder(2 * sz);\n    for (int i = 0; i < sz; i++) {\n      String ch = ESCAPE_JAVA[input.charAt(i)];\n      if (ch == null) {\n        output.append(input.charAt(i));\n      } else {\n        output.append(ch[1]);\n      }\n    }\n\n    return output.toString();\n  }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..c0cda986 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,51 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+import java.util.regex.*;\n+\n+public class StringEscapeUtils {\n+  \n+  private static final String[][] ESCAPE_JAVA;\n+  static {\n+    final int size = '\\'';\n+    ESCAPE_JAVA = new String[size + 1][];\n+    for (int i = 0; i <= size; i++) {\n+      ESCAPE_JAVA[i] = new String[] {String.valueOf((char) i), String.valueOf(Character.toChars(i))};\n+    }\n+    ESCAPE_JAVA['\\''] = new String[] {\"\\'\", \"\\\\\\'\"};\n+    ESCAPE_JAVA['\\\\'] = new String[] {\"\\\\\", \"\\\\\\\\\"};\n+  }\n+  \n+  public static Pattern compile(String regex) {\n+    boolean success = true;\n+    Pattern inputPattern;\n+    try {\n+      inputPattern = Pattern.compile(regex);\n+    } catch (PatternSyntaxException pse) {\n+      success = false;\n+    }\n+\n+    assertTrue(\"One or more errors detected\", success);\n+    return inputPattern;\n+  }\n+\n+  public static final String escapeJava(String input) {\n+    final int sz = input.length();\n+\n+    StringBuilder output = new StringBuilder(2 * sz);\n+    for (int i = 0; i < sz; i++) {\n+      String ch = ESCAPE_JAVA[input.charAt(i)];\n+      if (ch == null) {\n+        output.append(input.charAt(i));\n+      } else {\n+        output.append(ch[1]);\n+      }\n+    }\n+\n+    return output.toString();\n+  }\n+\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}