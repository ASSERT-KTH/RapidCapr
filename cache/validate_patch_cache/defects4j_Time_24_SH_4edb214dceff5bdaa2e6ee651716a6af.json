{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        millis = savedFields[i].set(millis, resetFields);\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    // alter base year for parsing if first field is month or day\n    DateTimeField first = savedFields[0].iField;\n    if (first.getType() == DateTimeFieldType.monthOfYear() || first.getType() == DateTimeFieldType.dayOfMonth()) {\n        saveField(DateTimeFieldType.year(), iDefaultYear);\n        return computeMillis(resetFields, text);\n    } else {\n        int year = iDefaultYear;\n        for (int i = 0; i < count; i++) {\n            if (savedFields[i].iField.getType() == DateTimeFieldType.year()) {\n                year = savedFields[i].iValue;\n                break;\n            }\n        }\n        if (year != iDefaultYear) {\n            DurationField years = DurationFieldType.years().getField(iChrono);\n            millis = iChrono.year().set(millis, year);\n            // remove year field from savedFields\n            int j = 0;\n            for (int i = 0; i < count; i++) {\n                if (savedFields[i].iField.getType() != DateTimeFieldType.year()) {\n                    savedFields[j++] = savedFields[i];\n                }\n            }\n            int newCount = j;\n            if (newCount > 0) {\n                sort(savedFields, newCount);\n                // adjust base year for remaining fields\n                DurationField months = DurationFieldType.months().getField(iChrono);\n                DurationField days = DurationFieldType.days().getField(iChrono);\n                DurationField firstField = savedFields[0].iField.getDurationField();\n                if (compareReverse(firstField, months) >= 0 && compareReverse(firstField, days) <= 0) {\n                    saveField(DateTimeFieldType.year(), iDefaultYear);\n                    return computeMillis(resetFields, text);\n                }\n                for (int i = 0; i < newCount; i++) {\n                    millis = savedFields[i].set(millis, resetFields);\n                }\n            } else {\n                // no more fields to parse\n                return millis;\n            }\n        } else {\n            throw e;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..902460bf 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,60 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        millis = savedFields[i].set(millis, resetFields);\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    // alter base year for parsing if first field is month or day\n+    DateTimeField first = savedFields[0].iField;\n+    if (first.getType() == DateTimeFieldType.monthOfYear() || first.getType() == DateTimeFieldType.dayOfMonth()) {\n+        saveField(DateTimeFieldType.year(), iDefaultYear);\n+        return computeMillis(resetFields, text);\n+    } else {\n+        int year = iDefaultYear;\n+        for (int i = 0; i < count; i++) {\n+            if (savedFields[i].iField.getType() == DateTimeFieldType.year()) {\n+                year = savedFields[i].iValue;\n+                break;\n+            }\n+        }\n+        if (year != iDefaultYear) {\n+            DurationField years = DurationFieldType.years().getField(iChrono);\n+            millis = iChrono.year().set(millis, year);\n+            // remove year field from savedFields\n+            int j = 0;\n+            for (int i = 0; i < count; i++) {\n+                if (savedFields[i].iField.getType() != DateTimeFieldType.year()) {\n+                    savedFields[j++] = savedFields[i];\n+                }\n+            }\n+            int newCount = j;\n+            if (newCount > 0) {\n+                sort(savedFields, newCount);\n+                // adjust base year for remaining fields\n+                DurationField months = DurationFieldType.months().getField(iChrono);\n+                DurationField days = DurationFieldType.days().getField(iChrono);\n+                DurationField firstField = savedFields[0].iField.getDurationField();\n+                if (compareReverse(firstField, months) >= 0 && compareReverse(firstField, days) <= 0) {\n+                    saveField(DateTimeFieldType.year(), iDefaultYear);\n+                    return computeMillis(resetFields, text);\n+                }\n+                for (int i = 0; i < newCount; i++) {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                }\n+            } else {\n+                // no more fields to parse\n+                return millis;\n+            }\n+        } else {\n+            throw e;\n+        }\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>",
    "test_result": "FAIL"
}