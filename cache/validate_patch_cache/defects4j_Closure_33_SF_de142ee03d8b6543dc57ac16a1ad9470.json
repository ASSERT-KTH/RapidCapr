{
    "patch": "    // We only want to match constraints on anonymous types.\n    if (!constraintObj.isNominalType() && !constraintObj.isFunctionType()) {\n      return;\n    }\n\n    // Handle the case where the constraint object is a record type.\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          // If the property is not declared, we need to define it.\n          if (!hasProperty(prop)) {\n            // To determine the inferred type of the property, we want to take the least\n            // supertype of the property type and VOID_TYPE. If the property type is already\n            // VOID_TYPE, there is no need to redefine the property.\n            if (!propType.isVoidType()) {\n              typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                      .getLeastSupertype(propType);\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..22657f68 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,30 +552,24 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n+    // We only want to match constraints on anonymous types.\n+    if (!constraintObj.isNominalType() && !constraintObj.isFunctionType()) {\n+      return;\n+    }\n \n     // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n     if (constraintObj.isRecordType()) {\n       for (String prop : constraintObj.getOwnPropertyNames()) {\n         JSType propType = constraintObj.getPropertyType(prop);\n         if (!isPropertyTypeDeclared(prop)) {\n           JSType typeToInfer = propType;\n+          // If the property is not declared, we need to define it.\n           if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n-    }\n-  }\n+            // To determine the inferred type of the property, we want to take the least\n+            // supertype of the property type and VOID_TYPE. If the property type is already\n+            // VOID_TYPE, there is no need to redefine the property.\n+            if (!propType.isVoidType()) {\n+              typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+                      .getLeastSupertype(propType);\n+            }\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}