{
    "patch": "        if (n.isScript() && !n.isSyntheticBlock()) {\n          // Handle any emit-synthesized try-finally blocks\n          Node functionNode = n.getParent().isFunction() ? n.getParent() : null;\n          if (functionNode != null && NodeUtil.getFunctionBody(functionNode).isTry()) {\n            Node tryBlock = NodeUtil.getTryBlock(NodeUtil.getFunctionBody(functionNode));\n            Node prev = tryBlock.getPrevious();\n            Node finallyBlock = tryBlock.getNext();\n            if (prev != null && prev.isLabel() && prev.hasChildren() && prev.getFirstChild().getString().equals(\"$finally\")) {\n              Node catchNode = n.getNext();\n              if (catchNode != null && catchNode.isCatch()) {\n                if (apply(catchNode.getLastChild())) {\n                  return true;\n                }\n              } else {\n                if (apply(n.getNext())) {\n                  return true;\n                }\n              }\n              if (apply(catchNode.getNext())) {\n                return true;\n              } else if (finallyBlock != null && !finallyBlock.isEmpty()) {\n                return apply(finallyBlock);\n              }\n              return false;\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..e5c42ca9 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,33 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+        if (n.isScript() && !n.isSyntheticBlock()) {\n+          // Handle any emit-synthesized try-finally blocks\n+          Node functionNode = n.getParent().isFunction() ? n.getParent() : null;\n+          if (functionNode != null && NodeUtil.getFunctionBody(functionNode).isTry()) {\n+            Node tryBlock = NodeUtil.getTryBlock(NodeUtil.getFunctionBody(functionNode));\n+            Node prev = tryBlock.getPrevious();\n+            Node finallyBlock = tryBlock.getNext();\n+            if (prev != null && prev.isLabel() && prev.hasChildren() && prev.getFirstChild().getString().equals(\"$finally\")) {\n+              Node catchNode = n.getNext();\n+              if (catchNode != null && catchNode.isCatch()) {\n+                if (apply(catchNode.getLastChild())) {\n+                  return true;\n+                }\n+              } else {\n+                if (apply(n.getNext())) {\n+                  return true;\n+                }\n+              }\n+              if (apply(catchNode.getNext())) {\n+                return true;\n+              } else if (finallyBlock != null && !finallyBlock.isEmpty()) {\n+                return apply(finallyBlock);\n+              }\n+              return false;\n+            }\n+          }\n+        }\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}