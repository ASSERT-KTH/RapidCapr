{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    int numArgs = call.getChildCount() - 1; // number of arguments provided\n\n    // Check if there are too few arguments\n    int minArgs = functionType.getMinArguments();\n    if (numArgs < minArgs) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs),\n            \"at least \" + String.valueOf(minArgs) + \" argument(s)\");\n        return;\n    }\n\n    // Check if there are too many arguments\n    int maxArgs = functionType.getMaxArguments();\n    if (numArgs > maxArgs && maxArgs != Integer.MAX_VALUE) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs),\n            \"at most \" + String.valueOf(maxArgs) + \" argument(s)\");\n        return;\n    }\n\n    StringBuilder expectedArgs = new StringBuilder();\n    if (minArgs == maxArgs) {\n        expectedArgs.append(minArgs);\n    } else {\n        if (minArgs != 0) {\n            expectedArgs.append(\"at least \").append(minArgs);\n        }\n        if (maxArgs != Integer.MAX_VALUE) {\n            if (expectedArgs.length() != 0) {\n                expectedArgs.append(\" and \");\n            }\n            expectedArgs.append(\"no more than \").append(maxArgs);\n        }\n    }\n    validator.expectFunctionCall(\n        t, functionType, call, getJSType(call), expectedArgs.toString());\n\n    // Check if the arguments match the parameters\n    while (arguments.hasNext() && parameters.hasNext()) {\n        parameter = parameters.next();\n        argument = arguments.next();\n        ordinal++;\n\n        validator.expectArgumentMatchesParameter(\n            t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..621fa8c4 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,8 +1396,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n@@ -1405,29 +1404,55 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n+    int numArgs = call.getChildCount() - 1; // number of arguments provided\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+    // Check if there are too few arguments\n+    int minArgs = functionType.getMinArguments();\n+    if (numArgs < minArgs) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(numArgs),\n+            \"at least \" + String.valueOf(minArgs) + \" argument(s)\");\n+        return;\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n+    // Check if there are too many arguments\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    if (numArgs > maxArgs && maxArgs != Integer.MAX_VALUE) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(numArgs),\n+            \"at most \" + String.valueOf(maxArgs) + \" argument(s)\");\n+        return;\n     }\n-  }\n+\n+    StringBuilder expectedArgs = new StringBuilder();\n+    if (minArgs == maxArgs) {\n+        expectedArgs.append(minArgs);\n+    } else {\n+        if (minArgs != 0) {\n+            expectedArgs.append(\"at least \").append(minArgs);\n+        }\n+        if (maxArgs != Integer.MAX_VALUE) {\n+            if (expectedArgs.length() != 0) {\n+                expectedArgs.append(\" and \");\n+            }\n+            expectedArgs.append(\"no more than \").append(maxArgs);\n+        }\n+    }\n+    validator.expectFunctionCall(\n+        t, functionType, call, getJSType(call), expectedArgs.toString());\n+\n+    // Check if the arguments match the parameters\n+    while (arguments.hasNext() && parameters.hasNext()) {\n+        parameter = parameters.next();\n+        argument = arguments.next();\n+        ordinal++;\n+\n+        validator.expectArgumentMatchesParameter(\n+            t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n+    }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}