{
    "patch": "void tryMinimizeExits(Node n, int exitType, String labelName) {\n    if (n == null) {\n      return;\n    }\n\n    switch (n.getToken()) {\n      case BLOCK:\n        boolean changed = tryMinimizeBlockExits(n, exitType, labelName);\n        if (changed) {\n          tryMinimizeExits(n, exitType, labelName);\n        }\n        break;\n\n      case IF:\n        for (Node child : n.children()) {\n          if (child.getToken() == Token.BLOCK) {\n            tryMinimizeExits(child, exitType, labelName);\n            if (child.getNext() != null && child.getNext().getToken() == Token.BLOCK) {\n              tryMinimizeExits(child.getNext(), exitType, labelName);\n              tryMinimizeIfBlockExits(child, child.getNext(), exitType, labelName);\n            }\n          }\n        }\n        break;\n\n      case SWITCH:\n        tryMinimizeSwitchExits(n, exitType, labelName);\n        break;\n\n      case TRY:\n        tryMinimizeExits(n.getFirstChild().getNext(), exitType, labelName);\n        if (NodeUtil.hasCatchHandler(n)) {\n          tryMinimizeExits(NodeUtil.getCatchBlock(n).getFirstChild().getLastChild(), exitType,\n              labelName);\n        }\n        if (NodeUtil.hasFinally(n)) {\n          tryMinimizeExits(n.getLastChild(), exitType, labelName);\n        }\n        break;\n\n      case DO:\n      case FOR:\n      case WHILE:\n        tryMinimizeExits(n.getFirstChild().getNext(), exitType, labelName);\n        break;\n\n      case LABEL:\n        tryMinimizeExits(n.getLastChild(), exitType, labelName);\n        break;\n\n      case SCRIPT:\n        tryMinimizeBlockExits(n, exitType, labelName);\n        break;\n\n      default:\n        break;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..b1ebc61b 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -103,100 +103,62 @@ class MinimizeExitPoints\n    *   null otherwise.\n    * @nullable labelName non-null only for breaks within labels.\n    */\n-  void tryMinimizeExits(Node n, int exitType, String labelName) {\n-\n-    // Just an 'exit'.\n-    if (matchingExitNode(n, exitType, labelName)) {\n-      NodeUtil.removeChild(n.getParent(), n);\n-      compiler.reportCodeChange();\n-      return;\n-    }\n-\n-    // Just an 'if'.\n-    if (n.isIf()) {\n-      Node ifBlock = n.getFirstChild().getNext();\n-      tryMinimizeExits(ifBlock, exitType, labelName);\n-      Node elseBlock = ifBlock.getNext();\n-      if (elseBlock != null) {\n-        tryMinimizeExits(elseBlock, exitType, labelName);\n-      }\n+void tryMinimizeExits(Node n, int exitType, String labelName) {\n+    if (n == null) {\n       return;\n     }\n \n-    // Just a 'try/catch/finally'.\n-    if (n.isTry()) {\n-      Node tryBlock = n.getFirstChild();\n-      tryMinimizeExits(tryBlock, exitType, labelName);\n-      Node allCatchNodes = NodeUtil.getCatchBlock(n);\n-      if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n-        Preconditions.checkState(allCatchNodes.hasOneChild());\n-        Node catchNode = allCatchNodes.getFirstChild();\n-        Node catchCodeBlock = catchNode.getLastChild();\n-        tryMinimizeExits(catchCodeBlock, exitType, labelName);\n-      }\n-      /* Don't try to minimize the exits of finally blocks, as this\n-       * can cause problems if it changes the completion type of the finally\n-       * block. See ECMA 262 Sections 8.9 & 12.14\n-       */\n-      if (NodeUtil.hasFinally(n)) {\n-        Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n-      }\n-    }\n-\n-    // Just a 'label'.\n-    if (n.isLabel()) {\n-      Node labelBlock = n.getLastChild();\n-      tryMinimizeExits(labelBlock, exitType, labelName);\n-    }\n-\n-    // TODO(johnlenz): The last case of SWITCH statement?\n+    switch (n.getToken()) {\n+      case BLOCK:\n+        boolean changed = tryMinimizeBlockExits(n, exitType, labelName);\n+        if (changed) {\n+          tryMinimizeExits(n, exitType, labelName);\n+        }\n+        break;\n \n-    // The rest assumes a block with at least one child, bail on anything else.\n-    if (!n.isBlock() || n.getLastChild() == null) {\n-      return;\n-    }\n+      case IF:\n+        for (Node child : n.children()) {\n+          if (child.getToken() == Token.BLOCK) {\n+            tryMinimizeExits(child, exitType, labelName);\n+            if (child.getNext() != null && child.getNext().getToken() == Token.BLOCK) {\n+              tryMinimizeExits(child.getNext(), exitType, labelName);\n+              tryMinimizeIfBlockExits(child, child.getNext(), exitType, labelName);\n+            }\n+          }\n+        }\n+        break;\n \n-    // Multiple if-exits can be converted in a single pass.\n-    // Convert \"if (blah) break;  if (blah2) break; other_stmt;\" to\n-    // become \"if (blah); else { if (blah2); else { other_stmt; } }\"\n-    // which will get converted to \"if (!blah && !blah2) { other_stmt; }\".\n-    for (Node c : n.children()) {\n+      case SWITCH:\n+        tryMinimizeSwitchExits(n, exitType, labelName);\n+        break;\n \n-      // An 'if' block to process below.\n-      if (c.isIf()) {\n-        Node ifTree = c;\n-        Node trueBlock, falseBlock;\n+      case TRY:\n+        tryMinimizeExits(n.getFirstChild().getNext(), exitType, labelName);\n+        if (NodeUtil.hasCatchHandler(n)) {\n+          tryMinimizeExits(NodeUtil.getCatchBlock(n).getFirstChild().getLastChild(), exitType,\n+              labelName);\n+        }\n+        if (NodeUtil.hasFinally(n)) {\n+          tryMinimizeExits(n.getLastChild(), exitType, labelName);\n+        }\n+        break;\n \n-        // First, the true condition block.\n-        trueBlock = ifTree.getFirstChild().getNext();\n-        falseBlock = trueBlock.getNext();\n-        tryMinimizeIfBlockExits(trueBlock, falseBlock,\n-            ifTree, exitType, labelName);\n+      case DO:\n+      case FOR:\n+      case WHILE:\n+        tryMinimizeExits(n.getFirstChild().getNext(), exitType, labelName);\n+        break;\n \n-        // Now the else block.\n-        // The if blocks may have changed, get them again.\n-        trueBlock = ifTree.getFirstChild().getNext();\n-        falseBlock = trueBlock.getNext();\n-        if (falseBlock != null) {\n-          tryMinimizeIfBlockExits(falseBlock, trueBlock,\n-              ifTree, exitType, labelName);\n-        }\n-      }\n+      case LABEL:\n+        tryMinimizeExits(n.getLastChild(), exitType, labelName);\n+        break;\n \n-      if (c == n.getLastChild()) {\n+      case SCRIPT:\n+        tryMinimizeBlockExits(n, exitType, labelName);\n         break;\n-      }\n-    }\n \n-    // Now try to minimize the exits of the last child, if it is removed\n-    // look at what has become the last child.\n-    for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {\n-      tryMinimizeExits(c, exitType, labelName);\n-      // If the node is still the last child, we are done.\n-      if (c == n.getLastChild()) {\n+      default:\n         break;\n-      }\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}