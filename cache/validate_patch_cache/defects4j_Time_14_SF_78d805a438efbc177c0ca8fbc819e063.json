{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    if (partial.size() == 1) {\n        int newValue = partial.getFieldType(0).getField(iChronology).addWrapField(values[0], valueToAdd);\n        return new int[] { newValue };\n    }\n    \n    if (DateTimeUtils.isContiguous(partial)) {\n        boolean changed = false;\n\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            DurationFieldType fieldType = partial.getFieldType(i);\n            int curValue = values[i];\n            if (curValue == fieldType.getField(iChronology).getMaximumValue() && valueToAdd > 0) {\n                curValue = fieldType.getField(iChronology).getMinimumValue();\n\n                // need to avoid overflowing MONTH_OF_YEAR\n                if (fieldType == DateTimeFieldType.monthOfYear()) {\n                    int year = DateTimeFieldType.year().getField(iChronology).get(instant);\n                    int month = curValue;\n                    if (valueToAdd > 12) {\n                        int yearsToAdd = valueToAdd / 12;\n                        year += yearsToAdd;\n                        valueToAdd -= yearsToAdd * 12;\n                    }\n                    while (valueToAdd > 0) {\n                        int daysInMonth = iChronology.dayOfMonth().getMaximumValue(year, month);\n                        int day = Math.min(curValue, daysInMonth);\n                        curValue = day;\n                        valueToAdd--;\n                        month++;\n                        if (month > 12) {\n                            month = 1;\n                            year++;\n                        }\n                    }\n                } else {\n                    curValue = fieldType.getField(iChronology).add(curValue, valueToAdd);\n                }\n                changed = true;\n            } else if (curValue == fieldType.getField(iChronology).getMinimumValue() && valueToAdd < 0) {\n                curValue = fieldType.getField(iChronology).getMaximumValue();\n\n                // need to avoid underflowing MONTH_OF_YEAR\n                if (fieldType == DateTimeFieldType.monthOfYear()) {\n                    int year = DateTimeFieldType.year().getField(iChronology).get(instant);\n                    int month = curValue;\n                    if (valueToAdd < -12) {\n                        int yearsToAdd = -valueToAdd / 12;\n                        year -= yearsToAdd;\n                        valueToAdd += yearsToAdd * 12;\n                    }\n                    while (valueToAdd < 0) {\n                        int daysInMonth = iChronology.dayOfMonth().getMaximumValue(year, month);\n                        int day = Math.min(curValue, daysInMonth);\n                        curValue = day;\n                        valueToAdd++;\n                        month--;\n                        if (month < 1) {\n                            month = 12;\n                            year--;\n                        }\n                    }\n                } else {\n                    curValue = fieldType.getField(iChronology).add(curValue, valueToAdd);\n                }\n                changed = true;\n            } else {\n                curValue = fieldType.getField(iChronology).add(curValue, valueToAdd);    \n            }\n            values[i] = curValue;\n        }\n        if (changed) {\n            long instant = 0L;\n            for (int i = 0; i < partial.size(); i++) {\n                DateTimeField field = partial.getFieldType(i).getField(iChronology);\n                instant = field.set(instant, values[i]);\n            }\n            return iChronology.get(partial, instant);\n        }\n    }\n    return super.add(partial, fieldIndex, values, valueToAdd);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..e8bddfc8 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,94 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    if (partial.size() == 1) {\n+        int newValue = partial.getFieldType(0).getField(iChronology).addWrapField(values[0], valueToAdd);\n+        return new int[] { newValue };\n+    }\n+    \n+    if (DateTimeUtils.isContiguous(partial)) {\n+        boolean changed = false;\n+\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            DurationFieldType fieldType = partial.getFieldType(i);\n+            int curValue = values[i];\n+            if (curValue == fieldType.getField(iChronology).getMaximumValue() && valueToAdd > 0) {\n+                curValue = fieldType.getField(iChronology).getMinimumValue();\n+\n+                // need to avoid overflowing MONTH_OF_YEAR\n+                if (fieldType == DateTimeFieldType.monthOfYear()) {\n+                    int year = DateTimeFieldType.year().getField(iChronology).get(instant);\n+                    int month = curValue;\n+                    if (valueToAdd > 12) {\n+                        int yearsToAdd = valueToAdd / 12;\n+                        year += yearsToAdd;\n+                        valueToAdd -= yearsToAdd * 12;\n+                    }\n+                    while (valueToAdd > 0) {\n+                        int daysInMonth = iChronology.dayOfMonth().getMaximumValue(year, month);\n+                        int day = Math.min(curValue, daysInMonth);\n+                        curValue = day;\n+                        valueToAdd--;\n+                        month++;\n+                        if (month > 12) {\n+                            month = 1;\n+                            year++;\n+                        }\n+                    }\n+                } else {\n+                    curValue = fieldType.getField(iChronology).add(curValue, valueToAdd);\n+                }\n+                changed = true;\n+            } else if (curValue == fieldType.getField(iChronology).getMinimumValue() && valueToAdd < 0) {\n+                curValue = fieldType.getField(iChronology).getMaximumValue();\n+\n+                // need to avoid underflowing MONTH_OF_YEAR\n+                if (fieldType == DateTimeFieldType.monthOfYear()) {\n+                    int year = DateTimeFieldType.year().getField(iChronology).get(instant);\n+                    int month = curValue;\n+                    if (valueToAdd < -12) {\n+                        int yearsToAdd = -valueToAdd / 12;\n+                        year -= yearsToAdd;\n+                        valueToAdd += yearsToAdd * 12;\n+                    }\n+                    while (valueToAdd < 0) {\n+                        int daysInMonth = iChronology.dayOfMonth().getMaximumValue(year, month);\n+                        int day = Math.min(curValue, daysInMonth);\n+                        curValue = day;\n+                        valueToAdd++;\n+                        month--;\n+                        if (month < 1) {\n+                            month = 12;\n+                            year--;\n+                        }\n+                    }\n+                } else {\n+                    curValue = fieldType.getField(iChronology).add(curValue, valueToAdd);\n+                }\n+                changed = true;\n+            } else {\n+                curValue = fieldType.getField(iChronology).add(curValue, valueToAdd);    \n+            }\n+            values[i] = curValue;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n+        if (changed) {\n             long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            for (int i = 0; i < partial.size(); i++) {\n+                DateTimeField field = partial.getFieldType(i).getField(iChronology);\n+                instant = field.set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n             return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n     }\n+    return super.add(partial, fieldIndex, values, valueToAdd);\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}