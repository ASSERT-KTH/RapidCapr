{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstFirstChild();\n      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n        Node grandchild = maybeExpr.getFirstChild();\n        int gctype = grandchild.getType();\n        if (gctype == Token.HOOK) {\n          return false;\n        }\n        if (gctype == Token.AND || gctype == Token.OR ||\n            gctype == Token.COALESCING_OR) {\n          Node last = grandchild.getLastChild();\n          while (last.getType() == gctype) {\n            last = last.getLastChild();\n          }\n          return last.getType() != Token.FUNCTION;\n        }\n      }\n      return NodeUtil.isExpressionNode(maybeExpr);\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..6166a04d 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,30 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstFirstChild();\n+      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+        Node grandchild = maybeExpr.getFirstChild();\n+        int gctype = grandchild.getType();\n+        if (gctype == Token.HOOK) {\n+          return false;\n+        }\n+        if (gctype == Token.AND || gctype == Token.OR ||\n+            gctype == Token.COALESCING_OR) {\n+          Node last = grandchild.getLastChild();\n+          while (last.getType() == gctype) {\n+            last = last.getLastChild();\n+          }\n+          return last.getType() != Token.FUNCTION;\n+        }\n       }\n+      return NodeUtil.isExpressionNode(maybeExpr);\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}