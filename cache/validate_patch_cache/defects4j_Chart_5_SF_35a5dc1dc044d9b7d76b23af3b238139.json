{
    "patch": "            // existing XYDataItem with same x value and duplicates not allowed\n            XYDataItem existing = (XYDataItem) this.data.get(index);\n            if (!existing.getY().equals(y)) {\n                // only update Y value and fire event if it has changed\n                existing.setY(y);\n                fireSeriesChanged();\n            }\n            try {\n                // clone existing XYDataItem to return overwritten value\n                overwritten = (XYDataItem) existing.clone();\n            } catch (CloneNotSupportedException e) {\n                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n            }\n        } else {\n            // new or duplicate XYDataItem\n            if (this.allowDuplicateXValues || index < 0) {\n                // Add new XYDataItem without checking for index\n                this.data.add(new XYDataItem(x, y));\n                if (getItemCount() > this.maximumItemCount) {\n                    this.data.remove(0);\n                }\n                fireSeriesChanged();\n            } else {\n                // Handle insertion of new XYDataItem at -index - 1. Insert it at end otherwise.\n                int insertionIndex = this.autoSort ? -index - 1 : this.data.size();\n                this.data.add(insertionIndex, new XYDataItem(x, y));\n                if (getItemCount() > this.maximumItemCount) {\n                    this.data.remove(0);\n                }\n                fireSeriesChanged();",
    "patch_diff": "diff --git a/source/org/jfree/data/xy/XYSeries.java b/source/org/jfree/data/xy/XYSeries.java\nindex 0b37e6e..6cc30e6 100644\n--- a/source/org/jfree/data/xy/XYSeries.java\n+++ b/source/org/jfree/data/xy/XYSeries.java\n@@ -537,43 +537,36 @@ public class XYSeries extends Series implements Cloneable, Serializable {\n      * @return A copy of the overwritten data item, or <code>null</code> if no\n      *         item was overwritten.\n      */\n-    public XYDataItem addOrUpdate(Number x, Number y) {\n-        if (x == null) {\n-            throw new IllegalArgumentException(\"Null 'x' argument.\");\n-        }\n-\n-        // if we get to here, we know that duplicate X values are not permitted\n-        XYDataItem overwritten = null;\n-        int index = indexOf(x);\n-        if (index >= 0 && !this.allowDuplicateXValues) {\n-            XYDataItem existing = (XYDataItem) this.data.get(index);\n-            try {\n-                overwritten = (XYDataItem) existing.clone();\n-            }\n-            catch (CloneNotSupportedException e) {\n-                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n-            }\n-            existing.setY(y);\n-        }\n-        else {\n-            // if the series is sorted, the negative index is a result from\n-            // Collections.binarySearch() and tells us where to insert the\n-            // new item...otherwise it will be just -1 and we should just\n-            // append the value to the list...\n-            if (this.autoSort) {\n-                this.data.add(-index - 1, new XYDataItem(x, y));\n-            }\n-            else {\n-                this.data.add(new XYDataItem(x, y));\n-            }\n-            // check if this addition will exceed the maximum item count...\n-            if (getItemCount() > this.maximumItemCount) {\n-                this.data.remove(0);\n-            }\n-        }\n-        fireSeriesChanged();\n-        return overwritten;\n-    }\n+            // existing XYDataItem with same x value and duplicates not allowed\n+            XYDataItem existing = (XYDataItem) this.data.get(index);\n+            if (!existing.getY().equals(y)) {\n+                // only update Y value and fire event if it has changed\n+                existing.setY(y);\n+                fireSeriesChanged();\n+            }\n+            try {\n+                // clone existing XYDataItem to return overwritten value\n+                overwritten = (XYDataItem) existing.clone();\n+            } catch (CloneNotSupportedException e) {\n+                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n+            }\n+        } else {\n+            // new or duplicate XYDataItem\n+            if (this.allowDuplicateXValues || index < 0) {\n+                // Add new XYDataItem without checking for index\n+                this.data.add(new XYDataItem(x, y));\n+                if (getItemCount() > this.maximumItemCount) {\n+                    this.data.remove(0);\n+                }\n+                fireSeriesChanged();\n+            } else {\n+                // Handle insertion of new XYDataItem at -index - 1. Insert it at end otherwise.\n+                int insertionIndex = this.autoSort ? -index - 1 : this.data.size();\n+                this.data.add(insertionIndex, new XYDataItem(x, y));\n+                if (getItemCount() > this.maximumItemCount) {\n+                    this.data.remove(0);\n+                }\n+                fireSeriesChanged();\n \n     /**\n      * Returns the index of the item with the specified x-value, or a negative",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}