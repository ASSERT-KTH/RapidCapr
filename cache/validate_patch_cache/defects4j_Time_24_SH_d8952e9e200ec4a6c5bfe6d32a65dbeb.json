{
    "patch": "        SavedField lastRepeated = null;\n        for (int i = 0; i < count; i++) {\n            SavedField savedField = savedFields[i];\n            DurationField durationField = savedField.iField.getDurationField();\n            if (durationField != null && durationField.isPrecise()) {\n                long difference = savedField.iDuration;\n                if (difference == 0) {\n                    continue;\n                }\n                long subtract = (difference * savedField.iScalar) - difference;\n                if (lastRepeated != null && savedField.iField.getType() == lastRepeated.iField.getType()) {\n                    millis = lastRepeated.set(millis, resetFields);\n                    if (!resetFields) {\n                        lastRepeated = null;\n                    }\n                }\n                if (subtract <= millis) {  // add support for negative millis by swapping order\n                    millis -= subtract;\n                } else {\n                    if (resetFields) {\n                        throw new IllegalFieldValueException(\n                                savedField.iField.getType(),\n                                \"Cannot parse \\\"\" + text + \"\\\": Value \" + difference +\n                                        \" for \" + savedField.iField.getName() +\n                                        \" is too large/invalid: It would shift the result to \" +\n                                        new DateTime(millis, getChronology()).withField(savedField.iField, difference).toString());\n                    } else {\n                        lastRepeated = savedField;\n                    }\n                }\n            }else {\n                    millis = savedField.set(millis, resetFields);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..fd0652ad 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,38 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        SavedField lastRepeated = null;\n+        for (int i = 0; i < count; i++) {\n+            SavedField savedField = savedFields[i];\n+            DurationField durationField = savedField.iField.getDurationField();\n+            if (durationField != null && durationField.isPrecise()) {\n+                long difference = savedField.iDuration;\n+                if (difference == 0) {\n+                    continue;\n+                }\n+                long subtract = (difference * savedField.iScalar) - difference;\n+                if (lastRepeated != null && savedField.iField.getType() == lastRepeated.iField.getType()) {\n+                    millis = lastRepeated.set(millis, resetFields);\n+                    if (!resetFields) {\n+                        lastRepeated = null;\n+                    }\n+                }\n+                if (subtract <= millis) {  // add support for negative millis by swapping order\n+                    millis -= subtract;\n+                } else {\n+                    if (resetFields) {\n+                        throw new IllegalFieldValueException(\n+                                savedField.iField.getType(),\n+                                \"Cannot parse \\\"\" + text + \"\\\": Value \" + difference +\n+                                        \" for \" + savedField.iField.getName() +\n+                                        \" is too large/invalid: It would shift the result to \" +\n+                                        new DateTime(millis, getChronology()).withField(savedField.iField, difference).toString());\n+                    } else {\n+                        lastRepeated = savedField;\n+                    }\n+                }\n+            }else {\n+                    millis = savedField.set(millis, resetFields);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}