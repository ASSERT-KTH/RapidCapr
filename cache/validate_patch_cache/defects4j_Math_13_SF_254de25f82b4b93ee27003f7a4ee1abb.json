{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final LUDecomposition dec = new LUDecomposition(m);\n    final RealMatrix l = dec.getL();\n    final RealMatrix u = dec.getU();\n    final int n = m.getRowDimension();\n    final RealMatrix s = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            double sum = 0.0;\n            for (int k = 0; k < i; k++) {\n                sum += s.getEntry(k, i) * s.getEntry(k, j);\n            }\n            if (i == j) {\n                s.setEntry(i, i, FastMath.sqrt(u.getEntry(i, i) - sum));\n            } else {\n                s.setEntry(i, j, (u.getEntry(i, j) - sum) / s.getEntry(i, i));\n            }\n        }\n    }\n    return l.multiply(s).multiply(l.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..6a290a427 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,25 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final LUDecomposition dec = new LUDecomposition(m);\n+    final RealMatrix l = dec.getL();\n+    final RealMatrix u = dec.getU();\n+    final int n = m.getRowDimension();\n+    final RealMatrix s = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        for (int j = 0; j < n; j++) {\n+            double sum = 0.0;\n+            for (int k = 0; k < i; k++) {\n+                sum += s.getEntry(k, i) * s.getEntry(k, j);\n+            }\n+            if (i == j) {\n+                s.setEntry(i, i, FastMath.sqrt(u.getEntry(i, i) - sum));\n+            } else {\n+                s.setEntry(i, j, (u.getEntry(i, j) - sum) / s.getEntry(i, i));\n+            }\n+        }\n     }\n+    return l.multiply(s).multiply(l.transpose());\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}