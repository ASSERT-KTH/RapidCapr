{
    "patch": "        if (gcd == 0) {\n            return this;\n        }\n        int reducedNum = numerator / gcd;\n        int reducedDen = denominator / gcd;\n        if ((gcd < 0 && reducedDen < 0) || (gcd > 0 && reducedDen > 0)) {\n            reducedDen = Math.abs(reducedDen);\n        } else {\n            reducedDen = -Math.abs(reducedDen);\n        }\n        return new Fraction(reducedNum, reducedDen);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..5eb529cd 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,6 +463,17 @@ public final class Fraction extends Number implements Comparable {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n+        if (gcd == 0) {\n+            return this;\n+        }\n+        int reducedNum = numerator / gcd;\n+        int reducedDen = denominator / gcd;\n+        if ((gcd < 0 && reducedDen < 0) || (gcd > 0 && reducedDen > 0)) {\n+            reducedDen = Math.abs(reducedDen);\n+        } else {\n+            reducedDen = -Math.abs(reducedDen);\n+        }\n+        return new Fraction(reducedNum, reducedDen);\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}