{
    "patch": "      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      // NOTE: Checking for functionType.getThisType() is not required here,\n      // since getCallThisType() will return that same type if it exists, or\n      // the unknown type if it doesn't.\n      JSType thisType = functionType.getCallThisType();\n      if (thisType != null && !isNewTarget(child) &&\n          !isGetPropOrGetElem(child.getParent()) &&\n          !NodeUtil.isFunctionObjectCall(child.getParent())) {\n        report(t, n, INVALID_THIS_TYPE, thisType.toString());\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..4efae011 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      // Functions with explicit 'this' types must be called in a GETPROP\n+      // or GETELEM.\n+      // NOTE: Checking for functionType.getThisType() is not required here,\n+      // since getCallThisType() will return that same type if it exists, or\n+      // the unknown type if it doesn't.\n+      JSType thisType = functionType.getCallThisType();\n+      if (thisType != null && !isNewTarget(child) &&\n+          !isGetPropOrGetElem(child.getParent()) &&\n+          !NodeUtil.isFunctionObjectCall(child.getParent())) {\n+        report(t, n, INVALID_THIS_TYPE, thisType.toString());\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}