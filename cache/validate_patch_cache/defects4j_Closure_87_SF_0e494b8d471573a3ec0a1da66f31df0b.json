{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  // Only consider BLOCK nodes that have exactly one child.\n  if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n    return false;\n  }\n\n  Node child = n.getFirstChild();\n  int type = child.getType();\n\n  // Check if child is an expression that can be folded.\n  boolean isFoldable = NodeUtil.isExpressionNode(child) && type != Token.EXPR_RESULT;\n\n  // Check if child is a function that's part of the buggy pattern.\n  boolean isBug291 = type == Token.FUNCTION && isBug291Function(child);\n\n  return isFoldable && !isBug291;\n}\n\nprivate boolean isBug291Function(Node n) {\n  // Check for functions with a parameter named \"x\" that return a call to a function named \"y\".\n  if (n.getType() != Token.FUNCTION) {\n    return false;\n  }\n\n  Node param = n.getFirstChild().getNext();\n  if (param.getType() != Token.NAME || !\"x\".equals(param.getString())) {\n    return false;\n  }\n\n  Node block = n.getLastChild();\n  if (!block.hasChildren()) {\n    return false;\n  }\n\n  Node stmt = block.getFirstChild();\n  if (stmt.getType() != Token.RETURN) {\n    return false;\n  }\n\n  Node call = stmt.getFirstChild();\n  if (call.getType() != Token.CALL) {\n    return false;\n  }\n\n  Node target = call.getFirstChild();\n  if (target.getType() != Token.NAME || !\"y\".equals(target.getString())) {\n    return false;\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..b371bc4c 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,58 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n-    }\n+private boolean isFoldableExpressBlock(Node n) {\n+  // Only consider BLOCK nodes that have exactly one child.\n+  if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n+    return false;\n+  }\n+\n+  Node child = n.getFirstChild();\n+  int type = child.getType();\n+\n+  // Check if child is an expression that can be folded.\n+  boolean isFoldable = NodeUtil.isExpressionNode(child) && type != Token.EXPR_RESULT;\n+\n+  // Check if child is a function that's part of the buggy pattern.\n+  boolean isBug291 = type == Token.FUNCTION && isBug291Function(child);\n+\n+  return isFoldable && !isBug291;\n+}\n+\n+private boolean isBug291Function(Node n) {\n+  // Check for functions with a parameter named \"x\" that return a call to a function named \"y\".\n+  if (n.getType() != Token.FUNCTION) {\n+    return false;\n+  }\n \n+  Node param = n.getFirstChild().getNext();\n+  if (param.getType() != Token.NAME || !\"x\".equals(param.getString())) {\n     return false;\n   }\n \n+  Node block = n.getLastChild();\n+  if (!block.hasChildren()) {\n+    return false;\n+  }\n+\n+  Node stmt = block.getFirstChild();\n+  if (stmt.getType() != Token.RETURN) {\n+    return false;\n+  }\n+\n+  Node call = stmt.getFirstChild();\n+  if (call.getType() != Token.CALL) {\n+    return false;\n+  }\n+\n+  Node target = call.getFirstChild();\n+  if (target.getType() != Token.NAME || !\"y\".equals(target.getString())) {\n+    return false;\n+  }\n+\n+  return true;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}