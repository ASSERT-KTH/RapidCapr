{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n      if (name.globalSets == 1 && name.localSets == 0) {\n        // {@code name} meets condition (b).\n        Ref decl = name.getDeclaration();\n        if (decl != null && decl.getTwin() != null && decl.getTwin().type == Ref.Type.ALIASING_DEF) {\n          Name definingName = namespace.getSlot(decl.getTwin());\n          if (definingName.getGlobalSets() == 1 && definingName.getLocalSets() == 0 && definingName.getAliasingGets() == 0) {\n            // {@code name} meets condition (c).\n            inlineAliasIfPossible(decl, namespace);\n          }\n        }\n\n        // Find all of its local aliases and try to inline them.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type != Type.ALIASING_GET || !ref.scope.isLocal()) {\n            continue;\n          }\n\n          // find the name that contains the original value\n          Name originalName = namespace.getSlot(ref.node);\n          if (originalName == null || originalName.getGlobalSets() > 1 || originalName.getLocalSets() > 0 || originalName.getAliasingGets() != 1) {\n            continue;\n          }\n\n          // {@code name} meets condition (c).\n          inlineAliasIfPossible(ref, namespace);\n        }\n      }\n\n      // Check if {@code name} has any aliases left after the\n      // local-alias-inlining above.\n      if ((name.type == Name.Type.OBJECTLIT ||\n           name.type == Name.Type.FUNCTION) &&\n          name.aliasingGets == 0 && name.props != null) {\n        // All of {@code name}'s children meet condition (a), so they can be\n        // added to the worklist.\n        workList.addAll(name.props);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..7e0c3b66 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,7 +158,7 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n+private void inlineAliases(GlobalNamespace namespace) {\n     // Invariant: All the names in the worklist meet condition (a).\n     Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n     while (!workList.isEmpty()) {\n@@ -169,18 +169,32 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n+      if (name.globalSets == 1 && name.localSets == 0) {\n+        // {@code name} meets condition (b).\n+        Ref decl = name.getDeclaration();\n+        if (decl != null && decl.getTwin() != null && decl.getTwin().type == Ref.Type.ALIASING_DEF) {\n+          Name definingName = namespace.getSlot(decl.getTwin());\n+          if (definingName.getGlobalSets() == 1 && definingName.getLocalSets() == 0 && definingName.getAliasingGets() == 0) {\n+            // {@code name} meets condition (c).\n+            inlineAliasIfPossible(decl, namespace);\n+          }\n+        }\n+\n+        // Find all of its local aliases and try to inline them.\n         List<Ref> refs = Lists.newArrayList(name.getRefs());\n         for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n-            }\n+          if (ref.type != Type.ALIASING_GET || !ref.scope.isLocal()) {\n+            continue;\n           }\n+\n+          // find the name that contains the original value\n+          Name originalName = namespace.getSlot(ref.node);\n+          if (originalName == null || originalName.getGlobalSets() > 1 || originalName.getLocalSets() > 0 || originalName.getAliasingGets() != 1) {\n+            continue;\n+          }\n+\n+          // {@code name} meets condition (c).\n+          inlineAliasIfPossible(ref, namespace);\n         }\n       }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}