{
    "patch": "    private Integer getBasicRow(final int col) {\n        Integer row = null;\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                if (row == null) {\n                    row = i;\n                } else {\n                    // If there is more than one non-zero entry in the column, return the row with the lowest index.\n                    row = (getEntry(row, col) > getEntry(i, col)) ? i : row;\n                }\n            }\n        }\n        return row;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 0ab790cd6..8da08a731 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -274,9 +274,10 @@ class SimplexTableau implements Serializable {\n         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n             if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                 if (row == null) {\n-                row = i;\n+                    row = i;\n                 } else {\n-                return null;\n+                    // If there is more than one non-zero entry in the column, return the row with the lowest index.\n+                    row = (getEntry(row, col) > getEntry(i, col)) ? i : row;\n                 }\n             }\n         }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<1531235.5979381516>",
    "test_result": "FAIL"
}