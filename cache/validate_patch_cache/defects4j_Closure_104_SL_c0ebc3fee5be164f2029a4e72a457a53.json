{
    "patch": "if (!alternates.isEmpty()) {\n  JSTypeBuilder builder = JSType.builder().copyFrom(this);\n  for (JSType alternate : alternates) {\n    if (!alternate.isSubtype(this)) {\n      builder.addAlternate(alternate);\n    }\n  }\n  JSType result = builder.build();\n  if (result.isSubtype(that)) {\n    return that;\n  }\n  return result;\n} else if (this.isObject() && that.isObject()) {\n  return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n} else {\n  return getNativeType(JSTypeNative.NO_TYPE);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..96015bbc 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -288,7 +288,23 @@ public class UnionType extends JSType {\n       builder.addAlternate(that);\n     }\n     JSType result = builder.build();\n-    if (result != null) {\n+if (!alternates.isEmpty()) {\n+  JSTypeBuilder builder = JSType.builder().copyFrom(this);\n+  for (JSType alternate : alternates) {\n+    if (!alternate.isSubtype(this)) {\n+      builder.addAlternate(alternate);\n+    }\n+  }\n+  JSType result = builder.build();\n+  if (result.isSubtype(that)) {\n+    return that;\n+  }\n+  return result;\n+} else if (this.isObject() && that.isObject()) {\n+  return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+} else {\n+  return getNativeType(JSTypeNative.NO_TYPE);\n+}\n       return result;\n     } else if (this.isObject() && that.isObject()) {\n       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}