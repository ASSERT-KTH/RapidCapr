{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n            final RealPointValuePair[] points = simplex;\n            final RealPointValuePair best = points[0];\n            final RealPointValuePair secondBest = points[1];\n            final RealPointValuePair worst = points[points.length - 1];\n\n            // Compute the centroid of all points in the simplex except the worst\n            RealPoint centroid = computeCentroid(points, worst);\n\n            // Reflection step\n            RealPoint reflectedPoint = computeReflection(centroid, worst.getPoint());\n            RealPointValuePair reflected = new RealPointValuePair(reflectedPoint, computeObjectiveValue(reflectedPoint));\n\n            // Compute the expansion, if applicable\n            RealPointValuePair expanded = null;\n            if (comparator.compare(reflected, best) < 0) {\n                RealPoint expandedPoint = computeExpansion(centroid, reflectedPoint, worst.getPoint());\n                expanded = new RealPointValuePair(expandedPoint, computeObjectiveValue(expandedPoint));\n            }\n\n            // Accept the reflection or the expansion\n            if (expanded != null && comparator.compare(expanded, reflected) < 0) {\n                simplex[points.length - 1] = expanded;\n            } else if (comparator.compare(reflected, worst) < 0) {\n                simplex[points.length - 1] = reflected;\n            } else { // Contraction\n                RealPoint contractedPoint = computeContraction(centroid, worst.getPoint());\n                RealPointValuePair contracted = new RealPointValuePair(contractedPoint, computeObjectiveValue(contractedPoint));\n\n                // Inside contraction\n                if (comparator.compare(contracted, worst) < 0) {\n                    simplex[points.length - 1] = contracted;\n                } else { // Shrink\n                    shrink(comparator);\n                }\n            }\n\n            // Check the stopping criteria\n            if (getIterations() >= maxIterations) {\n                throw new OptimizationException(\"Maximum number of iterations exceeded\");\n            } else if (isConverged()) {\n                return;\n            }\n        }\n    }\n    \nprivate RealPoint computeCentroid(RealPointValuePair[] points, RealPointValuePair excludeWorst) {\n        RealPoint centroid = new ArrayRealVector(points[0].getPoint().getDimension());\n        for (RealPointValuePair point : points) {\n            if (point != excludeWorst) {\n                centroid = centroid.add(point.getPoint());\n            }\n        }\n        centroid = centroid.mapDivide(points.length - 1);\n        return centroid;\n    }\n\n    private RealPoint computeReflection(RealPoint centroid, RealPoint worst) {\n        RealPoint direction = centroid.subtract(worst);\n        RealPoint reflectedPoint = centroid.add(direction.mapMultiply(REFLECTION_COEFFICIENT));\n        return reflectedPoint;\n    }\n\n    private RealPoint computeExpansion(RealPoint centroid, RealPoint reflected, RealPoint worst) {\n        RealPoint direction = reflected.subtract(centroid);\n        RealPoint expandedPoint = centroid.add(direction.mapMultiply(EXPANSION_COEFFICIENT));\n        return expandedPoint;\n    }\n\n    private RealPoint computeContraction(RealPoint centroid, RealPoint worst) {\n        RealPoint direction = worst.subtract(centroid);\n        RealPoint contractedPoint = centroid.add(direction.mapMultiply(CONTRACTION_COEFFICIENT));\n        return contractedPoint;\n    }\n\n    private void shrink(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException {\n        RealPointValuePair[] points = simplex;\n        RealPointValuePair best = points[0];\n        for (int i = 1; i < points.length; i++) {\n            RealPointValuePair p = points[i];\n            RealPointValuePair reflected = new RealPointValuePair(best.getPoint().add(p.getPoint().subtract(best.getPoint())\n                    .mapMultiply(SHRINK_COEFFICIENT)), computeObjectiveValue(p.getPoint()));\n            simplex[i] = reflected;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..7f75cc513 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,96 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n \n             incrementIterationsCounter();\n+            final RealPointValuePair[] points = simplex;\n+            final RealPointValuePair best = points[0];\n+            final RealPointValuePair secondBest = points[1];\n+            final RealPointValuePair worst = points[points.length - 1];\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+            // Compute the centroid of all points in the simplex except the worst\n+            RealPoint centroid = computeCentroid(points, worst);\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+            // Reflection step\n+            RealPoint reflectedPoint = computeReflection(centroid, worst.getPoint());\n+            RealPointValuePair reflected = new RealPointValuePair(reflectedPoint, computeObjectiveValue(reflectedPoint));\n+\n+            // Compute the expansion, if applicable\n+            RealPointValuePair expanded = null;\n             if (comparator.compare(reflected, best) < 0) {\n+                RealPoint expandedPoint = computeExpansion(centroid, reflectedPoint, worst.getPoint());\n+                expanded = new RealPointValuePair(expandedPoint, computeObjectiveValue(expandedPoint));\n+            }\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+            // Accept the reflection or the expansion\n+            if (expanded != null && comparator.compare(expanded, reflected) < 0) {\n+                simplex[points.length - 1] = expanded;\n+            } else if (comparator.compare(reflected, worst) < 0) {\n+                simplex[points.length - 1] = reflected;\n+            } else { // Contraction\n+                RealPoint contractedPoint = computeContraction(centroid, worst.getPoint());\n+                RealPointValuePair contracted = new RealPointValuePair(contractedPoint, computeObjectiveValue(contractedPoint));\n+\n+                // Inside contraction\n+                if (comparator.compare(contracted, worst) < 0) {\n+                    simplex[points.length - 1] = contracted;\n+                } else { // Shrink\n+                    shrink(comparator);\n                 }\n-\n-                return;\n-\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n+            // Check the stopping criteria\n+            if (getIterations() >= maxIterations) {\n+                throw new OptimizationException(\"Maximum number of iterations exceeded\");\n+            } else if (isConverged()) {\n                 return;\n             }\n-\n         }\n+    }\n+    \n+private RealPoint computeCentroid(RealPointValuePair[] points, RealPointValuePair excludeWorst) {\n+        RealPoint centroid = new ArrayRealVector(points[0].getPoint().getDimension());\n+        for (RealPointValuePair point : points) {\n+            if (point != excludeWorst) {\n+                centroid = centroid.add(point.getPoint());\n+            }\n+        }\n+        centroid = centroid.mapDivide(points.length - 1);\n+        return centroid;\n+    }\n+\n+    private RealPoint computeReflection(RealPoint centroid, RealPoint worst) {\n+        RealPoint direction = centroid.subtract(worst);\n+        RealPoint reflectedPoint = centroid.add(direction.mapMultiply(REFLECTION_COEFFICIENT));\n+        return reflectedPoint;\n+    }\n+\n+    private RealPoint computeExpansion(RealPoint centroid, RealPoint reflected, RealPoint worst) {\n+        RealPoint direction = reflected.subtract(centroid);\n+        RealPoint expandedPoint = centroid.add(direction.mapMultiply(EXPANSION_COEFFICIENT));\n+        return expandedPoint;\n+    }\n \n+    private RealPoint computeContraction(RealPoint centroid, RealPoint worst) {\n+        RealPoint direction = worst.subtract(centroid);\n+        RealPoint contractedPoint = centroid.add(direction.mapMultiply(CONTRACTION_COEFFICIENT));\n+        return contractedPoint;\n     }\n \n+    private void shrink(final Comparator<RealPointValuePair> comparator)\n+            throws FunctionEvaluationException, OptimizationException {\n+        RealPointValuePair[] points = simplex;\n+        RealPointValuePair best = points[0];\n+        for (int i = 1; i < points.length; i++) {\n+            RealPointValuePair p = points[i];\n+            RealPointValuePair reflected = new RealPointValuePair(best.getPoint().add(p.getPoint().subtract(best.getPoint())\n+                    .mapMultiply(SHRINK_COEFFICIENT)), computeObjectiveValue(p.getPoint()));\n+            simplex[i] = reflected;\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}