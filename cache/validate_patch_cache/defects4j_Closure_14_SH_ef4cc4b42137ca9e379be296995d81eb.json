{
    "patch": "if (cfa != null) {\n    List<DiGraphEdge<Node, Branch>> outEdges = cfa.getOutEdges(finallyNode);\n    for (DiGraphEdge<Node, Branch> outEdge : outEdges) {\n        if (outEdge.getValue() == Branch.ON_EX) {\n            // Create an edge from fromNode to outEdge's destination\n            cfa.createEdge(fromNode, Branch.UNCOND, outEdge.getDestination());\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..0533c4f8 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,15 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null) {\n+    List<DiGraphEdge<Node, Branch>> outEdges = cfa.getOutEdges(finallyNode);\n+    for (DiGraphEdge<Node, Branch> outEdge : outEdges) {\n+        if (outEdge.getValue() == Branch.ON_EX) {\n+            // Create an edge from fromNode to outEdge's destination\n+            cfa.createEdge(fromNode, Branch.UNCOND, outEdge.getDestination());\n+        }\n+    }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}