{
    "patch": "public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count <= 0) {\n            return \"\";\n        }\n        if (start < 0) {\n            throw new IllegalArgumentException(\"Invalid start index provided: \" + start);\n        }\n        if (end <= start) {\n            throw new IllegalArgumentException(\"End index should be greater than start index\");\n        }\n        if (chars != null && chars.length == 0) {\n            throw new IllegalArgumentException(\"Characters array should not be empty.\");\n        }\n\n        if (chars == null) {\n            if (!letters && !numbers) {\n                end = Integer.MAX_VALUE;\n            } else {\n                end = (numbers ? '9' : 0) + 1 + (letters ? 'z' - 'a' + 1 : 0) + (letters ? 'Z' - 'A' + 1 : 0);\n                start = (numbers && letters ? '0' : (numbers ? '0' : (letters ? 'a' : ' ')));\n            }\n        } else {\n            end = Math.min(end, chars.length);\n        }\n\n        char[] buffer = new char[count];\n        int gap = end - start;\n\n        while (count-- != 0) {\n            char ch;\n            if (chars == null) {\n                ch = (char) (random.nextInt(gap) + start);\n            } else {\n                ch = chars[random.nextInt(gap) + start];\n            }\n            if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || !letters && !numbers) {\n                if(ch >= 56320 && ch <= 57343) {\n                    if(count == 0) {\n                        count++;\n                    } else {\n                        // low surrogate, insert high surrogate after putting it in\n                        buffer[count] = ch;\n                        count--;\n                        buffer[count] = (char) (55296 + random.nextInt(128));\n                    }\n                } else if(ch >= 55296 && ch <= 56191) {\n                    if(count == 0) {\n                        count++;\n                    } else {\n                        // high surrogate, insert low surrogate before putting it in\n                        buffer[count] = (char) (56320 + random.nextInt(128));\n                        count--;\n                        buffer[count] = ch;\n                    }\n                } else if(ch >= 56192 && ch <= 56319) {\n                    // private high surrogate, no effing clue, so skip it\n                    count++;\n                } else {\n                    buffer[count] = ch;\n                }\n            } else {\n                count++;\n            }\n        }\n        return new String(buffer);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\nindex a7990575..24662094 100644\n--- a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n@@ -220,28 +220,30 @@ public class RandomStringUtils {\n      * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.\n      * @since 2.0\n      */\n-    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n+public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                 char[] chars, Random random) {\n-        if (count == 0) {\n+        if (count <= 0) {\n             return \"\";\n-        } else if (count < 0) {\n-            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n+        }\n+        if (start < 0) {\n+            throw new IllegalArgumentException(\"Invalid start index provided: \" + start);\n+        }\n+        if (end <= start) {\n+            throw new IllegalArgumentException(\"End index should be greater than start index\");\n         }\n         if (chars != null && chars.length == 0) {\n-            throw new IllegalArgumentException(\"The chars array must not be empty\");\n+            throw new IllegalArgumentException(\"Characters array should not be empty.\");\n         }\n \n-        if (start == 0 && end == 0) {\n-            if (chars != null) {\n-                end = chars.length;\n+        if (chars == null) {\n+            if (!letters && !numbers) {\n+                end = Integer.MAX_VALUE;\n             } else {\n-                if (!letters && !numbers) {\n-                    end = Integer.MAX_VALUE;\n-                } else {\n-                    end = 'z' + 1;\n-                    start = ' ';                \n-                }\n+                end = (numbers ? '9' : 0) + 1 + (letters ? 'z' - 'a' + 1 : 0) + (letters ? 'Z' - 'A' + 1 : 0);\n+                start = (numbers && letters ? '0' : (numbers ? '0' : (letters ? 'a' : ' ')));\n             }\n+        } else {\n+            end = Math.min(end, chars.length);\n         }\n \n         char[] buffer = new char[count];",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}