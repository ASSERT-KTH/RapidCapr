{
    "patch": "public double solve(double min, double max) throws MaxIterationsExceededException,\n        FunctionEvaluationException {\n\n    clearResult();\n    verifyInterval(min, max);\n\n    double ret = Double.NaN;\n\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n\n    // Check if either endpoint is a root\n    if (yMin == 0.0) {\n        setResult(min, 0);\n        ret = min;\n    } else if (yMax == 0.0) {\n        setResult(max, 0);\n        ret = max;\n    } else {\n        // Verify bracketing\n        double sign = yMin * yMax;\n\n        if (sign >= 0.0) {\n            // check if either value is close to a zero\n            double yMid = f.value((min + max) / 2.0);\n            if (yMid == 0.0) {\n                setResult((min + max) / 2.0, 0);\n                ret = (min + max) / 2.0;\n            } else if (sign > 0.0) {\n                throw new IllegalArgumentException(\n                        \"Function values at endpoints do not have different signs.  Endpoints: [\" + min + \",\" + max + \"]\" +\n                                \", Values: [\" + yMin + \",\" + yMax + \"]\");\n            } else {\n                // Initial setup\n                double x0 = min;\n                double y0 = yMin;\n                double x1 = max;\n                double y1 = yMax;\n                double x2 = (min + max) / 2.0;\n                double y2 = f.value(x2);\n\n                // Check if x2 is a root\n                if (y2 == 0.0) {\n                    setResult(x2, 0);\n                    ret = x2;\n                } else {\n                    int maxIterations = getMaximalIterationCount();\n                    double[] tmp = new double[4];\n\n                    // Iterate\n                    int i = 0;\n                    while (i < maxIterations) {\n                        // Increment iteration count\n                        incrementIterationCount();\n\n                        // Update a, b, c, d\n                        tmp[0] = x0 - x2;\n                        tmp[1] = x1 - x2;\n                        tmp[2] = y0 - y2;\n                        tmp[3] = y1 - y2;\n                        double denom = tmp[0] * tmp[3] - tmp[1] * tmp[2];\n                        if (denom == 0.0) {\n                            // Collapse endpoints\n                            tmp[0] = (tolerance > 0) ? x2 - (tolerance / 2) : x2 - defaultFunctionValueAccuracy;\n                            tmp[1] = (tolerance > 0) ? x2 + (tolerance / 2) : x2 + defaultFunctionValueAccuracy;\n                            tmp[2] = f.value(tmp[0]);\n                            tmp[3] = f.value(tmp[1]);\n                            if (tmp[2] * tmp[3] <= 0.0) {\n                                setResult(x2, 0);\n                                ret = x2;\n                                break;\n                            }\n                            if (Math.abs(tmp[2]) < Math.abs(tmp[3])) {\n                                x1 = tmp[0];\n                                y1 = tmp[2];\n                            } else {\n                                x0 = tmp[1];\n                                y0 = tmp[3];\n                            }\n                        } else {\n                            double a = (tmp[3] * tmp[0] - tmp[2] * tmp[1]) / denom;\n                            double b = (tmp[2] * tmp[0] - tmp[3] * tmp[1]) / denom;\n                            double c = (y2 - a * x2 * x2 - b * x2);\n                            double fa = f.value(x0) - a * y0 - c;\n                            double fb = f.value(x1) - a * y1 - c;\n\n                            if (fa * y2 < 0.0) {\n                                x1 = x2;\n                                y1 = y2;\n                            } else {\n                                x0 = x2;\n                                y0 = y2;\n                            }\n                            if (Math.abs(fa) < Math.abs(fb)) {\n                                // choose quadratic interpolation\n                                x2 = x0 - (y0 / fa) * (x1 - x0);\n                            } else if (fa * fb < 0.0) {\n                                // choose inverse quadratic interpolation\n                                x2 = x0 - (y0 / (y0 - y1)) * (x1 - x0);\n                            } else {\n                                // choose bisection\n                                x2 = (x0 + x1) / 2.0;\n                            }\n                            y2 = f.value(x2);\n\n                            // Check for convergence and NaN:\n                            if (Double.isNaN(y2) || Double.isInfinite(y2)) {\n                                throw new FunctionEvaluationException(x2, \"NAN or Infinite\");\n                            }\n\n                            double delta = Math.abs(x2 - x1);\n                            double diff = Math.abs(y2);\n\n                            if ((delta < getAbsoluteAccuracy() || diff < getRelativeAccuracy() && diff < Math.abs(y1))\n                                    || diff < getFunctionValueAccuracy()) {\n                                setResult(x2, y2);\n                                ret = x2;\n                                break;\n                            }\n                        }\n                        ++i;\n                    }\n\n                    if (Double.isNaN(ret)) {\n                        throw new MaxIterationsExceededException(maxIterations);\n                    }\n                }\n            }\n        }\n        else {\n            ret = solve(min, yMin, max, yMax, (min + max) / 2.0, yMin);\n        }\n    }\n\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..dfe237c22 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,142 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n+public double solve(double min, double max) throws MaxIterationsExceededException,\n         FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n-        \n+\n+    clearResult();\n+    verifyInterval(min, max);\n+\n+    double ret = Double.NaN;\n+\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n+\n+    // Check if either endpoint is a root\n+    if (yMin == 0.0) {\n+        setResult(min, 0);\n+        ret = min;\n+    } else if (yMax == 0.0) {\n+        setResult(max, 0);\n+        ret = max;\n+    } else {\n         // Verify bracketing\n         double sign = yMin * yMax;\n-        if (sign >= 0) {\n+\n+        if (sign >= 0.0) {\n             // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n-        } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n-        }\n+            double yMid = f.value((min + max) / 2.0);\n+            if (yMid == 0.0) {\n+                setResult((min + max) / 2.0, 0);\n+                ret = (min + max) / 2.0;\n+            } else if (sign > 0.0) {\n+                throw new IllegalArgumentException(\n+                        \"Function values at endpoints do not have different signs.  Endpoints: [\" + min + \",\" + max + \"]\" +\n+                                \", Values: [\" + yMin + \",\" + yMax + \"]\");\n+            } else {\n+                // Initial setup\n+                double x0 = min;\n+                double y0 = yMin;\n+                double x1 = max;\n+                double y1 = yMax;\n+                double x2 = (min + max) / 2.0;\n+                double y2 = f.value(x2);\n \n-        return ret;\n+                // Check if x2 is a root\n+                if (y2 == 0.0) {\n+                    setResult(x2, 0);\n+                    ret = x2;\n+                } else {\n+                    int maxIterations = getMaximalIterationCount();\n+                    double[] tmp = new double[4];\n+\n+                    // Iterate\n+                    int i = 0;\n+                    while (i < maxIterations) {\n+                        // Increment iteration count\n+                        incrementIterationCount();\n+\n+                        // Update a, b, c, d\n+                        tmp[0] = x0 - x2;\n+                        tmp[1] = x1 - x2;\n+                        tmp[2] = y0 - y2;\n+                        tmp[3] = y1 - y2;\n+                        double denom = tmp[0] * tmp[3] - tmp[1] * tmp[2];\n+                        if (denom == 0.0) {\n+                            // Collapse endpoints\n+                            tmp[0] = (tolerance > 0) ? x2 - (tolerance / 2) : x2 - defaultFunctionValueAccuracy;\n+                            tmp[1] = (tolerance > 0) ? x2 + (tolerance / 2) : x2 + defaultFunctionValueAccuracy;\n+                            tmp[2] = f.value(tmp[0]);\n+                            tmp[3] = f.value(tmp[1]);\n+                            if (tmp[2] * tmp[3] <= 0.0) {\n+                                setResult(x2, 0);\n+                                ret = x2;\n+                                break;\n+                            }\n+                            if (Math.abs(tmp[2]) < Math.abs(tmp[3])) {\n+                                x1 = tmp[0];\n+                                y1 = tmp[2];\n+                            } else {\n+                                x0 = tmp[1];\n+                                y0 = tmp[3];\n+                            }\n+                        } else {\n+                            double a = (tmp[3] * tmp[0] - tmp[2] * tmp[1]) / denom;\n+                            double b = (tmp[2] * tmp[0] - tmp[3] * tmp[1]) / denom;\n+                            double c = (y2 - a * x2 * x2 - b * x2);\n+                            double fa = f.value(x0) - a * y0 - c;\n+                            double fb = f.value(x1) - a * y1 - c;\n+\n+                            if (fa * y2 < 0.0) {\n+                                x1 = x2;\n+                                y1 = y2;\n+                            } else {\n+                                x0 = x2;\n+                                y0 = y2;\n+                            }\n+                            if (Math.abs(fa) < Math.abs(fb)) {\n+                                // choose quadratic interpolation\n+                                x2 = x0 - (y0 / fa) * (x1 - x0);\n+                            } else if (fa * fb < 0.0) {\n+                                // choose inverse quadratic interpolation\n+                                x2 = x0 - (y0 / (y0 - y1)) * (x1 - x0);\n+                            } else {\n+                                // choose bisection\n+                                x2 = (x0 + x1) / 2.0;\n+                            }\n+                            y2 = f.value(x2);\n+\n+                            // Check for convergence and NaN:\n+                            if (Double.isNaN(y2) || Double.isInfinite(y2)) {\n+                                throw new FunctionEvaluationException(x2, \"NAN or Infinite\");\n+                            }\n+\n+                            double delta = Math.abs(x2 - x1);\n+                            double diff = Math.abs(y2);\n+\n+                            if ((delta < getAbsoluteAccuracy() || diff < getRelativeAccuracy() && diff < Math.abs(y1))\n+                                    || diff < getFunctionValueAccuracy()) {\n+                                setResult(x2, y2);\n+                                ret = x2;\n+                                break;\n+                            }\n+                        }\n+                        ++i;\n+                    }\n+\n+                    if (Double.isNaN(ret)) {\n+                        throw new MaxIterationsExceededException(maxIterations);\n+                    }\n+                }\n+            }\n+        }\n+        else {\n+            ret = solve(min, yMin, max, yMax, (min + max) / 2.0, yMin);\n+        }\n     }\n+\n+    return ret;\n+}\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}