{
    "patch": "        MockHandlerInterface oldMockHandler = getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n        org.mockito.internal.creation.jmock.ClassImposterizer ClassImposterizer = org.mockito.internal.creation.jmock.ClassImposterizer.INSTANCE;\n        T proxy;\n        try {\n            proxy = ClassImposterizer.INSTANCE.imposterise(newMockHandler, getAdditionalInterfaces(mock));\n        } catch (Throwable t) {\n            throw new RuntimeException(\"Could not initialize imposter for \" + mock.getClass(), t);\n        }\n        org.mockito.internal.util.MockUtil mockUtil = new org.mockito.internal.util.MockUtil();\n        java.lang.reflect.Field field = null;\n        Object currentObject = mock;\n        while (currentObject != null) {\n            try {\n                field = currentObject.getClass().getDeclaredField(\"CGLIB$CALLBACK_0\");\n                break;\n            } catch (NoSuchFieldException e) {\n                //If there is no such field, we keep going with the superclass.\n                currentObject = currentObject.getClass().getSuperclass();\n            }\n        }\n        java.lang.reflect.AccessibleObject.setAccessible(new java.lang.reflect.AccessibleObject[]{field}, true);\n        try {\n            field.set(proxy, field.get(mock));\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(\"Could not set internal callback on proxy instance\", e);\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..3fb2a513a 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,34 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+        MockHandlerInterface oldMockHandler = getMockHandler(mock);\n+        MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n+        org.mockito.internal.creation.jmock.ClassImposterizer ClassImposterizer = org.mockito.internal.creation.jmock.ClassImposterizer.INSTANCE;\n+        T proxy;\n+        try {\n+            proxy = ClassImposterizer.INSTANCE.imposterise(newMockHandler, getAdditionalInterfaces(mock));\n+        } catch (Throwable t) {\n+            throw new RuntimeException(\"Could not initialize imposter for \" + mock.getClass(), t);\n+        }\n+        org.mockito.internal.util.MockUtil mockUtil = new org.mockito.internal.util.MockUtil();\n+        java.lang.reflect.Field field = null;\n+        Object currentObject = mock;\n+        while (currentObject != null) {\n+            try {\n+                field = currentObject.getClass().getDeclaredField(\"CGLIB$CALLBACK_0\");\n+                break;\n+            } catch (NoSuchFieldException e) {\n+                //If there is no such field, we keep going with the superclass.\n+                currentObject = currentObject.getClass().getSuperclass();\n+            }\n+        }\n+        java.lang.reflect.AccessibleObject.setAccessible(new java.lang.reflect.AccessibleObject[]{field}, true);\n+        try {\n+            field.set(proxy, field.get(mock));\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(\"Could not set internal callback on proxy instance\", e);\n+        }\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}