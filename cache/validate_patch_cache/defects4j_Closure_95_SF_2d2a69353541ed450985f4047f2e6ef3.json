{
    "patch": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n  Preconditions.checkArgument(inferred || type != null);\n\n  // Only allow declarations of NAMEs and qualfied names.\n  boolean shouldDeclareOnGlobalThis = false;\n\n  if (n.getType() == Token.NAME) {\n    switch (parent.getType()) {\n        case Token.FUNCTION:\n          shouldDeclareOnGlobalThis = false;\n          break;\n        case Token.VAR:\n          shouldDeclareOnGlobalThis = scope.isGlobal();\n          break;\n        case Token.LET:\n        case Token.CONST:\n          // shouldDeclareOnGlobalThis was already correctly set to false\n          break;\n        case Token.LP:\n          Node grandparent = parent.getParent();\n          switch (grandparent.getType()) {\n            case Token.FOR:\n            case Token.FOR_OF:\n            case Token.FOR_IN:\n              break;\n            default:\n              shouldDeclareOnGlobalThis = scope.isGlobal();\n              break;\n          }\n          break;\n        case Token.CATCH:\n          shouldDeclareOnGlobalThis = scope.isGlobal();\n          break;\n        default:\n          break;\n    }\n  } else if (parent.getType() == Token.ASSIGN && NodeUtil.isGet(parent.getFirstChild())) {\n    // If the parent node is an assignment and the LHS is a qualified name,\n    // declare it in the root scope. This case should really never happen, but\n    // apparently it does, since we have at least one unit test that falls into\n    // this block.\n    shouldDeclareOnGlobalThis = scope.isGlobal();\n  } else if (parent.getType() == Token.EXPR_RESULT) {\n    throw new IllegalStateException(\"EXPR_RESULT not allowed for GETPROP\");\n  } else if (parent.getType() == Token.COLON) {\n    // Declares in the closest scope possible. i.e. doesn't declare in global scope.\n    scopeToDeclareIn = scope.getClosestHoistScope();\n  } else {\n    throw new IllegalStateException(\"Unexpected parent type\");\n  }\n\n  String variableName = n.getQualifiedName();\n  Preconditions.checkArgument(!variableName.isEmpty());\n\n  // If n is a property, then we should really declare it in the\n  // scope where the root object appears. This helps out people\n  // who declare \"global\" names in an anonymous namespace.\n  Scope scopeToDeclareIn = scope.getClosestHoistScope();\n\n  // declared in closest scope?\n  boolean shouldSkipDeclaration = false;\n  if (scopeToDeclareIn.isDeclared(variableName, false)) {\n    shouldSkipDeclaration = true;\n    Var oldVar = scopeToDeclareIn.getVar(variableName);\n    if (parent.getType() == Token.ASSIGN && oldVar.getInitialValue() != null) {\n      type = oldVar.getType();\n      Preconditions.checkNotNull(type);\n      shouldSkipDeclaration = false;\n    } else {\n      validator.expectUndeclaredVariable(\n          sourceName, n, parent, oldVar, variableName, type);\n    }\n  }\n\n  if (!shouldSkipDeclaration) {\n    if (!inferred) {\n      setDeferredType(n, type);\n    }\n    CompilerInput input = compiler.getInput(sourceName);\n    scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n    if (shouldDeclareOnGlobalThis) {\n      ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n      boolean isExtern = input.isExtern();\n      if (inferred) {\n        globalThis.defineInferredProperty(\n            variableName,\n            type == null\n                ? getNativeType(JSTypeNative.NO_TYPE)\n                : type,\n            isExtern);\n      } else {\n        globalThis.defineDeclaredProperty(variableName, type, isExtern);\n      }\n    }\n\n    // If we're in the global scope, also declare var.prototype\n    // in the scope chain.\n    if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n      FunctionType fnType = (FunctionType) type;\n      if (fnType.isConstructor() || fnType.isInterface()) {\n        FunctionType superClassCtor = fnType.getSuperClassConstructor();\n        scopeToDeclareIn.declare(\n            variableName + \".prototype\",\n            n,\n            fnType.getPrototype(),\n            compiler.getInput(sourceName),\n            // declared iff there's an explicit supertype\n            superClassCtor == null\n                || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..55d25516 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,80 +869,120 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n+void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+  Preconditions.checkArgument(inferred || type != null);\n+\n+  // Only allow declarations of NAMEs and qualfied names.\n+  boolean shouldDeclareOnGlobalThis = false;\n+\n+  if (n.getType() == Token.NAME) {\n+    switch (parent.getType()) {\n+        case Token.FUNCTION:\n+          shouldDeclareOnGlobalThis = false;\n+          break;\n+        case Token.VAR:\n+          shouldDeclareOnGlobalThis = scope.isGlobal();\n+          break;\n+        case Token.LET:\n+        case Token.CONST:\n+          // shouldDeclareOnGlobalThis was already correctly set to false\n+          break;\n+        case Token.LP:\n+          Node grandparent = parent.getParent();\n+          switch (grandparent.getType()) {\n+            case Token.FOR:\n+            case Token.FOR_OF:\n+            case Token.FOR_IN:\n+              break;\n+            default:\n+              shouldDeclareOnGlobalThis = scope.isGlobal();\n+              break;\n+          }\n+          break;\n+        case Token.CATCH:\n+          shouldDeclareOnGlobalThis = scope.isGlobal();\n+          break;\n+        default:\n+          break;\n+    }\n+  } else if (parent.getType() == Token.ASSIGN && NodeUtil.isGet(parent.getFirstChild())) {\n+    // If the parent node is an assignment and the LHS is a qualified name,\n+    // declare it in the root scope. This case should really never happen, but\n+    // apparently it does, since we have at least one unit test that falls into\n+    // this block.\n+    shouldDeclareOnGlobalThis = scope.isGlobal();\n+  } else if (parent.getType() == Token.EXPR_RESULT) {\n+    throw new IllegalStateException(\"EXPR_RESULT not allowed for GETPROP\");\n+  } else if (parent.getType() == Token.COLON) {\n+    // Declares in the closest scope possible. i.e. doesn't declare in global scope.\n+    scopeToDeclareIn = scope.getClosestHoistScope();\n+  } else {\n+    throw new IllegalStateException(\"Unexpected parent type\");\n+  }\n+\n+  String variableName = n.getQualifiedName();\n+  Preconditions.checkArgument(!variableName.isEmpty());\n+\n+  // If n is a property, then we should really declare it in the\n+  // scope where the root object appears. This helps out people\n+  // who declare \"global\" names in an anonymous namespace.\n+  Scope scopeToDeclareIn = scope.getClosestHoistScope();\n+\n+  // declared in closest scope?\n+  boolean shouldSkipDeclaration = false;\n+  if (scopeToDeclareIn.isDeclared(variableName, false)) {\n+    shouldSkipDeclaration = true;\n+    Var oldVar = scopeToDeclareIn.getVar(variableName);\n+    if (parent.getType() == Token.ASSIGN && oldVar.getInitialValue() != null) {\n+      type = oldVar.getType();\n+      Preconditions.checkNotNull(type);\n+      shouldSkipDeclaration = false;\n+    } else {\n+      validator.expectUndeclaredVariable(\n+          sourceName, n, parent, oldVar, variableName, type);\n+    }\n+  }\n+\n+  if (!shouldSkipDeclaration) {\n+    if (!inferred) {\n+      setDeferredType(n, type);\n+    }\n+    CompilerInput input = compiler.getInput(sourceName);\n+    scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n+\n+    if (shouldDeclareOnGlobalThis) {\n+      ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+      boolean isExtern = input.isExtern();\n+      if (inferred) {\n+        globalThis.defineInferredProperty(\n+            variableName,\n+            type == null\n+                ? getNativeType(JSTypeNative.NO_TYPE)\n+                : type,\n+            isExtern);\n       } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n+        globalThis.defineDeclaredProperty(variableName, type, isExtern);\n       }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n-        }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n-        }\n+    }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n-        }\n+    // If we're in the global scope, also declare var.prototype\n+    // in the scope chain.\n+    if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n+      FunctionType fnType = (FunctionType) type;\n+      if (fnType.isConstructor() || fnType.isInterface()) {\n+        FunctionType superClassCtor = fnType.getSuperClassConstructor();\n+        scopeToDeclareIn.declare(\n+            variableName + \".prototype\",\n+            n,\n+            fnType.getPrototype(),\n+            compiler.getInput(sourceName),\n+            // declared iff there's an explicit supertype\n+            superClassCtor == null\n+                || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n       }\n     }\n+  }\n+}\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}