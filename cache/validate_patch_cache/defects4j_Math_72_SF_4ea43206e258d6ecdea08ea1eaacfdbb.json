{
    "patch": "public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial)\n            throws MaxIterationsExceededException, FunctionEvaluationException {\n\n        clearResult();\n        verifySequence(min, initial, max);\n\n        // return the initial guess if it is good enough\n        double yInitial = f.value(initial);\n        if (Math.abs(yInitial) <= functionValueAccuracy) {\n            setResult(initial, 0);\n            return result;\n        }\n\n        // return the first endpoint if it is good enough\n        double yMin = f.value(min);\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(min, 0);\n            return result;\n        }\n\n        // return the second endpoint if it is good enough\n        double yMax = f.value(max);\n        if (Math.abs(yMax) <= functionValueAccuracy) {\n            setResult(max, 0);\n            return result;\n        }\n\n        if (yMin * yMax > 0) {\n            throw MathRuntimeException.createIllegalArgumentException(\n                    NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n        }\n\n        double root = initial;\n        double yRoot = yInitial;\n\n        double xAccuracy = this.getAbsoluteAccuracy();\n\n        int i = 0;\n        while (i++ < this.getMaximalIterationCount()) {\n\n            double xOld = root;\n            double yOld = yRoot;\n\n            double xMin, xMax;\n            if (yMin * yRoot < 0) {\n                xMin = min;\n                xMax = root;\n            } else {\n                xMin = root;\n                xMax = max;\n            }\n\n            double xMid = xMin + 0.5 * (xMax - xMin);\n\n            double yMid = f.value(xMid);\n            double etemp = xMid - root;\n            double delta = yMid - yRoot;\n\n            double tolerance =\n                    Math.max(this.getRelativeAccuracy() * Math.abs(root),\n                            this.getAbsoluteAccuracy());\n\n            if (Math.abs(delta) <= tolerance) {\n                setResult(root, i);\n                return result;\n            }\n\n            if (Math.abs(etemp) < xAccuracy) {\n                double dx = delta < 0 ? -xAccuracy : xAccuracy;\n                setResult(root + dx, i);\n                return result;\n            }\n\n            double r = delta / etemp;\n            double s = delta / yRoot;\n            double t = yRoot / yMid;\n\n            double p, sign;\n            if (xOld < xMid) {\n                // i.e. new root is between old root and mid\n                sign = 1.0;\n                p = (xMin - root) * t;\n            } else {\n                // i.e. new root is between min and old root\n                sign = -1.0;\n                p = (xMax - root) * t;\n            }\n\n            double q = (xOld - root) * t;\n            double a = p - sign * q;\n            a = Math.abs(a);\n\n            double b = yMid * a;\n\n            if (b <= Math.abs(this.getFunctionValueAccuracy())) {\n                double dx = delta < 0 ? -xAccuracy : xAccuracy;\n                setResult(root + dx, i);\n                return result;\n            }\n\n            double c = sign * (yRoot - yMid) * a;\n            double d = sign * (yRoot - 2 * yMid + yMin) * b;\n\n            if (2 * d < 3 * c - Math.abs(xAccuracy * c)) {\n                double dx = delta < 0 ? -xAccuracy : xAccuracy;\n                setResult(root + dx, i);\n                return result;\n            }\n\n            if (a * (sign * c - d) >= Math.abs(xAccuracy * d)) {\n                root += d / c;\n            } else {\n                double dx = delta < 0 ? -xAccuracy : xAccuracy;\n                root += dx;\n            }\n\n            yRoot = f.value(root);\n\n            if (Math.abs(yRoot) <= functionValueAccuracy) {\n                setResult(root, i);\n                return result;\n            }\n\n            if ((root - xOld) == 0.0) {\n                double dx = delta < 0 ? -xAccuracy : xAccuracy;\n                setResult(root + dx, i);\n                return result;\n            }\n\n            if (i >= 2 && Math.abs(delta) >= Math.abs(yOld)) {\n                double dx = delta < 0 ? -xAccuracy : xAccuracy;\n                setResult(root + dx, i);\n                return result;\n            }\n\n            if (yRoot * delta > 0) {\n                xMin = xOld;\n                yMin = yOld;\n            } else {\n                xMax = xOld;\n                yMax = yOld;\n            }\n        }\n\n        throw new MaxIterationsExceededException(getMaximalIterationCount());\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex e0cb42714..792104789 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,9 +95,8 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n-                        final double min, final double max, final double initial)\n-        throws MaxIterationsExceededException, FunctionEvaluationException {\n+public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial)\n+            throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n         verifySequence(min, initial, max);\n@@ -112,35 +111,135 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n         // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n         if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n+            setResult(min, 0);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n         // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n         if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n+            setResult(max, 0);\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n         if (yMin * yMax > 0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n-                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+                    NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+        double root = initial;\n+        double yRoot = yInitial;\n+\n+        double xAccuracy = this.getAbsoluteAccuracy();\n+\n+        int i = 0;\n+        while (i++ < this.getMaximalIterationCount()) {\n+\n+            double xOld = root;\n+            double yOld = yRoot;\n+\n+            double xMin, xMax;\n+            if (yMin * yRoot < 0) {\n+                xMin = min;\n+                xMax = root;\n+            } else {\n+                xMin = root;\n+                xMax = max;\n+            }\n+\n+            double xMid = xMin + 0.5 * (xMax - xMin);\n+\n+            double yMid = f.value(xMid);\n+            double etemp = xMid - root;\n+            double delta = yMid - yRoot;\n+\n+            double tolerance =\n+                    Math.max(this.getRelativeAccuracy() * Math.abs(root),\n+                            this.getAbsoluteAccuracy());\n+\n+            if (Math.abs(delta) <= tolerance) {\n+                setResult(root, i);\n+                return result;\n+            }\n+\n+            if (Math.abs(etemp) < xAccuracy) {\n+                double dx = delta < 0 ? -xAccuracy : xAccuracy;\n+                setResult(root + dx, i);\n+                return result;\n+            }\n+\n+            double r = delta / etemp;\n+            double s = delta / yRoot;\n+            double t = yRoot / yMid;\n+\n+            double p, sign;\n+            if (xOld < xMid) {\n+                // i.e. new root is between old root and mid\n+                sign = 1.0;\n+                p = (xMin - root) * t;\n+            } else {\n+                // i.e. new root is between min and old root\n+                sign = -1.0;\n+                p = (xMax - root) * t;\n+            }\n+\n+            double q = (xOld - root) * t;\n+            double a = p - sign * q;\n+            a = Math.abs(a);\n+\n+            double b = yMid * a;\n+\n+            if (b <= Math.abs(this.getFunctionValueAccuracy())) {\n+                double dx = delta < 0 ? -xAccuracy : xAccuracy;\n+                setResult(root + dx, i);\n+                return result;\n+            }\n+\n+            double c = sign * (yRoot - yMid) * a;\n+            double d = sign * (yRoot - 2 * yMid + yMin) * b;\n+\n+            if (2 * d < 3 * c - Math.abs(xAccuracy * c)) {\n+                double dx = delta < 0 ? -xAccuracy : xAccuracy;\n+                setResult(root + dx, i);\n+                return result;\n+            }\n+\n+            if (a * (sign * c - d) >= Math.abs(xAccuracy * d)) {\n+                root += d / c;\n+            } else {\n+                double dx = delta < 0 ? -xAccuracy : xAccuracy;\n+                root += dx;\n+            }\n+\n+            yRoot = f.value(root);\n+\n+            if (Math.abs(yRoot) <= functionValueAccuracy) {\n+                setResult(root, i);\n+                return result;\n+            }\n+\n+            if ((root - xOld) == 0.0) {\n+                double dx = delta < 0 ? -xAccuracy : xAccuracy;\n+                setResult(root + dx, i);\n+                return result;\n+            }\n+\n+            if (i >= 2 && Math.abs(delta) >= Math.abs(yOld)) {\n+                double dx = delta < 0 ? -xAccuracy : xAccuracy;\n+                setResult(root + dx, i);\n+                return result;\n+            }\n+\n+            if (yRoot * delta > 0) {\n+                xMin = xOld;\n+                yMin = yOld;\n+            } else {\n+                xMax = xOld;\n+                yMax = yOld;\n+            }\n+        }\n \n+        throw new MaxIterationsExceededException(getMaximalIterationCount());\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.610001> but was:<1.0>",
    "test_result": "FAIL"
}