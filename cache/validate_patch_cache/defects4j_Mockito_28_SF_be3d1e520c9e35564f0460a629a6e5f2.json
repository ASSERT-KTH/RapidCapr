{
    "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    Field matchingField = null;\n    Object matchingCandidate = null;\n    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n        if (candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n          if (matchingField == null\n              || (matchingField.getType() == field.getType()\n                  && (field.getName().contains(matchingField.getName()\n                      + candidate.getClass().getName())))) {\n            matchingField = field;\n            matchingCandidate = candidate;\n          }\n        }\n    }\n    if (matchingField != null && matchingCandidate != null) {\n        matchingField.setAccessible(true);\n        try {\n            matchingField.set(fieldInstance, matchingCandidate);\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n    } else {\n        System.out.println(\"Unable to perform injection for \" + awaitingInjectionClazz.getSimpleName());\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..6655d0777 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,11 +88,33 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n-        }\n-    }\n+\n+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+    Field matchingField = null;\n+    Object matchingCandidate = null;\n+    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+        if (candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n+          if (matchingField == null\n+              || (matchingField.getType() == field.getType()\n+                  && (field.getName().contains(matchingField.getName()\n+                      + candidate.getClass().getName())))) {\n+            matchingField = field;\n+            matchingCandidate = candidate;\n+          }\n+        }\n+    }\n+    if (matchingField != null && matchingCandidate != null) {\n+        matchingField.setAccessible(true);\n+        try {\n+            matchingField.set(fieldInstance, matchingCandidate);\n+        } catch (IllegalAccessException e) {\n+            e.printStackTrace();\n+        }\n+    } else {\n+        System.out.println(\"Unable to perform injection for \" + awaitingInjectionClazz.getSimpleName());\n+    }\n+}\n \n     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {\n         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}