{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix d = dec.getD();\n    final RealMatrix v = dec.getV();\n\n    final double[] eigenvalues = d.getColumn(0);\n    final int n = m.getRowDimension();\n\n    double maxEigen = eigenvalues[0];\n    for (int i = 1; i < n; i++) {\n        maxEigen = Math.max(maxEigen, eigenvalues[i]);\n    }\n\n    if (maxEigen < 0) {\n        throw new IllegalArgumentException(\"Matrix is not positive semi-definite\");\n    }\n\n    final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(n);\n    final RealMatrix sqrtM = v.multiply(MatrixUtils.createRealDiagonalMatrix(FunctionUtils.sqrt(eigenvalues)))\n            .multiply(v.transpose());\n\n    final RealMatrix actualM = sqrtM.multiply(sqrtM);\n    final double diffNorm = MatrixUtils.createRealMatrix(identity.subtract(m.subtract(actualM)).getData()).getNorm();\n\n    if (diffNorm > 1e-8) {\n        throw new IllegalStateException(\"Square root computation failed \" +\n                \"(norm of difference between sqrtM * sqrtM and m is too large)\");\n    }\n\n    return sqrtM;\n}\n\nprivate static class FunctionUtils {\n    private static double[] sqrt(double[] values) {\n        double[] sqrtValues = new double[values.length];\n        for (int i = 0; i < values.length; i++) {\n            sqrtValues[i] = Math.sqrt(Math.max(0.0d, values[i]));\n        }\n        return sqrtValues;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..2732cdf66 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,45 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix d = dec.getD();\n+    final RealMatrix v = dec.getV();\n+\n+    final double[] eigenvalues = d.getColumn(0);\n+    final int n = m.getRowDimension();\n+\n+    double maxEigen = eigenvalues[0];\n+    for (int i = 1; i < n; i++) {\n+        maxEigen = Math.max(maxEigen, eigenvalues[i]);\n+    }\n+\n+    if (maxEigen < 0) {\n+        throw new IllegalArgumentException(\"Matrix is not positive semi-definite\");\n+    }\n+\n+    final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(n);\n+    final RealMatrix sqrtM = v.multiply(MatrixUtils.createRealDiagonalMatrix(FunctionUtils.sqrt(eigenvalues)))\n+            .multiply(v.transpose());\n+\n+    final RealMatrix actualM = sqrtM.multiply(sqrtM);\n+    final double diffNorm = MatrixUtils.createRealMatrix(identity.subtract(m.subtract(actualM)).getData()).getNorm();\n+\n+    if (diffNorm > 1e-8) {\n+        throw new IllegalStateException(\"Square root computation failed \" +\n+                \"(norm of difference between sqrtM * sqrtM and m is too large)\");\n     }\n+\n+    return sqrtM;\n+}\n+\n+private static class FunctionUtils {\n+    private static double[] sqrt(double[] values) {\n+        double[] sqrtValues = new double[values.length];\n+        for (int i = 0; i < values.length; i++) {\n+            sqrtValues[i] = Math.sqrt(Math.max(0.0d, values[i]));\n+        }\n+        return sqrtValues;\n+    }\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}