{
    "patch": "boolean isOverride = false;\nNode enclosingStatement = NodeUtil.getEnclosingStatement(getprop);\nif (enclosingStatement != null && enclosingStatement.getType() == Token.EXPR_RESULT) {\n  Node assign = enclosingStatement.getFirstChild();\n  isOverride = assign.getType() == Token.ASSIGN && assign.getFirstChild() == getprop;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..4bd26613 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,12 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+boolean isOverride = false;\n+Node enclosingStatement = NodeUtil.getEnclosingStatement(getprop);\n+if (enclosingStatement != null && enclosingStatement.getType() == Token.EXPR_RESULT) {\n+  Node assign = enclosingStatement.getFirstChild();\n+  isOverride = assign.getType() == Token.ASSIGN && assign.getFirstChild() == getprop;\n+}\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}