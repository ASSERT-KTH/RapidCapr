{
    "patch": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n        final double xx = v1.y * v2.z - v1.z * v2.y;\n        final double yy = v1.z * v2.x - v1.x * v2.z;\n        final double zz = v1.x * v2.y - v1.y * v2.x;\n        final double absMax = Math.max(Math.max(Math.abs(xx), Math.abs(yy)), Math.abs(zz));\n        if (absMax < 2.220446049250313E-16) {\n            // we know that norm is zero < 2.220446049250313E-16\n            throw new MathIllegalArgumentException(LocalizedCoreFormats.ZERO_NORM);\n        }\n        if (Double.isInfinite(xx) || Double.isInfinite(yy) || Double.isInfinite(zz)) {\n            throw new MathIllegalArgumentException(LocalizedCoreFormats.INFINITE_OR_NAN);\n        }\n        if (Double.isNaN(xx) || Double.isNaN(yy) || Double.isNaN(zz)) {\n            throw new MathIllegalArgumentException(LocalizedCoreFormats.NAN_ELEMENT);\n        }\n\n        return new Vector3D(xx, yy, zz);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..a63d0148d 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -456,23 +456,23 @@ public class Vector3D implements Serializable {\n    */\n   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+        final double xx = v1.y * v2.z - v1.z * v2.y;\n+        final double yy = v1.z * v2.x - v1.x * v2.z;\n+        final double zz = v1.x * v2.y - v1.y * v2.x;\n+        final double absMax = Math.max(Math.max(Math.abs(xx), Math.abs(yy)), Math.abs(zz));\n+        if (absMax < 2.220446049250313E-16) {\n+            // we know that norm is zero < 2.220446049250313E-16\n+            throw new MathIllegalArgumentException(LocalizedCoreFormats.ZERO_NORM);\n+        }\n+        if (Double.isInfinite(xx) || Double.isInfinite(yy) || Double.isInfinite(zz)) {\n+            throw new MathIllegalArgumentException(LocalizedCoreFormats.INFINITE_OR_NAN);\n+        }\n+        if (Double.isNaN(xx) || Double.isNaN(yy) || Double.isNaN(zz)) {\n+            throw new MathIllegalArgumentException(LocalizedCoreFormats.NAN_ELEMENT);\n+        }\n+\n+        return new Vector3D(xx, yy, zz);\n+    }\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}