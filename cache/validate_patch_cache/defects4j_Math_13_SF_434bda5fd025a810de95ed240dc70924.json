{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    double maxNorm = m.getNorm();\n    if (maxNorm > 1.0) {\n        m = m.scalarMultiply(1.0 / maxNorm);\n    }\n    SchurTransformer transformer = new SchurTransformer(m);\n    RealMatrix t = transformer.getT();\n    int n = t.getRowDimension();\n    double[][] sqrtData = new double[n][n];\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (i == j) {\n                sqrtData[i][i] = Math.sqrt(t.getEntry(i, i));\n            } else {\n                sqrtData[i][j] = 0.0;\n            }\n        }\n    }\n    RealMatrix sqrtT = MatrixUtils.createRealMatrix(sqrtData);\n    RealMatrix sqrtM = transformer.getQ().multiply(sqrtT).multiply(transformer.getQ().transpose());\n    return sqrtM.scalarMultiply(maxNorm);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..0f624fa7e 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,26 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    double maxNorm = m.getNorm();\n+    if (maxNorm > 1.0) {\n+        m = m.scalarMultiply(1.0 / maxNorm);\n     }\n+    SchurTransformer transformer = new SchurTransformer(m);\n+    RealMatrix t = transformer.getT();\n+    int n = t.getRowDimension();\n+    double[][] sqrtData = new double[n][n];\n+    for (int i = 0; i < n; i++) {\n+        for (int j = 0; j < n; j++) {\n+            if (i == j) {\n+                sqrtData[i][i] = Math.sqrt(t.getEntry(i, i));\n+            } else {\n+                sqrtData[i][j] = 0.0;\n+            }\n+        }\n+    }\n+    RealMatrix sqrtT = MatrixUtils.createRealMatrix(sqrtData);\n+    RealMatrix sqrtM = transformer.getQ().multiply(sqrtT).multiply(transformer.getQ().transpose());\n+    return sqrtM.scalarMultiply(maxNorm);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}