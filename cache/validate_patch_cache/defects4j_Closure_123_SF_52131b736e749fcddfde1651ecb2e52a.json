{
    "patch": "public static String fixCode(String code) {\n    int index = code.indexOf(\"for(\");\n    while (index != -1) {\n        int openPar = code.indexOf('(', index);\n        int closePar = findMatchingParenthesis(code, openPar);\n        int firstSemi = code.indexOf(';', openPar);\n        int secondSemi = code.indexOf(';', firstSemi + 1);\n        String statement = code.substring(firstSemi + 1, secondSemi);\n        if (statement.contains(\"in\")) {\n            int start = statement.indexOf('[');\n            int end = findMatchingParenthesis(statement, start);\n            String arrayExpression = statement.substring(start + 1, end - 1);\n            statement = statement.replace(\"in\", \":\");\n            statement = \"Arrays.asList(\" + arrayExpression + \").contains(\" + statement + \")\";\n            code = code.substring(0, firstSemi + 1) + statement + code.substring(secondSemi);\n        }\n        index = code.indexOf(\"for(\", index + 1);\n    }\n    return code;\n}\n\npublic static int findMatchingParenthesis(String code, int startIndex) {\n    int count = 0;\n    int currentIndex = startIndex;\n    do {\n        char currentChar = code.charAt(currentIndex);\n        if (currentChar == '(' || currentChar == '[' || currentChar == '{') {\n            count++;\n        } else if (currentChar == ')' || currentChar == ']' || currentChar == '}') {\n            count--;\n        }\n        currentIndex++;\n    } while (count != 0);\n    return currentIndex;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..ea1a7675 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,41 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    int index = code.indexOf(\"for(\");\n+    while (index != -1) {\n+        int openPar = code.indexOf('(', index);\n+        int closePar = findMatchingParenthesis(code, openPar);\n+        int firstSemi = code.indexOf(';', openPar);\n+        int secondSemi = code.indexOf(';', firstSemi + 1);\n+        String statement = code.substring(firstSemi + 1, secondSemi);\n+        if (statement.contains(\"in\")) {\n+            int start = statement.indexOf('[');\n+            int end = findMatchingParenthesis(statement, start);\n+            String arrayExpression = statement.substring(start + 1, end - 1);\n+            statement = statement.replace(\"in\", \":\");\n+            statement = \"Arrays.asList(\" + arrayExpression + \").contains(\" + statement + \")\";\n+            code = code.substring(0, firstSemi + 1) + statement + code.substring(secondSemi);\n+        }\n+        index = code.indexOf(\"for(\", index + 1);\n+    }\n+    return code;\n+}\n+\n+public static int findMatchingParenthesis(String code, int startIndex) {\n+    int count = 0;\n+    int currentIndex = startIndex;\n+    do {\n+        char currentChar = code.charAt(currentIndex);\n+        if (currentChar == '(' || currentChar == '[' || currentChar == '{') {\n+            count++;\n+        } else if (currentChar == ')' || currentChar == ']' || currentChar == '}') {\n+            count--;\n+        }\n+        currentIndex++;\n+    } while (count != 0);\n+    return currentIndex;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}