{
    "patch": "// The following hunk checks for the case where the multiplication of Long.MIN_VALUE with -1 overflows a long\nif (val2 == -1 && val1 == Long.MIN_VALUE) {\n    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n} else if (val2 == -1) {\n    return -val1;\n}\n\n// The original code allows 0 and 1 to bypass the multiplication check\n// this code is added to include them in the check\nif (val2 == 0 || val2 == 1) {\n    return val1 * val2;\n}\n\n// check if the multiplication of val1 and val2 overflows a long\nlong result = val1 * val2;\nif (val2 != 0 && result / val2 != val1) {\n    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n}\nreturn result;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/field/FieldUtils.java b/src/main/java/org/joda/time/field/FieldUtils.java\nindex a0fe7e2d..d550a34e 100644\n--- a/src/main/java/org/joda/time/field/FieldUtils.java\n+++ b/src/main/java/org/joda/time/field/FieldUtils.java\n@@ -135,6 +135,25 @@ public class FieldUtils {\n     public static long safeMultiply(long val1, int val2) {\n         switch (val2) {\n             case -1:\n+// The following hunk checks for the case where the multiplication of Long.MIN_VALUE with -1 overflows a long\n+if (val2 == -1 && val1 == Long.MIN_VALUE) {\n+    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n+} else if (val2 == -1) {\n+    return -val1;\n+}\n+\n+// The original code allows 0 and 1 to bypass the multiplication check\n+// this code is added to include them in the check\n+if (val2 == 0 || val2 == 1) {\n+    return val1 * val2;\n+}\n+\n+// check if the multiplication of val1 and val2 overflows a long\n+long result = val1 * val2;\n+if (val2 != 0 && result / val2 != val1) {\n+    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n+}\n+return result;\n                 return -val1;\n             case 0:\n                 return 0L;",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}