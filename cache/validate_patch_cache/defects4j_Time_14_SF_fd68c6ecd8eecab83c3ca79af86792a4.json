{
    "patch": "        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n\n            // special handling for month-day\n            if (partial instanceof MonthDay) {\n                MonthDay monthDay = (MonthDay) partial;\n                int newMonth = iChronology.monthOfYear().get(instant);\n                int newDay = iChronology.dayOfMonth().getMinimumValue(newMonth);\n                int oldDay = monthDay.getDayOfMonth();\n                try {\n                    newDay = iChronology.dayOfMonth().set(instant, oldDay).get(newMonth);\n                } catch (IllegalFieldValueException e) {\n                    // do nothing\n                }\n                values = iChronology.get(partial.withDayOfMonth(newDay), instant);\n            } else {\n                values = iChronology.get(partial, instant);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..92d2f3f8 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,28 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n             instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n-    }\n+\n+            // special handling for month-day\n+            if (partial instanceof MonthDay) {\n+                MonthDay monthDay = (MonthDay) partial;\n+                int newMonth = iChronology.monthOfYear().get(instant);\n+                int newDay = iChronology.dayOfMonth().getMinimumValue(newMonth);\n+                int oldDay = monthDay.getDayOfMonth();\n+                try {\n+                    newDay = iChronology.dayOfMonth().set(instant, oldDay).get(newMonth);\n+                } catch (IllegalFieldValueException e) {\n+                    // do nothing\n+                }\n+                values = iChronology.get(partial.withDayOfMonth(newDay), instant);\n+            } else {\n+                values = iChronology.get(partial, instant);\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}