{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n\n    double index = right.getDouble();\n    if (!isSafeIndex(index)) {\n        // index is not within the bounds of integer index\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    int intIndex = (int) index;\n\n    Node current = left.getFirstChild();\n    Node elem = null;\n    int i = 0;\n    while (current != null) {\n        if (i == intIndex) {\n            // index matches element position\n            elem = current;\n            break;\n        }\n        i++;\n        current = current.getNext();\n    }\n\n    if (elem == null) {\n        // index out of bounds\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    if (elem.isEmpty()) {\n        elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n        left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}\n\nprivate boolean isSafeIndex(double index) {\n    return index >= 0 && index < Integer.MAX_VALUE && Math.floor(index) == index;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..3160ee40 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,57 +1419,65 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n+\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n     if (isAssignmentTarget(n)) {\n-      return n;\n+        return n;\n     }\n \n     if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n+        // Sometimes people like to use complex expressions to index into\n+        // arrays, or strings to index into array methods.\n+        return n;\n     }\n \n     double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n+    if (!isSafeIndex(index)) {\n+        // index is not within the bounds of integer index\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n     }\n \n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n+    int intIndex = (int) index;\n \n     Node current = left.getFirstChild();\n     Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n+    int i = 0;\n+    while (current != null) {\n+        if (i == intIndex) {\n+            // index matches element position\n+            elem = current;\n+            break;\n+        }\n+        i++;\n+        current = current.getNext();\n     }\n \n     if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+        // index out of bounds\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n     }\n \n     if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+        elem = NodeUtil.newUndefinedNode(elem);\n     } else {\n-      left.removeChild(elem);\n+        left.removeChild(elem);\n     }\n \n     // Replace the entire GETELEM with the value\n     n.getParent().replaceChild(n, elem);\n     reportCodeChange();\n     return elem;\n-  }\n+}\n+\n+private boolean isSafeIndex(double index) {\n+    return index >= 0 && index < Integer.MAX_VALUE && Math.floor(index) == index;\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "junit.framework.AssertionFailedError: Array index out of bounds: NUMBER 0.5 1 [source_file: testcode]",
    "test_result": "FAIL"
}