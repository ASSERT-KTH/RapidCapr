{
    "patch": "    // Only handle anonymous types (e.g. `function({x: string}) {}`) and record types (e.g. `{x: string}`).\n    if (!constraintObj.isRecordType() && !(constraintObj.isFunctionType() && constraintObj.getDisplayName().equals(\"\"))) {\n      return;\n    }\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by taking each property on the\n    // record and trying to match properties on this object.\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!hasProperty(prop)) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                .getLeastSupertype(propType);\n          }\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    } else if (constraintObj.isFunctionType() && constraintObj.getParams().size() == 1) {\n      JSType paramType = constraintObj.getParams().get(0).getType();\n      if (!paramType.isUnknownType()) {\n        defineInferredProperty(\"x\", paramType, null);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..e1c7cd68 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,8 +552,10 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n+    // Only handle anonymous types (e.g. `function({x: string}) {}`) and record types (e.g. `{x: string}`).\n+    if (!constraintObj.isRecordType() && !(constraintObj.isFunctionType() && constraintObj.getDisplayName().equals(\"\"))) {\n+      return;\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //\n@@ -561,9 +563,8 @@ class PrototypeObjectType extends ObjectType {\n     // function f(constraintObj) {}\n     // f({});\n     //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n+    // We want to modify the object literal to match the constraint, by taking each property on the\n+    // record and trying to match properties on this object.\n     if (constraintObj.isRecordType()) {\n       for (String prop : constraintObj.getOwnPropertyNames()) {\n         JSType propType = constraintObj.getPropertyType(prop);\n@@ -576,6 +577,10 @@ class PrototypeObjectType extends ObjectType {\n           defineInferredProperty(prop, typeToInfer, null);\n         }\n       }\n+    } else if (constraintObj.isFunctionType() && constraintObj.getParams().size() == 1) {\n+      JSType paramType = constraintObj.getParams().get(0).getType();\n+      if (!paramType.isUnknownType()) {\n+        defineInferredProperty(\"x\", paramType, null);\n+      }\n     }\n-  }\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}