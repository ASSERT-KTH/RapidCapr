{
    "patch": "private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node fnNameOrThis = callNode.getFirstChild();\n    if (!fnNameOrThis.isName() && !fnNameOrThis.isThis()) {\n      // This is not a simple function call (e.g. call to a property), cannot inline\n      return CanInlineResult.NO;\n    }\n\n    Node cArg = fnNameOrThis.getNext();\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    boolean seenNamedParameter = false;\n    while (fnParam != null && (cArg != null || seenNamedParameter)) {\n      if (cArg != null && cArg.isSpread()) {\n        // Spread elements are not supported, cannot inline\n        return CanInlineResult.NO;\n      }\n\n      if (fnParam.isName()) {\n        seenNamedParameter = true;\n\n        if (cArg == null) {\n          // If we have already seen a named parameter but no corresponding argument, cannot inline\n          return CanInlineResult.NO;\n        }\n\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler) ||\n            (NodeUtil.mayEffectMutableState(cArg, compiler) &&\n             NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1)) {\n          // If arg has side effects or a mutable arg is evaluated more than once, cannot inline\n          return CanInlineResult.NO;\n        }\n\n        // Move to the next arg/param\n        cArg = cArg.getNext();\n        fnParam = fnParam.getNext();\n      } else {\n        // Unnamed arguments don't need to match anything in the param list\n        if (NodeUtil.mayHaveSideEffects(fnParam, compiler)) {\n          // If an unnamed parameter has side effects, cannot inline\n          return CanInlineResult.NO;\n        }\n\n        // Move to the next param\n        fnParam = fnParam.getNext();\n      }\n    }\n\n    // If we have any remaining args or params that are not spread or unnamed, cannot inline\n    if (fnParam != null && fnParam.isName()) {\n      return CanInlineResult.NO;\n    }\n    if (cArg != null && cArg.isSpread()) {\n      return CanInlineResult.NO;\n    }\n\n    // Otherwise, inlining can proceed\n    return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..06c2e2a1 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,7 +686,7 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n+private CanInlineResult canInlineReferenceDirectly(\n       Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n@@ -694,59 +694,65 @@ class FunctionInjector {\n \n     Node block = fnNode.getLastChild();\n \n-\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n-\n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n+    Node fnNameOrThis = callNode.getFirstChild();\n+    if (!fnNameOrThis.isName() && !fnNameOrThis.isThis()) {\n+      // This is not a simple function call (e.g. call to a property), cannot inline\n+      return CanInlineResult.NO;\n     }\n \n+    Node cArg = fnNameOrThis.getNext();\n+\n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+    boolean seenNamedParameter = false;\n+    while (fnParam != null && (cArg != null || seenNamedParameter)) {\n+      if (cArg != null && cArg.isSpread()) {\n+        // Spread elements are not supported, cannot inline\n+        return CanInlineResult.NO;\n       }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+      if (fnParam.isName()) {\n+        seenNamedParameter = true;\n+\n+        if (cArg == null) {\n+          // If we have already seen a named parameter but no corresponding argument, cannot inline\n           return CanInlineResult.NO;\n         }\n+\n+        if (NodeUtil.mayHaveSideEffects(cArg, compiler) ||\n+            (NodeUtil.mayEffectMutableState(cArg, compiler) &&\n+             NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1)) {\n+          // If arg has side effects or a mutable arg is evaluated more than once, cannot inline\n+          return CanInlineResult.NO;\n+        }\n+\n+        // Move to the next arg/param\n         cArg = cArg.getNext();\n+        fnParam = fnParam.getNext();\n+      } else {\n+        // Unnamed arguments don't need to match anything in the param list\n+        if (NodeUtil.mayHaveSideEffects(fnParam, compiler)) {\n+          // If an unnamed parameter has side effects, cannot inline\n+          return CanInlineResult.NO;\n+        }\n+\n+        // Move to the next param\n+        fnParam = fnParam.getNext();\n       }\n     }\n \n+    // If we have any remaining args or params that are not spread or unnamed, cannot inline\n+    if (fnParam != null && fnParam.isName()) {\n+      return CanInlineResult.NO;\n+    }\n+    if (cArg != null && cArg.isSpread()) {\n+      return CanInlineResult.NO;\n+    }\n+\n+    // Otherwise, inlining can proceed\n     return CanInlineResult.YES;\n-  }\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}