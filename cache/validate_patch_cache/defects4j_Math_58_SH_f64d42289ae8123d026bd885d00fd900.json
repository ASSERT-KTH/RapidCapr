{
    "patch": "public double[] fit() {\n    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n    final MaximumLikelihoodEstimator fitter = new MaximumLikelihoodEstimator(new Gaussian.Parametric(), getObservations());\n    final double[] optimized = fitter.estimate();\n\n    if (Double.isNaN(optimized[0]) || Double.isNaN(optimized[1]) || Double.isNaN(optimized[2])) {\n        optimized[0] = Double.NaN;\n        optimized[1] = Double.NaN;\n        optimized[2] = Double.NaN;\n    }\n\n    return optimized;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..1247f0e36 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -118,7 +118,19 @@ public class GaussianFitter extends CurveFitter {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+public double[] fit() {\n+    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n+    final MaximumLikelihoodEstimator fitter = new MaximumLikelihoodEstimator(new Gaussian.Parametric(), getObservations());\n+    final double[] optimized = fitter.estimate();\n+\n+    if (Double.isNaN(optimized[0]) || Double.isNaN(optimized[1]) || Double.isNaN(optimized[2])) {\n+        optimized[0] = Double.NaN;\n+        optimized[1] = Double.NaN;\n+        optimized[2] = Double.NaN;\n+    }\n+\n+    return optimized;\n+}\n     }\n \n     /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}