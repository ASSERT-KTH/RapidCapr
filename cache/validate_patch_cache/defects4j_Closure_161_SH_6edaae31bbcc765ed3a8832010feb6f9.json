{
    "patch": "    if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {\n      Node init = parent.getFirstChild().getNext();\n      Node condition = init.getNext();\n      Node increment = condition.getNext();\n      if (init.getType() == Token.VAR && init.getFirstChild().getNext() == left &&\n          condition.getType() == Token.LT && condition.getFirstChild().isFirstChildOf(n) &&\n          increment.getType() == Token.INC && increment.getFirstChild().isFirstChildOf(n)) {\n        // GETELEM is the loop variable, can't fold\n        return n;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..3d1bfb2e 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,17 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+    if (parent.getType() == Token.FOR && parent.getChildCount() == 4) {\n+      Node init = parent.getFirstChild().getNext();\n+      Node condition = init.getNext();\n+      Node increment = condition.getNext();\n+      if (init.getType() == Token.VAR && init.getFirstChild().getNext() == left &&\n+          condition.getType() == Token.LT && condition.getFirstChild().isFirstChildOf(n) &&\n+          increment.getType() == Token.INC && increment.getFirstChild().isFirstChildOf(n)) {\n+        // GETELEM is the loop variable, can't fold\n+        return n;\n+      }\n+    }\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}