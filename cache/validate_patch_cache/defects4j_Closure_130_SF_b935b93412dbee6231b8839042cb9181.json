{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n    Deque<Name> workList = new ArrayDeque<Name>();\n    workList.addAll(namespace.getNameForest());\n\n    while (!workList.isEmpty()) {\n        Name name = workList.removeFirst();\n\n        if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n            continue;\n        }\n\n        if (name.aliasingGets == 0 && name.localSets == 0 && name.props != null &&\n                name.props.size() == 1 && Iterables.getOnlyElement(name.props).getAliasCount() == 1) {\n            inlineLocalAliasIfPossible(name); // try to inline any local aliases\n            if (name.getBaseName() != null) {\n                inlineQualifiedNameIfPossible(name); // try to inline qualified name if any\n            }\n        } else if (name.getAliasCount() > 0 && name.getGlobalSets() == 1 && name.getLocalSets() == 0 &&\n                name.getProps() == null) {\n            inlineNonlocalAliasIfPossible(name); // try to inline nonlocal alias\n        }\n\n        if ((name.getType() == Name.Type.OBJECTLIT || name.getType() == Name.Type.FUNCTION) &&\n                name.getAliasCount() == 0 && name.getProps() != null) {\n            workList.addAll(name.getProps()); // add all of name's children that meet condition (a) to worklist\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..39d4d641 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,43 +158,34 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n-    // Invariant: All the names in the worklist meet condition (a).\n-    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n+private void inlineAliases(GlobalNamespace namespace) {\n+    Deque<Name> workList = new ArrayDeque<Name>();\n+    workList.addAll(namespace.getNameForest());\n+\n     while (!workList.isEmpty()) {\n-      Name name = workList.pop();\n+        Name name = workList.removeFirst();\n \n-      // Don't attempt to inline a getter or setter property as a variable.\n-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n-        continue;\n-      }\n+        if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+            continue;\n+        }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+        if (name.aliasingGets == 0 && name.localSets == 0 && name.props != null &&\n+                name.props.size() == 1 && Iterables.getOnlyElement(name.props).getAliasCount() == 1) {\n+            inlineLocalAliasIfPossible(name); // try to inline any local aliases\n+            if (name.getBaseName() != null) {\n+                inlineQualifiedNameIfPossible(name); // try to inline qualified name if any\n             }\n-          }\n+        } else if (name.getAliasCount() > 0 && name.getGlobalSets() == 1 && name.getLocalSets() == 0 &&\n+                name.getProps() == null) {\n+            inlineNonlocalAliasIfPossible(name); // try to inline nonlocal alias\n         }\n-      }\n \n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n-      }\n+        if ((name.getType() == Name.Type.OBJECTLIT || name.getType() == Name.Type.FUNCTION) &&\n+                name.getAliasCount() == 0 && name.getProps() != null) {\n+            workList.addAll(name.getProps()); // add all of name's children that meet condition (a) to worklist\n+        }\n     }\n-  }\n+}\n \n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}