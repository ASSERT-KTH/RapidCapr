{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandler<T> newMockHandler = new MockHandler<T>();\n    newMockHandler.setInstance(mock);\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    if (oldMockHandler instanceof MockHandler<?>) {\n        MockHandler<T> oldHandler = (MockHandler<T>) oldMockHandler;\n        newMockHandler.setDefaultAnswer(oldHandler.getDefaultAnswer());\n    }\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    if (mock instanceof Factory) {\n        Factory factory = (Factory) mock;\n        factory.setCallbacks(new Callback[] {newFilter});\n    } else {\n        ((ByteBuddyInterceptor) mock).$$_setMockitoInterceptor(newFilter);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..a10100b96 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,23 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandler<T> newMockHandler = new MockHandler<T>();\n+    newMockHandler.setInstance(mock);\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    if (oldMockHandler instanceof MockHandler<?>) {\n+        MockHandler<T> oldHandler = (MockHandler<T>) oldMockHandler;\n+        newMockHandler.setDefaultAnswer(oldHandler.getDefaultAnswer());\n+    }\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    if (mock instanceof Factory) {\n+        Factory factory = (Factory) mock;\n+        factory.setCallbacks(new Callback[] {newFilter});\n+    } else {\n+        ((ByteBuddyInterceptor) mock).$$_setMockitoInterceptor(newFilter);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: no suitable constructor found for MockHandler(no arguments)",
    "test_result": "ERROR"
}