{
    "patch": "\n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        boolean lenient = ((chrono.getZone() instanceof LenientDateTimeZone) || parser.isLenient());\n        int defaultYear;\n        if (lenient) {\n            defaultYear = chrono.year().get(instantMillis);\n        } else {\n            instantMillis = chrono.millisOfDay().set(instantMillis, 0);\n            defaultYear = chrono.year().get(instantMillis);\n        }\n\n        // lenient parsers may require a year, but strict parsers do not\n        boolean needToResolveYear = ((!lenient && iResolverStyle == ResolverStyle.STRICT) || iResolverStyle == ResolverStyle.SMART);\n\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n                instantMillis, chrono, iLocale, iPivotYear, defaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        if (lenient) {\n            // lenient sequence skips these steps\n            instant.setMillis(bucket.computeMillis(true, text));\n            if (needToResolveYear) {\n                defaultYear = bucket.getDateTime().getYear();\n            }\n        } else {\n            ResolverInstantMillis resolver = createResolverBucket(bucket, needToResolveYear);\n            newPos = resolve(parseContext, bucket, newPos, resolver);\n            if (newPos < 0) {\n                newPos = ~newPos;\n                instant.setMillis(bucket.computeMillis(false, text));\n                if (needToResolveYear) {\n                    defaultYear = bucket.getDateTime().getYear();\n                }\n            } else {\n                // success case\n                instant.setMillis(resolver.computeMillis());\n                if (iZone != null) {\n                    instant.setZone(iZone);\n                } else if (bucket.getZone() != null) {\n                    instant.setChronology(chrono.withZone(bucket.getZone()));\n                }\n                return newPos;\n            }\n        }\n\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            if (iZone != null) {\n                if (!parsedZone.equals(iZone)) {\n                    throw new IllegalArgumentException(\"The parsed zone did not match the requested zone\");\n                }\n            } else {\n                chrono = chrono.withZone(parsedZone);\n                instant.setChronology(chrono);\n            }\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n            instant.setChronology(chrono);\n        }\n        if (needToResolveYear) {   // do this after setting zone\n            // century and year might have been parsed, so we need to re-evaluate the default year\n            int year = DateTimeUtils.getChronology(chrono).year().get(instant);\n            if (year != defaultYear) {\n                instant.setYear(year);\n                if (iResolverStyle == ResolverStyle.LENIENT) {\n                    // Have to recompute millis because fields have changed\n                    instant.setMillis(chrono.setYear(instantMillis, year));\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..321e9f9a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,76 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n+\n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n+        boolean lenient = ((chrono.getZone() instanceof LenientDateTimeZone) || parser.isLenient());\n+        int defaultYear;\n+        if (lenient) {\n+            defaultYear = chrono.year().get(instantMillis);\n+        } else {\n+            instantMillis = chrono.millisOfDay().set(instantMillis, 0);\n+            defaultYear = chrono.year().get(instantMillis);\n+        }\n+\n+        // lenient parsers may require a year, but strict parsers do not\n+        boolean needToResolveYear = ((!lenient && iResolverStyle == ResolverStyle.STRICT) || iResolverStyle == ResolverStyle.SMART);\n+\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+                instantMillis, chrono, iLocale, iPivotYear, defaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n+        if (lenient) {\n+            // lenient sequence skips these steps\n+            instant.setMillis(bucket.computeMillis(true, text));\n+            if (needToResolveYear) {\n+                defaultYear = bucket.getDateTime().getYear();\n+            }\n+        } else {\n+            ResolverInstantMillis resolver = createResolverBucket(bucket, needToResolveYear);\n+            newPos = resolve(parseContext, bucket, newPos, resolver);\n+            if (newPos < 0) {\n+                newPos = ~newPos;\n+                instant.setMillis(bucket.computeMillis(false, text));\n+                if (needToResolveYear) {\n+                    defaultYear = bucket.getDateTime().getYear();\n+                }\n+            } else {\n+                // success case\n+                instant.setMillis(resolver.computeMillis());\n+                if (iZone != null) {\n+                    instant.setZone(iZone);\n+                } else if (bucket.getZone() != null) {\n+                    instant.setChronology(chrono.withZone(bucket.getZone()));\n+                }\n+                return newPos;\n+            }\n+        }\n+\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();\n             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+            if (iZone != null) {\n+                if (!parsedZone.equals(iZone)) {\n+                    throw new IllegalArgumentException(\"The parsed zone did not match the requested zone\");\n+                }\n+            } else {\n+                chrono = chrono.withZone(parsedZone);\n+                instant.setChronology(chrono);\n+            }\n         } else if (bucket.getZone() != null) {\n             chrono = chrono.withZone(bucket.getZone());\n+            instant.setChronology(chrono);\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n-    }\n+        if (needToResolveYear) {   // do this after setting zone\n+            // century and year might have been parsed, so we need to re-evaluate the default year\n+            int year = DateTimeUtils.getChronology(chrono).year().get(instant);\n+            if (year != defaultYear) {\n+                instant.setYear(year);\n+                if (iResolverStyle == ResolverStyle.LENIENT) {\n+                    // Have to recompute millis because fields have changed\n+                    instant.setMillis(chrono.setYear(instantMillis, year));\n+                }\n+            }\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}