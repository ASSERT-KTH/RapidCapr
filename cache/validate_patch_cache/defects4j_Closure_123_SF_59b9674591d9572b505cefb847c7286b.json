{
    "patch": "public String fixCode(String code) {\n    String fixedCode = code;\n    if (code.contains(\"for(\") && code.contains(\" in \")) {\n        int startIndex = code.indexOf(\"for(\");\n        int endIndex = code.indexOf(\"{\", startIndex);\n\n        String forLoop = code.substring(startIndex, endIndex);\n\n        String[] parts = forLoop.split(\";\");\n        String iteratorExpression = parts[0].trim();\n        int inIndex = iteratorExpression.indexOf(\" in \");\n\n        String beforeIn = iteratorExpression.substring(0, inIndex).trim();\n        String afterIn = iteratorExpression.substring(inIndex + 3).trim();\n\n        String newLoop = \"for (\" + beforeIn + \" : \" + afterIn + \")\";\n\n        for (int i = 1; i < parts.length; i++) {\n            newLoop += \";\" + parts[i].trim();\n        }\n\n        fixedCode = code.substring(0, startIndex) + newLoop + code.substring(endIndex);\n    }\n\n    return fixedCode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..562c68b9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,32 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+    String fixedCode = code;\n+    if (code.contains(\"for(\") && code.contains(\" in \")) {\n+        int startIndex = code.indexOf(\"for(\");\n+        int endIndex = code.indexOf(\"{\", startIndex);\n+\n+        String forLoop = code.substring(startIndex, endIndex);\n+\n+        String[] parts = forLoop.split(\";\");\n+        String iteratorExpression = parts[0].trim();\n+        int inIndex = iteratorExpression.indexOf(\" in \");\n+\n+        String beforeIn = iteratorExpression.substring(0, inIndex).trim();\n+        String afterIn = iteratorExpression.substring(inIndex + 3).trim();\n+\n+        String newLoop = \"for (\" + beforeIn + \" : \" + afterIn + \")\";\n+\n+        for (int i = 1; i < parts.length; i++) {\n+            newLoop += \";\" + parts[i].trim();\n+        }\n+\n+        fixedCode = code.substring(0, startIndex) + newLoop + code.substring(endIndex);\n+    }\n+\n+    return fixedCode;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}