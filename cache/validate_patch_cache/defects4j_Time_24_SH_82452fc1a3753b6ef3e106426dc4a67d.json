{
    "patch": "boolean adjusted = false;\ntry {\n    for (int i = 0; i < count; i++) {\n        long newMillis = savedFields[i].set(millis, resetFields);\n        if (newMillis == millis && i > 0 && i < count - 1) {\n            // May be stacking on a group of same-value fields, such as minute and second;\n            // if quantity of fields to update > 1, wait to sort and re-evaluate\n            continue;\n        }\n        if (!adjusted && millis != newMillis) {\n            adjusted = true;\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField firstField = savedFields[i].iField.getDurationField();\n            if (compareReverse(firstField, months) >= 0 && compareReverse(firstField, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n            if (i < count - 1) {\n                // If this field has changed value (and is not the last field), then re-sort fields and re-evaluate\n                sort(savedFields, count);\n                i = -1;  // re-process the array\n                millis = savedFields[0].set(0, false);  // reset millis\n                continue;\n            }\n        }\n        if (newMillis > 0 && millis < 0 || newMillis < 0 && millis > 0) {\n            String message;\n            if (newMillis < 0) {\n                message = \"The date is too far in the past to be represented \" + newMillis;\n            } else {\n                message = \"The date is too far in the future to be represented \" + newMillis;\n            }\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        } else {\n            millis = newMillis;\n        }\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..95030e7d 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,53 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+boolean adjusted = false;\n+try {\n+    for (int i = 0; i < count; i++) {\n+        long newMillis = savedFields[i].set(millis, resetFields);\n+        if (newMillis == millis && i > 0 && i < count - 1) {\n+            // May be stacking on a group of same-value fields, such as minute and second;\n+            // if quantity of fields to update > 1, wait to sort and re-evaluate\n+            continue;\n+        }\n+        if (!adjusted && millis != newMillis) {\n+            adjusted = true;\n+            DurationField months = DurationFieldType.months().getField(iChrono);\n+            DurationField days = DurationFieldType.days().getField(iChrono);\n+            DurationField firstField = savedFields[i].iField.getDurationField();\n+            if (compareReverse(firstField, months) >= 0 && compareReverse(firstField, days) <= 0) {\n+                saveField(DateTimeFieldType.year(), iDefaultYear);\n+                return computeMillis(resetFields, text);\n+            }\n+            if (i < count - 1) {\n+                // If this field has changed value (and is not the last field), then re-sort fields and re-evaluate\n+                sort(savedFields, count);\n+                i = -1;  // re-process the array\n+                millis = savedFields[0].set(0, false);  // reset millis\n+                continue;\n+            }\n+        }\n+        if (newMillis > 0 && millis < 0 || newMillis < 0 && millis > 0) {\n+            String message;\n+            if (newMillis < 0) {\n+                message = \"The date is too far in the past to be represented \" + newMillis;\n+            } else {\n+                message = \"The date is too far in the future to be represented \" + newMillis;\n+            }\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+            }\n+            throw new IllegalArgumentException(message);\n+        } else {\n+            millis = newMillis;\n+        }\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "java.lang.IllegalArgumentException: Cannot parse \"2005-10 AD\": The date is too far in the future to be represented 1104537600000",
    "test_result": "FAIL"
}