{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    // we must check if the next transition is farther away than the current offset difference\n                    // if it is, then we use the offsetLocal, else we use the offsetAdjusted\n                    int nextOffsetAdjusted = getOffset(nextAdjusted);\n                    int nextDiff = nextOffsetAdjusted - offsetAdjusted;\n                    if (nextDiff < (offsetLocal - offsetAdjusted)) {\n                        return offsetLocal;\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..59cd8a4c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,19 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    // we must check if the next transition is farther away than the current offset difference\n+                    // if it is, then we use the offsetLocal, else we use the offsetAdjusted\n+                    int nextOffsetAdjusted = getOffset(nextAdjusted);\n+                    int nextDiff = nextOffsetAdjusted - offsetAdjusted;\n+                    if (nextDiff < (offsetLocal - offsetAdjusted)) {\n+                        return offsetLocal;\n+                    }\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}