{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n      !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n\n  if (joinString == null) {\n    return;\n  }\n\n  int constantCount = 0;\n  int strCount = 0;\n\n  for (Node elem = arrayNode.getFirstChild(); elem != null;\n       elem = elem.getNext()) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      String s = NodeUtil.getStringValue(elem);\n      if (s == null) {\n        return;\n      }\n      ++constantCount;\n      strCount += s.length();\n    } else {\n      return;\n    }\n  }\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  int foldedSize = strCount + (constantCount - 1) * joinString.length() + 2;\n\n  if (foldedSize >= originalSize) {\n    return;\n  }\n\n  String foldedString = \"\";\n  for (Node elem = arrayNode.getFirstChild(); elem != null;\n       elem = elem.getNext()) {\n    String s = NodeUtil.getStringValue(elem);\n    foldedString += s;\n    if (elem.getNext() != null) {\n      foldedString += joinString;\n    }\n  }\n\n  Node foldedStringNode = Node.newString(foldedString);\n  parent.replaceChild(n, foldedStringNode);\n  t.getCompiler().reportCodeChange();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..252f042e 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,96 +1458,65 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                          Node parent) {\n-    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n-    }\n+  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n+    return;\n+  }\n \n-    Node arrayNode = left.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  Node arrayNode = left.getFirstChild();\n+  Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n-    }\n+  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n+      !functionName.getString().equals(\"join\")) {\n+    return;\n+  }\n \n-    String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = new StringBuilder();\n-    int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n-      }\n-      elem = elem.getNext();\n-    }\n+  String joinString = NodeUtil.getStringValue(right);\n+\n+  if (joinString == null) {\n+    return;\n+  }\n \n-    if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n+  int constantCount = 0;\n+  int strCount = 0;\n+\n+  for (Node elem = arrayNode.getFirstChild(); elem != null;\n+       elem = elem.getNext()) {\n+    if (NodeUtil.isImmutableValue(elem)) {\n+      String s = NodeUtil.getStringValue(elem);\n+      if (s == null) {\n+        return;\n+      }\n+      ++constantCount;\n+      strCount += s.length();\n+    } else {\n+      return;\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n+  }\n \n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n+  int originalSize = InlineCostEstimator.getCost(n);\n+  int foldedSize = strCount + (constantCount - 1) * joinString.length() + 2;\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+  if (foldedSize >= originalSize) {\n+    return;\n+  }\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n+  String foldedString = \"\";\n+  for (Node elem = arrayNode.getFirstChild(); elem != null;\n+       elem = elem.getNext()) {\n+    String s = NodeUtil.getStringValue(elem);\n+    foldedString += s;\n+    if (elem.getNext() != null) {\n+      foldedString += joinString;\n     }\n-    t.getCompiler().reportCodeChange();\n   }\n \n+  Node foldedStringNode = Node.newString(foldedString);\n+  parent.replaceChild(n, foldedStringNode);\n+  t.getCompiler().reportCodeChange();\n+}\n+\n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];\n    */",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}