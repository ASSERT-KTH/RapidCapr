{
    "patch": "    public Complex reciprocal() {\n        if (isNaN || (real == 0.0 && imaginary == 0.0)) {\n            return NaN;\n        }\n\n        if (isInfinite) {\n            return ZERO;\n        }\n\n        double scale = 1.0 / (real * real + imaginary * imaginary);\n        return new Complex(real * scale, -imaginary * scale);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/complex/Complex.java b/src/main/java/org/apache/commons/math3/complex/Complex.java\nindex 22b23f24e..9fcc08b7b 100644\n--- a/src/main/java/org/apache/commons/math3/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math3/complex/Complex.java\n@@ -297,11 +297,7 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n \n     /** {@inheritDoc} */\n     public Complex reciprocal() {\n-        if (isNaN) {\n-            return NaN;\n-        }\n-\n-        if (real == 0.0 && imaginary == 0.0) {\n+        if (isNaN || (real == 0.0 && imaginary == 0.0)) {\n             return NaN;\n         }\n \n@@ -309,15 +305,8 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n             return ZERO;\n         }\n \n-        if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n-            double q = real / imaginary;\n-            double scale = 1. / (real * q + imaginary);\n-            return createComplex(scale * q, -scale);\n-        } else {\n-            double q = imaginary / real;\n-            double scale = 1. / (imaginary * q + real);\n-            return createComplex(scale, -scale * q);\n-        }\n+        double scale = 1.0 / (real * real + imaginary * imaginary);\n+        return new Complex(real * scale, -imaginary * scale);\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>",
    "test_result": "FAIL"
}