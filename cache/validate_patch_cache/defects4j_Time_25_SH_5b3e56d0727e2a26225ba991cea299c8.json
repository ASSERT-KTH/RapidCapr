{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    long nextTransition = nextTransition(instantAdjusted);\n    int offsetNext = getOffset(nextTransition);\n    if (offsetNext == offsetAdjusted) {\n        return offsetLocal;\n    }\n} else if (offsetAdjusted < offsetLocal) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(nextLocal + (offsetLocal - offsetAdjusted));\n    if (nextAdjusted <= instantLocal - offsetAdjusted) {\n        return offsetLocal;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..1f353741 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,19 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    long nextTransition = nextTransition(instantAdjusted);\n+    int offsetNext = getOffset(nextTransition);\n+    if (offsetNext == offsetAdjusted) {\n+        return offsetLocal;\n+    }\n+} else if (offsetAdjusted < offsetLocal) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(nextLocal + (offsetLocal - offsetAdjusted));\n+    if (nextAdjusted <= instantLocal - offsetAdjusted) {\n+        return offsetLocal;\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "java.lang.IllegalArgumentException: Illegal instant due to time zone offset transition: 2006-10-01T07:00:00.000",
    "test_result": "FAIL"
}