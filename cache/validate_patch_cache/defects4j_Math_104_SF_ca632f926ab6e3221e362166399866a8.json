{
    "patch": "public static double regularizedGammaQ(double a, double x) {\n    double igammaepsilon = 10e-9;\n    double igammabignumber = 1e100;\n    double ans, ax, c, r;\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 1.0;\n    }\n    if (x >= a + igammabignumber / 2) {\n        return 0.0;\n    }\n    if (a > igammabignumber) {\n        double y = regularizedGammaQ(a / 2.0, x / 2.0);\n        return y * y;\n    }\n    ax = a * Math.log(x) - x - logGamma(a);\n    if (ax < -Double.MAX_VALUE) {\n        return 0.0;\n    }\n    ax = Math.exp(ax);\n    r = a;\n    c = 1.0;\n    ans = 1.0;\n    do {\n        r += 1;\n        c *= x / r;\n        ans += c;\n    } while (c / ans > igammaepsilon);\n    return ans * ax / a;\n}\n\npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1.0)\n            + 24.01409822 / (x + 2.0) - 1.231739516 / (x + 3.0)\n            + 0.00120858003 / (x + 4.0) - 0.00000536382 / (x + 5.0);\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..416d940c0 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,46 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaQ(double a, double x) {\n+    double igammaepsilon = 10e-9;\n+    double igammabignumber = 1e100;\n+    double ans, ax, c, r;\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+    if (x >= a + igammabignumber / 2) {\n+        return 0.0;\n+    }\n+    if (a > igammabignumber) {\n+        double y = regularizedGammaQ(a / 2.0, x / 2.0);\n+        return y * y;\n+    }\n+    ax = a * Math.log(x) - x - logGamma(a);\n+    if (ax < -Double.MAX_VALUE) {\n+        return 0.0;\n+    }\n+    ax = Math.exp(ax);\n+    r = a;\n+    c = 1.0;\n+    ans = 1.0;\n+    do {\n+        r += 1;\n+        c *= x / r;\n+        ans += c;\n+    } while (c / ans > igammaepsilon);\n+    return ans * ax / a;\n+}\n+\n+public static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1.0)\n+            + 24.01409822 / (x + 2.0) - 1.231739516 / (x + 3.0)\n+            + 0.00120858003 / (x + 4.0) - 0.00000536382 / (x + 5.0);\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}