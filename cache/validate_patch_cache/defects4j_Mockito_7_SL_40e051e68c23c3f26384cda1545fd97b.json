{
    "patch": " private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n        for (Type type : typeVariable.getBounds()) {\n            registerTypeVariablesOn(type);\n        }\n        if (typeVariable.getBounds()[0] == Object.class) {\n            return null;\n        }\n        Type actualTypeArgument = ((ParameterizedType) type.getTypeParameters()[0].getGenericDeclaration()).getActualTypeArguments()[0];\n        if (actualTypeArgument instanceof WildcardType) {\n            WildcardType wildcardType = (WildcardType) actualTypeArgument;\n            actualTypeArgument = wildcardType.getUpperBounds()[0];\n        }\n        return actualTypeArgument;\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..6c99e4fe4 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,25 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+ private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+        for (Type type : typeVariable.getBounds()) {\n+            registerTypeVariablesOn(type);\n+        }\n+        if (typeVariable.getBounds()[0] == Object.class) {\n+            return null;\n+        }\n+        Type actualTypeArgument = ((ParameterizedType) type.getTypeParameters()[0].getGenericDeclaration()).getActualTypeArguments()[0];\n+        if (actualTypeArgument instanceof WildcardType) {\n+            WildcardType wildcardType = (WildcardType) actualTypeArgument;\n+            actualTypeArgument = wildcardType.getUpperBounds()[0];\n+        }\n+        return actualTypeArgument;\n+    }\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}