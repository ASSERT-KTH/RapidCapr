{
    "patch": "if (offsetLocal < offsetAdjusted) {\n  long nextTransition = nextTransition(instantAdjusted - (offsetLocal - offsetAdjusted));\n  if (nextTransition == (instantAdjusted - (offsetLocal - offsetAdjusted))) {\n    return offsetLocal;\n  }\n  int newOffsetLocal = getOffset(nextTransition);\n  if (newOffsetLocal == offsetAdjusted) {\n    return offsetLocal;\n  }\n} else {\n  long prevTransition = previousTransition(instantAdjusted - (offsetLocal - offsetAdjusted));\n  if (prevTransition == (instantAdjusted - (offsetLocal - offsetAdjusted))) {\n    return offsetLocal;\n  }\n  int newOffsetLocal = getOffset(prevTransition);\n  if (newOffsetLocal == offsetAdjusted) {\n    return offsetLocal;\n  }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..625515cf 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,25 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal < offsetAdjusted) {\n+  long nextTransition = nextTransition(instantAdjusted - (offsetLocal - offsetAdjusted));\n+  if (nextTransition == (instantAdjusted - (offsetLocal - offsetAdjusted))) {\n+    return offsetLocal;\n+  }\n+  int newOffsetLocal = getOffset(nextTransition);\n+  if (newOffsetLocal == offsetAdjusted) {\n+    return offsetLocal;\n+  }\n+} else {\n+  long prevTransition = previousTransition(instantAdjusted - (offsetLocal - offsetAdjusted));\n+  if (prevTransition == (instantAdjusted - (offsetLocal - offsetAdjusted))) {\n+    return offsetLocal;\n+  }\n+  int newOffsetLocal = getOffset(prevTransition);\n+  if (newOffsetLocal == offsetAdjusted) {\n+    return offsetLocal;\n+  }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}