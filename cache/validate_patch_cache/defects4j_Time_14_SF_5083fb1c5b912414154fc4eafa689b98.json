{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n\n    if (valueToAdd == 0) {\n        return values; // no change\n    }\n\n    int[] newValues = values.clone(); // create copy of values array\n    \n    // determine the maximum value the field can take \n    int maxAllowedValue = partial.getFieldType(fieldIndex).getDurationType().getField(iChronology).getMaximumValue();\n    \n    // add the value\n    newValues[fieldIndex] = iChronology.get(partial, iChronology.add(partial.getFieldType(fieldIndex).getField(iChronology).addToCopy(iChronology.getDateTimeMillis(partial), valueToAdd), valueToAdd)[fieldIndex]);\n\n    // handle overflow or underflow\n    while (newValues[fieldIndex] < 1) {\n        valueToAdd = valueToAdd > 0 ? valueToAdd - 1 : valueToAdd + 1;\n        newValues[fieldIndex] = maxAllowedValue + newValues[fieldIndex];\n    }\n    while (newValues[fieldIndex] > maxAllowedValue) {\n        valueToAdd = valueToAdd > 0 ? valueToAdd - 1 : valueToAdd + 1;\n        newValues[fieldIndex] = newValues[fieldIndex] - maxAllowedValue;\n    }\n\n    return newValues;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..342075c2 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,35 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+\n+    if (valueToAdd == 0) {\n+        return values; // no change\n     }\n \n+    int[] newValues = values.clone(); // create copy of values array\n+    \n+    // determine the maximum value the field can take \n+    int maxAllowedValue = partial.getFieldType(fieldIndex).getDurationType().getField(iChronology).getMaximumValue();\n+    \n+    // add the value\n+    newValues[fieldIndex] = iChronology.get(partial, iChronology.add(partial.getFieldType(fieldIndex).getField(iChronology).addToCopy(iChronology.getDateTimeMillis(partial), valueToAdd), valueToAdd)[fieldIndex]);\n+\n+    // handle overflow or underflow\n+    while (newValues[fieldIndex] < 1) {\n+        valueToAdd = valueToAdd > 0 ? valueToAdd - 1 : valueToAdd + 1;\n+        newValues[fieldIndex] = maxAllowedValue + newValues[fieldIndex];\n+    }\n+    while (newValues[fieldIndex] > maxAllowedValue) {\n+        valueToAdd = valueToAdd > 0 ? valueToAdd - 1 : valueToAdd + 1;\n+        newValues[fieldIndex] = newValues[fieldIndex] - maxAllowedValue;\n+    }\n+\n+    return newValues;\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}