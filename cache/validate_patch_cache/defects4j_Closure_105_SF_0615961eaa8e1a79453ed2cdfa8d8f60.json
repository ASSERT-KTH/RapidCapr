{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                       Node parent) {\n  if (!NodeUtil.isGetProp(left)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = arrayNode.getNext();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n      !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  List<Node> joinArguments = new ArrayList<>();\n  Node separatorNode = right;\n  if (separatorNode.getType() == Token.ADD) {\n    // Collect all the children of the binary expression.\n    Node child = separatorNode.getFirstChild();\n    while (child != null) {\n      // If a child is not a string literal, we cannot fold this join().\n      if (!NodeUtil.isLiteralValue(child)) {\n        return;\n      }\n      joinArguments.add(child);\n      child = child.getNext();\n    }\n    separatorNode = Node.newString(\"\");\n  } else if (!NodeUtil.isLiteralValue(separatorNode)) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(separatorNode);\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = new StringBuilder();\n  int foldedSize = 0;\n  Node elem = arrayNode.getFirstChild();\n  // Merges adjacent String nodes and checks if the array is empty.\n  boolean arrayIsEmpty = true;\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      arrayIsEmpty = false;\n      if (sb.length() > 0) {\n        escapeAndAppend(joinString, sb);\n      }\n      escapeAndAppend(NodeUtil.getStringValue(elem), sb);\n    } else {\n      arrayIsEmpty = false;\n      if (sb.length() > 0) {\n        // + 2 for the quotes.\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n        sb = new StringBuilder();\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem);\n    }\n    elem = elem.getNext();\n  }\n\n  if (arrayIsEmpty) {\n    // If the array is empty, we replace the join call with an empty string.\n    Node emptyStringNode = Node.newString(\"\");\n    parent.replaceChild(n, emptyStringNode);\n    t.getCompiler().reportCodeChange();\n    return;\n  }\n\n  if (sb.length() > 0) {\n    // + 2 for the quotes.\n    foldedSize += sb.length() + 2;\n    arrayFoldedChildren.add(Node.newString(sb.toString()));\n  }\n  // One for each separator.\n  foldedSize += joinArguments.size() * joinString.length();\n  // One for each comma.\n  foldedSize += arrayFoldedChildren.size() - 1;\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  switch (arrayFoldedChildren.size()) {\n    case 0:\n      Node emptyStringNode = Node.newString(\"\");\n      parent.replaceChild(n, emptyStringNode);\n      break;\n\n    case 1:\n      Node foldedStringNode = arrayFoldedChildren.remove(0);\n      if (foldedSize > originalSize) {\n        return;\n      }\n      arrayNode.detachChildren();\n      if (foldedStringNode.getType() != Token.STRING) {\n        // If the Node is not a string literal, ensure that\n        // it is coerced to a string.\n        Node replacement = new Node(Token.ADD,\n            Node.newString(\"\"), foldedStringNode);\n        foldedStringNode = replacement;\n      }\n      parent.replaceChild(n, foldedStringNode);\n      break;\n\n    default:\n      // No folding could actually be performed.\n      if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n        return;\n      }\n      int kJoinOverhead = \"[].join()\".length();\n      foldedSize += kJoinOverhead;\n      foldedSize += InlineCostEstimator.getCost(right);\n      if (foldedSize > originalSize) {\n        return;\n      }\n      arrayNode.detachChildren();\n      for (Node node : arrayFoldedChildren) {\n        arrayNode.addChildToBack(node);\n      }\n      break;\n  }\n  t.getCompiler().reportCodeChange();\n}\n\n/**\n * Escapes special characters in str and appends it to sb.\n */\nprivate static void escapeAndAppend(String str, StringBuilder sb) {\n  for (int i = 0; i < str.length(); i++) {\n    char ch = str.charAt(i);\n    switch (ch) {\n      case '\\'':\n        sb.append(\"\\\\'\");\n        break;\n      case '\\\"':\n        sb.append(\"\\\\\\\"\");\n        break;\n      case '\\\\':\n        sb.append(\"\\\\\\\\\");\n        break;\n      default:\n        sb.append(ch);\n        break;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..2bdbaad6 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,95 +1458,149 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n-    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n-    }\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n+                       Node parent) {\n+  if (!NodeUtil.isGetProp(left)) {\n+    return;\n+  }\n \n-    Node arrayNode = left.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  Node arrayNode = left.getFirstChild();\n+  Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n-    }\n+  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n+      !functionName.getString().equals(\"join\")) {\n+    return;\n+  }\n \n-    String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = new StringBuilder();\n-    int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+  List<Node> joinArguments = new ArrayList<>();\n+  Node separatorNode = right;\n+  if (separatorNode.getType() == Token.ADD) {\n+    // Collect all the children of the binary expression.\n+    Node child = separatorNode.getFirstChild();\n+    while (child != null) {\n+      // If a child is not a string literal, we cannot fold this join().\n+      if (!NodeUtil.isLiteralValue(child)) {\n+        return;\n       }\n-      elem = elem.getNext();\n+      joinArguments.add(child);\n+      child = child.getNext();\n     }\n+    separatorNode = Node.newString(\"\");\n+  } else if (!NodeUtil.isLiteralValue(separatorNode)) {\n+    return;\n+  }\n \n-    if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n+  String joinString = NodeUtil.getStringValue(separatorNode);\n+  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n+  StringBuilder sb = new StringBuilder();\n+  int foldedSize = 0;\n+  Node elem = arrayNode.getFirstChild();\n+  // Merges adjacent String nodes and checks if the array is empty.\n+  boolean arrayIsEmpty = true;\n+  while (elem != null) {\n+    if (NodeUtil.isImmutableValue(elem)) {\n+      arrayIsEmpty = false;\n+      if (sb.length() > 0) {\n+        escapeAndAppend(joinString, sb);\n+      }\n+      escapeAndAppend(NodeUtil.getStringValue(elem), sb);\n+    } else {\n+      arrayIsEmpty = false;\n+      if (sb.length() > 0) {\n+        // + 2 for the quotes.\n+        foldedSize += sb.length() + 2;\n+        arrayFoldedChildren.add(Node.newString(sb.toString()));\n+        sb = new StringBuilder();\n+      }\n+      foldedSize += InlineCostEstimator.getCost(elem);\n+      arrayFoldedChildren.add(elem);\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n+    elem = elem.getNext();\n+  }\n \n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n+  if (arrayIsEmpty) {\n+    // If the array is empty, we replace the join call with an empty string.\n+    Node emptyStringNode = Node.newString(\"\");\n+    parent.replaceChild(n, emptyStringNode);\n+    t.getCompiler().reportCodeChange();\n+    return;\n+  }\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+  if (sb.length() > 0) {\n+    // + 2 for the quotes.\n+    foldedSize += sb.length() + 2;\n+    arrayFoldedChildren.add(Node.newString(sb.toString()));\n+  }\n+  // One for each separator.\n+  foldedSize += joinArguments.size() * joinString.length();\n+  // One for each comma.\n+  foldedSize += arrayFoldedChildren.size() - 1;\n+\n+  int originalSize = InlineCostEstimator.getCost(n);\n+  switch (arrayFoldedChildren.size()) {\n+    case 0:\n+      Node emptyStringNode = Node.newString(\"\");\n+      parent.replaceChild(n, emptyStringNode);\n+      break;\n+\n+    case 1:\n+      Node foldedStringNode = arrayFoldedChildren.remove(0);\n+      if (foldedSize > originalSize) {\n+        return;\n+      }\n+      arrayNode.detachChildren();\n+      if (foldedStringNode.getType() != Token.STRING) {\n+        // If the Node is not a string literal, ensure that\n+        // it is coerced to a string.\n+        Node replacement = new Node(Token.ADD,\n+            Node.newString(\"\"), foldedStringNode);\n+        foldedStringNode = replacement;\n+      }\n+      parent.replaceChild(n, foldedStringNode);\n+      break;\n+\n+    default:\n+      // No folding could actually be performed.\n+      if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n+        return;\n+      }\n+      int kJoinOverhead = \"[].join()\".length();\n+      foldedSize += kJoinOverhead;\n+      foldedSize += InlineCostEstimator.getCost(right);\n+      if (foldedSize > originalSize) {\n+        return;\n+      }\n+      arrayNode.detachChildren();\n+      for (Node node : arrayFoldedChildren) {\n+        arrayNode.addChildToBack(node);\n+      }\n+      break;\n+  }\n+  t.getCompiler().reportCodeChange();\n+}\n \n+/**\n+ * Escapes special characters in str and appends it to sb.\n+ */\n+private static void escapeAndAppend(String str, StringBuilder sb) {\n+  for (int i = 0; i < str.length(); i++) {\n+    char ch = str.charAt(i);\n+    switch (ch) {\n+      case '\\'':\n+        sb.append(\"\\\\'\");\n+        break;\n+      case '\\\"':\n+        sb.append(\"\\\\\\\"\");\n+        break;\n+      case '\\\\':\n+        sb.append(\"\\\\\\\\\");\n+        break;\n       default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n+        sb.append(ch);\n         break;\n     }\n-    t.getCompiler().reportCodeChange();\n   }\n+}\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}