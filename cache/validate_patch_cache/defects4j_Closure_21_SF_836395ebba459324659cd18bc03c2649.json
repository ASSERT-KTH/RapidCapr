{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (n.isExprResult()) {\n      return;\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (parent.getType() == Token.COMMA) {\n      if (isResultUsed) {\n        return;\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA) continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n          else break;\n        }\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n        return;\n      }\n    }\n    if (\n        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n    \tmsg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n    \tmsg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n    \t\t\t\"' operator is not being used.\";\n    \tif (parent.getType() == Token.FOR) {\n          if (n.getType() == Token.AND) {\n            msg = \"The results of the left operand of an '&&' operator in a for loop termination condition is usually unused. Consider using the right operand instead.\";\n          } else if (n.getType() == Token.OR) {\n            msg = \"The results of the left operand of an '||' operator in a for loop termination condition is usually unused.\";\n          } else {\n            Node assignTarget = n.getFirstChild();\n            if (assignTarget.getType() == Token.NAME) {\n              msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() + \"' operator is usually unused. Consider using '\" + assignTarget.getQualifiedName() + \"' instead in the termination condition.\";\n            } else if (assignTarget.getType() == Token.GETPROP && \"length\".equals(assignTarget.getLastChild().getString())) {\n              msg = \"The length of a collection is always truthy. Use a more specific check in the for loop termination condition.\";\n            }\n          }\n        }\n      }\n\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      // TODO(johnlenz): determine if it is necessary to\n      // try to protect side-effect free statements as well.\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..a6fb1428 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,7 +81,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public void visit(NodeTraversal t, Node n, Node parent) {\n     // VOID nodes appear when there are extra semicolons at the BLOCK level.\n     // I've been unable to think of any cases where this indicates a bug,\n     // and apparently some people like keeping these semicolons around,\n@@ -131,10 +131,24 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n+    \tmsg = \"Is there a missing '+' on the previous line?\";\n       } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n+    \tmsg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n+    \t\t\t\"' operator is not being used.\";\n+    \tif (parent.getType() == Token.FOR) {\n+          if (n.getType() == Token.AND) {\n+            msg = \"The results of the left operand of an '&&' operator in a for loop termination condition is usually unused. Consider using the right operand instead.\";\n+          } else if (n.getType() == Token.OR) {\n+            msg = \"The results of the left operand of an '||' operator in a for loop termination condition is usually unused.\";\n+          } else {\n+            Node assignTarget = n.getFirstChild();\n+            if (assignTarget.getType() == Token.NAME) {\n+              msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() + \"' operator is usually unused. Consider using '\" + assignTarget.getQualifiedName() + \"' instead in the termination condition.\";\n+            } else if (assignTarget.getType() == Token.GETPROP && \"length\".equals(assignTarget.getLastChild().getString())) {\n+              msg = \"The length of a collection is always truthy. Use a more specific check in the for loop termination condition.\";\n+            }\n+          }\n+        }\n       }\n \n       t.getCompiler().report(",
    "result_reason": "junit.framework.AssertionFailedError: There should be one warning, repeated 1 time(s). expected:<1> but was:<0>",
    "test_result": "FAIL"
}