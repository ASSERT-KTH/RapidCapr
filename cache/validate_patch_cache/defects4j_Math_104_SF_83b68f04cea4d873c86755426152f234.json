{
    "patch": "public class GammaFunction {\n\n    private static final double DEFAULT_EPSILON = 10e-9;\n\n    /**\n     * Returns the gamma function value for the given {@code x}.\n     *\n     * @param x the value for which to calculate the gamma function\n     * @return the gamma function value for the given {@code x}\n     */\n    public static double gamma(double x) {\n        if (x == 0.0) {\n            return Double.POSITIVE_INFINITY;\n        } else if (x < 0.0) {\n            return Double.NaN;\n        } else {\n            double t = x - 1.0;\n            double p = 1.0 / t;\n            double r = p;\n\n            for (int i = 1; i < 10; i++) {\n                double q = t + i;\n                p *= i / q;\n                r += p;\n            }\n\n            double g = 0.5772156649015329;\n            return Math.exp((t + 0.5) * Math.log(t + 5.5) - (t + 5.5)\n                + g + Math.log(r));\n        }\n    }\n\n    /**\n     * Returns the value of the regularized incomplete gamma function P(a, x).\n     *\n     * @param a the param a of the incomplete gamma function\n     * @param x the param x of the incomplete gamma function\n     *\n     * @return the value of the regularized incomplete gamma function P(a, x)\n     */\n    public static double regularizedGamma(double a, double x) {\n        if (x < 0.0 || a <= 0.0) {\n            return Double.NaN;\n        } else if (x == 0.0) {\n            return 0.0;\n        } else if (x >= a + 1.0) {\n            return 1.0 - regularizedGammaComplement(a, x);\n        } else {\n            double sum = sumSeries(a, x, DEFAULT_EPSILON);\n            return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum / a;\n        }\n    }\n\n    private static double sumSeries(double a, double x, double epsilon) {\n        final int maxIterations = 1000;\n        double n = 1.0;\n        double an = x / (a + 1.0);\n        double sum = an;\n\n        while (Math.abs(an / sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {\n            n += 1.0;\n            an *= x / (a + n);\n            sum += an;\n        }\n\n        return sum;\n    }\n\n    private static double logGamma(double x) {\n        double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n        double ser = 1.0\n            + 76.18009173 / (x + 0) - 86.50532033 / (x + 1)\n            + 24.01409822 / (x + 2) - 1.231739516 / (x + 3)\n            + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n        return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n    }\n\n    private static double regularizedGammaComplement(double a, double x) {\n        final double epsilon = 10e-15;\n        double c = sumSeries(a, x, epsilon);\n        double gamma = gamma(a);\n        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * c / gamma;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..b9b2ed214 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,90 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public class GammaFunction {\n+\n+    private static final double DEFAULT_EPSILON = 10e-9;\n+\n+    /**\n+     * Returns the gamma function value for the given {@code x}.\n+     *\n+     * @param x the value for which to calculate the gamma function\n+     * @return the gamma function value for the given {@code x}\n+     */\n+    public static double gamma(double x) {\n+        if (x == 0.0) {\n+            return Double.POSITIVE_INFINITY;\n+        } else if (x < 0.0) {\n+            return Double.NaN;\n+        } else {\n+            double t = x - 1.0;\n+            double p = 1.0 / t;\n+            double r = p;\n+\n+            for (int i = 1; i < 10; i++) {\n+                double q = t + i;\n+                p *= i / q;\n+                r += p;\n+            }\n+\n+            double g = 0.5772156649015329;\n+            return Math.exp((t + 0.5) * Math.log(t + 5.5) - (t + 5.5)\n+                + g + Math.log(r));\n+        }\n+    }\n+\n+    /**\n+     * Returns the value of the regularized incomplete gamma function P(a, x).\n+     *\n+     * @param a the param a of the incomplete gamma function\n+     * @param x the param x of the incomplete gamma function\n+     *\n+     * @return the value of the regularized incomplete gamma function P(a, x)\n+     */\n+    public static double regularizedGamma(double a, double x) {\n+        if (x < 0.0 || a <= 0.0) {\n+            return Double.NaN;\n+        } else if (x == 0.0) {\n+            return 0.0;\n+        } else if (x >= a + 1.0) {\n+            return 1.0 - regularizedGammaComplement(a, x);\n+        } else {\n+            double sum = sumSeries(a, x, DEFAULT_EPSILON);\n+            return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum / a;\n+        }\n+    }\n+\n+    private static double sumSeries(double a, double x, double epsilon) {\n+        final int maxIterations = 1000;\n+        double n = 1.0;\n+        double an = x / (a + 1.0);\n+        double sum = an;\n+\n+        while (Math.abs(an / sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {\n+            n += 1.0;\n+            an *= x / (a + n);\n+            sum += an;\n+        }\n+\n+        return sum;\n+    }\n+\n+    private static double logGamma(double x) {\n+        double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+        double ser = 1.0\n+            + 76.18009173 / (x + 0) - 86.50532033 / (x + 1)\n+            + 24.01409822 / (x + 2) - 1.231739516 / (x + 3)\n+            + 0.00120858003 / (x + 4) - 0.00000536382 / (x + 5);\n+        return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+    }\n+\n+    private static double regularizedGammaComplement(double a, double x) {\n+        final double epsilon = 10e-15;\n+        double c = sumSeries(a, x, epsilon);\n+        double gamma = gamma(a);\n+        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * c / gamma;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}