{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final LUDecomposition dec = new LUDecomposition(m);\n    RealMatrix squareRoot = dec.getSolver().getInverse();\n    for (int i = 0; i < m.getColumnDimension(); i++) {\n        for (int j = 0; j < m.getColumnDimension(); j++) {\n            squareRoot.setEntry(i, j, squareRoot.getEntry(i, j) / 2.0);\n        }\n    }\n    return squareRoot;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..6279525ef 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,14 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final LUDecomposition dec = new LUDecomposition(m);\n+    RealMatrix squareRoot = dec.getSolver().getInverse();\n+    for (int i = 0; i < m.getColumnDimension(); i++) {\n+        for (int j = 0; j < m.getColumnDimension(); j++) {\n+            squareRoot.setEntry(i, j, squareRoot.getEntry(i, j) / 2.0);\n+        }\n     }\n+    return squareRoot;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}