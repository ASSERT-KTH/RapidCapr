{
    "patch": "    public Class<?> getGenericType(Field field) {\n        Type generic = field.getGenericType();\n        if (generic != null && generic instanceof ParameterizedType) {\n            Type rawType = ((ParameterizedType) generic).getRawType();\n            if (rawType instanceof Class<?>) {\n                Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n                if (actual instanceof Class<?>) {\n                    return (Class<?>) actual;\n                } else if (actual instanceof ParameterizedType) {\n                    return (Class<?>) ((ParameterizedType) actual).getRawType();\n                }\n            }\n            // in case of other generic type such as T, K, V we don't go deep\n        }\n\n        return Object.class;\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java\nindex 64bf1540f..8ce00736c 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMaster.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java\n@@ -13,14 +13,21 @@ public class GenericMaster {\n      * @param field\n      * @return\n      */\n-    public Class getGenericType(Field field) {        \n-        Type generic = field.getGenericType();\n-        if (generic != null && generic instanceof ParameterizedType) {\n-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n-                return (Class) actual;\n-                //in case of nested generics we don't go deep\n-        }\n-        \n-        return Object.class;\n-    }\n+    public Class<?> getGenericType(Field field) {\n+        Type generic = field.getGenericType();\n+        if (generic != null && generic instanceof ParameterizedType) {\n+            Type rawType = ((ParameterizedType) generic).getRawType();\n+            if (rawType instanceof Class<?>) {\n+                Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n+                if (actual instanceof Class<?>) {\n+                    return (Class<?>) actual;\n+                } else if (actual instanceof ParameterizedType) {\n+                    return (Class<?>) ((ParameterizedType) actual).getRawType();\n+                }\n+            }\n+            // in case of other generic type such as T, K, V we don't go deep\n+        }\n+\n+        return Object.class;\n+    }\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}