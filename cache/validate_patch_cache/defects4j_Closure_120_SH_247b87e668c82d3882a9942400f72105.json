{
    "patch": "if (block.isFunction) {\n    for (BasicBlock childBlock : block.getBlocks()) {\n        if (childBlock.contains(ref)) {\n            return false;\n        }\n    }\n    if (ref.isInitializingDeclaration()) {\n        return false;\n    }\n    break;\n} else if (block.isLoop && block != ref.getBasicBlock()) {\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..46ca80c3 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,19 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (block.isFunction) {\n+    for (BasicBlock childBlock : block.getBlocks()) {\n+        if (childBlock.contains(ref)) {\n+            return false;\n+        }\n+    }\n+    if (ref.isInitializingDeclaration()) {\n+        return false;\n+    }\n+    break;\n+} else if (block.isLoop && block != ref.getBasicBlock()) {\n+    return false;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}