{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() || jsDoc.isInterface() ||\n           jsDoc.hasThisType() || jsDoc.isOverride())) {\n        return false;\n      }\n      // Check if we're trying to assign a function (or a prototype of a\n      // function) to the global \"this\" object.\n      if (parent != null &&\n          parent.getType() == Token.ASSIGN) {\n        if (parent.isFromExterns() ||\n            parent.getParent().getType() == Token.EXPR_RESULT ||\n            !isGlobalThis(parent.getFirstChild())) {\n          return true;\n        }\n        // Handle assignment of $jscomp.global to functions.\n        if (isGlobal(parent.getFirstChild().getLastChild())) {\n          return true;\n        }\n        if (NodeUtil.isGet(parent.getFirstChild())) {\n          Node grandParent = parent.getParent();\n          Node greatGrandParent = grandParent.getParent();\n          if (isGlobalThis(grandParent.getFirstChild()) && greatGrandParent != null &&\n              NodeUtil.isFunctionExpression(greatGrandParent)) {\n            return false;  // This function is nested within an object literal passed to the global\n                            // \"this\" object, so it should be traversed.\n          }\n        }\n        // We are trying to directly assign to the global \"this\" object.\n        // Attempting to detect this case requires checking whether the left-hand side of an\n        // assignment is a qualified name like \"this.foo\", and determining whether \"this\" is equivalent to\n        // the global \"this\" object. We can't check for the equivalence of \"this\" and the global\n        // \"this\" object directly (at least without changing the public Compiler API), but we can\n        // assume that \"this\" refers to the global \"this\" object if it appears in the global scope of a\n        // program. Specifically, we perform the following checks to determine if the left-hand\n        // side of an assigment is a qualified name referring to \"this\":\n        // (1) We check that the left-most name in the qualified name refers to \"this\".\n        // (2) We check that any object literals to the left of \"this\" in the qualified name\n        //     appear in the global scope.\n        Node lhs = parent.getFirstChild();\n        boolean qualifiedNameIncludesThis =\n            lhs.getType() == Token.GETPROP &&\n            isThis(lhs.getFirstChild());\n        if (qualifiedNameIncludesThis) {\n          while (lhs.getType() == Token.GETPROP) {\n            if (!NodeUtil.isObjectLitKey(lhs.getLastChild())) {\n              qualifiedNameIncludesThis = false;\n              break;\n            }\n            lhs = lhs.getFirstChild();\n          }\n        }\n        if (qualifiedNameIncludesThis && isGlobalThis(lhs)) {\n          return false;\n        }\n      }\n      // Check if we are trying to define an inner function within a non-function context like an\n      // IF block.\n      if (parent != null && parent.getType() != Token.SCRIPT &&\n          parent.getType() != Token.FUNCTION) {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n  private boolean isGlobalThis(Node n) {\n    return n.matchesQualifiedName(\"$jscomp.global\") || n.matchesQualifiedName(\"window\") || n.matchesQualifiedName(\"this\");\n  }\n  \n  private boolean isThis(Node n) {\n    return n.matchesName(\"this\");",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..3ffb8fd2 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,71 +79,80 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n       JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n       if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n+          (jsDoc.isConstructor() || jsDoc.isInterface() ||\n+           jsDoc.hasThisType() || jsDoc.isOverride())) {\n         return false;\n       }\n-\n-      // Don't traverse functions that are getting lent to a prototype.\n-    }\n-\n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-\n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+      // Check if we're trying to assign a function (or a prototype of a\n+      // function) to the global \"this\" object.\n+      if (parent != null &&\n+          parent.getType() == Token.ASSIGN) {\n+        if (parent.isFromExterns() ||\n+            parent.getParent().getType() == Token.EXPR_RESULT ||\n+            !isGlobalThis(parent.getFirstChild())) {\n+          return true;\n+        }\n+        // Handle assignment of $jscomp.global to functions.\n+        if (isGlobal(parent.getFirstChild().getLastChild())) {\n+          return true;\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n+        if (NodeUtil.isGet(parent.getFirstChild())) {\n+          Node grandParent = parent.getParent();\n+          Node greatGrandParent = grandParent.getParent();\n+          if (isGlobalThis(grandParent.getFirstChild()) && greatGrandParent != null &&\n+              NodeUtil.isFunctionExpression(greatGrandParent)) {\n+            return false;  // This function is nested within an object literal passed to the global\n+                            // \"this\" object, so it should be traversed.\n           }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n+        }\n+        // We are trying to directly assign to the global \"this\" object.\n+        // Attempting to detect this case requires checking whether the left-hand side of an\n+        // assignment is a qualified name like \"this.foo\", and determining whether \"this\" is equivalent to\n+        // the global \"this\" object. We can't check for the equivalence of \"this\" and the global\n+        // \"this\" object directly (at least without changing the public Compiler API), but we can\n+        // assume that \"this\" refers to the global \"this\" object if it appears in the global scope of a\n+        // program. Specifically, we perform the following checks to determine if the left-hand\n+        // side of an assigment is a qualified name referring to \"this\":\n+        // (1) We check that the left-most name in the qualified name refers to \"this\".\n+        // (2) We check that any object literals to the left of \"this\" in the qualified name\n+        //     appear in the global scope.\n+        Node lhs = parent.getFirstChild();\n+        boolean qualifiedNameIncludesThis =\n+            lhs.getType() == Token.GETPROP &&\n+            isThis(lhs.getFirstChild());\n+        if (qualifiedNameIncludesThis) {\n+          while (lhs.getType() == Token.GETPROP) {\n+            if (!NodeUtil.isObjectLitKey(lhs.getLastChild())) {\n+              qualifiedNameIncludesThis = false;\n+              break;\n+            }\n+            lhs = lhs.getFirstChild();\n           }\n         }\n+        if (qualifiedNameIncludesThis && isGlobalThis(lhs)) {\n+          return false;\n+        }\n+      }\n+      // Check if we are trying to define an inner function within a non-function context like an\n+      // IF block.\n+      if (parent != null && parent.getType() != Token.SCRIPT &&\n+          parent.getType() != Token.FUNCTION) {\n+        return false;\n       }\n     }\n-\n     return true;\n   }\n+  \n+  private boolean isGlobalThis(Node n) {\n+    return n.matchesQualifiedName(\"$jscomp.global\") || n.matchesQualifiedName(\"window\") || n.matchesQualifiedName(\"this\");\n+  }\n+  \n+  private boolean isThis(Node n) {\n+    return n.matchesName(\"this\");\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}