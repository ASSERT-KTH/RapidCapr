{
    "patch": "            // Check for supported year\n            int year = savedFields[0].iValue;\n            if (year < iChrono.getMinimumYear() || year > iChrono.getMaximumYear()) {\n                throw new IllegalFieldValueException(\n                    DateTimeFieldType.year(), year,\n                    iChrono.getMinimumYear(), iChrono.getMaximumYear()\n                );\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..100cea0a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,14 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            // Check for supported year\n+            int year = savedFields[0].iValue;\n+            if (year < iChrono.getMinimumYear() || year > iChrono.getMaximumYear()) {\n+                throw new IllegalFieldValueException(\n+                    DateTimeFieldType.year(), year,\n+                    iChrono.getMinimumYear(), iChrono.getMaximumYear()\n+                );\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}