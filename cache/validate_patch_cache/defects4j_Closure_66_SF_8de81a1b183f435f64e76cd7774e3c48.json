{
    "patch": "public double getTypedPercent(JsonStructure js) {\n    double total = 0.0;\n    double typed = 0.0;\n    JsonObject jo = (JsonObject) js;\n    for (String key : jo.keySet()) {\n        JsonValue jv = jo.get(key);\n        if (jv.getValueType() == JsonValue.ValueType.OBJECT) {\n            typed += getTypedPercent((JsonObject) jv);\n        } else {\n            total++;\n            if (jv.getValueType() != JsonValue.ValueType.NULL) {\n                typed++;\n            }\n        }\n    }\n    return typed / total * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..66a03e74 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(JsonStructure js) {\n+    double total = 0.0;\n+    double typed = 0.0;\n+    JsonObject jo = (JsonObject) js;\n+    for (String key : jo.keySet()) {\n+        JsonValue jv = jo.get(key);\n+        if (jv.getValueType() == JsonValue.ValueType.OBJECT) {\n+            typed += getTypedPercent((JsonObject) jv);\n+        } else {\n+            total++;\n+            if (jv.getValueType() != JsonValue.ValueType.NULL) {\n+                typed++;\n+            }\n+        }\n+    }\n+    return typed / total * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}