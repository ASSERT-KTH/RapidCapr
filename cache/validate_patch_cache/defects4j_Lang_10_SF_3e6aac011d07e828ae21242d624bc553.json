{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    if (regex == null) {\n        regex = new StringBuilder();\n    } else {\n        regex.setLength(0);\n    }\n\n    boolean wasWhite = false;\n    boolean isQuoteOpened = false;\n\n    for (int i = 0; i < value.length(); i++) {\n        char c = value.charAt(i);\n\n        if (isQuoteOpened) {\n            if (c == '\\'') {\n                isQuoteOpened = false;\n            } else {\n                regex.append(c);\n            }\n            continue;\n        }\n\n        switch (c) {\n            case '\\\\':\n                if (i < value.length() - 1) {\n                    i++;\n                    char nextChar = value.charAt(i);\n                    if (nextChar == '\\'') {\n                        regex.append('\\'');\n                    } else {\n                        regex.append(\"\\\\\\\\\").append(nextChar);\n                    }\n                } else {\n                    regex.append(c);\n                }\n                break;\n            case '\\'':\n                if (unquote) {\n                    isQuoteOpened = true;\n                } else {\n                    regex.append(c);\n                }\n                break;\n            case '?':\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '|':\n            case '*':\n            case '+':\n            case '^':\n            case '$':\n            case '.':\n                regex.append('\\\\').append(c);\n                break;\n            case ' ':\n                if (!wasWhite) {\n                    wasWhite = true;\n                    regex.append(\"\\\\s*+\");\n                }\n                break;\n            default:\n                wasWhite = false;\n                regex.append(c);\n        }\n    }\n\n    if (isQuoteOpened) {\n        throw new IllegalArgumentException(\"Unterminated quote\");\n    }\n\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..c16734ef 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,25 +300,47 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    if (regex == null) {\n+        regex = new StringBuilder();\n+    } else {\n+        regex.setLength(0);\n+    }\n+\n+    boolean wasWhite = false;\n+    boolean isQuoteOpened = false;\n+\n+    for (int i = 0; i < value.length(); i++) {\n+        char c = value.charAt(i);\n+\n+        if (isQuoteOpened) {\n+            if (c == '\\'') {\n+                isQuoteOpened = false;\n+            } else {\n+                regex.append(c);\n             }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n+            continue;\n+        }\n+\n+        switch (c) {\n+            case '\\\\':\n+                if (i < value.length() - 1) {\n+                    i++;\n+                    char nextChar = value.charAt(i);\n+                    if (nextChar == '\\'') {\n+                        regex.append('\\'');\n+                    } else {\n+                        regex.append(\"\\\\\\\\\").append(nextChar);\n                     }\n-                    c= value.charAt(i);\n+                } else {\n+                    regex.append(c);\n+                }\n+                break;\n+            case '\\'':\n+                if (unquote) {\n+                    isQuoteOpened = true;\n+                } else {\n+                    regex.append(c);\n                 }\n                 break;\n             case '?':\n@@ -328,20 +350,33 @@ public class FastDateParser implements DateParser, Serializable {\n             case ')':\n             case '{':\n             case '}':\n-            case '\\\\':\n             case '|':\n             case '*':\n             case '+':\n             case '^':\n             case '$':\n             case '.':\n-                regex.append('\\\\');\n-            }\n-            regex.append(c);\n+                regex.append('\\\\').append(c);\n+                break;\n+            case ' ':\n+                if (!wasWhite) {\n+                    wasWhite = true;\n+                    regex.append(\"\\\\s*+\");\n+                }\n+                break;\n+            default:\n+                wasWhite = false;\n+                regex.append(c);\n         }\n-        return regex;\n     }\n \n+    if (isQuoteOpened) {\n+        throw new IllegalArgumentException(\"Unterminated quote\");\n+    }\n+\n+    return regex;\n+}\n+\n     /**\n      * A class to store Key / Value pairs\n      */",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}