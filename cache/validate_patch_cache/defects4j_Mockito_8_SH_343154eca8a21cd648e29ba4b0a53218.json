{
    "patch": "    private void registerTypeVariablesOn(Type classType, Map<TypeVariable<?>, Type> contextualActualTypeParameters) {\n        if (!(classType instanceof ParameterizedType)) {\n            return;\n        }\n        ParameterizedType parameterizedType = (ParameterizedType) classType;\n        TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n        for (int i = 0; i < actualTypeArguments.length; i++) {\n            TypeVariable<?> typeParameter = typeParameters[i];\n            Type actualTypeArgument = actualTypeArguments[i];\n\n            if (actualTypeArgument instanceof WildcardType) {\n                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n            } else if (actualTypeArgument instanceof TypeVariable) {\n                Type resolvedType = contextualActualTypeParameters.get(actualTypeArgument);\n\n                if (resolvedType instanceof TypeVariable<?> && Objects.equals(actualTypeArgument, resolvedType)) {\n                    throw new IllegalStateException(\"Unable to resolve type variable '\" + actualTypeArgument + \"'\");\n                }\n\n                contextualActualTypeParameters.put(typeParameter, resolvedType == null ? actualTypeArgument : resolvedType);\n            } else {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..f79852c44 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,32 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+    private void registerTypeVariablesOn(Type classType, Map<TypeVariable<?>, Type> contextualActualTypeParameters) {\n+        if (!(classType instanceof ParameterizedType)) {\n+            return;\n+        }\n+        ParameterizedType parameterizedType = (ParameterizedType) classType;\n+        TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n+        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+        for (int i = 0; i < actualTypeArguments.length; i++) {\n+            TypeVariable<?> typeParameter = typeParameters[i];\n+            Type actualTypeArgument = actualTypeArguments[i];\n+\n+            if (actualTypeArgument instanceof WildcardType) {\n+                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n+            } else if (actualTypeArgument instanceof TypeVariable) {\n+                Type resolvedType = contextualActualTypeParameters.get(actualTypeArgument);\n+\n+                if (resolvedType instanceof TypeVariable<?> && Objects.equals(actualTypeArgument, resolvedType)) {\n+                    throw new IllegalStateException(\"Unable to resolve type variable '\" + actualTypeArgument + \"'\");\n+                }\n+\n+                contextualActualTypeParameters.put(typeParameter, resolvedType == null ? actualTypeArgument : resolvedType);\n+            } else {\n+                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+            }\n+        }\n+    }\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}