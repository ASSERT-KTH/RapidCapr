{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n        \n        RealPointValuePair[] original = simplex;\n        RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n\n        if (comparator.compare(reflected, best) < 0) {\n            \n            // compute the expanded simplex\n            RealPointValuePair[] reflectedSimplex = simplex;\n            RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n                incrementIterationsCounter();\n            }\n            else {\n                simplex = original;\n                incrementIterationsCounter();\n            }\n        } else {\n  \n            // compute the contracted simplex\n            RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n\n            if (comparator.compare(contracted, best) < 0) {\n                \n                // accept the contracted simplex\n                RealPointValuePair[] contractedSimplex = simplex;\n                simplex = contractedSimplex;\n                incrementIterationsCounter();\n            }\n            else {\n                simplex = original;\n                incrementIterationsCounter();\n            }\n        }\n\n        // check convergence\n        if (getConvergenceChecker() != null) {\n            if (getConvergenceChecker().converged(getIterations(), simplex[0], original[0])) {\n                return;\n            }\n        }\n  \n        if(incrementIterationsCounter()>150)\n               throw new OptimizationException(\"Exceeded maximum number of iterations\");\n\n        iterateSimplex(comparator);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..ce5f0f6a6 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -60,42 +60,57 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     @Override\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n+        \n+        RealPointValuePair[] original = simplex;\n+        RealPointValuePair best = original[0];\n+\n+        // perform a reflection step\n+        RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+\n+        if (comparator.compare(reflected, best) < 0) {\n+            \n+            // compute the expanded simplex\n+            RealPointValuePair[] reflectedSimplex = simplex;\n+            RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+                incrementIterationsCounter();\n             }\n-\n+            else {\n+                simplex = original;\n+                incrementIterationsCounter();\n+            }\n+        } else {\n+  \n             // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+            RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+\n             if (comparator.compare(contracted, best) < 0) {\n+                \n                 // accept the contracted simplex\n+                RealPointValuePair[] contractedSimplex = simplex;\n+                simplex = contractedSimplex;\n+                incrementIterationsCounter();\n+            }\n+            else {\n+                simplex = original;\n+                incrementIterationsCounter();\n+            }\n+        }\n \n-            // check convergence\n+        // check convergence\n+        if (getConvergenceChecker() != null) {\n+            if (getConvergenceChecker().converged(getIterations(), simplex[0], original[0])) {\n                 return;\n             }\n-\n         }\n+  \n+        if(incrementIterationsCounter()>150)\n+               throw new OptimizationException(\"Exceeded maximum number of iterations\");\n \n+        iterateSimplex(comparator);\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: 'void' type not allowed here",
    "test_result": "ERROR"
}