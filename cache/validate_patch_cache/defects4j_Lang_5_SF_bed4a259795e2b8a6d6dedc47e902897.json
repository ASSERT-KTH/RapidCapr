{
    "patch": "public static Locale toLocale(String str) {\n    if (str == null || str.isEmpty()) {\n        return null;\n    }\n\n    String language = \"\";\n    String country = \"\";\n    String variant = \"\";\n\n    int firstUnderscore = str.indexOf('_');\n\n    if (firstUnderscore < 0) {\n        if (!isValidCode(str)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        language = str;\n    } else {\n        if (!isValidCode(str.substring(0, firstUnderscore))) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        language = str.substring(0, firstUnderscore);\n\n        int secondUnderscore = str.indexOf('_', firstUnderscore + 1);\n\n        if (secondUnderscore == -1) {\n            if (firstUnderscore + 1 == str.length() || firstUnderscore + 2 == str.length() || firstUnderscore + 3 == str.length()) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            if (!isValidCode(str.substring(firstUnderscore + 1))) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            country = str.substring(firstUnderscore + 1);\n        } else {\n            if (!isValidCode(str.substring(firstUnderscore + 1, secondUnderscore))) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            country = str.substring(firstUnderscore + 1, secondUnderscore);\n\n            if (secondUnderscore + 1 < str.length()) {\n                variant = str.substring(secondUnderscore + 1);\n                if (variant.length() < 1 || !isValidCode(variant)) {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n            }\n        }\n    }\n\n    return new Locale(language, country, variant);\n}\n\nprivate static boolean isValidCode(String code) {\n    if (code == null || code.length() == 0) {\n        return false;\n    }\n    for (int i = 0; i < code.length(); i++) {\n        char ch = code.charAt(i);\n        if (ch != '-' && !Character.isLetterOrDigit(ch)) {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..ef2e6d2e 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,48 +85,70 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n+public static Locale toLocale(String str) {\n+    if (str == null || str.isEmpty()) {\n+        return null;\n+    }\n+\n+    String language = \"\";\n+    String country = \"\";\n+    String variant = \"\";\n+\n+    int firstUnderscore = str.indexOf('_');\n+\n+    if (firstUnderscore < 0) {\n+        if (!isValidCode(str)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final int len = str.length();\n-        if (len < 2) {\n+        language = str;\n+    } else {\n+        if (!isValidCode(str.substring(0, firstUnderscore))) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n+\n+        language = str.substring(0, firstUnderscore);\n+\n+        int secondUnderscore = str.indexOf('_', firstUnderscore + 1);\n+\n+        if (secondUnderscore == -1) {\n+            if (firstUnderscore + 1 == str.length() || firstUnderscore + 2 == str.length() || firstUnderscore + 3 == str.length()) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n+            if (!isValidCode(str.substring(firstUnderscore + 1))) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n+            country = str.substring(firstUnderscore + 1);\n+        } else {\n+            if (!isValidCode(str.substring(firstUnderscore + 1, secondUnderscore))) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            country = str.substring(firstUnderscore + 1, secondUnderscore);\n+\n+            if (secondUnderscore + 1 < str.length()) {\n+                variant = str.substring(secondUnderscore + 1);\n+                if (variant.length() < 1 || !isValidCode(variant)) {\n+                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+                }\n             }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+        }\n     }\n \n+    return new Locale(language, country, variant);\n+}\n+\n+private static boolean isValidCode(String code) {\n+    if (code == null || code.length() == 0) {\n+        return false;\n+    }\n+    for (int i = 0; i < code.length(); i++) {\n+        char ch = code.charAt(i);\n+        if (ch != '-' && !Character.isLetterOrDigit(ch)) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Obtains the list of locales to search through when performing",
    "result_reason": "java.lang.IllegalArgumentException: Invalid locale format: fr__P",
    "test_result": "FAIL"
}