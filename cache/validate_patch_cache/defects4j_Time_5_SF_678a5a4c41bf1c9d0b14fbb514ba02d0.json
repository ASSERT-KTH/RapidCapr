{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    // Extract values of the fields to be normalized\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n    int hours = getHours();\n    int minutes = getMinutes();\n    int seconds = getSeconds();\n    int millis = getMillis();\n\n    // Normalize weeks and days\n    days += weeks * 7;\n    weeks = 0;\n    while (days >= 7) {\n        days -= 7;\n        weeks++;\n    }\n\n    // Normalize years and months\n    months += weeks * 4;\n    years += months / 12;\n    months = months % 12;\n\n    // Normalize hours, minutes, seconds and millis\n    long totalMillis = (((long)days) * ((long)DateTimeConstants.MILLIS_PER_DAY))\n                       + (((long)hours) * ((long)DateTimeConstants.MILLIS_PER_HOUR))\n                       + (((long)minutes) * ((long)DateTimeConstants.MILLIS_PER_MINUTE))\n                       + (((long)seconds) * ((long)DateTimeConstants.MILLIS_PER_SECOND))\n                       + millis;\n    Chronology chrono = ISOChronology.getInstanceUTC();\n    totalMillis = chrono.months().add(totalMillis, months);\n    totalMillis = chrono.years().add(totalMillis, years);\n    DurationField[] fields = new DurationField[] { chrono.millis(), chrono.seconds(), \n                                                    chrono.minutes(), chrono.hours(), \n                                                    chrono.days(), chrono.weeks(),\n                                                    chrono.months(), chrono.years() };\n    Period result = new Period(totalMillis, fields, type);\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..947acb85 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,47 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    // Extract values of the fields to be normalized\n+    int years = getYears();\n+    int months = getMonths();\n+    int weeks = getWeeks();\n+    int days = getDays();\n+    int hours = getHours();\n+    int minutes = getMinutes();\n+    int seconds = getSeconds();\n+    int millis = getMillis();\n+\n+    // Normalize weeks and days\n+    days += weeks * 7;\n+    weeks = 0;\n+    while (days >= 7) {\n+        days -= 7;\n+        weeks++;\n+    }\n+\n+    // Normalize years and months\n+    months += weeks * 4;\n+    years += months / 12;\n+    months = months % 12;\n+\n+    // Normalize hours, minutes, seconds and millis\n+    long totalMillis = (((long)days) * ((long)DateTimeConstants.MILLIS_PER_DAY))\n+                       + (((long)hours) * ((long)DateTimeConstants.MILLIS_PER_HOUR))\n+                       + (((long)minutes) * ((long)DateTimeConstants.MILLIS_PER_MINUTE))\n+                       + (((long)seconds) * ((long)DateTimeConstants.MILLIS_PER_SECOND))\n+                       + millis;\n+    Chronology chrono = ISOChronology.getInstanceUTC();\n+    totalMillis = chrono.months().add(totalMillis, months);\n+    totalMillis = chrono.years().add(totalMillis, years);\n+    DurationField[] fields = new DurationField[] { chrono.millis(), chrono.seconds(), \n+                                                    chrono.minutes(), chrono.hours(), \n+                                                    chrono.days(), chrono.weeks(),\n+                                                    chrono.months(), chrono.years() };\n+    Period result = new Period(totalMillis, fields, type);\n+    return result;\n+}\n \n }",
    "result_reason": "error: no suitable constructor found for Period(long,DurationField[],PeriodType)",
    "test_result": "ERROR"
}