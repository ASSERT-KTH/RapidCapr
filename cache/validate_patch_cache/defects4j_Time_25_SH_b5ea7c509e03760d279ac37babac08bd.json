{
    "patch": "if (offsetAdjusted == offsetLocal && offsetLocal != 0) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n    if (nextLocal != nextAdjusted) {\n        return offsetLocal;\n    }\n}\nif (offsetLocal < offsetAdjusted) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    if (nextLocal != nextAdjusted) {\n        return offsetLocal;\n    }\n} else if (offsetLocal > offsetAdjusted) {\n    long prevAdjusted = previousTransition(instantAdjusted);\n    long prevLocal = previousTransition(instantLocal - offsetLocal);\n    if (prevAdjusted < prevLocal && instantLocal == prevLocal - offsetLocal) {\n        return offsetLocal;\n    }\n    if (prevAdjusted != prevLocal) {\n        return offsetAdjusted;\n    } else {\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (nextLocal != nextAdjusted) {\n            return offsetLocal;\n        }\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..061f4259 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,36 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetAdjusted == offsetLocal && offsetLocal != 0) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+    if (nextLocal != nextAdjusted) {\n+        return offsetLocal;\n+    }\n+}\n+if (offsetLocal < offsetAdjusted) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    if (nextLocal != nextAdjusted) {\n+        return offsetLocal;\n+    }\n+} else if (offsetLocal > offsetAdjusted) {\n+    long prevAdjusted = previousTransition(instantAdjusted);\n+    long prevLocal = previousTransition(instantLocal - offsetLocal);\n+    if (prevAdjusted < prevLocal && instantLocal == prevLocal - offsetLocal) {\n+        return offsetLocal;\n+    }\n+    if (prevAdjusted != prevLocal) {\n+        return offsetAdjusted;\n+    } else {\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextLocal != nextAdjusted) {\n+            return offsetLocal;\n+        }\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}