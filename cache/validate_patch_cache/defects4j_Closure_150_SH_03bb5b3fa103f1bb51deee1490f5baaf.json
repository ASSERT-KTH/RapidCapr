{
    "patch": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      switch (n.getToken()) {\n        case LP:\n          if (parent == scope.getRootNode()) {\n            handleFunctionInputs(parent);\n          }\n          break;\n        case FUNCTION:\n          if (parent.getToken() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case CATCH:\n          defineCatch(n, parent);\n          break;\n        case VAR:\n          defineVar(n, parent);\n          break;\n        default:\n          break;\n      }\n\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        visit(t, child, n);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..6813a5dc 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,35 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n+      if (n == scope.getRootNode()) return;\n+\n+      switch (n.getToken()) {\n+        case LP:\n+          if (parent == scope.getRootNode()) {\n+            handleFunctionInputs(parent);\n+          }\n+          break;\n+        case FUNCTION:\n+          if (parent.getToken() == Token.NAME) {\n             return;\n           }\n           defineDeclaredFunction(n, parent);\n           break;\n-        case Token.CATCH:\n+        case CATCH:\n           defineCatch(n, parent);\n           break;\n-        case Token.VAR:\n+        case VAR:\n           defineVar(n, parent);\n           break;\n+        default:\n+          break;\n       }\n+\n+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+        visit(t, child, n);\n+      }\n+    }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}