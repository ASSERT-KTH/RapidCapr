{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      for (lastArg = argList.getLastChild(); lastArg != null; ) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          Node argToRemove = lastArg;\n          lastArg = lastArg.getPrevious();\n          NodeUtil.removeChild(argToRemove);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n      if (lastArg == null) {\n        // This means that all the formal params are dead.\n        // Replace the arguments object so that we don't pass unnecessary\n        // variables to the function.\n        NodeUtil.deleteNode(argList);\n        Node newArgList = new Node(Token.LP, Node.EMPTY_CHILD_ARRAY);\n        newArgList.putBooleanProp(Node.IS_ARROW_FUNCTION, NodeUtil.isArrowFunction(function));\n        function.addChildToBack(newArgList);\n        compiler.reportCodeChange();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..a595731c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,42 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      for (lastArg = argList.getLastChild(); lastArg != null; ) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          Node argToRemove = lastArg;\n+          lastArg = lastArg.getPrevious();\n+          NodeUtil.removeChild(argToRemove);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+      if (lastArg == null) {\n+        // This means that all the formal params are dead.\n+        // Replace the arguments object so that we don't pass unnecessary\n+        // variables to the function.\n+        NodeUtil.deleteNode(argList);\n+        Node newArgList = new Node(Token.LP, Node.EMPTY_CHILD_ARRAY);\n+        newArgList.putBooleanProp(Node.IS_ARROW_FUNCTION, NodeUtil.isArrowFunction(function));\n+        function.addChildToBack(newArgList);\n+        compiler.reportCodeChange();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}