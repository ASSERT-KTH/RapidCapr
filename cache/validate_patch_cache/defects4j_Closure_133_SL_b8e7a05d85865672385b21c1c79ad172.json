{
    "patch": "  private String getRemainingJSDocLine() {\n    String result = null;\n    try {\n        result = stream.getRemainingJSDocLine().trim();\n        jsdocParser.parse();\n    } catch (IOException e) {\n        // If there is an exception, return an empty string\n        result = \"\";\n    } catch (JsDocParserException e) {\n        // If there is a bad type annotation, return an empty string\n        result = \"\";\n    }    \n    return result;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..0c640533 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,20 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+  private String getRemainingJSDocLine() {\n+    String result = null;\n+    try {\n+        result = stream.getRemainingJSDocLine().trim();\n+        jsdocParser.parse();\n+    } catch (IOException e) {\n+        // If there is an exception, return an empty string\n+        result = \"\";\n+    } catch (JsDocParserException e) {\n+        // If there is a bad type annotation, return an empty string\n+        result = \"\";\n+    }    \n+    return result;\n+  }\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}