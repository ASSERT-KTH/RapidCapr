{
    "patch": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      Node grandparent = n.getAncestor(2);\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent.getType() == Token.EXPR_RESULT && grandparent != null &&\n          grandparent.getType() == Token.SCRIPT) {\n        handleFunctionInputs(grandparent);\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..dffb431c 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1441,10 +1441,12 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param parent The parent of n\n      */\n     @Override public void visit(NodeTraversal t, Node n, Node parent) {\n+      Node grandparent = n.getAncestor(2);\n       if (n == scope.getRootNode()) return;\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+      if (n.getType() == Token.LP && parent.getType() == Token.EXPR_RESULT && grandparent != null &&\n+          grandparent.getType() == Token.SCRIPT) {\n+        handleFunctionInputs(grandparent);\n         return;\n       }\n ",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}