{
    "patch": "public static Locale toLocale(String str) {\n    if (str == null || str.trim().isEmpty()) {\n        return null;\n    }\n    final int len = str.length();\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    final char ch0 = str.charAt(0);\n    final char ch1 = str.charAt(1);\n    if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    int index = 2;\n    char separator = ' ';\n    if (len >= 5 && (str.charAt(2) == '_' || str.charAt(2) == '-')) {\n        separator = str.charAt(2);\n        index++;\n    }\n    if (len - index == 2) {\n        return new Locale(str.substring(0, 2));\n    } else if (len - index < 5) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    } else {\n        if (separator != ' ' && str.charAt(index + 2) != separator) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        final char ch3 = str.charAt(index + 1);\n        final char ch4 = str.charAt(index + 2);\n        if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (len - index == 5) {\n            return new Locale(str.substring(0, 2), str.substring(index + 1));\n        } else if (str.charAt(index + 3) == separator) {\n            return new Locale(str.substring(0, 2), str.substring(index + 1, index + 3), str.substring(index + 4));\n        } else if (len - index >= 7 && str.charAt(index + 4) == separator) {\n            return new Locale(str.substring(0, 2), str.substring(index + 1, index + 3), str.substring(index + 5));\n        } else {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..eb4869ba 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,47 +85,49 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n+public static Locale toLocale(String str) {\n+    if (str == null || str.trim().isEmpty()) {\n+        return null;\n+    }\n+    final int len = str.length();\n+    if (len < 2) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    final char ch0 = str.charAt(0);\n+    final char ch1 = str.charAt(1);\n+    if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    int index = 2;\n+    char separator = ' ';\n+    if (len >= 5 && (str.charAt(2) == '_' || str.charAt(2) == '-')) {\n+        separator = str.charAt(2);\n+        index++;\n+    }\n+    if (len - index == 2) {\n+        return new Locale(str.substring(0, 2));\n+    } else if (len - index < 5) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    } else {\n+        if (separator != ' ' && str.charAt(index + 2) != separator) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final int len = str.length();\n-        if (len < 2) {\n+        final char ch3 = str.charAt(index + 1);\n+        final char ch4 = str.charAt(index + 2);\n+        if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        if (len - index == 5) {\n+            return new Locale(str.substring(0, 2), str.substring(index + 1));\n+        } else if (str.charAt(index + 3) == separator) {\n+            return new Locale(str.substring(0, 2), str.substring(index + 1, index + 3), str.substring(index + 4));\n+        } else if (len - index >= 7 && str.charAt(index + 4) == separator) {\n+            return new Locale(str.substring(0, 2), str.substring(index + 1, index + 3), str.substring(index + 5));\n+        } else {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<[P]> but was:<[]>",
    "test_result": "FAIL"
}