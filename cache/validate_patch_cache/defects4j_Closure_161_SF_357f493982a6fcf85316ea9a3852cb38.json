{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n\n    if (!NodeUtil.isAssignmentOp(parent)) {\n      parent.removeChild(n);\n    }\n\n    Node arrayNode = left.detach();\n    arrayNode.setImmutable();\n    arrayNode.copyInformationFrom(left);\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n\n    if (intIndex != index || intIndex < 0) {\n      error(JSErrorType.JSC_INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    Node targetNode = null;\n    for (Node el = arrayNode.getFirstChild(); el != null; el = el.getNext()) {\n      if (el.getType() == Token.EMPTY) {\n        continue;\n      }\n\n      if (el.getIntProp(Node.ARRAY_INDEX_PROP, -1) == intIndex) {\n        targetNode = el;\n        break;\n      }\n    }\n\n    if (targetNode == null) {\n      targetNode = IR.undefined();\n    }\n\n    if (NodeUtil.isAssignmentOp(parent)) {\n      Node assignNode = parent.getParent();\n      if (assignNode.getType() == Token.ASSIGN) {\n        parent = assignNode;\n        parent.removeChild(n);\n        parent.replaceChild(left, arrayNode);\n        parent.replaceChild(right, IR.number(intIndex));\n      } else if (NodeUtil.isCompoundAssignmentType(assignNode.getType())) {\n        Node newValue = IR.number(targetNode.getDouble() + right.getDouble());\n        assignNode.getParent().replaceChild(assignNode, newValue);\n      }\n    } else {\n      parent.replaceChild(n, targetNode);\n      reportCodeChange();\n    }\n\n    return targetNode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..cf565272 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1275,51 +1275,59 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n \n-    if (right.getType() != Token.NUMBER) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n+    if (!NodeUtil.isAssignmentOp(parent)) {\n+      parent.removeChild(n);\n     }\n \n+    Node arrayNode = left.detach();\n+    arrayNode.setImmutable();\n+    arrayNode.copyInformationFrom(left);\n+\n     double index = right.getDouble();\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n \n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    if (intIndex != index || intIndex < 0) {\n+      error(JSErrorType.JSC_INVALID_GETELEM_INDEX_ERROR, right);\n       return n;\n     }\n \n-    Node elem = left.getFirstChild();\n-    for (int i = 0; elem != null && i < intIndex; i++) {\n-      elem = elem.getNext();\n+    Node targetNode = null;\n+    for (Node el = arrayNode.getFirstChild(); el != null; el = el.getNext()) {\n+      if (el.getType() == Token.EMPTY) {\n+        continue;\n+      }\n+\n+      if (el.getIntProp(Node.ARRAY_INDEX_PROP, -1) == intIndex) {\n+        targetNode = el;\n+        break;\n+      }\n     }\n \n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+    if (targetNode == null) {\n+      targetNode = IR.undefined();\n     }\n \n-    if (elem.getType() == Token.EMPTY) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+    if (NodeUtil.isAssignmentOp(parent)) {\n+      Node assignNode = parent.getParent();\n+      if (assignNode.getType() == Token.ASSIGN) {\n+        parent = assignNode;\n+        parent.removeChild(n);\n+        parent.replaceChild(left, arrayNode);\n+        parent.replaceChild(right, IR.number(intIndex));\n+      } else if (NodeUtil.isCompoundAssignmentType(assignNode.getType())) {\n+        Node newValue = IR.number(targetNode.getDouble() + right.getDouble());\n+        assignNode.getParent().replaceChild(assignNode, newValue);\n+      }\n     } else {\n-      left.removeChild(elem);\n+      parent.replaceChild(n, targetNode);\n+      reportCodeChange();\n     }\n \n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n-  }\n+    return targetNode;\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}