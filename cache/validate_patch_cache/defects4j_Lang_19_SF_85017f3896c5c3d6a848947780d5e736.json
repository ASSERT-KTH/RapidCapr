{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n\n    if(index < seqEnd && input.charAt(index) == '&' && (index + 1) < seqEnd && input.charAt(index + 1) == '#'){\n        int start = index + 2;\n        boolean isHex = false;\n\n        if(start < seqEnd){\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X'){\n                start++;\n                isHex = true;\n\n                if(start >= seqEnd){\n                    return 0;\n                }\n            }\n\n            int end = start;\n            while(end < seqEnd && (isHex ? Character.digit(input.charAt(end), 16) >= 0 : Character.isDigit(input.charAt(end)))){\n                end++;\n            }\n\n            if(end == start){\n                return 0;\n            }\n\n            if(isHex && end - start > 6){ //Ensure that no more than 6 characters are used in the hex value representation\n                return 0;\n            }\n\n            if(end < seqEnd && input.charAt(end) == ';'){\n                int entityValue;\n                try {\n                    if(isHex) {\n                        entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                    } else {\n                        entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                    }\n                } catch(NumberFormatException nfe) {\n                    System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n                    return 0;\n                }\n\n                if(entityValue > 0xFFFF) {\n                    char[] chrs = Character.toChars(entityValue);\n                    out.write(chrs[0]);\n                    out.write(chrs[1]);\n                } else {\n                    out.write(entityValue);\n                }\n\n                return (end - index + 1);\n            }else{\n                return 0;\n            }\n        }\n    }\n\n    return 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..c8eb9347 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,65 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n \n+    if(index < seqEnd && input.charAt(index) == '&' && (index + 1) < seqEnd && input.charAt(index + 1) == '#'){\n+        int start = index + 2;\n+        boolean isHex = false;\n+\n+        if(start < seqEnd){\n             char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n+            if(firstChar == 'x' || firstChar == 'X'){\n                 start++;\n                 isHex = true;\n \n-                // Check there's more than just an x after the &#\n+                if(start >= seqEnd){\n+                    return 0;\n+                }\n             }\n \n             int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n+            while(end < seqEnd && (isHex ? Character.digit(input.charAt(end), 16) >= 0 : Character.isDigit(input.charAt(end)))){\n                 end++;\n             }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n+            if(end == start){\n                 return 0;\n             }\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n-            } else {\n-                out.write(entityValue);\n+            if(isHex && end - start > 6){ //Ensure that no more than 6 characters are used in the hex value representation\n+                return 0;\n             }\n \n+            if(end < seqEnd && input.charAt(end) == ';'){\n+                int entityValue;\n+                try {\n+                    if(isHex) {\n+                        entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n+                    } else {\n+                        entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n+                    }\n+                } catch(NumberFormatException nfe) {\n+                    System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n+                    return 0;\n+                }\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+                if(entityValue > 0xFFFF) {\n+                    char[] chrs = Character.toChars(entityValue);\n+                    out.write(chrs[0]);\n+                    out.write(chrs[1]);\n+                } else {\n+                    out.write(entityValue);\n+                }\n+\n+                return (end - index + 1);\n+            }else{\n+                return 0;\n+            }\n         }\n-        return 0;\n     }\n+\n+    return 0;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: Failed to support unfinished entities (i.e. missing semi-colon expected:<Test []0 not test> but was:<Test [&#x3]0 not test>",
    "test_result": "FAIL"
}