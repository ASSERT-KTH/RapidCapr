{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    try {\n        // Creating object mapper and reading jsonStr\n        ObjectMapper mapper = new ObjectMapper();\n        JsonNode rootNode = mapper.readValue(jsonStr, JsonNode.class);\n\n        // Casted total and typed counts to double to get decimal value percentage\n        double typedCount = (double) rootNode.path(\"stats\").path(\"typed\").asInt();\n        double totalCount = (double) rootNode.path(\"stats\").path(\"total\").asInt();\n\n        // Calculated the percentage and rounded to 1 decimal place\n        double percent = (typedCount / totalCount) * 100.0;\n        percent = Math.round(percent * 10.0) / 10.0;\n\n        // Returning the percentage\n        return percent;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return -1.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..eebc751e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    try {\n+        // Creating object mapper and reading jsonStr\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode rootNode = mapper.readValue(jsonStr, JsonNode.class);\n+\n+        // Casted total and typed counts to double to get decimal value percentage\n+        double typedCount = (double) rootNode.path(\"stats\").path(\"typed\").asInt();\n+        double totalCount = (double) rootNode.path(\"stats\").path(\"total\").asInt();\n+\n+        // Calculated the percentage and rounded to 1 decimal place\n+        double percent = (typedCount / totalCount) * 100.0;\n+        percent = Math.round(percent * 10.0) / 10.0;\n+\n+        // Returning the percentage\n+        return percent;\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+        return -1.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}