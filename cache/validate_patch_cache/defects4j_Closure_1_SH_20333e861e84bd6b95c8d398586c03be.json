{
    "patch": "      // Also strip unreferenced default args\n      Node firstArg;\n      while ((firstArg = argList.getFirstChild()) != null) {\n        Var var = fnScope.getVar(firstArg.getString());\n        if (!referenced.contains(var)) {\n          if (!firstArg.hasChildren()) {\n            argList.removeChild(firstArg);\n            compiler.reportCodeChange();\n          } else if (isUnusedDefaultArg(firstArg.getLastChild())) {\n            firstArg.removeChild(firstArg.getLastChild());\n            compiler.reportCodeChange();\n          } else {\n            break;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..9ea9149a 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,20 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      // Also strip unreferenced default args\n+      Node firstArg;\n+      while ((firstArg = argList.getFirstChild()) != null) {\n+        Var var = fnScope.getVar(firstArg.getString());\n+        if (!referenced.contains(var)) {\n+          if (!firstArg.hasChildren()) {\n+            argList.removeChild(firstArg);\n+            compiler.reportCodeChange();\n+          } else if (isUnusedDefaultArg(firstArg.getLastChild())) {\n+            firstArg.removeChild(firstArg.getLastChild());\n+            compiler.reportCodeChange();\n+          } else {\n+            break;\n+          }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}