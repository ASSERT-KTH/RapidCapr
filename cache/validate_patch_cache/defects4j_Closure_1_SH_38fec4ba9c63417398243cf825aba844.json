{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    // Collect all referenced and non-referenced parameters\n    List<Node> referencedParams = new ArrayList<>();\n    List<Node> unreferencedParams = new ArrayList<>();\n\n    for (Node param : argList.children()) {\n      Var var = fnScope.getVar(param.getString());\n\n      if (referenced.contains(var)) {\n        referencedParams.add(param);\n      } else {\n        unreferencedParams.add(param);\n      }\n    }\n\n    // If all the parameters are referenced, return early\n    if (unreferencedParams.isEmpty()) {\n      return;\n    }\n\n    // Remove all non-referenced parameters\n    for (Node param : unreferencedParams) {\n      argList.removeChild(param);\n      compiler.reportCodeChange();\n    }\n\n    // Only update call sites if there are no type mismatches or argument counts to worry about\n    if (!modifyCallers) {\n      RemoveUnusedVars.removeUnusedFunctionArgs(fnScope, referenced, compiler);\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0fe61354 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,50 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    // Collect all referenced and non-referenced parameters\n+    List<Node> referencedParams = new ArrayList<>();\n+    List<Node> unreferencedParams = new ArrayList<>();\n+\n+    for (Node param : argList.children()) {\n+      Var var = fnScope.getVar(param.getString());\n+\n+      if (referenced.contains(var)) {\n+        referencedParams.add(param);\n+      } else {\n+        unreferencedParams.add(param);\n+      }\n+    }\n+\n+    // If all the parameters are referenced, return early\n+    if (unreferencedParams.isEmpty()) {\n+      return;\n+    }\n+\n+    // Remove all non-referenced parameters\n+    for (Node param : unreferencedParams) {\n+      argList.removeChild(param);\n+      compiler.reportCodeChange();\n+    }\n+\n+    // Only update call sites if there are no type mismatches or argument counts to worry about\n+    if (!modifyCallers) {\n+      RemoveUnusedVars.removeUnusedFunctionArgs(fnScope, referenced, compiler);\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}