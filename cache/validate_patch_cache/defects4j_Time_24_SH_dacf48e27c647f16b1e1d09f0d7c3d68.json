{
    "patch": "            long tmpMillis = millis;\n            try {\n                for (int i = 0; i < count; i++) {\n                    tmpMillis = savedFields[i].set(tmpMillis, resetFields);\n                }\n            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            }\n            if (resetFields) {\n                long computedMillis = iChrono.getDateTimeMillis(iYear, iMonthOfYear, iDayOfMonth,\n                                                                iMillisOfDay);\n                if (iZone != null) {\n                    computedMillis = iZone.adjustOffset(computedMillis, iStandardOffset);\n                }\n                if (millis != computedMillis) {\n                    String str = \"Computed millis \" + computedMillis +\n                                 \" did not match \" + millis + \" \" + this;\n                    throw new IllegalFieldValueException(str, DateTimeFieldType.millisOfSecond());\n                }\n            }\n            return tmpMillis;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..d37aef13 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,30 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            long tmpMillis = millis;\n+            try {\n+                for (int i = 0; i < count; i++) {\n+                    tmpMillis = savedFields[i].set(tmpMillis, resetFields);\n+                }\n+            } catch (IllegalFieldValueException e) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                throw e;\n+            }\n+            if (resetFields) {\n+                long computedMillis = iChrono.getDateTimeMillis(iYear, iMonthOfYear, iDayOfMonth,\n+                                                                iMillisOfDay);\n+                if (iZone != null) {\n+                    computedMillis = iZone.adjustOffset(computedMillis, iStandardOffset);\n+                }\n+                if (millis != computedMillis) {\n+                    String str = \"Computed millis \" + computedMillis +\n+                                 \" did not match \" + millis + \" \" + this;\n+                    throw new IllegalFieldValueException(str, DateTimeFieldType.millisOfSecond());\n+                }\n+            }\n+            return tmpMillis;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}