{
    "patch": "            Matcher varargMatcher = null;\n            for (int position = 0; position < matchers.size(); position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    Object argument;\n                    if (isVariableArgument(invocation, position)) {\n                        Object[] varArgs = extractVarargs(invocation.getRawArguments(), indexOfVararg);\n                        varargMatcher = m;\n                        for (Object varArg : varArgs) {\n                            ((CapturesArguments) m).captureFrom(varArg);\n                        }\n                    } else {\n                        argument = invocation.getRawArguments()[position];\n                        ((CapturesArguments) m).captureFrom(argument);\n                    }\n                }\n            }\n            if (varargMatcher != null) {\n                removeVarargsFromMatchers(matchers, varargMatcher);\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..d0451c5e4 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,26 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Matcher varargMatcher = null;\n+            for (int position = 0; position < matchers.size(); position++) {\n+                Matcher m = matchers.get(position);\n+                if (m instanceof CapturesArguments) {\n+                    Object argument;\n+                    if (isVariableArgument(invocation, position)) {\n+                        Object[] varArgs = extractVarargs(invocation.getRawArguments(), indexOfVararg);\n+                        varargMatcher = m;\n+                        for (Object varArg : varArgs) {\n+                            ((CapturesArguments) m).captureFrom(varArg);\n+                        }\n+                    } else {\n+                        argument = invocation.getRawArguments()[position];\n+                        ((CapturesArguments) m).captureFrom(argument);\n+                    }\n+                }\n+            }\n+            if (varargMatcher != null) {\n+                removeVarargsFromMatchers(matchers, varargMatcher);\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}