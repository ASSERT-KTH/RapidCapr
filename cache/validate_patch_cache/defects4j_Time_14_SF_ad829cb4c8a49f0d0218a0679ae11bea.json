{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        // month is largest field and being added to, such as month-day\n        long instant = 0L;\n        int day = 0;\n        int monthOfYear = 0;\n        int year = 0;\n\n        for (int i = 0, isize = partial.size(); i < isize; i++) { \n            DateTimeFieldType fieldType = partial.getFieldType(i); \n            if (fieldType.equals(DateTimeFieldType.year())) {\n                year = values[i];  \n            } else if (fieldType.equals(DateTimeFieldType.monthOfYear())) {\n                monthOfYear = values[i];\n            } else if (fieldType.equals(DateTimeFieldType.dayOfMonth())) {\n                day = values[i];\n            }\n            instant = fieldType.getField(iChronology).set(instant, values[i]);\n        }\n\n         if (iChronology.monthOfYear().isSupported(partial)) {\n            int maxDaysInMonth = iChronology.monthOfYear().getMaximumValue(instant);\n            day = Math.min(day, maxDaysInMonth);\n        }\n\n        instant = iChronology.year().set(instant, year);\n        instant = iChronology.monthOfYear().set(instant, monthOfYear);\n        instant = iChronology.dayOfMonth().set(instant, day);\n\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..b3648bd8 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,46 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        // month is largest field and being added to, such as month-day\n+        long instant = 0L;\n+        int day = 0;\n+        int monthOfYear = 0;\n+        int year = 0;\n+\n+        for (int i = 0, isize = partial.size(); i < isize; i++) { \n+            DateTimeFieldType fieldType = partial.getFieldType(i); \n+            if (fieldType.equals(DateTimeFieldType.year())) {\n+                year = values[i];  \n+            } else if (fieldType.equals(DateTimeFieldType.monthOfYear())) {\n+                monthOfYear = values[i];\n+            } else if (fieldType.equals(DateTimeFieldType.dayOfMonth())) {\n+                day = values[i];\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            instant = fieldType.getField(iChronology).set(instant, values[i]);\n+        }\n+\n+         if (iChronology.monthOfYear().isSupported(partial)) {\n+            int maxDaysInMonth = iChronology.monthOfYear().getMaximumValue(instant);\n+            day = Math.min(day, maxDaysInMonth);\n         }\n+\n+        instant = iChronology.year().set(instant, year);\n+        instant = iChronology.monthOfYear().set(instant, monthOfYear);\n+        instant = iChronology.dayOfMonth().set(instant, day);\n+\n+        instant = add(instant, valueToAdd);\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: method isSupported in class DateTimeField cannot be applied to given types;",
    "test_result": "ERROR"
}