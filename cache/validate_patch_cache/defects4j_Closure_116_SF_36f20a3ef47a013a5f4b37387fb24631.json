{
    "patch": "/**\n * Returns true if a reference to given fnNode can be inlined directly at a call site.\n * @param callNode the calling node\n * @param fnNode the function node\n * @return a CanInlineResult indicating whether the inlining is possible, and any additional\n * restrictions that apply\n */\nprivate CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  // From the perspective of a call to a function, a function may have implicit or explicit parameters.\n  // Explicit parameters are those listed in function parameter list,\n  // and implicit parameters are those that a function may access from the containing function's scope chain.\n  // So, we want to see which parameters (explicit or implicit) that the function uses, so that we can compare\n  // them with the arguments passed into the function.\n\n  // First, let's get all the 'explicit' parameter names of the function.\n  List<Node> params = NodeUtil.getFunctionParameters(fnNode).children();\n  Set<String> paramNames = new HashSet<>();\n  for (Node param : params) {\n    paramNames.add(param.getString());\n  }\n\n  // Second, let's get all the 'implicit' parameter names of the function, if any.\n  // This includes the `this` keyword, and any identifiers from the scope surrounding the function.\n  Set<String> implicitParamNames = new HashSet<>();\n  if (block.hasChildren()) {\n    Node cur = block.getFirstChild();\n    while (cur != null) {\n      if (NodeUtil.isNameDeclaration(cur)) {\n        implicitParamNames.add(cur.getFirstChild().getString());\n      }\n      cur = cur.getNext();\n    }\n  }\n\n  // Last, we need to start comparing the function parameters with the arguments passed into the function.\n  // Note that arguments might be passed implicitly (i.e., not as function parameters),\n  // in which case they must be within the implicit parameters set.\n  Node arg = callNode.getFirstChild().getNext(); // first parameter (may be implicit)\n  for (Node param : params) { // compare all explicit parameters first\n    if (arg == null) {\n      // no more arguments: either no implicit parameters left to check or more explicit parameters than arguments.\n      return implicitParamNames.isEmpty() ? CanInlineResult.MAYBE : CanInlineResult.NO;\n    }\n\n    boolean mayHaveSideEffects = NodeUtil.mayHaveSideEffects(arg, compiler);\n    // Check if an argument is reused more than once in the function block.\n    if (NodeUtil.mayEffectMutableState(arg, compiler) && !isSingleUse(param.getString(), block)) {\n      return CanInlineResult.NO;\n    }\n    // check for side-effects, and possibly update implicitParamNames\n    if (param.isName()) {\n      paramNames.remove(param.getString());\n      if (mayHaveSideEffects || !implicitParamNames.remove(param.getString())) {\n        return CanInlineResult.NO;\n      }\n    }\n\n    arg = arg.getNext();\n  }\n\n  // At this point, all explicit parameters have been compared with their arguments.\n  // The argument list may still contain implicit parameters, so we need to check them now.\n  while (arg != null) {\n    if (NodeUtil.mayHaveSideEffects(arg, compiler) || implicitParamNames.isEmpty()) {\n      return CanInlineResult.NO;\n    }\n    implicitParamNames.remove(arg.getString());\n    arg = arg.getNext();\n  }\n\n  // If there are no more parameters to check and we still have implicit parameters left,\n  // we can only say \"maybe\" because there may still be unaccounted-for side effects.\n  // If there are no more implicit parameters left either, we know all arguments have been accounted for.\n  return implicitParamNames.isEmpty() ? CanInlineResult.YES : CanInlineResult.MAYBE;\n}\n\n/**\n * Returns true if the given Symbol can be shown to have only one definition/declaration that could\n * potentially be aliased with the given Block.\n * @param symbolName the name of the symbol\n * @param block the block being inlined into\n */\nprivate boolean isSingleUse(String symbolName, Node block) {\n  return NodeUtil.getNameDeclarationReachable(block, symbolName, /* includeLocalFunctions */ true,\n      /* includeBlockScope */ true) == null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..79fb29c0 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,68 +686,99 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n+/**\n+ * Returns true if a reference to given fnNode can be inlined directly at a call site.\n+ * @param callNode the calling node\n+ * @param fnNode the function node\n+ * @return a CanInlineResult indicating whether the inlining is possible, and any additional\n+ * restrictions that apply\n+ */\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  Node block = fnNode.getLastChild();\n \n+  // From the perspective of a call to a function, a function may have implicit or explicit parameters.\n+  // Explicit parameters are those listed in function parameter list,\n+  // and implicit parameters are those that a function may access from the containing function's scope chain.\n+  // So, we want to see which parameters (explicit or implicit) that the function uses, so that we can compare\n+  // them with the arguments passed into the function.\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  // First, let's get all the 'explicit' parameter names of the function.\n+  List<Node> params = NodeUtil.getFunctionParameters(fnNode).children();\n+  Set<String> paramNames = new HashSet<>();\n+  for (Node param : params) {\n+    paramNames.add(param.getString());\n+  }\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+  // Second, let's get all the 'implicit' parameter names of the function, if any.\n+  // This includes the `this` keyword, and any identifiers from the scope surrounding the function.\n+  Set<String> implicitParamNames = new HashSet<>();\n+  if (block.hasChildren()) {\n+    Node cur = block.getFirstChild();\n+    while (cur != null) {\n+      if (NodeUtil.isNameDeclaration(cur)) {\n+        implicitParamNames.add(cur.getFirstChild().getString());\n       }\n+      cur = cur.getNext();\n     }\n+  }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+  // Last, we need to start comparing the function parameters with the arguments passed into the function.\n+  // Note that arguments might be passed implicitly (i.e., not as function parameters),\n+  // in which case they must be within the implicit parameters set.\n+  Node arg = callNode.getFirstChild().getNext(); // first parameter (may be implicit)\n+  for (Node param : params) { // compare all explicit parameters first\n+    if (arg == null) {\n+      // no more arguments: either no implicit parameters left to check or more explicit parameters than arguments.\n+      return implicitParamNames.isEmpty() ? CanInlineResult.MAYBE : CanInlineResult.NO;\n+    }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+    boolean mayHaveSideEffects = NodeUtil.mayHaveSideEffects(arg, compiler);\n+    // Check if an argument is reused more than once in the function block.\n+    if (NodeUtil.mayEffectMutableState(arg, compiler) && !isSingleUse(param.getString(), block)) {\n+      return CanInlineResult.NO;\n+    }\n+    // check for side-effects, and possibly update implicitParamNames\n+    if (param.isName()) {\n+      paramNames.remove(param.getString());\n+      if (mayHaveSideEffects || !implicitParamNames.remove(param.getString())) {\n+        return CanInlineResult.NO;\n       }\n     }\n \n-    return CanInlineResult.YES;\n+    arg = arg.getNext();\n   }\n \n+  // At this point, all explicit parameters have been compared with their arguments.\n+  // The argument list may still contain implicit parameters, so we need to check them now.\n+  while (arg != null) {\n+    if (NodeUtil.mayHaveSideEffects(arg, compiler) || implicitParamNames.isEmpty()) {\n+      return CanInlineResult.NO;\n+    }\n+    implicitParamNames.remove(arg.getString());\n+    arg = arg.getNext();\n+  }\n+\n+  // If there are no more parameters to check and we still have implicit parameters left,\n+  // we can only say \"maybe\" because there may still be unaccounted-for side effects.\n+  // If there are no more implicit parameters left either, we know all arguments have been accounted for.\n+  return implicitParamNames.isEmpty() ? CanInlineResult.YES : CanInlineResult.MAYBE;\n+}\n+\n+/**\n+ * Returns true if the given Symbol can be shown to have only one definition/declaration that could\n+ * potentially be aliased with the given Block.\n+ * @param symbolName the name of the symbol\n+ * @param block the block being inlined into\n+ */\n+private boolean isSingleUse(String symbolName, Node block) {\n+  return NodeUtil.getNameDeclarationReachable(block, symbolName, /* includeLocalFunctions */ true,\n+      /* includeBlockScope */ true) == null;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}