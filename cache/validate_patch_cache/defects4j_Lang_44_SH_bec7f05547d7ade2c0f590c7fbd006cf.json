{
    "patch": "        if(val.matches(\"^[-+]?\\\\d+(\\\\.\\\\d+)?([eE][-+]?\\\\d+)?$\")){\n            // string is a valid number format\n            if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n                return createInteger(val);\n            }\n            // try to parse as float or double\n            try {\n                float f = Float.parseFloat(val);\n                if(!Float.isInfinite(f)) {\n                    return f;\n                }\n            }catch(NumberFormatException e){}\n\n            try {\n                double d = Double.parseDouble(val);\n                if(!Double.isInfinite(d)) {\n                    return d;\n                }\n            }catch(NumberFormatException e){}\n            \n            // try to parse as big decimal\n            try {\n                return createBigDecimal(val);\n            } catch (NumberFormatException e) {}\n            \n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..c6528c0f 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,33 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        if(val.matches(\"^[-+]?\\\\d+(\\\\.\\\\d+)?([eE][-+]?\\\\d+)?$\")){\n+            // string is a valid number format\n+            if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+                return createInteger(val);\n+            }\n+            // try to parse as float or double\n+            try {\n+                float f = Float.parseFloat(val);\n+                if(!Float.isInfinite(f)) {\n+                    return f;\n+                }\n+            }catch(NumberFormatException e){}\n+\n+            try {\n+                double d = Double.parseDouble(val);\n+                if(!Double.isInfinite(d)) {\n+                    return d;\n+                }\n+            }catch(NumberFormatException e){}\n+            \n+            // try to parse as big decimal\n+            try {\n+                return createBigDecimal(val);\n+            } catch (NumberFormatException e) {}\n+            \n+            throw new NumberFormatException(val + \" is not a valid number.\");\n+        }\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}