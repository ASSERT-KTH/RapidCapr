{
    "patch": "        MockHandler<T> newMockHandler = null;\n        try {\n            newMockHandler = new MockHandler<T>((MockHandlerInterface<T>)oldMockHandler);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to initiate newMockHandler.\", e);\n        }\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        Factory factory = (Factory) mock;\n        Callback[] callbacks = factory.getCallbacks();\n        if (callbacks == null || callbacks.length == 0) {\n            callbacks = new Callback[] { newFilter };\n        } else {\n            boolean methodInterceptorFound = false;\n            for (int i = 0; i < callbacks.length; i++) {\n                if (callbacks[i] instanceof MethodInterceptorFilter) {\n                    callbacks[i] = newFilter;\n                    methodInterceptorFound = true;\n                    break;\n                }\n            }\n            if (!methodInterceptorFound) {\n                Callback[] updatedCallbacks = new Callback[callbacks.length + 1];\n                System.arraycopy(callbacks, 0, updatedCallbacks, 1, callbacks.length);\n                updatedCallbacks[0] = newFilter;\n                callbacks = updatedCallbacks;\n            }\n        }\n        factory.setCallbacks(callbacks);",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..56bdb8652 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,37 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        MockHandler<T> newMockHandler = null;\n+        try {\n+            newMockHandler = new MockHandler<T>((MockHandlerInterface<T>)oldMockHandler);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Failed to initiate newMockHandler.\", e);\n+        }\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        Factory factory = (Factory) mock;\n+        Callback[] callbacks = factory.getCallbacks();\n+        if (callbacks == null || callbacks.length == 0) {\n+            callbacks = new Callback[] { newFilter };\n+        } else {\n+            boolean methodInterceptorFound = false;\n+            for (int i = 0; i < callbacks.length; i++) {\n+                if (callbacks[i] instanceof MethodInterceptorFilter) {\n+                    callbacks[i] = newFilter;\n+                    methodInterceptorFound = true;\n+                    break;\n+                }\n+            }\n+            if (!methodInterceptorFound) {\n+                Callback[] updatedCallbacks = new Callback[callbacks.length + 1];\n+                System.arraycopy(callbacks, 0, updatedCallbacks, 1, callbacks.length);\n+                updatedCallbacks[0] = newFilter;\n+                callbacks = updatedCallbacks;\n+            }\n+        }\n+        factory.setCallbacks(callbacks);\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}