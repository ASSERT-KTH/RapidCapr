{
    "patch": "if (ref == getInitializingReference()) {\n  // If the initializing reference is in a loop, then the variable may be reassigned\n  // multiple times, so it's not a one-time reassignment.\n  if (block.isLoop) {\n    return false;\n  }\n\n  return true;\n} else if (references.indexOf(ref) == 0 && isInitializingDeclarationAt(0)) {\n  return true;\n} else if (block.isFunction) {\n  // If we are in the function boundary and the assignment was done during the declaration,\n  // then it's a one-time reassignment.\n  if (references.indexOf(ref) == 0 && isInitializingDeclarationAt(0)) {\n    return true;\n  }\n\n  block = block.getParent();\n} else if (block.isLoop) {\n  // loop assignment is not ok since it may execute multiple times\n  return false;\n} else {\n  block = block.getParent();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..6116d248 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,30 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (ref == getInitializingReference()) {\n+  // If the initializing reference is in a loop, then the variable may be reassigned\n+  // multiple times, so it's not a one-time reassignment.\n+  if (block.isLoop) {\n+    return false;\n+  }\n+\n+  return true;\n+} else if (references.indexOf(ref) == 0 && isInitializingDeclarationAt(0)) {\n+  return true;\n+} else if (block.isFunction) {\n+  // If we are in the function boundary and the assignment was done during the declaration,\n+  // then it's a one-time reassignment.\n+  if (references.indexOf(ref) == 0 && isInitializingDeclarationAt(0)) {\n+    return true;\n+  }\n+\n+  block = block.getParent();\n+} else if (block.isLoop) {\n+  // loop assignment is not ok since it may execute multiple times\n+  return false;\n+} else {\n+  block = block.getParent();\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}