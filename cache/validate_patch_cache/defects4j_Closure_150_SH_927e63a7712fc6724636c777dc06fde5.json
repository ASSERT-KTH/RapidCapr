{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.NUMBER:\n        case Token.STRING:\n        case Token.TRUE:\n        case Token.FALSE:\n        case Token.NULL:\n          if (parent.getType() == Token.EXPR_RESULT) {\n            attachLiteralNodeValue(n);\n          }\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..f140c477 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1462,6 +1462,15 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n+        case Token.NUMBER:\n+        case Token.STRING:\n+        case Token.TRUE:\n+        case Token.FALSE:\n+        case Token.NULL:\n+          if (parent.getType() == Token.EXPR_RESULT) {\n+            attachLiteralNodeValue(n);\n+          }\n+          break;\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}