{
    "patch": "      if (block.isFunction) {\n        // If a variable is assigned in two different functions it is not\n        // assigned once.\n        if (!ref.getScope().equals(block.getScope())) {\n          return false;\n        }\n        break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..38dc2e52 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,14 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        // If a variable is assigned in two different functions it is not\n+        // assigned once.\n+        if (!ref.getScope().equals(block.getScope())) {\n+          return false;\n+        }\n+        break;\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}