{
    "patch": "import org.mockito.internal.creation.bytebuddy.MockMethodInterceptor;\nimport org.mockito.internal.creation.cglib.AbstractMockFactory;\nimport org.mockito.internal.creation.cglib.MethodInterceptorFilter;\nimport org.mockito.internal.handler.InvocationNotifierHandler;\nimport org.mockito.internal.handler.MockHandlerImpl;\nimport org.mockito.internal.handler.MockHandlerInterface;\nimport org.mockito.invocation.MockHandler;\nimport org.mockito.mock.MockCreationSettings;\nimport org.mockito.mock.MockSettings;\nimport org.mockito.plugins.MockMaker;\n\nimport java.util.List;\n\npublic class MockResetter {\n    public static <T> void resetMock(T mock) {\n        MockHandlerImpl<Object> oldMockHandler = (MockHandlerImpl<Object>) getMockHandler(mock);\n\n        // Get the list of Proxy mock handlers\n        List<MockHandler<Object>> mockHandlers = oldMockHandler.getMockHandlers();\n        MockHandler<Object> lastMockHandler = null;\n\n        // Iterate through list of handlers until we reach the last one\n        for (MockHandler<Object> handler : mockHandlers) {\n            if (isLastHandler(handler)) {\n                lastMockHandler = handler;\n                break;\n            }\n        }\n\n        // Create new MethodInterceptorFilter\n        MockHandler<Object> newMockHandler = new MockMethodInterceptor<>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mock$\n        ((AbstractMockFactory) mock).setMockHandler(newInvNotifierHandler(mock, lastMockHandler, newFilter));\n    }\n\n    private static boolean isLastHandler(MockHandler<Object> handler) {\n        return handler instanceof InvocationNotifierHandler;\n    }\n\n    private static <T> MockHandlerInterface<T> getMockHandler(T mock) {\n        return ((MockMaker) org.mockito.Mockito.framework().getMockConstruction()).getHandler(mock);\n    }\n\n    private static <T> MockHandler<T> newInvNotifierHandler(T mock, MockHandler<T> delegate, MethodInterceptorFilter filter) {\n        return new InvocationNotifierHandler<>(mock, delegate, filter);\n    }\n\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..348b178f6 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,55 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.internal.creation.bytebuddy.MockMethodInterceptor;\n+import org.mockito.internal.creation.cglib.AbstractMockFactory;\n+import org.mockito.internal.creation.cglib.MethodInterceptorFilter;\n+import org.mockito.internal.handler.InvocationNotifierHandler;\n+import org.mockito.internal.handler.MockHandlerImpl;\n+import org.mockito.internal.handler.MockHandlerInterface;\n+import org.mockito.invocation.MockHandler;\n+import org.mockito.mock.MockCreationSettings;\n+import org.mockito.mock.MockSettings;\n+import org.mockito.plugins.MockMaker;\n+\n+import java.util.List;\n+\n+public class MockResetter {\n+    public static <T> void resetMock(T mock) {\n+        MockHandlerImpl<Object> oldMockHandler = (MockHandlerImpl<Object>) getMockHandler(mock);\n+\n+        // Get the list of Proxy mock handlers\n+        List<MockHandler<Object>> mockHandlers = oldMockHandler.getMockHandlers();\n+        MockHandler<Object> lastMockHandler = null;\n+\n+        // Iterate through list of handlers until we reach the last one\n+        for (MockHandler<Object> handler : mockHandlers) {\n+            if (isLastHandler(handler)) {\n+                lastMockHandler = handler;\n+                break;\n+            }\n+        }\n+\n+        // Create new MethodInterceptorFilter\n+        MockHandler<Object> newMockHandler = new MockMethodInterceptor<>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mock$\n+        ((AbstractMockFactory) mock).setMockHandler(newInvNotifierHandler(mock, lastMockHandler, newFilter));\n+    }\n+\n+    private static boolean isLastHandler(MockHandler<Object> handler) {\n+        return handler instanceof InvocationNotifierHandler;\n+    }\n+\n+    private static <T> MockHandlerInterface<T> getMockHandler(T mock) {\n+        return ((MockMaker) org.mockito.Mockito.framework().getMockConstruction()).getHandler(mock);\n+    }\n+\n+    private static <T> MockHandler<T> newInvNotifierHandler(T mock, MockHandler<T> delegate, MethodInterceptorFilter filter) {\n+        return new InvocationNotifierHandler<>(mock, delegate, filter);\n+    }\n+\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}