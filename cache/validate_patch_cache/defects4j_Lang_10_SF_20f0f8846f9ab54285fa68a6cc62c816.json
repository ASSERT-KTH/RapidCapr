{
    "patch": "@Test\npublic void testEscapeRegex_NullRegex() {\n    assertEquals(new StringBuilder(\"\\\\s*+abc\\\\s*+1\\\\[\\\\]\"), escapeRegex(null, \"  abc 1[] \", false));\n}\n\n@Test\npublic void testEscapeRegex_NonNullRegex() {\n    StringBuilder regex = new StringBuilder();\n    StringBuilder expected = new StringBuilder(\"\\\\s*+abc\\\\s*+1\\\\[\\\\]\");\n    assertEquals(expected, escapeRegex(regex, \"  abc 1[] \", false));\n    assertSame(expected, regex);\n}\n\n@Test\npublic void testEscapeRegex_Unquote() {\n    StringBuilder regex = new StringBuilder();\n    assertEquals(new StringBuilder(\"\\\\s*+abbbc\\\\s*+\"), escapeRegex(regex, \"'abbbc'\", true));\n}\n\n@Test\npublic void testEscapeRegex_Unquote_UnterminatedQuote() {\n    assertThrows(IllegalArgumentException.class, () -> escapeRegex(null, \"'abbbc\", true));\n}\n\n@Test\npublic void testEscapeRegex() {\n    assertEquals(new StringBuilder(\"\\\\*\\\\?\\\\[\\\\](){}|.+$\"), escapeRegex(null, \"*?[ ](){}|.+${}\", false));\n}\n\n@Test\npublic void testEscapeRegex_SpacesOnly() {\n    assertEquals(new StringBuilder(\"\\\\s*+\"), escapeRegex(null, \"    \", false));\n}\n\n@Test\npublic void testEscapeRegex_Backslash() {\n    assertEquals(new StringBuilder(\"\\\\\\\\\\\\\\\\\"), escapeRegex(null, \"\\\\\", false));\n}\n\n@Test\npublic void testEscapeRegex_Backslash_Quote() {\n    assertEquals(new StringBuilder(\"\\\\\\\\\\\\'\"), escapeRegex(null, \"\\\\'\", false));\n}\n\n@Test\npublic void testEscapeRegex_Backslash_Quote_Unquote() {\n    assertEquals(new StringBuilder(\"'\"), escapeRegex(null, \"\\\\'\", true));\n}\n\n@Test\npublic void testEscapeRegex_Backslash_Sequence() {\n    assertEquals(new StringBuilder(\"\\\\\\\\\\\\\\\\a\"), escapeRegex(null, \"\\\\\\\\a\", false));\n}\n\n@Test\npublic void testEscapeRegex_Backslash_Sequence_Unquote() {\n    assertEquals(new StringBuilder(\"\\\\\\\\a\"), escapeRegex(null, \"\\\\\\\\a\", true));\n}\n\n@Test\npublic void testEscapeRegex_Unquote_InvalidInput() {\n    assertThrows(IllegalArgumentException.class, () -> escapeRegex(null, \"abc'\", true));\n}\n\n@Test\npublic void testEscapeRegex_Backslash_AtEndOfInput() {\n    assertEquals(new StringBuilder(\"\\\\\\\\\\\\\"), escapeRegex(null, \"\\\\\\\\\", false));\n}\n\n@Test\npublic void testEscapeRegex_Backslash_AtEndOfInput_Unquote() {\n    assertEquals(new StringBuilder(\"\\\\\\\\\"), escapeRegex(null, \"\\\\\\\\\", true));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..4c67547c 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,79 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n-                }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n-            }\n-            regex.append(c);\n-        }\n-        return regex;\n-    }\n+@Test\n+public void testEscapeRegex_NullRegex() {\n+    assertEquals(new StringBuilder(\"\\\\s*+abc\\\\s*+1\\\\[\\\\]\"), escapeRegex(null, \"  abc 1[] \", false));\n+}\n+\n+@Test\n+public void testEscapeRegex_NonNullRegex() {\n+    StringBuilder regex = new StringBuilder();\n+    StringBuilder expected = new StringBuilder(\"\\\\s*+abc\\\\s*+1\\\\[\\\\]\");\n+    assertEquals(expected, escapeRegex(regex, \"  abc 1[] \", false));\n+    assertSame(expected, regex);\n+}\n+\n+@Test\n+public void testEscapeRegex_Unquote() {\n+    StringBuilder regex = new StringBuilder();\n+    assertEquals(new StringBuilder(\"\\\\s*+abbbc\\\\s*+\"), escapeRegex(regex, \"'abbbc'\", true));\n+}\n+\n+@Test\n+public void testEscapeRegex_Unquote_UnterminatedQuote() {\n+    assertThrows(IllegalArgumentException.class, () -> escapeRegex(null, \"'abbbc\", true));\n+}\n+\n+@Test\n+public void testEscapeRegex() {\n+    assertEquals(new StringBuilder(\"\\\\*\\\\?\\\\[\\\\](){}|.+$\"), escapeRegex(null, \"*?[ ](){}|.+${}\", false));\n+}\n+\n+@Test\n+public void testEscapeRegex_SpacesOnly() {\n+    assertEquals(new StringBuilder(\"\\\\s*+\"), escapeRegex(null, \"    \", false));\n+}\n+\n+@Test\n+public void testEscapeRegex_Backslash() {\n+    assertEquals(new StringBuilder(\"\\\\\\\\\\\\\\\\\"), escapeRegex(null, \"\\\\\", false));\n+}\n+\n+@Test\n+public void testEscapeRegex_Backslash_Quote() {\n+    assertEquals(new StringBuilder(\"\\\\\\\\\\\\'\"), escapeRegex(null, \"\\\\'\", false));\n+}\n+\n+@Test\n+public void testEscapeRegex_Backslash_Quote_Unquote() {\n+    assertEquals(new StringBuilder(\"'\"), escapeRegex(null, \"\\\\'\", true));\n+}\n+\n+@Test\n+public void testEscapeRegex_Backslash_Sequence() {\n+    assertEquals(new StringBuilder(\"\\\\\\\\\\\\\\\\a\"), escapeRegex(null, \"\\\\\\\\a\", false));\n+}\n+\n+@Test\n+public void testEscapeRegex_Backslash_Sequence_Unquote() {\n+    assertEquals(new StringBuilder(\"\\\\\\\\a\"), escapeRegex(null, \"\\\\\\\\a\", true));\n+}\n+\n+@Test\n+public void testEscapeRegex_Unquote_InvalidInput() {\n+    assertThrows(IllegalArgumentException.class, () -> escapeRegex(null, \"abc'\", true));\n+}\n+\n+@Test\n+public void testEscapeRegex_Backslash_AtEndOfInput() {\n+    assertEquals(new StringBuilder(\"\\\\\\\\\\\\\"), escapeRegex(null, \"\\\\\\\\\", false));\n+}\n+\n+@Test\n+public void testEscapeRegex_Backslash_AtEndOfInput_Unquote() {\n+    assertEquals(new StringBuilder(\"\\\\\\\\\"), escapeRegex(null, \"\\\\\\\\\", true));\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}