{
    "patch": "            if(val.startsWith(\"+\")) {\n                val = val.substring(1);\n            }\n            if (val.startsWith(\"--\")) {\n                // this is protection for poorness in java.lang.BigDecimal.\n                // it accepts this as a legal value, but it does not appear\n                // to be in specification of class. OS X Java parses it to\n                // a wrong value.\n                return null;\n            }\n            if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n                return createInteger(val);\n            }\n            // decimal point\n            if (val.contains(\".\")) {\n                if (val.endsWith(\".\"))\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n\n                char e = 'n';\n                if (val.contains(\"e\"))\n                    e = 'e';\n                else if (val.contains(\"E\"))\n                    e = 'E';\n\n                if (e != 'n') {\n                    int indexOfE = val.indexOf(e);\n                    String afterE = val.substring(indexOfE + 1);\n                    if(afterE.startsWith(\"+\") || afterE.startsWith(\"-\")) {\n                        afterE = afterE.substring(1);\n                    }\n                    String mantissa = val.substring(0, indexOfE);\n                    if (mantissa.equals(\".\"))\n                        throw new NumberFormatException(val + \" is not a valid number.\");\n                    if (mantissa.startsWith(\".\")) {\n                        mantissa = \"0\" + mantissa;\n                    }\n                    if (mantissa.endsWith(\".\"))\n                        mantissa = mantissa.substring(0, mantissa.length() - 1);\n                    try {\n                        if (afterE.equals(\"\"))\n                            afterE = \"0\";\n                        Integer.parseInt(afterE);\n                        Float.parseFloat(val);\n                        return createFloat(val);\n                    } catch (NumberFormatException x) {\n                        Double.parseDouble(val);\n                        return createDouble(val);\n                    }\n\n                } else {\n                    if (val.startsWith(\".\"))\n                        val = \"0\" + val;\n                    String[] slices = val.split(\"\\\\.\");\n                    try {\n                        Integer.parseInt(slices[0]);\n                        Integer.parseInt(slices[1]);\n                        return createFloat(val);\n                    } catch (NumberFormatException x) {\n                        // falls through to createDouble\n                    }\n                }\n                return createDouble(val);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..08e7a6b2 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,68 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+            if(val.startsWith(\"+\")) {\n+                val = val.substring(1);\n+            }\n+            if (val.startsWith(\"--\")) {\n+                // this is protection for poorness in java.lang.BigDecimal.\n+                // it accepts this as a legal value, but it does not appear\n+                // to be in specification of class. OS X Java parses it to\n+                // a wrong value.\n+                return null;\n+            }\n+            if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+                return createInteger(val);\n+            }\n+            // decimal point\n+            if (val.contains(\".\")) {\n+                if (val.endsWith(\".\"))\n+                    throw new NumberFormatException(val + \" is not a valid number.\");\n+\n+                char e = 'n';\n+                if (val.contains(\"e\"))\n+                    e = 'e';\n+                else if (val.contains(\"E\"))\n+                    e = 'E';\n+\n+                if (e != 'n') {\n+                    int indexOfE = val.indexOf(e);\n+                    String afterE = val.substring(indexOfE + 1);\n+                    if(afterE.startsWith(\"+\") || afterE.startsWith(\"-\")) {\n+                        afterE = afterE.substring(1);\n+                    }\n+                    String mantissa = val.substring(0, indexOfE);\n+                    if (mantissa.equals(\".\"))\n+                        throw new NumberFormatException(val + \" is not a valid number.\");\n+                    if (mantissa.startsWith(\".\")) {\n+                        mantissa = \"0\" + mantissa;\n+                    }\n+                    if (mantissa.endsWith(\".\"))\n+                        mantissa = mantissa.substring(0, mantissa.length() - 1);\n+                    try {\n+                        if (afterE.equals(\"\"))\n+                            afterE = \"0\";\n+                        Integer.parseInt(afterE);\n+                        Float.parseFloat(val);\n+                        return createFloat(val);\n+                    } catch (NumberFormatException x) {\n+                        Double.parseDouble(val);\n+                        return createDouble(val);\n+                    }\n+\n+                } else {\n+                    if (val.startsWith(\".\"))\n+                        val = \"0\" + val;\n+                    String[] slices = val.split(\"\\\\.\");\n+                    try {\n+                        Integer.parseInt(slices[0]);\n+                        Integer.parseInt(slices[1]);\n+                        return createFloat(val);\n+                    } catch (NumberFormatException x) {\n+                        // falls through to createDouble\n+                    }\n+                }\n+                return createDouble(val);\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}