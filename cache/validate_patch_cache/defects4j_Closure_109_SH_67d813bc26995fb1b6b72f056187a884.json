{
    "patch": "    if (token.getType() == TokenType.LITERAL_BOOLEAN ||\n            token.getType() == TokenType.LITERAL_NUMBER ||\n            token.getType() == TokenType.LITERAL_STRING) {\n      return new TypeExpressionNode(token.getSourceLocation(), new LiteralTypeNode(token.getSourceLocation(), token.getIdentifier()));\n    } else if (token.getType() == TokenType.NAME || token.getType() == TokenType.THIS) {\n      return new TypeExpressionNode(token.getSourceLocation(), parseTypeName(token));\n    } else if (token.getType() == TokenType.LBRACE) {\n      return parseStruct(token, TokenType.RBRACE);\n    } else if (token.getType() == TokenType.ARRAY_START) {\n      return parseArray(token);\n    }\n    reportParseError(\"Unexpected token \" + token.getType() + \" in context type.\");\n    return new TypeExpressionNode(token.getSourceLocation(), new UnknownTypeNode(token.getSourceLocation()));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..f8ee4921 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,19 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+    if (token.getType() == TokenType.LITERAL_BOOLEAN ||\n+            token.getType() == TokenType.LITERAL_NUMBER ||\n+            token.getType() == TokenType.LITERAL_STRING) {\n+      return new TypeExpressionNode(token.getSourceLocation(), new LiteralTypeNode(token.getSourceLocation(), token.getIdentifier()));\n+    } else if (token.getType() == TokenType.NAME || token.getType() == TokenType.THIS) {\n+      return new TypeExpressionNode(token.getSourceLocation(), parseTypeName(token));\n+    } else if (token.getType() == TokenType.LBRACE) {\n+      return parseStruct(token, TokenType.RBRACE);\n+    } else if (token.getType() == TokenType.ARRAY_START) {\n+      return parseArray(token);\n+    }\n+    reportParseError(\"Unexpected token \" + token.getType() + \" in context type.\");\n+    return new TypeExpressionNode(token.getSourceLocation(), new UnknownTypeNode(token.getSourceLocation()));\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}