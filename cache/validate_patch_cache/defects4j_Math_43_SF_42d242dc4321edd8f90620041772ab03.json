{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n    // If mean, variance or geomean have been overridden,\n    // need to increment these\n    if (meanImpl instanceof Mean) {\n        meanImpl.increment(value);\n    } else {\n        Mean tempMean = new Mean();\n        tempMean.increment(value);\n        meanImpl = tempMean;\n    }\n    if (varianceImpl instanceof Variance) {\n        varianceImpl.increment(value);\n    } else {\n        Variance tempVariance = new Variance();\n        tempVariance.increment(value);\n        varianceImpl = tempVariance;\n    }\n    if (geoMeanImpl instanceof GeometricMean) {\n        geoMeanImpl.increment(value);\n    } else {\n        geomean(value);\n    }\n    n++;\n}\n\nprivate void geomean(double value) {\n    if (value > 0) {\n        double result = Math.pow(Math.exp(geoMeanImpl.getResult()), (double) n / (n + 1));\n        result *= Math.pow(value, 1.0 / (n + 1));\n        geoMeanImpl.increment(result);\n    } else {\n        geoMeanImpl = new GeoMeanOverridden();\n        geoMeanImpl.increment(value);\n    }\n}\n\nprivate class GeoMeanOverridden implements GeometricMean {\n    private double geomean = 0;\n\n    public void increment(double value) throws MathIllegalArgumentException {\n        if (value > 0) {\n            geomean = (n == 0 ? value : geomean * Math.pow(value, 1.0 / (n + 1)));\n        } else {\n            throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_NUMBER_NOT_ALLOWED);\n        }\n        n++;\n    }\n\n    public double getResult() {\n        return geomean;\n    }\n\n    public GeoMeanOverridden copy() {\n        return new GeoMeanOverridden();\n    }\n\n    public void clear() {\n        geoMean = 0;\n    }\n\n    public long getN() {\n        return n;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..f59a3092c 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,27 +146,77 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n-        }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n-        }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+    // If mean, variance or geomean have been overridden,\n+    // need to increment these\n+    if (meanImpl instanceof Mean) {\n+        meanImpl.increment(value);\n+    } else {\n+        Mean tempMean = new Mean();\n+        tempMean.increment(value);\n+        meanImpl = tempMean;\n+    }\n+    if (varianceImpl instanceof Variance) {\n+        varianceImpl.increment(value);\n+    } else {\n+        Variance tempVariance = new Variance();\n+        tempVariance.increment(value);\n+        varianceImpl = tempVariance;\n+    }\n+    if (geoMeanImpl instanceof GeometricMean) {\n+        geoMeanImpl.increment(value);\n+    } else {\n+        geomean(value);\n+    }\n+    n++;\n+}\n+\n+private void geomean(double value) {\n+    if (value > 0) {\n+        double result = Math.pow(Math.exp(geoMeanImpl.getResult()), (double) n / (n + 1));\n+        result *= Math.pow(value, 1.0 / (n + 1));\n+        geoMeanImpl.increment(result);\n+    } else {\n+        geoMeanImpl = new GeoMeanOverridden();\n+        geoMeanImpl.increment(value);\n+    }\n+}\n+\n+private class GeoMeanOverridden implements GeometricMean {\n+    private double geomean = 0;\n+\n+    public void increment(double value) throws MathIllegalArgumentException {\n+        if (value > 0) {\n+            geomean = (n == 0 ? value : geomean * Math.pow(value, 1.0 / (n + 1)));\n+        } else {\n+            throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_NUMBER_NOT_ALLOWED);\n         }\n         n++;\n     }\n \n+    public double getResult() {\n+        return geomean;\n+    }\n+\n+    public GeoMeanOverridden copy() {\n+        return new GeoMeanOverridden();\n+    }\n+\n+    public void clear() {\n+        geoMean = 0;\n+    }\n+\n+    public long getN() {\n+        return n;\n+    }\n+}\n+\n     /**\n      * Returns the number of available values\n      * @return The number of available values",
    "result_reason": "error: interface expected here",
    "test_result": "ERROR"
}