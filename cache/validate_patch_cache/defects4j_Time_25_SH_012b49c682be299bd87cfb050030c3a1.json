{
    "patch": "                // we need to ensure that time is always after the DST gap\n                // this happens naturally for positive offsets, but not for negative\n                if ((offsetLocal - offsetAdjusted) < 0) {\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                    // check to see if there is a gap at this point\n                    if (instantAdjusted + ONE_MILLIS <= nextLocal && nextLocal <= instantLocal - offsetAdjusted + ONE_MILLIS) {\n                        // yes: gap is between instantAdjusted and instantLocal - offsetAdjusted\n                        // calculate new adjusted offset and test again\n                        int newOffsetAdjusted = getOffset(instantLocal - offsetLocal);\n                        if (offsetLocal != newOffsetAdjusted) {\n                            // gap is between instantAdjusted and nextAdjusted\n                            return offsetLocal;\n                        }\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..f00deeab 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,22 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // we need to ensure that time is always after the DST gap\n+                // this happens naturally for positive offsets, but not for negative\n+                if ((offsetLocal - offsetAdjusted) < 0) {\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                    // check to see if there is a gap at this point\n+                    if (instantAdjusted + ONE_MILLIS <= nextLocal && nextLocal <= instantLocal - offsetAdjusted + ONE_MILLIS) {\n+                        // yes: gap is between instantAdjusted and instantLocal - offsetAdjusted\n+                        // calculate new adjusted offset and test again\n+                        int newOffsetAdjusted = getOffset(instantLocal - offsetLocal);\n+                        if (offsetLocal != newOffsetAdjusted) {\n+                            // gap is between instantAdjusted and nextAdjusted\n+                            return offsetLocal;\n+                        }\n+                    }\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}