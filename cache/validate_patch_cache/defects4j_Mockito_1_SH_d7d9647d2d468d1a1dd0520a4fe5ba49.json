{
    "patch": "            Matcher varargsMatcher = matchers.get(matchers.size() - 1);\n            List<Object> varargs = new ArrayList<>();\n            Object[] varargsArray = (Object[]) invocation.getRawArguments()[indexOfVararg];\n            for (Object arg : varargsArray) {\n                ((CapturesArguments) varargsMatcher).captureFrom(arg);\n            }\n            varargs.add(varargsArray);\n            while (matchers.size() > 1) {\n                matchers.remove(matchers.size() - 2);\n            }\n            matchers.clear();\n            matchers.add(varargsMatcher);\n            invocation.setRawArguments(varargs.toArray());",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..6dafb1187 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,19 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Matcher varargsMatcher = matchers.get(matchers.size() - 1);\n+            List<Object> varargs = new ArrayList<>();\n+            Object[] varargsArray = (Object[]) invocation.getRawArguments()[indexOfVararg];\n+            for (Object arg : varargsArray) {\n+                ((CapturesArguments) varargsMatcher).captureFrom(arg);\n+            }\n+            varargs.add(varargsArray);\n+            while (matchers.size() > 1) {\n+                matchers.remove(matchers.size() - 2);\n+            }\n+            matchers.clear();\n+            matchers.add(varargsMatcher);\n+            invocation.setRawArguments(varargs.toArray());\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}