{
    "patch": "public double[] repairAndDecode(final double[] x) {\n    double[] result = decode(repair(x));\n    if (result == null) {\n        return new double[x.length];\n    }\n    for (int i = 0; i < result.length; i++) {\n        if (Double.isNaN(result[i]) || result[i] < 0 || result[i] > 1) {\n            result[i] = 0;\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 4b7dbf6bb..dc27935b1 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -917,10 +917,18 @@ public class CMAESOptimizer\n          * @param x Normalized objective variables.\n          * @return the original objective variables, possibly repaired.\n          */\n-        public double[] repairAndDecode(final double[] x) {\n-            return\n-                decode(x);\n+public double[] repairAndDecode(final double[] x) {\n+    double[] result = decode(repair(x));\n+    if (result == null) {\n+        return new double[x.length];\n+    }\n+    for (int i = 0; i < result.length; i++) {\n+        if (Double.isNaN(result[i]) || result[i] < 0 || result[i] > 1) {\n+            result[i] = 0;\n         }\n+    }\n+    return result;\n+}\n \n         /**\n          * @param x Normalized objective variables.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1.0> but was:<0.0>",
    "test_result": "FAIL"
}