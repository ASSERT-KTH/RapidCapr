{
    "patch": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    removeDuplicateDeclarations(root);\n    new PropagateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Normalize.java b/src/com/google/javascript/jscomp/Normalize.java\nindex 4aa45558..28cb63ae 100644\n--- a/src/com/google/javascript/jscomp/Normalize.java\n+++ b/src/com/google/javascript/jscomp/Normalize.java\n@@ -92,7 +92,7 @@ class Normalize implements CompilerPass, Callback {\n       t.traverseRoots(externs, root);\n     }\n     removeDuplicateDeclarations(root);\n-    new PropogateConstantAnnotations(compiler, assertOnChange)\n+    new PropagateConstantAnnotations(compiler, assertOnChange)\n         .process(externs, root);\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}