{
    "patch": "    attachLiteralTypes(n);\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        if (parent != null && parent.getType() == Token.NAME) {\n          return;\n        }\n        if (NodeUtil.isFunctionExpression(n)) {\n          defineDeclaredFunction(n, parent);\n        }\n        break;\n      case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n      case Token.VAR:\n        defineVar(n, parent);\n        break;\n      case Token.EXPR_RESULT:\n        if (n.getFirstChild().getType() == Token.ASSIGN) {\n          defineVar(n.getFirstChild(), parent);\n        }\n        break;\n      default:\n        break;\n    }\n    if (n.getType() == Token.LP && parent == scope.getRootNode() && NodeUtil.isFunctionExpression(parent)) {\n      handleFunctionInputs(parent);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..f399ba98 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,32 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n+    attachLiteralTypes(n);\n+    switch (n.getType()) {\n+      case Token.FUNCTION:\n+        if (parent != null && parent.getType() == Token.NAME) {\n+          return;\n+        }\n+        if (NodeUtil.isFunctionExpression(n)) {\n           defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        break;\n+      case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+      case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+      case Token.EXPR_RESULT:\n+        if (n.getFirstChild().getType() == Token.ASSIGN) {\n+          defineVar(n.getFirstChild(), parent);\n+        }\n+        break;\n+      default:\n+        break;\n+    }\n+    if (n.getType() == Token.LP && parent == scope.getRootNode() && NodeUtil.isFunctionExpression(parent)) {\n+      handleFunctionInputs(parent);\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}