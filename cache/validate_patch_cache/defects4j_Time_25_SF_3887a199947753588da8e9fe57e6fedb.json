{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int initialOffset = getOffset(instantLocal);\n\n    // calculate the new instant using the initial offset\n    final long newInstant = instantLocal - initialOffset;\n    final int newOffset = getOffset(newInstant);\n\n    // if the newOffset is equal to the initialOffset, we are done\n    if (newOffset == initialOffset) {\n        return newOffset;\n    }\n\n    // if dst adjustment was not applied when calculating newInstant (and newOffset != initialOffset),\n    // then we need to apply it manually\n    final long diff = newOffset - initialOffset;\n    if (diff > 0) {\n        long nextTransition = nextTransition(newInstant);\n        if (nextTransition == (newInstant + diff)) {\n            // local time is in zone gap, we should hit the next transition\n            nextTransition = nextTransition(nextTransition);\n        }\n        if (nextTransition > (instantLocal - initialOffset)) {\n            // we're still not there yet, so we have to use the initial offset\n            return initialOffset;\n        }\n    } else {\n        // negative diff means the newOffset has already transitioned to a previous offset\n        long prevTransition = previousTransition(newInstant);\n        if (prevTransition == newInstant + diff) {\n            // local time is in zone overlap, we want to hit the previous transition\n            prevTransition = previousTransition(prevTransition - 1);\n        }\n        if (prevTransition > (instantLocal - initialOffset)) {\n            // we're still not there yet, so we have to use the initial offset\n            return initialOffset;\n        }\n    }\n\n    // we're good to return the new offset\n    return newOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..adbb9029 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,49 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    final int initialOffset = getOffset(instantLocal);\n+\n+    // calculate the new instant using the initial offset\n+    final long newInstant = instantLocal - initialOffset;\n+    final int newOffset = getOffset(newInstant);\n+\n+    // if the newOffset is equal to the initialOffset, we are done\n+    if (newOffset == initialOffset) {\n+        return newOffset;\n+    }\n+\n+    // if dst adjustment was not applied when calculating newInstant (and newOffset != initialOffset),\n+    // then we need to apply it manually\n+    final long diff = newOffset - initialOffset;\n+    if (diff > 0) {\n+        long nextTransition = nextTransition(newInstant);\n+        if (nextTransition == (newInstant + diff)) {\n+            // local time is in zone gap, we should hit the next transition\n+            nextTransition = nextTransition(nextTransition);\n+        }\n+        if (nextTransition > (instantLocal - initialOffset)) {\n+            // we're still not there yet, so we have to use the initial offset\n+            return initialOffset;\n+        }\n+    } else {\n+        // negative diff means the newOffset has already transitioned to a previous offset\n+        long prevTransition = previousTransition(newInstant);\n+        if (prevTransition == newInstant + diff) {\n+            // local time is in zone overlap, we want to hit the previous transition\n+            prevTransition = previousTransition(prevTransition - 1);\n+        }\n+        if (prevTransition > (instantLocal - initialOffset)) {\n+            // we're still not there yet, so we have to use the initial offset\n+            return initialOffset;\n         }\n-        return offsetAdjusted;\n     }\n \n+    // we're good to return the new offset\n+    return newOffset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}