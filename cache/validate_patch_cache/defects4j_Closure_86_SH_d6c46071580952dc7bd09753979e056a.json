{
    "patch": "switch (value.getType()) {\n  case Token.NEW:\n    boolean allChildrenLocal = true;\n    for (Node child : value.children()) {\n      if (!evaluatesToLocalValue(child, locals)) {\n        allChildrenLocal = false;\n        break;\n      }\n    }\n    return allChildrenLocal;\n  case Token.FUNCTION:\n  case Token.REGEXP:\n  case Toke",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex dd78f900..81208b2b 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -2462,7 +2462,19 @@ public final class NodeUtil {\n         // TODO(nicksantos): This needs to be changed so that it\n         // returns true iff we're sure the value was never aliased from inside\n         // the constructor (similar to callHasLocalResult)\n-        return true;\n+switch (value.getType()) {\n+  case Token.NEW:\n+    boolean allChildrenLocal = true;\n+    for (Node child : value.children()) {\n+      if (!evaluatesToLocalValue(child, locals)) {\n+        allChildrenLocal = false;\n+        break;\n+      }\n+    }\n+    return allChildrenLocal;\n+  case Token.FUNCTION:\n+  case Token.REGEXP:\n+  case Toke\n       case Token.FUNCTION:\n       case Token.REGEXP:\n       case Token.ARRAYLIT:",
    "result_reason": "error: : expected",
    "test_result": "ERROR"
}