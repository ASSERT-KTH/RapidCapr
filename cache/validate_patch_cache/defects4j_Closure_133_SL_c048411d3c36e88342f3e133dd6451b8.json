{
    "patch": "private String getRemainingJSDocLine() {\n    String result = stream.getRemainingJSDocLine();\n    if (result == null) {\n        return \"\";\n    }\n    jsdocParser.reset(); // reset the state of the parser\n    stream.getFullJSDocComment(); // reset the position of the Lexer object\n    jsdocParser.parse(result.trim()); // parse the JSDoc line\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..f7467f66 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,16 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+private String getRemainingJSDocLine() {\n+    String result = stream.getRemainingJSDocLine();\n+    if (result == null) {\n+        return \"\";\n+    }\n+    jsdocParser.reset(); // reset the state of the parser\n+    stream.getFullJSDocComment(); // reset the position of the Lexer object\n+    jsdocParser.parse(result.trim()); // parse the JSDoc line\n+    return result;\n+}\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}