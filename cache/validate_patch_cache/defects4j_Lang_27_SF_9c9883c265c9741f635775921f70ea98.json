{
    "patch": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null || StringUtils.isBlank(str)) {\n        return null;\n    }\n\n    char lastChar = str.charAt(str.length() - 1);\n    boolean hasDecimal = str.contains(\".\");\n    boolean hasExponent = str.contains(\"e\") || str.contains(\"E\");\n\n    Number parsedNumber = null;\n\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (str.length() == 1) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n\n        String numeric = str.substring(0, str.length() - 1);\n        boolean allZeros = isAllZeros(numeric.replace(\".\", \"\").replace(\"-\", \"\"));\n        switch (lastChar) {\n            case 'l':\n            case 'L':\n                if (!hasDecimal && !hasExponent) {\n                    try {\n                        parsedNumber = Long.parseLong(numeric);\n                    } catch (NumberFormatException ignored) {\n                    }\n\n                    if (parsedNumber != null) {\n                        return parsedNumber;\n                    }\n\n                    return createBigInteger(numeric);\n                }\n\n                break;\n\n            case 'f':\n            case 'F':\n                try {\n                    parsedNumber = Float.parseFloat(numeric);\n                    if (!(parsedNumber.floatValue() == 0.0F && !allZeros)) {\n                        return parsedNumber;\n                    }\n                } catch (NumberFormatException ignored) {\n                }\n\n                break;\n\n            case 'd':\n            case 'D':\n                try {\n                    parsedNumber = Double.parseDouble(numeric);\n                    if (!(parsedNumber.doubleValue() == 0.0D && !allZeros)) {\n                        return parsedNumber;\n                    }\n                } catch (NumberFormatException ignored) {\n                }\n\n                try {\n                    parsedNumber = createBigDecimal(numeric);\n                } catch (NumberFormatException ignored) {\n                }\n\n                break;\n\n            default:\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n\n    } else {\n        if (!hasDecimal && !hasExponent && StringUtils.isNumeric(str)) {\n            try {\n                parsedNumber = Integer.parseInt(str);\n            } catch (NumberFormatException ignored) {\n            }\n\n            if (parsedNumber != null) {\n                return parsedNumber;\n            }\n\n            try {\n                parsedNumber = Long.parseLong(str);\n            } catch (NumberFormatException ignored) {\n            }\n\n            if (parsedNumber != null) {\n                return parsedNumber;\n            }\n\n            return createBigInteger(str);\n        } else {\n            if ((str.startsWith(\".\") || str.startsWith(\"-.\")) && StringUtils.isNumeric(str.replace(\".\", \"\"))) {\n                str = \"0\" + str;\n            }\n\n            try {\n                parsedNumber = Float.parseFloat(str);\n                if (!(parsedNumber.floatValue() == 0.0F && !hasDecimal)) {\n                    return parsedNumber;\n                }\n            } catch (NumberFormatException ignored) {\n            }\n\n            try {\n                parsedNumber = Double.parseDouble(str);\n                if (!(parsedNumber.doubleValue() == 0.0D && !hasDecimal)) {\n                    return parsedNumber;\n                }\n            } catch (NumberFormatException ignored) {\n            }\n\n            try {\n                parsedNumber = createBigDecimal(str);\n            } catch (NumberFormatException ignored) {\n            }\n        }\n    }\n\n    if (parsedNumber != null) {\n        return parsedNumber;\n    }\n\n    throw new NumberFormatException(str + \" is not a valid number.\");\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex fd03ab8f..e3d928f9 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -449,155 +449,131 @@ public class NumberUtils {\n      * @return Number created from the string\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(String str) throws NumberFormatException {\n-        if (str == null) {\n-            return null;\n-        }\n-        if (StringUtils.isBlank(str)) {\n-            throw new NumberFormatException(\"A blank string is not a valid number\");\n-        }  \n-        if (str.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n-        }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n-            return createInteger(str);\n-        }   \n-        char lastChar = str.charAt(str.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        int decPos = str.indexOf('.');\n-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n-\n-        if (decPos > -1) {\n-\n-            if (expPos > -1) {\n-                if (expPos < decPos) {\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                dec = str.substring(decPos + 1, expPos);\n-            } else {\n-                dec = str.substring(decPos + 1);\n-            }\n-            mant = str.substring(0, decPos);\n-        } else {\n-            if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n-            } else {\n-                mant = str;\n-            }\n-            dec = null;\n+public static Number createNumber(String str) throws NumberFormatException {\n+    if (str == null || StringUtils.isBlank(str)) {\n+        return null;\n+    }\n+\n+    char lastChar = str.charAt(str.length() - 1);\n+    boolean hasDecimal = str.contains(\".\");\n+    boolean hasExponent = str.contains(\"e\") || str.contains(\"E\");\n+\n+    Number parsedNumber = null;\n+\n+    if (!Character.isDigit(lastChar) && lastChar != '.') {\n+        if (str.length() == 1) {\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n         }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            String numeric = str.substring(0, str.length() - 1);\n-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (NumberFormatException nfe) {\n-                            //Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n \n-                    }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n-\n-                    } catch (NumberFormatException nfe) {\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n+        String numeric = str.substring(0, str.length() - 1);\n+        boolean allZeros = isAllZeros(numeric.replace(\".\", \"\").replace(\"-\", \"\"));\n+        switch (lastChar) {\n+            case 'l':\n+            case 'L':\n+                if (!hasDecimal && !hasExponent) {\n                     try {\n-                        Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (NumberFormatException nfe) {\n-                        // ignore the bad number\n+                        parsedNumber = Long.parseLong(numeric);\n+                    } catch (NumberFormatException ignored) {\n                     }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (NumberFormatException e) {\n-                        // ignore the bad number\n+\n+                    if (parsedNumber != null) {\n+                        return parsedNumber;\n                     }\n-                    //$FALL-THROUGH$\n-                default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n \n-            }\n-        } else {\n-            //User doesn't have a preference on the return type, so let's start\n-            //small and go from there...\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length());\n-            } else {\n-                exp = null;\n-            }\n-            if (dec == null && exp == null) {\n-                //Must be an int,long,bigint\n-                try {\n-                    return createInteger(str);\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n+                    return createBigInteger(numeric);\n                 }\n+\n+                break;\n+\n+            case 'f':\n+            case 'F':\n                 try {\n-                    return createLong(str);\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n+                    parsedNumber = Float.parseFloat(numeric);\n+                    if (!(parsedNumber.floatValue() == 0.0F && !allZeros)) {\n+                        return parsedNumber;\n+                    }\n+                } catch (NumberFormatException ignored) {\n                 }\n-                return createBigInteger(str);\n \n-            } else {\n-                //Must be a float,double,BigDec\n-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+                break;\n+\n+            case 'd':\n+            case 'D':\n                 try {\n-                    Float f = createFloat(str);\n-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                        return f;\n+                    parsedNumber = Double.parseDouble(numeric);\n+                    if (!(parsedNumber.doubleValue() == 0.0D && !allZeros)) {\n+                        return parsedNumber;\n                     }\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n+                } catch (NumberFormatException ignored) {\n                 }\n+\n                 try {\n-                    Double d = createDouble(str);\n-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n+                    parsedNumber = createBigDecimal(numeric);\n+                } catch (NumberFormatException ignored) {\n+                }\n+\n+                break;\n+\n+            default:\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n+        }\n+\n+    } else {\n+        if (!hasDecimal && !hasExponent && StringUtils.isNumeric(str)) {\n+            try {\n+                parsedNumber = Integer.parseInt(str);\n+            } catch (NumberFormatException ignored) {\n+            }\n+\n+            if (parsedNumber != null) {\n+                return parsedNumber;\n+            }\n+\n+            try {\n+                parsedNumber = Long.parseLong(str);\n+            } catch (NumberFormatException ignored) {\n+            }\n+\n+            if (parsedNumber != null) {\n+                return parsedNumber;\n+            }\n+\n+            return createBigInteger(str);\n+        } else {\n+            if ((str.startsWith(\".\") || str.startsWith(\"-.\")) && StringUtils.isNumeric(str.replace(\".\", \"\"))) {\n+                str = \"0\" + str;\n+            }\n+\n+            try {\n+                parsedNumber = Float.parseFloat(str);\n+                if (!(parsedNumber.floatValue() == 0.0F && !hasDecimal)) {\n+                    return parsedNumber;\n                 }\n+            } catch (NumberFormatException ignored) {\n+            }\n \n-                return createBigDecimal(str);\n+            try {\n+                parsedNumber = Double.parseDouble(str);\n+                if (!(parsedNumber.doubleValue() == 0.0D && !hasDecimal)) {\n+                    return parsedNumber;\n+                }\n+            } catch (NumberFormatException ignored) {\n+            }\n \n+            try {\n+                parsedNumber = createBigDecimal(str);\n+            } catch (NumberFormatException ignored) {\n             }\n         }\n     }\n \n+    if (parsedNumber != null) {\n+        return parsedNumber;\n+    }\n+\n+    throw new NumberFormatException(str + \" is not a valid number.\");\n+}\n+\n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>\n      *",
    "result_reason": "junit.framework.AssertionFailedError: createNumber(String) 8 failed expected:<-12345> but was:<-12345.0>",
    "test_result": "FAIL"
}