{
    "patch": "      if (n.getJSDocInfo() != null &&\n          (n.getJSDocInfo().hasThisType() ||\n           n.getJSDocInfo().isOverride() ||\n           n.getJSDocInfo().isConstructor() ||\n           n.getJSDocInfo().isInterface())) {\n        return false;\n      }\n\n      boolean isLentToPrototype = false;\n      Node current = parent;\n      while (current != null && !isLentToPrototype) {\n        if (NodeUtil.isGet(current)) {\n          Node getTarget = current.getFirstChild();\n          if (getTarget.getLastChild().getString().equals(\"prototype\")) {\n            isLentToPrototype = true;\n          }\n          // Check that the function is not being assigned to a \"this\" value\n          // that is not the global object. (Lending to \"this\" is an example\n          // of an operation that is disallowed by the \"use strict\" statement,\n          // as it can have negative security consequences.)\n          else if (getTarget.isThis()) {\n            isLentToPrototype = true;\n            report(Code.JSC_USED_GLOBAL_THIS, n);\n          }\n        }\n        current = current.getParent();\n      }\n\n      return !isLentToPrototype;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..08365624 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,35 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (n.getJSDocInfo() != null &&\n+          (n.getJSDocInfo().hasThisType() ||\n+           n.getJSDocInfo().isOverride() ||\n+           n.getJSDocInfo().isConstructor() ||\n+           n.getJSDocInfo().isInterface())) {\n+        return false;\n+      }\n+\n+      boolean isLentToPrototype = false;\n+      Node current = parent;\n+      while (current != null && !isLentToPrototype) {\n+        if (NodeUtil.isGet(current)) {\n+          Node getTarget = current.getFirstChild();\n+          if (getTarget.getLastChild().getString().equals(\"prototype\")) {\n+            isLentToPrototype = true;\n+          }\n+          // Check that the function is not being assigned to a \"this\" value\n+          // that is not the global object. (Lending to \"this\" is an example\n+          // of an operation that is disallowed by the \"use strict\" statement,\n+          // as it can have negative security consequences.)\n+          else if (getTarget.isThis()) {\n+            isLentToPrototype = true;\n+            report(Code.JSC_USED_GLOBAL_THIS, n);\n+          }\n+        }\n+        current = current.getParent();\n+      }\n+\n+      return !isLentToPrototype;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}