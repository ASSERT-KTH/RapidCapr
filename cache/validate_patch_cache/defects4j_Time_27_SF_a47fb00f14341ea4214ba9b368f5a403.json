{
    "patch": "    private static Object[] createComposite(List<Object> elementPairs, boolean printerNotParser) {\n        int size = elementPairs.size();\n        if (size == 0) {\n            throw new IllegalArgumentException(\"Invalid number of elements\");\n        }\n        if (size == 1) {\n            Object[] comp = new Object[2];\n            if (printerNotParser) {\n                comp[0] = elementPairs.get(0);\n            } else {\n                comp[1] = elementPairs.get(0);\n            }\n            return comp;\n        }\n        Object penult = elementPairs.get(size - 2);\n        Object last = elementPairs.get(size - 1);\n        Object[] comp = createComposite(elementPairs.subList(0, size - 2), printerNotParser);\n        if (comp == null) {\n            throw new IllegalArgumentException(\"Invalid format\");\n        }\n        PeriodPrinter printer = comp[0] instanceof PeriodPrinter ? (PeriodPrinter) comp[0] : null;\n        PeriodParser parser = comp[1] instanceof PeriodParser ? (PeriodParser) comp[1] : null;\n        if (printerNotParser) {\n            printer = (PeriodPrinter) last;\n            if (printer == null) {\n                return null;\n            }\n        } else {\n            parser = (PeriodParser) last;\n            if (parser == null) {\n                return null;\n            }\n        }\n        Separator separator = (Separator) penult;\n        if (separator == null || (printer == null && !printerNotParser) || (parser == null && printerNotParser)) {\n            return null;\n        } else {\n            separator = separator.finish(printer, parser);\n            Object[] result = new Object[2];\n            result[0] = printerNotParser ? printer : separator;\n            result[1] = printerNotParser ? separator : parser;\n            return result;\n        }\n    }\n    \n    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n        if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        }\n        int size = elementPairs.size();\n        if (size >= 2 && elementPairs.get(size - 2) instanceof Separator) {\n            Separator sep = (Separator) elementPairs.get(size - 2);\n            Object[] comp = createComposite(elementPairs.subList(0, size - 2), notPrinter);\n            if (comp == null || comp[0] == null || (notParser && comp[0] instanceof Separator)) {\n                throw new IllegalArgumentException(\"Invalid format\");\n            }\n            PeriodFormatter f = new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n            sep = sep.finish(f.getPrinter(), f.getParser());\n            return new PeriodFormatter(f.getPrinter(), sep.finish(f.getPrinter(), f.getParser()), f.getParseType());\n        } else {\n            Object[] comp = createComposite(elementPairs, notPrinter);\n            if (comp == null || comp[0] == null || (notParser && comp[0] instanceof Separator)) {\n                throw new IllegalArgumentException(\"Invalid format\");\n            }\n            if (notPrinter) {\n                return new PeriodFormatter(null, (PeriodParser) comp[1], ((PeriodParser) comp[1]).getParserType());\n            } else if (notParser) {\n                return new PeriodFormatter((PeriodPrinter) comp[0], null, ((PeriodPrinter) comp[0]).getPrinterType());\n            } else {\n                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1], ((PeriodPrinter) comp[0]).getPrinterType());\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..63f17706 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,77 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n+    private static Object[] createComposite(List<Object> elementPairs, boolean printerNotParser) {\n+        int size = elementPairs.size();\n+        if (size == 0) {\n+            throw new IllegalArgumentException(\"Invalid number of elements\");\n+        }\n+        if (size == 1) {\n+            Object[] comp = new Object[2];\n+            if (printerNotParser) {\n+                comp[0] = elementPairs.get(0);\n+            } else {\n+                comp[1] = elementPairs.get(0);\n+            }\n+            return comp;\n+        }\n+        Object penult = elementPairs.get(size - 2);\n+        Object last = elementPairs.get(size - 1);\n+        Object[] comp = createComposite(elementPairs.subList(0, size - 2), printerNotParser);\n+        if (comp == null) {\n+            throw new IllegalArgumentException(\"Invalid format\");\n+        }\n+        PeriodPrinter printer = comp[0] instanceof PeriodPrinter ? (PeriodPrinter) comp[0] : null;\n+        PeriodParser parser = comp[1] instanceof PeriodParser ? (PeriodParser) comp[1] : null;\n+        if (printerNotParser) {\n+            printer = (PeriodPrinter) last;\n+            if (printer == null) {\n+                return null;\n+            }\n+        } else {\n+            parser = (PeriodParser) last;\n+            if (parser == null) {\n+                return null;\n+            }\n+        }\n+        Separator separator = (Separator) penult;\n+        if (separator == null || (printer == null && !printerNotParser) || (parser == null && printerNotParser)) {\n+            return null;\n+        } else {\n+            separator = separator.finish(printer, parser);\n+            Object[] result = new Object[2];\n+            result[0] = printerNotParser ? printer : separator;\n+            result[1] = printerNotParser ? separator : parser;\n+            return result;\n+        }\n+    }\n+    \n     private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n         if (notPrinter && notParser) {\n             throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n         }\n         int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+        if (size >= 2 && elementPairs.get(size - 2) instanceof Separator) {\n+            Separator sep = (Separator) elementPairs.get(size - 2);\n+            Object[] comp = createComposite(elementPairs.subList(0, size - 2), notPrinter);\n+            if (comp == null || comp[0] == null || (notParser && comp[0] instanceof Separator)) {\n+                throw new IllegalArgumentException(\"Invalid format\");\n+            }\n+            PeriodFormatter f = new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            sep = sep.finish(f.getPrinter(), f.getParser());\n+            return new PeriodFormatter(f.getPrinter(), sep.finish(f.getPrinter(), f.getParser()), f.getParseType());\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n-        }\n-    }\n+            Object[] comp = createComposite(elementPairs, notPrinter);\n+            if (comp == null || comp[0] == null || (notParser && comp[0] instanceof Separator)) {\n+                throw new IllegalArgumentException(\"Invalid format\");\n+            }\n+            if (notPrinter) {\n+                return new PeriodFormatter(null, (PeriodParser) comp[1], ((PeriodParser) comp[1]).getParserType());\n+            } else if (notParser) {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], null, ((PeriodPrinter) comp[0]).getPrinterType());\n+            } else {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1], ((PeriodPrinter) comp[0]).getPrinterType());\n+            }\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}