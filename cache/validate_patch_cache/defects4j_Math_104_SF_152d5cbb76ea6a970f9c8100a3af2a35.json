{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (x < 0.0 || a <= 0.0) {\n        throw new IllegalArgumentException(\"Invalid arguments to regularizedGammaP\");\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + 1) {\n        return 1.0 - regularizedGammaQ(a, x);\n    }\n    double s = 1 / a;\n    double t = s;\n    double n = 1;\n    double an = n / a;\n    while (Math.abs(an / t) > EPSILON) {\n        s += an;\n        n += 1;\n        an *= x / (a + n);\n        t += an;\n    }\n    return s * Math.exp(-x + a * Math.log(x) - logGamma(a));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..de3d73ac1 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,28 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (x < 0.0 || a <= 0.0) {\n+        throw new IllegalArgumentException(\"Invalid arguments to regularizedGammaP\");\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + 1) {\n+        return 1.0 - regularizedGammaQ(a, x);\n+    }\n+    double s = 1 / a;\n+    double t = s;\n+    double n = 1;\n+    double an = n / a;\n+    while (Math.abs(an / t) > EPSILON) {\n+        s += an;\n+        n += 1;\n+        an *= x / (a + n);\n+        t += an;\n+    }\n+    return s * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}