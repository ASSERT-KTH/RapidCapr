{
    "patch": "  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                      WhitespaceOption option) {\n\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n        token == JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n    int endCharno = startCharno;\n\n    // Read the content from the first line.\n    String line = stream.getRemainingJSDocLine();\n    if (option != WhitespaceOption.PRESERVE) {\n      line = line.trim();\n    }\n\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n\n    state = State.SEARCHING_ANNOTATION;\n    token = next();\n\n    boolean ignoreStar = false;\n\n    // Track the start of the line to count whitespace that\n    // the tokenizer skipped. Because this case is rare, it's easier\n    // to do this here than in the tokenizer.\n\n    do {\n      switch (token) {\n        case STAR:\n          if (ignoreStar) {\n            // Mark the position after the star as the new start of the line.\n            endCharno++;\n          } else {\n            // The star is part of the comment.\n            if (builder.length() > 0) {\n              builder.append(' ');\n            }\n            builder.append('*');\n            endCharno++;\n          }\n\n          token = next();\n          ignoreStar = true;\n          continue;\n\n        case EOL:\n          if (option != WhitespaceOption.SINGLE_LINE) {\n            builder.append(\"\\n\");\n          }\n          ignoreStar = false;\n          token = next();\n          endCharno = startCharno;\n          continue;\n\n        default:\n          ignoreStar = false;\n          state = State.SEARCHING_ANNOTATION;\n\n          // All tokens must be separated by a space.\n          if (token == JsDocToken.EOC ||\n              token == JsDocToken.EOF ||\n              // When we're capturing a license block, annotations\n              // in the block are ok.\n              (token == JsDocToken.ANNOTATION &&\n               option != WhitespaceOption.PRESERVE)) {\n            String multilineText = builder.toString();\n            if (option != WhitespaceOption.PRESERVE) {\n              multilineText = multilineText.trim();\n            }\n            int endLineno = stream.getLineno();\n\n            if (multilineText.length() > 0) {\n              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                  endLineno, endCharno);\n            }\n\n            return new ExtractionInfo(multilineText, token);\n          }\n\n          if (builder.length() > 0) {\n            builder.append(' ');\n          }\n\n          String tokenString = toString(token);\n          if (tokenString != null) {\n              builder.append(tokenString);\n              endCharno += tokenString.length();\n          }\n\n          line = stream.getRemainingJSDocLine();\n          if (option != WhitespaceOption.PRESERVE) {\n            line = trimEnd(line);\n          }\n          builder.append(line);\n          endCharno += line.length();\n          token = next();\n      }\n    } while (true);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..85756f9d 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1337,6 +1337,7 @@ public final class JsDocInfoParser {\n     stream.update();\n     int startLineno = stream.getLineno();\n     int startCharno = stream.getCharno() + 1;\n+    int endCharno = startCharno;\n \n     // Read the content from the first line.\n     String line = stream.getRemainingJSDocLine();\n@@ -1361,33 +1362,34 @@ public final class JsDocInfoParser {\n         case STAR:\n           if (ignoreStar) {\n             // Mark the position after the star as the new start of the line.\n+            endCharno++;\n           } else {\n             // The star is part of the comment.\n             if (builder.length() > 0) {\n               builder.append(' ');\n             }\n-\n             builder.append('*');\n+            endCharno++;\n           }\n \n           token = next();\n+          ignoreStar = true;\n           continue;\n \n         case EOL:\n           if (option != WhitespaceOption.SINGLE_LINE) {\n             builder.append(\"\\n\");\n           }\n-\n-          ignoreStar = true;\n+          ignoreStar = false;\n           token = next();\n+          endCharno = startCharno;\n           continue;\n \n         default:\n           ignoreStar = false;\n           state = State.SEARCHING_ANNOTATION;\n \n-              // All tokens must be separated by a space.\n-\n+          // All tokens must be separated by a space.\n           if (token == JsDocToken.EOC ||\n               token == JsDocToken.EOF ||\n               // When we're capturing a license block, annotations\n@@ -1395,13 +1397,10 @@ public final class JsDocInfoParser {\n               (token == JsDocToken.ANNOTATION &&\n                option != WhitespaceOption.PRESERVE)) {\n             String multilineText = builder.toString();\n-\n             if (option != WhitespaceOption.PRESERVE) {\n               multilineText = multilineText.trim();\n             }\n-\n             int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n \n             if (multilineText.length() > 0) {\n               jsdocBuilder.markText(multilineText, startLineno, startCharno,\n@@ -1414,15 +1413,19 @@ public final class JsDocInfoParser {\n           if (builder.length() > 0) {\n             builder.append(' ');\n           }\n-          builder.append(toString(token));\n \n-          line = stream.getRemainingJSDocLine();\n+          String tokenString = toString(token);\n+          if (tokenString != null) {\n+              builder.append(tokenString);\n+              endCharno += tokenString.length();\n+          }\n \n+          line = stream.getRemainingJSDocLine();\n           if (option != WhitespaceOption.PRESERVE) {\n             line = trimEnd(line);\n           }\n-\n           builder.append(line);\n+          endCharno += line.length();\n           token = next();\n       }\n     } while (true);",
    "result_reason": "junit.framework.AssertionFailedError: Property bar of type SubFoo has been deprecated: CONTRIBUTORS COPYING README all_tests build build.xml closure-compiler.pom contrib defects4j.build.properties externs failing_tests gen javadoc lib src test tools",
    "test_result": "FAIL"
}