{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n        final double trace = m.getTrace();\n        final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(m.getRowDimension());\n        final RealMatrix scaledMatrix = m.scalarMultiply(1.0 / (2 * trace));\n        final RealMatrix h = identity.scalarAdd(trace > 0 ? 1.0 : -1.0).multiply(scaledMatrix);\n        final EigenDecomposition dec = new EigenDecomposition(h);\n        final RealMatrix squareRoot = dec.getSquareRoot();\n        return squareRoot.multiply(m);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..b9bf1541c 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,12 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+        final double trace = m.getTrace();\n+        final RealMatrix identity = MatrixUtils.createRealIdentityMatrix(m.getRowDimension());\n+        final RealMatrix scaledMatrix = m.scalarMultiply(1.0 / (2 * trace));\n+        final RealMatrix h = identity.scalarAdd(trace > 0 ? 1.0 : -1.0).multiply(scaledMatrix);\n+        final EigenDecomposition dec = new EigenDecomposition(h);\n+        final RealMatrix squareRoot = dec.getSquareRoot();\n+        return squareRoot.multiply(m);\n     }\n }",
    "result_reason": "org.apache.commons.math3.exception.MathUnsupportedOperationException: unsupported operation",
    "test_result": "FAIL"
}