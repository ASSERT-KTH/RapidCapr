{
    "patch": "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n    Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArg == null) {\n        throw new RuntimeException(\"Unable to determine actual type argument for \" + typeVariable.getTypeName());\n    }\n    if (actualTypeArg instanceof WildcardType) {\n        actualTypeArg = extractWildcardTypeBounds((WildcardType) actualTypeArg);\n    }\n    if (actualTypeArg instanceof TypeVariable<?>) {\n        actualTypeArg = extractTypeVariableBounds((TypeVariable<?>) actualTypeArg);\n    }\n    registerTypeVariablesOn(actualTypeArg);\n}\nprivate Type extractWildcardTypeBounds(WildcardType wildcardType) {\n    Type[] lowerBounds = wildcardType.getLowerBounds();\n    if (lowerBounds.length > 0) {\n        return lowerBounds[0];\n    }\n    Type[] upperBounds = wildcardType.getUpperBounds();\n    if (upperBounds.length > 0) {\n        return upperBounds[0];\n    }\n    throw new RuntimeException(\"Wildcard type argument is invalid for \" + wildcardType);\n}\n\nprivate Type extractTypeVariableBounds(TypeVariable<?> typeVariable) {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds.length > 0) {\n        return bounds[0];\n    }\n    throw new RuntimeException(\"Type variable does not have any bounds: \" + typeVariable.getName());\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..e0c9efc6d 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,42 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+    Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArg == null) {\n+        throw new RuntimeException(\"Unable to determine actual type argument for \" + typeVariable.getTypeName());\n+    }\n+    if (actualTypeArg instanceof WildcardType) {\n+        actualTypeArg = extractWildcardTypeBounds((WildcardType) actualTypeArg);\n+    }\n+    if (actualTypeArg instanceof TypeVariable<?>) {\n+        actualTypeArg = extractTypeVariableBounds((TypeVariable<?>) actualTypeArg);\n+    }\n+    registerTypeVariablesOn(actualTypeArg);\n+}\n+private Type extractWildcardTypeBounds(WildcardType wildcardType) {\n+    Type[] lowerBounds = wildcardType.getLowerBounds();\n+    if (lowerBounds.length > 0) {\n+        return lowerBounds[0];\n+    }\n+    Type[] upperBounds = wildcardType.getUpperBounds();\n+    if (upperBounds.length > 0) {\n+        return upperBounds[0];\n+    }\n+    throw new RuntimeException(\"Wildcard type argument is invalid for \" + wildcardType);\n+}\n+\n+private Type extractTypeVariableBounds(TypeVariable<?> typeVariable) {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds.length > 0) {\n+        return bounds[0];\n+    }\n+    throw new RuntimeException(\"Type variable does not have any bounds: \" + typeVariable.getName());\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "java.lang.RuntimeException: Unable to determine actual type argument for MC3",
    "test_result": "FAIL"
}