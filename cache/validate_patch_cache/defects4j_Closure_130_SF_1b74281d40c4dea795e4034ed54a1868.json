{
    "patch": "  private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets > 0) {\n        // {@code name} meets condition (b).\n        boolean shouldInline = true;\n        for (Ref ref : name.getRefs()) {\n          if (ref.type == Type.DECLARATION || ref.type == Type.VAR |\n              ref.type == Type.EXPORT) {\n            shouldInline = false;\n            break;\n          }\n        }\n        if (shouldInline) {\n          // Find all of its local aliases and try to inline them.\n          List<Ref> refs = Lists.newArrayList(name.getRefs());\n          for (Ref ref : refs) {\n            if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n              // {@code name} meets condition (c).\n              inlineAliasIfPossible(ref, namespace);\n              name.removeRef(ref);\n            }\n          }\n        }\n      }\n\n      // Check if {@code name} has any aliases left after the\n      // local-alias-inlining above.\n      if ((name.type == Name.Type.OBJECTLIT ||\n           name.type == Name.Type.FUNCTION) &&\n          !name.getAliases().isEmpty()) {\n        // All of {@code name}'s children meet condition (a), so they can be\n        // added to the worklist.\n        workList.addAll(name.props);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..fd40a0d8 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -171,13 +171,22 @@ class CollapseProperties implements CompilerPass {\n \n       if (name.globalSets == 1 && name.localSets == 0 &&\n           name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n+        // {@code name} meets condition (b).\n+        boolean shouldInline = true;\n+        for (Ref ref : name.getRefs()) {\n+          if (ref.type == Type.DECLARATION || ref.type == Type.VAR |\n+              ref.type == Type.EXPORT) {\n+            shouldInline = false;\n+            break;\n+          }\n+        }\n+        if (shouldInline) {\n+          // Find all of its local aliases and try to inline them.\n+          List<Ref> refs = Lists.newArrayList(name.getRefs());\n+          for (Ref ref : refs) {\n+            if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+              // {@code name} meets condition (c).\n+              inlineAliasIfPossible(ref, namespace);\n               name.removeRef(ref);\n             }\n           }\n@@ -188,7 +197,7 @@ class CollapseProperties implements CompilerPass {\n       // local-alias-inlining above.\n       if ((name.type == Name.Type.OBJECTLIT ||\n            name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n+          !name.getAliases().isEmpty()) {\n         // All of {@code name}'s children meet condition (a), so they can be\n         // added to the worklist.\n         workList.addAll(name.props);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}