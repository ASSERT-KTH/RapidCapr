{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isPrototypeProperty(parent)) {\n        return false;\n      } else if (parent.getType() == Token.ASSIGN &&\n                 !NodeUtil.isNameDeclaration(parent.getParent())) {\n        Node lhs = parent.getFirstChild();\n        Node obj = lhs.getFirstChild();\n        if (lhs.getType() == Token.GETPROP && obj != null &&\n            obj.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      } else if (parent.getType() != Token.BLOCK &&\n                 parent.getType() != Token.SCRIPT &&\n                 parent.getType() != Token.CATCH &&\n                 parent.getType() != Token.FUNCTION &&\n                 parent.getType() != Token.CASE) {\n        return false;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..0bd04bb5 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,24 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isPrototypeProperty(parent)) {\n+        return false;\n+      } else if (parent.getType() == Token.ASSIGN &&\n+                 !NodeUtil.isNameDeclaration(parent.getParent())) {\n+        Node lhs = parent.getFirstChild();\n+        Node obj = lhs.getFirstChild();\n+        if (lhs.getType() == Token.GETPROP && obj != null &&\n+            obj.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+      } else if (parent.getType() != Token.BLOCK &&\n+                 parent.getType() != Token.SCRIPT &&\n+                 parent.getType() != Token.CATCH &&\n+                 parent.getType() != Token.FUNCTION &&\n+                 parent.getType() != Token.CASE) {\n+        return false;\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}