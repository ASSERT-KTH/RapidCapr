{
    "patch": "private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    if (typeVariable != null) {\n        if (typeVariable.getName().equals(\"T\") && typeVariable.getGenericDeclaration() instanceof Class) {\n            int index = Arrays.asList(((Class<?>) typeVariable.getGenericDeclaration()).getTypeParameters()).indexOf(typeVariable);\n            if (index >= 0) {\n                Type type = getClassGenericType(getClass(), index);\n                if (type != null)\n                    return type;\n            }\n        } else if (typeVariable.getGenericDeclaration() instanceof ParameterizedType) {\n            int index = Arrays.asList(((ParameterizedType) typeVariable.getGenericDeclaration()).getActualTypeArguments()).indexOf(typeVariable);\n            if (index >= 0) {\n                Type type = getClassGenericType(getClass(), index);\n                if (type != null)\n                    return type;\n            }\n        }\n    }\n    return Object.class;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..fa8713cdf 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,27 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    if (typeVariable != null) {\n+        if (typeVariable.getName().equals(\"T\") && typeVariable.getGenericDeclaration() instanceof Class) {\n+            int index = Arrays.asList(((Class<?>) typeVariable.getGenericDeclaration()).getTypeParameters()).indexOf(typeVariable);\n+            if (index >= 0) {\n+                Type type = getClassGenericType(getClass(), index);\n+                if (type != null)\n+                    return type;\n+            }\n+        } else if (typeVariable.getGenericDeclaration() instanceof ParameterizedType) {\n+            int index = Arrays.asList(((ParameterizedType) typeVariable.getGenericDeclaration()).getActualTypeArguments()).indexOf(typeVariable);\n+            if (index >= 0) {\n+                Type type = getClassGenericType(getClass(), index);\n+                if (type != null)\n+                    return type;\n+            }\n+        }\n+    }\n+    return Object.class;\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}