{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.FastMath;\n\npublic class MyClass {\n  public static double regularizedGamma(double a, double x) {\n      double Gamma_a = Gamma.gamma(a);\n      double sum = 1 / Gamma_a;\n      double term = 1 / Gamma_a;\n      for(int k = 1; k <= 1000; ++k) {\n          term *= x / (a + k);\n          sum += term;\n          if(term < sum * 1e-15) {\n              break;\n          }\n      }\n      return FastMath.exp(-x + a * FastMath.log(x) - FastMath.log(Gamma_a) + FastMath.log(sum));\n  }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..38463fc71 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,24 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.FastMath;\n+\n+public class MyClass {\n+  public static double regularizedGamma(double a, double x) {\n+      double Gamma_a = Gamma.gamma(a);\n+      double sum = 1 / Gamma_a;\n+      double term = 1 / Gamma_a;\n+      for(int k = 1; k <= 1000; ++k) {\n+          term *= x / (a + k);\n+          sum += term;\n+          if(term < sum * 1e-15) {\n+              break;\n+          }\n+      }\n+      return FastMath.exp(-x + a * FastMath.log(x) - FastMath.log(Gamma_a) + FastMath.log(sum));\n+  }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}