{
    "patch": "public EqualsBuilder append(Object lhs, Object rhs) {\n    if (isEquals == false) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null || rhs == null) {\n        this.setEquals(false);\n        return this;     }\n    Class<?> lhsClass = lhs.getClass();\n    if (!lhsClass.isArray()) {\n        isEquals = lhs.equals(rhs);\n    } else if (lhsClass != rhs.getClass()) {\n        this.setEquals(false);\n    } else if (lhs instanceof long[]) {\n        append((long[]) lhs, (long[]) rhs);\n    } else if (lhs instanceof int[]) {\n        append((int[]) lhs, (int[]) rhs);\n    } else if (lhs instanceof short[]) {\n        append((short[]) lhs, (short[]) rhs);\n    } else if (lhs instanceof char[]) {\n        append((char[]) lhs, (char[]) rhs);\n    } else if (lhs instanceof byte[]) {\n        append((byte[]) lhs, (byte[]) rhs);\n    } else if (lhs instanceof double[]) {\n        append((double[]) lhs, (double[]) rhs);\n    } else if (lhs instanceof float[]) {\n        append((float[]) lhs, (float[]) rhs);\n    } else if (lhs instanceof boolean[]) {\n        append((boolean[]) lhs, (boolean[]) rhs);\n    } else {\n        // Not an array of primitives, so compare each element of the array using EqualsBuilder and recursion\n        appendArray(lhs, rhs);\n    }\n    return this;\n}\n\nprivate void appendArray(Object lhs, Object rhs) {\n    //cast to array type of Object[], to be able to use Arrays.equals method.\n    isEquals = Arrays.equals((Object[]) lhs, (Object[]) rhs)\n            && isEquals(new EqualsBuilder(), (Object[]) lhs, (Object[]) rhs);\n}\n\n@SuppressWarnings(\"unchecked\")\nprivate void append(long[] lhs, long[] rhs) {\n    if (isEquals == false) {\n        return;\n    }\n    isEquals = Arrays.equals(lhs, rhs);\n}\n\n@SuppressWarnings(\"unchecked\")\nprivate void append(int[] lhs, int[] rhs) {\n    if (isEquals == false) {\n        return;\n    }\n    isEquals = Arrays.equals(lhs, rhs);\n}\n\n@SuppressWarnings(\"unchecked\")\nprivate void append(short[] lhs, short[] rhs) {\n    if (isEquals == false) {\n        return;\n    }\n    isEquals = Arrays.equals(lhs, rhs);\n}\n\n@SuppressWarnings(\"unchecked\")\nprivate void append(char[] lhs, char[] rhs) {\n    if (isEquals == false) {\n        return;\n    }\n    isEquals = Arrays.equals(lhs, rhs);\n}\n\n@SuppressWarnings(\"unchecked\")\nprivate void append(byte[] lhs, byte[] rhs) {\n    if (isEquals == false) {\n        return;\n    }\n    isEquals = Arrays.equals(lhs, rhs);\n}\n\n@SuppressWarnings(\"unchecked\")\nprivate void append(double[] lhs, double[] rhs) {\n    if (isEquals == false) {\n        return;\n    }\n    isEquals = Arrays.equals(lhs, rhs);\n}\n\n@SuppressWarnings(\"unchecked\")\nprivate void append(float[] lhs, float[] rhs) {\n    if (isEquals == false) {\n        return;\n    }\n    isEquals = Arrays.equals(lhs, rhs);\n}\n\n@SuppressWarnings(\"unchecked\")\nprivate void append(boolean[] lhs, boolean[] rhs) {\n    if (isEquals == false) {\n        return;\n    }\n    isEquals = Arrays.equals(lhs, rhs);\n}\n\n@SuppressWarnings(\"unchecked\")\nprivate void append(Object[] lhs, Object[] rhs) {\n    if (isEquals == false) {\n        return;\n    }\n    isEquals = Arrays.equals(lhs, rhs) \n            && isEquals(new EqualsBuilder(), lhs, rhs);\n}\n\nprivate static boolean isEquals(EqualsBuilder builder, Object[] lhs, Object[] rhs) {\n        if (lhs == rhs) {\n            return true;\n        }\n        if (lhs == null || rhs == null) {\n            return false;\n        }\n        if (lhs.length != rhs.length) {\n            return false;\n        }\n        for (int i = 0; i < lhs.length; i++) {\n            builder.append(lhs[i], rhs[i]);\n            if (!builder.isEquals()) {\n                return false;\n            }\n        }\n        return true;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..91740e41 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,49 +364,141 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n-    public EqualsBuilder append(Object lhs, Object rhs) {\n-        if (isEquals == false) {\n-            return this;\n-        }\n+public EqualsBuilder append(Object lhs, Object rhs) {\n+    if (isEquals == false) {\n+        return this;\n+    }\n+    if (lhs == rhs) {\n+        return this;\n+    }\n+    if (lhs == null || rhs == null) {\n+        this.setEquals(false);\n+        return this;     }\n+    Class<?> lhsClass = lhs.getClass();\n+    if (!lhsClass.isArray()) {\n+        isEquals = lhs.equals(rhs);\n+    } else if (lhsClass != rhs.getClass()) {\n+        this.setEquals(false);\n+    } else if (lhs instanceof long[]) {\n+        append((long[]) lhs, (long[]) rhs);\n+    } else if (lhs instanceof int[]) {\n+        append((int[]) lhs, (int[]) rhs);\n+    } else if (lhs instanceof short[]) {\n+        append((short[]) lhs, (short[]) rhs);\n+    } else if (lhs instanceof char[]) {\n+        append((char[]) lhs, (char[]) rhs);\n+    } else if (lhs instanceof byte[]) {\n+        append((byte[]) lhs, (byte[]) rhs);\n+    } else if (lhs instanceof double[]) {\n+        append((double[]) lhs, (double[]) rhs);\n+    } else if (lhs instanceof float[]) {\n+        append((float[]) lhs, (float[]) rhs);\n+    } else if (lhs instanceof boolean[]) {\n+        append((boolean[]) lhs, (boolean[]) rhs);\n+    } else {\n+        // Not an array of primitives, so compare each element of the array using EqualsBuilder and recursion\n+        appendArray(lhs, rhs);\n+    }\n+    return this;\n+}\n+\n+private void appendArray(Object lhs, Object rhs) {\n+    //cast to array type of Object[], to be able to use Arrays.equals method.\n+    isEquals = Arrays.equals((Object[]) lhs, (Object[]) rhs)\n+            && isEquals(new EqualsBuilder(), (Object[]) lhs, (Object[]) rhs);\n+}\n+\n+@SuppressWarnings(\"unchecked\")\n+private void append(long[] lhs, long[] rhs) {\n+    if (isEquals == false) {\n+        return;\n+    }\n+    isEquals = Arrays.equals(lhs, rhs);\n+}\n+\n+@SuppressWarnings(\"unchecked\")\n+private void append(int[] lhs, int[] rhs) {\n+    if (isEquals == false) {\n+        return;\n+    }\n+    isEquals = Arrays.equals(lhs, rhs);\n+}\n+\n+@SuppressWarnings(\"unchecked\")\n+private void append(short[] lhs, short[] rhs) {\n+    if (isEquals == false) {\n+        return;\n+    }\n+    isEquals = Arrays.equals(lhs, rhs);\n+}\n+\n+@SuppressWarnings(\"unchecked\")\n+private void append(char[] lhs, char[] rhs) {\n+    if (isEquals == false) {\n+        return;\n+    }\n+    isEquals = Arrays.equals(lhs, rhs);\n+}\n+\n+@SuppressWarnings(\"unchecked\")\n+private void append(byte[] lhs, byte[] rhs) {\n+    if (isEquals == false) {\n+        return;\n+    }\n+    isEquals = Arrays.equals(lhs, rhs);\n+}\n+\n+@SuppressWarnings(\"unchecked\")\n+private void append(double[] lhs, double[] rhs) {\n+    if (isEquals == false) {\n+        return;\n+    }\n+    isEquals = Arrays.equals(lhs, rhs);\n+}\n+\n+@SuppressWarnings(\"unchecked\")\n+private void append(float[] lhs, float[] rhs) {\n+    if (isEquals == false) {\n+        return;\n+    }\n+    isEquals = Arrays.equals(lhs, rhs);\n+}\n+\n+@SuppressWarnings(\"unchecked\")\n+private void append(boolean[] lhs, boolean[] rhs) {\n+    if (isEquals == false) {\n+        return;\n+    }\n+    isEquals = Arrays.equals(lhs, rhs);\n+}\n+\n+@SuppressWarnings(\"unchecked\")\n+private void append(Object[] lhs, Object[] rhs) {\n+    if (isEquals == false) {\n+        return;\n+    }\n+    isEquals = Arrays.equals(lhs, rhs) \n+            && isEquals(new EqualsBuilder(), lhs, rhs);\n+}\n+\n+private static boolean isEquals(EqualsBuilder builder, Object[] lhs, Object[] rhs) {\n         if (lhs == rhs) {\n-            return this;\n+            return true;\n         }\n         if (lhs == null || rhs == null) {\n-            this.setEquals(false);\n-            return this;\n+            return false;\n         }\n-        Class lhsClass = lhs.getClass();\n-        if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n-            this.setEquals(false);\n+        if (lhs.length != rhs.length) {\n+            return false;\n         }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n-        } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n-        } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n-        } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n-        } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n-        } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n-        } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n-        } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n-        } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+        for (int i = 0; i < lhs.length; i++) {\n+            builder.append(lhs[i], rhs[i]);\n+            if (!builder.isEquals()) {\n+                return false;\n+            }\n         }\n-        return this;\n-    }\n+        return true;\n+}\n \n     /**\n      * <p>",
    "result_reason": "error: generics are not supported in -source 1.3",
    "test_result": "ERROR"
}