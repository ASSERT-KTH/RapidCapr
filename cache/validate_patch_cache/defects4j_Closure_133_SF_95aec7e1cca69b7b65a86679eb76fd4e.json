{
    "patch": "private String getRemainingJSDocLine() {\n    String result;\n    try {\n        result = stream.getRemainingJSDocLine();\n    } catch (NullPointerException e) {\n        throw new IllegalStateException(\"Recorded bad position information\");\n    }\n    if (result == null) {\n        throw new IllegalStateException(\"Recorded bad position information\");\n    }\n    result = result.trim();\n    if (result.isEmpty()) {\n        throw new IllegalStateException(\"Recorded bad position information\");\n    }\n    String[] parts = result.split(\"\\\\s+\");\n    StringBuilder sb = new StringBuilder();\n    for (String part : parts) {\n        sb.append(part).append(\" \");\n    }\n    return sb.toString().trim();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..5158bada 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,27 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n-    String result = stream.getRemainingJSDocLine();\n-    return result;\n-  }\n+private String getRemainingJSDocLine() {\n+    String result;\n+    try {\n+        result = stream.getRemainingJSDocLine();\n+    } catch (NullPointerException e) {\n+        throw new IllegalStateException(\"Recorded bad position information\");\n+    }\n+    if (result == null) {\n+        throw new IllegalStateException(\"Recorded bad position information\");\n+    }\n+    result = result.trim();\n+    if (result.isEmpty()) {\n+        throw new IllegalStateException(\"Recorded bad position information\");\n+    }\n+    String[] parts = result.split(\"\\\\s+\");\n+    StringBuilder sb = new StringBuilder();\n+    for (String part : parts) {\n+        sb.append(part).append(\" \");\n+    }\n+    return sb.toString().trim();\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "java.lang.RuntimeException: java.lang.IllegalStateException: Recorded bad position information",
    "test_result": "FAIL"
}