{
    "patch": "private String getRemainingJSDocLine() {\n    String result = null;\n    try {\n        result = stream.getRemainingJSDocLine();\n    } catch (NullPointerException npe) {\n        throw new IllegalStateException(\"Recorded bad position information\", npe);\n    }\n    if (result == null) {\n        throw new IllegalStateException(\"Recorded bad position information\");\n    }\n    return result.trim();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..07ce6ff6 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,18 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n-    String result = stream.getRemainingJSDocLine();\n-    return result;\n-  }\n+private String getRemainingJSDocLine() {\n+    String result = null;\n+    try {\n+        result = stream.getRemainingJSDocLine();\n+    } catch (NullPointerException npe) {\n+        throw new IllegalStateException(\"Recorded bad position information\", npe);\n+    }\n+    if (result == null) {\n+        throw new IllegalStateException(\"Recorded bad position information\");\n+    }\n+    return result.trim();\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "junit.framework.ComparisonFailure: expected:<Another[ ]function.> but was:<Another[]function.>",
    "test_result": "FAIL"
}