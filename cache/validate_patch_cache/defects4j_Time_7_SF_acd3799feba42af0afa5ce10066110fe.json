{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    DateTimeZone zone = chrono.getZone();\n    int offset = zone.getOffset(instantMillis);\n    long instantLocal = instantMillis + offset;\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n\n    // set pivot year before parsing\n    int pivotYear = iPivotYear != null ? iPivotYear.intValue() : defaultYear;\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, pivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    if (bucket.computeMillis(true, text) > instant.getMillis() || bucket.getOffsetInteger() != null) {\n        if (bucket.computeMillis(false, text) > instant.getMillis()) {\n            // if the year is missing, increment by 1\n            if (bucket.getChronology().dayOfYear().get(bucket.computeMillis(true, text)) == 1) {\n                chrono = chrono.withYear(defaultYear + 1);\n            } else {\n                chrono = chrono.withYear(defaultYear);\n            }\n            instantLocal = bucket.computeMillis(true, text) + chrono.getZone().getOffset(instantLocal);\n        } else {\n            instantLocal = bucket.computeMillis(false, text);\n        }\n        if (bucket.getOffsetInteger() != null) {\n            offset = bucket.getOffsetInteger().intValue();\n            zone = DateTimeZone.forOffsetMillis(offset);\n            chrono = chrono.withZone(zone);\n        } else if (bucket.getZone() != null) {\n            zone = bucket.getZone();\n            chrono = chrono.withZone(zone);\n        }\n        instant.setChronology(chrono);\n        instant.setZone(zone);\n        instant.setMillis(instantLocal);\n    }\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..6cee6c7e 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,51 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    DateTimeZone zone = chrono.getZone();\n+    int offset = zone.getOffset(instantMillis);\n+    long instantLocal = instantMillis + offset;\n+    chrono = selectChronology(chrono);\n+    int defaultYear = chrono.year().get(instantLocal);\n+\n+    // set pivot year before parsing\n+    int pivotYear = iPivotYear != null ? iPivotYear.intValue() : defaultYear;\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instantLocal, chrono, iLocale, pivotYear, defaultYear);\n+    int newPos = parser.parseInto(bucket, text, position);\n+    if (bucket.computeMillis(true, text) > instant.getMillis() || bucket.getOffsetInteger() != null) {\n+        if (bucket.computeMillis(false, text) > instant.getMillis()) {\n+            // if the year is missing, increment by 1\n+            if (bucket.getChronology().dayOfYear().get(bucket.computeMillis(true, text)) == 1) {\n+                chrono = chrono.withYear(defaultYear + 1);\n+            } else {\n+                chrono = chrono.withYear(defaultYear);\n+            }\n+            instantLocal = bucket.computeMillis(true, text) + chrono.getZone().getOffset(instantLocal);\n+        } else {\n+            instantLocal = bucket.computeMillis(false, text);\n         }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+        if (bucket.getOffsetInteger() != null) {\n+            offset = bucket.getOffsetInteger().intValue();\n+            zone = DateTimeZone.forOffsetMillis(offset);\n+            chrono = chrono.withZone(zone);\n         } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+            zone = bucket.getZone();\n+            chrono = chrono.withZone(zone);\n         }\n         instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n+        instant.setZone(zone);\n+        instant.setMillis(instantLocal);\n     }\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}