{
    "patch": "MockInjectionAttempt attempt = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\nif(attempt.isMockFound() && !attempt.isInjectionStatsRecorded()) {\n    attempt.inject();\n}\nif(attempt.isMockFound() && attempt.isInjectionStatsRecorded() && !attempt.isInjected()) {\n    attempt.setInjected();\n    fieldInstance = attempt.getCandidate();\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..8460f5ef8 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,17 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+MockInjectionAttempt attempt = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+if(attempt.isMockFound() && !attempt.isInjectionStatsRecorded()) {\n+    attempt.inject();\n+}\n+if(attempt.isMockFound() && attempt.isInjectionStatsRecorded() && !attempt.isInjected()) {\n+    attempt.setInjected();\n+    fieldInstance = attempt.getCandidate();\n+}\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}