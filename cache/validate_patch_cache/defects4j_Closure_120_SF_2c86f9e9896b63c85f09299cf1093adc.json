{
    "patch": "  private Set<Reference> getReferencesInLifetime() {\n    Set<Reference> referencesInLifetime = new HashSet<>();\n    Set<Node> visited = new HashSet<>();\n    for (Reference ref : references) {\n      if (!ref.isLValue()) {\n        continue;\n      }\n      Node node = ref.getNode();\n      if (visited.contains(node)) {\n        continue;\n      }\n      visited.add(node);\n      if (ref.isVariableDeclaration() && ref.isInitializingDeclaration()) {\n        referencesInLifetime.add(ref);\n      } else if (ref.isSimpleAssignmentToName() || ref.isInc()) {\n        referencesInLifetime.add(ref);\n      }\n    }\n    return referencesInLifetime;\n  }\n\n  /**\n   * @return Whether the variable is only assigned a value once for its lifetime.\n   */\n  boolean isAssignedOnceInLifetime() {\n    Set<Reference> referencesInLifetime = getReferencesInLifetime();\n    if (referencesInLifetime.isEmpty()) {\n      return false;\n    }\n\n    // Make sure this reference is not in a loop.\n    for (BasicBlock block = referencesInLifetime.iterator().next().getBasicBlock();\n        block != null; block = block.getParent()) {\n      if (block.isFunction()) {\n        break;\n      } else if (block.isLoop()) {\n        return false;\n      }\n    }\n\n    return referencesInLifetime.size() == 1;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..b099514b 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -371,72 +371,49 @@ class ReferenceCollectingCallback implements ScopedCallback,\n      * follow a variable declaration that itself does not initialize the\n      * variable.\n      */\n-    private boolean isInitializingAssignmentAt(int index) {\n-      if (index < references.size() && index > 0) {\n-        Reference maybeDecl = references.get(index - 1);\n-        if (maybeDecl.isVarDeclaration()) {\n-          Preconditions.checkState(!maybeDecl.isInitializingDeclaration());\n-          Reference maybeInit = references.get(index);\n-          if (maybeInit.isSimpleAssignmentToName()) {\n-            return true;\n-          }\n-        }\n+  private Set<Reference> getReferencesInLifetime() {\n+    Set<Reference> referencesInLifetime = new HashSet<>();\n+    Set<Node> visited = new HashSet<>();\n+    for (Reference ref : references) {\n+      if (!ref.isLValue()) {\n+        continue;\n       }\n-      return false;\n-    }\n-\n-    /**\n-     * @return The reference that provides the value for the variable at the\n-     * time of the first read, if known, otherwise null.\n-     *\n-     * This is either the variable declaration (\"var a = ...\") or first\n-     * reference following the declaration if it is an assignment.\n-     */\n-    Reference getInitializingReference() {\n-      if (isInitializingDeclarationAt(0)) {\n-        return references.get(0);\n-      } else if (isInitializingAssignmentAt(1)) {\n-        return references.get(1);\n+      Node node = ref.getNode();\n+      if (visited.contains(node)) {\n+        continue;\n+      }\n+      visited.add(node);\n+      if (ref.isVariableDeclaration() && ref.isInitializingDeclaration()) {\n+        referencesInLifetime.add(ref);\n+      } else if (ref.isSimpleAssignmentToName() || ref.isInc()) {\n+        referencesInLifetime.add(ref);\n       }\n-      return null;\n     }\n+    return referencesInLifetime;\n+  }\n \n-    /**\n-     * Constants are allowed to be defined after their first use.\n-     */\n-    Reference getInitializingReferenceForConstants() {\n-      int size = references.size();\n-      for (int i = 0; i < size; i++) {\n-        if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {\n-          return references.get(i);\n-        }\n-      }\n-      return null;\n+  /**\n+   * @return Whether the variable is only assigned a value once for its lifetime.\n+   */\n+  boolean isAssignedOnceInLifetime() {\n+    Set<Reference> referencesInLifetime = getReferencesInLifetime();\n+    if (referencesInLifetime.isEmpty()) {\n+      return false;\n     }\n \n-    /**\n-     * @return Whether the variable is only assigned a value once for its\n-     *     lifetime.\n-     */\n-    boolean isAssignedOnceInLifetime() {\n-      Reference ref = getOneAndOnlyAssignment();\n-      if (ref == null) {\n+    // Make sure this reference is not in a loop.\n+    for (BasicBlock block = referencesInLifetime.iterator().next().getBasicBlock();\n+        block != null; block = block.getParent()) {\n+      if (block.isFunction()) {\n+        break;\n+      } else if (block.isLoop()) {\n         return false;\n       }\n-\n-      // Make sure this assignment is not in a loop.\n-      for (BasicBlock block = ref.getBasicBlock();\n-           block != null; block = block.getParent()) {\n-        if (block.isFunction) {\n-          break;\n-        } else if (block.isLoop) {\n-          return false;\n-        }\n-      }\n-\n-      return true;\n     }\n \n+    return referencesInLifetime.size() == 1;\n+  }\n+\n     /**\n      * @return The one and only assignment. Returns if there are 0 or 2+\n      *    assignments.",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}