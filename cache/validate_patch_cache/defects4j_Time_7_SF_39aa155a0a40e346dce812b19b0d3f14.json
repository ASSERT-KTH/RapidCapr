{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = selectChronology(instant.getChronology());\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instant, chrono, iLocale, iPivotYear);\n\n    int newPos = parser.parseInto(bucket, text, position);\n\n    if (bucket.getOffsetInteger() != null) {  // Offset found in the input text\n        int parsedOffset = bucket.getOffsetInteger();\n        instant.setMillis(bucket.computeMillis(true, text) - parsedOffset); //parse the instant with the offset and subtract it from the calculated millis\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        instant.setZone(parsedZone);\n        instant.setChronology(parsedZone.getChronology());\n    } else if (bucket.getZone() != null) { // Time zone found in the input text\n        Chronology bucketChrono = bucket.getChronology();\n        DateTimeZone bucketZone = bucket.getZone();\n        long instantLocal = bucket.computeMillis(false, text);\n        // account for the situation where bucket.getChronology() != chrono\n        instant.setMillis(bucketChrono.getZone().getMillisKeepLocal(bucketZone, instantLocal));\n        instant.setChronology(bucketChrono);\n        instant.setZone(bucketZone);\n    } else { // No time zone or offset found in the input text\n        instant.setMillis(bucket.computeMillis(false, text));\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n    }\n\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..7a7ee450 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,36 +697,43 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = selectChronology(instant.getChronology());\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instant, chrono, iLocale, iPivotYear);\n+\n+    int newPos = parser.parseInto(bucket, text, position);\n+\n+    if (bucket.getOffsetInteger() != null) {  // Offset found in the input text\n+        int parsedOffset = bucket.getOffsetInteger();\n+        instant.setMillis(bucket.computeMillis(true, text) - parsedOffset); //parse the instant with the offset and subtract it from the calculated millis\n+        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+        instant.setZone(parsedZone);\n+        instant.setChronology(parsedZone.getChronology());\n+    } else if (bucket.getZone() != null) { // Time zone found in the input text\n+        Chronology bucketChrono = bucket.getChronology();\n+        DateTimeZone bucketZone = bucket.getZone();\n+        long instantLocal = bucket.computeMillis(false, text);\n+        // account for the situation where bucket.getChronology() != chrono\n+        instant.setMillis(bucketChrono.getZone().getMillisKeepLocal(bucketZone, instantLocal));\n+        instant.setChronology(bucketChrono);\n+        instant.setZone(bucketZone);\n+    } else { // No time zone or offset found in the input text\n         instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n         instant.setChronology(chrono);\n         if (iZone != null) {\n             instant.setZone(iZone);\n         }\n-        return newPos;\n     }\n \n+    return newPos;\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "error: incompatible types: ReadWritableInstant cannot be converted to long",
    "test_result": "ERROR"
}