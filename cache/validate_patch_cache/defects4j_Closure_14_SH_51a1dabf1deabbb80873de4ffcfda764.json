{
    "patch": "              List<DiGraphEdge<Node, Branch>> tryEdges = getCfg().getOutEdges(parent);\n              for (DiGraphEdge<Node, Branch> tryEdge : tryEdges) {\n                if (tryEdge.getValue() == Branch.ON_EX) {\n                  List<DiGraphEdge<Node, Branch>> catchEdges =\n                      getCfg().getOutEdges(NodeUtil.getCatchBlock(parent));\n                  for (DiGraphEdge<Node, Branch> catchEdge : catchEdges) {\n                    if (catchEdge.getValue() == Branch.ON_EX) {\n                      cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n                      cfa.createEdge(finallyNode, Branch.UNCOND, catchEdge.getDestination());\n                    }\n                  }\n                }\n              }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..ecd6f6cf 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,19 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+              List<DiGraphEdge<Node, Branch>> tryEdges = getCfg().getOutEdges(parent);\n+              for (DiGraphEdge<Node, Branch> tryEdge : tryEdges) {\n+                if (tryEdge.getValue() == Branch.ON_EX) {\n+                  List<DiGraphEdge<Node, Branch>> catchEdges =\n+                      getCfg().getOutEdges(NodeUtil.getCatchBlock(parent));\n+                  for (DiGraphEdge<Node, Branch> catchEdge : catchEdges) {\n+                    if (catchEdge.getValue() == Branch.ON_EX) {\n+                      cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+                      cfa.createEdge(finallyNode, Branch.UNCOND, catchEdge.getDestination());\n+                    }\n+                  }\n+                }\n+              }\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}