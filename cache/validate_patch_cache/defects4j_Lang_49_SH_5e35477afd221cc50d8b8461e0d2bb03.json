{
    "patch": "public class Fraction {\n    private int numerator;\n    private int denominator;\n\n    public Fraction(int numer, int denom) {\n        if (denom == 0) {\n            throw new IllegalArgumentException(\"denominator must not be zero\");\n        }\n        int gcd = greatestCommonDivisor(Math.abs(numer), Math.abs(denom));\n        numerator = numer / gcd;\n        denominator = denom / gcd;\n        if (denominator < 0) {\n            denominator = -denominator;\n            numerator = -numerator;\n        }\n    }\n\n    private int greatestCommonDivisor(int a, int b) {\n        while (b > 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n\n    public int getNumerator() {\n        return numerator;\n    }\n\n    public int getDenominator() {\n        return denominator;\n    }\n\n    public Fraction reduce() {\n        int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));\n        if (gcd == 1) {\n            return this;\n        }\n        return new Fraction(numerator / gcd, denominator / gcd);\n    }\n\n    public Fraction add(Fraction that) {\n        int numer = (this.numerator * that.denominator) + (that.numerator * this.denominator);\n        int denom = this.denominator * that.denominator;\n        return new Fraction(numer, denom);\n    }\n\n    public Fraction subtract(Fraction that) {\n        int numer = (this.numerator * that.denominator) - (that.numerator * this.denominator);\n        int denom = this.denominator * that.denominator;\n        return new Fraction(numer, denom);\n    }\n\n    public Fraction multiplyBy(Fraction that) {\n        int numer = this.numerator * that.numerator;\n        int denom = this.denominator * that.denominator;\n        return new Fraction(numer, denom);\n    }\n\n    public Fraction divideBy(Fraction that) {\n        return multiplyBy(that.invert());\n    }\n\n    public Fraction invert() {\n        return new Fraction(denominator, numerator);\n    }\n\n    public String toString() {\n        return numerator + \"/\" + denominator;\n    }\n\n    public boolean equals(Object o) {\n        if (!(o instanceof Fraction)) {\n            return false;\n        }\n        Fraction that = (Fraction) o;\n        return this.numerator == that.numerator && this.denominator == that.denominator;\n    }\n\n    public int hashCode() {\n        return 37 * (37 * numerator + denominator);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..2a20f279 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,6 +463,90 @@ public final class Fraction extends Number implements Comparable {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n+public class Fraction {\n+    private int numerator;\n+    private int denominator;\n+\n+    public Fraction(int numer, int denom) {\n+        if (denom == 0) {\n+            throw new IllegalArgumentException(\"denominator must not be zero\");\n+        }\n+        int gcd = greatestCommonDivisor(Math.abs(numer), Math.abs(denom));\n+        numerator = numer / gcd;\n+        denominator = denom / gcd;\n+        if (denominator < 0) {\n+            denominator = -denominator;\n+            numerator = -numerator;\n+        }\n+    }\n+\n+    private int greatestCommonDivisor(int a, int b) {\n+        while (b > 0) {\n+            int temp = b;\n+            b = a % b;\n+            a = temp;\n+        }\n+        return a;\n+    }\n+\n+    public int getNumerator() {\n+        return numerator;\n+    }\n+\n+    public int getDenominator() {\n+        return denominator;\n+    }\n+\n+    public Fraction reduce() {\n+        int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));\n+        if (gcd == 1) {\n+            return this;\n+        }\n+        return new Fraction(numerator / gcd, denominator / gcd);\n+    }\n+\n+    public Fraction add(Fraction that) {\n+        int numer = (this.numerator * that.denominator) + (that.numerator * this.denominator);\n+        int denom = this.denominator * that.denominator;\n+        return new Fraction(numer, denom);\n+    }\n+\n+    public Fraction subtract(Fraction that) {\n+        int numer = (this.numerator * that.denominator) - (that.numerator * this.denominator);\n+        int denom = this.denominator * that.denominator;\n+        return new Fraction(numer, denom);\n+    }\n+\n+    public Fraction multiplyBy(Fraction that) {\n+        int numer = this.numerator * that.numerator;\n+        int denom = this.denominator * that.denominator;\n+        return new Fraction(numer, denom);\n+    }\n+\n+    public Fraction divideBy(Fraction that) {\n+        return multiplyBy(that.invert());\n+    }\n+\n+    public Fraction invert() {\n+        return new Fraction(denominator, numerator);\n+    }\n+\n+    public String toString() {\n+        return numerator + \"/\" + denominator;\n+    }\n+\n+    public boolean equals(Object o) {\n+        if (!(o instanceof Fraction)) {\n+            return false;\n+        }\n+        Fraction that = (Fraction) o;\n+        return this.numerator == that.numerator && this.denominator == that.denominator;\n+    }\n+\n+    public int hashCode() {\n+        return 37 * (37 * numerator + denominator);\n+    }\n+}\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}