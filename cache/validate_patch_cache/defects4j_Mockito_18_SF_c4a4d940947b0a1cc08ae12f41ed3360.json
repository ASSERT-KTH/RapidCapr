{
    "patch": "public static String replace(String input, char c) {\n    if (input == null) {\n        return null;\n    }\n    char[] inputChars = input.toCharArray();\n    for (int i = 0; i < inputChars.length; i++) {\n        if (inputChars[i] == c) {\n            inputChars[i] = ' ';\n        }\n    }\n    return new String(inputChars);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..9f7e7e641 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,18 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static String replace(String input, char c) {\n+    if (input == null) {\n+        return null;\n+    }\n+    char[] inputChars = input.toCharArray();\n+    for (int i = 0; i < inputChars.length; i++) {\n+        if (inputChars[i] == c) {\n+            inputChars[i] = ' ';\n+        }\n+    }\n+    return new String(inputChars);\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}