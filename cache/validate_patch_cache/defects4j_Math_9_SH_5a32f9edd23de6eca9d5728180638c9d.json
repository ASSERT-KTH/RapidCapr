{
    "patch": "    public Line revert() {\n        Vector3D zero = Vector3D.ZERO;\n        Vector3D revertedDirection = direction.negate();\n\n        if (revertedDirection.getNormSq() <= Precision.SAFE_MIN) {\n            // direction is either zero or too close to zero\n            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n        }\n\n        // normalize direction vector\n        revertedDirection = revertedDirection.normalize();\n\n        Line reverted = new Line(zero, revertedDirection);\n        return reverted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..5f15e80e6 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -84,7 +84,21 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n      * @return a new instance, with reversed direction\n      */\n     public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n+    public Line revert() {\n+        Vector3D zero = Vector3D.ZERO;\n+        Vector3D revertedDirection = direction.negate();\n+\n+        if (revertedDirection.getNormSq() <= Precision.SAFE_MIN) {\n+            // direction is either zero or too close to zero\n+            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);\n+        }\n+\n+        // normalize direction vector\n+        revertedDirection = revertedDirection.normalize();\n+\n+        Line reverted = new Line(zero, revertedDirection);\n+        return reverted;\n+    }\n         return reverted;\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}