{
    "patch": "for (int i = 0; i < len; i++) {\n    int ch = (int) charArray[i];\n    if (ch <= 127) {  // If it is an ASCII character\n        builder.append((char) ch);\n    } else if (ch == 160) {\n        // special case handling for non-breaking space\n        builder.append(\"&nbsp;\");\n    } else if (ch < 256) {\n        builder.append(\"&#\");\n        builder.append(Integer.toString(ch));\n        builder.append(';');\n        success = true;\n    } else {\n        builder.append(\"&#\");\n        builder.append(Integer.toString(ch));\n        builder.append(';');\n        success = true;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}