{
    "patch": "private boolean isInlinableObject(List<Reference> refs) {\n  Set<Node> objectLits = new HashSet<>();\n  Set<Node> processed = new HashSet<>();\n\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    // Ignore indirect references, like x.y (except x.y(), since the function referenced by y might reference 'this')\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n\n      if (gramps.isCall() && gramps.getFirstChild() == parent) {\n        continue;\n      }\n\n      // Check if this is a property that is defined on an object literal\n      Node grandGramps = gramps.getGrandparent();\n      if (grandGramps != null && grandGramps.isAssign()) {\n        Node rhs = grandGramps.getLastChild();\n        if (rhs.isObjectLit()) {\n          objectLits.add(rhs);\n        }\n      }\n      continue;\n    }\n\n    // Only rewrite VAR declarations or simple assignment statements\n    if (!isVarOrAssignExprLhs(name)) {\n      continue;\n    }\n\n    Node val = ref.getAssignedValue();\n    if (val == null) {\n      // A var with no assignment.\n      continue;\n    }\n\n    // We're looking for object literal assignments only.\n    if (!val.isObjectLit()) {\n      continue;\n    }\n\n    // Make sure that the value is not self-refential. IOW,\n    // disallow things like x = {b: x.a}.\n    //\n    // TODO: Only exclude unorderable self-referential\n    // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n    // but x = {a: 1, b: x.a} is.\n    //\n    // Also, ES5 getters/setters aren't handled by this pass.\n    for (Node child = val.getFirstChild(); child != null;\n        child = child.getNext()) {\n      if (child.isGetterDef() ||\n          child.isSetterDef() ||\n          child.getBooleanProp(Node.COMPUTED_PROP)) {\n        // ES5 get/set and computed props not supported.\n        continue;\n      }\n\n      Node childVal = child.getLastChild();\n      if (childVal == null) {\n        continue;\n      }\n\n      // Check if childVal is the parent of any of the passed in\n      // references, as that is how self-referential assignments\n      // will happen.\n      for (Reference t : refs) {\n        if (t == ref) {\n          continue;\n        }\n\n        Node refNode = t.getParent();\n        while (!NodeUtil.isStatementBlock(refNode)) {\n          if (refNode == childVal) {\n            // There's a self-referential assignment\n            continue;\n          }\n          refNode = refNode.getParent();\n        }\n      }\n    }\n\n    // Look for all references to the object literal that we want to inline\n    Set<Node> refsToVal = new HashSet<>();\n    collectReferences(val, name.getString(), refsToVal, new HashSet<>());\n\n    // We have found an acceptable object literal assignment\n    // As long as there are no other assignments that mess things up, we can inline\n    processed.add(val);\n    if (!objectLits.contains(val) && refsToVal.size() == refs.size()) {\n      return true;\n    }\n  }\n  return false;\n}\n\nprivate void collectReferences(Node root, String name, Set<Node> refs, Set<Node> visited) {\n  if (root == null || visited.contains(root)) {\n    return;\n  }\n  visited.add(root);\n  if (root.isName() && root.getString().equals(name)) {\n    Node parent = root.getParent();\n    if (parent.isGetProp()) {\n      // Ignore indirect references, like x.y (except x.y(), since the function referenced by y might reference 'this')\n      Node gramps = parent.getGrandparent();\n      if (gramps == null || !gramps.isCall() || gramps.getFirstChild() != parent) {\n        refs.add(parent);\n      }\n    } else if (parent.isAssign()) {\n      refs.add(parent);\n    }\n  }\n  for (Node child = root.getFirstChild(); child != null; child = child.getNext()) {\n    collectReferences(child, name, refs, visited);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..3be7d1a2 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,92 +152,126 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      for (Reference ref : refs) {\n-        Node name = ref.getNode();\n-        Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n-\n-        // Ignore indirect references, like x.y (except x.y(), since\n-        // the function referenced by y might reference 'this').\n-        //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n+private boolean isInlinableObject(List<Reference> refs) {\n+  Set<Node> objectLits = new HashSet<>();\n+  Set<Node> processed = new HashSet<>();\n \n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          continue;\n-        }\n+  for (Reference ref : refs) {\n+    Node name = ref.getNode();\n+    Node parent = ref.getParent();\n+    Node gramps = ref.getGrandparent();\n \n-        // Only rewrite VAR declarations or simple assignment statements\n-        if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n-        }\n+    // Ignore indirect references, like x.y (except x.y(), since the function referenced by y might reference 'this')\n+    if (parent.isGetProp()) {\n+      Preconditions.checkState(parent.getFirstChild() == name);\n \n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n-          continue;\n-        }\n+      if (gramps.isCall() && gramps.getFirstChild() == parent) {\n+        continue;\n+      }\n \n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n-          return false;\n+      // Check if this is a property that is defined on an object literal\n+      Node grandGramps = gramps.getGrandparent();\n+      if (grandGramps != null && grandGramps.isAssign()) {\n+        Node rhs = grandGramps.getLastChild();\n+        if (rhs.isObjectLit()) {\n+          objectLits.add(rhs);\n         }\n+      }\n+      continue;\n+    }\n \n-        // Make sure that the value is not self-refential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n-            return false;\n-          }\n+    // Only rewrite VAR declarations or simple assignment statements\n+    if (!isVarOrAssignExprLhs(name)) {\n+      continue;\n+    }\n \n+    Node val = ref.getAssignedValue();\n+    if (val == null) {\n+      // A var with no assignment.\n+      continue;\n+    }\n \n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n-            }\n+    // We're looking for object literal assignments only.\n+    if (!val.isObjectLit()) {\n+      continue;\n+    }\n+\n+    // Make sure that the value is not self-refential. IOW,\n+    // disallow things like x = {b: x.a}.\n+    //\n+    // TODO: Only exclude unorderable self-referential\n+    // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n+    // but x = {a: 1, b: x.a} is.\n+    //\n+    // Also, ES5 getters/setters aren't handled by this pass.\n+    for (Node child = val.getFirstChild(); child != null;\n+        child = child.getNext()) {\n+      if (child.isGetterDef() ||\n+          child.isSetterDef() ||\n+          child.getBooleanProp(Node.COMPUTED_PROP)) {\n+        // ES5 get/set and computed props not supported.\n+        continue;\n+      }\n+\n+      Node childVal = child.getLastChild();\n+      if (childVal == null) {\n+        continue;\n+      }\n+\n+      // Check if childVal is the parent of any of the passed in\n+      // references, as that is how self-referential assignments\n+      // will happen.\n+      for (Reference t : refs) {\n+        if (t == ref) {\n+          continue;\n+        }\n+\n+        Node refNode = t.getParent();\n+        while (!NodeUtil.isStatementBlock(refNode)) {\n+          if (refNode == childVal) {\n+            // There's a self-referential assignment\n+            continue;\n           }\n+          refNode = refNode.getParent();\n         }\n+      }\n+    }\n \n+    // Look for all references to the object literal that we want to inline\n+    Set<Node> refsToVal = new HashSet<>();\n+    collectReferences(val, name.getString(), refsToVal, new HashSet<>());\n \n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n+    // We have found an acceptable object literal assignment\n+    // As long as there are no other assignments that mess things up, we can inline\n+    processed.add(val);\n+    if (!objectLits.contains(val) && refsToVal.size() == refs.size()) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n+\n+private void collectReferences(Node root, String name, Set<Node> refs, Set<Node> visited) {\n+  if (root == null || visited.contains(root)) {\n+    return;\n+  }\n+  visited.add(root);\n+  if (root.isName() && root.getString().equals(name)) {\n+    Node parent = root.getParent();\n+    if (parent.isGetProp()) {\n+      // Ignore indirect references, like x.y (except x.y(), since the function referenced by y might reference 'this')\n+      Node gramps = parent.getGrandparent();\n+      if (gramps == null || !gramps.isCall() || gramps.getFirstChild() != parent) {\n+        refs.add(parent);\n       }\n-      return ret;\n+    } else if (parent.isAssign()) {\n+      refs.add(parent);\n     }\n+  }\n+  for (Node child = root.getFirstChild(); child != null; child = child.getNext()) {\n+    collectReferences(child, name, refs, visited);\n+  }\n+}\n \n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}