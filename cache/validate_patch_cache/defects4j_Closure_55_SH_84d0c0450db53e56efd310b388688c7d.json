{
    "patch": "if (!NodeUtil.isFunctionExpression(n)) {\n  return false;\n}\nNode parent = n.getParent();\nif (parent == null) {\n  return false;\n}\nint parentType = parent.getType();\nNode grandParent = parent.getParent();\nif (grandParent == null) {\n  return false;\n}\nint grandParentType = grandParent.getType();\nif (parentType == Token.CALL || parentType == Token.NEW) {\n  return false;\n} else if (parentType == Token.EXPR_RESULT || parentType == Token.ASSIGN ||\n           parentType == Token.VAR || grandParentType == Token.FUNCTION ||\n           (grandParentType == Token.BLOCK && grandParent.getParent() != null &&\n           grandParent.getParent().getType() == Token.FUNCTION)) {\n  return true;\n} else if (parentType == Token.RETURN) {\n  Node greatGrandParent = grandParent.getParent();\n  if (greatGrandParent == null) {\n    return false;\n  }\n  int greatGrandParentType = greatGrandParent.getType();\n  return greatGrandParentType == Token.FUNCTION || (greatGrandParentType == Token.BLOCK &&\n         greatGrandParent.getParent() != null && greatGrandParent.getParent().getType() == Token.FUNCTION);\n}\nreturn false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..d6b44e68 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,36 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+if (!NodeUtil.isFunctionExpression(n)) {\n+  return false;\n+}\n+Node parent = n.getParent();\n+if (parent == null) {\n+  return false;\n+}\n+int parentType = parent.getType();\n+Node grandParent = parent.getParent();\n+if (grandParent == null) {\n+  return false;\n+}\n+int grandParentType = grandParent.getType();\n+if (parentType == Token.CALL || parentType == Token.NEW) {\n+  return false;\n+} else if (parentType == Token.EXPR_RESULT || parentType == Token.ASSIGN ||\n+           parentType == Token.VAR || grandParentType == Token.FUNCTION ||\n+           (grandParentType == Token.BLOCK && grandParent.getParent() != null &&\n+           grandParent.getParent().getType() == Token.FUNCTION)) {\n+  return true;\n+} else if (parentType == Token.RETURN) {\n+  Node greatGrandParent = grandParent.getParent();\n+  if (greatGrandParent == null) {\n+    return false;\n+  }\n+  int greatGrandParentType = greatGrandParent.getType();\n+  return greatGrandParentType == Token.FUNCTION || (greatGrandParentType == Token.BLOCK &&\n+         greatGrandParent.getParent() != null && greatGrandParent.getParent().getType() == Token.FUNCTION);\n+}\n+return false;\n   }\n \n   /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}