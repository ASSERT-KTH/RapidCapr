{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  Node parent = n.getParent();\n\n  if (isAssignmentTarget(n)) {\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here.\n    return n;\n  }\n\n  if (left.isArrayLit() || left.isObjectLit()) {\n    // Do not attempt to fold access to array/object literals.\n    return n;\n  }\n\n  if (!right.isNumber()) {\n    // Expression is not a number.\n    return n;\n  }\n\n  int index = (int) right.getDouble();\n\n  if (left.isString() && (index < 0 || index >= left.getString().length())) {\n    // If left is a string and the value is out-of-bounds, report an error.\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  } else if (index < 0 || index >= left.getChildCount()) {\n    // If left is an array and the value is out-of-bounds, report an error.\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  Node elem;\n  if (left.isString()) {\n    // If left is a string and the value is valid, get the character as a substring.\n    elem = Node.newString(left.getString().substring(index, index+1));\n  } else {\n    // If left is an array and the value is valid, get the element at the specified index.\n    elem = left.getChildAtIndex(index);\n  }\n\n  if (elem.isEmpty()) {\n    // An empty element becomes \"undefined\".\n    elem = NodeUtil.newUndefinedNode(elem);\n  } else {\n    // Remove the folded element from its parent.\n    left.removeChild(elem);\n  }\n\n  // Replace the entire GETELEM with the folded element.\n  parent.replaceChild(n, elem);\n  reportCodeChange();\n  return elem;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..5cd5b7a3 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,58 +1419,60 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-    if (isAssignmentTarget(n)) {\n-      return n;\n-    }\n-\n-    if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n-    }\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+  Node parent = n.getParent();\n \n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n+  if (isAssignmentTarget(n)) {\n+    // If GETPROP/GETELEM is used as assignment target the array literal is\n+    // acting as a temporary we can't fold it here.\n+    return n;\n+  }\n \n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n+  if (left.isArrayLit() || left.isObjectLit()) {\n+    // Do not attempt to fold access to array/object literals.\n+    return n;\n+  }\n \n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n+  if (!right.isNumber()) {\n+    // Expression is not a number.\n+    return n;\n+  }\n \n-      current = current.getNext();\n-    }\n+  int index = (int) right.getDouble();\n \n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n+  if (left.isString() && (index < 0 || index >= left.getString().length())) {\n+    // If left is a string and the value is out-of-bounds, report an error.\n+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    return n;\n+  } else if (index < 0 || index >= left.getChildCount()) {\n+    // If left is an array and the value is out-of-bounds, report an error.\n+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    return n;\n+  }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n-    }\n+  Node elem;\n+  if (left.isString()) {\n+    // If left is a string and the value is valid, get the character as a substring.\n+    elem = Node.newString(left.getString().substring(index, index+1));\n+  } else {\n+    // If left is an array and the value is valid, get the element at the specified index.\n+    elem = left.getChildAtIndex(index);\n+  }\n \n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n+  if (elem.isEmpty()) {\n+    // An empty element becomes \"undefined\".\n+    elem = NodeUtil.newUndefinedNode(elem);\n+  } else {\n+    // Remove the folded element from its parent.\n+    left.removeChild(elem);\n   }\n \n+  // Replace the entire GETELEM with the folded element.\n+  parent.replaceChild(n, elem);\n+  reportCodeChange();\n+  return elem;\n+}\n+\n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));\n ",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}