{
    "patch": "public double getTypedPercent(String jsonStr) {\n    double countTyped = 0.0;\n    double countTotal = 0.0;\n    try {\n        JSONArray jsonArray = new JSONArray(jsonStr);\n        for(int i = 0 ; i < jsonArray.length() ; i++) {\n            JSONObject obj = jsonArray.optJSONObject(i);\n            if(obj == null) {\n                continue;\n            }\n            String type = obj.optString(\"type\", \"\");\n            if(!type.isEmpty()) {\n                countTotal++;\n                if(type.equals(\"typed\")) {\n                    countTyped++;\n                } \n            }\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n    if(countTotal == 0.0) {\n        return 0.0;\n    } else {\n        return (countTyped / countTotal) * 100;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..d5feb2ff 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,34 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String jsonStr) {\n+    double countTyped = 0.0;\n+    double countTotal = 0.0;\n+    try {\n+        JSONArray jsonArray = new JSONArray(jsonStr);\n+        for(int i = 0 ; i < jsonArray.length() ; i++) {\n+            JSONObject obj = jsonArray.optJSONObject(i);\n+            if(obj == null) {\n+                continue;\n+            }\n+            String type = obj.optString(\"type\", \"\");\n+            if(!type.isEmpty()) {\n+                countTotal++;\n+                if(type.equals(\"typed\")) {\n+                    countTyped++;\n+                } \n+            }\n+        }\n+    } catch (Exception e) {\n+        e.printStackTrace();\n+    }\n+\n+    if(countTotal == 0.0) {\n+        return 0.0;\n+    } else {\n+        return (countTyped / countTotal) * 100;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}