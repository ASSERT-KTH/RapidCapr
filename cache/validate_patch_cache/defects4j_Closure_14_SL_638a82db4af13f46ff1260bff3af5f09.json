{
    "patch": "if (parent.getLastChild() == node) {\n  if (cfa != null) {\n    for (Node finallyNode : cfa.finallyMap.get(parent)) {\n      cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n    }\n  }\n  return computeFollowNode(fromNode, parent, cfa);\n} else if (NodeUtil.isJumpStatement(node)) {\n  if (parent.isTry()) {\n    Node finallyBlock = NodeUtil.getFinallyBlock(parent);\n    if (finallyBlock != null) {\n      finallyBlock = finallyBlock.getFirstChild();\n      if (finallyBlock.hasChildren()) {\n        Node afterFinally = finallyBlock.getFirstChild();\n        // Skip empty blocks (e.g var f = function() {try { something(); } finally {} }).\n        if (afterFinally != null) {\n          return afterFinally;\n        }\n      }\n    }\n  }\n  return null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..56dafe70 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,29 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (parent.getLastChild() == node) {\n+  if (cfa != null) {\n+    for (Node finallyNode : cfa.finallyMap.get(parent)) {\n+      cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+    }\n+  }\n+  return computeFollowNode(fromNode, parent, cfa);\n+} else if (NodeUtil.isJumpStatement(node)) {\n+  if (parent.isTry()) {\n+    Node finallyBlock = NodeUtil.getFinallyBlock(parent);\n+    if (finallyBlock != null) {\n+      finallyBlock = finallyBlock.getFirstChild();\n+      if (finallyBlock.hasChildren()) {\n+        Node afterFinally = finallyBlock.getFirstChild();\n+        // Skip empty blocks (e.g var f = function() {try { something(); } finally {} }).\n+        if (afterFinally != null) {\n+          return afterFinally;\n+        }\n+      }\n+    }\n+  }\n+  return null;\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: variable finallyNode is already defined in method computeFollowNode(Node,Node,ControlFlowAnalysis)",
    "test_result": "ERROR"
}