{
    "patch": "            while (true) {\n                try {\n                    break;\n                } catch (IllegalFieldValueException e) {\n                    if (++i >= count) {\n                        if (text != null) {\n                            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                        }\n                        throw e;\n                    }\n                    SavedField save = savedFields[i];\n                    DateTimeField field = save.iField;\n                    DurationField len = field.getDurationField();\n                    int value = len.getFieldType() == DurationFieldType.days() ? 1 : 0;\n                    saveField(field.getType(), value);\n                    save.setValue(field, value, millis);\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..54b85db9 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,24 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            while (true) {\n+                try {\n+                    break;\n+                } catch (IllegalFieldValueException e) {\n+                    if (++i >= count) {\n+                        if (text != null) {\n+                            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                        }\n+                        throw e;\n+                    }\n+                    SavedField save = savedFields[i];\n+                    DateTimeField field = save.iField;\n+                    DurationField len = field.getDurationField();\n+                    int value = len.getFieldType() == DurationFieldType.days() ? 1 : 0;\n+                    saveField(field.getType(), value);\n+                    save.setValue(field, value, millis);\n+                }\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}