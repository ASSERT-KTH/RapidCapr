{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        if (NodeUtil.isExpressionNode(maybeExpr) &&\n                !NodeUtil.isFunctionExpression(maybeExpr) &&\n                maybeExpr.getType() != Token.OBJECTLIT &&\n                maybeExpr.getType() != Token.FUNCTION &&\n                maybeExpr.getType() != Token.REGEXP &&\n                !NodeUtil.mayHaveSideEffects(maybeExpr)) {\n            if (isParentExprStatement(n)) {\n                Node grandparent = n.getParent().getParent();\n                if (grandparent == null || !isGrandparentIfStatement(grandparent)) {\n                    if (!isFunctionCallApplyCall(n)) {\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n\nprivate static boolean isParentExprStatement(Node n) {\n    Node parent = n.getParent();\n    return parent != null && parent.getType() == Token.EXPR_RESULT && parent.getFirstChild() == n;\n}\n\nprivate static boolean isGrandparentIfStatement(Node n) {\n    return n != null && n.getType() == Token.IF && n.getChildCount() == 2 && n.getFirstChild().getNext() == n.getLastChild();\n}\n\nprivate static boolean isFunctionCallApplyCall(Node n) {\n    Node expr = n.getFirstChild();\n    if (expr.isCall()) {\n        Node callChild = expr.getFirstChild();\n        if (callChild.isGetProp() && callChild.getLastChild().getString().equals(\"call\")) {\n            return true;\n        } else if (callChild.isName() && callChild.getString().equals(\"eval\")) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..2e682e14 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,49 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n+        if (NodeUtil.isExpressionNode(maybeExpr) &&\n+                !NodeUtil.isFunctionExpression(maybeExpr) &&\n+                maybeExpr.getType() != Token.OBJECTLIT &&\n+                maybeExpr.getType() != Token.FUNCTION &&\n+                maybeExpr.getType() != Token.REGEXP &&\n+                !NodeUtil.mayHaveSideEffects(maybeExpr)) {\n+            if (isParentExprStatement(n)) {\n+                Node grandparent = n.getParent().getParent();\n+                if (grandparent == null || !isGrandparentIfStatement(grandparent)) {\n+                    if (!isFunctionCallApplyCall(n)) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean isParentExprStatement(Node n) {\n+    Node parent = n.getParent();\n+    return parent != null && parent.getType() == Token.EXPR_RESULT && parent.getFirstChild() == n;\n+}\n \n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n+private static boolean isGrandparentIfStatement(Node n) {\n+    return n != null && n.getType() == Token.IF && n.getChildCount() == 2 && n.getFirstChild().getNext() == n.getLastChild();\n+}\n \n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+private static boolean isFunctionCallApplyCall(Node n) {\n+    Node expr = n.getFirstChild();\n+    if (expr.isCall()) {\n+        Node callChild = expr.getFirstChild();\n+        if (callChild.isGetProp() && callChild.getLastChild().getString().equals(\"call\")) {\n+            return true;\n+        } else if (callChild.isName() && callChild.getString().equals(\"eval\")) {\n+            return true;\n+        }\n     }\n-\n     return false;\n-  }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}