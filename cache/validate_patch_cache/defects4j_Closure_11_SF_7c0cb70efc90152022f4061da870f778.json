{
    "patch": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Properties;\n\npublic class MyClass {\n\n    public static String getProperty(String key) {\n        Properties props = new Properties();\n\n        try (InputStream inputStream = MyClass.class.getClassLoader().getResourceAsStream(\"my_properties.properties\")) {\n            props.load(inputStream);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        return props.getProperty(key);\n    }\n\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..a7dc67ac 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Properties;\n+\n+public class MyClass {\n+\n+    public static String getProperty(String key) {\n+        Properties props = new Properties();\n+\n+        try (InputStream inputStream = MyClass.class.getClassLoader().getResourceAsStream(\"my_properties.properties\")) {\n+            props.load(inputStream);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+        return props.getProperty(key);\n+    }\n+\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}