{
    "patch": "public class IRFactory {\n\n    public static class TransformDispatcher implements NodeVisitor<Node> {\n\n        private final String sourceName;\n        private final ErrorReporter errorReporter;\n        private final RewriteJsx rewriteJsx;\n\n        public TransformDispatcher(String sourceName, ErrorReporter errorReporter, RewriteJsx rewriteJsx) {\n            this.sourceName = sourceName;\n            this.errorReporter = errorReporter;\n            this.rewriteJsx = rewriteJsx;\n        }\n\n        @Override\n        public Node visit(AstNode node) {\n            throw new UnsupportedOperationException(node.getClass().getCanonicalName());\n        }\n\n        private Node newNode(int type, AstNode... children) {\n            Node node = new Node(type);\n            for (AstNode child : children) {\n                if (child != null) {\n                    node.addChildToBack(transform(child));\n                }\n            }\n            return node;\n        }\n\n        private int transformTokenType(int tokenType) {\n            // Transform an ExpressionStatement into an Expression node if necessary.\n            switch (tokenType) {\n                case Token.EXPR_VOID:\n                    return Token.VOID;\n                case Token.EXPR_RESULT:\n                case Token.BLOCK:\n                    return Token.EXPR_RESULT;\n                case Token.EXPR_RESULT_VOID:\n                    return Token.EXPR_VOID;\n                case Token.IF:\n                    return Token.IF;\n                case Token.LOOP:\n                    return Token.LOOP;\n                case Token.FUNCTION:\n                    return Token.FUNCTION;\n                case Token.SCRIPT:\n                    return Token.SCRIPT;\n                case Token.VAR:\n                case Token.LET:\n                case Token.CONST:\n                    return Token.VAR;\n                case Token.RETURN:\n                    return Token.RETURN;\n                default:\n                    throw new AssertionError(tokenType);\n            }\n        }\n\n        private Node transform(AstNode node) {\n            if (node == null) {\n                return null;\n            }\n            return node.visit(this);\n        }\n\n        private Node transformBlock(Block block) {\n            if (block == null) {\n                return null;\n            }\n            return visit(block);\n        }\n\n        @Override\n        public Node visitArrayComprehension(ArrayComprehension node) {\n            throw new UnsupportedOperationException(\"ArrayComprehension\");\n        }\n\n        @Override\n        public Node visitArrayComprehensionLoop(ArrayComprehensionLoop node) {\n            throw new UnsupportedOperationException(\"ArrayComprehensionLoop\");\n        }\n\n        @Override\n        public Node visitArrayLiteral(ArrayLiteral node) {\n            Node result = newNode(Token.ARRAYLIT, node.getElements());\n            if (node.isDestructuring()) {\n                result.putIntProp(Node.DESTRUCTURING_ARRAY_LENGTH_PROP, node.getDestructuringLength());\n            }\n            result.setLineno(node.getLineno());\n            return result;\n        }\n\n        @Override\n        public Node visitAstRoot(AstRoot node) {\n            return newNode(Token.SCRIPT, transformBlock(node));\n        }\n\n        @Override\n        public Node visitBlock(Block block) {\n            Node result = newNode(Token.BLOCK, block.getLineno(), block.getCharno(), transform((AstNode) block));\n            result.putProp(Node.ORIG_BLOCK_COMMENT_PROP, block.getInlineComment());\n            result.setIsScopeBlock(block.isScope());\n            return result;\n        }\n\n        @Override\n        public Node visitBreakStatement(BreakStatement node) {\n            Node result = newNode(Token.BREAK);\n            if (node.getBreakLabel() != null) {\n                Node labelNode = transform(node.getBreakLabel());\n                labelNode.setType(Token.LABEL_NAME);\n                result.addChildToBack(labelNode);\n            }\n            result.setLineno(node.getLineno());\n            result.setCharno(node.getCharno());\n            return result;\n        }\n\n        @Override\n        public Node visitCatchClause(CatchClause node) {\n            AstNode varName = node.getVarName();\n            Node result = newNode(Token.CATCH, transform(varName), transformBlock(node));\n            if (node.getCatchCondition() != null) {\n                errorReporter.error(\n                        \"Catch guards are not supported.\",\n                        sourceName,\n                        node.getCatchCondition().getLineno(), \"\", 0);\n            }\n            result.setLineno(node.getLineno());\n            result.setCharno(node.getCharno());\n            return result;\n        }\n\n        @Override\n        public Node visitComment(Comment node) {\n            Node result = new Node(Token.EMPTY);\n            result.setJsDoc(node.getValue());\n            result.setLineno(node.getLineno());\n            result.setCharno(node.getCharno());\n            return result;\n        }\n\n        @Override\n        public Node visitConditionalExpression(ConditionalExpression node) {\n            Node result = newNode(Token.HOOK, transform(node.getTestExpression()),\n                    transform(node.getTrueExpression()), transform(node.getFalseExpression()));\n            result.setLineno(node.getLineno());\n            result.setCharno(node.getCharno());\n            return result;\n        }\n\n        @Override\n        public Node visitContinueStatement(ContinueStatement node) {\n            Node result = newNode(Token.CONTINUE);\n            if (node.getLabel() != null) {\n                Node labelNode = transform(node.getLabel());\n                labelNode.setType(Token.LABEL_NAME);\n                result.addChildToBack(labelNode);\n            }\n            result.setLineno(node.getLineno());\n            result.setCharno(node.getCharno());\n            return result;\n        }\n\n        @Override\n        public Node visitDoLoop(DoLoop node) {\n            Node result = newNode(Token.DO, transformBlock(node.getBody()),\n                    transform(node.getCondition()));\n            result.setLineno(node.getLineno());\n            result.setCharno(node.getCharno());\n            return result;\n        }\n\n        @Override\n        public Node visitElementGet(ElementGet node) {\n            Node result = newNode(Token.GETELEM, transform(node.getTarget()),\n                    transform(node.getElement()));\n            result.setLineno(node.getLineno());\n            result.setCharno(node.getCharno());\n            return result;\n        }\n\n        @Override\n        public Node visitEmptyExpression(EmptyExpression node) {\n            return newNode(Token.EMPTY);\n        }\n\n        @Override\n        public Node visitExpressionStatement(ExpressionStatement node) {\n            Node result = newNode(transformTokenType(node.getType()), transform(node.getExpression()));\n            result.setLineno(node.getLineno());\n            result.setCharno(node.getCharno());\n            return result;\n        }\n\n        @Override\n        public Node visitForInLoop(ForInLoop node) {\n            Node result = newNode(Token.FOR_IN, transform(node.getIterator()),\n                    transform(node.getIteratedObject()), transformBlock(node.getBody()));\n            result.setLineno(node.getLineno());\n            result.setCharno(node.getCharno());\n            return result;\n        }\n\n        @Override\n        public Node visitForLoop(ForLoop node) {\n            Node result = newNode(Token.FOR, transform(node.getInitializer()),\n                    transform(node.getCondition()), transform(node.getIncrement()), transformBlock(node.getBody()));\n            result.setLineno(node.getLineno());\n            result.setCharno(node.getCharno());\n            return result;\n        }\n\n        @Override\n        public Node visitFunctionCall(FunctionCall node) {\n            Node result = newNode(Token.CALL, transform(node.getTarget()), transform(node.getArguments()));\n            result.setLineno(node.getLineno());\n            result.setCharno(node.getCharno());\n            return result;\n        }\n\n        @Override\n        public Node visitFunctionNode(FunctionNode node) {\n            Node result = newNode(Token.FUNCTION);\n            result.setIsExpression(node.getFunctionType() == FunctionNode.FUNCTION_EXPRESSION);\n            if (node.getFunctionName() != null) {\n                if (node.getFunctionName().length() != 0) {\n                    Node name = new Node(Token.NAME, node.getFunctionName());\n                    name.setLineno(node.getLineno());\n                    result.addChildToBack(name);\n                }\n            }\n            result.addChildToBack(newNode(Token.LP, (AstNode) null));\n            result.addChildToBack(transform(node.getParams()));\n            result.addChildToBack(newNode(Token.RP, (AstNode) null));\n            result.addChildToBack(transformBlock(node.getBody()));\n            result.setLp(node.getLp());\n            result.setRp(node.getRp());\n            result.setSourceName(sourceName);\n            result.setLength(node.getLength());\n            result.setEncodedSourceStart(node.getEncodedSourceStart());\n            result.setEncodedSourceEnd(node.getEncodedSourceEnd());\n            result.setLineno(node.getLineno());\n            result.setCharno(node.getCharno());\n            return result;\n        }\n\n        @Override\n        public Node visitGeneratorExpression(GeneratorExpression node) {\n            throw new UnsupportedOperationException(\"GeneratorExpression\");\n        }\n\n        @Override\n        public Node visitGetProp(GetProp node) {\n            Node result = newNode(Token.GETPROP, transform(node.getTarget()), new Node(Token.STRING,\n                    node.getProperty()));\n            result.setLineno(node.getLineno());\n            result.setCharno(node.getCharno());\n            return result;\n        }\n\n        @Override\n        public Node visitIfStatement(IfStatement node) {\n            Node result = newNode(Token.IF, transform(node.getCondition()),\n                    transformBlock(node.getThenPart()), transformBlock(node.getElsePart()));\n            result.setLineno(node.getLineno());\n            result.setCharno(node.getCharno());\n            return result;\n        }\n\n        @Override\n        public Node visitInfixExpression(InfixExpression node) {\n            Node result = newNode(node.getType(), transform(node.getLeft()), transform(node.getRight()));\n            result.setLineno(node.getLineno());\n            result.setCharno(node.getCharno());\n            return result;\n        }\n\n        @Override\n        public Node visitKeywordLiteral(KeywordLiteral node) {\n            return new Node(node.getType(), node.getValue());\n        }\n\n        @Override\n        public Node visitLabel(Label node) {\n            Node result = newNode(Token.LABEL, transform(node.getStatement()), new Node(Token.NAME, node.getName()));\n            result.setLineno(node.getLineno());\n            result.setCharno(node.getCharno());\n            return result;\n        }\n\n        @Override\n        public Node visitLabeledStatement(LabeledStatement node) {\n            node.getStatement().setLineno(node.getLineno());\n            node.getStatement().setCharno(node.getCharno());\n            return transform(node.getStatement());\n        }\n\n        @Override\n        public Node visitLetNode(LetNode node) {\n            throw new UnsupportedOperationException(\"LetNode\");\n        }\n\n        @Override\n        public Node visitName(Name node) {\n            Node result = new Node(Token.NAME, node.getIdentifier());\n            result.setLineno(node.getLineno());\n            result.setCharno(node.getCharno());\n            return result;\n        }\n\n        @Override\n        public Node visitNewExpression(NewExpression node) {\n            Node result = newNode(Token.NEW, transform(node.getTarget()), transform(node.getArguments()));\n            result.setLineno(node.getLineno());\n            result.setCharno(node.getCharno());\n            return result;\n        }\n\n        @Override\n        public Node visitNumberLiteral(NumberLiteral node) {\n            Node result = new Node(node.getType(), node.getNumber());\n            result.setLineno(node.getLineno());\n            result.setCharno(node.getCharno());\n            return result;\n        }\n\n        @Override\n        public Node visitObjectLiteral(ObjectLiteral node) {\n            Node result = new Node(Token.OBJECTLIT);\n            for ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..04c6e64a 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,106 +473,337 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+public class IRFactory {\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n+    public static class TransformDispatcher implements NodeVisitor<Node> {\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n+        private final String sourceName;\n+        private final ErrorReporter errorReporter;\n+        private final RewriteJsx rewriteJsx;\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n+        public TransformDispatcher(String sourceName, ErrorReporter errorReporter, RewriteJsx rewriteJsx) {\n+            this.sourceName = sourceName;\n+            this.errorReporter = errorReporter;\n+            this.rewriteJsx = rewriteJsx;\n+        }\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n+        @Override\n+        public Node visit(AstNode node) {\n+            throw new UnsupportedOperationException(node.getClass().getCanonicalName());\n+        }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n+        private Node newNode(int type, AstNode... children) {\n+            Node node = new Node(type);\n+            for (AstNode child : children) {\n+                if (child != null) {\n+                    node.addChildToBack(transform(child));\n+                }\n+            }\n+            return node;\n+        }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n+        private int transformTokenType(int tokenType) {\n+            // Transform an ExpressionStatement into an Expression node if necessary.\n+            switch (tokenType) {\n+                case Token.EXPR_VOID:\n+                    return Token.VOID;\n+                case Token.EXPR_RESULT:\n+                case Token.BLOCK:\n+                    return Token.EXPR_RESULT;\n+                case Token.EXPR_RESULT_VOID:\n+                    return Token.EXPR_VOID;\n+                case Token.IF:\n+                    return Token.IF;\n+                case Token.LOOP:\n+                    return Token.LOOP;\n+                case Token.FUNCTION:\n+                    return Token.FUNCTION;\n+                case Token.SCRIPT:\n+                    return Token.SCRIPT;\n+                case Token.VAR:\n+                case Token.LET:\n+                case Token.CONST:\n+                    return Token.VAR;\n+                case Token.RETURN:\n+                    return Token.RETURN;\n+                default:\n+                    throw new AssertionError(tokenType);\n+            }\n+        }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n+        private Node transform(AstNode node) {\n+            if (node == null) {\n+                return null;\n+            }\n+            return node.visit(this);\n+        }\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n+        private Node transformBlock(Block block) {\n+            if (block == null) {\n+                return null;\n+            }\n+            return visit(block);\n+        }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n+        @Override\n+        public Node visitArrayComprehension(ArrayComprehension node) {\n+            throw new UnsupportedOperationException(\"ArrayComprehension\");\n+        }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n+        @Override\n+        public Node visitArrayComprehensionLoop(ArrayComprehensionLoop node) {\n+            throw new UnsupportedOperationException(\"ArrayComprehensionLoop\");\n+        }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n+        @Override\n+        public Node visitArrayLiteral(ArrayLiteral node) {\n+            Node result = newNode(Token.ARRAYLIT, node.getElements());\n+            if (node.isDestructuring()) {\n+                result.putIntProp(Node.DESTRUCTURING_ARRAY_LENGTH_PROP, node.getDestructuringLength());\n+            }\n+            result.setLineno(node.getLineno());\n+            return result;\n+        }\n \n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n+        @Override\n+        public Node visitAstRoot(AstRoot node) {\n+            return newNode(Token.SCRIPT, transformBlock(node));\n+        }\n+\n+        @Override\n+        public Node visitBlock(Block block) {\n+            Node result = newNode(Token.BLOCK, block.getLineno(), block.getCharno(), transform((AstNode) block));\n+            result.putProp(Node.ORIG_BLOCK_COMMENT_PROP, block.getInlineComment());\n+            result.setIsScopeBlock(block.isScope());\n+            return result;\n+        }\n+\n+        @Override\n+        public Node visitBreakStatement(BreakStatement node) {\n+            Node result = newNode(Token.BREAK);\n+            if (node.getBreakLabel() != null) {\n+                Node labelNode = transform(node.getBreakLabel());\n+                labelNode.setType(Token.LABEL_NAME);\n+                result.addChildToBack(labelNode);\n+            }\n+            result.setLineno(node.getLineno());\n+            result.setCharno(node.getCharno());\n+            return result;\n+        }\n+\n+        @Override\n+        public Node visitCatchClause(CatchClause node) {\n+            AstNode varName = node.getVarName();\n+            Node result = newNode(Token.CATCH, transform(varName), transformBlock(node));\n+            if (node.getCatchCondition() != null) {\n+                errorReporter.error(\n+                        \"Catch guards are not supported.\",\n+                        sourceName,\n+                        node.getCatchCondition().getLineno(), \"\", 0);\n+            }\n+            result.setLineno(node.getLineno());\n+            result.setCharno(node.getCharno());\n+            return result;\n+        }\n+\n+        @Override\n+        public Node visitComment(Comment node) {\n+            Node result = new Node(Token.EMPTY);\n+            result.setJsDoc(node.getValue());\n+            result.setLineno(node.getLineno());\n+            result.setCharno(node.getCharno());\n+            return result;\n+        }\n+\n+        @Override\n+        public Node visitConditionalExpression(ConditionalExpression node) {\n+            Node result = newNode(Token.HOOK, transform(node.getTestExpression()),\n+                    transform(node.getTrueExpression()), transform(node.getFalseExpression()));\n+            result.setLineno(node.getLineno());\n+            result.setCharno(node.getCharno());\n+            return result;\n+        }\n+\n+        @Override\n+        public Node visitContinueStatement(ContinueStatement node) {\n+            Node result = newNode(Token.CONTINUE);\n+            if (node.getLabel() != null) {\n+                Node labelNode = transform(node.getLabel());\n+                labelNode.setType(Token.LABEL_NAME);\n+                result.addChildToBack(labelNode);\n+            }\n+            result.setLineno(node.getLineno());\n+            result.setCharno(node.getCharno());\n+            return result;\n+        }\n+\n+        @Override\n+        public Node visitDoLoop(DoLoop node) {\n+            Node result = newNode(Token.DO, transformBlock(node.getBody()),\n+                    transform(node.getCondition()));\n+            result.setLineno(node.getLineno());\n+            result.setCharno(node.getCharno());\n+            return result;\n+        }\n+\n+        @Override\n+        public Node visitElementGet(ElementGet node) {\n+            Node result = newNode(Token.GETELEM, transform(node.getTarget()),\n+                    transform(node.getElement()));\n+            result.setLineno(node.getLineno());\n+            result.setCharno(node.getCharno());\n+            return result;\n+        }\n+\n+        @Override\n+        public Node visitEmptyExpression(EmptyExpression node) {\n+            return newNode(Token.EMPTY);\n+        }\n+\n+        @Override\n+        public Node visitExpressionStatement(ExpressionStatement node) {\n+            Node result = newNode(transformTokenType(node.getType()), transform(node.getExpression()));\n+            result.setLineno(node.getLineno());\n+            result.setCharno(node.getCharno());\n+            return result;\n+        }\n+\n+        @Override\n+        public Node visitForInLoop(ForInLoop node) {\n+            Node result = newNode(Token.FOR_IN, transform(node.getIterator()),\n+                    transform(node.getIteratedObject()), transformBlock(node.getBody()));\n+            result.setLineno(node.getLineno());\n+            result.setCharno(node.getCharno());\n+            return result;\n+        }\n+\n+        @Override\n+        public Node visitForLoop(ForLoop node) {\n+            Node result = newNode(Token.FOR, transform(node.getInitializer()),\n+                    transform(node.getCondition()), transform(node.getIncrement()), transformBlock(node.getBody()));\n+            result.setLineno(node.getLineno());\n+            result.setCharno(node.getCharno());\n+            return result;\n+        }\n+\n+        @Override\n+        public Node visitFunctionCall(FunctionCall node) {\n+            Node result = newNode(Token.CALL, transform(node.getTarget()), transform(node.getArguments()));\n+            result.setLineno(node.getLineno());\n+            result.setCharno(node.getCharno());\n+            return result;\n+        }\n+\n+        @Override\n+        public Node visitFunctionNode(FunctionNode node) {\n+            Node result = newNode(Token.FUNCTION);\n+            result.setIsExpression(node.getFunctionType() == FunctionNode.FUNCTION_EXPRESSION);\n+            if (node.getFunctionName() != null) {\n+                if (node.getFunctionName().length() != 0) {\n+                    Node name = new Node(Token.NAME, node.getFunctionName());\n+                    name.setLineno(node.getLineno());\n+                    result.addChildToBack(name);\n+                }\n+            }\n+            result.addChildToBack(newNode(Token.LP, (AstNode) null));\n+            result.addChildToBack(transform(node.getParams()));\n+            result.addChildToBack(newNode(Token.RP, (AstNode) null));\n+            result.addChildToBack(transformBlock(node.getBody()));\n+            result.setLp(node.getLp());\n+            result.setRp(node.getRp());\n+            result.setSourceName(sourceName);\n+            result.setLength(node.getLength());\n+            result.setEncodedSourceStart(node.getEncodedSourceStart());\n+            result.setEncodedSourceEnd(node.getEncodedSourceEnd());\n+            result.setLineno(node.getLineno());\n+            result.setCharno(node.getCharno());\n+            return result;\n+        }\n+\n+        @Override\n+        public Node visitGeneratorExpression(GeneratorExpression node) {\n+            throw new UnsupportedOperationException(\"GeneratorExpression\");\n+        }\n+\n+        @Override\n+        public Node visitGetProp(GetProp node) {\n+            Node result = newNode(Token.GETPROP, transform(node.getTarget()), new Node(Token.STRING,\n+                    node.getProperty()));\n+            result.setLineno(node.getLineno());\n+            result.setCharno(node.getCharno());\n+            return result;\n+        }\n+\n+        @Override\n+        public Node visitIfStatement(IfStatement node) {\n+            Node result = newNode(Token.IF, transform(node.getCondition()),\n+                    transformBlock(node.getThenPart()), transformBlock(node.getElsePart()));\n+            result.setLineno(node.getLineno());\n+            result.setCharno(node.getCharno());\n+            return result;\n+        }\n+\n+        @Override\n+        public Node visitInfixExpression(InfixExpression node) {\n+            Node result = newNode(node.getType(), transform(node.getLeft()), transform(node.getRight()));\n+            result.setLineno(node.getLineno());\n+            result.setCharno(node.getCharno());\n+            return result;\n+        }\n+\n+        @Override\n+        public Node visitKeywordLiteral(KeywordLiteral node) {\n+            return new Node(node.getType(), node.getValue());\n+        }\n+\n+        @Override\n+        public Node visitLabel(Label node) {\n+            Node result = newNode(Token.LABEL, transform(node.getStatement()), new Node(Token.NAME, node.getName()));\n+            result.setLineno(node.getLineno());\n+            result.setCharno(node.getCharno());\n+            return result;\n+        }\n+\n+        @Override\n+        public Node visitLabeledStatement(LabeledStatement node) {\n+            node.getStatement().setLineno(node.getLineno());\n+            node.getStatement().setCharno(node.getCharno());\n+            return transform(node.getStatement());\n+        }\n+\n+        @Override\n+        public Node visitLetNode(LetNode node) {\n+            throw new UnsupportedOperationException(\"LetNode\");\n+        }\n+\n+        @Override\n+        public Node visitName(Name node) {\n+            Node result = new Node(Token.NAME, node.getIdentifier());\n+            result.setLineno(node.getLineno());\n+            result.setCharno(node.getCharno());\n+            return result;\n+        }\n+\n+        @Override\n+        public Node visitNewExpression(NewExpression node) {\n+            Node result = newNode(Token.NEW, transform(node.getTarget()), transform(node.getArguments()));\n+            result.setLineno(node.getLineno());\n+            result.setCharno(node.getCharno());\n+            return result;\n+        }\n+\n+        @Override\n+        public Node visitNumberLiteral(NumberLiteral node) {\n+            Node result = new Node(node.getType(), node.getNumber());\n+            result.setLineno(node.getLineno());\n+            result.setCharno(node.getCharno());\n+            return result;\n+        }\n+\n+        @Override\n+        public Node visitObjectLiteral(ObjectLiteral node) {\n+            Node result = new Node(Token.OBJECTLIT);\n+            for \n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: '(' expected",
    "test_result": "ERROR"
}