{
    "patch": "  public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (parent.getType() == Token.COMMA) {\n      Node gramps = parent.getParent();\n      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n          return;\n        }\n      }\n\n      // Check if this is the first child of a COMMA in a VAR statement.\n      Node greatGramps = gramps.getParent();\n      if ((greatGramps == null) || !greatGramps.isVar()) {\n        return;\n      }\n      if (parent == gramps.getFirstChild()) {\n        // This is the first variable.\n        // sub-expression that initializes this variable.\n        Node grandGramps = greatGramps.getParent();\n        if ((grandGramps != null) && grandGramps.isExprResult()) {\n          Node expr = grandGramps.getFirstChild();\n          while (expr.isCast()) {\n            expr = expr.getFirstChild();\n          }\n          if (expr.isAssign()) {\n            // Change expr type to VAR so that it isn't reported again.\n            expr.setType(Token.VAR);\n          } else if (expr.isName()) {\n            // Mark the VAR as a VAR that initializes to 'undefined'\n            parent.putBooleanProp(Node.IS_NAMESPACE, false);\n          }\n        }\n      }\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n == parent.getLastChild()) {\n      for (Node an : parent.getAncestors()) {\n        int ancestorType = an.getType();\n        if (ancestorType == Token.COMMA)\n          continue;\n        if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n          return;\n        else\n          break;\n      }\n    } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4 &&\n        (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {\n      // We are visiting the left or right child of the FOR.\n      // If this is a FOR-IN loop and we are visiting the right child,\n      // then this node is the object over which we're iterating,and it's OK\n      // if it doesn't appear to be used.\n      if (parent.getFirstChild().getType() != Token.FOR_IN) {\n        // Otherwise, if this a FOR loop (not a for-in loop), then we should\n        // check whether the left child is actually used. If it's not, but there is a\n        // third child (the increment expression), and that third child is also not used,\n        // then this loop is bogus, and we should warn about it.\n        Node leftChild = parent.getFirstChild();\n        if (leftChild == n && !NodeUtil.isExpressionResultUsed(n)) {\n          boolean rightChildIsUsed = NodeUtil.isExpressionResultUsed(leftChild.getNext().getNext());\n          boolean incrementExrIsUsed = NodeUtil.isExpressionResultUsed(leftChild.getNext().getNext().getNext());\n          if (!rightChildIsUsed && !incrementExrIsUsed) {\n            t.getCompiler().report(t.makeError(leftChild, level, USELESS_CODE_ERROR,\n                \"This FOR statement doesn't loop and has no side-effects. \"\n                + \"Are you using it correctly?\"));\n          }\n        }\n      }\n      return;\n    } else if (parent.getType() != Token.EXPR_RESULT &&\n               parent.getType() != Token.BLOCK) {\n      return;\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (!isResultUsed &&\n        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n        return;\n      } else if (n.isExprResult()) {\n        return;\n      }\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      // TODO(johnlenz): determine if it is necessary to\n      // try to protect side-effect free statements as well.\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex b9aa412c..d0de6e08 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -102,29 +102,73 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n       Node gramps = parent.getParent();\n       if (gramps.isCall() && parent == gramps.getFirstChild()) {\n         if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n-      return;\n+          return;\n+        }\n+      }\n+\n+      // Check if this is the first child of a COMMA in a VAR statement.\n+      Node greatGramps = gramps.getParent();\n+      if ((greatGramps == null) || !greatGramps.isVar()) {\n+        return;\n+      }\n+      if (parent == gramps.getFirstChild()) {\n+        // This is the first variable.\n+        // sub-expression that initializes this variable.\n+        Node grandGramps = greatGramps.getParent();\n+        if ((grandGramps != null) && grandGramps.isExprResult()) {\n+          Node expr = grandGramps.getFirstChild();\n+          while (expr.isCast()) {\n+            expr = expr.getFirstChild();\n+          }\n+          if (expr.isAssign()) {\n+            // Change expr type to VAR so that it isn't reported again.\n+            expr.setType(Token.VAR);\n+          } else if (expr.isName()) {\n+            // Mark the VAR as a VAR that initializes to 'undefined'\n+            parent.putBooleanProp(Node.IS_NAMESPACE, false);\n+          }\n         }\n+      }\n     }\n \n     // This no-op statement was there so that JSDoc information could\n     // be attached to the name. This check should not complain about it.\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA)\n-            continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n-            return;\n-          else\n-            break;\n+    if (n == parent.getLastChild()) {\n+      for (Node an : parent.getAncestors()) {\n+        int ancestorType = an.getType();\n+        if (ancestorType == Token.COMMA)\n+          continue;\n+        if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n+          return;\n+        else\n+          break;\n+      }\n+    } else if (parent.getType() == Token.FOR && parent.getChildCount() == 4 &&\n+        (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {\n+      // We are visiting the left or right child of the FOR.\n+      // If this is a FOR-IN loop and we are visiting the right child,\n+      // then this node is the object over which we're iterating,and it's OK\n+      // if it doesn't appear to be used.\n+      if (parent.getFirstChild().getType() != Token.FOR_IN) {\n+        // Otherwise, if this a FOR loop (not a for-in loop), then we should\n+        // check whether the left child is actually used. If it's not, but there is a\n+        // third child (the increment expression), and that third child is also not used,\n+        // then this loop is bogus, and we should warn about it.\n+        Node leftChild = parent.getFirstChild();\n+        if (leftChild == n && !NodeUtil.isExpressionResultUsed(n)) {\n+          boolean rightChildIsUsed = NodeUtil.isExpressionResultUsed(leftChild.getNext().getNext());\n+          boolean incrementExrIsUsed = NodeUtil.isExpressionResultUsed(leftChild.getNext().getNext().getNext());\n+          if (!rightChildIsUsed && !incrementExrIsUsed) {\n+            t.getCompiler().report(t.makeError(leftChild, level, USELESS_CODE_ERROR,\n+                \"This FOR statement doesn't loop and has no side-effects. \"\n+                + \"Are you using it correctly?\"));\n+          }\n         }\n       }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n-           n == parent.getFirstChild().getNext().getNext())) {\n-      } else {\n       return;\n-      }\n+    } else if (parent.getType() != Token.EXPR_RESULT &&\n+               parent.getType() != Token.BLOCK) {\n+      return;\n     }\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}