{
    "patch": "import org.apache.commons.math3.special.Gamma;\n\npublic class GammaFunction {\n    \n    /**\n     * Compute the value of the incomplete gamma function P(a, x) using continued fractions\n     * @param a Shape parameter\n     * @param x Integration limit\n     * @param epsilon Determines accuracy of the computation\n     * @param maxIterations Determines maximum number of iterations\n     * @return The value of the incomplete gamma function P(a, x)\n     */\n    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n        if (a <= 0 || x < 0) {\n            throw new IllegalArgumentException(\"a must be > 0 and x must be >= 0\");\n        }\n        \n        // initialize variables\n        int i = 0;\n        double term = 1 / a;\n        double sum = term;\n        double err = term;\n        \n        while (i < maxIterations && Math.abs(term) > Math.abs(sum) * epsilon) {\n            i++;\n            term *= x / (a + i);\n            sum += term;\n            err = term / sum;\n        }\n        \n        return Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a)) * sum;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..0b7707c50 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,39 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+\n+public class GammaFunction {\n+    \n+    /**\n+     * Compute the value of the incomplete gamma function P(a, x) using continued fractions\n+     * @param a Shape parameter\n+     * @param x Integration limit\n+     * @param epsilon Determines accuracy of the computation\n+     * @param maxIterations Determines maximum number of iterations\n+     * @return The value of the incomplete gamma function P(a, x)\n+     */\n+    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n+        if (a <= 0 || x < 0) {\n+            throw new IllegalArgumentException(\"a must be > 0 and x must be >= 0\");\n+        }\n+        \n+        // initialize variables\n+        int i = 0;\n+        double term = 1 / a;\n+        double sum = term;\n+        double err = term;\n+        \n+        while (i < maxIterations && Math.abs(term) > Math.abs(sum) * epsilon) {\n+            i++;\n+            term *= x / (a + i);\n+            sum += term;\n+            err = term / sum;\n+        }\n+        \n+        return Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a)) * sum;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}