{
    "patch": "        } catch (IllegalFieldValueException e) {\n            if (resetFields) {\n                throw e;\n            }\n            // find field\n            boolean v = false;\n            for (int i = 0; i < count; i++) {\n                DateTimeField field = savedFields[i].iField;\n                if (field == e.getField()) {\n                    v = true;\n                    savedFields[i].set(0L, false);\n                    break;\n                }\n            }\n            if (!v) {\n                throw e;\n            }\n            return computeMillis(false, text);\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..8e374a9d 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,25 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        } catch (IllegalFieldValueException e) {\n+            if (resetFields) {\n+                throw e;\n+            }\n+            // find field\n+            boolean v = false;\n+            for (int i = 0; i < count; i++) {\n+                DateTimeField field = savedFields[i].iField;\n+                if (field == e.getField()) {\n+                    v = true;\n+                    savedFields[i].set(0L, false);\n+                    break;\n+                }\n+            }\n+            if (!v) {\n+                throw e;\n+            }\n+            return computeMillis(false, text);\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}