{
    "patch": "        boolean convertFields = (type != null) && (type.getFields() != null);\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        int years = getYears();\n        int months = getMonths();\n        if (convertFields) {\n            years = ISOChronology.getInstanceUTC().years().getDurationField()\n                    .getDifferenceAsInt(ISOChronology.getInstanceUTC().getDateTimeMillis(0L, this), ISOChronology.getInstanceUTC().getDateTimeMillis(millis, result));\n            months = ISOChronology.getInstanceUTC().months().getDurationField()\n                    .getDifferenceAsInt(ISOChronology.getInstanceUTC().getDateTimeMillis(0L, this), ISOChronology.getInstanceUTC().getDateTimeMillis(millis, result));\n        }\n        if (years != 0) {\n            result = result.withYears(years);\n        }\n        if (months != 0) {\n            result = result.withMonths(months);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..fc0ae78b 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,20 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+        boolean convertFields = (type != null) && (type.getFields() != null);\n         Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n         int years = getYears();\n         int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+        if (convertFields) {\n+            years = ISOChronology.getInstanceUTC().years().getDurationField()\n+                    .getDifferenceAsInt(ISOChronology.getInstanceUTC().getDateTimeMillis(0L, this), ISOChronology.getInstanceUTC().getDateTimeMillis(millis, result));\n+            months = ISOChronology.getInstanceUTC().months().getDurationField()\n+                    .getDifferenceAsInt(ISOChronology.getInstanceUTC().getDateTimeMillis(0L, this), ISOChronology.getInstanceUTC().getDateTimeMillis(millis, result));\n         }\n-        return result;\n-    }\n+        if (years != 0) {\n+            result = result.withYears(years);\n+        }\n+        if (months != 0) {\n+            result = result.withMonths(months);\n \n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}