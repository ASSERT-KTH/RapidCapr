{
    "patch": "public static double getTypedPercent(String typed, String text) {\n    String[] typedWords = typed.split(\"\\\\W+\");\n    // split text on non-word characters and filter out empty strings\n    String[] textWords = Arrays.stream(text.split(\"\\\\W+\")).filter(s->s.length()>0).toArray(String[]::new);\n    int correctCount = 0;\n    for (int i = 0; i < typedWords.length; i++) {\n        if (i < textWords.length && typedWords[i].equals(textWords[i])) {\n            correctCount++;\n        }    \n    }\n    return ((double) correctCount / textWords.length) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..938717f4 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String typed, String text) {\n+    String[] typedWords = typed.split(\"\\\\W+\");\n+    // split text on non-word characters and filter out empty strings\n+    String[] textWords = Arrays.stream(text.split(\"\\\\W+\")).filter(s->s.length()>0).toArray(String[]::new);\n+    int correctCount = 0;\n+    for (int i = 0; i < typedWords.length; i++) {\n+        if (i < textWords.length && typedWords[i].equals(textWords[i])) {\n+            correctCount++;\n+        }    \n+    }\n+    return ((double) correctCount / textWords.length) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}