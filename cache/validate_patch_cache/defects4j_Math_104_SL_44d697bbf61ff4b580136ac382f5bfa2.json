{
    "patch": "private static final double DEFAULT_EPSILON = 1e-9;\n\npublic static double regularizedGammaQ(double a, double x) {\n\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0 || x < 0) {\n        return Double.NaN;\n    }\n    if (x == Double.POSITIVE_INFINITY) {\n        return 0.0;\n    }\n    if (x < a + 1.0) {\n        return 1.0 - regularizedGammaP(a, x);\n    }\n    double[] frac = fraction(a, x, DEFAULT_EPSILON);\n    double p = frac[0] / frac[1];\n    double ga = Gamma.gamma(a);\n    double factor = Math.exp(-x + a * Math.log(x) - org.apache.commons.math3.util.FastMath.logGamma(a));\n    return factor * p * ga / a;\n\n}\n\ndouble x = 0.5;\ndouble a = 1.0;\ndouble expected = 0.632120558828558;\ndouble actualP = Gamma.regularizedGammaP(a, x);\nTestUtils.assertEquals(expected, actualP, DEFAULT_EPSILON);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bade3b581 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,7 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}