{
    "patch": "public static void main(String[] args) {\n        double x = 0.5;\n        double s = 1.5;\n        double expected = 0.632120558828558;\n        double actual = regularizedGammaP(x, s);\n        TestUtils.assertEquals(expected, actual, 10e-15);\n    }\n\npublic static double regularizedGammaP(double x, double s) {\n    if (x <= 0 || s <= 0) {\n        return Double.NaN;\n    }\n    if (x > (s + 1)) {\n        return 1 - regularizedGammaQ(s, x);\n    }\n    double sum = 1 / s;\n    double prev = sum;\n    double term = 1;\n    int n = 1;\n    while (Math.abs(sum - prev) > 10e-15) {\n        term *= (x / (s + n));\n        prev = sum;\n        sum += term;\n        n++;\n    }\n    return Math.exp(-x + (s * Math.log(x)) - logGamma(s)) * sum;\n}\n\npublic static double regularizedGammaQ(double x, double s) {\n    if (x <= 0 || s <= 0) {\n        return Double.NaN;\n    }\n    if (x < (s + 1)) {\n        return 1 - regularizedGammaP(s, x);\n    }\n    double sum = 1 / s;\n    double prev = sum;\n    double term = 1;\n    int n = 1;\n    while (Math.abs(sum - prev) > 10e-15) {\n        term *= (s + n - 1) / x;\n        prev = sum;\n        sum += term;\n        n++;\n    }\n    return Math.exp(-x + (s * Math.log(x)) - logGamma(s)) * sum;\n}\n\npublic static double logGamma(double x) {\n    double lngamma = 0;\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / x;\n    ser -= 86.50532033 / (x + 1);\n    ser += 24.01409822 / (x + 2);\n    ser -= 1.231739516 / (x + 3);\n    ser += 0.00120858003 / (x + 4);\n    ser -= 0.00000536382 / (x + 5);\n    lngamma = tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n    return lngamma;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..c6ed5a873 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,66 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static void main(String[] args) {\n+        double x = 0.5;\n+        double s = 1.5;\n+        double expected = 0.632120558828558;\n+        double actual = regularizedGammaP(x, s);\n+        TestUtils.assertEquals(expected, actual, 10e-15);\n+    }\n+\n+public static double regularizedGammaP(double x, double s) {\n+    if (x <= 0 || s <= 0) {\n+        return Double.NaN;\n+    }\n+    if (x > (s + 1)) {\n+        return 1 - regularizedGammaQ(s, x);\n+    }\n+    double sum = 1 / s;\n+    double prev = sum;\n+    double term = 1;\n+    int n = 1;\n+    while (Math.abs(sum - prev) > 10e-15) {\n+        term *= (x / (s + n));\n+        prev = sum;\n+        sum += term;\n+        n++;\n+    }\n+    return Math.exp(-x + (s * Math.log(x)) - logGamma(s)) * sum;\n+}\n+\n+public static double regularizedGammaQ(double x, double s) {\n+    if (x <= 0 || s <= 0) {\n+        return Double.NaN;\n+    }\n+    if (x < (s + 1)) {\n+        return 1 - regularizedGammaP(s, x);\n+    }\n+    double sum = 1 / s;\n+    double prev = sum;\n+    double term = 1;\n+    int n = 1;\n+    while (Math.abs(sum - prev) > 10e-15) {\n+        term *= (s + n - 1) / x;\n+        prev = sum;\n+        sum += term;\n+        n++;\n+    }\n+    return Math.exp(-x + (s * Math.log(x)) - logGamma(s)) * sum;\n+}\n+\n+public static double logGamma(double x) {\n+    double lngamma = 0;\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173 / x;\n+    ser -= 86.50532033 / (x + 1);\n+    ser += 24.01409822 / (x + 2);\n+    ser -= 1.231739516 / (x + 3);\n+    ser += 0.00120858003 / (x + 4);\n+    ser -= 0.00000536382 / (x + 5);\n+    lngamma = tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+    return lngamma;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}