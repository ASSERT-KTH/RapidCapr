{
    "patch": "/**\n * Returns the value corresponding to the given key if it exists in the cache, otherwise invokes the provided\n * loader function and caches the result before returning it.\n *\n * @param key the key to retrieve or load the value for\n * @param loader the function to invoke to load the value if it is not already cached\n * @param <T> the type of the value to load\n * @return the value corresponding to the given key\n */\npublic <T> T get(String key, Function<String, T> loader) {\n    CacheValue<T> cacheValue = cache.get(key);\n    if (cacheValue != null) {\n        return cacheValue.getValue();\n    } else {\n        T value = loader.apply(key);\n        CacheValue<T> newCacheValue = new CacheValue<>(value, System.currentTimeMillis());\n        cache.put(key, newCacheValue);\n        return value;\n    }\n}\n\n//Fallback implementation when the cache exceeds the maximum amout of elements allowed. \n@SuppressWarnings(\"unchecked\")\npublic <T> T returnValueFor(Class<T> clazz) {\n    if (Iterable.class.isAssignableFrom(clazz)) {\n        return (T) Collections.emptyList();\n    }\n    // Fix starts from here\n    if (Number.class.isAssignableFrom(clazz)) {\n        return (T) (Number) 0;\n    }\n    if (Boolean.class.isAssignableFrom(clazz)) {\n        return (T) false;\n    }\n    if (clazz.isAssignableFrom(Object.class)) {\n        return (T) new Object();\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}