{
    "patch": "        double[] params = fit(new Gaussian.Parametric(), guess);\n        if (params[0] <= 0) {\n            throw new NotStrictlyPositiveException(params[0]);\n        }\n        double[] errors = computeError(params);\n        while (errors[0] > convergenceThreshold || errors[1] > convergenceThreshold) {\n            guess[0] = params[0];\n            guess[1] = params[1];\n            params = fit(new Gaussian.Parametric(), guess);\n            if (params[0] < 0) {\n                break;\n            }\n            errors = computeError(params);\n        }\n        if (params[0] <= 0) {\n            throw new NotStrictlyPositiveException(params[0]);\n        }\n        return params;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..00205d3c4 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -118,7 +118,24 @@ public class GaussianFitter extends CurveFitter {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        double[] params = fit(new Gaussian.Parametric(), guess);\n+        if (params[0] <= 0) {\n+            throw new NotStrictlyPositiveException(params[0]);\n+        }\n+        double[] errors = computeError(params);\n+        while (errors[0] > convergenceThreshold || errors[1] > convergenceThreshold) {\n+            guess[0] = params[0];\n+            guess[1] = params[1];\n+            params = fit(new Gaussian.Parametric(), guess);\n+            if (params[0] < 0) {\n+                break;\n+            }\n+            errors = computeError(params);\n+        }\n+        if (params[0] <= 0) {\n+            throw new NotStrictlyPositiveException(params[0]);\n+        }\n+        return params;\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}