{
    "patch": "      Node newLast = argList.getLastChild();\n      Node arg = newLast;\n      while (arg != null) {\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          arg = arg.getPrevious();\n          argList.removeChild(newLast);\n          newLast = arg;\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n\n      for (arg = newLast != null ? newLast.getPrevious() : argList.getLastChild(); arg != null;\n           arg = arg.getPrevious()) {\n        if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n          argList.removeChild(arg);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d6a0534b 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,24 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node newLast = argList.getLastChild();\n+      Node arg = newLast;\n+      while (arg != null) {\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          arg = arg.getPrevious();\n+          argList.removeChild(newLast);\n+          newLast = arg;\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+\n+      for (arg = newLast != null ? newLast.getPrevious() : argList.getLastChild(); arg != null;\n+           arg = arg.getPrevious()) {\n+        if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n+          argList.removeChild(arg);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}