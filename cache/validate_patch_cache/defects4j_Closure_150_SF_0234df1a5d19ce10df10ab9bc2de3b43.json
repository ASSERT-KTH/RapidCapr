{
    "patch": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.FUNCTION && !NodeUtil.isFunctionDeclaration(n)) {\n        defineDeclaredFunction(n, parent);\n        return;\n      }\n\n      if (n.getType() == Token.LP && parent.getType() == Token.FUNCTION) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      if (n.getType() == Token.CATCH) {\n        defineCatch(n, parent);\n        return;\n      }\n\n      if (n.isQualifiedName()) {\n        final Var var = getSymbol(n);\n        final Node parentFunc = NodeUtil.getEnclosingFunction(parent);\n\n        if (var != null && parentFunc != null && n.getFirstChild() != null) {\n          final Node initializer = n.getFirstChild();\n\n          if (initializer.getType() == Token.FUNCTION) {\n            defineDeclaredFunction(initializer, n);\n            return;\n          }\n\n          final TypeInferenceInfo info =\n              inferDeclarationType(n, initializer, t.getScope(), parentFunc);\n\n          if (info != null) {\n            if (info.hasFunctionType()) {\n              defineDeclaredFunction(info.functionNode, n);\n            }\n\n            defineVariable(n, t.getScope(), info.type, var.isBleedingFunction());\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..4d427221 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1443,25 +1443,44 @@ final class TypedScopeCreator implements ScopeCreator {\n     @Override public void visit(NodeTraversal t, Node n, Node parent) {\n       if (n == scope.getRootNode()) return;\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+      if (n.getType() == Token.FUNCTION && !NodeUtil.isFunctionDeclaration(n)) {\n+        defineDeclaredFunction(n, parent);\n+        return;\n+      }\n+\n+      if (n.getType() == Token.LP && parent.getType() == Token.FUNCTION) {\n         handleFunctionInputs(parent);\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+      if (n.getType() == Token.CATCH) {\n+        defineCatch(n, parent);\n+        return;\n+      }\n+\n+      if (n.isQualifiedName()) {\n+        final Var var = getSymbol(n);\n+        final Node parentFunc = NodeUtil.getEnclosingFunction(parent);\n+\n+        if (var != null && parentFunc != null && n.getFirstChild() != null) {\n+          final Node initializer = n.getFirstChild();\n+\n+          if (initializer.getType() == Token.FUNCTION) {\n+            defineDeclaredFunction(initializer, n);\n             return;\n           }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+\n+          final TypeInferenceInfo info =\n+              inferDeclarationType(n, initializer, t.getScope(), parentFunc);\n+\n+          if (info != null) {\n+            if (info.hasFunctionType()) {\n+              defineDeclaredFunction(info.functionNode, n);\n+            }\n+\n+            defineVariable(n, t.getScope(), info.type, var.isBleedingFunction());\n+          }\n+        }\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}