{
    "patch": "      return;\n    }\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking any each property on the record and trying to match\n    // properties on this object.\n    ObjectType thisObjType = getJSType().autobox().getObjectRepresentation();\n    if (constraintObj.isRecordType() && thisObjType.isAnonymousObjectType()\n        && !thisObjType.isNominalConstructor()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!thisObjType.hasProperty(prop)) {\n          JSType typeToInfer = propType;\n          if (!hasProperty(prop)) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                .getLeastSupertype(propType);\n          }\n          defineInferredProperty(prop, typeToInfer, null);\n        } else {\n          JSType existingPropType = thisObjType.getPropertyType(prop);\n          JSType leastSupertype = existingPropType.getLeastSupertype(propType);\n          if (!leastSupertype.equals(existingPropType)) {\n            ObjectType objectType = thisObjType.toMaybeObjectType();\n            ObjectType newObjectType = objectType.withProperty(prop, leastSupertype);\n            JSType newJSType = getJSType().autobox().withObjectType(newObjectType);\n            setJSType(newJSType, getCommonTypes());",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..f77471d0 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,38 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+      return;\n+    }\n+\n+    // Handle the case where the constraint object is a record type.\n+    //\n+    // param constraintObj {{prop: (number|undefined)}}\n+    // function f(constraintObj) {}\n+    // f({});\n+    //\n+    // We want to modify the object literal to match the constraint, by\n+    // taking any each property on the record and trying to match\n+    // properties on this object.\n+    ObjectType thisObjType = getJSType().autobox().getObjectRepresentation();\n+    if (constraintObj.isRecordType() && thisObjType.isAnonymousObjectType()\n+        && !thisObjType.isNominalConstructor()) {\n+      for (String prop : constraintObj.getOwnPropertyNames()) {\n+        JSType propType = constraintObj.getPropertyType(prop);\n+        if (!thisObjType.hasProperty(prop)) {\n+          JSType typeToInfer = propType;\n+          if (!hasProperty(prop)) {\n+            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+                .getLeastSupertype(propType);\n+          }\n+          defineInferredProperty(prop, typeToInfer, null);\n+        } else {\n+          JSType existingPropType = thisObjType.getPropertyType(prop);\n+          JSType leastSupertype = existingPropType.getLeastSupertype(propType);\n+          if (!leastSupertype.equals(existingPropType)) {\n+            ObjectType objectType = thisObjType.toMaybeObjectType();\n+            ObjectType newObjectType = objectType.withProperty(prop, leastSupertype);\n+            JSType newJSType = getJSType().autobox().withObjectType(newObjectType);\n+            setJSType(newJSType, getCommonTypes());\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}