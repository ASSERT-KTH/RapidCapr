{
    "patch": "import java.util.Arrays;\n\npublic class StringUtils {\n\t\n\tpublic static boolean containsAny(String str, char[] searchChars) {\n\t\t\n\t\tif (str == null || searchChars == null) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tint strLength = str.length();\n\t\tint searchLength = searchChars.length;\n\t\tint strLast = strLength - 1;\n\t\tint searchLast = searchLength - 1;\n\t\t\n\t\tfor (int i = 0; i < strLength; i++) {\n\t\t\tchar ch = str.charAt(i);\n\t\t\tfor (int j = 0; j < searchLength; j++) {\n\t\t\t\tif (searchChars[j] == ch) {\n\t\t\t\t\tif (Character.isHighSurrogate(ch)) {\n\t\t\t\t\t\tif (j == searchLast) {\n\t\t\t\t\t\t\t// missing low surrogate, fine, like String.indexOf(String)\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (i < strLast && searchChars[j + 1] == str.charAt(i + 1)) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// ch is in the Basic Multilingual Plane\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\t// Tests for ASCII characters\n\t\tString str1 = \"Hello World\";\n\t\tchar[] searchChars1 = {'o', 'W'};\n\t\tSystem.out.println(containsAny(str1, searchChars1)); // Expected output: true\n\t\t\n\t\tchar[] searchChars2 = {'x', 'y', 'z'};\n\t\tSystem.out.println(containsAny(str1, searchChars2)); // Expected output: false\n\t\t\n\t\t// Tests for supplementary characters\n\t\tString str2 = \"Hello World\\uD840\\uDC00\";\n\t\tchar[] searchChars3 = {'\\uD840', '\\uDC00'};\n\t\tSystem.out.println(containsAny(str2, searchChars3)); // Expected output: true\n\t\t\n\t\tchar[] searchChars4 = {'x', 'y', 'z'};\n\t\tSystem.out.println(containsAny(str2, searchChars4)); // Expected output: false\n\t\t\n\t}\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..ade46667 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,64 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+import java.util.Arrays;\n+\n+public class StringUtils {\n+\t\n+\tpublic static boolean containsAny(String str, char[] searchChars) {\n+\t\t\n+\t\tif (str == null || searchChars == null) {\n+\t\t\treturn false;\n+\t\t}\n+\t\t\n+\t\tint strLength = str.length();\n+\t\tint searchLength = searchChars.length;\n+\t\tint strLast = strLength - 1;\n+\t\tint searchLast = searchLength - 1;\n+\t\t\n+\t\tfor (int i = 0; i < strLength; i++) {\n+\t\t\tchar ch = str.charAt(i);\n+\t\t\tfor (int j = 0; j < searchLength; j++) {\n+\t\t\t\tif (searchChars[j] == ch) {\n+\t\t\t\t\tif (Character.isHighSurrogate(ch)) {\n+\t\t\t\t\t\tif (j == searchLast) {\n+\t\t\t\t\t\t\t// missing low surrogate, fine, like String.indexOf(String)\n+\t\t\t\t\t\t\treturn true;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (i < strLast && searchChars[j + 1] == str.charAt(i + 1)) {\n+\t\t\t\t\t\t\treturn true;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\t// ch is in the Basic Multilingual Plane\n+\t\t\t\t\t\treturn true;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn false;\n+\t}\n+\t\n+\tpublic static void main(String[] args) {\n+\t\t\n+\t\t// Tests for ASCII characters\n+\t\tString str1 = \"Hello World\";\n+\t\tchar[] searchChars1 = {'o', 'W'};\n+\t\tSystem.out.println(containsAny(str1, searchChars1)); // Expected output: true\n+\t\t\n+\t\tchar[] searchChars2 = {'x', 'y', 'z'};\n+\t\tSystem.out.println(containsAny(str1, searchChars2)); // Expected output: false\n+\t\t\n+\t\t// Tests for supplementary characters\n+\t\tString str2 = \"Hello World\\uD840\\uDC00\";\n+\t\tchar[] searchChars3 = {'\\uD840', '\\uDC00'};\n+\t\tSystem.out.println(containsAny(str2, searchChars3)); // Expected output: true\n+\t\t\n+\t\tchar[] searchChars4 = {'x', 'y', 'z'};\n+\t\tSystem.out.println(containsAny(str2, searchChars4)); // Expected output: false\n+\t\t\n+\t}\n+\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}