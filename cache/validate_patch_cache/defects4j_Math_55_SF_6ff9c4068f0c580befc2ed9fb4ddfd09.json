{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    final double v1x = v1.getX();\n    final double v1y = v1.getY();\n    final double v1z = v1.getZ();\n    final double v2x = v2.getX();\n    final double v2y = v2.getY();\n    final double v2z = v2.getZ();\n\n    final double e1 = v1y * v2z - v1z * v2y;\n    final double e2 = v1z * v2x - v1x * v2z;\n    final double e3 = v1x * v2y - v1y * v2x;\n\n    final double norm = e1 * e1 + e2 * e2 + e3 * e3;\n    final double threshold = 1e-12;\n    if (norm <= threshold) {\n        // The cross product is close to zero, use a fallback approach to compute it.\n        final double alpha = v1y * v2z - v1z * v2y;\n        final double beta = v1z * v2x - v1x * v2z;\n        final double gamma = v1x * v2y - v1y * v2x;\n\n        final double epsilon = 1e-14;\n        final double alphaSqr = alpha * alpha;\n        final double betaSqr = beta * beta;\n        final double gammaSqr = gamma * gamma;\n        final double n2 = alphaSqr + betaSqr + gammaSqr;\n        final double n = Math.sqrt(n2);\n        if (n < epsilon) {\n            // Vector v1 and v2 are almost colinear.\n            // We choose an arbitrary orthogonal vector to v1 and normalize it.\n            final double u = 1 / Math.sqrt(v1x * v1x + v1y * v1y);\n            final double v = v1x * u;\n            final double w = -v1y * u;\n\n            return new Vector3D(w * v2z - v * v2y, v * v2x - u * v2z, u * v2y - w * v2x);\n        } else {\n            return new Vector3D(alpha / n, beta / n, gamma / n);\n        }\n    } else {\n        // scale the cross product to have norm equal to |v1| * |v2| * sin(theta)\n        final double _2_sinAlpha = Math.sqrt(Math.max(0, (1 - threshold / norm) / 2));\n        return new Vector3D(_2_sinAlpha * e1, _2_sinAlpha * e2, _2_sinAlpha * e3);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..fc8c55bc8 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,49 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+    final double v1x = v1.getX();\n+    final double v1y = v1.getY();\n+    final double v1z = v1.getZ();\n+    final double v2x = v2.getX();\n+    final double v2y = v2.getY();\n+    final double v2z = v2.getZ();\n+\n+    final double e1 = v1y * v2z - v1z * v2y;\n+    final double e2 = v1z * v2x - v1x * v2z;\n+    final double e3 = v1x * v2y - v1y * v2x;\n+\n+    final double norm = e1 * e1 + e2 * e2 + e3 * e3;\n+    final double threshold = 1e-12;\n+    if (norm <= threshold) {\n+        // The cross product is close to zero, use a fallback approach to compute it.\n+        final double alpha = v1y * v2z - v1z * v2y;\n+        final double beta = v1z * v2x - v1x * v2z;\n+        final double gamma = v1x * v2y - v1y * v2x;\n+\n+        final double epsilon = 1e-14;\n+        final double alphaSqr = alpha * alpha;\n+        final double betaSqr = beta * beta;\n+        final double gammaSqr = gamma * gamma;\n+        final double n2 = alphaSqr + betaSqr + gammaSqr;\n+        final double n = Math.sqrt(n2);\n+        if (n < epsilon) {\n+            // Vector v1 and v2 are almost colinear.\n+            // We choose an arbitrary orthogonal vector to v1 and normalize it.\n+            final double u = 1 / Math.sqrt(v1x * v1x + v1y * v1y);\n+            final double v = v1x * u;\n+            final double w = -v1y * u;\n+\n+            return new Vector3D(w * v2z - v * v2y, v * v2x - u * v2z, u * v2y - w * v2x);\n+        } else {\n+            return new Vector3D(alpha / n, beta / n, gamma / n);\n+        }\n+    } else {\n+        // scale the cross product to have norm equal to |v1| * |v2| * sin(theta)\n+        final double _2_sinAlpha = Math.sqrt(Math.max(0, (1 - threshold / norm) / 2));\n+        return new Vector3D(_2_sinAlpha * e1, _2_sinAlpha * e2, _2_sinAlpha * e3);\n+    }\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.0> but was:<2.121320343559633>",
    "test_result": "FAIL"
}