{
    "patch": "public static String escapeJava(String str) {\n    if (str == null) {\n        return null;\n    }\n    StringBuffer out = new StringBuffer(\"\");\n    escapeJavaStyleString(out, str, false, false);\n    return out.toString();\n}\n\nprivate static void escapeJavaStyleString(StringBuffer out, String str, boolean escapeSingleQuote, boolean escapeForwardSlash) {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Out StringBuffer can not be null\");\n    }\n    if (str == null) {\n        return;\n    }\n    int sz = str.length();\n    for (int i = 0; i < sz; i++) {\n        char ch = str.charAt(i);\n        // handle unicode\n        if (ch > 0xfff) {\n            out.append(\"\\\\u\" + hex(ch));\n        } else if (ch > 0xff) {\n            out.append(\"\\\\u0\" + hex(ch));\n        } else if (ch > 0x7f) {\n            out.append(\"\\\\u00\" + hex(ch));\n        } else if (ch < 32) {\n            switch (ch) {\n                case '\\b':\n                    out.append('\\\\');\n                    out.append('b');\n                    break;\n                case '\\n':\n                    out.append('\\\\');\n                    out.append('n');\n                    break;\n                case '\\t':\n                    out.append('\\\\');\n                    out.append('t');\n                    break;\n                case '\\f':\n                    out.append('\\\\');\n                    out.append('f');\n                    break;\n                case '\\r':\n                    out.append('\\\\');\n                    out.append('r');\n                    break;\n                default:\n                    if (ch > 0xf) {\n                        out.append(\"\\\\u00\" + hex(ch));\n                    } else {\n                        out.append(\"\\\\u000\" + hex(ch));\n                    }\n                    break;\n            }\n        } else {\n            switch (ch) {\n                case '\\'':\n                    if (escapeSingleQuote) {\n                        out.append('\\\\');\n                    }\n                    out.append('\\'');\n                    break;\n                case '\"':\n                    out.append('\\\\');\n                    out.append('\"');\n                    break;\n                case '\\\\':\n                    out.append('\\\\');\n                    out.append('\\\\');\n                    break;\n                case '/':\n                    if (escapeForwardSlash) {\n                        out.append('\\\\');\n                    }\n                    out.append('/');\n                    break;\n                default:\n                    out.append(ch);\n                    break;\n            }\n        }\n    }\n}\n\nprivate static String hex(char ch) {\n    return Integer.toHexString(ch).toUpperCase(Locale.ENGLISH);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}