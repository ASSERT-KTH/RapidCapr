{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException(\"Invalid arguments for regularizedGammaP function.\");\n    }\n\n    double gammaValue = Gamma.gamma(a);\n    double result;\n    if (Double.isInfinite(gammaValue)) {\n        result = 1.0;\n    } else if (x == 0.0) {\n        result = 0.0;\n    } else if (x < a + 1.0) {\n        result = incompleteSeries(a, x) / gammaValue;\n    } else {\n        result = 1.0 - incompleteFraction(a, x) / gammaValue;\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..5ac638bb9 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,24 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException(\"Invalid arguments for regularizedGammaP function.\");\n+    }\n+\n+    double gammaValue = Gamma.gamma(a);\n+    double result;\n+    if (Double.isInfinite(gammaValue)) {\n+        result = 1.0;\n+    } else if (x == 0.0) {\n+        result = 0.0;\n+    } else if (x < a + 1.0) {\n+        result = incompleteSeries(a, x) / gammaValue;\n+    } else {\n+        result = 1.0 - incompleteFraction(a, x) / gammaValue;\n+    }\n+    return result;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}