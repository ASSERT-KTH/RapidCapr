{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int initialOffset = getOffset(instantLocal);\n    long nextTransition, prevTransition;\n    int nextOffset, prevOffset;\n\n    // Check if there is a transition at the given instant\n    nextTransition = nextTransition(instantLocal);\n    nextOffset = getOffset(nextTransition);\n    prevTransition = previousTransition(instantLocal);\n    prevOffset = getOffset(prevTransition);\n\n    if (initialOffset == prevOffset || initialOffset == nextOffset) {\n        return initialOffset;\n    }\n\n    if (nextOffset > initialOffset) {\n        return initialOffset;\n    }\n\n    // Fall overshoot\n    if (initialOffset < prevOffset) {\n        long beforePrevTransition = previousTransition(prevTransition);\n        int beforePrevTransitionOffset = getOffset(beforePrevTransition);\n        return (beforePrevTransitionOffset == prevOffset) ? prevOffset : nextOffset;\n    }\n\n    /*\n     * At this stage, we know that:\n     * initialOffset > nextOffset && initialOffset >= prevOffset\n     * We need to determine whether we are in the overlap period between the previous and next transitions\n     */\n    long overlapStart;\n    int overlapStartOffset;\n    if (initialOffset == nextOffset) { // Spring - in overlap period\n        overlapStart = nextTransition;\n        overlapStartOffset = nextOffset;\n    } else { // Fall - in overshoot period\n        overlapStart = prevTransition;\n        overlapStartOffset = prevOffset;\n    }\n\n    long overlapEnd = nextTransition(overlapStart);\n    int overlapEndOffset = getOffset(overlapEnd);\n\n    long newInstant;\n    if (initialOffset >= overlapEndOffset) {\n        newInstant = overlapEnd + 1;\n    } else {\n        newInstant = overlapStart;\n    }\n    return getOffset(newInstant);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..23ae779b 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,59 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        }\n-        return offsetAdjusted;\n+public int getOffsetFromLocal(long instantLocal) {\n+    int initialOffset = getOffset(instantLocal);\n+    long nextTransition, prevTransition;\n+    int nextOffset, prevOffset;\n+\n+    // Check if there is a transition at the given instant\n+    nextTransition = nextTransition(instantLocal);\n+    nextOffset = getOffset(nextTransition);\n+    prevTransition = previousTransition(instantLocal);\n+    prevOffset = getOffset(prevTransition);\n+\n+    if (initialOffset == prevOffset || initialOffset == nextOffset) {\n+        return initialOffset;\n+    }\n+\n+    if (nextOffset > initialOffset) {\n+        return initialOffset;\n     }\n \n+    // Fall overshoot\n+    if (initialOffset < prevOffset) {\n+        long beforePrevTransition = previousTransition(prevTransition);\n+        int beforePrevTransitionOffset = getOffset(beforePrevTransition);\n+        return (beforePrevTransitionOffset == prevOffset) ? prevOffset : nextOffset;\n+    }\n+\n+    /*\n+     * At this stage, we know that:\n+     * initialOffset > nextOffset && initialOffset >= prevOffset\n+     * We need to determine whether we are in the overlap period between the previous and next transitions\n+     */\n+    long overlapStart;\n+    int overlapStartOffset;\n+    if (initialOffset == nextOffset) { // Spring - in overlap period\n+        overlapStart = nextTransition;\n+        overlapStartOffset = nextOffset;\n+    } else { // Fall - in overshoot period\n+        overlapStart = prevTransition;\n+        overlapStartOffset = prevOffset;\n+    }\n+\n+    long overlapEnd = nextTransition(overlapStart);\n+    int overlapEndOffset = getOffset(overlapEnd);\n+\n+    long newInstant;\n+    if (initialOffset >= overlapEndOffset) {\n+        newInstant = overlapEnd + 1;\n+    } else {\n+        newInstant = overlapStart;\n+    }\n+    return getOffset(newInstant);\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}