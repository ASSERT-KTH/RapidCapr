{
    "patch": " private boolean hasExceptionHandler(Node cfgNode) {\n    if (cfgNode == null) {\n        return false;\n    }\n    List<Node> nodeList = new ArrayList<>();\n    nodeList.add(cfgNode);\n    int i = 0;\n    while (i < nodeList.size()) {\n        Node node = nodeList.get(i);\n        if (node instanceof CatchStatement) {\n            return true;\n        } else if (node instanceof TryStatement) {\n            nodeList.addAll(((TryStatement) node).getStatementList());\n        } else if (node instanceof BlockStatement) {\n            nodeList.addAll(((BlockStatement) node).getStatementList());\n        }\n        i++;\n    }\n    return false;\n }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..8c4b85a3 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,6 +157,26 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n+ private boolean hasExceptionHandler(Node cfgNode) {\n+    if (cfgNode == null) {\n+        return false;\n+    }\n+    List<Node> nodeList = new ArrayList<>();\n+    nodeList.add(cfgNode);\n+    int i = 0;\n+    while (i < nodeList.size()) {\n+        Node node = nodeList.get(i);\n+        if (node instanceof CatchStatement) {\n+            return true;\n+        } else if (node instanceof TryStatement) {\n+            nodeList.addAll(((TryStatement) node).getStatementList());\n+        } else if (node instanceof BlockStatement) {\n+            nodeList.addAll(((BlockStatement) node).getStatementList());\n+        }\n+        i++;\n+    }\n+    return false;\n+ }\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}