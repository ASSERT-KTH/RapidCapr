{
    "patch": "attachLiteralTypes(n);\n\nif (NodeUtil.isFunctionDeclaration(n)) {\n  defineDeclaredFunction(n, parent);\n  return;\n}\n\nif (n.getType() == Token.CATCH) {\n  defineCatch(n, parent);\n  return;\n}\n\nif (n.getType() == Token.VAR) {\n  defineVar(n, parent);\n  return;\n}\n\nif (n.getType() == Token.LP && parent.getType() == Token.EXPR_RESULT) {\n  Node grandparent = parent.getParent();\n  while (grandparent != null) {\n    if (grandparent.getType() == Token.BLOCK) {\n      break;\n    }\n    grandparent = grandparent.getParent();\n  }\n    \n  if (grandparent == null) {\n    grandparent = parent.getParent();\n  }\n\n  if (NodeUtil.isFunctionExpression(parent) && grandparent.getType() == Token.BLOCK) {\n    grandparent = grandparent.getParent();\n  }\n    \n  defineDeclaredFunction(parent.getFirstChild(), grandparent);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..5489b410 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,42 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+attachLiteralTypes(n);\n+\n+if (NodeUtil.isFunctionDeclaration(n)) {\n+  defineDeclaredFunction(n, parent);\n+  return;\n+}\n+\n+if (n.getType() == Token.CATCH) {\n+  defineCatch(n, parent);\n+  return;\n+}\n+\n+if (n.getType() == Token.VAR) {\n+  defineVar(n, parent);\n+  return;\n+}\n+\n+if (n.getType() == Token.LP && parent.getType() == Token.EXPR_RESULT) {\n+  Node grandparent = parent.getParent();\n+  while (grandparent != null) {\n+    if (grandparent.getType() == Token.BLOCK) {\n+      break;\n+    }\n+    grandparent = grandparent.getParent();\n+  }\n+    \n+  if (grandparent == null) {\n+    grandparent = parent.getParent();\n+  }\n+\n+  if (NodeUtil.isFunctionExpression(parent) && grandparent.getType() == Token.BLOCK) {\n+    grandparent = grandparent.getParent();\n+  }\n+    \n+  defineDeclaredFunction(parent.getFirstChild(), grandparent);\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}