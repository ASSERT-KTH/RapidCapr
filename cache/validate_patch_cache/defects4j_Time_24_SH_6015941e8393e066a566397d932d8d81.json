{
    "patch": "for (int i = 0; i < count; i++) {\n    DurationField currentField = savedFields[i].iField.getDurationField();\n    if ((i < count - 1) &&\n            (compareReverse(currentField, savedFields[i + 1].iField.getDurationField()) > 0)) {\n        throw new IllegalArgumentException(\"Fields invalid for parsing: \"\n                + currentField.getName() + \" -> \"\n                + savedFields[i + 1].iField.getDurationField().getName());\n    }\n    try {\n        millis = savedFields[i].set(millis, resetFields);\n    } catch (IllegalFieldValueException e) {\n        if (DateTimeFieldType.year().equals(savedFields[i].iField.getType())) {\n            long instant = savedFields[i].iField.set(0L, iDefaultYear);\n            millis = savedFields[i].iField.set(instant, savedFields[i].iValue);\n            continue;\n        } else {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..02544e15 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,29 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+for (int i = 0; i < count; i++) {\n+    DurationField currentField = savedFields[i].iField.getDurationField();\n+    if ((i < count - 1) &&\n+            (compareReverse(currentField, savedFields[i + 1].iField.getDurationField()) > 0)) {\n+        throw new IllegalArgumentException(\"Fields invalid for parsing: \"\n+                + currentField.getName() + \" -> \"\n+                + savedFields[i + 1].iField.getDurationField().getName());\n+    }\n+    try {\n+        millis = savedFields[i].set(millis, resetFields);\n+    } catch (IllegalFieldValueException e) {\n+        if (DateTimeFieldType.year().equals(savedFields[i].iField.getType())) {\n+            long instant = savedFields[i].iField.set(0L, iDefaultYear);\n+            millis = savedFields[i].iField.set(instant, savedFields[i].iValue);\n+            continue;\n+        } else {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        }\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>",
    "test_result": "FAIL"
}