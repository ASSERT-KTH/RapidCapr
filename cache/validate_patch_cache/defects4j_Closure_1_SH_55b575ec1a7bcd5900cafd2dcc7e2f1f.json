{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    if (!modifyCallers) {\n      Node current = argList.getFirstChild();\n      while (current != null) {\n        // Remove the arg if it is not referenced.\n        String argName = current.getString();\n        Var var = fnScope.getVar(argName);\n        Scope.VarInfo varInfo = fnScope.getVarInfo(var);\n        Node srcNode = varInfo == null ? null : varInfo.getNameNode();\n        if (!referenced.contains(var) && \n            !NodeUtil.isRest(argList) &&\n            !NodeUtil.isDefaultValue(current) &&\n            !NodeUtil.isAssignmentTarget(current)) {\n          argList.removeChild(current);\n          compiler.reportCodeChange();\n        }\n        current = current.getNext();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..8b5c519f 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,37 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    if (!modifyCallers) {\n+      Node current = argList.getFirstChild();\n+      while (current != null) {\n+        // Remove the arg if it is not referenced.\n+        String argName = current.getString();\n+        Var var = fnScope.getVar(argName);\n+        Scope.VarInfo varInfo = fnScope.getVarInfo(var);\n+        Node srcNode = varInfo == null ? null : varInfo.getNameNode();\n+        if (!referenced.contains(var) && \n+            !NodeUtil.isRest(argList) &&\n+            !NodeUtil.isDefaultValue(current) &&\n+            !NodeUtil.isAssignmentTarget(current)) {\n+          argList.removeChild(current);\n+          compiler.reportCodeChange();\n+        }\n+        current = current.getNext();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}