{
    "patch": "        if (block.isFunction && !block.equals(ref.getBasicBlock())) {\n          // Check assignments in inner function scopes may be executed multiple times.\n          BasicBlock currentBlock = block;\n          while (currentBlock != null) {\n            if (currentBlock.isLoop) {\n              return false;\n            }\n            currentBlock = currentBlock.getParent();\n          }\n          return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..bf227d02 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,16 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction && !block.equals(ref.getBasicBlock())) {\n+          // Check assignments in inner function scopes may be executed multiple times.\n+          BasicBlock currentBlock = block;\n+          while (currentBlock != null) {\n+            if (currentBlock.isLoop) {\n+              return false;\n+            }\n+            currentBlock = currentBlock.getParent();\n+          }\n+          return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}