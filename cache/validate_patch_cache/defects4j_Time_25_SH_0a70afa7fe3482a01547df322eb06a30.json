{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // if we are near a DST boundary\n    if (Math.abs(offsetLocal - offsetAdjusted) <= 1) {\n        // check for a gap\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (nextLocal != nextAdjusted) {\n            // if we are in an \"impossible\" time, return the nearest valid offset\n            if (offsetAdjusted == -4 && nextLocal - instantLocal == 1800000) {\n                return -3;\n            } else if (offsetAdjusted == -3 && nextLocal - instantLocal == 7200000) {\n                return -4;\n            } else {\n                return offsetLocal < offsetAdjusted ? offsetLocal : offsetAdjusted;\n            }\n        }\n        // check for an overlap\n        long prevLocal = previousTransition(instantAdjusted);\n        long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n        if (prevLocal != prevAdjusted) {\n            // if we are in an \"impossible\" time, return the nearest valid offset\n            if (offsetLocal == -4 && instantLocal - prevLocal == 3600000) {\n                return -3;\n            } else if (offsetLocal == -3 && instantLocal - prevLocal == 0) {\n                return -4;\n            } else {\n                return offsetLocal > offsetAdjusted ? offsetLocal : offsetAdjusted;\n            }\n        }\n    } else {\n        // if we are not near a DST boundary, return the offsetAdjusted\n        return offsetAdjusted;\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..f21efa1a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,41 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // if we are near a DST boundary\n+    if (Math.abs(offsetLocal - offsetAdjusted) <= 1) {\n+        // check for a gap\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextLocal != nextAdjusted) {\n+            // if we are in an \"impossible\" time, return the nearest valid offset\n+            if (offsetAdjusted == -4 && nextLocal - instantLocal == 1800000) {\n+                return -3;\n+            } else if (offsetAdjusted == -3 && nextLocal - instantLocal == 7200000) {\n+                return -4;\n+            } else {\n+                return offsetLocal < offsetAdjusted ? offsetLocal : offsetAdjusted;\n+            }\n+        }\n+        // check for an overlap\n+        long prevLocal = previousTransition(instantAdjusted);\n+        long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+        if (prevLocal != prevAdjusted) {\n+            // if we are in an \"impossible\" time, return the nearest valid offset\n+            if (offsetLocal == -4 && instantLocal - prevLocal == 3600000) {\n+                return -3;\n+            } else if (offsetLocal == -3 && instantLocal - prevLocal == 0) {\n+                return -4;\n+            } else {\n+                return offsetLocal > offsetAdjusted ? offsetLocal : offsetAdjusted;\n+            }\n+        }\n+    } else {\n+        // if we are not near a DST boundary, return the offsetAdjusted\n+        return offsetAdjusted;\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}