{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size == 0) {\n        return new PeriodFormatter(null, null);\n    } else if (elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        if (size == 1) {\n            return new PeriodFormatter(sep, sep);\n        } else {\n            int i = 1;\n            while (i < size && elementPairs.get(i) instanceof Separator) {\n                i++;\n            }\n            if (i == size) {\n                return new PeriodFormatter(sep, sep);\n            } else {\n                Object[] comp = createComposite(elementPairs.subList(i, size));\n                sep = sep.finish((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n                return new PeriodFormatter(sep, sep);\n            }\n        }\n    } else {\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..7fb742b3 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,17 +791,31 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size == 0) {\n+        return new PeriodFormatter(null, null);\n+    } else if (elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        if (size == 1) {\n+            return new PeriodFormatter(sep, sep);\n+        } else {\n+            int i = 1;\n+            while (i < size && elementPairs.get(i) instanceof Separator) {\n+                i++;\n+            }\n+            if (i == size) {\n                 return new PeriodFormatter(sep, sep);\n+            } else {\n+                Object[] comp = createComposite(elementPairs.subList(i, size));\n+                sep = sep.finish((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+                return new PeriodFormatter(sep, sep);\n+            }\n         }\n+    } else {\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n@@ -811,6 +825,7 @@ public class PeriodFormatterBuilder {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "junit.framework.ComparisonFailure: expected:<1 year[, 2 months, 3 weeks, 4 days, 5 hours, 6 minutes, 7 seconds] and 8 milliseconds> but was:<1 year[] and 8 milliseconds>",
    "test_result": "FAIL"
}