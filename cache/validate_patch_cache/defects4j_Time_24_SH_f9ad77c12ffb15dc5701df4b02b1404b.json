{
    "patch": "        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n            }\n            DateTimeFieldType fType = e.getFieldType();\n            if (fType == null) {\n                throw e;\n            }\n            int fLen = text.length();\n            for (int i = 0; i < count; i++) {\n                if (savedFields[i].matchesField(fType)) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \" +\n                            savedFields[i].getFieldName() + \" is not valid\");\n                    throw e;\n                }\n            }\n            StringBuilder buf = new StringBuilder(text);\n            if (fLen > 64) {\n                buf.setLength(64);\n                buf.append(\"...\");\n            }\n            if (count == 0) {\n                e.prependMessage(\"Cannot parse \\\"\" + buf.toString() + \"\\\"\");\n            } else {\n                e.prependMessage(\"Cannot parse \\\"\" + buf.toString() + \"\\\": \");\n                DurationFormatUtils.appendUnpaddedInteger(e.prependToString(null), fType.getDurationType().getField(getChronology()).getRangeDurationField().getType().getValue(millis));\n                e.prependMessage(savedFields[0].getFieldName() + \" is malformed at \\\"\" + buf.toString() + \"\\\"\");\n            }\n            throw e;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..d034ce75 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,36 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n+            }\n+            DateTimeFieldType fType = e.getFieldType();\n+            if (fType == null) {\n+                throw e;\n+            }\n+            int fLen = text.length();\n+            for (int i = 0; i < count; i++) {\n+                if (savedFields[i].matchesField(fType)) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \" +\n+                            savedFields[i].getFieldName() + \" is not valid\");\n+                    throw e;\n+                }\n+            }\n+            StringBuilder buf = new StringBuilder(text);\n+            if (fLen > 64) {\n+                buf.setLength(64);\n+                buf.append(\"...\");\n+            }\n+            if (count == 0) {\n+                e.prependMessage(\"Cannot parse \\\"\" + buf.toString() + \"\\\"\");\n+            } else {\n+                e.prependMessage(\"Cannot parse \\\"\" + buf.toString() + \"\\\": \");\n+                DurationFormatUtils.appendUnpaddedInteger(e.prependToString(null), fType.getDurationType().getField(getChronology()).getRangeDurationField().getType().getValue(millis));\n+                e.prependMessage(savedFields[0].getFieldName() + \" is malformed at \\\"\" + buf.toString() + \"\\\"\");\n+            }\n+            throw e;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}