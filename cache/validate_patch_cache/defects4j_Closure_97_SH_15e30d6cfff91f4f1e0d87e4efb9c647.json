{
    "patch": "switch (n.getType()) {\n    case Token.LSH:\n        result = lvalInt << rvalInt;\n        break;\n    case Token.RSH:\n        result = lvalInt >> rvalInt;\n        break;\n    case Token.URSH: {\n        // Add 0x100000000L to set the 32nd bit t",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex d6c194a3..c816eea5 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -695,7 +695,15 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n           // JavaScript handles zero shifts on signed numbers differently than\n           // Java as an Java int can not represent the unsigned 32-bit number\n           // where JavaScript can so use a long here.\n-          result = lvalInt >>> rvalInt;\n+switch (n.getType()) {\n+    case Token.LSH:\n+        result = lvalInt << rvalInt;\n+        break;\n+    case Token.RSH:\n+        result = lvalInt >> rvalInt;\n+        break;\n+    case Token.URSH: {\n+        // Add 0x100000000L to set the 32nd bit t\n           break;\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +",
    "result_reason": "error: orphaned default",
    "test_result": "ERROR"
}