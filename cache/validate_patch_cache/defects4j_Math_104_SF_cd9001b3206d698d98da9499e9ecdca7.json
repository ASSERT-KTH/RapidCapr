{
    "patch": "import org.apache.commons.math3.special.Gamma;\n\npublic class MyClass {\n    \n    public static double regularizedGamma(double a, double x) {\n        double epsilon = 10e-15; \n        double maxIterations = 1000;\n        double sum = 0;\n        double term = -1; \n        if (a <= 0 || x < 0) {\n            return Double.NaN;\n        } else if (x == 0) {\n            return 0.0;\n        } else if (x > a + 1) {\n            return 1 - regularizedGammaComplement(a, x);\n        } else {\n            term = 1/a; \n            sum = term;\n            for (int i = 1; i <= maxIterations && Math.abs(term) > epsilon; i++) {\n                term *= x / (a + i);\n                sum += term;\n            }\n            double gammaValue = Gamma.gamma(a);\n            return sum * Math.exp(-x + a * Math.log(x) - gammaValue);\n        }\n    }\n\n    public static double regularizedGammaComplement(double a, double x) {\n        double epsilon = 10e-15; \n        double maxIterations = 1000;\n        double sum = 1;\n        double term = 1;\n        if (a <= 0 || x < 0) {\n            return Double.NaN; \n        } else if (x == 0) {\n            return 1.0;\n        } else if (x < a + 1) {\n            return 1 - regularizedGamma(a, x);\n        } else {\n            for (int i = 1; i <= maxIterations && Math.abs(term) > epsilon; i++) {\n                term *= x / (a + maxIterations - i);\n                sum += term;\n            }\n            double gammaValue = Gamma.gamma(a);\n            return sum * Math.exp(-x + a * Math.log(x) - gammaValue) / x;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..ef019d6fd 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,54 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+\n+public class MyClass {\n+    \n+    public static double regularizedGamma(double a, double x) {\n+        double epsilon = 10e-15; \n+        double maxIterations = 1000;\n+        double sum = 0;\n+        double term = -1; \n+        if (a <= 0 || x < 0) {\n+            return Double.NaN;\n+        } else if (x == 0) {\n+            return 0.0;\n+        } else if (x > a + 1) {\n+            return 1 - regularizedGammaComplement(a, x);\n+        } else {\n+            term = 1/a; \n+            sum = term;\n+            for (int i = 1; i <= maxIterations && Math.abs(term) > epsilon; i++) {\n+                term *= x / (a + i);\n+                sum += term;\n+            }\n+            double gammaValue = Gamma.gamma(a);\n+            return sum * Math.exp(-x + a * Math.log(x) - gammaValue);\n+        }\n+    }\n+\n+    public static double regularizedGammaComplement(double a, double x) {\n+        double epsilon = 10e-15; \n+        double maxIterations = 1000;\n+        double sum = 1;\n+        double term = 1;\n+        if (a <= 0 || x < 0) {\n+            return Double.NaN; \n+        } else if (x == 0) {\n+            return 1.0;\n+        } else if (x < a + 1) {\n+            return 1 - regularizedGamma(a, x);\n+        } else {\n+            for (int i = 1; i <= maxIterations && Math.abs(term) > epsilon; i++) {\n+                term *= x / (a + maxIterations - i);\n+                sum += term;\n+            }\n+            double gammaValue = Gamma.gamma(a);\n+            return sum * Math.exp(-x + a * Math.log(x) - gammaValue) / x;\n+        }\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}