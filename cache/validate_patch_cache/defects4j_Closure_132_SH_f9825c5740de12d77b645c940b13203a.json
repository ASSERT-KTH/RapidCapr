{
    "patch": "            if (NodeUtil.isAssignmentOp(thenOp) &&\n                areNodesEqualForInlining(lhs, elseOp.getFirstChild())) {\n              Node assignName = thenOp.removeFirstChild();\n              Node thenExpr = thenOp.removeFirstChild();\n              Node elseExpr = elseOp.getLastChild().detachFromParent();\n              Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n              Node assign = new Node(\n                  thenOp.getType(),\n                  assignName.detachFromParent(),\n                  hookNode).srcref(thenOp);\n              Node newExpr = NodeUtil.newExpr(assign);\n              parent.replaceChild(n, newExpr);\n              reportCodeChange();\n              return newExpr;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..7596e810 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,21 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+            if (NodeUtil.isAssignmentOp(thenOp) &&\n+                areNodesEqualForInlining(lhs, elseOp.getFirstChild())) {\n+              Node assignName = thenOp.removeFirstChild();\n+              Node thenExpr = thenOp.removeFirstChild();\n+              Node elseExpr = elseOp.getLastChild().detachFromParent();\n+              Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n+              Node assign = new Node(\n+                  thenOp.getType(),\n+                  assignName.detachFromParent(),\n+                  hookNode).srcref(thenOp);\n+              Node newExpr = NodeUtil.newExpr(assign);\n+              parent.replaceChild(n, newExpr);\n+              reportCodeChange();\n+              return newExpr;\n+            }\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}