{
    "patch": "public <T> void resetMock(T mock) {\n    if (!(mock instanceof Factory)) {\n        throw new IllegalArgumentException(\"Only 'Factory' mock objects are supported.\");\n    }\n    \n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n    \n    // Create a new filter with the newMockHandler and set it on the mock object\n    ((Factory) mock).setCallback(0, new MethodInterceptorFilter(newMockHandler,\n            (MockSettingsImpl) withSettings().defaultAnswer(RETURNS_DEFAULTS)\n            .invocationListeners(Arrays.asList(\n                (InvocationListener) invocation -> {\n                    try {\n                        reportInvocation(new MethodInvocationReport(invocation));\n                    } catch (Exception e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            )).getMockHandler()));\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..c4a752039 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,28 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    if (!(mock instanceof Factory)) {\n+        throw new IllegalArgumentException(\"Only 'Factory' mock objects are supported.\");\n+    }\n+    \n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n+    \n+    // Create a new filter with the newMockHandler and set it on the mock object\n+    ((Factory) mock).setCallback(0, new MethodInterceptorFilter(newMockHandler,\n+            (MockSettingsImpl) withSettings().defaultAnswer(RETURNS_DEFAULTS)\n+            .invocationListeners(Arrays.asList(\n+                (InvocationListener) invocation -> {\n+                    try {\n+                        reportInvocation(new MethodInvocationReport(invocation));\n+                    } catch (Exception e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                }\n+            )).getMockHandler()));\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}