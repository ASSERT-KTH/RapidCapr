{
    "patch": "    int numArgs = argList.getChildCount();\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      Node curArg = argList.getFirstChild();\n      for (int i = 0; i < numArgs; i++) {\n        Node arg = curArg;\n        curArg = curArg.getNext();\n\n        Var var = fnScope.getVar(arg.getString());\n        if (var == null || !referenced.contains(var)) {\n          arg.detach();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b0a2049d 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,18 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    int numArgs = argList.getChildCount();\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      Node curArg = argList.getFirstChild();\n+      for (int i = 0; i < numArgs; i++) {\n+        Node arg = curArg;\n+        curArg = curArg.getNext();\n+\n+        Var var = fnScope.getVar(arg.getString());\n+        if (var == null || !referenced.contains(var)) {\n+          arg.detach();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}