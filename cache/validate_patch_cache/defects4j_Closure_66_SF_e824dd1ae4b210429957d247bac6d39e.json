{
    "patch": "public static double getTypedPercent(String jsonString) {\n    try {\n        ObjectMapper mapper = new ObjectMapper();\n        Map<String, Object> map = mapper.readValue(jsonString, new TypeReference<HashMap<String, Object>>() {});\n        double typeCount = 0;\n        double totalCount = 0;\n        for (Object value : map.values()) {\n            totalCount++;\n            if (value instanceof String) {\n                String stringValue = (String) value;\n                try {\n                    Double.parseDouble(stringValue);\n                    typeCount++;\n                } catch (NumberFormatException e) {\n                    // Ignore non-numeric string values\n                }\n            } else if (value instanceof Number) {\n                typeCount++;\n            }\n        }\n        return 100 * typeCount / totalCount;\n    } catch (IOException e) {\n        // JSON parsing exception occurred\n        return -1;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..031a2157 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,32 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonString) {\n+    try {\n+        ObjectMapper mapper = new ObjectMapper();\n+        Map<String, Object> map = mapper.readValue(jsonString, new TypeReference<HashMap<String, Object>>() {});\n+        double typeCount = 0;\n+        double totalCount = 0;\n+        for (Object value : map.values()) {\n+            totalCount++;\n+            if (value instanceof String) {\n+                String stringValue = (String) value;\n+                try {\n+                    Double.parseDouble(stringValue);\n+                    typeCount++;\n+                } catch (NumberFormatException e) {\n+                    // Ignore non-numeric string values\n+                }\n+            } else if (value instanceof Number) {\n+                typeCount++;\n+            }\n+        }\n+        return 100 * typeCount / totalCount;\n+    } catch (IOException e) {\n+        // JSON parsing exception occurred\n+        return -1;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}