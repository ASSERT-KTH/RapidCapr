{
    "patch": "Type[] bounds = typeVariable.getBounds();\nif (bounds.length == 0){\n    registerTypeVariablesOn(Object.class);\n} else if (bounds.length == 1) {\n    Type boundType = bounds[0];\n    if (boundType instanceof TypeVariable) {\n        boundType = getActualTypeArgumentFor((TypeVariable<?>) boundType);\n    }\n    if (boundType instanceof ParameterizedType) {\n        for (Type actualType : ((ParameterizedType) boundType).getActualTypeArguments()) {\n            registerTypeVariablesOn(actualType);\n        }\n    } else if (!(boundType instanceof WildcardType) && !(boundType instanceof TypeVariable)) {\n        registerTypeVariablesOn(boundType);\n    } else if (boundType instanceof TypeVariable) {\n        Type actualTypeArgument = getActualTypeArgumentFor((TypeVariable<?>) boundType);\n        if (actualTypeArgument != null) {\n            registerTypeVariablesOn(actualTypeArgument);\n        } else {\n            for (Type type : ((TypeVariable<?>) boundType).getBounds()) {\n                if (!(type instanceof TypeVariable)) {\n                    registerTypeVariablesOn(type);\n                }\n            }\n        }\n    }\n} else {\n    throw new RuntimeException(\"Unable to extract actual type for type variable: \" + typeVariable.getTypeName());\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..1675882cd 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,40 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type[] bounds = typeVariable.getBounds();\n+if (bounds.length == 0){\n+    registerTypeVariablesOn(Object.class);\n+} else if (bounds.length == 1) {\n+    Type boundType = bounds[0];\n+    if (boundType instanceof TypeVariable) {\n+        boundType = getActualTypeArgumentFor((TypeVariable<?>) boundType);\n+    }\n+    if (boundType instanceof ParameterizedType) {\n+        for (Type actualType : ((ParameterizedType) boundType).getActualTypeArguments()) {\n+            registerTypeVariablesOn(actualType);\n+        }\n+    } else if (!(boundType instanceof WildcardType) && !(boundType instanceof TypeVariable)) {\n+        registerTypeVariablesOn(boundType);\n+    } else if (boundType instanceof TypeVariable) {\n+        Type actualTypeArgument = getActualTypeArgumentFor((TypeVariable<?>) boundType);\n+        if (actualTypeArgument != null) {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        } else {\n+            for (Type type : ((TypeVariable<?>) boundType).getBounds()) {\n+                if (!(type instanceof TypeVariable)) {\n+                    registerTypeVariablesOn(type);\n+                }\n+            }\n+        }\n+    }\n+} else {\n+    throw new RuntimeException(\"Unable to extract actual type for type variable: \" + typeVariable.getTypeName());\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "java.lang.RuntimeException: Unable to extract actual type for type variable: K",
    "test_result": "FAIL"
}