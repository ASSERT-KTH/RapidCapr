{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        // Ignore function expressions.\n        if (n.getParent() != null && n.getParent().getType() == Token.ASSIGN &&\n            n.getParent().getFirstChild() == n) {\n            return false;\n        }\n        \n        // Ignore constructors or functions with specific annotations.\n        JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n        if (jsDoc != null &&\n            (jsDoc.isConstructor() ||\n             jsDoc.hasThisType() ||\n             jsDoc.isOverride())) {\n            return false;\n        }\n        \n        // Ignore class declarations.\n        if (NodeUtil.isClassDeclaration(n)) {\n            return false;\n        }\n    \n        // Ignore function declarations with no name.\n        if (NodeUtil.isFunctionDeclaration(n) &&\n            (n.getFirstChild() == null || n.getFirstChild().getString().isEmpty())) {\n            return false;\n        }\n    \n        // Ignore functions inside control flow structures or loops.\n        int pType = parent.getType();\n        switch (pType) {\n            case Token.WHILE:\n            case Token.DO:\n            case Token.FOR:\n            case Token.FOR_IN:\n            case Token.FOR_OF:\n                return false;\n            case Token.IF:\n            case Token.CASE:\n                return parent.getFirstChild() == n;\n            case Token.CATCH:\n            case Token.SCRIPT:\n            case Token.FUNCTION:\n                break;\n            default:\n                return false;\n        }\n        \n        // Ignore functions that are not declared in global or function scope.\n        if (!NodeUtil.isFunctionBlock(n.getParent().getParent()) &&\n            !NodeUtil.isGlobalVarParent(n.getParent())) {\n            return false;\n        }\n    }\n    \n    // Ignore right-hand sides of qualified names that are being assigned to prototype properties.\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n            return parent.getLastChild() != n;\n        }\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..583eafff 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,71 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n-    }\n-\n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+        // Ignore function expressions.\n+        if (n.getParent() != null && n.getParent().getType() == Token.ASSIGN &&\n+            n.getParent().getFirstChild() == n) {\n+            return false;\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n+        \n+        // Ignore constructors or functions with specific annotations.\n+        JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+        if (jsDoc != null &&\n+            (jsDoc.isConstructor() ||\n+             jsDoc.hasThisType() ||\n+             jsDoc.isOverride())) {\n             return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+        }\n+        \n+        // Ignore class declarations.\n+        if (NodeUtil.isClassDeclaration(n)) {\n             return false;\n-          }\n-      }\n+        }\n+    \n+        // Ignore function declarations with no name.\n+        if (NodeUtil.isFunctionDeclaration(n) &&\n+            (n.getFirstChild() == null || n.getFirstChild().getString().isEmpty())) {\n+            return false;\n+        }\n+    \n+        // Ignore functions inside control flow structures or loops.\n+        int pType = parent.getType();\n+        switch (pType) {\n+            case Token.WHILE:\n+            case Token.DO:\n+            case Token.FOR:\n+            case Token.FOR_IN:\n+            case Token.FOR_OF:\n+                return false;\n+            case Token.IF:\n+            case Token.CASE:\n+                return parent.getFirstChild() == n;\n+            case Token.CATCH:\n+            case Token.SCRIPT:\n+            case Token.FUNCTION:\n+                break;\n+            default:\n+                return false;\n+        }\n+        \n+        // Ignore functions that are not declared in global or function scope.\n+        if (!NodeUtil.isFunctionBlock(n.getParent().getParent()) &&\n+            !NodeUtil.isGlobalVarParent(n.getParent())) {\n+            return false;\n+        }\n+    }\n+    \n+    // Ignore right-hand sides of qualified names that are being assigned to prototype properties.\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return parent.getLastChild() != n;\n+        }\n     }\n \n     return true;\n-  }\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}