{
    "patch": "public static String unescape(String str) {\n    int stringLength = str.length();\n    StringBuilder sb = new StringBuilder(stringLength);\n    boolean hasPrecedingBackslash = false;\n    int unicode = 0;\n    for (int i = 0; i < stringLength; i++) {\n        char ch = str.charAt(i);\n        if (hasPrecedingBackslash) {\n            hasPrecedingBackslash = false;\n            switch (ch) {\n                case '\\\\':\n                    sb.append('\\\\');\n                    break;\n                case '\\'':\n                    sb.append('\\'');\n                    break;\n                case '\\\"':\n                    sb.append('\"');\n                    break;\n                case 'r':\n                    sb.append('\\r');\n                    break;\n                case 'f':\n                    sb.append('\\f');\n                    break;\n                case 't':\n                    sb.append('\\t');\n                    break;\n                case 'n':\n                    sb.append('\\n');\n                    break;\n                case 'b':\n                    sb.append('\\b');\n                    break;\n                case 'u':\n                    unicode = 0;\n                    for (int j = 0; j < 4; j++) {\n                        unicode = (unicode << 4) + hexToInt(str.charAt(i + j + 1));\n                    }\n                    sb.append((char) unicode);\n                    i += 4;\n                    break;\n                default:\n                    sb.append(ch);\n                    break;\n            }\n        } else if (ch == '\\\\') {\n            hasPrecedingBackslash = true;\n        } else {\n            sb.append(ch);\n        }\n    }\n    if (hasPrecedingBackslash) {\n        sb.append('\\\\');\n    }\n    return sb.toString();\n}\n\nprivate static int hexToInt(char ch) {\n    if ('0' <= ch && ch <= '9') {\n        return ch - '0';\n    } else if ('a' <= ch && ch <= 'f') {\n        return ch - 'a' + 10;\n    } else if ('A' <= ch && ch <= 'F') {\n        return ch - 'A' + 10;\n    } =else {\n        throw new IllegalArgumentException(\"Invalid hex digit: \" + ch);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}