{
    "patch": "public static String escapeJava(final String input) {\n    if (input == null) {\n        return null;\n    }\n    int sz = input.length();\n    StringBuilder output = new StringBuilder(sz * 2);\n    boolean hadSlash = false;\n    for (int i = 0; i < sz; i++) {\n        char ch = input.charAt(i);\n        if (ch > '\\\\') {\n            output.append(ch);\n            hadSlash = false;\n            continue;\n        }\n        switch (ch) {\n            case '\\\\':\n                if (hadSlash) {\n                    output.append('\\\\');\n                    hadSlash = false;\n                } else {\n                    hadSlash = true;\n                }\n                break;\n            case '\"':\n                if (hadSlash) {\n                    output.append('\\\\');\n                    hadSlash = false;\n                }\n                output.append('\"');\n                break;\n            case '\\n':\n                if (hadSlash) {\n                    output.append('\\\\');\n                    hadSlash = false;\n                }\n                output.append('n');\n                break;\n            case '\\r':\n                if (hadSlash) {\n                    output.append('\\\\');\n                    hadSlash = false;\n                }\n                output.append('r');\n                break;\n            case '\\f':\n                if (hadSlash) {\n                    output.append('\\\\');\n                    hadSlash = false;\n                }\n                output.append('f');\n                break;\n            case '\\t':\n                if (hadSlash) {\n                    output.append('\\\\');\n                    hadSlash = false;\n                }\n                output.append('t');\n                break;\n            case '/':\n                if (hadSlash) {\n                    output.append('\\\\');\n                    hadSlash = false;\n                }\n                output.append('/');\n                break;\n            case '<':\n                output.append(\"\\\\u003c\");\n                hadSlash = false;\n                break;\n            case '>':\n                output.append(\"\\\\u003e\");\n                hadSlash = false;\n                break;\n            case '\\'':\n                if (hadSlash) {\n                    output.append('\\\\');\n                    hadSlash = false;\n                }\n                output.append('\\'');\n                break;\n            default:\n                output.append(ch);\n                hadSlash = false;\n                break;\n        }\n    }\n    if (hadSlash) {\n        output.append('\\\\');\n    }\n    return output.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5f5e5c5f 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,97 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String escapeJava(final String input) {\n+    if (input == null) {\n+        return null;\n+    }\n+    int sz = input.length();\n+    StringBuilder output = new StringBuilder(sz * 2);\n+    boolean hadSlash = false;\n+    for (int i = 0; i < sz; i++) {\n+        char ch = input.charAt(i);\n+        if (ch > '\\\\') {\n+            output.append(ch);\n+            hadSlash = false;\n+            continue;\n+        }\n+        switch (ch) {\n+            case '\\\\':\n+                if (hadSlash) {\n+                    output.append('\\\\');\n+                    hadSlash = false;\n+                } else {\n+                    hadSlash = true;\n+                }\n+                break;\n+            case '\"':\n+                if (hadSlash) {\n+                    output.append('\\\\');\n+                    hadSlash = false;\n+                }\n+                output.append('\"');\n+                break;\n+            case '\\n':\n+                if (hadSlash) {\n+                    output.append('\\\\');\n+                    hadSlash = false;\n+                }\n+                output.append('n');\n+                break;\n+            case '\\r':\n+                if (hadSlash) {\n+                    output.append('\\\\');\n+                    hadSlash = false;\n+                }\n+                output.append('r');\n+                break;\n+            case '\\f':\n+                if (hadSlash) {\n+                    output.append('\\\\');\n+                    hadSlash = false;\n+                }\n+                output.append('f');\n+                break;\n+            case '\\t':\n+                if (hadSlash) {\n+                    output.append('\\\\');\n+                    hadSlash = false;\n+                }\n+                output.append('t');\n+                break;\n+            case '/':\n+                if (hadSlash) {\n+                    output.append('\\\\');\n+                    hadSlash = false;\n+                }\n+                output.append('/');\n+                break;\n+            case '<':\n+                output.append(\"\\\\u003c\");\n+                hadSlash = false;\n+                break;\n+            case '>':\n+                output.append(\"\\\\u003e\");\n+                hadSlash = false;\n+                break;\n+            case '\\'':\n+                if (hadSlash) {\n+                    output.append('\\\\');\n+                    hadSlash = false;\n+                }\n+                output.append('\\'');\n+                break;\n+            default:\n+                output.append(ch);\n+                hadSlash = false;\n+                break;\n+        }\n+    }\n+    if (hadSlash) {\n+        output.append('\\\\');\n+    }\n+    return output.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}