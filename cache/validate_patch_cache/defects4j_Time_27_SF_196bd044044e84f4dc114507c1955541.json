{
    "patch": "            Object next = elementPairs.get(1);\n            PeriodFormatter f;\n\n            if (next instanceof PeriodParser) {\n                f = toFormatter(elementPairs.subList(2, size), notPrinter, false);\n                sep = sep.finish(null, f.getParser());\n                return new PeriodFormatter(sep, sep);\n            } else if (next instanceof PeriodPrinter) {\n                f = toFormatter(elementPairs.subList(2, size), false, notParser);\n                sep = sep.finish(f.getPrinter(), null);\n                return new PeriodFormatter(sep, sep);\n            } else {\n                throw new IllegalStateException(\"Invalid element type in composite: \" + next.getClass().getName());\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..4959e308 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,20 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n+            Object next = elementPairs.get(1);\n+            PeriodFormatter f;\n+\n+            if (next instanceof PeriodParser) {\n+                f = toFormatter(elementPairs.subList(2, size), notPrinter, false);\n+                sep = sep.finish(null, f.getParser());\n                 return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n-        }\n-    }\n+            } else if (next instanceof PeriodPrinter) {\n+                f = toFormatter(elementPairs.subList(2, size), false, notParser);\n+                sep = sep.finish(f.getPrinter(), null);\n+                return new PeriodFormatter(sep, sep);\n+            } else {\n+                throw new IllegalStateException(\"Invalid element type in composite: \" + next.getClass().getName());\n+            }\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}