{
    "patch": "private static final int MAX_SIZE = 5000; // maximum allowed size of the matrix\nprivate RealMatrix squareRoot(RealMatrix m) {\n    int size = m.getRowDimension();\n    if (size <= MAX_SIZE && m.getColumnDimension() <= MAX_SIZE) {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    } else {\n        System.out.println(\"Matrix size exceeds maximum allowed limit\");\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..a67e716a2 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,15 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private static final int MAX_SIZE = 5000; // maximum allowed size of the matrix\n+private RealMatrix squareRoot(RealMatrix m) {\n+    int size = m.getRowDimension();\n+    if (size <= MAX_SIZE && m.getColumnDimension() <= MAX_SIZE) {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n+    } else {\n+        System.out.println(\"Matrix size exceeds maximum allowed limit\");\n+        return null;\n     }\n }\n+}",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}