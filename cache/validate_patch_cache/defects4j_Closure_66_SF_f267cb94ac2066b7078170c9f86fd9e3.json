{
    "patch": "public static double getTypedPercent(String json) {\n    try {\n        ObjectMapper objectMapper = new ObjectMapper();\n        JsonNode rootNode = objectMapper.readTree(json);\n        JsonNode typedValueNode = rootNode.get(\"TypedValue\");\n        JsonNode rawValueNode = typedValueNode.get(\"RawValue\");\n        double typedValue = typedValueNode.asDouble();\n        double rawValue = rawValueNode.asDouble();\n        return 100.0 * (typedValue / rawValue);\n    } catch (IOException e) {\n        e.printStackTrace();\n        return 0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..a6d9a207 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    try {\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        JsonNode rootNode = objectMapper.readTree(json);\n+        JsonNode typedValueNode = rootNode.get(\"TypedValue\");\n+        JsonNode rawValueNode = typedValueNode.get(\"RawValue\");\n+        double typedValue = typedValueNode.asDouble();\n+        double rawValue = rawValueNode.asDouble();\n+        return 100.0 * (typedValue / rawValue);\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+        return 0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}