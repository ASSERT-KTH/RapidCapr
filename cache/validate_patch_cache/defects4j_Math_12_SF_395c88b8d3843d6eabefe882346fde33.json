{
    "patch": "import java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.util.Arrays;\n\npublic class DistributionCalculator {\n\n    public static double[] calculateDistribution(double[] values) {\n        double sum = Arrays.stream(values).sum();\n        if (sum > 0) {\n            BigDecimal[] distribution = new BigDecimal[values.length];\n            BigDecimal max = BigDecimal.valueOf(Arrays.stream(values).max().orElse(0));\n            BigDecimal epsilon = BigDecimal.valueOf(Double.MIN_VALUE).multiply(BigDecimal.valueOf(100000));\n\n            for (int i = 0; i < values.length; i++) {\n                if (values[i] > 0) {\n                    distribution[i] = BigDecimal.valueOf(values[i]).divide(BigDecimal.valueOf(sum), 20, RoundingMode.HALF_UP);\n                } else {\n                    distribution[i] = BigDecimal.valueOf(sum).divide(BigDecimal.valueOf(values.length - 1), 20, RoundingMode.HALF_UP);\n                }\n\n                if (BigDecimal.valueOf(values[i]).equals(max)) {\n                    distribution[i] = distribution[i].add(epsilon);\n                }\n            }\n\n            double[] result = new double[distribution.length];\n            for (int i = 0; i < distribution.length; i++) {\n                result[i] = distribution[i].doubleValue();\n            }\n\n            return result;\n\n        } else {\n            return new double[values.length];\n        }\n    }\n    \n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}