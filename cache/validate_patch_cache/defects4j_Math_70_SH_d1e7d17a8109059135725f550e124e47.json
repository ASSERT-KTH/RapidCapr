{
    "patch": "if (Double.isNaN(min) || Double.isNaN(max) || Double.isNaN(initial)) {\n    throw new FunctionEvaluationException(null, FunctionEvaluationException.NAN_EVALUATION,\n            new Object[] {min, max, initial});\n}\n\n// Use initial value as a starting point for the solver if it's within the range\nif (initial < min || initial > max) {\n    initial = (min + max) / 2.0;\n}\n\n// Create a new instance of the solver and set the tolerance and maximum iterations\nBrentSolver solver = new BrentSolver();\nsolver.setAbsoluteAccuracy(getAbsoluteAccuracy());\nsolver.setMaximalIterationCount(getMaximalIterationCount());\n\n// Solve the function using the given solver\nreturn solver.solve(f, min, max, initial);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..06f689044 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,23 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+if (Double.isNaN(min) || Double.isNaN(max) || Double.isNaN(initial)) {\n+    throw new FunctionEvaluationException(null, FunctionEvaluationException.NAN_EVALUATION,\n+            new Object[] {min, max, initial});\n+}\n+\n+// Use initial value as a starting point for the solver if it's within the range\n+if (initial < min || initial > max) {\n+    initial = (min + max) / 2.0;\n+}\n+\n+// Create a new instance of the solver and set the tolerance and maximum iterations\n+BrentSolver solver = new BrentSolver();\n+solver.setAbsoluteAccuracy(getAbsoluteAccuracy());\n+solver.setMaximalIterationCount(getMaximalIterationCount());\n+\n+// Solve the function using the given solver\n+return solver.solve(f, min, max, initial);\n     }\n \n     /** {@inheritDoc} */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}