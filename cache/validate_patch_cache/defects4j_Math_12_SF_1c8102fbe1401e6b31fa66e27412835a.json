{
    "patch": "public static double[] calculateDistribution(int n, int[] arr) {\n    double totalSum = 0;\n    double maxVal = Integer.MIN_VALUE;\n    double[] res = new double[n];\n\n    for (int i = 0; i < n; i++) {\n        totalSum += arr[i];\n        maxVal = Math.max(maxVal, arr[i]);\n    }\n\n    double low = 0, high = maxVal, mid = 0;\n    while (high - low > 1e-9) {\n        mid = (low + high) / 2;\n        double sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += Math.min(arr[i], mid);\n        }\n        double percent = (sum / totalSum) * 100;\n        if (percent > 50) {\n            high = mid;\n        } else {\n            low = mid;\n        }\n    }\n\n    double sum = 0;\n    for (int i = 0; i < n; i++) {\n        res[i] = Math.min(arr[i], mid);\n        sum += res[i];\n    }\n\n    // adjust for rounding errors\n    if (sum > mid * n) {\n        double diff = sum - mid * n;\n        for (int i = 0; i < n && diff > 0; i++) {\n            double toRemove = Math.min(diff, res[i]);\n            res[i] -= toRemove;\n            diff -= toRemove;\n        }\n    } else if (sum < mid * n) {\n        double diff = mid * n - sum;\n        for (int i = 0; i < n && diff > 0; i++) {\n            double toAdd = Math.min(diff, maxVal - res[i]);\n            res[i] += toAdd;\n            diff -= toAdd;\n        }\n    }\n\n    Arrays.sort(res);\n    return res;\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}