{
    "patch": "public void addValue(double value) {\n    // Ignore NaN and infinite values\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\n        return;\n    }\n    \n    // Update count\n    n++;\n\n    // Update running statistics\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(Math.log(value));\n    secondMoment.increment(value);\n\n    // Update Mean and Variance object\n    if (meanImpl instanceof Mean) {\n        ((Mean) meanImpl).increment(value);\n    }\n    if (varianceImpl instanceof Variance) {\n        ((Variance) varianceImpl).increment(value);\n    }\n\n    // Update custom implementations of mean, variance, and geometric mean\n    if (meanImpl instanceof StorelessUnivariateStatistic) {\n        meanImpl.increment(value);\n    }\n    if (varianceImpl instanceof StorelessUnivariateStatistic) {\n        varianceImpl.increment(value);\n    }\n    if (geoMeanImpl instanceof GeometricMean) {\n        ((GeometricMean) geoMeanImpl).increment(value);\n    } else if (geoMeanImpl instanceof StorelessUnivariateStatistic) {\n        ((StorelessUnivariateStatistic) geoMeanImpl).increment(Math.log(value));\n    }\n}\n\n/**\n * Returns the geometric mean of the available values.\n *\n * @return The geometric mean or Double.NaN if no values have been added.\n */\npublic double getGeometricMean() {\n    if (n > 0 && geoMeanImpl instanceof GeometricMean) {\n        return geoMeanImpl.getResult();\n    } else if (sumLogImpl != null && n > 0) {\n        return Math.exp(sumLogImpl.getResult() / n);\n    } else {\n        return Double.NaN;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..f7464a70a 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,26 +146,59 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n-        }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n-        }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n-        }\n-        n++;\n+public void addValue(double value) {\n+    // Ignore NaN and infinite values\n+    if (Double.isNaN(value) || Double.isInfinite(value)) {\n+        return;\n+    }\n+    \n+    // Update count\n+    n++;\n+\n+    // Update running statistics\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(Math.log(value));\n+    secondMoment.increment(value);\n+\n+    // Update Mean and Variance object\n+    if (meanImpl instanceof Mean) {\n+        ((Mean) meanImpl).increment(value);\n+    }\n+    if (varianceImpl instanceof Variance) {\n+        ((Variance) varianceImpl).increment(value);\n+    }\n+\n+    // Update custom implementations of mean, variance, and geometric mean\n+    if (meanImpl instanceof StorelessUnivariateStatistic) {\n+        meanImpl.increment(value);\n+    }\n+    if (varianceImpl instanceof StorelessUnivariateStatistic) {\n+        varianceImpl.increment(value);\n     }\n+    if (geoMeanImpl instanceof GeometricMean) {\n+        ((GeometricMean) geoMeanImpl).increment(value);\n+    } else if (geoMeanImpl instanceof StorelessUnivariateStatistic) {\n+        ((StorelessUnivariateStatistic) geoMeanImpl).increment(Math.log(value));\n+    }\n+}\n+\n+/**\n+ * Returns the geometric mean of the available values.\n+ *\n+ * @return The geometric mean or Double.NaN if no values have been added.\n+ */\n+public double getGeometricMean() {\n+    if (n > 0 && geoMeanImpl instanceof GeometricMean) {\n+        return geoMeanImpl.getResult();\n+    } else if (sumLogImpl != null && n > 0) {\n+        return Math.exp(sumLogImpl.getResult() / n);\n+    } else {\n+        return Double.NaN;\n+    }\n+}\n \n     /**\n      * Returns the number of available values",
    "result_reason": "error: method getGeometricMean() is already defined in class SummaryStatistics",
    "test_result": "ERROR"
}