{
    "patch": "  private JSType getTypeOfArg(Node arg, FlowScope scope) {\n    JSType type = traverseNode(arg, scope).getType();\n    return type == null ? getNativeType(NULL_TYPE) : type;\n  }\n\n  private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      }\n    }\n    n.setJSType(type);\n    NestedScopeCreator scopeCreator = new NestedScopeCreator(getTypedScopeCreator());\n    Scope constructorScope = scopeCreator.createScope(constructor, scope);\n    int paramIndex = 0;\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      JSType argType = getTypeOfArg(arg, scope);\n      if (type != null) {\n        FunctionType ct = type.toMaybeFunctionType();\n        if (ct != null) {\n          JSType formalType = getFormalType(ct, paramIndex);\n          if (formalType == null) {\n            formalType = getNativeType(NULL_TYPE);\n          }\n          scope = scope.inferQualifiedSlot(makeIteratorVar(constructorScope), formalType, argType,\n              false, null);\n        }\n      }\n      scope = traverse(arg, scope);\n      paramIndex++;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..064ffb9e 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,8 +1032,12 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n+  private JSType getTypeOfArg(Node arg, FlowScope scope) {\n+    JSType type = traverseNode(arg, scope).getType();\n+    return type == null ? getNativeType(NULL_TYPE) : type;\n+  }\n \n+  private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n@@ -1056,11 +1060,24 @@ class TypeInference\n       }\n     }\n     n.setJSType(type);\n+    NestedScopeCreator scopeCreator = new NestedScopeCreator(getTypedScopeCreator());\n+    Scope constructorScope = scopeCreator.createScope(constructor, scope);\n+    int paramIndex = 0;\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+      JSType argType = getTypeOfArg(arg, scope);\n+      if (type != null) {\n+        FunctionType ct = type.toMaybeFunctionType();\n+        if (ct != null) {\n+          JSType formalType = getFormalType(ct, paramIndex);\n+          if (formalType == null) {\n+            formalType = getNativeType(NULL_TYPE);\n+          }\n+          scope = scope.inferQualifiedSlot(makeIteratorVar(constructorScope), formalType, argType,\n+              false, null);\n+        }\n+      }\n       scope = traverse(arg, scope);\n-    }\n-    return scope;\n-  }\n+      paramIndex++;\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}