{
    "patch": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n  Preconditions.checkArgument(inferred || type != null);\n\n  // Only allow declarations of NAMEs and qualified names.\n  boolean shouldDeclareOnGlobalThis = false;\n  if (n.getType() == Token.NAME) {\n    Preconditions.checkArgument(\n        parent.getType() == Token.FUNCTION ||\n        parent.getType() == Token.VAR ||\n        parent.getType() == Token.LP ||\n        parent.getType() == Token.CATCH);\n    shouldDeclareOnGlobalThis =\n        scope.isGlobal()\n        && (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION);\n  } else {\n    Preconditions.checkArgument(\n        n.getType() == Token.GETPROP && (\n          (parent.getType() == Token.ASSIGN)\n          || (parent.getType() == Token.ASSIGN_BITOR)\n          || (parent.getType() == Token.ASSIGN_BITXOR)\n          || (parent.getType() == Token.ASSIGN_BITAND)\n          || (parent.getType() == Token.ASSIGN_LSH)\n          || (parent.getType() == Token.ASSIGN_RSH)\n          || (parent.getType() == Token.ASSIGN_URSH)\n          || (parent.getType() == Token.ASSIGN_DIV)\n          || (parent.getType() == Token.ASSIGN_MOD)\n          || (parent.getType() == Token.ASSIGN_MUL)\n          || (parent.getType() == Token.ASSIGN_ADD)\n          || (parent.getType() == Token.ASSIGN_SUB)\n          || (parent.getType() == Token.COMMA)\n          || (parent.getType() == Token.EXPR_RESULT)\n          || (parent.getType() == Token.NEW)\n          || (parent.getType() == Token.TEMPLATELIT_SUB)\n          || (parent.getType() == Token.TAGGED_TEMPLATELIT)\n        ));\n  }\n  String variableName = n.getQualifiedName();\n  Preconditions.checkArgument(!variableName.isEmpty());\n\n  // Check that no other variable with this name is declared in this scope.\n  if (!scope.isDeclared(variableName, false)) {\n\n    if (!inferred) {\n      setDeferredType(n, type);\n    }\n\n    // Declare the variable in the current scope.\n    CompilerInput input = compiler.getInput(sourceName);\n    scope.declare(variableName, n, type, input, inferred);\n\n    // Declare the variable on globalThis, if appropriate.\n    if (shouldDeclareOnGlobalThis) {\n      ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n      boolean isExtern = input.isExtern();\n      if (inferred) {\n        globalThis.defineInferredProperty(\n            variableName,\n            type == null\n              ? getNativeType(JSTypeNative.NO_TYPE)\n              : type,\n            isExtern);\n      } else {\n        globalThis.defineDeclaredProperty(variableName, type, isExtern);\n      }\n    }\n\n    // Declare var.prototype in the global scope, if appropriate.\n    if (scope.isGlobal() && n.getType() == Token.NAME\n            && type instanceof FunctionType) {\n      FunctionType fnType = (FunctionType) type;\n      if (fnType.isConstructor() || fnType.isInterface()) {\n        FunctionType superClassCtor = fnType.getSuperClassConstructor();\n        scope.declare(\n            variableName + \".prototype\", n, fnType.getPrototype(),\n            input, superClassCtor == null\n              || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n      }\n    }\n\n  } else if (\n      // If n is a NAME (not a GETPROP), then check if the existing variable is a parameter.\n      n.getType() == Token.NAME\n      && (scope.getVar(variableName).isParam())\n      && (parent.getType() == Token.PARAM_LIST)) {\n    // Do nothing if the variable is already a parameter in the current function.\n    return;\n  } else {\n    // Otherwise, issue a warning that an undeclared variable was found.\n    Var oldVar = scope.getVar(variableName);\n    validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..d33ec759 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,81 +869,99 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n+void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+  Preconditions.checkArgument(inferred || type != null);\n+\n+  // Only allow declarations of NAMEs and qualified names.\n+  boolean shouldDeclareOnGlobalThis = false;\n+  if (n.getType() == Token.NAME) {\n+    Preconditions.checkArgument(\n+        parent.getType() == Token.FUNCTION ||\n+        parent.getType() == Token.VAR ||\n+        parent.getType() == Token.LP ||\n+        parent.getType() == Token.CATCH);\n+    shouldDeclareOnGlobalThis =\n+        scope.isGlobal()\n+        && (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION);\n+  } else {\n+    Preconditions.checkArgument(\n+        n.getType() == Token.GETPROP && (\n+          (parent.getType() == Token.ASSIGN)\n+          || (parent.getType() == Token.ASSIGN_BITOR)\n+          || (parent.getType() == Token.ASSIGN_BITXOR)\n+          || (parent.getType() == Token.ASSIGN_BITAND)\n+          || (parent.getType() == Token.ASSIGN_LSH)\n+          || (parent.getType() == Token.ASSIGN_RSH)\n+          || (parent.getType() == Token.ASSIGN_URSH)\n+          || (parent.getType() == Token.ASSIGN_DIV)\n+          || (parent.getType() == Token.ASSIGN_MOD)\n+          || (parent.getType() == Token.ASSIGN_MUL)\n+          || (parent.getType() == Token.ASSIGN_ADD)\n+          || (parent.getType() == Token.ASSIGN_SUB)\n+          || (parent.getType() == Token.COMMA)\n+          || (parent.getType() == Token.EXPR_RESULT)\n+          || (parent.getType() == Token.NEW)\n+          || (parent.getType() == Token.TEMPLATELIT_SUB)\n+          || (parent.getType() == Token.TAGGED_TEMPLATELIT)\n+        ));\n+  }\n+  String variableName = n.getQualifiedName();\n+  Preconditions.checkArgument(!variableName.isEmpty());\n+\n+  // Check that no other variable with this name is declared in this scope.\n+  if (!scope.isDeclared(variableName, false)) {\n+\n+    if (!inferred) {\n+      setDeferredType(n, type);\n+    }\n+\n+    // Declare the variable in the current scope.\n+    CompilerInput input = compiler.getInput(sourceName);\n+    scope.declare(variableName, n, type, input, inferred);\n+\n+    // Declare the variable on globalThis, if appropriate.\n+    if (shouldDeclareOnGlobalThis) {\n+      ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+      boolean isExtern = input.isExtern();\n+      if (inferred) {\n+        globalThis.defineInferredProperty(\n+            variableName,\n+            type == null\n+              ? getNativeType(JSTypeNative.NO_TYPE)\n+              : type,\n+            isExtern);\n       } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n+        globalThis.defineDeclaredProperty(variableName, type, isExtern);\n       }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n-        }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n-        }\n+    }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n-        }\n+    // Declare var.prototype in the global scope, if appropriate.\n+    if (scope.isGlobal() && n.getType() == Token.NAME\n+            && type instanceof FunctionType) {\n+      FunctionType fnType = (FunctionType) type;\n+      if (fnType.isConstructor() || fnType.isInterface()) {\n+        FunctionType superClassCtor = fnType.getSuperClassConstructor();\n+        scope.declare(\n+            variableName + \".prototype\", n, fnType.getPrototype(),\n+            input, superClassCtor == null\n+              || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n       }\n     }\n \n+  } else if (\n+      // If n is a NAME (not a GETPROP), then check if the existing variable is a parameter.\n+      n.getType() == Token.NAME\n+      && (scope.getVar(variableName).isParam())\n+      && (parent.getType() == Token.PARAM_LIST)) {\n+    // Do nothing if the variable is already a parameter in the current function.\n+    return;\n+  } else {\n+    // Otherwise, issue a warning that an undeclared variable was found.\n+    Var oldVar = scope.getVar(variableName);\n+    validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n+  }\n+}\n+\n     /**\n      * Check if the given node is a property of a name in the global scope.\n      */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}