{
    "patch": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      final double v1x = v1.getX();\n      final double v1y = v1.getY();\n      final double v1z = v1.getZ();\n      final double v2x = v2.getX();\n      final double v2y = v2.getY();\n      final double v2z = v2.getZ();\n\n      // rescale both vectors to ensure their norm are the same order of magnitude\n      final double v1Norm = v1.getNorm();\n      final double v2Norm = v2.getNorm();\n      final double max = FastMath.max(v1Norm, v2Norm);\n      final double scale = 1.0 / max;\n\n      final double v1xs = v1x * scale;\n      final double v1ys = v1y * scale;\n      final double v1zs = v1z * scale;\n\n      final double v2xs = v2x * scale;\n      final double v2ys = v2y * scale;\n      final double v2zs = v2z * scale;\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      final double resX = v1ys * v2zs - v1zs * v2ys;\n      final double resY = v1zs * v2xs - v1xs * v2zs;\n      final double resZ = v1xs * v2ys - v1ys * v2xs;\n\n      return new Vector3D(resX * max, resY * max, resZ * max);\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..c9298be7a 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -456,22 +456,33 @@ public class Vector3D implements Serializable {\n    */\n   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n+      final double v1x = v1.getX();\n+      final double v1y = v1.getY();\n+      final double v1z = v1.getZ();\n+      final double v2x = v2.getX();\n+      final double v2y = v2.getY();\n+      final double v2z = v2.getZ();\n+\n+      // rescale both vectors to ensure their norm are the same order of magnitude\n+      final double v1Norm = v1.getNorm();\n+      final double v2Norm = v2.getNorm();\n+      final double max = FastMath.max(v1Norm, v2Norm);\n+      final double scale = 1.0 / max;\n+\n+      final double v1xs = v1x * scale;\n+      final double v1ys = v1y * scale;\n+      final double v1zs = v1z * scale;\n+\n+      final double v2xs = v2x * scale;\n+      final double v2ys = v2y * scale;\n+      final double v2zs = v2z * scale;\n \n       // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+      final double resX = v1ys * v2zs - v1zs * v2ys;\n+      final double resY = v1zs * v2xs - v1xs * v2zs;\n+      final double resZ = v1xs * v2ys - v1ys * v2xs;\n \n+      return new Vector3D(resX * max, resY * max, resZ * max);\n   }\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.0> but was:<0.6546536707079772>",
    "test_result": "FAIL"
}