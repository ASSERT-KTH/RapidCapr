{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    Gson gson = new Gson();\n    JsonElement json = gson.fromJson(jsonStr, JsonElement.class);\n    int typed = 0;\n    int total = 0;\n \n    if (json.isJsonArray()) {\n        JsonArray arr = json.getAsJsonArray();\n        for (JsonElement element : arr) {\n            total++;\n            if (element.isJsonPrimitive() && element.getAsJsonPrimitive().isBoolean()) {\n                typed++;\n            }\n        }\n    } else if (json.isJsonObject()) {\n        JsonObject obj = json.getAsJsonObject();\n        total++;\n        for (Map.Entry<String, JsonElement> entry : obj.entrySet()) {\n            if (entry.getValue().isJsonPrimitive() && entry.getValue().getAsJsonPrimitive().isBoolean()) {\n                typed++;\n            }\n        }\n    }\n \n    if (total == 0) {\n        return 100.0;\n    }\n    return ((double) typed / (double) total) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..639a94c9 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,35 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    Gson gson = new Gson();\n+    JsonElement json = gson.fromJson(jsonStr, JsonElement.class);\n+    int typed = 0;\n+    int total = 0;\n+ \n+    if (json.isJsonArray()) {\n+        JsonArray arr = json.getAsJsonArray();\n+        for (JsonElement element : arr) {\n+            total++;\n+            if (element.isJsonPrimitive() && element.getAsJsonPrimitive().isBoolean()) {\n+                typed++;\n+            }\n+        }\n+    } else if (json.isJsonObject()) {\n+        JsonObject obj = json.getAsJsonObject();\n+        total++;\n+        for (Map.Entry<String, JsonElement> entry : obj.entrySet()) {\n+            if (entry.getValue().isJsonPrimitive() && entry.getValue().getAsJsonPrimitive().isBoolean()) {\n+                typed++;\n+            }\n+        }\n+    }\n+ \n+    if (total == 0) {\n+        return 100.0;\n+    }\n+    return ((double) typed / (double) total) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}