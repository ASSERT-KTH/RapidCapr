{
    "patch": "public int getprop() {\n    try {\n        Process process = Runtime.getRuntime().exec(new String[] {\"/system/bin/getprop\", \"my.prop\"});\n        InputStream inputStream = process.getInputStream();\n        String output = readFully(inputStream);\n        inputStream.close();\n        return Integer.parseInt(output);\n    } catch (IOException e) {\n        e.printStackTrace();\n        return -1;\n    }\n}\n\nprivate String readFully(InputStream inputStream) throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    byte[] buffer = new byte[1024];\n    int length = 0;\n    while ((length = inputStream.read(buffer)) != -1) {\n        baos.write(buffer, 0, length);\n    }\n    return baos.toString(\"UTF-8\");\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2f16e334 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public int getprop() {\n+    try {\n+        Process process = Runtime.getRuntime().exec(new String[] {\"/system/bin/getprop\", \"my.prop\"});\n+        InputStream inputStream = process.getInputStream();\n+        String output = readFully(inputStream);\n+        inputStream.close();\n+        return Integer.parseInt(output);\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+        return -1;\n+    }\n+}\n+\n+private String readFully(InputStream inputStream) throws IOException {\n+    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+    byte[] buffer = new byte[1024];\n+    int length = 0;\n+    while ((length = inputStream.read(buffer)) != -1) {\n+        baos.write(buffer, 0, length);\n+    }\n+    return baos.toString(\"UTF-8\");\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}