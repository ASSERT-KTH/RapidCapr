{
    "patch": "  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    List<Node> parameters = new ArrayList<>(functionType.getParameters());\n    int numParams = parameters.size();\n    Node lastParam = numParams > 0 ? parameters.get(numParams - 1) : null;\n    Node varArgArrayNode = functionType.getVarArgsArrayNode();\n    boolean hasVarArgs = varArgArrayNode != null;\n    if (hasVarArgs) {\n      // If the function has variable arguments, remove the last formal parameter\n      // from the list of parameters and set its type to the var_args array type.\n      parameters.remove(lastParam);\n      lastParam.setJSType(getJSType(varArgArrayNode));\n    }\n\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    while (arguments.hasNext()) {\n      // If there are no parameters left in the list, then the while loop\n      // above implies that this must be a var_args function.\n      if (!parameters.hasNext()) {\n        if (!hasVarArgs) {\n          // Too many arguments\n          report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(ordinal), String.valueOf(numParams),\n              \" and no more\");\n          return;\n        } else {\n          // Bind the remaining arguments to the var_args array.\n          while (arguments.hasNext()) {\n            argument = arguments.next();\n            ordinal++;\n            validator.expectArgumentMatchesParameter(t, argument,\n                getJSType(argument), getJSType(lastParam), call, ordinal);\n          }\n          return;\n        }\n      }\n\n      parameter = parameters.next();\n      argument = arguments.next();\n      ordinal++;\n\n      validator.expectArgumentMatchesParameter(t, argument,\n        getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..3c5d619f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1401,20 +1401,50 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n+    List<Node> parameters = new ArrayList<>(functionType.getParameters());\n+    int numParams = parameters.size();\n+    Node lastParam = numParams > 0 ? parameters.get(numParams - 1) : null;\n+    Node varArgArrayNode = functionType.getVarArgsArrayNode();\n+    boolean hasVarArgs = varArgArrayNode != null;\n+    if (hasVarArgs) {\n+      // If the function has variable arguments, remove the last formal parameter\n+      // from the list of parameters and set its type to the var_args array type.\n+      parameters.remove(lastParam);\n+      lastParam.setJSType(getJSType(varArgArrayNode));\n+    }\n+\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n+    while (arguments.hasNext()) {\n       // If there are no parameters left in the list, then the while loop\n       // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n+      if (!parameters.hasNext()) {\n+        if (!hasVarArgs) {\n+          // Too many arguments\n+          report(t, call, WRONG_ARGUMENT_COUNT,\n+              validator.getReadableJSTypeName(call.getFirstChild(), false),\n+              String.valueOf(ordinal), String.valueOf(numParams),\n+              \" and no more\");\n+          return;\n+        } else {\n+          // Bind the remaining arguments to the var_args array.\n+          while (arguments.hasNext()) {\n+            argument = arguments.next();\n+            ordinal++;\n+            validator.expectArgumentMatchesParameter(t, argument,\n+                getJSType(argument), getJSType(lastParam), call, ordinal);\n+          }\n+          return;\n+        }\n+      }\n+\n+      parameter = parameters.next();\n       argument = arguments.next();\n       ordinal++;\n \n       validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+        getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n \n     int numArgs = call.getChildCount() - 1;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}