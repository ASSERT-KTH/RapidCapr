{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealMatrix d = dec.getD();\n    final double[] realEigenvalues = d.getRealPart();\n    final double[] imagEigenvalues = d.getImagPart();\n    final double tolerance = 1e-10;\n\n    // Check if matrix is positive definite\n    for (int i = 0; i < realEigenvalues.length; i++) {\n        if (realEigenvalues[i] < -tolerance) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        }\n        if (Math.abs(imagEigenvalues[i]) > tolerance) {\n            throw new IllegalArgumentException(\"Matrix is not real symmetric\");\n        }\n    }\n\n    // Compute the diagonal matrix of the square root of the eigenvalues\n    for (int i = 0; i < realEigenvalues.length; i++) {\n        realEigenvalues[i] = Math.sqrt(Math.max(realEigenvalues[i], 0.0));\n        imagEigenvalues[i] = 0.0;\n    }\n    final RealMatrix sqrtD = new DiagonalMatrix(realEigenvalues, imagEigenvalues, tolerance);\n\n    // Compute the square root of the matrix\n    final RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..fed2ac3cc 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,34 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d = dec.getD();\n+    final double[] realEigenvalues = d.getRealPart();\n+    final double[] imagEigenvalues = d.getImagPart();\n+    final double tolerance = 1e-10;\n+\n+    // Check if matrix is positive definite\n+    for (int i = 0; i < realEigenvalues.length; i++) {\n+        if (realEigenvalues[i] < -tolerance) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        }\n+        if (Math.abs(imagEigenvalues[i]) > tolerance) {\n+            throw new IllegalArgumentException(\"Matrix is not real symmetric\");\n+        }\n+    }\n+\n+    // Compute the diagonal matrix of the square root of the eigenvalues\n+    for (int i = 0; i < realEigenvalues.length; i++) {\n+        realEigenvalues[i] = Math.sqrt(Math.max(realEigenvalues[i], 0.0));\n+        imagEigenvalues[i] = 0.0;\n     }\n+    final RealMatrix sqrtD = new DiagonalMatrix(realEigenvalues, imagEigenvalues, tolerance);\n+\n+    // Compute the square root of the matrix\n+    final RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}