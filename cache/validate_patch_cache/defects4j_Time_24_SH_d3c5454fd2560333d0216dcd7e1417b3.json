{
    "patch": "                if (millis < iMinMillis || millis > iMaxMillis) {\n                    if (text == null) {\n                        throw new IllegalArgumentException();\n                    } else {\n                        IllegalFieldValueException e = new IllegalFieldValueException(\n                                savedFields[i].iField.getType(),\n                                Integer.valueOf(savedFields[i].get()), null, null);\n                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                        throw e;\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..0a3760de 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,16 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                if (millis < iMinMillis || millis > iMaxMillis) {\n+                    if (text == null) {\n+                        throw new IllegalArgumentException();\n+                    } else {\n+                        IllegalFieldValueException e = new IllegalFieldValueException(\n+                                savedFields[i].iField.getType(),\n+                                Integer.valueOf(savedFields[i].get()), null, null);\n+                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                        throw e;\n+                    }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}