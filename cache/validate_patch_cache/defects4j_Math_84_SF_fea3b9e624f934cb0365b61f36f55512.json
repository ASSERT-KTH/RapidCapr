{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n            incrementIterationsCounter();\n\n            // find best and worst points\n            RealPointValuePair best = simplex[0];\n            RealPointValuePair worst = simplex[simplex.length - 1];\n\n            // compute the centroid of all points except the worst one\n            RealPoint centroid = new RealPoint(simplex[0].getPoint().length);\n            for (int i = 0; i < simplex.length - 1; i++) {\n                centroid.addToEntry(i, simplex[i].getPointRef()[i]);\n            }\n            centroid.scalarMultiply(1.0 / simplex.length - 1);\n\n            // compute reflection point\n            RealPointValuePair reflected = evaluateNewSimplex(worst, centroid, alpha, comparator);\n\n            int comp = comparator.compare(reflected, best);\n            if (comp < 0) {\n                // reflection point is better than the current best point\n                RealPointValuePair expanded = evaluateNewSimplex(worst, centroid, gamma, comparator);\n                simplex[simplex.length - 1] = comparator.compare(expanded, reflected) <= 0 ? expanded : reflected;\n            } else if (comp >= 0 && comp < simplex.length - 1) {\n                // reflection point is not better than the current best point, but it is better than\n                // the second larger point, so it is still promising\n                simplex[simplex.length - 1] = reflected;\n            } else {\n                // current worst point is replaced with new one obtained from the contraction\n                RealPoint contracted = new RealPoint(best.getPoint());\n                for (int i = 0; i < simplex.length - 1; i++) {\n                    contracted.addToEntry(i, worst.getPointRef()[i]);\n                }\n                contracted.scalarMultiply(0.5);\n\n                RealPointValuePair contractedPair = evaluateNewSimplex(worst, contracted, rho, comparator);\n\n                if (comparator.compare(contractedPair, worst) < 0) {\n                    simplex[simplex.length - 1] = contractedPair;\n                } else {\n                    // if the contraction still leads to a point worse than the worst, then shrink\n                    for (int i = 1; i < simplex.length; i++) {\n                        RealPointValuePair pair = evaluateNewSimplex(simplex[0], simplex[i].getPoint(), sigma, comparator);\n                        simplex[i] = pair;\n                    }\n                }\n            }\n\n            // sort all points\n            Arrays.sort(simplex, comparator.reversed());\n\n            // Check for convergence\n            if (getIterations() > 0 && checker != null &&\n                    checker.converged(getIterations(), best, simplex[simplex.length - 1])) {\n                return;\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..7386ec650 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -62,40 +62,61 @@ public class MultiDirectional extends DirectSearchOptimizer {\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n-\n             incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+            // find best and worst points\n+            RealPointValuePair best = simplex[0];\n+            RealPointValuePair worst = simplex[simplex.length - 1];\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+            // compute the centroid of all points except the worst one\n+            RealPoint centroid = new RealPoint(simplex[0].getPoint().length);\n+            for (int i = 0; i < simplex.length - 1; i++) {\n+                centroid.addToEntry(i, simplex[i].getPointRef()[i]);\n+            }\n+            centroid.scalarMultiply(1.0 / simplex.length - 1);\n+\n+            // compute reflection point\n+            RealPointValuePair reflected = evaluateNewSimplex(worst, centroid, alpha, comparator);\n+\n+            int comp = comparator.compare(reflected, best);\n+            if (comp < 0) {\n+                // reflection point is better than the current best point\n+                RealPointValuePair expanded = evaluateNewSimplex(worst, centroid, gamma, comparator);\n+                simplex[simplex.length - 1] = comparator.compare(expanded, reflected) <= 0 ? expanded : reflected;\n+            } else if (comp >= 0 && comp < simplex.length - 1) {\n+                // reflection point is not better than the current best point, but it is better than\n+                // the second larger point, so it is still promising\n+                simplex[simplex.length - 1] = reflected;\n+            } else {\n+                // current worst point is replaced with new one obtained from the contraction\n+                RealPoint contracted = new RealPoint(best.getPoint());\n+                for (int i = 0; i < simplex.length - 1; i++) {\n+                    contracted.addToEntry(i, worst.getPointRef()[i]);\n+                }\n+                contracted.scalarMultiply(0.5);\n+\n+                RealPointValuePair contractedPair = evaluateNewSimplex(worst, contracted, rho, comparator);\n+\n+                if (comparator.compare(contractedPair, worst) < 0) {\n+                    simplex[simplex.length - 1] = contractedPair;\n+                } else {\n+                    // if the contraction still leads to a point worse than the worst, then shrink\n+                    for (int i = 1; i < simplex.length; i++) {\n+                        RealPointValuePair pair = evaluateNewSimplex(simplex[0], simplex[i].getPoint(), sigma, comparator);\n+                        simplex[i] = pair;\n+                    }\n                 }\n-\n-                return;\n-\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            // sort all points\n+            Arrays.sort(simplex, comparator.reversed());\n \n-            // check convergence\n+            // Check for convergence\n+            if (getIterations() > 0 && checker != null &&\n+                    checker.converged(getIterations(), best, simplex[simplex.length - 1])) {\n                 return;\n             }\n-\n         }\n-\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}