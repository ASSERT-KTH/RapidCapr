{
    "patch": "Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\nif (mockCandidate != null) {\n    if (field.getType().isAssignableFrom(mockCandidate.getClass())) {\n        field.setAccessible(true);\n        try {\n            Object oldValue = field.get(fieldInstance);\n            if (oldValue != null && field.getType().isAssignableFrom(oldValue.getClass())) {\n                // Only nullify the old value if it's not compatible with the new mock\n                field.set(fieldInstance, null);\n                for (Field innerField : oldValue.getClass().getDeclaredFields()) {\n                    innerField.setAccessible(true);\n                    if (innerField.get(oldValue) == fieldInstance) {\n                        innerField.set(oldValue, null);\n                    }\n                }\n            }\n            field.set(fieldInstance, mockCandidate);\n            for (Field innerField : mockCandidate.getClass().getDeclaredFields()) {\n                innerField.setAccessible(true);\n                if (innerField.get(mockCandidate) == oldValue) {\n                    innerField.set(mockCandidate, mockCandidateFilter.filterCandidate(mocks, innerField, mockCandidate).thenInject());\n                }\n            }\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(e);\n        }\n    } else {\n        throw new IllegalArgumentException(String.format(\"Cannot set %s %s to an object of type %s\", field.getType().getCanonicalName(), field.getName(), mockCandidate.getClass().getCanonicalName()));\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..6e14b71e6 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,39 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+if (mockCandidate != null) {\n+    if (field.getType().isAssignableFrom(mockCandidate.getClass())) {\n+        field.setAccessible(true);\n+        try {\n+            Object oldValue = field.get(fieldInstance);\n+            if (oldValue != null && field.getType().isAssignableFrom(oldValue.getClass())) {\n+                // Only nullify the old value if it's not compatible with the new mock\n+                field.set(fieldInstance, null);\n+                for (Field innerField : oldValue.getClass().getDeclaredFields()) {\n+                    innerField.setAccessible(true);\n+                    if (innerField.get(oldValue) == fieldInstance) {\n+                        innerField.set(oldValue, null);\n+                    }\n+                }\n+            }\n+            field.set(fieldInstance, mockCandidate);\n+            for (Field innerField : mockCandidate.getClass().getDeclaredFields()) {\n+                innerField.setAccessible(true);\n+                if (innerField.get(mockCandidate) == oldValue) {\n+                    innerField.set(mockCandidate, mockCandidateFilter.filterCandidate(mocks, innerField, mockCandidate).thenInject());\n+                }\n+            }\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    } else {\n+        throw new IllegalArgumentException(String.format(\"Cannot set %s %s to an object of type %s\", field.getType().getCanonicalName(), field.getName(), mockCandidate.getClass().getCanonicalName()));\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "java.lang.IllegalArgumentException: Cannot set org.mockitousage.annotation.DeprecatedAnnotationEngineApiTest.Dependency dependency to an object of type null",
    "test_result": "FAIL"
}