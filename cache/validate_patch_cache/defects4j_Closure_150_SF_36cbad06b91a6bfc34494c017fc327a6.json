{
    "patch": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n      \n      attachLiteralTypes(n);\n      \n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (NodeUtil.isFunctionDeclaration(n) || \n              (NodeUtil.isFunctionExpression(n) && !NodeUtil.isAssignmentTarget(n)))  {\n            defineDeclaredFunction(n, parent);\n          }\n          break;\n  \n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        \n        case Token.LP:\n          if (parent.getType() == Token.FUNCTION && \n              n.getNext().getType() == Token.BLOCK &&\n              NodeUtil.isFunctionExpression(parent) &&\n              parent.getParent().getType() != Token.ASSIGN) {\n            handleFunctionInputs(n.getNext().getFirstChild());\n          }\n          break;\n        \n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..98efb113 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1442,23 +1442,30 @@ final class TypedScopeCreator implements ScopeCreator {\n      */\n     @Override public void visit(NodeTraversal t, Node n, Node parent) {\n       if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n+      \n       attachLiteralTypes(n);\n+      \n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+          if (NodeUtil.isFunctionDeclaration(n) || \n+              (NodeUtil.isFunctionExpression(n) && !NodeUtil.isAssignmentTarget(n)))  {\n+            defineDeclaredFunction(n, parent);\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n+  \n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n+        \n+        case Token.LP:\n+          if (parent.getType() == Token.FUNCTION && \n+              n.getNext().getType() == Token.BLOCK &&\n+              NodeUtil.isFunctionExpression(parent) &&\n+              parent.getParent().getType() != Token.ASSIGN) {\n+            handleFunctionInputs(n.getNext().getFirstChild());\n+          }\n+          break;\n+        \n         case Token.VAR:\n           defineVar(n, parent);\n           break;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}