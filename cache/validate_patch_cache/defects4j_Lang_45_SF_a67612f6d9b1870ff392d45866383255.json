{
    "patch": "public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n    if (str == null || str.isEmpty()) { // Check for null or empty input string\n        return str;\n    }\n\n    if (lower >= str.length()) { // Check if lower value is greater than or equal to string length\n        return str;\n    }\n\n    if (upper == -1 || upper > str.length()) { // Set upper value to string length if -1 or greater than string length\n        upper = str.length();\n    }\n\n    if (upper < lower) { // Set upper value to lower value if it is less than lower value\n        upper = lower;\n    }\n\n    int index = StringUtils.indexOf(str, \" \", lower);\n\n    if (index == -1 || index > upper) { // If no space is found or index is greater than upper, return abbreviated string\n        String abbreviated = str.substring(0, Math.min(upper, str.length()));\n        if (upper != str.length() && appendToEnd != null) {\n            abbreviated += appendToEnd;\n        }\n        return abbreviated;\n    } else { // Otherwise, return abbreviated string with appendToEnd string\n        String abbreviated = str.substring(0, index);\n        if (appendToEnd != null) {\n            abbreviated += appendToEnd;\n        }\n        return abbreviated;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/WordUtils.java b/src/java/org/apache/commons/lang/WordUtils.java\nindex 42bd883e..91492803 100644\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n@@ -602,43 +602,38 @@ public class WordUtils {\n      * @return the abbreviated String.\n      * @since 2.4\n      */\n-    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n-        // initial parameter checks\n-        if (str == null) {\n-            return null;\n-        }\n-        if (str.length() == 0) {\n-            return StringUtils.EMPTY;\n-        }\n+public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n+    if (str == null || str.isEmpty()) { // Check for null or empty input string\n+        return str;\n+    }\n \n-        // if the lower value is greater than the length of the string,\n-        // set to the length of the string\n-        // if the upper value is -1 (i.e. no limit) or is greater\n-        // than the length of the string, set to the length of the string\n-        if (upper == -1 || upper > str.length()) {\n-            upper = str.length();\n-        }\n-        // if upper is less than lower, raise it to lower\n-        if (upper < lower) {\n-            upper = lower;\n-        }\n+    if (lower >= str.length()) { // Check if lower value is greater than or equal to string length\n+        return str;\n+    }\n \n-        StringBuffer result = new StringBuffer();\n-        int index = StringUtils.indexOf(str, \" \", lower);\n-        if (index == -1) {\n-            result.append(str.substring(0, upper));\n-            // only if abbreviation has occured do we append the appendToEnd value\n-            if (upper != str.length()) {\n-                result.append(StringUtils.defaultString(appendToEnd));\n-            }\n-        } else if (index > upper) {\n-            result.append(str.substring(0, upper));\n-            result.append(StringUtils.defaultString(appendToEnd));\n-        } else {\n-            result.append(str.substring(0, index));\n-            result.append(StringUtils.defaultString(appendToEnd));\n+    if (upper == -1 || upper > str.length()) { // Set upper value to string length if -1 or greater than string length\n+        upper = str.length();\n+    }\n+\n+    if (upper < lower) { // Set upper value to lower value if it is less than lower value\n+        upper = lower;\n+    }\n+\n+    int index = StringUtils.indexOf(str, \" \", lower);\n+\n+    if (index == -1 || index > upper) { // If no space is found or index is greater than upper, return abbreviated string\n+        String abbreviated = str.substring(0, Math.min(upper, str.length()));\n+        if (upper != str.length() && appendToEnd != null) {\n+            abbreviated += appendToEnd;\n         }\n-        return result.toString();\n+        return abbreviated;\n+    } else { // Otherwise, return abbreviated string with appendToEnd string\n+        String abbreviated = str.substring(0, index);\n+        if (appendToEnd != null) {\n+            abbreviated += appendToEnd;\n+        }\n+        return abbreviated;\n     }\n+}\n \n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}