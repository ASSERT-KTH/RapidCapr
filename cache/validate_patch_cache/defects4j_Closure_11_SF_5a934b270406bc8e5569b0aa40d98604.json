{
    "patch": "public void getprop(Properties props, String prop, String defaultValue) {\n    String value = props.getProperty(prop, defaultValue);\n    if (value.equalsIgnoreCase(\"true\")) {\n        System.out.println(\"'\" + prop + \"' is true\");\n    } else if (value.equalsIgnoreCase(\"false\")) {\n        System.out.println(\"'\" + prop + \"' is false\");\n    } else {\n        System.out.println(\"'\" + prop + \"' is \" + value);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..5d9c583a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public void getprop(Properties props, String prop, String defaultValue) {\n+    String value = props.getProperty(prop, defaultValue);\n+    if (value.equalsIgnoreCase(\"true\")) {\n+        System.out.println(\"'\" + prop + \"' is true\");\n+    } else if (value.equalsIgnoreCase(\"false\")) {\n+        System.out.println(\"'\" + prop + \"' is false\");\n+    } else {\n+        System.out.println(\"'\" + prop + \"' is \" + value);\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}