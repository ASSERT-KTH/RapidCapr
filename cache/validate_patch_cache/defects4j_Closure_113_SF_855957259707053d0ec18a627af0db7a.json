{
    "patch": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n\n    if (left == null || left.getNext() == null) {\n        return;\n    }\n\n    ProvidedName providedObj;\n    String name = null;\n\n    if (left.isName() && left.getString().equals(\"goog\")) {\n        Node right = left.getNext();\n\n        if (right.isGetProp() && right.getNext().getNext() == null\n                && right.getLastChild().getString().equals(\"require\")) {\n            Node child = right.getNext();\n            if (!child.isString()) {\n                return;\n            }\n\n            name = child.getString();\n            providedObj = providedNames.get(name);\n\n            if (providedObj != null) {\n                if (providedObj.isExplicitlyProvided()) {\n                    JSModule providedModule = providedObj.explicitModule;\n                    Preconditions.checkNotNull(providedModule);\n\n                    JSModule module = t.getModule();\n                    if (moduleGraph != null\n                            && module != providedModule\n                            && !moduleGraph.dependsOn(module,\n                                    providedModule)) {\n                        compiler.report(\n                                t.makeError(n, XMODULE_REQUIRE_ERROR,\n                                        name, providedModule.getName(),\n                                        module.getName()));\n                    }\n                }\n            } else {\n                unrecognizedRequires.add(\n                        new UnrecognizedRequire(n, name,\n                                t.getSourceName()));\n            }\n\n            maybeAddToSymbolTable(left);\n            maybeAddStringNodeToSymbolTable(child);\n\n            parent.detachFromParent();\n            compiler.reportCodeChange();\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..769d3533 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -292,46 +292,59 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n   /**\n    * Handles a goog.require call.\n    */\n-  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n+private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n     Node left = n.getFirstChild();\n-    Node arg = left.getNext();\n-    if (verifyLastArgumentIsString(t, left, arg)) {\n-      String ns = arg.getString();\n-      ProvidedName provided = providedNames.get(ns);\n-      if (provided == null || !provided.isExplicitlyProvided()) {\n-        unrecognizedRequires.add(\n-            new UnrecognizedRequire(n, ns, t.getSourceName()));\n-      } else {\n-        JSModule providedModule = provided.explicitModule;\n \n-        // This must be non-null, because there was an explicit provide.\n-        Preconditions.checkNotNull(providedModule);\n+    if (left == null || left.getNext() == null) {\n+        return;\n+    }\n \n-        JSModule module = t.getModule();\n-        if (moduleGraph != null &&\n-            module != providedModule &&\n-            !moduleGraph.dependsOn(module, providedModule)) {\n-          compiler.report(\n-              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n-                  providedModule.getName(),\n-                  module.getName()));\n-        }\n-      }\n+    ProvidedName providedObj;\n+    String name = null;\n \n-      maybeAddToSymbolTable(left);\n-      maybeAddStringNodeToSymbolTable(arg);\n+    if (left.isName() && left.getString().equals(\"goog\")) {\n+        Node right = left.getNext();\n \n-      // Requires should be removed before further processing.\n-      // Some clients run closure pass multiple times, first with\n-      // the checks for broken requires turned off. In these cases, we\n-      // allow broken requires to be preserved by the first run to\n-      // let them be caught in the subsequent run.\n-      if (provided != null) {\n-        parent.detachFromParent();\n-        compiler.reportCodeChange();\n-      }\n+        if (right.isGetProp() && right.getNext().getNext() == null\n+                && right.getLastChild().getString().equals(\"require\")) {\n+            Node child = right.getNext();\n+            if (!child.isString()) {\n+                return;\n+            }\n+\n+            name = child.getString();\n+            providedObj = providedNames.get(name);\n+\n+            if (providedObj != null) {\n+                if (providedObj.isExplicitlyProvided()) {\n+                    JSModule providedModule = providedObj.explicitModule;\n+                    Preconditions.checkNotNull(providedModule);\n+\n+                    JSModule module = t.getModule();\n+                    if (moduleGraph != null\n+                            && module != providedModule\n+                            && !moduleGraph.dependsOn(module,\n+                                    providedModule)) {\n+                        compiler.report(\n+                                t.makeError(n, XMODULE_REQUIRE_ERROR,\n+                                        name, providedModule.getName(),\n+                                        module.getName()));\n+                    }\n+                }\n+            } else {\n+                unrecognizedRequires.add(\n+                        new UnrecognizedRequire(n, name,\n+                                t.getSourceName()));\n+            }\n+\n+            maybeAddToSymbolTable(left);\n+            maybeAddStringNodeToSymbolTable(child);\n+\n+            parent.detachFromParent();\n+            compiler.reportCodeChange();\n+        }\n     }\n-  }\n+}\n \n   /**\n    * Handles a goog.provide call.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}