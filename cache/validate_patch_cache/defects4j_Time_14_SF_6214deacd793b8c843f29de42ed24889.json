{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    \n    Instant instant = partial.toDateTime(DateTime.now()).toInstant();\n    int maxRange = partial.getFieldType(fieldIndex).getField(iChronology).getMaximumValue(instant);\n    int minRange = partial.getFieldType(fieldIndex).getField(iChronology).getMinimumValue(instant);\n    int curValue = values[fieldIndex];\n    int newValue = curValue + valueToAdd;\n    \n    // Handle wraparound cases\n    if (newValue > maxRange) {\n        int diff = newValue - maxRange;\n        int[] newValues = add(partial, fieldIndex - 1, values, 1);\n        newValues[fieldIndex] = minRange + diff - 1;\n        return newValues;\n    } else if (newValue < minRange) {\n        int diff = minRange - newValue;\n        int[] newValues = add(partial, fieldIndex - 1, values, -1);\n        newValues[fieldIndex] = maxRange - diff + 1;\n        return newValues;\n    }\n    \n    // No wraparound needed\n    values[fieldIndex] = newValue;\n    return values;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..fb38989a 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,34 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    \n+    Instant instant = partial.toDateTime(DateTime.now()).toInstant();\n+    int maxRange = partial.getFieldType(fieldIndex).getField(iChronology).getMaximumValue(instant);\n+    int minRange = partial.getFieldType(fieldIndex).getField(iChronology).getMinimumValue(instant);\n+    int curValue = values[fieldIndex];\n+    int newValue = curValue + valueToAdd;\n+    \n+    // Handle wraparound cases\n+    if (newValue > maxRange) {\n+        int diff = newValue - maxRange;\n+        int[] newValues = add(partial, fieldIndex - 1, values, 1);\n+        newValues[fieldIndex] = minRange + diff - 1;\n+        return newValues;\n+    } else if (newValue < minRange) {\n+        int diff = minRange - newValue;\n+        int[] newValues = add(partial, fieldIndex - 1, values, -1);\n+        newValues[fieldIndex] = maxRange - diff + 1;\n+        return newValues;\n     }\n+    \n+    // No wraparound needed\n+    values[fieldIndex] = newValue;\n+    return values;\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}