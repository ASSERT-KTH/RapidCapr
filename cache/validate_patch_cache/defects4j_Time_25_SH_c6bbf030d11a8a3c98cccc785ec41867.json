{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    long prevLocal = previousTransition(instantAdjusted);\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n    boolean first = (prevLocal == prevAdjusted);\n    boolean second = (nextLocal == nextAdjusted);\n    if (first != second) {\n        if (first) {\n            return getOffset(prevAdjusted);\n        }\n        else {\n            return offsetLocal;\n        }\n    }\n    else if (first && second) {\n        return offsetAdjusted;\n    }\n    else if ((offsetLocal > 0 && offsetAdjusted < 0) || (offsetLocal < 0 && offsetAdjusted > 0)) {\n        boolean goingForwards = nextLocal > prevLocal;\n        if (goingForwards) {\n            if (nextLocal <= instantLocal - offsetAdjusted) {\n                return offsetLocal;\n            }\n        }\n        else {\n            if (prevLocal >= instantLocal - offsetAdjusted) {\n                return offsetLocal;\n            }\n        }\n    }\n}\n\n// Return adjusted offset if everything is OK\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..2b73ca12 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,41 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    long prevLocal = previousTransition(instantAdjusted);\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+    boolean first = (prevLocal == prevAdjusted);\n+    boolean second = (nextLocal == nextAdjusted);\n+    if (first != second) {\n+        if (first) {\n+            return getOffset(prevAdjusted);\n+        }\n+        else {\n+            return offsetLocal;\n+        }\n+    }\n+    else if (first && second) {\n+        return offsetAdjusted;\n+    }\n+    else if ((offsetLocal > 0 && offsetAdjusted < 0) || (offsetLocal < 0 && offsetAdjusted > 0)) {\n+        boolean goingForwards = nextLocal > prevLocal;\n+        if (goingForwards) {\n+            if (nextLocal <= instantLocal - offsetAdjusted) {\n+                return offsetLocal;\n+            }\n+        }\n+        else {\n+            if (prevLocal >= instantLocal - offsetAdjusted) {\n+                return offsetLocal;\n+            }\n+        }\n+    }\n+}\n+\n+// Return adjusted offset if everything is OK\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "java.lang.IllegalArgumentException: Illegal instant due to time zone offset transition: 2006-10-01T07:00:00.000",
    "test_result": "FAIL"
}