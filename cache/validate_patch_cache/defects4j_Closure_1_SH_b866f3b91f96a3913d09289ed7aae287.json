{
    "patch": "      Node param = argList.getFirstChild();\n      while (param != null && !referenced.contains(fnScope.getVar(param.getString()))) {\n        argList.removeChild(param);\n        param = argList.getFirstChild();\n        compiler.reportCodeChange();\n      }\n      Node lastParam = argList.getLastChild();\n      while (lastParam != null && !referenced.contains(fnScope.getVar(lastParam.getString()))) {\n        argList.removeChild(lastParam);\n        lastParam = argList.getLastChild();\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..109291d7 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,17 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node param = argList.getFirstChild();\n+      while (param != null && !referenced.contains(fnScope.getVar(param.getString()))) {\n+        argList.removeChild(param);\n+        param = argList.getFirstChild();\n+        compiler.reportCodeChange();\n+      }\n+      Node lastParam = argList.getLastChild();\n+      while (lastParam != null && !referenced.contains(fnScope.getVar(lastParam.getString()))) {\n+        argList.removeChild(lastParam);\n+        lastParam = argList.getLastChild();\n+        compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}