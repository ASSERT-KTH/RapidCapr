{
    "patch": "                if (e.getDateTimeFieldType() == DateTimeFieldType.year()) {\n                    int year;\n                    long instant = iMillis;\n                    for (int i = 0; i < count; i++) {\n                        SavedField sf = savedFields[i];\n                        if (sf.isSaved() == false) {\n                            instant = sf.set(instant, false);\n                        }\n                    }\n                    year = iChrono.year().get(instant);\n                    throw new IllegalFieldValueException(e.getDateTimeField(), Integer.valueOf(year), e.getMessage());\n                }\n                throw e;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..16da455a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,19 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                if (e.getDateTimeFieldType() == DateTimeFieldType.year()) {\n+                    int year;\n+                    long instant = iMillis;\n+                    for (int i = 0; i < count; i++) {\n+                        SavedField sf = savedFields[i];\n+                        if (sf.isSaved() == false) {\n+                            instant = sf.set(instant, false);\n+                        }\n+                    }\n+                    year = iChrono.year().get(instant);\n+                    throw new IllegalFieldValueException(e.getDateTimeField(), Integer.valueOf(year), e.getMessage());\n+                }\n+                throw e;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}