{
    "patch": "if (NodeUtil.isGet(lhs) || NodeUtil.isGet(rhs)) {\n  Node get = NodeUtil.isGet(lhs) ? lhs : rhs;\n  Node grandparent = parent.getParent();\n\n  // Don't traverse gets of object literals, e.g. ({a: f()}) or the lhs\n  // of another assignment, or the prototype property of an assignment.\n  if (grandparent.getType() == Token.OBJECTLIT ||\n      grandparent.getType() == Token.ASSIGN ||\n      (grandparent.getType() == Token.GETPROP &&\n       grandparent.getLastChild().getString().equals(\"prototype\"))) {\n    return false;\n  }\n\n  if (grandparent.getType() == Token.CALL && NodeUtil.isGet(grandparent.getFirstChild())) {\n    // Don't traverse methods that are lending `this` via a loose call\n    // e.g.\n    //     fn.apply(this, args);\n    return false;\n  }\n\n  JSDocInfo info = NodeUtil.getBestJSDocInfo(get);\n  if (info != null && info.hasLendingInfo() && !info.isLendThis()) {\n    // Don't traverse is the MethodData indicates that the method's `this`\n    // value is lent to a parameter.\n    // e.g.\n    //   var that = this;\n    //   function callIt(fn) { fn(that); }\n    MethodType methodType = info.getLendingInfo().getMethodType();\n    if (methodType == MethodType.LEND_PARAMETERS) {\n      return false;\n    }\n  }\n}\n\nif (n.getType() == Token.FUNCTION) {\n  // Don't traverse functions that are constructors or have the @this\n  // or @override annotation.\n  JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n  if (jsDoc != null &&\n      (jsDoc.isConstructor() ||\n       jsDoc.isInterface() ||\n       jsDoc.hasThisType() ||\n       jsDoc.isOverride())) {\n    return false;\n  }\n\n  // Don't traverse functions unless they would normally\n  // be able to have a @this annotation associated with them. e.g.,\n  // var a = function() { }; // or\n  // function a() {} // or\n  // a.x = function() {}; // or\n  // var a = {x: function() {}};\n  int pType = parent.getType();\n  if (!(pType == Token.BLOCK ||\n        pType == Token.SCRIPT ||\n        pType == Token.NAME ||\n        pType == Token.ASSIGN ||\n        pType == Token.OBJECTLIT ||\n        pType == Token.CALL ||  // (e.g. a[b]())\n        // object literal keys\n        pType == Token.STRING ||\n        pType == Token.NUMBER)) {\n    return false;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..c5feaa76 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,71 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+if (NodeUtil.isGet(lhs) || NodeUtil.isGet(rhs)) {\n+  Node get = NodeUtil.isGet(lhs) ? lhs : rhs;\n+  Node grandparent = parent.getParent();\n+\n+  // Don't traverse gets of object literals, e.g. ({a: f()}) or the lhs\n+  // of another assignment, or the prototype property of an assignment.\n+  if (grandparent.getType() == Token.OBJECTLIT ||\n+      grandparent.getType() == Token.ASSIGN ||\n+      (grandparent.getType() == Token.GETPROP &&\n+       grandparent.getLastChild().getString().equals(\"prototype\"))) {\n+    return false;\n+  }\n+\n+  if (grandparent.getType() == Token.CALL && NodeUtil.isGet(grandparent.getFirstChild())) {\n+    // Don't traverse methods that are lending `this` via a loose call\n+    // e.g.\n+    //     fn.apply(this, args);\n+    return false;\n+  }\n+\n+  JSDocInfo info = NodeUtil.getBestJSDocInfo(get);\n+  if (info != null && info.hasLendingInfo() && !info.isLendThis()) {\n+    // Don't traverse is the MethodData indicates that the method's `this`\n+    // value is lent to a parameter.\n+    // e.g.\n+    //   var that = this;\n+    //   function callIt(fn) { fn(that); }\n+    MethodType methodType = info.getLendingInfo().getMethodType();\n+    if (methodType == MethodType.LEND_PARAMETERS) {\n+      return false;\n+    }\n+  }\n+}\n+\n+if (n.getType() == Token.FUNCTION) {\n+  // Don't traverse functions that are constructors or have the @this\n+  // or @override annotation.\n+  JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+  if (jsDoc != null &&\n+      (jsDoc.isConstructor() ||\n+       jsDoc.isInterface() ||\n+       jsDoc.hasThisType() ||\n+       jsDoc.isOverride())) {\n+    return false;\n+  }\n+\n+  // Don't traverse functions unless they would normally\n+  // be able to have a @this annotation associated with them. e.g.,\n+  // var a = function() { }; // or\n+  // function a() {} // or\n+  // a.x = function() {}; // or\n+  // var a = {x: function() {}};\n+  int pType = parent.getType();\n+  if (!(pType == Token.BLOCK ||\n+        pType == Token.SCRIPT ||\n+        pType == Token.NAME ||\n+        pType == Token.ASSIGN ||\n+        pType == Token.OBJECTLIT ||\n+        pType == Token.CALL ||  // (e.g. a[b]())\n+        // object literal keys\n+        pType == Token.STRING ||\n+        pType == Token.NUMBER)) {\n+    return false;\n+  }\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}