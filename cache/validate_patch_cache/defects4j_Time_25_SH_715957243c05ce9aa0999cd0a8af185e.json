{
    "patch": "                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted - 1);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n                int standardOffset = getStandardOffset(nextLocal);\n                if (offsetLocal < standardOffset && nextLocal + standardOffset - offsetLocal < instantLocal) {\n                    // we are in a gap and we would use DST, use standard instead\n                    return standardOffset;\n                }\n            } else {\n                long nextLocal = previousTransition(instantAdjusted);\n                long nextAdjusted = previousTransition(instantLocal - offsetAdjusted - 1);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..5df0337b 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,18 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted - 1);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+                int standardOffset = getStandardOffset(nextLocal);\n+                if (offsetLocal < standardOffset && nextLocal + standardOffset - offsetLocal < instantLocal) {\n+                    // we are in a gap and we would use DST, use standard instead\n+                    return standardOffset;\n+                }\n+            } else {\n+                long nextLocal = previousTransition(instantAdjusted);\n+                long nextAdjusted = previousTransition(instantLocal - offsetAdjusted - 1);\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}