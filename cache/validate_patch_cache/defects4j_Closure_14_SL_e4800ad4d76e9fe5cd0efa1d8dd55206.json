{
    "patch": "// If we are coming out of the FINALLY block and there is a next sibling...\nelse if (parent.getLastChild() == node && node.getNext() != null) {\n  Node nextSibling = node.getNext();\n  while(nextSibling.isFunction()) {\n    nextSibling = nextSibling.getNext();\n  }\n  if (NodeUtil.isLoopStructure(parent) ||\n      NodeUtil.isSwitchCase(parent) &&\n          parent.getNext() != null &&\n          parent.getNext().getJSDocInfo() != null &&\n          parent.getNext().getJSDocInfo().isConstructor()) {\n    cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(nextSibling, nextSibling.getFirstChild(), cfa));\n  } else {\n    cfa.createEdge(fromNode, Branch.UNCOND, nextSibling);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..79c6d8ee 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,22 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+// If we are coming out of the FINALLY block and there is a next sibling...\n+else if (parent.getLastChild() == node && node.getNext() != null) {\n+  Node nextSibling = node.getNext();\n+  while(nextSibling.isFunction()) {\n+    nextSibling = nextSibling.getNext();\n+  }\n+  if (NodeUtil.isLoopStructure(parent) ||\n+      NodeUtil.isSwitchCase(parent) &&\n+          parent.getNext() != null &&\n+          parent.getNext().getJSDocInfo() != null &&\n+          parent.getNext().getJSDocInfo().isConstructor()) {\n+    cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(nextSibling, nextSibling.getFirstChild(), cfa));\n+  } else {\n+    cfa.createEdge(fromNode, Branch.UNCOND, nextSibling);\n+  }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}