{
    "patch": "  /**\n   * Returns true if the given name meets condition (b) for inlineable aliases.\n   */\n  private boolean isInlineableAlias(Name name) {\n    // The name must have a declaration node and an aliasing get count greater than 0.\n    if (name.getDeclaration() == null || name.aliasingGets == 0) {\n      return false;\n    }\n\n    // All refs must be aliasing gets, global gets, or call sites.\n    for (Ref ref : name.getRefs()) {\n      if (ref.type != Ref.Type.ALIASING_GET &&\n          ref.type != Ref.Type.VAR &&\n          ref.type != Ref.Type.PARAM) {\n        return false;\n      }\n    }\n\n    // All references to the name can be inlined.\n    return canInlineAllAliases(name);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..f3b7ebce 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,27 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+  /**\n+   * Returns true if the given name meets condition (b) for inlineable aliases.\n+   */\n+  private boolean isInlineableAlias(Name name) {\n+    // The name must have a declaration node and an aliasing get count greater than 0.\n+    if (name.getDeclaration() == null || name.aliasingGets == 0) {\n+      return false;\n+    }\n+\n+    // All refs must be aliasing gets, global gets, or call sites.\n+    for (Ref ref : name.getRefs()) {\n+      if (ref.type != Ref.Type.ALIASING_GET &&\n+          ref.type != Ref.Type.VAR &&\n+          ref.type != Ref.Type.PARAM) {\n+        return false;\n+      }\n+    }\n+\n+    // All references to the name can be inlined.\n+    return canInlineAllAliases(name);\n+  }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}