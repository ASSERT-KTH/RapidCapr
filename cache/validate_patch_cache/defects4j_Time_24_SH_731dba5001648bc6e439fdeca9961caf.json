{
    "patch": "            if (savedFields[i].getDateTimeField().getFieldType() == DateTimeFieldType.year() && savedFields[i].getValue() <= 0 &&\n                    (iSavedFields == savedFields || iSavedFields.length <= count || iSavedFields[count] != null)) {\n                // pivot year is estimated, so it's rounded towards nearest leap year\n                int year = ((SavedField) savedFields[i]).getPivotYear();\n                int leapYears = ISOChronology.getInstanceUTC().getLeapYears(year, year + 1);\n                int gapSize = (int) ((-savedFields[i].getValue() - leapYears) / 365);\n                year += gapSize;\n                // if estimated year is more than a year away from real year, compute again using estimated year as base\n                if (gapSize > 1 || gapSize == 1 && !savedFields[i].isEndangered(millis)) {\n                    saveField(DateTimeFieldType.year(), year);\n                    for (int j = 0; j < count; j++) {\n                        if (j != i) {\n                            millis = savedFields[j].set(millis, resetFields);\n                        }\n                    }\n                    millis = savedFields[i].set(millis, resetFields);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..893a2b4a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,22 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (savedFields[i].getDateTimeField().getFieldType() == DateTimeFieldType.year() && savedFields[i].getValue() <= 0 &&\n+                    (iSavedFields == savedFields || iSavedFields.length <= count || iSavedFields[count] != null)) {\n+                // pivot year is estimated, so it's rounded towards nearest leap year\n+                int year = ((SavedField) savedFields[i]).getPivotYear();\n+                int leapYears = ISOChronology.getInstanceUTC().getLeapYears(year, year + 1);\n+                int gapSize = (int) ((-savedFields[i].getValue() - leapYears) / 365);\n+                year += gapSize;\n+                // if estimated year is more than a year away from real year, compute again using estimated year as base\n+                if (gapSize > 1 || gapSize == 1 && !savedFields[i].isEndangered(millis)) {\n+                    saveField(DateTimeFieldType.year(), year);\n+                    for (int j = 0; j < count; j++) {\n+                        if (j != i) {\n+                            millis = savedFields[j].set(millis, resetFields);\n+                        }\n+                    }\n+                    millis = savedFields[i].set(millis, resetFields);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}