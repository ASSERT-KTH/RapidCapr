{
    "patch": "                long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n                if (nextLocal != nextAdjusted) {\n                    if (nextLocal <= instantAdjusted) {\n                        return offsetAdjusted;\n                    } else {\n                        int nextLocalOffset = getOffset(nextLocal);\n                        if (nextLocalOffset > offsetLocal) {\n                            return nextLocalOffset;\n                        } else {\n                            if (nextAdjusted < instantAdjusted) {\n                                nextAdjusted = nextTransition(nextAdjusted);\n                                if (nextAdjusted == nextLocal) {\n                                    return getOffset(nextLocal);\n                                } else if (nextAdjusted < nextLocal) {\n                                    return offsetLocal;\n                                } else {\n                                    return getOffset(nextAdjusted);\n                                }\n                            } else {\n                                return offsetLocal;\n                            }\n                        }\n                    }\n                }\n            } else {\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                if (prevLocal != prevAdjusted) {\n                    if (prevAdjusted >= instantAdjusted) {\n                        return offsetAdjusted;\n                    } else {\n                        int prevLocalOffset = getOffset(prevLocal);\n                        if (prevLocalOffset < offsetLocal) {\n                            return prevLocalOffset;\n                        } else {\n                            if (prevAdjusted >= instantAdjusted - prevLocalOffset) {\n                                return offsetLocal;\n                            } else {\n                                return getOffset(prevAdjusted);\n                            }\n                        }\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..66471945 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,48 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+                if (nextLocal != nextAdjusted) {\n+                    if (nextLocal <= instantAdjusted) {\n+                        return offsetAdjusted;\n+                    } else {\n+                        int nextLocalOffset = getOffset(nextLocal);\n+                        if (nextLocalOffset > offsetLocal) {\n+                            return nextLocalOffset;\n+                        } else {\n+                            if (nextAdjusted < instantAdjusted) {\n+                                nextAdjusted = nextTransition(nextAdjusted);\n+                                if (nextAdjusted == nextLocal) {\n+                                    return getOffset(nextLocal);\n+                                } else if (nextAdjusted < nextLocal) {\n+                                    return offsetLocal;\n+                                } else {\n+                                    return getOffset(nextAdjusted);\n+                                }\n+                            } else {\n+                                return offsetLocal;\n+                            }\n+                        }\n+                    }\n+                }\n+            } else {\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                if (prevLocal != prevAdjusted) {\n+                    if (prevAdjusted >= instantAdjusted) {\n+                        return offsetAdjusted;\n+                    } else {\n+                        int prevLocalOffset = getOffset(prevLocal);\n+                        if (prevLocalOffset < offsetLocal) {\n+                            return prevLocalOffset;\n+                        } else {\n+                            if (prevAdjusted >= instantAdjusted - prevLocalOffset) {\n+                                return offsetLocal;\n+                            } else {\n+                                return getOffset(prevAdjusted);\n+                            }\n+                        }\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}