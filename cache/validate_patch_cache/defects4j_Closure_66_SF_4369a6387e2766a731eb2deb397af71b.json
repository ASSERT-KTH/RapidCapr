{
    "patch": "import com.google.gson.Gson;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\npublic class TypedPercent {\n    public static double getTypedPercent(String json) {\n        Gson gson = new Gson();\n        Map<String, Object> map = gson.fromJson(json, Map.class);\n        int total = (int) map.get(\"total\");\n        List<Map<String, Object>> list = (ArrayList<Map<String, Object>>) map.get(\"list\");\n        int typedCount = 0;\n        for (Map<String, Object> item : list) {\n            String type = (String) item.get(\"type\");\n            if (type.equals(\"T\")) {\n                typedCount++;\n            }\n        }\n        return ((double) typedCount / (double) total) * 100.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..e46ed582 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+import com.google.gson.Gson;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class TypedPercent {\n+    public static double getTypedPercent(String json) {\n+        Gson gson = new Gson();\n+        Map<String, Object> map = gson.fromJson(json, Map.class);\n+        int total = (int) map.get(\"total\");\n+        List<Map<String, Object>> list = (ArrayList<Map<String, Object>>) map.get(\"list\");\n+        int typedCount = 0;\n+        for (Map<String, Object> item : list) {\n+            String type = (String) item.get(\"type\");\n+            if (type.equals(\"T\")) {\n+                typedCount++;\n+            }\n+        }\n+        return ((double) typedCount / (double) total) * 100.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}