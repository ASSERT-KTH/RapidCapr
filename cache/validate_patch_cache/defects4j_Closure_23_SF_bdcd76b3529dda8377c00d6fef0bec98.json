{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  // Get parent node\n  Node parent = n.getParent();\n  // Return n if the array access is used as an assignment target\n  if (isAssignmentTarget(n)) {\n    return n;\n  }\n  // Return n if the index is not a number\n  if (!right.isNumber()) {\n    return n;\n  }\n  // Get the integer index from the double index\n  double index = right.getDouble();\n  int intIndex = (int) index;\n  // Report an error and return n if the integer index is not the same as the double index\n  if (intIndex != index) {\n    error(INVALID_GETELEM_INDEX_ERROR, right);\n    return n;\n  }\n  // Report an error and return n if the integer index is negative or out of bounds\n  if (intIndex < 0 || left.getChildCount() <= intIndex) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n  // Get the element node at the integer index\n  Node elem = left.getChildAtIndex(intIndex);\n  // If the element is empty, replace it with an undefined node\n  if (elem.isEmpty()) {\n    Node undefinedNode = NodeUtil.newUndefinedNode(n);\n    left.replaceChild(elem, undefinedNode);\n    parent.replaceChild(n, undefinedNode);\n    reportCodeChange();\n    return undefinedNode;\n  }\n  // Detach the element node from the array literal\n  left.removeChild(elem);\n  // Replace the array access with the element node\n  parent.replaceChild(n, elem);\n  reportCodeChange();\n  return elem;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..0d61811e 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,57 +1419,47 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-    if (isAssignmentTarget(n)) {\n-      return n;\n-    }\n-\n-    if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n-    }\n-\n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n-\n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n-    }\n-\n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n-    }\n-\n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+  // Get parent node\n+  Node parent = n.getParent();\n+  // Return n if the array access is used as an assignment target\n+  if (isAssignmentTarget(n)) {\n+    return n;\n+  }\n+  // Return n if the index is not a number\n+  if (!right.isNumber()) {\n+    return n;\n+  }\n+  // Get the integer index from the double index\n+  double index = right.getDouble();\n+  int intIndex = (int) index;\n+  // Report an error and return n if the integer index is not the same as the double index\n+  if (intIndex != index) {\n+    error(INVALID_GETELEM_INDEX_ERROR, right);\n+    return n;\n+  }\n+  // Report an error and return n if the integer index is negative or out of bounds\n+  if (intIndex < 0 || left.getChildCount() <= intIndex) {\n+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    return n;\n+  }\n+  // Get the element node at the integer index\n+  Node elem = left.getChildAtIndex(intIndex);\n+  // If the element is empty, replace it with an undefined node\n+  if (elem.isEmpty()) {\n+    Node undefinedNode = NodeUtil.newUndefinedNode(n);\n+    left.replaceChild(elem, undefinedNode);\n+    parent.replaceChild(n, undefinedNode);\n     reportCodeChange();\n-    return elem;\n+    return undefinedNode;\n   }\n+  // Detach the element node from the array literal\n+  left.removeChild(elem);\n+  // Replace the array access with the element node\n+  parent.replaceChild(n, elem);\n+  reportCodeChange();\n+  return elem;\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "java.lang.IllegalArgumentException: The new child node has siblings.",
    "test_result": "FAIL"
}