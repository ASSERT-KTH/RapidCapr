{
    "patch": "public static String unescapeJava(String str) {\n  if (str == null) {\n    return null;\n  }\n  if (str.isEmpty()) {\n    return \"\";\n  }\n  StringBuilder out = new StringBuilder(str.length());\n  for (int i = 0; i < str.length(); ) {\n    char ch = str.charAt(i++);\n    if (ch == '\\\\') {\n      if (i == str.length()) {\n        throw new IllegalArgumentException(\"Invalid unicode sequence: \\\\\\\\ at end of string\");\n      }\n      ch = str.charAt(i++);\n      if (ch == 'u') {\n        if (i + 4 > str.length()) {\n          throw new IllegalArgumentException(\"Invalid unicode sequence: \\\\u at end of string\");\n        }\n        int code = 0;\n        for (int j = i; j < i + 4; ++j) {\n          code <<= 4;\n          char hexDigit = str.charAt(j);\n          if (hexDigit >= '0' && hexDigit <= '9') {\n            code += hexDigit - '0';\n          } else if (hexDigit >= 'a' && hexDigit <= 'f') {\n            code += hexDigit - 'a' + 10;\n          } else if (hexDigit >= 'A' && hexDigit <= 'F') {\n            code += hexDigit - 'A' + 10;\n          } else {\n            throw new IllegalArgumentException(\"Invalid digit in unicode sequence: \" + hexDigit);\n          }\n        }\n        out.append((char) code);\n        i += 4;\n      } else {\n        if (ch == 'b') {\n          ch = '\\b';\n        } else if (ch == 'n') {\n          ch = '\\n';\n        } else if (ch == 't') {\n          ch = '\\t';\n        } else if (ch == 'f') {\n          ch = '\\f';\n        } else if (ch == 'r') {\n          ch = '\\r';\n        } else if (ch == '\\\\') {\n          ch = '\\\\';\n        } else if (ch == '\\\"') {\n          ch = '\\\"';\n        } else if (ch == '\\'') {\n          ch = '\\'';\n        } else {\n          throw new IllegalArgumentException(\"Invalid escape sequence: \\\\\" + ch);\n        }\n        out.append(ch);\n      }\n    } else {\n      out.append(ch);\n    }\n  }\n  return out.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..3fe5210e 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,69 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescapeJava(String str) {\n+  if (str == null) {\n+    return null;\n+  }\n+  if (str.isEmpty()) {\n+    return \"\";\n+  }\n+  StringBuilder out = new StringBuilder(str.length());\n+  for (int i = 0; i < str.length(); ) {\n+    char ch = str.charAt(i++);\n+    if (ch == '\\\\') {\n+      if (i == str.length()) {\n+        throw new IllegalArgumentException(\"Invalid unicode sequence: \\\\\\\\ at end of string\");\n+      }\n+      ch = str.charAt(i++);\n+      if (ch == 'u') {\n+        if (i + 4 > str.length()) {\n+          throw new IllegalArgumentException(\"Invalid unicode sequence: \\\\u at end of string\");\n+        }\n+        int code = 0;\n+        for (int j = i; j < i + 4; ++j) {\n+          code <<= 4;\n+          char hexDigit = str.charAt(j);\n+          if (hexDigit >= '0' && hexDigit <= '9') {\n+            code += hexDigit - '0';\n+          } else if (hexDigit >= 'a' && hexDigit <= 'f') {\n+            code += hexDigit - 'a' + 10;\n+          } else if (hexDigit >= 'A' && hexDigit <= 'F') {\n+            code += hexDigit - 'A' + 10;\n+          } else {\n+            throw new IllegalArgumentException(\"Invalid digit in unicode sequence: \" + hexDigit);\n+          }\n+        }\n+        out.append((char) code);\n+        i += 4;\n+      } else {\n+        if (ch == 'b') {\n+          ch = '\\b';\n+        } else if (ch == 'n') {\n+          ch = '\\n';\n+        } else if (ch == 't') {\n+          ch = '\\t';\n+        } else if (ch == 'f') {\n+          ch = '\\f';\n+        } else if (ch == 'r') {\n+          ch = '\\r';\n+        } else if (ch == '\\\\') {\n+          ch = '\\\\';\n+        } else if (ch == '\\\"') {\n+          ch = '\\\"';\n+        } else if (ch == '\\'') {\n+          ch = '\\'';\n+        } else {\n+          throw new IllegalArgumentException(\"Invalid escape sequence: \\\\\" + ch);\n+        }\n+        out.append(ch);\n+      }\n+    } else {\n+      out.append(ch);\n+    }\n+  }\n+  return out.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}