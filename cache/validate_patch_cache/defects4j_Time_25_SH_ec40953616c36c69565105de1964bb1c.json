{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    boolean isOverlap = false;\n    boolean isGap = false;\n    int offsetBeforeTransition = getOffset(nextTransition(instantAdjusted) -1);\n    int offsetBeforeLocalTransition = getOffset(nextTransition(instantLocal - offsetAdjusted) -1);\n    if (offsetLocal < offsetAdjusted) {\n        // gap : return offset just before the local transition\n        // overlap : return maximum offset of both the timestamps\n        if (offsetBeforeLocalTransition > offsetLocal) {\n            isGap = true;\n        } else {\n            isOverlap = true;\n        }\n    } else {\n        // gap : return offset just before the transition from the local timezone\n        // overlap : return maximum offset of both the timestamps\n        if (offsetBeforeTransition > offsetAdjusted) {\n            isGap = true;\n        } else {\n            isOverlap = true;\n        }\n    }\n    if (isGap) {\n        return offsetBeforeTransition;\n    } else if (isOverlap) {\n        return Math.max(offsetLocal, offsetAdjusted);\n    } \n} \nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..681e4ec4 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,35 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    boolean isOverlap = false;\n+    boolean isGap = false;\n+    int offsetBeforeTransition = getOffset(nextTransition(instantAdjusted) -1);\n+    int offsetBeforeLocalTransition = getOffset(nextTransition(instantLocal - offsetAdjusted) -1);\n+    if (offsetLocal < offsetAdjusted) {\n+        // gap : return offset just before the local transition\n+        // overlap : return maximum offset of both the timestamps\n+        if (offsetBeforeLocalTransition > offsetLocal) {\n+            isGap = true;\n+        } else {\n+            isOverlap = true;\n+        }\n+    } else {\n+        // gap : return offset just before the transition from the local timezone\n+        // overlap : return maximum offset of both the timestamps\n+        if (offsetBeforeTransition > offsetAdjusted) {\n+            isGap = true;\n+        } else {\n+            isOverlap = true;\n+        }\n+    }\n+    if (isGap) {\n+        return offsetBeforeTransition;\n+    } else if (isOverlap) {\n+        return Math.max(offsetLocal, offsetAdjusted);\n+    } \n+} \n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}