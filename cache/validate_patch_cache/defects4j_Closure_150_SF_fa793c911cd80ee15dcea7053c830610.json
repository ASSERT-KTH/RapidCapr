{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == t.getScope().getRootNode()) {\n        return;\n    }\n\n    attachLiteralTypes(n);\n    switch (n.getToken()) {\n        case FUNCTION:\n            if (parent == null || !NodeUtil.isStatement(parent)) {\n                return;\n            }\n\n            Node nameNode = NodeUtil.getNameNode(n);\n            if (NodeUtil.isFunctionExpression(n)) {\n                if (nameNode == null) {\n                    return;\n                }\n                defineFunctionExpression(n, parent);\n            } else {\n                defineDeclaredFunction(n, parent);\n            }\n            break;\n        case CATCH:\n            defineCatch(n, parent);\n            break;\n        case VAR:\n            defineVar(n, parent);\n            break;\n        case LP:\n            if (parent.getToken() == Token.EXPR_RESULT\n                    && parent.getFirstChild() != null\n                    && parent.getFirstChild().getToken() == Token.FUNCTION) {\n                handleFunctionInputs(n.getParent());\n            }\n            break;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..f6b3e7bc 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,44 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == t.getScope().getRootNode()) {\n         return;\n-      }\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+    attachLiteralTypes(n);\n+    switch (n.getToken()) {\n+        case FUNCTION:\n+            if (parent == null || !NodeUtil.isStatement(parent)) {\n+                return;\n+            }\n+\n+            Node nameNode = NodeUtil.getNameNode(n);\n+            if (NodeUtil.isFunctionExpression(n)) {\n+                if (nameNode == null) {\n+                    return;\n+                }\n+                defineFunctionExpression(n, parent);\n+            } else {\n+                defineDeclaredFunction(n, parent);\n+            }\n+            break;\n+        case CATCH:\n+            defineCatch(n, parent);\n+            break;\n+        case VAR:\n+            defineVar(n, parent);\n+            break;\n+        case LP:\n+            if (parent.getToken() == Token.EXPR_RESULT\n+                    && parent.getFirstChild() != null\n+                    && parent.getFirstChild().getToken() == Token.FUNCTION) {\n+                handleFunctionInputs(n.getParent());\n+            }\n+            break;\n     }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}