{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n        int n = m.getColumnDimension();\n        RealMatrix x = MatrixUtils.createRealMatrix(n, n);\n\n        // initialize x matrix as identity matrix\n        for (int i = 0; i < n; i++) {\n            x.setEntry(i, i, 1.0);\n        }\n\n        // perform iterations to calculate square root\n        for (int k = 0; k < MAX_ITERATIONS; k++) {\n            RealMatrix y = x.scalarMultiply(0.5).multiply(m.add(x.transpose()).scalarMultiply(0.5).inverse());\n\n            if (hasConverged(x, y)) {\n                return y;\n            }\n\n            x = y;\n        }\n\n        throw new RuntimeException(\"Square root iteration did not converge\");\n    }\n    \nprivate boolean hasConverged(RealMatrix x, RealMatrix y) {\n    double error = x.subtract(y).getNorm();\n    return error < EPSILON;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..3546a3869 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,31 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+        int n = m.getColumnDimension();\n+        RealMatrix x = MatrixUtils.createRealMatrix(n, n);\n+\n+        // initialize x matrix as identity matrix\n+        for (int i = 0; i < n; i++) {\n+            x.setEntry(i, i, 1.0);\n+        }\n+\n+        // perform iterations to calculate square root\n+        for (int k = 0; k < MAX_ITERATIONS; k++) {\n+            RealMatrix y = x.scalarMultiply(0.5).multiply(m.add(x.transpose()).scalarMultiply(0.5).inverse());\n+\n+            if (hasConverged(x, y)) {\n+                return y;\n+            }\n+\n+            x = y;\n+        }\n+\n+        throw new RuntimeException(\"Square root iteration did not converge\");\n     }\n+    \n+private boolean hasConverged(RealMatrix x, RealMatrix y) {\n+    double error = x.subtract(y).getNorm();\n+    return error < EPSILON;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}