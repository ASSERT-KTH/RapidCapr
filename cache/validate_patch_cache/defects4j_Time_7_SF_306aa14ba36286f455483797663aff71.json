{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    \n    // Get the zone offset of the instant based on its chronology\n    int instantOffset = chrono.getZone().getOffset(instantMillis);\n    \n    // Select the best chronology for parsing the text\n    chrono = selectChronology(chrono);\n\n    // Get the default year for parsing\n    long instantLocal = instantMillis + instantOffset;\n    int defaultYear = chrono.year().get(instantLocal);\n\n    // Create a bucket for parsing the text\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n\n    int newPos = parser.parseInto(bucket, text, position);\n    \n    // Check that parsing succeeded until the end of the input string or failed at first illegal character\n    if (newPos >= 0 && newPos >= text.length() || newPos != ~text.length() && newPos != ~position) {\n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n    } else {\n        newPos = ~newPos; // Return position of first illegal character\n    }\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..7ea7c4e1 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,21 +697,33 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    \n+    // Get the zone offset of the instant based on its chronology\n+    int instantOffset = chrono.getZone().getOffset(instantMillis);\n+    \n+    // Select the best chronology for parsing the text\n+    chrono = selectChronology(chrono);\n+\n+    // Get the default year for parsing\n+    long instantLocal = instantMillis + instantOffset;\n+    int defaultYear = chrono.year().get(instantLocal);\n+\n+    // Create a bucket for parsing the text\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+\n+    int newPos = parser.parseInto(bucket, text, position);\n+    \n+    // Check that parsing succeeded until the end of the input string or failed at first illegal character\n+    if (newPos >= 0 && newPos >= text.length() || newPos != ~text.length() && newPos != ~position) {\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();\n@@ -724,8 +736,11 @@ public class DateTimeFormatter {\n         if (iZone != null) {\n             instant.setZone(iZone);\n         }\n-        return newPos;\n+    } else {\n+        newPos = ~newPos; // Return position of first illegal character\n     }\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}