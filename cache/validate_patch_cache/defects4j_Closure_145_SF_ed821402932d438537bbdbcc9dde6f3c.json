{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node n) {\n    if (n.getType() == Token.LABEL) {\n        // Check if the label's first child is a block and only contains one child node\n        if (n.getFirstChild().getType() == Token.BLOCK && n.getFirstChild().hasChildren() && n.getFirstChild().getFirstChild() == n.getLastChild() && isOneExactlyFunctionOrDo(n.getLastChild())) {\n            return true;\n        }\n        // Check if the label's last child is a function or do\n        return (n.getLastChild().getType() == Token.FUNCTION || n.getLastChild().getType() == Token.DO);\n    } else if (n.getType() == Token.BLOCK) {\n        return (n.hasChildren() && n.getFirstChild() == n.getLastChild() && isOneExactlyFunctionOrDo(n.getFirstChild()));\n    }\n    return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..0d7cafc1 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,19 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n-  }\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+    if (n.getType() == Token.LABEL) {\n+        // Check if the label's first child is a block and only contains one child node\n+        if (n.getFirstChild().getType() == Token.BLOCK && n.getFirstChild().hasChildren() && n.getFirstChild().getFirstChild() == n.getLastChild() && isOneExactlyFunctionOrDo(n.getLastChild())) {\n+            return true;\n+        }\n+        // Check if the label's last child is a function or do\n+        return (n.getLastChild().getType() == Token.FUNCTION || n.getLastChild().getType() == Token.DO);\n+    } else if (n.getType() == Token.BLOCK) {\n+        return (n.hasChildren() && n.getFirstChild() == n.getLastChild() && isOneExactlyFunctionOrDo(n.getFirstChild()));\n+    }\n+    return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}