{
    "patch": "public static double getTypedPercent(String json) {\n\ttry {\n\t    JSONObject obj = new JSONObject(json);\n\t    int total = obj.getInt(\"total\");\n\t    int typed = obj.getInt(\"typed\");\n\t    if (total == 0) {\n\t        return 100.0;\n\t    }\n\t    return typed * 100.0 / total;\n\t} catch (JSONException e) {\n\t    e.printStackTrace();\n\t    return -1.0;\n\t}\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..f38f9bf7 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+\ttry {\n+\t    JSONObject obj = new JSONObject(json);\n+\t    int total = obj.getInt(\"total\");\n+\t    int typed = obj.getInt(\"typed\");\n+\t    if (total == 0) {\n+\t        return 100.0;\n+\t    }\n+\t    return typed * 100.0 / total;\n+\t} catch (JSONException e) {\n+\t    e.printStackTrace();\n+\t    return -1.0;\n+\t}\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}