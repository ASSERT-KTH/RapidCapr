{
    "patch": "private void findCalledFunctions(Node node, Set<String> changed) {\n  Preconditions.checkArgument(changed != null);\n  int type = node.getType();\n  if (type == Token.CALL || type == Token.NEW || type == Token.TEMPLATELIT) {\n    Node child = node.getFirstChild();\n    while (child != null) {\n      if (child.getType() == Token.NAME) {\n        String functionName = child.getString();\n        if (changed.contains(functionName)) {\n          Node grandChild = child.getFirstChild();\n          while (grandChild != null) {\n            if (grandChild.getType() == Token.CALL || grandChild.getType() == Token.NEW) {\n              findCalledFunctions(grandChild, changed);\n            }\n            grandChild = grandChild.getNext();\n          }\n        }\n      }\n      if (child.getType() == Token.CALL || child.getType() == Token.NEW) {\n        findCalledFunctions(child, changed);\n      }\n      child = child.getNext();\n    }\n  } else {\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..77476e0b 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -774,10 +774,35 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n+private void findCalledFunctions(Node node, Set<String> changed) {\n+  Preconditions.checkArgument(changed != null);\n+  int type = node.getType();\n+  if (type == Token.CALL || type == Token.NEW || type == Token.TEMPLATELIT) {\n+    Node child = node.getFirstChild();\n+    while (child != null) {\n       if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+        String functionName = child.getString();\n+        if (changed.contains(functionName)) {\n+          Node grandChild = child.getFirstChild();\n+          while (grandChild != null) {\n+            if (grandChild.getType() == Token.CALL || grandChild.getType() == Token.NEW) {\n+              findCalledFunctions(grandChild, changed);\n+            }\n+            grandChild = grandChild.getNext();\n+          }\n+        }\n+      }\n+      if (child.getType() == Token.CALL || child.getType() == Token.NEW) {\n+        findCalledFunctions(child, changed);\n+      }\n+      child = child.getNext();\n+    }\n+  } else {\n+    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+      findCalledFunctions(c, changed);\n+    }\n+  }\n+}\n       }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}