{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node curArg = argList.getFirstChild();\n      while (curArg != null && !referenced.contains(fnScope.getVar(curArg.getString()))) {\n        argList.removeChild(curArg);\n        compiler.reportCodeChange();\n        curArg = curArg.getNext();\n      }\n\n      if (curArg != null) {\n        Node prevArg = curArg;\n        curArg = curArg.getNext();\n\n        while (curArg != null) {\n          Node nextArg = curArg.getNext();\n          if (!referenced.contains(fnScope.getVar(curArg.getString()))) {\n            // Remove the argument from its call sites.\n            callSiteOptimizer.removeArgument(fnScope, curArg);\n            argList.removeChild(curArg);\n            compiler.reportCodeChange();\n          } else {\n            prevArg = curArg;\n          }\n          curArg = nextArg;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..303868f7 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,45 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node curArg = argList.getFirstChild();\n+      while (curArg != null && !referenced.contains(fnScope.getVar(curArg.getString()))) {\n+        argList.removeChild(curArg);\n+        compiler.reportCodeChange();\n+        curArg = curArg.getNext();\n+      }\n+\n+      if (curArg != null) {\n+        Node prevArg = curArg;\n+        curArg = curArg.getNext();\n+\n+        while (curArg != null) {\n+          Node nextArg = curArg.getNext();\n+          if (!referenced.contains(fnScope.getVar(curArg.getString()))) {\n+            // Remove the argument from its call sites.\n+            callSiteOptimizer.removeArgument(fnScope, curArg);\n+            argList.removeChild(curArg);\n+            compiler.reportCodeChange();\n+          } else {\n+            prevArg = curArg;\n+          }\n+          curArg = nextArg;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}