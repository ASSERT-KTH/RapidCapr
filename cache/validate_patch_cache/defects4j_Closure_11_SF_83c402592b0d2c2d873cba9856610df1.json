{
    "patch": "public static Properties loadProperties(String filename) throws IOException {\n    FileInputStream input = new FileInputStream(filename);\n    Properties props = new Properties();\n    props.load(input);\n    input.close();\n    String propValue = props.getProperty(\"name\");\n    if (propValue == null) {\n        System.err.println(\"Warning: property 'name' not found in file \" + filename);\n    }\n    return props;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..44b590eb 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static Properties loadProperties(String filename) throws IOException {\n+    FileInputStream input = new FileInputStream(filename);\n+    Properties props = new Properties();\n+    props.load(input);\n+    input.close();\n+    String propValue = props.getProperty(\"name\");\n+    if (propValue == null) {\n+        System.err.println(\"Warning: property 'name' not found in file \" + filename);\n+    }\n+    return props;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}