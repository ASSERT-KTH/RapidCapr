{
    "patch": "if (val.isEmpty() || (!Character.isDigit(val.charAt(0)) && val.charAt(0) != '-' &&\n        val.charAt(0) != '.' || val.startsWith(\".\")) ||\n        (!Character.isDigit(val.charAt(val.length() - 1)) &&\n                val.charAt(val.length() - 1) != 'f' &&\n                val.charAt(val.length() - 1) != 'F' &&\n                val.charAt(val.length() - 1) != 'd' &&\n                val.charAt(val.length() - 1) != 'D' &&\n                val.charAt(val.length() - 1) != 'l' &&\n                val.charAt(val.length() - 1) != 'L')) {\n    throw new NumberFormatException(val + \" is not a valid number.\");\n}\nif (val.startsWith(\"--\") || val.endsWith(\"--\")) {\n    // this is protection for poorness in java.lang.BigDecimal.\n    // it's not in specification of class, but some platforms\n    // accept it as a legal value.\n    return null;\n}\nif (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n    return createInteger(val);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..29214c05 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,26 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+if (val.isEmpty() || (!Character.isDigit(val.charAt(0)) && val.charAt(0) != '-' &&\n+        val.charAt(0) != '.' || val.startsWith(\".\")) ||\n+        (!Character.isDigit(val.charAt(val.length() - 1)) &&\n+                val.charAt(val.length() - 1) != 'f' &&\n+                val.charAt(val.length() - 1) != 'F' &&\n+                val.charAt(val.length() - 1) != 'd' &&\n+                val.charAt(val.length() - 1) != 'D' &&\n+                val.charAt(val.length() - 1) != 'l' &&\n+                val.charAt(val.length() - 1) != 'L')) {\n+    throw new NumberFormatException(val + \" is not a valid number.\");\n+}\n+if (val.startsWith(\"--\") || val.endsWith(\"--\")) {\n+    // this is protection for poorness in java.lang.BigDecimal.\n+    // it's not in specification of class, but some platforms\n+    // accept it as a legal value.\n+    return null;\n+}\n+if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+    return createInteger(val);\n+}\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "java.lang.NumberFormatException: 0xFADE is not a valid number.",
    "test_result": "FAIL"
}