{
    "patch": "        /*\n         * Check if the variable is only assigned once for its lifetime by\n         * searching for a second assignment in the scope of the variable\n         * declaration.\n         */\n        List<Node> scopeNodes = getCfg().getNodesInRegion(ref.getBasicBlock().getFirstCfgNode(),\n            ref.getBasicBlock().getLastCfgNode());\n        for (int i = ref.getIndex() + 1; i < references.size(); i++) {\n          Reference r = references.get(i);\n          if (r.getName().equals(ref.getName()) && scopeNodes.contains(r.getBasicBlock().getLastCfgNode())) {\n            return false;\n          }\n        }\n        return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..ca8e3c81 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,20 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        /*\n+         * Check if the variable is only assigned once for its lifetime by\n+         * searching for a second assignment in the scope of the variable\n+         * declaration.\n+         */\n+        List<Node> scopeNodes = getCfg().getNodesInRegion(ref.getBasicBlock().getFirstCfgNode(),\n+            ref.getBasicBlock().getLastCfgNode());\n+        for (int i = ref.getIndex() + 1; i < references.size(); i++) {\n+          Reference r = references.get(i);\n+          if (r.getName().equals(ref.getName()) && scopeNodes.contains(r.getBasicBlock().getLastCfgNode())) {\n+            return false;\n+          }\n+        }\n+        return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}