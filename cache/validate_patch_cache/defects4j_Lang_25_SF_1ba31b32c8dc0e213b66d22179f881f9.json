{
    "patch": "public static String unescape(String str) {\n    StringBuilder result = new StringBuilder(str.length());\n    for (int i = 0; i < str.length(); i++) {\n        char ch = str.charAt(i);\n        if (ch == '\\\\') {\n            if (++i < str.length()) {\n                ch = str.charAt(i);\n                if (ch == 'n') {\n                    ch = '\\n';\n                } else if (ch == 'r') {\n                    ch = '\\r';\n                } else if (ch == 't') {\n                    ch = '\\t';\n                } else if (ch == 'f') {\n                    ch = '\\f';\n                } else if (ch == 'b') {\n                    ch = '\\b';\n                } else if (ch == '\\\"') {\n                    ch = '\\\"';\n                } else if (ch == '\\'') {\n                    ch = '\\'';\n                } else if (ch == '\\\\') {\n                    ch = '\\\\';\n                } else {\n                    // handle octal escape\n                    int octal = Character.digit(ch, 8);\n                    if (octal == -1) {\n                        // noop\n                    } else {\n                        for (int j = 0; j < 2 && i + 1 < str.length(); j++) {\n                            int nextChar = Character.digit(str.charAt(i + 1), 8);\n                            if (nextChar == -1) {\n                                break;\n                            }\n                            octal = (octal << 3) + nextChar;\n                            i++;\n                        }\n                        ch = (char) octal;\n                    }\n                }\n            } else {\n                // Trailing '\\\\' (illegal)\n                break;\n            }\n        }\n        result.append(ch);\n    }\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..0afc483e 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,55 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String str) {\n+    StringBuilder result = new StringBuilder(str.length());\n+    for (int i = 0; i < str.length(); i++) {\n+        char ch = str.charAt(i);\n+        if (ch == '\\\\') {\n+            if (++i < str.length()) {\n+                ch = str.charAt(i);\n+                if (ch == 'n') {\n+                    ch = '\\n';\n+                } else if (ch == 'r') {\n+                    ch = '\\r';\n+                } else if (ch == 't') {\n+                    ch = '\\t';\n+                } else if (ch == 'f') {\n+                    ch = '\\f';\n+                } else if (ch == 'b') {\n+                    ch = '\\b';\n+                } else if (ch == '\\\"') {\n+                    ch = '\\\"';\n+                } else if (ch == '\\'') {\n+                    ch = '\\'';\n+                } else if (ch == '\\\\') {\n+                    ch = '\\\\';\n+                } else {\n+                    // handle octal escape\n+                    int octal = Character.digit(ch, 8);\n+                    if (octal == -1) {\n+                        // noop\n+                    } else {\n+                        for (int j = 0; j < 2 && i + 1 < str.length(); j++) {\n+                            int nextChar = Character.digit(str.charAt(i + 1), 8);\n+                            if (nextChar == -1) {\n+                                break;\n+                            }\n+                            octal = (octal << 3) + nextChar;\n+                            i++;\n+                        }\n+                        ch = (char) octal;\n+                    }\n+                }\n+            } else {\n+                // Trailing '\\\\' (illegal)\n+                break;\n+            }\n+        }\n+        result.append(ch);\n+    }\n+    return result.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}