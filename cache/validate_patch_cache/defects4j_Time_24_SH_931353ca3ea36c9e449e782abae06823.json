{
    "patch": "for (int i = 0; i < count; i++) {\n    millis = savedFields[i].set(millis, resetFields);\n}\nif (iSavedFieldsCount == 0 && text != null) {\n    throw new IllegalArgumentException(\"Invalid format: \\\"\" + text + \"\\\"\");\n}\nif (iYear < 0) {\n    throw new IllegalArgumentException(\"Invalid year: \" + iYear);\n}\nif (iYear > MAX_YEAR) {\n    throw new IllegalArgumentException(\"Year is too large: \" + iYear);\n}\nif (count > 0) {\n    DurationField months = DurationFieldType.months().getField(iChrono);\n    DurationField days = DurationFieldType.days().getField(iChrono);\n    DurationField first = savedFields[0].iField.getDurationField();\n    if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n        try {\n            return computeMillis(resetFields, text, iDefaultYear);\n        } catch (IllegalArgumentException e) {\n            if (text != null) {\n                e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\"\", e);\n            }\n            throw e;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..e52193ee 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,33 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+for (int i = 0; i < count; i++) {\n+    millis = savedFields[i].set(millis, resetFields);\n+}\n+if (iSavedFieldsCount == 0 && text != null) {\n+    throw new IllegalArgumentException(\"Invalid format: \\\"\" + text + \"\\\"\");\n+}\n+if (iYear < 0) {\n+    throw new IllegalArgumentException(\"Invalid year: \" + iYear);\n+}\n+if (iYear > MAX_YEAR) {\n+    throw new IllegalArgumentException(\"Year is too large: \" + iYear);\n+}\n+if (count > 0) {\n+    DurationField months = DurationFieldType.months().getField(iChrono);\n+    DurationField days = DurationFieldType.days().getField(iChrono);\n+    DurationField first = savedFields[0].iField.getDurationField();\n+    if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+        try {\n+            return computeMillis(resetFields, text, iDefaultYear);\n+        } catch (IllegalArgumentException e) {\n+            if (text != null) {\n+                e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\"\", e);\n+            }\n+            throw e;\n+        }\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}