{
    "patch": "    // Identify named parameters that we want to keep.\n    Set<String> referencedNames = new HashSet<String>();\n    for (Var v: referenced) {\n      referencedNames.add(v.getName());\n    }\n\n    // Chop off any parameters that are not explicitly referenced.\n    for (Node arg = argList.getFirstChild(), prev = null;\n         arg != null; prev = arg, arg = arg.getNext()) {\n      if (!referencedNames.contains(arg.getString())) {\n        // Setting NO_SIDE_EFFECTS tells the compiler that we don't care\n        // whether this node has side effects, so it's safe to remove.\n        compiler.reportChangeToEnclosingScope(arg);\n        if (prev == null) {\n          argList.removeChild(arg);\n        } else {\n          prev.removeNextSibling();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..084cff65 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,23 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Identify named parameters that we want to keep.\n+    Set<String> referencedNames = new HashSet<String>();\n+    for (Var v: referenced) {\n+      referencedNames.add(v.getName());\n+    }\n+\n+    // Chop off any parameters that are not explicitly referenced.\n+    for (Node arg = argList.getFirstChild(), prev = null;\n+         arg != null; prev = arg, arg = arg.getNext()) {\n+      if (!referencedNames.contains(arg.getString())) {\n+        // Setting NO_SIDE_EFFECTS tells the compiler that we don't care\n+        // whether this node has side effects, so it's safe to remove.\n+        compiler.reportChangeToEnclosingScope(arg);\n+        if (prev == null) {\n+          argList.removeChild(arg);\n+        } else {\n+          prev.removeNextSibling();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}