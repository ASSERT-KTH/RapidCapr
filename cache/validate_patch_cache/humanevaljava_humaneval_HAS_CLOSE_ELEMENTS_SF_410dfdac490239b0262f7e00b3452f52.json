{
    "patch": "public static boolean has_close_elements(List<Double> numbers, double threshold) {\n    if (numbers == null || numbers.size() < 2) {\n        return false;\n    }\n    double min = Collections.min(numbers);\n    double max = Collections.max(numbers);\n    double range = max - min;\n    int numBuckets = Math.max((int) (range / threshold), 1);\n    List<List<Double>> buckets = new ArrayList<>();\n    for (int i = 0; i < numBuckets; i++) {\n        buckets.add(new ArrayList<>());\n    }\n    for (double num : numbers) {\n        int index = (int) ((num - min) / threshold);\n        buckets.get(index).add(num);\n    }\n    for (List<Double> bucket : buckets) {\n        if (bucket.size() > 1) {\n            for (int i = 0; i < bucket.size() - 1; i++) {\n                for (int j = i + 1; j < bucket.size(); j++) {\n                    if (Math.abs(bucket.get(i) - bucket.get(j)) <= threshold) {\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/HAS_CLOSE_ELEMENTS.java b/src/main/java/humaneval/buggy/HAS_CLOSE_ELEMENTS.java\nindex b51eb14..94d5ecf 100644\n--- a/src/main/java/humaneval/buggy/HAS_CLOSE_ELEMENTS.java\n+++ b/src/main/java/humaneval/buggy/HAS_CLOSE_ELEMENTS.java\n@@ -3,14 +3,33 @@ package humaneval.buggy;\n import java.util.List;\n \n public class HAS_CLOSE_ELEMENTS {\n-    public static boolean has_close_elements(List<Double> numbers, double threshold){\n-        for (int i = 0; i < numbers.size(); i += 1){\n-            for (int j = i + 1; j < numbers.size(); j += 1){\n-                double distance = numbers.get(i) - numbers.get(j);\n-                if (distance < threshold)\n-                    return true;\n+public static boolean has_close_elements(List<Double> numbers, double threshold) {\n+    if (numbers == null || numbers.size() < 2) {\n+        return false;\n+    }\n+    double min = Collections.min(numbers);\n+    double max = Collections.max(numbers);\n+    double range = max - min;\n+    int numBuckets = Math.max((int) (range / threshold), 1);\n+    List<List<Double>> buckets = new ArrayList<>();\n+    for (int i = 0; i < numBuckets; i++) {\n+        buckets.add(new ArrayList<>());\n+    }\n+    for (double num : numbers) {\n+        int index = (int) ((num - min) / threshold);\n+        buckets.get(index).add(num);\n+    }\n+    for (List<Double> bucket : buckets) {\n+        if (bucket.size() > 1) {\n+            for (int i = 0; i < bucket.size() - 1; i++) {\n+                for (int j = i + 1; j < bucket.size(); j++) {\n+                    if (Math.abs(bucket.get(i) - bucket.get(j)) <= threshold) {\n+                        return true;\n+                    }\n+                }\n             }\n         }\n-        return false;\n     }\n+    return false;\n+}\n }",
    "result_reason": " /tmp/humaneval-HAS_CLOSE_ELEMENTS/src/main/java/humaneval/buggy/HAS_CLOSE_ELEMENTS.java:[10,18] cannot find symbol",
    "test_result": "ERROR"
}