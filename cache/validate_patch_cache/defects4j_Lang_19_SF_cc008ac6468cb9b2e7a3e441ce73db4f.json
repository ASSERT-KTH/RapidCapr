{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    if (input.charAt(index) != '&' || index + 2 >= seqEnd) {\n        return 0;\n    }\n    int decimalPosition = input.subSequence(index, index + 3).toString().indexOf(\";\");\n    int hexPosition = input.subSequence(index, index + 4).toString().indexOf(\";\");\n    if (input.charAt(index + 1) != '#' || decimalPosition <= 1 && hexPosition <= 2) {\n        return 0;\n    }\n  \n    boolean isHex = hexPosition > decimalPosition;\n    int start = index + (isHex ? 3 : 2) + (input.charAt(index + 2) == 'x' || input.charAt(index + 2) == 'X' ? 1 : 0);\n    int end = start;\n    while(end < seqEnd) {\n        char ch = input.charAt(end);\n        if (ch == ';') {\n            break;\n        } else if(isHex && !((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F'))) {\n            return 0;\n        } else if (!isHex && (ch < '0' || ch > '9')) {\n            return 0;\n        }\n        end++;\n    }\n  \n    if (end == seqEnd) {\n        return 0;\n    }\n  \n    String code = input.subSequence(start, end).toString();\n    int codeValue;\n    try {\n        codeValue = Integer.parseInt(code, isHex ? 16 : 10);\n    } catch(NumberFormatException e) {\n        return 0;\n    }\n  \n    if (codeValue < 0 || (codeValue > 0xD7FF && codeValue < 0xE000) || codeValue > 0x10FFFF) {\n        return 0;\n    } else if(codeValue < 0x10000) {\n        out.write(codeValue);\n    } else {\n        char[] chrs = Character.toChars(codeValue);\n        out.write(chrs[0]);\n        out.write(chrs[1]);\n    }\n    return end - index + 1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..4ec389c6 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,53 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n-\n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-\n-                // Check there's more than just an x after the &#\n-            }\n-\n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n-            }\n-\n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n-            }\n-\n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n-            } else {\n-                out.write(entityValue);\n-            }\n-\n-\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n+    if (input.charAt(index) != '&' || index + 2 >= seqEnd) {\n+        return 0;\n+    }\n+    int decimalPosition = input.subSequence(index, index + 3).toString().indexOf(\";\");\n+    int hexPosition = input.subSequence(index, index + 4).toString().indexOf(\";\");\n+    if (input.charAt(index + 1) != '#' || decimalPosition <= 1 && hexPosition <= 2) {\n+        return 0;\n+    }\n+  \n+    boolean isHex = hexPosition > decimalPosition;\n+    int start = index + (isHex ? 3 : 2) + (input.charAt(index + 2) == 'x' || input.charAt(index + 2) == 'X' ? 1 : 0);\n+    int end = start;\n+    while(end < seqEnd) {\n+        char ch = input.charAt(end);\n+        if (ch == ';') {\n+            break;\n+        } else if(isHex && !((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F'))) {\n+            return 0;\n+        } else if (!isHex && (ch < '0' || ch > '9')) {\n+            return 0;\n         }\n+        end++;\n+    }\n+  \n+    if (end == seqEnd) {\n+        return 0;\n+    }\n+  \n+    String code = input.subSequence(start, end).toString();\n+    int codeValue;\n+    try {\n+        codeValue = Integer.parseInt(code, isHex ? 16 : 10);\n+    } catch(NumberFormatException e) {\n+        return 0;\n+    }\n+  \n+    if (codeValue < 0 || (codeValue > 0xD7FF && codeValue < 0xE000) || codeValue > 0x10FFFF) {\n         return 0;\n+    } else if(codeValue < 0x10000) {\n+        out.write(codeValue);\n+    } else {\n+        char[] chrs = Character.toChars(codeValue);\n+        out.write(chrs[0]);\n+        out.write(chrs[1]);\n     }\n+    return end - index + 1;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape expected:<[\u0080\u009f]> but was:<[&#x80;&#x9F;]>",
    "test_result": "FAIL"
}