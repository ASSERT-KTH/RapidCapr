{
    "patch": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.VAR) {\n        defineVar(n, parent);\n        return;\n      }\n        \n      attachLiteralTypes(n);\n\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.EXPR_RESULT) {\n            defineDeclaredFunction(n, parent);\n          } else if (n.getFirstChild().getType() == Token.NAME) {\n            defineDeclaredFunction(n.getFirstChild(), n);\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        default:\n          break;\n      }\n      // handle function inputs for function expressions\n      if (n.getType() == Token.FUNCTION && parent.getType() == Token.EXPR_RESULT) {\n        handleFunctionInputs(parent);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..085c0b33 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,35 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n+    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n+      if (n == scope.getRootNode()) return;\n+\n+      if (n.getType() == Token.VAR) {\n+        defineVar(n, parent);\n+        return;\n+      }\n+        \n       attachLiteralTypes(n);\n+\n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+          if (parent.getType() == Token.EXPR_RESULT) {\n+            defineDeclaredFunction(n, parent);\n+          } else if (n.getFirstChild().getType() == Token.NAME) {\n+            defineDeclaredFunction(n.getFirstChild(), n);\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n           break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n+        default:\n           break;\n       }\n+      // handle function inputs for function expressions\n+      if (n.getType() == Token.FUNCTION && parent.getType() == Token.EXPR_RESULT) {\n+        handleFunctionInputs(parent);\n+      }\n+    }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}