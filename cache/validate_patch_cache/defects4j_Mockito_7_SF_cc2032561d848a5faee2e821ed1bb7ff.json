{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds.length > 0) {\n        for (Type bound : bounds) {\n            if (bound instanceof TypeVariable) {\n                TypeVariable<?> variable = (TypeVariable<?>) bound;\n                readTypeVariablesOn(variable);\n            } else {\n                registerTypeVariablesOn(bound);\n            }\n        }\n    } else {\n        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n        if (actualTypeArgument != null) {\n            if (actualTypeArgument instanceof TypeVariable) {\n                TypeVariable<?> variable = (TypeVariable<?>) actualTypeArgument;\n                readTypeVariablesOn(variable);\n            } else {\n                registerTypeVariablesOn(actualTypeArgument);\n            }\n        }\n    }\n}\n\nprivate void readTypeVariablesOn(TypeVariable<?> variable) {\n    Type[] bounds = variable.getBounds();\n    if (bounds.length > 0) {\n        for (Type bound : bounds) {\n            if (bound instanceof TypeVariable) {\n                TypeVariable<?> nested = (TypeVariable<?>) bound;\n                readTypeVariablesOn(nested);\n            } else {\n                registerTypeVariablesOn(bound);\n            }\n        }\n    } else {\n        Type actualTypeArgument = getActualTypeArgumentFor(variable);\n        if (actualTypeArgument != null) {\n            if (actualTypeArgument instanceof TypeVariable) {\n                TypeVariable<?> nested = (TypeVariable<?>) actualTypeArgument;\n                readTypeVariablesOn(nested);\n            } else {\n                registerTypeVariablesOn(actualTypeArgument);\n            }\n        }\n    }\n}\n\nprivate void registerTypeVariablesOn(Type type) {\n    if (type instanceof TypeVariable) {\n        TypeVariable<?> variable = (TypeVariable<?>) type;\n        Type[] bounds = variable.getBounds();\n        if (bounds.length > 0) {\n            for (Type bound : bounds) {\n                registerTypeVariablesOn(bound);\n            }\n        } else {\n            Type actualTypeArgument = getActualTypeArgumentFor(variable);\n            if (actualTypeArgument != null) {\n                registerTypeVariablesOn(actualTypeArgument);\n            }\n        }\n    } else if (type instanceof ParameterizedType) {\n        ParameterizedType parameterizedType = (ParameterizedType) type;\n        Type[] typeArguments = parameterizedType.getActualTypeArguments();\n        for (Type typeArgument : typeArguments) {\n            registerTypeVariablesOn(typeArgument);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..06f9c3fa9 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,77 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds.length > 0) {\n+        for (Type bound : bounds) {\n+            if (bound instanceof TypeVariable) {\n+                TypeVariable<?> variable = (TypeVariable<?>) bound;\n+                readTypeVariablesOn(variable);\n+            } else {\n+                registerTypeVariablesOn(bound);\n+            }\n+        }\n+    } else {\n+        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+        if (actualTypeArgument != null) {\n+            if (actualTypeArgument instanceof TypeVariable) {\n+                TypeVariable<?> variable = (TypeVariable<?>) actualTypeArgument;\n+                readTypeVariablesOn(variable);\n+            } else {\n+                registerTypeVariablesOn(actualTypeArgument);\n+            }\n+        }\n+    }\n+}\n+\n+private void readTypeVariablesOn(TypeVariable<?> variable) {\n+    Type[] bounds = variable.getBounds();\n+    if (bounds.length > 0) {\n+        for (Type bound : bounds) {\n+            if (bound instanceof TypeVariable) {\n+                TypeVariable<?> nested = (TypeVariable<?>) bound;\n+                readTypeVariablesOn(nested);\n+            } else {\n+                registerTypeVariablesOn(bound);\n+            }\n+        }\n+    } else {\n+        Type actualTypeArgument = getActualTypeArgumentFor(variable);\n+        if (actualTypeArgument != null) {\n+            if (actualTypeArgument instanceof TypeVariable) {\n+                TypeVariable<?> nested = (TypeVariable<?>) actualTypeArgument;\n+                readTypeVariablesOn(nested);\n+            } else {\n+                registerTypeVariablesOn(actualTypeArgument);\n+            }\n+        }\n+    }\n+}\n+\n+private void registerTypeVariablesOn(Type type) {\n+    if (type instanceof TypeVariable) {\n+        TypeVariable<?> variable = (TypeVariable<?>) type;\n+        Type[] bounds = variable.getBounds();\n+        if (bounds.length > 0) {\n+            for (Type bound : bounds) {\n+                registerTypeVariablesOn(bound);\n+            }\n+        } else {\n+            Type actualTypeArgument = getActualTypeArgumentFor(variable);\n+            if (actualTypeArgument != null) {\n+                registerTypeVariablesOn(actualTypeArgument);\n+            }\n+        }\n+    } else if (type instanceof ParameterizedType) {\n+        ParameterizedType parameterizedType = (ParameterizedType) type;\n+        Type[] typeArguments = parameterizedType.getActualTypeArguments();\n+        for (Type typeArgument : typeArguments) {\n+            registerTypeVariablesOn(typeArgument);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: registerTypeVariablesOn(Type) in TypeVariableReturnType cannot override registerTypeVariablesOn(Type) in GenericMetadataSupport",
    "test_result": "ERROR"
}