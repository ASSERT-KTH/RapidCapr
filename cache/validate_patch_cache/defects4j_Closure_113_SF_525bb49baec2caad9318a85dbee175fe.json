{
    "patch": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n        String ns = arg.getString();\n        ProvidedName provided = providedNames.get(ns);\n        Preconditions.checkNotNull(provided,\n                \"required \\\"%s\\\" namespace never provided\", ns);\n        if (!provided.isExplicitlyProvided()) {\n            unrecognizedRequires.add(\n                    new UnrecognizedRequire(n, ns, t.getSourceName()));\n        } else {\n            JSModule providedModule = provided.explicitModule;\n\n            // This must be non-null, because there was an explicit provide.\n            Preconditions.checkNotNull(providedModule);\n\n            JSModule module = t.getModule();\n            if (moduleGraph != null &&\n                    module != providedModule &&\n                    !moduleGraph.dependsOn(module, providedModule)) {\n                compiler.report(t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                        providedModule.getName(),\n                        module.getName()));\n            }\n        }\n\n        maybeAddToSymbolTable(left);\n        maybeAddStringNodeToSymbolTable(arg);\n\n        // Requires should be removed before further processing.\n        // Some clients run closure pass multiple times, first with the\n        // checks for broken requires turned off. In these cases, we\n        // allow broken requires to be preserved by the first run to\n        // let them be caught in the subsequent run.\n        Node statementParent = statementParent(n);\n        if (statementParent != null) {\n            statementParent.removeChild(n);\n            compiler.reportCodeChange();\n        }\n    }\n}\n\nprivate Node statementParent(Node n) {\n    while (n != null && n.getParent() != null) {\n        if (n.getParent().isBlock()) {\n            return n.getParent();\n        }\n        n = n.getParent();\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..0c117c70 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -292,46 +292,58 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n   /**\n    * Handles a goog.require call.\n    */\n-  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n+private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n     Node left = n.getFirstChild();\n     Node arg = left.getNext();\n     if (verifyLastArgumentIsString(t, left, arg)) {\n-      String ns = arg.getString();\n-      ProvidedName provided = providedNames.get(ns);\n-      if (provided == null || !provided.isExplicitlyProvided()) {\n-        unrecognizedRequires.add(\n-            new UnrecognizedRequire(n, ns, t.getSourceName()));\n-      } else {\n-        JSModule providedModule = provided.explicitModule;\n-\n-        // This must be non-null, because there was an explicit provide.\n-        Preconditions.checkNotNull(providedModule);\n-\n-        JSModule module = t.getModule();\n-        if (moduleGraph != null &&\n-            module != providedModule &&\n-            !moduleGraph.dependsOn(module, providedModule)) {\n-          compiler.report(\n-              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n-                  providedModule.getName(),\n-                  module.getName()));\n+        String ns = arg.getString();\n+        ProvidedName provided = providedNames.get(ns);\n+        Preconditions.checkNotNull(provided,\n+                \"required \\\"%s\\\" namespace never provided\", ns);\n+        if (!provided.isExplicitlyProvided()) {\n+            unrecognizedRequires.add(\n+                    new UnrecognizedRequire(n, ns, t.getSourceName()));\n+        } else {\n+            JSModule providedModule = provided.explicitModule;\n+\n+            // This must be non-null, because there was an explicit provide.\n+            Preconditions.checkNotNull(providedModule);\n+\n+            JSModule module = t.getModule();\n+            if (moduleGraph != null &&\n+                    module != providedModule &&\n+                    !moduleGraph.dependsOn(module, providedModule)) {\n+                compiler.report(t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+                        providedModule.getName(),\n+                        module.getName()));\n+            }\n         }\n-      }\n \n-      maybeAddToSymbolTable(left);\n-      maybeAddStringNodeToSymbolTable(arg);\n+        maybeAddToSymbolTable(left);\n+        maybeAddStringNodeToSymbolTable(arg);\n+\n+        // Requires should be removed before further processing.\n+        // Some clients run closure pass multiple times, first with the\n+        // checks for broken requires turned off. In these cases, we\n+        // allow broken requires to be preserved by the first run to\n+        // let them be caught in the subsequent run.\n+        Node statementParent = statementParent(n);\n+        if (statementParent != null) {\n+            statementParent.removeChild(n);\n+            compiler.reportCodeChange();\n+        }\n+    }\n+}\n \n-      // Requires should be removed before further processing.\n-      // Some clients run closure pass multiple times, first with\n-      // the checks for broken requires turned off. In these cases, we\n-      // allow broken requires to be preserved by the first run to\n-      // let them be caught in the subsequent run.\n-      if (provided != null) {\n-        parent.detachFromParent();\n-        compiler.reportCodeChange();\n-      }\n+private Node statementParent(Node n) {\n+    while (n != null && n.getParent() != null) {\n+        if (n.getParent().isBlock()) {\n+            return n.getParent();\n+        }\n+        n = n.getParent();\n     }\n-  }\n+    return null;\n+}\n \n   /**\n    * Handles a goog.provide call.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}