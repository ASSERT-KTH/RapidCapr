{
    "patch": "private void readTypeVariables() {\n    if (typeVariable != null) {\n        Type[] bounds = typeVariable.getBounds();\n        if (bounds != null && bounds.length > 0) {\n            for (Type bound : bounds) {\n                if (isTypeVariable(bound)) {\n                    readTypeVariable((TypeVariable<?>) bound);\n                } else {\n                    registerTypeVariablesOn(bound);\n                }\n            }\n        } else {\n            readTypeVariable(typeVariable);\n        }\n    }\n}\n\nprivate void readTypeVariable(TypeVariable<?> typeVar) {\n    Type[] bounds = typeVar.getBounds();\n    if (bounds != null && bounds.length > 0) {\n        for (Type bound : bounds) {\n            if (isTypeVariable(bound)) {\n                readTypeVariable((TypeVariable<?>) bound);\n            } else {\n                registerTypeVariablesOn(bound);\n            }\n        }\n    } else {\n        registerTypeVariablesOn(typeVar);\n    }\n}\n\nprivate boolean isTypeVariable(Type type) {\n    return type instanceof TypeVariable && ((TypeVariable<?>) type).getBounds().length > 0;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..6239b5b2d 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,42 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable != null) {\n+        Type[] bounds = typeVariable.getBounds();\n+        if (bounds != null && bounds.length > 0) {\n+            for (Type bound : bounds) {\n+                if (isTypeVariable(bound)) {\n+                    readTypeVariable((TypeVariable<?>) bound);\n+                } else {\n+                    registerTypeVariablesOn(bound);\n+                }\n+            }\n+        } else {\n+            readTypeVariable(typeVariable);\n+        }\n+    }\n+}\n+\n+private void readTypeVariable(TypeVariable<?> typeVar) {\n+    Type[] bounds = typeVar.getBounds();\n+    if (bounds != null && bounds.length > 0) {\n+        for (Type bound : bounds) {\n+            if (isTypeVariable(bound)) {\n+                readTypeVariable((TypeVariable<?>) bound);\n+            } else {\n+                registerTypeVariablesOn(bound);\n+            }\n+        }\n+    } else {\n+        registerTypeVariablesOn(typeVar);\n+    }\n+}\n+\n+private boolean isTypeVariable(Type type) {\n+    return type instanceof TypeVariable && ((TypeVariable<?>) type).getBounds().length > 0;\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}