{
    "patch": "public double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    double hPrev = getA(0, x);\n\n    // use the value of small as epsilon criteria for zero checks\n    if (Precision.equals(hPrev, 0.0, small)) {\n        hPrev = small;\n    }\n\n    int n = 1;\n    double dPrev = 0.0;\n    double p0 = 1.0;\n    double q1 = 1.0;\n    double cPrev = hPrev;\n    double hN = hPrev;\n\n    while (n < maxIterations) {\n        final double a = getA(n, x);\n        final double b = getB(n, x);\n\n        double cN = a * hPrev + b * p0;\n        double q2 = a * q1 + b * dPrev;\n        if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n            double scaleFactor = 1d;\n            double lastScaleFactor = 1d;\n            final int maxPower = 5;\n            final double scale = FastMath.max(a, b);\n            if (scale <= 0) { // Can't scale\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            }\n            for (int i = 0; i < maxPower; i++) {\n                lastScaleFactor = scaleFactor;\n                scaleFactor *= scale;\n                if (a != 0.0 && a > b) {\n                    cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n                    q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n                } else if (b != 0) {\n                    cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n                    q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n                }\n                if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n                    break;\n                }\n            }\n        }\n\n        if (FastMath.abs(q2) < 1E-20) { // check if q2 is too small\n            hN = cN / cPrev;\n        } else { // otherwise calculate hN normally\n            double deltaN = cN / q2 / cPrev;\n            hN = cPrev * deltaN;\n            if (Double.isInfinite(hN)) { // check if hN is infinite\n                if (deltaN > 0) {\n                    hN = Double.MAX_VALUE;\n                } else {\n                    hN = -Double.MAX_VALUE;\n                }\n                break; // exit the loop as we have a divergent CF\n            }\n            if (Double.isNaN(hN)) { // check if hN is NaN\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n            }\n            if (FastMath.abs(deltaN - 1.0) < epsilon) { // check for convergence\n                break;\n            }\n        }\n\n        dPrev = q1;\n        cPrev = cN / q2;\n        p0 = hPrev;\n        hPrev = hN;\n        q1 = q2;\n        n++;\n    }\n\n    if (n >= maxIterations) { // check if the continued fraction did not converge\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);\n    }\n\n    return hN;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex b881bb2d7..44bbc3580 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -120,82 +120,86 @@ public abstract class ContinuedFraction {\n      * @return the value of the continued fraction evaluated at x.\n      * @throws ConvergenceException if the algorithm fails to converge.\n      */\n-    public double evaluate(double x, double epsilon, int maxIterations) {\n-        final double small = 1e-50;\n-        double hPrev = getA(0, x);\n+public double evaluate(double x, double epsilon, int maxIterations) {\n+    final double small = 1e-50;\n+    double hPrev = getA(0, x);\n \n-        // use the value of small as epsilon criteria for zero checks\n-        if (Precision.equals(hPrev, 0.0, small)) {\n-            hPrev = small;\n-        }\n+    // use the value of small as epsilon criteria for zero checks\n+    if (Precision.equals(hPrev, 0.0, small)) {\n+        hPrev = small;\n+    }\n \n-        int n = 1;\n-        double dPrev = 0.0;\n-        double p0 = 1.0;\n-        double q1 = 1.0;\n-        double cPrev = hPrev;\n-        double hN = hPrev;\n-\n-        while (n < maxIterations) {\n-            final double a = getA(n, x);\n-            final double b = getB(n, x);\n-\n-            double cN = a * hPrev + b * p0;\n-            double q2 = a * q1 + b * dPrev;\n-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n-                double scaleFactor = 1d;\n-                double lastScaleFactor = 1d;\n-                final int maxPower = 5;\n-                final double scale = FastMath.max(a,b);\n-                if (scale <= 0) {  // Can't scale\n-                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+    int n = 1;\n+    double dPrev = 0.0;\n+    double p0 = 1.0;\n+    double q1 = 1.0;\n+    double cPrev = hPrev;\n+    double hN = hPrev;\n+\n+    while (n < maxIterations) {\n+        final double a = getA(n, x);\n+        final double b = getB(n, x);\n+\n+        double cN = a * hPrev + b * p0;\n+        double q2 = a * q1 + b * dPrev;\n+        if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n+            double scaleFactor = 1d;\n+            double lastScaleFactor = 1d;\n+            final int maxPower = 5;\n+            final double scale = FastMath.max(a, b);\n+            if (scale <= 0) { // Can't scale\n+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+            }\n+            for (int i = 0; i < maxPower; i++) {\n+                lastScaleFactor = scaleFactor;\n+                scaleFactor *= scale;\n+                if (a != 0.0 && a > b) {\n+                    cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n+                    q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n+                } else if (b != 0) {\n+                    cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n+                    q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n                 }\n-                for (int i = 0; i < maxPower; i++) {\n-                    lastScaleFactor = scaleFactor;\n-                    scaleFactor *= scale;\n-                    if (a != 0.0 && a > b) {\n-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n-                    } else if (b != 0) {\n-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n-                    }\n-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n-                        break;\n-                    }\n+                if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n+                    break;\n                 }\n             }\n+        }\n \n-            final double deltaN = cN / q2 / cPrev;\n+        if (FastMath.abs(q2) < 1E-20) { // check if q2 is too small\n+            hN = cN / cPrev;\n+        } else { // otherwise calculate hN normally\n+            double deltaN = cN / q2 / cPrev;\n             hN = cPrev * deltaN;\n-\n-            if (Double.isInfinite(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n-                                               x);\n+            if (Double.isInfinite(hN)) { // check if hN is infinite\n+                if (deltaN > 0) {\n+                    hN = Double.MAX_VALUE;\n+                } else {\n+                    hN = -Double.MAX_VALUE;\n+                }\n+                break; // exit the loop as we have a divergent CF\n             }\n-            if (Double.isNaN(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n-                                               x);\n+            if (Double.isNaN(hN)) { // check if hN is NaN\n+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x);\n             }\n-\n-            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n+            if (FastMath.abs(deltaN - 1.0) < epsilon) { // check for convergence\n                 break;\n             }\n-\n-            dPrev = q1;\n-            cPrev = cN / q2;\n-            p0 = hPrev;\n-            hPrev = cN;\n-            q1 = q2;\n-            n++;\n         }\n \n-        if (n >= maxIterations) {\n-            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n-                                                maxIterations, x);\n-        }\n+        dPrev = q1;\n+        cPrev = cN / q2;\n+        p0 = hPrev;\n+        hPrev = hN;\n+        q1 = q2;\n+        n++;\n+    }\n \n-        return hN;\n+    if (n >= maxIterations) { // check if the continued fraction did not converge\n+        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);\n     }\n \n+    return hN;\n+}\n+\n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.4063850939> but was:<2.21778709095647E-309>",
    "test_result": "FAIL"
}