{
    "patch": "private Node tryFoldSimpleFunctionCall(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node callTarget = n.getFirstChild();\n  if (callTarget.isName() && callTarget.getString().equals(\"String\") && n.hasOneChild()) {\n    Node value = n.getLastChild();\n    if (value.isImmutable()) {\n      Node replacement = IR.string(value.toString()).srcref(callTarget);\n      n.replaceWith(replacement);\n      reportCodeChange();\n      return replacement;\n    }\n  }\n  return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..9da048cc 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,7 +217,20 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+private Node tryFoldSimpleFunctionCall(Node n) {\n+  Preconditions.checkState(n.isCall());\n+  Node callTarget = n.getFirstChild();\n+  if (callTarget.isName() && callTarget.getString().equals(\"String\") && n.hasOneChild()) {\n+    Node value = n.getLastChild();\n+    if (value.isImmutable()) {\n+      Node replacement = IR.string(value.toString()).srcref(callTarget);\n+      n.replaceWith(replacement);\n+      reportCodeChange();\n+      return replacement;\n+    }\n+  }\n+  return n;\n+}\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}