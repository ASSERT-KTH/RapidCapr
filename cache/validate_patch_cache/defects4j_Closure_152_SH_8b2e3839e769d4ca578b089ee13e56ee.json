{
    "patch": "JSType typeOfThisResolved = safeResolve(typeOfThis, t, scope);\nif (typeOfThisResolved == null) {\n  typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n} else if (!(typeOfThisResolved instanceof ObjectType)) {\n  if (typeOfThisResolved.isUnionType()) {\n    UnionType unionType = (UnionType) typeOfThisResolved;\n    ImmutableList<JSType> alternatives = unionType.getAlternates();\n    boolean hasObjectType = false;\n    for (JSType alternate : alternatives) {\n      if (alternate instanceof ObjectType) {\n        typeOfThis = (ObjectType) alternate;\n        hasObjectType = true;\n        break;\n      }\n    }\n    if (!hasObjectType) {\n      typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n    }\n  } else {\n    typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n  }\n} else {\n  typeOfThis = (ObjectType) typeOfThisResolved;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..b850c569 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,30 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+JSType typeOfThisResolved = safeResolve(typeOfThis, t, scope);\n+if (typeOfThisResolved == null) {\n+  typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n+} else if (!(typeOfThisResolved instanceof ObjectType)) {\n+  if (typeOfThisResolved.isUnionType()) {\n+    UnionType unionType = (UnionType) typeOfThisResolved;\n+    ImmutableList<JSType> alternatives = unionType.getAlternates();\n+    boolean hasObjectType = false;\n+    for (JSType alternate : alternatives) {\n+      if (alternate instanceof ObjectType) {\n+        typeOfThis = (ObjectType) alternate;\n+        hasObjectType = true;\n+        break;\n+      }\n+    }\n+    if (!hasObjectType) {\n+      typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n+    }\n+  } else {\n+    typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n+  }\n+} else {\n+  typeOfThis = (ObjectType) typeOfThisResolved;\n+}\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}