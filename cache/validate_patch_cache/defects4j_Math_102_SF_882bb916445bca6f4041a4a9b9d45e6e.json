{
    "patch": "import java.math.BigDecimal;\nimport java.math.RoundingMode;\n\npublic class ChiSquareCalculator {\n\n    public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n        if (expected == null || observed == null || expected.length != observed.length) {\n            throw new IllegalArgumentException(\"Invalid inputs: expected and observed arrays must have the same length\");\n        }\n\n        BigDecimal sumSq = BigDecimal.ZERO;\n\n        for (int i = 0; i < observed.length; i++) {\n            if (expected[i] <= 0.0d || observed[i] < 0L) {\n                throw new IllegalArgumentException(\"Invalid inputs: expected counts must be positive and observed counts must be non-negative\");\n            }\n            BigDecimal dev = BigDecimal.valueOf(observed[i]).subtract(BigDecimal.valueOf(expected[i]));\n            BigDecimal squaredRatio = dev.multiply(dev).divide(BigDecimal.valueOf(expected[i]), RoundingMode.HALF_UP);\n            sumSq = sumSq.add(squaredRatio);\n        }\n\n        return sumSq.setScale(10, RoundingMode.HALF_UP).doubleValue();\n    }\n\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\nindex c87b0101f..952a8cae5 100644\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n@@ -61,25 +61,32 @@ public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n      * @throws IllegalArgumentException if preconditions are not met\n      * or length is less than 2\n      */\n-    public double chiSquare(double[] expected, long[] observed)\n-        throws IllegalArgumentException {\n-        if ((expected.length < 2) || (expected.length != observed.length)) {\n-            throw new IllegalArgumentException(\n-                    \"observed, expected array lengths incorrect\");\n-        }\n-        if (!isPositive(expected) || !isNonNegative(observed)) {\n-            throw new IllegalArgumentException(\n-                \"observed counts must be non-negative and expected counts must be postive\");\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+\n+public class ChiSquareCalculator {\n+\n+    public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n+        if (expected == null || observed == null || expected.length != observed.length) {\n+            throw new IllegalArgumentException(\"Invalid inputs: expected and observed arrays must have the same length\");\n         }\n-        double sumSq = 0.0d;\n-        double dev = 0.0d;\n+\n+        BigDecimal sumSq = BigDecimal.ZERO;\n+\n         for (int i = 0; i < observed.length; i++) {\n-                dev = ((double) observed[i] - expected[i]);\n-                sumSq += dev * dev / expected[i];\n+            if (expected[i] <= 0.0d || observed[i] < 0L) {\n+                throw new IllegalArgumentException(\"Invalid inputs: expected counts must be positive and observed counts must be non-negative\");\n+            }\n+            BigDecimal dev = BigDecimal.valueOf(observed[i]).subtract(BigDecimal.valueOf(expected[i]));\n+            BigDecimal squaredRatio = dev.multiply(dev).divide(BigDecimal.valueOf(expected[i]), RoundingMode.HALF_UP);\n+            sumSq = sumSq.add(squaredRatio);\n         }\n-        return sumSq;\n+\n+        return sumSq.setScale(10, RoundingMode.HALF_UP).doubleValue();\n     }\n \n+}\n+\n     /**\n      * {@inheritDoc}\n      * <p><strong>Note: </strong>This implementation rescales the ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}