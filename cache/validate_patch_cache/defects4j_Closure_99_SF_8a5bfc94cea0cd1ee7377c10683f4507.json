{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors or have the @this\n        // or @override annotation.\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n            return false;\n        }\n\n        // Don't traverse function declarations.\n        if (NodeUtil.getEnclosingFunction(n) == null) {\n            // Don't traverse functions that are not direct children of a block or script node.\n            if (parent == null || (parent.getType() != Token.BLOCK && parent.getType() != Token.SCRIPT)) {\n                return false;\n            }\n\n            // Don't traverse functions that are not assigned to a variable, property, or array element.\n            if (parent.getParent() == null || (!NodeUtil.isExpressionResultUsed(parent) &&\n                    ((parent.getType() != Token.VAR && parent.getType() != Token.LET && parent.getType() != Token.CONST) ||\n                            parent.getFirstChild() != n))) {\n                return false;\n            }\n        } else {\n            // Don't traverse functions that are nested within another function or have a\n            // this reference that is not within a prototype property.\n            Node enclosingFunction = NodeUtil.getEnclosingFunction(n);\n            JSDocInfo enclosingFunctionJsDoc = getFunctionJsDocInfo(enclosingFunction);\n            if (enclosingFunction != null &&\n                    (enclosingFunctionJsDoc == null || (!enclosingFunctionJsDoc.hasThisType() &&\n                    enclosingFunctionJsDoc.getScope().isLocal()))) {\n                return false;\n            }\n        }\n    } else if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n            // Always traverse the left side of the assignment. To handle\n            // nested assignments properly (e.g., (a = this).property = c;),\n            // assignLhsChild should not be overridden.\n            if (assignLhsChild == null) {\n                assignLhsChild = lhs;\n            }\n        } else {\n            // Only traverse the right side if it's not an assignment to a prototype\n            // property or subproperty.\n            if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n                // Only traverse the right side if the assignment is not a named computation.\n                String lhsQualifiedName = lhs.getQualifiedName();\n                if (lhsQualifiedName == null || !lhsQualifiedName.contains(\".\")) {\n                    return false;\n                }\n            } else if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..4548d716 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,67 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+        // Don't traverse functions that are constructors or have the @this\n+        // or @override annotation.\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n+            return false;\n+        }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n-    }\n+        // Don't traverse function declarations.\n+        if (NodeUtil.getEnclosingFunction(n) == null) {\n+            // Don't traverse functions that are not direct children of a block or script node.\n+            if (parent == null || (parent.getType() != Token.BLOCK && parent.getType() != Token.SCRIPT)) {\n+                return false;\n+            }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+            // Don't traverse functions that are not assigned to a variable, property, or array element.\n+            if (parent.getParent() == null || (!NodeUtil.isExpressionResultUsed(parent) &&\n+                    ((parent.getType() != Token.VAR && parent.getType() != Token.LET && parent.getType() != Token.CONST) ||\n+                            parent.getFirstChild() != n))) {\n+                return false;\n+            }\n+        } else {\n+            // Don't traverse functions that are nested within another function or have a\n+            // this reference that is not within a prototype property.\n+            Node enclosingFunction = NodeUtil.getEnclosingFunction(n);\n+            JSDocInfo enclosingFunctionJsDoc = getFunctionJsDocInfo(enclosingFunction);\n+            if (enclosingFunction != null &&\n+                    (enclosingFunctionJsDoc == null || (!enclosingFunctionJsDoc.hasThisType() &&\n+                    enclosingFunctionJsDoc.getScope().isLocal()))) {\n+                return false;\n+            }\n+        }\n+    } else if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+            // Always traverse the left side of the assignment. To handle\n+            // nested assignments properly (e.g., (a = this).property = c;),\n+            // assignLhsChild should not be overridden.\n+            if (assignLhsChild == null) {\n+                assignLhsChild = lhs;\n+            }\n+        } else {\n+            // Only traverse the right side if it's not an assignment to a prototype\n+            // property or subproperty.\n+            if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n+                // Only traverse the right side if the assignment is not a named computation.\n+                String lhsQualifiedName = lhs.getQualifiedName();\n+                if (lhsQualifiedName == null || !lhsQualifiedName.contains(\".\")) {\n+                    return false;\n+                }\n+            } else if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+                return false;\n+            }\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n-      }\n     }\n \n     return true;\n-  }\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}