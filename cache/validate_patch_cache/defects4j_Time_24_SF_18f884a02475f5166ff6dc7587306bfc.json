{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    int defaultYear = iDefaultYear;\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            int year = iDefaultYear;\n            try {\n                // check if default year is valid\n                year = (int)savedFields[0].set(year, false);\n            } catch (IllegalFieldValueException e) {\n                // ignore and use default year\n            }\n            defaultYear = year;\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n    \n    if (iZone == null) {\n        millis -= iOffset;\n        millis = handleDefaultYearChange(millis, defaultYear);\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n        millis = handleDefaultYearChange(millis + offset, defaultYear) - offset;\n    }\n    \n    return millis;\n}\n\nprivate long handleDefaultYearChange(long millis, int defaultYear) {\n    if (defaultYear != iDefaultYear) {\n        Chronology chrono = getChronology().withYear(defaultYear);\n        long instant = millis;\n        if (iStrict) {\n            // performing a 'set' will validate\n            instant = chrono.dayOfMonth().set(instant, 1);\n        } else {\n            // check if we can use the newly set year, or if a leap year day must be dropped\n            try {\n                instant = chrono.dayOfMonth().set(instant, 1);\n            } catch (IllegalFieldValueException e) {\n                if (e.getIllegalFieldValue() != 29 || !chrono.isLeapYear(defaultYear)) {\n                    throw e;\n                }\n                // dropping leap year day\n                instant = chrono.monthOfYear().set(instant, 3);\n                instant = chrono.dayOfMonth().set(instant, 1);\n            }\n        }\n        iChrono = chrono;\n        iDefaultYear = defaultYear;\n        millis = instant;\n    }\n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..d38da264 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,90 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+    int defaultYear = iDefaultYear;\n+    if (count > 0) {\n+        // alter base year for parsing if first field is month or day\n+        DurationField months = DurationFieldType.months().getField(iChrono);\n+        DurationField days = DurationFieldType.days().getField(iChrono);\n+        DurationField first = savedFields[0].iField.getDurationField();\n+        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+            int year = iDefaultYear;\n+            try {\n+                // check if default year is valid\n+                year = (int)savedFields[0].set(year, false);\n+            } catch (IllegalFieldValueException e) {\n+                // ignore and use default year\n             }\n+            defaultYear = year;\n         }\n+    }\n \n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n+    long millis = iMillis;\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n+        }\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+    \n+    if (iZone == null) {\n+        millis -= iOffset;\n+        millis = handleDefaultYearChange(millis, defaultYear);\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n+                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n             if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n-            throw e;\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n+        millis = handleDefaultYearChange(millis + offset, defaultYear) - offset;\n+    }\n+    \n+    return millis;\n+}\n+\n+private long handleDefaultYearChange(long millis, int defaultYear) {\n+    if (defaultYear != iDefaultYear) {\n+        Chronology chrono = getChronology().withYear(defaultYear);\n+        long instant = millis;\n+        if (iStrict) {\n+            // performing a 'set' will validate\n+            instant = chrono.dayOfMonth().set(instant, 1);\n         } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+            // check if we can use the newly set year, or if a leap year day must be dropped\n+            try {\n+                instant = chrono.dayOfMonth().set(instant, 1);\n+            } catch (IllegalFieldValueException e) {\n+                if (e.getIllegalFieldValue() != 29 || !chrono.isLeapYear(defaultYear)) {\n+                    throw e;\n                 }\n-                throw new IllegalArgumentException(message);\n+                // dropping leap year day\n+                instant = chrono.monthOfYear().set(instant, 3);\n+                instant = chrono.dayOfMonth().set(instant, 1);\n             }\n         }\n-        \n-        return millis;\n+        iChrono = chrono;\n+        iDefaultYear = defaultYear;\n+        millis = instant;\n     }\n+    return millis;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}