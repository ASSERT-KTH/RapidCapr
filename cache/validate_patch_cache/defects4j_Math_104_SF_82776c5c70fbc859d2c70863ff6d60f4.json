{
    "patch": "public class GammaFunction {\n\n    public static double gamma(double x) {\n        if (x == 0.0) {\n            return Double.POSITIVE_INFINITY;\n        }\n        boolean negative = false;\n        double arg = x;\n        if (x < 0.0) {\n            negative = true;\n            arg = -arg;\n        }\n        double[] cof = {76.18009172947146, -86.50532032941677,\n                24.01409824083091, -1.231739572450155,\n                0.1208650973866179e-2, -0.5395239384953e-5};\n        double ser = 1.000000000190015;\n        for (int j = 0; j < 6; j++) {\n            arg += 1.0;\n            ser += cof[j] / arg;\n        }\n        double gamma = 1.000000000190015 / ser;\n        if (negative) {\n            gamma = Math.PI / (Math.sin(Math.PI * x) * gamma);\n            if (Double.isNaN(gamma) || Double.isInfinite(gamma))\n                throw new ArithmeticException(\"gamma function overflow\");\n            return gamma;\n        }\n        if (Double.isNaN(gamma) || Double.isInfinite(gamma))\n            throw new ArithmeticException(\"gamma function overflow\");\n        return gamma;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..8a24607d6 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,38 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public class GammaFunction {\n+\n+    public static double gamma(double x) {\n+        if (x == 0.0) {\n+            return Double.POSITIVE_INFINITY;\n+        }\n+        boolean negative = false;\n+        double arg = x;\n+        if (x < 0.0) {\n+            negative = true;\n+            arg = -arg;\n+        }\n+        double[] cof = {76.18009172947146, -86.50532032941677,\n+                24.01409824083091, -1.231739572450155,\n+                0.1208650973866179e-2, -0.5395239384953e-5};\n+        double ser = 1.000000000190015;\n+        for (int j = 0; j < 6; j++) {\n+            arg += 1.0;\n+            ser += cof[j] / arg;\n+        }\n+        double gamma = 1.000000000190015 / ser;\n+        if (negative) {\n+            gamma = Math.PI / (Math.sin(Math.PI * x) * gamma);\n+            if (Double.isNaN(gamma) || Double.isInfinite(gamma))\n+                throw new ArithmeticException(\"gamma function overflow\");\n+            return gamma;\n+        }\n+        if (Double.isNaN(gamma) || Double.isInfinite(gamma))\n+            throw new ArithmeticException(\"gamma function overflow\");\n+        return gamma;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}