{
    "patch": "                       functionNode.getLp() - 1;\n        newName.setCharno(position2charno(lpColumn));\n      }\n      if (functionNode.getFunctionType() == FunctionNode.FUNCTION_EXPRESSION) {\n          // It's a function expression, not a function declaration.\n>>> [ INFILL ] <<<\n          Node nameNode = newNode(Token.NAME, newName);\n          Node front = newNode(Token.LP);\n          front.addChildToFront(nameNode);\n          newName = front;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..e4e88032 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,17 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+                       functionNode.getLp() - 1;\n+        newName.setCharno(position2charno(lpColumn));\n+      }\n+      if (functionNode.getFunctionType() == FunctionNode.FUNCTION_EXPRESSION) {\n+          // It's a function expression, not a function declaration.\n+>>> [ INFILL ] <<<\n+          Node nameNode = newNode(Token.NAME, newName);\n+          Node front = newNode(Token.LP);\n+          front.addChildToFront(nameNode);\n+          newName = front;\n+        }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}