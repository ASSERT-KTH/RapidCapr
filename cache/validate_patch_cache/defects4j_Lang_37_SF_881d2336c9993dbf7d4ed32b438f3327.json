{
    "patch": "        if (array1 == null && array2 == null) {\n            return null;\n        }\n        else if (array1 == null) {\n            return Arrays.copyOf(array2, array2.length);\n        }\n        else if (array2 == null) {\n            return Arrays.copyOf(array1, array1.length);\n        }\n\n        final Class<?> type1 = array1.getClass().getComponentType();\n        final Class<?> type2 = array2.getClass().getComponentType();\n\n        if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n            throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" in an array of \" + type1.getName());\n        }\n\n        @SuppressWarnings(\"unchecked\") \n        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/ArrayUtils.java b/src/java/org/apache/commons/lang3/ArrayUtils.java\nindex 889497e9..7f8ab159 100644\n--- a/src/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java\n@@ -2950,19 +2950,28 @@ public class ArrayUtils {\n      * @since 2.1\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> T[] addAll(T[] array1, T... array2) {\n-        if (array1 == null) {\n-            return clone(array2);\n-        } else if (array2 == null) {\n-            return clone(array1);\n+        if (array1 == null && array2 == null) {\n+            return null;\n+        }\n+        else if (array1 == null) {\n+            return Arrays.copyOf(array2, array2.length);\n         }\n+        else if (array2 == null) {\n+            return Arrays.copyOf(array1, array1.length);\n+        }\n+\n         final Class<?> type1 = array1.getClass().getComponentType();\n+        final Class<?> type2 = array2.getClass().getComponentType();\n+\n+        if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n+            throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" in an array of \" + type1.getName());\n+        }\n+\n+        @SuppressWarnings(\"unchecked\") \n         T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n+\n         System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n-            // Check if problem is incompatible types\n-        return joinedArray;\n-    }\n+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n \n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}