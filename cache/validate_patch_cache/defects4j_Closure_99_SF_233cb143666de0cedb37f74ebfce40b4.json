{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this,\n      // @override, or @interface annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride() || jsDoc.isInterface())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n            pType == Token.OBJECTLIT ||\n            pType == Token.CATCH)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\") ||\n            lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n          Node propNameNode = rhs.getFirstChild();\n          if (propNameNode != null && propNameNode.getType() == Token.STRING) {\n            String propName = propNameNode.getString();\n            if (propName != null && propName.length() > 0) {\n              if (propName.charAt(0) == '$' || propName.charAt(propName.length() - 1) == '$') {\n                return false;\n              }\n              if (propName.indexOf(\"$$\") >= 0) {\n                return false;\n              }\n            }\n          }\n          return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..8a4bc62d 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,16 +81,15 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n+      // Don't traverse functions that are constructors or have the @this,\n+      // @override, or @interface annotation.\n       JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n       if (jsDoc != null &&\n           (jsDoc.isConstructor() ||\n            jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n+           jsDoc.isOverride() || jsDoc.isInterface())) {\n         return false;\n       }\n \n@@ -103,7 +102,9 @@ final class CheckGlobalThis implements Callback {\n       if (!(pType == Token.BLOCK ||\n             pType == Token.SCRIPT ||\n             pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n+            pType == Token.ASSIGN ||\n+            pType == Token.OBJECTLIT ||\n+            pType == Token.CATCH)) {\n         return false;\n       }\n     }\n@@ -111,7 +112,6 @@ final class CheckGlobalThis implements Callback {\n     if (parent != null && parent.getType() == Token.ASSIGN) {\n       Node lhs = parent.getFirstChild();\n       Node rhs = lhs.getNext();\n-      \n       if (n == lhs) {\n         // Always traverse the left side of the assignment. To handle\n         // nested assignments properly (e.g., (a = this).property = c;),\n@@ -122,18 +122,22 @@ final class CheckGlobalThis implements Callback {\n       } else {\n         // Only traverse the right side if it's not an assignment to a prototype\n         // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n+        if (lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\") ||\n+            lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+          Node propNameNode = rhs.getFirstChild();\n+          if (propNameNode != null && propNameNode.getType() == Token.STRING) {\n+            String propName = propNameNode.getString();\n+            if (propName != null && propName.length() > 0) {\n+              if (propName.charAt(0) == '$' || propName.charAt(propName.length() - 1) == '$') {\n+                return false;\n+              }\n+              if (propName.indexOf(\"$$\") >= 0) {\n+                return false;\n+              }\n+            }\n           }\n-      }\n-    }\n-\n-    return true;\n-  }\n+          return false;\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}