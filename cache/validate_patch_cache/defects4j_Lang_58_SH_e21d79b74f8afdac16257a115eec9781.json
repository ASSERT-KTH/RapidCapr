{
    "patch": "if (Character.isDigit(lastChar) || lastChar == '.') {\n    //User doesn't have a preference on the return type, so let's start\n    //small and go from there...\n    if (expPos > -1 && expPos < str.length() - 1) {\n        exp = str.substring(expPos + 1, str.length());\n    } else {\n        exp = null;\n    }\n    if (dec == null && exp == null) {\n        //Must be an int,long,bigint\n        try {\n            String numeric = str;\n            if (numeric.endsWith(\"f\") || numeric.endsWith(\"F\")) {\n              Float.parseFloat(numeric.substring(0, numeric.length() - 1));\n            } else if (numeric.endsWith(\"d\") || numeric.endsWith(\"D\")) {\n              Double.parseDouble(numeric.substring(0, numeric.length() - 1));\n            } else if (numeric.endsWith(\"l\") || numeric.endsWith(\"L\")) {\n              Long.parseLong(numeric.substring(0, numeric.length() - 1));\n            } else {\n              Integer.parseInt(numeric);\n            }\n        } catch (NumberFormatException nfe) {\n            // ignore the bad number\n        }\n        try {\n            return createLong(str);\n        } catch (NumberFormatException nfe) {\n            // ignore the bad number\n        }\n        return createBigInteger(str);\n\n    } else {\n        //Must be a float,double,BigDec\n        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        try {\n            Float f = createFloat(str);\n            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                return f;\n            }\n        } catch (NumberFormatException nfe) {\n            // ignore the bad number\n        }\n        try {\n            Double d = createDouble(str);\n            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                return d;\n            }\n        } catch (NumberFormatException nfe) {\n            // ignore the bad number\n        }\n\n        return createBigDecimal(str);\n\n    }\n} else {\n    //String does not end with a valid numeric control character.\n    throw new NumberFormatException(str + \" is not a valid number.\");\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/NumberUtils.java b/src/java/org/apache/commons/lang/math/NumberUtils.java\nindex c0f06a47..0224f610 100644\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -451,8 +451,64 @@ public class NumberUtils {\n                 case 'L' :\n                     if (dec == null\n                         && exp == null\n-                        && isDigits(numeric.substring(1))\n-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n+if (Character.isDigit(lastChar) || lastChar == '.') {\n+    //User doesn't have a preference on the return type, so let's start\n+    //small and go from there...\n+    if (expPos > -1 && expPos < str.length() - 1) {\n+        exp = str.substring(expPos + 1, str.length());\n+    } else {\n+        exp = null;\n+    }\n+    if (dec == null && exp == null) {\n+        //Must be an int,long,bigint\n+        try {\n+            String numeric = str;\n+            if (numeric.endsWith(\"f\") || numeric.endsWith(\"F\")) {\n+              Float.parseFloat(numeric.substring(0, numeric.length() - 1));\n+            } else if (numeric.endsWith(\"d\") || numeric.endsWith(\"D\")) {\n+              Double.parseDouble(numeric.substring(0, numeric.length() - 1));\n+            } else if (numeric.endsWith(\"l\") || numeric.endsWith(\"L\")) {\n+              Long.parseLong(numeric.substring(0, numeric.length() - 1));\n+            } else {\n+              Integer.parseInt(numeric);\n+            }\n+        } catch (NumberFormatException nfe) {\n+            // ignore the bad number\n+        }\n+        try {\n+            return createLong(str);\n+        } catch (NumberFormatException nfe) {\n+            // ignore the bad number\n+        }\n+        return createBigInteger(str);\n+\n+    } else {\n+        //Must be a float,double,BigDec\n+        boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+        try {\n+            Float f = createFloat(str);\n+            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                return f;\n+            }\n+        } catch (NumberFormatException nfe) {\n+            // ignore the bad number\n+        }\n+        try {\n+            Double d = createDouble(str);\n+            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+                return d;\n+            }\n+        } catch (NumberFormatException nfe) {\n+            // ignore the bad number\n+        }\n+\n+        return createBigDecimal(str);\n+\n+    }\n+} else {\n+    //String does not end with a valid numeric control character.\n+    throw new NumberFormatException(str + \" is not a valid number.\");\n+}\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}