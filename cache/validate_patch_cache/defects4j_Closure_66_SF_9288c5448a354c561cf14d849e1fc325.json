{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    try {\n        JSONObject jo = new JSONObject(jsonStr);\n        JSONArray ja = jo.getJSONArray(\"records\");\n        int total = ja.length();\n        int typed = 0;\n        for (int i = 0; i < total; i++) {\n            JSONObject record = ja.getJSONObject(i);\n            if (record.getBoolean(\"typed\")) {\n                typed++;\n            }\n        }\n        return ((double) typed / total) * 100;\n    } catch (JSONException e) {\n        e.printStackTrace();\n    }\n    return 0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..0b8e8da4 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    try {\n+        JSONObject jo = new JSONObject(jsonStr);\n+        JSONArray ja = jo.getJSONArray(\"records\");\n+        int total = ja.length();\n+        int typed = 0;\n+        for (int i = 0; i < total; i++) {\n+            JSONObject record = ja.getJSONObject(i);\n+            if (record.getBoolean(\"typed\")) {\n+                typed++;\n+            }\n+        }\n+        return ((double) typed / total) * 100;\n+    } catch (JSONException e) {\n+        e.printStackTrace();\n+    }\n+    return 0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}