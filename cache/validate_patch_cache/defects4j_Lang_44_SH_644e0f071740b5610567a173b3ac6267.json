{
    "patch": "if (val.indexOf('.') != val.lastIndexOf('.')) {\n    // String contains more than one dot\n    throw new NumberFormatException(val + \" is not a valid number.\");\n}\nif (val.startsWith(\"+\") || val.startsWith(\"-\")) {\n    char secondChar = val.charAt(1);\n    if (val.startsWith(\"--\") || (val.startsWith(\"-0\") && Character.isDigit(secondChar))) {\n        // this is protection for poorness in java.lang.BigDecimal.\n        // it accepts this as a legal value, but it does not appear \n        // to be in specification of class. OS X Java parses it to \n        // a wrong value.\n        return null;\n    }\n    if (val.startsWith(\"+\")) {\n        val = val.substring(1);\n    }\n    if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n        return createInteger(val);\n    }\n    try {\n        return createNumber(val);\n    } catch (NumberFormatException ne) {\n        // Ignore the exception and continue processing\n    }\n    return isAllZeros(val) ? createInteger(\"0\") : createLong(val);\n}\n\nif (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n    return createInteger(val);\n}\n\nif (val.indexOf('e') > -1 || val.indexOf('E') > -1) {\n    return createBigDecimal(val);\n}\n\ntry {\n    return createInteger(val);\n} catch (NumberFormatException e) {\n    // Ignore the exception and continue processing\n}\n\ntry {\n    return createLong(val);\n} catch (NumberFormatException e) {\n    // Ignore the exception and continue processing\n}\n\nreturn createBigDecimal(val);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..e6da2d0a 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,54 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+if (val.indexOf('.') != val.lastIndexOf('.')) {\n+    // String contains more than one dot\n+    throw new NumberFormatException(val + \" is not a valid number.\");\n+}\n+if (val.startsWith(\"+\") || val.startsWith(\"-\")) {\n+    char secondChar = val.charAt(1);\n+    if (val.startsWith(\"--\") || (val.startsWith(\"-0\") && Character.isDigit(secondChar))) {\n+        // this is protection for poorness in java.lang.BigDecimal.\n+        // it accepts this as a legal value, but it does not appear \n+        // to be in specification of class. OS X Java parses it to \n+        // a wrong value.\n+        return null;\n+    }\n+    if (val.startsWith(\"+\")) {\n+        val = val.substring(1);\n+    }\n+    if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+        return createInteger(val);\n+    }\n+    try {\n+        return createNumber(val);\n+    } catch (NumberFormatException ne) {\n+        // Ignore the exception and continue processing\n+    }\n+    return isAllZeros(val) ? createInteger(\"0\") : createLong(val);\n+}\n+\n+if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+    return createInteger(val);\n+}\n+\n+if (val.indexOf('e') > -1 || val.indexOf('E') > -1) {\n+    return createBigDecimal(val);\n+}\n+\n+try {\n+    return createInteger(val);\n+} catch (NumberFormatException e) {\n+    // Ignore the exception and continue processing\n+}\n+\n+try {\n+    return createLong(val);\n+} catch (NumberFormatException e) {\n+    // Ignore the exception and continue processing\n+}\n+\n+return createBigDecimal(val);\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: incompatible types for ?: neither is a subtype of the other",
    "test_result": "ERROR"
}