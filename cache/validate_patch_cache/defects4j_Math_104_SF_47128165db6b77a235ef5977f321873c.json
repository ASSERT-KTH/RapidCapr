{
    "patch": "import org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.Precision;\n\npublic class GammaFunction {\n    \n    public static double gamma(double x) {\n        final double[] p = {\n            0.99999999999980993227684700473478,\n            676.520368121885098567009190444019,\n            -1259.13921672240287047156078755283,\n            771.3234287776530788486528258894,\n            -176.61502916214059906584551354,\n            12.507343278686904814458936853,\n            -0.13857109526572011689554707,\n            9.984369578019570859563e-6,\n            1.50563273514931155834e-7\n        };\n        int g = 7;\n        if(x < 0.5) {\n            return Math.PI / (FastMath.sin(Math.PI * x) * gamma(1 - x));\n        }\n        x -= 1;\n        double a = p[0];\n        double t = x + g + 0.5;\n        for(int i = 1; i < p.length; i++) {\n            a += p[i] / (x + i);\n        }\n        return FastMath.sqrt(2 * Math.PI) * FastMath.pow(t, x + 0.5) * FastMath.exp(-t) * a;\n    }\n\n    public static double regularizedGamma(double a, double x) {\n        if (a <= 0.0 || x < 0.0) {\n            throw new IllegalArgumentException(\"Invalid input arguments for the regularized gamma function.\");\n        }\n        if (a > 1e10) {\n            return 1.0;\n        }\n        if (x == 0.0) {\n            return 0.0;\n        }\n        double gammaA = gamma(a);\n        double factor = FastMath.pow(x, a) * FastMath.exp(-x) / gammaA;\n        double sum = 1.0;\n        double delta = sum;\n        for (int n = 1; n <= 100; ++n) {\n            delta *= x / (a + n);\n            sum += delta;\n            if (Precision.equals(delta, sum, 1e-15)) {\n                return sum * factor;\n            }\n        }\n        throw new RuntimeException(\"Failed to converge to a limit while computing the regularized gamma function.\");\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..a895bf8ae 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,60 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.util.Precision;\n+\n+public class GammaFunction {\n+    \n+    public static double gamma(double x) {\n+        final double[] p = {\n+            0.99999999999980993227684700473478,\n+            676.520368121885098567009190444019,\n+            -1259.13921672240287047156078755283,\n+            771.3234287776530788486528258894,\n+            -176.61502916214059906584551354,\n+            12.507343278686904814458936853,\n+            -0.13857109526572011689554707,\n+            9.984369578019570859563e-6,\n+            1.50563273514931155834e-7\n+        };\n+        int g = 7;\n+        if(x < 0.5) {\n+            return Math.PI / (FastMath.sin(Math.PI * x) * gamma(1 - x));\n+        }\n+        x -= 1;\n+        double a = p[0];\n+        double t = x + g + 0.5;\n+        for(int i = 1; i < p.length; i++) {\n+            a += p[i] / (x + i);\n+        }\n+        return FastMath.sqrt(2 * Math.PI) * FastMath.pow(t, x + 0.5) * FastMath.exp(-t) * a;\n+    }\n+\n+    public static double regularizedGamma(double a, double x) {\n+        if (a <= 0.0 || x < 0.0) {\n+            throw new IllegalArgumentException(\"Invalid input arguments for the regularized gamma function.\");\n+        }\n+        if (a > 1e10) {\n+            return 1.0;\n+        }\n+        if (x == 0.0) {\n+            return 0.0;\n+        }\n+        double gammaA = gamma(a);\n+        double factor = FastMath.pow(x, a) * FastMath.exp(-x) / gammaA;\n+        double sum = 1.0;\n+        double delta = sum;\n+        for (int n = 1; n <= 100; ++n) {\n+            delta *= x / (a + n);\n+            sum += delta;\n+            if (Precision.equals(delta, sum, 1e-15)) {\n+                return sum * factor;\n+            }\n+        }\n+        throw new RuntimeException(\"Failed to converge to a limit while computing the regularized gamma function.\");\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}