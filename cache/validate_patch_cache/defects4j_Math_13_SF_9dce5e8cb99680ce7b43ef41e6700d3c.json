{
    "patch": "        final SingularValueDecomposition dec = new SingularValueDecomposition(m);\n        final RealMatrix s = dec.getS();\n        final RealMatrix v = dec.getV();\n        final RealMatrix u = dec.getU();\n        \n        // compute the symmetric square root\n        final int n = m.getColumnDimension();\n        final RealMatrix sqrtS = MatrixUtils.createRealMatrix(n, n);\n        for (int i = 0; i < n; i++) {\n            double sqrt = FastMath.sqrt(s.getEntry(i, i));\n            for (int j = 0; j < n; j++) {\n                sqrtS.setEntry(i, j, sqrt * v.getEntry(j, i));\n            }\n        }\n        \n        // compute the square root using the SVD formula\n        return u.multiply(sqrtS).multiply(u.transpose());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..e7c526ef5 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,21 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+        final SingularValueDecomposition dec = new SingularValueDecomposition(m);\n+        final RealMatrix s = dec.getS();\n+        final RealMatrix v = dec.getV();\n+        final RealMatrix u = dec.getU();\n+        \n+        // compute the symmetric square root\n+        final int n = m.getColumnDimension();\n+        final RealMatrix sqrtS = MatrixUtils.createRealMatrix(n, n);\n+        for (int i = 0; i < n; i++) {\n+            double sqrt = FastMath.sqrt(s.getEntry(i, i));\n+            for (int j = 0; j < n; j++) {\n+                sqrtS.setEntry(i, j, sqrt * v.getEntry(j, i));\n+            }\n+        }\n+        \n+        // compute the square root using the SVD formula\n+        return u.multiply(sqrtS).multiply(u.transpose());\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}