{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = instant.getChronology();\n    long instantMillis = instant.getMillis();\n    long instantLocal = instantMillis + chrono.getZone().getOffsetFromLocal(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n\n    // Use the computed year to determine if the day of month is valid\n    // leap year if month is February and year is divisible by 4, unless divisible by 100 but not divisible by 400\n    if (bucket.computeMillis(true, text) != instantLocal || (bucket.getOffsetInteger() != null && !bucket.getOffset().equals(chrono.getZone().getOffset(instantMillis)))) {\n        if (bucket.getOffsetInteger() != null) {\n            chrono = chrono.withZone(DateTimeZone.forOffsetMillis(bucket.getOffsetInteger()));\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n\n        int year = bucket.hasDate() ? bucket.computeDate().getYear() : defaultYear;\n        int month = bucket.hasDate() ? bucket.computeDate().getMonthOfYear() : 1;\n        int day = bucket.hasDate() ? bucket.computeDate().getDayOfMonth() : 1;\n\n        // check if day of month is valid for the given month and year\n        if (day > 28) {\n            // leap year if month is February and year is divisible by 4, unless divisible by 100 but not divisible by 400\n            if (month == 2 && ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0)) {\n                if (day > 29) {\n                    throw new org.joda.time.IllegalFieldValueException(\n                            \"Cannot parse \\\"\" + text + \"\\\": Value \" + day + \" for dayOfMonth must be in the range [1,29]\");\n                }\n            } else if (day > 30 && (month == 4 || month == 6 || month == 9 || month == 11)) {\n                throw new org.joda.time.IllegalFieldValueException(\n                        \"Cannot parse \\\"\" + text + \"\\\": Value \" + day + \" for dayOfMonth must be in the range [1,30]\");\n            } else if (day > 31) {\n                throw new org.joda.time.IllegalFieldValueException(\n                        \"Cannot parse \\\"\" + text + \"\\\": Value \" + day + \" for dayOfMonth must be in the range [1,31]\");\n            }\n        }\n\n        instant.setMillis(bucket.computeMillis(true, text));\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n    }\n\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..8441a867 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,36 +697,62 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = instant.getChronology();\n+    long instantMillis = instant.getMillis();\n+    long instantLocal = instantMillis + chrono.getZone().getOffsetFromLocal(instantMillis);\n+    chrono = selectChronology(chrono);\n+    int defaultYear = chrono.year().get(instantLocal);\n+\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+    int newPos = parser.parseInto(bucket, text, position);\n+\n+    // Use the computed year to determine if the day of month is valid\n+    // leap year if month is February and year is divisible by 4, unless divisible by 100 but not divisible by 400\n+    if (bucket.computeMillis(true, text) != instantLocal || (bucket.getOffsetInteger() != null && !bucket.getOffset().equals(chrono.getZone().getOffset(instantMillis)))) {\n+        if (bucket.getOffsetInteger() != null) {\n+            chrono = chrono.withZone(DateTimeZone.forOffsetMillis(bucket.getOffsetInteger()));\n         } else if (bucket.getZone() != null) {\n             chrono = chrono.withZone(bucket.getZone());\n         }\n+\n+        int year = bucket.hasDate() ? bucket.computeDate().getYear() : defaultYear;\n+        int month = bucket.hasDate() ? bucket.computeDate().getMonthOfYear() : 1;\n+        int day = bucket.hasDate() ? bucket.computeDate().getDayOfMonth() : 1;\n+\n+        // check if day of month is valid for the given month and year\n+        if (day > 28) {\n+            // leap year if month is February and year is divisible by 4, unless divisible by 100 but not divisible by 400\n+            if (month == 2 && ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0)) {\n+                if (day > 29) {\n+                    throw new org.joda.time.IllegalFieldValueException(\n+                            \"Cannot parse \\\"\" + text + \"\\\": Value \" + day + \" for dayOfMonth must be in the range [1,29]\");\n+                }\n+            } else if (day > 30 && (month == 4 || month == 6 || month == 9 || month == 11)) {\n+                throw new org.joda.time.IllegalFieldValueException(\n+                        \"Cannot parse \\\"\" + text + \"\\\": Value \" + day + \" for dayOfMonth must be in the range [1,30]\");\n+            } else if (day > 31) {\n+                throw new org.joda.time.IllegalFieldValueException(\n+                        \"Cannot parse \\\"\" + text + \"\\\": Value \" + day + \" for dayOfMonth must be in the range [1,31]\");\n+            }\n+        }\n+\n+        instant.setMillis(bucket.computeMillis(true, text));\n         instant.setChronology(chrono);\n         if (iZone != null) {\n             instant.setZone(iZone);\n         }\n-        return newPos;\n     }\n \n+    return newPos;\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "error: int cannot be dereferenced",
    "test_result": "ERROR"
}