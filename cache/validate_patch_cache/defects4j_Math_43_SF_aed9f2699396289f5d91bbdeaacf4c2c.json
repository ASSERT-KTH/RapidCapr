{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n\n    // Check if mean, variance, or geomean have been overridden and can handle NaNs\n    boolean meanOverride = meanImpl instanceof StorelessUnivariateStatistic && !Double.isNaN(value);\n    boolean varianceOverride = varianceImpl instanceof StorelessUnivariateStatistic && !Double.isNaN(value);\n    boolean geoMeanOverride = geoMeanImpl instanceof StorelessUnivariateStatistic && !Double.isNaN(value);\n\n    // Check if the input value is NaN\n    boolean isNan = Double.isNaN(value);\n\n    // If mean, variance, or geomean have been overridden and can handle NaNs, increment them\n    if (meanOverride) {\n        meanImpl.increment(value);\n    }\n    if (varianceOverride) {\n        varianceImpl.increment(value);\n    }\n    if (geoMeanOverride) {\n        geoMeanImpl.increment(value);\n    }\n\n    // If mean has not been overridden, update mean\n    if (!(meanImpl instanceof Mean)) {\n        // If input value is not NaN\n        if (!isNan) {\n            double delta = value - meanImpl.getResult();\n            meanImpl.increment(delta / n);\n        }\n    }\n\n    // Increment n\n    n++;\n\n    // If mean has been overridden, update mean using Sum and n\n    if (meanImpl instanceof Mean) {\n        ((Mean) meanImpl).increment(value);\n    }\n\n    // If mean, variance, or geomean have been overridden and can handle NaNs, increment them\n    if (meanOverride) {\n        meanImpl.increment(value);\n    }\n    if (varianceOverride) {\n        varianceImpl.increment(value);\n    }\n    if (geoMeanOverride) {\n        geoMeanImpl.increment(value);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..e6c1a730c 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,27 +146,62 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+\n+    // Check if mean, variance, or geomean have been overridden and can handle NaNs\n+    boolean meanOverride = meanImpl instanceof StorelessUnivariateStatistic && !Double.isNaN(value);\n+    boolean varianceOverride = varianceImpl instanceof StorelessUnivariateStatistic && !Double.isNaN(value);\n+    boolean geoMeanOverride = geoMeanImpl instanceof StorelessUnivariateStatistic && !Double.isNaN(value);\n+\n+    // Check if the input value is NaN\n+    boolean isNan = Double.isNaN(value);\n+\n+    // If mean, variance, or geomean have been overridden and can handle NaNs, increment them\n+    if (meanOverride) {\n+        meanImpl.increment(value);\n+    }\n+    if (varianceOverride) {\n+        varianceImpl.increment(value);\n+    }\n+    if (geoMeanOverride) {\n+        geoMeanImpl.increment(value);\n+    }\n+\n+    // If mean has not been overridden, update mean\n+    if (!(meanImpl instanceof Mean)) {\n+        // If input value is not NaN\n+        if (!isNan) {\n+            double delta = value - meanImpl.getResult();\n+            meanImpl.increment(delta / n);\n         }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n-        }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n-        }\n-        n++;\n     }\n \n+    // Increment n\n+    n++;\n+\n+    // If mean has been overridden, update mean using Sum and n\n+    if (meanImpl instanceof Mean) {\n+        ((Mean) meanImpl).increment(value);\n+    }\n+\n+    // If mean, variance, or geomean have been overridden and can handle NaNs, increment them\n+    if (meanOverride) {\n+        meanImpl.increment(value);\n+    }\n+    if (varianceOverride) {\n+        varianceImpl.increment(value);\n+    }\n+    if (geoMeanOverride) {\n+        geoMeanImpl.increment(value);\n+    }\n+}\n+\n     /**\n      * Returns the number of available values\n      * @return The number of available values",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2.213363839400643> but was:<2.2133638394006434>",
    "test_result": "FAIL"
}