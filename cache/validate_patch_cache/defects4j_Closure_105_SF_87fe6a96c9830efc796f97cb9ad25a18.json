{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    int foldedSize = -joinString.length(); // account for size of join string separator\n    StringBuilder sb = new StringBuilder();\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        if (sb.length() > 0) {\n          sb.append(joinString);\n        }\n        String elemString = NodeUtil.getStringValue(elem);\n        foldedSize += elemString.length() + joinString.length() + 2; // account for quotes\n        sb.append(elemString);\n      } else {\n        if (sb.length() > 0) {\n          arrayFoldedChildren.add(Node.newString(sb.toString()));\n          sb = new StringBuilder();\n        }\n        int elemSize = InlineCostEstimator.getCost(elem);\n        if (elemSize < 0) {\n          return; // avoid negative elemSize causing incorrect size comparisons\n        }\n        foldedSize += elemSize;\n        arrayFoldedChildren.add(elem);\n      }\n      elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n\n    int kJoinOverhead = \"[].join()\".length();\n    foldedSize += kJoinOverhead;\n    foldedSize += InlineCostEstimator.getCost(right);\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    if (foldedSize > originalSize) {\n      return;\n    }\n\n    Node foldedExpression;\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        foldedExpression = emptyStringNode;\n        break;\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD, Node.newString(\"\"), foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        foldedExpression = foldedStringNode;\n        break;\n      default:\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        foldedExpression = n.cloneNode();\n        foldedExpression.getFirstChild().setString(\".call\").useSourceInfoFrom(n.getFirstChild());\n        foldedExpression.getFirstChild().getNext().getNext().setString(\"join\").useSourceInfoFrom(n.getFirstChild().getNext().getNext());\n        foldedExpression.putBooleanProp(Node.FREE_CALL, true);\n        foldedExpression.getSecondChild().addChildToFront(left.removeFirstChild());\n        foldedExpression.getSecondChild().addChildToBack(right);\n        foldedExpression.setLength(originalSize);\n        break;\n    }\n    parent.replaceChild(n, foldedExpression);\n    t.getCompiler().reportCodeChange();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..e2b0ca7d 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,8 +1458,7 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n       return;\n     }\n@@ -1467,15 +1466,14 @@ class FoldConstants extends AbstractPostOrderCallback\n     Node arrayNode = left.getFirstChild();\n     Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n+    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n       return;\n     }\n \n     String joinString = NodeUtil.getStringValue(right);\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n+    int foldedSize = -joinString.length(); // account for size of join string separator\n     StringBuilder sb = new StringBuilder();\n-    int foldedSize = 0;\n     Node elem = arrayNode.getFirstChild();\n     // Merges adjacent String nodes.\n     while (elem != null) {\n@@ -1483,68 +1481,68 @@ class FoldConstants extends AbstractPostOrderCallback\n         if (sb.length() > 0) {\n           sb.append(joinString);\n         }\n-        sb.append(NodeUtil.getStringValue(elem));\n+        String elemString = NodeUtil.getStringValue(elem);\n+        foldedSize += elemString.length() + joinString.length() + 2; // account for quotes\n+        sb.append(elemString);\n       } else {\n         if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n           arrayFoldedChildren.add(Node.newString(sb.toString()));\n           sb = new StringBuilder();\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n+        int elemSize = InlineCostEstimator.getCost(elem);\n+        if (elemSize < 0) {\n+          return; // avoid negative elemSize causing incorrect size comparisons\n+        }\n+        foldedSize += elemSize;\n         arrayFoldedChildren.add(elem);\n       }\n       elem = elem.getNext();\n     }\n \n     if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n       arrayFoldedChildren.add(Node.newString(sb.toString()));\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n+\n+    int kJoinOverhead = \"[].join()\".length();\n+    foldedSize += kJoinOverhead;\n+    foldedSize += InlineCostEstimator.getCost(right);\n \n     int originalSize = InlineCostEstimator.getCost(n);\n+    if (foldedSize > originalSize) {\n+      return;\n+    }\n+\n+    Node foldedExpression;\n     switch (arrayFoldedChildren.size()) {\n       case 0:\n         Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n+        foldedExpression = emptyStringNode;\n         break;\n-\n       case 1:\n         Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n         if (foldedStringNode.getType() != Token.STRING) {\n           // If the Node is not a string literal, ensure that\n           // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n+          Node replacement = new Node(Token.ADD, Node.newString(\"\"), foldedStringNode);\n           foldedStringNode = replacement;\n         }\n-        parent.replaceChild(n, foldedStringNode);\n+        foldedExpression = foldedStringNode;\n         break;\n-\n       default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n         arrayNode.detachChildren();\n         for (Node node : arrayFoldedChildren) {\n           arrayNode.addChildToBack(node);\n         }\n+        foldedExpression = n.cloneNode();\n+        foldedExpression.getFirstChild().setString(\".call\").useSourceInfoFrom(n.getFirstChild());\n+        foldedExpression.getFirstChild().getNext().getNext().setString(\"join\").useSourceInfoFrom(n.getFirstChild().getNext().getNext());\n+        foldedExpression.putBooleanProp(Node.FREE_CALL, true);\n+        foldedExpression.getSecondChild().addChildToFront(left.removeFirstChild());\n+        foldedExpression.getSecondChild().addChildToBack(right);\n+        foldedExpression.setLength(originalSize);\n         break;\n     }\n+    parent.replaceChild(n, foldedExpression);\n     t.getCompiler().reportCodeChange();\n   }\n ",
    "result_reason": "error: void cannot be dereferenced",
    "test_result": "ERROR"
}