{
    "patch": "        long instantLocal = instant.getMillis();\n        // Fix for midnight boundary\n        int parsedPos = position;\n        if (instantLocal < DateTimeConstants.MILLIS_PER_DAY && position > 0 &&\n            text.charAt(position - 1) == ' ') {\n            // advance position over the space\n            parsedPos++;\n        }\n\n        long defaultMillis = instantLocal + chrono.getZone().getOffset(instantLocal);\n        chrono = selectChronology(chrono);\n        DateTimeParserBucket bucket = new DateTimeParserBucket(defaultMillis, chrono, iLocale, iPivotYear, chrono.year().get(defaultMillis));\n        int newPos = parser.parseInto(bucket, text, parsedPos);\n        if (newPos < 0) {\n            // If parsing failed, determine the field that caused the error\n            newPos = ~newPos;\n            if (newPos > position + 1) {\n                // shift the error location back by one space, if applicable\n                if (text.charAt(newPos - 1) == ' ') {\n                    newPos--;\n                }\n            } else {\n                newPos = position + 1;\n            }\n            throw new IllegalArgumentException(formatParseRejectedMessage(bucket, newPos));\n        }\n        int offset = bucket.computeMillis(false, text);\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        instant.setMillis(offset);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..cb37adab 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,22 +697,33 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n+        long instantLocal = instant.getMillis();\n+        // Fix for midnight boundary\n+        int parsedPos = position;\n+        if (instantLocal < DateTimeConstants.MILLIS_PER_DAY && position > 0 &&\n+            text.charAt(position - 1) == ' ') {\n+            // advance position over the space\n+            parsedPos++;\n         }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n+\n+        long defaultMillis = instantLocal + chrono.getZone().getOffset(instantLocal);\n         chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n+        DateTimeParserBucket bucket = new DateTimeParserBucket(defaultMillis, chrono, iLocale, iPivotYear, chrono.year().get(defaultMillis));\n+        int newPos = parser.parseInto(bucket, text, parsedPos);\n+        if (newPos < 0) {\n+            // If parsing failed, determine the field that caused the error\n+            newPos = ~newPos;\n+            if (newPos > position + 1) {\n+                // shift the error location back by one space, if applicable\n+                if (text.charAt(newPos - 1) == ' ') {\n+                    newPos--;\n+                }\n+            } else {\n+                newPos = position + 1;\n+            }\n+            throw new IllegalArgumentException(formatParseRejectedMessage(bucket, newPos));\n+        }\n+        int offset = bucket.computeMillis(false, text);\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();\n             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n@@ -724,8 +735,7 @@ public class DateTimeFormatter {\n         if (iZone != null) {\n             instant.setZone(iZone);\n         }\n-        return newPos;\n-    }\n+        instant.setMillis(offset);\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}