{
    "patch": "public static String unescapeJava(String str) {\n    if (str == null) {\n        return null;\n    }\n    StringBuilder sb = new StringBuilder(str.length());\n    for (int i = 0; i < str.length(); i++) {\n        char ch = str.charAt(i);\n        if (ch == '\\\\') {\n            i++;\n            if (i >= str.length()) {\n                throw new IllegalArgumentException(\"Invalid escape sequence in string: \" + str);\n            }\n            ch = str.charAt(i);\n            switch (ch) {\n                case '\\\\':\n                    sb.append('\\\\');\n                    break;\n                case '\\\"':\n                    sb.append('\\\"');\n                    break;\n                case 'n':\n                    sb.append('\\n');\n                    break;\n                case 'r':\n                    sb.append('\\r');\n                    break;\n                case 'f':\n                    sb.append('\\f');\n                    break;\n                case 't':\n                    sb.append('\\t');\n                    break;\n                case 'b':\n                    sb.append('\\b');\n                    break;\n                case 'u':\n                    if (i + 4 >= str.length()) {\n                        throw new IllegalArgumentException(\"Invalid unicode escape sequence in string: \" + str);\n                    }\n                    int codePoint = Integer.parseInt(str.substring(i + 1, i + 5), 16);\n                    sb.append((char) codePoint);\n                    i += 4;\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Invalid escape sequence in string: \" + str);\n            }\n        } else {\n            sb.append(ch);\n        }\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..e6088bc7 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,58 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescapeJava(String str) {\n+    if (str == null) {\n+        return null;\n+    }\n+    StringBuilder sb = new StringBuilder(str.length());\n+    for (int i = 0; i < str.length(); i++) {\n+        char ch = str.charAt(i);\n+        if (ch == '\\\\') {\n+            i++;\n+            if (i >= str.length()) {\n+                throw new IllegalArgumentException(\"Invalid escape sequence in string: \" + str);\n+            }\n+            ch = str.charAt(i);\n+            switch (ch) {\n+                case '\\\\':\n+                    sb.append('\\\\');\n+                    break;\n+                case '\\\"':\n+                    sb.append('\\\"');\n+                    break;\n+                case 'n':\n+                    sb.append('\\n');\n+                    break;\n+                case 'r':\n+                    sb.append('\\r');\n+                    break;\n+                case 'f':\n+                    sb.append('\\f');\n+                    break;\n+                case 't':\n+                    sb.append('\\t');\n+                    break;\n+                case 'b':\n+                    sb.append('\\b');\n+                    break;\n+                case 'u':\n+                    if (i + 4 >= str.length()) {\n+                        throw new IllegalArgumentException(\"Invalid unicode escape sequence in string: \" + str);\n+                    }\n+                    int codePoint = Integer.parseInt(str.substring(i + 1, i + 5), 16);\n+                    sb.append((char) codePoint);\n+                    i += 4;\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"Invalid escape sequence in string: \" + str);\n+            }\n+        } else {\n+            sb.append(ch);\n+        }\n+    }\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}