{
    "patch": "      if (NodeUtil.isGet(parent)) {\n        Node lhs = parent.getFirstChild();\n        Node grandparent = parent.getParent();\n        if (NodeUtil.isAssignmentOp(grandparent) && NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      } else if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface())) {\n          return !NodeUtil.isNew(parent) && !NodeUtil.isPrototypeProperty(parent.getParent());\n      } else if (NodeUtil.isPrototypeProperty(parent.getParent())) {\n        return false;\n      } else if (parent.getType() == Token.CALL &&\n                 parent.getFirstChild().getType() == Token.GETPROP &&\n                 parent.getFirstChild().getFirstFirstChild() != null &&\n                 parent.getFirstChild().getFirstFirstChild().getString().equals(\"prototype\")) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..f3e505db 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,28 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent)) {\n+        Node lhs = parent.getFirstChild();\n+        Node grandparent = parent.getParent();\n+        if (NodeUtil.isAssignmentOp(grandparent) && NodeUtil.isGet(lhs)) {\n+          if (lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.GETPROP &&\n+              llhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n+      } else if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface())) {\n+          return !NodeUtil.isNew(parent) && !NodeUtil.isPrototypeProperty(parent.getParent());\n+      } else if (NodeUtil.isPrototypeProperty(parent.getParent())) {\n+        return false;\n+      } else if (parent.getType() == Token.CALL &&\n+                 parent.getFirstChild().getType() == Token.GETPROP &&\n+                 parent.getFirstChild().getFirstFirstChild() != null &&\n+                 parent.getFirstChild().getFirstFirstChild().getString().equals(\"prototype\")) {\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}