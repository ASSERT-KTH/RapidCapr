{
    "patch": "    // Just an 'exit'.\n    if (matchingExitNode(n, exitType, labelName)) {\n      NodeUtil.removeChild(n.getParent(), n);\n      compiler.reportCodeChange();\n      return;\n    }\n\n    // Just a 'label'.\n    if (n.isLabel()) {\n      Node labelBlock = n.getLastChild();\n      tryMinimizeExits(labelBlock, exitType, labelName);\n      return;\n    }\n\n    // Just a 'try/catch'.\n    if (n.isTry() && !NodeUtil.hasFinally(n)) {\n      Node tryBlock = n.getFirstChild();\n      tryMinimizeExits(tryBlock, exitType, labelName);\n      Node catchNodes = NodeUtil.getCatchBlock(n);\n      for (Node catchNode : catchNodes.children()) {\n        Node catchBlock = catchNode.getLastChild();\n        tryMinimizeExits(catchBlock, exitType, labelName);\n      }\n      return;\n    }\n\n    // Just an 'if'.\n    if (n.isIf()) {\n      Node ifBlock = n.getFirstChild().getNext();\n      tryMinimizeExits(ifBlock, exitType, labelName);\n      Node elseBlock = ifBlock.getNext();\n      if (elseBlock != null) {\n        tryMinimizeExits(elseBlock, exitType, labelName);\n      }\n      return;\n    }\n\n    // Just a switch statement.\n    if (n.isSwitch()) {\n      for (Node caseNode : n.getLastChild().children()) {\n        Node caseBlock = caseNode.getLastChild();\n        tryMinimizeExits(caseBlock, exitType, labelName);\n      }\n      return;\n    }\n\n    // Multiple if-exits can be converted in a single pass.\n    // Convert \"if (blah) break;  if (blah2) break; other_stmt;\" to\n    // become \"if (blah); else { if (blah2); else { other_stmt; } }\"\n    // which will get converted to \"if (!blah && !blah2) { other_stmt; }\".\n    for (Node c : n.children()) {\n\n      // An 'if' block to process below.\n      if (c.isIf()) {\n        Node ifTree = c;\n        Node trueBlock, falseBlock;\n\n        // First, the true condition block.\n        trueBlock = ifTree.getFirstChild().getNext();\n        falseBlock = trueBlock.getNext();\n        tryMinimizeIfBlockExits(trueBlock, falseBlock,\n            ifTree, exitType, labelName);\n\n        // Now the else block.\n        // The if blocks may have changed, get them again.\n        trueBlock = ifTree.getFirstChild().getNext();\n        falseBlock = trueBlock.getNext();\n        if (falseBlock != null) {\n          tryMinimizeIfBlockExits(falseBlock, trueBlock,\n              ifTree, exitType, labelName);\n        }\n      }\n\n      if (c == n.getLastChild()) {\n        break;\n      }\n    }\n\n    // The rest assumes a block with at least one child, bail on anything else.\n    if (!n.isBlock() || n.getLastChild() == null) {\n      return;\n    }\n\n    // Try to minimize the exits of the last child and the blocks contained within.\n    Node child = n.getLastChild();\n    while (child != null) {\n      tryMinimizeExits(child, exitType, labelName);\n      if (NodeUtil.isControlStructureCodeBlock(child)) {\n        // If the child is a control structure, move up one level and check the next child.\n        child = child.getParent();\n      } else {\n        // If the child is not a control structure, exit loop.\n        break;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..401d33f9 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,10 +138,101 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n-      if (NodeUtil.hasFinally(n)) {\n-        Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n+    // Just an 'exit'.\n+    if (matchingExitNode(n, exitType, labelName)) {\n+      NodeUtil.removeChild(n.getParent(), n);\n+      compiler.reportCodeChange();\n+      return;\n+    }\n+\n+    // Just a 'label'.\n+    if (n.isLabel()) {\n+      Node labelBlock = n.getLastChild();\n+      tryMinimizeExits(labelBlock, exitType, labelName);\n+      return;\n+    }\n+\n+    // Just a 'try/catch'.\n+    if (n.isTry() && !NodeUtil.hasFinally(n)) {\n+      Node tryBlock = n.getFirstChild();\n+      tryMinimizeExits(tryBlock, exitType, labelName);\n+      Node catchNodes = NodeUtil.getCatchBlock(n);\n+      for (Node catchNode : catchNodes.children()) {\n+        Node catchBlock = catchNode.getLastChild();\n+        tryMinimizeExits(catchBlock, exitType, labelName);\n+      }\n+      return;\n+    }\n+\n+    // Just an 'if'.\n+    if (n.isIf()) {\n+      Node ifBlock = n.getFirstChild().getNext();\n+      tryMinimizeExits(ifBlock, exitType, labelName);\n+      Node elseBlock = ifBlock.getNext();\n+      if (elseBlock != null) {\n+        tryMinimizeExits(elseBlock, exitType, labelName);\n       }\n+      return;\n+    }\n+\n+    // Just a switch statement.\n+    if (n.isSwitch()) {\n+      for (Node caseNode : n.getLastChild().children()) {\n+        Node caseBlock = caseNode.getLastChild();\n+        tryMinimizeExits(caseBlock, exitType, labelName);\n+      }\n+      return;\n+    }\n+\n+    // Multiple if-exits can be converted in a single pass.\n+    // Convert \"if (blah) break;  if (blah2) break; other_stmt;\" to\n+    // become \"if (blah); else { if (blah2); else { other_stmt; } }\"\n+    // which will get converted to \"if (!blah && !blah2) { other_stmt; }\".\n+    for (Node c : n.children()) {\n+\n+      // An 'if' block to process below.\n+      if (c.isIf()) {\n+        Node ifTree = c;\n+        Node trueBlock, falseBlock;\n+\n+        // First, the true condition block.\n+        trueBlock = ifTree.getFirstChild().getNext();\n+        falseBlock = trueBlock.getNext();\n+        tryMinimizeIfBlockExits(trueBlock, falseBlock,\n+            ifTree, exitType, labelName);\n+\n+        // Now the else block.\n+        // The if blocks may have changed, get them again.\n+        trueBlock = ifTree.getFirstChild().getNext();\n+        falseBlock = trueBlock.getNext();\n+        if (falseBlock != null) {\n+          tryMinimizeIfBlockExits(falseBlock, trueBlock,\n+              ifTree, exitType, labelName);\n+        }\n+      }\n+\n+      if (c == n.getLastChild()) {\n+        break;\n+      }\n+    }\n+\n+    // The rest assumes a block with at least one child, bail on anything else.\n+    if (!n.isBlock() || n.getLastChild() == null) {\n+      return;\n+    }\n+\n+    // Try to minimize the exits of the last child and the blocks contained within.\n+    Node child = n.getLastChild();\n+    while (child != null) {\n+      tryMinimizeExits(child, exitType, labelName);\n+      if (NodeUtil.isControlStructureCodeBlock(child)) {\n+        // If the child is a control structure, move up one level and check the next child.\n+        child = child.getParent();\n+      } else {\n+        // If the child is not a control structure, exit loop.\n+        break;\n+      }\n+    }\n     }\n \n     // Just a 'label'.",
    "result_reason": "error: variable tryBlock is already defined in method tryMinimizeExits(Node,int,String)",
    "test_result": "ERROR"
}