{
    "patch": "    if (typeOfThis != null) {\n      typeOfThis = typeOfThis.resolve(t, scope);\n      if (!(typeOfThis instanceof ObjectType)) {\n        t.report(typeOfThis.getJSTypeSource(), JSError.make(AbstractTypedScopeCreator.TYPE_MISMATCH_WARNING,\n            \"type {0} does not resolve to an Object type\", typeOfThis.toString()));\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..9b696a6b 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,13 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    if (typeOfThis != null) {\n+      typeOfThis = typeOfThis.resolve(t, scope);\n+      if (!(typeOfThis instanceof ObjectType)) {\n+        t.report(typeOfThis.getJSTypeSource(), JSError.make(AbstractTypedScopeCreator.TYPE_MISMATCH_WARNING,\n+            \"type {0} does not resolve to an Object type\", typeOfThis.toString()));\n+      }\n+    }\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}