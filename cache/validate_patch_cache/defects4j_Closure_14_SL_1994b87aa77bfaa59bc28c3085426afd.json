{
    "patch": "if (cfa != null) {\n  Node finallyParent = finallyNode.getParent();\n  Node nextNode = finallyNode.getNext();\n  if (finallyNode.hasChildren() && (finallyParent.isNormalBlock() || finallyParent.isFunction())) { // Finally not terminating block.\n    cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(finallyNode.getFirstChild()));\n    cfa.createEdge(\n        finallyNode.getLastChild(),\n        Branch.UNCOND,\n        nextNode == null\n            ? computeFollowNode(fromNode, finallyParent, cfa)\n            : computeFallThrough(nextNode));\n  } else if (nextNode != null) { // Finally not block terminator.\n    cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(nextNode));\n  } else { // Finally was the last block in this function.\n    cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(fromNode, finallyParent, cfa));\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..d45cacb9 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,23 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null) {\n+  Node finallyParent = finallyNode.getParent();\n+  Node nextNode = finallyNode.getNext();\n+  if (finallyNode.hasChildren() && (finallyParent.isNormalBlock() || finallyParent.isFunction())) { // Finally not terminating block.\n+    cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(finallyNode.getFirstChild()));\n+    cfa.createEdge(\n+        finallyNode.getLastChild(),\n+        Branch.UNCOND,\n+        nextNode == null\n+            ? computeFollowNode(fromNode, finallyParent, cfa)\n+            : computeFallThrough(nextNode));\n+  } else if (nextNode != null) { // Finally not block terminator.\n+    cfa.createEdge(fromNode, Branch.UNCOND, computeFallThrough(nextNode));\n+  } else { // Finally was the last block in this function.\n+    cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(fromNode, finallyParent, cfa));\n+  }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}