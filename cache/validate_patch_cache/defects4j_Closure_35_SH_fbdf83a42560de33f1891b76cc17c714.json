{
    "patch": "if (constraintObj != null && constraintObj.isRecordType()) {\n  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n  if (objType != null) {\n    boolean hasInferredProperties = false;\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      if (!objType.hasProperty(prop)) {\n        hasInferredProperties = true;\n        JSType propType = constraintObj.getPropertyType(prop);\n        objType.defineInferredProperty(prop, propType, null);\n      }\n    }\n    if (hasInferredProperties) {\n      JSTypeRegistry registry = typeRegistry;\n      JSType inferredType = registry.createRecordType(objType.getOwnPropertyNames(),\n          objType.getOwnPropertyTypes());\n      inferredType = inferredType.withLoose();\n      objType.addUnknownProperties(inferredType);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..90ae6a55 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,22 +1118,27 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n-        }\n+if (constraintObj != null && constraintObj.isRecordType()) {\n+  ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+  if (objType != null) {\n+    boolean hasInferredProperties = false;\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+      if (!objType.hasProperty(prop)) {\n+        hasInferredProperties = true;\n+        JSType propType = constraintObj.getPropertyType(prop);\n+        objType.defineInferredProperty(prop, propType, null);\n       }\n     }\n+    if (hasInferredProperties) {\n+      JSTypeRegistry registry = typeRegistry;\n+      JSType inferredType = registry.createRecordType(objType.getOwnPropertyNames(),\n+          objType.getOwnPropertyTypes());\n+      inferredType = inferredType.withLoose();\n+      objType.addUnknownProperties(inferredType);\n+    }\n+  }\n+}\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}