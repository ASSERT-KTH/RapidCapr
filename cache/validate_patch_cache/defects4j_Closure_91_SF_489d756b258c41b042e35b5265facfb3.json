{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.isFunction()) {\n        // Don't traverse functions that are constructors or have the @this\n        // or @override annotation.\n        JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n        if (jsDoc != null &&\n                (jsDoc.isConstructor() ||\n                        jsDoc.isInterface() ||\n                        jsDoc.hasThisType() ||\n                        ((jsDoc.isOverride() || jsDoc.isImplements()) && t.getScopeCreator().isInSameScope(t.getScope(), n.getScope())))) {\n            return false;\n        }\n\n        // Don't traverse functions unless they would normally\n        // be able to have a @this annotation associated with them.\n        boolean functionCanBeCalledAsConstructor = NodeUtil.functionCanBeCalledAsConstructor(n);\n        if (!functionCanBeCalledAsConstructor &&\n                !(parent.isVar() || parent.isAssign() || NodeUtil.isObjectLitKey(parent) || parent.isName() ||\n                        parent.isExprResult() || parent.isBlock())) {\n            return false;\n        }\n\n        // Don't traverse functions that are getting lent to a prototype.\n        if (parent.isAssign() && parent.getLastChild().isGetProp() &&\n                \"prototype\".equals(parent.getLastChild().getLastChild().getString())) {\n            return false;\n        }\n    } else if (n.isThis() && parent.isFunction()) {\n        JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(parent);\n        if (jsDoc != null && jsDoc.getScope().equals(SymbolTable.VISIBILITY_PRIVATE)) {\n            return true; // private `this` should be in scope\n        }\n\n        // Don't traverse `this` if the function it is in is a constructor, interface, or a test function. Tests should be able to access\n        // `this`.\n        if (parent.isFunction() && parent.getParent().isScript() &&\n                t.getInput().getPath().contains(\".test.\") &&\n                (jsDoc == null || (jsDoc.isConstructor() || jsDoc.isInterface()))) {\n            Node maybeTestCase = parent.getParent();\n            while (maybeTestCase != null) {\n                if (NodeUtil.isTestCase(maybeTestCase)) {\n                    return true;\n                }\n                maybeTestCase = maybeTestCase.getParent();\n            }\n\n            return false;\n        }\n\n        if (!NodeUtil.functionCanBeCalledAsConstructor(parent)) {\n            // Don't traverse `this` if the parent function could never be\n            // constructed, so a constructor would never be applied.\n            return false;\n        }\n    }\n\n    if (parent != null && parent.isAssign()) {\n        Node lhs = parent.getFirstChild();\n        if (lhs.isGetProp()) {\n            Node obj = lhs.getFirstChild();\n            Node prop = lhs.getLastChild();\n            if (obj.isName() && \"prototype\".equals(prop.getString())) {\n                // Don't traverse assignments to the prototype property\n                // of constructors.\n                return false;\n            }\n        }\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..eee1ecc6 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,71 +79,77 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+    if (n.isFunction()) {\n+        // Don't traverse functions that are constructors or have the @this\n+        // or @override annotation.\n+        JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+        if (jsDoc != null &&\n+                (jsDoc.isConstructor() ||\n+                        jsDoc.isInterface() ||\n+                        jsDoc.hasThisType() ||\n+                        ((jsDoc.isOverride() || jsDoc.isImplements()) && t.getScopeCreator().isInSameScope(t.getScope(), n.getScope())))) {\n+            return false;\n+        }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n-        return false;\n-      }\n+        // Don't traverse functions unless they would normally\n+        // be able to have a @this annotation associated with them.\n+        boolean functionCanBeCalledAsConstructor = NodeUtil.functionCanBeCalledAsConstructor(n);\n+        if (!functionCanBeCalledAsConstructor &&\n+                !(parent.isVar() || parent.isAssign() || NodeUtil.isObjectLitKey(parent) || parent.isName() ||\n+                        parent.isExprResult() || parent.isBlock())) {\n+            return false;\n+        }\n \n-      // Don't traverse functions that are getting lent to a prototype.\n-    }\n+        // Don't traverse functions that are getting lent to a prototype.\n+        if (parent.isAssign() && parent.getLastChild().isGetProp() &&\n+                \"prototype\".equals(parent.getLastChild().getLastChild().getString())) {\n+            return false;\n+        }\n+    } else if (n.isThis() && parent.isFunction()) {\n+        JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(parent);\n+        if (jsDoc != null && jsDoc.getScope().equals(SymbolTable.VISIBILITY_PRIVATE)) {\n+            return true; // private `this` should be in scope\n+        }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n+        // Don't traverse `this` if the function it is in is a constructor, interface, or a test function. Tests should be able to access\n+        // `this`.\n+        if (parent.isFunction() && parent.getParent().isScript() &&\n+                t.getInput().getPath().contains(\".test.\") &&\n+                (jsDoc == null || (jsDoc.isConstructor() || jsDoc.isInterface()))) {\n+            Node maybeTestCase = parent.getParent();\n+            while (maybeTestCase != null) {\n+                if (NodeUtil.isTestCase(maybeTestCase)) {\n+                    return true;\n+                }\n+                maybeTestCase = maybeTestCase.getParent();\n+            }\n \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n             return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n+        }\n+\n+        if (!NodeUtil.functionCanBeCalledAsConstructor(parent)) {\n+            // Don't traverse `this` if the parent function could never be\n+            // constructed, so a constructor would never be applied.\n             return false;\n-          }\n         }\n-      }\n+    }\n+\n+    if (parent != null && parent.isAssign()) {\n+        Node lhs = parent.getFirstChild();\n+        if (lhs.isGetProp()) {\n+            Node obj = lhs.getFirstChild();\n+            Node prop = lhs.getLastChild();\n+            if (obj.isName() && \"prototype\".equals(prop.getString())) {\n+                // Don't traverse assignments to the prototype property\n+                // of constructors.\n+                return false;\n+            }\n+        }\n     }\n \n     return true;\n-  }\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}