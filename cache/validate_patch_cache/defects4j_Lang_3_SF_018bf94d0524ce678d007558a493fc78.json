{
    "patch": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n\n    String numeric = str.trim();\n    if (StringUtils.startsWithIgnoreCase(numeric, \"+\")) {\n        numeric = numeric.substring(1);\n    }\n\n    boolean negative = false;\n    if (StringUtils.startsWithIgnoreCase(numeric, \"-\")) {\n        negative = true;\n        numeric = numeric.substring(1);\n    }\n\n    if (StringUtils.contains(numeric, \".\")) {\n        if (StringUtils.countMatches(numeric, \".\") > 1) {\n            throw new NumberFormatException(\"A string with multiple decimal points is not a valid number\");\n        }\n\n        final String[] parts = StringUtils.split(numeric, \".\");\n        final int decimalDigits = parts.length > 1 ? parts[1].length() : 0;\n\n        if (decimalDigits <= 7) {\n            return negative ? -Double.parseDouble(numeric) : Double.parseDouble(numeric);\n        } else {\n            return negative ? -new BigDecimal(numeric) : new BigDecimal(numeric);\n        }\n    } else {\n        if (StringUtils.startsWithIgnoreCase(numeric, \"0x\") || StringUtils.startsWithIgnoreCase(numeric, \"#\")) {\n            final String withoutPrefix = numeric.replaceFirst(\"(?i)0x|#|^-0x|#|-#\", \"\");\n            if (withoutPrefix.length() <= 16) {\n                return negative ? -Long.decode(numeric) : Long.decode(numeric);\n            } else {\n                return negative ? -new BigInteger(numeric.substring(0, 2) + withoutPrefix, 16) : new BigInteger(numeric.substring(0, 2) + withoutPrefix, 16);\n            }\n        } else {\n            if (numeric.charAt(numeric.length() - 1) == 'f' || numeric.charAt(numeric.length() - 1) == 'F') {\n                final String withoutSuffix = numeric.substring(0, numeric.length() - 1);\n                final float value = Float.parseFloat(withoutSuffix);\n                return negative ? -value : value;\n            } else if (numeric.charAt(numeric.length() - 1) == 'd' || numeric.charAt(numeric.length() - 1) == 'D'\n                    || numeric.charAt(numeric.length() - 1) == 'l' || numeric.charAt(numeric.length() - 1) == 'L') {\n                final String withoutSuffix = numeric.substring(0, numeric.length() - 1);\n                if (StringUtils.contains(withoutSuffix, \".\")) {\n                    final double value = Double.parseDouble(withoutSuffix);\n                    return negative ? -value : value;\n                } else {\n                    final long value = Long.parseLong(withoutSuffix);\n                    return negative ? -value : value;\n                }\n            } else {\n                final int intDigits = numeric.length();\n                if (intDigits <= 9) {\n                    final int value = Integer.parseInt(numeric);\n                    return negative ? -value : value;\n                } else if (intDigits <= 18) {\n                    final long value = Long.parseLong(numeric);\n                    return negative ? -value : value;\n                } else {\n                    final BigInteger value = new BigInteger(numeric);\n                    return negative ? -value : value;\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex c5840215..e13fef9a 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -447,167 +447,77 @@ public class NumberUtils {\n      * @return Number created from the string (or null if the input is null)\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(final String str) throws NumberFormatException {\n-        if (str == null) {\n-            return null;\n-        }\n-        if (StringUtils.isBlank(str)) {\n-            throw new NumberFormatException(\"A blank string is not a valid number\");\n-        }\n-        // Need to deal with all possible hex prefixes here\n-        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n-        int pfxLen = 0;\n-        for(final String pfx : hex_prefixes) {\n-            if (str.startsWith(pfx)) {\n-                pfxLen += pfx.length();\n-                break;\n-            }\n-        }\n-        if (pfxLen > 0) { // we have a hex number\n-            final int hexDigits = str.length() - pfxLen;\n-            if (hexDigits > 16) { // too many for Long\n-                return createBigInteger(str);\n-            }\n-            if (hexDigits > 8) { // too many for an int\n-                return createLong(str);\n-            }\n-            return createInteger(str);\n+public static Number createNumber(final String str) throws NumberFormatException {\n+    if (str == null) {\n+        return null;\n+    }\n+    if (StringUtils.isBlank(str)) {\n+        throw new NumberFormatException(\"A blank string is not a valid number\");\n+    }\n+\n+    String numeric = str.trim();\n+    if (StringUtils.startsWithIgnoreCase(numeric, \"+\")) {\n+        numeric = numeric.substring(1);\n+    }\n+\n+    boolean negative = false;\n+    if (StringUtils.startsWithIgnoreCase(numeric, \"-\")) {\n+        negative = true;\n+        numeric = numeric.substring(1);\n+    }\n+\n+    if (StringUtils.contains(numeric, \".\")) {\n+        if (StringUtils.countMatches(numeric, \".\") > 1) {\n+            throw new NumberFormatException(\"A string with multiple decimal points is not a valid number\");\n         }\n-        final char lastChar = str.charAt(str.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        final int decPos = str.indexOf('.');\n-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset\n-\n-        int numDecimals = 0; // Check required precision (LANG-693)\n-        if (decPos > -1) { // there is a decimal point\n-\n-            if (expPos > -1) { // there is an exponent\n-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                dec = str.substring(decPos + 1, expPos);\n-            } else {\n-                dec = str.substring(decPos + 1);\n-            }\n-            mant = str.substring(0, decPos);\n-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n+\n+        final String[] parts = StringUtils.split(numeric, \".\");\n+        final int decimalDigits = parts.length > 1 ? parts[1].length() : 0;\n+\n+        if (decimalDigits <= 7) {\n+            return negative ? -Double.parseDouble(numeric) : Double.parseDouble(numeric);\n         } else {\n-            if (expPos > -1) {\n-                if (expPos > str.length()) { // prevents double exponent causing IOOBE\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                mant = str.substring(0, expPos);\n-            } else {\n-                mant = str;\n-            }\n-            dec = null;\n+            return negative ? -new BigDecimal(numeric) : new BigDecimal(numeric);\n         }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n+    } else {\n+        if (StringUtils.startsWithIgnoreCase(numeric, \"0x\") || StringUtils.startsWithIgnoreCase(numeric, \"#\")) {\n+            final String withoutPrefix = numeric.replaceFirst(\"(?i)0x|#|^-0x|#|-#\", \"\");\n+            if (withoutPrefix.length() <= 16) {\n+                return negative ? -Long.decode(numeric) : Long.decode(numeric);\n             } else {\n-                exp = null;\n+                return negative ? -new BigInteger(numeric.substring(0, 2) + withoutPrefix, 16) : new BigInteger(numeric.substring(0, 2) + withoutPrefix, 16);\n             }\n-            //Requesting a specific type..\n-            final String numeric = str.substring(0, str.length() - 1);\n-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (final NumberFormatException nfe) { // NOPMD\n-                            // Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n-\n-                    }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        final Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n-\n-                    } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        final Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (final NumberFormatException e) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-\n-            }\n-        }\n-        //User doesn't have a preference on the return type, so let's start\n-        //small and go from there...\n-        if (expPos > -1 && expPos < str.length() - 1) {\n-            exp = str.substring(expPos + 1, str.length());\n         } else {\n-            exp = null;\n-        }\n-        if (dec == null && exp == null) { // no decimal point and no exponent\n-            //Must be an Integer, Long, Biginteger\n-            try {\n-                return createInteger(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n-            }\n-            try {\n-                return createLong(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n-            }\n-            return createBigInteger(str);\n-        }\n-\n-        //Must be a Float, Double, BigDecimal\n-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-        try {\n-                final Float f = createFloat(str);\n-                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                    return f;\n+            if (numeric.charAt(numeric.length() - 1) == 'f' || numeric.charAt(numeric.length() - 1) == 'F') {\n+                final String withoutSuffix = numeric.substring(0, numeric.length() - 1);\n+                final float value = Float.parseFloat(withoutSuffix);\n+                return negative ? -value : value;\n+            } else if (numeric.charAt(numeric.length() - 1) == 'd' || numeric.charAt(numeric.length() - 1) == 'D'\n+                    || numeric.charAt(numeric.length() - 1) == 'l' || numeric.charAt(numeric.length() - 1) == 'L') {\n+                final String withoutSuffix = numeric.substring(0, numeric.length() - 1);\n+                if (StringUtils.contains(withoutSuffix, \".\")) {\n+                    final double value = Double.parseDouble(withoutSuffix);\n+                    return negative ? -value : value;\n+                } else {\n+                    final long value = Long.parseLong(withoutSuffix);\n+                    return negative ? -value : value;\n                 }\n-        } catch (final NumberFormatException nfe) { // NOPMD\n-            // ignore the bad number\n-        }\n-        try {\n-                final Double d = createDouble(str);\n-                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                    return d;\n+            } else {\n+                final int intDigits = numeric.length();\n+                if (intDigits <= 9) {\n+                    final int value = Integer.parseInt(numeric);\n+                    return negative ? -value : value;\n+                } else if (intDigits <= 18) {\n+                    final long value = Long.parseLong(numeric);\n+                    return negative ? -value : value;\n+                } else {\n+                    final BigInteger value = new BigInteger(numeric);\n+                    return negative ? -value : value;\n                 }\n-        } catch (final NumberFormatException nfe) { // NOPMD\n-            // ignore the bad number\n+            }\n         }\n-\n-        return createBigDecimal(str);\n     }\n+}\n \n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>",
    "result_reason": "error: bad operand type BigDecimal for unary operator '-'",
    "test_result": "ERROR"
}