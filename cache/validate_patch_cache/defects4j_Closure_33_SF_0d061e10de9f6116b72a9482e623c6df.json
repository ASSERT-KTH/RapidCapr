{
    "patch": "public void matchConstraint(ObjectType constraintObj) {\n  // We only want to match constraints on anonymous types.\n  if (!constraintObj.isNominalType() && !constraintObj.isFunctionType()) {\n    return;\n  }\n\n  // Handle the case where the constraint object is a record type.\n  if (constraintObj.isRecordType()) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      if (!isPropertyTypeDeclared(prop)) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!propType.isUnknownType()) {\n          JSType inferredType = null;\n          if (!hasProperty(prop) || getPropertyType(prop).isVoidType()) {\n            // To determine the inferred type of the property, we want to take the least\n            // supertype of the property type and VOID_TYPE.\n            inferredType =\n                getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n          } else {\n            // If the property is declared, we need to update its inferred type\n            // to the least supertype of its existing inferred type and the\n            // property type.\n            JSType existingInferredType = getInferredTypeOfProperty(prop);\n            if (existingInferredType != null) {\n              inferredType = existingInferredType.getLeastSupertype(propType);\n            } else {\n              inferredType = propType;\n            }\n          }\n          defineInferredProperty(prop, inferredType, null);\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..a3525473 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,30 +552,39 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n+public void matchConstraint(ObjectType constraintObj) {\n+  // We only want to match constraints on anonymous types.\n+  if (!constraintObj.isNominalType() && !constraintObj.isFunctionType()) {\n+    return;\n+  }\n+\n+  // Handle the case where the constraint object is a record type.\n+  if (constraintObj.isRecordType()) {\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+      if (!isPropertyTypeDeclared(prop)) {\n         JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n+        if (!propType.isUnknownType()) {\n+          JSType inferredType = null;\n+          if (!hasProperty(prop) || getPropertyType(prop).isVoidType()) {\n+            // To determine the inferred type of the property, we want to take the least\n+            // supertype of the property type and VOID_TYPE.\n+            inferredType =\n+                getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n+          } else {\n+            // If the property is declared, we need to update its inferred type\n+            // to the least supertype of its existing inferred type and the\n+            // property type.\n+            JSType existingInferredType = getInferredTypeOfProperty(prop);\n+            if (existingInferredType != null) {\n+              inferredType = existingInferredType.getLeastSupertype(propType);\n+            } else {\n+              inferredType = propType;\n+            }\n           }\n-          defineInferredProperty(prop, typeToInfer, null);\n+          defineInferredProperty(prop, inferredType, null);\n         }\n       }\n     }\n   }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}