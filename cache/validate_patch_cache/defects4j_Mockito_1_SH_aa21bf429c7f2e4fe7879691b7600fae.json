{
    "patch": "    Object[] args = invocation.getRawArguments();\n    int argLength = args == null ? 0 : args.length; // added null check\n    for (int i = 0; i < argLength; i++) {\n        Object arg = args[i];\n        for (int j = 0; j < matchers.size(); j++) {\n            Matcher m = matchers.get(j);\n            if (m instanceof CapturesArguments) {\n                if (m instanceof VarargMatcher) {\n                    if (i == argLength - 1 && arg != null && arg.getClass().isArray()) {\n                        for (int k = 0; k < Array.getLength(arg); k++) {\n                            ((CapturesArguments) m).captureFrom(Array.get(arg, k));\n                        }\n                    }\n                } else if (i == j) {\n                    ((CapturesArguments) m).captureFrom(arg);\n                }\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..dc9135258 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,25 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+    Object[] args = invocation.getRawArguments();\n+    int argLength = args == null ? 0 : args.length; // added null check\n+    for (int i = 0; i < argLength; i++) {\n+        Object arg = args[i];\n+        for (int j = 0; j < matchers.size(); j++) {\n+            Matcher m = matchers.get(j);\n+            if (m instanceof CapturesArguments) {\n+                if (m instanceof VarargMatcher) {\n+                    if (i == argLength - 1 && arg != null && arg.getClass().isArray()) {\n+                        for (int k = 0; k < Array.getLength(arg); k++) {\n+                            ((CapturesArguments) m).captureFrom(Array.get(arg, k));\n+                        }\n+                    }\n+                } else if (i == j) {\n+                    ((CapturesArguments) m).captureFrom(arg);\n+                }\n+            }\n+        }\n+    }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}