{
    "patch": "        if (ref.getParent().getJSDocInfo() != null &&\n            ref.getParent().getJSDocInfo().isConstructor()) {\n          return false;\n        }\n        for (BasicBlock block = ref.getBasicBlock();\n             block != null; block = block.getParent()) {\n          if (block.isFunction) {\n            // Only consider the first assignment within a function as the\n            // initializing assignment. Subsequent assignments are just\n            // regular assignments.\n            return getInitializingReference() == ref;\n          } else if (block.isLoop && block != ref.getBasicBlock()) {\n            return false;\n          }\n        }\n        return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..8af515d9 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,22 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (ref.getParent().getJSDocInfo() != null &&\n+            ref.getParent().getJSDocInfo().isConstructor()) {\n+          return false;\n+        }\n+        for (BasicBlock block = ref.getBasicBlock();\n+             block != null; block = block.getParent()) {\n+          if (block.isFunction) {\n+            // Only consider the first assignment within a function as the\n+            // initializing assignment. Subsequent assignments are just\n+            // regular assignments.\n+            return getInitializingReference() == ref;\n+          } else if (block.isLoop && block != ref.getBasicBlock()) {\n+            return false;\n+          }\n+        }\n+        return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}