{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    final int len = str.length();\n    final int searchLen = searchChars.length;\n    final int[] searchCharsCodePoints = toCodePoints(searchChars);\n    outer:\n    for (int i = 0; i < len; i++) {\n        final int codePoint = str.codePointAt(i);\n        for (int j = 0; j < searchLen; j++) {\n            if (searchCharsCodePoints[j] == codePoint) {\n                if (Character.isSupplementaryCodePoint(codePoint)) {\n                    i++;\n                    if (j == searchLen - 1) {\n                        // Matched all of searchChars in str\n                        return true;\n                    }\n                    if (i >= len) {\n                        // str ends before the full character can be read\n                        return false;\n                    }\n                    // Continue with the next code point\n                    continue outer;\n                } else {\n                    // Matched one of the search characters\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\nprivate static int[] toCodePoints(char[] chars) {\n    if (ArrayUtils.isEmpty(chars)) {\n        return ArrayUtils.EMPTY_INT_ARRAY;\n    }\n    final IntBuffer codePoints = CharBuffer.wrap(chars).asIntBuffer();\n    final int[] result = new int[codePoints.remaining()];\n    codePoints.get(result);\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..829db99e 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,49 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    final int len = str.length();\n+    final int searchLen = searchChars.length;\n+    final int[] searchCharsCodePoints = toCodePoints(searchChars);\n+    outer:\n+    for (int i = 0; i < len; i++) {\n+        final int codePoint = str.codePointAt(i);\n+        for (int j = 0; j < searchLen; j++) {\n+            if (searchCharsCodePoints[j] == codePoint) {\n+                if (Character.isSupplementaryCodePoint(codePoint)) {\n+                    i++;\n+                    if (j == searchLen - 1) {\n+                        // Matched all of searchChars in str\n+                        return true;\n+                    }\n+                    if (i >= len) {\n+                        // str ends before the full character can be read\n+                        return false;\n+                    }\n+                    // Continue with the next code point\n+                    continue outer;\n+                } else {\n+                    // Matched one of the search characters\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n+private static int[] toCodePoints(char[] chars) {\n+    if (ArrayUtils.isEmpty(chars)) {\n+        return ArrayUtils.EMPTY_INT_ARRAY;\n+    }\n+    final IntBuffer codePoints = CharBuffer.wrap(chars).asIntBuffer();\n+    final int[] result = new int[codePoints.remaining()];\n+    codePoints.get(result);\n+    return result;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}