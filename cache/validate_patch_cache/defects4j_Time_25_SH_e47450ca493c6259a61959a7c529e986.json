{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // we need to ensure that time is always after the DST gap\n    // this happens naturally for positive offsets, but not for negative\n    if ((offsetLocal - offsetAdjusted) < 0) {\n        // if we just return offsetAdjusted then the time is pushed\n        // back before the transition, whereas it should be\n        // on or after the transition\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (nextLocal != nextAdjusted) {\n            final int newOffsetAdjusted = getOffset(nextAdjusted);\n            // [INFILL]\n            // add this condition to avoid infinite loop\n            if (nextLocal >= nextAdjusted) {\n                return offsetLocal;\n            }\n            if (offsetLocal != newOffsetAdjusted) {\n                if (nextLocal == Long.MIN_VALUE) {\n                    return newOffsetAdjusted;\n                }\n                // [INFILL]\n                // reset the adjusted value since nextTransition() doesn't work for max value\n                if (nextLocal == Long.MAX_VALUE) {\n                    return getOffset(nextAdjusted);\n                }\n                instantLocal = nextAdjusted + (nextLocal == instantAdjusted ? offsetAdjusted : 0);\n                return getOffset(instantLocal);\n            }\n        }\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..5bba8548 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,38 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // we need to ensure that time is always after the DST gap\n+    // this happens naturally for positive offsets, but not for negative\n+    if ((offsetLocal - offsetAdjusted) < 0) {\n+        // if we just return offsetAdjusted then the time is pushed\n+        // back before the transition, whereas it should be\n+        // on or after the transition\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextLocal != nextAdjusted) {\n+            final int newOffsetAdjusted = getOffset(nextAdjusted);\n+            // [INFILL]\n+            // add this condition to avoid infinite loop\n+            if (nextLocal >= nextAdjusted) {\n+                return offsetLocal;\n+            }\n+            if (offsetLocal != newOffsetAdjusted) {\n+                if (nextLocal == Long.MIN_VALUE) {\n+                    return newOffsetAdjusted;\n+                }\n+                // [INFILL]\n+                // reset the adjusted value since nextTransition() doesn't work for max value\n+                if (nextLocal == Long.MAX_VALUE) {\n+                    return getOffset(nextAdjusted);\n+                }\n+                instantLocal = nextAdjusted + (nextLocal == instantAdjusted ? offsetAdjusted : 0);\n+                return getOffset(instantLocal);\n+            }\n+        }\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}