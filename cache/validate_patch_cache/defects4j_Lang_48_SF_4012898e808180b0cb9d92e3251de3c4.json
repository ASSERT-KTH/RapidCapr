{
    "patch": "    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        \n        if (lhs == rhs) {\n            return this;\n        }\n        \n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        \n        Class<?> lhsClass = lhs.getClass();\n        Class<?> rhsClass = rhs.getClass();\n        \n        if (!lhsClass.isArray()) {\n            // The simple case, not an array, just test the element\n            isEquals = lhs.equals(rhs);\n            return this;\n        }\n\n        if (!rhsClass.isArray()) {\n            // Not the same: arrays must be compared with Arrays.equals()\n            this.setEquals(false);\n            return this;\n        }\n\n        // Check if the array types are compatible\n        if (lhsClass.getComponentType().isPrimitive() != rhsClass.getComponentType().isPrimitive()) {\n            this.setEquals(false);\n            return this;\n        }\n\n        // Handle multi-dimensional arrays\n        if (lhs instanceof Object[] && rhs instanceof Object[]) {\n            isEquals = Arrays.deepEquals((Object[]) lhs, (Object[]) rhs);\n            return this;\n        } else if (lhs instanceof long[] && rhs instanceof long[]) {\n            isEquals = Arrays.equals((long[]) lhs, (long[]) rhs);\n            return this;\n        } else if (lhs instanceof int[] && rhs instanceof int[]) {\n            isEquals = Arrays.equals((int[]) lhs, (int[]) rhs);\n            return this;\n        } else if (lhs instanceof short[] && rhs instanceof short[]) {\n            isEquals = Arrays.equals((short[]) lhs, (short[]) rhs);\n            return this;\n        } else if (lhs instanceof char[] && rhs instanceof char[]) {\n            isEquals = Arrays.equals((char[]) lhs, (char[]) rhs);\n            return this;\n        } else if (lhs instanceof byte[] && rhs instanceof byte[]) {\n            isEquals = Arrays.equals((byte[]) lhs, (byte[]) rhs);\n            return this;\n        } else if (lhs instanceof double[] && rhs instanceof double[]) {\n            isEquals = Arrays.equals((double[]) lhs, (double[]) rhs);\n            return this;\n        } else if (lhs instanceof float[] && rhs instanceof float[]) {\n            isEquals = Arrays.equals((float[]) lhs, (float[]) rhs);\n            return this;\n        } else if (lhs instanceof boolean[] && rhs instanceof boolean[]) {\n            isEquals = Arrays.equals((boolean[]) lhs, (boolean[]) rhs);\n            return this;\n        } else {\n            // Not an array of primitives\n            isEquals = lhs.equals(rhs);\n            return this;\n        }\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..c7100c1b 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -368,44 +368,70 @@ public class EqualsBuilder {\n         if (isEquals == false) {\n             return this;\n         }\n+        \n         if (lhs == rhs) {\n             return this;\n         }\n+        \n         if (lhs == null || rhs == null) {\n             this.setEquals(false);\n             return this;\n         }\n-        Class lhsClass = lhs.getClass();\n+        \n+        Class<?> lhsClass = lhs.getClass();\n+        Class<?> rhsClass = rhs.getClass();\n+        \n         if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n+            // The simple case, not an array, just test the element\n+            isEquals = lhs.equals(rhs);\n+            return this;\n+        }\n+\n+        if (!rhsClass.isArray()) {\n+            // Not the same: arrays must be compared with Arrays.equals()\n             this.setEquals(false);\n+            return this;\n         }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n-        } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n-        } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n-        } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n-        } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n-        } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n-        } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n-        } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n+\n+        // Check if the array types are compatible\n+        if (lhsClass.getComponentType().isPrimitive() != rhsClass.getComponentType().isPrimitive()) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+\n+        // Handle multi-dimensional arrays\n+        if (lhs instanceof Object[] && rhs instanceof Object[]) {\n+            isEquals = Arrays.deepEquals((Object[]) lhs, (Object[]) rhs);\n+            return this;\n+        } else if (lhs instanceof long[] && rhs instanceof long[]) {\n+            isEquals = Arrays.equals((long[]) lhs, (long[]) rhs);\n+            return this;\n+        } else if (lhs instanceof int[] && rhs instanceof int[]) {\n+            isEquals = Arrays.equals((int[]) lhs, (int[]) rhs);\n+            return this;\n+        } else if (lhs instanceof short[] && rhs instanceof short[]) {\n+            isEquals = Arrays.equals((short[]) lhs, (short[]) rhs);\n+            return this;\n+        } else if (lhs instanceof char[] && rhs instanceof char[]) {\n+            isEquals = Arrays.equals((char[]) lhs, (char[]) rhs);\n+            return this;\n+        } else if (lhs instanceof byte[] && rhs instanceof byte[]) {\n+            isEquals = Arrays.equals((byte[]) lhs, (byte[]) rhs);\n+            return this;\n+        } else if (lhs instanceof double[] && rhs instanceof double[]) {\n+            isEquals = Arrays.equals((double[]) lhs, (double[]) rhs);\n+            return this;\n+        } else if (lhs instanceof float[] && rhs instanceof float[]) {\n+            isEquals = Arrays.equals((float[]) lhs, (float[]) rhs);\n+            return this;\n+        } else if (lhs instanceof boolean[] && rhs instanceof boolean[]) {\n+            isEquals = Arrays.equals((boolean[]) lhs, (boolean[]) rhs);\n+            return this;\n         } else {\n             // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+            isEquals = lhs.equals(rhs);\n+            return this;\n         }\n-        return this;\n     }\n \n     /**",
    "result_reason": "error: generics are not supported in -source 1.3",
    "test_result": "ERROR"
}