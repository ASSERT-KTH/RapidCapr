{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        boolean setDayOfMonth = false;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i == DateTimeFieldType.monthOfYear().getFieldIndex()) {\n                int month = values[i];\n                int year = partial.get(DateTimeFieldType.year());\n                int dayOfMonth = Math.min(values[DateTimeFieldType.dayOfMonth().getFieldIndex()], \n                                           getDaysInMonth(year, month));\n                instant = iChronology.yearMonth().set(0, year, month);\n                instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n                setDayOfMonth = true;\n            } else if (i == DateTimeFieldType.dayOfMonth().getFieldIndex() && !setDayOfMonth) {\n                int year = partial.get(DateTimeFieldType.year());\n                int month = Math.min(values[DateTimeFieldType.monthOfYear().getFieldIndex()], 12);\n                int dayOfMonth = Math.min(values[i], getDaysInMonth(year, month));\n                instant = iChronology.yearMonth().set(0, year, month);\n                instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n            } else {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }               \n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\nprivate int getDaysInMonth(int year, int month) {\n    int dom = 31;\n    switch (month) {\n        case 2:\n            dom = (iChronology.isLeapYear(year) ? 29 : 28);\n            break;\n        case 4: case 6: case 9: case 11:\n            dom = 30;\n            break;\n    }\n    return dom;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..43413283 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,53 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        boolean setDayOfMonth = false;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i == DateTimeFieldType.monthOfYear().getFieldIndex()) {\n+                int month = values[i];\n+                int year = partial.get(DateTimeFieldType.year());\n+                int dayOfMonth = Math.min(values[DateTimeFieldType.dayOfMonth().getFieldIndex()], \n+                                           getDaysInMonth(year, month));\n+                instant = iChronology.yearMonth().set(0, year, month);\n+                instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n+                setDayOfMonth = true;\n+            } else if (i == DateTimeFieldType.dayOfMonth().getFieldIndex() && !setDayOfMonth) {\n+                int year = partial.get(DateTimeFieldType.year());\n+                int month = Math.min(values[DateTimeFieldType.monthOfYear().getFieldIndex()], 12);\n+                int dayOfMonth = Math.min(values[i], getDaysInMonth(year, month));\n+                instant = iChronology.yearMonth().set(0, year, month);\n+                instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n+            } else {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            }               \n         }\n+        instant = add(instant, valueToAdd);\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n+private int getDaysInMonth(int year, int month) {\n+    int dom = 31;\n+    switch (month) {\n+        case 2:\n+            dom = (iChronology.isLeapYear(year) ? 29 : 28);\n+            break;\n+        case 4: case 6: case 9: case 11:\n+            dom = 30;\n+            break;\n+    }\n+    return dom;\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}