{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n    for (Type type : typeVariable.getBounds()) {\n        if (type instanceof TypeVariable) {\n            readTypeVariablesOnTypeVariable((TypeVariable<?>) type);\n        } else {\n            registerTypeVariablesOn(type);\n        }\n    }\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null) {\n        if (actualTypeArgument instanceof TypeVariable) {\n            TypeVariable<?> typeVar = (TypeVariable<?>) actualTypeArgument;\n            if (!typeVar.getName().equals(typeVariable.getName())) {\n                readTypeVariablesOnTypeVariable(typeVar);\n            }\n        } else if (actualTypeArgument instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType) actualTypeArgument;\n            for (Type actualTypeArgumentForParameterizedType : parameterizedType.getActualTypeArguments()) {\n                if (actualTypeArgumentForParameterizedType instanceof TypeVariable) {\n                    TypeVariable<?> typeVar = (TypeVariable<?>) actualTypeArgumentForParameterizedType;\n                    if (!typeVar.getName().equals(typeVariable.getName())) {\n                        readTypeVariablesOnTypeVariable(typeVar);\n                    }\n                } else {\n                    registerTypeVariablesOn(actualTypeArgumentForParameterizedType);\n                }\n            }\n        } else {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n    }\n}\n\nprivate void readTypeVariablesOnTypeVariable(TypeVariable<?> typeVariable) {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds.length == 0) {\n        // Default bound is Object\n        registerTypeVariablesOn(Object.class);\n        return;\n    }\n    for (Type type : bounds) {\n        if (type instanceof TypeVariable) {\n            TypeVariable<?> tv = (TypeVariable<?>) type;\n            if (tv.getName().equals(typeVariable.getName())) {\n                continue;\n            }\n            readTypeVariablesOnTypeVariable(tv);\n        } else {\n            registerTypeVariablesOn(type);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..6f6786b56 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,62 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+    for (Type type : typeVariable.getBounds()) {\n+        if (type instanceof TypeVariable) {\n+            readTypeVariablesOnTypeVariable((TypeVariable<?>) type);\n+        } else {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null) {\n+        if (actualTypeArgument instanceof TypeVariable) {\n+            TypeVariable<?> typeVar = (TypeVariable<?>) actualTypeArgument;\n+            if (!typeVar.getName().equals(typeVariable.getName())) {\n+                readTypeVariablesOnTypeVariable(typeVar);\n+            }\n+        } else if (actualTypeArgument instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType) actualTypeArgument;\n+            for (Type actualTypeArgumentForParameterizedType : parameterizedType.getActualTypeArguments()) {\n+                if (actualTypeArgumentForParameterizedType instanceof TypeVariable) {\n+                    TypeVariable<?> typeVar = (TypeVariable<?>) actualTypeArgumentForParameterizedType;\n+                    if (!typeVar.getName().equals(typeVariable.getName())) {\n+                        readTypeVariablesOnTypeVariable(typeVar);\n+                    }\n+                } else {\n+                    registerTypeVariablesOn(actualTypeArgumentForParameterizedType);\n+                }\n+            }\n+        } else {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+    }\n+}\n+\n+private void readTypeVariablesOnTypeVariable(TypeVariable<?> typeVariable) {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds.length == 0) {\n+        // Default bound is Object\n+        registerTypeVariablesOn(Object.class);\n+        return;\n+    }\n+    for (Type type : bounds) {\n+        if (type instanceof TypeVariable) {\n+            TypeVariable<?> tv = (TypeVariable<?>) type;\n+            if (tv.getName().equals(typeVariable.getName())) {\n+                continue;\n+            }\n+            readTypeVariablesOnTypeVariable(tv);\n+        } else {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}