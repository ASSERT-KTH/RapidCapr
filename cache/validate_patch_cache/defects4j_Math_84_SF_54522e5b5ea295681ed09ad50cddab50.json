{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n            \n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n\n                    // check if converged\n                    if (isConverged(simplex[0].getValue(), simplex[worst].getValue())) {\n                        return;\n                    }\n                } else {\n\n                    // accept the contracted simplex\n                    simplex = evaluateNewSimplex(original, sigma, comparator);\n                }\n\n            } else {\n                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = evaluateNewSimplex(original, rho, comparator);\n                } else {\n                    // perform a shrink\n                    final RealPointValuePair[] shrinkedSimplex = shrink(original, comparator);\n                    simplex = shrinkedSimplex;\n                }\n            }\n        }\n\n    }\n    \n    private boolean isConverged(double best, double worst) {\n        if (Math.abs(best - worst) <= getRelativeThreshold() * (Math.abs(best) + getAbsoluteThreshold())) {\n            return true;\n        } else {\n            return false;\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..8b5829451 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -62,7 +62,7 @@ public class MultiDirectional extends DirectSearchOptimizer {\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n-\n+            \n             incrementIterationsCounter();\n \n             // save the original vertex\n@@ -76,27 +76,43 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+\n                 if (comparator.compare(reflected, expanded) <= 0) {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n-                }\n \n-                return;\n-\n-            }\n+                    // check if converged\n+                    if (isConverged(simplex[0].getValue(), simplex[worst].getValue())) {\n+                        return;\n+                    }\n+                } else {\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+                    // accept the contracted simplex\n+                    simplex = evaluateNewSimplex(original, sigma, comparator);\n+                }\n \n-            // check convergence\n-                return;\n+            } else {\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = evaluateNewSimplex(original, rho, comparator);\n+                } else {\n+                    // perform a shrink\n+                    final RealPointValuePair[] shrinkedSimplex = shrink(original, comparator);\n+                    simplex = shrinkedSimplex;\n+                }\n             }\n-\n         }\n \n     }\n+    \n+    private boolean isConverged(double best, double worst) {\n+        if (Math.abs(best - worst) <= getRelativeThreshold() * (Math.abs(best) + getAbsoluteThreshold())) {\n+            return true;\n+        } else {\n+            return false;\n+        }\n+    }\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}