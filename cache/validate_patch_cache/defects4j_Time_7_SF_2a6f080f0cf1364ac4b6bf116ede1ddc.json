{
    "patch": "\n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n        int defaultYear = chrono.year().get(instantLocal);\n\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n                instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n\n        // Fix leap year february dates\n        int year = bucket.computeMillis(false, text) < 0 ? defaultYear - 1 : defaultYear;\n        if (bucket.getValidFieldIndex(DateTimeFieldType.dayOfMonth()) && bucket.getInt(DateTimeFieldType.monthOfYear()) == 2\n                && bucket.getInt(DateTimeFieldType.dayOfMonth()) == 29\n                && !chrono.year().isLeap(year)) {\n            throw new IllegalArgumentException(\"Invalid date 'February 29' as '\" + year + \"' is not a leap year\");",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..cbe54e37 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,23 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n+\n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n         int defaultYear = chrono.year().get(instantLocal);\n-        \n+\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+                instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n-    }\n+\n+        // Fix leap year february dates\n+        int year = bucket.computeMillis(false, text) < 0 ? defaultYear - 1 : defaultYear;\n+        if (bucket.getValidFieldIndex(DateTimeFieldType.dayOfMonth()) && bucket.getInt(DateTimeFieldType.monthOfYear()) == 2\n+                && bucket.getInt(DateTimeFieldType.dayOfMonth()) == 29\n+                && !chrono.year().isLeap(year)) {\n+            throw new IllegalArgumentException(\"Invalid date 'February 29' as '\" + year + \"' is not a leap year\");\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}