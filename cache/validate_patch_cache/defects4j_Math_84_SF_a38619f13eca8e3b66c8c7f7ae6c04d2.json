{
    "patch": "            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n        final int numVertices = simplex.length;\n        int numIterations = 0;\n        final int maxIterations = getMaxIterations();\n\n        while (numIterations < maxIterations) {\n            incrementIterationsCounter();\n            ++numIterations;\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(reflected, expanded) < 0) {\n                    // accept the expanded simplex\n                    simplex = expanded.getPoint() == null ? shrink(original, comparator) : expandedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n            } else {\n                // compute the contracted simplex\n                RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = contractedSimplex(contracted.getPoint(), original, comparator).getPoint() == null ?\n                            shrink(original, comparator) : contractedSimplex(contracted.getPoint(), original, comparator);\n                } else {\n                    // perform a shrink\n                    simplex = shrink(original, comparator);\n                }\n            }\n\n            if (isConverged(best, comparator.compare(simplex[0], best), numIterations, maxIterations)) {\n                return;\n            }\n        }\n\n        throw new OptimizationException(\"Maximal number of iterations (\"\n                + maxIterations + \") exceeded\");",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..172d36514 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,12 +58,14 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+        final int numVertices = simplex.length;\n+        int numIterations = 0;\n+        final int maxIterations = getMaxIterations();\n \n+        while (numIterations < maxIterations) {\n             incrementIterationsCounter();\n+            ++numIterations;\n \n             // save the original vertex\n             final RealPointValuePair[] original = simplex;\n@@ -72,31 +74,35 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             // perform a reflection step\n             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n             if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+                if (comparator.compare(reflected, expanded) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = expanded.getPoint() == null ? shrink(original, comparator) : expandedSimplex;\n+                } else {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n-\n-                return;\n-\n+            } else {\n+                // compute the contracted simplex\n+                RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = contractedSimplex(contracted.getPoint(), original, comparator).getPoint() == null ?\n+                            shrink(original, comparator) : contractedSimplex(contracted.getPoint(), original, comparator);\n+                } else {\n+                    // perform a shrink\n+                    simplex = shrink(original, comparator);\n+                }\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n+            if (isConverged(best, comparator.compare(simplex[0], best), numIterations, maxIterations)) {\n                 return;\n             }\n-\n         }\n \n-    }\n+        throw new OptimizationException(\"Maximal number of iterations (\"\n+                + maxIterations + \") exceeded\");\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}