{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds.length > 0) {\n        for (Type bound : bounds) {\n            registerTypeVariablesOn(bound);\n        }\n    } else {\n        // If there are no bounds, the type variable defaults to Object\n        registerTypeVariablesOn(Object.class);\n    }\n\n    TypeVariable<?>[] typeParameters = typeVariable.getGenericDeclaration().getTypeParameters();\n    if (typeParameters.length == 0) {\n        return;\n    }\n\n    Type[] actualTypeArguments = typeVariable.getGenericDeclaration().getTypeParameters()[typeVariable.getIndex()].getBounds();\n\n    for (Type actualTypeArgument : actualTypeArguments) {\n        if (actualTypeArgument instanceof TypeVariable) {\n            // recursively handle type parameters\n            readNestedTypeVariables((TypeVariable<?>) actualTypeArgument);\n        } else {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n    }\n}\n\nprivate void readNestedTypeVariables(TypeVariable<?> nestedTypeVariable) {\n    Type[] bounds = nestedTypeVariable.getBounds();\n    if (bounds.length > 0) {\n        for (Type bound : bounds) {\n            registerTypeVariablesOn(bound);\n        }\n    } else {\n        // If there are no bounds, the nested type variable defaults to Object\n        registerTypeVariablesOn(Object.class);\n    }\n\n    TypeVariable<?>[] typeParameters = nestedTypeVariable.getGenericDeclaration().getTypeParameters();\n    if (typeParameters.length == 0) {\n        return;\n    }\n\n    Type[] actualTypeArguments = nestedTypeVariable.getGenericDeclaration().getTypeParameters()[nestedTypeVariable.getIndex()].getBounds();\n\n    for (Type actualTypeArgument : actualTypeArguments) {\n        if (actualTypeArgument instanceof TypeVariable) {\n            readNestedTypeVariables((TypeVariable<?>) actualTypeArgument);\n        } else {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..68fb4b2bd 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,61 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds.length > 0) {\n+        for (Type bound : bounds) {\n+            registerTypeVariablesOn(bound);\n+        }\n+    } else {\n+        // If there are no bounds, the type variable defaults to Object\n+        registerTypeVariablesOn(Object.class);\n+    }\n+\n+    TypeVariable<?>[] typeParameters = typeVariable.getGenericDeclaration().getTypeParameters();\n+    if (typeParameters.length == 0) {\n+        return;\n+    }\n+\n+    Type[] actualTypeArguments = typeVariable.getGenericDeclaration().getTypeParameters()[typeVariable.getIndex()].getBounds();\n+\n+    for (Type actualTypeArgument : actualTypeArguments) {\n+        if (actualTypeArgument instanceof TypeVariable) {\n+            // recursively handle type parameters\n+            readNestedTypeVariables((TypeVariable<?>) actualTypeArgument);\n+        } else {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+    }\n+}\n+\n+private void readNestedTypeVariables(TypeVariable<?> nestedTypeVariable) {\n+    Type[] bounds = nestedTypeVariable.getBounds();\n+    if (bounds.length > 0) {\n+        for (Type bound : bounds) {\n+            registerTypeVariablesOn(bound);\n+        }\n+    } else {\n+        // If there are no bounds, the nested type variable defaults to Object\n+        registerTypeVariablesOn(Object.class);\n+    }\n+\n+    TypeVariable<?>[] typeParameters = nestedTypeVariable.getGenericDeclaration().getTypeParameters();\n+    if (typeParameters.length == 0) {\n+        return;\n+    }\n+\n+    Type[] actualTypeArguments = nestedTypeVariable.getGenericDeclaration().getTypeParameters()[nestedTypeVariable.getIndex()].getBounds();\n+\n+    for (Type actualTypeArgument : actualTypeArguments) {\n+        if (actualTypeArgument instanceof TypeVariable) {\n+            readNestedTypeVariables((TypeVariable<?>) actualTypeArgument);\n+        } else {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}