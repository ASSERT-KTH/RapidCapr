{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.MathUtils;\n\npublic class GammaFunction {\n\n    public static double gamma(double x) {\n        if (x <= 0) {\n            return Double.NaN;\n        }\n        if (x < 0.5) {\n            return Math.PI / (Math.sin(Math.PI * x) * Gamma.gamma(1 - x));\n        }\n        x -= 1;\n        double p = 0.99999999999980993;\n        p += 676.5203681218851 / (x + 1);\n        p -= 1259.1392167224028 / (x + 2);\n        p += 771.3234287757674 / (x + 3);\n        p -= 176.61502916214059 / (x + 4);\n        p += 12.507343278686905 / (x + 5);\n        p -= 0.13857109526572012 / (x + 6);\n        p += 9.984369578019571e-6 / (x + 7);\n        p += 1.5056327351493116e-7 / (x + 8);\n\n        double ans = Math.sqrt(2 * Math.PI) / x * Math.pow((x + MathUtils.E), x) * p;\n        return ans;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..acac08482 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,33 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.MathUtils;\n+\n+public class GammaFunction {\n+\n+    public static double gamma(double x) {\n+        if (x <= 0) {\n+            return Double.NaN;\n+        }\n+        if (x < 0.5) {\n+            return Math.PI / (Math.sin(Math.PI * x) * Gamma.gamma(1 - x));\n+        }\n+        x -= 1;\n+        double p = 0.99999999999980993;\n+        p += 676.5203681218851 / (x + 1);\n+        p -= 1259.1392167224028 / (x + 2);\n+        p += 771.3234287757674 / (x + 3);\n+        p -= 176.61502916214059 / (x + 4);\n+        p += 12.507343278686905 / (x + 5);\n+        p -= 0.13857109526572012 / (x + 6);\n+        p += 9.984369578019571e-6 / (x + 7);\n+        p += 1.5056327351493116e-7 / (x + 8);\n+\n+        double ans = Math.sqrt(2 * Math.PI) / x * Math.pow((x + MathUtils.E), x) * p;\n+        return ans;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}