{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      while (argList.hasChildren()) {\n        Node lastArg = argList.getLastChild();\n        if (!isReferenced(lastArg, fnScope)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }\n  \n  private boolean isReferenced(Node arg, Scope fnScope) {\n    String argName = arg.getString();\n    Var var = fnScope.getVar(argName);\n    if (referenced.contains(var)) {\n      return true;\n    }\n\n    // Check if the arg is actually used in the function body.\n    Node function = fnScope.getRootNode();\n    Node body = function.getLastChild();\n    if (function.getChildCount() == 3) {\n      // If there are default values are arguments, then remove them.\n      Preconditions.checkState(function.getSecondChild().isParamList());\n      body = function.getLastChild().getPrevious();\n    }\n\n    return NodeTraversal.traverseEs6(compiler, body,\n        new NodeTraversal.Callback() {\n          @Override\n          public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n            return n != function;\n          }\n\n          @Override\n          public void visit(NodeTraversal nodeTraversal, Node n, Node parent) {\n            if (n.isName() && n.getString().equals(argName)) {\n              Preconditions.checkState(parent.isFunction());\n\n              Scope scope = nodeTraversal.getScope();\n              if (scoping.isVarDeclared(scope, argName)) {\n                // This parameter is shadowed by a local variable so it is considered referenced.\n                return;\n              }\n\n              // We have found a getelem or getprop reference to this param so it is considered referenced.\n              Node target = NodeUtil.getBestLValue(n);\n              if (target != null) {\n                referenced.add(fnScope.getVar(target.getString()));\n              }\n            }\n          }\n    });\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..3173d169 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -378,7 +378,6 @@ class RemoveUnusedVars\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n \n     Node function = fnScope.getRootNode();\n-\n     Preconditions.checkState(function.isFunction());\n     if (NodeUtil.isGetOrSetKey(function.getParent())) {\n       // The parameters object literal setters can not be removed.\n@@ -390,10 +389,9 @@ class RemoveUnusedVars\n         && callSiteOptimizer.canModifyCallers(function);\n     if (!modifyCallers) {\n       // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n+      while (argList.hasChildren()) {\n+        Node lastArg = argList.getLastChild();\n+        if (!isReferenced(lastArg, fnScope)) {\n           argList.removeChild(lastArg);\n           compiler.reportCodeChange();\n         } else {\n@@ -404,6 +402,50 @@ class RemoveUnusedVars\n       callSiteOptimizer.optimize(fnScope, referenced);\n     }\n   }\n+  \n+  private boolean isReferenced(Node arg, Scope fnScope) {\n+    String argName = arg.getString();\n+    Var var = fnScope.getVar(argName);\n+    if (referenced.contains(var)) {\n+      return true;\n+    }\n+\n+    // Check if the arg is actually used in the function body.\n+    Node function = fnScope.getRootNode();\n+    Node body = function.getLastChild();\n+    if (function.getChildCount() == 3) {\n+      // If there are default values are arguments, then remove them.\n+      Preconditions.checkState(function.getSecondChild().isParamList());\n+      body = function.getLastChild().getPrevious();\n+    }\n+\n+    return NodeTraversal.traverseEs6(compiler, body,\n+        new NodeTraversal.Callback() {\n+          @Override\n+          public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n+            return n != function;\n+          }\n+\n+          @Override\n+          public void visit(NodeTraversal nodeTraversal, Node n, Node parent) {\n+            if (n.isName() && n.getString().equals(argName)) {\n+              Preconditions.checkState(parent.isFunction());\n+\n+              Scope scope = nodeTraversal.getScope();\n+              if (scoping.isVarDeclared(scope, argName)) {\n+                // This parameter is shadowed by a local variable so it is considered referenced.\n+                return;\n+              }\n+\n+              // We have found a getelem or getprop reference to this param so it is considered referenced.\n+              Node target = NodeUtil.getBestLValue(n);\n+              if (target != null) {\n+                referenced.add(fnScope.getVar(target.getString()));\n+              }\n+            }\n+          }\n+    });\n+  }\n \n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}