{
    "patch": "            } else {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    if (offsetLocal == offsetAdjusted) {\n                        // This happens in Venezuelan time zone America/Caracas, where\n                        // \"Dec 31, 1979 at 23:59:59\" lasts for 1 hour due to DST\n                        return offsetLocal;\n                    } else if (offsetLocal < offsetAdjusted) {\n                        return offsetLocal;\n                    } else {\n                        return getOffset(nextAdjusted);\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..e05db7ed 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,19 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            } else {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    if (offsetLocal == offsetAdjusted) {\n+                        // This happens in Venezuelan time zone America/Caracas, where\n+                        // \"Dec 31, 1979 at 23:59:59\" lasts for 1 hour due to DST\n+                        return offsetLocal;\n+                    } else if (offsetLocal < offsetAdjusted) {\n+                        return offsetLocal;\n+                    } else {\n+                        return getOffset(nextAdjusted);\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}