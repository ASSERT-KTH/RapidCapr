{
    "patch": "    && assign.getParent() != null\n    && NodeUtil.isStatement(assign.getParent())\n    && assign.getNext() == null\n    && n != null\n    && n.getType() == Token.GETPROP\n    && n.getFirstChild() != null\n    && n.getFirstChild().getType() == Token.GETPROP\n    && n.getFirstChild().getLastChild() != null\n    && \"prototype\".equals(n.getFirstChild().getLastChild().getString())) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..61667bd4 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -315,7 +315,15 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+    && assign.getParent() != null\n+    && NodeUtil.isStatement(assign.getParent())\n+    && assign.getNext() == null\n+    && n != null\n+    && n.getType() == Token.GETPROP\n+    && n.getFirstChild() != null\n+    && n.getFirstChild().getType() == Token.GETPROP\n+    && n.getFirstChild().getLastChild() != null\n+    && \"prototype\".equals(n.getFirstChild().getLastChild().getString())) {\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}