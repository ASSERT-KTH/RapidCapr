{
    "patch": "import java.util.*;\n\npublic class Unique {\n    public static List<String> uniqueNames(List<String> names1, List<String> names2) {\n        Set<String> uniqueNames = new HashSet<>();\n        uniqueNames.addAll(names1);\n        uniqueNames.addAll(names2);\n        return new ArrayList<>(uniqueNames);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..f05fa3aa9 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,16 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+import java.util.*;\n+\n+public class Unique {\n+    public static List<String> uniqueNames(List<String> names1, List<String> names2) {\n+        Set<String> uniqueNames = new HashSet<>();\n+        uniqueNames.addAll(names1);\n+        uniqueNames.addAll(names2);\n+        return new ArrayList<>(uniqueNames);\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}