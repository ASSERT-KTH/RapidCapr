{
    "patch": "public static String fixCode(String code) {\n    String pattern = \"\\\\[(.*?)]\";\n    Pattern r = Pattern.compile(pattern);\n    Matcher m = r.matcher(code);\n    String fixedCode = \"\";\n    while (m.find()) {\n        String oldMatch = m.group(0).replace(\"[\", \"\").replace(\"]\", \"\");\n        String newMatch = \"\";\n        if (oldMatch.contains(\"in\")) {\n            newMatch = \"Arrays.asList(\" + oldMatch + \")\";\n        } else {\n            newMatch = \"new int[] {\" + oldMatch + \"}\";\n        }\n        m.appendReplacement(fixedCode, Matcher.quoteReplacement(newMatch));\n    }\n    m.appendTail(fixedCode);\n    return fixedCode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6b048296 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,24 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    String pattern = \"\\\\[(.*?)]\";\n+    Pattern r = Pattern.compile(pattern);\n+    Matcher m = r.matcher(code);\n+    String fixedCode = \"\";\n+    while (m.find()) {\n+        String oldMatch = m.group(0).replace(\"[\", \"\").replace(\"]\", \"\");\n+        String newMatch = \"\";\n+        if (oldMatch.contains(\"in\")) {\n+            newMatch = \"Arrays.asList(\" + oldMatch + \")\";\n+        } else {\n+            newMatch = \"new int[] {\" + oldMatch + \"}\";\n+        }\n+        m.appendReplacement(fixedCode, Matcher.quoteReplacement(newMatch));\n+    }\n+    m.appendTail(fixedCode);\n+    return fixedCode;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}