{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final double TOLERANCE = 1e-10;\n\n    try {\n        CholeskyDecomposition cd = new CholeskyDecomposition(m);\n        RealMatrix L = cd.getL();\n        return L.multiply(L.transpose());\n    } catch (Exception e) {\n        EigenDecomposition ed = new EigenDecomposition(m);\n        RealMatrix V = ed.getV();\n        RealMatrix D = ed.getD();\n\n        /* Compute the square roots of the eigenvalues */\n        RealMatrix sqrtD = MatrixUtils.createRealMatrix(D.getRowDimension(), D.getColumnDimension());\n        for (int i = 0; i < D.getRowDimension(); i++) {\n            double eigenvalue = D.getEntry(i, i);\n            if (eigenvalue < -TOLERANCE) {\n                throw new ArithmeticException(\"Matrix has complex square root\");\n            }\n            double sqrtEigenvalue = eigenvalue >= TOLERANCE ? FastMath.sqrt(eigenvalue) : 0.0;\n            sqrtD.setEntry(i, i, sqrtEigenvalue);\n        }\n\n        /* Compute the square root of the matrix */\n        RealMatrix sqrtM = V.multiply(sqrtD).multiply(V.transpose());\n        return sqrtM;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..bea35f4e0 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,32 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final double TOLERANCE = 1e-10;\n+\n+    try {\n+        CholeskyDecomposition cd = new CholeskyDecomposition(m);\n+        RealMatrix L = cd.getL();\n+        return L.multiply(L.transpose());\n+    } catch (Exception e) {\n+        EigenDecomposition ed = new EigenDecomposition(m);\n+        RealMatrix V = ed.getV();\n+        RealMatrix D = ed.getD();\n+\n+        /* Compute the square roots of the eigenvalues */\n+        RealMatrix sqrtD = MatrixUtils.createRealMatrix(D.getRowDimension(), D.getColumnDimension());\n+        for (int i = 0; i < D.getRowDimension(); i++) {\n+            double eigenvalue = D.getEntry(i, i);\n+            if (eigenvalue < -TOLERANCE) {\n+                throw new ArithmeticException(\"Matrix has complex square root\");\n+            }\n+            double sqrtEigenvalue = eigenvalue >= TOLERANCE ? FastMath.sqrt(eigenvalue) : 0.0;\n+            sqrtD.setEntry(i, i, sqrtEigenvalue);\n+        }\n+\n+        /* Compute the square root of the matrix */\n+        RealMatrix sqrtM = V.multiply(sqrtD).multiply(V.transpose());\n+        return sqrtM;\n     }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}