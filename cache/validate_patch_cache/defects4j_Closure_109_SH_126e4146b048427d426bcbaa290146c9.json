{
    "patch": "          if (token.isOfType(JsDocToken.Type.NAME)) {\n            return parseTypeName(token);\n          } else if (token.isOfType(JsDocToken.Type.START_BLOCK_COMMENT)) {\n            return parseRecordType((String)token.getValue());\n          } else if (token.isOfType(JsDocToken.Type.START_ARRAY)) {\n            return parseArrayType(parseContextTypeExpression());\n          }\n          addBadTypeError(\"Bad type annotation\", token);\n          return new Node(Node.Type.INVALID, token.getJSDocInfo());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..2746b470 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,15 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+          if (token.isOfType(JsDocToken.Type.NAME)) {\n+            return parseTypeName(token);\n+          } else if (token.isOfType(JsDocToken.Type.START_BLOCK_COMMENT)) {\n+            return parseRecordType((String)token.getValue());\n+          } else if (token.isOfType(JsDocToken.Type.START_ARRAY)) {\n+            return parseArrayType(parseContextTypeExpression());\n+          }\n+          addBadTypeError(\"Bad type annotation\", token);\n+          return new Node(Node.Type.INVALID, token.getJSDocInfo());\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}