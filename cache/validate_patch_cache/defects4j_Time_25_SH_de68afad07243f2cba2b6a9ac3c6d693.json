{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // Handle the case when local time matches a transition\n    if (instantLocal == nextTransition(instantLocal - offsetLocal) - offsetLocal) {\n        instantLocal = nextTransition(instantLocal - offsetLocal) + offsetLocal;\n        return getOffset(instantLocal);\n    } else if (instantLocal == previousTransition(instantLocal - offsetLocal) - offsetLocal) {\n        instantLocal = previousTransition(instantLocal - offsetLocal) + offsetLocal;\n        return getOffset(instantLocal);\n    }\n\n    // We need to ensure that time is always after the DST gap\n    boolean isPositiveOffsetLocal = offsetLocal >= 0;\n    boolean isPositiveOffsetAdjusted = offsetAdjusted >= 0;\n\n    if (isPositiveOffsetLocal == isPositiveOffsetAdjusted) {\n        // Both offsets are positive or both are negative,\n        // so just return the adjusted offset.\n        return offsetAdjusted;\n    } else if (isPositiveOffsetLocal) {\n        // Offset transitioned from negative to positive at this point,\n        // so find the transition and return the offset just after it.\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (nextLocal == nextAdjusted) {\n            return offsetAdjusted;\n        } else {\n            long nextInstant = nextLocal + (nextLocal == instantAdjusted ? offsetAdjusted : 0);\n            return getOffset(nextInstant);\n        }\n    } else {\n        // Offset transitioned from positive to negative at this point,\n        // so find the transition and return the offset just before it.\n        long prevLocal = previousTransition(instantAdjusted);\n        long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n        if (prevLocal == prevAdjusted) {\n            return offsetLocal;\n        } else {\n            long prevInstant = prevLocal + (prevLocal == instantAdjusted ? offsetLocal : 0);\n            return getOffset(prevInstant);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..3d561b0c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,48 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // Handle the case when local time matches a transition\n+    if (instantLocal == nextTransition(instantLocal - offsetLocal) - offsetLocal) {\n+        instantLocal = nextTransition(instantLocal - offsetLocal) + offsetLocal;\n+        return getOffset(instantLocal);\n+    } else if (instantLocal == previousTransition(instantLocal - offsetLocal) - offsetLocal) {\n+        instantLocal = previousTransition(instantLocal - offsetLocal) + offsetLocal;\n+        return getOffset(instantLocal);\n+    }\n+\n+    // We need to ensure that time is always after the DST gap\n+    boolean isPositiveOffsetLocal = offsetLocal >= 0;\n+    boolean isPositiveOffsetAdjusted = offsetAdjusted >= 0;\n+\n+    if (isPositiveOffsetLocal == isPositiveOffsetAdjusted) {\n+        // Both offsets are positive or both are negative,\n+        // so just return the adjusted offset.\n+        return offsetAdjusted;\n+    } else if (isPositiveOffsetLocal) {\n+        // Offset transitioned from negative to positive at this point,\n+        // so find the transition and return the offset just after it.\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextLocal == nextAdjusted) {\n+            return offsetAdjusted;\n+        } else {\n+            long nextInstant = nextLocal + (nextLocal == instantAdjusted ? offsetAdjusted : 0);\n+            return getOffset(nextInstant);\n+        }\n+    } else {\n+        // Offset transitioned from positive to negative at this point,\n+        // so find the transition and return the offset just before it.\n+        long prevLocal = previousTransition(instantAdjusted);\n+        long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+        if (prevLocal == prevAdjusted) {\n+            return offsetLocal;\n+        } else {\n+            long prevInstant = prevLocal + (prevLocal == instantAdjusted ? offsetLocal : 0);\n+            return getOffset(prevInstant);\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}