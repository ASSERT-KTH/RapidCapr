{
    "patch": "private String getRemainingJSDocLine() {\n  String line = stream.getRemainingJSDocLine();\n  if (line == null) {\n    throw new IllegalStateException(\"JSDoc line is null\");\n  }\n  line = line.trim();\n  if (line.isEmpty()) {\n    return \"\";\n  }\n  StringBuilder sb = new StringBuilder();\n  boolean trimmedSpaces = false;\n  boolean firstBullet = true;\n  for (int i = 0; i < line.length(); i++) {\n    char c = line.charAt(i);\n    if (Character.isWhitespace(c)) {\n      if (!trimmedSpaces) {\n        sb.append(' ');\n        trimmedSpaces = true;\n      }\n    } else if (c == '*') {\n      if (firstBullet || !trimmedSpaces) {\n        sb.append(' ');\n      }\n      firstBullet = false;\n      trimmedSpaces = false;\n    } else {\n      sb.append(c);\n      trimmedSpaces = false;\n    }\n  }\n  String result = sb.toString().trim();\n  return result.endsWith(\".\") ? result.substring(0, result.length() - 1).trim() : result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..b8f7a378 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,39 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n-    String result = stream.getRemainingJSDocLine();\n-    return result;\n+private String getRemainingJSDocLine() {\n+  String line = stream.getRemainingJSDocLine();\n+  if (line == null) {\n+    throw new IllegalStateException(\"JSDoc line is null\");\n+  }\n+  line = line.trim();\n+  if (line.isEmpty()) {\n+    return \"\";\n+  }\n+  StringBuilder sb = new StringBuilder();\n+  boolean trimmedSpaces = false;\n+  boolean firstBullet = true;\n+  for (int i = 0; i < line.length(); i++) {\n+    char c = line.charAt(i);\n+    if (Character.isWhitespace(c)) {\n+      if (!trimmedSpaces) {\n+        sb.append(' ');\n+        trimmedSpaces = true;\n+      }\n+    } else if (c == '*') {\n+      if (firstBullet || !trimmedSpaces) {\n+        sb.append(' ');\n+      }\n+      firstBullet = false;\n+      trimmedSpaces = false;\n+    } else {\n+      sb.append(c);\n+      trimmedSpaces = false;\n+    }\n   }\n+  String result = sb.toString().trim();\n+  return result.endsWith(\".\") ? result.substring(0, result.length() - 1).trim() : result;\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "junit.framework.ComparisonFailure: expected:<Another[ function.]> but was:<Another[function]>",
    "test_result": "FAIL"
}