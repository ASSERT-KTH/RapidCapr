{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    boolean includeWeeks = type.isSupported(DurationFieldType.weeks());\n    boolean includeDays = type.isSupported(DurationFieldType.days());\n\n    long millis = getMillis()\n            + (getSeconds() * DateTimeConstants.MILLIS_PER_SECOND)\n            + (getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE)\n            + (getHours() * DateTimeConstants.MILLIS_PER_HOUR);\n\n    if (includeWeeks || includeDays) {\n        int days = getDays() + (includeWeeks ? (getWeeks() * 7) : 0);\n        int weeks = includeWeeks ? (days / 7) : 0;\n        days %= 7;\n\n        days += weeks * 7;\n\n        if (includeWeeks) {\n            millis += (long) weeks * DateTimeConstants.MILLIS_PER_WEEK;\n        }\n\n        if (includeDays) {\n            millis += (long) days * DateTimeConstants.MILLIS_PER_DAY;\n        }\n    } else {\n        millis += (long) getDays() * DateTimeConstants.MILLIS_PER_DAY;\n    }\n\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    // Set supported fields only if their value is non-zero\n    if (type.isSupported(DurationFieldType.years()) && getYears() != 0) {\n        result = result.withYears(getYears());\n    }\n    if (type.isSupported(DurationFieldType.months()) && getMonths() != 0) {\n        result = result.withMonths(getMonths());\n    }\n    if (type.isSupported(DurationFieldType.weeks()) && getWeeks() != 0) {\n        result = result.withWeeks(getWeeks());\n    }\n    if (type.isSupported(DurationFieldType.days()) && getDays() != 0) {\n        result = result.withDays(getDays());\n    }\n    if (type.isSupported(DurationFieldType.hours()) && getHours() != 0) {\n        result = result.withHours(getHours());\n    }\n    if (type.isSupported(DurationFieldType.minutes()) && getMinutes() != 0) {\n        result = result.withMinutes(getMinutes());\n    }\n    if (type.isSupported(DurationFieldType.seconds()) && getSeconds() != 0) {\n        result = result.withSeconds(getSeconds());\n    }\n    if (type.isSupported(DurationFieldType.millis()) && getMillis() != 0) {\n        result = result.withMillis(getMillis());\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..5e74b8bf 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,63 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    boolean includeWeeks = type.isSupported(DurationFieldType.weeks());\n+    boolean includeDays = type.isSupported(DurationFieldType.days());\n+\n+    long millis = getMillis()\n+            + (getSeconds() * DateTimeConstants.MILLIS_PER_SECOND)\n+            + (getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE)\n+            + (getHours() * DateTimeConstants.MILLIS_PER_HOUR);\n+\n+    if (includeWeeks || includeDays) {\n+        int days = getDays() + (includeWeeks ? (getWeeks() * 7) : 0);\n+        int weeks = includeWeeks ? (days / 7) : 0;\n+        days %= 7;\n+\n+        days += weeks * 7;\n+\n+        if (includeWeeks) {\n+            millis += (long) weeks * DateTimeConstants.MILLIS_PER_WEEK;\n         }\n-        return result;\n+\n+        if (includeDays) {\n+            millis += (long) days * DateTimeConstants.MILLIS_PER_DAY;\n+        }\n+    } else {\n+        millis += (long) getDays() * DateTimeConstants.MILLIS_PER_DAY;\n+    }\n+\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+\n+    // Set supported fields only if their value is non-zero\n+    if (type.isSupported(DurationFieldType.years()) && getYears() != 0) {\n+        result = result.withYears(getYears());\n+    }\n+    if (type.isSupported(DurationFieldType.months()) && getMonths() != 0) {\n+        result = result.withMonths(getMonths());\n+    }\n+    if (type.isSupported(DurationFieldType.weeks()) && getWeeks() != 0) {\n+        result = result.withWeeks(getWeeks());\n+    }\n+    if (type.isSupported(DurationFieldType.days()) && getDays() != 0) {\n+        result = result.withDays(getDays());\n     }\n+    if (type.isSupported(DurationFieldType.hours()) && getHours() != 0) {\n+        result = result.withHours(getHours());\n+    }\n+    if (type.isSupported(DurationFieldType.minutes()) && getMinutes() != 0) {\n+        result = result.withMinutes(getMinutes());\n+    }\n+    if (type.isSupported(DurationFieldType.seconds()) && getSeconds() != 0) {\n+        result = result.withSeconds(getSeconds());\n+    }\n+    if (type.isSupported(DurationFieldType.millis()) && getMillis() != 0) {\n+        result = result.withMillis(getMillis());\n+    }\n+\n+    return result;\n+}\n \n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<P2W5D> but was:<P1W12D>",
    "test_result": "FAIL"
}