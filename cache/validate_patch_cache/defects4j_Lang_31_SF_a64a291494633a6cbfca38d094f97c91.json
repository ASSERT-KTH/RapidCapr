{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int len = str.length();\n    int searchLen = searchChars.length;\n    int strIndex = 0;\n    while (strIndex < len) {\n        char ch = str.charAt(strIndex);\n        for (int i = 0; i < searchLen; i++) {\n            char searchChar = searchChars[i];\n            if (ch == searchChar) {\n                if (Character.isHighSurrogate(ch)) {\n                    if (i == searchLen - 1) {\n                        throw new IllegalArgumentException(\n                            \"Invalid high surrogate at end of search string\");\n                    }\n                    if (strIndex < len - 1) {\n                        char ch2 = str.charAt(strIndex + 1);\n                        if (Character.isLowSurrogate(ch2)) {\n                            char ch3 = Character.toSupplementaryCodePoint(ch, ch2);\n                            if (containsCodePoint(searchChars, ch3)) {\n                                return true;\n                            }\n                        }\n                    }\n                } else {\n                    if (containsCodePoint(searchChars, ch)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        strIndex++;\n    }\n    return false;\n}\n\npublic static boolean containsCodePoint(char[] arr, int codePoint) {\n    for (int i = 0; i < arr.length; i++) {\n        if (Character.codePointAt(arr, i) == codePoint) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..c4999499 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,52 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    int len = str.length();\n+    int searchLen = searchChars.length;\n+    int strIndex = 0;\n+    while (strIndex < len) {\n+        char ch = str.charAt(strIndex);\n+        for (int i = 0; i < searchLen; i++) {\n+            char searchChar = searchChars[i];\n+            if (ch == searchChar) {\n+                if (Character.isHighSurrogate(ch)) {\n+                    if (i == searchLen - 1) {\n+                        throw new IllegalArgumentException(\n+                            \"Invalid high surrogate at end of search string\");\n+                    }\n+                    if (strIndex < len - 1) {\n+                        char ch2 = str.charAt(strIndex + 1);\n+                        if (Character.isLowSurrogate(ch2)) {\n+                            char ch3 = Character.toSupplementaryCodePoint(ch, ch2);\n+                            if (containsCodePoint(searchChars, ch3)) {\n+                                return true;\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    if (containsCodePoint(searchChars, ch)) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        strIndex++;\n+    }\n+    return false;\n+}\n+\n+public static boolean containsCodePoint(char[] arr, int codePoint) {\n+    for (int i = 0; i < arr.length; i++) {\n+        if (Character.codePointAt(arr, i) == codePoint) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}