{
    "patch": "if (Double.isFinite(hNew)) {\n    final double  factor =\n            FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));\n    final double  scaledH = stepSize * factor;\n    final double  nextT   = stepStart + scaledH;\n    final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n    if (nextIsLast) {\n        hNew = t - stepStart;\n    } else {\n        hNew = scaledH;\n    }\n} else {\n    isLastStep = true;\n    hNew = 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 13ced27d7..28ad97209 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -247,6 +247,21 @@ public abstract class EmbeddedRungeKuttaIntegrator\n         }\n \n         stepSize = hNew;\n+if (Double.isFinite(hNew)) {\n+    final double  factor =\n+            FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));\n+    final double  scaledH = stepSize * factor;\n+    final double  nextT   = stepStart + scaledH;\n+    final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+    if (nextIsLast) {\n+        hNew = t - stepStart;\n+    } else {\n+        hNew = scaledH;\n+    }\n+} else {\n+    isLastStep = true;\n+    hNew = 0;\n+}\n \n         // next stages\n         for (int k = 1; k < stages; ++k) {",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}