{
    "patch": "public CholeskyDecompositionImpl(final RealMatrix matrix,\n                                 final double relativeSymmetryThreshold,\n                                 final double absolutePositivityThreshold)\n        throws NonSquareMatrixException,\n        NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n\n    if (!matrix.isSquare()) {\n        throw new NonSquareMatrixException(matrix.getRowDimension(),\n                matrix.getColumnDimension());\n    }\n\n    final int order = matrix.getRowDimension();\n    lTData = matrix.getData();\n    cachedL = null;\n    cachedLT = null;\n\n    // transform the matrix\n    for (int i = 0; i < order; ++i) {\n\n        final double[] ltI = lTData[i];\n        double sum = ltI[i];\n        // check diagonal element\n\n        for (int k = 0; k < i; k++) {\n            sum -= ltI[k] * ltI[k];\n        }\n\n        if (sum < 0) {\n            if (Math.abs(sum) < 1e-10) {\n                sum = 0; // numerical issue\n            } else {\n                throw new NotPositiveDefiniteMatrixException();\n            }\n        }\n\n        ltI[i] = Math.sqrt(sum);\n        final double inverse = 1.0 / ltI[i];\n\n        for (int q = order - 1; q > i; --q) {\n            ltI[q] *= inverse;\n            final double[] ltQ = lTData[q];\n            double lQI = ltQ[i];\n            for (int p = q; p < order; ++p) {\n                ltQ[p] -= ltI[q] * ltI[p];\n            }\n        }\n\n    }\n\n    // check the transformed matrix\n    for (int i = 0; i < order; ++i) {\n\n        final double[] lI = lTData[i];\n\n        // check off-diagonal elements (and reset them to 0)\n        for (int j = i + 1; j < order; ++j) {\n            final double[] lJ = lTData[j];\n            final double lIJ = lI[j];\n            final double lJI = lJ[i];\n            final double maxDelta =\n                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n            if (Math.abs(lIJ - lJI) > maxDelta) {\n                throw new NotSymmetricMatrixException();\n            }\n            lJ[i] = 0;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java b/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\nindex acd9222f6..7b828c1ea 100644\n--- a/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n+++ b/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java\n@@ -90,65 +90,74 @@ public class CholeskyDecompositionImpl implements CholeskyDecomposition {\n      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD\n      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD\n      */\n-    public CholeskyDecompositionImpl(final RealMatrix matrix,\n-                                     final double relativeSymmetryThreshold,\n-                                     final double absolutePositivityThreshold)\n+public CholeskyDecompositionImpl(final RealMatrix matrix,\n+                                 final double relativeSymmetryThreshold,\n+                                 final double absolutePositivityThreshold)\n         throws NonSquareMatrixException,\n-               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n+        NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {\n \n-        if (!matrix.isSquare()) {\n-            throw new NonSquareMatrixException(matrix.getRowDimension(),\n-                                               matrix.getColumnDimension());\n-        }\n+    if (!matrix.isSquare()) {\n+        throw new NonSquareMatrixException(matrix.getRowDimension(),\n+                matrix.getColumnDimension());\n+    }\n \n-        final int order = matrix.getRowDimension();\n-        lTData   = matrix.getData();\n-        cachedL  = null;\n-        cachedLT = null;\n+    final int order = matrix.getRowDimension();\n+    lTData = matrix.getData();\n+    cachedL = null;\n+    cachedLT = null;\n \n-        // check the matrix before transformation\n-        for (int i = 0; i < order; ++i) {\n+    // transform the matrix\n+    for (int i = 0; i < order; ++i) {\n \n-            final double[] lI = lTData[i];\n+        final double[] ltI = lTData[i];\n+        double sum = ltI[i];\n+        // check diagonal element\n+\n+        for (int k = 0; k < i; k++) {\n+            sum -= ltI[k] * ltI[k];\n+        }\n \n-            if (lTData[i][i] < absolutePositivityThreshold) {\n+        if (sum < 0) {\n+            if (Math.abs(sum) < 1e-10) {\n+                sum = 0; // numerical issue\n+            } else {\n                 throw new NotPositiveDefiniteMatrixException();\n             }\n-            // check off-diagonal elements (and reset them to 0)\n-            for (int j = i + 1; j < order; ++j) {\n-                final double[] lJ = lTData[j];\n-                final double lIJ = lI[j];\n-                final double lJI = lJ[i];\n-                final double maxDelta =\n-                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n-                if (Math.abs(lIJ - lJI) > maxDelta) {\n-                    throw new NotSymmetricMatrixException();\n-                }\n-                lJ[i] = 0;\n-           }\n         }\n \n-        // transform the matrix\n-        for (int i = 0; i < order; ++i) {\n+        ltI[i] = Math.sqrt(sum);\n+        final double inverse = 1.0 / ltI[i];\n \n-            final double[] ltI = lTData[i];\n+        for (int q = order - 1; q > i; --q) {\n+            ltI[q] *= inverse;\n+            final double[] ltQ = lTData[q];\n+            double lQI = ltQ[i];\n+            for (int p = q; p < order; ++p) {\n+                ltQ[p] -= ltI[q] * ltI[p];\n+            }\n+        }\n \n-            // check diagonal element\n+    }\n \n-            ltI[i] = Math.sqrt(ltI[i]);\n-            final double inverse = 1.0 / ltI[i];\n+    // check the transformed matrix\n+    for (int i = 0; i < order; ++i) {\n \n-            for (int q = order - 1; q > i; --q) {\n-                ltI[q] *= inverse;\n-                final double[] ltQ = lTData[q];\n-                for (int p = q; p < order; ++p) {\n-                    ltQ[p] -= ltI[q] * ltI[p];\n-                }\n-            }\n+        final double[] lI = lTData[i];\n \n+        // check off-diagonal elements (and reset them to 0)\n+        for (int j = i + 1; j < order; ++j) {\n+            final double[] lJ = lTData[j];\n+            final double lIJ = lI[j];\n+            final double lJI = lJ[i];\n+            final double maxDelta =\n+                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));\n+            if (Math.abs(lIJ - lJI) > maxDelta) {\n+                throw new NotSymmetricMatrixException();\n+            }\n+            lJ[i] = 0;\n         }\n-\n     }\n+}\n \n     /** {@inheritDoc} */\n     public RealMatrix getL() {",
    "result_reason": "org.apache.commons.math.linear.NotPositiveDefiniteMatrixException: not positive definite matrix",
    "test_result": "FAIL"
}