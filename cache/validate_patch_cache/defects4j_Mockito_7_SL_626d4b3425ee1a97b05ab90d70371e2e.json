{
    "patch": "Type[] bounds = typeVariable.getBounds();\nif (bounds.length == 0) {\n    TypeVariable<?>[] typeParameters = getActualTypeParametersFor(typeVariable);\n    if (typeParameters.length > 0) {\n        for (TypeVariable<?> typeParameter : typeParameters) {\n            registerTypeVariablesOn(typeParameter);\n        }\n    }\n} else {\n    for (Type bound : bounds) {\n        registerTypeVariablesOn(bound);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..3e82f838a 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,24 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type[] bounds = typeVariable.getBounds();\n+if (bounds.length == 0) {\n+    TypeVariable<?>[] typeParameters = getActualTypeParametersFor(typeVariable);\n+    if (typeParameters.length > 0) {\n+        for (TypeVariable<?> typeParameter : typeParameters) {\n+            registerTypeVariablesOn(typeParameter);\n+        }\n+    }\n+} else {\n+    for (Type bound : bounds) {\n+        registerTypeVariablesOn(bound);\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}