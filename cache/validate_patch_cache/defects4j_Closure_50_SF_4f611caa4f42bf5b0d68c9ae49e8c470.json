{
    "patch": "private Node tryFoldArrayJoin(Node n) {\n  Node callTarget = n.getFirstChild();\n  if (!NodeUtil.isGetProp(callTarget)) {\n    return n;\n  }\n  Node propNode = callTarget.getLastChild();\n  if (!\"join\".equals(propNode.getString())) {\n    return n;\n  }\n  Node arrNode = callTarget.getFirstChild();\n  if (!arrNode.isArrayLit()) {\n    return n;\n  }\n  Node firstElem = arrNode.getFirstChild();\n  if (firstElem == null) {\n    Node newNode = IR.string(\"\");\n    n.replaceWith(newNode);\n    reportCodeChange();\n    return newNode;\n  }\n  StringBuilder sb = new StringBuilder(NodeUtil.getArrayElementStringValue(firstElem));\n  for (Node elem = firstElem.getNext(); elem != null; elem = elem.getNext()) {\n    String value = NodeUtil.getArrayElementStringValue(elem);\n    if (value != null) {\n      sb.append(NodeUtil.getStringValue(arrNode.getNext())).append(value);\n    } else {\n      return n;\n    }\n  }\n  Node newNode = IR.string(sb.toString());\n  n.replaceWith(newNode);\n  reportCodeChange();\n  return newNode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..297ab453 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,116 +364,40 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n-    Node callTarget = n.getFirstChild();\n-\n-    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n-      return n;\n-    }\n-\n-    Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n-        return n;\n-      }\n-    }\n-\n-    Node arrayNode = callTarget.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n-\n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n+private Node tryFoldArrayJoin(Node n) {\n+  Node callTarget = n.getFirstChild();\n+  if (!NodeUtil.isGetProp(callTarget)) {\n+    return n;\n+  }\n+  Node propNode = callTarget.getLastChild();\n+  if (!\"join\".equals(propNode.getString())) {\n+    return n;\n+  }\n+  Node arrNode = callTarget.getFirstChild();\n+  if (!arrNode.isArrayLit()) {\n+    return n;\n+  }\n+  Node firstElem = arrNode.getFirstChild();\n+  if (firstElem == null) {\n+    Node newNode = IR.string(\"\");\n+    n.replaceWith(newNode);\n+    reportCodeChange();\n+    return newNode;\n+  }\n+  StringBuilder sb = new StringBuilder(NodeUtil.getArrayElementStringValue(firstElem));\n+  for (Node elem = firstElem.getNext(); elem != null; elem = elem.getNext()) {\n+    String value = NodeUtil.getArrayElementStringValue(elem);\n+    if (value != null) {\n+      sb.append(NodeUtil.getStringValue(arrNode.getNext())).append(value);\n+    } else {\n       return n;\n     }\n-\n-      // \",\" is the default, it doesn't need to be explicit\n-\n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n-    Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n-        } else {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n-      } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n-      }\n-      prev = elem;\n-      elem = elem.getNext();\n-    }\n-\n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n-    }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n-    }\n-\n-    return n;\n   }\n+  Node newNode = IR.string(sb.toString());\n+  n.replaceWith(newNode);\n+  reportCodeChange();\n+  return newNode;\n+}\n \n   /**\n    * Try to fold .substr() calls on strings\n@@ -642,4 +566,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}