{
    "patch": "final int delta = offsetLocal - offsetAdjusted;\nif (delta >= 0) {\n    final long nextTransition = nextTransition(instantAdjusted);\n    final long adjNext = nextTransition(instantLocal - offsetAdjusted);\n    if (adjNext != nextTransition) {\n        return offsetLocal;\n    } else {\n        return offsetAdjusted;\n    }\n} else {\n  long lastTransition = previousTransition(instantLocal - offsetAdjusted);\n  final long lastAdj = previousTransition(instantAdjusted) + offsetAdjusted;\n  final int lastOffset = getOffset(lastTransition);\n  final int lastOffsetAdj = getOffset(lastAdj);\n  \n  if (lastOffset != lastOffsetAdj) {\n      return offsetLocal;\n  }\n  \n  if (lastOffset < offsetAdjusted) {\n      lastTransition = previousTransition(lastAdj) + offsetAdjusted;\n      final int offsetBeforeLast = getOffset(lastTransition);\n      if (offsetBeforeLast >= offsetAdjusted) {\n        return offsetLocal;\n      } else {\n        return offsetBeforeLast;\n      }\n  } else {\n      final long nextTransition = nextTransition(lastAdj) + offsetAdjusted;\n      final int nextOffset = getOffset(nextTransition);\n      if (nextOffset < offsetLocal) {\n        return offsetLocal;\n      } else {\n        return offsetAdjusted;\n      }\n  }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..f9c6bc63 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,43 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+final int delta = offsetLocal - offsetAdjusted;\n+if (delta >= 0) {\n+    final long nextTransition = nextTransition(instantAdjusted);\n+    final long adjNext = nextTransition(instantLocal - offsetAdjusted);\n+    if (adjNext != nextTransition) {\n+        return offsetLocal;\n+    } else {\n+        return offsetAdjusted;\n+    }\n+} else {\n+  long lastTransition = previousTransition(instantLocal - offsetAdjusted);\n+  final long lastAdj = previousTransition(instantAdjusted) + offsetAdjusted;\n+  final int lastOffset = getOffset(lastTransition);\n+  final int lastOffsetAdj = getOffset(lastAdj);\n+  \n+  if (lastOffset != lastOffsetAdj) {\n+      return offsetLocal;\n+  }\n+  \n+  if (lastOffset < offsetAdjusted) {\n+      lastTransition = previousTransition(lastAdj) + offsetAdjusted;\n+      final int offsetBeforeLast = getOffset(lastTransition);\n+      if (offsetBeforeLast >= offsetAdjusted) {\n+        return offsetLocal;\n+      } else {\n+        return offsetBeforeLast;\n+      }\n+  } else {\n+      final long nextTransition = nextTransition(lastAdj) + offsetAdjusted;\n+      final int nextOffset = getOffset(nextTransition);\n+      if (nextOffset < offsetLocal) {\n+        return offsetLocal;\n+      } else {\n+        return offsetAdjusted;\n+      }\n+  }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}