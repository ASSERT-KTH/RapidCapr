{
    "patch": "private boolean isDirective(Node n) {\n    return n.isExprResult()\n            && n.getFirstChild().isString()\n            && ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n}\n\n@Override\nNode processBlock(Block blockNode) {\n    Node block = newNode(Token.BLOCK);\n    scope = blockNode;\n    for (Node kid : super.processBlock(blockNode)) {\n        block.addChildToBack(kid);\n    }\n    scope = scope.getParent();\n    return block;\n}\n\n@Override\nNode processBreakStatement(BreakStatement statementNode) {\n    Node node = newNode(Token.BREAK);\n    if (statementNode.getTarget() != null) {\n        node.addChildToBack(transform(statementNode.getTarget()));\n    }\n    return node;\n}\n\n@Override\nNode processCatchClause(CatchClause clauseNode) {\n    Node catchNode = newNode(Token.CATCH);\n    scope = clauseNode;\n    catchNode.addChildToBack(transform(clauseNode.getVarName()));\n    catchNode.addChildToBack(transformBlock(clauseNode.getBody()));\n    scope = scope.getParent();\n    return catchNode;\n}\n\n@Override\nNode processConditionalExpression(ConditionalExpression exprNode) {\n    Node ternary = newNode(Token.HOOK);\n    ternary.addChildToBack(transform(exprNode.getTestExpression()));\n    ternary.addChildToBack(transform(exprNode.getTrueExpression()));\n    ternary.addChildToBack(transform(exprNode.getFalseExpression()));\n    return ternary;\n}\n\n@Override\nNode processContinueStatement(ContinueStatement statementNode) {\n    Node node = newNode(Token.CONTINUE);\n    if (statementNode.getLabel() != null) {\n        node.addChildToBack(transform(statementNode.getLabel()));\n    }\n    return node;\n}\n\n@Override\nNode processDoLoop(DoLoop loopNode) {\n    Node loop = newNode(Token.DO);\n    scope = loopNode;\n    loop.addChildToBack(transformBlock(loopNode.getBody()));\n    loop.addChildToBack(transform(loopNode.getCondition()));\n    scope = scope.getParent();\n    return loop;\n}\n\n@Override\nNode processElementGet(ElementGet getNode) {\n    Node getelem = newNode(Token.GETELEM);\n    getelem.addChildToBack(transform(getNode.getTarget()));\n    getelem.addChildToBack(transform(getNode.getElement()));\n    return getelem;\n}\n\n@Override\nNode processEmptyExpression(EmptyExpression exprNode) {\n    Node node = newNode(Token.EMPTY);\n    return node;\n}\n\n@Override\nNode processExpressionStatement(ExpressionStatement statementNode) {\n    Node expr = transform(statementNode.getExpression());\n    if (isDirective(expr)) {\n        expr.getFirstChild().setType(Token.EXPR_VOID);\n    }\n    Node stmt = newNode(Token.EXPR_RESULT, expr);\n    return stmt;\n}\n\n@Override\nNode processForInLoop(ForInLoop loopNode) {\n    Node node = newNode(Token.FOR);\n    scope = loopNode;\n    AstNode loopVar = loopNode.getIterator();\n    Node lhs;\n    if (loopVar instanceof VariableDeclaration) {\n        lhs = new Node(Token.VAR);\n        for (AstNode var : loopVar) {\n            lhs.addChildToBack(transform(var));\n        }\n    } else {\n        lhs = transform(loopVar);\n    }\n    node.addChildToBack(lhs);\n    node.addChildToBack(transform(loopNode.getIteratedObject()));\n    node.addChildToBack(transformBlock(loopNode.getBody()));\n    scope = scope.getParent();\n    return node;\n}\n\n@Override\nNode processForLoop(ForLoop loopNode) {\n    Node loop = newNode(Token.FOR);\n    scope = loopNode;\n    loop.addChildToBack(transform(loopNode.getInitializer()));\n    loop.addChildToBack(transform(loopNode.getCondition()));\n    loop.addChildToBack(transform(loopNode.getIncrement()));\n    loop.addChildToBack(transformBlock(loopNode.getBody()));\n    scope = scope.getParent();\n    return loop;\n}\n\n@Override\nNode processFunctionCall(FunctionCall callNode) {\n    Node call = newNode(Token.CALL);\n    call.addChildToBack(transform(callNode.getTarget()));\n    for (AstNode arg : callNode.getArguments()) {\n        call.addChildToBack(transform(arg));\n    }\n    return call;\n}\n\nprivate void addNameProperties(FunctionNode functionNode, Node fnNode) {\n    Name name = functionNode.getFunctionName();\n    if (name != null) {\n        fnNode.addChildToFront(new Node(Token.NAME, name.getIdentifier()));\n    } else {\n        fnNode.addChildToFront(new Node(Token.NAME, \"\"));\n    }\n    fnNode.putProp(Node.FUNCTION_EXPRESSION, Boolean.valueOf(name == null));\n    fnNode.setIsMethod(functionNode.isMemberFunction());\n    if (functionNode.getLp() != -1) {\n        fnNode.setLp(functionNode.getLp());\n        fnNode.setRp(functionNode.getRp());\n    }\n}\n\n@Override\nNode processFunctionNode(FunctionNode functionNode) {\n    Node fnNode = null;\n    scope = functionNode;\n    int functionType = functionNode.getFunctionType();\n\n    if (functionType == FunctionNode.FUNCTION_EXPRESSION ||\n            functionType == FunctionNode.FUNCTION_EXPRESSION_STATEMENT) {\n        fnNode = newNode(Token.FUNCTION);\n        addNameProperties(functionNode, fnNode);\n        fnNode.addChildToBack(transform(functionNode.getParams()));\n        transplantTypeAnnotations(functionNode, fnNode);\n        fnNode.addChildToBack(transform(functionNode.getBody()));\n        if (functionType == FunctionNode.FUNCTION_EXPRESSION_STATEMENT) {\n            Node exprStmt = newNode(Token.EXPR_RESULT, fnNode);\n            patchProp(fnNode, Node.NO_IN, Boolean.TRUE);\n            fnNode = exprStmt;\n        } else {\n            patchProp(fnNode, Node.IS_EXPRESSION, Boolean.TRUE);\n            if (functionNode.getParenthesized()) {\n                fnNode.putProp(Node.PARENTHESIZED_CALL, Boolean.TRUE);\n            }\n        }\n\n    } else if (functionType == FunctionNode.FUNCTION_STATEMENT) {\n        fnNode = newNode(Token.FUNCTION);\n        addNameProperties(functionNode, fnNode);\n        fnNode.addChildToBack(transform(functionNode.getParams()));\n        transplantTypeAnnotations(functionNode, fnNode);\n        fnNode.addChildToBack(transform(functionNode.getBody()));\n        fnNode.putProp(Node.STATEMENT_TYPE, Integer.valueOf(Token.FUNCTION));\n    } else if (functionType == FunctionNode.ARROW_FUNCTION) {\n        fnNode = newNode(Token.FUNCTION);\n        addNameProperties(functionNode, fnNode);\n        fnNode.addChildToBack(transform(functionNode.getParams()));\n        transplantTypeAnnotations(functionNode, fnNode);\n        Node body = transform(functionNode.getBody());\n        Node expr;\n        if (body.hasMoreThanOneChild()\n                || isDirective(body.getFirstChild())\n                || body.getFirs",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..74440c21 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -385,181 +385,193 @@ public class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+private boolean isDirective(Node n) {\n+    return n.isExprResult()\n+            && n.getFirstChild().isString()\n+            && ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+}\n \n-      int nType = n.getType();\n-      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n-          n.getFirstChild().getType() == Token.STRING &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+@Override\n+Node processBlock(Block blockNode) {\n+    Node block = newNode(Token.BLOCK);\n+    scope = blockNode;\n+    for (Node kid : super.processBlock(blockNode)) {\n+        block.addChildToBack(kid);\n     }\n+    scope = scope.getParent();\n+    return block;\n+}\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n+@Override\n+Node processBreakStatement(BreakStatement statementNode) {\n+    Node node = newNode(Token.BREAK);\n+    if (statementNode.getTarget() != null) {\n+        node.addChildToBack(transform(statementNode.getTarget()));\n     }\n+    return node;\n+}\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n+@Override\n+Node processCatchClause(CatchClause clauseNode) {\n+    Node catchNode = newNode(Token.CATCH);\n+    scope = clauseNode;\n+    catchNode.addChildToBack(transform(clauseNode.getVarName()));\n+    catchNode.addChildToBack(transformBlock(clauseNode.getBody()));\n+    scope = scope.getParent();\n+    return catchNode;\n+}\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n+@Override\n+Node processConditionalExpression(ConditionalExpression exprNode) {\n+    Node ternary = newNode(Token.HOOK);\n+    ternary.addChildToBack(transform(exprNode.getTestExpression()));\n+    ternary.addChildToBack(transform(exprNode.getTrueExpression()));\n+    ternary.addChildToBack(transform(exprNode.getFalseExpression()));\n+    return ternary;\n+}\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+@Override\n+Node processContinueStatement(ContinueStatement statementNode) {\n+    Node node = newNode(Token.CONTINUE);\n+    if (statementNode.getLabel() != null) {\n+        node.addChildToBack(transform(statementNode.getLabel()));\n     }\n+    return node;\n+}\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n+@Override\n+Node processDoLoop(DoLoop loopNode) {\n+    Node loop = newNode(Token.DO);\n+    scope = loopNode;\n+    loop.addChildToBack(transformBlock(loopNode.getBody()));\n+    loop.addChildToBack(transform(loopNode.getCondition()));\n+    scope = scope.getParent();\n+    return loop;\n+}\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n+@Override\n+Node processElementGet(ElementGet getNode) {\n+    Node getelem = newNode(Token.GETELEM);\n+    getelem.addChildToBack(transform(getNode.getTarget()));\n+    getelem.addChildToBack(transform(getNode.getElement()));\n+    return getelem;\n+}\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n+@Override\n+Node processEmptyExpression(EmptyExpression exprNode) {\n+    Node node = newNode(Token.EMPTY);\n+    return node;\n+}\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+@Override\n+Node processExpressionStatement(ExpressionStatement statementNode) {\n+    Node expr = transform(statementNode.getExpression());\n+    if (isDirective(expr)) {\n+        expr.getFirstChild().setType(Token.EXPR_VOID);\n     }\n+    Node stmt = newNode(Token.EXPR_RESULT, expr);\n+    return stmt;\n+}\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+@Override\n+Node processForInLoop(ForInLoop loopNode) {\n+    Node node = newNode(Token.FOR);\n+    scope = loopNode;\n+    AstNode loopVar = loopNode.getIterator();\n+    Node lhs;\n+    if (loopVar instanceof VariableDeclaration) {\n+        lhs = new Node(Token.VAR);\n+        for (AstNode var : loopVar) {\n+            lhs.addChildToBack(transform(var));\n+        }\n+    } else {\n+        lhs = transform(loopVar);\n     }\n+    node.addChildToBack(lhs);\n+    node.addChildToBack(transform(loopNode.getIteratedObject()));\n+    node.addChildToBack(transformBlock(loopNode.getBody()));\n+    scope = scope.getParent();\n+    return node;\n+}\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n+@Override\n+Node processForLoop(ForLoop loopNode) {\n+    Node loop = newNode(Token.FOR);\n+    scope = loopNode;\n+    loop.addChildToBack(transform(loopNode.getInitializer()));\n+    loop.addChildToBack(transform(loopNode.getCondition()));\n+    loop.addChildToBack(transform(loopNode.getIncrement()));\n+    loop.addChildToBack(transformBlock(loopNode.getBody()));\n+    scope = scope.getParent();\n+    return loop;\n+}\n \n-    @Override\n-    Node processForLoop(ForLoop loopNode) {\n-      Node node = newNode(\n-          Token.FOR,\n-          transform(loopNode.getInitializer()),\n-          transform(loopNode.getCondition()),\n-          transform(loopNode.getIncrement()));\n-      node.addChildToBack(transformBlock(loopNode.getBody()));\n-      return node;\n+@Override\n+Node processFunctionCall(FunctionCall callNode) {\n+    Node call = newNode(Token.CALL);\n+    call.addChildToBack(transform(callNode.getTarget()));\n+    for (AstNode arg : callNode.getArguments()) {\n+        call.addChildToBack(transform(arg));\n     }\n+    return call;\n+}\n \n-    @Override\n-    Node processFunctionCall(FunctionCall callNode) {\n-      Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n-      for (AstNode child : callNode.getArguments()) {\n-        node.addChildToBack(transform(child));\n-      }\n-\n-      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n-      node.setLineno(callNode.getLineno());\n-      node.setCharno(position2charno(leftParamPos));\n-      return node;\n+private void addNameProperties(FunctionNode functionNode, Node fnNode) {\n+    Name name = functionNode.getFunctionName();\n+    if (name != null) {\n+        fnNode.addChildToFront(new Node(Token.NAME, name.getIdentifier()));\n+    } else {\n+        fnNode.addChildToFront(new Node(Token.NAME, \"\"));\n     }\n+    fnNode.putProp(Node.FUNCTION_EXPRESSION, Boolean.valueOf(name == null));\n+    fnNode.setIsMethod(functionNode.isMemberFunction());\n+    if (functionNode.getLp() != -1) {\n+        fnNode.setLp(functionNode.getLp());\n+        fnNode.setRp(functionNode.getRp());\n+    }\n+}\n \n-    @Override\n-    Node processFunctionNode(FunctionNode functionNode) {\n-      Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n-      if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n-        isUnnamedFunction = true;\n-      }\n-      Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n-      if (isUnnamedFunction) {\n-        // Old Rhino tagged the empty name node with the line number of the\n-        // declaration.\n-        newName.setLineno(functionNode.getLineno());\n-        // TODO(bowdidge) Mark line number of paren correctly.\n-        // Same problem as below - the left paren might not be on the\n-        // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n-        newName.setCharno(position2charno(lpColumn));\n-      }\n-\n-      node.addChildToBack(newName);\n-      Node lp = newNode(Token.LP);\n-      // The left paren's complicated because it's not represented by an\n-      // AstNode, so there's nothing that has the actual line number that it\n-      // appeared on.  We know the paren has to appear on the same line as the\n-      // function name (or else a semicolon will be inserted.)  If there's no\n-      // function name, assume the paren was on the same line as the function.\n-      // TODO(bowdidge): Mark line number of paren correctly.\n-      Name fnName = functionNode.getFunctionName();\n-      if (fnName != null) {\n-        lp.setLineno(fnName.getLineno());\n-      } else {\n-        lp.setLineno(functionNode.getLineno());\n-      }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n-\n-      lp.setCharno(position2charno(lparenCharno));\n-      for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n-      }\n-      node.addChildToBack(lp);\n+@Override\n+Node processFunctionNode(FunctionNode functionNode) {\n+    Node fnNode = null;\n+    scope = functionNode;\n+    int functionType = functionNode.getFunctionType();\n+\n+    if (functionType == FunctionNode.FUNCTION_EXPRESSION ||\n+            functionType == FunctionNode.FUNCTION_EXPRESSION_STATEMENT) {\n+        fnNode = newNode(Token.FUNCTION);\n+        addNameProperties(functionNode, fnNode);\n+        fnNode.addChildToBack(transform(functionNode.getParams()));\n+        transplantTypeAnnotations(functionNode, fnNode);\n+        fnNode.addChildToBack(transform(functionNode.getBody()));\n+        if (functionType == FunctionNode.FUNCTION_EXPRESSION_STATEMENT) {\n+            Node exprStmt = newNode(Token.EXPR_RESULT, fnNode);\n+            patchProp(fnNode, Node.NO_IN, Boolean.TRUE);\n+            fnNode = exprStmt;\n+        } else {\n+            patchProp(fnNode, Node.IS_EXPRESSION, Boolean.TRUE);\n+            if (functionNode.getParenthesized()) {\n+                fnNode.putProp(Node.PARENTHESIZED_CALL, Boolean.TRUE);\n+            }\n+        }\n \n-      Node bodyNode = transform(functionNode.getBody());\n-      parseDirectives(bodyNode);\n-      node.addChildToBack(bodyNode);\n-     return node;\n-    }\n+    } else if (functionType == FunctionNode.FUNCTION_STATEMENT) {\n+        fnNode = newNode(Token.FUNCTION);\n+        addNameProperties(functionNode, fnNode);\n+        fnNode.addChildToBack(transform(functionNode.getParams()));\n+        transplantTypeAnnotations(functionNode, fnNode);\n+        fnNode.addChildToBack(transform(functionNode.getBody()));\n+        fnNode.putProp(Node.STATEMENT_TYPE, Integer.valueOf(Token.FUNCTION));\n+    } else if (functionType == FunctionNode.ARROW_FUNCTION) {\n+        fnNode = newNode(Token.FUNCTION);\n+        addNameProperties(functionNode, fnNode);\n+        fnNode.addChildToBack(transform(functionNode.getParams()));\n+        transplantTypeAnnotations(functionNode, fnNode);\n+        Node body = transform(functionNode.getBody());\n+        Node expr;\n+        if (body.hasMoreThanOneChild()\n+                || isDirective(body.getFirstChild())\n+                || body.getFirs\n \n     @Override\n     Node processIfStatement(IfStatement statementNode) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}