{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (x < 0.0 || a <= 0.0) {\n        throw new IllegalArgumentException(\"Invalid arguments to Gamma.regularizedGammaP\");\n    }\n    \n    if (x < a + 1.0) {\n        return 1.0 - incompleteGammaP(a, x);\n    } else {\n        ContinuedFraction cf = new ContinuedFraction() {\n            @Override\n            protected double getA(int n, double x) {\n                if (n == 0) {\n                    return 1.0;\n                } else if (n == 1) {\n                    return 1.0 - a;\n                } else {\n                    return (2 * n - 1 - a) * (1.0 - x) + n * (a - n) * x;\n                }\n            }\n            \n            @Override\n            protected double getB(int n, double x) {\n                return n;\n            }\n        };\n        \n        final double epsilon = 10e-15;\n        final int maxIterations = 1000;\n        double cfValue = cf.evaluate(x, epsilon, maxIterations);\n        double gammaValue = Gamma.gamma(a);\n        return cfValue * Math.exp(-x + a * Math.log(x) - gammaValue) / a;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..9e67798c2 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,39 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (x < 0.0 || a <= 0.0) {\n+        throw new IllegalArgumentException(\"Invalid arguments to Gamma.regularizedGammaP\");\n+    }\n+    \n+    if (x < a + 1.0) {\n+        return 1.0 - incompleteGammaP(a, x);\n+    } else {\n+        ContinuedFraction cf = new ContinuedFraction() {\n+            @Override\n+            protected double getA(int n, double x) {\n+                if (n == 0) {\n+                    return 1.0;\n+                } else if (n == 1) {\n+                    return 1.0 - a;\n+                } else {\n+                    return (2 * n - 1 - a) * (1.0 - x) + n * (a - n) * x;\n+                }\n+            }\n+            \n+            @Override\n+            protected double getB(int n, double x) {\n+                return n;\n+            }\n+        };\n+        \n+        final double epsilon = 10e-15;\n+        final int maxIterations = 1000;\n+        double cfValue = cf.evaluate(x, epsilon, maxIterations);\n+        double gammaValue = Gamma.gamma(a);\n+        return cfValue * Math.exp(-x + a * Math.log(x) - gammaValue) / a;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}