{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    if (Double.isNaN(x)) {\n        throw new MathException(\"NaN argument\");\n    }\n    if (Double.isInfinite(x)) {\n        return x < 0.0 ? 0.0 : 1.0;\n    }\n\n    double dev = x - mean;\n    double res;\n    if (FastMath.abs(dev) > FastMath.sqrt(standardDeviation * DEFAULT_EPSILON)) {\n        double two_sigma = standardDeviation * DEFAULT_EPSILON;\n        double np = FastMath.floor((dev / two_sigma) + 0.5);\n        double sp = two_sigma * np;\n\n        res = 0.5 * Erf.erfc(-dev / (standardDeviation * FastMath.sqrt(2.0)))\n            + np * Erf.erfc((sp - dev) / (standardDeviation * FastMath.sqrt(2.0)))\n            + (np + 1.0) * Erf.erfc((sp + two_sigma - dev) / (standardDeviation * FastMath.sqrt(2.0)));\n\n    } else {\n        res = 0.5 * Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))\n            + (2.0 * DEFAULT_EPSILON));\n    }\n\n    if (res < 0.0 || res > 1.0) {\n        throw new MathException(\"Numerical issue, res = \" + res);\n    }\n\n    return res;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..4bcfcd190 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -105,10 +105,36 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * x is more than 20 standard deviations from the mean, in which case the\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+public double cumulativeProbability(double x) throws MathException {\n+    if (Double.isNaN(x)) {\n+        throw new MathException(\"NaN argument\");\n     }\n+    if (Double.isInfinite(x)) {\n+        return x < 0.0 ? 0.0 : 1.0;\n+    }\n+\n+    double dev = x - mean;\n+    double res;\n+    if (FastMath.abs(dev) > FastMath.sqrt(standardDeviation * DEFAULT_EPSILON)) {\n+        double two_sigma = standardDeviation * DEFAULT_EPSILON;\n+        double np = FastMath.floor((dev / two_sigma) + 0.5);\n+        double sp = two_sigma * np;\n+\n+        res = 0.5 * Erf.erfc(-dev / (standardDeviation * FastMath.sqrt(2.0)))\n+            + np * Erf.erfc((sp - dev) / (standardDeviation * FastMath.sqrt(2.0)))\n+            + (np + 1.0) * Erf.erfc((sp + two_sigma - dev) / (standardDeviation * FastMath.sqrt(2.0)));\n+\n+    } else {\n+        res = 0.5 * Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))\n+            + (2.0 * DEFAULT_EPSILON));\n+    }\n+\n+    if (res < 0.0 || res > 1.0) {\n+        throw new MathException(\"Numerical issue, res = \" + res);\n+    }\n+\n+    return res;\n+}\n     \n     /**\n      * For this distribution, X, this method returns the critical point x, such",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}