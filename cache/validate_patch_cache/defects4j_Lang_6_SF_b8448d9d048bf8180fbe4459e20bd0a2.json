{
    "patch": "    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n\n        if (input == null) {\n            return;\n        }\n\n        int pos = 0;\n        int len = input.length();\n        while (pos < len) {\n            int initialPos = pos;\n            int consumed = translate(input, pos, out);\n\n            // check if we have a non-BMP character\n            if (consumed == 0 && Character.isHighSurrogate(input.charAt(pos))) {\n                consumed = translate(input, pos + 1, out);\n                if (consumed == 0) {  // the surrogate pair is invalid\n                    out.write(\"\\\\u\" + String.format(\"%04x\", (int)input.charAt(pos)));\n                    consumed = 1;\n                } else {\n                    pos += Character.charCount(Character.codePointAt(input, pos));\n                }\n            } else {\n                pos += Character.charCount(Character.codePointAt(input, pos));\n            }\n\n            if (!Character.isHighSurrogate(input.charAt(initialPos)) && consumed == 0) {\n                char ch = input.charAt(initialPos);\n                if (ch >= 0x10000 && ch <= 0x10FFFF) {\n                    out.write(\"\\\\u\" + String.format(\"%04x\", (int)ch));\n                } else {\n                    out.write(ch);\n                }\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..07941531 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -76,24 +76,38 @@ public abstract class CharSequenceTranslator {\n         if (out == null) {\n             throw new IllegalArgumentException(\"The Writer must not be null\");\n         }\n+\n         if (input == null) {\n             return;\n         }\n+\n         int pos = 0;\n         int len = input.length();\n         while (pos < len) {\n+            int initialPos = pos;\n             int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n+\n+            // check if we have a non-BMP character\n+            if (consumed == 0 && Character.isHighSurrogate(input.charAt(pos))) {\n+                consumed = translate(input, pos + 1, out);\n+                if (consumed == 0) {  // the surrogate pair is invalid\n+                    out.write(\"\\\\u\" + String.format(\"%04x\", (int)input.charAt(pos)));\n+                    consumed = 1;\n+                } else {\n+                    pos += Character.charCount(Character.codePointAt(input, pos));\n+                }\n+            } else {\n                 pos += Character.charCount(Character.codePointAt(input, pos));\n             }\n+\n+            if (!Character.isHighSurrogate(input.charAt(initialPos)) && consumed == 0) {\n+                char ch = input.charAt(initialPos);\n+                if (ch >= 0x10000 && ch <= 0x10FFFF) {\n+                    out.write(\"\\\\u\" + String.format(\"%04x\", (int)ch));\n+                } else {\n+                    out.write(ch);\n+                }\n+            }\n         }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: unescape(String) failed: expected '\\ntest\\b' actual '\\nntest\\bb' expected:<",
    "test_result": "FAIL"
}