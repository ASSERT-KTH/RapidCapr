{
    "patch": "                // compare the absolute values of the gaps on either side of the\n                // current instant. This ensures that we compare the gap following\n                // instantAdjusted with the gap following instantAdjusted - 1 hour,\n                // as it is possible that gap following instantAdjusted - 1 hour is\n                // smaller than the one following instantAdjusted and we want to avoid\n                // passing an instant between the two gaps.\n                long gapOne = Math.abs(nextLocal - instantAdjusted);\n                long gapTwo = Math.abs(nextAdjusted - (instantLocal - offsetAdjusted));\n                if (gapOne > gapTwo) {",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..0800ad1f 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,15 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // compare the absolute values of the gaps on either side of the\n+                // current instant. This ensures that we compare the gap following\n+                // instantAdjusted with the gap following instantAdjusted - 1 hour,\n+                // as it is possible that gap following instantAdjusted - 1 hour is\n+                // smaller than the one following instantAdjusted and we want to avoid\n+                // passing an instant between the two gaps.\n+                long gapOne = Math.abs(nextLocal - instantAdjusted);\n+                long gapTwo = Math.abs(nextAdjusted - (instantLocal - offsetAdjusted));\n+                if (gapOne > gapTwo) {\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}