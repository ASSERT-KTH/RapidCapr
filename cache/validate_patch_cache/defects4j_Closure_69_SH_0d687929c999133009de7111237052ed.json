{
    "patch": "      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      ObjectType thisType = functionType.getTypeOfThis();\n      if (thisType != null && !NodeUtil.isGet(this.getParent())) {\n        // Allow calls like mylib.func.call(this, arg1, arg2)\n        if (!(NodeUtil.isCall(this.getParent()) &&\n              NodeUtil.isGet(this.getParent().getFirstChild()))) {\n          report(t, n, CALL_FUNCTION_WITH_TOP_LEVEL_THIS, childType.toString());\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..89aa1261 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      // Functions with explicit 'this' types must be called in a GETPROP\n+      // or GETELEM.\n+      ObjectType thisType = functionType.getTypeOfThis();\n+      if (thisType != null && !NodeUtil.isGet(this.getParent())) {\n+        // Allow calls like mylib.func.call(this, arg1, arg2)\n+        if (!(NodeUtil.isCall(this.getParent()) &&\n+              NodeUtil.isGet(this.getParent().getFirstChild()))) {\n+          report(t, n, CALL_FUNCTION_WITH_TOP_LEVEL_THIS, childType.toString());\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}