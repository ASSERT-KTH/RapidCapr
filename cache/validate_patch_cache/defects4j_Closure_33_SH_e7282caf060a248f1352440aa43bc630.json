{
    "patch": "if (!(constraintObj.isNominalConstructor() && !constraintObj.hasReferenceName())) {\n    return;\n}\n\n// Handle the case where the constraint object is a record type.\n//\n// param constraintObj {{prop: (number|undefined)}}\n// function f(constraintObj) {}\n// f({});\n//\n// We want to modify the object literal to match the constraint by\n// taking each property on the record and trying to match\n// properties on this object.\nif (constraintObj.isRecordType()) {\n    for (String propName : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(propName);\n        if (!isPropertyTypeDeclared(propName)) {\n            JSType typeToInfer = propType;\n            if (!hasProperty(propName)) {\n                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                    .getLeastSupertype(propType);\n            }\n            defineInferredProperty(propName, typeToInfer, null);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..290d7795 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,32 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+if (!(constraintObj.isNominalConstructor() && !constraintObj.hasReferenceName())) {\n+    return;\n+}\n+\n+// Handle the case where the constraint object is a record type.\n+//\n+// param constraintObj {{prop: (number|undefined)}}\n+// function f(constraintObj) {}\n+// f({});\n+//\n+// We want to modify the object literal to match the constraint by\n+// taking each property on the record and trying to match\n+// properties on this object.\n+if (constraintObj.isRecordType()) {\n+    for (String propName : constraintObj.getOwnPropertyNames()) {\n+        JSType propType = constraintObj.getPropertyType(propName);\n+        if (!isPropertyTypeDeclared(propName)) {\n+            JSType typeToInfer = propType;\n+            if (!hasProperty(propName)) {\n+                typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+                    .getLeastSupertype(propType);\n+            }\n+            defineInferredProperty(propName, typeToInfer, null);\n+        }\n+    }\n+}\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...arameter",
    "test_result": "FAIL"
}