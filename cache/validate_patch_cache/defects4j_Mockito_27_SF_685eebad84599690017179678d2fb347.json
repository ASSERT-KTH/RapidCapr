{
    "patch": "public <T> T resetMock(T mock, InvocationListener invocationListener) {\n    if (!(mock instanceof Factory)) {\n        throw new IllegalArgumentException(\"Object is not a mock.\");\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    T result = (T) ((Factory) mock).getCallbacks()[0];\n\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) Mockito.withSettings().defaultAnswer(Mockito.RETURNS_DEFAULTS));\n\n    T newMock;\n    try {\n        newMock = (T) objenesis.newInstance(mock.getClass());\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n    ((Factory) newMock).setCallbacks(new Callback[]{newFilter});\n\n    // Set the new mock invocation handler\n    ((MockitoMock) newMock).setInvocationHandler(new MockReportGenerator(invocationListener));\n\n    return newMock;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..b9ae51a5d 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,32 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> T resetMock(T mock, InvocationListener invocationListener) {\n+    if (!(mock instanceof Factory)) {\n+        throw new IllegalArgumentException(\"Object is not a mock.\");\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    T result = (T) ((Factory) mock).getCallbacks()[0];\n+\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) Mockito.withSettings().defaultAnswer(Mockito.RETURNS_DEFAULTS));\n+\n+    T newMock;\n+    try {\n+        newMock = (T) objenesis.newInstance(mock.getClass());\n+    } catch (Exception e) {\n+        throw new RuntimeException(e);\n+    }\n+    ((Factory) newMock).setCallbacks(new Callback[]{newFilter});\n+\n+    // Set the new mock invocation handler\n+    ((MockitoMock) newMock).setInvocationHandler(new MockReportGenerator(invocationListener));\n+\n+    return newMock;\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}