{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var var : scope.getVars()) {\n    Node n = var.getNameNode();\n    if (n == null || !n.isName()) {\n      continue;\n    }\n    if (var.getParentNode().isVar()) {\n      Node owner = var.getParentNode().getParent();\n      if (owner.isScript()) {\n        continue;\n      }\n      if (owner.isFunction()) {\n        Node value = var.getInitialValue();\n        if (value != null && value.isQualifiedName()) {\n          String name = var.getName();\n          aliases.put(name, var);\n          transformation.addAlias(name, value.getQualifiedName());\n        }\n      } else {\n        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, var.getName());\n      }\n    } else if (var.isLocal()) {\n      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, var.getName());\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..d671a5f2 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,33 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var var : scope.getVars()) {\n+    Node n = var.getNameNode();\n+    if (n == null || !n.isName()) {\n+      continue;\n+    }\n+    if (var.getParentNode().isVar()) {\n+      Node owner = var.getParentNode().getParent();\n+      if (owner.isScript()) {\n+        continue;\n+      }\n+      if (owner.isFunction()) {\n+        Node value = var.getInitialValue();\n+        if (value != null && value.isQualifiedName()) {\n+          String name = var.getName();\n+          aliases.put(name, var);\n+          transformation.addAlias(name, value.getQualifiedName());\n         }\n+      } else {\n+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, var.getName());\n       }\n+    } else if (var.isLocal()) {\n+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, var.getName());\n     }\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: for-each not applicable to expression type",
    "test_result": "ERROR"
}