{
    "patch": "  static boolean functionCallHasSideEffects(Node callNode, @Nullable AbstractCompiler compiler) {\n    if (callNode == null || callNode.getType() != Token.CALL) {\n      return false;\n    }\n    if (callNode.isNoSideEffectsCall()) {\n      return false;\n    }\n    Node nameNode = callNode.getFirstChild();\n    if (nameNode == null) {\n      return false;\n    }\n    if (nameNode.getType() == Token.NAME) {\n      String name = nameNode.getString();\n      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n        return false;\n      }\n    } else if (nameNode.getType() == Token.GETPROP) {\n      String prop = nameNode.getLastChild().getString();\n      if (callNode.hasOneChild()\n              && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(prop)) {\n        return false;\n      }\n      if (callNode.isOnlyModifiesArgumentsLists()) {\n        return false;\n      }\n      if (callNode.isOnlyModifiesThisCall() && evaluatesToLocalValue(nameNode.getFirstChild())) {\n        return false;\n      }\n      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n        if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(prop)) {\n          return false;\n        } else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(prop)) {\n          Node param = nameNode.getNext();\n          if (param != null && (param.getType() == Token.STRING\n                  || param.getType() == Token.REGEXP))\n            return false;\n        }\n      }\n    }\n    // Functions in the \"Math\" namespace have no side effects.\n    if (nameNode.getFirstChild().getType() == Token.NAME && nameNode.getFirstChild().getString().equals(\"Math\")) {\n      return false;\n    }\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 1844b18a..a6689cde 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -923,55 +923,49 @@ public final class NodeUtil {\n    * @param compiler A compiler object to provide program state changing\n    *     context information. Can be null.\n    */\n-  static boolean functionCallHasSideEffects(\n-      Node callNode, @Nullable AbstractCompiler compiler) {\n-    if (callNode.getType() != Token.CALL) {\n-      throw new IllegalStateException(\n-          \"Expected CALL node, got \" + Token.name(callNode.getType()));\n+  static boolean functionCallHasSideEffects(Node callNode, @Nullable AbstractCompiler compiler) {\n+    if (callNode == null || callNode.getType() != Token.CALL) {\n+      return false;\n     }\n-\n     if (callNode.isNoSideEffectsCall()) {\n       return false;\n     }\n-\n     Node nameNode = callNode.getFirstChild();\n-\n-    // Built-in functions with no side effects.\n+    if (nameNode == null) {\n+      return false;\n+    }\n     if (nameNode.getType() == Token.NAME) {\n       String name = nameNode.getString();\n       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n         return false;\n       }\n     } else if (nameNode.getType() == Token.GETPROP) {\n+      String prop = nameNode.getLastChild().getString();\n       if (callNode.hasOneChild()\n-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n-                nameNode.getLastChild().getString())) {\n+              && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(prop)) {\n         return false;\n       }\n-\n-      if (callNode.isOnlyModifiesThisCall()\n-          && evaluatesToLocalValue(nameNode.getFirstChild())) {\n+      if (callNode.isOnlyModifiesArgumentsLists()) {\n+        return false;\n+      }\n+      if (callNode.isOnlyModifiesThisCall() && evaluatesToLocalValue(nameNode.getFirstChild())) {\n         return false;\n       }\n-\n-      // Functions in the \"Math\" namespace have no side effects.\n-\n       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n-        if (nameNode.getFirstChild().getType() == Token.REGEXP\n-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n+        if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(prop)) {\n           return false;\n-        } else if (nameNode.getFirstChild().getType() == Token.STRING\n-            && STRING_REGEXP_METHODS.contains(\n-                nameNode.getLastChild().getString())) {\n+        } else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(prop)) {\n           Node param = nameNode.getNext();\n-          if (param != null &&\n-              (param.getType() == Token.STRING\n+          if (param != null && (param.getType() == Token.STRING\n                   || param.getType() == Token.REGEXP))\n-          return false;\n+            return false;\n         }\n       }\n     }\n-\n+    // Functions in the \"Math\" namespace have no side effects.\n+    if (nameNode.getFirstChild().getType() == Token.NAME && nameNode.getFirstChild().getString().equals(\"Math\")) {\n+      return false;\n+    }\n     return true;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}