{
    "patch": "private void inferPropertiesFromGenericObject(\n      ObjectType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType =\n          ObjectType.cast(type.restrictByNotNullOrUndefined().removeType(Nullability.NULL));\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            String inferredDescription = null;\n            if (propType.hasInferredTypeMarker()) {\n              inferredDescription = \"inferred type: \" + propType.getResolvedInferredType();\n            }\n            JSType inferred = typeToInfer != null ? typeToInfer : getNativeType(UNKNOWN_TYPE);\n            objType.defineInferredProperty(prop, inferred, inferredDescription);\n          }\n        }\n      }\n    }\n  }\n  \n  /**\n   * If we access a property of a symbol, then that symbol is not\n   * null or undefined.\n   */\n  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.isQualifiedName()) {\n      JSType type = getJSType(n);\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (type != narrowed) {\n        scope = narrowScope(scope, n, narrowed);\n      }\n      ObjectType objectType = ObjectType.cast(narrowed);\n      if (objectType != null) {\n        for (String propName : objectType.getOwnPropertyNames()) {\n          JSType propType = objectType.getPropertyType(propName);\n          if (propType != null\n              && (!(propType.isUnknownType() || propType.isAllType()))) {\n            // If the property exists on the object type but not in the scope\n            // then we should add it to the scope.\n            Var var = scope.getVar(propName);\n            if (var == null || (var.isTypeInferred() && !propType.isSubtypeOf(var.getType()))) {\n              scope = scope.inferSlotType(propName, propType, null).withPropertyPreconditions(\n                  ImmutableMap.of(propName, Preconditions.exactlyPropDef(propType)));\n            }\n          }\n        }\n      }\n    }\n    return scope;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..d94dd7da 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,7 +1111,8 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n+private void inferPropertiesFromGenericObject(\n+      ObjectType type, JSType constraint) {\n     if (type == null || constraint == null) {\n       return;\n     }\n@@ -1119,7 +1120,8 @@ class TypeInference\n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n     if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+      ObjectType objType =\n+          ObjectType.cast(type.restrictByNotNullOrUndefined().removeType(Nullability.NULL));\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n@@ -1129,13 +1131,18 @@ class TypeInference\n               typeToInfer =\n                   getNativeType(VOID_TYPE).getLeastSupertype(propType);\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+            String inferredDescription = null;\n+            if (propType.hasInferredTypeMarker()) {\n+              inferredDescription = \"inferred type: \" + propType.getResolvedInferredType();\n+            }\n+            JSType inferred = typeToInfer != null ? typeToInfer : getNativeType(UNKNOWN_TYPE);\n+            objType.defineInferredProperty(prop, inferred, inferredDescription);\n           }\n         }\n       }\n     }\n   }\n-\n+  \n   /**\n    * If we access a property of a symbol, then that symbol is not\n    * null or undefined.\n@@ -1147,6 +1154,24 @@ class TypeInference\n       if (type != narrowed) {\n         scope = narrowScope(scope, n, narrowed);\n       }\n+      ObjectType objectType = ObjectType.cast(narrowed);\n+      if (objectType != null) {\n+        for (String propName : objectType.getOwnPropertyNames()) {\n+          JSType propType = objectType.getPropertyType(propName);\n+          if (propType != null\n+              && (!(propType.isUnknownType() || propType.isAllType()))) {\n+            // If the property exists on the object type but not in the scope\n+            // then we should add it to the scope.\n+            Var var = scope.getVar(propName);\n+            if (var == null || (var.isTypeInferred() && !propType.isSubtypeOf(var.getType()))) {\n+              scope = scope.inferSlotType(propName, propType, null).withPropertyPreconditions(\n+                  ImmutableMap.of(propName, Preconditions.exactlyPropDef(propType)));\n+            }\n+          }\n+        }\n+      }\n+    }\n+    return scope;\n     }\n     return scope;\n   }",
    "result_reason": "error: modifier private not allowed here",
    "test_result": "ERROR"
}