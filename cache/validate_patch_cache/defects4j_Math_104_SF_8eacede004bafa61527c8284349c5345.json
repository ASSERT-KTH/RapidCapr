{
    "patch": "public static double regularizedGammaQ(double a, double x) {\n    double eps = 1e-9;\n    int maxIterations = 100000;\n\n    if (Double.isNaN(a) ||\n            Double.isInfinite(a) ||\n            a <= 0.0 || Double.isNaN(x) || Double.isInfinite(x)) {\n        return Double.NaN;\n    }\n\n    if (x < 0.0) {\n        return 1.0 - regularizedGammaP(a, -x);\n    }\n\n    if (x == 0.0) {\n        return 1.0;\n    }\n\n    if (x >= a + 1.0) {\n        ContinuedFraction cf = new ContinuedFraction() {\n            @Override\n            protected double getA(int n, double x) {\n                if (n == 0) {\n                    return 1.0;\n                }\n                if (n == 1) {\n                    return 1.0 - a;\n                }\n                return (2 * n - 1 - a) * (1.0 - x) + n * (a - n) * x;\n            }\n\n            @Override\n            protected double getB(int n, double x) {\n                return n;\n            }\n        };\n        return 1.0 - cf.evaluate(x / (x + a));\n    }\n\n    double term = a;\n    double sum = 1.0 / a;\n    double n = 1.0;\n    while (Math.abs(term / sum) > eps && n < maxIterations) {\n        term *= x / (a + n);\n        sum += term;\n        n += 1.0;\n    }\n    double pdf = Math.exp(-x + a * Math.log(x) - regularizedGammaLn(a, x));\n    return pdf / sum;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..5a216c95a 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,56 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaQ(double a, double x) {\n+    double eps = 1e-9;\n+    int maxIterations = 100000;\n+\n+    if (Double.isNaN(a) ||\n+            Double.isInfinite(a) ||\n+            a <= 0.0 || Double.isNaN(x) || Double.isInfinite(x)) {\n+        return Double.NaN;\n+    }\n+\n+    if (x < 0.0) {\n+        return 1.0 - regularizedGammaP(a, -x);\n+    }\n+\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+\n+    if (x >= a + 1.0) {\n+        ContinuedFraction cf = new ContinuedFraction() {\n+            @Override\n+            protected double getA(int n, double x) {\n+                if (n == 0) {\n+                    return 1.0;\n+                }\n+                if (n == 1) {\n+                    return 1.0 - a;\n+                }\n+                return (2 * n - 1 - a) * (1.0 - x) + n * (a - n) * x;\n+            }\n+\n+            @Override\n+            protected double getB(int n, double x) {\n+                return n;\n+            }\n+        };\n+        return 1.0 - cf.evaluate(x / (x + a));\n+    }\n+\n+    double term = a;\n+    double sum = 1.0 / a;\n+    double n = 1.0;\n+    while (Math.abs(term / sum) > eps && n < maxIterations) {\n+        term *= x / (a + n);\n+        sum += term;\n+        n += 1.0;\n+    }\n+    double pdf = Math.exp(-x + a * Math.log(x) - regularizedGammaLn(a, x));\n+    return pdf / sum;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}