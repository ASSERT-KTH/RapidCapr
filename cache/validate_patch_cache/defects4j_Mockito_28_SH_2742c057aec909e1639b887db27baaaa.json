{
    "patch": "Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\nif (candidate != null) {\n    field.setAccessible(true);\n    try {\n        Object oldValue = field.get(fieldInstance);\n        if (oldValue != null) {\n            for (Field innerField : oldValue.getClass().getDeclaredFields()) {\n                innerField.setAccessible(true);\n                if (innerField.get(oldValue) == fieldInstance) {\n                    innerField.set(oldValue, null);\n                }\n            }\n        }\n        field.set(fieldInstance, candidate);\n        for (Field innerField : candidate.getClass().getDeclaredFields()) {\n            innerField.setAccessible(true);\n            if (innerField.get(candidate) == null) {\n                Object innerCandidate = mockCandidateFilter.filterCandidate(mocks, innerField, candidate).thenInject();\n                if (innerCandidate != null) {\n                    innerField.set(candidate, innerCandidate);\n                }\n            }\n        }\n    } catch (IllegalAccessException e) {\n        throw new RuntimeException(e);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..52f33c8af 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,36 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+if (candidate != null) {\n+    field.setAccessible(true);\n+    try {\n+        Object oldValue = field.get(fieldInstance);\n+        if (oldValue != null) {\n+            for (Field innerField : oldValue.getClass().getDeclaredFields()) {\n+                innerField.setAccessible(true);\n+                if (innerField.get(oldValue) == fieldInstance) {\n+                    innerField.set(oldValue, null);\n+                }\n+            }\n+        }\n+        field.set(fieldInstance, candidate);\n+        for (Field innerField : candidate.getClass().getDeclaredFields()) {\n+            innerField.setAccessible(true);\n+            if (innerField.get(candidate) == null) {\n+                Object innerCandidate = mockCandidateFilter.filterCandidate(mocks, innerField, candidate).thenInject();\n+                if (innerCandidate != null) {\n+                    innerField.set(candidate, innerCandidate);\n+                }\n+            }\n+        }\n+    } catch (IllegalAccessException e) {\n+        throw new RuntimeException(e);\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<java.lang.Object@17958999> was not:<mockedBean>",
    "test_result": "FAIL"
}