{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        boolean monthChanged = false;\n        boolean dayOfMonthChanged = false;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (i == fieldIndex) {\n                int oldValue = values[i];\n                int newValue = oldValue + valueToAdd;\n\n                int instantYear = iChronology.year().get(instant);\n                int instantMonthOfYear = iChronology.monthOfYear().get(instant);\n                int instantDayOfMonth = iChronology.dayOfMonth().get(instant);\n\n                // set month of year\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, newValue);\n                if (iChronology.monthOfYear().get(instant) != newValue) {\n                    int lastMonth = iChronology.monthOfYear().getMaximumValue(instant);\n                    instant = iChronology.monthOfYear().set(instant, lastMonth);\n                }\n\n                // if month changed and dayOfMonth is 29, set to maximum value if necessary\n                if (iChronology.monthOfYear().get(instant) != instantMonthOfYear) {\n                    monthChanged = true;\n                    if (instantDayOfMonth == 29 && iChronology.monthOfYear().isLeap(instantYear, iChronology.monthOfYear().get(instant))) {\n                        dayOfMonthChanged = false;\n                    } else {\n                        int lastDay = iChronology.dayOfMonth().getMaximumValue(instant);\n                        instant = iChronology.dayOfMonth().set(instant, lastDay);\n                        dayOfMonthChanged = true;\n                    }\n                }\n\n                // if month changed and dayOfMonth is not set, set it to minimum value\n                if (monthChanged && !dayOfMonthChanged && iChronology.dayOfMonth().get(instant) == iChronology.dayOfMonth().getMinimumValue(instant)) {\n                    instant = iChronology.dayOfMonth().set(instant, 1);\n                }\n\n                // if month and dayOfMonth remained same, check for year change\n                if (iChronology.year().get(instant) == instantYear && iChronology.monthOfYear().get(instant) == instantMonthOfYear && iChronology.dayOfMonth().get(instant) == instantDayOfMonth) {\n                    instant = iChronology.year().add(instant, valueToAdd);\n                    int lastDay = iChronology.dayOfMonth().getMaximumValue(instant);\n                    if (iChronology.dayOfMonth().get(instant) > lastDay) {\n                        instant = iChronology.dayOfMonth().set(instant, lastDay);\n                    }\n                }\n\n                // fix leap year if month and dayOfMonth is the date of February 29th\n                if (monthChanged && dayOfMonthChanged && iChronology.monthOfYear().get(instant) == 2 && iChronology.dayOfMonth().get(instant) == 29 && !iChronology.isLeapYear(iChronology.year().get(instant))) {\n                    instant = iChronology.dayOfMonth().set(instant, 28);\n                }\n            } else {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n        }\n\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..b9409b95 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,74 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        boolean monthChanged = false;\n+        boolean dayOfMonthChanged = false;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (i == fieldIndex) {\n+                int oldValue = values[i];\n+                int newValue = oldValue + valueToAdd;\n+\n+                int instantYear = iChronology.year().get(instant);\n+                int instantMonthOfYear = iChronology.monthOfYear().get(instant);\n+                int instantDayOfMonth = iChronology.dayOfMonth().get(instant);\n+\n+                // set month of year\n+                instant = partial.getFieldType(i).getField(iChronology).set(instant, newValue);\n+                if (iChronology.monthOfYear().get(instant) != newValue) {\n+                    int lastMonth = iChronology.monthOfYear().getMaximumValue(instant);\n+                    instant = iChronology.monthOfYear().set(instant, lastMonth);\n+                }\n+\n+                // if month changed and dayOfMonth is 29, set to maximum value if necessary\n+                if (iChronology.monthOfYear().get(instant) != instantMonthOfYear) {\n+                    monthChanged = true;\n+                    if (instantDayOfMonth == 29 && iChronology.monthOfYear().isLeap(instantYear, iChronology.monthOfYear().get(instant))) {\n+                        dayOfMonthChanged = false;\n+                    } else {\n+                        int lastDay = iChronology.dayOfMonth().getMaximumValue(instant);\n+                        instant = iChronology.dayOfMonth().set(instant, lastDay);\n+                        dayOfMonthChanged = true;\n+                    }\n+                }\n+\n+                // if month changed and dayOfMonth is not set, set it to minimum value\n+                if (monthChanged && !dayOfMonthChanged && iChronology.dayOfMonth().get(instant) == iChronology.dayOfMonth().getMinimumValue(instant)) {\n+                    instant = iChronology.dayOfMonth().set(instant, 1);\n+                }\n+\n+                // if month and dayOfMonth remained same, check for year change\n+                if (iChronology.year().get(instant) == instantYear && iChronology.monthOfYear().get(instant) == instantMonthOfYear && iChronology.dayOfMonth().get(instant) == instantDayOfMonth) {\n+                    instant = iChronology.year().add(instant, valueToAdd);\n+                    int lastDay = iChronology.dayOfMonth().getMaximumValue(instant);\n+                    if (iChronology.dayOfMonth().get(instant) > lastDay) {\n+                        instant = iChronology.dayOfMonth().set(instant, lastDay);\n+                    }\n+                }\n+\n+                // fix leap year if month and dayOfMonth is the date of February 29th\n+                if (monthChanged && dayOfMonthChanged && iChronology.monthOfYear().get(instant) == 2 && iChronology.dayOfMonth().get(instant) == 29 && !iChronology.isLeapYear(iChronology.year().get(instant))) {\n+                    instant = iChronology.dayOfMonth().set(instant, 28);\n+                }\n+            } else {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: method isLeap in class DateTimeField cannot be applied to given types;",
    "test_result": "ERROR"
}