{
    "patch": "        } else if (maybeInit.isSimpleAssignmentToName()) {\n          for (int i = index + 1; i < references.size(); i++) {\n            if (references.get(i).isAssignmentToName() &&\n                references.get(i).getNameNode() == maybeDecl.getNameNode()) {\n              return null;\n            }\n          }\n          return maybeInit;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..af909a0c 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,14 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        } else if (maybeInit.isSimpleAssignmentToName()) {\n+          for (int i = index + 1; i < references.size(); i++) {\n+            if (references.get(i).isAssignmentToName() &&\n+                references.get(i).getNameNode() == maybeDecl.getNameNode()) {\n+              return null;\n+            }\n+          }\n+          return maybeInit;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}