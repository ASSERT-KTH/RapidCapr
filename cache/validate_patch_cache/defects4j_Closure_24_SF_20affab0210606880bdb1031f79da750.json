{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    if (n == null || !n.isName()) {\n      // Skip variables that are not named values.\n      continue;\n    }\n    Node parent = n.getParent();\n    if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n      String name = n.getString();\n      Var aliasVar = scope.getVar(name);\n      if (aliasVar == null || aliasVar.getInitialValue() == null) {\n        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        continue;\n      }\n      aliases.put(name, aliasVar);\n\n      String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n      transformation.addAlias(name, qualifiedName);\n    } else if (!parent.isFunction()) {\n      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n    } else {\n      Node grandparent = parent.getParent();\n      if (!grandparent.isCall() || grandparent.getChildCount() != 1\n          || grandparent.getFirstChild().isFunction()\n          && !grandparent.getFirstChild().getFirstChild().isName()) {\n        report(t, grandparent, GOOG_SCOPE_WRONG_PARAMETERS);\n        continue;\n      }\n      for (Node arg : grandparent.getLastChild().children()) {\n        if (!arg.isFunction()) {\n          continue;\n        }\n        Node paramList = arg.getChildAtIndex(1);\n        if (paramList.getChildCount() != 0) {\n          report(t, paramList, GOOG_SCOPE_BAD_PARAMETERS);\n        }\n        break;\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..6bd30375 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,49 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    if (n == null || !n.isName()) {\n+      // Skip variables that are not named values.\n+      continue;\n+    }\n+    Node parent = n.getParent();\n+    if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+      String name = n.getString();\n+      Var aliasVar = scope.getVar(name);\n+      if (aliasVar == null || aliasVar.getInitialValue() == null) {\n+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+        continue;\n+      }\n+      aliases.put(name, aliasVar);\n+\n+      String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+      transformation.addAlias(name, qualifiedName);\n+    } else if (!parent.isFunction()) {\n+      report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+    } else {\n+      Node grandparent = parent.getParent();\n+      if (!grandparent.isCall() || grandparent.getChildCount() != 1\n+          || grandparent.getFirstChild().isFunction()\n+          && !grandparent.getFirstChild().getFirstChild().isName()) {\n+        report(t, grandparent, GOOG_SCOPE_WRONG_PARAMETERS);\n+        continue;\n+      }\n+      for (Node arg : grandparent.getLastChild().children()) {\n+        if (!arg.isFunction()) {\n+          continue;\n         }\n+        Node paramList = arg.getChildAtIndex(1);\n+        if (paramList.getChildCount() != 0) {\n+          report(t, paramList, GOOG_SCOPE_BAD_PARAMETERS);\n         }\n+        break;\n       }\n     }\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}