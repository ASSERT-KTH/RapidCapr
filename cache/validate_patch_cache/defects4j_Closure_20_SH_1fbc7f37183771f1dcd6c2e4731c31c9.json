{
    "patch": "      // Gate the optimization on whether the argument is an immutable literal\n      // or not, the optimization is harmful for objects and makes the resulting\n      // code less readable.\n      //\n      // We can't do this in the general case, because String(a) has\n      // slightly different semantics than '' + (a). See\n      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n>>> [ INFILL ] <<<\n      Node value = callTarget.getNext();\n      if (value != null && !value.hasChildren() &&\n            (value.isNullOrUndefined() || value.isString() || value.isNumber())) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..143c56f2 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,7 +217,17 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+      // Gate the optimization on whether the argument is an immutable literal\n+      // or not, the optimization is harmful for objects and makes the resulting\n+      // code less readable.\n+      //\n+      // We can't do this in the general case, because String(a) has\n+      // slightly different semantics than '' + (a). See\n+      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n+>>> [ INFILL ] <<<\n+      Node value = callTarget.getNext();\n+      if (value != null && !value.hasChildren() &&\n+            (value.isNullOrUndefined() || value.isString() || value.isNumber())) {\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}