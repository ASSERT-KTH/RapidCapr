{
    "patch": "                long prevLocal = previousTransition(instantAdjusted);\n                if (prevLocal == instantAdjusted) {\n                    // there is no previous transition\n                    return offsetLocal;\n                }\n                int offsetPrev = getOffset(prevLocal);\n                if (offsetLocal > offsetPrev) {\n                    // we are in a (possibly extended) positive offset period\n                    return offsetLocal;\n                } else {\n                    // reduced or zero local offset indicates we have passed the\n                    // DST gap and should use the earlier offset\n                    return offsetPrev;\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..bbfcc8f0 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,20 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                long prevLocal = previousTransition(instantAdjusted);\n+                if (prevLocal == instantAdjusted) {\n+                    // there is no previous transition\n+                    return offsetLocal;\n+                }\n+                int offsetPrev = getOffset(prevLocal);\n+                if (offsetLocal > offsetPrev) {\n+                    // we are in a (possibly extended) positive offset period\n+                    return offsetLocal;\n+                } else {\n+                    // reduced or zero local offset indicates we have passed the\n+                    // DST gap and should use the earlier offset\n+                    return offsetPrev;\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}