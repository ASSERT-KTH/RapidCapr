{
    "patch": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations){\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n      return Double.NaN;\n    }\n    if (x == 0.0) {\n      return 0.0;\n    }\n    if (a >= MAX_GAMMA || x > MAX_GAMMA) {\n      double lgm = logGamma(a);\n      double xgl = x * log(MAX_GAMMA) - lgm;\n      if (xgl < DEFAULT_EPSILON) {\n        return 0.0;\n      }\n      if (xgl > -DEFAULT_EPSILON) {\n        return 1.0;\n      }\n    }\n\n    boolean fracAps = false;\n    double sum = 1 / a;\n    double incr = sum;\n    double logGammaAP = logGamma(a + 1);\n    for (int i = 1; i <= maxIterations; i++) {\n      incr *= x / (a + i);\n      sum += incr;\n      if (Math.abs(incr)/sum < epsilon) {\n        fracAps = true;\n        break;\n      }\n    }\n    if (!fracAps && a + maxIterations < MAX_GAMMA) {\n      double logEpsilon = Math.log(epsilon);\n      double term = epsilon + 1.0;\n      do {\n        term *= x / (a + ++maxIterations);\n        sum += term;\n      } while ((Math.abs(term) > epsilon) && (maxIterations < MAX_GAMMA));\n    }\n    return fracAps ? sum * Math.exp(-x + a * Math.log(x) - logGammaAP) : Double.NaN;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..a8628362f 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,46 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations){\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+      return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+      return 0.0;\n+    }\n+    if (a >= MAX_GAMMA || x > MAX_GAMMA) {\n+      double lgm = logGamma(a);\n+      double xgl = x * log(MAX_GAMMA) - lgm;\n+      if (xgl < DEFAULT_EPSILON) {\n+        return 0.0;\n+      }\n+      if (xgl > -DEFAULT_EPSILON) {\n+        return 1.0;\n+      }\n+    }\n+\n+    boolean fracAps = false;\n+    double sum = 1 / a;\n+    double incr = sum;\n+    double logGammaAP = logGamma(a + 1);\n+    for (int i = 1; i <= maxIterations; i++) {\n+      incr *= x / (a + i);\n+      sum += incr;\n+      if (Math.abs(incr)/sum < epsilon) {\n+        fracAps = true;\n+        break;\n+      }\n+    }\n+    if (!fracAps && a + maxIterations < MAX_GAMMA) {\n+      double logEpsilon = Math.log(epsilon);\n+      double term = epsilon + 1.0;\n+      do {\n+        term *= x / (a + ++maxIterations);\n+        sum += term;\n+      } while ((Math.abs(term) > epsilon) && (maxIterations < MAX_GAMMA));\n+    }\n+    return fracAps ? sum * Math.exp(-x + a * Math.log(x) - logGammaAP) : Double.NaN;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}