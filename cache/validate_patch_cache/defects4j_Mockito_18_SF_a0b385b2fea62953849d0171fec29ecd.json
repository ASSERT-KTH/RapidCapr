{
    "patch": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Values {\n    private int intValue;\n    private String stringValue;\n    private List<String> stringListValue;\n\n    public Values() {\n        this.intValue = 42;\n        this.stringValue = \"Hello, world!\";\n        this.stringListValue = new ArrayList<>();\n    }\n\n    public Object returnValueFor(Class<?> clazz) {\n        if (clazz.equals(Integer.class)) {\n            return intValue;\n        } else if (clazz.equals(String.class)) {\n            return stringValue;\n        } else if (clazz.equals(Iterable.class)) {\n            return stringListValue;\n        } else {\n            return null;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cd5731d10 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,32 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class Values {\n+    private int intValue;\n+    private String stringValue;\n+    private List<String> stringListValue;\n+\n+    public Values() {\n+        this.intValue = 42;\n+        this.stringValue = \"Hello, world!\";\n+        this.stringListValue = new ArrayList<>();\n+    }\n+\n+    public Object returnValueFor(Class<?> clazz) {\n+        if (clazz.equals(Integer.class)) {\n+            return intValue;\n+        } else if (clazz.equals(String.class)) {\n+            return stringValue;\n+        } else if (clazz.equals(Iterable.class)) {\n+            return stringListValue;\n+        } else {\n+            return null;\n+        }\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression:compileJava FAILED",
    "test_result": "ERROR"
}