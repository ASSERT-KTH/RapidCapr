{
    "patch": "            Matcher varargMatcher = matchers.get(matchers.size() - 1);\n            if (varargMatcher instanceof CapturesArguments) {\n                if (indexOfVararg < matchers.size() - 1) {\n                    for (int position = 0; position <= indexOfVararg; position++) {\n                        Matcher m = matchers.get(position);\n                        if (m instanceof CapturesArguments) {\n                            ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                        }\n                    }\n                } else {\n                    Object varargArray = invocation.getRawArguments()[indexOfVararg];\n                    int varargIndex = 0;\n                    for (int position = 0; position < matchers.size() - 1; position++) {\n                        Matcher m = matchers.get(position);\n                        if (m instanceof CapturesArguments) {\n                            ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                        }\n                    }\n                    for (; varargIndex < Array.getLength(varargArray); varargIndex++) {\n                        ((CapturesArguments) varargMatcher).captureFrom(Array.get(varargArray, varargIndex));\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..243a127ae 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,29 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Matcher varargMatcher = matchers.get(matchers.size() - 1);\n+            if (varargMatcher instanceof CapturesArguments) {\n+                if (indexOfVararg < matchers.size() - 1) {\n+                    for (int position = 0; position <= indexOfVararg; position++) {\n+                        Matcher m = matchers.get(position);\n+                        if (m instanceof CapturesArguments) {\n+                            ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n+                        }\n+                    }\n+                } else {\n+                    Object varargArray = invocation.getRawArguments()[indexOfVararg];\n+                    int varargIndex = 0;\n+                    for (int position = 0; position < matchers.size() - 1; position++) {\n+                        Matcher m = matchers.get(position);\n+                        if (m instanceof CapturesArguments) {\n+                            ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n+                        }\n+                    }\n+                    for (; varargIndex < Array.getLength(varargArray); varargIndex++) {\n+                        ((CapturesArguments) varargMatcher).captureFrom(Array.get(varargArray, varargIndex));\n+                    }\n+                }\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}