{
    "patch": "  protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n          throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n      while (true) {\n\n          incrementIterationsCounter();\n\n          // save the original vertex\n          final RealPointValuePair[] original = simplex.clone();\n          final RealPointValuePair best = original[0];\n\n          // perform a reflection step\n          final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n          if (comparator.compare(reflected, best) < 0) {\n\n              // compute the expanded simplex\n              final RealPointValuePair[] reflectedSimplex = simplex.clone();\n              final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, khi, comparator);\n\n              if (comparator.compare(expanded, reflected) < 0) {\n                  // accept the expanded simplex\n                  simplex = reflectedSimplex.clone();\n                  simplex[n + 1] = expanded;\n              } else {\n                  // accept the reflected simplex\n                  simplex = reflectedSimplex.clone();\n                  simplex[n + 1] = reflected;\n              }\n\n          } else {\n              // perform a contraction\n              final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n              if (comparator.compare(contracted, best) >= 0) {\n                  // shrink the simplex\n                  shrink(comparator);\n\n              } else if (comparator.compare(contracted, simplex[n]) < 0) {\n                  // accept the contracted simplex\n                  simplex[n + 1] = contracted;\n              } else {\n                  // perform an inside contraction\n                  final RealPointValuePair[] contractedSimplex = simplex.clone();\n                  for (int i = 1; i < simplex.length; ++i) {\n                      contractedSimplex[i] = new RealPointValuePair(\n                              contractInOneDimension(simplex[i].getPoint(), best.getPoint(), 0.5),\n                              Double.NaN);\n                  }\n                  contractedSimplex[n + 1] = evaluate(contractedSimplex[simplex.length - 1].getPoint());\n\n                  if (comparator.compare(contractedSimplex[n + 1], contracted) < 0) {\n                      simplex = contractedSimplex.clone();\n                  } else {\n                      // shrink the simplex\n                      shrink(comparator);\n                  }\n              }\n          }\n\n          // check convergence\n          if (isConverged(simplex, comparator)) {\n              return;\n          }\n\n      }\n\n  }\n\n  private void shrink(final Comparator<RealPointValuePair> comparator) {\n      final RealPointValuePair best = simplex[0];\n      for (int i = 1; i < simplex.length; ++i) {\n          final double[] point = contractInOneDimension(simplex[i].getPoint(), best.getPoint(), rho);\n          simplex[i] = new RealPointValuePair(point, Double.NaN);\n      }\n      evaluateSimplex(comparator);\n  }\n\n  private double[] contractInOneDimension(final double[] point1, final double[] point2, final double contractionFactor) {\n      final double[] contracted = new double[point1.length];\n      for (int i = 0; i < point1.length; ++i) {\n          contracted[i] = contractionFactor * point1[i] + (1 - contractionFactor) * point2[i];\n      }\n      return contracted;\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..a8226e768 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,89 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n-            }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n-            }\n-\n-        }\n-\n-    }\n+  protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+          throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+\n+      while (true) {\n+\n+          incrementIterationsCounter();\n+\n+          // save the original vertex\n+          final RealPointValuePair[] original = simplex.clone();\n+          final RealPointValuePair best = original[0];\n+\n+          // perform a reflection step\n+          final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+          if (comparator.compare(reflected, best) < 0) {\n+\n+              // compute the expanded simplex\n+              final RealPointValuePair[] reflectedSimplex = simplex.clone();\n+              final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, khi, comparator);\n+\n+              if (comparator.compare(expanded, reflected) < 0) {\n+                  // accept the expanded simplex\n+                  simplex = reflectedSimplex.clone();\n+                  simplex[n + 1] = expanded;\n+              } else {\n+                  // accept the reflected simplex\n+                  simplex = reflectedSimplex.clone();\n+                  simplex[n + 1] = reflected;\n+              }\n+\n+          } else {\n+              // perform a contraction\n+              final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+              if (comparator.compare(contracted, best) >= 0) {\n+                  // shrink the simplex\n+                  shrink(comparator);\n+\n+              } else if (comparator.compare(contracted, simplex[n]) < 0) {\n+                  // accept the contracted simplex\n+                  simplex[n + 1] = contracted;\n+              } else {\n+                  // perform an inside contraction\n+                  final RealPointValuePair[] contractedSimplex = simplex.clone();\n+                  for (int i = 1; i < simplex.length; ++i) {\n+                      contractedSimplex[i] = new RealPointValuePair(\n+                              contractInOneDimension(simplex[i].getPoint(), best.getPoint(), 0.5),\n+                              Double.NaN);\n+                  }\n+                  contractedSimplex[n + 1] = evaluate(contractedSimplex[simplex.length - 1].getPoint());\n+\n+                  if (comparator.compare(contractedSimplex[n + 1], contracted) < 0) {\n+                      simplex = contractedSimplex.clone();\n+                  } else {\n+                      // shrink the simplex\n+                      shrink(comparator);\n+                  }\n+              }\n+          }\n+\n+          // check convergence\n+          if (isConverged(simplex, comparator)) {\n+              return;\n+          }\n+\n+      }\n+\n+  }\n+\n+  private void shrink(final Comparator<RealPointValuePair> comparator) {\n+      final RealPointValuePair best = simplex[0];\n+      for (int i = 1; i < simplex.length; ++i) {\n+          final double[] point = contractInOneDimension(simplex[i].getPoint(), best.getPoint(), rho);\n+          simplex[i] = new RealPointValuePair(point, Double.NaN);\n+      }\n+      evaluateSimplex(comparator);\n+  }\n+\n+  private double[] contractInOneDimension(final double[] point1, final double[] point2, final double contractionFactor) {\n+      final double[] contracted = new double[point1.length];\n+      for (int i = 0; i < point1.length; ++i) {\n+          contracted[i] = contractionFactor * point1[i] + (1 - contractionFactor) * point2[i];\n+      }\n+      return contracted;\n+  }\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}