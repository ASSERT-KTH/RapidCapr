{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    Collection<DiGraphEdge<Node, ExceptionHandler>> inEdges =\n        cfg.getDiGraph().getInEdges(cfgNode);\n    for (DiGraphEdge<Node, ExceptionHandler> inEdge : inEdges) {\n      if (inEdge.getValue().isCatch()) {\n        return true;\n      }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..6448848b 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,16 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    Collection<DiGraphEdge<Node, ExceptionHandler>> inEdges =\n+        cfg.getDiGraph().getInEdges(cfgNode);\n+    for (DiGraphEdge<Node, ExceptionHandler> inEdge : inEdges) {\n+      if (inEdge.getValue().isCatch()) {\n+        return true;\n+      }\n+    }\n+    return false;\n+}\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}