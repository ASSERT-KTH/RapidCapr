{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted - 1);\n    if (nextLocal != nextAdjusted) {\n        return offsetLocal;\n    } else {\n        int standardOffset = getStandardOffset(instantAdjusted);\n        int actualOffset = getOffset(instantAdjusted);\n        if (standardOffset > actualOffset) {\n            return standardOffset;\n        }\n    }\n} else {\n    long prevLocal = previousTransition(instantAdjusted);\n    long prevAdjusted = previousTransition(instantLocal - offsetLocal - 1);\n    if (prevLocal != prevAdjusted) {\n        int prevLocalOffset = getOffset(prevLocal);\n        int prevAdjustedOffset = getOffset(prevAdjusted);\n        if (prevLocalOffset < prevAdjustedOffset) {\n            return prevLocalOffset;\n        }\n    } else if (getStandardOffset(prevLocal) > getOffset(prevLocal)) {\n        return getStandardOffset(prevLocal);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..eb5ef26f 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,31 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted - 1);\n+    if (nextLocal != nextAdjusted) {\n+        return offsetLocal;\n+    } else {\n+        int standardOffset = getStandardOffset(instantAdjusted);\n+        int actualOffset = getOffset(instantAdjusted);\n+        if (standardOffset > actualOffset) {\n+            return standardOffset;\n+        }\n+    }\n+} else {\n+    long prevLocal = previousTransition(instantAdjusted);\n+    long prevAdjusted = previousTransition(instantLocal - offsetLocal - 1);\n+    if (prevLocal != prevAdjusted) {\n+        int prevLocalOffset = getOffset(prevLocal);\n+        int prevAdjustedOffset = getOffset(prevAdjusted);\n+        if (prevLocalOffset < prevAdjustedOffset) {\n+            return prevLocalOffset;\n+        }\n+    } else if (getStandardOffset(prevLocal) > getOffset(prevLocal)) {\n+        return getStandardOffset(prevLocal);\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}