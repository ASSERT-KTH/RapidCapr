{
    "patch": "public static double[] bracket(UnivariateRealFunction function,\n                               double initial, double lowerBound, double upperBound,\n                               int maximumIterations) throws ConvergenceException,\n        FunctionEvaluationException {\n\n    if (function == null) {\n        throw new IllegalArgumentException(\"Function must not be null\");\n    }\n    if (maximumIterations <= 0) {\n        throw new IllegalArgumentException(\"Maximum iterations must be greater than zero\");\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw new IllegalArgumentException(\"Invalid bracketing parameters\");\n    }\n\n    // First iteration\n    double a = initial;\n    double b = initial;\n    double fa = function.value(a);\n    double fb = function.value(b);\n    int numIterations = 0;\n\n    // Check for convergence already at the initial point.\n    if (fa * fb <= 0) {\n        return new double[] { a, b };\n    }\n\n    // Expand until opposite signs are found.\n    while (fa * fb > 0) {\n        double delta = Math.max(Math.abs(b - a), Math.max(Math.abs(fa), Math.abs(fb))) * 1e-1;\n        if (b + delta <= upperBound) {\n            b += delta;\n            fb = function.value(b);\n            numIterations++;\n            if (fa * fb <= 0) {\n                return new double[] { a, b };\n            }\n        }\n        if (a - delta >= lowerBound) {\n            a -= delta;\n            fa = function.value(a);\n            numIterations++;\n            if (fa * fb <= 0) {\n                return new double[] { a, b };\n            }\n        }\n        if (numIterations >= maximumIterations) {\n            throw new ConvergenceException(\"Maximum number of iterations exceeded\");\n        }\n    }\n    // Start bisection\n    double delta = Math.max(Math.abs(b - a), Math.max(Math.abs(fa), Math.abs(fb))) * 1e-1;\n    while (numIterations < maximumIterations) {\n        double c = (a + b) / 2;\n        double fc = function.value(c);\n        if (fb * fc < 0) {\n            a = b;\n            fa = fb;\n            b = c;\n            fb = fc;\n        } else if (fa * fc < 0) {\n            b = c;\n            fb = fc;\n        } else {\n            // Neither a nor b converged to zero. Use mid-point instead.\n            a = b = c;\n            fa = fb = fc;\n        }\n        numIterations++;\n\n        if (Math.abs(b - a) < delta) {\n            return new double[] { a, b };\n        }\n    }\n    throw new ConvergenceException(\"Maximum number of iterations exceeded\");\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..da6247ff4 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,50 +162,82 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n-        if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n+public static double[] bracket(UnivariateRealFunction function,\n+                               double initial, double lowerBound, double upperBound,\n+                               int maximumIterations) throws ConvergenceException,\n+        FunctionEvaluationException {\n+\n+    if (function == null) {\n+        throw new IllegalArgumentException(\"Function must not be null\");\n+    }\n+    if (maximumIterations <= 0) {\n+        throw new IllegalArgumentException(\"Maximum iterations must be greater than zero\");\n+    }\n+    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+        throw new IllegalArgumentException(\"Invalid bracketing parameters\");\n+    }\n+\n+    // First iteration\n+    double a = initial;\n+    double b = initial;\n+    double fa = function.value(a);\n+    double fb = function.value(b);\n+    int numIterations = 0;\n+\n+    // Check for convergence already at the initial point.\n+    if (fa * fb <= 0) {\n+        return new double[] { a, b };\n+    }\n+\n+    // Expand until opposite signs are found.\n+    while (fa * fb > 0) {\n+        double delta = Math.max(Math.abs(b - a), Math.max(Math.abs(fa), Math.abs(fb))) * 1e-1;\n+        if (b + delta <= upperBound) {\n+            b += delta;\n+            fb = function.value(b);\n+            numIterations++;\n+            if (fa * fb <= 0) {\n+                return new double[] { a, b };\n+            }\n         }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n+        if (a - delta >= lowerBound) {\n+            a -= delta;\n+            fa = function.value(a);\n+            numIterations++;\n+            if (fa * fb <= 0) {\n+                return new double[] { a, b };\n+            }\n         }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n+        if (numIterations >= maximumIterations) {\n+            throw new ConvergenceException(\"Maximum number of iterations exceeded\");\n         }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n-            \n-            fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+    }\n+    // Start bisection\n+    double delta = Math.max(Math.abs(b - a), Math.max(Math.abs(fa), Math.abs(fb))) * 1e-1;\n+    while (numIterations < maximumIterations) {\n+        double c = (a + b) / 2;\n+        double fc = function.value(c);\n+        if (fb * fc < 0) {\n+            a = b;\n+            fa = fb;\n+            b = c;\n+            fb = fc;\n+        } else if (fa * fc < 0) {\n+            b = c;\n+            fb = fc;\n+        } else {\n+            // Neither a nor b converged to zero. Use mid-point instead.\n+            a = b = c;\n+            fa = fb = fc;\n+        }\n+        numIterations++;\n+\n+        if (Math.abs(b - a) < delta) {\n+            return new double[] { a, b };\n         }\n-        \n-        return new double[]{a, b};\n     }\n+    throw new ConvergenceException(\"Maximum number of iterations exceeded\");\n+}\n \n     /**\n      * Compute the midpoint of two values.",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}