{
    "patch": "public static String unescape(String str) throws Exception {\n    StringWriter writer = new StringWriter(str.length());\n    char c;\n    boolean success = true;\n\n    for (int i = 0; i < str.length(); i++) {\n        c = str.charAt(i);\n        if (c == '\\\\') {\n            if (++i >= str.length()) {\n                throw new IllegalArgumentException(\n                    \"Invalid Unicode sequence: \\\\\");\n            }\n            c = str.charAt(i);\n            switch (c) {\n\n            case 'u':\n            case 'U':\n                try {\n                    c = (char) Integer.parseInt(str.substring(i + 1, i + 5), 16);\n                    i += 4;\n                    if (Character.isHighSurrogate(c)) {\n                        if (i + 6 >= str.length() || str.charAt(i + 1) != '\\\\' ||\n                                str.charAt(i + 2) != 'u') {\n                            success = false;\n                            break;\n                        }\n                        char d = (char) Integer.parseInt(str.substring(i + 3, i + 7), 16);\n                        if (!Character.isLowSurrogate(d)) {\n                            success = false;\n                            break;\n                        }\n                        i += 6;\n                        writer.write(new String(new char[]{c, d}));\n                        break;\n                    }\n                    if (Character.isLowSurrogate(c)) {\n                        success = false;\n                        break;\n                    }\n                    writer.write(c);\n                } catch (NumberFormatException nfe) {\n                    throw new IllegalArgumentException(\n                        \"Invalid Unicode sequence: \\\\u????\", nfe);\n                } catch (IndexOutOfBoundsException ioobe) {\n                    throw new IllegalArgumentException(\n                        \"Invalid Unicode sequence: \\\\u????\", ioobe);\n                }\n                break;\n\n            case 't':\n                writer.write('\\t');\n                break;\n\n            case 'r':\n                writer.write('\\r');\n                break;\n\n            case 'n':\n                writer.write('\\n');\n                break;\n\n            case 'f':\n                writer.write('\\f');\n                break;\n\n            case 'b':\n                writer.write('\\b');\n                break;\n\n            case '\\\\':\n            case '\\\"':\n            case '\\'':\n                writer.write(c);\n                break;\n\n            default:\n                throw new IllegalArgumentException(\n                    \"Invalid escape sequence: \\\\\" + c);\n            }\n\n        } else {\n            writer.write(c);\n        }\n    }\n    if (!success) {\n        throw new Exception(\"Invalid surrogate pair(s): \" + str);\n    }\n    return writer.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}