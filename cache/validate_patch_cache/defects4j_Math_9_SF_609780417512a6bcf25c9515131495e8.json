{
    "patch": "public Line revert() throws RuntimeException {\n    Vector reversedDirection = direction.negate();\n    if (Double.isNaN(reversedDirection.getX()) || Double.isInfinite(reversedDirection.getX())) {\n        throw new RuntimeException(\"Invalid Line: Failed to revert.\");\n    }\n    Line reverted = new Line(zero, reversedDirection);\n    return reverted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..c5f23afea 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,14 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n+public Line revert() throws RuntimeException {\n+    Vector reversedDirection = direction.negate();\n+    if (Double.isNaN(reversedDirection.getX()) || Double.isInfinite(reversedDirection.getX())) {\n+        throw new RuntimeException(\"Invalid Line: Failed to revert.\");\n     }\n+    Line reverted = new Line(zero, reversedDirection);\n+    return reverted;\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}