{
    "patch": "          // Check if the loop header has other incoming branches. If so,\n          // we can't be sure how many times the assignment happens.\n          List<DiGraphEdge<BasicBlock, Branch>> inEdges =\n              cfg.getInEdges(block);\n          if (inEdges.size() != 1) {\n            return false;\n          }\n\n          BlockTraversal traversal = new BlockTraversal(cfg);\n          traversal.traversePreOrder(block);  // Traverse loop body.\n          List<BasicBlock> exitBlocks = traversal.getExitBlocks();\n          if (exitBlocks.size() != 1) {\n            return false;\n          }\n\n          BasicBlock exitBlock = exitBlocks.get(0);\n          // Check if the loop has a single exit point and if the variable\n          // is not being assigned inside the loop body.\n          if (cfg.getOutEdges(exitBlock).size() != 1 ||\n              exitBlock.getStatements().contains(ref.getStatement())) {\n            return false;\n          }\n\n          return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..24de0d42 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,30 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          // Check if the loop header has other incoming branches. If so,\n+          // we can't be sure how many times the assignment happens.\n+          List<DiGraphEdge<BasicBlock, Branch>> inEdges =\n+              cfg.getInEdges(block);\n+          if (inEdges.size() != 1) {\n+            return false;\n+          }\n+\n+          BlockTraversal traversal = new BlockTraversal(cfg);\n+          traversal.traversePreOrder(block);  // Traverse loop body.\n+          List<BasicBlock> exitBlocks = traversal.getExitBlocks();\n+          if (exitBlocks.size() != 1) {\n+            return false;\n+          }\n+\n+          BasicBlock exitBlock = exitBlocks.get(0);\n+          // Check if the loop has a single exit point and if the variable\n+          // is not being assigned inside the loop body.\n+          if (cfg.getOutEdges(exitBlock).size() != 1 ||\n+              exitBlock.getStatements().contains(ref.getStatement())) {\n+            return false;\n+          }\n+\n+          return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}