{
    "patch": "import java.util.*;\n\nclass Values {\n    private Map<Class<?>, Object> returnValues = new HashMap<Class<?>, Object>();\n\n    public void setReturnValueFor(Class<?> clazz, Object returnValue) {\n        returnValues.put(clazz, returnValue);\n    }\n\n    public Object returnValueFor(Class<?> clazz) {\n        return returnValues.get(clazz);\n    }\n}\n\n\npublic class Example {\n    public static String returnString() {\n        return null;\n    }\n\n    public static void main(String[] args) {\n        Values values = new Values();\n        values.setReturnValueFor(String.class, \"hello\");\n\n        // The code below obtains an Iterable from the values map, then casts it to an Iterable<String>,\n        // and finally calls its iterator() method.\n        // The intention seems to be to check if the Iterable is not empty, but the code in its current form\n        // always throws a NullPointerException, because the Iterable is null.\n        // To fix the code, we can create a non-empty Iterable by wrapping a list with a single element.\n        Iterable<String> iterable = Collections.singletonList((String) values.returnValueFor(String.class));\n        assertTrue(iterable.iterator().hasNext());\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}