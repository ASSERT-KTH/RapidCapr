{
    "patch": "        long millis = iMillis;\n        boolean tryParsingAgain = false;\n        do {\n            try {\n                for (int i = 0; i < count; i++) {\n                    millis = savedFields[i].set(millis, resetFields);\n                }\n            } catch (IllegalFieldValueException e) {\n                tryParsingAgain = true;\n                int pos = e.getIllegalValuePos();\n                if (pos >= 0) {\n                    for (int i = pos + 1; i < count; i++) {\n                        savedFields[i].set(millis, savedFields[i - 1].get(millis));\n                    }\n                    savedFields[pos].set(millis, savedFields[pos].getField().getDurationField().getType().getField(iChrono).getMinimumValue());\n                } else {\n                    throw e;\n                }\n            }\n        } while (tryParsingAgain);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..f2907dc6 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,26 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        long millis = iMillis;\n+        boolean tryParsingAgain = false;\n+        do {\n+            try {\n+                for (int i = 0; i < count; i++) {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                }\n+            } catch (IllegalFieldValueException e) {\n+                tryParsingAgain = true;\n+                int pos = e.getIllegalValuePos();\n+                if (pos >= 0) {\n+                    for (int i = pos + 1; i < count; i++) {\n+                        savedFields[i].set(millis, savedFields[i - 1].get(millis));\n+                    }\n+                    savedFields[pos].set(millis, savedFields[pos].getField().getDurationField().getType().getField(iChrono).getMinimumValue());\n+                } else {\n+                    throw e;\n+                }\n+            }\n+        } while (tryParsingAgain);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: variable millis is already defined in method computeMillis(boolean,String)",
    "test_result": "ERROR"
}