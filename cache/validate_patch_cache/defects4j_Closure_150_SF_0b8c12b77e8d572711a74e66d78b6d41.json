{
    "patch": "@Override \npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) {\n        return;\n    }\n    switch(n.getType()) {\n        case Token.VAR:\n            defineVar(n, parent);\n            break;\n        case Token.FUNCTION:\n            defineDeclaredFunction(n, parent);\n            break;\n        case Token.EXPR_RESULT:\n            if(n.getFirstChild().getType() == Token.ASSIGN &&\n                n.getFirstFirstChild().getType() == Token.GETPROP &&\n                n.getFirstFirstChild().getQualifier().getString().equals(\"goog\") &&\n                n.getFirstFirstChild().getLastChild().getString().equals(\"module\")) {\n                \n                // Handle goog.module declarations\n                handleGoogModuleVariable(n.getFirstFirstChild(), n.getFirstFirstChild().getNext(), parent);\n            } else {\n                // Handle function inputs for function expressions\n                handleFunctionInputs(n);\n            }\n            break;\n        case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n    }\n    attachLiteralTypes(n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..7c5a26dc 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,37 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+@Override \n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) {\n         return;\n-      }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n+    }\n+    switch(n.getType()) {\n+        case Token.VAR:\n+            defineVar(n, parent);\n+            break;\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n+            defineDeclaredFunction(n, parent);\n+            break;\n+        case Token.EXPR_RESULT:\n+            if(n.getFirstChild().getType() == Token.ASSIGN &&\n+                n.getFirstFirstChild().getType() == Token.GETPROP &&\n+                n.getFirstFirstChild().getQualifier().getString().equals(\"goog\") &&\n+                n.getFirstFirstChild().getLastChild().getString().equals(\"module\")) {\n+                \n+                // Handle goog.module declarations\n+                handleGoogModuleVariable(n.getFirstFirstChild(), n.getFirstFirstChild().getNext(), parent);\n+            } else {\n+                // Handle function inputs for function expressions\n+                handleFunctionInputs(n);\n+            }\n+            break;\n         case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+            defineCatch(n, parent);\n+            break;\n     }\n+    attachLiteralTypes(n);\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}