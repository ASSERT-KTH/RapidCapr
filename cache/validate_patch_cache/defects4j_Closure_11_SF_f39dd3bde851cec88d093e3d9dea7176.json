{
    "patch": "public void testGetprop4() {\n    String[] arguments = { \"getprop\", \"ro.build.version.sdk\" };\n    Main.main(arguments);\n    String output = outContent.toString().trim();\n    String[] warnings = errContent.toString().trim().split(\"\\\\r?\\\\n\");\n\n    assertEquals(\"21\", output);\n    assertTrue(\"expected a warning\", warnings.length > 0);\n    assertTrue(\"warning does not contain 'deprecated'\", warnings[0].contains(\"deprecated\"));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..d840cd0a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public void testGetprop4() {\n+    String[] arguments = { \"getprop\", \"ro.build.version.sdk\" };\n+    Main.main(arguments);\n+    String output = outContent.toString().trim();\n+    String[] warnings = errContent.toString().trim().split(\"\\\\r?\\\\n\");\n+\n+    assertEquals(\"21\", output);\n+    assertTrue(\"expected a warning\", warnings.length > 0);\n+    assertTrue(\"warning does not contain 'deprecated'\", warnings[0].contains(\"deprecated\"));\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}