{
    "patch": "public double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    double hPrev = getA(0, x);\n\n    // use the value of small as epsilon criteria for zero checks\n    if (Precision.equals(hPrev, 0.0, small)) {\n        hPrev = small;\n    }\n\n    int n = 1;\n    double dPrev = 0.0;\n    double p0 = 1.0;\n    double q1 = 1.0;\n    double cPrev = hPrev;\n    double hN = hPrev;\n    boolean cNan = false;\n    boolean qNan = false;\n\n    while (n < maxIterations) {\n        final double a = getA(n, x);\n        final double b = getB(n, x);\n\n        double cN = a * hPrev + b * p0;\n        double q2 = a * q1 + b * dPrev;\n        if (Double.isInfinite(cN)) {\n            // Continued fraction converged to infinity\n            hPrev *= Double.POSITIVE_INFINITY;\n            hN = hPrev;\n            break;\n        } else if (Double.isInfinite(q2)) {\n            // Continued fraction converged to infinity\n            hPrev *= Double.NEGATIVE_INFINITY;\n            hN = hPrev;\n            break;\n        } else {\n            cNan = Double.isNaN(cN);\n            qNan = Double.isNaN(q2);\n        }\n\n        if (cNan || qNan ||\n                FastMath.abs(q1 * cN - q2 * hPrev) > 0.1 * FastMath.abs(hPrev * q2)) {\n            // use Lentz-Thompson-Barnett algorithm for noisy functions\n            double gPrev = 1.0;\n            double fN = hPrev;\n            double deltaN = 0.0;\n            double gN = a;\n            if (Precision.equals(gN, 0.0, small) || Precision.equals(fN, 0.0, small)) {\n                fN = small;\n            }\n            int jj = 0;\n            boolean converged = false;\n            while (!converged && jj < (maxIterations - n)) {\n                ++jj;\n                final double a1 = b + jj * a;\n                final double a2 = b + a1;\n                final double deltaDen = a2 * gN - a * gPrev;\n                if (Precision.equals(deltaDen, 0.0, small)) {\n                    deltaN = small;\n                } else {\n                    deltaN = gN / deltaDen;\n                    dPrev = hPrev;\n                    hPrev = fN * deltaN;\n                    if (Double.isInfinite(hPrev)) {\n                        throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n                                                       x);\n                    }\n                    if (Double.isNaN(hPrev)) {\n                        throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n                                                       x);\n                    }\n                    fN = cN * hPrev + q2 * fN;\n                    gPrev = gN;\n                    gN = a2 / deltaDen;\n                    cPrev = cN / q2;\n                    cN = a1 * cPrev + fN * gN;\n                    q1 = q2;\n                    q2 = a1 * q2 + fN * dPrev;\n                    if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n                        // Continued fraction converged to infinity\n                        hPrev *= Double.POSITIVE_INFINITY;\n                        hN = hPrev;\n                        break;\n                    } else if (Double.isNaN(cN) || Double.isNaN(q2)) {\n                        // Continued fraction diverged to NaN\n                        hPrev = Double.NaN;\n                        hN = hPrev;\n                        cNan = Double.isNaN(cN);\n                        qNan = Double.isNaN(q2);\n                        break;\n                    }\n                    if (FastMath.abs(deltaN - 1.0) < epsilon) {\n                        converged = true;\n                        hN = hPrev;\n                    }\n                }\n            }\n            if (jj >= (maxIterations - n)) {\n                throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                                    maxIterations, x);\n            }\n        } else {\n            final double deltaN = cN / q2 / cPrev;\n            hN = cPrev * deltaN;\n\n            if (Double.isInfinite(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n                                               x);\n            }\n            if (Double.isNaN(hN)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n                                               x);\n            }\n\n            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n                break;\n            }\n\n            dPrev = q1;\n            cPrev = cN / q2;\n            p0 = hPrev;\n            hPrev = cN;\n            q1 = q2;\n            n++;\n        }\n    }\n\n    if (cNan || qNan || Double.isNaN(hN)) {\n        throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n                                        x);\n    }\n\n    if (n >= maxIterations) {\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                            maxIterations, x);\n    }\n\n    return hN + x - 0.5;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex b881bb2d7..b70b6f660 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -120,52 +120,107 @@ public abstract class ContinuedFraction {\n      * @return the value of the continued fraction evaluated at x.\n      * @throws ConvergenceException if the algorithm fails to converge.\n      */\n-    public double evaluate(double x, double epsilon, int maxIterations) {\n-        final double small = 1e-50;\n-        double hPrev = getA(0, x);\n+public double evaluate(double x, double epsilon, int maxIterations) {\n+    final double small = 1e-50;\n+    double hPrev = getA(0, x);\n \n-        // use the value of small as epsilon criteria for zero checks\n-        if (Precision.equals(hPrev, 0.0, small)) {\n-            hPrev = small;\n+    // use the value of small as epsilon criteria for zero checks\n+    if (Precision.equals(hPrev, 0.0, small)) {\n+        hPrev = small;\n+    }\n+\n+    int n = 1;\n+    double dPrev = 0.0;\n+    double p0 = 1.0;\n+    double q1 = 1.0;\n+    double cPrev = hPrev;\n+    double hN = hPrev;\n+    boolean cNan = false;\n+    boolean qNan = false;\n+\n+    while (n < maxIterations) {\n+        final double a = getA(n, x);\n+        final double b = getB(n, x);\n+\n+        double cN = a * hPrev + b * p0;\n+        double q2 = a * q1 + b * dPrev;\n+        if (Double.isInfinite(cN)) {\n+            // Continued fraction converged to infinity\n+            hPrev *= Double.POSITIVE_INFINITY;\n+            hN = hPrev;\n+            break;\n+        } else if (Double.isInfinite(q2)) {\n+            // Continued fraction converged to infinity\n+            hPrev *= Double.NEGATIVE_INFINITY;\n+            hN = hPrev;\n+            break;\n+        } else {\n+            cNan = Double.isNaN(cN);\n+            qNan = Double.isNaN(q2);\n         }\n \n-        int n = 1;\n-        double dPrev = 0.0;\n-        double p0 = 1.0;\n-        double q1 = 1.0;\n-        double cPrev = hPrev;\n-        double hN = hPrev;\n-\n-        while (n < maxIterations) {\n-            final double a = getA(n, x);\n-            final double b = getB(n, x);\n-\n-            double cN = a * hPrev + b * p0;\n-            double q2 = a * q1 + b * dPrev;\n-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n-                double scaleFactor = 1d;\n-                double lastScaleFactor = 1d;\n-                final int maxPower = 5;\n-                final double scale = FastMath.max(a,b);\n-                if (scale <= 0) {  // Can't scale\n-                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n-                }\n-                for (int i = 0; i < maxPower; i++) {\n-                    lastScaleFactor = scaleFactor;\n-                    scaleFactor *= scale;\n-                    if (a != 0.0 && a > b) {\n-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n-                    } else if (b != 0) {\n-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n+        if (cNan || qNan ||\n+                FastMath.abs(q1 * cN - q2 * hPrev) > 0.1 * FastMath.abs(hPrev * q2)) {\n+            // use Lentz-Thompson-Barnett algorithm for noisy functions\n+            double gPrev = 1.0;\n+            double fN = hPrev;\n+            double deltaN = 0.0;\n+            double gN = a;\n+            if (Precision.equals(gN, 0.0, small) || Precision.equals(fN, 0.0, small)) {\n+                fN = small;\n+            }\n+            int jj = 0;\n+            boolean converged = false;\n+            while (!converged && jj < (maxIterations - n)) {\n+                ++jj;\n+                final double a1 = b + jj * a;\n+                final double a2 = b + a1;\n+                final double deltaDen = a2 * gN - a * gPrev;\n+                if (Precision.equals(deltaDen, 0.0, small)) {\n+                    deltaN = small;\n+                } else {\n+                    deltaN = gN / deltaDen;\n+                    dPrev = hPrev;\n+                    hPrev = fN * deltaN;\n+                    if (Double.isInfinite(hPrev)) {\n+                        throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n+                                                       x);\n                     }\n-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n+                    if (Double.isNaN(hPrev)) {\n+                        throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n+                                                       x);\n+                    }\n+                    fN = cN * hPrev + q2 * fN;\n+                    gPrev = gN;\n+                    gN = a2 / deltaDen;\n+                    cPrev = cN / q2;\n+                    cN = a1 * cPrev + fN * gN;\n+                    q1 = q2;\n+                    q2 = a1 * q2 + fN * dPrev;\n+                    if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n+                        // Continued fraction converged to infinity\n+                        hPrev *= Double.POSITIVE_INFINITY;\n+                        hN = hPrev;\n+                        break;\n+                    } else if (Double.isNaN(cN) || Double.isNaN(q2)) {\n+                        // Continued fraction diverged to NaN\n+                        hPrev = Double.NaN;\n+                        hN = hPrev;\n+                        cNan = Double.isNaN(cN);\n+                        qNan = Double.isNaN(q2);\n                         break;\n                     }\n+                    if (FastMath.abs(deltaN - 1.0) < epsilon) {\n+                        converged = true;\n+                        hN = hPrev;\n+                    }\n                 }\n             }\n-\n+            if (jj >= (maxIterations - n)) {\n+                throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n+                                                    maxIterations, x);\n+            }\n+        } else {\n             final double deltaN = cN / q2 / cPrev;\n             hN = cPrev * deltaN;\n \n@@ -189,13 +244,19 @@ public abstract class ContinuedFraction {\n             q1 = q2;\n             n++;\n         }\n+    }\n \n-        if (n >= maxIterations) {\n-            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n-                                                maxIterations, x);\n-        }\n+    if (cNan || qNan || Double.isNaN(hN)) {\n+        throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n+                                        x);\n+    }\n \n-        return hN;\n+    if (n >= maxIterations) {\n+        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n+                                            maxIterations, x);\n     }\n \n+    return hN + x - 0.5;\n+}\n+\n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.4063850939> but was:<0.6861371468743787>",
    "test_result": "FAIL"
}