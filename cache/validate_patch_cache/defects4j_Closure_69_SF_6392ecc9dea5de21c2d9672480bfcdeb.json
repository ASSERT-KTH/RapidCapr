{
    "patch": "      if (functionType.isConstructor()\n          && !functionType.isNativeObjectType()\n          && (functionType.getReturnType().isUnknownType()\n              || functionType.getReturnType().isVoidType()\n              || !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Check \"this\" type.\n      JSType expectedThisType = functionType.getTypeOfThis();\n      if (expectedThisType != null) {\n        Node maybeGetPropOrGetElem = n.getParent();\n        if (NodeUtil.isGetOrSetKey(maybeGetPropOrGetElem)) {\n          // If calling a method on an object (i.e. \"obj.Bar()\"), then \"this\"\n          // is used implicitly and valid.\n          expectedThisType = null;\n        } else if (NodeUtil.isFunctionObjectCall(n.getParent())) {\n          // If calling the function object itself (i.e. \"Bar()\"), then \"this\"\n          // should not be required.\n          expectedThisType = null;\n        } else if (n.getNext() == null || n.getNext().isSpread()) {\n          // If the next node to the call is null, then \"this\" cannot be used.\n          expectedThisType = null;\n        }\n\n        if (expectedThisType != null) {\n          JSType actualThisType =\n              getJSType(maybeGetPropOrGetElem.getFirstChild()).restrictByNotNullOrUndefined();\n          if (!expectedThisType.isSubtype(actualThisType)) {\n            report(t, n, EXPECTED_THIS_TYPE, expectedThisType.toString());\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..24cf38f6 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1541,53 +1541,38 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * scope chain to use in name lookups as well as error reporting.\n    * @param n The node being visited.\n    */\n-  private void visitCall(NodeTraversal t, Node n) {\n-    Node child = n.getFirstChild();\n-    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n-\n-    if (!childType.canBeCalled()) {\n-      report(t, n, NOT_CALLABLE, childType.toString());\n-      ensureTyped(t, n);\n-      return;\n-    }\n-\n-    // A couple of types can be called as if they were functions.\n-    // If it is a function type, then validate parameters.\n-    if (childType instanceof FunctionType) {\n-      FunctionType functionType = (FunctionType) childType;\n-\n-      boolean isExtern = false;\n-      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n-      if(functionJSDocInfo != null) {\n-        String sourceName = functionJSDocInfo.getSourceName();\n-        CompilerInput functionSource = compiler.getInput(sourceName);\n-        isExtern = functionSource.isExtern();\n-      }\n-\n-      // Non-native constructors should not be called directly\n-      // unless they specify a return type and are defined\n-      // in an extern.\n-      if (functionType.isConstructor() &&\n-          !functionType.isNativeObjectType() &&\n-          (functionType.getReturnType().isUnknownType() ||\n-           functionType.getReturnType().isVoidType() ||\n-           !isExtern)) {\n+      if (functionType.isConstructor()\n+          && !functionType.isNativeObjectType()\n+          && (functionType.getReturnType().isUnknownType()\n+              || functionType.getReturnType().isVoidType()\n+              || !isExtern)) {\n         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n       }\n \n-      // Functions with explcit 'this' types must be called in a GETPROP\n-      // or GETELEM.\n-\n-      visitParameterList(t, n, functionType);\n-      ensureTyped(t, n, functionType.getReturnType());\n-    } else {\n-      ensureTyped(t, n);\n-    }\n+      // Check \"this\" type.\n+      JSType expectedThisType = functionType.getTypeOfThis();\n+      if (expectedThisType != null) {\n+        Node maybeGetPropOrGetElem = n.getParent();\n+        if (NodeUtil.isGetOrSetKey(maybeGetPropOrGetElem)) {\n+          // If calling a method on an object (i.e. \"obj.Bar()\"), then \"this\"\n+          // is used implicitly and valid.\n+          expectedThisType = null;\n+        } else if (NodeUtil.isFunctionObjectCall(n.getParent())) {\n+          // If calling the function object itself (i.e. \"Bar()\"), then \"this\"\n+          // should not be required.\n+          expectedThisType = null;\n+        } else if (n.getNext() == null || n.getNext().isSpread()) {\n+          // If the next node to the call is null, then \"this\" cannot be used.\n+          expectedThisType = null;\n+        }\n \n-    // TODO: Add something to check for calls of RegExp objects, which is not\n-    // supported by IE.  Either say something about the return type or warn\n-    // about the non-portability of the call or both.\n-  }\n+        if (expectedThisType != null) {\n+          JSType actualThisType =\n+              getJSType(maybeGetPropOrGetElem.getFirstChild()).restrictByNotNullOrUndefined();\n+          if (!expectedThisType.isSubtype(actualThisType)) {\n+            report(t, n, EXPECTED_THIS_TYPE, expectedThisType.toString());\n+          }\n+        }\n \n   /**\n    * Visits the parameters of a CALL or a NEW node.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}