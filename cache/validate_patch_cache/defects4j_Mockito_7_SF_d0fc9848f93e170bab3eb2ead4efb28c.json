{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n    for (Type type : typeVariable.getBounds()) {\n        if (type instanceof TypeVariable && !type.equals(typeVariable)) {\n            readTypeVariable((TypeVariable<?>) type, new HashSet<>());\n        } else {\n            registerTypeVariablesOn(type);\n        }\n    }\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null && !actualTypeArgument.equals(typeVariable)) {\n        if (actualTypeArgument instanceof TypeVariable) {\n            readTypeVariable((TypeVariable<?>) actualTypeArgument, new HashSet<>());\n        } else {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n    }\n}\n\nprivate void readTypeVariable(TypeVariable<?> variable, Set<TypeVariable<?>> visited) {\n    if (visited.contains(variable)) {\n        return;\n    }\n    visited.add(variable);\n    for (Type type : variable.getBounds()) {\n        if (type instanceof TypeVariable && !type.equals(variable)) {\n            readTypeVariable((TypeVariable<?>) type, visited);\n        } else {\n            registerTypeVariablesOn(type);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..15300c8d5 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,41 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+    for (Type type : typeVariable.getBounds()) {\n+        if (type instanceof TypeVariable && !type.equals(typeVariable)) {\n+            readTypeVariable((TypeVariable<?>) type, new HashSet<>());\n+        } else {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null && !actualTypeArgument.equals(typeVariable)) {\n+        if (actualTypeArgument instanceof TypeVariable) {\n+            readTypeVariable((TypeVariable<?>) actualTypeArgument, new HashSet<>());\n+        } else {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+    }\n+}\n+\n+private void readTypeVariable(TypeVariable<?> variable, Set<TypeVariable<?>> visited) {\n+    if (visited.contains(variable)) {\n+        return;\n+    }\n+    visited.add(variable);\n+    for (Type type : variable.getBounds()) {\n+        if (type instanceof TypeVariable && !type.equals(variable)) {\n+            readTypeVariable((TypeVariable<?>) type, visited);\n+        } else {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}