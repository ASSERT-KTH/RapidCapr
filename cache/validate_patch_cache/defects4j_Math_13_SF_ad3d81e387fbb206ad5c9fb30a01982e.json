{
    "patch": "    private static RealMatrix squareRoot(RealMatrix m) {\n        final int numRows = m.getRowDimension();\n        final int numCols = m.getColumnDimension();\n        final RealMatrix x = MatrixUtils.createRealMatrix(numRows, numCols);\n        final RealMatrix i = MatrixUtils.createRealIdentityMatrix(numRows);\n        final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n        final RealMatrix u = svd.getU();\n        final RealMatrix s = svd.getS();\n        final RealMatrix v = svd.getV();\n        for (int j = 0; j < numCols; j++) {\n            final RealMatrix sSub = s.getSubMatrix(j, j, j, j);\n            final double sValue = sSub.getEntry(0, 0);\n            if (sValue < 0) {\n                throw new ArithmeticException(\"Matrix square root of a negative definite matrix\");\n            }\n            final RealMatrix sSqrt = new Array2DRowRealMatrix(new double[][]{{FastMath.sqrt(sValue)}});\n            final RealMatrix xj = u.getSubMatrix(0, numRows - 1, j, j)\n                    .multiply(sSqrt).multiply(v.getSubMatrix(0, numCols - 1, j, j).transpose());\n            x.setColumnMatrix(j, xj);\n        }\n        final RealMatrix xTx = x.transpose().multiply(x);\n        final RealMatrix diff = xTx.subtract(m);\n        if (diff.getNorm() / m.getNorm() > 1e-9) {\n            throw new ArithmeticException(\"Matrix square root failed to converge\");\n        }\n        return x;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..c64abad8a 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,30 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+    private static RealMatrix squareRoot(RealMatrix m) {\n+        final int numRows = m.getRowDimension();\n+        final int numCols = m.getColumnDimension();\n+        final RealMatrix x = MatrixUtils.createRealMatrix(numRows, numCols);\n+        final RealMatrix i = MatrixUtils.createRealIdentityMatrix(numRows);\n+        final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n+        final RealMatrix u = svd.getU();\n+        final RealMatrix s = svd.getS();\n+        final RealMatrix v = svd.getV();\n+        for (int j = 0; j < numCols; j++) {\n+            final RealMatrix sSub = s.getSubMatrix(j, j, j, j);\n+            final double sValue = sSub.getEntry(0, 0);\n+            if (sValue < 0) {\n+                throw new ArithmeticException(\"Matrix square root of a negative definite matrix\");\n+            }\n+            final RealMatrix sSqrt = new Array2DRowRealMatrix(new double[][]{{FastMath.sqrt(sValue)}});\n+            final RealMatrix xj = u.getSubMatrix(0, numRows - 1, j, j)\n+                    .multiply(sSqrt).multiply(v.getSubMatrix(0, numCols - 1, j, j).transpose());\n+            x.setColumnMatrix(j, xj);\n+        }\n+        final RealMatrix xTx = x.transpose().multiply(x);\n+        final RealMatrix diff = xTx.subtract(m);\n+        if (diff.getNorm() / m.getNorm() > 1e-9) {\n+            throw new ArithmeticException(\"Matrix square root failed to converge\");\n+        }\n+        return x;\n }",
    "result_reason": "error: reached end of file while parsing",
    "test_result": "ERROR"
}