{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    Gson gson = new Gson();\n    Type type = new TypeToken<Map<String, Double>>(){}.getType(); \n    Map<String, Double> map = gson.fromJson(jsonStr, type);\n    if (map.containsKey(\"typed\") && map.containsKey(\"total\")) {\n        double typed = map.get(\"typed\");\n        double total = map.get(\"total\");\n        return typed / total * 100;\n    } else {\n        return 0.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..ffd0e5b8 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    Gson gson = new Gson();\n+    Type type = new TypeToken<Map<String, Double>>(){}.getType(); \n+    Map<String, Double> map = gson.fromJson(jsonStr, type);\n+    if (map.containsKey(\"typed\") && map.containsKey(\"total\")) {\n+        double typed = map.get(\"typed\");\n+        double total = map.get(\"total\");\n+        return typed / total * 100;\n+    } else {\n+        return 0.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}