{
    "patch": "} else if (NodeUtil.isAssignmentOp(parent) && parent.getLastChild().isCall() && parent.getFirstChild() == n) {\n      // Exclude the rhs of the assignment expression if it is a call expression, from being associated with the lhs.\n      return;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..56c305ca 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -575,7 +575,9 @@ final class NameAnalyzer implements CompilerPass {\n           } else {\n             recordDepScope(nameNode, ns);\n           }\n-        } else {\n+} else if (NodeUtil.isAssignmentOp(parent) && parent.getLastChild().isCall() && parent.getFirstChild() == n) {\n+      // Exclude the rhs of the assignment expression if it is a call expression, from being associated with the lhs.\n+      return;\n           // The rhs of the assignment is the caller, so it's used by the\n           // context. Don't associate it w/ the lhs.\n           // FYI: this fixes only the specific case where the assignment is the",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}