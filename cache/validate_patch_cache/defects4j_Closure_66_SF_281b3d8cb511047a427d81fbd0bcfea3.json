{
    "patch": "import java.util.Map;\nimport com.google.gson.Gson;\nimport java.util.List;\n\npublic class Solution {\n    public static double getTypedPercent(String json) {\n        Gson gson = new Gson();\n        Map<String,Object> map = gson.fromJson(json, Map.class);\n        double total = ((Number) map.get(\"total\")).doubleValue();\n        List<Map<String,String>> list = (List<Map<String,String>>) map.get(\"list\");\n        double Tcount = 0;\n        for (Map<String,String> item : list) {\n            if (\"T\".equals(item.get(\"type\"))) {\n                Tcount++;\n            }\n        }\n        return (Tcount / total) * 100;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..6a285d68 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+import java.util.Map;\n+import com.google.gson.Gson;\n+import java.util.List;\n+\n+public class Solution {\n+    public static double getTypedPercent(String json) {\n+        Gson gson = new Gson();\n+        Map<String,Object> map = gson.fromJson(json, Map.class);\n+        double total = ((Number) map.get(\"total\")).doubleValue();\n+        List<Map<String,String>> list = (List<Map<String,String>>) map.get(\"list\");\n+        double Tcount = 0;\n+        for (Map<String,String> item : list) {\n+            if (\"T\".equals(item.get(\"type\"))) {\n+                Tcount++;\n+            }\n+        }\n+        return (Tcount / total) * 100;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}