{
    "patch": "public double[] distributionClone(double[] genotypeProbabilities, int M, int D, int N) {\n    double[] p = new double[M];\n\n    for (int i = 0; i < M; i++) {\n        p[i] = genotypeProbabilities[i];\n    }\n\n    double[] t = new double[M];\n\n    for (int d = 0; d < D; d++) {\n        for (int i = 0; i < M; i++) {\n            for (int j = 0; j < M; j++) {\n                t[getDominant(i, j, M)] += p[i] * genotypeProbabilities[j];\n            }\n        }\n        p = t;\n        t = new double[M];\n    }\n\n    double[] result = new double[N + 1];\n\n    for (int i = 0; i < M; i++) {\n        result[populationCount(i)] += p[i];\n    }\n\n    for (int i = 0; i < result.length; i++) {\n        result[i] /= Math.pow(M, D);\n    }\n\n    return result;\n}\n\nprivate int getDominant(int i, int j, int M) {\n    int dominant = 0;\n\n    if (i > j) {\n        dominant = getDominant(j, i, M);\n    } else {\n        dominant = M * (M - 1) / 2 - M * (M - 1) / 2 * (M - i) / (M * (M - 1)) - (M - i) * (M - j - 1) / 2;\n    }\n\n    return dominant;\n}\n\nprivate int populationCount(int p) {\n    int count = 0;\n\n    while (p > 0) {\n        if (p % 2 == 1) {\n            count++;\n        }\n        p /= 2;\n    }\n\n    return count;\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}