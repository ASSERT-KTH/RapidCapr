{
    "patch": "    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        double[] tmp2 = new double[getSize()];\n        copySign(y, 0, x, xOffset, tmp1, 0);  // |y|\n        copySign(x, 0, y, yOffset, tmp2, 0);  // |x|\n        double[] r = new double[getSize()];\n        add(tmp1, 0, tmp2, 0, tmp1, 0);  // |x| + |y|\n        hypot(tmp1, 0, r, 0);  // r = sqrt(|x|^2 + |y|^2)\n\n        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n        if (Double.isNaN(r[0])) {\n            if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {\n                result[resultOffset] = Double.NaN;\n            } else if (Double.isInfinite(y[yOffset]) && Double.isInfinite(x[xOffset])) {\n                if (x[xOffset] > 0) {\n                    result[resultOffset] = (y[yOffset] > 0 ? FastMath.PI / 4 : -3d * FastMath.PI / 4);\n                } else {\n                    result[resultOffset] = (y[yOffset] > 0 ? 3d * FastMath.PI / 4 : -FastMath.PI / 4);\n                }\n            } else if (Double.isInfinite(y[yOffset])) {\n                result[resultOffset] = (y[yOffset] > 0 ? FastMath.PI / 2 : -FastMath.PI / 2);\n            } else if (Double.isInfinite(x[xOffset])) {\n                result[resultOffset] = (x[xOffset] > 0 ? 0.0 : FastMath.PI);\n            }\n        } else if (r[0] == 0) {\n            result[resultOffset] = (Double.doubleToLongBits(x[xOffset]) == Double.doubleToLongBits(0.0) &&\n                                     Double.doubleToLongBits(y[yOffset]) == Double.doubleToLongBits(0.0)) ? \n                                     Double.NaN : (Double.doubleToLongBits(x[xOffset]) >= 0) ? \n                                     (Double.doubleToLongBits(y[yOffset]) >= 0 ? 0.0 : -0.0) : \n                                     (Double.doubleToLongBits(y[yOffset]) >= 0 ? FastMath.PI : -FastMath.PI);\n        } else {\n            \n            // compute atan2(y, x) = atan(|y|/|x|) * sign(x)\n            atan(tmp1, 0, tmp2, 0);\n            copySign(tmp2, 0, x, xOffset, tmp1, 0);\n            result[resultOffset] = tmp1[0];\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..97757700a 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1385,38 +1385,41 @@ public class DSCompiler {\n \n         // compute r = sqrt(x^2+y^2)\n         double[] tmp1 = new double[getSize()];\n-        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n         double[] tmp2 = new double[getSize()];\n-        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n-        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n-        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n-\n-        if (x[xOffset] >= 0) {\n-\n-            // compute atan2(y, x) = 2 atan(y / (r + x))\n-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n-            for (int i = 0; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n-            }\n-\n-        } else {\n+        copySign(y, 0, x, xOffset, tmp1, 0);  // |y|\n+        copySign(x, 0, y, yOffset, tmp2, 0);  // |x|\n+        double[] r = new double[getSize()];\n+        add(tmp1, 0, tmp2, 0, tmp1, 0);  // |x| + |y|\n+        hypot(tmp1, 0, r, 0);  // r = sqrt(|x|^2 + |y|^2)\n \n-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n-            result[resultOffset] =\n-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n-            for (int i = 1; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n+        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+        if (Double.isNaN(r[0])) {\n+            if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {\n+                result[resultOffset] = Double.NaN;\n+            } else if (Double.isInfinite(y[yOffset]) && Double.isInfinite(x[xOffset])) {\n+                if (x[xOffset] > 0) {\n+                    result[resultOffset] = (y[yOffset] > 0 ? FastMath.PI / 4 : -3d * FastMath.PI / 4);\n+                } else {\n+                    result[resultOffset] = (y[yOffset] > 0 ? 3d * FastMath.PI / 4 : -FastMath.PI / 4);\n+                }\n+            } else if (Double.isInfinite(y[yOffset])) {\n+                result[resultOffset] = (y[yOffset] > 0 ? FastMath.PI / 2 : -FastMath.PI / 2);\n+            } else if (Double.isInfinite(x[xOffset])) {\n+                result[resultOffset] = (x[xOffset] > 0 ? 0.0 : FastMath.PI);\n             }\n-\n+        } else if (r[0] == 0) {\n+            result[resultOffset] = (Double.doubleToLongBits(x[xOffset]) == Double.doubleToLongBits(0.0) &&\n+                                     Double.doubleToLongBits(y[yOffset]) == Double.doubleToLongBits(0.0)) ? \n+                                     Double.NaN : (Double.doubleToLongBits(x[xOffset]) >= 0) ? \n+                                     (Double.doubleToLongBits(y[yOffset]) >= 0 ? 0.0 : -0.0) : \n+                                     (Double.doubleToLongBits(y[yOffset]) >= 0 ? FastMath.PI : -FastMath.PI);\n+        } else {\n+            \n+            // compute atan2(y, x) = atan(|y|/|x|) * sign(x)\n+            atan(tmp1, 0, tmp2, 0);\n+            copySign(tmp2, 0, x, xOffset, tmp1, 0);\n+            result[resultOffset] = tmp1[0];\n         }\n-\n-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n-\n     }\n \n     /** Compute hyperbolic cosine of a derivative structure.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}