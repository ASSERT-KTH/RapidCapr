{
    "patch": "  public void matchConstraint(ObjectType constraintObj) {\n    // We only want to match contraints on anonymous types.\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking any each property on the record and trying to match\n    // properties on this object.\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!hasProperty(prop)) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                .getLeastSupertype(propType);\n          }\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    } else {\n      // Handle the case where the constraint object is a function type.\n      //\n      // We want to modify the function signature to match the constraint.\n      FunctionType functionType = constraintObj.getFunTypeIfSingletonObj().getFunType();\n      if (functionType != null && !getJSType().isFunctionType()) {\n        defineDeclaredType(getCommonTypes().fromFunctionType(functionType), null);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..894b657d 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -576,6 +576,14 @@ class PrototypeObjectType extends ObjectType {\n           defineInferredProperty(prop, typeToInfer, null);\n         }\n       }\n+    } else {\n+      // Handle the case where the constraint object is a function type.\n+      //\n+      // We want to modify the function signature to match the constraint.\n+      FunctionType functionType = constraintObj.getFunTypeIfSingletonObj().getFunType();\n+      if (functionType != null && !getJSType().isFunctionType()) {\n+        defineDeclaredType(getCommonTypes().fromFunctionType(functionType), null);\n+      }\n     }\n   }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}