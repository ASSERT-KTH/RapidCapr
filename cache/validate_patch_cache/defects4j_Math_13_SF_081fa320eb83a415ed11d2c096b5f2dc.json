{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final double eps = 1e-10;\n    final int n = m.getRowDimension();\n    final EigenDecomposition eig = new EigenDecomposition(m);\n    final RealMatrix v = eig.getV();\n    final RealMatrix d = eig.getD();\n\n    final double[] sqrtEigenvalues = new double[n];\n    for (int i = 0; i < n; i++) {\n        double eigenvalue = d.getEntry(i, i);\n        if (eigenvalue < -eps) {\n            throw new IllegalArgumentException(\"Input matrix is not positive definite\");\n        }\n        if (eigenvalue < eps) {\n            sqrtEigenvalues[i] = 0;\n        } else {\n            sqrtEigenvalues[i] = Math.sqrt(eigenvalue);\n        }\n    }\n\n    RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEigenvalues);\n    RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..c40873c8e 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,28 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final double eps = 1e-10;\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition eig = new EigenDecomposition(m);\n+    final RealMatrix v = eig.getV();\n+    final RealMatrix d = eig.getD();\n+\n+    final double[] sqrtEigenvalues = new double[n];\n+    for (int i = 0; i < n; i++) {\n+        double eigenvalue = d.getEntry(i, i);\n+        if (eigenvalue < -eps) {\n+            throw new IllegalArgumentException(\"Input matrix is not positive definite\");\n+        }\n+        if (eigenvalue < eps) {\n+            sqrtEigenvalues[i] = 0;\n+        } else {\n+            sqrtEigenvalues[i] = Math.sqrt(eigenvalue);\n+        }\n     }\n+\n+    RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEigenvalues);\n+    RealMatrix sqrtM = v.multiply(sqrtD).multiply(v.transpose());\n+    return sqrtM;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}