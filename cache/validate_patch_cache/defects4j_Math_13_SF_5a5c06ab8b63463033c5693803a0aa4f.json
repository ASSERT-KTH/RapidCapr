{
    "patch": "import org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.LUDecomposition;\nimport org.apache.commons.math3.linear.RealMatrix;\n\nprivate static final int MAX_SIZE = 10000; // maximum size of a matrix that can be processed by EigenDecomposition\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    if (m.getRowDimension() * m.getColumnDimension() > MAX_SIZE) {\n        // matrix is too large for EigenDecomposition, use LU decomposition instead\n        LUDecomposition lu = new LUDecomposition(m);\n        RealMatrix l = lu.getL();\n        RealMatrix u = lu.getU();\n        // compute the square root matrix using L and U factors\n        for (int i = 0; i < l.getRowDimension(); i++) {\n            for (int j = 0; j < l.getColumnDimension(); j++) {\n                double root = FastMath.sqrt(l.getEntry(i, i) * u.getEntry(j, j));\n                l.setEntry(i, j, root);\n            }\n        }\n        return l.multiply(u);\n    } else {\n        EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..199abccd6 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,30 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n+import org.apache.commons.math3.linear.EigenDecomposition;\n+import org.apache.commons.math3.linear.LUDecomposition;\n+import org.apache.commons.math3.linear.RealMatrix;\n+\n+private static final int MAX_SIZE = 10000; // maximum size of a matrix that can be processed by EigenDecomposition\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    if (m.getRowDimension() * m.getColumnDimension() > MAX_SIZE) {\n+        // matrix is too large for EigenDecomposition, use LU decomposition instead\n+        LUDecomposition lu = new LUDecomposition(m);\n+        RealMatrix l = lu.getL();\n+        RealMatrix u = lu.getU();\n+        // compute the square root matrix using L and U factors\n+        for (int i = 0; i < l.getRowDimension(); i++) {\n+            for (int j = 0; j < l.getColumnDimension(); j++) {\n+                double root = FastMath.sqrt(l.getEntry(i, i) * u.getEntry(j, j));\n+                l.setEntry(i, j, root);\n+            }\n+        }\n+        return l.multiply(u);\n+    } else {\n+        EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n     }\n }\n+}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}