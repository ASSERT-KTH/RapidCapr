{
    "patch": "import org.joda.time.DateTimeFieldType;\nimport org.joda.time.DurationField;\nimport org.joda.time.DurationFieldType;\nimport org.joda.time.IllegalFieldValueException;\nimport org.joda.time.LocalDate;\nimport org.joda.time.chrono.ISOChronology;\nimport org.joda.time.chrono.ZonedChronology;\nimport org.joda.time.field.FieldUtils;\nimport org.joda.time.tz.FixedDateTimeZone;\nimport org.joda.time.tz.DateTimeZoneBuilder;\n\npublic long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e = new IllegalFieldValueException(\"Cannot parse \\\"\" + text + \"\\\"\", e);\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        DateTimeZoneBuilder builder = new DateTimeZoneBuilder();\n        builder.setFixedSavings(\"\", 0);\n        builder.addCutover(millis, iZone.getOffset(millis), iZone.getStandardOffset(), Integer.MAX_VALUE, true, 0);\n        DateTimeZone zoned = builder.toDateTimeZone(iZone.getID(), true);\n        ZonedChronology zonedChrono = ZonedChronology.getInstance(ISOChronology.getInstance(), zoned);\n\n        long newMillis = zonedChrono.getDateTimeMillis(iChrono.year().get(millis), iChrono.monthOfYear().get(millis), iChrono.dayOfMonth().get(millis), iChrono.millisOfDay().get(millis));\n        if (zoned.getOffset(newMillis) != iZone.getOffset(millis)) {\n            if (resetFields) {\n                reset();\n                savedFields = iSavedFields;\n                count = iSavedFieldsCount;\n                if (iSavedFieldsShared) {\n                    iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n                    iSavedFieldsShared = false;\n                }\n                sort(savedFields, count);\n                try {\n                    for (int i = 0; i < count; i++) {\n                        millis = savedFields[i].set(millis, true);\n                    }\n                } catch (IllegalFieldValueException e) {\n                    if (text != null) {\n                        e = new IllegalFieldValueException(\"Cannot parse \\\"\" + text + \"\\\"\", e);\n                    }\n                    throw e;\n                }\n                DateTimeZoneBuilder newBuilder = new DateTimeZoneBuilder();\n                newBuilder.setFixedSavings(\"\", 0);\n                newBuilder.addCutover(millis, iZone.getOffset(millis), iZone.getStandardOffset(), Integer.MAX_VALUE, true, 0);\n                DateTimeZone newZoned = newBuilder.toDateTimeZone(iZone.getID(), true);\n                ZonedChronology newZonedChrono = ZonedChronology.getInstance(ISOChronology.getInstance(), newZoned);\n\n                newMillis = newZonedChrono.getDateTimeMillis(iChrono.year().get(millis), iChrono.monthOfYear().get(millis), iChrono.dayOfMonth().get(millis), iChrono.millisOfDay().get(millis));\n            } else {\n                newMillis = 0L;\n            }\n        } else {\n            newMillis -= zoned.getOffset(newMillis);\n        }\n        millis = newMillis;\n    }\n\n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..f60dfb5f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,96 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n-            }\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n+import org.joda.time.IllegalFieldValueException;\n+import org.joda.time.LocalDate;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.ZonedChronology;\n+import org.joda.time.field.FieldUtils;\n+import org.joda.time.tz.FixedDateTimeZone;\n+import org.joda.time.tz.DateTimeZoneBuilder;\n+\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+    if (count > 0) {\n+        // alter base year for parsing if first field is month or day\n+        DurationField months = DurationFieldType.months().getField(iChrono);\n+        DurationField days = DurationFieldType.days().getField(iChrono);\n+        DurationField first = savedFields[0].iField.getDurationField();\n+        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+            saveField(DateTimeFieldType.year(), iDefaultYear);\n+            return computeMillis(resetFields, text);\n         }\n+    }\n \n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n-            }\n-            throw e;\n+    long millis = iMillis;\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e = new IllegalFieldValueException(\"Cannot parse \\\"\" + text + \"\\\"\", e);\n+        }\n+        throw e;\n+    }\n+\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        DateTimeZoneBuilder builder = new DateTimeZoneBuilder();\n+        builder.setFixedSavings(\"\", 0);\n+        builder.addCutover(millis, iZone.getOffset(millis), iZone.getStandardOffset(), Integer.MAX_VALUE, true, 0);\n+        DateTimeZone zoned = builder.toDateTimeZone(iZone.getID(), true);\n+        ZonedChronology zonedChrono = ZonedChronology.getInstance(ISOChronology.getInstance(), zoned);\n+\n+        long newMillis = zonedChrono.getDateTimeMillis(iChrono.year().get(millis), iChrono.monthOfYear().get(millis), iChrono.dayOfMonth().get(millis), iChrono.millisOfDay().get(millis));\n+        if (zoned.getOffset(newMillis) != iZone.getOffset(millis)) {\n+            if (resetFields) {\n+                reset();\n+                savedFields = iSavedFields;\n+                count = iSavedFieldsCount;\n+                if (iSavedFieldsShared) {\n+                    iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n+                    iSavedFieldsShared = false;\n+                }\n+                sort(savedFields, count);\n+                try {\n+                    for (int i = 0; i < count; i++) {\n+                        millis = savedFields[i].set(millis, true);\n+                    }\n+                } catch (IllegalFieldValueException e) {\n+                    if (text != null) {\n+                        e = new IllegalFieldValueException(\"Cannot parse \\\"\" + text + \"\\\"\", e);\n+                    }\n+                    throw e;\n                 }\n-                throw new IllegalArgumentException(message);\n+                DateTimeZoneBuilder newBuilder = new DateTimeZoneBuilder();\n+                newBuilder.setFixedSavings(\"\", 0);\n+                newBuilder.addCutover(millis, iZone.getOffset(millis), iZone.getStandardOffset(), Integer.MAX_VALUE, true, 0);\n+                DateTimeZone newZoned = newBuilder.toDateTimeZone(iZone.getID(), true);\n+                ZonedChronology newZonedChrono = ZonedChronology.getInstance(ISOChronology.getInstance(), newZoned);\n+\n+                newMillis = newZonedChrono.getDateTimeMillis(iChrono.year().get(millis), iChrono.monthOfYear().get(millis), iChrono.dayOfMonth().get(millis), iChrono.millisOfDay().get(millis));\n+            } else {\n+                newMillis = 0L;\n             }\n+        } else {\n+            newMillis -= zoned.getOffset(newMillis);\n         }\n-        \n-        return millis;\n+        millis = newMillis;\n     }\n+\n+    return millis;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}