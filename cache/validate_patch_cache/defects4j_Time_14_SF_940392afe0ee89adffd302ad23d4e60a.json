{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            boolean isLeapYear = false;\n            int originalMonthOfYearValue = 0;\n\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                if (i == fieldIndex && partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\n                    isLeapYear = iChronology.isLeapYear(values[iChronology.monthOfYear().getField(instant)]);\n                    originalMonthOfYearValue = values[i];\n                    values[i] += valueToAdd;\n                } else {\n                    values[i] = partial.getFieldType(i).getField(iChronology).add(values[i], valueToAdd);\n                }\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n\n            if (isLeapYear) {\n                try {\n                    instant = iChronology.dayOfMonth().set(instant, originalMonthOfYearValue);\n                } catch (IllegalFieldValueException e) {\n                    instant = iChronology.dayOfMonth().set(instant, originalMonthOfYearValue - 1);\n                }\n            }\n\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..11d84aa1 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,12 +206,31 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n+            boolean isLeapYear = false;\n+            int originalMonthOfYearValue = 0;\n+\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n+                if (i == fieldIndex && partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\n+                    isLeapYear = iChronology.isLeapYear(values[iChronology.monthOfYear().getField(instant)]);\n+                    originalMonthOfYearValue = values[i];\n+                    values[i] += valueToAdd;\n+                } else {\n+                    values[i] = partial.getFieldType(i).getField(iChronology).add(values[i], valueToAdd);\n+                }\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n+\n+            if (isLeapYear) {\n+                try {\n+                    instant = iChronology.dayOfMonth().set(instant, originalMonthOfYearValue);\n+                } catch (IllegalFieldValueException e) {\n+                    instant = iChronology.dayOfMonth().set(instant, originalMonthOfYearValue - 1);\n+                }\n+            }\n+\n             instant = add(instant, valueToAdd);\n             return iChronology.get(partial, instant);\n         } else {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}