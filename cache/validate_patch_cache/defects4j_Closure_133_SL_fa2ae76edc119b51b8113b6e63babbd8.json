{
    "patch": "  private void parse() {\n    if (inferredParamType != null) {\n        currParam.setType(inferredParamType);\n    }\n    if (currParam != null) {\n        funcNode.addParameter(currParam);\n    }\n    inferredParamType = null;\n    currParam = null;\n    currParamName = null;\n    if (stream.skipAndPeek(\"/\") && !stream.skip(\"*\")) {\n        return;\n    }\n    while (!stream.peek(\"/\")) {\n        if (stream.peekAtRegex(\"@[a-zA-Z]+\")) {\n            stream.eat(\"@\");\n            String tagName = stream.eatRegex(\"[a-zA-Z]+\");\n            JSDocInfo.ParserInfo info =\n                JSDocInfo.getJsDocParserInfoForTagName(tagName);\n            ...\n        }\n        else if (stream.peekAtRegex(\"\\\\s+$\")) {\n            getRemainingJSDocLine();  // skip whitespace\n        } else {  // unexpected text not starting with \"*\" or \"@\"\n            break;\n        }\n    }\n    stream.eat(\"/\");\n    stream.eat(\"*\");\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..7f56f47e 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,36 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+  private void parse() {\n+    if (inferredParamType != null) {\n+        currParam.setType(inferredParamType);\n+    }\n+    if (currParam != null) {\n+        funcNode.addParameter(currParam);\n+    }\n+    inferredParamType = null;\n+    currParam = null;\n+    currParamName = null;\n+    if (stream.skipAndPeek(\"/\") && !stream.skip(\"*\")) {\n+        return;\n+    }\n+    while (!stream.peek(\"/\")) {\n+        if (stream.peekAtRegex(\"@[a-zA-Z]+\")) {\n+            stream.eat(\"@\");\n+            String tagName = stream.eatRegex(\"[a-zA-Z]+\");\n+            JSDocInfo.ParserInfo info =\n+                JSDocInfo.getJsDocParserInfoForTagName(tagName);\n+            ...\n+        }\n+        else if (stream.peekAtRegex(\"\\\\s+$\")) {\n+            getRemainingJSDocLine();  // skip whitespace\n+        } else {  // unexpected text not starting with \"*\" or \"@\"\n+            break;\n+        }\n+    }\n+    stream.eat(\"/\");\n+    stream.eat(\"*\");\n+  }\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}