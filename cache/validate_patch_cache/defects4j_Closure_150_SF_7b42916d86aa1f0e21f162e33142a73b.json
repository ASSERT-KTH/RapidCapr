{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) throws RuntimeException {\n    try {\n        if (n == null || parent == null) {\n            return;\n        }\n\n        if (n.isFunction()) {\n            if (parent.isCall()) {\n                if (parent.getFirstChild().isFunction()) {\n                    defineDeclaredFunction(parent.getFirstChild(), parent.getFirstChild().getParent());\n                    return;\n                } else {\n                    handleFunctionInputs(parent);\n                    return;\n                }\n            } else if (parent.isStringKey() || parent.isGetterDef() || parent.isSetterDef() || parent.isComputedProp() ||\n                parent.isClassMembers() || parent.isClass()) {\n                // ignore anonymous function expressions used only as property values or setters, or computed property keys or class members\n                return;\n            } else {\n                defineDeclaredFunction(n, parent);\n            }\n        } else if (n.isVar()) {\n            defineVar(n, parent);\n        } else if (n.isCatch()) {\n            defineCatch(n, parent);\n        }\n\n        attachLiteralTypes(n);\n    } catch (Exception e) {\n        System.err.println(\"Exception during traversal: \" + e.getMessage());\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..865bc9d4 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,40 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) throws RuntimeException {\n+    try {\n+        if (n == null || parent == null) {\n+            return;\n+        }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+        if (n.isFunction()) {\n+            if (parent.isCall()) {\n+                if (parent.getFirstChild().isFunction()) {\n+                    defineDeclaredFunction(parent.getFirstChild(), parent.getFirstChild().getParent());\n+                    return;\n+                } else {\n+                    handleFunctionInputs(parent);\n+                    return;\n+                }\n+            } else if (parent.isStringKey() || parent.isGetterDef() || parent.isSetterDef() || parent.isComputedProp() ||\n+                parent.isClassMembers() || parent.isClass()) {\n+                // ignore anonymous function expressions used only as property values or setters, or computed property keys or class members\n+                return;\n+            } else {\n+                defineDeclaredFunction(n, parent);\n+            }\n+        } else if (n.isVar()) {\n+            defineVar(n, parent);\n+        } else if (n.isCatch()) {\n+            defineCatch(n, parent);\n+        }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        attachLiteralTypes(n);\n+    } catch (Exception e) {\n+        System.err.println(\"Exception during traversal: \" + e.getMessage());\n     }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}