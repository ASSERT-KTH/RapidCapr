{
    "patch": "if (provided == null || !provided.isExplicitlyProvided()) {\n    Node grandparent = parent.getParent();\n    if (grandparent != null) {\n      Node removeNode = parent;\n      if (parent.getNext() != null && parent.getNext().isComma()) {\n        // If there is a comma after parent node, we need to remove that too\n        removeNode = parent.getNext();\n      }\n      grandparent.removeChild(removeNode);\n      compiler.reportCodeChange();\n    }\n    unrecognizedRequires.add(\n        new UnrecognizedRequire(n, ns, t.getSourceName()));\n} else {\n    JSModule providedModule = provided.explicitModule;\n\n    if (providedModule == null) {\n        compiler.report(t.makeError(\n            n, NAME_NOT_PROVIDED_WARNING, ns));\n    } else if (moduleGraph != null) {\n        JSModule module = t.getModule();\n        if (module != providedModule &&\n            !moduleGraph.dependsOn(module, providedModule)) {\n          compiler.report(\n            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                providedModule.getName(),\n                module.getName()));\n        }\n    }\n\n    maybeAddToSymbolTable(left);\n    maybeAddStringNodeToSymbolTable(arg);\n\n    parent.detachFromParent();\n    if (parent.getNext() != null && parent.getNext().isComma()) {\n        // If there is a comma after parent node, we need to remove that too\n        parent.getNext().detachFromParent();\n    }\n    compiler.reportCodeChange();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..eaa16719 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,46 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+if (provided == null || !provided.isExplicitlyProvided()) {\n+    Node grandparent = parent.getParent();\n+    if (grandparent != null) {\n+      Node removeNode = parent;\n+      if (parent.getNext() != null && parent.getNext().isComma()) {\n+        // If there is a comma after parent node, we need to remove that too\n+        removeNode = parent.getNext();\n+      }\n+      grandparent.removeChild(removeNode);\n+      compiler.reportCodeChange();\n+    }\n+    unrecognizedRequires.add(\n+        new UnrecognizedRequire(n, ns, t.getSourceName()));\n+} else {\n+    JSModule providedModule = provided.explicitModule;\n+\n+    if (providedModule == null) {\n+        compiler.report(t.makeError(\n+            n, NAME_NOT_PROVIDED_WARNING, ns));\n+    } else if (moduleGraph != null) {\n+        JSModule module = t.getModule();\n+        if (module != providedModule &&\n+            !moduleGraph.dependsOn(module, providedModule)) {\n+          compiler.report(\n+            t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+                providedModule.getName(),\n+                module.getName()));\n+        }\n+    }\n+\n+    maybeAddToSymbolTable(left);\n+    maybeAddStringNodeToSymbolTable(arg);\n+\n+    parent.detachFromParent();\n+    if (parent.getNext() != null && parent.getNext().isComma()) {\n+        // If there is a comma after parent node, we need to remove that too\n+        parent.getNext().detachFromParent();\n+    }\n+    compiler.reportCodeChange();\n+}\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}