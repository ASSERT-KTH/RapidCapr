{
    "patch": "  public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    if (!this.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n\n    // Required and optional parameters in arrow types are interchangeable\n    // in the subtype relation.\n    while (thisParam != null && thatParam != null) {\n      JSType thisParamType = thisParam.getJSType();\n      JSType thatParamType = thatParam.getJSType();\n\n      if (thisParamType != null) {\n        // If this param is required, the corresponding that param must be\n        // either required or varargs. If it is varargs, we will assume it\n        // matches and deal with the remaining parameters later.\n        if (!thisParam.isVarArgs() && (thatParamType == null || thatParam.isOptional())) {\n          return false;\n        }\n\n        // Check that the parameter type is a subtype of the corresponding parameter in the other arrow type.\n        // If the other parameter is varargs, check that the parameter type is a subtype of the element type of\n        // the varargs array.\n        if (!thisParamType.isSubtype(thatParam.isVarArgs() ? thatParamType.getArrayElementType() : thatParamType)) {\n          return false;\n        }\n\n      } else if (thatParamType != null && !thatParam.isOptional()) {\n        // If that param is required, the corresponding this param must be optional.\n        // Otherwise, there is no subtyping relation between the arrow functions.\n        return false;\n      }\n\n      // Advance the parameter nodes along both function signatures.\n      thisParam = thisParam.getNext();\n      thatParam = thatParam.getNext();\n    }\n\n    // If the two function signatures have a different number of parameters,\n    // check that the remaining parameters in the that signature are all varargs.\n    if (thisParam != null) {\n      while (thisParam != null) {\n        if (!thisParam.isVarArgs()) {\n          return false;\n        }\n        thisParam = thisParam.getNext();\n      }\n    } else if (thatParam != null && !thatParam.isVarArgs()) {\n      return false;\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..4c49b77c 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -84,71 +84,57 @@ final class ArrowType extends JSType {\n \n     ArrowType that = (ArrowType) other;\n \n-    // This is described in Draft 2 of the ES4 spec,\n-    // Section 3.4.7: Subtyping Function Types.\n-\n-    // this.returnType <: that.returnType (covariant)\n     if (!this.returnType.isSubtype(that.returnType)) {\n       return false;\n     }\n \n-    // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n     Node thisParam = parameters.getFirstChild();\n     Node thatParam = that.parameters.getFirstChild();\n+\n+    // Required and optional parameters in arrow types are interchangeable\n+    // in the subtype relation.\n     while (thisParam != null && thatParam != null) {\n       JSType thisParamType = thisParam.getJSType();\n       JSType thatParamType = thatParam.getJSType();\n+\n       if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n+        // If this param is required, the corresponding that param must be\n+        // either required or varargs. If it is varargs, we will assume it\n+        // matches and deal with the remaining parameters later.\n+        if (!thisParam.isVarArgs() && (thatParamType == null || thatParam.isOptional())) {\n           return false;\n         }\n-      }\n-\n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n \n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+        // Check that the parameter type is a subtype of the corresponding parameter in the other arrow type.\n+        // If the other parameter is varargs, check that the parameter type is a subtype of the element type of\n+        // the varargs array.\n+        if (!thisParamType.isSubtype(thatParam.isVarArgs() ? thatParamType.getArrayElementType() : thatParamType)) {\n+          return false;\n+        }\n \n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n-        thisParam = thisParam.getNext();\n-      }\n-      if (!thatIsVarArgs) {\n-        thatParam = thatParam.getNext();\n+      } else if (thatParamType != null && !thatParam.isOptional()) {\n+        // If that param is required, the corresponding this param must be optional.\n+        // Otherwise, there is no subtyping relation between the arrow functions.\n+        return false;\n       }\n \n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n-      }\n+      // Advance the parameter nodes along both function signatures.\n+      thisParam = thisParam.getNext();\n+      thatParam = thatParam.getNext();\n     }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n+    // If the two function signatures have a different number of parameters,\n+    // check that the remaining parameters in the that signature are all varargs.\n+    if (thisParam != null) {\n+      while (thisParam != null) {\n+        if (!thisParam.isVarArgs()) {\n+          return false;\n+        }\n+        thisParam = thisParam.getNext();\n+      }\n+    } else if (thatParam != null && !thatParam.isVarArgs()) {\n+      return false;\n+    }\n \n     return true;\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}