{
    "patch": "private void replaceAssignmentExpression(Var v, Reference ref,\n                                             Map<String, String> varmap) {\n      Node val = ref.getAssignedValue();\n      blacklistVarReferencesInTree(val, v.scope);\n      Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n      Map<String, Node> assignments = new HashMap<>();\n      for (Node key = val.getFirstChild(); key != null;\n           key = key.getNext()) {\n        String var = key.getString();\n        Node value = key.removeFirstChild();\n        // TODO(user): Copy type information.\n        assignments.put(varmap.get(var), value);\n      }\n      Node assignNode = null;\n      for (Map.Entry<String, Node> entry : assignments.entrySet()) {\n        Node nameNode = Node.newString(Token.NAME, entry.getKey());\n        Node assign = new Node(Token.ASSIGN, nameNode, entry.getValue());\n        if (assignNode == null) {\n          assignNode = assign;\n        } else {\n          assignNode = new Node(Token.COMMA, assignNode, assign);\n        }\n      }\n      for (String var : Sets.difference(varmap.keySet(), assignments.keySet())) {\n        Node nameNode = Node.newString(Token.NAME, varmap.get(var));\n        Node assign = new Node(Token.ASSIGN, nameNode,\n            NodeUtil.newUndefinedNode(null));\n        if (assignNode == null) {\n          assignNode = assign;\n        } else {\n          assignNode = new Node(Token.COMMA, assignNode, assign);\n        }\n      }\n      Node replacement = new Node(Token.COMMA, assignNode, new Node(Token.TRUE));\n      Node replace = ref.getParent();\n      replacement.copyInformationFromForTree(replace);\n      if (replace.getType() == Token.VAR) {\n        replace.getParent().replaceChild(\n            replace, NodeUtil.newExpr(replacement));\n      } else {\n        replace.getParent().replaceChild(replace, replacement);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9061925d..bad37e43 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -300,57 +300,42 @@ class InlineObjectLiterals implements CompilerPass {\n      * Note that the resulting expression will always evaluate to\n      * true, as would the x = {...} expression.\n      */\n-    private void replaceAssignmentExpression(Var v, Reference ref,\n+private void replaceAssignmentExpression(Var v, Reference ref,\n                                              Map<String, String> varmap) {\n-      // Compute all of the assignments necessary\n-      List<Node> nodes = Lists.newArrayList();\n       Node val = ref.getAssignedValue();\n       blacklistVarReferencesInTree(val, v.scope);\n       Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n-      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n+      Map<String, Node> assignments = new HashMap<>();\n       for (Node key = val.getFirstChild(); key != null;\n            key = key.getNext()) {\n         String var = key.getString();\n         Node value = key.removeFirstChild();\n         // TODO(user): Copy type information.\n-        nodes.add(\n-          new Node(Token.ASSIGN,\n-                   Node.newString(Token.NAME, varmap.get(var)), value));\n-        all.remove(var);\n+        assignments.put(varmap.get(var), value);\n       }\n-\n-      // TODO(user): Better source information.\n-      for (String var : all) {\n-        nodes.add(\n-          new Node(Token.ASSIGN,\n-                   Node.newString(Token.NAME, varmap.get(var)),\n-                   NodeUtil.newUndefinedNode(null)));\n+      Node assignNode = null;\n+      for (Map.Entry<String, Node> entry : assignments.entrySet()) {\n+        Node nameNode = Node.newString(Token.NAME, entry.getKey());\n+        Node assign = new Node(Token.ASSIGN, nameNode, entry.getValue());\n+        if (assignNode == null) {\n+          assignNode = assign;\n+        } else {\n+          assignNode = new Node(Token.COMMA, assignNode, assign);\n+        }\n       }\n-\n-      Node replacement;\n-        // All assignments evaluate to true, so make sure that the\n-        // expr statement evaluates to true in case it matters.\n-        nodes.add(new Node(Token.TRUE));\n-\n-        // Join these using COMMA.  A COMMA node must have 2 children, so we\n-        // create a tree. In the tree the first child be the COMMA to match\n-        // the parser, otherwise tree equality tests fail.\n-        nodes = Lists.reverse(nodes);\n-        replacement = new Node(Token.COMMA);\n-        Node cur = replacement;\n-        int i;\n-        for (i = 0; i < nodes.size() - 2; i++) {\n-          cur.addChildToFront(nodes.get(i));\n-          Node t = new Node(Token.COMMA);\n-          cur.addChildToFront(t);\n-          cur = t;\n+      for (String var : Sets.difference(varmap.keySet(), assignments.keySet())) {\n+        Node nameNode = Node.newString(Token.NAME, varmap.get(var));\n+        Node assign = new Node(Token.ASSIGN, nameNode,\n+            NodeUtil.newUndefinedNode(null));\n+        if (assignNode == null) {\n+          assignNode = assign;\n+        } else {\n+          assignNode = new Node(Token.COMMA, assignNode, assign);\n         }\n-        cur.addChildToFront(nodes.get(i));\n-        cur.addChildToFront(nodes.get(i + 1));\n-\n+      }\n+      Node replacement = new Node(Token.COMMA, assignNode, new Node(Token.TRUE));\n       Node replace = ref.getParent();\n       replacement.copyInformationFromForTree(replace);\n-\n       if (replace.getType() == Token.VAR) {\n         replace.getParent().replaceChild(\n             replace, NodeUtil.newExpr(replacement));",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}