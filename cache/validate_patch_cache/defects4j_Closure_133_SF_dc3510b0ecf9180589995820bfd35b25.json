{
    "patch": "private String getRemainingJSDocLine() {\n    String result = stream.getRemainingJSDocLine();\n    if (result == null){\n        throw new IllegalStateException(\"Null JSDoc line\");\n    }\n    String trimmedResult = result.trim();\n    if (trimmedResult.isEmpty()){\n        return \"\";\n    }\n    int startIndex = 0;\n    while (startIndex < trimmedResult.length() && trimmedResult.charAt(startIndex) == '*') {\n        startIndex++;\n    }\n    return trimmedResult.substring(startIndex).trim();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..fd683359 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,21 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n+private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n-    return result;\n-  }\n+    if (result == null){\n+        throw new IllegalStateException(\"Null JSDoc line\");\n+    }\n+    String trimmedResult = result.trim();\n+    if (trimmedResult.isEmpty()){\n+        return \"\";\n+    }\n+    int startIndex = 0;\n+    while (startIndex < trimmedResult.length() && trimmedResult.charAt(startIndex) == '*') {\n+        startIndex++;\n+    }\n+    return trimmedResult.substring(startIndex).trim();\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "junit.framework.ComparisonFailure: expected:<Another[ ]function.> but was:<Another[]function.>",
    "test_result": "FAIL"
}