{
    "patch": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n == scope.getRootNode()) return;\n\n        if (n.isParamList()) {\n            handleFunctionInputs(n.getParent());\n            return;\n        }\n\n        if (n.getType() == Token.CATCH) {\n            defineCatch(n, parent);\n            return;\n        }\n\n        if (NodeUtil.isNameDeclaration(n)) {\n            defineVar(n, parent);\n            return;\n        }\n\n        if (NodeUtil.isFunctionDeclaration(n)) {\n            defineDeclaredFunction(n, parent);\n        }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..9d54f213 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1441,28 +1441,26 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param parent The parent of n\n      */\n     @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+        if (n == scope.getRootNode()) return;\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+        if (n.isParamList()) {\n+            handleFunctionInputs(n.getParent());\n+            return;\n+        }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+        if (n.getType() == Token.CATCH) {\n+            defineCatch(n, parent);\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+\n+        if (NodeUtil.isNameDeclaration(n)) {\n+            defineVar(n, parent);\n+            return;\n+        }\n+\n+        if (NodeUtil.isFunctionDeclaration(n)) {\n+            defineDeclaredFunction(n, parent);\n+        }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}