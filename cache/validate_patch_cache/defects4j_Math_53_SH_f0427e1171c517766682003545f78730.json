{
    "patch": "if (rhs == null) {\n    throw new NullArgumentException();\n} else if (Double.isNaN(real) || Double.isNaN(imaginary) ||\n        Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n    return createComplex(Double.NaN, Double.NaN);\n} else if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||\n        Double.isInfinite(rhs.getReal()) || Double.isInfinite(rhs.getImaginary())) {\n    double infReal = Double.POSITIVE_INFINITY;\n    double infImaginary = Double.POSITIVE_INFINITY;\n    if ((real == Double.POSITIVE_INFINITY && rhs.getReal() == Double.NEGATIVE_INFINITY) ||\n            (real == Double.NEGATIVE_INFINITY && rhs.getReal() == Double.POSITIVE_INFINITY)) {\n        infReal = Double.NaN;\n    } else {\n        infReal = real + rhs.getReal();\n    }\n    if ((imaginary == Double.POSITIVE_INFINITY && rhs.getImaginary() == Double.NEGATIVE_INFINITY) ||\n            (imaginary == Double.NEGATIVE_INFINITY && rhs.getImaginary() == Double.POSITIVE_INFINITY)) {\n        infImaginary = Double.NaN;\n    } else {\n        infImaginary = imaginary + rhs.getImaginary();\n    }\n    return createComplex(infReal, infImaginary);\n} else {\n    return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java\nindex e0a8e97e9..2ded20a58 100644\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -150,6 +150,31 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n     public Complex add(Complex rhs)\n         throws NullArgumentException {\n         MathUtils.checkNotNull(rhs);\n+if (rhs == null) {\n+    throw new NullArgumentException();\n+} else if (Double.isNaN(real) || Double.isNaN(imaginary) ||\n+        Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n+    return createComplex(Double.NaN, Double.NaN);\n+} else if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||\n+        Double.isInfinite(rhs.getReal()) || Double.isInfinite(rhs.getImaginary())) {\n+    double infReal = Double.POSITIVE_INFINITY;\n+    double infImaginary = Double.POSITIVE_INFINITY;\n+    if ((real == Double.POSITIVE_INFINITY && rhs.getReal() == Double.NEGATIVE_INFINITY) ||\n+            (real == Double.NEGATIVE_INFINITY && rhs.getReal() == Double.POSITIVE_INFINITY)) {\n+        infReal = Double.NaN;\n+    } else {\n+        infReal = real + rhs.getReal();\n+    }\n+    if ((imaginary == Double.POSITIVE_INFINITY && rhs.getImaginary() == Double.NEGATIVE_INFINITY) ||\n+            (imaginary == Double.NEGATIVE_INFINITY && rhs.getImaginary() == Double.POSITIVE_INFINITY)) {\n+        infImaginary = Double.NaN;\n+    } else {\n+        infImaginary = imaginary + rhs.getImaginary();\n+    }\n+    return createComplex(infReal, infImaginary);\n+} else {\n+    return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());\n+}\n         return createComplex(real + rhs.getReal(),\n             imaginary + rhs.getImaginary());\n     }",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}