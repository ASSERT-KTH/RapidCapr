{
    "patch": "          if (ref == getInitializingReference()) {\n            return true;\n          } else if (isInitializingDeclarationAt(0)) {\n            return true;\n          } else {\n            break;\n          }\n        } else if (block.isLoop) {\n          for (BasicBlock innerBlock = block; innerBlock != null; innerBlock = innerBlock.getParent()) {\n            if (innerBlock != block && hasReference(innerBlock, ref)) {\n              return false;\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..12a6a1e5 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,19 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          if (ref == getInitializingReference()) {\n+            return true;\n+          } else if (isInitializingDeclarationAt(0)) {\n+            return true;\n+          } else {\n+            break;\n+          }\n+        } else if (block.isLoop) {\n+          for (BasicBlock innerBlock = block; innerBlock != null; innerBlock = innerBlock.getParent()) {\n+            if (innerBlock != block && hasReference(innerBlock, ref)) {\n+              return false;\n+            }\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}