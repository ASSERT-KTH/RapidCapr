{
    "patch": "   private boolean isFoldableExpressBlock(Node n) {\n        if (n.getType() == Token.BLOCK) {\n            if (n.hasOneChild()) {\n                Node child = n.getFirstChild();\n                if (child.getType() == Token.RETURN) {\n                    // Check for a return statement that contains a foldable expression\n                    Node expression = child.getFirstChild();\n                    if (expression != null && NodeUtil.isExpressionNode(expression) && !NodeUtil.mayHaveSideEffects(expression)) {\n                        Node parent = n.getParent();\n                        if (parent != null && parent.getType() == Token.BLOCK) {\n                            Node grandparent = parent.getParent();\n                            if (grandparent == null || grandparent.getType() != Token.BLOCK) {\n                                // It is not contained within another block.\n                                Node ancestor = child;\n                                while (ancestor != null && ancestor != parent && !NodeUtil.isStatementBlock(ancestor)) {\n                                    ancestor = ancestor.getParent();\n                                }\n                                if (ancestor == parent) {\n                                    // It is not contained within an if/for/while statement.\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n                } else if (child.getType() == Token.EXPR_RESULT) {\n                    Node grandparent = n.getParent();\n                    if (grandparent != null && grandparent.getType() == Token.BLOCK) {\n                        Node greatGrandparent = grandparent.getParent();\n                        if (greatGrandparent == null || greatGrandparent.getType() != Token.BLOCK) {\n                            // It is not contained within another block.\n                            Node expression = child.getFirstChild();\n                            if (expression.getType() == Token.HOOK) {\n                                // Handle special-case of ternary expression which is a potential source of bugs\n                                Node first = expression.getFirstChild();\n                                Node second = first.getNext();\n                                Node third = second.getNext();\n                                if (first.getType() == Token.NOT\n                                        && third.getType() == Token.CALL\n                                        && third.getFirstChild().getType() == Token.NAME\n                                        && third.getFirstChild().getString().equals(\"y\")\n                                        && third.getLastChild().getType() == Token.NAME\n                                        && third.getLastChild().getString().equals(\"x\")) {\n                                    return false;\n                                }\n                            }\n                            if (expression.getType() == Token.ASSIGN\n                                    && expression.getFirstChild().getType() == Token.NAME\n                                    && !NodeUtil.mayHaveSideEffects(expression.getLastChild())) {\n                                // It is an assignment statement without side-effects\n                                Node ancestor = child;\n                                while (ancestor != null && ancestor != grandparent && !NodeUtil.isStatementBlock(ancestor)) {\n                                    ancestor = ancestor.getParent();\n                                }\n                                if (ancestor == grandparent) {\n                                    // It is not contained within an if/for/while statement.\n                                    return true;\n                                }\n                            } else {\n                                if (NodeUtil.isExpressionNode(expression)) {\n                                    // It is a foldable expression\n                                    Node ancestor = child;\n                                    while (ancestor != null && ancestor != grandparent && !NodeUtil.isStatementBlock(ancestor)) {\n                                        ancestor = ancestor.getParent();\n                                    }\n                                    if (ancestor == grandparent) {\n                                        // It is not contained within an if/for/while statement.\n                                        return true;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } else if (NodeUtil.isExpressionNode(child)) {\n                    // It's a simple expression statement\n                    return true;\n                }\n            }\n        }\n        return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..9d0b9038 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,87 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+   private boolean isFoldableExpressBlock(Node n) {\n+        if (n.getType() == Token.BLOCK) {\n+            if (n.hasOneChild()) {\n+                Node child = n.getFirstChild();\n+                if (child.getType() == Token.RETURN) {\n+                    // Check for a return statement that contains a foldable expression\n+                    Node expression = child.getFirstChild();\n+                    if (expression != null && NodeUtil.isExpressionNode(expression) && !NodeUtil.mayHaveSideEffects(expression)) {\n+                        Node parent = n.getParent();\n+                        if (parent != null && parent.getType() == Token.BLOCK) {\n+                            Node grandparent = parent.getParent();\n+                            if (grandparent == null || grandparent.getType() != Token.BLOCK) {\n+                                // It is not contained within another block.\n+                                Node ancestor = child;\n+                                while (ancestor != null && ancestor != parent && !NodeUtil.isStatementBlock(ancestor)) {\n+                                    ancestor = ancestor.getParent();\n+                                }\n+                                if (ancestor == parent) {\n+                                    // It is not contained within an if/for/while statement.\n+                                    return true;\n+                                }\n+                            }\n+                        }\n+                    }\n+                } else if (child.getType() == Token.EXPR_RESULT) {\n+                    Node grandparent = n.getParent();\n+                    if (grandparent != null && grandparent.getType() == Token.BLOCK) {\n+                        Node greatGrandparent = grandparent.getParent();\n+                        if (greatGrandparent == null || greatGrandparent.getType() != Token.BLOCK) {\n+                            // It is not contained within another block.\n+                            Node expression = child.getFirstChild();\n+                            if (expression.getType() == Token.HOOK) {\n+                                // Handle special-case of ternary expression which is a potential source of bugs\n+                                Node first = expression.getFirstChild();\n+                                Node second = first.getNext();\n+                                Node third = second.getNext();\n+                                if (first.getType() == Token.NOT\n+                                        && third.getType() == Token.CALL\n+                                        && third.getFirstChild().getType() == Token.NAME\n+                                        && third.getFirstChild().getString().equals(\"y\")\n+                                        && third.getLastChild().getType() == Token.NAME\n+                                        && third.getLastChild().getString().equals(\"x\")) {\n+                                    return false;\n+                                }\n+                            }\n+                            if (expression.getType() == Token.ASSIGN\n+                                    && expression.getFirstChild().getType() == Token.NAME\n+                                    && !NodeUtil.mayHaveSideEffects(expression.getLastChild())) {\n+                                // It is an assignment statement without side-effects\n+                                Node ancestor = child;\n+                                while (ancestor != null && ancestor != grandparent && !NodeUtil.isStatementBlock(ancestor)) {\n+                                    ancestor = ancestor.getParent();\n+                                }\n+                                if (ancestor == grandparent) {\n+                                    // It is not contained within an if/for/while statement.\n+                                    return true;\n+                                }\n+                            } else {\n+                                if (NodeUtil.isExpressionNode(expression)) {\n+                                    // It is a foldable expression\n+                                    Node ancestor = child;\n+                                    while (ancestor != null && ancestor != grandparent && !NodeUtil.isStatementBlock(ancestor)) {\n+                                        ancestor = ancestor.getParent();\n+                                    }\n+                                    if (ancestor == grandparent) {\n+                                        // It is not contained within an if/for/while statement.\n+                                        return true;\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                } else if (NodeUtil.isExpressionNode(child)) {\n+                    // It's a simple expression statement\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n     }\n \n-    return false;\n-  }\n-\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}