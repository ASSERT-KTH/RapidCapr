{
    "patch": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class ListUtil {\n\n    public static <T> List<T> createList(T... elements) {\n        List<T> list = new ArrayList<>();\n        for (T element : elements) {\n            list.add(element);\n        }\n        return list;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..e0ef6e308 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,19 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class ListUtil {\n+\n+    public static <T> List<T> createList(T... elements) {\n+        List<T> list = new ArrayList<>();\n+        for (T element : elements) {\n+            list.add(element);\n+        }\n+        return list;\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}