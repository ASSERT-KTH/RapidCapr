{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n == null || n.getType() != Token.BLOCK || !n.hasOneChild()) {\n    return false;\n  }\n\n  Node child = n.getFirstChild();\n  int childType = child.getType();\n  if (childType == Token.RETURN) {\n    return isFoldableReturn(child);\n  } else if (childType != Token.EXPR_RESULT) {\n    return false;\n  }\n\n  Node expression = child.getFirstChild();\n  if (expression == null || !NodeUtil.isExpressionNode(expression) || NodeUtil.mayHaveSideEffects(expression)) {\n    return false;\n  }\n\n  Node parent = n.getParent();\n  Node grandparent = parent == null ? null : parent.getParent();\n  if (grandparent != null && grandparent.getType() == Token.BLOCK) {\n    return false;\n  }\n\n  if (parent == null) {\n    return true;\n  }\n\n  int parentType = parent.getType();\n  if (parentType == Token.IF || parentType == Token.FOR || parentType == Token.WHILE || parentType == Token.DO) {\n    return false;\n  }\n\n  if (grandparent != null && NodeUtil.isLoopStructure(grandparent)) {\n    return false;\n  }\n\n  while (parentType == Token.BLOCK) {\n    parent = parent.getParent();\n    if (parent == null) {\n      return true;\n    }\n    parentType = parent.getType();\n    if (parentType == Token.IF || parentType == Token.FOR || parentType == Token.WHILE || parentType == Token.DO) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nprivate boolean isFoldableReturn(Node n) {\n  Node expression = n.getFirstChild();\n  return expression != null && NodeUtil.isExpressionNode(expression) && !NodeUtil.mayHaveSideEffects(expression)\n      && !containsImplicitThis(expression) && !containsAwait(expression);\n}\n\nprivate boolean containsImplicitThis(Node n) {\n  NodeTraversal.Callback containsThis = new NodeTraversal.Callback() {\n    @Override\n    public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n      switch (n.getType()) {\n        case Token.THIS:\n        case Token.FUNCTION:\n          return false;\n\n        case Token.NAME:\n          String name = n.getString();\n          return parent != null && parent.getType() != Token.TRY && (parent.getLastChild() != n\n              || parent.getType() != Token.VAR && parent.getType() != Token.LET && parent.getType() != Token.CONST)\n              && \"this\".equals(name);\n\n        default:\n          return true;\n      }\n    }\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      // Do nothing.\n    }\n  };\n  NodeTraversal.traversePostOrder(new AbstractCompiler(), n, containsThis);\n  return containsThis.hasEncounteredThis;\n}\n\nprivate static boolean containsAwait(Node n) {\n  NodeTraversal.Callback callback = new NodeTraversal.Callback() {\n    @Override\n    public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n      return !NodeUtil.isFunctionDeclaration(n);\n    }\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.getType() == Token.AWAIT) {\n        hasEncounteredAwait = true;\n      }\n    }\n  };\n  NodeTraversal.traversePostOrder(new AbstractCompiler(), n, callback);\n  return hasEncounteredAwait;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..1b7b90bf 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,110 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n-    }\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n == null || n.getType() != Token.BLOCK || !n.hasOneChild()) {\n+    return false;\n+  }\n+\n+  Node child = n.getFirstChild();\n+  int childType = child.getType();\n+  if (childType == Token.RETURN) {\n+    return isFoldableReturn(child);\n+  } else if (childType != Token.EXPR_RESULT) {\n+    return false;\n+  }\n+\n+  Node expression = child.getFirstChild();\n+  if (expression == null || !NodeUtil.isExpressionNode(expression) || NodeUtil.mayHaveSideEffects(expression)) {\n+    return false;\n+  }\n+\n+  Node parent = n.getParent();\n+  Node grandparent = parent == null ? null : parent.getParent();\n+  if (grandparent != null && grandparent.getType() == Token.BLOCK) {\n+    return false;\n+  }\n+\n+  if (parent == null) {\n+    return true;\n+  }\n+\n+  int parentType = parent.getType();\n+  if (parentType == Token.IF || parentType == Token.FOR || parentType == Token.WHILE || parentType == Token.DO) {\n+    return false;\n+  }\n \n+  if (grandparent != null && NodeUtil.isLoopStructure(grandparent)) {\n     return false;\n   }\n \n+  while (parentType == Token.BLOCK) {\n+    parent = parent.getParent();\n+    if (parent == null) {\n+      return true;\n+    }\n+    parentType = parent.getType();\n+    if (parentType == Token.IF || parentType == Token.FOR || parentType == Token.WHILE || parentType == Token.DO) {\n+      return false;\n+    }\n+  }\n+\n+  return true;\n+}\n+\n+private boolean isFoldableReturn(Node n) {\n+  Node expression = n.getFirstChild();\n+  return expression != null && NodeUtil.isExpressionNode(expression) && !NodeUtil.mayHaveSideEffects(expression)\n+      && !containsImplicitThis(expression) && !containsAwait(expression);\n+}\n+\n+private boolean containsImplicitThis(Node n) {\n+  NodeTraversal.Callback containsThis = new NodeTraversal.Callback() {\n+    @Override\n+    public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n+      switch (n.getType()) {\n+        case Token.THIS:\n+        case Token.FUNCTION:\n+          return false;\n+\n+        case Token.NAME:\n+          String name = n.getString();\n+          return parent != null && parent.getType() != Token.TRY && (parent.getLastChild() != n\n+              || parent.getType() != Token.VAR && parent.getType() != Token.LET && parent.getType() != Token.CONST)\n+              && \"this\".equals(name);\n+\n+        default:\n+          return true;\n+      }\n+    }\n+\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+      // Do nothing.\n+    }\n+  };\n+  NodeTraversal.traversePostOrder(new AbstractCompiler(), n, containsThis);\n+  return containsThis.hasEncounteredThis;\n+}\n+\n+private static boolean containsAwait(Node n) {\n+  NodeTraversal.Callback callback = new NodeTraversal.Callback() {\n+    @Override\n+    public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n+      return !NodeUtil.isFunctionDeclaration(n);\n+    }\n+\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+      if (n.getType() == Token.AWAIT) {\n+        hasEncounteredAwait = true;\n+      }\n+    }\n+  };\n+  NodeTraversal.traversePostOrder(new AbstractCompiler(), n, callback);\n+  return hasEncounteredAwait;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}