{
    "patch": "      boolean isThisTargetValid = false;\n      Node parent = n.getParent();\n      Node previousSibling = n.getPrevious();\n      if (parent.isGetProp() && n == parent.getLastChild()) {\n        JSType objectType = getJSType(parent.getFirstChild()).restrictByNotNullOrUndefined();\n        if (objectType.hasProp(\"prototype\") || objectType.isUnknownType()) {\n          isThisTargetValid = true;\n        }\n      } else if (previousSibling != null) {\n        JSType previousSiblingType = getJSType(previousSibling);\n        if (previousSiblingType.isStringValueType() || previousSiblingType.isUnknownType() ||\n            previousSiblingType.isEnumElementType()) {\n          isThisTargetValid = true;\n        }\n      }\n      if (functionType.hasThisType() && !isThisTargetValid) {\n        report(t, n, FUNCTION_WITH_NON_OBJECT_THIS, childType.toString());\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..eafed58b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      boolean isThisTargetValid = false;\n+      Node parent = n.getParent();\n+      Node previousSibling = n.getPrevious();\n+      if (parent.isGetProp() && n == parent.getLastChild()) {\n+        JSType objectType = getJSType(parent.getFirstChild()).restrictByNotNullOrUndefined();\n+        if (objectType.hasProp(\"prototype\") || objectType.isUnknownType()) {\n+          isThisTargetValid = true;\n+        }\n+      } else if (previousSibling != null) {\n+        JSType previousSiblingType = getJSType(previousSibling);\n+        if (previousSiblingType.isStringValueType() || previousSiblingType.isUnknownType() ||\n+            previousSiblingType.isEnumElementType()) {\n+          isThisTargetValid = true;\n+        }\n+      }\n+      if (functionType.hasThisType() && !isThisTargetValid) {\n+        report(t, n, FUNCTION_WITH_NON_OBJECT_THIS, childType.toString());\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}