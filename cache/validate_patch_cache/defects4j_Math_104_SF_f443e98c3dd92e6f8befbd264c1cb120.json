{
    "patch": "public static double regularizedGammaQ(double a, double x) {\n    double switchArg = 1e4;\n    double sgngam = signGamma(a);\n    double gln = logGamma(a);\n    if (x < 0.0 || a <= 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 1.0;\n    }\n    if (x >= a + switchArg) {\n        return 0.0;\n    }\n    double b = x + 1.0 - a;\n    double c = 1.0 / 1.0e-30;\n    double d = 1.0 / b;\n    double h = d;\n    double an;\n    for (int i = 1; i <= 200; i++) {\n        an = -i * (i - a);\n        b += 2.0;\n        d = an * d + b;\n        if (Math.abs(d) < 1.0e-30) {\n            d = 1.0e-30;\n        }\n        c = b + an / c;\n        if (Math.abs(c) < 1.0e-30) {\n            c = 1.0e-30;\n        }\n        d = 1.0 / d;\n        double del = d * c;\n        h *= del;\n        if (Math.abs(del - 1.0) < 3.0e-7) {\n            return sgngam - Math.exp(gln + Math.log(h) - x);\n        }\n        if (i % 10 == 0) {\n            d = 1.0 / d;\n            b = x + i / 2.0 - a;\n            c = b;\n            for (int j = 1; j <= 9; j++) {\n                b += 2.0;\n                c = b + an / c;\n            }\n            h *= c;\n            c = 1.0 / c;\n            d *= c;\n        }\n    }\n    return Double.NaN;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..de8b32596 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,56 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaQ(double a, double x) {\n+    double switchArg = 1e4;\n+    double sgngam = signGamma(a);\n+    double gln = logGamma(a);\n+    if (x < 0.0 || a <= 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+    if (x >= a + switchArg) {\n+        return 0.0;\n+    }\n+    double b = x + 1.0 - a;\n+    double c = 1.0 / 1.0e-30;\n+    double d = 1.0 / b;\n+    double h = d;\n+    double an;\n+    for (int i = 1; i <= 200; i++) {\n+        an = -i * (i - a);\n+        b += 2.0;\n+        d = an * d + b;\n+        if (Math.abs(d) < 1.0e-30) {\n+            d = 1.0e-30;\n+        }\n+        c = b + an / c;\n+        if (Math.abs(c) < 1.0e-30) {\n+            c = 1.0e-30;\n+        }\n+        d = 1.0 / d;\n+        double del = d * c;\n+        h *= del;\n+        if (Math.abs(del - 1.0) < 3.0e-7) {\n+            return sgngam - Math.exp(gln + Math.log(h) - x);\n+        }\n+        if (i % 10 == 0) {\n+            d = 1.0 / d;\n+            b = x + i / 2.0 - a;\n+            c = b;\n+            for (int j = 1; j <= 9; j++) {\n+                b += 2.0;\n+                c = b + an / c;\n+            }\n+            h *= c;\n+            c = 1.0 / c;\n+            d *= c;\n+        }\n+    }\n+    return Double.NaN;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}