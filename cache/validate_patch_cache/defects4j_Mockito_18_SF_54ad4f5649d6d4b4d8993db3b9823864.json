{
    "patch": "public Object returnValueFor(Class clazz) {\n    if (clazz == List.class) {\n        ArrayList<Integer> list = new ArrayList<>();\n        list.add(1);\n        list.add(2);\n        return list;\n    } else if (clazz == Iterable.class) {\n        ArrayList<Integer> list = new ArrayList<>();\n        return list;\n    } else {\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..5b5a19955 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,19 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public Object returnValueFor(Class clazz) {\n+    if (clazz == List.class) {\n+        ArrayList<Integer> list = new ArrayList<>();\n+        list.add(1);\n+        list.add(2);\n+        return list;\n+    } else if (clazz == Iterable.class) {\n+        ArrayList<Integer> list = new ArrayList<>();\n+        return list;\n+    } else {\n+        return null;\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}