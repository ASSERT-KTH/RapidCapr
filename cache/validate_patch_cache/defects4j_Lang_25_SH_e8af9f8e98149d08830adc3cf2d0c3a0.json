{
    "patch": "else if (c == 'r') {\n    outBuffer.append('\\r');\n    j++;\n} else if (c == 't') {\n    outBuffer.append('\\t');\n    j++;\n} else if (c == 'l') {\n    outBuffer.append('\\n');\n    j++;\n} else if (c == '{' || c == '}' || c == '\\\\' || c == '#') {\n    outBuffer.append(c);\n    j++;\n} else if (c == 'x') {\n    if (j + 2 < inLength) {\n        int x = getInt(in, j + 1, 2, 16);\n        if (x >= 0) {\n            outBuffer.append((char) x);\n            j += 3;\n        } else {\n            reportError(\"Invalid Unicode sequence\", j, 1);\n            return false;\n        }\n    } else {\n        reportError(\"Invalid Unicode sequence\", j, 1);\n        return false;\n    }\n} else {\n    if (c >= '0' && c <= '7') {\n        int length = 3;\n        if (j + 1 < inLength && in[j + 1] >= '0' && in[j + 1] <= '7') {\n            length = 2;\n            if (j + 2 < inLength && in[j + 2] >= '0' && in[j + 2] <= '7') {\n                length = 1;\n            }\n        }\n        int x = getInt(in, j, length, 8);\n        if (x >= 0) {\n            outBuffer.append((char) x);\n            j += length;\n        } else {\n            reportError(\"Invalid Octal sequence\", j, length);\n            return false;\n        }\n    } else {\n        reportError(\"Invalid escape sequence\", j, 1);\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}