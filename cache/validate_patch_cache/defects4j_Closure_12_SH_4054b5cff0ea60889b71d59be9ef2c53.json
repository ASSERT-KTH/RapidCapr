{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    for (int i = 0; i < cfgNode.getChildCount(); i++) {\n        Node child = cfgNode.getChildAt(i);\n        if (child.getType() == Token.TRY) {\n            for (Node tryChild : child.children()) {\n                if (tryChild.getType() == Token.BLOCK && tryChild.getNext() != null) {\n                    Node catchNode = tryChild.getNext();\n                    if (catchNode.getType() == Token.CATCH) {\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..06e86c89 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,6 +157,22 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    for (int i = 0; i < cfgNode.getChildCount(); i++) {\n+        Node child = cfgNode.getChildAt(i);\n+        if (child.getType() == Token.TRY) {\n+            for (Node tryChild : child.children()) {\n+                if (tryChild.getType() == Token.BLOCK && tryChild.getNext() != null) {\n+                    Node catchNode = tryChild.getNext();\n+                    if (catchNode.getType() == Token.CATCH) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}