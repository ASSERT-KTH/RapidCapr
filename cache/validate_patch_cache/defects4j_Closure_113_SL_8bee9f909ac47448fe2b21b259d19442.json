{
    "patch": "if (provided == null || !provided.isExplicitlyProvided()) {\n    unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));\n} else if (provided.explicitModule != null) {\n    JSModule providedModule = provided.explicitModule;\n\n    JSModule module = t.getModule();\n    if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module, providedModule)) {\n        compiler.report(t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n        providedModule.getName(),\n        module.getName()));\n    }\n\n    maybeAddToSymbolTable(left);\n    maybeAddStringNodeToSymbolTable(arg);\n\n    parent.detachFromParent();\n    compiler.reportCodeChange();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..a9de0006 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,24 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+if (provided == null || !provided.isExplicitlyProvided()) {\n+    unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));\n+} else if (provided.explicitModule != null) {\n+    JSModule providedModule = provided.explicitModule;\n+\n+    JSModule module = t.getModule();\n+    if (moduleGraph != null && module != providedModule && !moduleGraph.dependsOn(module, providedModule)) {\n+        compiler.report(t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+        providedModule.getName(),\n+        module.getName()));\n+    }\n+\n+    maybeAddToSymbolTable(left);\n+    maybeAddStringNodeToSymbolTable(arg);\n+\n+    parent.detachFromParent();\n+    compiler.reportCodeChange();\n+}\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}