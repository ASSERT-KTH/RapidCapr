{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n    if (size == 0) {\n        return new PeriodFormatter(null, null);\n    }\n\n    Separator lastSeparator = null;\n    int lastIndex = -1;\n    for (int i = size - 1; i >= 0; i--) {\n        Object obj = elementPairs.get(i);\n        if (obj instanceof Separator) {\n            lastSeparator = (Separator) obj;\n            lastIndex = i;\n            break;\n        }\n    }\n\n    if (lastSeparator == null) {\n        if (size == 1) {\n            Object o = elementPairs.get(0);\n            if (o instanceof PeriodPrinter && !notPrinter) {\n                return new PeriodFormatter((PeriodPrinter) o, null);\n            } else if (o instanceof PeriodParser && !notParser) {\n                return new PeriodFormatter(null, (PeriodParser) o);\n            }\n        }\n        Object[] comp = createComposite(elementPairs);\n        return new PeriodFormatter(notPrinter ? null : (PeriodPrinter) comp[0], notParser ? null : (PeriodParser) comp[1]);\n    } else {\n        List<Object> beforeSepList = elementPairs.subList(0, lastIndex);\n        List<Object> afterSepList = elementPairs.subList(lastIndex + 1, size);\n        PeriodFormatter beforeFmt = toFormatter(beforeSepList, notPrinter, notParser);\n        PeriodFormatter afterFmt = toFormatter(afterSepList, notPrinter, notParser);\n        Separator sep = lastSeparator.finish(beforeFmt.getPrinter(), afterFmt.getParser());\n        return new PeriodFormatter(notPrinter && notParser ? null : sep, notPrinter ? null : afterFmt.getParser());\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..8a196611 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,47 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+    if (size == 0) {\n+        return new PeriodFormatter(null, null);\n+    }\n+\n+    Separator lastSeparator = null;\n+    int lastIndex = -1;\n+    for (int i = size - 1; i >= 0; i--) {\n+        Object obj = elementPairs.get(i);\n+        if (obj instanceof Separator) {\n+            lastSeparator = (Separator) obj;\n+            lastIndex = i;\n+            break;\n         }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+    }\n+\n+    if (lastSeparator == null) {\n+        if (size == 1) {\n+            Object o = elementPairs.get(0);\n+            if (o instanceof PeriodPrinter && !notPrinter) {\n+                return new PeriodFormatter((PeriodPrinter) o, null);\n+            } else if (o instanceof PeriodParser && !notParser) {\n+                return new PeriodFormatter(null, (PeriodParser) o);\n+            }\n         }\n         Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n-        }\n+        return new PeriodFormatter(notPrinter ? null : (PeriodPrinter) comp[0], notParser ? null : (PeriodParser) comp[1]);\n+    } else {\n+        List<Object> beforeSepList = elementPairs.subList(0, lastIndex);\n+        List<Object> afterSepList = elementPairs.subList(lastIndex + 1, size);\n+        PeriodFormatter beforeFmt = toFormatter(beforeSepList, notPrinter, notParser);\n+        PeriodFormatter afterFmt = toFormatter(afterSepList, notPrinter, notParser);\n+        Separator sep = lastSeparator.finish(beforeFmt.getPrinter(), afterFmt.getParser());\n+        return new PeriodFormatter(notPrinter && notParser ? null : sep, notPrinter ? null : afterFmt.getParser());\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}