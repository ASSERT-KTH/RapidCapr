{
    "patch": "private void replaceAssignmentExpression(Var v, Reference ref, Map<String, String> varmap) {\n  // Compute all of the assignments necessary\n  List<Node> nodes = Lists.newArrayList();\n  Node val = ref.getAssignedValue();\n  blacklistVarReferencesInTree(val, v.scope);\n\n  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n\n  Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n    String var = key.getString();\n    Node value = key.removeFirstChild();\n    // TODO(user): Copy type information.\n    nodes.add(\n        new Node(Token.ASSIGN,\n            Node.newString(Token.NAME, varmap.get(var)), value));\n    all.remove(var);\n  }\n\n  // TODO(user): Better source information.\n  for (String var : all) {\n    nodes.add(\n        new Node(Token.ASSIGN,\n            Node.newString(Token.NAME, varmap.get(var)),\n            NodeUtil.newUndefinedNode(null)));\n  }\n\n  if (nodes.isEmpty()) {\n    // If there are no assignment nodes, use the original value.\n    Node parent = NodeUtil.getEnclosingStatement(ref.getNode());\n    Node grandParent = parent.getParent();\n    if (parent.getType() == Token.EXPR_RESULT) {\n      parent = parent.getParent();\n    }\n    grandParent.replaceChild(parent, val.detach());\n  } else {\n    // Otherwise, insert a comma operator.\n    Node assignmentNode = new Node(Token.COMMA);\n    for (Node node : nodes) {\n      assignmentNode.addChildToBack(node);\n    }\n    Node parent = NodeUtil.getEnclosingStatement(ref.getNode());\n    Node grandParent = parent.getParent();\n\n    Node replace = null;\n    if (parent.getType() == Token.VAR) {\n      // If the assignment is declared using VAR assign, replace\n      // the entire statement to ensure the assignment remains inside\n      // the block.\n      replace = NodeUtil.newExpr(assignmentNode);\n    } else if (parent.getType() == Token.EXPR_RESULT) {\n      replace = assignmentNode;\n    } else {\n      // In this case, we need to add the result of the last assignment to the AST,\n      // but not cause a syntax error. To do this, wrap the entire list of assignments\n      // in an anonymous function which returns the result of the last assignment.\n      Node functionNode = new Node(Token.FUNCTION);\n      functionNode.addChildToFront(new Node(Token.NAME, \"\"));\n      Node blockNode = new Node(Token.BLOCK);\n      blockNode.addChildToBack(assignmentNode);\n      blockNode.addChildToBack(new Node(Token.RETURN,\n          new Node(Token.NAME, nodes.get(nodes.size() - 1).getFirstChild().getString())));\n\n      functionNode.addChildToBack(blockNode);\n      replace = new Node(Token.CALL, functionNode, new Node(Token.EMPTY));\n      replace.putBooleanProp(Node.FREE_CALL, true);\n    }\n\n    grandParent.replaceChild(parent, replace);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9061925d..0ba77b66 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -300,65 +300,78 @@ class InlineObjectLiterals implements CompilerPass {\n      * Note that the resulting expression will always evaluate to\n      * true, as would the x = {...} expression.\n      */\n-    private void replaceAssignmentExpression(Var v, Reference ref,\n-                                             Map<String, String> varmap) {\n-      // Compute all of the assignments necessary\n-      List<Node> nodes = Lists.newArrayList();\n-      Node val = ref.getAssignedValue();\n-      blacklistVarReferencesInTree(val, v.scope);\n-      Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n-      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n-      for (Node key = val.getFirstChild(); key != null;\n-           key = key.getNext()) {\n-        String var = key.getString();\n-        Node value = key.removeFirstChild();\n-        // TODO(user): Copy type information.\n-        nodes.add(\n-          new Node(Token.ASSIGN,\n-                   Node.newString(Token.NAME, varmap.get(var)), value));\n-        all.remove(var);\n-      }\n-\n-      // TODO(user): Better source information.\n-      for (String var : all) {\n-        nodes.add(\n-          new Node(Token.ASSIGN,\n-                   Node.newString(Token.NAME, varmap.get(var)),\n-                   NodeUtil.newUndefinedNode(null)));\n-      }\n-\n-      Node replacement;\n-        // All assignments evaluate to true, so make sure that the\n-        // expr statement evaluates to true in case it matters.\n-        nodes.add(new Node(Token.TRUE));\n-\n-        // Join these using COMMA.  A COMMA node must have 2 children, so we\n-        // create a tree. In the tree the first child be the COMMA to match\n-        // the parser, otherwise tree equality tests fail.\n-        nodes = Lists.reverse(nodes);\n-        replacement = new Node(Token.COMMA);\n-        Node cur = replacement;\n-        int i;\n-        for (i = 0; i < nodes.size() - 2; i++) {\n-          cur.addChildToFront(nodes.get(i));\n-          Node t = new Node(Token.COMMA);\n-          cur.addChildToFront(t);\n-          cur = t;\n-        }\n-        cur.addChildToFront(nodes.get(i));\n-        cur.addChildToFront(nodes.get(i + 1));\n+private void replaceAssignmentExpression(Var v, Reference ref, Map<String, String> varmap) {\n+  // Compute all of the assignments necessary\n+  List<Node> nodes = Lists.newArrayList();\n+  Node val = ref.getAssignedValue();\n+  blacklistVarReferencesInTree(val, v.scope);\n+\n+  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n+\n+  Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n+  for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n+    String var = key.getString();\n+    Node value = key.removeFirstChild();\n+    // TODO(user): Copy type information.\n+    nodes.add(\n+        new Node(Token.ASSIGN,\n+            Node.newString(Token.NAME, varmap.get(var)), value));\n+    all.remove(var);\n+  }\n \n-      Node replace = ref.getParent();\n-      replacement.copyInformationFromForTree(replace);\n+  // TODO(user): Better source information.\n+  for (String var : all) {\n+    nodes.add(\n+        new Node(Token.ASSIGN,\n+            Node.newString(Token.NAME, varmap.get(var)),\n+            NodeUtil.newUndefinedNode(null)));\n+  }\n \n-      if (replace.getType() == Token.VAR) {\n-        replace.getParent().replaceChild(\n-            replace, NodeUtil.newExpr(replacement));\n-      } else {\n-        replace.getParent().replaceChild(replace, replacement);\n-      }\n+  if (nodes.isEmpty()) {\n+    // If there are no assignment nodes, use the original value.\n+    Node parent = NodeUtil.getEnclosingStatement(ref.getNode());\n+    Node grandParent = parent.getParent();\n+    if (parent.getType() == Token.EXPR_RESULT) {\n+      parent = parent.getParent();\n+    }\n+    grandParent.replaceChild(parent, val.detach());\n+  } else {\n+    // Otherwise, insert a comma operator.\n+    Node assignmentNode = new Node(Token.COMMA);\n+    for (Node node : nodes) {\n+      assignmentNode.addChildToBack(node);\n+    }\n+    Node parent = NodeUtil.getEnclosingStatement(ref.getNode());\n+    Node grandParent = parent.getParent();\n+\n+    Node replace = null;\n+    if (parent.getType() == Token.VAR) {\n+      // If the assignment is declared using VAR assign, replace\n+      // the entire statement to ensure the assignment remains inside\n+      // the block.\n+      replace = NodeUtil.newExpr(assignmentNode);\n+    } else if (parent.getType() == Token.EXPR_RESULT) {\n+      replace = assignmentNode;\n+    } else {\n+      // In this case, we need to add the result of the last assignment to the AST,\n+      // but not cause a syntax error. To do this, wrap the entire list of assignments\n+      // in an anonymous function which returns the result of the last assignment.\n+      Node functionNode = new Node(Token.FUNCTION);\n+      functionNode.addChildToFront(new Node(Token.NAME, \"\"));\n+      Node blockNode = new Node(Token.BLOCK);\n+      blockNode.addChildToBack(assignmentNode);\n+      blockNode.addChildToBack(new Node(Token.RETURN,\n+          new Node(Token.NAME, nodes.get(nodes.size() - 1).getFirstChild().getString())));\n+\n+      functionNode.addChildToBack(blockNode);\n+      replace = new Node(Token.CALL, functionNode, new Node(Token.EMPTY));\n+      replace.putBooleanProp(Node.FREE_CALL, true);\n     }\n \n+    grandParent.replaceChild(parent, replace);\n+  }\n+}\n+\n     /**\n      * Splits up the object literal into individual variables, and\n      * updates all uses.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}