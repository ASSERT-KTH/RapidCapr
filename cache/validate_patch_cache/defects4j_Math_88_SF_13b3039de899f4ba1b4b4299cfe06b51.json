{
    "patch": "        for (int i = getNumObjectiveFunctions(); i < getNumObjectiveFunctions() + coefficients.length; i++) {\n            basicRow = getBasicRow(i);\n            // if multiple variables can take a given value\n            // then we choose the first and set the rest equal to 0\n            coefficients[i - getNumObjectiveFunctions()] =\n                (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                (restrictToNonNegative ? 0 : mostNegative);\n            if (basicRow != null) {\n                for (int j = getNumObjectiveFunctions(); j < i; j++) {\n                    if (tableau.getEntry(basicRow, j) == 1) {\n                        coefficients[i - getNumObjectiveFunctions()] = 0;\n                    }\n                }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f2a..7cae4c93b 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -321,28 +321,19 @@ class SimplexTableau implements Serializable {\n      * </p>\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n-        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-        Integer basicRow =\n-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n-        for (int i = 0; i < coefficients.length; i++) {\n-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n-                // if multiple variables can take a given value \n-                // then we choose the first and set the rest equal to 0\n-                coefficients[i] =\n-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                    (restrictToNonNegative ? 0 : mostNegative);\n+        for (int i = getNumObjectiveFunctions(); i < getNumObjectiveFunctions() + coefficients.length; i++) {\n+            basicRow = getBasicRow(i);\n+            // if multiple variables can take a given value\n+            // then we choose the first and set the rest equal to 0\n+            coefficients[i - getNumObjectiveFunctions()] =\n+                (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n+                (restrictToNonNegative ? 0 : mostNegative);\n             if (basicRow != null) {\n-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n+                for (int j = getNumObjectiveFunctions(); j < i; j++) {\n                     if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n+                        coefficients[i - getNumObjectiveFunctions()] = 0;\n                     }\n                 }\n-            }\n-        }\n-        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n-    }\n \n     /**\n      * Subtracts a multiple of one row from another.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}