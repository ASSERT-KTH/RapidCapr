{
    "patch": "    private boolean canInline(\n        Reference declaration,\n        Reference initialization,\n        Reference reference) {\n      if (!isValidDeclaration(declaration)\n          || !isValidInitialization(initialization)\n          || !isValidReference(reference)) {\n        return false;\n      }\n\n      // If the value is read more than once, skip it.\n      // VAR declarations and EXPR_RESULT don't need the value, but other\n      // ASSIGN expressions parents do.\n      if (declaration != initialization &&\n          !initialization.getGrandparent().isExprResult()) {\n        return false;\n      }\n\n      // Be very conservative and do no cross control structures or\n      // scope boundaries\n      if (declaration.getBasicBlock() != initialization.getBasicBlock()\n          || declaration.getBasicBlock() != reference.getBasicBlock()) {\n        return false;\n      }\n      \n      Node value = initialization.getAssignedValue();\n      if (value == null) {\n        return false;\n      }\n      // Do not inline into a call node. This would change\n      // the context in which it was being called. For example,\n      //   var a = b.c;\n      //   a();\n      // should not be inlined, because it calls a in the context of b\n      // rather than the context of the window.\n      //   var a = b.c;\n      //   f(a)\n      // is ok.\n      if (value.isFunction()) {\n        Node callNode = reference.getParent();\n        if (callNode.isCall()) {\n          CodingConvention convention = compiler.getCodingConvention();\n          // Bug 2388531: Don't inline subclass definitions into class defining\n          // calls as this confused class removing logic.\n          SubclassRelationship relationship =\n              convention.getClassesDefinedByCall(callNode);\n          if (relationship != null) {\n            return false;\n          }\n\n          String callName = null;\n          boolean isAllowlistedGetterCall = false;\n          if (callNode.getFirstChild().isQualifiedName()) {\n            callName = callNode.getFirstChild().getQualifiedName();\n            isAllowlistedGetterCall = INLINE_GETTER_CALL_ALLOWLIST.contains(callName);\n          }\n          // Do not inline singleton getter methods.\n          if (isAllowlistedGetterCall\n              || convention.isPropertyGetLikelyGetter(value, reference.getParent())) {\n            return false;\n          }\n        }\n      }\n\n      return canMoveAggressively(value) ||\n          canMoveModerately(initialization, reference);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..0b2d536f 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,73 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+    private boolean canInline(\n+        Reference declaration,\n+        Reference initialization,\n+        Reference reference) {\n+      if (!isValidDeclaration(declaration)\n+          || !isValidInitialization(initialization)\n+          || !isValidReference(reference)) {\n+        return false;\n+      }\n+\n+      // If the value is read more than once, skip it.\n+      // VAR declarations and EXPR_RESULT don't need the value, but other\n+      // ASSIGN expressions parents do.\n+      if (declaration != initialization &&\n+          !initialization.getGrandparent().isExprResult()) {\n+        return false;\n+      }\n+\n+      // Be very conservative and do no cross control structures or\n+      // scope boundaries\n+      if (declaration.getBasicBlock() != initialization.getBasicBlock()\n+          || declaration.getBasicBlock() != reference.getBasicBlock()) {\n+        return false;\n+      }\n+      \n+      Node value = initialization.getAssignedValue();\n+      if (value == null) {\n+        return false;\n+      }\n+      // Do not inline into a call node. This would change\n+      // the context in which it was being called. For example,\n+      //   var a = b.c;\n+      //   a();\n+      // should not be inlined, because it calls a in the context of b\n+      // rather than the context of the window.\n+      //   var a = b.c;\n+      //   f(a)\n+      // is ok.\n+      if (value.isFunction()) {\n+        Node callNode = reference.getParent();\n+        if (callNode.isCall()) {\n+          CodingConvention convention = compiler.getCodingConvention();\n+          // Bug 2388531: Don't inline subclass definitions into class defining\n+          // calls as this confused class removing logic.\n+          SubclassRelationship relationship =\n+              convention.getClassesDefinedByCall(callNode);\n+          if (relationship != null) {\n+            return false;\n+          }\n+\n+          String callName = null;\n+          boolean isAllowlistedGetterCall = false;\n+          if (callNode.getFirstChild().isQualifiedName()) {\n+            callName = callNode.getFirstChild().getQualifiedName();\n+            isAllowlistedGetterCall = INLINE_GETTER_CALL_ALLOWLIST.contains(callName);\n+          }\n+          // Do not inline singleton getter methods.\n+          if (isAllowlistedGetterCall\n+              || convention.isPropertyGetLikelyGetter(value, reference.getParent())) {\n+            return false;\n+          }\n+        }\n+      }\n+\n+      return canMoveAggressively(value) ||\n+          canMoveModerately(initialization, reference);\n+    }\n         }\n       }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}