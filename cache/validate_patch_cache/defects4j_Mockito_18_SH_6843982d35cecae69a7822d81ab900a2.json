{
    "patch": "public Object execute(String methodName, Object... args) throws Exception {\n    Method method = findMethod(methodName, args);\n    if (method == null) {\n        throw new NoSuchMethodException(methodName);\n    }\n    \n    Object result = method.invoke(mock, args);\n    ReturnValues values = method.getAnnotation(ReturnValues.class);\n    \n    if (values != null) {\n        for (ReturnValue value : values.value()) {\n            if (value.type().isAssignableFrom(method.getReturnType())) {\n                return value.value();\n            }\n        }\n    }\n    \n    if (method.getReturnType() != Void.TYPE) {\n        return mock;\n    }\n    \n    return result;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}