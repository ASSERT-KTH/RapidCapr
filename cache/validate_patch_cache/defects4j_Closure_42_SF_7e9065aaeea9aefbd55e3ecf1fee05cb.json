{
    "patch": "import java.util.HashSet;\nimport java.util.Set;\nimport org.mozilla.javascript.ErrorReporter;\nimport org.mozilla.javascript.EvaluatorException;\nimport org.mozilla.javascript.Node;\nimport org.mozilla.javascript.Token;\nimport org.mozilla.javascript.ast.AstNode;\nimport org.mozilla.javascript.ast.Block;\nimport org.mozilla.javascript.ast.BreakStatement;\nimport org.mozilla.javascript.ast.CatchClause;\nimport org.mozilla.javascript.ast.ConditionalExpression;\nimport org.mozilla.javascript.ast.ContinueStatement;\nimport org.mozilla.javascript.ast.DoLoop;\nimport org.mozilla.javascript.ast.ElementGet;\nimport org.mozilla.javascript.ast.EmptyExpression;\nimport org.mozilla.javascript.ast.ExpressionStatement;\nimport org.mozilla.javascript.ast.ForInLoop;\nimport org.mozilla.javascript.ast.NodeTransformer;\nimport org.mozilla.javascript.ast.Scope;\nimport org.mozilla.javascript.ast.ScriptNode;\nimport org.mozilla.javascript.ast.Symbol;\n\npublic class MyNodeTransformer extends NodeTransformer {\n  private final ErrorReporter errorReporter;\n  private final String sourceName;\n  private final Set<String> ALLOWED_DIRECTIVES = new HashSet<>();\n  \n  public MyNodeTransformer(ErrorReporter errorReporter, String sourceName) {\n    this.errorReporter = errorReporter;\n    this.sourceName = sourceName;\n    ALLOWED_DIRECTIVES.add(\"use strict\");\n  }\n\n  private boolean isDirective(Node n) {\n    if (n == null) return false;\n\n    int nType = n.getType();\n    return nType == Token.EXPR_RESULT &&\n        n.getFirstChild().isString() &&\n        ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n  }\n\n  @Override\n  Node processBlock(Block blockNode) {\n    return processGeneric(blockNode);\n  }\n\n  @Override\n  Node processBreakStatement(BreakStatement statementNode) {\n    Node node = newNode(Token.BREAK);\n    if (statementNode.getBreakLabel() != null) {\n      Node labelName = transform(statementNode.getBreakLabel());\n      // Change the NAME to LABEL_NAME\n      labelName.setType(Token.LABEL_NAME);\n      node.addChildToBack(labelName);\n    }\n    return node;\n  }\n\n  @Override\n  Node processCatchClause(CatchClause clauseNode) {\n    AstNode catchVar = clauseNode.getVarName();\n    Node node = newNode(Token.CATCH, transform(catchVar));\n    if (clauseNode.getCatchCondition() != null) {\n      errorReporter.error(\n          \"Catch clauses are not supported\",\n          sourceName,\n          clauseNode.getCatchCondition().getLineno(), \"\", 0);\n    }\n    node.addChildToBack(transformBlock(clauseNode.getBody()));\n    return node;\n  }\n\n  @Override\n  Node processConditionalExpression(ConditionalExpression exprNode) {\n    return newNode(\n        Token.HOOK,\n        transform(exprNode.getTestExpression()),\n        transform(exprNode.getTrueExpression()),\n        transform(exprNode.getFalseExpression()));\n  }\n\n  @Override\n  Node processContinueStatement(ContinueStatement statementNode) {\n    Node node = newNode(Token.CONTINUE);\n    if (statementNode.getLabel() != null) {\n      Node labelName = transform(statementNode.getLabel());\n      // Change the NAME to LABEL_NAME\n      labelName.setType(Token.LABEL_NAME);\n      node.addChildToBack(labelName);\n    }\n    return node;\n  }\n\n  @Override\n  Node processDoLoop(DoLoop loopNode) {\n    return newNode(\n        Token.DO,\n        transformBlock(loopNode.getBody()),\n        transform(loopNode.getCondition()));\n  }\n\n  @Override\n  Node processElementGet(ElementGet getNode) {\n    return newNode(\n        Token.GETELEM,\n        transform(getNode.getTarget()),\n        transform(getNode.getElement()));\n  }\n\n  @Override\n  Node processEmptyExpression(EmptyExpression exprNode) {\n    Node node = newNode(Token.EMPTY);\n    return node;\n  }\n\n  @Override\n  Node processExpressionStatement(ExpressionStatement statementNode) {\n    Node node = newNode(transformTokenType(statementNode.getType()));\n    node.addChildToBack(transform(statementNode.getExpression()));\n    return node;\n  }\n\n  @Override\n  Node processForEachInLoop(ForInLoop loopNode) {\n    Node node = newNode(Token.FOR);\n    Scope loopScope = loopNode.getScope();\n    Symbol loopSymbol = loopNode.getIterator().getSymbol();\n    Symbol indexSymbol = loopScope.getSymbolTable().getSymbol(\"__index__\");\n\n    if (indexSymbol == null) {\n      indexSymbol = new Symbol(Token.LP, \"__index__\");\n      loopScope.getSymbolTable().put(indexSymbol);\n    }\n\n    node.putProp(Node.FOR_OF, 1);\n    node.addChildToBack(transform(loopNode.getIteratedObject()));\n    node.addChildToBack(transform(new org.mozilla.javascript.ast.VariableDeclaration(\n        0, loopNode.getLineno(), loopNode.getLp(), new org.mozilla.javascript.ast.VariableInitializer(\n            loopNode.getLineno(), transform(loopNode.getIterator())))));\n    node.addChildToBack(transformBlock(loopNode.getBody()));\n    return node;\n  }\n\n  @Override\n  Node processForInLoop(ForInLoop loopNode) {\n    Node node = newNode(Token.FOR);\n    node.addChildToBack(transform(loopNode.getIterator()));\n    node.addChildToBack(transform(loopNode.getIteratedObject()));\n    node.addChildToBack(transformBlock(loopNode.getBody()));\n    if (loopNode.isForEach()) {\n      node.putProp(Node.FOR_EACH, 1);\n    }\n    return node;\n  }\n\n  @Override\n  Node processScript(ScriptNode scriptNode) {\n    Node newScriptNode = super.processScript(scriptNode);\n    if (scriptNode.getDirectives() != null) {\n      for (AstNode directive : scriptNode.getDirectives()) {\n        if (!isDirective(directive)) {\n          errorReporter.error(\n              \"Unsupported directive: \" + directive.toSource(),\n              sourceName,\n              directive.getLineno(), \"\", 0);\n        }\n      }\n    }\n    return newScriptNode;\n  }\n\n  private Node newNode(int type) {\n    return new Node(type);\n  }\n\n  private Node newNode(int type, Node child) {\n    Node node = new Node(type);\n    node.addChildToBack(child);\n    return node;\n  }\n\n  private Node newNode(int type, Node child1, Node child2) {\n    Node node = new Node(type);\n    node.addChildToBack(child1);\n    node.addChildToBack(child2);\n    return node;\n  }\n\n  private Node newNode(int type, Node child1, Node child2, Node child3) {\n    Node node = new Node(type);\n    node.addChildToBack(child1);\n    node.addChildToBack(child2);\n    node.addChildToBack(child3);\n    return node;\n  }\n\n  private Node newNode(int type, Node child1, Node child2, Node child3, Node child4) {\n    Node node = new Node(type);\n    node.addChildToBack(child1);\n    node.addChildToBack(child2);\n    node.addChildToBack(child3);\n    node.addChildToBack(child4);\n    return node;\n  }\n\n  private int transformTokenType(int tokenType) {\n    switch (tokenType) {\n      case Token.EXPR_VOID:\n        return Token.VOID;\n      default:\n        return tokenType;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..a5fb981c 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,106 +473,221 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.mozilla.javascript.ErrorReporter;\n+import org.mozilla.javascript.EvaluatorException;\n+import org.mozilla.javascript.Node;\n+import org.mozilla.javascript.Token;\n+import org.mozilla.javascript.ast.AstNode;\n+import org.mozilla.javascript.ast.Block;\n+import org.mozilla.javascript.ast.BreakStatement;\n+import org.mozilla.javascript.ast.CatchClause;\n+import org.mozilla.javascript.ast.ConditionalExpression;\n+import org.mozilla.javascript.ast.ContinueStatement;\n+import org.mozilla.javascript.ast.DoLoop;\n+import org.mozilla.javascript.ast.ElementGet;\n+import org.mozilla.javascript.ast.EmptyExpression;\n+import org.mozilla.javascript.ast.ExpressionStatement;\n+import org.mozilla.javascript.ast.ForInLoop;\n+import org.mozilla.javascript.ast.NodeTransformer;\n+import org.mozilla.javascript.ast.Scope;\n+import org.mozilla.javascript.ast.ScriptNode;\n+import org.mozilla.javascript.ast.Symbol;\n+\n+public class MyNodeTransformer extends NodeTransformer {\n+  private final ErrorReporter errorReporter;\n+  private final String sourceName;\n+  private final Set<String> ALLOWED_DIRECTIVES = new HashSet<>();\n+  \n+  public MyNodeTransformer(ErrorReporter errorReporter, String sourceName) {\n+    this.errorReporter = errorReporter;\n+    this.sourceName = sourceName;\n+    ALLOWED_DIRECTIVES.add(\"use strict\");\n+  }\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n+  private boolean isDirective(Node n) {\n+    if (n == null) return false;\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n+    int nType = n.getType();\n+    return nType == Token.EXPR_RESULT &&\n+        n.getFirstChild().isString() &&\n+        ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+  }\n+\n+  @Override\n+  Node processBlock(Block blockNode) {\n+    return processGeneric(blockNode);\n+  }\n+\n+  @Override\n+  Node processBreakStatement(BreakStatement statementNode) {\n+    Node node = newNode(Token.BREAK);\n+    if (statementNode.getBreakLabel() != null) {\n+      Node labelName = transform(statementNode.getBreakLabel());\n+      // Change the NAME to LABEL_NAME\n+      labelName.setType(Token.LABEL_NAME);\n+      node.addChildToBack(labelName);\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+  @Override\n+  Node processCatchClause(CatchClause clauseNode) {\n+    AstNode catchVar = clauseNode.getVarName();\n+    Node node = newNode(Token.CATCH, transform(catchVar));\n+    if (clauseNode.getCatchCondition() != null) {\n+      errorReporter.error(\n+          \"Catch clauses are not supported\",\n+          sourceName,\n+          clauseNode.getCatchCondition().getLineno(), \"\", 0);\n     }\n+    node.addChildToBack(transformBlock(clauseNode.getBody()));\n+    return node;\n+  }\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n+  @Override\n+  Node processConditionalExpression(ConditionalExpression exprNode) {\n+    return newNode(\n+        Token.HOOK,\n+        transform(exprNode.getTestExpression()),\n+        transform(exprNode.getTrueExpression()),\n+        transform(exprNode.getFalseExpression()));\n+  }\n+\n+  @Override\n+  Node processContinueStatement(ContinueStatement statementNode) {\n+    Node node = newNode(Token.CONTINUE);\n+    if (statementNode.getLabel() != null) {\n+      Node labelName = transform(statementNode.getLabel());\n+      // Change the NAME to LABEL_NAME\n+      labelName.setType(Token.LABEL_NAME);\n+      node.addChildToBack(labelName);\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+  @Override\n+  Node processDoLoop(DoLoop loopNode) {\n+    return newNode(\n+        Token.DO,\n+        transformBlock(loopNode.getBody()),\n+        transform(loopNode.getCondition()));\n+  }\n+\n+  @Override\n+  Node processElementGet(ElementGet getNode) {\n+    return newNode(\n+        Token.GETELEM,\n+        transform(getNode.getTarget()),\n+        transform(getNode.getElement()));\n+  }\n+\n+  @Override\n+  Node processEmptyExpression(EmptyExpression exprNode) {\n+    Node node = newNode(Token.EMPTY);\n+    return node;\n+  }\n+\n+  @Override\n+  Node processExpressionStatement(ExpressionStatement statementNode) {\n+    Node node = newNode(transformTokenType(statementNode.getType()));\n+    node.addChildToBack(transform(statementNode.getExpression()));\n+    return node;\n+  }\n+\n+  @Override\n+  Node processForEachInLoop(ForInLoop loopNode) {\n+    Node node = newNode(Token.FOR);\n+    Scope loopScope = loopNode.getScope();\n+    Symbol loopSymbol = loopNode.getIterator().getSymbol();\n+    Symbol indexSymbol = loopScope.getSymbolTable().getSymbol(\"__index__\");\n+\n+    if (indexSymbol == null) {\n+      indexSymbol = new Symbol(Token.LP, \"__index__\");\n+      loopScope.getSymbolTable().put(indexSymbol);\n+    }\n+\n+    node.putProp(Node.FOR_OF, 1);\n+    node.addChildToBack(transform(loopNode.getIteratedObject()));\n+    node.addChildToBack(transform(new org.mozilla.javascript.ast.VariableDeclaration(\n+        0, loopNode.getLineno(), loopNode.getLp(), new org.mozilla.javascript.ast.VariableInitializer(\n+            loopNode.getLineno(), transform(loopNode.getIterator())))));\n+    node.addChildToBack(transformBlock(loopNode.getBody()));\n+    return node;\n+  }\n+\n+  @Override\n+  Node processForInLoop(ForInLoop loopNode) {\n+    Node node = newNode(Token.FOR);\n+    node.addChildToBack(transform(loopNode.getIterator()));\n+    node.addChildToBack(transform(loopNode.getIteratedObject()));\n+    node.addChildToBack(transformBlock(loopNode.getBody()));\n+    if (loopNode.isForEach()) {\n+      node.putProp(Node.FOR_EACH, 1);\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n+  @Override\n+  Node processScript(ScriptNode scriptNode) {\n+    Node newScriptNode = super.processScript(scriptNode);\n+    if (scriptNode.getDirectives() != null) {\n+      for (AstNode directive : scriptNode.getDirectives()) {\n+        if (!isDirective(directive)) {\n+          errorReporter.error(\n+              \"Unsupported directive: \" + directive.toSource(),\n+              sourceName,\n+              directive.getLineno(), \"\", 0);\n+        }\n       }\n-      return node;\n     }\n+    return newScriptNode;\n+  }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n+  private Node newNode(int type) {\n+    return new Node(type);\n+  }\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n+  private Node newNode(int type, Node child) {\n+    Node node = new Node(type);\n+    node.addChildToBack(child);\n+    return node;\n+  }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n+  private Node newNode(int type, Node child1, Node child2) {\n+    Node node = new Node(type);\n+    node.addChildToBack(child1);\n+    node.addChildToBack(child2);\n+    return node;\n+  }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n+  private Node newNode(int type, Node child1, Node child2, Node child3) {\n+    Node node = new Node(type);\n+    node.addChildToBack(child1);\n+    node.addChildToBack(child2);\n+    node.addChildToBack(child3);\n+    return node;\n+  }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n+  private Node newNode(int type, Node child1, Node child2, Node child3, Node child4) {\n+    Node node = new Node(type);\n+    node.addChildToBack(child1);\n+    node.addChildToBack(child2);\n+    node.addChildToBack(child3);\n+    node.addChildToBack(child4);\n+    return node;\n+  }\n \n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+  private int transformTokenType(int tokenType) {\n+    switch (tokenType) {\n+      case Token.EXPR_VOID:\n+        return Token.VOID;\n+      default:\n+        return tokenType;\n     }\n+  }\n+}\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}