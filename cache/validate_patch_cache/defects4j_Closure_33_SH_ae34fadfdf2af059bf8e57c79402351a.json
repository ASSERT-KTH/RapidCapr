{
    "patch": "if (constraintObj.isNominalConstructor() && !constraintObj.hasReferenceName() && !constraintObj.isFunctionType()) {\n    ObjectType proto = constraintObj.getPrototypeObject();\n    if (proto.isRecordType()) {\n        for (String prop : proto.getOwnPropertyNames()) {\n            JSType propType = proto.getPropertyType(prop);\n            if (!isPropertyTypeDeclared(prop)) {\n                JSType typeToInfer = null;\n                if (!hasProperty(prop)) {\n                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n                } else {\n                    typeToInfer = getPropertyType(prop);\n                }\n                defineInferredProperty(prop, typeToInfer, null);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..c63f4401 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,23 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+if (constraintObj.isNominalConstructor() && !constraintObj.hasReferenceName() && !constraintObj.isFunctionType()) {\n+    ObjectType proto = constraintObj.getPrototypeObject();\n+    if (proto.isRecordType()) {\n+        for (String prop : proto.getOwnPropertyNames()) {\n+            JSType propType = proto.getPropertyType(prop);\n+            if (!isPropertyTypeDeclared(prop)) {\n+                JSType typeToInfer = null;\n+                if (!hasProperty(prop)) {\n+                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n+                } else {\n+                    typeToInfer = getPropertyType(prop);\n+                }\n+                defineInferredProperty(prop, typeToInfer, null);\n+            }\n+        }\n+    }\n+}\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}