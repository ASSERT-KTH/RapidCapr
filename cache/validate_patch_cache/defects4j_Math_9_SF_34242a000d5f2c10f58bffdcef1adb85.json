{
    "patch": "public Line revert() {\n    final double eps = 1e-12;\n    final Vector3D dir = this.getDirection().negate();\n    if (dir.distance(Vector3D.ZERO) < eps) {\n        // Handle the special case of the zero vector\n        final Vector3D endPoint = this.getOrigin().add(dir);\n        return new Line(endPoint, Vector3D.PLUS_I);\n    } else {\n        final double[] vCoords = dir.toArray();\n        double norm = Vector3D.of(vCoords).getNorm();\n        double factor = 1.0 / norm;\n        for (int i = 0; i < 3; ++i) {\n            vCoords[i] = Math.round(vCoords[i] * factor * 1e12) / 1e12;\n        }\n        final Vector3D roundedDir = Vector3D.of(vCoords);\n        final Vector3D endPoint = this.getOrigin().add(dir);\n        return new Line(endPoint, roundedDir);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..82d057276 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,25 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n+public Line revert() {\n+    final double eps = 1e-12;\n+    final Vector3D dir = this.getDirection().negate();\n+    if (dir.distance(Vector3D.ZERO) < eps) {\n+        // Handle the special case of the zero vector\n+        final Vector3D endPoint = this.getOrigin().add(dir);\n+        return new Line(endPoint, Vector3D.PLUS_I);\n+    } else {\n+        final double[] vCoords = dir.toArray();\n+        double norm = Vector3D.of(vCoords).getNorm();\n+        double factor = 1.0 / norm;\n+        for (int i = 0; i < 3; ++i) {\n+            vCoords[i] = Math.round(vCoords[i] * factor * 1e12) / 1e12;\n+        }\n+        final Vector3D roundedDir = Vector3D.of(vCoords);\n+        final Vector3D endPoint = this.getOrigin().add(dir);\n+        return new Line(endPoint, roundedDir);\n     }\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}