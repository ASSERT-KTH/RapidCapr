{
    "patch": "public String escape(String content) {\n    final StringBuilder sb = new StringBuilder();\n    for (int i = 0, len = content.length(); i < len; i++) {\n        char ch = content.charAt(i);\n        switch (ch) {\n            case '<':\n                sb.append(\"&lt;\");\n                break;\n            case '>':\n                sb.append(\"&gt;\");\n                break;\n            case '&':\n                sb.append(\"&amp;\");\n                break;\n            case '\\\"':\n                sb.append(\"&quot;\");\n                break;\n            case ' ':\n                sb.append(' ');\n                break;\n            case '\\n':\n                sb.append(\"&nbsp; \\n\");\n                break;\n            case '\\r':\n                break;\n            case '\\t':\n                sb.append(\"&nbsp; &nbsp; &nbsp; \");\n                break;\n            default:\n                if (ch >= 128 || ch < 32 && ch != '\\t' && ch != '\\n' && ch != '\\r') {\n                    sb.append(\"&#\").append((int) ch).append(\";\");\n                } else {\n                    sb.append(ch);\n                }\n        }\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..31863299 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,44 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public String escape(String content) {\n+    final StringBuilder sb = new StringBuilder();\n+    for (int i = 0, len = content.length(); i < len; i++) {\n+        char ch = content.charAt(i);\n+        switch (ch) {\n+            case '<':\n+                sb.append(\"&lt;\");\n+                break;\n+            case '>':\n+                sb.append(\"&gt;\");\n+                break;\n+            case '&':\n+                sb.append(\"&amp;\");\n+                break;\n+            case '\\\"':\n+                sb.append(\"&quot;\");\n+                break;\n+            case ' ':\n+                sb.append(' ');\n+                break;\n+            case '\\n':\n+                sb.append(\"&nbsp; \\n\");\n+                break;\n+            case '\\r':\n+                break;\n+            case '\\t':\n+                sb.append(\"&nbsp; &nbsp; &nbsp; \");\n+                break;\n+            default:\n+                if (ch >= 128 || ch < 32 && ch != '\\t' && ch != '\\n' && ch != '\\r') {\n+                    sb.append(\"&#\").append((int) ch).append(\";\");\n+                } else {\n+                    sb.append(ch);\n+                }\n+        }\n+    }\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}