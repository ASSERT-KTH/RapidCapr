{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values; // no need to compute\n    }\n\n    long instant = iChronology.set(partial, 0L); // set initial values for fields\n\n    DateTimeField largestField = null;\n    for (int i = 0, isize = partial.size(); i < isize; i++) {\n        DateTimeField field = partial.getField(i);\n        if (largestField == null || field.getDurationField().getUnitMillis() > largestField.getDurationField().getUnitMillis()) {\n            largestField = field; // find the largest field to add to\n        }\n        instant = field.set(instant, values[i]); // set the initial values in the instant\n    }\n\n    long largestFieldValue = largestField.add(instant, valueToAdd); // add the value to the largest field\n\n    // normalize the instant so the largest field does not overflow\n    instant = iChronology.get(largestField.getType()).roundFloor(largestFieldValue);\n    for (int i = 0, isize = partial.size(); i < isize; i++) {\n        if (i != fieldIndex) {\n            // set all fields, except the one being added to, to their original values\n            DateTimeField field = partial.getField(i);\n            instant = field.set(instant, values[i]);\n        }\n    }\n\n    // check if changing the largest field caused the day of month to overflow\n    int dayOfMonthIndex = DateTimeUtils.getChronology(partial).dayOfMonth().getFieldIndex(partial);\n    int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n    if (dayOfMonthIndex >= 0 && values[dayOfMonthIndex] > maxDayOfMonth) {\n        instant = iChronology.dayOfMonth().set(instant, maxDayOfMonth);\n    }\n\n    return iChronology.get(partial, instant);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..c36277dd 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,44 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values; // no need to compute\n+    }\n+\n+    long instant = iChronology.set(partial, 0L); // set initial values for fields\n+\n+    DateTimeField largestField = null;\n+    for (int i = 0, isize = partial.size(); i < isize; i++) {\n+        DateTimeField field = partial.getField(i);\n+        if (largestField == null || field.getDurationField().getUnitMillis() > largestField.getDurationField().getUnitMillis()) {\n+            largestField = field; // find the largest field to add to\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        instant = field.set(instant, values[i]); // set the initial values in the instant\n+    }\n+\n+    long largestFieldValue = largestField.add(instant, valueToAdd); // add the value to the largest field\n+\n+    // normalize the instant so the largest field does not overflow\n+    instant = iChronology.get(largestField.getType()).roundFloor(largestFieldValue);\n+    for (int i = 0, isize = partial.size(); i < isize; i++) {\n+        if (i != fieldIndex) {\n+            // set all fields, except the one being added to, to their original values\n+            DateTimeField field = partial.getField(i);\n+            instant = field.set(instant, values[i]);\n         }\n     }\n \n+    // check if changing the largest field caused the day of month to overflow\n+    int dayOfMonthIndex = DateTimeUtils.getChronology(partial).dayOfMonth().getFieldIndex(partial);\n+    int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n+    if (dayOfMonthIndex >= 0 && values[dayOfMonthIndex] > maxDayOfMonth) {\n+        instant = iChronology.dayOfMonth().set(instant, maxDayOfMonth);\n+    }\n+\n+    return iChronology.get(partial, instant);\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}