{
    "patch": "            months += safeMultiply(years, 12);\n            result = result.withYears(0).withMonths(months);\n        }\n        return result;\n    }\n\n    private int safeMultiply(int num, int factor) {\n        if (num == 0) {\n            return 0;\n        }\n        if (num > 0 ? factor > Integer.MAX_VALUE / num || factor < Integer.MIN_VALUE / num\n                : (num < -1 ? factor > Integer.MIN_VALUE / num || factor < Integer.MAX_VALUE / num\n                : factor == Integer.MIN_VALUE)) {\n            throw new ArithmeticException(\"Multiplication overflows an int: \" + num + \" * \" + factor);\n        }\n        return num * factor;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..11471b0e 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,21 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+            months += safeMultiply(years, 12);\n+            result = result.withYears(0).withMonths(months);\n         }\n         return result;\n     }\n \n+    private int safeMultiply(int num, int factor) {\n+        if (num == 0) {\n+            return 0;\n+        }\n+        if (num > 0 ? factor > Integer.MAX_VALUE / num || factor < Integer.MIN_VALUE / num\n+                : (num < -1 ? factor > Integer.MIN_VALUE / num || factor < Integer.MAX_VALUE / num\n+                : factor == Integer.MIN_VALUE)) {\n+            throw new ArithmeticException(\"Multiplication overflows an int: \" + num + \" * \" + factor);\n+        }\n+        return num * factor;\n+\n }",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}