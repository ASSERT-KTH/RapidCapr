{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    final double v1x = v1.getX();\n    final double v1y = v1.getY();\n    final double v1z = v1.getZ();\n    final double v2x = v2.getX();\n    final double v2y = v2.getY();\n    final double v2z = v2.getZ();\n    final double s1 = Math.max(Math.max(Math.abs(v1x), Math.abs(v1y)), Math.abs(v1z));\n    final double s2 = Math.max(Math.max(Math.abs(v2x), Math.abs(v2y)), Math.abs(v2z));\n    final double eps = 1e-15;\n    final double tol = 1e-14;\n    final double threshold = eps + tol * (s1 * s2);\n    if (threshold == 0) {\n        return new Vector3D(0, 0, 0);\n    }\n    final double gc1 = v1x / threshold;\n    final double gc2 = v1y / threshold;\n    final double gc3 = v1z / threshold;\n    final double hc1 = v2x / threshold;\n    final double hc2 = v2y / threshold;\n    final double hc3 = v2z / threshold;\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n    // compute rho as an accurate approximation of v1.v2 / v2.v2\n    final double gc1hc2 = gc1 * hc2;\n    final double gc1hc3 = gc1 * hc3;\n    final double gc2hc1 = gc2 * hc1;\n    final double gc2hc3 = gc2 * hc3;\n    final double gc3hc1 = gc3 * hc1;\n    final double gc3hc2 = gc3 * hc2;\n    double rho = (gc1hc2 - gc2hc1) * hc3 + (gc2hc3 - gc3hc2) * hc1 + (gc3hc1 - gc1hc3) * hc2;\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    final double alpha = v1x - rho * v2x;\n    final double beta = v1y - rho * v2y;\n    final double gamma = v1z - rho * v2z;\n    final double betaV2z = beta * v2z;\n    final double gammaV2y = gamma * v2y;\n    final double gammaV2x = gamma * v2x;\n    final double alphaV2z = alpha * v2z;\n    final double alphaV2y = alpha * v2y;\n    final double betaV2x = beta * v2x;\n    return new Vector3D(betaV2z - gammaV2y, gammaV2x - alphaV2z, alphaV2y - betaV2x);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..3910cd1ff 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,56 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    final double v1x = v1.getX();\n+    final double v1y = v1.getY();\n+    final double v1z = v1.getZ();\n+    final double v2x = v2.getX();\n+    final double v2y = v2.getY();\n+    final double v2z = v2.getZ();\n+    final double s1 = Math.max(Math.max(Math.abs(v1x), Math.abs(v1y)), Math.abs(v1z));\n+    final double s2 = Math.max(Math.max(Math.abs(v2x), Math.abs(v2y)), Math.abs(v2z));\n+    final double eps = 1e-15;\n+    final double tol = 1e-14;\n+    final double threshold = eps + tol * (s1 * s2);\n+    if (threshold == 0) {\n+        return new Vector3D(0, 0, 0);\n+    }\n+    final double gc1 = v1x / threshold;\n+    final double gc2 = v1y / threshold;\n+    final double gc3 = v1z / threshold;\n+    final double hc1 = v2x / threshold;\n+    final double hc2 = v2y / threshold;\n+    final double hc3 = v2z / threshold;\n+    // we reduce cancellation errors by preconditioning,\n+    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+    // v3 without loss of precision. See Kahan lecture\n+    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+\n+    // compute rho as an accurate approximation of v1.v2 / v2.v2\n+    final double gc1hc2 = gc1 * hc2;\n+    final double gc1hc3 = gc1 * hc3;\n+    final double gc2hc1 = gc2 * hc1;\n+    final double gc2hc3 = gc2 * hc3;\n+    final double gc3hc1 = gc3 * hc1;\n+    final double gc3hc2 = gc3 * hc2;\n+    double rho = (gc1hc2 - gc2hc1) * hc3 + (gc2hc3 - gc3hc2) * hc1 + (gc3hc1 - gc1hc3) * hc2;\n+\n+    // compute cross product from v3 and v2 instead of v1 and v2\n+    final double alpha = v1x - rho * v2x;\n+    final double beta = v1y - rho * v2y;\n+    final double gamma = v1z - rho * v2z;\n+    final double betaV2z = beta * v2z;\n+    final double gammaV2y = gamma * v2y;\n+    final double gammaV2x = gamma * v2x;\n+    final double alphaV2z = alpha * v2z;\n+    final double alphaV2y = alpha * v2y;\n+    final double betaV2x = beta * v2x;\n+    return new Vector3D(betaV2z - gammaV2y, gammaV2x - alphaV2z, alphaV2y - betaV2x);\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<-1.0> but was:<-0.9999990463256836>",
    "test_result": "FAIL"
}