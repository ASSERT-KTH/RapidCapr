{
    "patch": "private boolean toStringEquals(Matcher m, Object arg) {\n    if (m == arg) {\n        return true; // both objects are the same\n    }\n    if (m == null || arg == null) {\n        return m == arg; // if only one object is null, return true only if they both are\n    }\n    String mStr = null;\n    String argStr = null;\n    try {\n        mStr = StringDescription.toString(m); // get string representation of m\n        argStr = arg.toString(); // get string representation of arg\n    } catch (NullPointerException e) {\n        return false; // if any exception occurs, the objects are not equal\n    }\n    return mStr.equals(argStr);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java b/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\nindex 671fbc539..0eb35e234 100644\n--- a/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\n+++ b/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\n@@ -44,7 +44,22 @@ public class ArgumentMatchingTool {\n         }\n     }\n \n-    private boolean toStringEquals(Matcher m, Object arg) {\n-        return StringDescription.toString(m).equals(arg.toString());\n-    }\n+\n+private boolean toStringEquals(Matcher m, Object arg) {\n+    if (m == arg) {\n+        return true; // both objects are the same\n+    }\n+    if (m == null || arg == null) {\n+        return m == arg; // if only one object is null, return true only if they both are\n+    }\n+    String mStr = null;\n+    String argStr = null;\n+    try {\n+        mStr = StringDescription.toString(m); // get string representation of m\n+        argStr = arg.toString(); // get string representation of arg\n+    } catch (NullPointerException e) {\n+        return false; // if any exception occurs, the objects are not equal\n+    }\n+    return mStr.equals(argStr);\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}