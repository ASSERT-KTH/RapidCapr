{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        if (valueToAdd == 0) {\n            return values;\n        }\n        if (DateTimeUtils.isContiguous(partial)) {\n            int changedField = -1;\n            int newValue = 0;\n            for (int i = 0, isize = partial.size(); i < isize && changedField == -1; i++) {\n                if (partial.getFieldType(i).getField(iChronology).getDurationField().getType() == DurationFieldType.months()) {\n                    newValue = values[i] + valueToAdd;\n                    changedField = i;\n                }\n            }\n            final int maxAllowedValue = partial.getField(changedField).getFieldType().getField(iChronology).getRange().getMaximumValue(instantLocal(partial));\n            if (newValue > maxAllowedValue) {\n                newValue = maxAllowedValue;\n            }\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                if (i == changedField) {\n                    if (newValue != values[i]) {\n                        instant = partial.getFieldType(i).getField(iChronology).set(instant, newValue);\n                    } else {\n                        instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n                    }\n                } else {\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n                }\n            }\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..e73bfbbb 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -201,18 +201,34 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n \n     //-----------------------------------------------------------------------\n     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n+            int changedField = -1;\n+            int newValue = 0;\n+            for (int i = 0, isize = partial.size(); i < isize && changedField == -1; i++) {\n+                if (partial.getFieldType(i).getField(iChronology).getDurationField().getType() == DurationFieldType.months()) {\n+                    newValue = values[i] + valueToAdd;\n+                    changedField = i;\n+                }\n+            }\n+            final int maxAllowedValue = partial.getField(changedField).getFieldType().getField(iChronology).getRange().getMaximumValue(instantLocal(partial));\n+            if (newValue > maxAllowedValue) {\n+                newValue = maxAllowedValue;\n+            }\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                if (i == changedField) {\n+                    if (newValue != values[i]) {\n+                        instant = partial.getFieldType(i).getField(iChronology).set(instant, newValue);\n+                    } else {\n+                        instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                    }\n+                } else {\n+                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n             return iChronology.get(partial, instant);\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}