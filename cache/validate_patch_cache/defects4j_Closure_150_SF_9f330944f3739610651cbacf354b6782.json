{
    "patch": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n == scope.getRootNode()) return;\n\n        if (n.getType() == Token.LP && parent.getType() == Token.EXPR_RESULT\n                && parent.getFirstChild().getType() == Token.FUNCTION) {\n            handleFunctionInputs(parent.getFirstChild());\n            return;\n        }\n\n        attachLiteralTypes(n);\n        switch (n.getType()) {\n            case Token.FUNCTION:\n                if (NodeUtil.isFunctionDeclaration(n)) {\n                    defineDeclaredFunction(n, parent);\n                } else if (NodeUtil.isFunctionExpression(n) && parent.getType() == Token.EXPR_RESULT) {\n                    defineFunctionExpression(n, parent);\n                }\n                break;\n            case Token.CATCH:\n                defineCatch(n, parent);\n                break;\n            case Token.VAR:\n                defineVar(n, parent);\n                break;\n        }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..7280fbb8 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,29 +1440,32 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+        if (n == scope.getRootNode()) return;\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+        if (n.getType() == Token.LP && parent.getType() == Token.EXPR_RESULT\n+                && parent.getFirstChild().getType() == Token.FUNCTION) {\n+            handleFunctionInputs(parent.getFirstChild());\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+\n+        attachLiteralTypes(n);\n+        switch (n.getType()) {\n+            case Token.FUNCTION:\n+                if (NodeUtil.isFunctionDeclaration(n)) {\n+                    defineDeclaredFunction(n, parent);\n+                } else if (NodeUtil.isFunctionExpression(n) && parent.getType() == Token.EXPR_RESULT) {\n+                    defineFunctionExpression(n, parent);\n+                }\n+                break;\n+            case Token.CATCH:\n+                defineCatch(n, parent);\n+                break;\n+            case Token.VAR:\n+                defineVar(n, parent);\n+                break;\n+        }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}