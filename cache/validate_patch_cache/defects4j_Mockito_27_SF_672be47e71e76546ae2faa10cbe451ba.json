{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    if(mock instanceof org.mockito.cglib.proxy.Factory) {\n        ((org.mockito.cglib.proxy.Factory)mock).setCallback(0, newFilter);\n    } else {\n        Enhancer enhancer = new Enhancer();\n        enhancer.setSuperclass(mock.getClass());\n        enhancer.setCallback(newFilter);\n        Object newMock = enhancer.create();\n        Mockito.getMockSettings(mock).getMockCreationSettings().getMockitoMockHandler().setInterceptorsAndWrapper(newMock, newMockHandler);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..ea3a086db 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,21 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    if(mock instanceof org.mockito.cglib.proxy.Factory) {\n+        ((org.mockito.cglib.proxy.Factory)mock).setCallback(0, newFilter);\n+    } else {\n+        Enhancer enhancer = new Enhancer();\n+        enhancer.setSuperclass(mock.getClass());\n+        enhancer.setCallback(newFilter);\n+        Object newMock = enhancer.create();\n+        Mockito.getMockSettings(mock).getMockCreationSettings().getMockitoMockHandler().setInterceptorsAndWrapper(newMock, newMockHandler);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}