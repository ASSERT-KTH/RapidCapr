{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeInferred(prop) &&\n              !objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          } else if (objType.isPropertyTypeInferred(prop) &&\n              !propType.isUnknownType() &&\n              !propType.isEquivalentTo(objType.getPropertyType(prop))) {\n            JSType currentInferredType = objType.getPropertyType(prop);\n            objType.defineInferredProperty(prop,\n                currentInferredType.getLeastSupertype(propType), null);\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..f82de8c6 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1123,17 +1123,25 @@ class TypeInference\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n+          if (!objType.isPropertyTypeInferred(prop) &&\n+              !objType.isPropertyTypeDeclared(prop)) {\n             JSType typeToInfer = propType;\n             if (!objType.hasProperty(prop)) {\n               typeToInfer =\n                   getNativeType(VOID_TYPE).getLeastSupertype(propType);\n             }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n+          } else if (objType.isPropertyTypeInferred(prop) &&\n+              !propType.isUnknownType() &&\n+              !propType.isEquivalentTo(objType.getPropertyType(prop))) {\n+            JSType currentInferredType = objType.getPropertyType(prop);\n+            objType.defineInferredProperty(prop,\n+                currentInferredType.getLeastSupertype(propType), null);\n           }\n         }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}