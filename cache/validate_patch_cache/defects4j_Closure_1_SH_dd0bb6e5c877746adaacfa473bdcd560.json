{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    \n    // Collect all referenced function args\n    Set<String> referencedFunctionArgs = new HashSet<>();\n    NodeTraversal.traverse(compiler, function, new NodeTraversal.Callback() {\n      @Override\n      public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n        if (NodeUtil.isFunctionDeclaration(n) || NodeUtil.isNameDeclaration(n)) {\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n.isName()) {\n          String name = n.getString();\n          if (argList.hasChildWithName(name)) {\n            referencedFunctionArgs.add(name);\n          }\n        }\n      }\n    });\n\n    // Strip unreferenced args off the end of the function declaration.\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      String argName = lastArg.getString();\n      Var var = fnScope.getVar(argName);\n      if (!referenced.contains(var) && !referencedFunctionArgs.contains(argName)) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b04f113e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,50 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    \n+    // Collect all referenced function args\n+    Set<String> referencedFunctionArgs = new HashSet<>();\n+    NodeTraversal.traverse(compiler, function, new NodeTraversal.Callback() {\n+      @Override\n+      public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n+        if (NodeUtil.isFunctionDeclaration(n) || NodeUtil.isNameDeclaration(n)) {\n+          return false;\n+        }\n+        return true;\n+      }\n+\n+      @Override\n+      public void visit(NodeTraversal t, Node n, Node parent) {\n+        if (n.isName()) {\n+          String name = n.getString();\n+          if (argList.hasChildWithName(name)) {\n+            referencedFunctionArgs.add(name);\n+          }\n+        }\n+      }\n+    });\n+\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node lastArg;\n+    while ((lastArg = argList.getLastChild()) != null) {\n+      String argName = lastArg.getString();\n+      Var var = fnScope.getVar(argName);\n+      if (!referenced.contains(var) && !referencedFunctionArgs.contains(argName)) {\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+      } else {\n+        break;\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}