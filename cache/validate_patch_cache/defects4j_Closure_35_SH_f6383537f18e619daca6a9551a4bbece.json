{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType = ObjectType.makeObjectType(\n                objType.getOwnPropertyNames().union(\n                    ImmutableSet.of(prop)),\n                objType.getOwnPropertyJSTypes().toBuilder().put(\n                    prop, typeToInfer != null ? typeToInfer :\n                    getNativeType(UNKNOWN_TYPE)).build(),\n                objType.getAdditionalProperties(),\n                objType.getConstructor());\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..2ff5722c 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1129,10 +1129,16 @@ class TypeInference\n               typeToInfer =\n                   getNativeType(VOID_TYPE).getLeastSupertype(propType);\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+            objType = ObjectType.makeObjectType(\n+                objType.getOwnPropertyNames().union(\n+                    ImmutableSet.of(prop)),\n+                objType.getOwnPropertyJSTypes().toBuilder().put(\n+                    prop, typeToInfer != null ? typeToInfer :\n+                    getNativeType(UNKNOWN_TYPE)).build(),\n+                objType.getAdditionalProperties(),\n+                objType.getConstructor());\n           }\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}