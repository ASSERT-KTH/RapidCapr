{
    "patch": "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length != dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n\n    final double det = covarianceMatrix.getDeterminant();\n    final double coef = 1.0 / (Math.pow(2 * Math.PI, dim / 2) * Math.sqrt(det));\n    final double mh = Mahalanobis.distance(getMean(), covarianceMatrix, vals);\n    return coef * Math.exp(-0.5 * mh * mh);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\nindex 15706811b..bc7783faf 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n@@ -174,17 +174,18 @@ public class MultivariateNormalDistribution\n     }\n \n     /** {@inheritDoc} */\n-    public double density(final double[] vals) throws DimensionMismatchException {\n-        final int dim = getDimension();\n-        if (vals.length != dim) {\n-            throw new DimensionMismatchException(vals.length, dim);\n-        }\n-\n-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n-            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n-            getExponentTerm(vals);\n+public double density(final double[] vals) throws DimensionMismatchException {\n+    final int dim = getDimension();\n+    if (vals.length != dim) {\n+        throw new DimensionMismatchException(vals.length, dim);\n     }\n \n+    final double det = covarianceMatrix.getDeterminant();\n+    final double coef = 1.0 / (Math.pow(2 * Math.PI, dim / 2) * Math.sqrt(det));\n+    final double mh = Mahalanobis.distance(getMean(), covarianceMatrix, vals);\n+    return coef * Math.exp(-0.5 * mh * mh);\n+}\n+\n     /**\n      * Gets the square root of each element on the diagonal of the covariance\n      * matrix.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}