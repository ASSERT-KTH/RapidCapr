{
    "patch": "        if (offsetLocal != offsetAdjusted) {\n            if (offsetLocal > 0 && offsetAdjusted < 0 && instantLocal + offsetLocal < 0) {\n                // if the new adjusted offset is negative, then adding it to the new \n                // adjusted instant should yield positive value i.e. in the new UTC offset \n                return offsetLocal;\n            } else if (offsetLocal < 0 && offsetLocal - offsetAdjusted < 0) {\n                // if current local time is in the gap when transition happened\n                long prevTransition = previousTransition(instantAdjusted);\n                long nextTransition = nextTransition(instantAdjusted);\n                if (nextTransition == instantLocal - offsetLocal) {\n                    return offsetAdjusted;\n                } else if (prevTransition == instantLocal - offsetLocal) {\n                    return offsetLocal;\n                } else {\n                    throw new IllegalArgumentException(\"Switching time zone boundaries not well-defined in this case.\");\n                }\n            } else if ((offsetLocal - offsetAdjusted) < 0) {\n                // If current time is before the new offset takes effect \n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    int previousOffset = getOffset(nextAdjusted - 1);\n                    // Offset changed without a transition, so we are near\n                    // the border of a transition. Choose the greater of the\n                    // two offsets\n                    return Math.max(offsetLocal, previousOffset);\n                }\n                // if nextLocal == nextAdjusted then we were already at a\n                // transition, but we need to choose the correct side.\n                final long next = nextTransition(nextLocal);\n                if (next == nextAdjusted) {\n                    return offsetLocal;\n                }\n                final int offsetNext = getOffset(next);\n                if (offsetLocal != offsetNext && offsetAdjusted == offsetNext) {\n                    return offsetLocal;\n                }\n            } else {\n                // if we are in the \"gap\" when dst changed\n                if (offsetLocal < offsetAdjusted) {\n                    long nextLocal = nextTransition(instantAdjusted);\n                    int nextOffset = getOffset(nextLocal);\n                    if ((nextOffset - offsetAdjusted) < 0) {\n                        return offsetLocal;\n                    }\n                } else {\n                    long prevLocal = previousTransition(instantAdjusted);\n                    int prevOffset = getOffset(prevLocal);\n                    if ((prevOffset - offsetAdjusted) >= 0) {\n                        return offsetLocal;\n                    }\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b42d7eef 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,60 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+        if (offsetLocal != offsetAdjusted) {\n+            if (offsetLocal > 0 && offsetAdjusted < 0 && instantLocal + offsetLocal < 0) {\n+                // if the new adjusted offset is negative, then adding it to the new \n+                // adjusted instant should yield positive value i.e. in the new UTC offset \n+                return offsetLocal;\n+            } else if (offsetLocal < 0 && offsetLocal - offsetAdjusted < 0) {\n+                // if current local time is in the gap when transition happened\n+                long prevTransition = previousTransition(instantAdjusted);\n+                long nextTransition = nextTransition(instantAdjusted);\n+                if (nextTransition == instantLocal - offsetLocal) {\n+                    return offsetAdjusted;\n+                } else if (prevTransition == instantLocal - offsetLocal) {\n+                    return offsetLocal;\n+                } else {\n+                    throw new IllegalArgumentException(\"Switching time zone boundaries not well-defined in this case.\");\n+                }\n+            } else if ((offsetLocal - offsetAdjusted) < 0) {\n+                // If current time is before the new offset takes effect \n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    int previousOffset = getOffset(nextAdjusted - 1);\n+                    // Offset changed without a transition, so we are near\n+                    // the border of a transition. Choose the greater of the\n+                    // two offsets\n+                    return Math.max(offsetLocal, previousOffset);\n+                }\n+                // if nextLocal == nextAdjusted then we were already at a\n+                // transition, but we need to choose the correct side.\n+                final long next = nextTransition(nextLocal);\n+                if (next == nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+                final int offsetNext = getOffset(next);\n+                if (offsetLocal != offsetNext && offsetAdjusted == offsetNext) {\n+                    return offsetLocal;\n+                }\n+            } else {\n+                // if we are in the \"gap\" when dst changed\n+                if (offsetLocal < offsetAdjusted) {\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    int nextOffset = getOffset(nextLocal);\n+                    if ((nextOffset - offsetAdjusted) < 0) {\n+                        return offsetLocal;\n+                    }\n+                } else {\n+                    long prevLocal = previousTransition(instantAdjusted);\n+                    int prevOffset = getOffset(prevLocal);\n+                    if ((prevOffset - offsetAdjusted) >= 0) {\n+                        return offsetLocal;\n+                    }\n+                }\n+            }\n+        }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}