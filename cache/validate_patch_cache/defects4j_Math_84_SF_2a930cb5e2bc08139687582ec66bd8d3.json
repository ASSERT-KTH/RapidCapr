{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, khi, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = expanded.getPoint();\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n            } else {\n\n                // try to perform a contraction step\n                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = contracted.getPoint();\n                } else {\n\n                    // perform a shrink step\n                    final RealPointValuePair[] shrinkedSimplex = simplex;\n                    for (int i = 1; i < simplex.length; i++) {\n                        final RealPointValuePair pair = simplex[i];\n                        final double[] coords = pair.getPointRef();\n                        for (int j = 0; j < coords.length; j++) {\n                            coords[j] = best.getPointRef()[j] + sigma * (coords[j] - best.getPointRef()[j]);\n                        }\n                        pair.setValue(computeObjectiveValue(coords));\n                    }\n                    Arrays.sort(simplex, comparator);\n                    if (comparator.compare(simplex[0], best) >= 0) {\n                        // the contraction was no better than the worst point,\n                        // we need to reduce the size of the simplex, and perform\n                        // another iteration\n                        for (int i = 1; i < shrinkedSimplex.length; i++) {\n                            final RealPointValuePair pair = shrinkedSimplex[i];\n                            final double[] coords = pair.getPointRef();\n                            for (int j = 0; j < coords.length; j++) {\n                                coords[j] = shrinkedSimplex[0].getPointRef()[j] +\n                                    sigma * (coords[j] - shrinkedSimplex[0].getPointRef()[j]);\n                            }\n                            pair.setValue(computeObjectiveValue(coords));\n                        }\n                        Arrays.sort(shrinkedSimplex, comparator);\n                        simplex = shrinkedSimplex;\n                    } else {\n                        simplex = simplex;\n                    }\n                }\n            }\n\n            // check convergence\n            if (checker != null) {\n                final double v1 = original[0].getValue();\n                final double v2 = simplex[0].getValue();\n                boolean converged = true;\n                for (int i = 0; i < simplex.length; ++i) {\n                    converged &= checker.converged(iterations, original[i], simplex[i]);\n                }\n                if (converged) {\n                    return;\n                }\n                converged |= FastMath.abs(v1 - v2) <= getRelativeThreshold() * (FastMath.abs(v1) + FastMath.abs(v2)) + absoluteThreshold;\n\n                if (converged) {\n                    return;\n                }\n            }\n\n            if (getEvaluations() > maxEvaluations) {\n                throw new OptimizationException(new TooManyEvaluationsException(maxEvaluations));\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..11a663ce5 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -75,27 +75,78 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, khi, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = expanded.getPoint();\n+                } else {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n \n-                return;\n-\n+            } else {\n+\n+                // try to perform a contraction step\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = contracted.getPoint();\n+                } else {\n+\n+                    // perform a shrink step\n+                    final RealPointValuePair[] shrinkedSimplex = simplex;\n+                    for (int i = 1; i < simplex.length; i++) {\n+                        final RealPointValuePair pair = simplex[i];\n+                        final double[] coords = pair.getPointRef();\n+                        for (int j = 0; j < coords.length; j++) {\n+                            coords[j] = best.getPointRef()[j] + sigma * (coords[j] - best.getPointRef()[j]);\n+                        }\n+                        pair.setValue(computeObjectiveValue(coords));\n+                    }\n+                    Arrays.sort(simplex, comparator);\n+                    if (comparator.compare(simplex[0], best) >= 0) {\n+                        // the contraction was no better than the worst point,\n+                        // we need to reduce the size of the simplex, and perform\n+                        // another iteration\n+                        for (int i = 1; i < shrinkedSimplex.length; i++) {\n+                            final RealPointValuePair pair = shrinkedSimplex[i];\n+                            final double[] coords = pair.getPointRef();\n+                            for (int j = 0; j < coords.length; j++) {\n+                                coords[j] = shrinkedSimplex[0].getPointRef()[j] +\n+                                    sigma * (coords[j] - shrinkedSimplex[0].getPointRef()[j]);\n+                            }\n+                            pair.setValue(computeObjectiveValue(coords));\n+                        }\n+                        Arrays.sort(shrinkedSimplex, comparator);\n+                        simplex = shrinkedSimplex;\n+                    } else {\n+                        simplex = simplex;\n+                    }\n+                }\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n             // check convergence\n-                return;\n+            if (checker != null) {\n+                final double v1 = original[0].getValue();\n+                final double v2 = simplex[0].getValue();\n+                boolean converged = true;\n+                for (int i = 0; i < simplex.length; ++i) {\n+                    converged &= checker.converged(iterations, original[i], simplex[i]);\n+                }\n+                if (converged) {\n+                    return;\n+                }\n+                converged |= FastMath.abs(v1 - v2) <= getRelativeThreshold() * (FastMath.abs(v1) + FastMath.abs(v2)) + absoluteThreshold;\n+\n+                if (converged) {\n+                    return;\n+                }\n             }\n \n+            if (getEvaluations() > maxEvaluations) {\n+                throw new OptimizationException(new TooManyEvaluationsException(maxEvaluations));\n+            }\n         }\n-\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}