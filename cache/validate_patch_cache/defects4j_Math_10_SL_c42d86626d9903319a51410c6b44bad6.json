{
    "patch": "if (Double.isNaN(result[resultOffset])) {\n    if (Double.isInfinite(x[xOffset]) && Double.isInfinite(y[yOffset])) {\n        result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);\n    } else if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {\n        result[resultOffset] = Double.NaN;\n    } else if (Double.isInfinite(y[yOffset])) {\n        result[resultOffset] = FastMath.copySign(FastMath.PI / 2, y[yOffset]);\n    } else if (Double.isInfinite(x[xOffset])) {\n        result[resultOffset] = FastMath.copySign(0.0d, x[xOffset]);\n    } else {\n        result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..8fd4b8549 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,19 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+if (Double.isNaN(result[resultOffset])) {\n+    if (Double.isInfinite(x[xOffset]) && Double.isInfinite(y[yOffset])) {\n+        result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);\n+    } else if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {\n+        result[resultOffset] = Double.NaN;\n+    } else if (Double.isInfinite(y[yOffset])) {\n+        result[resultOffset] = FastMath.copySign(FastMath.PI / 2, y[yOffset]);\n+    } else if (Double.isInfinite(x[xOffset])) {\n+        result[resultOffset] = FastMath.copySign(0.0d, x[xOffset]);\n+    } else {\n+        result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);\n+    }\n+}\n \n     }\n ",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}