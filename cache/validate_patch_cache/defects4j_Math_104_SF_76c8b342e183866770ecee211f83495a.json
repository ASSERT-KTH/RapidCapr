{
    "patch": "public static double regularizedGammaP(double a, double x, double epsilon) {\n\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException(\"Invalid argument for Gamma Function\");\n    }\n    \n    if (x == 0) {\n        return 0;\n    }\n    \n    double sum = 1 / a;\n    double term = sum;\n    \n    while (Math.abs(term) > epsilon * Math.abs(sum)) {\n        term *= x / (a + sum);\n        sum += term;\n    }\n    \n    return Math.exp(-x + a * Math.log(x) - LogGamma.logGamma(a)) * sum;\n\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..d465dbfc1 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,27 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double epsilon) {\n+\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException(\"Invalid argument for Gamma Function\");\n+    }\n+    \n+    if (x == 0) {\n+        return 0;\n+    }\n+    \n+    double sum = 1 / a;\n+    double term = sum;\n+    \n+    while (Math.abs(term) > epsilon * Math.abs(sum)) {\n+        term *= x / (a + sum);\n+        sum += term;\n+    }\n+    \n+    return Math.exp(-x + a * Math.log(x) - LogGamma.logGamma(a)) * sum;\n+\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}