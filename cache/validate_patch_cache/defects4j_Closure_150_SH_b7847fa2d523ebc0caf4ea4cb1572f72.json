{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n      if (n.isCall()) {\n        if (NodeUtil.getEnclosingTypecheckRoot(parent) != scope.getRootNode()) {\n          if (n.getFirstChild().isName() && \"goog.provide\".equals(n.getFirstChild().getQualifiedName())) {\n            provideMap.put(n.getLastChild().getString(), true);\n          } else {\n            defineCall(n, parent);\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..4acb1c9f 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1463,6 +1463,15 @@ final class TypedScopeCreator implements ScopeCreator {\n           defineVar(n, parent);\n           break;\n       }\n+      if (n.isCall()) {\n+        if (NodeUtil.getEnclosingTypecheckRoot(parent) != scope.getRootNode()) {\n+          if (n.getFirstChild().isName() && \"goog.provide\".equals(n.getFirstChild().getQualifiedName())) {\n+            provideMap.put(n.getLastChild().getString(), true);\n+          } else {\n+            defineCall(n, parent);\n+          }\n+        }\n+      }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}