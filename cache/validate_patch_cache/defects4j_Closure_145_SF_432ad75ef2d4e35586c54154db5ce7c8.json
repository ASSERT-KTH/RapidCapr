{
    "patch": "  private boolean isOneExactlyFunctionOrDo(Node n) {\n    return (n.getType() == Token.FUNCTION || n.getType() == Token.DO)\n        && n.getChildCount() == 1 && n.getFirstChild().isEmpty();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..3e93693c 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -706,13 +706,8 @@ class CodeGenerator {\n    * labels).\n    */\n   private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n-  }\n+    return (n.getType() == Token.FUNCTION || n.getType() == Token.DO)\n+        && n.getChildCount() == 1 && n.getFirstChild().isEmpty();\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}