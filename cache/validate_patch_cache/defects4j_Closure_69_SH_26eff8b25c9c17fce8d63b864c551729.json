{
    "patch": "    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType.isSubtypeOf(JSType.fromFunctionType())) {\n      FunctionType functionType = childType.toMaybeFunctionType();\n\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if(functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceName();\n        CompilerInput functionSource = compiler.getInput(sourceName);\n        isExtern = functionSource.isExtern();\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explicit 'this' types must be called in a GETPROP or GETELEM.\n      Node parent = n.getParent();\n      if (!NodeUtil.isGet(parent) && !NodeUtil.isGetElem(parent) && functionType.hasThisType()) {\n        report(t, n, EXPLICIT_THIS, childType.toString());\n      }\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else if (childType.isFunctionPrototypeType()) {\n      // Warn about Function.prototype.call/apply/bind usage without NewNodes.\n      String functionCallerName =\n          NodeUtil.getObjectReference(n.getFirstChild()).getQualifiedName();\n      if (\"call\".equals(functionCallerName) || \"apply\".equals(functionCallerName)) {\n        eliminateFunctionsAlsoAppliedWithCallOrApply(t, n);\n\n        if (!n.getParent().isFunction()) {\n          // Non-constructor functions were rejected by the conditional above.\n          t.report(n, THIS_BEFORE_SUPER, functionCallerName);\n        }\n      }\n      ensureTyped(t, n);\n    } else if (isGoogPartialFunctionType(childType)) {\n      // Validate that the partially applied function has the same number or fewer arguments than\n      // the original.\n      visitParameterList(t, n, getFirstArgAsFunctionType(getFirstArgAsFunctionType(childType)));\n      int numProvidedParams = n.getChildCount() - 1; // The first child is the object reference.\n      int numTotalParams = functionSignatureParamsCount(getFirstArgAsFunctionType(childType));\n      if (numProvidedParams > numTotalParams) {\n        report(t, n, PARTIAL_ARGUMENTS_MISMATCH, childType.toString(),\n            Integer.toString(numTotalParams), Integer.toString(numProvidedParams - 1));\n      }\n      ensureTyped(t, n);\n    } else if (childType.isUnknownType() && isBuiltinFunction(NativeFunctionId.CALL, n)) {\n      // For unknown functions, check for Function.prototype.call\n      eliminateFunctionsAlsoAppliedWithCallOrApply(t, n);\n      ensureTyped(t, n, UNKNOWN_TYPE);\n    } else {\n      ensureTyped(t, n);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..0181818e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,69 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+    // A couple of types can be called as if they were functions.\n+    // If it is a function type, then validate parameters.\n+    if (childType.isSubtypeOf(JSType.fromFunctionType())) {\n+      FunctionType functionType = childType.toMaybeFunctionType();\n+\n+      boolean isExtern = false;\n+      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n+      if(functionJSDocInfo != null) {\n+        String sourceName = functionJSDocInfo.getSourceName();\n+        CompilerInput functionSource = compiler.getInput(sourceName);\n+        isExtern = functionSource.isExtern();\n+      }\n+\n+      // Non-native constructors should not be called directly\n+      // unless they specify a return type and are defined\n+      // in an extern.\n+      if (functionType.isConstructor() &&\n+          !functionType.isNativeObjectType() &&\n+          (functionType.getReturnType().isUnknownType() ||\n+           functionType.getReturnType().isVoidType() ||\n+           !isExtern)) {\n+        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+      }\n+\n+      // Functions with explicit 'this' types must be called in a GETPROP or GETELEM.\n+      Node parent = n.getParent();\n+      if (!NodeUtil.isGet(parent) && !NodeUtil.isGetElem(parent) && functionType.hasThisType()) {\n+        report(t, n, EXPLICIT_THIS, childType.toString());\n+      }\n+\n+      visitParameterList(t, n, functionType);\n+      ensureTyped(t, n, functionType.getReturnType());\n+    } else if (childType.isFunctionPrototypeType()) {\n+      // Warn about Function.prototype.call/apply/bind usage without NewNodes.\n+      String functionCallerName =\n+          NodeUtil.getObjectReference(n.getFirstChild()).getQualifiedName();\n+      if (\"call\".equals(functionCallerName) || \"apply\".equals(functionCallerName)) {\n+        eliminateFunctionsAlsoAppliedWithCallOrApply(t, n);\n+\n+        if (!n.getParent().isFunction()) {\n+          // Non-constructor functions were rejected by the conditional above.\n+          t.report(n, THIS_BEFORE_SUPER, functionCallerName);\n+        }\n+      }\n+      ensureTyped(t, n);\n+    } else if (isGoogPartialFunctionType(childType)) {\n+      // Validate that the partially applied function has the same number or fewer arguments than\n+      // the original.\n+      visitParameterList(t, n, getFirstArgAsFunctionType(getFirstArgAsFunctionType(childType)));\n+      int numProvidedParams = n.getChildCount() - 1; // The first child is the object reference.\n+      int numTotalParams = functionSignatureParamsCount(getFirstArgAsFunctionType(childType));\n+      if (numProvidedParams > numTotalParams) {\n+        report(t, n, PARTIAL_ARGUMENTS_MISMATCH, childType.toString(),\n+            Integer.toString(numTotalParams), Integer.toString(numProvidedParams - 1));\n+      }\n+      ensureTyped(t, n);\n+    } else if (childType.isUnknownType() && isBuiltinFunction(NativeFunctionId.CALL, n)) {\n+      // For unknown functions, check for Function.prototype.call\n+      eliminateFunctionsAlsoAppliedWithCallOrApply(t, n);\n+      ensureTyped(t, n, UNKNOWN_TYPE);\n+    } else {\n+      ensureTyped(t, n);\n+    }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}