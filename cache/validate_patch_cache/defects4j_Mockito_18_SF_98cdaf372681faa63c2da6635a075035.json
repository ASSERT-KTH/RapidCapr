{
    "patch": "public static <T> Values values(T value) {\n    return new Values(value);\n}\n\npublic static class Values {\n    private final Object value;\n\n    public Values(Object value) {\n        this.value = value;\n    }\n\n    public <T> T returnValueFor(Class<T> klass) {\n        return klass.cast(value);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..fcff8d6de 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,21 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static <T> Values values(T value) {\n+    return new Values(value);\n+}\n+\n+public static class Values {\n+    private final Object value;\n+\n+    public Values(Object value) {\n+        this.value = value;\n+    }\n+\n+    public <T> T returnValueFor(Class<T> klass) {\n+        return klass.cast(value);\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}