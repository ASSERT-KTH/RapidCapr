{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n\n  List<Node> nodesToAdd = new ArrayList<Node>();\n\n  // Record global variable and function declarations\n  if (t.getScopeDepth() == 0) {\n    if (n.isVar()) {\n      NameInformation ns = createNameInformation(t, n, parent);\n      Preconditions.checkNotNull(ns);\n      nodesToAdd.add(n);\n    } else if (n.isFunction()) {\n      Node nameNode = n.getFirstChild();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns != null) {\n        JsName nameInfo = getName(nameNode.getString(), true);\n        nodesToAdd.add(nameNode);\n      }\n    } else if (n.isObjectLit()) {\n      for (Node key = n.getFirstChild(); key != null; key = key.getNext()) {\n        if (NodeUtil.isObjectLitKey(key, n)) {\n          NameInformation ns = createNameInformation(t, key, n);\n          if (ns != null) {\n            nodesToAdd.add(key);\n          }\n        }\n      }\n    }\n  }\n\n  // Record assignments and call sites\n  if (n.isAssign()) {\n    Node nameNode = n.getFirstChild();\n\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns != null) {\n      if (ns.isPrototype) {\n        recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n      } else {\n        nodesToAdd.add(nameNode);\n      }\n    }\n  } else if (n.isCall()) {\n    Node nameNode = n.getFirstChild();\n    NameInformation ns = createNameInformation(t, nameNode, n);\n    if (ns != null && ns.onlyAffectsClassDef) {\n      JsName name = getName(ns.name, false);\n      if (name != null) {\n        nodesToAdd.add(new ClassDefiningFunctionNode(\n            name, n, parent, parent.getParent()));\n      }\n    }\n  }\n\n  // Add the nodes to refNodes after the iteration is complete\n  for (Node node : nodesToAdd) {\n    recordSet(node.getString(), node);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..fdca3450 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,53 +593,64 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n-\n-      // Record global variable and function declarations\n-      if (t.inGlobalScope()) {\n-        if (NodeUtil.isVarDeclaration(n)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          Preconditions.checkNotNull(ns);\n-          recordSet(ns.name, n);\n-        } else if (NodeUtil.isFunctionDeclaration(n)) {\n-          Node nameNode = n.getFirstChild();\n-          NameInformation ns = createNameInformation(t, nameNode, n);\n-          if (ns != null) {\n-            JsName nameInfo = getName(nameNode.getString(), true);\n-            recordSet(nameInfo.name, nameNode);\n-          }\n-        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+\n+  List<Node> nodesToAdd = new ArrayList<Node>();\n+\n+  // Record global variable and function declarations\n+  if (t.getScopeDepth() == 0) {\n+    if (n.isVar()) {\n+      NameInformation ns = createNameInformation(t, n, parent);\n+      Preconditions.checkNotNull(ns);\n+      nodesToAdd.add(n);\n+    } else if (n.isFunction()) {\n+      Node nameNode = n.getFirstChild();\n+      NameInformation ns = createNameInformation(t, nameNode, n);\n+      if (ns != null) {\n+        JsName nameInfo = getName(nameNode.getString(), true);\n+        nodesToAdd.add(nameNode);\n+      }\n+    } else if (n.isObjectLit()) {\n+      for (Node key = n.getFirstChild(); key != null; key = key.getNext()) {\n+        if (NodeUtil.isObjectLitKey(key, n)) {\n+          NameInformation ns = createNameInformation(t, key, n);\n           if (ns != null) {\n-            recordSet(ns.name, n);\n+            nodesToAdd.add(key);\n           }\n         }\n       }\n+    }\n+  }\n \n-      // Record assignments and call sites\n-      if (n.isAssign()) {\n-        Node nameNode = n.getFirstChild();\n+  // Record assignments and call sites\n+  if (n.isAssign()) {\n+    Node nameNode = n.getFirstChild();\n \n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null) {\n-          if (ns.isPrototype) {\n-            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n-          } else {\n-            recordSet(ns.name, nameNode);\n-          }\n-        }\n-      } else if (n.isCall()) {\n-        Node nameNode = n.getFirstChild();\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null && ns.onlyAffectsClassDef) {\n-          JsName name = getName(ns.name, false);\n-          if (name != null) {\n-          refNodes.add(new ClassDefiningFunctionNode(\n-              name, n, parent, parent.getParent()));\n-          }\n-        }\n+    NameInformation ns = createNameInformation(t, nameNode, n);\n+    if (ns != null) {\n+      if (ns.isPrototype) {\n+        recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n+      } else {\n+        nodesToAdd.add(nameNode);\n       }\n     }\n+  } else if (n.isCall()) {\n+    Node nameNode = n.getFirstChild();\n+    NameInformation ns = createNameInformation(t, nameNode, n);\n+    if (ns != null && ns.onlyAffectsClassDef) {\n+      JsName name = getName(ns.name, false);\n+      if (name != null) {\n+        nodesToAdd.add(new ClassDefiningFunctionNode(\n+            name, n, parent, parent.getParent()));\n+      }\n+    }\n+  }\n+\n+  // Add the nodes to refNodes after the iteration is complete\n+  for (Node node : nodesToAdd) {\n+    recordSet(node.getString(), node);\n+  }\n+}\n \n     /**\n      * Records the assignment of a value to a global name.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}