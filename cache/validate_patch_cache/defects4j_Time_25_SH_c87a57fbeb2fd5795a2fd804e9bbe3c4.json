{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted - 1);\n    if (nextLocal != nextAdjusted) {\n        return offsetLocal;\n    } else {\n        int offsetBeforeLocal = getOffset(nextLocal - 1);\n        int offsetBeforeAdjusted = getOffset(nextLocal - 1 - offsetAdjusted);\n        if (offsetBeforeLocal > offsetBeforeAdjusted) {\n            return offsetBeforeLocal;\n        } else if (offsetBeforeLocal < offsetBeforeAdjusted) {\n            return offsetLocal;\n        } else {\n            // we are in a DST overlap\n            if (offsetLocal > offsetAdjusted) {\n                return offsetLocal;\n            } else {\n                return offsetLocal + 1;\n            }\n        }\n    }\n} else {\n    long prevLocal = previousTransition(instantAdjusted);\n    long prevAdjusted = previousTransition(instantLocal - offsetLocal - 1);\n    if (prevLocal != prevAdjusted) {\n        return offsetLocal;\n    } else {\n        int offsetBeforeLocal = getOffset(prevLocal);\n        int offsetBeforeAdjusted = getOffset(prevAdjusted);\n        if (offsetBeforeLocal > offsetBeforeAdjusted) {\n            return offsetLocal;\n        } else if (offsetBeforeLocal < offsetBeforeAdjusted) {\n            return offsetBeforeLocal;\n        } else {\n            // we are in a DST overlap\n            if (offsetLocal > offsetAdjusted) {\n                return offsetLocal - 1;\n            } else {\n                return offsetLocal;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..0c788c98 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,49 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted - 1);\n+    if (nextLocal != nextAdjusted) {\n+        return offsetLocal;\n+    } else {\n+        int offsetBeforeLocal = getOffset(nextLocal - 1);\n+        int offsetBeforeAdjusted = getOffset(nextLocal - 1 - offsetAdjusted);\n+        if (offsetBeforeLocal > offsetBeforeAdjusted) {\n+            return offsetBeforeLocal;\n+        } else if (offsetBeforeLocal < offsetBeforeAdjusted) {\n+            return offsetLocal;\n+        } else {\n+            // we are in a DST overlap\n+            if (offsetLocal > offsetAdjusted) {\n+                return offsetLocal;\n+            } else {\n+                return offsetLocal + 1;\n+            }\n+        }\n+    }\n+} else {\n+    long prevLocal = previousTransition(instantAdjusted);\n+    long prevAdjusted = previousTransition(instantLocal - offsetLocal - 1);\n+    if (prevLocal != prevAdjusted) {\n+        return offsetLocal;\n+    } else {\n+        int offsetBeforeLocal = getOffset(prevLocal);\n+        int offsetBeforeAdjusted = getOffset(prevAdjusted);\n+        if (offsetBeforeLocal > offsetBeforeAdjusted) {\n+            return offsetLocal;\n+        } else if (offsetBeforeLocal < offsetBeforeAdjusted) {\n+            return offsetBeforeLocal;\n+        } else {\n+            // we are in a DST overlap\n+            if (offsetLocal > offsetAdjusted) {\n+                return offsetLocal - 1;\n+            } else {\n+                return offsetLocal;\n+            }\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}