{
    "patch": "public static double getTypedPercent(String json) {\n    Gson gson = new Gson();\n    Type type = new TypeToken<Map<String, List<String>>>(){}.getType();\n    Map<String, List<String>> map = gson.fromJson(json, type);\n    double sum = 0;\n    double total = 0;\n    for (String key : map.keySet()) {\n        for (String value : map.get(key)) {\n            total++;\n            try {\n                Double.parseDouble(value);\n                sum++;\n            } catch (NumberFormatException e) {\n                //not a double\n            }\n        }\n    }\n    if (total == 0) {\n        return 0;\n    }\n    return (sum/total) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..31ea9583 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    Gson gson = new Gson();\n+    Type type = new TypeToken<Map<String, List<String>>>(){}.getType();\n+    Map<String, List<String>> map = gson.fromJson(json, type);\n+    double sum = 0;\n+    double total = 0;\n+    for (String key : map.keySet()) {\n+        for (String value : map.get(key)) {\n+            total++;\n+            try {\n+                Double.parseDouble(value);\n+                sum++;\n+            } catch (NumberFormatException e) {\n+                //not a double\n+            }\n+        }\n+    }\n+    if (total == 0) {\n+        return 0;\n+    }\n+    return (sum/total) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}