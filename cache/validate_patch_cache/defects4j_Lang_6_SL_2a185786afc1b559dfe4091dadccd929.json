{
    "patch": "int codePoint = Character.codePointAt(input, pos);\nint charCount = Character.charCount(codePoint);\nif (charCount > 1) {\n    // surrogate pair\n    if (pos + charCount <= len) { // check that we're within bounds\n        translate(input.subSequence(pos, pos + charCount), out);\n    } else {\n        out.write(REPLACEMENT_CHAR);\n    }\n} else {\n    translate(Character.toString((char) codePoint), out);\n}\n// This updates the position variable to skip over the already translated characters.\npos += charCount;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..2d40257e 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,20 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+int codePoint = Character.codePointAt(input, pos);\n+int charCount = Character.charCount(codePoint);\n+if (charCount > 1) {\n+    // surrogate pair\n+    if (pos + charCount <= len) { // check that we're within bounds\n+        translate(input.subSequence(pos, pos + charCount), out);\n+    } else {\n+        out.write(REPLACEMENT_CHAR);\n+    }\n+} else {\n+    translate(Character.toString((char) codePoint), out);\n+}\n+// This updates the position variable to skip over the already translated characters.\n+pos += charCount;\n             }\n         }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}