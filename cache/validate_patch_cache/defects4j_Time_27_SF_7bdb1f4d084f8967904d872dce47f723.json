{
    "patch": "        int index = 0;\n        Object first = elementPairs.get(0);\n        if (size > 1 && first instanceof Separator) {\n            ++index;\n            if (size == 2) {\n                Object second = elementPairs.get(1);\n                Object[] comp = createComposite(second);\n                if (notPrinter) {\n                    return new PeriodFormatter(null, (PeriodParser) comp[1]);\n                } else if (notParser) {\n                    return new PeriodFormatter((PeriodPrinter) comp[0], null);\n                } else {\n                    return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n                }\n            }\n        } else {\n            first = null;\n        }\n        Object[] comp = createComposite(elementPairs.subList(index, size));\n        if (notPrinter) {\n            return new PeriodFormatter(first == null ? null : ((Separator) first).finish((PeriodPrinter) comp[0]), (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], first == null ? null : ((Separator) first).finish((PeriodParser) comp[1]));\n        } else {\n            return new PeriodFormatter(first == null ? null : ((Separator) first).finish((PeriodPrinter) comp[0]), ((Separator) comp[0]).finish((PeriodParser) comp[1]));",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..4d8b8dc8 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,31 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n+        int index = 0;\n+        Object first = elementPairs.get(0);\n+        if (size > 1 && first instanceof Separator) {\n+            ++index;\n+            if (size == 2) {\n+                Object second = elementPairs.get(1);\n+                Object[] comp = createComposite(second);\n+                if (notPrinter) {\n+                    return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+                } else if (notParser) {\n+                    return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+                } else {\n+                    return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+                }\n+            }\n+        } else {\n+            first = null;\n+        }\n+        Object[] comp = createComposite(elementPairs.subList(index, size));\n         if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            return new PeriodFormatter(first == null ? null : ((Separator) first).finish((PeriodPrinter) comp[0]), (PeriodParser) comp[1]);\n         } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            return new PeriodFormatter((PeriodPrinter) comp[0], first == null ? null : ((Separator) first).finish((PeriodParser) comp[1]));\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n-        }\n-    }\n+            return new PeriodFormatter(first == null ? null : ((Separator) first).finish((PeriodPrinter) comp[0]), ((Separator) comp[0]).finish((PeriodParser) comp[1]));\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}