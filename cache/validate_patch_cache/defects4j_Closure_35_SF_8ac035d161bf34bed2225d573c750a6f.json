{
    "patch": "  /**\n   * Infers property types on an object type based on a constraint. Adds inferred property types to the\n   * type if they are not already declared.\n   * @param type Object type\n   * @param constraint Constraint object type\n   */\n  private void inferPropertyTypes(\n      ObjectType type, ObjectType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj = constraint.restrictByNotNullOrUndefined().autobox().toMaybeObjectType();\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop).autobox();\n        if (!type.hasProperty(prop) && !propType.isUnknownType()) {\n          JSType typeToInfer = propType.isUnknownType()\n              ? type.getImplicitPrototype()\n              : propType;\n          type.defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }\n\n  /**\n   * If we access a property of a symbol, then that symbol is not null or undefined.\n   */\n  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.isQualifiedName() && n.getParent().isGetProp()) {\n      ObjectType type = ObjectType.cast(getJSType(n.getFirstChild()).autobox().toMaybeObjectType());\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (type != narrowed) {\n        scope = narrowScope(scope, n, narrowed);\n      }\n      // Attempt to infer missing property types from type constraints.\n      if (type != null && !type.isFunctionType()) {\n        ObjectType parentType = ObjectType.cast(getJSType(n.getParent().getFirstChild()).autobox().toMaybeObjectType());\n        if (type != parentType) {\n          inferPropertyTypes(parentType, type);\n        }\n      }\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..aebd8877 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,42 +1111,52 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n+  /**\n+   * Infers property types on an object type based on a constraint. Adds inferred property types to the\n+   * type if they are not already declared.\n+   * @param type Object type\n+   * @param constraint Constraint object type\n+   */\n+  private void inferPropertyTypes(\n+      ObjectType type, ObjectType constraint) {\n     if (type == null || constraint == null) {\n       return;\n     }\n \n-    ObjectType constraintObj =\n-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n+    ObjectType constraintObj = constraint.restrictByNotNullOrUndefined().autobox().toMaybeObjectType();\n     if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n+      for (String prop : constraintObj.getOwnPropertyNames()) {\n+        JSType propType = constraintObj.getPropertyType(prop).autobox();\n+        if (!type.hasProperty(prop) && !propType.isUnknownType()) {\n+          JSType typeToInfer = propType.isUnknownType()\n+              ? type.getImplicitPrototype()\n+              : propType;\n+          type.defineInferredProperty(prop, typeToInfer, null);\n         }\n       }\n     }\n   }\n \n   /**\n-   * If we access a property of a symbol, then that symbol is not\n-   * null or undefined.\n+   * If we access a property of a symbol, then that symbol is not null or undefined.\n    */\n   private FlowScope dereferencePointer(Node n, FlowScope scope) {\n-    if (n.isQualifiedName()) {\n-      JSType type = getJSType(n);\n+    if (n.isQualifiedName() && n.getParent().isGetProp()) {\n+      ObjectType type = ObjectType.cast(getJSType(n.getFirstChild()).autobox().toMaybeObjectType());\n       JSType narrowed = type.restrictByNotNullOrUndefined();\n       if (type != narrowed) {\n         scope = narrowScope(scope, n, narrowed);\n       }\n+      // Attempt to infer missing property types from type constraints.\n+      if (type != null && !type.isFunctionType()) {\n+        ObjectType parentType = ObjectType.cast(getJSType(n.getParent().getFirstChild()).autobox().toMaybeObjectType());\n+        if (type != parentType) {\n+          inferPropertyTypes(parentType, type);\n+        }\n+      }\n+    }\n+    return scope;\n+  }\n     }\n     return scope;\n   }",
    "result_reason": "error: modifier private not allowed here",
    "test_result": "ERROR"
}