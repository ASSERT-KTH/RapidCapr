{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                        Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        if (sb.length() > 0) {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getStringValue(elem));\n      } else {\n        if (sb.length() > 0) {\n          // + 2 for the quotes.\n          foldedSize += sb.length() + 2;\n          arrayFoldedChildren.add(Node.newString(sb.toString()));\n          sb = new StringBuilder();\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n      }\n      elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n      // + 2 for the quotes.\n      foldedSize += sb.length() + 2;\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n    // one for each comma.\n    foldedSize += arrayFoldedChildren.size() - 1;\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        parent.replaceChild(n, emptyStringNode);\n        break;\n\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\"), foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        Node newJoin = new Node(Token.CALL, left.cloneTree(),\n            foldedStringNode);\n        parent.replaceChild(n, newJoin);\n        if (arrayNode.getFirstChild() != null) {\n          if (arrayNode.getFirstChild().getType() != Token.STRING) {\n            Node replacement = new Node(Token.ADD,\n                Node.newString(\"\"), arrayNode.getFirstChild());\n            arrayNode.addChildToFront(replacement);\n          }\n        }\n        break;\n\n      default:\n        String arrayString = getArrayString(arrayFoldedChildren, joinString);\n        if (arrayString == null) {\n          return;\n        }\n        foldedSize = arrayString.length();\n        if (foldedSize > originalSize) {\n          return;\n        }\n        Node foldedArrayNode = Node.newString(arrayString);\n        Node newJoin2 = new Node(Token.CALL, left.cloneTree(), foldedArrayNode);\n        parent.replaceChild(n, newJoin2);\n        break;\n    }\n    t.getCompiler().reportCodeChange();\n  }\n\n  /**\n   * Returns the string representation of an array with the given folded children and join string.\n   * Returns null if any of the children cannot be represented as a string or if the resulting array\n   * would be too large.\n   */\n  private String getArrayString(List<Node> arrayFoldedChildren, String joinString) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < arrayFoldedChildren.size(); i++) {\n      Node elem = arrayFoldedChildren.get(i);\n      if (!NodeUtil.isImmutableValue(elem)) {\n        return null;\n      }\n      if (elem.getType() != Token.STRING) {\n        sb.append('(')\n            .append(NodeUtil.getUnqualifiedName(elem))\n            .append(')');\n      } else {\n        sb.append(NodeUtil.getStringValue(elem));\n      }\n      if (i < arrayFoldedChildren.size() - 1) {\n        sb.append(joinString);\n      }\n    }\n    if (sb.length() > CodePrinter.DEFAULT_LINE_LENGTH) {\n      return null;\n    }\n    return '[' + sb.toString() + ']';",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..be7a2221 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,8 +1458,8 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n+                        Node parent) {\n     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n       return;\n     }\n@@ -1525,29 +1525,63 @@ class FoldConstants extends AbstractPostOrderCallback\n               Node.newString(\"\"), foldedStringNode);\n           foldedStringNode = replacement;\n         }\n-        parent.replaceChild(n, foldedStringNode);\n+        Node newJoin = new Node(Token.CALL, left.cloneTree(),\n+            foldedStringNode);\n+        parent.replaceChild(n, newJoin);\n+        if (arrayNode.getFirstChild() != null) {\n+          if (arrayNode.getFirstChild().getType() != Token.STRING) {\n+            Node replacement = new Node(Token.ADD,\n+                Node.newString(\"\"), arrayNode.getFirstChild());\n+            arrayNode.addChildToFront(replacement);\n+          }\n+        }\n         break;\n \n       default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n+        String arrayString = getArrayString(arrayFoldedChildren, joinString);\n+        if (arrayString == null) {\n           return;\n         }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n+        foldedSize = arrayString.length();\n         if (foldedSize > originalSize) {\n           return;\n         }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n+        Node foldedArrayNode = Node.newString(arrayString);\n+        Node newJoin2 = new Node(Token.CALL, left.cloneTree(), foldedArrayNode);\n+        parent.replaceChild(n, newJoin2);\n         break;\n     }\n     t.getCompiler().reportCodeChange();\n   }\n \n+  /**\n+   * Returns the string representation of an array with the given folded children and join string.\n+   * Returns null if any of the children cannot be represented as a string or if the resulting array\n+   * would be too large.\n+   */\n+  private String getArrayString(List<Node> arrayFoldedChildren, String joinString) {\n+    StringBuilder sb = new StringBuilder();\n+    for (int i = 0; i < arrayFoldedChildren.size(); i++) {\n+      Node elem = arrayFoldedChildren.get(i);\n+      if (!NodeUtil.isImmutableValue(elem)) {\n+        return null;\n+      }\n+      if (elem.getType() != Token.STRING) {\n+        sb.append('(')\n+            .append(NodeUtil.getUnqualifiedName(elem))\n+            .append(')');\n+      } else {\n+        sb.append(NodeUtil.getStringValue(elem));\n+      }\n+      if (i < arrayFoldedChildren.size() - 1) {\n+        sb.append(joinString);\n+      }\n+    }\n+    if (sb.length() > CodePrinter.DEFAULT_LINE_LENGTH) {\n+      return null;\n+    }\n+    return '[' + sb.toString() + ']';\n+\n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];\n    */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}