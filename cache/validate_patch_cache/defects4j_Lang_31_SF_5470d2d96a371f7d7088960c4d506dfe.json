{
    "patch": "public class StringUtils {\n    \n    public static boolean containsAny(final char[] str, final char[] searchChars) {\n        if (searchChars == null || str == null) {\n            return false;\n        }\n        \n        for (int i = 0; i < searchChars.length; i++) {\n            if (Character.isHighSurrogate(searchChars[i])) {\n                if (i + 1 < searchChars.length && Character.isLowSurrogate(searchChars[i+1])) {\n                    final int codePoint = Character.toCodePoint(searchChars[i], searchChars[i+1]);\n                    if (contains(str, codePoint)) {\n                        return true;\n                    }\n                    i++;\n                }\n            } else {\n                if (contains(str, searchChars[i])) {\n                    return true;\n                }\n            }\n        }\n        \n        return false;\n    }\n    \n    private static boolean contains(final char[] str, final int searchChar) {\n        for (final char ch : str) {\n            if (ch == searchChar) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..e5d7f644 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,41 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public class StringUtils {\n+    \n+    public static boolean containsAny(final char[] str, final char[] searchChars) {\n+        if (searchChars == null || str == null) {\n+            return false;\n+        }\n+        \n+        for (int i = 0; i < searchChars.length; i++) {\n+            if (Character.isHighSurrogate(searchChars[i])) {\n+                if (i + 1 < searchChars.length && Character.isLowSurrogate(searchChars[i+1])) {\n+                    final int codePoint = Character.toCodePoint(searchChars[i], searchChars[i+1]);\n+                    if (contains(str, codePoint)) {\n+                        return true;\n+                    }\n+                    i++;\n+                }\n+            } else {\n+                if (contains(str, searchChars[i])) {\n+                    return true;\n+                }\n+            }\n+        }\n+        \n+        return false;\n+    }\n+    \n+    private static boolean contains(final char[] str, final int searchChar) {\n+        for (final char ch : str) {\n+            if (ch == searchChar) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}