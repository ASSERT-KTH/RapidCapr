{
    "patch": "import org.apache.commons.math3.exception.MathRuntimeException;\nimport org.apache.commons.math3.exception.util.LocalizedFormats;\nimport org.apache.commons.math3.geometry.euclidean.threed.Vector3D;\nimport org.apache.commons.math3.util.FastMath;\n\npublic class Rotation {\n\n  double q0;\n  double q1;\n  double q2;\n  double q3;\n\n  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n    // norms computation\n    double u1u1 = u1.getNormSq();\n    double u2u2 = u2.getNormSq();\n    double v1v1 = v1.getNormSq();\n    double v2v2 = v2.getNormSq();\n    if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n      throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n    }\n\n    // normalize v1 in order to have (v1'|v1') = (u1|u1)\n    v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n\n    // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n    double u1u2   = u1.dotProduct(u2);\n    double v1v2   = v1.dotProduct(v2);\n    double coeffU = u1u2 / u1u1;\n    double coeffV = v1v2 / u1u1;\n    double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n    double alpha  = coeffU - beta * coeffV;\n    v2 = new Vector3D(alpha, v1, beta, v2);\n\n    // preliminary computation\n    Vector3D uRef  = u1;\n    Vector3D vRef  = v1;\n    Vector3D v1Su1 = v1.subtract(u1);\n    Vector3D v2Su2 = v2.subtract(u2);\n    Vector3D k     = v1Su1.crossProduct(v2Su2);\n    Vector3D u3    = u1.crossProduct(u2);\n    double c       = k.dotProduct(u3);\n    if (c == 0) {\n      // the (q1, q2, q3) vector is close to the (u1, u2) plane\n      // we try other vectors\n      Vector3D v3 = Vector3D.crossProduct(v1, v2);\n      Vector3D v3Su3 = v3.subtract(u3);\n      k = v1Su1.crossProduct(v3Su3);\n      Vector3D u2Prime = u1.crossProduct(u3);\n      c = k.dotProduct(u2Prime);\n\n      if (c == 0) {\n        // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n        // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n        k = v2Su2.crossProduct(v3Su3);\n        c = k.dotProduct(u2.crossProduct(u3));\n\n        if (c == 0) {\n          // the (q1, q2, q3) vector is aligned with everything\n          // this is really the identity rotation\n          q0 = 1.0;\n          q1 = 0.0;\n          q2 = 0.0;\n          q3 = 0.0;\n          return;\n        }\n\n        // we will have to use u2 and v2 to compute the scalar part\n        uRef = u2;\n        vRef = v2;\n\n      }\n\n    }\n\n    // computation of the scalar and vector parts of the quaternion\n    double ratio = uRef.getNorm() / vRef.getNorm();\n    Vector3D vn = new Vector3D(ratio, vRef);\n    double q0Candidate = FastMath.sqrt((uRef.getNormSq() - vn.getNormSq()) /\n                        (uRef.getNormSq() + vn.getNormSq()));\n    if (Double.isNaN(q0Candidate)) {\n      // this should never happen\n      throw new MathRuntimeException(LocalizedFormats.NAN_IN_ORIGINAL_REPRESENTATION);\n    }\n\n    if (c < 0) {\n      // we choose the rotation to be counterclockwise\n      q0Candidate = -q0Candidate;\n    }\n\n    vn = vn.scalarMultiply(1.0 / FastMath.sqrt(uRef.dotProduct(vRef)));\n    q0 = q0Candidate;\n    q1 = vn.getX();\n    q2 = vn.getY();\n    q3 = vn.getZ();\n\n  }\n\n  public double getQ0() {\n    return q0;\n  }\n\n  public double getQ1() {\n    return q1;\n  }\n\n  public double getQ2() {\n    return q2;\n  }\n\n  public double getQ3() {\n    return q3;\n  }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\nindex 20f5b3486..2a18e483c 100644\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n@@ -310,70 +310,123 @@ public class Rotation implements Serializable {\n    * @param v2 desired image of u2 by the rotation\n    * @exception IllegalArgumentException if the norm of one of the vectors is zero\n    */\n-  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n+import org.apache.commons.math3.exception.MathRuntimeException;\n+import org.apache.commons.math3.exception.util.LocalizedFormats;\n+import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;\n+import org.apache.commons.math3.util.FastMath;\n \n-  // norms computation\n-  double u1u1 = u1.getNormSq();\n-  double u2u2 = u2.getNormSq();\n-  double v1v1 = v1.getNormSq();\n-  double v2v2 = v2.getNormSq();\n-  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n-    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n-  }\n+public class Rotation {\n+\n+  double q0;\n+  double q1;\n+  double q2;\n+  double q3;\n+\n+  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n \n-  // normalize v1 in order to have (v1'|v1') = (u1|u1)\n-  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n-\n-  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n-  double u1u2   = u1.dotProduct(u2);\n-  double v1v2   = v1.dotProduct(v2);\n-  double coeffU = u1u2 / u1u1;\n-  double coeffV = v1v2 / u1u1;\n-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n-  double alpha  = coeffU - beta * coeffV;\n-  v2 = new Vector3D(alpha, v1, beta, v2);\n-\n-  // preliminary computation\n-  Vector3D uRef  = u1;\n-  Vector3D vRef  = v1;\n-  Vector3D v1Su1 = v1.subtract(u1);\n-  Vector3D v2Su2 = v2.subtract(u2);\n-  Vector3D k     = v1Su1.crossProduct(v2Su2);\n-  Vector3D u3    = u1.crossProduct(u2);\n-  double c       = k.dotProduct(u3);\n-  if (c == 0) {\n-    // the (q1, q2, q3) vector is close to the (u1, u2) plane\n-    // we try other vectors\n-    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n-    Vector3D v3Su3 = v3.subtract(u3);\n-    k = v1Su1.crossProduct(v3Su3);\n-    Vector3D u2Prime = u1.crossProduct(u3);\n-    c = k.dotProduct(u2Prime);\n+    // norms computation\n+    double u1u1 = u1.getNormSq();\n+    double u2u2 = u2.getNormSq();\n+    double v1v1 = v1.getNormSq();\n+    double v2v2 = v2.getNormSq();\n+    if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n+      throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n+    }\n \n+    // normalize v1 in order to have (v1'|v1') = (u1|u1)\n+    v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n+\n+    // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n+    double u1u2   = u1.dotProduct(u2);\n+    double v1v2   = v1.dotProduct(v2);\n+    double coeffU = u1u2 / u1u1;\n+    double coeffV = v1v2 / u1u1;\n+    double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n+    double alpha  = coeffU - beta * coeffV;\n+    v2 = new Vector3D(alpha, v1, beta, v2);\n+\n+    // preliminary computation\n+    Vector3D uRef  = u1;\n+    Vector3D vRef  = v1;\n+    Vector3D v1Su1 = v1.subtract(u1);\n+    Vector3D v2Su2 = v2.subtract(u2);\n+    Vector3D k     = v1Su1.crossProduct(v2Su2);\n+    Vector3D u3    = u1.crossProduct(u2);\n+    double c       = k.dotProduct(u3);\n     if (c == 0) {\n-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n-      k = v2Su2.crossProduct(v3Su3);;\n-      c = k.dotProduct(u2.crossProduct(u3));;\n+      // the (q1, q2, q3) vector is close to the (u1, u2) plane\n+      // we try other vectors\n+      Vector3D v3 = Vector3D.crossProduct(v1, v2);\n+      Vector3D v3Su3 = v3.subtract(u3);\n+      k = v1Su1.crossProduct(v3Su3);\n+      Vector3D u2Prime = u1.crossProduct(u3);\n+      c = k.dotProduct(u2Prime);\n \n       if (c == 0) {\n-        // the (q1, q2, q3) vector is aligned with everything\n-        // this is really the identity rotation\n-        q0 = 1.0;\n-        q1 = 0.0;\n-        q2 = 0.0;\n-        q3 = 0.0;\n-        return;\n+        // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n+        // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n+        k = v2Su2.crossProduct(v3Su3);\n+        c = k.dotProduct(u2.crossProduct(u3));\n+\n+        if (c == 0) {\n+          // the (q1, q2, q3) vector is aligned with everything\n+          // this is really the identity rotation\n+          q0 = 1.0;\n+          q1 = 0.0;\n+          q2 = 0.0;\n+          q3 = 0.0;\n+          return;\n+        }\n+\n+        // we will have to use u2 and v2 to compute the scalar part\n+        uRef = u2;\n+        vRef = v2;\n+\n       }\n \n-      // we will have to use u2 and v2 to compute the scalar part\n-      uRef = u2;\n-      vRef = v2;\n+    }\n+\n+    // computation of the scalar and vector parts of the quaternion\n+    double ratio = uRef.getNorm() / vRef.getNorm();\n+    Vector3D vn = new Vector3D(ratio, vRef);\n+    double q0Candidate = FastMath.sqrt((uRef.getNormSq() - vn.getNormSq()) /\n+                        (uRef.getNormSq() + vn.getNormSq()));\n+    if (Double.isNaN(q0Candidate)) {\n+      // this should never happen\n+      throw new MathRuntimeException(LocalizedFormats.NAN_IN_ORIGINAL_REPRESENTATION);\n+    }\n \n+    if (c < 0) {\n+      // we choose the rotation to be counterclockwise\n+      q0Candidate = -q0Candidate;\n     }\n \n+    vn = vn.scalarMultiply(1.0 / FastMath.sqrt(uRef.dotProduct(vRef)));\n+    q0 = q0Candidate;\n+    q1 = vn.getX();\n+    q2 = vn.getY();\n+    q3 = vn.getZ();\n+\n   }\n \n+  public double getQ0() {\n+    return q0;\n+  }\n+\n+  public double getQ1() {\n+    return q1;\n+  }\n+\n+  public double getQ2() {\n+    return q2;\n+  }\n+\n+  public double getQ3() {\n+    return q3;\n+  }\n+\n+}\n+\n   // compute the vectorial part\n   c = FastMath.sqrt(c);\n   double inv = 1.0 / (c + c);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}