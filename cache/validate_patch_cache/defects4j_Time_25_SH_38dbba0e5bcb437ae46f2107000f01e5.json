{
    "patch": "            if (offsetAdjusted == 0) {\n                // We are in a gap of the local time-line, we must move forward\n                // to find an actual UTC offset.\n                long nextLocal = nextTransition(instantLocal);\n                long nextAdjusted = nextTransition(instantAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    int nextAdjustedOffset = getOffset(nextAdjusted);\n                    if (offsetLocal < nextAdjustedOffset) {\n                        return offsetLocal;\n                    }\n                    return nextAdjustedOffset;\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..195e5991 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,19 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetAdjusted == 0) {\n+                // We are in a gap of the local time-line, we must move forward\n+                // to find an actual UTC offset.\n+                long nextLocal = nextTransition(instantLocal);\n+                long nextAdjusted = nextTransition(instantAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    int nextAdjustedOffset = getOffset(nextAdjusted);\n+                    if (offsetLocal < nextAdjustedOffset) {\n+                        return offsetLocal;\n+                    }\n+                    return nextAdjustedOffset;\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}