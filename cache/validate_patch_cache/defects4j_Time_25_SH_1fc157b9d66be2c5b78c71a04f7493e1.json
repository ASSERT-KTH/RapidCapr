{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n                if (nextLocal != nextAdjusted) {\n                    long nextEndTime = nextLocal + getOffset(nextLocal);\n                    long nextAdjustedEndTime = nextAdjusted + getOffset(nextAdjusted);\n                    if (nextAdjustedEndTime > nextEndTime) {\n                        return offsetLocal;\n                    }\n                    return getOffset(nextAdjustedEndTime);\n                }\n            } else if ((offsetLocal - offsetAdjusted) > 0) {\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n                if (prevLocal != prevAdjusted) {\n                    long prevEndTime = prevLocal + getOffset(prevLocal);\n                    long prevAdjustedEndTime = prevAdjusted + getOffset(prevAdjusted);\n                    if (prevAdjustedEndTime > prevEndTime) {\n                        return offsetAdjusted;\n                    }\n                    return getOffset(prevAdjustedEndTime);\n                }\n            }\n        }\n        return offsetAdjusted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..bc3c8977 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,32 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+                if (nextLocal != nextAdjusted) {\n+                    long nextEndTime = nextLocal + getOffset(nextLocal);\n+                    long nextAdjustedEndTime = nextAdjusted + getOffset(nextAdjusted);\n+                    if (nextAdjustedEndTime > nextEndTime) {\n+                        return offsetLocal;\n+                    }\n+                    return getOffset(nextAdjustedEndTime);\n+                }\n+            } else if ((offsetLocal - offsetAdjusted) > 0) {\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+                if (prevLocal != prevAdjusted) {\n+                    long prevEndTime = prevLocal + getOffset(prevLocal);\n+                    long prevAdjustedEndTime = prevAdjusted + getOffset(prevAdjusted);\n+                    if (prevAdjustedEndTime > prevEndTime) {\n+                        return offsetAdjusted;\n+                    }\n+                    return getOffset(prevAdjustedEndTime);\n+                }\n+            }\n+        }\n+        return offsetAdjusted;\n+    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}