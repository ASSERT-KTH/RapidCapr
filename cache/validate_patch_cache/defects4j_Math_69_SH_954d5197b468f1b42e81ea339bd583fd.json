{
    "patch": "double p = 2 * (1 - tDistribution.cumulativeProbability(Math.abs(t)));\nif (Double.isNaN(p)) {\n    if (r == 1.0 || r == -1.0) {\n        p = 0.0;\n    } else {\n        throw new MathException(\"Failed to calculate correlation p-value due to NaN result for correlation r=\" + r + \" with sample size nObs=\" + nObs);\n    }\n}\nout[i][j] = p;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\nindex 83b4c4130..2581f62fb 100644\n--- a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n+++ b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n@@ -168,7 +168,15 @@ public class PearsonsCorrelation {\n                 } else {\n                     double r = correlationMatrix.getEntry(i, j);\n                     double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n-                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n+double p = 2 * (1 - tDistribution.cumulativeProbability(Math.abs(t)));\n+if (Double.isNaN(p)) {\n+    if (r == 1.0 || r == -1.0) {\n+        p = 0.0;\n+    } else {\n+        throw new MathException(\"Failed to calculate correlation p-value due to NaN result for correlation r=\" + r + \" with sample size nObs=\" + nObs);\n+    }\n+}\n+out[i][j] = p;\n                 }\n             }\n         }",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}