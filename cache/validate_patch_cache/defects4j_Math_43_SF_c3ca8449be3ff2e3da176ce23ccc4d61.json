{
    "patch": "public void addValue(double value) {\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\n        return;\n    }\n\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n\n    if (!(meanImpl instanceof Mean)) {\n        ((Mean) meanImpl).increment(value);\n    }\n    if (!(varianceImpl instanceof Variance)) {\n        ((Variance) varianceImpl).increment(value);\n    }\n    if (value > 0 && !(geoMeanImpl instanceof GeometricMean)) {\n        ((GeometricMean) geoMeanImpl).increment(value);\n    }\n\n    if (value > 0) {\n        double logValue;\n        try {\n            logValue = Math.log(value); \n        } catch (ArithmeticException e) {\n            logValue = Double.NaN;\n        }\n        if (!Double.isNaN(logValue) && !Double.isInfinite(logValue)) {\n            sumLogImpl.increment(logValue);\n            secondMoment.increment(value);\n        }\n    }\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..a86a92823 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,26 +146,40 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n-        }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n+public void addValue(double value) {\n+    if (Double.isNaN(value) || Double.isInfinite(value)) {\n+        return;\n+    }\n+\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+\n+    if (!(meanImpl instanceof Mean)) {\n+        ((Mean) meanImpl).increment(value);\n+    }\n+    if (!(varianceImpl instanceof Variance)) {\n+        ((Variance) varianceImpl).increment(value);\n+    }\n+    if (value > 0 && !(geoMeanImpl instanceof GeometricMean)) {\n+        ((GeometricMean) geoMeanImpl).increment(value);\n+    }\n+\n+    if (value > 0) {\n+        double logValue;\n+        try {\n+            logValue = Math.log(value); \n+        } catch (ArithmeticException e) {\n+            logValue = Double.NaN;\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n+        if (!Double.isNaN(logValue) && !Double.isInfinite(logValue)) {\n+            sumLogImpl.increment(logValue);\n+            secondMoment.increment(value);\n         }\n-        n++;\n     }\n+    n++;\n+}\n \n     /**\n      * Returns the number of available values",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}