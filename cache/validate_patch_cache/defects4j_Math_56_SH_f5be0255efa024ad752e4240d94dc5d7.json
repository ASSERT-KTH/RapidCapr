{
    "patch": "int idx = 0;\nint sum = 0;\nwhile (sum <= index) {\n    ++idx;\n    sum += idx;\n}\n\n--idx;\nsum -= idx;\nindices[0] = 0;\nindices[1] = idx;\n\nint remainingIndex = index - sum;\nfor (int i = 2; i < last; ++i) {\n    final int offset = uniCounterOffset[i-1];\n    indices[i] = remainingIndex / offset;\n    remainingIndex -= indices[i] * offset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..3eca9be21 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,24 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n-        }\n-        --idx;\n-        indices[last] = idx;\n+int idx = 0;\n+int sum = 0;\n+while (sum <= index) {\n+    ++idx;\n+    sum += idx;\n+}\n+\n+--idx;\n+sum -= idx;\n+indices[0] = 0;\n+indices[1] = idx;\n+\n+int remainingIndex = index - sum;\n+for (int i = 2; i < last; ++i) {\n+    final int offset = uniCounterOffset[i-1];\n+    indices[i] = remainingIndex / offset;\n+    remainingIndex -= indices[i] * offset;\n+}\n \n         return indices;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: Wrong multidimensional index for [1][1] expected:<0> but was:<1>",
    "test_result": "FAIL"
}