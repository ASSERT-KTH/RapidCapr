{
    "patch": "  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                      WhitespaceOption option) {\n\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n        token == JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n    \n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    // Read the content from the first line.\n    String line = stream.getRemainingJSDocLine();\n    if (option != WhitespaceOption.PRESERVE) {\n      line = trimEnd(line);\n    }\n\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n\n    state = State.SEARCHING_ANNOTATION;\n    token = next();\n\n    boolean ignoreStar = false;\n    int endLineno = startLineno;\n    int endCharno = startCharno;\n\n    // Track the start of the line to count whitespace that\n    // the tokenizer skipped. Because this case is rare, it's easier\n    // to do this here than in the tokenizer.\n    do {\n      switch (token) {\n        case STAR:\n          if (ignoreStar) {\n            // Mark the position after the star as the new start of the line.\n            startCharno = builder.length() + 2;\n          } else {\n            // The star is part of the comment.\n            if (builder.length() > 0) {\n              builder.append(' ');\n            }\n\n            builder.append('*');\n          }\n\n          token = next();\n          continue;\n\n        case EOL:\n          if (option != WhitespaceOption.SINGLE_LINE) {\n            builder.append(\"\\n\");\n          }\n\n          ignoreStar = true;\n\n          endLineno = stream.getLineno();\n          endCharno = stream.getCharno() + 1;\n\n          token = next();\n          continue;\n\n        default:\n          ignoreStar = false;\n          state = State.SEARCHING_ANNOTATION;\n\n          // All tokens must be separated by a space.\n          boolean isAnnotation = (token == JsDocToken.ANNOTATION);\n\n          if (isAnnotation && option == WhitespaceOption.PRESERVE) {\n            if (builder.length() > 0) {\n              builder.append(' ');\n            }\n            builder.append(toString(token));\n            token = next();\n            break;\n          }\n\n          if (isAnnotation) {\n            int whitespaceEndLineno = endLineno;\n            int whitespaceEndCharno = endCharno; \n\n            builder.append(' ');\n            builder.append(toString(token));\n            token = next();\n\n            // Look for whitespace before the annotation starts\n            while (isWhitespace(token)) {\n              if (token == EOL) {\n                builder.append('\\n');\n              }\n              endLineno = stream.getLineno();\n              endCharno = stream.getCharno() + 1;\n              builder.append(toString(token));\n              token = next();\n\n              // Collect up whitespace after the EOL also.\n              if (token == STAR) {\n                if (builder.length() > 0) {\n                  builder.append(' ');\n                }\n                builder.append('*');\n                ignoreStar = true;\n                token = next();\n                break;\n              }\n            }\n          } else {\n            if (builder.length() > 0) {\n              builder.append(' ');\n            }\n            builder.append(toString(token));\n            token = next();\n          }\n      }\n\n      endLineno = stream.getLineno();\n      endCharno = stream.getCharno() + 1;\n\n      if (token == JsDocToken.EOC ||\n          (option != WhitespaceOption.PRESERVE &&\n           (builder.length() > MAX_EXTRACTED_LENGTH ||\n            endLineno - startLineno + 1 > MAX_EXTRACTED_LINES))) {\n        String multilineText = builder.toString();\n\n        if (option != WhitespaceOption.PRESERVE) {\n          multilineText = trimEnd(multilineText);\n        }\n\n        if (multilineText.length() > 0) {\n          jsdocBuilder.markText(multilineText, startLineno, startCharno,\n              endLineno, endCharno);\n        }\n\n        return new ExtractionInfo(multilineText, token);\n      }\n    } while (true);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..82bcb48a 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1333,7 +1333,7 @@ public final class JsDocInfoParser {\n         token == JsDocToken.EOF) {\n       return new ExtractionInfo(\"\", token);\n     }\n-\n+    \n     stream.update();\n     int startLineno = stream.getLineno();\n     int startCharno = stream.getCharno() + 1;\n@@ -1341,7 +1341,7 @@ public final class JsDocInfoParser {\n     // Read the content from the first line.\n     String line = stream.getRemainingJSDocLine();\n     if (option != WhitespaceOption.PRESERVE) {\n-      line = line.trim();\n+      line = trimEnd(line);\n     }\n \n     StringBuilder builder = new StringBuilder();\n@@ -1351,16 +1351,18 @@ public final class JsDocInfoParser {\n     token = next();\n \n     boolean ignoreStar = false;\n+    int endLineno = startLineno;\n+    int endCharno = startCharno;\n \n     // Track the start of the line to count whitespace that\n     // the tokenizer skipped. Because this case is rare, it's easier\n     // to do this here than in the tokenizer.\n-\n     do {\n       switch (token) {\n         case STAR:\n           if (ignoreStar) {\n             // Mark the position after the star as the new start of the line.\n+            startCharno = builder.length() + 2;\n           } else {\n             // The star is part of the comment.\n             if (builder.length() > 0) {\n@@ -1379,6 +1381,10 @@ public final class JsDocInfoParser {\n           }\n \n           ignoreStar = true;\n+\n+          endLineno = stream.getLineno();\n+          endCharno = stream.getCharno() + 1;\n+\n           token = next();\n           continue;\n \n@@ -1386,44 +1392,75 @@ public final class JsDocInfoParser {\n           ignoreStar = false;\n           state = State.SEARCHING_ANNOTATION;\n \n-              // All tokens must be separated by a space.\n+          // All tokens must be separated by a space.\n+          boolean isAnnotation = (token == JsDocToken.ANNOTATION);\n \n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n-            String multilineText = builder.toString();\n-\n-            if (option != WhitespaceOption.PRESERVE) {\n-              multilineText = multilineText.trim();\n+          if (isAnnotation && option == WhitespaceOption.PRESERVE) {\n+            if (builder.length() > 0) {\n+              builder.append(' ');\n             }\n+            builder.append(toString(token));\n+            token = next();\n+            break;\n+          }\n \n-            int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n+          if (isAnnotation) {\n+            int whitespaceEndLineno = endLineno;\n+            int whitespaceEndCharno = endCharno; \n \n-            if (multilineText.length() > 0) {\n-              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n-                  endLineno, endCharno);\n-            }\n+            builder.append(' ');\n+            builder.append(toString(token));\n+            token = next();\n \n-            return new ExtractionInfo(multilineText, token);\n+            // Look for whitespace before the annotation starts\n+            while (isWhitespace(token)) {\n+              if (token == EOL) {\n+                builder.append('\\n');\n+              }\n+              endLineno = stream.getLineno();\n+              endCharno = stream.getCharno() + 1;\n+              builder.append(toString(token));\n+              token = next();\n+\n+              // Collect up whitespace after the EOL also.\n+              if (token == STAR) {\n+                if (builder.length() > 0) {\n+                  builder.append(' ');\n+                }\n+                builder.append('*');\n+                ignoreStar = true;\n+                token = next();\n+                break;\n+              }\n+            }\n+          } else {\n+            if (builder.length() > 0) {\n+              builder.append(' ');\n+            }\n+            builder.append(toString(token));\n+            token = next();\n           }\n+      }\n \n-          if (builder.length() > 0) {\n-            builder.append(' ');\n-          }\n-          builder.append(toString(token));\n+      endLineno = stream.getLineno();\n+      endCharno = stream.getCharno() + 1;\n \n-          line = stream.getRemainingJSDocLine();\n+      if (token == JsDocToken.EOC ||\n+          (option != WhitespaceOption.PRESERVE &&\n+           (builder.length() > MAX_EXTRACTED_LENGTH ||\n+            endLineno - startLineno + 1 > MAX_EXTRACTED_LINES))) {\n+        String multilineText = builder.toString();\n \n-          if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n-          }\n+        if (option != WhitespaceOption.PRESERVE) {\n+          multilineText = trimEnd(multilineText);\n+        }\n \n-          builder.append(line);\n-          token = next();\n+        if (multilineText.length() > 0) {\n+          jsdocBuilder.markText(multilineText, startLineno, startCharno,\n+              endLineno, endCharno);\n+        }\n+\n+        return new ExtractionInfo(multilineText, token);\n       }\n     } while (true);\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}