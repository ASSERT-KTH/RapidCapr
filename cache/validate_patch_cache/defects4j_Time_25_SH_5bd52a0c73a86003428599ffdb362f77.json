{
    "patch": "            if (offsetLocal != offsetAdjusted) {\n                if (offsetLocal < offsetAdjusted) {\n                    long prevAdjusted = previousTransition(instantAdjusted);\n                    long nextLocal = nextTransition(prevAdjusted + 1);\n                    if (nextLocal <= instantLocal) {\n                        return offsetAdjusted;\n                    }\n                    return getOffset(nextLocal - 1);\n                } else {\n                    long nextAdjusted = nextTransition(instantAdjusted);\n                    if (instantLocal < nextAdjusted) {\n                        return offsetLocal;\n                    }\n                    long nextLocal = nextTransition(instantLocal);\n                    return (nextLocal == nextAdjusted) ? offsetAdjusted : getOffset(nextAdjusted);\n                }\n            } else if (offsetLocal != 0) {\n                long prevLocal = previousTransition(instantLocal);\n                long nextLocal = nextTransition(instantLocal);\n                if (prevLocal == nextLocal) {\n                    return offsetLocal;\n                }\n                long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n                long nextAdjusted = nextTransition(instantLocal - offsetLocal + 1);\n                if (nextLocal < nextAdjusted && prevLocal < prevAdjusted) {\n                    return offsetLocal;\n                }\n                if (nextLocal > nextAdjusted && prevLocal > prevAdjusted) {\n                    return offsetLocal;\n                }\n                return (nextLocal == nextAdjusted) ? offsetLocal : getOffset(nextLocal);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..bd443547 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,37 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetLocal != offsetAdjusted) {\n+                if (offsetLocal < offsetAdjusted) {\n+                    long prevAdjusted = previousTransition(instantAdjusted);\n+                    long nextLocal = nextTransition(prevAdjusted + 1);\n+                    if (nextLocal <= instantLocal) {\n+                        return offsetAdjusted;\n+                    }\n+                    return getOffset(nextLocal - 1);\n+                } else {\n+                    long nextAdjusted = nextTransition(instantAdjusted);\n+                    if (instantLocal < nextAdjusted) {\n+                        return offsetLocal;\n+                    }\n+                    long nextLocal = nextTransition(instantLocal);\n+                    return (nextLocal == nextAdjusted) ? offsetAdjusted : getOffset(nextAdjusted);\n+                }\n+            } else if (offsetLocal != 0) {\n+                long prevLocal = previousTransition(instantLocal);\n+                long nextLocal = nextTransition(instantLocal);\n+                if (prevLocal == nextLocal) {\n+                    return offsetLocal;\n+                }\n+                long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+                long nextAdjusted = nextTransition(instantLocal - offsetLocal + 1);\n+                if (nextLocal < nextAdjusted && prevLocal < prevAdjusted) {\n+                    return offsetLocal;\n+                }\n+                if (nextLocal > nextAdjusted && prevLocal > prevAdjusted) {\n+                    return offsetLocal;\n+                }\n+                return (nextLocal == nextAdjusted) ? offsetLocal : getOffset(nextLocal);\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}