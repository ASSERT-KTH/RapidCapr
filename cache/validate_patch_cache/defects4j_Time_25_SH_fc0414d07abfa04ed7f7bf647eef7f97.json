{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // check if local time exists inside a gap/overlap\n    long transitionTime = (offsetAdjusted > offsetLocal) ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n    int beforeTransitionOffset = getOffset(transitionTime - 1);\n    if (beforeTransitionOffset == offsetLocal) {\n        return offsetAdjusted;\n    } else if (beforeTransitionOffset < offsetLocal) {\n        return offsetAdjusted + 1;\n    } else {\n        return offsetLocal;\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..60796068 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,19 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // check if local time exists inside a gap/overlap\n+    long transitionTime = (offsetAdjusted > offsetLocal) ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n+    int beforeTransitionOffset = getOffset(transitionTime - 1);\n+    if (beforeTransitionOffset == offsetLocal) {\n+        return offsetAdjusted;\n+    } else if (beforeTransitionOffset < offsetLocal) {\n+        return offsetAdjusted + 1;\n+    } else {\n+        return offsetLocal;\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}