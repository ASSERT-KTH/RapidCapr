{
    "patch": "public static String reverseString(String s) {\n    if (s == null) {\n        return null;\n    }\n    char[] charArray = s.toCharArray();\n    int i = 0;\n    int j = charArray.length - 1;\n    while (i < j) {\n        char temp = charArray[i];\n        charArray[i] = charArray[j];\n        charArray[j] = temp;\n        i++;\n        j--;\n    }\n    return new String(charArray);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..fbacd7b46 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,22 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static String reverseString(String s) {\n+    if (s == null) {\n+        return null;\n+    }\n+    char[] charArray = s.toCharArray();\n+    int i = 0;\n+    int j = charArray.length - 1;\n+    while (i < j) {\n+        char temp = charArray[i];\n+        charArray[i] = charArray[j];\n+        charArray[j] = temp;\n+        i++;\n+        j--;\n+    }\n+    return new String(charArray);\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}