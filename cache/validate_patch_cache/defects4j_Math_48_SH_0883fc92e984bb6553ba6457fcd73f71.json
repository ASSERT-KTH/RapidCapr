{
    "patch": "if (FastMath.abs(f1) <= ftol) {\n    // There's a root at x1, or we're close enough\n    switch (allowed) {\n        case ANY_SIDE:\n            return x1;\n        case LEFT_SIDE:\n            return inverted ? x1 : x0;\n        case RIGHT_SIDE:\n            return inverted ? x0 : x1;\n        case BELOW_SIDE:\n            return (f1 <= 0) ? x1 : x0;\n        case ABOVE_SIDE:\n            return (f1 >= 0) ? x1 : x0;\n        default:\n            throw new MathInternalError();\n    }\n}\ndouble dx = FastMath.max(rtol * FastMath.abs(x1) , atol);\nif (FastMath.abs(x1 - x0) < dx) {\n    if (FastMath.abs(f1) < FastMath.abs(f0)) {\n        // There's a root at x1, or we're close enough\n        switch (allowed) {\n            case ANY_SIDE:\n                return x1;\n            case LEFT_SIDE:\n                return inverted ? x1 : x0;\n            case RIGHT_SIDE:\n                return inverted ? x0 : x1;\n            case BELOW_SIDE:\n                return (f1 < 0) ? x1 : x0;\n            case ABOVE_SIDE:\n                return (f1 > 0) ? x1 : x0;\n            default:\n                throw new MathInternalError();\n        }\n    }\n    return x1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..d81a4dadc 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,44 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+if (FastMath.abs(f1) <= ftol) {\n+    // There's a root at x1, or we're close enough\n+    switch (allowed) {\n+        case ANY_SIDE:\n+            return x1;\n+        case LEFT_SIDE:\n+            return inverted ? x1 : x0;\n+        case RIGHT_SIDE:\n+            return inverted ? x0 : x1;\n+        case BELOW_SIDE:\n+            return (f1 <= 0) ? x1 : x0;\n+        case ABOVE_SIDE:\n+            return (f1 >= 0) ? x1 : x0;\n+        default:\n+            throw new MathInternalError();\n+    }\n+}\n+double dx = FastMath.max(rtol * FastMath.abs(x1) , atol);\n+if (FastMath.abs(x1 - x0) < dx) {\n+    if (FastMath.abs(f1) < FastMath.abs(f0)) {\n+        // There's a root at x1, or we're close enough\n+        switch (allowed) {\n+            case ANY_SIDE:\n+                return x1;\n+            case LEFT_SIDE:\n+                return inverted ? x1 : x0;\n+            case RIGHT_SIDE:\n+                return inverted ? x0 : x1;\n+            case BELOW_SIDE:\n+                return (f1 < 0) ? x1 : x0;\n+            case ABOVE_SIDE:\n+                return (f1 > 0) ? x1 : x0;\n+            default:\n+                throw new MathInternalError();\n+        }\n+    }\n+    return x1;\n+}\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "java.lang.Exception: Unexpected exception, expected<org.apache.commons.math.exception.ConvergenceException> but was<org.apache.commons.math.exception.TooManyEvaluationsException>",
    "test_result": "FAIL"
}