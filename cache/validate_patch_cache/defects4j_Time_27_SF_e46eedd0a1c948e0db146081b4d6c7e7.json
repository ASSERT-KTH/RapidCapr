{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    Object[] comp = createComposite(elementPairs);\n\n    PeriodPrinter printer = null;\n    PeriodParser parser = null;\n\n    int index = 0;\n    while (index < elementPairs.size()) {\n        Object e1 = elementPairs.get(index);\n        if (e1 instanceof Separator) {\n            Separator sep = (Separator) e1;\n            List<Object> subList = elementPairs.subList(index + 1, elementPairs.size());\n            Object[] subComp = createComposite(subList);\n            if (subComp[0] instanceof Composite) {\n                index += subList.size();\n                continue;\n            }\n            if (notPrinter) {\n                if (subComp[1] != null) {\n                    throw new IllegalArgumentException(\"Cannot print as Format contains a Parser: \" + subList);\n                }\n                parser = (PeriodParser) subComp[1];\n            } else if (notParser) {\n                if (subComp[0] != null) {\n                    throw new IllegalArgumentException(\"Cannot parse as Format contains a Printer: \" + subList);\n                }\n                printer = (PeriodPrinter) subComp[0];\n            } else {\n                printer = (PeriodPrinter) subComp[0];\n                parser = (PeriodParser) subComp[1];\n            }\n            sep = sep.finish(printer, parser);\n            printer = sep;\n            parser = sep;\n            index += subList.size() + 1;\n        } else {\n            if (notPrinter) {\n                if (comp[1] != null) {\n                    throw new IllegalArgumentException(\"Cannot print as Format contains a Parser: \" + elementPairs);\n                }\n                parser = (PeriodParser) comp[1];\n            } else if (notParser) {\n                if (comp[0] != null) {\n                    throw new IllegalArgumentException(\"Cannot parse as Format contains a Printer: \" + elementPairs);\n                }\n                printer = (PeriodPrinter) comp[0];\n            } else {\n                printer = (PeriodPrinter) comp[0];\n                parser = (PeriodParser) comp[1];\n            }\n            break;\n        }\n    }\n    if (printer == null && !notPrinter) {\n        throw new IllegalArgumentException(\"Invalid format: neither printer nor parser specified\");\n    }\n    if (parser == null && !notParser) {\n        throw new IllegalArgumentException(\"Invalid format: neither printer nor parser specified\");\n    }\n\n    return new PeriodFormatter(printer, parser);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..59909c35 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,72 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    Object[] comp = createComposite(elementPairs);\n+\n+    PeriodPrinter printer = null;\n+    PeriodParser parser = null;\n+\n+    int index = 0;\n+    while (index < elementPairs.size()) {\n+        Object e1 = elementPairs.get(index);\n+        if (e1 instanceof Separator) {\n+            Separator sep = (Separator) e1;\n+            List<Object> subList = elementPairs.subList(index + 1, elementPairs.size());\n+            Object[] subComp = createComposite(subList);\n+            if (subComp[0] instanceof Composite) {\n+                index += subList.size();\n+                continue;\n+            }\n+            if (notPrinter) {\n+                if (subComp[1] != null) {\n+                    throw new IllegalArgumentException(\"Cannot print as Format contains a Parser: \" + subList);\n+                }\n+                parser = (PeriodParser) subComp[1];\n+            } else if (notParser) {\n+                if (subComp[0] != null) {\n+                    throw new IllegalArgumentException(\"Cannot parse as Format contains a Printer: \" + subList);\n+                }\n+                printer = (PeriodPrinter) subComp[0];\n+            } else {\n+                printer = (PeriodPrinter) subComp[0];\n+                parser = (PeriodParser) subComp[1];\n+            }\n+            sep = sep.finish(printer, parser);\n+            printer = sep;\n+            parser = sep;\n+            index += subList.size() + 1;\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            if (notPrinter) {\n+                if (comp[1] != null) {\n+                    throw new IllegalArgumentException(\"Cannot print as Format contains a Parser: \" + elementPairs);\n+                }\n+                parser = (PeriodParser) comp[1];\n+            } else if (notParser) {\n+                if (comp[0] != null) {\n+                    throw new IllegalArgumentException(\"Cannot parse as Format contains a Printer: \" + elementPairs);\n+                }\n+                printer = (PeriodPrinter) comp[0];\n+            } else {\n+                printer = (PeriodPrinter) comp[0];\n+                parser = (PeriodParser) comp[1];\n+            }\n+            break;\n         }\n     }\n+    if (printer == null && !notPrinter) {\n+        throw new IllegalArgumentException(\"Invalid format: neither printer nor parser specified\");\n+    }\n+    if (parser == null && !notParser) {\n+        throw new IllegalArgumentException(\"Invalid format: neither printer nor parser specified\");\n+    }\n+\n+    return new PeriodFormatter(printer, parser);\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.IndexOutOfBoundsException: Index: 7, Size: 7",
    "test_result": "FAIL"
}