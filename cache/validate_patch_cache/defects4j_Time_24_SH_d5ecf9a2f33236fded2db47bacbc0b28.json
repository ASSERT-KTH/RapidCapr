{
    "patch": "            int effectiveOffset = iOffset;\n\n            for (int i = 0; i < count; i++) {\n                SavedField savedField = savedFields[i];\n                savedField.iField = savedField.iField.withChronology(iChrono);\n                \n                int offsetChange = savedField.iField.set(millis, savedField.iValue) - millis;\n                if (offsetChange != 0 && savedField.iField.isSupported() &&\n                        !savedField.iField.isDurationField()) {\n                    int newOffset = iZone.getOffset(millis + offsetChange);\n                    if (newOffset != effectiveOffset) {\n                        // rollback\n                        millis -= offsetChange;\n                        if (i > 0) {\n                            SavedField[] copy = new SavedField[i];\n                            for (int j = 0; j < i; j++) {\n                                copy[j] = savedFields[j];\n                            }\n                            sort(copy, i);\n                            DurationField lastField = null;\n                            for (int j = 0; j < i; j++) {\n                                SavedField undo = copy[j];\n                                if (undo.iField != lastField) {\n                                    millis = undo.iField.set(millis, undo.iValue);\n                                    lastField = undo.iField.getDurationField();\n                                }\n                            }\n                        }\n                        effectiveOffset = iZone.getOffset(millis);\n                        throw new IllegalArgumentException\n                            (\"Current date \" + new LocalDate(millis, iChrono) +\n                             \" cannot be resolved because of a time zone transition \" +\n                             iZone.getID() + \" -> \" + newZone.getID());\n                    }\n                }\n                effectiveOffset = iZone.getOffset(millis);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..838a5c66 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,43 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            int effectiveOffset = iOffset;\n+\n+            for (int i = 0; i < count; i++) {\n+                SavedField savedField = savedFields[i];\n+                savedField.iField = savedField.iField.withChronology(iChrono);\n+                \n+                int offsetChange = savedField.iField.set(millis, savedField.iValue) - millis;\n+                if (offsetChange != 0 && savedField.iField.isSupported() &&\n+                        !savedField.iField.isDurationField()) {\n+                    int newOffset = iZone.getOffset(millis + offsetChange);\n+                    if (newOffset != effectiveOffset) {\n+                        // rollback\n+                        millis -= offsetChange;\n+                        if (i > 0) {\n+                            SavedField[] copy = new SavedField[i];\n+                            for (int j = 0; j < i; j++) {\n+                                copy[j] = savedFields[j];\n+                            }\n+                            sort(copy, i);\n+                            DurationField lastField = null;\n+                            for (int j = 0; j < i; j++) {\n+                                SavedField undo = copy[j];\n+                                if (undo.iField != lastField) {\n+                                    millis = undo.iField.set(millis, undo.iValue);\n+                                    lastField = undo.iField.getDurationField();\n+                                }\n+                            }\n+                        }\n+                        effectiveOffset = iZone.getOffset(millis);\n+                        throw new IllegalArgumentException\n+                            (\"Current date \" + new LocalDate(millis, iChrono) +\n+                             \" cannot be resolved because of a time zone transition \" +\n+                             iZone.getID() + \" -> \" + newZone.getID());\n+                    }\n+                }\n+                effectiveOffset = iZone.getOffset(millis);\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot assign a value to final variable iField",
    "test_result": "ERROR"
}