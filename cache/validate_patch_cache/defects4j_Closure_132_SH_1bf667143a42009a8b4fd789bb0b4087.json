{
    "patch": "              // NOTE: assignments to 'this' or LHS of a plus operator may change the value of 'lhs' and\n              // should be treated as an external effect.\n              (!mayEffectMutableState(lhs) ||\n                lhs.isThis() ||\n                (lhs.getParent().getType() == Token.ADD &&\n                 areNodesEqualForInlining(lhs.getParent().getFirstChild(), lhs)) ||\n                isPropertyAssignInRightHandSide(lhs.getParent(), lhs))) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..c02d08d0 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,13 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              // NOTE: assignments to 'this' or LHS of a plus operator may change the value of 'lhs' and\n+              // should be treated as an external effect.\n+              (!mayEffectMutableState(lhs) ||\n+                lhs.isThis() ||\n+                (lhs.getParent().getType() == Token.ADD &&\n+                 areNodesEqualForInlining(lhs.getParent().getFirstChild(), lhs)) ||\n+                isPropertyAssignInRightHandSide(lhs.getParent(), lhs))) {\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}