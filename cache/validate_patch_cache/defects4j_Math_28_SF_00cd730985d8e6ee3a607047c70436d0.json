{
    "patch": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n    // create a list of all the rows that tie for the lowest score in the minimum ratio test\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n\n        if (entry < 0) {\n            throw new RuntimeException(\"Something went wrong. Entry \" + entry + \" is negative\");\n        }\n\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            final double ratio = rhs / entry;\n            // check if the entry is strictly equal to the current min ratio\n            // do not use a ulp/epsilon check\n            final int cmp = Double.compare(ratio, minRatio);\n            if (cmp == 0) {\n                minRatioPositions.add(i);\n            } else if (cmp < 0) {\n                minRatio = ratio;\n                minRatioPositions = new ArrayList<Integer>();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n\n    if (minRatioPositions.size() == 0) {\n        return null;\n    } else if (minRatioPositions.size() > 1) {\n        // there's a degeneracy as indicated by a tie in the minimum ratio test\n\n        // 1. check if there's an artificial variable that can be forced out of the basis\n        Integer rowToMoveOut = null;\n        double maxDeviation = Double.MIN_VALUE;\n\n        for (Integer row : minRatioPositions) {\n            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                int column = i + tableau.getArtificialVariableOffset();\n                final double entry = tableau.getEntry(row, column);\n                if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                    // We subtract a small constant to avoid floating-point precision issues\n                    final double deviation = tableau.getEntry(row, tableau.getWidth() - 1) - entry - 0.00001;\n                    if (deviation > maxDeviation) {\n                        rowToMoveOut = row;\n                        maxDeviation = deviation;\n                    }\n                }\n            }\n        }\n\n        if (rowToMoveOut != null) {\n            return rowToMoveOut;\n        }\n\n        // 2. apply Bland's rule to prevent cycling:\n        //    take the row for which the corresponding basic variable has the smallest index\n        //\n        // see http://www.stanford.edu/class/msande310/blandrule.pdf\n        // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n        //\n        // Additional heuristic: if we did not get a solution after half of maxIterations\n        //                       revert to the simple case of just returning the top-most row\n        // This heuristic is based on empirical data gathered while investigating MATH-828.\n        Integer rowToMoveIn = null;\n        int minIndex = tableau.getWidth();\n        for (Integer row : minRatioPositions) {\n            int i = tableau.getNumObjectiveFunctions();\n            for (; i < tableau.getWidth() - 1 && rowToMoveIn != row; i++) {\n                if (row == tableau.getBasicRow(i)) {\n                    if (i >= tableau.getNumObjectiveFunctions() && i < tableau.getWidth() - 1) {\n                        if (rowToMoveIn == null) {\n                            rowToMoveIn = row;\n                        } else if (rowToMoveIn > row) {\n                            rowToMoveIn = row;\n                        }\n                    }\n                    if (i < minIndex) {\n                        minIndex = i;\n                        rowToMoveOut = row;\n                    }\n                    break;\n                }\n            }\n        }\n\n        if (rowToMoveIn != null) {\n            return rowToMoveIn;\n        }\n        return rowToMoveOut;\n    } else {\n        return minRatioPositions.get(0);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\nindex a84438d9b..5dc486e0b 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n@@ -87,71 +87,100 @@ public class SimplexSolver extends AbstractLinearOptimizer {\n      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n      * @return row with the minimum ratio\n      */\n-    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n-        // create a list of all the rows that tie for the lowest score in the minimum ratio test\n-        List<Integer> minRatioPositions = new ArrayList<Integer>();\n-        double minRatio = Double.MAX_VALUE;\n-        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n-            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n-            final double entry = tableau.getEntry(i, col);\n-\n-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n-                final double ratio = rhs / entry;\n-                // check if the entry is strictly equal to the current min ratio\n-                // do not use a ulp/epsilon check\n-                final int cmp = Double.compare(ratio, minRatio);\n-                if (cmp == 0) {\n-                    minRatioPositions.add(i);\n-                } else if (cmp < 0) {\n-                    minRatio = ratio;\n-                    minRatioPositions = new ArrayList<Integer>();\n-                    minRatioPositions.add(i);\n-                }\n+private Integer getPivotRow(SimplexTableau tableau, final int col) {\n+    // create a list of all the rows that tie for the lowest score in the minimum ratio test\n+    List<Integer> minRatioPositions = new ArrayList<Integer>();\n+    double minRatio = Double.MAX_VALUE;\n+    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n+        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n+        final double entry = tableau.getEntry(i, col);\n+\n+        if (entry < 0) {\n+            throw new RuntimeException(\"Something went wrong. Entry \" + entry + \" is negative\");\n+        }\n+\n+        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+            final double ratio = rhs / entry;\n+            // check if the entry is strictly equal to the current min ratio\n+            // do not use a ulp/epsilon check\n+            final int cmp = Double.compare(ratio, minRatio);\n+            if (cmp == 0) {\n+                minRatioPositions.add(i);\n+            } else if (cmp < 0) {\n+                minRatio = ratio;\n+                minRatioPositions = new ArrayList<Integer>();\n+                minRatioPositions.add(i);\n             }\n         }\n+    }\n \n-        if (minRatioPositions.size() == 0) {\n-            return null;\n-        } else if (minRatioPositions.size() > 1) {\n-            // there's a degeneracy as indicated by a tie in the minimum ratio test\n-\n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n+    if (minRatioPositions.size() == 0) {\n+        return null;\n+    } else if (minRatioPositions.size() > 1) {\n+        // there's a degeneracy as indicated by a tie in the minimum ratio test\n+\n+        // 1. check if there's an artificial variable that can be forced out of the basis\n+        Integer rowToMoveOut = null;\n+        double maxDeviation = Double.MIN_VALUE;\n+\n+        for (Integer row : minRatioPositions) {\n+            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n+                int column = i + tableau.getArtificialVariableOffset();\n+                final double entry = tableau.getEntry(row, column);\n+                if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n+                    // We subtract a small constant to avoid floating-point precision issues\n+                    final double deviation = tableau.getEntry(row, tableau.getWidth() - 1) - entry - 0.00001;\n+                    if (deviation > maxDeviation) {\n+                        rowToMoveOut = row;\n+                        maxDeviation = deviation;\n                     }\n                 }\n+            }\n+        }\n \n-            // 2. apply Bland's rule to prevent cycling:\n-            //    take the row for which the corresponding basic variable has the smallest index\n-            //\n-            // see http://www.stanford.edu/class/msande310/blandrule.pdf\n-            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n-            //\n-            // Additional heuristic: if we did not get a solution after half of maxIterations\n-            //                       revert to the simple case of just returning the top-most row\n-            // This heuristic is based on empirical data gathered while investigating MATH-828.\n-                Integer minRow = null;\n-                int minIndex = tableau.getWidth();\n-                for (Integer row : minRatioPositions) {\n-                    int i = tableau.getNumObjectiveFunctions();\n-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n+        if (rowToMoveOut != null) {\n+            return rowToMoveOut;\n+        }\n+\n+        // 2. apply Bland's rule to prevent cycling:\n+        //    take the row for which the corresponding basic variable has the smallest index\n+        //\n+        // see http://www.stanford.edu/class/msande310/blandrule.pdf\n+        // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n+        //\n+        // Additional heuristic: if we did not get a solution after half of maxIterations\n+        //                       revert to the simple case of just returning the top-most row\n+        // This heuristic is based on empirical data gathered while investigating MATH-828.\n+        Integer rowToMoveIn = null;\n+        int minIndex = tableau.getWidth();\n+        for (Integer row : minRatioPositions) {\n+            int i = tableau.getNumObjectiveFunctions();\n+            for (; i < tableau.getWidth() - 1 && rowToMoveIn != row; i++) {\n+                if (row == tableau.getBasicRow(i)) {\n+                    if (i >= tableau.getNumObjectiveFunctions() && i < tableau.getWidth() - 1) {\n+                        if (rowToMoveIn == null) {\n+                            rowToMoveIn = row;\n+                        } else if (rowToMoveIn > row) {\n+                            rowToMoveIn = row;\n                         }\n                     }\n+                    if (i < minIndex) {\n+                        minIndex = i;\n+                        rowToMoveOut = row;\n+                    }\n+                    break;\n                 }\n-                return minRow;\n+            }\n+        }\n+\n+        if (rowToMoveIn != null) {\n+            return rowToMoveIn;\n         }\n+        return rowToMoveOut;\n+    } else {\n         return minRatioPositions.get(0);\n     }\n+}\n \n     /**\n      * Runs one iteration of the Simplex method on the given model.",
    "result_reason": "java.lang.RuntimeException: Something went wrong. Entry -11.149444918872758 is negative",
    "test_result": "FAIL"
}