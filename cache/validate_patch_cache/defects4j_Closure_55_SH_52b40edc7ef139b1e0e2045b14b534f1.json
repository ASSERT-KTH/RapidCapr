{
    "patch": "    if (NodeUtil.isFunctionExpression(n)) {\n      return true;\n    }\n    if (!n.isCall()) {\n      return false;\n    }\n    Node callee = n.getFirstChild();\n    if (!callee.isFunction()) {\n      return false;\n    }\n    if (n.getLastChild().getChildCount() > 0) {\n      return false;\n    }\n    return isReduceableFunctionExpression(callee);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..bc14f789 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,20 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+    if (NodeUtil.isFunctionExpression(n)) {\n+      return true;\n+    }\n+    if (!n.isCall()) {\n+      return false;\n+    }\n+    Node callee = n.getFirstChild();\n+    if (!callee.isFunction()) {\n+      return false;\n+    }\n+    if (n.getLastChild().getChildCount() > 0) {\n+      return false;\n+    }\n+    return isReduceableFunctionExpression(callee);\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}