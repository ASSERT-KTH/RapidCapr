{
    "patch": "  private boolean isOneExactlyFunctionOrDo(Node n) {\n        // For labels with block children, we need to ensure that a\n        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n        // are skipped. \n        // Either a empty statement or an block with more than one child,\n        // way it isn't a FUNCTION or DO.\n      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO) &&\n          n.getChildCount() == 1 && (n.getFirstChild().getType() != Token.BLOCK\n          || n.getFirstChild().getChildCount() == 1);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..f5dd26eb 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -709,9 +709,11 @@ class CodeGenerator {\n         // For labels with block children, we need to ensure that a\n         // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n         // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n+        // Either a empty statement or an block with more than one child,\n+        // way it isn't a FUNCTION or DO.\n+      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO) &&\n+          n.getChildCount() == 1 && (n.getFirstChild().getType() != Token.BLOCK\n+          || n.getFirstChild().getChildCount() == 1);\n   }\n \n   /**",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){if(e1)[{function goo(){return true}]}else foo()}> but was:<function(){if(e1)[function goo(){return true]}else foo()}>",
    "test_result": "FAIL"
}