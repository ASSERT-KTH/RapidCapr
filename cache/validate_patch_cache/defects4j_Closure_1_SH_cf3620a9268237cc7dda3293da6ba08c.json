{
    "patch": "    Node functionBody = function.getLastChild();\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      if (lastArg.isUnusedParameter()) {\n        argList.removeChild(lastArg);\n        functionBody.removeChild(\n            functionBody.getLastChild().getSecondChild());\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d47a4a22 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,17 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node functionBody = function.getLastChild();\n+    Node lastArg;\n+    while ((lastArg = argList.getLastChild()) != null) {\n+      if (lastArg.isUnusedParameter()) {\n+        argList.removeChild(lastArg);\n+        functionBody.removeChild(\n+            functionBody.getLastChild().getSecondChild());\n+        compiler.reportCodeChange();\n+      } else {\n+        break;\n+      }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}