{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if ((nextLocal + offsetLocal) == (nextAdjusted + offsetAdjusted)) {\n                    return offsetLocal;\n                }\n                if (offsetLocal == 0 && offsetAdjusted == 1 && (nextAdjusted - instantLocal) == DateTimeConstants.MILLIS_PER_HOUR) {\n                    return 2;\n                }\n                if (offsetLocal > offsetAdjusted) {\n                    long prevLocal = previousTransition(instantAdjusted);\n                    long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                    if (prevLocal != prevAdjusted) {\n                        return offsetLocal;\n                    }\n                }\n            } else if ((offsetLocal - offsetAdjusted) > 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if ((nextLocal - offsetLocal) == (nextAdjusted - offsetAdjusted)) {\n                    return offsetLocal;\n                }\n                if ((nextLocal - offsetLocal) == (nextAdjusted - offsetAdjusted + DateTimeConstants.MILLIS_PER_HOUR)) {\n                    return offsetAdjusted;\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..54ff8f2e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,32 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if ((nextLocal + offsetLocal) == (nextAdjusted + offsetAdjusted)) {\n+                    return offsetLocal;\n+                }\n+                if (offsetLocal == 0 && offsetAdjusted == 1 && (nextAdjusted - instantLocal) == DateTimeConstants.MILLIS_PER_HOUR) {\n+                    return 2;\n+                }\n+                if (offsetLocal > offsetAdjusted) {\n+                    long prevLocal = previousTransition(instantAdjusted);\n+                    long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                    if (prevLocal != prevAdjusted) {\n+                        return offsetLocal;\n+                    }\n+                }\n+            } else if ((offsetLocal - offsetAdjusted) > 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if ((nextLocal - offsetLocal) == (nextAdjusted - offsetAdjusted)) {\n+                    return offsetLocal;\n+                }\n+                if ((nextLocal - offsetLocal) == (nextAdjusted - offsetAdjusted + DateTimeConstants.MILLIS_PER_HOUR)) {\n+                    return offsetAdjusted;\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}