{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (parent.getNext() != null && parent.getNext().getType() == Token.ASSIGN) {\n        Node proto = parent.getNext().getFirstChild();\n        if (proto.getType() == Token.GETPROP &&\n            \"prototype\".equals(proto.getLastChild().getString())) {\n          return false;\n        }\n      } else if (NodeUtil.isGet(parent)) {\n        Node root = NodeUtil.getRootOfQualifiedName(parent);\n        if (root != null) {\n          Node grandparent = root.getParent();\n          if (grandparent != null && grandparent.getType() == Token.ASSIGN) {\n            Node ancestor = grandparent.getParent();\n            if (ancestor != null && NodeUtil.isPrototypeProperty(ancestor)) {\n              return false;\n            }\n          } else if (NodeUtil.isPrototypeProperty(parent.getParent())) {\n            return false;\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..3d8a14dc 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,27 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parent.getNext() != null && parent.getNext().getType() == Token.ASSIGN) {\n+        Node proto = parent.getNext().getFirstChild();\n+        if (proto.getType() == Token.GETPROP &&\n+            \"prototype\".equals(proto.getLastChild().getString())) {\n+          return false;\n+        }\n+      } else if (NodeUtil.isGet(parent)) {\n+        Node root = NodeUtil.getRootOfQualifiedName(parent);\n+        if (root != null) {\n+          Node grandparent = root.getParent();\n+          if (grandparent != null && grandparent.getType() == Token.ASSIGN) {\n+            Node ancestor = grandparent.getParent();\n+            if (ancestor != null && NodeUtil.isPrototypeProperty(ancestor)) {\n+              return false;\n+            }\n+          } else if (NodeUtil.isPrototypeProperty(parent.getParent())) {\n+            return false;\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 110 expected:<0> but was:<1>",
    "test_result": "FAIL"
}