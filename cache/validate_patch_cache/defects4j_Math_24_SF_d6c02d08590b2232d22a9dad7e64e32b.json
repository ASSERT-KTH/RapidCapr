{
    "patch": "import org.apache.commons.math3.optim.PointValuePair;\nimport org.apache.commons.math3.optim.PointValuePair;\nimport org.apache.commons.math3.optim.univariate.AbstractUnivariateOptimizer;\nimport org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;\nimport org.apache.commons.math3.optim.univariate.UnivariateOptimizer;\nimport org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;\nimport org.apache.commons.math3.exception.TooManyEvaluationsException;\n\npublic class MyOptimizer extends AbstractUnivariateOptimizer implements UnivariateOptimizer {\n\n    private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));\n\n    private final double relativeThreshold;\n    private final double absoluteThreshold;\n\n    /**\n     * @param rel relative threshold.\n     * @param abs absolute threshold.\n     */\n    public MyOptimizer(final double rel,\n                           final double abs) {\n        super(null, null);\n        relativeThreshold = rel;\n        absoluteThreshold = abs;\n    }\n\n    @Override\n    protected UnivariatePointValuePair doOptimize() {\n        final boolean isMinim = getGoalType() == GoalType.MINIMIZE;\n\n        // initialize search interval and other variables\n        double a = getMin();\n        double b = getMax();\n        double c = a + GOLDEN_SECTION * (b - a);\n        double d = b - GOLDEN_SECTION * (b - a);\n        double fc = computeObjectiveValue(c);\n        if (!isMinim) {\n            fc = -fc;\n        }\n        double fd = computeObjectiveValue(d);\n        if (!isMinim) {\n            fd = -fd;\n        }\n        \n        int evaluations = 2;\n\n        while (evaluations < getMaxEvaluations()) {\n            if (fc < fd) {\n                b = d;\n                d = c;\n                fd = fc;\n                c = a + GOLDEN_SECTION * (b - a);\n                fc = computeObjectiveValue(c);\n                if (!isMinim) {\n                    fc = -fc;\n                }\n            } else {\n                a = c;\n                c = d;\n                fc = fd;\n                d = b - GOLDEN_SECTION * (b - a);\n                fd = computeObjectiveValue(d);\n                if (!isMinim) {\n                    fd = -fd;\n                }\n            }\n\n            double tol = Math.max(relativeThreshold * Math.max(Math.abs(d), Math.abs(c)),\n                                   absoluteThreshold);\n            if (Math.abs(d - c) < tol) {\n                double x = 0.5 * (c + d);\n                double fx = computeObjectiveValue(x);\n                if (!isMinim) {\n                    fx = -fx;\n                }\n                UnivariatePointValuePair solution = new UnivariatePointValuePair(x, isMinim ? fx : -fx);\n                return solution;\n            }\n            \n            evaluations++;\n        }\n\n        throw new TooManyEvaluationsException(getMaxEvaluations());\n    }\n\n    @Override\n    public MyOptimizer withMaxEvaluations(int maxEvaluations) {\n        return new MyOptimizer (relativeThreshold, absoluteThreshold, maxEvaluations);\n    }\n\n    /**\n     * @param rel relative threshold.\n     * @param abs absolute threshold.\n     * @param maxEvals The maximum number of function evaluations.\n     */\n    private MyOptimizer(double rel, double abs, int maxEvals) {\n        super(null, null);\n        this.relativeThreshold = rel;\n        this.absoluteThreshold = abs;\n        setMaxEvaluations(maxEvals);\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java\nindex b6ce68ef3..babda946f 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java\n@@ -106,170 +106,110 @@ public class BrentOptimizer extends BaseAbstractUnivariateOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected UnivariatePointValuePair doOptimize() {\n-        final boolean isMinim = getGoalType() == GoalType.MINIMIZE;\n-        final double lo = getMin();\n-        final double mid = getStartValue();\n-        final double hi = getMax();\n-\n-        // Optional additional convergence criteria.\n-        final ConvergenceChecker<UnivariatePointValuePair> checker\n-            = getConvergenceChecker();\n-\n-        double a;\n-        double b;\n-        if (lo < hi) {\n-            a = lo;\n-            b = hi;\n-        } else {\n-            a = hi;\n-            b = lo;\n-        }\n-\n-        double x = mid;\n-        double v = x;\n-        double w = x;\n-        double d = 0;\n-        double e = 0;\n-        double fx = computeObjectiveValue(x);\n-        if (!isMinim) {\n-            fx = -fx;\n-        }\n-        double fv = fx;\n-        double fw = fx;\n-\n-        UnivariatePointValuePair previous = null;\n-        UnivariatePointValuePair current\n-            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);\n-\n-        int iter = 0;\n-        while (true) {\n-            final double m = 0.5 * (a + b);\n-            final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;\n-            final double tol2 = 2 * tol1;\n+import org.apache.commons.math3.optim.PointValuePair;\n+import org.apache.commons.math3.optim.PointValuePair;\n+import org.apache.commons.math3.optim.univariate.AbstractUnivariateOptimizer;\n+import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;\n+import org.apache.commons.math3.optim.univariate.UnivariateOptimizer;\n+import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;\n+import org.apache.commons.math3.exception.TooManyEvaluationsException;\n \n-            // Default stopping criterion.\n-            final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);\n-            if (!stop) {\n-                double p = 0;\n-                double q = 0;\n-                double r = 0;\n-                double u = 0;\n+public class MyOptimizer extends AbstractUnivariateOptimizer implements UnivariateOptimizer {\n \n-                if (FastMath.abs(e) > tol1) { // Fit parabola.\n-                    r = (x - w) * (fx - fv);\n-                    q = (x - v) * (fx - fw);\n-                    p = (x - v) * q - (x - w) * r;\n-                    q = 2 * (q - r);\n+    private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));\n \n-                    if (q > 0) {\n-                        p = -p;\n-                    } else {\n-                        q = -q;\n-                    }\n+    private final double relativeThreshold;\n+    private final double absoluteThreshold;\n \n-                    r = e;\n-                    e = d;\n+    /**\n+     * @param rel relative threshold.\n+     * @param abs absolute threshold.\n+     */\n+    public MyOptimizer(final double rel,\n+                           final double abs) {\n+        super(null, null);\n+        relativeThreshold = rel;\n+        absoluteThreshold = abs;\n+    }\n \n-                    if (p > q * (a - x) &&\n-                        p < q * (b - x) &&\n-                        FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {\n-                        // Parabolic interpolation step.\n-                        d = p / q;\n-                        u = x + d;\n+    @Override\n+    protected UnivariatePointValuePair doOptimize() {\n+        final boolean isMinim = getGoalType() == GoalType.MINIMIZE;\n \n-                        // f must not be evaluated too close to a or b.\n-                        if (u - a < tol2 || b - u < tol2) {\n-                            if (x <= m) {\n-                                d = tol1;\n-                            } else {\n-                                d = -tol1;\n-                            }\n-                        }\n-                    } else {\n-                        // Golden section step.\n-                        if (x < m) {\n-                            e = b - x;\n-                        } else {\n-                            e = a - x;\n-                        }\n-                        d = GOLDEN_SECTION * e;\n-                    }\n-                } else {\n-                    // Golden section step.\n-                    if (x < m) {\n-                        e = b - x;\n-                    } else {\n-                        e = a - x;\n-                    }\n-                    d = GOLDEN_SECTION * e;\n+        // initialize search interval and other variables\n+        double a = getMin();\n+        double b = getMax();\n+        double c = a + GOLDEN_SECTION * (b - a);\n+        double d = b - GOLDEN_SECTION * (b - a);\n+        double fc = computeObjectiveValue(c);\n+        if (!isMinim) {\n+            fc = -fc;\n+        }\n+        double fd = computeObjectiveValue(d);\n+        if (!isMinim) {\n+            fd = -fd;\n+        }\n+        \n+        int evaluations = 2;\n+\n+        while (evaluations < getMaxEvaluations()) {\n+            if (fc < fd) {\n+                b = d;\n+                d = c;\n+                fd = fc;\n+                c = a + GOLDEN_SECTION * (b - a);\n+                fc = computeObjectiveValue(c);\n+                if (!isMinim) {\n+                    fc = -fc;\n                 }\n-\n-                // Update by at least \"tol1\".\n-                if (FastMath.abs(d) < tol1) {\n-                    if (d >= 0) {\n-                        u = x + tol1;\n-                    } else {\n-                        u = x - tol1;\n-                    }\n-                } else {\n-                    u = x + d;\n+            } else {\n+                a = c;\n+                c = d;\n+                fc = fd;\n+                d = b - GOLDEN_SECTION * (b - a);\n+                fd = computeObjectiveValue(d);\n+                if (!isMinim) {\n+                    fd = -fd;\n                 }\n+            }\n \n-                double fu = computeObjectiveValue(u);\n+            double tol = Math.max(relativeThreshold * Math.max(Math.abs(d), Math.abs(c)),\n+                                   absoluteThreshold);\n+            if (Math.abs(d - c) < tol) {\n+                double x = 0.5 * (c + d);\n+                double fx = computeObjectiveValue(x);\n                 if (!isMinim) {\n-                    fu = -fu;\n+                    fx = -fx;\n                 }\n+                UnivariatePointValuePair solution = new UnivariatePointValuePair(x, isMinim ? fx : -fx);\n+                return solution;\n+            }\n+            \n+            evaluations++;\n+        }\n \n-                // User-defined convergence checker.\n-                previous = current;\n-                current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);\n+        throw new TooManyEvaluationsException(getMaxEvaluations());\n+    }\n \n-                if (checker != null) {\n-                    if (checker.converged(iter, previous, current)) {\n-                        return current;\n-                    }\n-                }\n+    @Override\n+    public MyOptimizer withMaxEvaluations(int maxEvaluations) {\n+        return new MyOptimizer (relativeThreshold, absoluteThreshold, maxEvaluations);\n+    }\n \n-                // Update a, b, v, w and x.\n-                if (fu <= fx) {\n-                    if (u < x) {\n-                        b = x;\n-                    } else {\n-                        a = x;\n-                    }\n-                    v = w;\n-                    fv = fw;\n-                    w = x;\n-                    fw = fx;\n-                    x = u;\n-                    fx = fu;\n-                } else {\n-                    if (u < x) {\n-                        a = u;\n-                    } else {\n-                        b = u;\n-                    }\n-                    if (fu <= fw ||\n-                        Precision.equals(w, x)) {\n-                        v = w;\n-                        fv = fw;\n-                        w = u;\n-                        fw = fu;\n-                    } else if (fu <= fv ||\n-                               Precision.equals(v, x) ||\n-                               Precision.equals(v, w)) {\n-                        v = u;\n-                        fv = fu;\n-                    }\n-                }\n-            } else { // Default termination (Brent's criterion).\n-                return current;\n-            }\n-            ++iter;\n-        }\n+    /**\n+     * @param rel relative threshold.\n+     * @param abs absolute threshold.\n+     * @param maxEvals The maximum number of function evaluations.\n+     */\n+    private MyOptimizer(double rel, double abs, int maxEvals) {\n+        super(null, null);\n+        this.relativeThreshold = rel;\n+        this.absoluteThreshold = abs;\n+        setMaxEvaluations(maxEvals);\n     }\n \n+}\n+\n     /**\n      * Selects the best of two points.\n      *",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}