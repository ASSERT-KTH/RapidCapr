{
    "patch": "      if (n == null) {\n          return false;\n      }\n\n      int nType = n.getType();\n      if (nType != Token.EXPR_RESULT && nType != Token.EXPR_VOID) {\n          return false;\n      }\n\n      Node firstChild = n.getFirstChild();\n      if (firstChild == null || firstChild.getType() != Token.STRING) {\n          return false;\n      }\n\n      String directive = firstChild.getString();\n      return ALLOWED_DIRECTIVES.contains(directive);\n    }\n\n    @Override\n    Node processBlock(Block blockNode) {\n      return processGenericChildren(blockNode);\n    }\n\n    @Override\n    Node processBreakStatement(BreakStatement statementNode) {\n      String label = statementNode.getBreakLabel();\n      Token type = Token.BREAK;\n      if (label != null) {\n        Node labelNode = transform(new Name(label));\n        labelNode.setType(Token.LABEL_NAME);\n        return new Node(type, labelNode);\n      }\n      return new Node(type);\n    }\n\n    @Override\n    Node processCatchClause(CatchClause clauseNode) {\n      Node catchVar = transform(clauseNode.getVarName());\n      Node catchBody = transform(clauseNode.getBody());\n      Node catchNode = new Node(Token.CATCH, catchVar, catchBody);\n      AstNode condition = clauseNode.getCatchCondition();\n      if (condition != null) {\n        errorReporter.error(\n            \"Catch clauses are not supported\",\n            sourceName,\n            condition.getLineno(), \"\", 0);\n      }\n      return catchNode;\n    }\n\n    @Override\n    Node processConditionalExpression(ConditionalExpression exprNode) {\n      Node test = transform(exprNode.getTestExpression());\n      Node ifTrue = transform(exprNode.getTrueExpression());\n      Node ifFalse = transform(exprNode.getFalseExpression());\n\n      return new Node(Token.HOOK, test, ifTrue, ifFalse);\n    }\n\n    @Override\n    Node processContinueStatement(ContinueStatement statementNode) {\n      String label = statementNode.getLabel();\n      Token type = Token.CONTINUE;\n      if (label != null) {\n        Node labelNode = transform(new Name(label));\n        labelNode.setType(Token.LABEL_NAME);\n        return new Node(type, labelNode);\n      }\n      return new Node(type);\n    }\n\n    @Override\n    Node processDoLoop(DoLoop loopNode) {\n      Node body = transform(loopNode.getBody());\n      Node condition = transform(loopNode.getCondition());\n\n      return new Node(Token.DO, body, condition);\n    }\n\n    @Override\n    Node processElementGet(ElementGet getNode) {\n      Node target = transform(getNode.getTarget());\n      Node element = transform(getNode.getElement());\n\n      return new Node(Token.GETELEM, target, element);\n    }\n\n    @Override\n    Node processEmptyExpression(EmptyExpression exprNode) {\n      return new Node(Token.EMPTY, new Node[0]);\n    }\n\n    @Override\n    Node processExpressionStatement(ExpressionStatement statementNode) {\n      Node expression = transform(statementNode.getExpression());\n\n      return new Node(Token.EXPR_RESULT, expression);\n    }\n\n    @Override\n    Node processForInLoop(ForInLoop loopNode) {\n      Node variable = transform(loopNode.getIterator());\n      Node object = transform(loopNode.getIteratedObject());\n      Node body = transform(loopNode.getBody());\n\n      return new Node(Token.FOR, variable, object, body);\n    }\n\n    @Override\n    Node processForLoop(ForLoop loopNode) {\n      Node initializer = transform(loopNode.getInitializer());\n      Node condition = transform(loopNode.getCondition());\n      Node increment = transform(loopNode.getIncrement());\n      Node body = transform(loopNode.getBody());\n\n      return new Node(Token.FOR, initializer, condition, increment, body);\n    }\n\n    @Override\n    Node processFunctionCall(FunctionCall callNode) {\n      Node callee = transform(callNode.getTarget());\n      ArrayList<Node> arguments = new ArrayList<>(callNode.getArguments().size());\n      for (AstNode arg : callNode.getArguments()) {\n        arguments.add(transform(arg));\n      }\n      Node[] argsArray = arguments.toArray(new Node[0]);\n      return new Node(Token.CALL, callee, argsArray);\n    }\n\n    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name functionName = functionNode.getFunctionName();\n      AstNode[] parameters = functionNode.getParams().toArray(new AstNode[0]);\n      Node body = transform(functionNode.getBody());\n\n      Node functionDecl = new Node(Token.FUNCTION);\n      if (functionName != null) {\n        functionDecl.addChildToBack(transform(functionName));\n      } else {\n        Node nameNode = new Node(Token.NAME, \"\");\n        nameNode.putProp(Node.ORIGINALNAME_PROP, \"\");\n        functionDecl.addChildToBack(nameNode);\n      }\n      for (AstNode param : parameters) {\n        functionDecl.addChildToBack(transform(param));\n      }\n      functionDecl.addChildToBack(body);\n\n      return functionDecl;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..7b32aa3c 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -385,181 +385,155 @@ public class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+      if (n == null) {\n+          return false;\n+      }\n \n       int nType = n.getType();\n-      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n-          n.getFirstChild().getType() == Token.STRING &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+      if (nType != Token.EXPR_RESULT && nType != Token.EXPR_VOID) {\n+          return false;\n+      }\n+\n+      Node firstChild = n.getFirstChild();\n+      if (firstChild == null || firstChild.getType() != Token.STRING) {\n+          return false;\n+      }\n+\n+      String directive = firstChild.getString();\n+      return ALLOWED_DIRECTIVES.contains(directive);\n     }\n \n     @Override\n     Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n+      return processGenericChildren(blockNode);\n     }\n \n     @Override\n     Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n+      String label = statementNode.getBreakLabel();\n+      Token type = Token.BREAK;\n+      if (label != null) {\n+        Node labelNode = transform(new Name(label));\n+        labelNode.setType(Token.LABEL_NAME);\n+        return new Node(type, labelNode);\n       }\n-      return node;\n+      return new Node(type);\n     }\n \n     @Override\n     Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n+      Node catchVar = transform(clauseNode.getVarName());\n+      Node catchBody = transform(clauseNode.getBody());\n+      Node catchNode = new Node(Token.CATCH, catchVar, catchBody);\n+      AstNode condition = clauseNode.getCatchCondition();\n+      if (condition != null) {\n         errorReporter.error(\n             \"Catch clauses are not supported\",\n             sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n+            condition.getLineno(), \"\", 0);\n       }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n+      return catchNode;\n     }\n \n     @Override\n     Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+      Node test = transform(exprNode.getTestExpression());\n+      Node ifTrue = transform(exprNode.getTrueExpression());\n+      Node ifFalse = transform(exprNode.getFalseExpression());\n+\n+      return new Node(Token.HOOK, test, ifTrue, ifFalse);\n     }\n \n     @Override\n     Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n+      String label = statementNode.getLabel();\n+      Token type = Token.CONTINUE;\n+      if (label != null) {\n+        Node labelNode = transform(new Name(label));\n+        labelNode.setType(Token.LABEL_NAME);\n+        return new Node(type, labelNode);\n       }\n-      return node;\n+      return new Node(type);\n     }\n \n     @Override\n     Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+      Node body = transform(loopNode.getBody());\n+      Node condition = transform(loopNode.getCondition());\n+\n+      return new Node(Token.DO, body, condition);\n     }\n \n     @Override\n     Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+      Node target = transform(getNode.getTarget());\n+      Node element = transform(getNode.getElement());\n+\n+      return new Node(Token.GETELEM, target, element);\n     }\n \n     @Override\n     Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+      return new Node(Token.EMPTY, new Node[0]);\n     }\n \n     @Override\n     Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+      Node expression = transform(statementNode.getExpression());\n+\n+      return new Node(Token.EXPR_RESULT, expression);\n     }\n \n     @Override\n     Node processForInLoop(ForInLoop loopNode) {\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+      Node variable = transform(loopNode.getIterator());\n+      Node object = transform(loopNode.getIteratedObject());\n+      Node body = transform(loopNode.getBody());\n+\n+      return new Node(Token.FOR, variable, object, body);\n     }\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {\n-      Node node = newNode(\n-          Token.FOR,\n-          transform(loopNode.getInitializer()),\n-          transform(loopNode.getCondition()),\n-          transform(loopNode.getIncrement()));\n-      node.addChildToBack(transformBlock(loopNode.getBody()));\n-      return node;\n+      Node initializer = transform(loopNode.getInitializer());\n+      Node condition = transform(loopNode.getCondition());\n+      Node increment = transform(loopNode.getIncrement());\n+      Node body = transform(loopNode.getBody());\n+\n+      return new Node(Token.FOR, initializer, condition, increment, body);\n     }\n \n     @Override\n     Node processFunctionCall(FunctionCall callNode) {\n-      Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n-      for (AstNode child : callNode.getArguments()) {\n-        node.addChildToBack(transform(child));\n+      Node callee = transform(callNode.getTarget());\n+      ArrayList<Node> arguments = new ArrayList<>(callNode.getArguments().size());\n+      for (AstNode arg : callNode.getArguments()) {\n+        arguments.add(transform(arg));\n       }\n-\n-      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n-      node.setLineno(callNode.getLineno());\n-      node.setCharno(position2charno(leftParamPos));\n-      return node;\n+      Node[] argsArray = arguments.toArray(new Node[0]);\n+      return new Node(Token.CALL, callee, argsArray);\n     }\n \n     @Override\n     Node processFunctionNode(FunctionNode functionNode) {\n-      Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n-      if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n-        isUnnamedFunction = true;\n-      }\n-      Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n-      if (isUnnamedFunction) {\n-        // Old Rhino tagged the empty name node with the line number of the\n-        // declaration.\n-        newName.setLineno(functionNode.getLineno());\n-        // TODO(bowdidge) Mark line number of paren correctly.\n-        // Same problem as below - the left paren might not be on the\n-        // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n-        newName.setCharno(position2charno(lpColumn));\n-      }\n+      Name functionName = functionNode.getFunctionName();\n+      AstNode[] parameters = functionNode.getParams().toArray(new AstNode[0]);\n+      Node body = transform(functionNode.getBody());\n \n-      node.addChildToBack(newName);\n-      Node lp = newNode(Token.LP);\n-      // The left paren's complicated because it's not represented by an\n-      // AstNode, so there's nothing that has the actual line number that it\n-      // appeared on.  We know the paren has to appear on the same line as the\n-      // function name (or else a semicolon will be inserted.)  If there's no\n-      // function name, assume the paren was on the same line as the function.\n-      // TODO(bowdidge): Mark line number of paren correctly.\n-      Name fnName = functionNode.getFunctionName();\n-      if (fnName != null) {\n-        lp.setLineno(fnName.getLineno());\n+      Node functionDecl = new Node(Token.FUNCTION);\n+      if (functionName != null) {\n+        functionDecl.addChildToBack(transform(functionName));\n       } else {\n-        lp.setLineno(functionNode.getLineno());\n+        Node nameNode = new Node(Token.NAME, \"\");\n+        nameNode.putProp(Node.ORIGINALNAME_PROP, \"\");\n+        functionDecl.addChildToBack(nameNode);\n       }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n-\n-      lp.setCharno(position2charno(lparenCharno));\n-      for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n+      for (AstNode param : parameters) {\n+        functionDecl.addChildToBack(transform(param));\n       }\n-      node.addChildToBack(lp);\n+      functionDecl.addChildToBack(body);\n \n-      Node bodyNode = transform(functionNode.getBody());\n-      parseDirectives(bodyNode);\n-      node.addChildToBack(bodyNode);\n-     return node;\n-    }\n+      return functionDecl;\n \n     @Override\n     Node processIfStatement(IfStatement statementNode) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}