{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException(\"Invalid argument: a=\" + a + \", x=\" + x);\n    }\n\n    final double EPSILON = 10e-15;\n    double term = Math.exp(-x + a * Math.log(x));\n    double sum = term;\n    double nextTerm = term * x / (a + 1);\n\n    for (int n = 2; Math.abs(nextTerm) > EPSILON; n++) {\n        sum += nextTerm;\n        nextTerm *= x / (a + n);\n    }\n\n    return sum / GammaFunctions.gamma(a);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..50a5951d5 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,23 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException(\"Invalid argument: a=\" + a + \", x=\" + x);\n+    }\n+\n+    final double EPSILON = 10e-15;\n+    double term = Math.exp(-x + a * Math.log(x));\n+    double sum = term;\n+    double nextTerm = term * x / (a + 1);\n+\n+    for (int n = 2; Math.abs(nextTerm) > EPSILON; n++) {\n+        sum += nextTerm;\n+        nextTerm *= x / (a + n);\n+    }\n+\n+    return sum / GammaFunctions.gamma(a);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}