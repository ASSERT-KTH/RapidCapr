{
    "patch": "public static double getTypedPercent(String js) {\n    int count = 0;\n    int total = 0;\n    String[] lines = js.split(\"\\n\");\n    for (String line : lines) {\n        if(line.trim().startsWith(\"//\")){\n            continue;\n        }\n        if (line.contains(\";\")) {\n            total++;\n            String[] tokens = line.split(\";\");\n            if (tokens.length > 1) {\n                count++;\n            }\n        }\n    }\n    if (total == 0) {\n        return 0;\n    }\n    return ((double) count / total) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..a4967dfe 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String js) {\n+    int count = 0;\n+    int total = 0;\n+    String[] lines = js.split(\"\\n\");\n+    for (String line : lines) {\n+        if(line.trim().startsWith(\"//\")){\n+            continue;\n+        }\n+        if (line.contains(\";\")) {\n+            total++;\n+            String[] tokens = line.split(\";\");\n+            if (tokens.length > 1) {\n+                count++;\n+            }\n+        }\n+    }\n+    if (total == 0) {\n+        return 0;\n+    }\n+    return ((double) count / total) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}