{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    if (DateTimeUtils.isContiguous(partial)) {\n        int year = 0, month = 0, day = 0;\n        boolean leap = false;\n        \n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            DateTimeFieldType fieldType = partial.getFieldType(i);\n            \n            switch (fieldType.getName()) {\n                case \"year\":\n                    year = values[i];\n                    break;\n                case \"monthOfYear\":\n                    month = values[i];\n                    break;\n                case \"dayOfMonth\":\n                    day = values[i];\n                    break;\n                case \"chronology\":\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Unsupported field: \" + fieldType.getName());\n            }\n        }\n\n        Chronology chrono = partial.getChronology();\n        leap = (month == 2 && chrono.isLeapYear(year));\n\n        // Subtract the number of months from the monthOfYear field, and handle leap years.\n        int newMonth = (((month - 1) + valueToAdd) % 12) + 1;\n        int yearsDifference = ((month - 1) + valueToAdd) / 12;\n        int newYear = year + yearsDifference;\n        if (newMonth < 1) {\n            newMonth += 12;\n            newYear--;\n        }\n        if (leap && day == 29 && newMonth != 2) {\n            day = 28;\n        }\n        int newDay = Math.min(day, chrono.dayOfMonth().getMaximumValue(newYear, newMonth));\n\n        values = chrono.year().set(values, fieldIndex, newYear);\n        values = chrono.monthOfYear().set(values, fieldIndex, newMonth);\n        values = chrono.dayOfMonth().set(values, fieldIndex, newDay);\n\n        return values;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..28ded5f1 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,62 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        int year = 0, month = 0, day = 0;\n+        boolean leap = false;\n+        \n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            DateTimeFieldType fieldType = partial.getFieldType(i);\n+            \n+            switch (fieldType.getName()) {\n+                case \"year\":\n+                    year = values[i];\n+                    break;\n+                case \"monthOfYear\":\n+                    month = values[i];\n+                    break;\n+                case \"dayOfMonth\":\n+                    day = values[i];\n+                    break;\n+                case \"chronology\":\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"Unsupported field: \" + fieldType.getName());\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+\n+        Chronology chrono = partial.getChronology();\n+        leap = (month == 2 && chrono.isLeapYear(year));\n+\n+        // Subtract the number of months from the monthOfYear field, and handle leap years.\n+        int newMonth = (((month - 1) + valueToAdd) % 12) + 1;\n+        int yearsDifference = ((month - 1) + valueToAdd) / 12;\n+        int newYear = year + yearsDifference;\n+        if (newMonth < 1) {\n+            newMonth += 12;\n+            newYear--;\n+        }\n+        if (leap && day == 29 && newMonth != 2) {\n+            day = 28;\n+        }\n+        int newDay = Math.min(day, chrono.dayOfMonth().getMaximumValue(newYear, newMonth));\n+\n+        values = chrono.year().set(values, fieldIndex, newYear);\n+        values = chrono.monthOfYear().set(values, fieldIndex, newMonth);\n+        values = chrono.dayOfMonth().set(values, fieldIndex, newDay);\n+\n+        return values;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: strings in switch are not supported in -source 1.5",
    "test_result": "ERROR"
}