{
    "patch": "public String fixCode(String code) {\n  int index = code.indexOf(\"in\");\n  while (index != -1) {\n    int openParenIndex = code.lastIndexOf(\"(\", index);\n    int closeParenIndex = code.indexOf(\")\", index);\n    if (openParenIndex != -1 && closeParenIndex != -1) {\n      String before = code.substring(0, openParenIndex + 1);\n      String after = code.substring(closeParenIndex);\n      String inExpr = code.substring(openParenIndex + 1, closeParenIndex);\n      code = before + \"(\" + inExpr + \".length>0&&\" + inExpr + \"[0]!=null?\" + inExpr + \"[0]:false)\" + after;\n    }\n    index = code.indexOf(\"in\", index + 2);\n  }\n  return code;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..1922fb8d 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,21 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+  int index = code.indexOf(\"in\");\n+  while (index != -1) {\n+    int openParenIndex = code.lastIndexOf(\"(\", index);\n+    int closeParenIndex = code.indexOf(\")\", index);\n+    if (openParenIndex != -1 && closeParenIndex != -1) {\n+      String before = code.substring(0, openParenIndex + 1);\n+      String after = code.substring(closeParenIndex);\n+      String inExpr = code.substring(openParenIndex + 1, closeParenIndex);\n+      code = before + \"(\" + inExpr + \".length>0&&\" + inExpr + \"[0]!=null?\" + inExpr + \"[0]:false)\" + after;\n+    }\n+    index = code.indexOf(\"in\", index + 2);\n+  }\n+  return code;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}