{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isLValue(parent)) {\n        if (NodeUtil.isObjectLitKey(parent, grandparent)) {\n          Node objectLit = grandparent.getParent();\n          if (NodeUtil.isObjectLitLValue(objectLit)) {\n            for (Node maybeFn : objectLit.children()) {\n              if (NodeUtil.isFunctionDeclaration(maybeFn) ||\n                  NodeUtil.isFunctionExpression(maybeFn)) {\n                if (maybeFn.getFirstChild() != parent) {\n                  continue;\n                }\n                for (Node nameNode : NodeUtil.getNameNodes(maybeFn)) {\n                  if (nameNode == parent) {\n                    return false;\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          return false;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..f9ae39df 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,29 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isLValue(parent)) {\n+        if (NodeUtil.isObjectLitKey(parent, grandparent)) {\n+          Node objectLit = grandparent.getParent();\n+          if (NodeUtil.isObjectLitLValue(objectLit)) {\n+            for (Node maybeFn : objectLit.children()) {\n+              if (NodeUtil.isFunctionDeclaration(maybeFn) ||\n+                  NodeUtil.isFunctionExpression(maybeFn)) {\n+                if (maybeFn.getFirstChild() != parent) {\n+                  continue;\n+                }\n+                for (Node nameNode : NodeUtil.getNameNodes(maybeFn)) {\n+                  if (nameNode == parent) {\n+                    return false;\n+                  }\n+                }\n+              }\n+            }\n+          }\n+        } else {\n+          return false;\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}