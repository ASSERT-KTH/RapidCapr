{
    "patch": "if (n.getType() != Token.FUNCTION) {\n  return false;\n}\nNode parent = n.getParent();\nwhile (parent != null) {\n  int parentType = parent.getType();\n  if (parentType == Token.EXPR_RESULT || parentType == Token.ASSIGN || parentType == Token.VAR ||\n      parentType == Token.RETURN ||\n      (parentType == Token.BLOCK && parent.getParent() != null && parent.getParent().getType() == Token.FUNCTION)) {\n    return true;\n  } else if (parentType == Token.CALL || parentType == Token.NEW) {\n    return false;\n  }\n  parent = parent.getParent();\n}\nreturn false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..cc8744eb 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,22 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+if (n.getType() != Token.FUNCTION) {\n+  return false;\n+}\n+Node parent = n.getParent();\n+while (parent != null) {\n+  int parentType = parent.getType();\n+  if (parentType == Token.EXPR_RESULT || parentType == Token.ASSIGN || parentType == Token.VAR ||\n+      parentType == Token.RETURN ||\n+      (parentType == Token.BLOCK && parent.getParent() != null && parent.getParent().getType() == Token.FUNCTION)) {\n+    return true;\n+  } else if (parentType == Token.CALL || parentType == Token.NEW) {\n+    return false;\n+  }\n+  parent = parent.getParent();\n+}\n+return false;\n   }\n \n   /**",
    "result_reason": "java.lang.IllegalStateException: Expected function but was call Reference node CALL 4 [free_call: 1] [source_file: testcode]",
    "test_result": "FAIL"
}