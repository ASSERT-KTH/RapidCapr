{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n\n    // Remove any function parameters that are not declared as variables\n>>> [ INFILL ] <<<\n    for (Node child = argList.getFirstChild(); child != null; child = child.getNext()) {\n      String argName = child.getString();\n      if (fnScope.isDeclared(argName, false)) {\n        continue;\n      }\n      boolean hasRestParam = NodeUtil.isRestArg(child);\n      if (!hasRestParam && NodeUtil.isDefaultValue(child)) {\n        child = child.getFirstChild();\n      }\n      NodeUtil.deleteNode(child, compiler);\n      if (modifyCallers) {\n        callSiteOptimizer.removeArguments(fnScope, argName);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..2ee77084 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -403,6 +403,23 @@ class RemoveUnusedVars\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n     }\n+\n+    // Remove any function parameters that are not declared as variables\n+>>> [ INFILL ] <<<\n+    for (Node child = argList.getFirstChild(); child != null; child = child.getNext()) {\n+      String argName = child.getString();\n+      if (fnScope.isDeclared(argName, false)) {\n+        continue;\n+      }\n+      boolean hasRestParam = NodeUtil.isRestArg(child);\n+      if (!hasRestParam && NodeUtil.isDefaultValue(child)) {\n+        child = child.getFirstChild();\n+      }\n+      NodeUtil.deleteNode(child, compiler);\n+      if (modifyCallers) {\n+        callSiteOptimizer.removeArguments(fnScope, argName);\n+      }\n+    }\n   }\n \n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}