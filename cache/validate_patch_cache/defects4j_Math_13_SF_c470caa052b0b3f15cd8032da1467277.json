{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n        final int rows = m.getRowDimension();\n        final int cols = m.getColumnDimension();\n        if (rows * cols <= 1000000) {\n            // use eigen decomposition for small matrices\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n        } else {\n            // use singular value decomposition for large matrices\n            final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n            final RealMatrix u = svd.getU();\n            final RealMatrix s = svd.getS().sqrt();\n            final RealMatrix v = svd.getV();\n            return u.multiply(s).multiply(v.transpose());\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..74431615e 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,19 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n+        final int rows = m.getRowDimension();\n+        final int cols = m.getColumnDimension();\n+        if (rows * cols <= 1000000) {\n+            // use eigen decomposition for small matrices\n             final EigenDecomposition dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n+        } else {\n+            // use singular value decomposition for large matrices\n+            final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n+            final RealMatrix u = svd.getU();\n+            final RealMatrix s = svd.getS().sqrt();\n+            final RealMatrix v = svd.getV();\n+            return u.multiply(s).multiply(v.transpose());\n+        }\n     }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}