{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction(), function);\n\n    // The parameters object literal setters can not be removed.\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      return;\n    }\n\n    boolean modifyCallers =\n        modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n      return;\n    }\n\n    final Node argList = getFunctionArgList(function);\n    final int countBefore = argList.getChildCount();\n\n    // Strip any unused parameters off the end of the parameter list.\n    boolean allUnused = true;\n    final Iterator<Node> it = argList.children().iterator();\n    while (it.hasNext()) {\n      final Node arg = it.next();\n      final String argName = arg.getString();\n      final Var var = fnScope.getVar(argName);\n      if (!referenced.contains(var)) {\n        arg.detach();\n        compiler.reportCodeChange();\n        continue;\n      }\n      if (!var.isReferenced()) {\n        allUnused = false;\n        break;\n      }\n    }\n\n    if (allUnused) {\n      // All of the parameters are unused.\n      // Clear the param list and return.\n      argList.removeChildren();\n      compiler.reportCodeChange();\n      return;\n    }\n\n    // If any parameters were removed, remove any parameter default nodes\n    // and adjust the FUNCTION length property.\n    final int countAfter = argList.getChildCount();\n    if (countBefore != countAfter) {\n      NodeUtil.markFunctionsDeleted(\n          compiler, function, function.getFirstChild(), function.getLastChild());\n      for (Node child = function.getFirstChild();\n          child != null && child.isParamList();\n          child = child.getNext()) {\n        for (Node grandChild = child.getFirstChild();\n            grandChild != null;\n            grandChild = grandChild.getNext()) {\n          grandChild.removeFirstChildIfMatches(Node::isFunction) ;\n        }\n      }\n\n      // Adjust length property to match the new number of parameters.\n      function.putBooleanProp(Node.FUNCTION_PARAMS_CHANGED, true);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..59971c8f 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,7 +366,7 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n     // Notice that removing unreferenced function args breaks\n     // Function.prototype.length. In advanced mode, we don't really care\n     // about this: we consider \"length\" the equivalent of reflecting on\n@@ -376,32 +376,69 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n     Node function = fnScope.getRootNode();\n \n-    Preconditions.checkState(function.isFunction());\n+    Preconditions.checkState(function.isFunction(), function);\n+\n+    // The parameters object literal setters can not be removed.\n     if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n       return;\n     }\n \n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+    boolean modifyCallers =\n+        modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+      return;\n+    }\n+\n+    final Node argList = getFunctionArgList(function);\n+    final int countBefore = argList.getChildCount();\n+\n+    // Strip any unused parameters off the end of the parameter list.\n+    boolean allUnused = true;\n+    final Iterator<Node> it = argList.children().iterator();\n+    while (it.hasNext()) {\n+      final Node arg = it.next();\n+      final String argName = arg.getString();\n+      final Var var = fnScope.getVar(argName);\n+      if (!referenced.contains(var)) {\n+        arg.detach();\n+        compiler.reportCodeChange();\n+        continue;\n+      }\n+      if (!var.isReferenced()) {\n+        allUnused = false;\n+        break;\n+      }\n+    }\n+\n+    if (allUnused) {\n+      // All of the parameters are unused.\n+      // Clear the param list and return.\n+      argList.removeChildren();\n+      compiler.reportCodeChange();\n+      return;\n+    }\n+\n+    // If any parameters were removed, remove any parameter default nodes\n+    // and adjust the FUNCTION length property.\n+    final int countAfter = argList.getChildCount();\n+    if (countBefore != countAfter) {\n+      NodeUtil.markFunctionsDeleted(\n+          compiler, function, function.getFirstChild(), function.getLastChild());\n+      for (Node child = function.getFirstChild();\n+          child != null && child.isParamList();\n+          child = child.getNext()) {\n+        for (Node grandChild = child.getFirstChild();\n+            grandChild != null;\n+            grandChild = grandChild.getNext()) {\n+          grandChild.removeFirstChildIfMatches(Node::isFunction) ;\n         }\n       }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n+\n+      // Adjust length property to match the new number of parameters.\n+      function.putBooleanProp(Node.FUNCTION_PARAMS_CHANGED, true);\n     }\n   }\n ",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}