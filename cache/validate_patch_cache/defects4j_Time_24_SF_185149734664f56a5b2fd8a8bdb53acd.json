{
    "patch": "public long computeMillis(boolean reset, String text) {\n\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n\n    long millis = iMillis;\n    int firstChangingField = Integer.MAX_VALUE;\n    for (int i = 0; i < count; i++) {\n        SavedField save = savedFields[i];\n        DurationField savedDurationField = save.iField.getDurationField();\n        if (i < count - 1) {\n            DurationField nextDurationField = savedFields[i + 1].iField.getDurationField();\n            if (savedDurationField != nextDurationField) {\n                long newMillis = save.set(millis, reset);\n                if (newMillis != millis) {\n                    firstChangingField = i;\n                    millis = newMillis;\n                    break;\n                }\n            }\n        } else {\n            long newMillis = save.set(millis, reset);\n            if (newMillis != millis) {\n                firstChangingField = i;\n                millis = newMillis;\n                break;\n            }\n        }\n    }\n\n    if (firstChangingField < count) {\n        DateTimeField firstChangedField = savedFields[firstChangingField].iField;\n        if (firstChangedField instanceof DateTimeField.FixedDateTimeField) {\n            DateTimeField lastField = savedFields[count - 1].iField;\n            boolean dateOnly = (lastField instanceof DateTimeField.DateDurationField);\n            long instant = millis;\n            if (dateOnly) {\n                instant = iChrono.dayOfMonth().roundFloor(instant);\n            }\n            Chronology chrono = iChrono.withUTC();\n            if (iZone != null) {\n                chrono = chrono.withZone(iZone);\n            }\n            long firstMillis = ((DateTimeField.FixedDateTimeField) firstChangedField).setInstant(instant, chrono);\n            long lastMillis = ((DateTimeField.DurationDateTimeField) lastField).add(lastField.getDurationField().getDuration(1), firstMillis,-1);\n            if (dateOnly) {\n                int year = iDefaultYear;\n                int month = ((DateTimeField.MonthDateTimeField) savedFields[count - 3].iField).get(instant);\n                long dayMillis = iChrono.dayOfMonth().set(lastMillis, firstMillis);\n                LocalDate date = new LocalDate(year, month, iChrono.dayOfMonth().get(dayMillis), chrono);\n                return date.toDateTimeAtStartOfDay().getMillis();\n            }\n            return lastMillis;\n        }\n        if (firstChangingField > 0) {\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField firstChangedDurationField = firstChangedField.getDurationField();\n            if (compareReverse(firstChangedDurationField, months) >= 0 && compareReverse(firstChangedDurationField, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(reset, text);\n            }\n        }\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..1eeb7ff8 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,91 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n+public long computeMillis(boolean reset, String text) {\n+\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+\n+    long millis = iMillis;\n+    int firstChangingField = Integer.MAX_VALUE;\n+    for (int i = 0; i < count; i++) {\n+        SavedField save = savedFields[i];\n+        DurationField savedDurationField = save.iField.getDurationField();\n+        if (i < count - 1) {\n+            DurationField nextDurationField = savedFields[i + 1].iField.getDurationField();\n+            if (savedDurationField != nextDurationField) {\n+                long newMillis = save.set(millis, reset);\n+                if (newMillis != millis) {\n+                    firstChangingField = i;\n+                    millis = newMillis;\n+                    break;\n+                }\n+            }\n+        } else {\n+            long newMillis = save.set(millis, reset);\n+            if (newMillis != millis) {\n+                firstChangingField = i;\n+                millis = newMillis;\n+                break;\n+            }\n         }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n+    }\n+\n+    if (firstChangingField < count) {\n+        DateTimeField firstChangedField = savedFields[firstChangingField].iField;\n+        if (firstChangedField instanceof DateTimeField.FixedDateTimeField) {\n+            DateTimeField lastField = savedFields[count - 1].iField;\n+            boolean dateOnly = (lastField instanceof DateTimeField.DateDurationField);\n+            long instant = millis;\n+            if (dateOnly) {\n+                instant = iChrono.dayOfMonth().roundFloor(instant);\n+            }\n+            Chronology chrono = iChrono.withUTC();\n+            if (iZone != null) {\n+                chrono = chrono.withZone(iZone);\n+            }\n+            long firstMillis = ((DateTimeField.FixedDateTimeField) firstChangedField).setInstant(instant, chrono);\n+            long lastMillis = ((DateTimeField.DurationDateTimeField) lastField).add(lastField.getDurationField().getDuration(1), firstMillis,-1);\n+            if (dateOnly) {\n+                int year = iDefaultYear;\n+                int month = ((DateTimeField.MonthDateTimeField) savedFields[count - 3].iField).get(instant);\n+                long dayMillis = iChrono.dayOfMonth().set(lastMillis, firstMillis);\n+                LocalDate date = new LocalDate(year, month, iChrono.dayOfMonth().get(dayMillis), chrono);\n+                return date.toDateTimeAtStartOfDay().getMillis();\n+            }\n+            return lastMillis;\n+        }\n+        if (firstChangingField > 0) {\n             DurationField months = DurationFieldType.months().getField(iChrono);\n             DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+            DurationField firstChangedDurationField = firstChangedField.getDurationField();\n+            if (compareReverse(firstChangedDurationField, months) >= 0 && compareReverse(firstChangedDurationField, days) <= 0) {\n                 saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+                return computeMillis(reset, text);\n             }\n         }\n+    }\n \n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n             if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n-            }\n-            throw e;\n-        }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        return millis;\n     }\n+\n+    return millis;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}