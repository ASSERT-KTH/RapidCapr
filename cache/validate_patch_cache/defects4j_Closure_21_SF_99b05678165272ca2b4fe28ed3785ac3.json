{
    "patch": "public class CheckSideEffects implements Callback {\n  private final AbstractCompiler compiler;\n  private final CheckLevel level;\n\n  // Nodes of expressions that are known to have no side effects. We memoize the\n  // information for each node once we learn it.\n  private final Set<Node> sideEffectNodes = new HashSet<>();\n\n  // Nodes for which a warning has been reported, and therefore should not be\n  // reported again.\n  private final Set<Node> problemNodes = new HashSet<>();\n\n  private static final DiagnosticType USELESS_CODE_ERROR =\n      DiagnosticType.warning(\n          \"JSC_USELESS_CODE\",\n          \"Suspicious code. This code lacks side-effects. Is there a bug?\");\n\n  /**\n   * Constructs a new warnings check that verifies that a given level of error is\n   * being used.\n   */\n  public CheckSideEffects(AbstractCompiler compiler, CheckLevel level) {\n    this.compiler = compiler;\n    this.level = level;\n  }\n\n  /** Determines whether all of the expressions in a node have no side-effects. */\n  private boolean isExpressionTreePure(Node n) {\n    switch (n.getType()) {\n      case Token.EMPTY:\n      case Token.SCRIPT:\n      case Token.BLOCK:\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (!isExpressionTreePure(c)) {\n            return false;\n          }\n        }\n        return true;\n      default:\n        // If we haven't memoized the information for this node, compute it as\n        // necessary, store the result, then return it.\n        return sideEffectNodes.computeIfAbsent(\n            n, k -> !NodeUtil.mayHaveSideEffects(k, compiler));\n    }\n  }\n\n  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() || n.getToken() == Token.COMMA) {\n      return;\n    }\n\n    if (n.isFunction()) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (n.isExprResult() || n.isBlock()) {\n      return;\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (n.isComma()) {\n      if (isResultUsed) {\n        return;\n      }\n      if (n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA) continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n          else break;\n        }\n      }\n    } else if (parent != null && parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n      if (!(parent.getType() == Token.FOR\n          && parent.getChildCount() == 4\n          && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n        return;\n      }\n    }\n    if (isSimpleOp || isExpressionTreePure(n)) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg =\n            \"The result of the '\"\n                + Token.name(n.getType()).toLowerCase()\n                + \"' operator is not being used.\";\n      }\n\n      t.report(n, level, USELESS_CODE_ERROR);\n      // TODO(johnlenz): determine if it is necessary to\n      // try to protect side-effect free statements as well.\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..f3672017 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -80,25 +80,71 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n     NodeTraversal.traverse(compiler, scriptRoot, this);\n   }\n \n+  @Override\n+public class CheckSideEffects implements Callback {\n+  private final AbstractCompiler compiler;\n+  private final CheckLevel level;\n+\n+  // Nodes of expressions that are known to have no side effects. We memoize the\n+  // information for each node once we learn it.\n+  private final Set<Node> sideEffectNodes = new HashSet<>();\n+\n+  // Nodes for which a warning has been reported, and therefore should not be\n+  // reported again.\n+  private final Set<Node> problemNodes = new HashSet<>();\n+\n+  private static final DiagnosticType USELESS_CODE_ERROR =\n+      DiagnosticType.warning(\n+          \"JSC_USELESS_CODE\",\n+          \"Suspicious code. This code lacks side-effects. Is there a bug?\");\n+\n+  /**\n+   * Constructs a new warnings check that verifies that a given level of error is\n+   * being used.\n+   */\n+  public CheckSideEffects(AbstractCompiler compiler, CheckLevel level) {\n+    this.compiler = compiler;\n+    this.level = level;\n+  }\n+\n+  /** Determines whether all of the expressions in a node have no side-effects. */\n+  private boolean isExpressionTreePure(Node n) {\n+    switch (n.getType()) {\n+      case Token.EMPTY:\n+      case Token.SCRIPT:\n+      case Token.BLOCK:\n+        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+          if (!isExpressionTreePure(c)) {\n+            return false;\n+          }\n+        }\n+        return true;\n+      default:\n+        // If we haven't memoized the information for this node, compute it as\n+        // necessary, store the result, then return it.\n+        return sideEffectNodes.computeIfAbsent(\n+            n, k -> !NodeUtil.mayHaveSideEffects(k, compiler));\n+    }\n+  }\n+\n   @Override\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     // VOID nodes appear when there are extra semicolons at the BLOCK level.\n     // I've been unable to think of any cases where this indicates a bug,\n     // and apparently some people like keeping these semicolons around,\n     // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n+    if (n.isEmpty() || n.getToken() == Token.COMMA) {\n       return;\n     }\n \n-    if (parent == null) {\n+    if (n.isFunction()) {\n       return;\n     }\n \n     // Do not try to remove a block or an expr result. We already handle\n     // these cases when we visit the child, and the peephole passes will\n     // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult()) {\n+    if (n.isExprResult() || n.isBlock()) {\n       return;\n     }\n \n@@ -110,7 +156,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (parent.getType() == Token.COMMA) {\n+    if (n.isComma()) {\n       if (isResultUsed) {\n         return;\n       }\n@@ -122,23 +168,25 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n           else break;\n         }\n       }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+    } else if (parent != null && parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n+      if (!(parent.getType() == Token.FOR\n+          && parent.getChildCount() == 4\n+          && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n         return;\n       }\n     }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n+    if (isSimpleOp || isExpressionTreePure(n)) {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n         msg = \"Is there a missing '+' on the previous line?\";\n       } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n+        msg =\n+            \"The result of the '\"\n+                + Token.name(n.getType()).toLowerCase()\n+                + \"' operator is not being used.\";\n       }\n \n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n+      t.report(n, level, USELESS_CODE_ERROR);\n       // TODO(johnlenz): determine if it is necessary to\n       // try to protect side-effect free statements as well.\n       if (!NodeUtil.isStatement(n)) {\n@@ -146,6 +194,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n       }\n     }\n   }\n+}\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}