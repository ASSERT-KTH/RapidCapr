{
    "patch": "      if (NodeUtil.isExpressionResultUsed(parent)) {\n        Node lp = NodeUtil.getEnclosingNode(parent, Token.EXPR_RESULT);\n        if (lp != null) {\n          Node preceeding = lp.getPrevious();\n          if (preceeding != null && preceeding.getType() == Token.VAR) {\n            return false;\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..113cf1df 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,14 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isExpressionResultUsed(parent)) {\n+        Node lp = NodeUtil.getEnclosingNode(parent, Token.EXPR_RESULT);\n+        if (lp != null) {\n+          Node preceeding = lp.getPrevious();\n+          if (preceeding != null && preceeding.getType() == Token.VAR) {\n+            return false;\n+          }\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}