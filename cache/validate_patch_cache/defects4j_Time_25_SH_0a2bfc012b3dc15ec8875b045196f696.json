{
    "patch": "                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    // we are near a DST boundary\n                    if (offsetLocal < offsetAdjusted) {\n                        // gaining hour(s)\n                        return offsetLocal;\n                    } else if (offsetLocal > offsetAdjusted) {\n                        // losing hour(s)\n                        // ensure that time is always after the DST gap\n                        // this happens naturally for positive offsets, but not for negative\n                        long prevLocal = previousTransition(instantAdjusted);\n                        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                        if (prevLocal == prevAdjusted) {\n                            return offsetLocal;\n                        }\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..bc544bbe 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,24 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    // we are near a DST boundary\n+                    if (offsetLocal < offsetAdjusted) {\n+                        // gaining hour(s)\n+                        return offsetLocal;\n+                    } else if (offsetLocal > offsetAdjusted) {\n+                        // losing hour(s)\n+                        // ensure that time is always after the DST gap\n+                        // this happens naturally for positive offsets, but not for negative\n+                        long prevLocal = previousTransition(instantAdjusted);\n+                        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                        if (prevLocal == prevAdjusted) {\n+                            return offsetLocal;\n+                        }\n+                    }\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<2007-0[4-01T01:00:00.000+03]:00> but was:<2007-0[3-31T23:00:00.000+02]:00>",
    "test_result": "FAIL"
}