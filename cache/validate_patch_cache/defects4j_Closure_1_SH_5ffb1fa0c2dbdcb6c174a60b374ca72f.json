{
    "patch": "        boolean isReferenced = referenced.contains(var);\n        if (!isReferenced) {\n          // conditionally remove parameter node if it is marked removable by FunctionArgumentInjector\n          if (FunctionArgumentInjector.isRemovable(lastArg)) {\n            argList.removeChild(lastArg);\n            compiler.reportCodeChange();\n          } else {\n            // the parameter is required\n            break;\n          }\n        } else {\n          referenced.remove(var);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d0e6cb09 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,18 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+        boolean isReferenced = referenced.contains(var);\n+        if (!isReferenced) {\n+          // conditionally remove parameter node if it is marked removable by FunctionArgumentInjector\n+          if (FunctionArgumentInjector.isRemovable(lastArg)) {\n+            argList.removeChild(lastArg);\n+            compiler.reportCodeChange();\n+          } else {\n+            // the parameter is required\n+            break;\n+          }\n+        } else {\n+          referenced.remove(var);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}