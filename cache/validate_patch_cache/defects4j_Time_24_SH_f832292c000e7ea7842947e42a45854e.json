{
    "patch": "Arrays.sort(savedFields, 0, count);\n\nif (count > 0) {\n    // alter base year for parsing if first field is month or day\n    DurationFieldType months = DurationFieldType.months().getField(iChrono);\n    DurationFieldType days = DurationFieldType.days().getField(iChrono);\n    DurationField first = savedFields[0].iField.getDurationField();\n    if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n        saveField(DateTimeFieldType.year(), iDefaultYear);\n        long millis = computeMillis(resetFields, text);\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n        return millis;\n    }\n\n    for (int i = 0; i < count; i++) {\n        millis = savedFields[i].set(millis, resetFields);\n    }\n}\n\nif (iZone == null) {\n    millis -= iOffset;\n} else {\n    int offset = iZone.getOffsetFromLocal(millis);\n    millis -= offset;\n    if (offset != iZone.getOffset(millis)) {\n        String message =\n            \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n        if (text != null) {\n            message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n        }\n        throw new IllegalArgumentException(message);\n    }\n}\n\nreturn millis;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..2b0176a0 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,43 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+Arrays.sort(savedFields, 0, count);\n+\n+if (count > 0) {\n+    // alter base year for parsing if first field is month or day\n+    DurationFieldType months = DurationFieldType.months().getField(iChrono);\n+    DurationFieldType days = DurationFieldType.days().getField(iChrono);\n+    DurationField first = savedFields[0].iField.getDurationField();\n+    if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+        saveField(DateTimeFieldType.year(), iDefaultYear);\n+        long millis = computeMillis(resetFields, text);\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n+        }\n+        return millis;\n+    }\n+\n+    for (int i = 0; i < count; i++) {\n+        millis = savedFields[i].set(millis, resetFields);\n+    }\n+}\n+\n+if (iZone == null) {\n+    millis -= iOffset;\n+} else {\n+    int offset = iZone.getOffsetFromLocal(millis);\n+    millis -= offset;\n+    if (offset != iZone.getOffset(millis)) {\n+        String message =\n+            \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+        if (text != null) {\n+            message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+        }\n+        throw new IllegalArgumentException(message);\n+    }\n+}\n+\n+return millis;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}