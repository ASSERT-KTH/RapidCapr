{
    "patch": "public void testGetprop4() throws Exception {\n    System.setProperty(\"myProp\", \"myValue\");\n\n    try {\n        PropertiesConfiguration config = new PropertiesConfiguration();\n        String property = config.getString(\"myProp\");\n        assertEquals(\"myValue\", property);\n    } catch (ConfigurationException e) {\n        fail(e.getMessage());\n    }\n\n    String[] warnings = LogManager.getLogger(PropertiesConfiguration.class).getLogList().stream()\n            .filter(event -> event.getLevel() == Level.WARN)\n            .map(LogEvent::getMessage)\n            .toArray(String[]::new);\n\n    assertTrue(\"expected a warning\", warnings.length > 0);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..a8763ca5 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public void testGetprop4() throws Exception {\n+    System.setProperty(\"myProp\", \"myValue\");\n+\n+    try {\n+        PropertiesConfiguration config = new PropertiesConfiguration();\n+        String property = config.getString(\"myProp\");\n+        assertEquals(\"myValue\", property);\n+    } catch (ConfigurationException e) {\n+        fail(e.getMessage());\n+    }\n+\n+    String[] warnings = LogManager.getLogger(PropertiesConfiguration.class).getLogList().stream()\n+            .filter(event -> event.getLevel() == Level.WARN)\n+            .map(LogEvent::getMessage)\n+            .toArray(String[]::new);\n+\n+    assertTrue(\"expected a warning\", warnings.length > 0);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}