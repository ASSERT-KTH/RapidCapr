{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    regex.setLength(0); // reset the StringBuilder\n    boolean insideQuotes = false;\n    boolean wasWhite = false;\n    for (int i = 0; i < value.length(); ++i) {\n        char c = value.charAt(i);\n        if (c == '\\'' && !insideQuotes && unquote) {\n            // start of a quote\n            insideQuotes = true;\n            continue;\n        }\n        if (insideQuotes) {\n            // c is inside quotes\n            if (c == '\\'' && i + 1 < value.length() && value.charAt(i + 1) == '\\'' && unquote) {\n                // escaped quote, append both\n                regex.append(c).append(c);\n                i++;\n            } else if (c == '\\'' && unquote) {\n                // end of quoted string\n                insideQuotes = false;\n            } else {\n                regex.append(c);\n            }\n        } else {\n            // c is not inside quotes\n            if (Character.isWhitespace(c)) {\n                if (!wasWhite) {\n                    wasWhite = true;\n                    regex.append(\"\\\\s*\");\n                }\n            } else {\n                wasWhite = false;\n                switch (c) {\n                    case '?':\n                    case '[':\n                    case ']':\n                    case '(':\n                    case ')':\n                    case '{':\n                    case '}':\n                    case '|':\n                    case '*':\n                    case '+':\n                    case '^':\n                    case '$':\n                    case '.':\n                    case '\\\\': // Escape backslashes as well\n                        regex.append('\\\\');\n                        break;\n                    default:\n                        break;\n                }\n                regex.append(c);\n            }\n        }\n    }\n\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..a052cbe3 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,48 +300,66 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    regex.setLength(0); // reset the StringBuilder\n+    boolean insideQuotes = false;\n+    boolean wasWhite = false;\n+    for (int i = 0; i < value.length(); ++i) {\n+        char c = value.charAt(i);\n+        if (c == '\\'' && !insideQuotes && unquote) {\n+            // start of a quote\n+            insideQuotes = true;\n+            continue;\n+        }\n+        if (insideQuotes) {\n+            // c is inside quotes\n+            if (c == '\\'' && i + 1 < value.length() && value.charAt(i + 1) == '\\'' && unquote) {\n+                // escaped quote, append both\n+                regex.append(c).append(c);\n+                i++;\n+            } else if (c == '\\'' && unquote) {\n+                // end of quoted string\n+                insideQuotes = false;\n+            } else {\n+                regex.append(c);\n             }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n+        } else {\n+            // c is not inside quotes\n+            if (Character.isWhitespace(c)) {\n+                if (!wasWhite) {\n+                    wasWhite = true;\n+                    regex.append(\"\\\\s*\");\n                 }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n+            } else {\n+                wasWhite = false;\n+                switch (c) {\n+                    case '?':\n+                    case '[':\n+                    case ']':\n+                    case '(':\n+                    case ')':\n+                    case '{':\n+                    case '}':\n+                    case '|':\n+                    case '*':\n+                    case '+':\n+                    case '^':\n+                    case '$':\n+                    case '.':\n+                    case '\\\\': // Escape backslashes as well\n+                        regex.append('\\\\');\n+                        break;\n+                    default:\n+                        break;\n+                }\n+                regex.append(c);\n             }\n-            regex.append(c);\n         }\n-        return regex;\n     }\n \n+    return regex;\n+}\n+\n     /**\n      * A class to store Key / Value pairs\n      */",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}