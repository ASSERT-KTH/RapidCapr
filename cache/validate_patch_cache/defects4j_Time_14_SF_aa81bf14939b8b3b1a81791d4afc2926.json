{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    } else {\n        Chronology chrono = partial.getChronology();\n        int year = Integer.MIN_VALUE;\n        int monthOfYear = Integer.MIN_VALUE;\n        int dayOfMonth = Integer.MIN_VALUE;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            DateTimeFieldType fieldType = partial.getFieldType(i);\n            int value = values[i];\n            if (fieldType == DateTimeFieldType.year()) {\n                year = value;\n            } else if (fieldType == DateTimeFieldType.monthOfYear()) {\n                monthOfYear = value;\n            } else if (fieldType == DateTimeFieldType.dayOfMonth()) {\n                dayOfMonth = value;\n            }\n        }\n        if (year == Integer.MIN_VALUE || monthOfYear == Integer.MIN_VALUE || dayOfMonth == Integer.MIN_VALUE) {\n            throw new IllegalArgumentException(\"At least year, month, and day must be specified in partial.\");\n        }\n\n        // If the partial includes a leap day and the added months would result in an\n        // illegal date (e.g. 2004-02-29 + 1 year, -1 month -> 2005-02-28), we need to\n        // adjust the day of month to the last valid day of the month before adding months\n        if (dayOfMonth > 28 && monthOfYear == 2 && !chrono.isLeapYear(year)) {\n            dayOfMonth = 28;\n        }\n\n        int newMonthOfYear = monthOfYear + valueToAdd;\n        int newYear = year + (newMonthOfYear / 12);\n        int newMonth = newMonthOfYear % 12;\n        if (newMonth < 1) {\n            newMonth += 12;\n            newYear -= 1;\n        }\n\n        int maxDayOfMonth = chrono.dayOfMonth().getMaximumValue(newYear, newMonth);\n        if (dayOfMonth > maxDayOfMonth) {\n            dayOfMonth = maxDayOfMonth;\n        }\n\n        YearMonth newYearMonth = new YearMonth(newYear, newMonth);\n        LocalDate newDate = newYearMonth.dayOfMonth().setCopy(dayOfMonth);\n        int[] newValues = newDate.getValues();\n\n        int[] finalValues = new int[partial.size()];\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            DateTimeFieldType fieldType = partial.getFieldType(i);\n            int value = values[i];\n            if (fieldType == DateTimeFieldType.year()) {\n                finalValues[i] = newValues[0];\n            } else if (fieldType == DateTimeFieldType.monthOfYear()) {\n                finalValues[i] = newValues[1];\n            } else if (fieldType == DateTimeFieldType.dayOfMonth()) {\n                finalValues[i] = newValues[2];\n            } else {\n                finalValues[i] = value;\n            }\n        }\n\n        return finalValues;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..80efef9f 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,77 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n+    } else {\n+        Chronology chrono = partial.getChronology();\n+        int year = Integer.MIN_VALUE;\n+        int monthOfYear = Integer.MIN_VALUE;\n+        int dayOfMonth = Integer.MIN_VALUE;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            DateTimeFieldType fieldType = partial.getFieldType(i);\n+            int value = values[i];\n+            if (fieldType == DateTimeFieldType.year()) {\n+                year = value;\n+            } else if (fieldType == DateTimeFieldType.monthOfYear()) {\n+                monthOfYear = value;\n+            } else if (fieldType == DateTimeFieldType.dayOfMonth()) {\n+                dayOfMonth = value;\n+            }\n+        }\n+        if (year == Integer.MIN_VALUE || monthOfYear == Integer.MIN_VALUE || dayOfMonth == Integer.MIN_VALUE) {\n+            throw new IllegalArgumentException(\"At least year, month, and day must be specified in partial.\");\n+        }\n+\n+        // If the partial includes a leap day and the added months would result in an\n+        // illegal date (e.g. 2004-02-29 + 1 year, -1 month -> 2005-02-28), we need to\n+        // adjust the day of month to the last valid day of the month before adding months\n+        if (dayOfMonth > 28 && monthOfYear == 2 && !chrono.isLeapYear(year)) {\n+            dayOfMonth = 28;\n+        }\n+\n+        int newMonthOfYear = monthOfYear + valueToAdd;\n+        int newYear = year + (newMonthOfYear / 12);\n+        int newMonth = newMonthOfYear % 12;\n+        if (newMonth < 1) {\n+            newMonth += 12;\n+            newYear -= 1;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+\n+        int maxDayOfMonth = chrono.dayOfMonth().getMaximumValue(newYear, newMonth);\n+        if (dayOfMonth > maxDayOfMonth) {\n+            dayOfMonth = maxDayOfMonth;\n+        }\n+\n+        YearMonth newYearMonth = new YearMonth(newYear, newMonth);\n+        LocalDate newDate = newYearMonth.dayOfMonth().setCopy(dayOfMonth);\n+        int[] newValues = newDate.getValues();\n+\n+        int[] finalValues = new int[partial.size()];\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            DateTimeFieldType fieldType = partial.getFieldType(i);\n+            int value = values[i];\n+            if (fieldType == DateTimeFieldType.year()) {\n+                finalValues[i] = newValues[0];\n+            } else if (fieldType == DateTimeFieldType.monthOfYear()) {\n+                finalValues[i] = newValues[1];\n+            } else if (fieldType == DateTimeFieldType.dayOfMonth()) {\n+                finalValues[i] = newValues[2];\n+            } else {\n+                finalValues[i] = value;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+\n+        return finalValues;\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}