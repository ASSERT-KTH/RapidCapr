{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters cannot be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      Set<String> unusedArgs = new HashSet<>();\n      // Find all unused args\n      for (Var var : referenced) {\n        if (var.getParentNode().isParamList()) {\n          unusedArgs.add(var.getName());\n        }\n      }\n      // Remove unused args\n      Node arg = argList.getFirstChild();\n      while (arg != null && unusedArgs.contains(arg.getString())) {\n        arg = arg.getNext();\n        argList.removeChild(arg.getPrevious());\n        compiler.reportChangeToEnclosingScope(argList);\n      }\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null && unusedArgs.contains(lastArg.getString())) {\n        lastArg = lastArg.getPrevious();\n        argList.removeChild(lastArg.getNext());\n        compiler.reportChangeToEnclosingScope(argList);\n      }\n      if (lastArg != null) {\n        arg = lastArg.getPrevious();\n        while (arg != null) {\n          if (unusedArgs.contains(arg.getString())) {\n            arg = arg.getPrevious();\n            argList.removeChild(arg.getNext());\n            compiler.reportChangeToEnclosingScope(argList);\n          } else {\n            break;\n          }\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..455c5409 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,52 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters cannot be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      Set<String> unusedArgs = new HashSet<>();\n+      // Find all unused args\n+      for (Var var : referenced) {\n+        if (var.getParentNode().isParamList()) {\n+          unusedArgs.add(var.getName());\n+        }\n+      }\n+      // Remove unused args\n+      Node arg = argList.getFirstChild();\n+      while (arg != null && unusedArgs.contains(arg.getString())) {\n+        arg = arg.getNext();\n+        argList.removeChild(arg.getPrevious());\n+        compiler.reportChangeToEnclosingScope(argList);\n+      }\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null && unusedArgs.contains(lastArg.getString())) {\n+        lastArg = lastArg.getPrevious();\n+        argList.removeChild(lastArg.getNext());\n+        compiler.reportChangeToEnclosingScope(argList);\n+      }\n+      if (lastArg != null) {\n+        arg = lastArg.getPrevious();\n+        while (arg != null) {\n+          if (unusedArgs.contains(arg.getString())) {\n+            arg = arg.getPrevious();\n+            argList.removeChild(arg.getNext());\n+            compiler.reportChangeToEnclosingScope(argList);\n+          } else {\n+            break;\n+          }\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}