{
    "patch": "attachLiteralTypes(n);\nif (parent == null) {\n  return;\n}\nswitch (parent.getType()) {\n  case Token.SCRIPT:\n  case Token.BLOCK:\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        if (NodeUtil.isFunctionExpression(n) && parent.getType() != Token.EXPR_RESULT) {\n          defineDeclaredFunction(n, parent);\n        } else if (NodeUtil.isStatement(n.getParent())) {\n          defineDeclaredFunction(n, parent);\n        }\n        break;\n      case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n      case Token.VAR:\n        defineVar(n, parent);\n        break;\n      default:\n        break;\n    }\n    break;\n  case Token.NAME:\n    if (n.getType() == Token.FUNCTION) {\n      return;\n    }\n    // fall through\n  case Token.ASSIGN:\n    if (n.getType() == Token.FUNCTION) {\n      defineDeclaredFunction(n, parent);\n    }\n    break;\n  case Token.TRY:\n    if (n.getType() == Token.CATCH) {\n      defineCatch(n, parent);\n    }\n    break;\n  case Token.LP:\n    if (NodeUtil.isFunctionExpression(parent)) {\n      defineDeclaredFunction(parent, parent.getParent());\n    } else if (parent == scope.getRootNode()) {\n      handleFunctionInputs(n);\n    }\n    break;\n  case Token.OBJECTLIT:\n    if (n.getType() == Token.GETPROP) {\n      Var v = scope.getVar(n.getString());\n      if (v == null) {\n        v = defineName(n);\n        v.getType().useDirectly();\n      }\n      n.putBooleanProp(Node.MEMBER_DEF, true);\n    }\n    break;    \n  default:\n    break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..acb9bd18 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,66 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n+attachLiteralTypes(n);\n+if (parent == null) {\n+  return;\n+}\n+switch (parent.getType()) {\n+  case Token.SCRIPT:\n+  case Token.BLOCK:\n+    switch (n.getType()) {\n+      case Token.FUNCTION:\n+        if (NodeUtil.isFunctionExpression(n) && parent.getType() != Token.EXPR_RESULT) {\n           defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+        } else if (NodeUtil.isStatement(n.getParent())) {\n+          defineDeclaredFunction(n, parent);\n+        }\n+        break;\n+      case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+      case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+      default:\n+        break;\n+    }\n+    break;\n+  case Token.NAME:\n+    if (n.getType() == Token.FUNCTION) {\n+      return;\n+    }\n+    // fall through\n+  case Token.ASSIGN:\n+    if (n.getType() == Token.FUNCTION) {\n+      defineDeclaredFunction(n, parent);\n+    }\n+    break;\n+  case Token.TRY:\n+    if (n.getType() == Token.CATCH) {\n+      defineCatch(n, parent);\n+    }\n+    break;\n+  case Token.LP:\n+    if (NodeUtil.isFunctionExpression(parent)) {\n+      defineDeclaredFunction(parent, parent.getParent());\n+    } else if (parent == scope.getRootNode()) {\n+      handleFunctionInputs(n);\n+    }\n+    break;\n+  case Token.OBJECTLIT:\n+    if (n.getType() == Token.GETPROP) {\n+      Var v = scope.getVar(n.getString());\n+      if (v == null) {\n+        v = defineName(n);\n+        v.getType().useDirectly();\n       }\n+      n.putBooleanProp(Node.MEMBER_DEF, true);\n+    }\n+    break;    \n+  default:\n+    break;\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}