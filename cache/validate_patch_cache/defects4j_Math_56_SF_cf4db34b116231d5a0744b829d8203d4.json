{
    "patch": "public int[] getCounts(int index) {\n    if (index < 0 || index >= totalSize) {\n        throw new OutOfRangeException(index, 0, totalSize);\n    }\n\n    int[] indices = new int[dimension];\n\n    // Calculate each dimension of the index\n    for (int i = 0; i < last; i++) {\n        int count = 0;\n        int offset = uniCounterOffset[i];\n\n        while (index >= offset) {\n            index -= offset;\n            count++;\n        }\n\n        indices[i] = count;\n    }\n\n    // Set the final dimension\n    indices[last] = index;\n\n    return indices;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..30725a379 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -213,38 +213,32 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n      * @throws OutOfRangeException if {@code index} is not between\n      * {@code 0} and the value returned by {@link #getSize()} (excluded).\n      */\n-    public int[] getCounts(int index) {\n-        if (index < 0 ||\n-            index >= totalSize) {\n-            throw new OutOfRangeException(index, 0, totalSize);\n-        }\n+public int[] getCounts(int index) {\n+    if (index < 0 || index >= totalSize) {\n+        throw new OutOfRangeException(index, 0, totalSize);\n+    }\n \n-        final int[] indices = new int[dimension];\n+    int[] indices = new int[dimension];\n \n+    // Calculate each dimension of the index\n+    for (int i = 0; i < last; i++) {\n         int count = 0;\n-        for (int i = 0; i < last; i++) {\n-            int idx = 0;\n-            final int offset = uniCounterOffset[i];\n-            while (count <= index) {\n-                count += offset;\n-                ++idx;\n-            }\n-            --idx;\n-            count -= offset;\n-            indices[i] = idx;\n-        }\n+        int offset = uniCounterOffset[i];\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n+        while (index >= offset) {\n+            index -= offset;\n+            count++;\n         }\n-        --idx;\n-        indices[last] = idx;\n \n-        return indices;\n+        indices[i] = count;\n     }\n \n+    // Set the final dimension\n+    indices[last] = index;\n+\n+    return indices;\n+}\n+\n     /**\n      * Convert to unidimensional counter.\n      *",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}