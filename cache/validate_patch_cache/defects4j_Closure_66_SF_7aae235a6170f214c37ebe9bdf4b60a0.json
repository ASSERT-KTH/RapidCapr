{
    "patch": "import org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\npublic class TypedObjectCounter {\n\n    public static double getTypedPercent(String json) {\n        int totalObjectsCount = 0;\n        int typedObjectsCount = 0;\n\n        try {\n            JSONArray arr = new JSONArray(json);\n\n            for (int i = 0; i < arr.length(); i++) {\n                JSONObject obj = arr.getJSONObject(i);\n                if (obj.has(\"type\")) {\n                    String type = obj.getString(\"type\");\n                    if (!type.isEmpty()) {\n                        typedObjectsCount++;\n                    }\n                }\n                totalObjectsCount++;\n            }\n        } catch (JSONException e) {\n            e.printStackTrace();\n        }\n\n        return (totalObjectsCount != 0) ? (typedObjectsCount * 100.0) / totalObjectsCount : 0.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..ad73e202 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,36 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class TypedObjectCounter {\n+\n+    public static double getTypedPercent(String json) {\n+        int totalObjectsCount = 0;\n+        int typedObjectsCount = 0;\n+\n+        try {\n+            JSONArray arr = new JSONArray(json);\n+\n+            for (int i = 0; i < arr.length(); i++) {\n+                JSONObject obj = arr.getJSONObject(i);\n+                if (obj.has(\"type\")) {\n+                    String type = obj.getString(\"type\");\n+                    if (!type.isEmpty()) {\n+                        typedObjectsCount++;\n+                    }\n+                }\n+                totalObjectsCount++;\n+            }\n+        } catch (JSONException e) {\n+            e.printStackTrace();\n+        }\n+\n+        return (totalObjectsCount != 0) ? (typedObjectsCount * 100.0) / totalObjectsCount : 0.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}