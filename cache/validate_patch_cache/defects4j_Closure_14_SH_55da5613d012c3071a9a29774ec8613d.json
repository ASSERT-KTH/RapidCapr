{
    "patch": "              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n            }\n          }\n          return computeFollowNode(fromNode, parent, cfa);\n        // If we are within the TRY block.\n        } else if (parent.getType() == Token.BLOCK) {\n          if (NodeUtil.getEnclosingTryFinally(parent) != null) {\n            return computeFinallyParent(fromNode, parent);\n          } else {\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..315003c2 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -768,6 +768,18 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);\n+        // If we are within the TRY block.\n+        } else if (parent.getType() == Token.BLOCK) {\n+          if (NodeUtil.getEnclosingTryFinally(parent) != null) {\n+            return computeFinallyParent(fromNode, parent);\n+          } else {\n+            return computeFollowNode(fromNode, parent, cfa);\n+          }\n+        }\n+      }\n+            }\n+          }\n+          return computeFollowNode(fromNode, parent, cfa);\n         }\n     }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}