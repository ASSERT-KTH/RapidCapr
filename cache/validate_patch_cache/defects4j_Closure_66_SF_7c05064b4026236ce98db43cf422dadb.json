{
    "patch": "public static double getTypedPercent(String json) {\n    if (json == null || json.isEmpty()) {\n        throw new IllegalArgumentException(\"JSON string cannot be null or empty\");\n    } else {\n        try {\n            JSONObject obj = new JSONObject(json);\n            return obj.getDouble(\"percent\") * 100;\n        } catch (JSONException e) {\n            throw new IllegalArgumentException(\"Invalid JSON format\", e);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..6e52a31a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    if (json == null || json.isEmpty()) {\n+        throw new IllegalArgumentException(\"JSON string cannot be null or empty\");\n+    } else {\n+        try {\n+            JSONObject obj = new JSONObject(json);\n+            return obj.getDouble(\"percent\") * 100;\n+        } catch (JSONException e) {\n+            throw new IllegalArgumentException(\"Invalid JSON format\", e);\n+        }\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}