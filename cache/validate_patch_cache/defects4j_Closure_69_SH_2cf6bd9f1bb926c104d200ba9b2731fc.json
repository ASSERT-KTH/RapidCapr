{
    "patch": "      Node parent = n.getParent();\n      boolean isGetPropOrGetElem =\n          parent.isGetProp() || parent.isGetElem();\n      boolean isThisType = functionType.getTypeOfThis().isPresent();\n      if (isThisType && !isGetPropOrGetElem) {\n        report(t, n, ILLEGAL_THIS);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..e1a7cdf3 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,13 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      Node parent = n.getParent();\n+      boolean isGetPropOrGetElem =\n+          parent.isGetProp() || parent.isGetElem();\n+      boolean isThisType = functionType.getTypeOfThis().isPresent();\n+      if (isThisType && !isGetPropOrGetElem) {\n+        report(t, n, ILLEGAL_THIS);\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}