{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        long newMillis = savedFields[i].set(millis, resetFields);\n\n        // check that newMillis value is within valid range\n        DateTimeField field = savedFields[i].iField;\n        int value = field.get(newMillis);\n        if (value != savedFields[i].iValue) {\n            // The new value is different from the parsed value\n            // This could happen e.g. if the parsed value is too large for the field\n            // Attempt to repair by moving the excess value to the next field\n            long repair = field.add(newMillis, value - savedFields[i].iValue);\n            if (field.get(repair) != value) {\n                throw new IllegalArgumentException(\"Invalid value for \" + field.getName());\n            }\n            newMillis = savedFields[i].set(repair, resetFields);\n        }\n\n        // Check that all fields are consistent with each other\n        for (int j = 0; j < i; j++) {\n            DateTimeField f1 = savedFields[i].iField;\n            DateTimeField f2 = savedFields[j].iField;\n            // Only check fields of the same type\n            if (f1 == null || f2 == null || (f1.getType() != f2.getType())) {\n                continue;\n            }\n            int v1 = savedFields[i].iField.get(newMillis);\n            int v2 = savedFields[j].iField.get(newMillis);\n            if (v1 != v2) {\n                if (f1.getType() == DateTimeFieldType.halfdayOfDay()) {\n                    // Special handling for halfdayOfDay field\n                    if (v1 == 0 && v2 == 1) {\n                        // incrementing the day could lead to an incorrect result due to DST transition\n                        // adjust the halfdayOfDay value instead\n                        newMillis = f1.add(newMillis, 1);\n                        v1 = savedFields[i].iField.get(newMillis);\n                        if (v1 != v2) {\n                            throw new IllegalArgumentException(\"Cannot parse \\\"\" + text +\n                                \"\\\": Conflict found: \" + savedFields[i].iField.getName() + \" \" + v1 +\n                                \" and \" + savedFields[j].iField.getName() + \" \" + v2);\n                        }\n                    } else if (v1 == 1 && v2 == 0) {\n                        // decrementing the day could lead to an incorrect result due to DST transition\n                        // adjust the halfdayOfDay value instead\n                        newMillis = f1.add(newMillis, -1);\n                        v1 = savedFields[i].iField.get(newMillis);\n                        if (v1 != v2) {\n                            throw new IllegalArgumentException(\"Cannot parse \\\"\" + text +\n                                \"\\\": Conflict found: \" + savedFields[i].iField.getName() + \" \" + v1 +\n                                \" and \" + savedFields[j].iField.getName() + \" \" + v2);\n                        }\n                    } else {\n                        throw new IllegalArgumentException(\"Cannot parse \\\"\" + text +\n                            \"\\\": Conflict found: \" + savedFields[i].iField.getName() + \" \" + v1 +\n                            \" and \" + savedFields[j].iField.getName() + \" \" + v2);\n                    }\n                } else {\n                    throw new IllegalArgumentException(\"Cannot parse \\\"\" + text +\n                            \"\\\": Conflict found: \" + savedFields[i].iField.getName() + \" \" + v1 +\n                            \" and \" + savedFields[j].iField.getName() + \" \" + v2);\n                }\n            }\n        }\n\n        // Validate newMillis value\n        millis = newMillis;\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..58c30fcb 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,79 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        long newMillis = savedFields[i].set(millis, resetFields);\n+\n+        // check that newMillis value is within valid range\n+        DateTimeField field = savedFields[i].iField;\n+        int value = field.get(newMillis);\n+        if (value != savedFields[i].iValue) {\n+            // The new value is different from the parsed value\n+            // This could happen e.g. if the parsed value is too large for the field\n+            // Attempt to repair by moving the excess value to the next field\n+            long repair = field.add(newMillis, value - savedFields[i].iValue);\n+            if (field.get(repair) != value) {\n+                throw new IllegalArgumentException(\"Invalid value for \" + field.getName());\n+            }\n+            newMillis = savedFields[i].set(repair, resetFields);\n+        }\n+\n+        // Check that all fields are consistent with each other\n+        for (int j = 0; j < i; j++) {\n+            DateTimeField f1 = savedFields[i].iField;\n+            DateTimeField f2 = savedFields[j].iField;\n+            // Only check fields of the same type\n+            if (f1 == null || f2 == null || (f1.getType() != f2.getType())) {\n+                continue;\n+            }\n+            int v1 = savedFields[i].iField.get(newMillis);\n+            int v2 = savedFields[j].iField.get(newMillis);\n+            if (v1 != v2) {\n+                if (f1.getType() == DateTimeFieldType.halfdayOfDay()) {\n+                    // Special handling for halfdayOfDay field\n+                    if (v1 == 0 && v2 == 1) {\n+                        // incrementing the day could lead to an incorrect result due to DST transition\n+                        // adjust the halfdayOfDay value instead\n+                        newMillis = f1.add(newMillis, 1);\n+                        v1 = savedFields[i].iField.get(newMillis);\n+                        if (v1 != v2) {\n+                            throw new IllegalArgumentException(\"Cannot parse \\\"\" + text +\n+                                \"\\\": Conflict found: \" + savedFields[i].iField.getName() + \" \" + v1 +\n+                                \" and \" + savedFields[j].iField.getName() + \" \" + v2);\n+                        }\n+                    } else if (v1 == 1 && v2 == 0) {\n+                        // decrementing the day could lead to an incorrect result due to DST transition\n+                        // adjust the halfdayOfDay value instead\n+                        newMillis = f1.add(newMillis, -1);\n+                        v1 = savedFields[i].iField.get(newMillis);\n+                        if (v1 != v2) {\n+                            throw new IllegalArgumentException(\"Cannot parse \\\"\" + text +\n+                                \"\\\": Conflict found: \" + savedFields[i].iField.getName() + \" \" + v1 +\n+                                \" and \" + savedFields[j].iField.getName() + \" \" + v2);\n+                        }\n+                    } else {\n+                        throw new IllegalArgumentException(\"Cannot parse \\\"\" + text +\n+                            \"\\\": Conflict found: \" + savedFields[i].iField.getName() + \" \" + v1 +\n+                            \" and \" + savedFields[j].iField.getName() + \" \" + v2);\n+                    }\n+                } else {\n+                    throw new IllegalArgumentException(\"Cannot parse \\\"\" + text +\n+                            \"\\\": Conflict found: \" + savedFields[i].iField.getName() + \" \" + v1 +\n+                            \" and \" + savedFields[j].iField.getName() + \" \" + v2);\n+                }\n+            }\n+        }\n+\n+        // Validate newMillis value\n+        millis = newMillis;\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "java.lang.IllegalArgumentException: Invalid value for halfdayOfDay",
    "test_result": "FAIL"
}