{
    "patch": "      if (block.isFunction) {\n        break;\n      } else if (block.isLoop) {\n        // Traverse the loop to check if there are any other assignments.\n        Set<BasicBlock> loopBlocks = Sets.newIdentityHashSet();\n        getLoopBlocks(block, loopBlocks);\n        List<Reference> assignmentsInLoop = Lists.newArrayList();\n        for (BasicBlock loopBlock : loopBlocks) {\n          for (int i = 0; i < loopBlock.getElements().size(); i++) {\n            Node n = loopBlock.getElements().get(i);\n            if (n.getType() == Token.ASSIGN && n.getFirstChild().matchesName(ref.getName())) {\n              assignmentsInLoop.add(new Reference(n, loopBlock, i));\n            }\n          }\n        }\n        if (assignmentsInLoop.size() <= 1) {\n          return true;\n        }\n        break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..1537b6f6 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,26 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        break;\n+      } else if (block.isLoop) {\n+        // Traverse the loop to check if there are any other assignments.\n+        Set<BasicBlock> loopBlocks = Sets.newIdentityHashSet();\n+        getLoopBlocks(block, loopBlocks);\n+        List<Reference> assignmentsInLoop = Lists.newArrayList();\n+        for (BasicBlock loopBlock : loopBlocks) {\n+          for (int i = 0; i < loopBlock.getElements().size(); i++) {\n+            Node n = loopBlock.getElements().get(i);\n+            if (n.getType() == Token.ASSIGN && n.getFirstChild().matchesName(ref.getName())) {\n+              assignmentsInLoop.add(new Reference(n, loopBlock, i));\n+            }\n+          }\n+        }\n+        if (assignmentsInLoop.size() <= 1) {\n+          return true;\n+        }\n+        break;\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}