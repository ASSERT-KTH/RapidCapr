{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.EXPR_RESULT) {\n      // This is an EXPR_RESULT node, so check if its first and only child\n      // is a BLOCK that contains exactly one expression.\n      Node child = n.getFirstChild();\n      return child.getType() == Token.BLOCK && child.hasOneChild()\n          && NodeUtil.isExpressionNode(child.getFirstChild());\n    }\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        // IE has a bug where event handlers behave differently when\n        // their return value is used vs. when their return value is in\n        // an EXPR_RESULT. It's pretty freaking weird. See:\n        // http://code.google.com/p/closure-compiler/issues/detail?id=291\n        // We try to detect this case, and not fold EXPR_RESULTs\n        // into other expressions.\n        if (n.getParent().getType() == Token.EXPR_RESULT\n            && !n.getParent().hasMoreThanOneChild()) {\n          return false;\n        }\n        // We only have to worry about methods with an implicit 'this'\n        // param, or this doesn't happen.\n        return NodeUtil.isExpressionNode(maybeExpr);\n      }\n    }\n\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..219835b2 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -517,20 +517,29 @@ public class PeepholeSubstituteAlternateSyntax\n    *     an expression.\n    */\n   private boolean isFoldableExpressBlock(Node n) {\n+    if (n.getType() == Token.EXPR_RESULT) {\n+      // This is an EXPR_RESULT node, so check if its first and only child\n+      // is a BLOCK that contains exactly one expression.\n+      Node child = n.getFirstChild();\n+      return child.getType() == Token.BLOCK && child.hasOneChild()\n+          && NodeUtil.isExpressionNode(child.getFirstChild());\n+    }\n     if (n.getType() == Token.BLOCK) {\n       if (n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+        // IE has a bug where event handlers behave differently when\n+        // their return value is used vs. when their return value is in\n+        // an EXPR_RESULT. It's pretty freaking weird. See:\n+        // http://code.google.com/p/closure-compiler/issues/detail?id=291\n+        // We try to detect this case, and not fold EXPR_RESULTs\n+        // into other expressions.\n+        if (n.getParent().getType() == Token.EXPR_RESULT\n+            && !n.getParent().hasMoreThanOneChild()) {\n+          return false;\n+        }\n+        // We only have to worry about methods with an implicit 'this'\n+        // param, or this doesn't happen.\n+        return NodeUtil.isExpressionNode(maybeExpr);\n       }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}