{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    // count the total number of references to each argument\n    Map<String, Integer> refCounts = new HashMap<>();\n    for (Var var : referenced) {\n      refCounts.compute(var.getName(), (name, count) -> (count == null) ? 1 : count + 1);\n    }\n\n    Iterator<Node> argNodes = argList.children().iterator();\n    for (int i = 0; i < argList.getChildCount(); i++) {\n      Node arg = argNodes.next();\n      if (refCounts.containsKey(arg.getString())) {\n        // this argument is referenced, but we still need to update its positional argument index\n        arg.putIntProp(Node.FUNCTION_ARGUMENT_POSITION, i);\n      } else {\n        // remove unreferenced argument\n        argNodes.remove();\n        compiler.reportCodeChange();\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..63edb0bb 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,34 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    // count the total number of references to each argument\n+    Map<String, Integer> refCounts = new HashMap<>();\n+    for (Var var : referenced) {\n+      refCounts.compute(var.getName(), (name, count) -> (count == null) ? 1 : count + 1);\n+    }\n+\n+    Iterator<Node> argNodes = argList.children().iterator();\n+    for (int i = 0; i < argList.getChildCount(); i++) {\n+      Node arg = argNodes.next();\n+      if (refCounts.containsKey(arg.getString())) {\n+        // this argument is referenced, but we still need to update its positional argument index\n+        arg.putIntProp(Node.FUNCTION_ARGUMENT_POSITION, i);\n+      } else {\n+        // remove unreferenced argument\n+        argNodes.remove();\n+        compiler.reportCodeChange();\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}