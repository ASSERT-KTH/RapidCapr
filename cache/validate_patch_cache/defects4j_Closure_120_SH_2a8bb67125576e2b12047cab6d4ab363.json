{
    "patch": "    private boolean hasExceptionHandler(Node cfgNode) {\n        List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n        for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n            if (edge.getValue() == Branch.ON_EX) {\n                return true;\n            }\n            // Check for catches.\n            if (edge.getValue() == Branch.ON_EX) {\n                Node target = edge.getDestination();\n                if (target == null) {\n                    continue;\n                }\n                if (target.getType() == Token.TRY) {\n                    List<DiGraphEdge<Node, Branch>> tryEdges = getCfg().getOutEdges(target);\n                    for (DiGraphEdge<Node, Branch> tryEdge : tryEdges) {\n                        if (tryEdge.getValue() == Branch.CATCH) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..1927a515 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,30 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+    private boolean hasExceptionHandler(Node cfgNode) {\n+        List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n+        for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+            if (edge.getValue() == Branch.ON_EX) {\n+                return true;\n+            }\n+            // Check for catches.\n+            if (edge.getValue() == Branch.ON_EX) {\n+                Node target = edge.getDestination();\n+                if (target == null) {\n+                    continue;\n+                }\n+                if (target.getType() == Token.TRY) {\n+                    List<DiGraphEdge<Node, Branch>> tryEdges = getCfg().getOutEdges(target);\n+                    for (DiGraphEdge<Node, Branch> tryEdge : tryEdges) {\n+                        if (tryEdge.getValue() == Branch.CATCH) {\n+                            return true;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}