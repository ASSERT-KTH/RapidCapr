{
    "patch": "        boolean isChainedProperty = \n            n.getParent().getType() == Token.GETPROP || \n            (n.getParent().getType() == Token.NAME && \n             n.getParent().getFirstChild().getType() == Token.GETPROP);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..d1810cdb 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -315,7 +315,10 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+        boolean isChainedProperty = \n+            n.getParent().getType() == Token.GETPROP || \n+            (n.getParent().getType() == Token.NAME && \n+             n.getParent().getFirstChild().getType() == Token.GETPROP);\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}