{
    "patch": "public static String escapeJava(String input) {\n    if(input == null) {\n        return null;\n    }\n    int len = input.length();\n    StringBuilder sb = new StringBuilder(len + 4); // Maximum possible length of output string is input string length + 4\n    for(int i = 0; i < len; i++) {\n        char ch = input.charAt(i);\n        if (ch > 4095) {\n            sb.append(\"\\\\u\").append(hex(ch)); // convert to Unicode hex value\n        } else if (ch > 255) {\n            sb.append(\"\\\\u0\").append(hex(ch)); // pad with leading zero and convert to Unicode hex value\n        } else if (ch > 127) {\n            sb.append(\"\\\\u00\").append(hex(ch)); // pad with two leading zeros and convert to Unicode hex value\n        } else if (ch < 32) {\n            switch(ch) {\n                case '\\b': sb.append('\\\\').append('b');\n                          break;\n                case '\\n': sb.append('\\\\').append('n');\n                          break;\n                case '\\t': sb.append('\\\\').append('t');\n                          break;\n                case '\\f': sb.append('\\\\').append('f');\n                          break;\n                case '\\r': sb.append('\\\\').append('r');\n                          break;\n                default:   if(ch > 15) {\n                               sb.append(\"\\\\u00\").append(hex(ch));\n                           } else {\n                               sb.append(\"\\\\u000\").append(hex(ch));\n                           }\n            }\n        } else {\n            switch(ch) {\n                case '\\\"': sb.append('\\\\').append('\\\"');\n                          break;\n                case '\\'': sb.append('\\\\').append('\\'');\n                          break;\n                case '\\\\': sb.append('\\\\').append('\\\\');\n                          break;\n                default:   sb.append(ch);\n            }\n        }\n    }\n    return sb.toString();\n}\n\n// convert char to hex for use in Unicode representation\npublic static String hex(char ch) {\n    return Integer.toHexString(ch).toUpperCase();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..c7e43584 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,57 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String escapeJava(String input) {\n+    if(input == null) {\n+        return null;\n+    }\n+    int len = input.length();\n+    StringBuilder sb = new StringBuilder(len + 4); // Maximum possible length of output string is input string length + 4\n+    for(int i = 0; i < len; i++) {\n+        char ch = input.charAt(i);\n+        if (ch > 4095) {\n+            sb.append(\"\\\\u\").append(hex(ch)); // convert to Unicode hex value\n+        } else if (ch > 255) {\n+            sb.append(\"\\\\u0\").append(hex(ch)); // pad with leading zero and convert to Unicode hex value\n+        } else if (ch > 127) {\n+            sb.append(\"\\\\u00\").append(hex(ch)); // pad with two leading zeros and convert to Unicode hex value\n+        } else if (ch < 32) {\n+            switch(ch) {\n+                case '\\b': sb.append('\\\\').append('b');\n+                          break;\n+                case '\\n': sb.append('\\\\').append('n');\n+                          break;\n+                case '\\t': sb.append('\\\\').append('t');\n+                          break;\n+                case '\\f': sb.append('\\\\').append('f');\n+                          break;\n+                case '\\r': sb.append('\\\\').append('r');\n+                          break;\n+                default:   if(ch > 15) {\n+                               sb.append(\"\\\\u00\").append(hex(ch));\n+                           } else {\n+                               sb.append(\"\\\\u000\").append(hex(ch));\n+                           }\n+            }\n+        } else {\n+            switch(ch) {\n+                case '\\\"': sb.append('\\\\').append('\\\"');\n+                          break;\n+                case '\\'': sb.append('\\\\').append('\\'');\n+                          break;\n+                case '\\\\': sb.append('\\\\').append('\\\\');\n+                          break;\n+                default:   sb.append(ch);\n+            }\n+        }\n+    }\n+    return sb.toString();\n+}\n+\n+// convert char to hex for use in Unicode representation\n+public static String hex(char ch) {\n+    return Integer.toHexString(ch).toUpperCase();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}