{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // FUNCTIONS called via 'call' and 'apply' have a this-object as the\n  // first parameter, but this is not part of the called function's\n  // parameter list.\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      // TODO(johnlenz): Support replace this with a value.\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    } else {\n      // \".apply\" call should be filtered before this.\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n    }\n  }\n\n  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n  while (true) {\n    // Check if we have both parameters and arguments to compare.\n    boolean hasFnParam = (fnParam != null);\n    boolean hasCArg = (cArg != null);\n\n    if (!hasFnParam && !hasCArg) {\n      // If we ran out of parameters and arguments, we're done.\n      break;\n    }\n\n    if (hasFnParam) {\n      // Check if the parameter is a destructuring pattern.\n      // We don't support destructuring patterns.\n      if (fnParam.isDestructuringLhs()) {\n        return CanInlineResult.NO;\n      }\n\n      // Check whether the argument has side effects.\n      if (hasCArg && NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n\n      // Check for arguments that may effect mutable state (like a variable).\n      if (hasCArg\n          && NodeUtil.mayEffectMutableState(cArg, compiler)\n          && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n\n      // Move to the next parameter.\n      fnParam = fnParam.getNext();\n    } else if (hasCArg) {\n      // If we've still got an argument, but no parameters left, the argument\n      // shouldn't have side effects.\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n    }\n\n    if (hasCArg) {\n      // Move to the next argument.\n      cArg = cArg.getNext();\n    }\n  }\n\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..f73d7513 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,68 +686,83 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n+\n+  Node block = fnNode.getLastChild();\n+\n+  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n+  Node cArg = callNode.getFirstChild().getNext();\n+\n+  // FUNCTIONS called via 'call' and 'apply' have a this-object as the\n+  // first parameter, but this is not part of the called function's\n+  // parameter list.\n+  if (!callNode.getFirstChild().isName()) {\n+    if (NodeUtil.isFunctionObjectCall(callNode)) {\n+      // TODO(johnlenz): Support replace this with a value.\n+      if (cArg == null || !cArg.isThis()) {\n+        return CanInlineResult.NO;\n+      }\n+      cArg = cArg.getNext();\n+    } else {\n+      // \".apply\" call should be filtered before this.\n+      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n     }\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n+  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n \n+  while (true) {\n+    // Check if we have both parameters and arguments to compare.\n+    boolean hasFnParam = (fnParam != null);\n+    boolean hasCArg = (cArg != null);\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+    if (!hasFnParam && !hasCArg) {\n+      // If we ran out of parameters and arguments, we're done.\n+      break;\n+    }\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+    if (hasFnParam) {\n+      // Check if the parameter is a destructuring pattern.\n+      // We don't support destructuring patterns.\n+      if (fnParam.isDestructuringLhs()) {\n+        return CanInlineResult.NO;\n       }\n-    }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+      // Check whether the argument has side effects.\n+      if (hasCArg && NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+        return CanInlineResult.NO;\n+      }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+      // Check for arguments that may effect mutable state (like a variable).\n+      if (hasCArg\n+          && NodeUtil.mayEffectMutableState(cArg, compiler)\n+          && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n+        return CanInlineResult.NO;\n       }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+      // Move to the next parameter.\n+      fnParam = fnParam.getNext();\n+    } else if (hasCArg) {\n+      // If we've still got an argument, but no parameters left, the argument\n+      // shouldn't have side effects.\n+      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+        return CanInlineResult.NO;\n       }\n     }\n \n-    return CanInlineResult.YES;\n+    if (hasCArg) {\n+      // Move to the next argument.\n+      cArg = cArg.getNext();\n+    }\n   }\n \n+  return CanInlineResult.YES;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}