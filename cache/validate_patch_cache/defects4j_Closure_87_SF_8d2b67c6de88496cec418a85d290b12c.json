{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        // if there is only one child and it has a block type\n        if (NodeUtil.isExpressionNode(maybeExpr) && !NodeUtil.isCallOrNew(maybeExpr)\n                && maybeExpr.getChildCount() == 1) {\n            Node child = maybeExpr.getFirstChild();\n            if (NodeUtil.isCallOrNew(child) || child.getType() == Token.NAME\n                    || child.getType() == Token.ARRAYLIT) {\n                // if child is CALL, NEW, NAME or ARRAYLIT, then it is a valid expression\n                return true;\n            } else if (child.getType() == Token.HOOK) {\n                // if child is a conditional (ternary) expression, check its children\n                Node then = child.getFirstChild().getNext();\n                Node elseCase = then.getNext();\n                return isFoldableExpressBlock(new Node(Token.BLOCK, then))\n                        && isFoldableExpressBlock(new Node(Token.BLOCK, elseCase));\n            } else if (child.getType() == Token.IF) {\n                // if child is an if statement, check if the else block is missing or empty\n                Node ifBlock = child.getLastChild();\n                Node elseBlock = child.getLastChild().getNext();\n                if (elseBlock == null || elseBlock.isEmpty()) {\n                    return isFoldableExpressBlock(ifBlock);\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..0e9a49bf 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,35 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+        // if there is only one child and it has a block type\n+        if (NodeUtil.isExpressionNode(maybeExpr) && !NodeUtil.isCallOrNew(maybeExpr)\n+                && maybeExpr.getChildCount() == 1) {\n+            Node child = maybeExpr.getFirstChild();\n+            if (NodeUtil.isCallOrNew(child) || child.getType() == Token.NAME\n+                    || child.getType() == Token.ARRAYLIT) {\n+                // if child is CALL, NEW, NAME or ARRAYLIT, then it is a valid expression\n+                return true;\n+            } else if (child.getType() == Token.HOOK) {\n+                // if child is a conditional (ternary) expression, check its children\n+                Node then = child.getFirstChild().getNext();\n+                Node elseCase = then.getNext();\n+                return isFoldableExpressBlock(new Node(Token.BLOCK, then))\n+                        && isFoldableExpressBlock(new Node(Token.BLOCK, elseCase));\n+            } else if (child.getType() == Token.IF) {\n+                // if child is an if statement, check if the else block is missing or empty\n+                Node ifBlock = child.getLastChild();\n+                Node elseBlock = child.getLastChild().getNext();\n+                if (elseBlock == null || elseBlock.isEmpty()) {\n+                    return isFoldableExpressBlock(ifBlock);\n+                }\n+            }\n+        }\n     }\n-\n     return false;\n-  }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}