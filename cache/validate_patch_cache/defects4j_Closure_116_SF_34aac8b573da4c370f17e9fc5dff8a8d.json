{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node callNameNode = callNode.getFirstChild();\n  Node cArg = callNameNode.getNext();\n\n  // Functions called via 'call' and 'apply' have a this-object as\n  // the first parameter, but this is not part of the called function's\n  // parameter list.\n  boolean isCallOrApply = !callNameNode.isName();\n  if (isCallOrApply) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      // TODO(johnlenz): Support replace this with a value.\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    } else if (NodeUtil.isFunctionObjectApply(callNode)) {\n      return CanInlineResult.NO;\n    }\n  }\n\n  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  boolean expectOnlyImmutableArgs = false;\n  int numCallArgs = countArgumentsInCallNode(callNode);\n  int numFnParams = countFunctionParameters(fnNode);\n\n  while (fnParam != null && cArg != null) {\n    if (cArg.isSpread()) {\n      // If we encounter a spread argument, then all remaining arguments could\n      // be consumed by it, and we can't match them against named parameters.\n      return expectOnlyImmutableArgs ? CanInlineResult.NO : consumeSpreadArgs(callNode, cArg.getNext());\n    }\n\n    if (expectOnlyImmutableArgs) {\n      return CanInlineResult.NO;\n    }\n\n    if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1\n        && NodeUtil.mayEffectMutableState(cArg, compiler)) {\n      return CanInlineResult.NO;\n    }\n\n    // Move to the next name.\n    fnParam = fnParam.getNext();\n\n    if (isCallOrApply && fnParam == null) {\n      // When calling via \"call\" or \"apply\", the last function parameter is the\n      // special \"$this\" parameter, which is consumed by the first argument (the \"this\"\n      // value of the call/apply). So we're done consuming arguments. Note that \"apply\"\n      // is handled differently from \"call\", so in this case the length of the actual\n      // argument list doesn't have to exactly match the length of the parameter list.\n      // The function itself will use the \".length\" property of the array of extra\n      // arguments to handle this.\n      expectOnlyImmutableArgs = true;\n      break;\n    }\n\n    // For non-call/apply functions, we must have the same number of arguments as parameters.\n    --numFnParams;\n    --numCallArgs;\n    cArg = cArg.getNext();\n  }\n\n  if (isCallOrApply) {\n    // If we've only encountered immutable arguments so far, then $this if the only named parameter left.\n    return expectOnlyImmutableArgs && numFnParams == 1 ? CanInlineResult.YES : CanInlineResult.NO;\n  } else {\n    return numFnParams == 0 && numCallArgs == 0 ? CanInlineResult.YES : CanInlineResult.NO;\n  }\n}\n\nprivate static int countArgumentsInCallNode(Node callNode) {\n  int count = 0;\n  for (Node cArg = callNode.getFirstChild().getNext(); cArg != null; cArg = cArg.getNext()) {\n    ++count;\n    if (cArg.isSpread()) {\n      count = -1;\n      break;\n    }\n  }\n  return count;\n}\n\nprivate static CanInlineResult consumeSpreadArgs(Node callNode, Node spreadNode) {\n  for (Node cArg = spreadNode; cArg != null; cArg = cArg.getNext()) {\n    if (NodeUtil.mayHaveSideEffects(cArg, CompilerAccessor.get())) {\n      return CanInlineResult.NO;\n    }\n  }\n\n  return NodeUtil.hasTrueBooleanValue(\n      NodeUtil.getFunctionParameters(callNode.getNext().getFirstChild()).getSecondChild())\n      ? CanInlineResult.NO\n      : CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..4bc1562b 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,68 +686,109 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n+\n+  Node block = fnNode.getLastChild();\n+\n+  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n+  Node callNameNode = callNode.getFirstChild();\n+  Node cArg = callNameNode.getNext();\n+\n+  // Functions called via 'call' and 'apply' have a this-object as\n+  // the first parameter, but this is not part of the called function's\n+  // parameter list.\n+  boolean isCallOrApply = !callNameNode.isName();\n+  if (isCallOrApply) {\n+    if (NodeUtil.isFunctionObjectCall(callNode)) {\n+      // TODO(johnlenz): Support replace this with a value.\n+      if (cArg == null || !cArg.isThis()) {\n+        return CanInlineResult.NO;\n+      }\n+      cArg = cArg.getNext();\n+    } else if (NodeUtil.isFunctionObjectApply(callNode)) {\n       return CanInlineResult.NO;\n     }\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n+  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+  boolean expectOnlyImmutableArgs = false;\n+  int numCallArgs = countArgumentsInCallNode(callNode);\n+  int numFnParams = countFunctionParameters(fnNode);\n+\n+  while (fnParam != null && cArg != null) {\n+    if (cArg.isSpread()) {\n+      // If we encounter a spread argument, then all remaining arguments could\n+      // be consumed by it, and we can't match them against named parameters.\n+      return expectOnlyImmutableArgs ? CanInlineResult.NO : consumeSpreadArgs(callNode, cArg.getNext());\n+    }\n \n+    if (expectOnlyImmutableArgs) {\n+      return CanInlineResult.NO;\n+    }\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+    if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1\n+        && NodeUtil.mayEffectMutableState(cArg, compiler)) {\n+      return CanInlineResult.NO;\n+    }\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n+    // Move to the next name.\n+    fnParam = fnParam.getNext();\n+\n+    if (isCallOrApply && fnParam == null) {\n+      // When calling via \"call\" or \"apply\", the last function parameter is the\n+      // special \"$this\" parameter, which is consumed by the first argument (the \"this\"\n+      // value of the call/apply). So we're done consuming arguments. Note that \"apply\"\n+      // is handled differently from \"call\", so in this case the length of the actual\n+      // argument list doesn't have to exactly match the length of the parameter list.\n+      // The function itself will use the \".length\" property of the array of extra\n+      // arguments to handle this.\n+      expectOnlyImmutableArgs = true;\n+      break;\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+    // For non-call/apply functions, we must have the same number of arguments as parameters.\n+    --numFnParams;\n+    --numCallArgs;\n+    cArg = cArg.getNext();\n+  }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+  if (isCallOrApply) {\n+    // If we've only encountered immutable arguments so far, then $this if the only named parameter left.\n+    return expectOnlyImmutableArgs && numFnParams == 1 ? CanInlineResult.YES : CanInlineResult.NO;\n+  } else {\n+    return numFnParams == 0 && numCallArgs == 0 ? CanInlineResult.YES : CanInlineResult.NO;\n+  }\n+}\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n+private static int countArgumentsInCallNode(Node callNode) {\n+  int count = 0;\n+  for (Node cArg = callNode.getFirstChild().getNext(); cArg != null; cArg = cArg.getNext()) {\n+    ++count;\n+    if (cArg.isSpread()) {\n+      count = -1;\n+      break;\n     }\n+  }\n+  return count;\n+}\n \n-    return CanInlineResult.YES;\n+private static CanInlineResult consumeSpreadArgs(Node callNode, Node spreadNode) {\n+  for (Node cArg = spreadNode; cArg != null; cArg = cArg.getNext()) {\n+    if (NodeUtil.mayHaveSideEffects(cArg, CompilerAccessor.get())) {\n+      return CanInlineResult.NO;\n+    }\n   }\n \n+  return NodeUtil.hasTrueBooleanValue(\n+      NodeUtil.getFunctionParameters(callNode.getNext().getFirstChild()).getSecondChild())\n+      ? CanInlineResult.NO\n+      : CanInlineResult.YES;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}