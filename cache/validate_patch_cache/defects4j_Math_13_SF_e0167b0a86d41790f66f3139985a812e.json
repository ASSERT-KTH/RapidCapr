{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m, 0.0);\n    final RealMatrix v = dec.getV();\n    final RealMatrix d = dec.getD();\n\n    for (int i = 0; i < d.getRowDimension(); i++) {\n        if (d.getEntry(i, i) < 0.0) {\n            throw new IllegalArgumentException(\"Matrix has negative eigenvalues\");\n        }\n        else {\n            d.setEntry(i, i, Math.sqrt(d.getEntry(i, i)));\n        }\n    }\n\n    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(d.getColumn(0));\n    return v.multiply(sqrtD).multiply(v.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..d60d4b838 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,21 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m, 0.0);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d = dec.getD();\n+\n+    for (int i = 0; i < d.getRowDimension(); i++) {\n+        if (d.getEntry(i, i) < 0.0) {\n+            throw new IllegalArgumentException(\"Matrix has negative eigenvalues\");\n+        }\n+        else {\n+            d.setEntry(i, i, Math.sqrt(d.getEntry(i, i)));\n+        }\n     }\n+\n+    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(d.getColumn(0));\n+    return v.multiply(sqrtD).multiply(v.transpose());\n+}\n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1.6357215104109237> but was:<1.9452074317534194>",
    "test_result": "FAIL"
}