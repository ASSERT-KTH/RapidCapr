{
    "patch": "public static boolean containsAny(CharSequence s, char[] searchChars) {\n    if (s == null || searchChars == null) {\n        return false;\n    }\n    int strLength = s.length();\n    int searchCharsLength = searchChars.length;\n    int maxCodePoint = getMaxCodePoint(searchChars);\n    int[] search = searchCharsToCodePoints(searchChars);\n\n    for (int i = 0; i < strLength; ) {\n        int codePoint = Character.codePointAt(s, i);\n        if (codePoint < MAX_BMP && ArrayUtils.contains(searchChars, (char) codePoint)) {\n            return true;\n        } else if (maxCodePoint < MAX_BMP) {\n            i += Character.charCount(codePoint);\n        } else {\n            if (ArrayUtils.contains(search, codePoint)) {\n                return true;\n            }\n            i += Character.charCount(codePoint);\n        }\n    }\n    return false;\n}\n\nprivate static int getMaxCodePoint(char[] chars) {\n    int max = Character.MIN_CODE_POINT;\n    for (char c : chars) {\n        max = Math.max(max, c);\n    }\n    return max;\n}\n\nprivate static int[] searchCharsToCodePoints(char[] searchChars) {\n    IntHashSet set = new IntHashSet();\n    for (char c : searchChars) {\n        set.add(c);\n    }\n    return set.toArray();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..4d466e42 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,46 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(CharSequence s, char[] searchChars) {\n+    if (s == null || searchChars == null) {\n+        return false;\n+    }\n+    int strLength = s.length();\n+    int searchCharsLength = searchChars.length;\n+    int maxCodePoint = getMaxCodePoint(searchChars);\n+    int[] search = searchCharsToCodePoints(searchChars);\n+\n+    for (int i = 0; i < strLength; ) {\n+        int codePoint = Character.codePointAt(s, i);\n+        if (codePoint < MAX_BMP && ArrayUtils.contains(searchChars, (char) codePoint)) {\n+            return true;\n+        } else if (maxCodePoint < MAX_BMP) {\n+            i += Character.charCount(codePoint);\n+        } else {\n+            if (ArrayUtils.contains(search, codePoint)) {\n+                return true;\n+            }\n+            i += Character.charCount(codePoint);\n+        }\n+    }\n+    return false;\n+}\n+\n+private static int getMaxCodePoint(char[] chars) {\n+    int max = Character.MIN_CODE_POINT;\n+    for (char c : chars) {\n+        max = Math.max(max, c);\n+    }\n+    return max;\n+}\n+\n+private static int[] searchCharsToCodePoints(char[] searchChars) {\n+    IntHashSet set = new IntHashSet();\n+    for (char c : searchChars) {\n+        set.add(c);\n+    }\n+    return set.toArray();\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}