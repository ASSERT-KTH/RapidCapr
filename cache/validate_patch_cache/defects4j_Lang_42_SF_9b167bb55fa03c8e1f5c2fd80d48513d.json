{
    "patch": "public void escape(Writer writer, String str) throws IOException {\n    int len = str.length();\n    for (int i = 0; i < len; i++) {\n        char c = str.charAt(i);\n\n        if (Character.isSurrogate(c)) { // handle surrogate\n            if (Character.isHighSurrogate(c)) {\n                if (i < len - 1 && Character.isLowSurrogate(str.charAt(i+1))) {\n                    int codePoint = Character.toCodePoint(c, str.charAt(i+1));\n                    writer.write(\"&#\");\n                    writer.write(Integer.toString(codePoint, 10));\n                    writer.write(';');\n                    i++; // skip the next character since it is already handled.\n                } else {\n                    writer.write(\"&#\");\n                    writer.write(Integer.toString(c, 10));\n                    writer.write(';');\n                }\n            } else { // unmatched low surrogate, treat as regular char\n                writer.write(c);\n            }\n\n        } else { // regular char\n            String entityName = this.entityName(c);\n            if (entityName == null) {\n                if (c > 0x7F) {\n                    writer.write(\"&#\");\n                    writer.write(Integer.toString(c, 10));\n                    writer.write(';');\n                } else {\n                    writer.write(c);\n                }\n            } else {\n                writer.write('&');\n                writer.write(entityName);\n                writer.write(';');\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/Entities.java b/src/java/org/apache/commons/lang/Entities.java\nindex 900e1a89..0f7cf753 100644\n--- a/src/java/org/apache/commons/lang/Entities.java\n+++ b/src/java/org/apache/commons/lang/Entities.java\n@@ -822,10 +822,29 @@ class Entities {\n      * @see #escape(String)\n      * @see Writer\n      */\n-    public void escape(Writer writer, String str) throws IOException {\n-        int len = str.length();\n-        for (int i = 0; i < len; i++) {\n-            char c = str.charAt(i);\n+public void escape(Writer writer, String str) throws IOException {\n+    int len = str.length();\n+    for (int i = 0; i < len; i++) {\n+        char c = str.charAt(i);\n+\n+        if (Character.isSurrogate(c)) { // handle surrogate\n+            if (Character.isHighSurrogate(c)) {\n+                if (i < len - 1 && Character.isLowSurrogate(str.charAt(i+1))) {\n+                    int codePoint = Character.toCodePoint(c, str.charAt(i+1));\n+                    writer.write(\"&#\");\n+                    writer.write(Integer.toString(codePoint, 10));\n+                    writer.write(';');\n+                    i++; // skip the next character since it is already handled.\n+                } else {\n+                    writer.write(\"&#\");\n+                    writer.write(Integer.toString(c, 10));\n+                    writer.write(';');\n+                }\n+            } else { // unmatched low surrogate, treat as regular char\n+                writer.write(c);\n+            }\n+\n+        } else { // regular char\n             String entityName = this.entityName(c);\n             if (entityName == null) {\n                 if (c > 0x7F) {\n@@ -842,6 +861,7 @@ class Entities {\n             }\n         }\n     }\n+}\n \n     /**\n      * <p>",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}