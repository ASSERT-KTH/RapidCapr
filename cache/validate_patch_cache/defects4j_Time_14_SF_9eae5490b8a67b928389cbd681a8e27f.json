{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        if (DateTimeUtils.isContiguous(partial)) {\n            DateTimeField field = partial.getField(fieldIndex);\n            int year = values[field.getFieldIndex(ChronoField.YEAR)];\n            int month = values[field.getFieldIndex(ChronoField.MONTH_OF_YEAR)];\n            int day = values[field.getFieldIndex(ChronoField.DAY_OF_MONTH)];\n            MonthDay monthDay = new MonthDay(month, day);\n            if (monthDay.isValidYear(year) == false) {\n                // find previous month\n                year = monthDay.previousValidYear(year);\n                monthDay = monthDay.withYear(year);\n            }\n            LocalDate date = new LocalDate(year, monthDay.getMonth(), monthDay.getDayOfMonth(), iChronology);\n            date = date.plusMonths(valueToAdd);\n            int[] newValues = {date.getYear(), date.getMonthOfYear(), date.getDayOfMonth()};\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                DateTimeField currentField = partial.getField(i);\n                if (currentField.getRangeDurationField().getType().equals(DurationFieldType.months())) {\n                    continue;\n                }\n                if (i == fieldIndex) {\n                    continue;\n                }\n                newValues[currentField.getRangeDurationField().getType()] = values[currentField.getFieldIndex(iChronology)];\n            }\n            return newValues;\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..f9075ba0 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,14 +206,31 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n+            DateTimeField field = partial.getField(fieldIndex);\n+            int year = values[field.getFieldIndex(ChronoField.YEAR)];\n+            int month = values[field.getFieldIndex(ChronoField.MONTH_OF_YEAR)];\n+            int day = values[field.getFieldIndex(ChronoField.DAY_OF_MONTH)];\n+            MonthDay monthDay = new MonthDay(month, day);\n+            if (monthDay.isValidYear(year) == false) {\n+                // find previous month\n+                year = monthDay.previousValidYear(year);\n+                monthDay = monthDay.withYear(year);\n+            }\n+            LocalDate date = new LocalDate(year, monthDay.getMonth(), monthDay.getDayOfMonth(), iChronology);\n+            date = date.plusMonths(valueToAdd);\n+            int[] newValues = {date.getYear(), date.getMonthOfYear(), date.getDayOfMonth()};\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                DateTimeField currentField = partial.getField(i);\n+                if (currentField.getRangeDurationField().getType().equals(DurationFieldType.months())) {\n+                    continue;\n+                }\n+                if (i == fieldIndex) {\n+                    continue;\n+                }\n+                newValues[currentField.getRangeDurationField().getType()] = values[currentField.getFieldIndex(iChronology)];\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            return newValues;\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}