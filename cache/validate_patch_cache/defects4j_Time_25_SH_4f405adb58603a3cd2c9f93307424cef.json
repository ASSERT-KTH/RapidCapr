{
    "patch": "        // we need to ensure that time is always after the DST gap\n        // this happens naturally for positive offsets, but not for negative\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            // if we just return offsetAdjusted then the time is pushed\n            // back before the transition, whereas it should be\n            // on or after the transition\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal != nextAdjusted) {\n                return offsetLocal;\n            }\n            // We now have two transitions close to `instantLocal`. We use `getOffset` to see\n            // which of these transitions applies to `instantLocal`. If it is the earlier one,\n            // we use the offset corresponding to the transition itself. Otherwise, we just return\n            // the initial offset.\n            int offset = getOffset(instantLocal);\n            if (offset == offsetLocal) {\n                return offsetLocal;\n            }\n            long nextNextLocal = nextTransition(nextLocal);\n            if (nextNextLocal == nextAdjusted) {\n                // 'nextLocal' is the transition to use because we always want to be after a DST gap.\n                return offsetLocal;\n            }\n            // 'nextLocal' corresponds to the earlier transition; we return the later offset.\n            return offset;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..30d931ef 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,33 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+        // we need to ensure that time is always after the DST gap\n+        // this happens naturally for positive offsets, but not for negative\n+        if ((offsetLocal - offsetAdjusted) < 0) {\n+            // if we just return offsetAdjusted then the time is pushed\n+            // back before the transition, whereas it should be\n+            // on or after the transition\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            if (nextLocal != nextAdjusted) {\n+                return offsetLocal;\n+            }\n+            // We now have two transitions close to `instantLocal`. We use `getOffset` to see\n+            // which of these transitions applies to `instantLocal`. If it is the earlier one,\n+            // we use the offset corresponding to the transition itself. Otherwise, we just return\n+            // the initial offset.\n+            int offset = getOffset(instantLocal);\n+            if (offset == offsetLocal) {\n+                return offsetLocal;\n+            }\n+            long nextNextLocal = nextTransition(nextLocal);\n+            if (nextNextLocal == nextAdjusted) {\n+                // 'nextLocal' is the transition to use because we always want to be after a DST gap.\n+                return offsetLocal;\n+            }\n+            // 'nextLocal' corresponds to the earlier transition; we return the later offset.\n+            return offset;\n+        }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}