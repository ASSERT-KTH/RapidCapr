{
    "patch": "            if (offsetLocal < offsetAdjusted) {\n                long prevAdjusted = previousTransition(instantAdjusted);\n                long nextLocal = nextTransition(prevAdjusted + 1);\n                if (nextLocal <= instantLocal) {\n                    return offsetAdjusted;\n                }\n                return getOffset(nextLocal - 1);\n            } else if (offsetLocal > offsetAdjusted) {\n                long nextAdjusted = nextTransition(instantAdjusted);\n                if (instantLocal < nextAdjusted) {\n                    return offsetLocal;\n                }\n                long nextLocal = nextTransition(instantLocal);\n                return (nextLocal == nextAdjusted) ? offsetAdjusted : getOffset(nextAdjusted);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..116909e7 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,21 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetLocal < offsetAdjusted) {\n+                long prevAdjusted = previousTransition(instantAdjusted);\n+                long nextLocal = nextTransition(prevAdjusted + 1);\n+                if (nextLocal <= instantLocal) {\n+                    return offsetAdjusted;\n+                }\n+                return getOffset(nextLocal - 1);\n+            } else if (offsetLocal > offsetAdjusted) {\n+                long nextAdjusted = nextTransition(instantAdjusted);\n+                if (instantLocal < nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+                long nextLocal = nextTransition(instantLocal);\n+                return (nextLocal == nextAdjusted) ? offsetAdjusted : getOffset(nextAdjusted);\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}