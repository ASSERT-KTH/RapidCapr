{
    "patch": "      // ignore cast nodes\n      if (first.isCast()) {\n        first = first.getFirstChild();\n      }\n\n      while (NodeUtil.isGet(first) && first.getFirstChild().isCast()) {\n        first = first.getFirstChild();\n      }\n\n      if (!NodeUtil.isGet(first)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      if (first.isName()\n          && \"eval\".equals(first.getString())\n          && !n.getBooleanProp(Node.IS_EXPR_RESULT)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..d4c0aa46 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,24 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+      // ignore cast nodes\n+      if (first.isCast()) {\n+        first = first.getFirstChild();\n+      }\n+\n+      while (NodeUtil.isGet(first) && first.getFirstChild().isCast()) {\n+        first = first.getFirstChild();\n+      }\n+\n+      if (!NodeUtil.isGet(first)) {\n+        n.putBooleanProp(Node.FREE_CALL, true);\n+      }\n+\n+      // Keep track of the context in which eval is called. It is important\n+      // to distinguish between \"(0, eval)()\" and \"eval()\".\n+      if (first.isName()\n+          && \"eval\".equals(first.getString())\n+          && !n.getBooleanProp(Node.IS_EXPR_RESULT)) {\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}