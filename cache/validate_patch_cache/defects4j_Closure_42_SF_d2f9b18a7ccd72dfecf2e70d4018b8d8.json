{
    "patch": "class IRFactory {\n  private final String sourceName;\n  private final ErrorReporter errorReporter;\n\n  IRFactory(String sourceName, ErrorReporter errorReporter) {\n    this.sourceName = sourceName;\n    this.errorReporter = errorReporter;\n  }\n\n  Node transform(AstNode node) {\n    TransformDispatcher dispatcher = new TransformDispatcher();\n    return dispatcher.transform(node);\n  }\n\n  private class TransformDispatcher implements NodeVisitor {\n    @Override\n    public Node visit(AstNode node) {\n      return node.accept(this);\n    }\n\n    @Override\n    public Node visitArrayComprehension(ArrayComprehension node) {\n      throw new UnsupportedOperationException(\"Array comprehension not supported\");\n    }\n\n    @Override\n    public Node visitArrayComprehensionLoop(ArrayComprehensionLoop node) {\n      throw new UnsupportedOperationException(\"Array comprehension not supported\");\n    }\n\n    @Override\n    public Node visitBinaryExpr(BinaryExpression node) {\n      return newNode(\n          transformTokenType(node.getType()),\n          transform(node.getLeft()),\n          transform(node.getRight()));\n    }\n\n    @Override\n    public Node visitBlock(Block blockNode) {\n      return processGeneric(blockNode);\n    }\n\n    @Override\n    public Node visitBraceN(BraceN node) {\n      throw new UnsupportedOperationException(\"Array comprehension not supported\");\n    }\n\n    @Override\n    public Node visitBreak(BreakStatement statementNode) {\n      Node node = newNode(Token.BREAK);\n      if (statementNode.getBreakLabel() != null) {\n        Node labelName = transform(statementNode.getBreakLabel());\n        // Change the NAME to LABEL_NAME\n        labelName.setType(Token.LABEL_NAME);\n        node.addChildToBack(labelName);\n      }\n      return node;\n    }\n\n    @Override\n    public Node visitCatch(CatchClause clauseNode) {\n      AstNode catchVar = clauseNode.getCatchCondition();\n      Node node;\n      if (catchVar != null) {\n        throw new UnsupportedOperationException(\"Catch with condition not supported\");\n      }\n      AstNode catchBody = clauseNode.getBody();\n      AstNode catchIdentifier = clauseNode.getVarName();\n      node = newNode(Token.CATCH, transform(catchIdentifier), transform(catchBody));\n      return node;\n    }\n\n    @Override\n    public Node visitConditionalExpression(ConditionalExpression node) {\n      return newNode(\n          Token.HOOK,\n          transform(node.getTestExpression()),\n          transform(node.getTrueExpression()),\n          transform(node.getFalseExpression()));\n    }\n\n    @Override\n    public Node visitContinue(ContinueStatement statementNode) {\n      Node node = newNode(Token.CONTINUE);\n      if (statementNode.getLabel() != null) {\n        Node labelName = transform(statementNode.getLabel());\n        // Change the NAME to LABEL_NAME\n        labelName.setType(Token.LABEL_NAME);\n        node.addChildToBack(labelName);\n      }\n      return node;\n    }\n\n    @Override\n    public Node visitDoLoop(DoLoop loopNode) {\n      return newNode(\n          Token.DO,\n          transform(loopNode.getBody()),\n          transform(loopNode.getCondition()),\n          null);\n    }\n\n    @Override\n    public Node visitElementGet(ElementGet getNode) {\n      return newNode(\n          Token.GETELEM,\n          transform(getNode.getTarget()),\n          transform(getNode.getElement()));\n    }\n\n    @Override\n    public Node visitEmpty(EmptyExpression node) {\n      Node n = new Node(Token.EMPTY);\n      return n;\n    }\n\n    @Override\n    public Node visitError(ErrorNode node) {\n      throw new UnsupportedOperationException(\"Cannot transform error node\");\n    }\n\n    @Override\n    public Node visitExprStatement(ExpressionStatement expressionStatement) {\n      Node node = newNode(transformTokenType(expressionStatement.getType()));\n      AstNode expression = expressionStatement.getExpression();\n      if (expression instanceof NumberLiteral) {\n        expression.putProp(Node.IS_NUMBER_LITERAL_PROP, true);\n      }\n      node.addChildToBack(transform(expression));\n      return node;\n    }\n\n    @Override\n    public Node visitFor(ForLoop loopNode) {\n      Node node = newNode(Token.FOR);\n      List<AstNode> inits = loopNode.getInitializers();\n      if (inits != null) {\n        for (AstNode n : inits) {\n          node.addChildToBack(transform(n));\n        }\n      }\n      node.addChildToBack(transform(loopNode.getCondition()));\n      node.addChildToBack(transform(loopNode.getIncrement()));\n      node.addChildToBack(transform(loopNode.getBody()));\n\n      return node;\n    }\n\n    @Override\n    public Node visitForIn(ForInLoop loopNode) {\n      Node node = newNode(Token.FOR);\n      node.addChildToBack(transform(loopNode.getIterator()));\n      node.addChildToBack(transform(loopNode.getIteratedObject()));\n      node.addChildToBack(transform(loopNode.getBody()));\n      return node;\n    }\n\n    @Override\n    public Node visitFunctionCall(FunctionCall call) {\n      Node target;\n      if (call.getTarget() instanceof PropertyGet) {\n        PropertyGet pg = (PropertyGet) call.getTarget();\n        target =\n            newNode(\n                Token.GETPROP,\n                transform(pg.getTarget()),\n                new String(pg.getProperty().getIdentifier()));\n      } else {\n        target = transform(call.getTarget());\n      }\n      Node n = newNode(Token.CALL, target);\n      for (AstNode arg : call.getArguments()) {\n        n.addChildToBack(transform(arg));\n      }\n      return n;\n    }\n\n    @Override\n    public Node visitFunctionNode(FunctionNode functionNode) {\n      Node result = new Node(Token.FUNCTION, functionNode.getLineno());\n      AstNode fnNameNode = functionNode.getFunctionName();\n      if (fnNameNode != null) {\n        Node fnName = transform(fnNameNode);\n        result.addChildToBack(fnName);\n      } else {\n        result.addChildToBack(new Node(Token.EMPTY));\n      }\n      Node arguments = new Node(Token.PARAM_LIST);\n      for (int i = 0; i < functionNode.getParamCount(); i++) {\n        arguments.addChildToBack(transform(functionNode.getParamOrVarName(i)));\n      }\n      result.addChildToBack(arguments);\n      result.addChildToBack(transform(functionNode.getBody()));\n      return result;\n    }\n\n    @Override\n    public Node visitGeneratedXml(GeneratedXmlLiteral xmlNode) {\n      return newNode(Token.STRING, xmlNode.getXml());\n    }\n\n    @Override\n    public Node visitId(IdNode idNode) {\n      Node n = null;\n      if (idNode instanceof Name) {\n        n = new Node(Token.NAME, ((Name) idNode).getIdentifier());\n      } else {\n        // throw \"Can't handle destructuring assignment or object literal\";\n        throw new UnsupportedOperationException(\"Can't handle destructuring assignment or object literal\");\n      }\n      return n;\n    }\n\n    @Override\n    public Node visitIf(IfStatement ifNode) {\n      return newNode(\n          Token.IF,\n          transform(ifNode.getCondition()),\n          transform(ifNode.getThenPart()),\n          transform(ifNode.getElsePart()));\n    }\n\n    @Override\n    public Node visitInfix(InfixExpression node) {\n      if (node.getType() == Token.INSTANCEOF) {\n        // Expand `a instanceof b` -> `!(!a || !a.constructor != b)`\n        // to match esprima conversion output.\n        Node notNode = newNode(Token.NOT, transform(node.getLeft()));\n        Node left = newNode(Token.OR, notNode, newNode(Token.TRUE));\n        Node constructor = newNode(Token.GETPROP, transform(node.getLeft()), new String(\"constructor\"));\n        Node right = newNode(Token.NE, constructor, transform(node.getRight()));\n        Node not = newNode(Token.NOT, right);\n        Node condition = newNode(Token.OR, left, not);\n        return newNode(Token.NOT, condition);\n      } else {\n        return newNode(\n            transformTokenType(node.getType()),\n            transform(node.getLeft()),\n            transform(node.getRight()));\n      }\n    }\n\n    @Override\n    public Node visitJump(Jump node) {\n      // An example of a Jump is a break statement. Since the context in\n      // which it is used can vary, a visitor can help modify it exactly.\n      return processGeneric(node);\n    }\n\n    @Override\n    public Node visitLabel(Label node) {\n      Node newTarget = transform(node.getStatement());\n      Node n = new Node(Token.LABEL, new String(node.getName()));\n      n.addChildToBack(newTarget);\n      return n;\n    }\n\n    @Override\n    public Node visitLabeledStatement(LabeledStatement labeledStatement) {\n      AstNode statement = labeledStatement.getStatement();\n      Node n = transform(statement);\n      Node labelNode = new Node(Token.LABEL, labeledStatement.getLabelName());\n      labelNode.addChildToBack(n);\n      return labelNode;\n    }\n\n    @Override\n    public Node visitLetNode(LetNode letNode) {\n      throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public Node visitName(Name name) {\n      return new Node(Token.NAME, name.getIdentifier(), name.getLineno());\n    }\n\n    @Override\n    public Node visitNewExpr(NewExpression call) {\n      Node target = transform(call.getTarget());\n      Node n = newNode(Token.NEW, target);\n      for (AstNode arg : call.getArguments()) {\n        Node transformedArg = transform(arg);\n        n.addChildToBack(transformedArg);\n      }\n      return n;\n    }\n\n    @Override\n    public Node visitNull(NullLiteral node) {\n      return new Node(Token.NULL);\n    }\n\n    @Override\n    public Node visitNumber(NumberLiteral node) {\n      Node n = new Node(Token.NUMBER, node.getNumber());\n      n.putIntProp(Node.IS_NUMBER_LITERAL_PROP, 1);\n      return n;\n    }\n\n    @Override\n    public Node visitObject(ObjectNode node) {\n      Node objNode = new Node(Token.OBJECTLIT);\n      final Set<Object> keys = new HashSet<>();\n      for (final ObjectProperty pair : node.getElements()) {\n        if (pair instanceof GetterSlot) {\n          throw new UnsupportedOperationException(\"Cannot transform getter\");\n        } else if (pair instanceof SetterSlot) {\n          throw new UnsupportedOperationException(\"Cannot transform setter\");\n        } else {\n          keys.add(pair.getLeft().toString());\n          objNode.addChildToBack(\n              newNode(Token.STRING_KEY, pair.getLeft().toSource(), transform(pair.getRight())));\n        }\n      }\n      return objNode;\n    }\n\n    @Override\n    public Node visitObjectProperty(ObjectProperty node) {\n      throw new UnsupportedOperationException(\"Can't handle object literal in isolation\");\n    }\n\n    @Override\n    public Node visitParenthesizedExpr(ParenthesizedExpression node) {\n      AstNode expr = node.getExpression();\n      if (expr instanceof RegExpLiteral) {\n        // This happens in a MalformedForm test. Convert\n        // (/(?:)/) into an equivalent call to RegExp(), since the SpiderMonkey\n        // parser does this too.\n        RegExpLiteral re = (RegExpLiteral) expr;\n        if (\"(?:)\".equals(re.getValue())) {\n          return newNode(Token.NEW, newNode(Token.NAME, \"RegExp\"), newNode(Token.STRING, \"\"));\n        }\n      }\n\n      return transform(expr);\n    }\n\n    @Override\n    public Node visitPropertyGet(PropertyGet node) {\n      return newNode(Token.GETPROP, transform(node.getTarget()), new String(node.getProperty().getIdentifier()));\n    }\n\n    @Override\n    public Node visitRegExp(RegExpLiteral node) {\n      Node n =\n          new Node(\n              Token.REGEXP,\n              node.getValue(),\n              node.getFlags(),\n              node.getLineno(),\n              node.getCharno());\n      n.getParenthesized().setBoolean(node.isParenthesized());\n      return n;\n    }\n\n    @Override\n    public Node visitReturn(ReturnStatement returnStatement) {\n      Node n = new Node(Token.RETURN);\n      if (returnStatement.getReturnValue() != null) {\n        n.addChildToBack(transform(returnStatement.getReturnValue()));\n      }\n      return n;\n    }\n\n    @Override\n    public Node visitScript(ScriptNode node) {\n      final int size = node.getFunctionCount();\n      final Node scriptNode = new Node(Token.SCRIPT);\n      for (int i = 0; i < size; i++) {\n        scriptNode.addChildToBack(transform(node.getFunctionNode(i)));\n      }\n      for (AstNode stmt : node) {\n        scriptNode.addChildToBack(transform(stmt));\n      }\n      return scriptNode;\n    }\n\n    @Override\n    public Node visitString(StringLiteral node) {\n      return new Node(Token.STRING, node.getValue());\n    }\n\n    @Override\n    public Node visitSwitch(SwitchStatement switchNode) {\n      Node node = newNode(Token.SWITCH, transform(switchNode.getExpression()));\n      for (SwitchCase sc : switchNode.getCases()) {\n        Node childNode = new Node(Token.CASE, transform(sc.getExpression()));\n        node.addChildToBack(childNode);\n\n        for (AstNode stmt : sc.getStatements()) {\n          childNod",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..7b02557d 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,22 +473,56 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+class IRFactory {\n+  private final String sourceName;\n+  private final ErrorReporter errorReporter;\n+\n+  IRFactory(String sourceName, ErrorReporter errorReporter) {\n+    this.sourceName = sourceName;\n+    this.errorReporter = errorReporter;\n+  }\n+\n+  Node transform(AstNode node) {\n+    TransformDispatcher dispatcher = new TransformDispatcher();\n+    return dispatcher.transform(node);\n+  }\n+\n+  private class TransformDispatcher implements NodeVisitor {\n+    @Override\n+    public Node visit(AstNode node) {\n+      return node.accept(this);\n+    }\n+\n+    @Override\n+    public Node visitArrayComprehension(ArrayComprehension node) {\n+      throw new UnsupportedOperationException(\"Array comprehension not supported\");\n+    }\n+\n+    @Override\n+    public Node visitArrayComprehensionLoop(ArrayComprehensionLoop node) {\n+      throw new UnsupportedOperationException(\"Array comprehension not supported\");\n+    }\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+    @Override\n+    public Node visitBinaryExpr(BinaryExpression node) {\n+      return newNode(\n+          transformTokenType(node.getType()),\n+          transform(node.getLeft()),\n+          transform(node.getRight()));\n     }\n \n     @Override\n-    Node processBlock(Block blockNode) {\n+    public Node visitBlock(Block blockNode) {\n       return processGeneric(blockNode);\n     }\n \n     @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n+    public Node visitBraceN(BraceN node) {\n+      throw new UnsupportedOperationException(\"Array comprehension not supported\");\n+    }\n+\n+    @Override\n+    public Node visitBreak(BreakStatement statementNode) {\n       Node node = newNode(Token.BREAK);\n       if (statementNode.getBreakLabel() != null) {\n         Node labelName = transform(statementNode.getBreakLabel());\n@@ -500,30 +534,29 @@ class IRFactory {\n     }\n \n     @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n+    public Node visitCatch(CatchClause clauseNode) {\n+      AstNode catchVar = clauseNode.getCatchCondition();\n+      Node node;\n+      if (catchVar != null) {\n+        throw new UnsupportedOperationException(\"Catch with condition not supported\");\n       }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n+      AstNode catchBody = clauseNode.getBody();\n+      AstNode catchIdentifier = clauseNode.getVarName();\n+      node = newNode(Token.CATCH, transform(catchIdentifier), transform(catchBody));\n       return node;\n     }\n \n     @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n+    public Node visitConditionalExpression(ConditionalExpression node) {\n       return newNode(\n           Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+          transform(node.getTestExpression()),\n+          transform(node.getTrueExpression()),\n+          transform(node.getFalseExpression()));\n     }\n \n     @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n+    public Node visitContinue(ContinueStatement statementNode) {\n       Node node = newNode(Token.CONTINUE);\n       if (statementNode.getLabel() != null) {\n         Node labelName = transform(statementNode.getLabel());\n@@ -535,15 +568,16 @@ class IRFactory {\n     }\n \n     @Override\n-    Node processDoLoop(DoLoop loopNode) {\n+    public Node visitDoLoop(DoLoop loopNode) {\n       return newNode(\n           Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+          transform(loopNode.getBody()),\n+          transform(loopNode.getCondition()),\n+          null);\n     }\n \n     @Override\n-    Node processElementGet(ElementGet getNode) {\n+    public Node visitElementGet(ElementGet getNode) {\n       return newNode(\n           Token.GETELEM,\n           transform(getNode.getTarget()),\n@@ -551,29 +585,288 @@ class IRFactory {\n     }\n \n     @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n+    public Node visitEmpty(EmptyExpression node) {\n+      Node n = new Node(Token.EMPTY);\n+      return n;\n+    }\n+\n+    @Override\n+    public Node visitError(ErrorNode node) {\n+      throw new UnsupportedOperationException(\"Cannot transform error node\");\n+    }\n+\n+    @Override\n+    public Node visitExprStatement(ExpressionStatement expressionStatement) {\n+      Node node = newNode(transformTokenType(expressionStatement.getType()));\n+      AstNode expression = expressionStatement.getExpression();\n+      if (expression instanceof NumberLiteral) {\n+        expression.putProp(Node.IS_NUMBER_LITERAL_PROP, true);\n+      }\n+      node.addChildToBack(transform(expression));\n       return node;\n     }\n \n     @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n+    public Node visitFor(ForLoop loopNode) {\n+      Node node = newNode(Token.FOR);\n+      List<AstNode> inits = loopNode.getInitializers();\n+      if (inits != null) {\n+        for (AstNode n : inits) {\n+          node.addChildToBack(transform(n));\n+        }\n+      }\n+      node.addChildToBack(transform(loopNode.getCondition()));\n+      node.addChildToBack(transform(loopNode.getIncrement()));\n+      node.addChildToBack(transform(loopNode.getBody()));\n+\n       return node;\n     }\n \n     @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n+    public Node visitForIn(ForInLoop loopNode) {\n+      Node node = newNode(Token.FOR);\n+      node.addChildToBack(transform(loopNode.getIterator()));\n+      node.addChildToBack(transform(loopNode.getIteratedObject()));\n+      node.addChildToBack(transform(loopNode.getBody()));\n+      return node;\n+    }\n \n-        // Return the bare minimum to put the AST in a valid state.\n+    @Override\n+    public Node visitFunctionCall(FunctionCall call) {\n+      Node target;\n+      if (call.getTarget() instanceof PropertyGet) {\n+        PropertyGet pg = (PropertyGet) call.getTarget();\n+        target =\n+            newNode(\n+                Token.GETPROP,\n+                transform(pg.getTarget()),\n+                new String(pg.getProperty().getIdentifier()));\n+      } else {\n+        target = transform(call.getTarget());\n+      }\n+      Node n = newNode(Token.CALL, target);\n+      for (AstNode arg : call.getArguments()) {\n+        n.addChildToBack(transform(arg));\n+      }\n+      return n;\n+    }\n+\n+    @Override\n+    public Node visitFunctionNode(FunctionNode functionNode) {\n+      Node result = new Node(Token.FUNCTION, functionNode.getLineno());\n+      AstNode fnNameNode = functionNode.getFunctionName();\n+      if (fnNameNode != null) {\n+        Node fnName = transform(fnNameNode);\n+        result.addChildToBack(fnName);\n+      } else {\n+        result.addChildToBack(new Node(Token.EMPTY));\n+      }\n+      Node arguments = new Node(Token.PARAM_LIST);\n+      for (int i = 0; i < functionNode.getParamCount(); i++) {\n+        arguments.addChildToBack(transform(functionNode.getParamOrVarName(i)));\n+      }\n+      result.addChildToBack(arguments);\n+      result.addChildToBack(transform(functionNode.getBody()));\n+      return result;\n+    }\n+\n+    @Override\n+    public Node visitGeneratedXml(GeneratedXmlLiteral xmlNode) {\n+      return newNode(Token.STRING, xmlNode.getXml());\n+    }\n+\n+    @Override\n+    public Node visitId(IdNode idNode) {\n+      Node n = null;\n+      if (idNode instanceof Name) {\n+        n = new Node(Token.NAME, ((Name) idNode).getIdentifier());\n+      } else {\n+        // throw \"Can't handle destructuring assignment or object literal\";\n+        throw new UnsupportedOperationException(\"Can't handle destructuring assignment or object literal\");\n+      }\n+      return n;\n+    }\n+\n+    @Override\n+    public Node visitIf(IfStatement ifNode) {\n       return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+          Token.IF,\n+          transform(ifNode.getCondition()),\n+          transform(ifNode.getThenPart()),\n+          transform(ifNode.getElsePart()));\n+    }\n+\n+    @Override\n+    public Node visitInfix(InfixExpression node) {\n+      if (node.getType() == Token.INSTANCEOF) {\n+        // Expand `a instanceof b` -> `!(!a || !a.constructor != b)`\n+        // to match esprima conversion output.\n+        Node notNode = newNode(Token.NOT, transform(node.getLeft()));\n+        Node left = newNode(Token.OR, notNode, newNode(Token.TRUE));\n+        Node constructor = newNode(Token.GETPROP, transform(node.getLeft()), new String(\"constructor\"));\n+        Node right = newNode(Token.NE, constructor, transform(node.getRight()));\n+        Node not = newNode(Token.NOT, right);\n+        Node condition = newNode(Token.OR, left, not);\n+        return newNode(Token.NOT, condition);\n+      } else {\n+        return newNode(\n+            transformTokenType(node.getType()),\n+            transform(node.getLeft()),\n+            transform(node.getRight()));\n+      }\n+    }\n+\n+    @Override\n+    public Node visitJump(Jump node) {\n+      // An example of a Jump is a break statement. Since the context in\n+      // which it is used can vary, a visitor can help modify it exactly.\n+      return processGeneric(node);\n+    }\n+\n+    @Override\n+    public Node visitLabel(Label node) {\n+      Node newTarget = transform(node.getStatement());\n+      Node n = new Node(Token.LABEL, new String(node.getName()));\n+      n.addChildToBack(newTarget);\n+      return n;\n+    }\n+\n+    @Override\n+    public Node visitLabeledStatement(LabeledStatement labeledStatement) {\n+      AstNode statement = labeledStatement.getStatement();\n+      Node n = transform(statement);\n+      Node labelNode = new Node(Token.LABEL, labeledStatement.getLabelName());\n+      labelNode.addChildToBack(n);\n+      return labelNode;\n+    }\n+\n+    @Override\n+    public Node visitLetNode(LetNode letNode) {\n+      throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Node visitName(Name name) {\n+      return new Node(Token.NAME, name.getIdentifier(), name.getLineno());\n+    }\n+\n+    @Override\n+    public Node visitNewExpr(NewExpression call) {\n+      Node target = transform(call.getTarget());\n+      Node n = newNode(Token.NEW, target);\n+      for (AstNode arg : call.getArguments()) {\n+        Node transformedArg = transform(arg);\n+        n.addChildToBack(transformedArg);\n+      }\n+      return n;\n+    }\n+\n+    @Override\n+    public Node visitNull(NullLiteral node) {\n+      return new Node(Token.NULL);\n     }\n \n+    @Override\n+    public Node visitNumber(NumberLiteral node) {\n+      Node n = new Node(Token.NUMBER, node.getNumber());\n+      n.putIntProp(Node.IS_NUMBER_LITERAL_PROP, 1);\n+      return n;\n+    }\n+\n+    @Override\n+    public Node visitObject(ObjectNode node) {\n+      Node objNode = new Node(Token.OBJECTLIT);\n+      final Set<Object> keys = new HashSet<>();\n+      for (final ObjectProperty pair : node.getElements()) {\n+        if (pair instanceof GetterSlot) {\n+          throw new UnsupportedOperationException(\"Cannot transform getter\");\n+        } else if (pair instanceof SetterSlot) {\n+          throw new UnsupportedOperationException(\"Cannot transform setter\");\n+        } else {\n+          keys.add(pair.getLeft().toString());\n+          objNode.addChildToBack(\n+              newNode(Token.STRING_KEY, pair.getLeft().toSource(), transform(pair.getRight())));\n+        }\n+      }\n+      return objNode;\n+    }\n+\n+    @Override\n+    public Node visitObjectProperty(ObjectProperty node) {\n+      throw new UnsupportedOperationException(\"Can't handle object literal in isolation\");\n+    }\n+\n+    @Override\n+    public Node visitParenthesizedExpr(ParenthesizedExpression node) {\n+      AstNode expr = node.getExpression();\n+      if (expr instanceof RegExpLiteral) {\n+        // This happens in a MalformedForm test. Convert\n+        // (/(?:)/) into an equivalent call to RegExp(), since the SpiderMonkey\n+        // parser does this too.\n+        RegExpLiteral re = (RegExpLiteral) expr;\n+        if (\"(?:)\".equals(re.getValue())) {\n+          return newNode(Token.NEW, newNode(Token.NAME, \"RegExp\"), newNode(Token.STRING, \"\"));\n+        }\n+      }\n+\n+      return transform(expr);\n+    }\n+\n+    @Override\n+    public Node visitPropertyGet(PropertyGet node) {\n+      return newNode(Token.GETPROP, transform(node.getTarget()), new String(node.getProperty().getIdentifier()));\n+    }\n+\n+    @Override\n+    public Node visitRegExp(RegExpLiteral node) {\n+      Node n =\n+          new Node(\n+              Token.REGEXP,\n+              node.getValue(),\n+              node.getFlags(),\n+              node.getLineno(),\n+              node.getCharno());\n+      n.getParenthesized().setBoolean(node.isParenthesized());\n+      return n;\n+    }\n+\n+    @Override\n+    public Node visitReturn(ReturnStatement returnStatement) {\n+      Node n = new Node(Token.RETURN);\n+      if (returnStatement.getReturnValue() != null) {\n+        n.addChildToBack(transform(returnStatement.getReturnValue()));\n+      }\n+      return n;\n+    }\n+\n+    @Override\n+    public Node visitScript(ScriptNode node) {\n+      final int size = node.getFunctionCount();\n+      final Node scriptNode = new Node(Token.SCRIPT);\n+      for (int i = 0; i < size; i++) {\n+        scriptNode.addChildToBack(transform(node.getFunctionNode(i)));\n+      }\n+      for (AstNode stmt : node) {\n+        scriptNode.addChildToBack(transform(stmt));\n+      }\n+      return scriptNode;\n+    }\n+\n+    @Override\n+    public Node visitString(StringLiteral node) {\n+      return new Node(Token.STRING, node.getValue());\n+    }\n+\n+    @Override\n+    public Node visitSwitch(SwitchStatement switchNode) {\n+      Node node = newNode(Token.SWITCH, transform(switchNode.getExpression()));\n+      for (SwitchCase sc : switchNode.getCases()) {\n+        Node childNode = new Node(Token.CASE, transform(sc.getExpression()));\n+        node.addChildToBack(childNode);\n+\n+        for (AstNode stmt : sc.getStatements()) {\n+          childNod\n+\n     @Override\n     Node processForLoop(ForLoop loopNode) {\n       Node node = newNode(",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}