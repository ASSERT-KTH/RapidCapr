{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        final int offsetLocal = getOffset(instantLocal);\n        // adjust instantLocal using the estimate and recalc the offset\n        final long instantAdjusted = instantLocal - offsetLocal;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            // we need to ensure that time is always after the DST gap\n            // this happens naturally for positive offsets, but not for negative\n            if ((offsetLocal - offsetAdjusted) < 0) {\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                } else {\n                    // We are in a \"gap\" period (fall DST transition)\n                    int previousOffset = getOffset(nextLocal - 1);\n                    int currentOffset = getOffset(nextLocal);\n                    if (previousOffset < currentOffset) {\n                        // Clocks were turned back; move to previous zone\n                        return previousOffset;\n                    } else if (previousOffset > currentOffset) {\n                        // Clocks were turned forward; stay in current zone\n                        return currentOffset;\n                    }\n                }\n            }\n        }\n        return offsetAdjusted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..946ca4d7 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -891,9 +891,20 @@ public abstract class DateTimeZone implements Serializable {\n                 // back before the transition, whereas it should be\n                 // on or after the transition\n                 long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n                 if (nextLocal != nextAdjusted) {\n                     return offsetLocal;\n+                } else {\n+                    // We are in a \"gap\" period (fall DST transition)\n+                    int previousOffset = getOffset(nextLocal - 1);\n+                    int currentOffset = getOffset(nextLocal);\n+                    if (previousOffset < currentOffset) {\n+                        // Clocks were turned back; move to previous zone\n+                        return previousOffset;\n+                    } else if (previousOffset > currentOffset) {\n+                        // Clocks were turned forward; stay in current zone\n+                        return currentOffset;\n+                    }\n                 }\n             }\n         }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}