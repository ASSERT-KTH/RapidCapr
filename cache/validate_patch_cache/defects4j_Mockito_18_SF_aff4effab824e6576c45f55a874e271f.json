{
    "patch": "public static Map<String, String> parseQuery(String query) {\n    Map<String, String> queryParams = new HashMap<>();\n    String[] pairs = query.split(\"&\");\n    for (String pair : pairs) {\n        int idx = pair.indexOf(\"=\");\n        try {\n            queryParams.put(\n                    URLDecoder.decode(pair.substring(0, idx), \"UTF-8\"),\n                    URLDecoder.decode(pair.substring(idx + 1), \"UTF-8\"));\n        }\n        catch (UnsupportedEncodingException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n    return queryParams;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..94c6b7d9d 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,22 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Map<String, String> parseQuery(String query) {\n+    Map<String, String> queryParams = new HashMap<>();\n+    String[] pairs = query.split(\"&\");\n+    for (String pair : pairs) {\n+        int idx = pair.indexOf(\"=\");\n+        try {\n+            queryParams.put(\n+                    URLDecoder.decode(pair.substring(0, idx), \"UTF-8\"),\n+                    URLDecoder.decode(pair.substring(idx + 1), \"UTF-8\"));\n+        }\n+        catch (UnsupportedEncodingException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+    return queryParams;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}