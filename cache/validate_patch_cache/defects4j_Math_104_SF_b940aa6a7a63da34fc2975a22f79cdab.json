{
    "patch": "public static double regularizedGamma(double a, double x) {\n    if (Double.isNaN(a) || Double.isInfinite(a) || Double.isNaN(x) || Double.isInfinite(x) || a <= 0.0) {\n        return Double.NaN;\n    }\n    if (x < 0.0) {\n        return 0.0;\n    }\n    double epsilon = 10e-15;\n    double big = 4.503599627370496e15;\n    double bigInv = 2.22044604925031308085e-16;\n    double gammaSmall = Double.MIN_VALUE / Double.MAX_VALUE / epsilon;\n    double gammaLarge = Double.MAX_VALUE / epsilon;\n    double ax = a * Math.log(x) - x - logGamma(a);\n    if (ax < -709.78271289338399) {\n        return x < 1.0 ? Double.MAX_VALUE : 0.0;\n    }\n    if (x <= 1.0 || x <= a) {\n        double r2 = a;\n        double c2 = 1.0;\n        double ans2 = 1.0;\n        do {\n            r2 += 1.0;\n            c2 *= x / r2;\n            ans2 += c2;\n        } while (c2 / ans2 > epsilon);\n        return ans2 * Math.exp(ax);\n    }\n    int i = 0;\n    double y = 1.0 - a;\n    double z = x + y + 1.0;\n    double c = 0.0;\n    double p = 1.0;\n    double q = x;\n    double r = p / q;\n    double ans1 = r;\n    do {\n        c += 1.0;\n        y += 1.0;\n        z += 2.0;\n        double yc = y * c;\n        double yz = y * z;\n        double oldAns = ans1;\n        p = oldAns * yz - p * yc;\n        q = q * yz - r * yc;\n        if (q != 0.0) {\n            r = p / q;\n            double t = Math.abs((ans1 - r) / r);\n            ans1 = r;\n        } else {\n            r = big;\n            ans1 = r;\n        }\n        i++;\n        if (i > 300) {\n            return Double.NaN;\n        }\n    } while (Math.abs(ans1 - oldAns) > epsilon * Math.abs(oldAns));\n    return ans1 * Math.exp(ax) / a;\n}\n\npublic static double logGamma(double x) {\n    if (Double.isNaN(x) || x <= 0.0) {\n        return Double.NaN;\n    }\n    double g = 4.7421875;\n    double[] p = {0.99999999999999709182, 57.156235665862923517, -59.597960355475491248, 14.136097974741747174, -0.49191381609762019978, .33994649984811888699E-4, .46523628927048575665E-4, -.98374475304879564677E-4, .15808870322491248884E-3, -.21026444172410488319E-3, .21743961811521264320E-3, -.16431810653676389022E-3, .84418223983852743293E-4, -.26190838401581408670E-4, .36899182659531622704E-5};\n    double q = 0.99999999999999994502;\n    double[] t = {4.83836122723810047042E-01, -1.47587722994593911752E-01, 6.46249402391333854778E-02, -3.27885410759859649565E-02, 1.79706750811820387126E-02, -.10301619651655518334, .63517214811695652558E-01, -.41973440708459455922, .27669176157231991705, -.20115338771419793026, .14834657492888052633, -.10932366159261230549, .81566945881729523908E-1, -.63175742320136527804E-1, .49421482680149768292E-1, -.38970490178009032277E-1, .30186537789459308204E-1, -.23673372919594035787E-1, .18476001053044440570E-1, -.14469192199734846212E-1, .11346344568843882151E-1, -.89892615788569710793E-2, .70719913790869812086E-2, -.56095140881285850945E-2, .44225066503956136475E-2, -.35122991934172180262E-2, .28284012585346474405E-2, -.22700417248234252991E-2, .18240658604439834624E-2, -.14633484751391236205E-2, .11622307831021863823E-2, -.92132447846071432460E-3, .72879165743580178338E-3, -.57707110815542792869E-3, .45613934858871111120E-3, -.36144771385709410408E-3, .28742169069456328454E-3, -.22898336057563022976E-3, .18235564746272547540E-3, -.14522871776854873804E-3, .11551876900469964039E-3, -.92063430707439423910E-4, .73178867289421006128E-4, -.58255459985186081488E-4, .46232747954361090524E-4, -.36603955794089371304E-4, .29020861193573457534E-4, -.23008143620009828796E-4, .18248449769527458283E-4, -.14498357437886016467E-4, .11573779056788712548E-4, -.92230883137748740417E-5, .73457617176056513977E-5, -.58493651536907121560E-5, .46776457947907447636E-5, -.37344696606796961650E-5, .29731392680318338622E-5, -.23626469284431825429E-5, .18748214288437544116E-5, -.14821908396485883955E-5, .11782982053237278284E-5, -.93672794695065934231E-6, .74524911911363997421E-6, -.59129880224458468366E-6, .46986249238428500113E-6, -.37383972542289026092E-6, .29703263947082833116E-6, -.23523425776379192318E-6, .18698001742426477270E-6, -.14809055137188070631E-6, .11763123242147734509E-6, -.93210239843513911611E-7, .73781613177282294726E-7, -.58395957572703198132E-7, .46253399698242032354E-7, -.36612601395013720916E-7, .29063286085361524257E-7, -.23043654654308434882E-7, .18226924383936521570E-7, -.14446420587157819871E-7, .11487404072211903040E-7, -.91366610208737043248E-8, .72579157435356211814E-8, -.57722026496676636049E-8, .45829333012673699334E-8};\n    if (x < 0.5) {\n        return Math.log(Math.PI / Math.sin(Math.PI * x)) - logGamma(1.0 - x);\n    }\n    if (x >= 100.0) {\n        double w = logGamma(x);\n        double[] s = {0.99999999999999709182, -0.42278433509846713939, -0.04200263503409523553, 0.16653861138229148950, -0.04219773455554433675, -0.00962197152787697356, 0.00721894324666309954, -0.00116516759185906511, -0.00021524167411495097, 0.00012805028238811619, -0.00002013485478078824, -0.00000125049348214267, 0.00000113302723198170, -0.00000020563384169776, 0.00000000611609510448, 0.00000000500200764447, -0.00000000118127457049, 0.00000000010434267117, 0.00000000000778226344, -0.00000000000369680562, 0.00000000000051003703};\n        double z = 1.0 / (x * x);\n        double sum = s[19];\n        for (int i = 18; i >= 0; i--) {\n            sum *= z;\n            sum += s[i];\n        }\n        return w + sum / x + Math.log(x * (1.0 + g / x));\n    }\n    double s = p[0];\n    double y = x;\n    int i;\n    for (i = 1; i < p.length; i++) {\n        s += p[i] / ++y;\n    }\n    s -= Math.log(x);\n    return s;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..9321d1ea9 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,97 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    if (Double.isNaN(a) || Double.isInfinite(a) || Double.isNaN(x) || Double.isInfinite(x) || a <= 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x < 0.0) {\n+        return 0.0;\n+    }\n+    double epsilon = 10e-15;\n+    double big = 4.503599627370496e15;\n+    double bigInv = 2.22044604925031308085e-16;\n+    double gammaSmall = Double.MIN_VALUE / Double.MAX_VALUE / epsilon;\n+    double gammaLarge = Double.MAX_VALUE / epsilon;\n+    double ax = a * Math.log(x) - x - logGamma(a);\n+    if (ax < -709.78271289338399) {\n+        return x < 1.0 ? Double.MAX_VALUE : 0.0;\n+    }\n+    if (x <= 1.0 || x <= a) {\n+        double r2 = a;\n+        double c2 = 1.0;\n+        double ans2 = 1.0;\n+        do {\n+            r2 += 1.0;\n+            c2 *= x / r2;\n+            ans2 += c2;\n+        } while (c2 / ans2 > epsilon);\n+        return ans2 * Math.exp(ax);\n+    }\n+    int i = 0;\n+    double y = 1.0 - a;\n+    double z = x + y + 1.0;\n+    double c = 0.0;\n+    double p = 1.0;\n+    double q = x;\n+    double r = p / q;\n+    double ans1 = r;\n+    do {\n+        c += 1.0;\n+        y += 1.0;\n+        z += 2.0;\n+        double yc = y * c;\n+        double yz = y * z;\n+        double oldAns = ans1;\n+        p = oldAns * yz - p * yc;\n+        q = q * yz - r * yc;\n+        if (q != 0.0) {\n+            r = p / q;\n+            double t = Math.abs((ans1 - r) / r);\n+            ans1 = r;\n+        } else {\n+            r = big;\n+            ans1 = r;\n+        }\n+        i++;\n+        if (i > 300) {\n+            return Double.NaN;\n+        }\n+    } while (Math.abs(ans1 - oldAns) > epsilon * Math.abs(oldAns));\n+    return ans1 * Math.exp(ax) / a;\n+}\n+\n+public static double logGamma(double x) {\n+    if (Double.isNaN(x) || x <= 0.0) {\n+        return Double.NaN;\n+    }\n+    double g = 4.7421875;\n+    double[] p = {0.99999999999999709182, 57.156235665862923517, -59.597960355475491248, 14.136097974741747174, -0.49191381609762019978, .33994649984811888699E-4, .46523628927048575665E-4, -.98374475304879564677E-4, .15808870322491248884E-3, -.21026444172410488319E-3, .21743961811521264320E-3, -.16431810653676389022E-3, .84418223983852743293E-4, -.26190838401581408670E-4, .36899182659531622704E-5};\n+    double q = 0.99999999999999994502;\n+    double[] t = {4.83836122723810047042E-01, -1.47587722994593911752E-01, 6.46249402391333854778E-02, -3.27885410759859649565E-02, 1.79706750811820387126E-02, -.10301619651655518334, .63517214811695652558E-01, -.41973440708459455922, .27669176157231991705, -.20115338771419793026, .14834657492888052633, -.10932366159261230549, .81566945881729523908E-1, -.63175742320136527804E-1, .49421482680149768292E-1, -.38970490178009032277E-1, .30186537789459308204E-1, -.23673372919594035787E-1, .18476001053044440570E-1, -.14469192199734846212E-1, .11346344568843882151E-1, -.89892615788569710793E-2, .70719913790869812086E-2, -.56095140881285850945E-2, .44225066503956136475E-2, -.35122991934172180262E-2, .28284012585346474405E-2, -.22700417248234252991E-2, .18240658604439834624E-2, -.14633484751391236205E-2, .11622307831021863823E-2, -.92132447846071432460E-3, .72879165743580178338E-3, -.57707110815542792869E-3, .45613934858871111120E-3, -.36144771385709410408E-3, .28742169069456328454E-3, -.22898336057563022976E-3, .18235564746272547540E-3, -.14522871776854873804E-3, .11551876900469964039E-3, -.92063430707439423910E-4, .73178867289421006128E-4, -.58255459985186081488E-4, .46232747954361090524E-4, -.36603955794089371304E-4, .29020861193573457534E-4, -.23008143620009828796E-4, .18248449769527458283E-4, -.14498357437886016467E-4, .11573779056788712548E-4, -.92230883137748740417E-5, .73457617176056513977E-5, -.58493651536907121560E-5, .46776457947907447636E-5, -.37344696606796961650E-5, .29731392680318338622E-5, -.23626469284431825429E-5, .18748214288437544116E-5, -.14821908396485883955E-5, .11782982053237278284E-5, -.93672794695065934231E-6, .74524911911363997421E-6, -.59129880224458468366E-6, .46986249238428500113E-6, -.37383972542289026092E-6, .29703263947082833116E-6, -.23523425776379192318E-6, .18698001742426477270E-6, -.14809055137188070631E-6, .11763123242147734509E-6, -.93210239843513911611E-7, .73781613177282294726E-7, -.58395957572703198132E-7, .46253399698242032354E-7, -.36612601395013720916E-7, .29063286085361524257E-7, -.23043654654308434882E-7, .18226924383936521570E-7, -.14446420587157819871E-7, .11487404072211903040E-7, -.91366610208737043248E-8, .72579157435356211814E-8, -.57722026496676636049E-8, .45829333012673699334E-8};\n+    if (x < 0.5) {\n+        return Math.log(Math.PI / Math.sin(Math.PI * x)) - logGamma(1.0 - x);\n+    }\n+    if (x >= 100.0) {\n+        double w = logGamma(x);\n+        double[] s = {0.99999999999999709182, -0.42278433509846713939, -0.04200263503409523553, 0.16653861138229148950, -0.04219773455554433675, -0.00962197152787697356, 0.00721894324666309954, -0.00116516759185906511, -0.00021524167411495097, 0.00012805028238811619, -0.00002013485478078824, -0.00000125049348214267, 0.00000113302723198170, -0.00000020563384169776, 0.00000000611609510448, 0.00000000500200764447, -0.00000000118127457049, 0.00000000010434267117, 0.00000000000778226344, -0.00000000000369680562, 0.00000000000051003703};\n+        double z = 1.0 / (x * x);\n+        double sum = s[19];\n+        for (int i = 18; i >= 0; i--) {\n+            sum *= z;\n+            sum += s[i];\n+        }\n+        return w + sum / x + Math.log(x * (1.0 + g / x));\n+    }\n+    double s = p[0];\n+    double y = x;\n+    int i;\n+    for (i = 1; i < p.length; i++) {\n+        s += p[i] / ++y;\n+    }\n+    s -= Math.log(x);\n+    return s;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}