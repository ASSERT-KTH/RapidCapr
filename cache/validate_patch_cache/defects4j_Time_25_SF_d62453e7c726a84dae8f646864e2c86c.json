{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal = getOffset(instantLocal);\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    \n    if (offsetLocal != offsetAdjusted) {\n        // We're close to a DST boundary\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n        if (nextLocal != nextAdjusted) {\n            // We need to distinguish between a DST overlap and gap by checking if\n            // the instant is within a local gap\n            if (offsetLocal < 0) {\n                long prevLocal = previousTransition(instantAdjusted);\n                int offsetPrevLocal = getOffset(prevLocal);\n                int diff = offsetPrevLocal - offsetLocal;\n                if (diff > 0) {\n                    // We're in a gap and can extend past the limit\n                    long nextGapLocal = nextTransition(prevLocal);\n                    long nextGapAdjusted = nextTransition(instantLocal - offsetLocal - diff);\n                    if (nextGapLocal == nextGapAdjusted) {\n                        return offsetPrevLocal;\n                    }\n                }\n                return offsetLocal;\n            }\n            else {\n                long prevLocal = previousTransition(nextAdjusted - 1); // non-inclusive\n                long prevAdjusted = nextAdjusted + offsetLocal - getOffset(prevLocal);\n                long prevLocal2 = previousTransition(nextLocal - 1); // non-inclusive\n                long prevAdjusted2 = nextLocal + offsetAdjusted - getOffset(prevLocal2);\n                if (prevAdjusted == prevAdjusted2) {\n                    // We're in an overlap and can use either offset. Let's use the earlier one.\n                    int offsetPrevLocal = offsetAdjusted < offsetLocal ? offsetAdjusted : offsetLocal;\n                    return offsetPrevLocal;\n                }\n                return offsetLocal; // Default to the current offset\n            }\n        }\n    }\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..c148c3b3 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,48 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int offsetLocal = getOffset(instantLocal);\n+    final long instantAdjusted = instantLocal - offsetLocal;\n+    final int offsetAdjusted = getOffset(instantAdjusted);\n+    \n+    if (offsetLocal != offsetAdjusted) {\n+        // We're close to a DST boundary\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+        if (nextLocal != nextAdjusted) {\n+            // We need to distinguish between a DST overlap and gap by checking if\n+            // the instant is within a local gap\n+            if (offsetLocal < 0) {\n+                long prevLocal = previousTransition(instantAdjusted);\n+                int offsetPrevLocal = getOffset(prevLocal);\n+                int diff = offsetPrevLocal - offsetLocal;\n+                if (diff > 0) {\n+                    // We're in a gap and can extend past the limit\n+                    long nextGapLocal = nextTransition(prevLocal);\n+                    long nextGapAdjusted = nextTransition(instantLocal - offsetLocal - diff);\n+                    if (nextGapLocal == nextGapAdjusted) {\n+                        return offsetPrevLocal;\n+                    }\n+                }\n+                return offsetLocal;\n+            }\n+            else {\n+                long prevLocal = previousTransition(nextAdjusted - 1); // non-inclusive\n+                long prevAdjusted = nextAdjusted + offsetLocal - getOffset(prevLocal);\n+                long prevLocal2 = previousTransition(nextLocal - 1); // non-inclusive\n+                long prevAdjusted2 = nextLocal + offsetAdjusted - getOffset(prevLocal2);\n+                if (prevAdjusted == prevAdjusted2) {\n+                    // We're in an overlap and can use either offset. Let's use the earlier one.\n+                    int offsetPrevLocal = offsetAdjusted < offsetLocal ? offsetAdjusted : offsetLocal;\n+                    return offsetPrevLocal;\n                 }\n+                return offsetLocal; // Default to the current offset\n             }\n         }\n-        return offsetAdjusted;\n     }\n+    return offsetAdjusted;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.ComparisonFailure: expected:<2007-0[4-01T01:00:00.000-04]:00> but was:<2007-0[3-31T23:00:00.000-05]:00>",
    "test_result": "FAIL"
}