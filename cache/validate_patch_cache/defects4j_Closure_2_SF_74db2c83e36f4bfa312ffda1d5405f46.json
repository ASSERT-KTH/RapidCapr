{
    "patch": "private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n    String functionName, HashMap<String, ObjectType> properties,\n    HashMap<String, ObjectType> currentProperties,\n    ObjectType interfaceType) {\n\n  // Check if the implicit prototype is null or undefined\n  if (interfaceType.getImplicitPrototype() == null ||\n      interfaceType.getImplicitPrototype().isUnknownType()) {\n    return;\n  }\n\n  Set<String> currentPropertyNames =\n      interfaceType.getImplicitPrototype().getAllNonInheritedProps();\n\n  for (String name : currentPropertyNames) {\n    ObjectType oType = properties.get(name);\n    if (oType != null) {\n      JSType interfaceTypePropertyType = interfaceType.getPropertyType(name);\n      if (interfaceTypePropertyType == null) {\n        continue;\n      }\n      if (!interfaceTypePropertyType.isEquivalentTo(\n          oType.getPropertyType(name))) {\n        t.report(n,\n            INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n            functionName, name, oType.toString(),\n            interfaceType.toString());\n      }\n    }\n    currentProperties.put(name, interfaceType);\n  }\n\n  for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n    checkInterfaceConflictProperties(t, n, functionName, properties,\n        currentProperties, iType);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex a0f95db9..92326d02 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1563,34 +1563,44 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * that have been visited\n    * @param interfaceType The super interface that is being visited\n    */\n-  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n-      String functionName, HashMap<String, ObjectType> properties,\n-      HashMap<String, ObjectType> currentProperties,\n-      ObjectType interfaceType) {\n-    ObjectType implicitProto = interfaceType.getImplicitPrototype();\n-    Set<String> currentPropertyNames;\n-      // This can be the case if interfaceType is proxy to a non-existent\n-      // object (which is a bad type annotation, but shouldn't crash).\n-      currentPropertyNames = implicitProto.getOwnPropertyNames();\n-    for (String name : currentPropertyNames) {\n-      ObjectType oType = properties.get(name);\n-      if (oType != null) {\n-        if (!interfaceType.getPropertyType(name).isEquivalentTo(\n-            oType.getPropertyType(name))) {\n-          compiler.report(\n-              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n-                  functionName, name, oType.toString(),\n-                  interfaceType.toString()));\n-        }\n+private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n+    String functionName, HashMap<String, ObjectType> properties,\n+    HashMap<String, ObjectType> currentProperties,\n+    ObjectType interfaceType) {\n+\n+  // Check if the implicit prototype is null or undefined\n+  if (interfaceType.getImplicitPrototype() == null ||\n+      interfaceType.getImplicitPrototype().isUnknownType()) {\n+    return;\n+  }\n+\n+  Set<String> currentPropertyNames =\n+      interfaceType.getImplicitPrototype().getAllNonInheritedProps();\n+\n+  for (String name : currentPropertyNames) {\n+    ObjectType oType = properties.get(name);\n+    if (oType != null) {\n+      JSType interfaceTypePropertyType = interfaceType.getPropertyType(name);\n+      if (interfaceTypePropertyType == null) {\n+        continue;\n+      }\n+      if (!interfaceTypePropertyType.isEquivalentTo(\n+          oType.getPropertyType(name))) {\n+        t.report(n,\n+            INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n+            functionName, name, oType.toString(),\n+            interfaceType.toString());\n       }\n-      currentProperties.put(name, interfaceType);\n-    }\n-    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n-      checkInterfaceConflictProperties(t, n, functionName, properties,\n-          currentProperties, iType);\n     }\n+    currentProperties.put(name, interfaceType);\n   }\n \n+  for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n+    checkInterfaceConflictProperties(t, n, functionName, properties,\n+        currentProperties, iType);\n+  }\n+}\n+\n   /**\n    * Visits a {@link Token#FUNCTION} node.\n    *",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}