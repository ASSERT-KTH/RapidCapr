{
    "patch": "        if (block.isFunction) {\n          // A function may use a variable in a closure or return a value.\n          // We can't assume that it is assigned only once in its lifetime.\n          return false;\n        } else if (block.isLoop) {\n          // If we encounter another loop containing this variable,\n          // then it may be assigned more than once.\n          if (block == ref.getBasicBlock()) {\n            continue;\n          }\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..50bec307 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,18 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          // A function may use a variable in a closure or return a value.\n+          // We can't assume that it is assigned only once in its lifetime.\n+          return false;\n+        } else if (block.isLoop) {\n+          // If we encounter another loop containing this variable,\n+          // then it may be assigned more than once.\n+          if (block == ref.getBasicBlock()) {\n+            continue;\n+          }\n+          return false;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}