{
    "patch": "        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        if (mock instanceof Proxy) {\n            ((Factory) mock).setCallback(0, newFilter);\n        } else {\n            // use javassist to create/subclass instance\n            Enhancer enhancer = new Enhancer();\n            enhancer.setSuperclass(mock.getClass());\n            enhancer.setInterfaces(new Class[] { MockAccess.class });\n            enhancer.setCallbackType(MethodInterceptor.class);\n            Class<?> proxyClass = enhancer.createClass();\n            ((MockAccess) mock).setMockitoInterceptor(newFilter);\n            try {\n                Object newInstance = proxyClass.getConstructor(Object.class).newInstance(mock);\n                ((MockAccess) mock).getMockitoInterceptor().setInstance(newInstance);\n            } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n                e.printStackTrace();\n            }\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..3e58f19bf 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,29 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        if (mock instanceof Proxy) {\n+            ((Factory) mock).setCallback(0, newFilter);\n+        } else {\n+            // use javassist to create/subclass instance\n+            Enhancer enhancer = new Enhancer();\n+            enhancer.setSuperclass(mock.getClass());\n+            enhancer.setInterfaces(new Class[] { MockAccess.class });\n+            enhancer.setCallbackType(MethodInterceptor.class);\n+            Class<?> proxyClass = enhancer.createClass();\n+            ((MockAccess) mock).setMockitoInterceptor(newFilter);\n+            try {\n+                Object newInstance = proxyClass.getConstructor(Object.class).newInstance(mock);\n+                ((MockAccess) mock).getMockitoInterceptor().setInstance(newInstance);\n+            } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n+                e.printStackTrace();\n+            }\n+        }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: multi-catch statement is not supported in -source 1.5",
    "test_result": "ERROR"
}