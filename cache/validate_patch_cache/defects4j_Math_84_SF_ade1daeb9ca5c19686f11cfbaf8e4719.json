{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = contractAndShrink(reflectedSimplex, comparator);\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = contractAndShrink(original, comparator);\n\n                // check convergence\n                return;\n            }\n\n        }\n\n    }\n\n    /**\n     * Contract and shrink the simplex around its best point.\n     *\n     * @param original Simplex to shrink.\n     * @param comparator Comparator to use to sort vertices of the simplex.\n     * @return contracted simplex.\n     */\n    private RealPointValuePair[] contractAndShrink(final RealPointValuePair[] original,\n            final Comparator<RealPointValuePair> comparator) {\n\n        final RealPointValuePair best = original[0];\n        final int dimension = best.getPoint().length;\n\n        // compute the contracted simplex around the best point\n        final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n        contractedSimplex[0] = best;\n        for (int i = 1; i < contractedSimplex.length; ++i) {\n            final double[] contractedPoint = new double[dimension];\n            final double[] originalI = original[i].getPoint();\n            for (int j = 0; j < dimension; ++j) {\n                contractedPoint[j] = best.getPoint()[j] + beta * (originalI[j] - best.getPoint()[j]);\n            }\n            contractedSimplex[i] = new RealPointValuePair(contractedPoint,\n                    Double.NaN,\n                    false);\n        }\n\n        // sort the contracted simplex\n        Arrays.sort(contractedSimplex, comparator);\n\n        return contractedSimplex;\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..ca83a6ccc 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -59,7 +59,7 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     /** {@inheritDoc} */\n     @Override\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n \n@@ -76,9 +76,12 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    // accept the reflected simplex\n+                    simplex = contractAndShrink(reflectedSimplex, comparator);\n                 }\n \n                 return;\n@@ -89,8 +92,9 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                simplex = contractAndShrink(original, comparator);\n \n-            // check convergence\n+                // check convergence\n                 return;\n             }\n \n@@ -98,6 +102,40 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     }\n \n+    /**\n+     * Contract and shrink the simplex around its best point.\n+     *\n+     * @param original Simplex to shrink.\n+     * @param comparator Comparator to use to sort vertices of the simplex.\n+     * @return contracted simplex.\n+     */\n+    private RealPointValuePair[] contractAndShrink(final RealPointValuePair[] original,\n+            final Comparator<RealPointValuePair> comparator) {\n+\n+        final RealPointValuePair best = original[0];\n+        final int dimension = best.getPoint().length;\n+\n+        // compute the contracted simplex around the best point\n+        final RealPointValuePair[] contractedSimplex = new RealPointValuePair[original.length];\n+        contractedSimplex[0] = best;\n+        for (int i = 1; i < contractedSimplex.length; ++i) {\n+            final double[] contractedPoint = new double[dimension];\n+            final double[] originalI = original[i].getPoint();\n+            for (int j = 0; j < dimension; ++j) {\n+                contractedPoint[j] = best.getPoint()[j] + beta * (originalI[j] - best.getPoint()[j]);\n+            }\n+            contractedSimplex[i] = new RealPointValuePair(contractedPoint,\n+                    Double.NaN,\n+                    false);\n+        }\n+\n+        // sort the contracted simplex\n+        Arrays.sort(contractedSimplex, comparator);\n+\n+        return contractedSimplex;\n+\n+    }\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}