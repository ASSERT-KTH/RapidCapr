{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.RETURN:\n          // fix for https://code.google.com/p/closure-compiler/issues/detail?id=1306\n          if (!n.hasChildren()) {\n            Node newNode = n.cloneNode();\n            n.addChildToBack(newNode);\n            compiler.reportCodeChange();\n          }\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..29bb3b14 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1462,6 +1462,14 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n+        case Token.RETURN:\n+          // fix for https://code.google.com/p/closure-compiler/issues/detail?id=1306\n+          if (!n.hasChildren()) {\n+            Node newNode = n.cloneNode();\n+            n.addChildToBack(newNode);\n+            compiler.reportCodeChange();\n+          }\n+          break;\n       }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}