{
    "patch": "private String getRemainingJSDocLine() {\n    String result = stream.getRemainingJSDocLine();\n    if (result == null) {\n        throw new IllegalStateException(\"Recorded bad position information\");\n    }\n    result = result.trim();\n    if (result.isEmpty()) {\n        return null;\n    }\n    if (result.charAt(0) == '*') {\n        result = result.substring(1).trim();\n        if (result.isEmpty()) {\n            return null;\n        }\n    }\n    if (result.charAt(0) == '@') {\n        return null;\n    }\n\n    // Add null check before calling parse\n    if (jsdocParser != null) {\n        jsdocParser.parse();\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..1c51dc60 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,32 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+private String getRemainingJSDocLine() {\n+    String result = stream.getRemainingJSDocLine();\n+    if (result == null) {\n+        throw new IllegalStateException(\"Recorded bad position information\");\n+    }\n+    result = result.trim();\n+    if (result.isEmpty()) {\n+        return null;\n+    }\n+    if (result.charAt(0) == '*') {\n+        result = result.substring(1).trim();\n+        if (result.isEmpty()) {\n+            return null;\n+        }\n+    }\n+    if (result.charAt(0) == '@') {\n+        return null;\n+    }\n+\n+    // Add null check before calling parse\n+    if (jsdocParser != null) {\n+        jsdocParser.parse();\n+    }\n+\n+    return result;\n+}\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}