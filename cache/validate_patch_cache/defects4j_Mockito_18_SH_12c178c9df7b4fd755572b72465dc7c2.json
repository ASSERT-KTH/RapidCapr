{
    "patch": "public ReturnValue execute(ExecutionEvent event) {\n\n    Shell shell = HandlerUtil.getActiveShell(event);\n    ISelection selection = HandlerUtil.getCurrentSelection(event);\n    if (selection instanceof IStructuredSelection && !selection.isEmpty()) {\n        IStructuredSelection structuredSelection = (IStructuredSelection) selection;\n\n        List<String> fileNames = new ArrayList<>();\n        for (Object obj : structuredSelection.toArray()) {\n            if (obj instanceof IFile) {\n                fileNames.add(((IFile) obj).getRawLocation().toOSString());\n            }\n        }\n        \n        return new ReturnValue(fileNames);\n    }\n\n    // Return empty Iterable if the selection is not an instance of IStructuredSelection or is empty\n    return new ReturnValue(Collections.emptyList());\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}