{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    boolean isInnerFunction = false;\n    Node argList = getFunctionArgList(function);\n    List<Node> children = argList == null ? ImmutableList.of() : argList.children();\n    for (int i = 0, size = children.size(); i < size; i++) {\n      Node arg = children.get(i);\n      if (arg.isDefaultValue() || arg.isRest()) {\n        isInnerFunction = true;\n      } else if (!arg.isName()) {\n        Preconditions.checkState(arg.isStringKey(), arg);\n        isInnerFunction = true;\n        arg.getFirstChild().setString(EMPTY_STRING);\n      } else {\n        Var var = fnScope.getVar(arg.getString());\n        if (var == null || !referenced.contains(var)) {\n          arg.setString(EMPTY_STRING);\n        }\n      }\n    }\n\n    if (isInnerFunction) {\n      InlineFunctionDepthTracker.push(depthTracker, function);\n      try {\n        Node innerFunction = NodeUtil.getFunctionBody(function).getFirstChild();\n        Preconditions.checkState(innerFunction != null && innerFunction.isFunction(), function);\n        Scope innerFnScope = getEnclosingScope(innerFunction);\n        List<Node> innerFnParams =\n            getFunctionParameters(innerFunction.getFirstChild().getNext());\n        List<Var> innerFnReferencedVars = findReferencedVars(innerFnScope);\n        for (int i = 0, size = innerFnParams.size(); i < size; i++) {\n          Node arg = innerFnParams.get(i);\n          if (arg.isDefaultValue() || arg.isRest()) {\n            continue;\n          }\n          Var var = innerFnScope.getVar(arg.getString());\n          if (var == null || !innerFnReferencedVars.contains(var)) {\n            arg.setString(EMPTY_STRING);\n          }\n        }\n      } finally {\n        InlineFunctionDepthTracker.pop(depthTracker, function);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..5b7c9d24 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -367,16 +367,6 @@ class RemoveUnusedVars\n    * @param fnScope The scope inside the function\n    */\n   private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n     Node function = fnScope.getRootNode();\n \n     Preconditions.checkState(function.isFunction());\n@@ -385,23 +375,47 @@ class RemoveUnusedVars\n       return;\n     }\n \n+    boolean isInnerFunction = false;\n     Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+    List<Node> children = argList == null ? ImmutableList.of() : argList.children();\n+    for (int i = 0, size = children.size(); i < size; i++) {\n+      Node arg = children.get(i);\n+      if (arg.isDefaultValue() || arg.isRest()) {\n+        isInnerFunction = true;\n+      } else if (!arg.isName()) {\n+        Preconditions.checkState(arg.isStringKey(), arg);\n+        isInnerFunction = true;\n+        arg.getFirstChild().setString(EMPTY_STRING);\n+      } else {\n+        Var var = fnScope.getVar(arg.getString());\n+        if (var == null || !referenced.contains(var)) {\n+          arg.setString(EMPTY_STRING);\n+        }\n+      }\n+    }\n+\n+    if (isInnerFunction) {\n+      InlineFunctionDepthTracker.push(depthTracker, function);\n+      try {\n+        Node innerFunction = NodeUtil.getFunctionBody(function).getFirstChild();\n+        Preconditions.checkState(innerFunction != null && innerFunction.isFunction(), function);\n+        Scope innerFnScope = getEnclosingScope(innerFunction);\n+        List<Node> innerFnParams =\n+            getFunctionParameters(innerFunction.getFirstChild().getNext());\n+        List<Var> innerFnReferencedVars = findReferencedVars(innerFnScope);\n+        for (int i = 0, size = innerFnParams.size(); i < size; i++) {\n+          Node arg = innerFnParams.get(i);\n+          if (arg.isDefaultValue() || arg.isRest()) {\n+            continue;\n+          }\n+          Var var = innerFnScope.getVar(arg.getString());\n+          if (var == null || !innerFnReferencedVars.contains(var)) {\n+            arg.setString(EMPTY_STRING);\n+          }\n         }\n+      } finally {\n+        InlineFunctionDepthTracker.pop(depthTracker, function);\n       }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}