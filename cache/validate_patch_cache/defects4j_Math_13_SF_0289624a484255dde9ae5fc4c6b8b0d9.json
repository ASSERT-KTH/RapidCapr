{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int MAX_ROWS_COLS = 10000;\n    final int rows = m.getRowDimension();\n    final int cols = m.getColumnDimension();\n\n    if (rows > MAX_ROWS_COLS || cols > MAX_ROWS_COLS) {\n        throw new RuntimeException(\"Matrix size exceeds maximum limit. Please use a smaller matrix.\");\n    }\n\n    long availableMemory = Runtime.getRuntime().maxMemory() - (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory());\n    long elementSize = 8L; // Size of a double in bytes\n    long maxElements = availableMemory / elementSize / 3L; // Keep 1/3 of memory free for other objects\n    if ((long) rows * cols > maxElements) {\n        double factor = Math.sqrt((double) maxElements / (rows * cols));\n        RealMatrix resized = MatrixUtils.createRealMatrix(rows, cols);\n        for (int i = 0; i < rows; i++) {\n            double[] row = m.getRow(i);\n            for (int j = 0; j < cols; j++) {\n                resized.setEntry(i, j, row[j] * factor);\n            }\n        }\n        m = resized;\n    }\n\n    EigenDecomposition dec;\n    try {\n        dec = new EigenDecomposition(m);\n    } catch (Exception e) {\n        throw new IllegalArgumentException(\"Matrix is not positive definite\", e);\n    }\n\n    double[] eigenvalues = dec.getRealEigenvalues();\n    for (int i = 0; i < eigenvalues.length; i++) {\n        if (eigenvalues[i] < 0) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        }\n        eigenvalues[i] = Math.sqrt(eigenvalues[i]);\n    }\n\n    RealMatrix sqrtDiag = MatrixUtils.createRealDiagonalMatrix(eigenvalues);\n    return dec.getV().multiply(sqrtDiag).multiply(dec.getVT());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..296ba7a56 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,46 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int MAX_ROWS_COLS = 10000;\n+    final int rows = m.getRowDimension();\n+    final int cols = m.getColumnDimension();\n+\n+    if (rows > MAX_ROWS_COLS || cols > MAX_ROWS_COLS) {\n+        throw new RuntimeException(\"Matrix size exceeds maximum limit. Please use a smaller matrix.\");\n+    }\n+\n+    long availableMemory = Runtime.getRuntime().maxMemory() - (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory());\n+    long elementSize = 8L; // Size of a double in bytes\n+    long maxElements = availableMemory / elementSize / 3L; // Keep 1/3 of memory free for other objects\n+    if ((long) rows * cols > maxElements) {\n+        double factor = Math.sqrt((double) maxElements / (rows * cols));\n+        RealMatrix resized = MatrixUtils.createRealMatrix(rows, cols);\n+        for (int i = 0; i < rows; i++) {\n+            double[] row = m.getRow(i);\n+            for (int j = 0; j < cols; j++) {\n+                resized.setEntry(i, j, row[j] * factor);\n+            }\n+        }\n+        m = resized;\n+    }\n+\n+    EigenDecomposition dec;\n+    try {\n+        dec = new EigenDecomposition(m);\n+    } catch (Exception e) {\n+        throw new IllegalArgumentException(\"Matrix is not positive definite\", e);\n+    }\n+\n+    double[] eigenvalues = dec.getRealEigenvalues();\n+    for (int i = 0; i < eigenvalues.length; i++) {\n+        if (eigenvalues[i] < 0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        }\n+        eigenvalues[i] = Math.sqrt(eigenvalues[i]);\n     }\n+\n+    RealMatrix sqrtDiag = MatrixUtils.createRealDiagonalMatrix(eigenvalues);\n+    return dec.getV().multiply(sqrtDiag).multiply(dec.getVT());\n+}\n }",
    "result_reason": "java.lang.RuntimeException: Matrix size exceeds maximum limit. Please use a smaller matrix.",
    "test_result": "FAIL"
}