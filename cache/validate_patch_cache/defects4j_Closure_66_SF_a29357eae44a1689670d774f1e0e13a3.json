{
    "patch": "public static double getTypedPercent(String[] jsonStrings) {\n  int totalItems = 0;\n  int matchedItems = 0;\n\n  for (String jsonString : jsonStrings) {\n    JSONObject jsonObject = new JSONObject(jsonString);\n    totalItems++;\n\n    if (jsonObject.has(\"type\") && jsonObject.getString(\"type\").equals(\"typed\")) {\n      matchedItems++;\n    } else if (jsonObject.isNull(\"type\")) {\n      // Do nothing\n    } else {\n      // Mismatched item other than null\n      totalItems--;\n    }\n  }\n\n  if (totalItems == 0) {\n    return 0;\n  } else {\n    return ((double) matchedItems / (double) totalItems) * 100.0;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..01158319 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,30 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String[] jsonStrings) {\n+  int totalItems = 0;\n+  int matchedItems = 0;\n+\n+  for (String jsonString : jsonStrings) {\n+    JSONObject jsonObject = new JSONObject(jsonString);\n+    totalItems++;\n+\n+    if (jsonObject.has(\"type\") && jsonObject.getString(\"type\").equals(\"typed\")) {\n+      matchedItems++;\n+    } else if (jsonObject.isNull(\"type\")) {\n+      // Do nothing\n+    } else {\n+      // Mismatched item other than null\n+      totalItems--;\n+    }\n+  }\n+\n+  if (totalItems == 0) {\n+    return 0;\n+  } else {\n+    return ((double) matchedItems / (double) totalItems) * 100.0;\n+  }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}