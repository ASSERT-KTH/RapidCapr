{
    "patch": "public EqualsBuilder append(Object lhs, Object rhs) {\n    if (isEquals == false) {\n        return this;\n    }\n    if (lhs == rhs) {\n        return this;\n    }\n    if (lhs == null || rhs == null) {\n        this.setEquals(false);\n        return this;\n    }\n    Class<?> lhsClass = lhs.getClass();\n    if (!lhsClass.isArray()) {\n        // The simple case, not an array, just test the element\n        isEquals = lhs.equals(rhs);\n    } else if (!rhs.getClass().isArray()) {\n        // rhs is not an array, lhs is, they can't be equal\n        this.setEquals(false);\n        return this;\n    } else if (lhsClass != rhs.getClass()) {\n        // Here when we compare different dimensions, for example: a boolean[][] to a boolean[]\n        this.setEquals(false);\n    } else {\n        // Both lhs and rhs are arrays of the same type\n\n        int lhsLength = Array.getLength(lhs);\n        int rhsLength = Array.getLength(rhs);\n\n        if (lhsLength != rhsLength) {\n            // Arrays have different length, they can't be equal\n            this.setEquals(false);\n            return this;\n        }\n\n        // Default check for equality using Arrays.equals method\n        isEquals = Arrays.equals((Object[]) lhs, (Object[]) rhs);\n\n        if (!isEquals) {\n            // Arrays are not equal, we need to check each element\n\n            for (int i = 0; i < lhsLength; i++) {\n                Object lhsElement = Array.get(lhs, i);\n                Object rhsElement = Array.get(rhs, i);\n\n                // Append each element of the array recursively\n                append(lhsElement, rhsElement);\n\n                if (!isEquals) {\n                    return this;\n                }\n            }\n        }\n    }\n    return this;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..c0eb41b0 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,49 +364,61 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n-    public EqualsBuilder append(Object lhs, Object rhs) {\n-        if (isEquals == false) {\n-            return this;\n-        }\n-        if (lhs == rhs) {\n-            return this;\n-        }\n-        if (lhs == null || rhs == null) {\n+public EqualsBuilder append(Object lhs, Object rhs) {\n+    if (isEquals == false) {\n+        return this;\n+    }\n+    if (lhs == rhs) {\n+        return this;\n+    }\n+    if (lhs == null || rhs == null) {\n+        this.setEquals(false);\n+        return this;\n+    }\n+    Class<?> lhsClass = lhs.getClass();\n+    if (!lhsClass.isArray()) {\n+        // The simple case, not an array, just test the element\n+        isEquals = lhs.equals(rhs);\n+    } else if (!rhs.getClass().isArray()) {\n+        // rhs is not an array, lhs is, they can't be equal\n+        this.setEquals(false);\n+        return this;\n+    } else if (lhsClass != rhs.getClass()) {\n+        // Here when we compare different dimensions, for example: a boolean[][] to a boolean[]\n+        this.setEquals(false);\n+    } else {\n+        // Both lhs and rhs are arrays of the same type\n+\n+        int lhsLength = Array.getLength(lhs);\n+        int rhsLength = Array.getLength(rhs);\n+\n+        if (lhsLength != rhsLength) {\n+            // Arrays have different length, they can't be equal\n             this.setEquals(false);\n             return this;\n         }\n-        Class lhsClass = lhs.getClass();\n-        if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n-            this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n-        } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n-        } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n-        } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n-        } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n-        } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n-        } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n-        } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n-        } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+\n+        // Default check for equality using Arrays.equals method\n+        isEquals = Arrays.equals((Object[]) lhs, (Object[]) rhs);\n+\n+        if (!isEquals) {\n+            // Arrays are not equal, we need to check each element\n+\n+            for (int i = 0; i < lhsLength; i++) {\n+                Object lhsElement = Array.get(lhs, i);\n+                Object rhsElement = Array.get(rhs, i);\n+\n+                // Append each element of the array recursively\n+                append(lhsElement, rhsElement);\n+\n+                if (!isEquals) {\n+                    return this;\n+                }\n+            }\n         }\n-        return this;\n     }\n+    return this;\n+}\n \n     /**\n      * <p>",
    "result_reason": "error: generics are not supported in -source 1.3",
    "test_result": "ERROR"
}