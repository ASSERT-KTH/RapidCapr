{
    "patch": "public double[] fit() {\n    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n    if (guess.length <= 0) {\n        throw new IllegalArgumentException(\"Invalid guess length.\");\n    }\n    double[] result;\n    try {\n        result = fit(new Gaussian.Parametric(), guess);\n    } catch (NotStrictlyPositiveException e) {\n        result = new double[] { Double.NaN };\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..51eb4d307 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -116,10 +116,19 @@ public class GaussianFitter extends CurveFitter {\n      * @return the parameters of the Gaussian function that best fits the\n      * observed points (in the same order as above).\n      */\n-    public double[] fit() {\n-        final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+public double[] fit() {\n+    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n+    if (guess.length <= 0) {\n+        throw new IllegalArgumentException(\"Invalid guess length.\");\n     }\n+    double[] result;\n+    try {\n+        result = fit(new Gaussian.Parametric(), guess);\n+    } catch (NotStrictlyPositiveException e) {\n+        result = new double[] { Double.NaN };\n+    }\n+    return result;\n+}\n \n     /**\n      * Guesses the parameters {@code norm}, {@code mean}, and {@code sigma}",
    "result_reason": "java.lang.ArrayIndexOutOfBoundsException: 1",
    "test_result": "FAIL"
}