{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n\n    boolean changed = false;\n    ImmutableList.Builder<JSType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (JSType iface : implementedInterfaces) {\n      JSType resolvedIface = safeResolve(iface, t, scope);\n      if (resolvedIface == null) {\n        continue;\n      }\n      if (resolvedIface instanceof UnionType) {\n        String errorMessage = String.format(\n            \"'%s' does not implement the '%s' interface. The resolved type '%s' is not an ObjectType.\",\n            getName(), iface.toString(), resolvedIface.toString());\n        t.report(JSError.make(iface.getSourceFileName(), iface.getSourceLineNumber(),\n                INVALID_INTERFACE_PROP, errorMessage));\n        continue;\n      }\n      if (!(resolvedIface instanceof ObjectType)) {\n        t.report(JSError.make(iface.getSourceFileName(), iface.getSourceLineNumber(),\n                INVALID_INTERFACE_PROP, \"'%s' does not implement the '%s' interface. %s\", getName(),\n                iface.toString(), ((JSTypeNative) resolvedIface).name()));\n        continue;\n      }\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n    return super.resolveInternal(t, scope);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..8d1037c4 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -871,10 +871,27 @@ public class FunctionType extends PrototypeObjectType {\n     typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n \n     boolean changed = false;\n-    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n+    ImmutableList.Builder<JSType> resolvedInterfaces =\n         ImmutableList.builder();\n-    for (ObjectType iface : implementedInterfaces) {\n-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n+    for (JSType iface : implementedInterfaces) {\n+      JSType resolvedIface = safeResolve(iface, t, scope);\n+      if (resolvedIface == null) {\n+        continue;\n+      }\n+      if (resolvedIface instanceof UnionType) {\n+        String errorMessage = String.format(\n+            \"'%s' does not implement the '%s' interface. The resolved type '%s' is not an ObjectType.\",\n+            getName(), iface.toString(), resolvedIface.toString());\n+        t.report(JSError.make(iface.getSourceFileName(), iface.getSourceLineNumber(),\n+                INVALID_INTERFACE_PROP, errorMessage));\n+        continue;\n+      }\n+      if (!(resolvedIface instanceof ObjectType)) {\n+        t.report(JSError.make(iface.getSourceFileName(), iface.getSourceLineNumber(),\n+                INVALID_INTERFACE_PROP, \"'%s' does not implement the '%s' interface. %s\", getName(),\n+                iface.toString(), ((JSTypeNative) resolvedIface).name()));\n+        continue;\n+      }\n       resolvedInterfaces.add(resolvedIface);\n       changed |= (resolvedIface != iface);\n     }\n@@ -887,7 +904,6 @@ public class FunctionType extends PrototypeObjectType {\n         subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n       }\n     }\n-\n     return super.resolveInternal(t, scope);\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}