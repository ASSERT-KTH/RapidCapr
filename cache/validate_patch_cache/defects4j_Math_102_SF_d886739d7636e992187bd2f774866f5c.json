{
    "patch": "public double chiSquare(double[] expected, long[] observed)\n        throws IllegalArgumentException {\n    if ((expected.length < 2) || (expected.length != observed.length)) {\n        throw new IllegalArgumentException(\n                \"observed, expected array lengths incorrect\");\n    }\n    if (!isPositive(expected) || !isNonNegative(observed)) {\n        throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n    }\n    double sumSq = 0.0d;\n    for (int i = 0; i < observed.length; i++) {\n        if (expected[i] == 0 && observed[i] != 0) {\n            throw new IllegalArgumentException(\"observed cannot be non-zero when expected is zero\");\n        }\n        if (Double.isInfinite(expected[i]) || Double.isNaN(expected[i])) {\n            throw new IllegalArgumentException(\"All values in the expected array must be finite\");\n        }\n\n        double dev = observed[i] - expected[i];\n        sumSq += (dev * dev) / expected[i];\n\n        if (Double.isInfinity(sumSq)) {\n            // in case of Infinity, set the sumSq value to a high value\n            sumSq = Double.MAX_VALUE;\n        }\n    }\n    return sumSq;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\nindex c87b0101f..9bb400550 100644\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n@@ -61,24 +61,35 @@ public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n      * @throws IllegalArgumentException if preconditions are not met\n      * or length is less than 2\n      */\n-    public double chiSquare(double[] expected, long[] observed)\n+public double chiSquare(double[] expected, long[] observed)\n         throws IllegalArgumentException {\n-        if ((expected.length < 2) || (expected.length != observed.length)) {\n-            throw new IllegalArgumentException(\n-                    \"observed, expected array lengths incorrect\");\n-        }\n-        if (!isPositive(expected) || !isNonNegative(observed)) {\n-            throw new IllegalArgumentException(\n+    if ((expected.length < 2) || (expected.length != observed.length)) {\n+        throw new IllegalArgumentException(\n+                \"observed, expected array lengths incorrect\");\n+    }\n+    if (!isPositive(expected) || !isNonNegative(observed)) {\n+        throw new IllegalArgumentException(\n                 \"observed counts must be non-negative and expected counts must be postive\");\n+    }\n+    double sumSq = 0.0d;\n+    for (int i = 0; i < observed.length; i++) {\n+        if (expected[i] == 0 && observed[i] != 0) {\n+            throw new IllegalArgumentException(\"observed cannot be non-zero when expected is zero\");\n         }\n-        double sumSq = 0.0d;\n-        double dev = 0.0d;\n-        for (int i = 0; i < observed.length; i++) {\n-                dev = ((double) observed[i] - expected[i]);\n-                sumSq += dev * dev / expected[i];\n+        if (Double.isInfinite(expected[i]) || Double.isNaN(expected[i])) {\n+            throw new IllegalArgumentException(\"All values in the expected array must be finite\");\n+        }\n+\n+        double dev = observed[i] - expected[i];\n+        sumSq += (dev * dev) / expected[i];\n+\n+        if (Double.isInfinity(sumSq)) {\n+            // in case of Infinity, set the sumSq value to a high value\n+            sumSq = Double.MAX_VALUE;\n         }\n-        return sumSq;\n     }\n+    return sumSq;\n+}\n \n     /**\n      * {@inheritDoc}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}