{
    "patch": "  private void inferPropertiesDeclaredOnJSDoc(NodeTraversal t, Node declNode, JSDocInfo docInfo,\n      RawNominalType ownerType, ObjectKind target, JSDocInfo scopeJsDoc) {\n    if (docInfo == null) {\n      return;\n    }\n    Node jsDocNode = docInfo.getNode();\n    if (jsDocNode == null) {\n      return;\n    }\n    ObjectType scope = ObjectType.cast(t.getScope().getObjectScope());\n    if (scope == null) {\n      return;\n    }\n\n    JSDocInfo.Visibility docVisibility = JSDocInfo.Visibility.INHERITED;\n    if (declNode.isVar() || declNode.isLet() || declNode.isConst()\n        || NodeUtil.isFunctionDeclaration(declNode)) {\n      docVisibility = docInfo.getVisibility();\n    }\n    if (docVisibility == JSDocInfo.Visibility.PRIVATE) {\n      diagnosePrivate(docInfo, jsDocNode);\n    }\n\n    if (docInfo.containsDeclaration()) {\n      JSDocInfo resolvedInfo = docInfo.resolveMaybeType(docInfo, scopeJsDoc);\n      if (resolvedInfo != null) {\n        FunctionType methodType = resolvedInfo.getType().toMaybeFunctionType();\n        if (methodType != null) {\n          target.handleObj(createFunctionFromJSDoc(ownerType, methodType, resolvedInfo, scope));\n          return;\n        }\n      }\n    }\n\n    JSType allowedTypeInfo = docInfo.getAllowedType();\n    JSType unknown = getNativeType(JSTypeNative.UNKNOWN_TYPE);\n    if (allowedTypeInfo != null && !allowedTypeInfo.equals(unknown)) {\n      JSType narrowedType = allowedTypeInfo.restrictByStrictSubtype(getElementJSType());\n      if (narrowedType.isSubtypeOf(getElementJSType())\n          && !narrowedType.equals(unknown)) {\n        JSDocInfo.Builder builder = JSDocInfo.builder();\n        builder.recordType(allowedTypeInfo);\n        builder.recordTypeVisibility(JSDocInfo.Visibility.PUBLIC);\n        markEmittingType(builder, EmittingContext.WITHIN_GENERICS);\n        target.handleObj(createPropertyFromJSDoc(ownerType, builder.build(), scope));\n      }\n    }\n\n    JSType type = getJSType(jsDocNode);\n    if (type != null && type.isRecordType()) {\n      for (String prop : type.getOwnPropertyNames()) {\n        JSType propType = type.getPropertyType(prop);\n        target.handleObj(createPropertyFromJSDoc(ownerType, jsDocNode, prop, propType, scope));\n      }\n    }\n\n    if (docInfo.hasEnumParameterType()) {\n      JSType elementType = JSType.toMaybeElementType(type);\n      if (elementType != null && elementType.isEnumType() &&\n          !docInfo.hasTypedefType() && docInfo.getEnumParameterType() == null) {\n        convertEnumToObjType(ownerType, jsDocNode, elementType.toMaybeEnumType(), target, scope);\n      }\n    }\n\n    if (docInfo.isConstructor() && ownerType != null) {\n      if (ownerType.isLegacyNamespace()) {\n        inferConstructorOnNamespace(declNode, ownerType, scope);\n      } else {\n        registerConstructorAndInterfaceMethods(ownerType.getInstanceAsJSType(), jsDocNode);\n      }\n    }\n  }\n\n  /**\n   * If we access a property of a symbol, then that symbol is not\n   * null or undefined.\n   */\n  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.isQualifiedName()) {\n      JSType type = getJSType(n);\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (type != narrowed) {\n        scope = narrowScope(scope, n, narrowed);\n      }\n\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      ObjectType constraintObj =\n          ObjectType.cast(n.getFirstChild().getJSDocInfo().getType().restrictByNotNullOrUndefined());\n      if (constraintObj != null && constraintObj.isRecordType()) {\n        if (objType != null) {\n          for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            if (!objType.hasProperty(prop)) {\n              objType.defineInferredProperty(prop, propType, null);\n            }\n          }\n        }\n\n        if (getJSType(n.getParent()).isFunctionType()) {\n          getFunctionScope().declare(\"arguments\", type, true);\n        }\n      }\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..9bc4ac75 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,22 +1118,112 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n+  private void inferPropertiesDeclaredOnJSDoc(NodeTraversal t, Node declNode, JSDocInfo docInfo,\n+      RawNominalType ownerType, ObjectKind target, JSDocInfo scopeJsDoc) {\n+    if (docInfo == null) {\n+      return;\n+    }\n+    Node jsDocNode = docInfo.getNode();\n+    if (jsDocNode == null) {\n+      return;\n+    }\n+    ObjectType scope = ObjectType.cast(t.getScope().getObjectScope());\n+    if (scope == null) {\n+      return;\n+    }\n+\n+    JSDocInfo.Visibility docVisibility = JSDocInfo.Visibility.INHERITED;\n+    if (declNode.isVar() || declNode.isLet() || declNode.isConst()\n+        || NodeUtil.isFunctionDeclaration(declNode)) {\n+      docVisibility = docInfo.getVisibility();\n+    }\n+    if (docVisibility == JSDocInfo.Visibility.PRIVATE) {\n+      diagnosePrivate(docInfo, jsDocNode);\n+    }\n+\n+    if (docInfo.containsDeclaration()) {\n+      JSDocInfo resolvedInfo = docInfo.resolveMaybeType(docInfo, scopeJsDoc);\n+      if (resolvedInfo != null) {\n+        FunctionType methodType = resolvedInfo.getType().toMaybeFunctionType();\n+        if (methodType != null) {\n+          target.handleObj(createFunctionFromJSDoc(ownerType, methodType, resolvedInfo, scope));\n+          return;\n+        }\n+      }\n+    }\n+\n+    JSType allowedTypeInfo = docInfo.getAllowedType();\n+    JSType unknown = getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+    if (allowedTypeInfo != null && !allowedTypeInfo.equals(unknown)) {\n+      JSType narrowedType = allowedTypeInfo.restrictByStrictSubtype(getElementJSType());\n+      if (narrowedType.isSubtypeOf(getElementJSType())\n+          && !narrowedType.equals(unknown)) {\n+        JSDocInfo.Builder builder = JSDocInfo.builder();\n+        builder.recordType(allowedTypeInfo);\n+        builder.recordTypeVisibility(JSDocInfo.Visibility.PUBLIC);\n+        markEmittingType(builder, EmittingContext.WITHIN_GENERICS);\n+        target.handleObj(createPropertyFromJSDoc(ownerType, builder.build(), scope));\n+      }\n+    }\n+\n+    JSType type = getJSType(jsDocNode);\n+    if (type != null && type.isRecordType()) {\n+      for (String prop : type.getOwnPropertyNames()) {\n+        JSType propType = type.getPropertyType(prop);\n+        target.handleObj(createPropertyFromJSDoc(ownerType, jsDocNode, prop, propType, scope));\n+      }\n+    }\n+\n+    if (docInfo.hasEnumParameterType()) {\n+      JSType elementType = JSType.toMaybeElementType(type);\n+      if (elementType != null && elementType.isEnumType() &&\n+          !docInfo.hasTypedefType() && docInfo.getEnumParameterType() == null) {\n+        convertEnumToObjType(ownerType, jsDocNode, elementType.toMaybeEnumType(), target, scope);\n+      }\n+    }\n+\n+    if (docInfo.isConstructor() && ownerType != null) {\n+      if (ownerType.isLegacyNamespace()) {\n+        inferConstructorOnNamespace(declNode, ownerType, scope);\n+      } else {\n+        registerConstructorAndInterfaceMethods(ownerType.getInstanceAsJSType(), jsDocNode);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * If we access a property of a symbol, then that symbol is not\n+   * null or undefined.\n+   */\n+  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n+    if (n.isQualifiedName()) {\n+      JSType type = getJSType(n);\n+      JSType narrowed = type.restrictByNotNullOrUndefined();\n+      if (type != narrowed) {\n+        scope = narrowScope(scope, n, narrowed);\n+      }\n+\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n+      ObjectType constraintObj =\n+          ObjectType.cast(n.getFirstChild().getJSDocInfo().getType().restrictByNotNullOrUndefined());\n+      if (constraintObj != null && constraintObj.isRecordType()) {\n+        if (objType != null) {\n+          for (String prop : constraintObj.getOwnPropertyNames()) {\n+            JSType propType = constraintObj.getPropertyType(prop);\n             if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+              objType.defineInferredProperty(prop, propType, null);\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n+\n+        if (getJSType(n.getParent()).isFunctionType()) {\n+          getFunctionScope().declare(\"arguments\", type, true);\n+        }\n       }\n     }\n+    return scope;\n+  }\n+    }\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}