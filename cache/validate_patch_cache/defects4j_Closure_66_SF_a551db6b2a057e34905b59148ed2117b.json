{
    "patch": "public static double getTypedPercent(JsonStructure json) {\n    double total = 0.0;\n    double typed = 0.0;\n    for (Member member : json.getMembers()) {\n        total += member.getValue().getValueType().equals(ValueType.NULL) ? 0 : 1;\n        typed += member.getValue().getValueType().equals(ValueType.OBJECT) ? getTypedPercent((JsonObject) member.getValue()) : 1;\n    }\n    return total == 0 ? 100.0 : typed / total * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..a66cb8b1 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,15 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JsonStructure json) {\n+    double total = 0.0;\n+    double typed = 0.0;\n+    for (Member member : json.getMembers()) {\n+        total += member.getValue().getValueType().equals(ValueType.NULL) ? 0 : 1;\n+        typed += member.getValue().getValueType().equals(ValueType.OBJECT) ? getTypedPercent((JsonObject) member.getValue()) : 1;\n+    }\n+    return total == 0 ? 100.0 : typed / total * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}