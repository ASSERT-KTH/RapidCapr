{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    final double epsilon = 1e-15;\n    final double maxIterations = 1000;\n\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    } else if (x == 0.0) {\n        return 0.0;\n    } else if (x >= a + 1.0) {\n        // Asymptotic series for large x, equation 6.5.32:\n        return 1.0 - regularizedGammaQSeries(a, x);\n    } else {\n        // Series representation of the incomplete gamma ratio, equation 6.5.31:\n        double incompleteGammaRatio = regularizedGammaPSeries(a, x);\n        double sum = incompleteGammaRatio;\n        for (int k = 1; k < maxIterations; ++k) {\n            incompleteGammaRatio *= x / (a + k);\n            sum += incompleteGammaRatio;\n            if (Math.abs(incompleteGammaRatio) < epsilon * Math.abs(sum)) {\n                return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n            }\n        }\n        throw new ArithmeticException(\"Max iterations exceeded in regularizedGammaP\");\n    }\n}\n\nprivate static double regularizedGammaPSeries(double a, double x) {\n    final double epsilon = 1e-15;\n    final double maxIterations = 1000;\n\n    double incompleteGammaRatio = Math.pow(x, a) * Math.exp(-x) / gamma(a + 1.0);\n    double sum = incompleteGammaRatio;\n    for (int k = 1; k < maxIterations; ++k) {\n        incompleteGammaRatio *= x / (a + k);\n        sum += incompleteGammaRatio;\n        if (Math.abs(incompleteGammaRatio) < epsilon * Math.abs(sum)) {\n            return sum;\n        }\n    }\n    return sum;\n}\n\nprivate static double regularizedGammaQSeries(double a, double x) {\n    final double epsilon = 1e-15;\n    final double maxIterations = 1000;\n\n    double incompleteGammaRatio = 1.0 / gamma(a);\n    double sum = incompleteGammaRatio;\n    double term = incompleteGammaRatio;\n    for (int k = 1; k < maxIterations; ++k) {\n        term *= -x / (a + k);\n        incompleteGammaRatio = term / (a + k);\n        sum += incompleteGammaRatio;\n        if (Math.abs(incompleteGammaRatio) < epsilon * Math.abs(sum)) {\n            return sum;\n        }\n    }\n    return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n}\n\nprivate static double logGamma(double x) {\n    if (x < 0.0) {\n        return Double.NaN;\n    }\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 101.19539853003;\n    ser -= 4.2313330701605 * Math.log(x + 15.0);\n    ser += 4.2313330701605 * Math.log(x + 14.0);\n    ser -= 2.7161100344362 * Math.log(x + 13.0);\n    ser += 3.5109400746128 * Math.log(x + 12.0);\n    ser -= 1.2656127102127 * Math.log(x + 11.0);\n    ser += 0.2089395109154 * Math.log(x + 10.0);\n    ser -= 0.0822614793322 * Math.log(x + 9.0);\n    ser -= 0.0809836098074 * Math.log(x + 8.0);\n    ser += 0.0119848499292 * Math.log(x + 7.0);\n    ser -= 0.0027715284637 * Math.log(x + 6.0);\n    ser -= 0.0002422002062 * Math.log(x + 5.0);\n    ser += 0.0001500917627 * Math.log(x + 4.0);\n    ser -= 0.0000039367274 * Math.log(x + 3.0);\n    return tmp + Math.log(ser * Math.sqrt(2.0 * Math.PI) / x);\n}\n\nprivate static double gamma(double x) {\n    final double[] coefficients = {\n            0.99999999999980993, 676.5203681218851, -1259.1392167224028,\n            771.32342877765313, -176.61502916214059, 12.50734324009056,\n            -0.13857109526572012, 9.9843695780195716e-6, 1.5056327351493116e-7\n    };\n    double sum = coefficients[0];\n    for (int i = 1; i < coefficients.length; ++i) {\n        sum += coefficients[i] / (x + i);\n    }\n    double tmp = x + 7.5;\n    return Math.sqrt(2.0 * Math.PI) * Math.pow(tmp, x + 0.5) * Math.exp(-tmp) * sum;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..8160512c0 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,101 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    final double epsilon = 1e-15;\n+    final double maxIterations = 1000;\n+\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    } else if (x == 0.0) {\n+        return 0.0;\n+    } else if (x >= a + 1.0) {\n+        // Asymptotic series for large x, equation 6.5.32:\n+        return 1.0 - regularizedGammaQSeries(a, x);\n+    } else {\n+        // Series representation of the incomplete gamma ratio, equation 6.5.31:\n+        double incompleteGammaRatio = regularizedGammaPSeries(a, x);\n+        double sum = incompleteGammaRatio;\n+        for (int k = 1; k < maxIterations; ++k) {\n+            incompleteGammaRatio *= x / (a + k);\n+            sum += incompleteGammaRatio;\n+            if (Math.abs(incompleteGammaRatio) < epsilon * Math.abs(sum)) {\n+                return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+            }\n+        }\n+        throw new ArithmeticException(\"Max iterations exceeded in regularizedGammaP\");\n+    }\n+}\n+\n+private static double regularizedGammaPSeries(double a, double x) {\n+    final double epsilon = 1e-15;\n+    final double maxIterations = 1000;\n+\n+    double incompleteGammaRatio = Math.pow(x, a) * Math.exp(-x) / gamma(a + 1.0);\n+    double sum = incompleteGammaRatio;\n+    for (int k = 1; k < maxIterations; ++k) {\n+        incompleteGammaRatio *= x / (a + k);\n+        sum += incompleteGammaRatio;\n+        if (Math.abs(incompleteGammaRatio) < epsilon * Math.abs(sum)) {\n+            return sum;\n+        }\n+    }\n+    return sum;\n+}\n+\n+private static double regularizedGammaQSeries(double a, double x) {\n+    final double epsilon = 1e-15;\n+    final double maxIterations = 1000;\n+\n+    double incompleteGammaRatio = 1.0 / gamma(a);\n+    double sum = incompleteGammaRatio;\n+    double term = incompleteGammaRatio;\n+    for (int k = 1; k < maxIterations; ++k) {\n+        term *= -x / (a + k);\n+        incompleteGammaRatio = term / (a + k);\n+        sum += incompleteGammaRatio;\n+        if (Math.abs(incompleteGammaRatio) < epsilon * Math.abs(sum)) {\n+            return sum;\n+        }\n+    }\n+    return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+}\n+\n+private static double logGamma(double x) {\n+    if (x < 0.0) {\n+        return Double.NaN;\n+    }\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 101.19539853003;\n+    ser -= 4.2313330701605 * Math.log(x + 15.0);\n+    ser += 4.2313330701605 * Math.log(x + 14.0);\n+    ser -= 2.7161100344362 * Math.log(x + 13.0);\n+    ser += 3.5109400746128 * Math.log(x + 12.0);\n+    ser -= 1.2656127102127 * Math.log(x + 11.0);\n+    ser += 0.2089395109154 * Math.log(x + 10.0);\n+    ser -= 0.0822614793322 * Math.log(x + 9.0);\n+    ser -= 0.0809836098074 * Math.log(x + 8.0);\n+    ser += 0.0119848499292 * Math.log(x + 7.0);\n+    ser -= 0.0027715284637 * Math.log(x + 6.0);\n+    ser -= 0.0002422002062 * Math.log(x + 5.0);\n+    ser += 0.0001500917627 * Math.log(x + 4.0);\n+    ser -= 0.0000039367274 * Math.log(x + 3.0);\n+    return tmp + Math.log(ser * Math.sqrt(2.0 * Math.PI) / x);\n+}\n+\n+private static double gamma(double x) {\n+    final double[] coefficients = {\n+            0.99999999999980993, 676.5203681218851, -1259.1392167224028,\n+            771.32342877765313, -176.61502916214059, 12.50734324009056,\n+            -0.13857109526572012, 9.9843695780195716e-6, 1.5056327351493116e-7\n+    };\n+    double sum = coefficients[0];\n+    for (int i = 1; i < coefficients.length; ++i) {\n+        sum += coefficients[i] / (x + i);\n+    }\n+    double tmp = x + 7.5;\n+    return Math.sqrt(2.0 * Math.PI) * Math.pow(tmp, x + 0.5) * Math.exp(-tmp) * sum;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}