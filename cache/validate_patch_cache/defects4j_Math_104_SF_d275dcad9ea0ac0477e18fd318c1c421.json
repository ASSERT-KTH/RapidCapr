{
    "patch": "public static double regularizedGamma(double a, double x) {\n    final double increment = 0.0000000001;\n    double sum = 0;\n    double term = 1;\n    int n = 0;\n\n    while (Math.abs(term) > increment) {\n        double denominator = a + n;\n\n        if (n > 0) {\n            denominator = denominator * x + n;\n            term *= x / (n + 1);\n        } else {\n            term *= Math.exp(-x);\n        }\n\n        sum += term / denominator;\n        ++n;\n    }\n\n    return sum * Math.pow(x / a, a) * Math.exp(-x) / gamma(a);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..758027d53 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,28 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    final double increment = 0.0000000001;\n+    double sum = 0;\n+    double term = 1;\n+    int n = 0;\n+\n+    while (Math.abs(term) > increment) {\n+        double denominator = a + n;\n+\n+        if (n > 0) {\n+            denominator = denominator * x + n;\n+            term *= x / (n + 1);\n+        } else {\n+            term *= Math.exp(-x);\n+        }\n+\n+        sum += term / denominator;\n+        ++n;\n+    }\n+\n+    return sum * Math.pow(x / a, a) * Math.exp(-x) / gamma(a);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}