{
    "patch": "   public boolean canBeCalled() {\n    return !isRegexpType();\n  }\n\n  /**\n   * Builds the string representation of this object type without infinitely recursing on recursive types.\n   * If a recursive type is encountered, it is shown as \"{...}\".\n   * @param forAnnotations true if the string representation is being created for an annotation, false otherwise\n   * @param processedTypes Set of object types that have already been processed to prevent infinite recursion.\n   * @return the string representation of this object type.\n   */\n\n  String toStringHelper(boolean forAnnotations, Set<ObjectType> processedTypes) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    }\n\n    if (processedTypes.contains(this)) {\n      return \"{...}\";\n    }\n\n    processedTypes.add(this);\n\n    if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n\n        Object propertyType = getPropertyType(property);\n        if (propertyType instanceof ObjectType) {\n          sb.append(((ObjectType) propertyType).toStringHelper(false, new HashSet<>(processedTypes)));\n        } else {\n          sb.append(propertyType.toString());\n        }\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }\n\n  /**\n   * Builds the string representation of this object type without infinitely recursing on recursive types.\n   * If a recursive type is encountered, it is shown as \"{...}\".\n   * @param forAnnotations true if the string representation is being created for an annotation, false otherwise\n   * @return the string representation of this object type.\n   */\n  @Override\n  String toStringHelper(boolean forAnnotations) {\n    Set<ObjectType> processedTypes = new HashSet<>();\n    return toStringHelper(forAnnotations, processedTypes);",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..bbf68f5a 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,15 +345,30 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n+   public boolean canBeCalled() {\n+    return !isRegexpType();\n   }\n \n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n+  /**\n+   * Builds the string representation of this object type without infinitely recursing on recursive types.\n+   * If a recursive type is encountered, it is shown as \"{...}\".\n+   * @param forAnnotations true if the string representation is being created for an annotation, false otherwise\n+   * @param processedTypes Set of object types that have already been processed to prevent infinite recursion.\n+   * @return the string representation of this object type.\n+   */\n+\n+  String toStringHelper(boolean forAnnotations, Set<ObjectType> processedTypes) {\n     if (hasReferenceName()) {\n       return getReferenceName();\n-    } else if (prettyPrint) {\n+    }\n+\n+    if (processedTypes.contains(this)) {\n+      return \"{...}\";\n+    }\n+\n+    processedTypes.add(this);\n+\n+    if (prettyPrint) {\n       // Don't pretty print recursively.\n       prettyPrint = false;\n \n@@ -377,7 +392,13 @@ class PrototypeObjectType extends ObjectType {\n \n         sb.append(property);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+\n+        Object propertyType = getPropertyType(property);\n+        if (propertyType instanceof ObjectType) {\n+          sb.append(((ObjectType) propertyType).toStringHelper(false, new HashSet<>(processedTypes)));\n+        } else {\n+          sb.append(propertyType.toString());\n+        }\n \n         ++i;\n         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n@@ -395,6 +416,17 @@ class PrototypeObjectType extends ObjectType {\n     }\n   }\n \n+  /**\n+   * Builds the string representation of this object type without infinitely recursing on recursive types.\n+   * If a recursive type is encountered, it is shown as \"{...}\".\n+   * @param forAnnotations true if the string representation is being created for an annotation, false otherwise\n+   * @return the string representation of this object type.\n+   */\n+  @Override\n+  String toStringHelper(boolean forAnnotations) {\n+    Set<ObjectType> processedTypes = new HashSet<>();\n+    return toStringHelper(forAnnotations, processedTypes);\n+\n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;\n   }",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}