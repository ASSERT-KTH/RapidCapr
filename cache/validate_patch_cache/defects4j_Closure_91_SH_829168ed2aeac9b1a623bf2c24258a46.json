{
    "patch": "  /**\n   * Returns true if a function node is being lent to \"this\".\n   */\n  private boolean isLendToThis(Node n) {\n    if (n.getType() != Token.FUNCTION || !n.getBooleanProp(Node.IS_LIT_FUNCTION)) {\n      return false;\n    }\n    Node parent = n.getParent();\n    if (parent == null || parent.getParent() == null) {\n      return false;\n    }\n    Node maybeCall = parent.getParent();\n    if (maybeCall.getType() != Token.CALL) {\n      return false;\n    }\n    // If \"this\" is an argument, the function is used as a constructor.\n    Node maybeThis = maybeCall.getFirstChild();\n    if (maybeThis.isThis()) {\n      return true;\n    }\n    // If the function is the outer function of a .call or .apply invocation,\n    // \"this\" could be any expression. Assume it is lending to \"this\".\n    if (parent.isCall()) {\n      Node callee = parent.getFirstChild();\n      if (callee.getLastChild().getString().equals(\"call\") ||\n          callee.getLastChild().getString().equals(\"apply\")) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..33b19f5e 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,37 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+  /**\n+   * Returns true if a function node is being lent to \"this\".\n+   */\n+  private boolean isLendToThis(Node n) {\n+    if (n.getType() != Token.FUNCTION || !n.getBooleanProp(Node.IS_LIT_FUNCTION)) {\n+      return false;\n+    }\n+    Node parent = n.getParent();\n+    if (parent == null || parent.getParent() == null) {\n+      return false;\n+    }\n+    Node maybeCall = parent.getParent();\n+    if (maybeCall.getType() != Token.CALL) {\n+      return false;\n+    }\n+    // If \"this\" is an argument, the function is used as a constructor.\n+    Node maybeThis = maybeCall.getFirstChild();\n+    if (maybeThis.isThis()) {\n+      return true;\n+    }\n+    // If the function is the outer function of a .call or .apply invocation,\n+    // \"this\" could be any expression. Assume it is lending to \"this\".\n+    if (parent.isCall()) {\n+      Node callee = parent.getFirstChild();\n+      if (callee.getLastChild().getString().equals(\"call\") ||\n+          callee.getLastChild().getString().equals(\"apply\")) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}