{
    "patch": "public void findEvents(final double t, final double[] y) throws MaxCountExceededException, DimensionMismatchException {\n    final int n = eventsHandlers.size();\n    final boolean isIntegratorInStateEventMode = isIntegratorInStateEventMode();\n    if (isIntegratorInStateEventMode) {\n        if (pendingEvent == null) {\n            // the integrator has not yet triggered an event check in state event mode\n            for (int i = 0; i < n; ++i) {\n                final EventHandler<T>[] handler = eventsHandlers.get(i);\n                if (handler != null) {\n                    for (int j = 0; j < handler.length; ++j) {\n                        registerEventHandler(handler[j], handler[j].getMaxCheckInterval(), j);\n                        if (pendingEvent != null) {\n                            // event handling inside of a state event handler\n                            return;\n                        }\n                    }\n                }\n            }\n        } else {\n            // the integrator has triggered an event check in state event mode\n            while (pendingEvent != null) {\n                // handle pending event(s)\n                handleEvent();\n                // check for additional events (since events may have been triggered by handling the pending event)\n                for (int i = 0; i < n && pendingEvent == null; ++i) {\n                    final EventHandler<T>[] handler = eventsHandlers.get(i);\n                    if (handler != null) {\n                        for (int j = 0; j < handler.length; ++j) {\n                            registerEventHandler(handler[j], handler[j].getMaxCheckInterval(), j);\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        // the integrator is not in state event mode (non-state event mode or switching mode)\n        // ==> only look for events at the current time (in the switching mode, if the integrator reached\n        //     a switching function exactly at the first step, it is possible no event will be found here)\n        final T currentState = getMapper().mapDoubleToDate(t, y);\n        for (int i = 0; i < n; ++i) {\n            final EventHandler<T>[] handler = eventsHandlers.get(i);\n            if (handler != null) {\n                for (int j = 0; j < handler.length; ++j) {\n                    final double dt = Math.max(handler[j].getMaxCheckInterval(), convergence);\n                    if (handler[j].evaluateEvent(currentState)) {\n                        // handle the event(s)\n                        registerEventHandler(handler[j], dt, j);\n                        if (isIntegratorInStateEventMode || pendingEvent != null) {\n                            // event handling inside of a state event handler\n                            return;\n                        }\n                        handleEvent();\n                    } else {\n                        // no events found at this time, but register the event handler for future checks\n                        registerEventHandler(handler[j], dt, j);\n                    }\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex f24f87c39..4e4a3e310 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -313,43 +313,67 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n-                public int compare(EventState es0, EventState es1) {\n-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n+public void findEvents(final double t, final double[] y) throws MaxCountExceededException, DimensionMismatchException {\n+    final int n = eventsHandlers.size();\n+    final boolean isIntegratorInStateEventMode = isIntegratorInStateEventMode();\n+    if (isIntegratorInStateEventMode) {\n+        if (pendingEvent == null) {\n+            // the integrator has not yet triggered an event check in state event mode\n+            for (int i = 0; i < n; ++i) {\n+                final EventHandler<T>[] handler = eventsHandlers.get(i);\n+                if (handler != null) {\n+                    for (int j = 0; j < handler.length; ++j) {\n+                        registerEventHandler(handler[j], handler[j].getMaxCheckInterval(), j);\n+                        if (pendingEvent != null) {\n+                            // event handling inside of a state event handler\n+                            return;\n+                        }\n+                    }\n                 }\n-\n-            });\n-\n-            for (final EventState state : eventsStates) {\n-                if (state.evaluateStep(interpolator)) {\n-                    // the event occurs during the current step\n-                    occuringEvents.add(state);\n+            }\n+        } else {\n+            // the integrator has triggered an event check in state event mode\n+            while (pendingEvent != null) {\n+                // handle pending event(s)\n+                handleEvent();\n+                // check for additional events (since events may have been triggered by handling the pending event)\n+                for (int i = 0; i < n && pendingEvent == null; ++i) {\n+                    final EventHandler<T>[] handler = eventsHandlers.get(i);\n+                    if (handler != null) {\n+                        for (int j = 0; j < handler.length; ++j) {\n+                            registerEventHandler(handler[j], handler[j].getMaxCheckInterval(), j);\n+                        }\n+                    }\n                 }\n             }\n-\n-            while (!occuringEvents.isEmpty()) {\n-\n-                // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n-                final EventState currentEvent = iterator.next();\n-                iterator.remove();\n-\n-                // restrict the interpolator to the first part of the step, up to the event\n-                final double eventT = currentEvent.getEventTime();\n-                interpolator.setSoftPreviousTime(previousT);\n-                interpolator.setSoftCurrentTime(eventT);\n-\n-                // get state at event time\n-                interpolator.setInterpolatedTime(eventT);\n-                final double[] eventY = interpolator.getInterpolatedState().clone();\n-\n-                // advance all event states to current time\n-                currentEvent.stepAccepted(eventT, eventY);\n-                isLastStep = currentEvent.stop();\n-\n-                // handle the first part of the step, up to the event\n-                for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n+        }\n+    } else {\n+        // the integrator is not in state event mode (non-state event mode or switching mode)\n+        // ==> only look for events at the current time (in the switching mode, if the integrator reached\n+        //     a switching function exactly at the first step, it is possible no event will be found here)\n+        final T currentState = getMapper().mapDoubleToDate(t, y);\n+        for (int i = 0; i < n; ++i) {\n+            final EventHandler<T>[] handler = eventsHandlers.get(i);\n+            if (handler != null) {\n+                for (int j = 0; j < handler.length; ++j) {\n+                    final double dt = Math.max(handler[j].getMaxCheckInterval(), convergence);\n+                    if (handler[j].evaluateEvent(currentState)) {\n+                        // handle the event(s)\n+                        registerEventHandler(handler[j], dt, j);\n+                        if (isIntegratorInStateEventMode || pendingEvent != null) {\n+                            // event handling inside of a state event handler\n+                            return;\n+                        }\n+                        handleEvent();\n+                    } else {\n+                        // no events found at this time, but register the event handler for future checks\n+                        registerEventHandler(handler[j], dt, j);\n+                    }\n                 }\n+            }\n+        }\n+    }\n+}\n \n                 if (isLastStep) {\n                     // the event asked to stop integration",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}