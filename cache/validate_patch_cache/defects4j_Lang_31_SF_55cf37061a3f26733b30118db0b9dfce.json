{
    "patch": "public static boolean containsAny(CharSequence sequence, char... searchChars) {\n    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int csLength = sequence.length();\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = sequence.charAt(i);\n        if (ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n            if (i < csLast) {\n                char ch2 = sequence.charAt(i + 1);\n                if (ch2 >= Character.MIN_LOW_SURROGATE && ch2 <= Character.MAX_LOW_SURROGATE) {\n                    if (contains(searchChars, ch, ch2)) {\n                        return true;\n                    }\n                }\n            }\n        } else {\n            if (contains(searchChars, ch)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nprivate static boolean contains(char[] array, char... values) {\n    Set<Character> set = new HashSet<Character>(values.length);\n    for (char c : values) {\n        set.add(Character.valueOf(c));\n    }\n    for (char c : array) {\n        if (set.contains(Character.valueOf(c))) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..2c35f799 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,46 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(CharSequence sequence, char... searchChars) {\n+    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    int csLength = sequence.length();\n+    int searchLength = searchChars.length;\n+    int csLast = csLength - 1;\n+    int searchLast = searchLength - 1;\n+    for (int i = 0; i < csLength; i++) {\n+        char ch = sequence.charAt(i);\n+        if (ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n+            if (i < csLast) {\n+                char ch2 = sequence.charAt(i + 1);\n+                if (ch2 >= Character.MIN_LOW_SURROGATE && ch2 <= Character.MAX_LOW_SURROGATE) {\n+                    if (contains(searchChars, ch, ch2)) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        } else {\n+            if (contains(searchChars, ch)) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean contains(char[] array, char... values) {\n+    Set<Character> set = new HashSet<Character>(values.length);\n+    for (char c : values) {\n+        set.add(Character.valueOf(c));\n+    }\n+    for (char c : array) {\n+        if (set.contains(Character.valueOf(c))) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}