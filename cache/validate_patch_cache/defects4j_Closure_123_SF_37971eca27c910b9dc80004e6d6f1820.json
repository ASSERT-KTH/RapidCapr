{
    "patch": "public static String fixCode(String code) {\n    int start = code.indexOf(\"for(\");\n    while (start != -1) {\n        int end = findForLoopEndIndex(code, start);\n        String forLoop = code.substring(start, end);\n        String fixedForLoop = fixForLoopSyntax(forLoop);\n        code = code.substring(0, start) + fixedForLoop + code.substring(end);\n        start = code.indexOf(\"for(\", start + fixedForLoop.length());\n    }\n    return code;\n}\n\npublic static int findForLoopEndIndex(String code, int startIndex) {\n    int depth = 1;\n    int index = startIndex + 3; // skip \"for\" characters\n    while (depth > 0 && index < code.length()) {\n        char c = code.charAt(index);\n        if (c == '(') {\n            depth++;\n        } else if (c == ')') {\n            depth--;\n        }\n        index++;\n    }\n    return index;\n}\n\npublic static String fixForLoopSyntax(String forLoop) {\n    String[] segments = forLoop.split(\";\");\n    if (segments.length >= 3) {\n        String condition = segments[1].trim();\n        if (condition.charAt(0) == '(' && condition.charAt(condition.length() - 1) == ')') {\n            condition = condition.substring(1, condition.length() - 1);\n        }\n        if (condition.contains(\"in\")) {\n            String[] parts = condition.split(\"in\");\n            return segments[0] + \";\" + parts[1].trim() + \".contains(\" + parts[0].trim() + \")\" + \";\" + segments[2];\n        }\n    }\n    return forLoop;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..26b791ef 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,47 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    int start = code.indexOf(\"for(\");\n+    while (start != -1) {\n+        int end = findForLoopEndIndex(code, start);\n+        String forLoop = code.substring(start, end);\n+        String fixedForLoop = fixForLoopSyntax(forLoop);\n+        code = code.substring(0, start) + fixedForLoop + code.substring(end);\n+        start = code.indexOf(\"for(\", start + fixedForLoop.length());\n+    }\n+    return code;\n+}\n+\n+public static int findForLoopEndIndex(String code, int startIndex) {\n+    int depth = 1;\n+    int index = startIndex + 3; // skip \"for\" characters\n+    while (depth > 0 && index < code.length()) {\n+        char c = code.charAt(index);\n+        if (c == '(') {\n+            depth++;\n+        } else if (c == ')') {\n+            depth--;\n+        }\n+        index++;\n+    }\n+    return index;\n+}\n+\n+public static String fixForLoopSyntax(String forLoop) {\n+    String[] segments = forLoop.split(\";\");\n+    if (segments.length >= 3) {\n+        String condition = segments[1].trim();\n+        if (condition.charAt(0) == '(' && condition.charAt(condition.length() - 1) == ')') {\n+            condition = condition.substring(1, condition.length() - 1);\n+        }\n+        if (condition.contains(\"in\")) {\n+            String[] parts = condition.split(\"in\");\n+            return segments[0] + \";\" + parts[1].trim() + \".contains(\" + parts[0].trim() + \")\" + \";\" + segments[2];\n+        }\n+    }\n+    return forLoop;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}