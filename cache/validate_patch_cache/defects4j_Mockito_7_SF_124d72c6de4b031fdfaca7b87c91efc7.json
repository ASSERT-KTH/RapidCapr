{
    "patch": "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n    if (typeVariable instanceof TypeVariableImpl) {\n        TypeVariableImpl typeVariableImpl = (TypeVariableImpl) typeVariable;\n        AnnotatedType annotatedType = typeVariableImpl.annotatedBounds()[0];\n        Type boundType = annotatedType.getType();\n        if (boundType instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType) boundType;\n            Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n            for (Type actualTypeArgument : actualTypeArguments) {\n                registerTypeVariablesOn(actualTypeArgument);\n            }\n        } else if (boundType instanceof Class<?>) {\n            Class<?> rawClass = (Class<?>) boundType;\n            if (rawClass.getTypeParameters().length > 0) {\n                // type variable is declared in a parameterized type, so we need to extract the actual type argument from the extended classes, fields, and parameterized interfaces\n                processFields(rawClass);\n                processSuperclasses(rawClass);\n                processParameterizedInterfaces(rawClass);\n            }\n        }\n    } else {\n        throw new IllegalStateException(\"Unable to extract actual type for type variable: \" + typeVariable.getTypeName());\n    }\n}\n\nprivate void processFields(Class<?> clazz) {\n    for (Field field : clazz.getDeclaredFields()) {\n        Type fieldType = field.getGenericType();\n        if (fieldType instanceof TypeVariable<?>) {\n            TypeVariable<?> typeVariable = (TypeVariable<?>) fieldType;\n            Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n            if (actualTypeArgument != null) {\n                registerTypeVariablesOn(actualTypeArgument);\n            } else if (typeVariable.getGenericDeclaration() instanceof Class<?>) {\n                processFields((Class<?>) typeVariable.getGenericDeclaration());\n            }\n        } else if (fieldType instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType) fieldType;\n            for (Type actualTypeArgument : parameterizedType.getActualTypeArguments()) {\n                registerTypeVariablesOn(actualTypeArgument);\n                if (actualTypeArgument instanceof TypeVariable<?>) {\n                    processFields((Class<?>) field.getDeclaringClass());\n                }\n            }\n        }\n    }\n}\n\nprivate void processSuperclasses(Class<?> clazz) {\n    Type superClassType = clazz.getGenericSuperclass();\n    if (superClassType instanceof ParameterizedType) {\n        ParameterizedType parameterizedType = (ParameterizedType) superClassType;\n        for (Type actualTypeArgument : parameterizedType.getActualTypeArguments()) {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n        if (parameterizedType.getRawType() instanceof Class<?>) {\n            processFields((Class<?>) parameterizedType.getRawType());\n        }\n    } else if (superClassType instanceof Class<?>) {\n        processSuperclasses((Class<?>) superClassType);\n    }\n}\n\nprivate void processParameterizedInterfaces(Class<?> clazz) {\n    for (Type implementedInterface : clazz.getGenericInterfaces()) {\n        if (implementedInterface instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType) implementedInterface;\n            for (Type actualTypeArgument : parameterizedType.getActualTypeArguments()) {\n                registerTypeVariablesOn(actualTypeArgument);\n                if (actualTypeArgument instanceof TypeVariable<?>) {\n                    processFields((Class<?>) implementedInterface);\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..d6d7e1919 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,86 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+    if (typeVariable instanceof TypeVariableImpl) {\n+        TypeVariableImpl typeVariableImpl = (TypeVariableImpl) typeVariable;\n+        AnnotatedType annotatedType = typeVariableImpl.annotatedBounds()[0];\n+        Type boundType = annotatedType.getType();\n+        if (boundType instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType) boundType;\n+            Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+            for (Type actualTypeArgument : actualTypeArguments) {\n+                registerTypeVariablesOn(actualTypeArgument);\n+            }\n+        } else if (boundType instanceof Class<?>) {\n+            Class<?> rawClass = (Class<?>) boundType;\n+            if (rawClass.getTypeParameters().length > 0) {\n+                // type variable is declared in a parameterized type, so we need to extract the actual type argument from the extended classes, fields, and parameterized interfaces\n+                processFields(rawClass);\n+                processSuperclasses(rawClass);\n+                processParameterizedInterfaces(rawClass);\n+            }\n+        }\n+    } else {\n+        throw new IllegalStateException(\"Unable to extract actual type for type variable: \" + typeVariable.getTypeName());\n+    }\n+}\n+\n+private void processFields(Class<?> clazz) {\n+    for (Field field : clazz.getDeclaredFields()) {\n+        Type fieldType = field.getGenericType();\n+        if (fieldType instanceof TypeVariable<?>) {\n+            TypeVariable<?> typeVariable = (TypeVariable<?>) fieldType;\n+            Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+            if (actualTypeArgument != null) {\n+                registerTypeVariablesOn(actualTypeArgument);\n+            } else if (typeVariable.getGenericDeclaration() instanceof Class<?>) {\n+                processFields((Class<?>) typeVariable.getGenericDeclaration());\n+            }\n+        } else if (fieldType instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType) fieldType;\n+            for (Type actualTypeArgument : parameterizedType.getActualTypeArguments()) {\n+                registerTypeVariablesOn(actualTypeArgument);\n+                if (actualTypeArgument instanceof TypeVariable<?>) {\n+                    processFields((Class<?>) field.getDeclaringClass());\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+private void processSuperclasses(Class<?> clazz) {\n+    Type superClassType = clazz.getGenericSuperclass();\n+    if (superClassType instanceof ParameterizedType) {\n+        ParameterizedType parameterizedType = (ParameterizedType) superClassType;\n+        for (Type actualTypeArgument : parameterizedType.getActualTypeArguments()) {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+        if (parameterizedType.getRawType() instanceof Class<?>) {\n+            processFields((Class<?>) parameterizedType.getRawType());\n+        }\n+    } else if (superClassType instanceof Class<?>) {\n+        processSuperclasses((Class<?>) superClassType);\n+    }\n+}\n+\n+private void processParameterizedInterfaces(Class<?> clazz) {\n+    for (Type implementedInterface : clazz.getGenericInterfaces()) {\n+        if (implementedInterface instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType) implementedInterface;\n+            for (Type actualTypeArgument : parameterizedType.getActualTypeArguments()) {\n+                registerTypeVariablesOn(actualTypeArgument);\n+                if (actualTypeArgument instanceof TypeVariable<?>) {\n+                    processFields((Class<?>) implementedInterface);\n+                }\n+            }\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}