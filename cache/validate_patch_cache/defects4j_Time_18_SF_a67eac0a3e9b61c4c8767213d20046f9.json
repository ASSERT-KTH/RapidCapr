{
    "patch": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n    {\n        // use DateTime to simplify calendar handling\n        DateTime dateTime = new DateTime(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, iDateTimeZone);\n\n        if (dateTime.getYear() < 1583) {\n            // before the Gregorian calendar was introduced\n            if (dateTime.getMonthOfYear() == 2 && dateTime.getDayOfMonth() == 29 && !iJulianChronology.isLeapYear(dateTime.getYear())) {\n                throw new IllegalArgumentException(\"Invalid leap year day\");\n            }\n            return iJulianChronology.getDateTimeMillis(dateTime);\n        } else {\n            return iGregorianChronology.getDateTimeMillis(dateTime);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 29e559d4..84f9e968 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -347,34 +347,23 @@ public final class GJChronology extends AssembledChronology {\n         return instant;\n     }\n \n-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                   int hourOfDay, int minuteOfHour,\n                                   int secondOfMinute, int millisOfSecond)\n         throws IllegalArgumentException\n     {\n-        Chronology base;\n-        if ((base = getBase()) != null) {\n-            return base.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        }\n+        // use DateTime to simplify calendar handling\n+        DateTime dateTime = new DateTime(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, iDateTimeZone);\n \n-        // Assume date is Gregorian.\n-        long instant;\n-            instant = iGregorianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        if (instant < iCutoverMillis) {\n-            // Maybe it's Julian.\n-            instant = iJulianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-            if (instant >= iCutoverMillis) {\n-                // Okay, it's in the illegal cutover gap.\n-                throw new IllegalArgumentException(\"Specified date does not exist\");\n+        if (dateTime.getYear() < 1583) {\n+            // before the Gregorian calendar was introduced\n+            if (dateTime.getMonthOfYear() == 2 && dateTime.getDayOfMonth() == 29 && !iJulianChronology.isLeapYear(dateTime.getYear())) {\n+                throw new IllegalArgumentException(\"Invalid leap year day\");\n             }\n+            return iJulianChronology.getDateTimeMillis(dateTime);\n+        } else {\n+            return iGregorianChronology.getDateTimeMillis(dateTime);\n         }\n-        return instant;\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}