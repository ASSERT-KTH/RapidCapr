{
    "patch": "        List<Type> bounds = Arrays.asList(typeVariable.getBounds());\n        bounds.stream()\n             .filter(type -> type instanceof TypeVariable)\n             .map(TypeVariable.class::cast)\n             .forEach(this::readTypeVariables);",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..0558afd3f 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,16 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+        List<Type> bounds = Arrays.asList(typeVariable.getBounds());\n+        bounds.stream()\n+             .filter(type -> type instanceof TypeVariable)\n+             .map(TypeVariable.class::cast)\n+             .forEach(this::readTypeVariables);\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: lambda expressions are not supported in -source 1.5",
    "test_result": "ERROR"
}