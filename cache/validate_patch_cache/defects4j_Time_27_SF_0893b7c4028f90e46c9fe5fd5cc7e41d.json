{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n    if (size == 1) {\n        Object[] comp = createComposite(elementPairs);\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n\n    int sepIndex = -1;\n    for (int i = 0; i < size; i++) {\n        Object element = elementPairs.get(i);\n        if (element instanceof Separator) {\n            sepIndex = i;\n            break;\n        }\n    }\n\n    if (sepIndex >= 0) {\n        Separator sep = (Separator) elementPairs.get(sepIndex);\n        List<Object> leftPairs = elementPairs.subList(0, sepIndex);\n        List<Object> rightPairs = elementPairs.subList(sepIndex + 1, size);\n\n        Object[] leftComp = createComposite(leftPairs);\n        Object[] rightComp = createComposite(rightPairs);\n\n        PeriodPrinter printer = sep.finish((PeriodPrinter) leftComp[0], (PeriodParser) rightComp[1]);\n        PeriodParser parser = sep.finish((PeriodPrinter) rightComp[0], (PeriodParser) leftComp[1]);\n\n        if (notPrinter) {\n            return new PeriodFormatter(null, parser);\n        } else if (notParser) {\n            return new PeriodFormatter(printer, null);\n        } else {\n            return new PeriodFormatter(printer, parser);\n        }\n    }\n\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..0f325d6b 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,56 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+    if (size == 1) {\n         Object[] comp = createComposite(elementPairs);\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+\n+    int sepIndex = -1;\n+    for (int i = 0; i < size; i++) {\n+        Object element = elementPairs.get(i);\n+        if (element instanceof Separator) {\n+            sepIndex = i;\n+            break;\n+        }\n+    }\n+\n+    if (sepIndex >= 0) {\n+        Separator sep = (Separator) elementPairs.get(sepIndex);\n+        List<Object> leftPairs = elementPairs.subList(0, sepIndex);\n+        List<Object> rightPairs = elementPairs.subList(sepIndex + 1, size);\n+\n+        Object[] leftComp = createComposite(leftPairs);\n+        Object[] rightComp = createComposite(rightPairs);\n+\n+        PeriodPrinter printer = sep.finish((PeriodPrinter) leftComp[0], (PeriodParser) rightComp[1]);\n+        PeriodParser parser = sep.finish((PeriodPrinter) rightComp[0], (PeriodParser) leftComp[1]);\n+\n         if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            return new PeriodFormatter(null, parser);\n         } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            return new PeriodFormatter(printer, null);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            return new PeriodFormatter(printer, parser);\n         }\n     }\n \n+    Object[] comp = createComposite(elementPairs);\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "java.lang.IndexOutOfBoundsException: Index: 7, Size: 7",
    "test_result": "FAIL"
}