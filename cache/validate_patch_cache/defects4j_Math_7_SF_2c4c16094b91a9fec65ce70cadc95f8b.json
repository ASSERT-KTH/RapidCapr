{
    "patch": "public int compare(EventState es0, EventState es1) {\n    return Double.compare(es0.getEventTime(), es1.getEventTime());\n}\n\nfor (final EventState state : eventStates) {\n    if (state.evaluateStep(interpolator)) {\n        // the event occurs during the current step\n        occurringEvents.add(state);\n    }\n}\n\nwhile (!occurringEvents.isEmpty()) {\n\n    // handle the chronologically first event\n    final Iterator<EventState> iterator = occurringEvents.iterator();\n    final EventState currentEvent = iterator.next();\n    iterator.remove();\n\n    // restrict the interpolator to the first part of the step, up to the event\n    final double eventT = currentEvent.getEventTime();\n    interpolator.setSoftPreviousTime(previousT);\n    interpolator.setSoftCurrentTime(eventT);\n\n    // get state at event time\n    interpolator.setInterpolatedTime(eventT);\n    final double[] eventY = interpolator.getInterpolatedState().clone();\n\n    // advance all event states to current time\n    currentEvent.stepAccepted(eventT, eventY);\n    isLastStep = currentEvent.stop();\n\n    // handle the first part of the step, up to the event\n    for (final StepHandler handler : stepHandlers) {\n        handler.handleStep(interpolator, isLastStep);\n    }\n\n    if (isLastStep) {\n        return currentEvent.getEventTime();\n    }\n\n    // handle the event\n    currentEvent.action(eventY, eventT);\n    final double maxCheckInterval = currentEvent.getMaxCheckInterval();\n    final double nextT = (unrestrictedStepEnd < Double.POSITIVE_INFINITY) ?\n            FastMath.min(unrestrictedStepEnd, currentEvent.getNextEventTime(eventY, eventT, maxCheckInterval)) :\n            currentEvent.getNextEventTime(eventY, eventT, maxCheckInterval);\n\n    if (currentEvent.stop()) {\n        // the event asked to stop integration\n        return currentEvent.getEventTime();\n    }\n\n    if (nextT <= eventT) {\n        throw new MathIllegalStateException(LocalizedFormats.EVENT_INTEGRATION_LOOP,\n                                             nextT, eventT);\n    }\n\n    // check if the event occurs during the next substep\n    if (nextT <= t + h) {\n        if (currentEvent.evaluateStep(interpolator)) {\n            occurringEvents.add(currentEvent);\n        }\n    } else {\n        eventStates.add(currentEvent);\n        if (eventT < t + h) {\n            // add the event at integration stop time,\n            // if it occurs before next step\n            eventTList.add(eventT);\n        }\n        break;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex f24f87c39..efe98fb15 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -313,43 +313,78 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n-                public int compare(EventState es0, EventState es1) {\n-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n-                }\n+public int compare(EventState es0, EventState es1) {\n+    return Double.compare(es0.getEventTime(), es1.getEventTime());\n+}\n \n-            });\n+for (final EventState state : eventStates) {\n+    if (state.evaluateStep(interpolator)) {\n+        // the event occurs during the current step\n+        occurringEvents.add(state);\n+    }\n+}\n \n-            for (final EventState state : eventsStates) {\n-                if (state.evaluateStep(interpolator)) {\n-                    // the event occurs during the current step\n-                    occuringEvents.add(state);\n-                }\n-            }\n+while (!occurringEvents.isEmpty()) {\n \n-            while (!occuringEvents.isEmpty()) {\n+    // handle the chronologically first event\n+    final Iterator<EventState> iterator = occurringEvents.iterator();\n+    final EventState currentEvent = iterator.next();\n+    iterator.remove();\n \n-                // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n-                final EventState currentEvent = iterator.next();\n-                iterator.remove();\n+    // restrict the interpolator to the first part of the step, up to the event\n+    final double eventT = currentEvent.getEventTime();\n+    interpolator.setSoftPreviousTime(previousT);\n+    interpolator.setSoftCurrentTime(eventT);\n \n-                // restrict the interpolator to the first part of the step, up to the event\n-                final double eventT = currentEvent.getEventTime();\n-                interpolator.setSoftPreviousTime(previousT);\n-                interpolator.setSoftCurrentTime(eventT);\n+    // get state at event time\n+    interpolator.setInterpolatedTime(eventT);\n+    final double[] eventY = interpolator.getInterpolatedState().clone();\n \n-                // get state at event time\n-                interpolator.setInterpolatedTime(eventT);\n-                final double[] eventY = interpolator.getInterpolatedState().clone();\n+    // advance all event states to current time\n+    currentEvent.stepAccepted(eventT, eventY);\n+    isLastStep = currentEvent.stop();\n \n-                // advance all event states to current time\n-                currentEvent.stepAccepted(eventT, eventY);\n-                isLastStep = currentEvent.stop();\n+    // handle the first part of the step, up to the event\n+    for (final StepHandler handler : stepHandlers) {\n+        handler.handleStep(interpolator, isLastStep);\n+    }\n \n-                // handle the first part of the step, up to the event\n-                for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n-                }\n+    if (isLastStep) {\n+        return currentEvent.getEventTime();\n+    }\n+\n+    // handle the event\n+    currentEvent.action(eventY, eventT);\n+    final double maxCheckInterval = currentEvent.getMaxCheckInterval();\n+    final double nextT = (unrestrictedStepEnd < Double.POSITIVE_INFINITY) ?\n+            FastMath.min(unrestrictedStepEnd, currentEvent.getNextEventTime(eventY, eventT, maxCheckInterval)) :\n+            currentEvent.getNextEventTime(eventY, eventT, maxCheckInterval);\n+\n+    if (currentEvent.stop()) {\n+        // the event asked to stop integration\n+        return currentEvent.getEventTime();\n+    }\n+\n+    if (nextT <= eventT) {\n+        throw new MathIllegalStateException(LocalizedFormats.EVENT_INTEGRATION_LOOP,\n+                                             nextT, eventT);\n+    }\n+\n+    // check if the event occurs during the next substep\n+    if (nextT <= t + h) {\n+        if (currentEvent.evaluateStep(interpolator)) {\n+            occurringEvents.add(currentEvent);\n+        }\n+    } else {\n+        eventStates.add(currentEvent);\n+        if (eventT < t + h) {\n+            // add the event at integration stop time,\n+            // if it occurs before next step\n+            eventTList.add(eventT);\n+        }\n+        break;\n+    }\n+}\n \n                 if (isLastStep) {\n                     // the event asked to stop integration",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}