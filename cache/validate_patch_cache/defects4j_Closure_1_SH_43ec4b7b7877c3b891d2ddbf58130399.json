{
    "patch": "    Node param = argList.getFirstChild();\n\n    // Iterate through the parameter list, removing any unreferenced parameters.\n    while (param != null && !referenced.isEmpty()) {\n      String paramName = param.getString();\n      Var var = fnScope.getVar(paramName);\n\n      if (!referenced.contains(var)) {\n        NodeUtil.deleteNode(param);\n        compiler.reportCodeChange();\n      } else {\n        referenced.remove(var);\n      }\n\n      param = param.getNext();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..a8c64a84 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,21 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node param = argList.getFirstChild();\n+\n+    // Iterate through the parameter list, removing any unreferenced parameters.\n+    while (param != null && !referenced.isEmpty()) {\n+      String paramName = param.getString();\n+      Var var = fnScope.getVar(paramName);\n+\n+      if (!referenced.contains(var)) {\n+        NodeUtil.deleteNode(param);\n+        compiler.reportCodeChange();\n+      } else {\n+        referenced.remove(var);\n+      }\n+\n+      param = param.getNext();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}