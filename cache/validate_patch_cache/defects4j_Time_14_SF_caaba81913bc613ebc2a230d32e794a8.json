{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    \n    int[] newValues = Arrays.copyOf(values, values.length);\n    \n    DateTimeFieldType fieldType = partial.getFieldType(fieldIndex);\n    Chronology chronology = partial.getChronology();\n    int oldValue = values[fieldIndex];\n    \n    if (fieldType == DateTimeFieldType.monthOfYear() &&\n            isFebruary29InNonLeapYear(chronology, values)) {\n        newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = 28;\n        newValues[fieldIndex] = chronology.monthOfYear().addToCopy(oldValue, valueToAdd);\n\n        int maxDays = chronology.getDaysInMonthMax(\n                newValues[DateTimeFieldType.year().getFieldIndex()], \n                newValues[DateTimeFieldType.monthOfYear().getFieldIndex()]);\n        newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = \n                Math.min(newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()], maxDays);\n    } else {\n        newValues[fieldIndex] = chronology.monthOfYear().addToCopy(oldValue, valueToAdd);\n    }\n    return newValues;\n}\n\nprivate boolean isFebruary29InNonLeapYear(Chronology chronology, int[] values) {\n    return values[DateTimeFieldType.monthOfYear().getFieldIndex()] == 2 &&\n            values[DateTimeFieldType.dayOfMonth().getFieldIndex()] == 29 &&\n            !chronology.isLeapYear(values[DateTimeFieldType.year().getFieldIndex()]);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..1578ad8f 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,38 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n     }\n+    \n+    int[] newValues = Arrays.copyOf(values, values.length);\n+    \n+    DateTimeFieldType fieldType = partial.getFieldType(fieldIndex);\n+    Chronology chronology = partial.getChronology();\n+    int oldValue = values[fieldIndex];\n+    \n+    if (fieldType == DateTimeFieldType.monthOfYear() &&\n+            isFebruary29InNonLeapYear(chronology, values)) {\n+        newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = 28;\n+        newValues[fieldIndex] = chronology.monthOfYear().addToCopy(oldValue, valueToAdd);\n+\n+        int maxDays = chronology.getDaysInMonthMax(\n+                newValues[DateTimeFieldType.year().getFieldIndex()], \n+                newValues[DateTimeFieldType.monthOfYear().getFieldIndex()]);\n+        newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = \n+                Math.min(newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()], maxDays);\n+    } else {\n+        newValues[fieldIndex] = chronology.monthOfYear().addToCopy(oldValue, valueToAdd);\n+    }\n+    return newValues;\n+}\n+\n+private boolean isFebruary29InNonLeapYear(Chronology chronology, int[] values) {\n+    return values[DateTimeFieldType.monthOfYear().getFieldIndex()] == 2 &&\n+            values[DateTimeFieldType.dayOfMonth().getFieldIndex()] == 29 &&\n+            !chronology.isLeapYear(values[DateTimeFieldType.year().getFieldIndex()]);\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}