{
    "patch": "public static Integer next_smallest(int[] lst) {\n    if (lst == null || lst.length < 2)\n        return null;\n\n    Integer[] newArray = Arrays.stream(lst).boxed().distinct().toArray(Integer[]::new);\n    if (newArray.length < 2)\n        return null;\n\n    Arrays.sort(newArray);\n    return newArray[1];\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/NEXT_SMALLEST.java b/src/main/java/humaneval/buggy/NEXT_SMALLEST.java\nindex 7791efd..a236230 100644\n--- a/src/main/java/humaneval/buggy/NEXT_SMALLEST.java\n+++ b/src/main/java/humaneval/buggy/NEXT_SMALLEST.java\n@@ -12,15 +12,15 @@ next_smallest([]) == None\n next_smallest([1, 1]) == None */\n \n public class NEXT_SMALLEST {\n-    public static Integer next_smallest(int[] lst) {\n-        List<Integer> numbers = new ArrayList<Integer>();\n-        for (Integer n : lst)\n-            numbers.add(n);\n-        Integer[] no_duplicate = numbers.toArray(new Integer[] {});\n-        Arrays.sort(no_duplicate);\n+public static Integer next_smallest(int[] lst) {\n+    if (lst == null || lst.length < 2)\n+        return null;\n \n-        if (no_duplicate.length < 2)\n-            return null;\n-        return no_duplicate[1];\n-    }\n+    Integer[] newArray = Arrays.stream(lst).boxed().distinct().toArray(Integer[]::new);\n+    if (newArray.length < 2)\n+        return null;\n+\n+    Arrays.sort(newArray);\n+    return newArray[1];\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}