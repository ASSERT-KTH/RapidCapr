{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n\n    if (n > 500) {\n        return divideAndConquer(m);\n    } else {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    }\n}\n\nprivate RealMatrix divideAndConquer(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final int k = n / 2;\n\n    final RealMatrix m11 = m.getSubMatrix(0, k - 1, 0, k - 1);\n    final RealMatrix m12 = m.getSubMatrix(0, k - 1, k, n - 1);\n    final RealMatrix m21 = m.getSubMatrix(k, n - 1, 0, k - 1);\n    final RealMatrix m22 = m.getSubMatrix(k, n - 1, k, n - 1);\n\n    final RealMatrix sm11 = squareRoot(m11);\n    final RealMatrix sm22 = squareRoot(m22);\n\n    RealMatrix a = blockMatrix(sm11, MatrixUtils.createRealMatrix(k, n - k));\n    RealMatrix c = blockMatrix(MatrixUtils.createRealMatrix(n - k, k), sm22);\n    RealMatrix b = m12.scalarMultiply(1.0 / sm22.getColumnDimension()).multiply(c);\n    RealMatrix d = m21.scalarMultiply(1.0 / sm11.getRowDimension()).multiply(a);\n\n    return blockMatrix(a, b, d, c).multiply(pinv(blockMatrix(a, d)));\n}\n\nprivate RealMatrix blockMatrix(RealMatrix... matrices) {\n    final int rows1 = matrices[0].getRowDimension();\n    final int cols1 = matrices[0].getColumnDimension();\n    int rows = 0;\n    int cols = 0;\n    for (RealMatrix matrix : matrices) {\n        rows += matrix.getRowDimension();\n        cols += matrix.getColumnDimension();\n    }\n    RealMatrix result = MatrixUtils.createRealMatrix(rows, cols);\n    int r = 0;\n    int c = 0;\n    for (RealMatrix matrix : matrices) {\n        result.setSubMatrix(matrix.getData(), r, c);\n        r += matrix.getRowDimension();\n        c += matrix.getColumnDimension();\n    }\n    return result;\n}\n\nprivate RealMatrix pinv(RealMatrix m) {\n    final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n    final double[] singularValues = svd.getSingularValues();\n    final RealMatrix u = svd.getU();\n    final RealMatrix v = svd.getV();\n    final double tol = Math.max(m.getRowDimension(), m.getColumnDimension()) * singularValues[0] * 2.2204e-16;\n\n    double[] singularValueInverses = new double[singularValues.length];\n    for (int i = 0; i < singularValues.length; i++) {\n        if (singularValues[i] > tol) {\n            singularValueInverses[i] = 1.0 / singularValues[i];\n        }\n    }\n\n    final RealMatrix sPlus = MatrixUtils.createRealDiagonalMatrix(singularValueInverses);\n    return v.multiply(sPlus).multiply(u.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..2cf1d265f 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,72 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+\n+    if (n > 500) {\n+        return divideAndConquer(m);\n+    } else {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n     }\n }\n+\n+private RealMatrix divideAndConquer(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final int k = n / 2;\n+\n+    final RealMatrix m11 = m.getSubMatrix(0, k - 1, 0, k - 1);\n+    final RealMatrix m12 = m.getSubMatrix(0, k - 1, k, n - 1);\n+    final RealMatrix m21 = m.getSubMatrix(k, n - 1, 0, k - 1);\n+    final RealMatrix m22 = m.getSubMatrix(k, n - 1, k, n - 1);\n+\n+    final RealMatrix sm11 = squareRoot(m11);\n+    final RealMatrix sm22 = squareRoot(m22);\n+\n+    RealMatrix a = blockMatrix(sm11, MatrixUtils.createRealMatrix(k, n - k));\n+    RealMatrix c = blockMatrix(MatrixUtils.createRealMatrix(n - k, k), sm22);\n+    RealMatrix b = m12.scalarMultiply(1.0 / sm22.getColumnDimension()).multiply(c);\n+    RealMatrix d = m21.scalarMultiply(1.0 / sm11.getRowDimension()).multiply(a);\n+\n+    return blockMatrix(a, b, d, c).multiply(pinv(blockMatrix(a, d)));\n+}\n+\n+private RealMatrix blockMatrix(RealMatrix... matrices) {\n+    final int rows1 = matrices[0].getRowDimension();\n+    final int cols1 = matrices[0].getColumnDimension();\n+    int rows = 0;\n+    int cols = 0;\n+    for (RealMatrix matrix : matrices) {\n+        rows += matrix.getRowDimension();\n+        cols += matrix.getColumnDimension();\n+    }\n+    RealMatrix result = MatrixUtils.createRealMatrix(rows, cols);\n+    int r = 0;\n+    int c = 0;\n+    for (RealMatrix matrix : matrices) {\n+        result.setSubMatrix(matrix.getData(), r, c);\n+        r += matrix.getRowDimension();\n+        c += matrix.getColumnDimension();\n+    }\n+    return result;\n+}\n+\n+private RealMatrix pinv(RealMatrix m) {\n+    final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n+    final double[] singularValues = svd.getSingularValues();\n+    final RealMatrix u = svd.getU();\n+    final RealMatrix v = svd.getV();\n+    final double tol = Math.max(m.getRowDimension(), m.getColumnDimension()) * singularValues[0] * 2.2204e-16;\n+\n+    double[] singularValueInverses = new double[singularValues.length];\n+    for (int i = 0; i < singularValues.length; i++) {\n+        if (singularValues[i] > tol) {\n+            singularValueInverses[i] = 1.0 / singularValues[i];\n+        }\n+    }\n+\n+    final RealMatrix sPlus = MatrixUtils.createRealDiagonalMatrix(singularValueInverses);\n+    return v.multiply(sPlus).multiply(u.transpose());\n+}\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}