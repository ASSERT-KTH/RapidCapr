{
    "patch": "        final Gaussian.Parametric function = new Gaussian.Parametric() {\n            public double value(double x, double... p) {\n                final double height = p[0];\n                final double center = p[1];\n                final double sigma = p[2];\n                return height * FastMath.exp(-0.5 * FastMath.pow((x - center) / sigma, 2.0));\n            }\n\n            public double[] gradient(double x, double... p) {\n                final double height = p[0];\n                final double center = p[1];\n                final double sigma = p[2];\n                final double xmc = x - center;\n                final double y = FastMath.exp(-0.5 * FastMath.pow(xmc / sigma, 2.0));\n                return new double[] {\n                    y,\n                    height * y * xmc / (sigma * sigma),\n                    height * y * xmc * xmc / (sigma * sigma * sigma)\n                };\n            }\n        };\n        final AbstractCurveFitter fitter = new LevenbergMarquardtOptimizer().withCostRelativeTolerance(1.0e-10).withMaxIterations(1000).withParameterRelativeTolerance(1.0e-10).withDefaultParameters(guess).withFunction(function);\n        return fitter.fit(getObservations()).getPoint();",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..4aaaab8c3 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -118,7 +118,29 @@ public class GaussianFitter extends CurveFitter {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        final Gaussian.Parametric function = new Gaussian.Parametric() {\n+            public double value(double x, double... p) {\n+                final double height = p[0];\n+                final double center = p[1];\n+                final double sigma = p[2];\n+                return height * FastMath.exp(-0.5 * FastMath.pow((x - center) / sigma, 2.0));\n+            }\n+\n+            public double[] gradient(double x, double... p) {\n+                final double height = p[0];\n+                final double center = p[1];\n+                final double sigma = p[2];\n+                final double xmc = x - center;\n+                final double y = FastMath.exp(-0.5 * FastMath.pow(xmc / sigma, 2.0));\n+                return new double[] {\n+                    y,\n+                    height * y * xmc / (sigma * sigma),\n+                    height * y * xmc * xmc / (sigma * sigma * sigma)\n+                };\n+            }\n+        };\n+        final AbstractCurveFitter fitter = new LevenbergMarquardtOptimizer().withCostRelativeTolerance(1.0e-10).withMaxIterations(1000).withParameterRelativeTolerance(1.0e-10).withDefaultParameters(guess).withFunction(function);\n+        return fitter.fit(getObservations()).getPoint();\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}