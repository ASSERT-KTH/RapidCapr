{
    "patch": "public double[] distributionClone(double[] genotypeProbabilities, int M, int D, int N) {\n    double[] probabilities = new double[M];\n\n    for (int i = 0; i < M; i++) {\n        probabilities[i] = genotypeProbabilities[i];\n    }\n\n    double[][] transitions = new double[M][M];\n    for (int i = 0; i < M; i++) {\n        for (int j = 0; j < M; j++) {\n            transitions[i][j] = genotypeProbabilities[getDominant(i, j)];\n        }\n    }\n\n    for (int i = 1; i <= D; i++) {\n        double[][] result = new double[M][M];\n        for (int j = 0; j < M; j++) {\n            for (int k = 0; k < M; k++) {\n                for (int l = 0; l < M; l++) {\n                    result[j][k] += transitions[j][l] * transitions[l][k];\n                }\n            }\n        }\n        transitions = result;\n    }\n\n    double[] result = new double[N + 1];\n    Arrays.fill(result, 0d);\n\n    for (int i = 0; i < M; i++) {\n        int populationCount = populationCount(i);\n        result[populationCount] += probabilities[i];\n    }\n\n    for (int i = 0; i < D; i++) {\n        for (int j = 0; j <= N; j++) {\n            double[] tempResult = new double[N + 1];\n            for (int k = 0; k <= j; k++) {\n                tempResult[k] += result[j - k] * binomialDistribution(N, k) * Math.pow(M, -i);\n            }\n            result[j] = tempResult[j];\n        }\n    }\n\n    return result;\n}\n\nprivate int getDominant(int i, int j) {\n    if (i > j) {\n        return getDominant(j, i);\n    }\n\n    int result = 0;\n    for (int k = 0; k < i; k++) {\n        result += M - 1 - k;\n    }\n\n    return result + j - i;\n}\n\nprivate int populationCount(int i) {\n    int result = 0;\n    while (i > 0) {\n        result += i % 2;\n        i /= 2;\n    }\n    return result;\n}\n\nprivate double binomialDistribution(int n, int k) {\n    if (k < 0 || k > n) {\n        return 0d;\n    }\n    double result = 1d;\n    for (int i = 1; i <= k; i++) {\n        result *= (double) (n - k + i) / (double) i;\n    }\n    return result;\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}