{
    "patch": "if (StringUtils.isBlank(str)) {\n    throw new NumberFormatException(\"A blank string is not a valid number\");\n}  \nchar lastChar = str.charAt(str.length() - 1);\nif (!Character.isDigit(lastChar)) {\n    if (str.length() == 1) {\n        throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    String numeric = str.substring(0, str.length() - 1);\n    boolean allZeros = isAllZeros(numeric);\n    switch (lastChar) {\n        case 'l' :\n        case 'L' :\n            if (isDigits(numeric) && (numeric.length() <= 18)) {\n                try {\n                    return createLong(numeric);\n                } catch (NumberFormatException nfe) {\n                    //Ignore. Let next case handle it.\n                }\n            } \n            // fall through\n        case 'f' :\n        case 'F' :\n            try {\n                Float f = NumberUtils.createFloat(str);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n            //Fall through\n        case 'd' :\n        case 'D' :\n            try {\n                Double d = NumberUtils.createDouble(str);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n            //Fall through\n        default :\n            break;\n\n    }\n} else {\n    if (isDigits(str)) {\n        try {\n            if (str.length() <= 9) {\n                return createInteger(str);\n            } else if(str.length() <= 18) {\n                return createLong(str);\n            }\n        } catch (NumberFormatException nfe) {\n            //Ignore. Let next case handle it.\n        }\n    }\n    //User doesn't have a preference on the return type, so let's start\n    //small and go from there...\n    boolean allZeros = isAllZeros(str);\n    try {\n        Float f = createFloat(str);\n        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n            return f;\n        }\n    } catch (NumberFormatException nfe) {\n        // ignore the bad number\n    }\n    try {\n        Double d = createDouble(str);\n        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n            return d;\n        }\n    } catch (NumberFormatException nfe) {\n        // ignore the bad number\n    }\n\n    return createBigDecimal(str);\n}\nthrow new NumberFormatException(str + \" is not a valid number.\"); ",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/NumberUtils.java b/src/java/org/apache/commons/lang/math/NumberUtils.java\nindex c0f06a47..d7d9a9e7 100644\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -451,8 +451,89 @@ public class NumberUtils {\n                 case 'L' :\n                     if (dec == null\n                         && exp == null\n-                        && isDigits(numeric.substring(1))\n-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n+if (StringUtils.isBlank(str)) {\n+    throw new NumberFormatException(\"A blank string is not a valid number\");\n+}  \n+char lastChar = str.charAt(str.length() - 1);\n+if (!Character.isDigit(lastChar)) {\n+    if (str.length() == 1) {\n+        throw new NumberFormatException(str + \" is not a valid number.\");\n+    }\n+    String numeric = str.substring(0, str.length() - 1);\n+    boolean allZeros = isAllZeros(numeric);\n+    switch (lastChar) {\n+        case 'l' :\n+        case 'L' :\n+            if (isDigits(numeric) && (numeric.length() <= 18)) {\n+                try {\n+                    return createLong(numeric);\n+                } catch (NumberFormatException nfe) {\n+                    //Ignore. Let next case handle it.\n+                }\n+            } \n+            // fall through\n+        case 'f' :\n+        case 'F' :\n+            try {\n+                Float f = NumberUtils.createFloat(str);\n+                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                    return f;\n+                }\n+\n+            } catch (NumberFormatException nfe) {\n+                // ignore the bad number\n+            }\n+            //Fall through\n+        case 'd' :\n+        case 'D' :\n+            try {\n+                Double d = NumberUtils.createDouble(str);\n+                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+                    return d;\n+                }\n+            } catch (NumberFormatException nfe) {\n+                // ignore the bad number\n+            }\n+            //Fall through\n+        default :\n+            break;\n+\n+    }\n+} else {\n+    if (isDigits(str)) {\n+        try {\n+            if (str.length() <= 9) {\n+                return createInteger(str);\n+            } else if(str.length() <= 18) {\n+                return createLong(str);\n+            }\n+        } catch (NumberFormatException nfe) {\n+            //Ignore. Let next case handle it.\n+        }\n+    }\n+    //User doesn't have a preference on the return type, so let's start\n+    //small and go from there...\n+    boolean allZeros = isAllZeros(str);\n+    try {\n+        Float f = createFloat(str);\n+        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+            return f;\n+        }\n+    } catch (NumberFormatException nfe) {\n+        // ignore the bad number\n+    }\n+    try {\n+        Double d = createDouble(str);\n+        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+            return d;\n+        }\n+    } catch (NumberFormatException nfe) {\n+        // ignore the bad number\n+    }\n+\n+    return createBigDecimal(str);\n+}\n+throw new NumberFormatException(str + \" is not a valid number.\"); \n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}