{
    "patch": "Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\nif (candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n    try {\n        field.setAccessible(true);\n        field.set(fieldInstance, candidate);\n    } catch (IllegalAccessException e) {\n        throw new IllegalStateException(\"Could not set field value\", e);\n    }\n    if (!field.getType().equals(candidate.getClass())) {\n        injectMockCandidate(candidate.getClass().getSuperclass(), mocks, candidate);\n    }\n} else if(candidate != null) {\n    injectMockCandidate(candidate.getClass(), mocks, candidate);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..ec5851aff 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,23 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+if (candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n+    try {\n+        field.setAccessible(true);\n+        field.set(fieldInstance, candidate);\n+    } catch (IllegalAccessException e) {\n+        throw new IllegalStateException(\"Could not set field value\", e);\n+    }\n+    if (!field.getType().equals(candidate.getClass())) {\n+        injectMockCandidate(candidate.getClass().getSuperclass(), mocks, candidate);\n+    }\n+} else if(candidate != null) {\n+    injectMockCandidate(candidate.getClass(), mocks, candidate);\n+}\n         }\n     }\n ",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}