{
    "patch": "import com.google.javascript.rhino.jstype.FunctionType;\nimport com.google.javascript.rhino.jstype.JSType;\nimport com.google.javascript.rhino.jstype.ObjectType;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.TypeI;\nimport com.google.javascript.jscomp.AbstractCompiler;\nimport com.google.javascript.jscomp.CompilerInput;\nimport com.google.javascript.jscomp.NodeTraversal;\nimport com.google.javascript.jscomp.TypedScope;\nimport com.google.javascript.jscomp.TypedVar;\n\nprivate void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n        report(t, n, NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n        FunctionType functionType = (FunctionType) childType;\n\n        boolean isExtern = false;\n        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n        if(functionJSDocInfo != null) {\n            String sourceName = functionJSDocInfo.getSourceName();\n            CompilerInput functionSource = compiler.getInput(sourceName);\n            isExtern = functionSource.isExtern();\n        }\n\n        // Non-native constructors should not be called directly\n        // unless they specify a return type and are defined\n        // in an extern.\n        if (functionType.isConstructor() &&\n                !functionType.isNativeObjectType() &&\n                (functionType.getReturnType().isUnknownType() ||\n                 functionType.getReturnType().isVoidType() ||\n                 !isExtern)) {\n            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        }\n\n        // Functions with exp\u2116tlicit 'this' types must be called in a GETPROP\n        // or GETELEM.\n        ObjectType thisType = functionType.getTypeOfThis();\n        if (thisType != null) {\n            Node callerNode = n.getParent();\n            if (callerNode.isGetProp() || callerNode.isGetElem()) {\n                ensureTyped(t, callerNode.getFirstChild(), thisType);\n            } else {\n                report(t, n, INVALID_THIS_TYPE);\n                ensureTyped(t, n);\n                return;\n            }\n        }\n\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n    } else {\n        ensureTyped(t, n);\n    }\n\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..8f99c396 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,75 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+import com.google.javascript.rhino.jstype.FunctionType;\n+import com.google.javascript.rhino.jstype.JSType;\n+import com.google.javascript.rhino.jstype.ObjectType;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.TypeI;\n+import com.google.javascript.jscomp.AbstractCompiler;\n+import com.google.javascript.jscomp.CompilerInput;\n+import com.google.javascript.jscomp.NodeTraversal;\n+import com.google.javascript.jscomp.TypedScope;\n+import com.google.javascript.jscomp.TypedVar;\n+\n+private void visitCall(NodeTraversal t, Node n) {\n+    Node child = n.getFirstChild();\n+    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n+\n+    if (!childType.canBeCalled()) {\n+        report(t, n, NOT_CALLABLE, childType.toString());\n+        ensureTyped(t, n);\n+        return;\n+    }\n+\n+    // A couple of types can be called as if they were functions.\n+    // If it is a function type, then validate parameters.\n+    if (childType instanceof FunctionType) {\n+        FunctionType functionType = (FunctionType) childType;\n+\n+        boolean isExtern = false;\n+        JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n+        if(functionJSDocInfo != null) {\n+            String sourceName = functionJSDocInfo.getSourceName();\n+            CompilerInput functionSource = compiler.getInput(sourceName);\n+            isExtern = functionSource.isExtern();\n+        }\n+\n+        // Non-native constructors should not be called directly\n+        // unless they specify a return type and are defined\n+        // in an extern.\n+        if (functionType.isConstructor() &&\n+                !functionType.isNativeObjectType() &&\n+                (functionType.getReturnType().isUnknownType() ||\n+                 functionType.getReturnType().isVoidType() ||\n+                 !isExtern)) {\n+            report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+        }\n+\n+        // Functions with exp\u2116tlicit 'this' types must be called in a GETPROP\n+        // or GETELEM.\n+        ObjectType thisType = functionType.getTypeOfThis();\n+        if (thisType != null) {\n+            Node callerNode = n.getParent();\n+            if (callerNode.isGetProp() || callerNode.isGetElem()) {\n+                ensureTyped(t, callerNode.getFirstChild(), thisType);\n+            } else {\n+                report(t, n, INVALID_THIS_TYPE);\n+                ensureTyped(t, n);\n+                return;\n+            }\n+        }\n+\n+        visitParameterList(t, n, functionType);\n+        ensureTyped(t, n, functionType.getReturnType());\n+    } else {\n+        ensureTyped(t, n);\n+    }\n+\n+    // TODO: Add something to check for calls of RegExp objects, which is not\n+    // supported by IE.  Either say something about the return type or warn\n+    // about the non-portability of the call or both.\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}