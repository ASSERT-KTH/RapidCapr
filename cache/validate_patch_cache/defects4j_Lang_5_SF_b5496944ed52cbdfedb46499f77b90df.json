{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null) {\n        return null;\n    }\n\n    final int len = str.length();\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    final char ch0 = str.charAt(0);\n    final char ch1 = str.charAt(1);\n    if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    int firstUnderscoreIndex = str.indexOf('_');\n    int secondUnderscoreIndex = -1;\n\n    if (firstUnderscoreIndex == -1 || len - firstUnderscoreIndex <= 1) {\n        return new Locale(str);\n    }\n\n    // Handling the special case when language is empty\n    if (firstUnderscoreIndex == 1) {\n        if (len - firstUnderscoreIndex == 2 || len - firstUnderscoreIndex == 4) {\n            return new Locale(\"\", str.substring(2));\n        }\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    for (int i = firstUnderscoreIndex + 1; i < len; i++) {\n        if (str.charAt(i) == '_') {\n            secondUnderscoreIndex = i;\n            break;\n        }\n    }\n\n    if (firstUnderscoreIndex > 0 && secondUnderscoreIndex != -1 && secondUnderscoreIndex - firstUnderscoreIndex > 1) {\n        String language = str.substring(0, firstUnderscoreIndex);\n        String country = str.substring(firstUnderscoreIndex + 1, secondUnderscoreIndex);\n        String variant = str.substring(secondUnderscoreIndex + 1);\n        return new Locale(language, country, variant);\n    }\n\n    if (firstUnderscoreIndex > 0 && secondUnderscoreIndex != -1 && secondUnderscoreIndex == firstUnderscoreIndex + 1) {\n        String language = str.substring(0, firstUnderscoreIndex);\n        String variant = str.substring(secondUnderscoreIndex + 1);\n        if (variant.length() > 0) {\n            return new Locale(language, \"\", variant);\n        }\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    if (firstUnderscoreIndex > 0 && secondUnderscoreIndex == -1) {\n        String language = str.substring(0, firstUnderscoreIndex);\n        String country = str.substring(firstUnderscoreIndex + 1);\n        if (country.length() > 0) {\n            return new Locale(language, country);\n        }\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..48dc4d04 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,48 +85,72 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n+public static Locale toLocale(final String str) {\n+    if (str == null) {\n+        return null;\n+    }\n+\n+    final int len = str.length();\n+    if (len < 2) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    final char ch0 = str.charAt(0);\n+    final char ch1 = str.charAt(1);\n+    if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    int firstUnderscoreIndex = str.indexOf('_');\n+    int secondUnderscoreIndex = -1;\n+\n+    if (firstUnderscoreIndex == -1 || len - firstUnderscoreIndex <= 1) {\n+        return new Locale(str);\n+    }\n+\n+    // Handling the special case when language is empty\n+    if (firstUnderscoreIndex == 1) {\n+        if (len - firstUnderscoreIndex == 2 || len - firstUnderscoreIndex == 4) {\n+            return new Locale(\"\", str.substring(2));\n         }\n-        final int len = str.length();\n-        if (len < 2) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    for (int i = firstUnderscoreIndex + 1; i < len; i++) {\n+        if (str.charAt(i) == '_') {\n+            secondUnderscoreIndex = i;\n+            break;\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n     }\n \n+    if (firstUnderscoreIndex > 0 && secondUnderscoreIndex != -1 && secondUnderscoreIndex - firstUnderscoreIndex > 1) {\n+        String language = str.substring(0, firstUnderscoreIndex);\n+        String country = str.substring(firstUnderscoreIndex + 1, secondUnderscoreIndex);\n+        String variant = str.substring(secondUnderscoreIndex + 1);\n+        return new Locale(language, country, variant);\n+    }\n+\n+    if (firstUnderscoreIndex > 0 && secondUnderscoreIndex != -1 && secondUnderscoreIndex == firstUnderscoreIndex + 1) {\n+        String language = str.substring(0, firstUnderscoreIndex);\n+        String variant = str.substring(secondUnderscoreIndex + 1);\n+        if (variant.length() > 0) {\n+            return new Locale(language, \"\", variant);\n+        }\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    if (firstUnderscoreIndex > 0 && secondUnderscoreIndex == -1) {\n+        String language = str.substring(0, firstUnderscoreIndex);\n+        String country = str.substring(firstUnderscoreIndex + 1);\n+        if (country.length() > 0) {\n+            return new Locale(language, country);\n+        }\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Obtains the list of locales to search through when performing",
    "result_reason": "java.lang.IllegalArgumentException: Invalid locale format: _GB",
    "test_result": "FAIL"
}