{
    "patch": "  private boolean isSafeReplacement(Node node, Node replacement) {\n    // No checks are needed for simple names.\n    if (node.isName()) {\n      return true;\n    }\n\n    if (!node.isGetProp()) {\n      return false;\n    }\n\n    Node target = node.getFirstChild();\n    if (target.isName()\n        && isNameAssignedTo(target.getString(), replacement)) {\n      return false;\n    }\n\n    // Check the property name for assignments as well.\n    Node property = target.getNext();\n    if (property != null && property.isString()) {\n      String propName = property.getString();\n      if (isNameAssignedTo(propName, replacement)) {\n        return false;\n      }\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java\nindex 0f03e355..a691c327 100644\n--- a/src/com/google/javascript/jscomp/ExploitAssigns.java\n+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java\n@@ -208,14 +208,26 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n     if (node.isName()) {\n       return true;\n     }\n-    Preconditions.checkArgument(node.isGetProp());\n \n-      node = node.getFirstChild();\n-    if (node.isName()\n-        && isNameAssignedTo(node.getString(), replacement)) {\n+    if (!node.isGetProp()) {\n       return false;\n     }\n \n+    Node target = node.getFirstChild();\n+    if (target.isName()\n+        && isNameAssignedTo(target.getString(), replacement)) {\n+      return false;\n+    }\n+\n+    // Check the property name for assignments as well.\n+    Node property = target.getNext();\n+    if (property != null && property.isString()) {\n+      String propName = property.getString();\n+      if (isNameAssignedTo(propName, replacement)) {\n+        return false;\n+      }\n+    }\n+\n     return true;\n   }\n \n@@ -241,4 +253,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n \n     return false;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}