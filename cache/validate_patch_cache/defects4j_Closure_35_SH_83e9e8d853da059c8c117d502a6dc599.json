{
    "patch": "      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null && constraintObj.isRecordType()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            if (propType.isSubtypeOf(typeToInfer)) {\n              objType.defineInferredProperty(prop, typeToInfer, null);\n            } else {\n              warnings.add(JSError.make(n.getSourceFileName(), n.getLineno(),\n                  TypeValidator.TYPE_MISMATCH_WARNING,\n                  propType.toString(), typeToInfer.toString()));\n              objType.defineInferredProperty(prop, propType, null);\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..a7df7168 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,9 +1118,8 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n+      if (objType != null && constraintObj.isRecordType()) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n           if (!objType.isPropertyTypeDeclared(prop)) {\n@@ -1129,7 +1128,14 @@ class TypeInference\n               typeToInfer =\n                   getNativeType(VOID_TYPE).getLeastSupertype(propType);\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+            if (propType.isSubtypeOf(typeToInfer)) {\n+              objType.defineInferredProperty(prop, typeToInfer, null);\n+            } else {\n+              warnings.add(JSError.make(n.getSourceFileName(), n.getLineno(),\n+                  TypeValidator.TYPE_MISMATCH_WARNING,\n+                  propType.toString(), typeToInfer.toString()));\n+              objType.defineInferredProperty(prop, propType, null);\n+            }\n           }\n         }\n       }",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}