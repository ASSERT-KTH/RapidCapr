{
    "patch": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.EigenDecomposition;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    EigenDecomposition eig = new EigenDecomposition(m);\n    RealMatrix sqrt = eig.getSquareRoot();\n    RealMatrix res = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n    for (int i = 0; i < m.getRowDimension(); i++) {\n        for (int j = 0; j < m.getColumnDimension(); j++) {\n            res.setEntry(i, j, sqrt.getEntry(i, j));\n        }\n    }\n    return res;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..146c4840a 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,21 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.MatrixUtils;\n+import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.linear.MatrixUtils;\n+import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.linear.EigenDecomposition;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    EigenDecomposition eig = new EigenDecomposition(m);\n+    RealMatrix sqrt = eig.getSquareRoot();\n+    RealMatrix res = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());\n+    for (int i = 0; i < m.getRowDimension(); i++) {\n+        for (int j = 0; j < m.getColumnDimension(); j++) {\n+            res.setEntry(i, j, sqrt.getEntry(i, j));\n+        }\n     }\n+    return res;\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}