{
    "patch": " private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // NOTICE: removing unreferenced function args breaks\n    // Function.prototype.length. In advance mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source. Rather than create a new option for\n    // this, we assume that if the user is removing globals then it's OK\n    // to remove unused function args.\n    //\n    // see http://code.google.com/p/closure-compiler/issues/detail?id=253\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    } else {\n      // Strip unreferenced args off the end of the function declaration.\n      int count = 0;\n      for (Node arg : argList.children()) {\n        if (!arg.isName() ||\n            referenced.contains(fnScope.getVar(arg.getString()))) {\n          break;\n        }\n\n        ++count;\n        arg.removeFirstChild();\n        compiler.reportCodeChange();\n      }\n\n      if (count != argList.getChildCount()) {\n        if (count == 0) {\n          // All the args were unused, we simply remove all of them.\n          argList.removeChildren();\n        } else {\n          // Remove the remaining unused args.\n          Node toRemove = argList.getLastChild();\n          while (count > 1) {\n            Node previous = toRemove.getPrevious();\n            argList.removeChild(toRemove);\n            toRemove = previous;\n            --count;\n          }\n          toRemove.detachFromParent();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..a12d1961 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,53 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+ private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    // NOTICE: removing unreferenced function args breaks\n+    // Function.prototype.length. In advance mode, we don't really care\n+    // about this: we consider \"length\" the equivalent of reflecting on\n+    // the function's lexical source. Rather than create a new option for\n+    // this, we assume that if the user is removing globals then it's OK\n+    // to remove unused function args.\n+    //\n+    // see http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    } else {\n+      // Strip unreferenced args off the end of the function declaration.\n+      int count = 0;\n+      for (Node arg : argList.children()) {\n+        if (!arg.isName() ||\n+            referenced.contains(fnScope.getVar(arg.getString()))) {\n+          break;\n+        }\n+\n+        ++count;\n+        arg.removeFirstChild();\n+        compiler.reportCodeChange();\n+      }\n+\n+      if (count != argList.getChildCount()) {\n+        if (count == 0) {\n+          // All the args were unused, we simply remove all of them.\n+          argList.removeChildren();\n+        } else {\n+          // Remove the remaining unused args.\n+          Node toRemove = argList.getLastChild();\n+          while (count > 1) {\n+            Node previous = toRemove.getPrevious();\n+            argList.removeChild(toRemove);\n+            toRemove = previous;\n+            --count;\n+          }\n+          toRemove.detachFromParent();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}