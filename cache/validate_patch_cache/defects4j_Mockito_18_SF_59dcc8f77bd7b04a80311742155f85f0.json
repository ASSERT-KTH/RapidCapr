{
    "patch": "public static Values addValueToList(Values values, Integer value) {\n    List<Integer> list = (List<Integer>) values.returnValueFor(List.class);\n    if(list == null) {\n        list = new ArrayList<Integer>();\n        values = values.returnValue(list);\n    }\n    list.add(value);\n    return values;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..ff41c13fa 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,15 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Values addValueToList(Values values, Integer value) {\n+    List<Integer> list = (List<Integer>) values.returnValueFor(List.class);\n+    if(list == null) {\n+        list = new ArrayList<Integer>();\n+        values = values.returnValue(list);\n+    }\n+    list.add(value);\n+    return values;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}