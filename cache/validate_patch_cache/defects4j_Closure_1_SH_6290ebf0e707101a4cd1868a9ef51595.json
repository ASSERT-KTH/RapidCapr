{
    "patch": "    Node block = function.getLastChild();\n\n    // Mark all referenced args on the function signature.\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      Map<Integer, Node> referencedArgs = Maps.newHashMap();\n      List<Var> argSet = fnScope.getArguments();\n      for (int i = 0, len = argSet.size(); i < len; ++i) {\n        Var var = argSet.get(i);\n        if (referenced.contains(var)) {\n          referencedArgs.put(i, var.getNode());\n        }\n      }\n\n      // Walk through the function body, removing any reference to unsed args.\n      Node c = block.getFirstChild();\n      while (c != null) {\n        Node next = c.getNext(); // c may be replaced, so grab next first\n        if (c.isParamList()) {\n          for (int i = 0, len = argList.getChildCount(); i < len; ++i) {\n            Node argName = argList.getChildAtIndex(i);\n            Node argValue = referencedArgs.get(i);\n            Preconditions.checkNotNull(argValue);\n            if (argValue.getBooleanProp(Node.IS_UNUSED_PARAMETER)) {\n              replaceParamNode(c, argName, argValue.cloneNode());\n              block.addChildToFront(argValue);\n              referencedArgs.put(i, argName);\n            }\n          }\n          if (argList.hasMoreThanOneChild() &&\n              argList.getFirstChild().isRest()) {\n            return;\n          }\n        } else if (c.isName()) {\n          Var var = fnScope.getVar(c.getString());\n          Node rvalue = c.getFirstChild();\n          if (var != null && !referenced.contains(var)) {\n            if (rvalue == null) {\n              c.detach(); // parameter with no default value\n              compiler.reportCodeChange();\n            } else {\n              // move value to body\n              c.replaceWith(rvalue.detach());\n              block.addChildToFront(c);\n              c = rvalue;\n              compiler.reportCodeChange();\n            }\n          }\n        }\n        c = next;\n      }\n\n      // Strip unreferenced args from the function declaration.\n      boolean lastArgWasReferenced = true;\n      while (argList.hasChildren()\n             && (!lastArgWasReferenced\n                 || argList.getFirstChild().isUnused())) {\n        lastArgWasReferenced = false;\n        Node lastArg = argList.getLastChild();\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          lastArgWasReferenced = true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..54c56c7e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,73 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node block = function.getLastChild();\n+\n+    // Mark all referenced args on the function signature.\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      Map<Integer, Node> referencedArgs = Maps.newHashMap();\n+      List<Var> argSet = fnScope.getArguments();\n+      for (int i = 0, len = argSet.size(); i < len; ++i) {\n+        Var var = argSet.get(i);\n+        if (referenced.contains(var)) {\n+          referencedArgs.put(i, var.getNode());\n+        }\n+      }\n+\n+      // Walk through the function body, removing any reference to unsed args.\n+      Node c = block.getFirstChild();\n+      while (c != null) {\n+        Node next = c.getNext(); // c may be replaced, so grab next first\n+        if (c.isParamList()) {\n+          for (int i = 0, len = argList.getChildCount(); i < len; ++i) {\n+            Node argName = argList.getChildAtIndex(i);\n+            Node argValue = referencedArgs.get(i);\n+            Preconditions.checkNotNull(argValue);\n+            if (argValue.getBooleanProp(Node.IS_UNUSED_PARAMETER)) {\n+              replaceParamNode(c, argName, argValue.cloneNode());\n+              block.addChildToFront(argValue);\n+              referencedArgs.put(i, argName);\n+            }\n+          }\n+          if (argList.hasMoreThanOneChild() &&\n+              argList.getFirstChild().isRest()) {\n+            return;\n+          }\n+        } else if (c.isName()) {\n+          Var var = fnScope.getVar(c.getString());\n+          Node rvalue = c.getFirstChild();\n+          if (var != null && !referenced.contains(var)) {\n+            if (rvalue == null) {\n+              c.detach(); // parameter with no default value\n+              compiler.reportCodeChange();\n+            } else {\n+              // move value to body\n+              c.replaceWith(rvalue.detach());\n+              block.addChildToFront(c);\n+              c = rvalue;\n+              compiler.reportCodeChange();\n+            }\n+          }\n+        }\n+        c = next;\n+      }\n+\n+      // Strip unreferenced args from the function declaration.\n+      boolean lastArgWasReferenced = true;\n+      while (argList.hasChildren()\n+             && (!lastArgWasReferenced\n+                 || argList.getFirstChild().isUnused())) {\n+        lastArgWasReferenced = false;\n+        Node lastArg = argList.getLastChild();\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          lastArgWasReferenced = true;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}