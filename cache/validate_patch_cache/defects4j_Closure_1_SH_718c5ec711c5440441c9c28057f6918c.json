{
    "patch": "    Set<Var> unusedParameters = Sets.newHashSet();\n    // Populate the set unusedParameters with all function arguments\n    // and remove the referenced ones along with the parameters themselves.\n    for (Node arg : argList.children()) {\n      Var var = fnScope.getVar(arg.getString());\n      if (var == null) {\n        // Shouldn't happen, but be safe and bail if it does.\n        return;\n      }\n      unusedParameters.add(var);\n      // If the argument is referenced, remove it from the set of unused parameters.\n      if (referenced.contains(var)) {\n        unusedParameters.remove(var);\n      }\n    }\n    if (!unusedParameters.isEmpty()) {\n      if (!modifyCallers) {\n        for (Var v : unusedParameters) {\n          v.getParentNode().removeChild(v.getNameNode());\n          compiler.reportCodeChange();\n        }\n      } else {\n        callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..132fb1a7 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,29 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Set<Var> unusedParameters = Sets.newHashSet();\n+    // Populate the set unusedParameters with all function arguments\n+    // and remove the referenced ones along with the parameters themselves.\n+    for (Node arg : argList.children()) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (var == null) {\n+        // Shouldn't happen, but be safe and bail if it does.\n+        return;\n+      }\n+      unusedParameters.add(var);\n+      // If the argument is referenced, remove it from the set of unused parameters.\n+      if (referenced.contains(var)) {\n+        unusedParameters.remove(var);\n+      }\n+    }\n+    if (!unusedParameters.isEmpty()) {\n+      if (!modifyCallers) {\n+        for (Var v : unusedParameters) {\n+          v.getParentNode().removeChild(v.getNameNode());\n+          compiler.reportCodeChange();\n+        }\n+      } else {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}