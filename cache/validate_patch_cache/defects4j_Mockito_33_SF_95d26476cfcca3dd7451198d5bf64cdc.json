{
    "patch": "public boolean hasSameMethod(Invocation candidate) {\n    Method m1 = invocation.getMethod();\n    Method m2 = candidate.getMethod();\n    \n    if (m1 == m2) {\n        return true;\n    }\n    \n    if (m1.getName().equals(m2.getName()) && m1.getParameterCount() == m2.getParameterCount()) {\n        for (int i = 0; i < m1.getParameters().length; i++) {\n            if (!m1.getParameters()[i].getType().equals(m2.getParameters()[i].getType())) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    return false;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 203413fc9..e428a64c2 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -89,16 +89,26 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n         return !overloadedButSameArgs;\n     }\n \n-    public boolean hasSameMethod(Invocation candidate) {        \n-        //not using method.equals() for 1 good reason:\n-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest\n-        Method m1 = invocation.getMethod();\n-        Method m2 = candidate.getMethod();\n-        \n-        \t/* Avoid unnecessary cloning */\n-        return m1.equals(m2);\n+public boolean hasSameMethod(Invocation candidate) {\n+    Method m1 = invocation.getMethod();\n+    Method m2 = candidate.getMethod();\n+    \n+    if (m1 == m2) {\n+        return true;\n     }\n     \n+    if (m1.getName().equals(m2.getName()) && m1.getParameterCount() == m2.getParameterCount()) {\n+        for (int i = 0; i < m1.getParameters().length; i++) {\n+            if (!m1.getParameters()[i].getType().equals(m2.getParameters()[i].getType())) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+    \n+    return false;\n+}\n+    \n     public Location getLocation() {\n         return invocation.getLocation();\n     }\n@@ -126,4 +136,4 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n \n         return out;\n     }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}