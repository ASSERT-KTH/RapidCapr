{
    "patch": "for (int i = 0; i < count; i++) {\n    FieldUtils.verifyValueBounds(savedFields[i].iField, savedFields[i].iValue, iInstant);\n    resetFields = savedFields[i].getField().set(this, resetFields, savedFields[i].iValue);\n    if (resetFields == null) {\n        throw new IllegalArgumentException(\"ResettingField (\" + savedFields[i].getField() +\n                \") returned null for input (\" + savedFields[i].iValue + \")\");\n    }\n    millis = savedFields[i].set(millis, resetFields.copy());\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..92020f87 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,15 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+for (int i = 0; i < count; i++) {\n+    FieldUtils.verifyValueBounds(savedFields[i].iField, savedFields[i].iValue, iInstant);\n+    resetFields = savedFields[i].getField().set(this, resetFields, savedFields[i].iValue);\n+    if (resetFields == null) {\n+        throw new IllegalArgumentException(\"ResettingField (\" + savedFields[i].getField() +\n+                \") returned null for input (\" + savedFields[i].iValue + \")\");\n+    }\n+    millis = savedFields[i].set(millis, resetFields.copy());\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}