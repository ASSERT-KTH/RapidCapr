{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  // Ignore empty blocks\n  if (n.getType() == Token.BLOCK && n.hasChildren()) {\n    for (Node m = n.getFirstChild(); m != null; m = m.getNext()) {\n      // Don't fold if any descendant is a FOR-IN statement\n      if (NodeUtil.containsType(m, Token.FOR_IN)) {\n        return false;\n      }\n    }\n\n    // Ignore EXPR_RESULT nodes that are returned from an event handler.\n    // This is because IE has a bug where event handlers behave differently when their\n    // return value is used vs. when their return value is in an EXPR_RESULT.\n    // See: http://code.google.com/p/closure-compiler/issues/detail?id=291\n    Node parent = n.getParent();\n    if (parent != null && parent.getType() == Token.EXPR_RESULT && isEventHandlerBlock(n)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Returns true if the given block is a block of event handler statements that contains\n * an EXPR_RESULT node that is returned by the event handler.\n * Example:\n * function foo(e) { var x = e.target; return x.value; }\n * isEventHandlerBlock(foo)?\n * @param block The node to check.\n */\nprivate boolean isEventHandlerBlock(Node block) {\n  if (block.getType() == Token.BLOCK) {\n    Node child = block.getFirstChild();\n    if (child != null && child.getType() == Token.FUNCTION) {\n      Node body = child.getLastChild();\n      Node returnStmt = null;\n      for (Node node = body.getFirstChild(); node != null; node = node.getNext()) {\n        if (node.getType() == Token.RETURN) {\n          if (returnStmt == null) {\n            returnStmt = node;\n          } else {\n            // There are multiple return statements.\n            return false;\n          }\n        } else {\n          if (!node.isExprResult()) {\n            // Only EXPR_RESULT nodes are allowed.\n            return false;\n          }\n          if (NodeUtil.isImmutableValue(node.getFirstChild())) {\n            // Only non-constant expressions are allowed.\n            return false;\n          }\n        }\n      }\n      return returnStmt != null && returnStmt.getFirstChild() == child;\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..9cfe58d8 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,70 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  // Ignore empty blocks\n+  if (n.getType() == Token.BLOCK && n.hasChildren()) {\n+    for (Node m = n.getFirstChild(); m != null; m = m.getNext()) {\n+      // Don't fold if any descendant is a FOR-IN statement\n+      if (NodeUtil.containsType(m, Token.FOR_IN)) {\n+        return false;\n       }\n     }\n \n-    return false;\n+    // Ignore EXPR_RESULT nodes that are returned from an event handler.\n+    // This is because IE has a bug where event handlers behave differently when their\n+    // return value is used vs. when their return value is in an EXPR_RESULT.\n+    // See: http://code.google.com/p/closure-compiler/issues/detail?id=291\n+    Node parent = n.getParent();\n+    if (parent != null && parent.getType() == Token.EXPR_RESULT && isEventHandlerBlock(n)) {\n+      return false;\n+    }\n+\n+    return true;\n   }\n \n+  return false;\n+}\n+\n+/**\n+ * Returns true if the given block is a block of event handler statements that contains\n+ * an EXPR_RESULT node that is returned by the event handler.\n+ * Example:\n+ * function foo(e) { var x = e.target; return x.value; }\n+ * isEventHandlerBlock(foo)?\n+ * @param block The node to check.\n+ */\n+private boolean isEventHandlerBlock(Node block) {\n+  if (block.getType() == Token.BLOCK) {\n+    Node child = block.getFirstChild();\n+    if (child != null && child.getType() == Token.FUNCTION) {\n+      Node body = child.getLastChild();\n+      Node returnStmt = null;\n+      for (Node node = body.getFirstChild(); node != null; node = node.getNext()) {\n+        if (node.getType() == Token.RETURN) {\n+          if (returnStmt == null) {\n+            returnStmt = node;\n+          } else {\n+            // There are multiple return statements.\n+            return false;\n+          }\n+        } else {\n+          if (!node.isExprResult()) {\n+            // Only EXPR_RESULT nodes are allowed.\n+            return false;\n+          }\n+          if (NodeUtil.isImmutableValue(node.getFirstChild())) {\n+            // Only non-constant expressions are allowed.\n+            return false;\n+          }\n+        }\n+      }\n+      return returnStmt != null && returnStmt.getFirstChild() == child;\n+    }\n+  }\n+  return false;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}