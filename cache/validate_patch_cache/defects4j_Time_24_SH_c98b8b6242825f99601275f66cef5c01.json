{
    "patch": "        boolean retry = false;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (e.getIllegalFieldValueType() == DateTimeFieldType.year() && count == 2) {\n                // support asymmetric year parsing\n                SavedField last = savedFields[0].iSavedState == null ? savedFields[1] : savedFields[0];\n                SavedField first = savedFields[0].iSavedState == null ? savedFields[0] : savedFields[1];\n                if (last.iField.getType() == DateTimeFieldType.year() &&\n                        first.iField.getType() == DateTimeFieldType.weekyear()) {\n                    retry = true;\n                    long m = last.iField.set(last.iSavedState, iDefaultYear, savedFields);\n                    m = first.iField.set(m, iDefaultYear, savedFields);\n                    return computeMillis(resetFields, text);            \n                }\n            }\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        if (retry == true) {\n            return computeMillis(resetFields, text);\n        }\n        return millis;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..de4aaca5 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,48 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        boolean retry = false;\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            if (e.getIllegalFieldValueType() == DateTimeFieldType.year() && count == 2) {\n+                // support asymmetric year parsing\n+                SavedField last = savedFields[0].iSavedState == null ? savedFields[1] : savedFields[0];\n+                SavedField first = savedFields[0].iSavedState == null ? savedFields[0] : savedFields[1];\n+                if (last.iField.getType() == DateTimeFieldType.year() &&\n+                        first.iField.getType() == DateTimeFieldType.weekyear()) {\n+                    retry = true;\n+                    long m = last.iField.set(last.iSavedState, iDefaultYear, savedFields);\n+                    m = first.iField.set(m, iDefaultYear, savedFields);\n+                    return computeMillis(resetFields, text);            \n+                }\n+            }\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+            }\n+            throw e;\n+        }\n+        \n+        if (iZone == null) {\n+            millis -= iOffset;\n+        } else {\n+            int offset = iZone.getOffsetFromLocal(millis);\n+            millis -= offset;\n+            if (offset != iZone.getOffset(millis)) {\n+                String message =\n+                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+                if (text != null) {\n+                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+                }\n+                throw new IllegalArgumentException(message);\n+            }\n+        }\n+        if (retry == true) {\n+            return computeMillis(resetFields, text);\n+        }\n+        return millis;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}