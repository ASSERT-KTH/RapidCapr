{
    "patch": "private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n    if (block == null || NodeUtil.isEmptyFunctionExpression(fnNode)) {\n      return CanInlineResult.NO;\n    }\n    boolean hasSideEffects = false;\n    if (block.hasChildren() && block.hasOneChild()) {\n      Node stmt = block.getFirstChild();\n      if (stmt.isReturn()) {\n        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n      }\n    }\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    boolean isFunctionCall = !callNode.getFirstChild().isName();\n    if (isFunctionCall) {\n      Preconditions.checkState(NodeUtil.isCallOrNew(callNode));\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        if (!NodeUtil.isFunctionObjectApply(callNode)) {\n          Preconditions.checkState(false, callNode.getClass());\n        }\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      // For each named parameter check if a mutable argument use more than one.\n      // Named parameters take the next position off the argument stack.\n      if (fnParam != null) {\n        if (cArg != null) {\n          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n            return CanInlineResult.NO;\n          }\n          // Check for arguments that are evaluated more than once.\n          // Note: Unlike block inlining, there it is not possible that a\n          // parameter reference will be in a loop.\n          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n              && NodeUtil.getNameReferenceCount(\n                  block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n        } else {\n          JSType paramType = NodeUtil.getPromisedTypeOfNode(fnParam);\n          if (paramType != null && paramType.isUnknownType()) {\n            // In the presence of unknown type, we don't know if the reference is safe\n            // to inline.\n            return CanInlineResult.MAYBE;\n          }\n        }\n\n        // Move to the next name.\n        fnParam = fnParam.getNext();\n      }\n\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match.\n      if (cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..d422d905 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,17 +686,18 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n+private CanInlineResult canInlineReferenceDirectly(\n       Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n     }\n \n     Node block = fnNode.getLastChild();\n-\n+    if (block == null || NodeUtil.isEmptyFunctionExpression(fnNode)) {\n+      return CanInlineResult.NO;\n+    }\n     boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n+    if (block.hasChildren() && block.hasOneChild()) {\n       Node stmt = block.getFirstChild();\n       if (stmt.isReturn()) {\n         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n@@ -708,7 +709,9 @@ class FunctionInjector {\n     // Functions called via 'call' and 'apply' have a this-object as\n     // the first parameter, but this is not part of the called function's\n     // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n+    boolean isFunctionCall = !callNode.getFirstChild().isName();\n+    if (isFunctionCall) {\n+      Preconditions.checkState(NodeUtil.isCallOrNew(callNode));\n       if (NodeUtil.isFunctionObjectCall(callNode)) {\n         // TODO(johnlenz): Support replace this with a value.\n         if (cArg == null || !cArg.isThis()) {\n@@ -716,8 +719,9 @@ class FunctionInjector {\n         }\n         cArg = cArg.getNext();\n       } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+        if (!NodeUtil.isFunctionObjectApply(callNode)) {\n+          Preconditions.checkState(false, callNode.getClass());\n+        }\n       }\n     }\n \n@@ -725,6 +729,7 @@ class FunctionInjector {\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg != null || fnParam != null) {\n       // For each named parameter check if a mutable argument use more than one.\n+      // Named parameters take the next position off the argument stack.\n       if (fnParam != null) {\n         if (cArg != null) {\n           if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n@@ -738,6 +743,13 @@ class FunctionInjector {\n                   block, fnParam.getString()) > 1) {\n             return CanInlineResult.NO;\n           }\n+        } else {\n+          JSType paramType = NodeUtil.getPromisedTypeOfNode(fnParam);\n+          if (paramType != null && paramType.isUnknownType()) {\n+            // In the presence of unknown type, we don't know if the reference is safe\n+            // to inline.\n+            return CanInlineResult.MAYBE;\n+          }\n         }\n \n         // Move to the next name.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}