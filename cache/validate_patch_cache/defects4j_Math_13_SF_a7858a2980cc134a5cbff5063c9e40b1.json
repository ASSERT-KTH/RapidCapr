{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealMatrix s = dec.getD().sqrt(); // use built-in matrix square root function\n    final RealMatrix sInv = MatrixUtils.inverse(s);\n    final RealMatrix invV = MatrixUtils.inverse(v);\n    final int n = m.getRowDimension();\n    final double eps = 1e-10; // set desired precision\n\n    // iteratively converge to the matrix square root\n    RealMatrix x = v.multiply(sInv);\n    RealMatrix prevX;\n    do {\n        prevX = x;\n        x = 0.5 * (x.add(invV.multiply(x.transpose()).multiply(invV))).add(x.multiply(s).multiply(x));\n    } while (x.subtract(prevX).getFrobeniusNorm() > eps);\n\n    return x;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..5140d4135 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,23 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix s = dec.getD().sqrt(); // use built-in matrix square root function\n+    final RealMatrix sInv = MatrixUtils.inverse(s);\n+    final RealMatrix invV = MatrixUtils.inverse(v);\n+    final int n = m.getRowDimension();\n+    final double eps = 1e-10; // set desired precision\n+\n+    // iteratively converge to the matrix square root\n+    RealMatrix x = v.multiply(sInv);\n+    RealMatrix prevX;\n+    do {\n+        prevX = x;\n+        x = 0.5 * (x.add(invV.multiply(x.transpose()).multiply(invV))).add(x.multiply(s).multiply(x));\n+    } while (x.subtract(prevX).getFrobeniusNorm() > eps);\n+\n+    return x;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}