{
    "patch": "public static double getTypedPercent(JSONObject jsonObject) {     \n    double total = 0;\n    double typed = 0;\n    Iterator<String> keys = jsonObject.keys();\n    while(keys.hasNext()) {\n        String key = keys.next();\n        if(jsonObject.get(key) instanceof Number) {\n            typed += jsonObject.getDouble(key);\n        }\n        total++;\n    }\n    if(total == 0) {\n        return 100.0;\n    } else {\n        return (typed / total) * 100.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..e352654d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JSONObject jsonObject) {     \n+    double total = 0;\n+    double typed = 0;\n+    Iterator<String> keys = jsonObject.keys();\n+    while(keys.hasNext()) {\n+        String key = keys.next();\n+        if(jsonObject.get(key) instanceof Number) {\n+            typed += jsonObject.getDouble(key);\n+        }\n+        total++;\n+    }\n+    if(total == 0) {\n+        return 100.0;\n+    } else {\n+        return (typed / total) * 100.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}