{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    if (str == null) {\n        return false;\n    }\n    int strLen = str.length();\n    if (strLen == 0) {\n        return false;\n    }\n    if (searchChars == null || searchChars.length == 0) {\n        return false;\n    }\n    int searchLen = searchChars.length;\n    if (containsOnly(str, searchChars)) {\n        return false;\n    }\n    for (int i = 0; i < strLen; i++) {\n        char ch = str.charAt(i);\n        if (Character.isHighSurrogate(ch) && i < strLen - 1) {\n            int codePoint = Character.toCodePoint(ch, str.charAt(i + 1));\n            i++; // Skip the low surrogate character\n            if (containsCodePoint(searchChars, codePoint)) {\n                return true;\n            }\n        } else {\n            if (contains(searchChars, ch)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nprivate static boolean contains(char[] arr, char ch) {\n    for (char c : arr) {\n        if (c == ch) {\n            return true;\n        }\n    }\n    return false;\n}\n\nprivate static boolean containsCodePoint(char[] arr, int codePoint) {\n    for (char c : arr) {\n        if (Character.toCodePoint(c) == codePoint) {\n            return true;\n        }\n    }\n    return false;\n}\n\npublic static boolean containsOnly(String str, char[] valid) {\n    if (valid == null || str == null) {\n        return false;\n    }\n    if (str.length() == 0) {\n        return true;\n    }\n    if (valid.length == 0) {\n        return false;\n    }\n    return indexOfAnyBut(str, valid) == -1;\n}\n\npublic static int indexOfAnyBut(String str, char[] searchChars) {\n    if (str == null || str.length() == 0 || searchChars == null || searchChars.length == 0) {\n        return -1;\n    }\n    outer: for (int i = 0; i < str.length(); i++) {\n        char ch = str.charAt(i);\n        for (int j = 0; j < searchChars.length; j++) {\n            if (searchChars[j] == ch) {\n                continue outer;\n            }\n        }\n        return i;\n    }\n    return -1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..f619d51f 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,84 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    if (str == null) {\n+        return false;\n+    }\n+    int strLen = str.length();\n+    if (strLen == 0) {\n+        return false;\n+    }\n+    if (searchChars == null || searchChars.length == 0) {\n+        return false;\n+    }\n+    int searchLen = searchChars.length;\n+    if (containsOnly(str, searchChars)) {\n+        return false;\n+    }\n+    for (int i = 0; i < strLen; i++) {\n+        char ch = str.charAt(i);\n+        if (Character.isHighSurrogate(ch) && i < strLen - 1) {\n+            int codePoint = Character.toCodePoint(ch, str.charAt(i + 1));\n+            i++; // Skip the low surrogate character\n+            if (containsCodePoint(searchChars, codePoint)) {\n+                return true;\n+            }\n+        } else {\n+            if (contains(searchChars, ch)) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean contains(char[] arr, char ch) {\n+    for (char c : arr) {\n+        if (c == ch) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean containsCodePoint(char[] arr, int codePoint) {\n+    for (char c : arr) {\n+        if (Character.toCodePoint(c) == codePoint) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+public static boolean containsOnly(String str, char[] valid) {\n+    if (valid == null || str == null) {\n+        return false;\n+    }\n+    if (str.length() == 0) {\n+        return true;\n+    }\n+    if (valid.length == 0) {\n+        return false;\n+    }\n+    return indexOfAnyBut(str, valid) == -1;\n+}\n+\n+public static int indexOfAnyBut(String str, char[] searchChars) {\n+    if (str == null || str.length() == 0 || searchChars == null || searchChars.length == 0) {\n+        return -1;\n+    }\n+    outer: for (int i = 0; i < str.length(); i++) {\n+        char ch = str.charAt(i);\n+        for (int j = 0; j < searchChars.length; j++) {\n+            if (searchChars[j] == ch) {\n+                continue outer;\n+            }\n+        }\n+        return i;\n+    }\n+    return -1;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}