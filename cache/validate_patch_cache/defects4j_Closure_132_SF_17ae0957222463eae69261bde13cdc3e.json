{
    "patch": " private Node tryMinimizeIf(Node n) {\n    Node parent = n.getParent();\n    Node cond = n.getFirstChild();\n\n    if (NodeUtil.isLiteralValue(cond, true)) {\n      return n;\n    }\n\n    Node thenBranch = cond.getNext();\n    Node elseBranch = thenBranch.getNext();\n\n    if (elseBranch == null) {\n      if (isFoldableExpressBlock(thenBranch)) {\n        Node expr = getBlockExpression(thenBranch);\n        if (!late && isPropertyAssignmentInExpression(expr)) {\n          return n;\n        }\n\n        if (cond.isNot()) {\n          if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&\n              isLowerPrecedenceInExpression(expr.getFirstChild(),\n                  OR_PRECEDENCE)) {\n            return n;\n          }\n\n          Node or = IR.or(\n              cond.removeFirstChild(),\n              expr.removeFirstChild()).srcref(n);\n          Node newExpr = NodeUtil.newExpr(or);\n          parent.replaceChild(n, newExpr);\n          reportCodeChange();\n\n          return newExpr;\n        }\n\n        if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&\n            isLowerPrecedenceInExpression(expr.getFirstChild(),\n                AND_PRECEDENCE)) {\n          return n;\n        }\n\n        n.removeChild(cond);\n        Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);\n        Node newExpr = NodeUtil.newExpr(and);\n        parent.replaceChild(n, newExpr);\n        reportCodeChange();\n\n        return newExpr;\n      } else {\n        if (NodeUtil.isStatementBlock(thenBranch) &&\n            thenBranch.hasOneChild()) {\n          Node innerIf = thenBranch.getFirstChild();\n\n          if (innerIf.isIf()) {\n            Node innerCond = innerIf.getFirstChild();\n            Node innerThenBranch = innerCond.getNext();\n            Node innerElseBranch = innerThenBranch.getNext();\n\n            if (innerElseBranch == null &&\n                 !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&\n                   isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {\n              n.detachChildren();\n              n.addChildToBack(\n                  IR.and(\n                      cond,\n                      innerCond.detachFromParent())\n                      .srcref(cond));\n              n.addChildrenToBack(innerThenBranch.detachFromParent());\n              reportCodeChange();\n              return n;\n            }\n          }\n        }\n      }\n\n      return n;\n    }\n\n    tryRemoveRepeatedStatements(n);\n\n    if (cond.isNot() && !consumesDanglingElse(elseBranch)) {\n      n.replaceChild(cond, cond.removeFirstChild());\n      n.removeChild(thenBranch);\n      n.addChildToBack(thenBranch);\n      reportCodeChange();\n      return n;\n    }\n\n    if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {\n      Node thenExpr = getBlockReturnExpression(thenBranch);\n      Node elseExpr = getBlockReturnExpression(elseBranch);\n      n.removeChild(cond);\n      thenExpr.detachFromParent();\n      elseExpr.detachFromParent();\n\n      if (thenExpr.isName() && elseExpr.isName()\n          && thenExpr.getString().equals(elseExpr.getString())) {\n        Node returnNode = new Node(Token.RETURN, thenExpr).srcref(n);\n        parent.replaceChild(n, returnNode);\n        reportCodeChange();\n        return returnNode;\n      } else if (NodeUtil.mayHaveSideEffects(thenExpr)\n          || NodeUtil.mayHaveSideEffects(elseExpr)) {\n        Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n        Node returnNode = IR.returnNode(hookNode);\n        parent.replaceChild(n, returnNode);\n        reportCodeChange();\n        return returnNode;\n      } else {\n        Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n        Node returnNode = new Node(Token.RETURN, hookNode).srcref(n);\n        parent.replaceChild(n, returnNode);\n        reportCodeChange();\n        return returnNode;\n      }\n    }\n\n    boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);\n    boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);\n\n    if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n      Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n      Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n\n      if (thenOp.getType() == elseOp.getType()) {\n        if (NodeUtil.isAssignmentOp(thenOp)) {\n          Node lhs = thenOp.getFirstChild();\n\n          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild())\n              && !mayEffectMutableState(lhs)) {\n            n.removeChild(cond);\n            Node assignName = thenOp.removeFirstChild();\n            Node thenExpr = thenOp.removeFirstChild();\n            Node elseExpr = elseOp.getLastChild().detachFromParent();\n            elseOp.removeChild(elseExpr);\n            Node hookNode =\n                IR.hook(cond, thenExpr, elseExpr).srcref(n);\n            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n                              .srcref(thenOp);\n            Node expr = NodeUtil.newExpr(assign);\n            parent.replaceChild(n, expr);\n            reportCodeChange();\n            return expr;\n          }\n        }\n      }\n      n.removeChild(cond);\n      thenOp.detachFromParent();\n      elseOp.detachFromParent();\n      Node expr = IR.exprResult(\n          IR.hook(cond, thenOp, elseOp).srcref(n));\n      parent.replaceChild(n, expr);\n      reportCodeChange();\n      return expr;\n    }\n\n    boolean thenBranchIsVar = isVarBlock(thenBranch);\n    boolean elseBranchIsVar = isVarBlock(elseBranch);\n\n    if (thenBranchIsVar && elseBranchIsExpressionBlock &&\n        getBlockExpression(elseBranch).getFirstChild().isAssign()) {\n      Node var = getBlockVar(thenBranch);\n      Node elseAssign = getBlockExpression(elseBranch).getFirstChild();\n      Node name1 = var.getFirstChild();\n      Node maybeName2 = elseAssign.getFirstChild();\n\n      if (name1.hasChildren()\n          && maybeName2.isName()\n          && name1.getString().equals(maybeName2.getString())) {\n        Node thenExpr = name1.removeChildren();\n        Node elseExpr = elseAssign.getLastChild().detachFromParent();\n        cond.detachFromParent();\n        Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n                            .srcref(n);\n        var.detachFromParent();\n        name1.addChildrenToBack(hookNode);\n        parent.replaceChild(n, var);\n        reportCodeChange();\n        return var;\n      }\n\n    } else if (elseBranchIsVar && thenBranchIsExpressionBlock &&\n               getBlockExpression(thenBranch).getFirstChild().isAssign()) {\n      Node var = getBlockVar(elseBranch);\n      Node thenAssign = getBlockExpression(thenBranch).getFirstChild();\n      Node maybeName1 = thenAssign.getFirstChild();\n      Node name2 = var.getFirstChild();\n\n      if (name2.hasChildren()\n          && maybeName1.isName()\n          && maybeName1.getString().equals(name2.getString())) {\n        Node thenExpr = thenAssign.getLastChild().detachFromParent();\n        Node elseExpr = name2.removeChildren();\n        cond.detachFromParent();\n        Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n                            .srcref(n);\n        var.detachFromParent();\n        name2.addChildrenToBack(hookNode);\n        parent.replaceChild(n, var);\n        reportCodeChange();\n        return var;\n      }\n    }\n\n    return n;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..9eebb9ef 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -633,15 +633,10 @@ class PeepholeSubstituteAlternateSyntax\n    * Returns the replacement for n or the original if no replacement was\n    * necessary.\n    */\n-  private Node tryMinimizeIf(Node n) {\n-\n+ private Node tryMinimizeIf(Node n) {\n     Node parent = n.getParent();\n-\n     Node cond = n.getFirstChild();\n \n-    /* If the condition is a literal, we'll let other\n-     * optimizations try to remove useless code.\n-     */\n     if (NodeUtil.isLiteralValue(cond, true)) {\n       return n;\n     }\n@@ -653,18 +648,13 @@ class PeepholeSubstituteAlternateSyntax\n       if (isFoldableExpressBlock(thenBranch)) {\n         Node expr = getBlockExpression(thenBranch);\n         if (!late && isPropertyAssignmentInExpression(expr)) {\n-          // Keep opportunities for CollapseProperties such as\n-          // a.longIdentifier || a.longIdentifier = ... -> var a = ...;\n-          // until CollapseProperties has been run.\n           return n;\n         }\n \n         if (cond.isNot()) {\n-          // if(!x)bar(); -> x||bar();\n           if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&\n               isLowerPrecedenceInExpression(expr.getFirstChild(),\n                   OR_PRECEDENCE)) {\n-            // It's not okay to add two sets of parentheses.\n             return n;\n           }\n \n@@ -678,14 +668,9 @@ class PeepholeSubstituteAlternateSyntax\n           return newExpr;\n         }\n \n-        // if(x)foo(); -> x&&foo();\n         if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&\n             isLowerPrecedenceInExpression(expr.getFirstChild(),\n                 AND_PRECEDENCE)) {\n-          // One additional set of parentheses is worth the change even if\n-          // there is no immediate code size win. However, two extra pair of\n-          // {}, we would have to think twice. (unless we know for sure the\n-          // we can further optimize its parent.\n           return n;\n         }\n \n@@ -697,8 +682,6 @@ class PeepholeSubstituteAlternateSyntax\n \n         return newExpr;\n       } else {\n-\n-        // Try to combine two IF-ELSE\n         if (NodeUtil.isStatementBlock(thenBranch) &&\n             thenBranch.hasOneChild()) {\n           Node innerIf = thenBranch.getFirstChild();\n@@ -719,8 +702,6 @@ class PeepholeSubstituteAlternateSyntax\n                       .srcref(cond));\n               n.addChildrenToBack(innerThenBranch.detachFromParent());\n               reportCodeChange();\n-              // Not worth trying to fold the current IF-ELSE into && because\n-              // the inner IF-ELSE wasn't able to be folded into && anyways.\n               return n;\n             }\n           }\n@@ -730,13 +711,8 @@ class PeepholeSubstituteAlternateSyntax\n       return n;\n     }\n \n-    /* TODO(dcc) This modifies the siblings of n, which is undesirable for a\n-     * peephole optimization. This should probably get moved to another pass.\n-     */\n     tryRemoveRepeatedStatements(n);\n \n-    // if(!x)foo();else bar(); -> if(x)bar();else foo();\n-    // An additional set of curly braces isn't worth it.\n     if (cond.isNot() && !consumesDanglingElse(elseBranch)) {\n       n.replaceChild(cond, cond.removeFirstChild());\n       n.removeChild(thenBranch);\n@@ -745,7 +721,6 @@ class PeepholeSubstituteAlternateSyntax\n       return n;\n     }\n \n-    // if(x)return 1;else return 2; -> return x?1:2;\n     if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {\n       Node thenExpr = getBlockReturnExpression(thenBranch);\n       Node elseExpr = getBlockReturnExpression(elseBranch);\n@@ -753,15 +728,26 @@ class PeepholeSubstituteAlternateSyntax\n       thenExpr.detachFromParent();\n       elseExpr.detachFromParent();\n \n-      // note - we ignore any cases with \"return;\", technically this\n-      // can be converted to \"return undefined;\" or some variant, but\n-      // that does not help code size.\n-      Node returnNode = IR.returnNode(\n-                            IR.hook(cond, thenExpr, elseExpr)\n-                                .srcref(n));\n-      parent.replaceChild(n, returnNode);\n-      reportCodeChange();\n-      return returnNode;\n+      if (thenExpr.isName() && elseExpr.isName()\n+          && thenExpr.getString().equals(elseExpr.getString())) {\n+        Node returnNode = new Node(Token.RETURN, thenExpr).srcref(n);\n+        parent.replaceChild(n, returnNode);\n+        reportCodeChange();\n+        return returnNode;\n+      } else if (NodeUtil.mayHaveSideEffects(thenExpr)\n+          || NodeUtil.mayHaveSideEffects(elseExpr)) {\n+        Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n+        Node returnNode = IR.returnNode(hookNode);\n+        parent.replaceChild(n, returnNode);\n+        reportCodeChange();\n+        return returnNode;\n+      } else {\n+        Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n+        Node returnNode = new Node(Token.RETURN, hookNode).srcref(n);\n+        parent.replaceChild(n, returnNode);\n+        reportCodeChange();\n+        return returnNode;\n+      }\n     }\n \n     boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);\n@@ -770,35 +756,29 @@ class PeepholeSubstituteAlternateSyntax\n     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n       Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n       Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n+\n       if (thenOp.getType() == elseOp.getType()) {\n-        // if(x)a=1;else a=2; -> a=x?1:2;\n         if (NodeUtil.isAssignmentOp(thenOp)) {\n           Node lhs = thenOp.getFirstChild();\n-          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n-              // if LHS has side effects, don't proceed [since the optimization\n-              // evaluates LHS before cond]\n-              // NOTE - there are some circumstances where we can\n-              // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n \n+          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild())\n+              && !mayEffectMutableState(lhs)) {\n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();\n             Node thenExpr = thenOp.removeFirstChild();\n-            Node elseExpr = elseOp.getLastChild();\n+            Node elseExpr = elseOp.getLastChild().detachFromParent();\n             elseOp.removeChild(elseExpr);\n-\n-            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n+            Node hookNode =\n+                IR.hook(cond, thenExpr, elseExpr).srcref(n);\n             Node assign = new Node(thenOp.getType(), assignName, hookNode)\n                               .srcref(thenOp);\n             Node expr = NodeUtil.newExpr(assign);\n             parent.replaceChild(n, expr);\n             reportCodeChange();\n-\n             return expr;\n           }\n         }\n       }\n-      // if(x)foo();else bar(); -> x?foo():bar()\n       n.removeChild(cond);\n       thenOp.detachFromParent();\n       elseOp.detachFromParent();\n@@ -812,13 +792,10 @@ class PeepholeSubstituteAlternateSyntax\n     boolean thenBranchIsVar = isVarBlock(thenBranch);\n     boolean elseBranchIsVar = isVarBlock(elseBranch);\n \n-    // if(x)var y=1;else y=2  ->  var y=x?1:2\n     if (thenBranchIsVar && elseBranchIsExpressionBlock &&\n         getBlockExpression(elseBranch).getFirstChild().isAssign()) {\n-\n       Node var = getBlockVar(thenBranch);\n       Node elseAssign = getBlockExpression(elseBranch).getFirstChild();\n-\n       Node name1 = var.getFirstChild();\n       Node maybeName2 = elseAssign.getFirstChild();\n \n@@ -837,13 +814,10 @@ class PeepholeSubstituteAlternateSyntax\n         return var;\n       }\n \n-    // if(x)y=1;else var y=2  ->  var y=x?1:2\n     } else if (elseBranchIsVar && thenBranchIsExpressionBlock &&\n-        getBlockExpression(thenBranch).getFirstChild().isAssign()) {\n-\n+               getBlockExpression(thenBranch).getFirstChild().isAssign()) {\n       Node var = getBlockVar(elseBranch);\n       Node thenAssign = getBlockExpression(thenBranch).getFirstChild();\n-\n       Node maybeName1 = thenAssign.getFirstChild();\n       Node name2 = var.getFirstChild();\n \n@@ -859,7 +833,6 @@ class PeepholeSubstituteAlternateSyntax\n         name2.addChildrenToBack(hookNode);\n         parent.replaceChild(n, var);\n         reportCodeChange();\n-\n         return var;\n       }\n     }",
    "result_reason": "java.lang.RuntimeException: node is not a child",
    "test_result": "FAIL"
}