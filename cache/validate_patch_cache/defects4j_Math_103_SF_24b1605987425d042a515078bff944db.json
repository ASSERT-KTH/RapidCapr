{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    double result;\n    if (Double.isNaN(x)) {\n        throw new MathException(\"Input is NaN\");\n    } else if (Double.isInfinite(x)) {\n        result =  x < 0 ? 0.0 : 1.0;\n    } else if (x < mean - 20 * standardDeviation) {\n        result = 0;\n    } else if (x > mean + 20 * standardDeviation) {\n        result = 1;\n    } else {\n        try {\n            result = 0.5 * (1 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2))));\n        } catch (MaxIterationsExceededException e) {\n            result = getApproximationResult(x);\n        }\n    }\n    return result;\n}\n\nprivate double getApproximationResult(double x) {\n    double dev = (x - mean) / standardDeviation;\n    double t = 1.0 / (1.0 + 0.3275911 * Math.abs(dev));\n    double approx = ((0.254829592 * t) - (0.284496736 * t * t) + (1.421413741 * t * t * t) - (1.453152027 * t * t * t * t) + (1.061405429 * t * t * t * t * t)) * Math.exp(-dev * dev / 2.0);\n    return dev > 0 ? 1 - approx : approx;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..02b8d8908 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -105,10 +105,32 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * x is more than 20 standard deviations from the mean, in which case the\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+public double cumulativeProbability(double x) throws MathException {\n+    double result;\n+    if (Double.isNaN(x)) {\n+        throw new MathException(\"Input is NaN\");\n+    } else if (Double.isInfinite(x)) {\n+        result =  x < 0 ? 0.0 : 1.0;\n+    } else if (x < mean - 20 * standardDeviation) {\n+        result = 0;\n+    } else if (x > mean + 20 * standardDeviation) {\n+        result = 1;\n+    } else {\n+        try {\n+            result = 0.5 * (1 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2))));\n+        } catch (MaxIterationsExceededException e) {\n+            result = getApproximationResult(x);\n+        }\n     }\n+    return result;\n+}\n+\n+private double getApproximationResult(double x) {\n+    double dev = (x - mean) / standardDeviation;\n+    double t = 1.0 / (1.0 + 0.3275911 * Math.abs(dev));\n+    double approx = ((0.254829592 * t) - (0.284496736 * t * t) + (1.421413741 * t * t * t) - (1.453152027 * t * t * t * t) + (1.061405429 * t * t * t * t * t)) * Math.exp(-dev * dev / 2.0);\n+    return dev > 0 ? 1 - approx : approx;\n+}\n     \n     /**\n      * For this distribution, X, this method returns the critical point x, such",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}