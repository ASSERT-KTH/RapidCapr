{
    "patch": "public static String fixCode(String code) {\n    String regex = \"for\\\\s*\\\\(\\\\s*(.*?\\\\s*;\\\\s*){2}(.*?)\\\\s*:\\\\s*(.*?)\\\\s*\\\\)\";\n    Pattern pattern = Pattern.compile(regex, Pattern.DOTALL);\n    Matcher matcher = pattern.matcher(code);\n    StringBuffer sb = new StringBuffer(code.length());\n    while (matcher.find()) {\n        String groups = matcher.group();\n        String[] parts = groups.split(\"\\\\s*:\\\\s*\");\n        String initializer = parts[0];\n        String iterable = parts[1];\n        String replacement;\n        if (initializer.matches(\".*\\\\sin\\\\s+.*\")) {\n            String variable = initializer.split(\"\\\\s\")[1];\n            replacement = String.format(\"%s.forEach((%s) -> \", iterable, variable);\n        } else {\n            String variable = iterable.split(\"\\\\s\")[0];\n            replacement = String.format(\"for (%s %s : %s)\", getType(initializer), variable, iterable);\n        }\n        matcher.appendReplacement(sb, Matcher.quoteReplacement(replacement));\n    }\n    matcher.appendTail(sb);\n    return sb.toString();\n}\n\nprivate static String getType(String initializer) {\n    String[] parts = initializer.split(\"=\");\n    return parts[0].trim();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..e7638f17 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,34 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    String regex = \"for\\\\s*\\\\(\\\\s*(.*?\\\\s*;\\\\s*){2}(.*?)\\\\s*:\\\\s*(.*?)\\\\s*\\\\)\";\n+    Pattern pattern = Pattern.compile(regex, Pattern.DOTALL);\n+    Matcher matcher = pattern.matcher(code);\n+    StringBuffer sb = new StringBuffer(code.length());\n+    while (matcher.find()) {\n+        String groups = matcher.group();\n+        String[] parts = groups.split(\"\\\\s*:\\\\s*\");\n+        String initializer = parts[0];\n+        String iterable = parts[1];\n+        String replacement;\n+        if (initializer.matches(\".*\\\\sin\\\\s+.*\")) {\n+            String variable = initializer.split(\"\\\\s\")[1];\n+            replacement = String.format(\"%s.forEach((%s) -> \", iterable, variable);\n+        } else {\n+            String variable = iterable.split(\"\\\\s\")[0];\n+            replacement = String.format(\"for (%s %s : %s)\", getType(initializer), variable, iterable);\n+        }\n+        matcher.appendReplacement(sb, Matcher.quoteReplacement(replacement));\n+    }\n+    matcher.appendTail(sb);\n+    return sb.toString();\n+}\n+\n+private static String getType(String initializer) {\n+    String[] parts = initializer.split(\"=\");\n+    return parts[0].trim();\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}