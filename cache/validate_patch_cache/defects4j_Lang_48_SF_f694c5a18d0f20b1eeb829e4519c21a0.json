{
    "patch": "public class EqualsBuilder {\n    \n    private boolean isEquals;\n    \n    public EqualsBuilder() {\n        isEquals = true;\n    }\n    \n    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals) {\n            if (lhs == rhs) {\n                return this;\n            }\n            if (lhs == null || rhs == null) {\n                isEquals = false;\n            } else if (lhs.getClass().isArray()) {\n                isEquals = Objects.deepEquals(lhs, rhs);\n            } else {\n                isEquals = lhs.equals(rhs);\n            }\n        }\n        return this;\n    }\n    \n    public boolean isEquals() {\n        return isEquals;\n    }\n    \n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..69ea5cd6 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,49 +364,35 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n+public class EqualsBuilder {\n+    \n+    private boolean isEquals;\n+    \n+    public EqualsBuilder() {\n+        isEquals = true;\n+    }\n+    \n     public EqualsBuilder append(Object lhs, Object rhs) {\n-        if (isEquals == false) {\n-            return this;\n-        }\n-        if (lhs == rhs) {\n-            return this;\n-        }\n-        if (lhs == null || rhs == null) {\n-            this.setEquals(false);\n-            return this;\n-        }\n-        Class lhsClass = lhs.getClass();\n-        if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n+        if (isEquals) {\n+            if (lhs == rhs) {\n+                return this;\n+            }\n+            if (lhs == null || rhs == null) {\n+                isEquals = false;\n+            } else if (lhs.getClass().isArray()) {\n+                isEquals = Objects.deepEquals(lhs, rhs);\n+            } else {\n                 isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n-            this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n-        } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n-        } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n-        } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n-        } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n-        } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n-        } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n-        } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n-        } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+            }\n         }\n         return this;\n     }\n+    \n+    public boolean isEquals() {\n+        return isEquals;\n+    }\n+    \n+}\n \n     /**\n      * <p>",
    "result_reason": "error: class EqualsBuilder is already defined in package org.apache.commons.lang.builder",
    "test_result": "ERROR"
}