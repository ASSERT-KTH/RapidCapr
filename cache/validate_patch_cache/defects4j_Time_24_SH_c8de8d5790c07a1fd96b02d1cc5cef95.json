{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        SavedField savedField = savedFields[i];\n        long newMillis = savedField.set(millis, resetFields);\n        // check for numeric overflow\n        if ((newMillis ^ millis) < 0 && (newMillis ^ savedField.get(millis)) < 0) {\n            throw new IllegalArgumentException(\"Parse failed due to numeric overflow\");\n        }\n        millis = newMillis;\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n} catch (RuntimeException e) {\n    if (e instanceof ArithmeticException || e instanceof IllegalArgumentException) {\n        if (text != null) {\n            throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage(), e);\n        }\n        throw e;\n    } else if (e instanceof NumberFormatException) {\n        throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage(), e);\n    }\n    throw new IllegalStateException(\"Unexpected exception thrown\", e);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..277ef217 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,32 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        SavedField savedField = savedFields[i];\n+        long newMillis = savedField.set(millis, resetFields);\n+        // check for numeric overflow\n+        if ((newMillis ^ millis) < 0 && (newMillis ^ savedField.get(millis)) < 0) {\n+            throw new IllegalArgumentException(\"Parse failed due to numeric overflow\");\n+        }\n+        millis = newMillis;\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+} catch (RuntimeException e) {\n+    if (e instanceof ArithmeticException || e instanceof IllegalArgumentException) {\n+        if (text != null) {\n+            throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage(), e);\n+        }\n+        throw e;\n+    } else if (e instanceof NumberFormatException) {\n+        throw new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage(), e);\n+    }\n+    throw new IllegalStateException(\"Unexpected exception thrown\", e);\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}