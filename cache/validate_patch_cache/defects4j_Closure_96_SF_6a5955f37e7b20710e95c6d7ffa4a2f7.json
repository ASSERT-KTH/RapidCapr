{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    boolean varArgs = functionType.getMaxArguments() == Integer.MAX_VALUE;\n    \n    String minArgsMessage = minArgs == 1 ? \"1 argument\" : minArgs + \" arguments\";\n    String maxArgsMessage = maxArgs == Integer.MAX_VALUE ? \"any number of arguments\" :\n            (maxArgs == 1 ? \"1 argument\" : maxArgs + \" arguments\");\n\n    if (numArgs < minArgs) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(numArgs), minArgsMessage,\n                \" and at least \" + (minArgs - numArgs) + \" more argument(s).\");\n        return;\n    } else if (!varArgs && numArgs > maxArgs) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(numArgs), minArgsMessage,\n                \" and no more than \" + maxArgsMessage + \".\");\n        return;\n    }\n\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // Skip the function name.\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n\n    int ordinal = -1;\n    Node parameter = null;\n    Node argument = null;\n    while (parameters.hasNext()) {\n        parameter = parameters.next();\n        argument = arguments.hasNext() ? arguments.next() : null;\n        ordinal++;\n\n        if (argument == null && !varArgs) {\n            report(t, call, WRONG_ARGUMENT_COUNT,\n                    validator.getReadableJSTypeName(call.getFirstChild(), false),\n                    String.valueOf(numArgs), minArgsMessage,\n                    \" and no more than \" + maxArgsMessage + \".\");\n            return;\n        }\n        \n        if (argument != null) {\n            validator.expectArgumentMatchesParameter(t, argument,\n                getJSType(argument), getJSType(parameter), call, ordinal);\n        }\n        \n        if (!parameters.hasNext() && varArgs) {\n            while (arguments.hasNext()) {\n                argument = arguments.next();\n                ordinal++;\n                validator.expectArgumentMatchesParameter(t, argument,\n                        getJSType(argument), getJSType(parameter), call, ordinal);\n            }\n            break;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..17ba1319 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,67 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+    int numArgs = call.getChildCount() - 1;\n+    int minArgs = functionType.getMinArguments();\n+    int maxArgs = functionType.getMaxArguments();\n+    boolean varArgs = functionType.getMaxArguments() == Integer.MAX_VALUE;\n+    \n+    String minArgsMessage = minArgs == 1 ? \"1 argument\" : minArgs + \" arguments\";\n+    String maxArgsMessage = maxArgs == Integer.MAX_VALUE ? \"any number of arguments\" :\n+            (maxArgs == 1 ? \"1 argument\" : maxArgs + \" arguments\");\n+\n+    if (numArgs < minArgs) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+                validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                String.valueOf(numArgs), minArgsMessage,\n+                \" and at least \" + (minArgs - numArgs) + \" more argument(s).\");\n+        return;\n+    } else if (!varArgs && numArgs > maxArgs) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+                validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                String.valueOf(numArgs), minArgsMessage,\n+                \" and no more than \" + maxArgsMessage + \".\");\n+        return;\n+    }\n+\n     Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n+    arguments.next(); // Skip the function name.\n \n     Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n+\n+    int ordinal = -1;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n+    while (parameters.hasNext()) {\n         parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n-\n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+        argument = arguments.hasNext() ? arguments.next() : null;\n+        ordinal++;\n+\n+        if (argument == null && !varArgs) {\n+            report(t, call, WRONG_ARGUMENT_COUNT,\n+                    validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                    String.valueOf(numArgs), minArgsMessage,\n+                    \" and no more than \" + maxArgsMessage + \".\");\n+            return;\n+        }\n+        \n+        if (argument != null) {\n+            validator.expectArgumentMatchesParameter(t, argument,\n+                getJSType(argument), getJSType(parameter), call, ordinal);\n+        }\n+        \n+        if (!parameters.hasNext() && varArgs) {\n+            while (arguments.hasNext()) {\n+                argument = arguments.next();\n+                ordinal++;\n+                validator.expectArgumentMatchesParameter(t, argument,\n+                        getJSType(argument), getJSType(parameter), call, ordinal);\n+            }\n+            break;\n+        }\n     }\n-  }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "junit.framework.AssertionFailedError: unexpected warnings(s):",
    "test_result": "FAIL"
}