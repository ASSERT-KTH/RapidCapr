{
    "patch": "public class TransformDispatcher extends IRFactory.TransformDispatcher {\n\n    public TransformDispatcher(\n            AstRoot root,\n            SourceInfo sourceInfo,\n            CompilerEnvirons compilerEnv,\n            ErrorReporter errorReporter) {\n        super(root, sourceInfo, compilerEnv, errorReporter);\n    }\n\n    private boolean isDirective(Node n) {\n        if (n == null) {\n            return false;\n        }\n        int nType = n.getType();\n        return nType == Token.EXPR_RESULT && n.getFirstChild().isString()\n                && ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n    }\n\n    @Override\n    public Node processForInLoop(ForInLoop loopNode) {\n        Node loopVar = transform(loopNode.getIterator());\n        Node iteratedObj = transform(loopNode.getIteratedObject());\n        Scope loopScope = createScopeNode(Scope.FOR_LOOP, loopNode);\n        pushScope(loopScope);\n        // Generate a temporary variable to hold the result of \"iterate.getprop(lenProp)\".\n        Node tempVar = scope.createTempNode();\n        Node getProp = createPropertyGet(iteratedObj, \"length\");\n        Node init = createAssign(tempVar, getProp);\n        Node test = createIn(init.getLastChild(), iteratedObj);\n        loopScope.addChildToFront(init);\n        Node body = transformOrIncrement(loopNode.getBody());\n        loopScope.addChildrenToBack(\n                new Node(Token.FOR, loopVar, tempVar, test, body).copyInformationFrom(loopNode));\n        loopScope.getEnclosing().addChildToFront(loopScope);\n        popScope();\n        return loopScope;\n    }\n\n    @Override\n    public Node processExpressionStatement(ExpressionStatement statementNode) {\n        Node expression = transform(statementNode.getExpression());\n\n        if (isDirective(expression)) {\n            return newNode(Token.EXPR_RESULT, expression)\n                    .copyInformationFrom(expression);\n        }\n\n        return super.processExpressionStatement(statementNode);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..4b49413c 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,106 +473,57 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n-\n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n-\n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n-\n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n+public class TransformDispatcher extends IRFactory.TransformDispatcher {\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+    public TransformDispatcher(\n+            AstRoot root,\n+            SourceInfo sourceInfo,\n+            CompilerEnvirons compilerEnv,\n+            ErrorReporter errorReporter) {\n+        super(root, sourceInfo, compilerEnv, errorReporter);\n     }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n-\n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+    private boolean isDirective(Node n) {\n+        if (n == null) {\n+            return false;\n+        }\n+        int nType = n.getType();\n+        return nType == Token.EXPR_RESULT && n.getFirstChild().isString()\n+                && ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n     }\n \n     @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+    public Node processForInLoop(ForInLoop loopNode) {\n+        Node loopVar = transform(loopNode.getIterator());\n+        Node iteratedObj = transform(loopNode.getIteratedObject());\n+        Scope loopScope = createScopeNode(Scope.FOR_LOOP, loopNode);\n+        pushScope(loopScope);\n+        // Generate a temporary variable to hold the result of \"iterate.getprop(lenProp)\".\n+        Node tempVar = scope.createTempNode();\n+        Node getProp = createPropertyGet(iteratedObj, \"length\");\n+        Node init = createAssign(tempVar, getProp);\n+        Node test = createIn(init.getLastChild(), iteratedObj);\n+        loopScope.addChildToFront(init);\n+        Node body = transformOrIncrement(loopNode.getBody());\n+        loopScope.addChildrenToBack(\n+                new Node(Token.FOR, loopVar, tempVar, test, body).copyInformationFrom(loopNode));\n+        loopScope.getEnclosing().addChildToFront(loopScope);\n+        popScope();\n+        return loopScope;\n     }\n \n     @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n+    public Node processExpressionStatement(ExpressionStatement statementNode) {\n+        Node expression = transform(statementNode.getExpression());\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n+        if (isDirective(expression)) {\n+            return newNode(Token.EXPR_RESULT, expression)\n+                    .copyInformationFrom(expression);\n+        }\n \n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+        return super.processExpressionStatement(statementNode);\n     }\n+}\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: class IRFactory.TransformDispatcher is already defined in class IRFactory",
    "test_result": "ERROR"
}