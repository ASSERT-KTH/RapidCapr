{
    "patch": "                // if the difference between the offsets is not exactly 1 hour,\n                // then we must be near a DST boundary\n                if (Math.abs(offsetLocal - offsetAdjusted) != DateTimeConstants.MILLIS_PER_HOUR) {\n                    // determine if we are currently in a gap or overlap\n                    boolean isGap = offsetLocal < offsetAdjusted;\n                    // find the next transition time\n                    long transition = isGap ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n                    // calculate the new offset at the transition time\n                    int newOffsetAtTransition = getOffset(transition);\n                    // if the offset at the transition time is the same as the original offset,\n                    // then we know we are still on the same side of the boundary\n                    if (newOffsetAtTransition == offsetLocal) {\n                        // return the original estimate\n                        return offsetLocal;\n                    }\n                    // if we are in a gap, return the later offset\n                    // if we are in an overlap, return the earlier offset\n                    return (isGap ? Math.max(offsetLocal, newOffsetAtTransition) : Math.min(offsetLocal, newOffsetAtTransition));\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..4b2da587 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,25 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // if the difference between the offsets is not exactly 1 hour,\n+                // then we must be near a DST boundary\n+                if (Math.abs(offsetLocal - offsetAdjusted) != DateTimeConstants.MILLIS_PER_HOUR) {\n+                    // determine if we are currently in a gap or overlap\n+                    boolean isGap = offsetLocal < offsetAdjusted;\n+                    // find the next transition time\n+                    long transition = isGap ? nextTransition(instantAdjusted) : previousTransition(instantAdjusted);\n+                    // calculate the new offset at the transition time\n+                    int newOffsetAtTransition = getOffset(transition);\n+                    // if the offset at the transition time is the same as the original offset,\n+                    // then we know we are still on the same side of the boundary\n+                    if (newOffsetAtTransition == offsetLocal) {\n+                        // return the original estimate\n+                        return offsetLocal;\n+                    }\n+                    // if we are in a gap, return the later offset\n+                    // if we are in an overlap, return the earlier offset\n+                    return (isGap ? Math.max(offsetLocal, newOffsetAtTransition) : Math.min(offsetLocal, newOffsetAtTransition));\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}