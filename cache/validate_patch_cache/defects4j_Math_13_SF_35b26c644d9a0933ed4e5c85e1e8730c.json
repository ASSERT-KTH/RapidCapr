{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int rows = m.getRowDimension();\n    final int cols = m.getColumnDimension();\n    final double[][] A = new double[rows][cols];\n    for (int r = 0; r < rows; r++) {\n        for (int c = 0; c < cols; c++) {\n            A[r][c] = m.getEntry(r, c);\n        }\n    }\n    final double[][] B = new double[rows][cols];\n    MatrixFunctions.sqrt(A, B);\n    final RealMatrix result = MatrixUtils.createRealMatrix(B);\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..630c136b9 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,18 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int rows = m.getRowDimension();\n+    final int cols = m.getColumnDimension();\n+    final double[][] A = new double[rows][cols];\n+    for (int r = 0; r < rows; r++) {\n+        for (int c = 0; c < cols; c++) {\n+            A[r][c] = m.getEntry(r, c);\n+        }\n     }\n+    final double[][] B = new double[rows][cols];\n+    MatrixFunctions.sqrt(A, B);\n+    final RealMatrix result = MatrixUtils.createRealMatrix(B);\n+    return result;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}