{
    "patch": "    boolean modifyCallers = modifyCallSites \n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node firstArg;\n      Var lastReferencedVar = null;\n      while ((firstArg = argList.getFirstChild()) != null) {\n        Var var = fnScope.getVar(firstArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(firstArg);\n          compiler.reportCodeChange();\n        } else {\n          // Remove all proceeding unused arguments\n          if (lastReferencedVar != null) {\n            Node nodeToRemove = firstArg.getPrevious();\n            while (nodeToRemove != argList.getFirstChild()) {\n              if (!referenced.contains(fnScope.getVar(nodeToRemove.getString()))) {\n                argList.removeChild(nodeToRemove);\n                nodeToRemove = nodeToRemove.getPrevious();\n                compiler.reportCodeChange();\n              } else {\n                break;\n              }\n            }\n          }\n          lastReferencedVar = var;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..833921fc 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,32 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    boolean modifyCallers = modifyCallSites \n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node firstArg;\n+      Var lastReferencedVar = null;\n+      while ((firstArg = argList.getFirstChild()) != null) {\n+        Var var = fnScope.getVar(firstArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(firstArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          // Remove all proceeding unused arguments\n+          if (lastReferencedVar != null) {\n+            Node nodeToRemove = firstArg.getPrevious();\n+            while (nodeToRemove != argList.getFirstChild()) {\n+              if (!referenced.contains(fnScope.getVar(nodeToRemove.getString()))) {\n+                argList.removeChild(nodeToRemove);\n+                nodeToRemove = nodeToRemove.getPrevious();\n+                compiler.reportCodeChange();\n+              } else {\n+                break;\n+              }\n+            }\n+          }\n+          lastReferencedVar = var;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}