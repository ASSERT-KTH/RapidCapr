{
    "patch": "public class RegularizedGammaFunction {\n\n    private static final int MAX_ITERATIONS = 100;\n    private static final double EPSILON = 10e-15;\n\n    private RegularizedGammaFunction() {}\n\n    public static double gamma(double x) {\n        if (x == 0.0) {\n            return Double.POSITIVE_INFINITY;\n        }\n\n        if (x < 0.0) {\n            return Math.PI / (Math.sin(Math.PI * x) * gamma(1.0 - x));\n        }\n\n        double result = Math.sqrt(2.0 * Math.PI / x) * Math.pow((x / Math.E), x);\n        return result;\n    }\n\n    public static double logGamma(double x) {\n        double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n        double series = 1.0 + 76.18009173 / x\n                - 86.50532033 / (x + 1)\n                + 24.01409822 / (x + 2)\n                - 1.231739516 / (x + 3)\n                + 0.00120858003 / (x + 4)\n                - 0.00000536382 / (x + 5);\n        return tmp + Math.log(series * Math.sqrt(2 * Math.PI));\n    }\n\n    public static double regularizedGamma(double a, double x) {\n        if (a <= 0.0) {\n            throw new IllegalArgumentException(\"a must be positive\");\n        }\n\n        if (x < 0.0) {\n            throw new IllegalArgumentException(\"x must be positive\");\n        }\n\n        if (x == 0.0) {\n            return 0.0;\n        }\n\n        double base = x / a;\n        double sum = 1.0;\n        double delta = 1.0;\n        int n = 1;\n\n        while (n <= MAX_ITERATIONS && Math.abs(delta) > EPSILON) {\n            delta *= base / (a + n);\n            sum += delta;\n            n++;\n        }\n\n        if (n >= MAX_ITERATIONS) {\n            throw new ArithmeticException(\"Failed to converge after \" + MAX_ITERATIONS + \" iterations\");\n        }\n\n        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..8c4c2f93a 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,68 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public class RegularizedGammaFunction {\n+\n+    private static final int MAX_ITERATIONS = 100;\n+    private static final double EPSILON = 10e-15;\n+\n+    private RegularizedGammaFunction() {}\n+\n+    public static double gamma(double x) {\n+        if (x == 0.0) {\n+            return Double.POSITIVE_INFINITY;\n+        }\n+\n+        if (x < 0.0) {\n+            return Math.PI / (Math.sin(Math.PI * x) * gamma(1.0 - x));\n+        }\n+\n+        double result = Math.sqrt(2.0 * Math.PI / x) * Math.pow((x / Math.E), x);\n+        return result;\n+    }\n+\n+    public static double logGamma(double x) {\n+        double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+        double series = 1.0 + 76.18009173 / x\n+                - 86.50532033 / (x + 1)\n+                + 24.01409822 / (x + 2)\n+                - 1.231739516 / (x + 3)\n+                + 0.00120858003 / (x + 4)\n+                - 0.00000536382 / (x + 5);\n+        return tmp + Math.log(series * Math.sqrt(2 * Math.PI));\n+    }\n+\n+    public static double regularizedGamma(double a, double x) {\n+        if (a <= 0.0) {\n+            throw new IllegalArgumentException(\"a must be positive\");\n+        }\n+\n+        if (x < 0.0) {\n+            throw new IllegalArgumentException(\"x must be positive\");\n+        }\n+\n+        if (x == 0.0) {\n+            return 0.0;\n+        }\n+\n+        double base = x / a;\n+        double sum = 1.0;\n+        double delta = 1.0;\n+        int n = 1;\n+\n+        while (n <= MAX_ITERATIONS && Math.abs(delta) > EPSILON) {\n+            delta *= base / (a + n);\n+            sum += delta;\n+            n++;\n+        }\n+\n+        if (n >= MAX_ITERATIONS) {\n+            throw new ArithmeticException(\"Failed to converge after \" + MAX_ITERATIONS + \" iterations\");\n+        }\n+\n+        return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}