{
    "patch": "    List<Node> unreferencedParams = new ArrayList<>();\n    List<Node> referencedParams = new ArrayList<>();\n\n    // Split the parameters into referenced and unreferenced params\n    for (Node param : argList.children()) {\n        Var var = fnScope.getVar(param.getString());\n        if (!referenced.contains(var)) {\n            unreferencedParams.add(param);\n        } else {\n            referencedParams.add(param);\n        }\n    }\n\n    if (!modifyCallers) {\n        // Strip unreferenced args off the end of the function declaration.\n        for (Node param : unreferencedParams) {\n            argList.removeChild(param);\n            compiler.reportCodeChange();\n        }\n        // Re-insert referenced parameters in their original order\n        for (Node param : referencedParams) {\n            argList.addChildToBack(param);\n        }\n    } else {\n        callSiteOptimizer.optimize(fnScope, referenced);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c6b503ae 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,31 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    List<Node> unreferencedParams = new ArrayList<>();\n+    List<Node> referencedParams = new ArrayList<>();\n+\n+    // Split the parameters into referenced and unreferenced params\n+    for (Node param : argList.children()) {\n+        Var var = fnScope.getVar(param.getString());\n+        if (!referenced.contains(var)) {\n+            unreferencedParams.add(param);\n+        } else {\n+            referencedParams.add(param);\n+        }\n+    }\n+\n+    if (!modifyCallers) {\n+        // Strip unreferenced args off the end of the function declaration.\n+        for (Node param : unreferencedParams) {\n+            argList.removeChild(param);\n+            compiler.reportCodeChange();\n+        }\n+        // Re-insert referenced parameters in their original order\n+        for (Node param : referencedParams) {\n+            argList.addChildToBack(param);\n+        }\n+    } else {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}