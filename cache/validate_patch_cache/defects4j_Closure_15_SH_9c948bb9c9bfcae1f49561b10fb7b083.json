{
    "patch": "  public boolean apply(Node n) {\n    // When the node is null it means, we reached the implicit return\n    // where the function returns (possibly without an return statement)\n    if (n == null) {\n      return false;\n    }\n\n    // We only care about calls to functions and function expressions \n    // that potentially modify dependent variables.\n    if (NodeUtil.isCallOrNew(n)) {\n      return NodeUtil.mayEffectMutableState(n);\n    }\n\n    // Handle the 'delete' operation and other mutable operations\n    if (n.isDelProp() || \n        (n.isAssign() && !NodeUtil.isImmutableValue(n.getLastChild())) ||\n        (n.isInc() || n.isDec()) ||\n        (n.isExprResult() && n.getFirstChild().isGetProp())) {\n      return true;\n    }\n\n    // Recurse on child nodes\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..1ec39f36 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,35 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+  public boolean apply(Node n) {\n+    // When the node is null it means, we reached the implicit return\n+    // where the function returns (possibly without an return statement)\n+    if (n == null) {\n+      return false;\n+    }\n+\n+    // We only care about calls to functions and function expressions \n+    // that potentially modify dependent variables.\n+    if (NodeUtil.isCallOrNew(n)) {\n+      return NodeUtil.mayEffectMutableState(n);\n+    }\n+\n+    // Handle the 'delete' operation and other mutable operations\n+    if (n.isDelProp() || \n+        (n.isAssign() && !NodeUtil.isImmutableValue(n.getLastChild())) ||\n+        (n.isInc() || n.isDec()) ||\n+        (n.isExprResult() && n.getFirstChild().isGetProp())) {\n+      return true;\n+    }\n+\n+    // Recurse on child nodes\n+    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+      if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}