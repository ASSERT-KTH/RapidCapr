{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction(), function);\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    // If the function has no parameters, return early.\n    if (!argList.hasChildren()) {\n      return;\n    }\n\n    // Create a map that will store the parameters that are referenced.\n    Map<String, Boolean> paramsReferenced = new HashMap<>();\n\n    // Go through the parameters of the function and mark the ones that are referenced.\n    Node param = argList.getFirstChild();\n    while (param != null) {\n      String paramName = param.getString();\n      Var var = fnScope.getVar(paramName);\n      boolean isParamReferenced = referenced.contains(var);\n      paramsReferenced.put(paramName, isParamReferenced);\n      param = param.getNext();\n    }\n\n    // Go through the parameters of the function and remove the ones that are not referenced.\n    param = argList.getFirstChild();\n    while (param != null) {\n      Node nextParam = param.getNext(); // Store the next param since we may need to remove the current one.\n      String paramName = param.getString();\n      Boolean isParamReferenced = paramsReferenced.get(paramName);\n      Preconditions.checkNotNull(isParamReferenced, \"Unexpected parameter: %s\", paramName);\n      if (!isParamReferenced) {\n        argList.removeChild(param);\n        compiler.reportCodeChange();\n        // Update the referenced variable to check the following parameters.\n        referenced = Sets.difference(referenced, ImmutableSet.of(fnScope.getVar(paramName)));\n      }\n      param = nextParam;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..8b6d89a4 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,49 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n     Node function = fnScope.getRootNode();\n \n-    Preconditions.checkState(function.isFunction());\n+    Preconditions.checkState(function.isFunction(), function);\n     if (NodeUtil.isGetOrSetKey(function.getParent())) {\n       // The parameters object literal setters can not be removed.\n       return;\n     }\n \n     Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n-      }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n+\n+    // If the function has no parameters, return early.\n+    if (!argList.hasChildren()) {\n+      return;\n     }\n-  }\n+\n+    // Create a map that will store the parameters that are referenced.\n+    Map<String, Boolean> paramsReferenced = new HashMap<>();\n+\n+    // Go through the parameters of the function and mark the ones that are referenced.\n+    Node param = argList.getFirstChild();\n+    while (param != null) {\n+      String paramName = param.getString();\n+      Var var = fnScope.getVar(paramName);\n+      boolean isParamReferenced = referenced.contains(var);\n+      paramsReferenced.put(paramName, isParamReferenced);\n+      param = param.getNext();\n+    }\n+\n+    // Go through the parameters of the function and remove the ones that are not referenced.\n+    param = argList.getFirstChild();\n+    while (param != null) {\n+      Node nextParam = param.getNext(); // Store the next param since we may need to remove the current one.\n+      String paramName = param.getString();\n+      Boolean isParamReferenced = paramsReferenced.get(paramName);\n+      Preconditions.checkNotNull(isParamReferenced, \"Unexpected parameter: %s\", paramName);\n+      if (!isParamReferenced) {\n+        argList.removeChild(param);\n+        compiler.reportCodeChange();\n+        // Update the referenced variable to check the following parameters.\n+        referenced = Sets.difference(referenced, ImmutableSet.of(fnScope.getVar(paramName)));\n+      }\n+      param = nextParam;\n \n \n   /**",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}