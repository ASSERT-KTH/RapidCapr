{
    "patch": "if (callTarget != null && callTarget.isName() && callTarget.getString().equals(\"String\")) {\n  Node value = callTarget.getNext();\n  if (value != null && value.getNext() == null) {\n    Node addition = IR.add(IR.string(\"\").srcref(callTarget), value.detachFromParent()).srcref(callTarget);\n    n.getParent().replaceChild(n, addition);\n    reportCodeChange();\n    return addition;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..00224d90 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,7 +217,15 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+if (callTarget != null && callTarget.isName() && callTarget.getString().equals(\"String\")) {\n+  Node value = callTarget.getNext();\n+  if (value != null && value.getNext() == null) {\n+    Node addition = IR.add(IR.string(\"\").srcref(callTarget), value.detachFromParent()).srcref(callTarget);\n+    n.getParent().replaceChild(n, addition);\n+    reportCodeChange();\n+    return addition;\n+  }\n+}\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}