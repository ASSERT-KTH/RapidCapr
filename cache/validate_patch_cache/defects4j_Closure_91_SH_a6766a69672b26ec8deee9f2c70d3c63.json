{
    "patch": "      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (isLentToPrototype(parent)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        if (isLentToPrototype(lhs)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  \n  private boolean isLentToPrototype(Node n) {\n    if (n != null && n.getType() == Token.GETPROP) {\n      // check if it's being assigned to a prototype property or a sub-property\n      String propName = n.getLastChild().getString();\n      if (propName.equals(\"prototype\")) {\n        // function is getting assigned to prototype directly\n        return true;\n      } else if (isLentToPrototype(n.getFirstChild())) {\n        // function is getting assigned to prototype sub-property\n        return true;\n      }\n    }\n    return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..2fd5041c 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,49 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (isLentToPrototype(parent)) {\n+        return false;\n+      }\n+    }\n+\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+      Node lhs = parent.getFirstChild();\n+      Node rhs = lhs.getNext();\n+      if (n == lhs) {\n+        // Always traverse the left side of the assignment. To handle\n+        // nested assignments properly (e.g., (a = this).property = c;),\n+        // assignLhsChild should not be overridden.\n+        if (assignLhsChild == null) {\n+          assignLhsChild = lhs;\n+        }\n+      } else {\n+        if (isLentToPrototype(lhs)) {\n+          return false;\n+        }\n+      }\n+    }\n+\n+    return true;\n+  }\n+  \n+  private boolean isLentToPrototype(Node n) {\n+    if (n != null && n.getType() == Token.GETPROP) {\n+      // check if it's being assigned to a prototype property or a sub-property\n+      String propName = n.getLastChild().getString();\n+      if (propName.equals(\"prototype\")) {\n+        // function is getting assigned to prototype directly\n+        return true;\n+      } else if (isLentToPrototype(n.getFirstChild())) {\n+        // function is getting assigned to prototype sub-property\n+        return true;\n+      }\n+    }\n+    return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}