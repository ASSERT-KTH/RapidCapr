{
    "patch": "public String getprop(String property) {\n    String value = null;\n    Process process = null;\n    InputStream inputStream = null;\n    try {\n        process = Runtime.getRuntime().exec(\"getprop \" + property);\n        inputStream = process.getInputStream();\n        byte[] buffer = new byte[1024];\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n        while (inputStream.read(buffer) != -1) {\n            outputStream.write(buffer);\n        }\n        String result = outputStream.toString();\n        if (!result.isEmpty()) {\n            value = result.trim();\n        }\n    } catch (IOException e) {\n        // log the exception\n    } finally {\n        if (inputStream != null) {\n            try {\n                inputStream.close();\n            } catch (IOException e) {\n                // log the exception\n            }\n        }\n        if (process != null) {\n            process.destroy();\n        }\n    }\n    return value;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..77c7363f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,38 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop(String property) {\n+    String value = null;\n+    Process process = null;\n+    InputStream inputStream = null;\n+    try {\n+        process = Runtime.getRuntime().exec(\"getprop \" + property);\n+        inputStream = process.getInputStream();\n+        byte[] buffer = new byte[1024];\n+        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+        while (inputStream.read(buffer) != -1) {\n+            outputStream.write(buffer);\n+        }\n+        String result = outputStream.toString();\n+        if (!result.isEmpty()) {\n+            value = result.trim();\n+        }\n+    } catch (IOException e) {\n+        // log the exception\n+    } finally {\n+        if (inputStream != null) {\n+            try {\n+                inputStream.close();\n+            } catch (IOException e) {\n+                // log the exception\n+            }\n+        }\n+        if (process != null) {\n+            process.destroy();\n+        }\n+    }\n+    return value;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}