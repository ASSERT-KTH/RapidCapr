{
    "patch": "        } else if (parent.isExprResult()) {\n          // When an assignment is inside an expression result, we do not\n          // have any guarantee of execution order, so we conservatively\n          // assume all variables contained in the expression are both read\n          // and written.\n          Scope scope = t.getScope();\n          Set<String> vars = getAllVarsInExpression(n.getFirstChild(), scope);\n          for (String var : vars) {\n            NameInformation exprNs = scope.getVar(var);\n            if (exprNs != null) {\n              recordDepScope(recordNode, exprNs);\n            }\n          }\n        } else {\n          recordDepScope(recordNode, ns);\n        }\n      }\n    }\n\n    private Set<String> getAllVarsInExpression(Node n, Scope scope) {\n      NodeTraversal t = new NodeTraversal(compiler, new Es6SyntacticScopeCreator());\n      final Set<String> vars = new HashSet<>();\n      t.traverse(n, new AbstractShallowCallback() {\n        @Override\n        public void visit(NodeTraversal t, Node n, Node parent) {\n          if (n.isName()) {\n            String varName = n.getString();\n            if (scope.isDefined(varName, false)) {\n              vars.add(varName);\n            }\n          }\n        }\n      });\n      return vars;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..17043e16 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -555,38 +555,41 @@ final class NameAnalyzer implements CompilerPass {\n       }\n     }\n \n-    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n-      Node nameNode = n.getFirstChild();\n-      Node parent = n.getParent();\n-      NameInformation ns = createNameInformation(t, nameNode);\n-      if (ns != null) {\n-        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n-          // Patch for assignments that appear in the init,\n-          // condition or iteration part of a FOR loop.  Without\n-          // this change, all 3 of those parts try to claim the for\n-          // loop as their dependency scope.  The last assignment in\n-          // those three fields wins, which can result in incorrect\n-          // reference edges between referenced and assigned variables.\n-          //\n-          // TODO(user) revisit the dependency scope calculation\n-          // logic.\n-          if (parent.getFirstChild().getNext() != n) {\n-            recordDepScope(recordNode, ns);\n-          } else {\n-            recordDepScope(nameNode, ns);\n+        } else if (parent.isExprResult()) {\n+          // When an assignment is inside an expression result, we do not\n+          // have any guarantee of execution order, so we conservatively\n+          // assume all variables contained in the expression are both read\n+          // and written.\n+          Scope scope = t.getScope();\n+          Set<String> vars = getAllVarsInExpression(n.getFirstChild(), scope);\n+          for (String var : vars) {\n+            NameInformation exprNs = scope.getVar(var);\n+            if (exprNs != null) {\n+              recordDepScope(recordNode, exprNs);\n+            }\n           }\n         } else {\n-          // The rhs of the assignment is the caller, so it's used by the\n-          // context. Don't associate it w/ the lhs.\n-          // FYI: this fixes only the specific case where the assignment is the\n-          // caller expression, but it could be nested deeper in the caller and\n-          // we would still get a bug.\n-          // See testAssignWithCall2 for an example of this.\n           recordDepScope(recordNode, ns);\n         }\n       }\n     }\n \n+    private Set<String> getAllVarsInExpression(Node n, Scope scope) {\n+      NodeTraversal t = new NodeTraversal(compiler, new Es6SyntacticScopeCreator());\n+      final Set<String> vars = new HashSet<>();\n+      t.traverse(n, new AbstractShallowCallback() {\n+        @Override\n+        public void visit(NodeTraversal t, Node n, Node parent) {\n+          if (n.isName()) {\n+            String varName = n.getString();\n+            if (scope.isDefined(varName, false)) {\n+              vars.add(varName);\n+            }\n+          }\n+        }\n+      });\n+      return vars;\n+\n     /**\n      * Defines a dependency scope.\n      */",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}