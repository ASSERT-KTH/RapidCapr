{
    "patch": "int codePoint = Character.codePointAt(input, pos);\nif (Character.isSupplementaryCodePoint(codePoint)) {\n    out.write(Character.toChars(codePoint));\n}\nelse {\n    out.write(codePoint);\n}\npos += Character.charCount(codePoint);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..200179de 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,14 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+int codePoint = Character.codePointAt(input, pos);\n+if (Character.isSupplementaryCodePoint(codePoint)) {\n+    out.write(Character.toChars(codePoint));\n+}\n+else {\n+    out.write(codePoint);\n+}\n+pos += Character.charCount(codePoint);\n             }\n         }\n     }",
    "result_reason": "junit.framework.AssertionFailedError: unescape(String) failed: expected '\\n",
    "test_result": "FAIL"
}