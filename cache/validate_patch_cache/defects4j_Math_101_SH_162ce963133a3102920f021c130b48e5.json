{
    "patch": "        if (source.length() < pos.getIndex() + getImaginaryCharacter().length() ||\n            !source.substring(pos.getIndex(), pos.getIndex() + getImaginaryCharacter().length())\n                .equals(getImaginaryCharacter())) {\n            // set index back to initial, error index should be the start index\n            // character examined.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex);\n            return null;\n        }\n        pos.setIndex(pos.getIndex() + getImaginaryCharacter().length());",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/complex/ComplexFormat.java b/src/java/org/apache/commons/math/complex/ComplexFormat.java\nindex b404bc415..d6a70be07 100644\n--- a/src/java/org/apache/commons/math/complex/ComplexFormat.java\n+++ b/src/java/org/apache/commons/math/complex/ComplexFormat.java\n@@ -374,7 +374,16 @@ public class ComplexFormat extends Format implements Serializable {\n         int n = getImaginaryCharacter().length();\n         startIndex = pos.getIndex();\n         int endIndex = startIndex + n;\n-        if (\n+        if (source.length() < pos.getIndex() + getImaginaryCharacter().length() ||\n+            !source.substring(pos.getIndex(), pos.getIndex() + getImaginaryCharacter().length())\n+                .equals(getImaginaryCharacter())) {\n+            // set index back to initial, error index should be the start index\n+            // character examined.\n+            pos.setIndex(initialIndex);\n+            pos.setErrorIndex(startIndex);\n+            return null;\n+        }\n+        pos.setIndex(pos.getIndex() + getImaginaryCharacter().length());\n             source.substring(startIndex, endIndex).compareTo(\n             getImaginaryCharacter()) != 0) {\n             // set index back to initial, error index should be the start index",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}