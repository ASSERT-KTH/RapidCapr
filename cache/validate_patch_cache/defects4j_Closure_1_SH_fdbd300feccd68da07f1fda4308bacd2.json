{
    "patch": "    Set<String> referencedParams = new HashSet<>();\n    List<Node> reverseReferenceList = new ArrayList<>();\n    Set<Node> referencedNodes = findReferences(fnScope, referencedParams);\n    for (Node arg : argList.children()) {\n      if (!referencedParams.contains(arg.getString())) {\n        if (NodeUtil.isNameDeclaration(arg.getParent())\n            || arg.getParent().isDefaultValue()) {\n          Preconditions.checkState(arg.hasOneChild());\n          Node valueToUse = arg.getFirstChild().detach();\n          valueToUse.setJSType(arg.getJSType());\n          if (arg.getParent().isDefaultValue()) {\n            NodeUtil.markFunctionsDeleted(valueToUse, compiler);\n          }\n          if (valueToUse.isFunction()) {\n            compiler.reportFunctionDeleted();\n          }\n          arg.replaceWith(valueToUse);\n          compiler.reportCodeChange();\n        } else {\n          reverseReferenceList.add(arg);\n        }\n      }\n    }\n    for (Node arg : Lists.reverse(reverseReferenceList)) {\n      if (!referencedParams.contains(arg.getString())) {\n        arg.detach();\n        compiler.reportCodeChange();\n      }\n    }\n\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referencedNodes);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..47c795ea 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,38 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Set<String> referencedParams = new HashSet<>();\n+    List<Node> reverseReferenceList = new ArrayList<>();\n+    Set<Node> referencedNodes = findReferences(fnScope, referencedParams);\n+    for (Node arg : argList.children()) {\n+      if (!referencedParams.contains(arg.getString())) {\n+        if (NodeUtil.isNameDeclaration(arg.getParent())\n+            || arg.getParent().isDefaultValue()) {\n+          Preconditions.checkState(arg.hasOneChild());\n+          Node valueToUse = arg.getFirstChild().detach();\n+          valueToUse.setJSType(arg.getJSType());\n+          if (arg.getParent().isDefaultValue()) {\n+            NodeUtil.markFunctionsDeleted(valueToUse, compiler);\n+          }\n+          if (valueToUse.isFunction()) {\n+            compiler.reportFunctionDeleted();\n+          }\n+          arg.replaceWith(valueToUse);\n+          compiler.reportCodeChange();\n+        } else {\n+          reverseReferenceList.add(arg);\n+        }\n+      }\n+    }\n+    for (Node arg : Lists.reverse(reverseReferenceList)) {\n+      if (!referencedParams.contains(arg.getString())) {\n+        arg.detach();\n+        compiler.reportCodeChange();\n+      }\n+    }\n+\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referencedNodes);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}