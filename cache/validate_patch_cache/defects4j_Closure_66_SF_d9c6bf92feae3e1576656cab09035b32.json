{
    "patch": "public double getTypedPercent(JSONArray jsonArray) {\n    int numberOfTyped = 0, numberOfUntyped = 0;\n    for(int i = 0; i < jsonArray.length(); i++) {\n        JSONObject jsonObject = jsonArray.getJSONObject(i);\n        if (jsonObject.has(\"type\")) {\n            numberOfTyped++;\n        } else {\n            numberOfUntyped++;\n        }\n    }\n    double totalNumber = numberOfTyped+numberOfUntyped;\n    double ratio = (numberOfTyped / totalNumber) * 100;\n    return Math.round(ratio * 10) / 10.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..06794be0 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(JSONArray jsonArray) {\n+    int numberOfTyped = 0, numberOfUntyped = 0;\n+    for(int i = 0; i < jsonArray.length(); i++) {\n+        JSONObject jsonObject = jsonArray.getJSONObject(i);\n+        if (jsonObject.has(\"type\")) {\n+            numberOfTyped++;\n+        } else {\n+            numberOfUntyped++;\n+        }\n+    }\n+    double totalNumber = numberOfTyped+numberOfUntyped;\n+    double ratio = (numberOfTyped / totalNumber) * 100;\n+    return Math.round(ratio * 10) / 10.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}