{
    "patch": "import java.io.UnsupportedEncodingException;\n\npublic class StringUtils {\n\n    public static String unescape(String s) {\n    \n        StringBuilder sb = new StringBuilder(s.length());\n        int i = 0;\n\n        while (i < s.length()) {\n            char c = s.charAt(i);\n\n            if (c == '\\\\') {\n                if (i + 6 < s.length() &&\n                    s.charAt(i + 1) == 'u' &&\n                    isHexDigit(s.charAt(i + 2)) &&\n                    isHexDigit(s.charAt(i + 3)) &&\n                    isHexDigit(s.charAt(i + 4)) &&\n                    isHexDigit(s.charAt(i + 5))) {\n                    \n                    sb.append((char) Integer.parseInt(s.substring(i + 2, i + 6), 16));\n                    i += 6;\n                } else if (i + 4 < s.length() &&\n                           s.charAt(i + 1) == 'x' &&\n                           isHexDigit(s.charAt(i + 2)) &&\n                           isHexDigit(s.charAt(i + 3))) {\n                    \n                    sb.append((char) Integer.parseInt(s.substring(i + 2, i + 4), 16));\n                    i += 4;\n                } else if (i + 2 < s.length()) {\n                    sb.append(unescapeChar(s.charAt(i + 1)));\n                    i += 2;\n                } else {\n                    sb.append(c);\n                    i++;\n                }\n            } else {\n                sb.append(c);\n                i++;\n            }\n        }\n\n        return sb.toString();\n    }\n\n    private static boolean isHexDigit(char c) {\n        return (c >= '0' && c <= '9') ||\n               (c >= 'a' && c <= 'f') ||\n               (c >= 'A' && c <= 'F');\n    }\n\n    private static char unescapeChar(char c) {\n        switch (c) {\n            case '\"':\n            case '\\'':\n            case '\\\\':\n                return c;\n            case 'b':\n                return '\\b';\n            case 'f':\n                return '\\f';\n            case 'n':\n                return '\\n';\n            case 'r':\n                return '\\r';\n            case 't':\n                return '\\t';\n            case 'u':\n                throw new IllegalArgumentException(\"Invalid unicode escape sequence: '\\\\u'\");\n            case 'x':\n                throw new IllegalArgumentException(\"Invalid hexadecimal escape sequence: '\\\\x'\");\n            default:\n                throw new IllegalArgumentException(\"Unrecognized escape sequence: '\\\\\" + c + \"'\");\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..73aa069a 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,82 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+import java.io.UnsupportedEncodingException;\n+\n+public class StringUtils {\n+\n+    public static String unescape(String s) {\n+    \n+        StringBuilder sb = new StringBuilder(s.length());\n+        int i = 0;\n+\n+        while (i < s.length()) {\n+            char c = s.charAt(i);\n+\n+            if (c == '\\\\') {\n+                if (i + 6 < s.length() &&\n+                    s.charAt(i + 1) == 'u' &&\n+                    isHexDigit(s.charAt(i + 2)) &&\n+                    isHexDigit(s.charAt(i + 3)) &&\n+                    isHexDigit(s.charAt(i + 4)) &&\n+                    isHexDigit(s.charAt(i + 5))) {\n+                    \n+                    sb.append((char) Integer.parseInt(s.substring(i + 2, i + 6), 16));\n+                    i += 6;\n+                } else if (i + 4 < s.length() &&\n+                           s.charAt(i + 1) == 'x' &&\n+                           isHexDigit(s.charAt(i + 2)) &&\n+                           isHexDigit(s.charAt(i + 3))) {\n+                    \n+                    sb.append((char) Integer.parseInt(s.substring(i + 2, i + 4), 16));\n+                    i += 4;\n+                } else if (i + 2 < s.length()) {\n+                    sb.append(unescapeChar(s.charAt(i + 1)));\n+                    i += 2;\n+                } else {\n+                    sb.append(c);\n+                    i++;\n+                }\n+            } else {\n+                sb.append(c);\n+                i++;\n+            }\n+        }\n+\n+        return sb.toString();\n+    }\n+\n+    private static boolean isHexDigit(char c) {\n+        return (c >= '0' && c <= '9') ||\n+               (c >= 'a' && c <= 'f') ||\n+               (c >= 'A' && c <= 'F');\n+    }\n+\n+    private static char unescapeChar(char c) {\n+        switch (c) {\n+            case '\"':\n+            case '\\'':\n+            case '\\\\':\n+                return c;\n+            case 'b':\n+                return '\\b';\n+            case 'f':\n+                return '\\f';\n+            case 'n':\n+                return '\\n';\n+            case 'r':\n+                return '\\r';\n+            case 't':\n+                return '\\t';\n+            case 'u':\n+                throw new IllegalArgumentException(\"Invalid unicode escape sequence: '\\\\u'\");\n+            case 'x':\n+                throw new IllegalArgumentException(\"Invalid hexadecimal escape sequence: '\\\\x'\");\n+            default:\n+                throw new IllegalArgumentException(\"Unrecognized escape sequence: '\\\\\" + c + \"'\");\n+        }\n+    }\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}