{
    "patch": "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length != dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n    \n    final double factor = 1.0 / (FastMath.sqrt(FastMath.pow(2 * FastMath.PI, dim) *\n            FastMath.abs(covarianceMatrixDeterminant)));\n\n    final double[] centered = new double[dim];\n    for (int i = 0; i < dim; i++) {\n        centered[i] = vals[i] - getMeans()[i];\n    }\n\n    final RealMatrix covInverse = new LUDecomposition(getCovariances()).getSolver().getInverse();\n    final RealMatrix centeredMatrix = new Array2DRowRealMatrix(centered);\n    final RealMatrix centeredTranspose = centeredMatrix.transpose();\n    final RealMatrix exponentMatrix = centeredMatrix.multiply(covInverse).multiply(centeredTranspose);\n    final double exponent = exponentMatrix.getEntry(0, 0);\n\n    return factor * FastMath.exp(-0.5 * exponent);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\nindex 15706811b..9d7e36ecc 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n@@ -174,17 +174,29 @@ public class MultivariateNormalDistribution\n     }\n \n     /** {@inheritDoc} */\n-    public double density(final double[] vals) throws DimensionMismatchException {\n-        final int dim = getDimension();\n-        if (vals.length != dim) {\n-            throw new DimensionMismatchException(vals.length, dim);\n-        }\n+public double density(final double[] vals) throws DimensionMismatchException {\n+    final int dim = getDimension();\n+    if (vals.length != dim) {\n+        throw new DimensionMismatchException(vals.length, dim);\n+    }\n+    \n+    final double factor = 1.0 / (FastMath.sqrt(FastMath.pow(2 * FastMath.PI, dim) *\n+            FastMath.abs(covarianceMatrixDeterminant)));\n \n-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n-            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n-            getExponentTerm(vals);\n+    final double[] centered = new double[dim];\n+    for (int i = 0; i < dim; i++) {\n+        centered[i] = vals[i] - getMeans()[i];\n     }\n \n+    final RealMatrix covInverse = new LUDecomposition(getCovariances()).getSolver().getInverse();\n+    final RealMatrix centeredMatrix = new Array2DRowRealMatrix(centered);\n+    final RealMatrix centeredTranspose = centeredMatrix.transpose();\n+    final RealMatrix exponentMatrix = centeredMatrix.multiply(covInverse).multiply(centeredTranspose);\n+    final double exponent = exponentMatrix.getEntry(0, 0);\n+\n+    return factor * FastMath.exp(-0.5 * exponent);\n+}\n+\n     /**\n      * Gets the square root of each element on the diagonal of the covariance\n      * matrix.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}