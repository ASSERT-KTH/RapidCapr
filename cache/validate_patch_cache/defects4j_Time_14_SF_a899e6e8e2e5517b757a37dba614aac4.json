{
    "patch": "            boolean setDate = false;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                int value = values[i];\n                FieldType ft = partial.getFieldType(i);\n                // Check if its a Leap Year and February is the month added\n                if(ft.equals(MONTH_OF_YEAR_TYPE) && value == FEBRUARY){\n                    int year = partial.get(DateTimeFieldType.year());\n                    if(iChronology.isLeapYear(year) && valueToAdd > 0){\n                        value = 1;\n                        setDate = true;\n                    }else{\n                        value = 28;\n                        setDate = true;\n                    }\n                }\n                instant = ft.getField(iChronology).set(instant, value);\n            }\n            if(setDate){\n                long month = iChronology.monthOfYear().set(instant, values[MONTH_OF_YEAR_INDEX]);\n                instant = month;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..309aee8b 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,26 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n+            boolean setDate = false;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                int value = values[i];\n+                FieldType ft = partial.getFieldType(i);\n+                // Check if its a Leap Year and February is the month added\n+                if(ft.equals(MONTH_OF_YEAR_TYPE) && value == FEBRUARY){\n+                    int year = partial.get(DateTimeFieldType.year());\n+                    if(iChronology.isLeapYear(year) && valueToAdd > 0){\n+                        value = 1;\n+                        setDate = true;\n+                    }else{\n+                        value = 28;\n+                        setDate = true;\n+                    }\n+                }\n+                instant = ft.getField(iChronology).set(instant, value);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n-    }\n+            if(setDate){\n+                long month = iChronology.monthOfYear().set(instant, values[MONTH_OF_YEAR_INDEX]);\n+                instant = month;\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}