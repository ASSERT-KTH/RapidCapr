{
    "patch": "    // DiagnosticGroups override the plain checkGlobalThis option.\n    if (options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n      options.checkGlobalThis = true;\n    } else if (options.disables(DiagnosticGroups.GLOBAL_THIS)) {\n      options.checkGlobalThis = false;\n    } else if (!options.checkGlobalThis) {\n      // If DiagnosticGroups did not override the plain checkGlobalThis\n      // option, and checkGlobalThis is enabled, then turn off the",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..bab7372f 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,14 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n+    // DiagnosticGroups override the plain checkGlobalThis option.\n+    if (options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n+      options.checkGlobalThis = true;\n+    } else if (options.disables(DiagnosticGroups.GLOBAL_THIS)) {\n+      options.checkGlobalThis = false;\n+    } else if (!options.checkGlobalThis) {\n+      // If DiagnosticGroups did not override the plain checkGlobalThis\n+      // option, and checkGlobalThis is enabled, then turn off the\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}