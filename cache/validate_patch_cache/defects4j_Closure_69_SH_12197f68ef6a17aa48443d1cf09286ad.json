{
    "patch": "      // Functions with explicit 'this' types must be called in a GETPROP or GETELEM.\n      JSType typeOfThis = functionType.getTypeOfThis();\n      Node parent = n.getParent();\n      if (typeOfThis != null && !NodeUtil.isGetOrSetKey(parent)) {\n        // Ensure that the function call is a method call.\n        if (parent.isCall() && parent.getFirstChild() == n) {\n          Node maybeReceiver = parent.getSecondChild();\n          JSType maybeReceiverType = getJSType(maybeReceiver);\n          if (!typeOfThis.isSubtypeOf(maybeReceiverType)) {\n            report(t, n, EXPECTED_THIS_TYPE, typeOfThis.toString());\n          }\n        } else {\n          // Unusual case of non-method invocation on method.\n          report(t, n, EXPECTED_THIS_TYPE, typeOfThis.toString());\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..9e03b11b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      // Functions with explicit 'this' types must be called in a GETPROP or GETELEM.\n+      JSType typeOfThis = functionType.getTypeOfThis();\n+      Node parent = n.getParent();\n+      if (typeOfThis != null && !NodeUtil.isGetOrSetKey(parent)) {\n+        // Ensure that the function call is a method call.\n+        if (parent.isCall() && parent.getFirstChild() == n) {\n+          Node maybeReceiver = parent.getSecondChild();\n+          JSType maybeReceiverType = getJSType(maybeReceiver);\n+          if (!typeOfThis.isSubtypeOf(maybeReceiverType)) {\n+            report(t, n, EXPECTED_THIS_TYPE, typeOfThis.toString());\n+          }\n+        } else {\n+          // Unusual case of non-method invocation on method.\n+          report(t, n, EXPECTED_THIS_TYPE, typeOfThis.toString());\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}