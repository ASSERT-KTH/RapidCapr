{
    "patch": "Set<Var> referenced = manageArguments(fnScope);\nNode function = fnScope.getRootNode();\nPreconditions.checkState(function.isFunction());\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n  // The parameters object literal setters can not be removed.\n  return;\n}\n\nNode argList = getFunctionArgList(function);\nboolean modifyCallers = modifyCallSites\n    && callSiteOptimizer.canModifyCallers(function);\nif (!modifyCallers) {\n  // Strip unreferenced args from the function declaration.\n  Node currentArg = argList.getFirstChild();\n  while (currentArg != null) {\n    Node nextArg = currentArg.getNext();\n    Var var = fnScope.getVar(currentArg.getString());\n    if (!referenced.contains(var)) {\n      argList.removeChild(currentArg);\n      compiler.reportCodeChange();\n      if (isDestructuringParam(currentArg)) {\n        rewriteDestructuringParam(var, currentArg);\n      }\n    }\n    currentArg = nextArg;\n  }\n} else {\n  callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..08d41c7b 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,35 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Set<Var> referenced = manageArguments(fnScope);\n+Node function = fnScope.getRootNode();\n+Preconditions.checkState(function.isFunction());\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+  // The parameters object literal setters can not be removed.\n+  return;\n+}\n+\n+Node argList = getFunctionArgList(function);\n+boolean modifyCallers = modifyCallSites\n+    && callSiteOptimizer.canModifyCallers(function);\n+if (!modifyCallers) {\n+  // Strip unreferenced args from the function declaration.\n+  Node currentArg = argList.getFirstChild();\n+  while (currentArg != null) {\n+    Node nextArg = currentArg.getNext();\n+    Var var = fnScope.getVar(currentArg.getString());\n+    if (!referenced.contains(var)) {\n+      argList.removeChild(currentArg);\n+      compiler.reportCodeChange();\n+      if (isDestructuringParam(currentArg)) {\n+        rewriteDestructuringParam(var, currentArg);\n+      }\n+    }\n+    currentArg = nextArg;\n+  }\n+} else {\n+  callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}