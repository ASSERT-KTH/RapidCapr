{
    "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n        Object bestMatchingMock = null;\n        Class<?> fieldClass = field.getType();\n        for (Object mock : mocks) {\n            if (fieldClass.isInstance(mock) &&\n                    (bestMatchingMock == null ||\n                            fieldClass.isAssignableFrom(bestMatchingMock.getClass()))) {\n                bestMatchingMock = mock;\n            }\n        }\n        if (bestMatchingMock != null) {\n            try {\n                field.setAccessible(true);\n                field.set(fieldInstance, bestMatchingMock);\n            } catch (IllegalAccessException e) {\n                throw new RuntimeException(\"Failed to inject mock candidate into field\", e);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..ef9c4f9af 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,11 +88,28 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n-        }\n-    }\n+\n+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+        Object bestMatchingMock = null;\n+        Class<?> fieldClass = field.getType();\n+        for (Object mock : mocks) {\n+            if (fieldClass.isInstance(mock) &&\n+                    (bestMatchingMock == null ||\n+                            fieldClass.isAssignableFrom(bestMatchingMock.getClass()))) {\n+                bestMatchingMock = mock;\n+            }\n+        }\n+        if (bestMatchingMock != null) {\n+            try {\n+                field.setAccessible(true);\n+                field.set(fieldInstance, bestMatchingMock);\n+            } catch (IllegalAccessException e) {\n+                throw new RuntimeException(\"Failed to inject mock candidate into field\", e);\n+            }\n+        }\n+    }\n+}\n \n     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {\n         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<histogram2> was not:<histogram1>",
    "test_result": "FAIL"
}