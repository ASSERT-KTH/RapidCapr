{
    "patch": "// Traverse through any cast nodes and update first node accordingly\nwhile (first.isCast()) {\n  first = first.getFirstChild();\n}\nif (!NodeUtil.isGet(first)) {\n  n.putBooleanProp(Node.FREE_CALL, true);\n}\n// Keep track of the context in which eval is called. It is important\n// to distinguish between \"(0, eval)()\" and \"eval()\".\nif (first.isName() && \"eval\".equals(first.getString())) {\n  Node secondChild = n.getSecondChild();\n  if (secondChild != null && secondChild.isNumber() && secondChild.getDouble() == 0.0) {\n    first.putBooleanProp(Node.DIRECT_EVAL, true);\n  }\n  else {\n    n.putBooleanProp(Node.DIRECT_EVAL, true);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..73f5bec1 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,24 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+// Traverse through any cast nodes and update first node accordingly\n+while (first.isCast()) {\n+  first = first.getFirstChild();\n+}\n+if (!NodeUtil.isGet(first)) {\n+  n.putBooleanProp(Node.FREE_CALL, true);\n+}\n+// Keep track of the context in which eval is called. It is important\n+// to distinguish between \"(0, eval)()\" and \"eval()\".\n+if (first.isName() && \"eval\".equals(first.getString())) {\n+  Node secondChild = n.getSecondChild();\n+  if (secondChild != null && secondChild.isNumber() && secondChild.getDouble() == 0.0) {\n+    first.putBooleanProp(Node.DIRECT_EVAL, true);\n+  }\n+  else {\n+    n.putBooleanProp(Node.DIRECT_EVAL, true);\n+  }\n+}\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}