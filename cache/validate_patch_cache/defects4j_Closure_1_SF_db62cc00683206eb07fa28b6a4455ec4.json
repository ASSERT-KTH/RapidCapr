{
    "patch": "import com.google.common.base.Preconditions;\nimport com.google.javascript.jscomp.NodeUtil;\nimport com.google.javascript.rhino.Node;\n\nprivate void removeUnreferencedFunctionArgs(Scope fnScope) {\n  // Notice that removing unreferenced function args breaks\n  // Function.prototype.length. In advanced mode, we don't really care\n  // about this: we consider \"length\" the equivalent of reflecting on\n  // the function's lexical source.\n  //\n  // Rather than create a new option for this, we assume that if the user\n  // is removing globals, then it's OK to remove unused function args.\n  //\n  // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n  Node function = fnScope.getRootNode();\n  Preconditions.checkState(function.isFunction());\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n  Node argList = NodeUtil.getFunctionParameters(function);\n  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n  if (!modifyCallers) {\n    // Strip unreferenced args off the end of the function declaration.\n    if (argList != null) {\n      Node args = argList.getFirstChild();\n      Node lastArg = null;\n      for (; args != null; args = args.getNext()) {\n        lastArg = args;\n        Var var = fnScope.getVar(args.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(args);\n          compiler.reportCodeChange();\n        }\n      }\n      if (lastArg != null) {\n        lastArg.putBooleanProp(Node.IS_LAST_ARG, true);\n      }\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..9de18a7a 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,49 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n+import com.google.common.base.Preconditions;\n+import com.google.javascript.jscomp.NodeUtil;\n+import com.google.javascript.rhino.Node;\n+\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+  // Notice that removing unreferenced function args breaks\n+  // Function.prototype.length. In advanced mode, we don't really care\n+  // about this: we consider \"length\" the equivalent of reflecting on\n+  // the function's lexical source.\n+  //\n+  // Rather than create a new option for this, we assume that if the user\n+  // is removing globals, then it's OK to remove unused function args.\n+  //\n+  // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+  Node function = fnScope.getRootNode();\n+  Preconditions.checkState(function.isFunction());\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+  }\n+  Node argList = NodeUtil.getFunctionParameters(function);\n+  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+  if (!modifyCallers) {\n+    // Strip unreferenced args off the end of the function declaration.\n+    if (argList != null) {\n+      Node args = argList.getFirstChild();\n+      Node lastArg = null;\n+      for (; args != null; args = args.getNext()) {\n+        lastArg = args;\n+        Var var = fnScope.getVar(args.getString());\n         if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n+          argList.removeChild(args);\n           compiler.reportCodeChange();\n-        } else {\n-          break;\n         }\n       }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n+      if (lastArg != null) {\n+        lastArg.putBooleanProp(Node.IS_LAST_ARG, true);\n+      }\n     }\n+  } else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n   }\n+}\n \n \n   /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}