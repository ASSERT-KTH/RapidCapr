{
    "patch": "    @Override\n    public ReturnValueProvider provideReturnValue(final MethodCall<?> methodCall) {\n        final Class<?> returnType = methodCall.getMethod().getReturnType();\n        if (Iterable.class.isAssignableFrom(returnType)) {\n            return () -> Collections.emptyList();\n        } else if (Future.class.isAssignableFrom(returnType)) {\n            return () -> null;\n        } else if (Stream.class.isAssignableFrom(returnType)) {\n            final Object returnValue = createStreamMock(methodCall);\n            return () -> returnValue;\n        }\n        return DefaultValueProvider.INSTANCE;\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}