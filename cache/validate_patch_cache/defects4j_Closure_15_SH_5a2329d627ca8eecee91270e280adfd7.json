{
    "patch": "if (n.isFunction() && n.getParent().isFunctionBlock()\n          && !hasExceptionHandler(n)) {\n        boolean hasSideEffectsInCalledFunction =\n            determineIfFunctionHasSideEffectCalls(conf, n);\n        if (hasSideEffectsInCalledFunction) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..e07a678c 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,11 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+if (n.isFunction() && n.getParent().isFunctionBlock()\n+          && !hasExceptionHandler(n)) {\n+        boolean hasSideEffectsInCalledFunction =\n+            determineIfFunctionHasSideEffectCalls(conf, n);\n+        if (hasSideEffectsInCalledFunction) {\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}