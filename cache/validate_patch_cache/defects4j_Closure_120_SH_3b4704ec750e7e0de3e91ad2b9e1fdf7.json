{
    "patch": "       if (block.isFunction) {\n         break;\n       } else if (block.isLoop) {\n         return false;\n       } else if (block.isConditional || block.isSwitch) {\n         for (BasicBlock child : block.getNormalSuccessors()) {\n           if (!child.isExceptionBlock()) {\n             if (!child.canCompleteNormally()) {\n               return false;\n             }\n           }\n         }\n         if (block.getExceptionHandler() != null &&\n             !block.getExceptionHandler().canCatch(EXCEPTION_MIXIN)) {\n           return false;\n         }\n       }\n     }\n\n     return true;\n   }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..031cdf6e 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,27 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+       if (block.isFunction) {\n+         break;\n+       } else if (block.isLoop) {\n+         return false;\n+       } else if (block.isConditional || block.isSwitch) {\n+         for (BasicBlock child : block.getNormalSuccessors()) {\n+           if (!child.isExceptionBlock()) {\n+             if (!child.canCompleteNormally()) {\n+               return false;\n+             }\n+           }\n+         }\n+         if (block.getExceptionHandler() != null &&\n+             !block.getExceptionHandler().canCatch(EXCEPTION_MIXIN)) {\n+           return false;\n+         }\n+       }\n+     }\n+\n+     return true;\n+   }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}