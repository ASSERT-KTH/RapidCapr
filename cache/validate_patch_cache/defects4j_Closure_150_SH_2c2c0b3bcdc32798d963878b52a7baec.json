{
    "patch": "    attachLiteralTypes(n);\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        if (parent.getType() == Token.NAME) {\n          return;\n        }\n        defineDeclaredFunction(n, parent);\n        break;\n      case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n      case Token.VAR:\n        defineVar(n, parent);\n        break;\n      case Token.LP:\n        Node grandParent = parent.getParent();\n        if (parent == scope.getRootNode() ||\n            grandParent == null ||\n            (!NodeUtil.isExpressionResult(grandParent) &&\n             !NodeUtil.isVarOrSimpleAssign(grandParent) &&\n             (!NodeUtil.isIncDecUnmodified(grandParent) || !NodeUtil.isExpressionResult(grandParent.getParent())\n             ) &&\n             (!NodeUtil.isObjectLitKey(parent) || !NodeUtil.isExpressionResult(grandParent.getParent())\n             ))\n            )\n        {\n          handleFunctionInputs(parent);\n        }\n        break;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..03ec3022 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,36 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+    attachLiteralTypes(n);\n+    switch (n.getType()) {\n+      case Token.FUNCTION:\n+        if (parent.getType() == Token.NAME) {\n+          return;\n+        }\n+        defineDeclaredFunction(n, parent);\n+        break;\n+      case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+      case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+      case Token.LP:\n+        Node grandParent = parent.getParent();\n+        if (parent == scope.getRootNode() ||\n+            grandParent == null ||\n+            (!NodeUtil.isExpressionResult(grandParent) &&\n+             !NodeUtil.isVarOrSimpleAssign(grandParent) &&\n+             (!NodeUtil.isIncDecUnmodified(grandParent) || !NodeUtil.isExpressionResult(grandParent.getParent())\n+             ) &&\n+             (!NodeUtil.isObjectLitKey(parent) || !NodeUtil.isExpressionResult(grandParent.getParent())\n+             ))\n+            )\n+        {\n+          handleFunctionInputs(parent);\n+        }\n+        break;\n+    }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}