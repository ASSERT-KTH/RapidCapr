{
    "patch": "        if (val2 == -1){\n            // check if multiplication overflows\n            if (val1 == Long.MIN_VALUE) {\n                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n            }\n            return -val1;\n        }\n        else if (val2 == 0){\n            return 0L;\n        }\n        else if (val2 == 1){\n            return val1;\n        }\n        // check if multiplication overflows\n        if (val1 > 0 && val2 > 0 && val1 > Long.MAX_VALUE / val2){\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        else if (val1 < 0 && val2 < 0 && val1 < Long.MAX_VALUE / val2){\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        else if (val1 < 0 && val2 > 0 && Long.MIN_VALUE / val2 > val1){\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        else if (val1 > 0 && val2 < 0 && val1 > Long.MIN_VALUE / val2){\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return val1 * val2;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/field/FieldUtils.java b/src/main/java/org/joda/time/field/FieldUtils.java\nindex a0fe7e2d..5b8dd930 100644\n--- a/src/main/java/org/joda/time/field/FieldUtils.java\n+++ b/src/main/java/org/joda/time/field/FieldUtils.java\n@@ -135,6 +135,33 @@ public class FieldUtils {\n     public static long safeMultiply(long val1, int val2) {\n         switch (val2) {\n             case -1:\n+        if (val2 == -1){\n+            // check if multiplication overflows\n+            if (val1 == Long.MIN_VALUE) {\n+                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n+            }\n+            return -val1;\n+        }\n+        else if (val2 == 0){\n+            return 0L;\n+        }\n+        else if (val2 == 1){\n+            return val1;\n+        }\n+        // check if multiplication overflows\n+        if (val1 > 0 && val2 > 0 && val1 > Long.MAX_VALUE / val2){\n+            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n+        }\n+        else if (val1 < 0 && val2 < 0 && val1 < Long.MAX_VALUE / val2){\n+            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n+        }\n+        else if (val1 < 0 && val2 > 0 && Long.MIN_VALUE / val2 > val1){\n+            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n+        }\n+        else if (val1 > 0 && val2 < 0 && val1 > Long.MIN_VALUE / val2){\n+            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n+        }\n+        return val1 * val2;\n                 return -val1;\n             case 0:\n                 return 0L;",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}