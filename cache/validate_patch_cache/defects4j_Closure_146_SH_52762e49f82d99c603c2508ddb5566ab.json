{
    "patch": "        // this handles the case where either type is a conditional and that is an equality test\n        if ((this.isConditional() && that.testForEquality(this) == TestResult.TRUE) ||\n            (that.isConditional() && this.testForEquality(that) == TestResult.TRUE)) {\n          JSType trueTypeA = this.getTruthyType();\n          JSType trueTypeB = that.getTruthyType();\n          if (!(trueTypeA.isUnknownType() || trueTypeB.isUnknownType())) {\n            return new TypePair(trueTypeA.getLeastSupertype(trueTypeB), getGreatestSubtype(this.getFalseyType(), that.getFalseyType()));\n          }  \n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..1b74f4aa 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,15 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+        // this handles the case where either type is a conditional and that is an equality test\n+        if ((this.isConditional() && that.testForEquality(this) == TestResult.TRUE) ||\n+            (that.isConditional() && this.testForEquality(that) == TestResult.TRUE)) {\n+          JSType trueTypeA = this.getTruthyType();\n+          JSType trueTypeB = that.getTruthyType();\n+          if (!(trueTypeA.isUnknownType() || trueTypeB.isUnknownType())) {\n+            return new TypePair(trueTypeA.getLeastSupertype(trueTypeB), getGreatestSubtype(this.getFalseyType(), that.getFalseyType()));\n+          }  \n+        }\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}