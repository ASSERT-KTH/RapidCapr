{
    "patch": "            TypeVariable<? extends Class<?>>[] typeParameters = ((Class<?>) typeVariable.getGenericDeclaration()).getTypeParameters();\n            for (TypeVariable<? extends Class<?>> typeParameter : typeParameters) {\n                if (typeParameter.getName().equals(typeVariable.getName())) {\n                    for (Type type : typeParameter.getBounds()) {\n                        registerTypeVariablesOn(type);\n                    }\n                    break;\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..bb2c29ce2 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,20 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+            TypeVariable<? extends Class<?>>[] typeParameters = ((Class<?>) typeVariable.getGenericDeclaration()).getTypeParameters();\n+            for (TypeVariable<? extends Class<?>> typeParameter : typeParameters) {\n+                if (typeParameter.getName().equals(typeVariable.getName())) {\n+                    for (Type type : typeParameter.getBounds()) {\n+                        registerTypeVariablesOn(type);\n+                    }\n+                    break;\n+                }\n+            }\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "java.lang.ClassCastException: java.lang.reflect.Method cannot be cast to java.lang.Class",
    "test_result": "FAIL"
}