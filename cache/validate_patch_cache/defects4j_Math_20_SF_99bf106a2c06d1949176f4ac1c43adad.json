{
    "patch": "public double[] repairAndDecode(final double[] x) {\n    double[] result = null;\n    try {\n        result = decode(repair(x));\n    } catch (Exception e) {\n        result = new double[x.length];\n    }\n    for (int i = 0; i < result.length; i++) {\n        if (result[i] > 1) {\n            result[i] = 1;\n        } else if (result[i] < 0) {\n            result[i] = 0;\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 4b7dbf6bb..37d557c73 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -917,10 +917,22 @@ public class CMAESOptimizer\n          * @param x Normalized objective variables.\n          * @return the original objective variables, possibly repaired.\n          */\n-        public double[] repairAndDecode(final double[] x) {\n-            return\n-                decode(x);\n+public double[] repairAndDecode(final double[] x) {\n+    double[] result = null;\n+    try {\n+        result = decode(repair(x));\n+    } catch (Exception e) {\n+        result = new double[x.length];\n+    }\n+    for (int i = 0; i < result.length; i++) {\n+        if (result[i] > 1) {\n+            result[i] = 1;\n+        } else if (result[i] < 0) {\n+            result[i] = 0;\n         }\n+    }\n+    return result;\n+}\n \n         /**\n          * @param x Normalized objective variables.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}