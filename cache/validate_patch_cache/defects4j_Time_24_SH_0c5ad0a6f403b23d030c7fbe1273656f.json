{
    "patch": "            if (e.getDateTimeFieldType() != null) {\n                SavedField field = null;\n                for (int i = 0; i < count; i++) {\n                    if (savedFields[i].matchesField(e.getDateTimeFieldType())) {\n                        field = savedFields[i];\n                        break;\n                    }\n                }\n                if (field != null) {\n                    int index = field.getIndex();\n                    Object value = e.getIllegalFieldValue();\n                    String desc = field.getName();\n                    DateTimeParserBucket newBucket = new DateTimeParserBucket(millis, getChronology());\n                    for (int i = 0; i < index; ++i) {\n                        field = savedFields[i];\n                        newBucket.saveField(field.iField, newBucket.fieldValue(field.iField));\n                    }\n                    if (field.isSaved()) {\n                        field = new SavedField(field.getField(), field.getValue(), false);\n                    }\n                    field.set(newBucket, value);\n                    for (int i = index + 1; i < count; ++i) {\n                        field = savedFields[i];\n                        if (!field.isSaved()) {\n                            break;\n                        }\n                        newBucket.saveField(field.iField, field.getValue());\n                    }\n                    return f.computeMillis(resetFields, newBucket);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..0ad76c29 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,35 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (e.getDateTimeFieldType() != null) {\n+                SavedField field = null;\n+                for (int i = 0; i < count; i++) {\n+                    if (savedFields[i].matchesField(e.getDateTimeFieldType())) {\n+                        field = savedFields[i];\n+                        break;\n+                    }\n+                }\n+                if (field != null) {\n+                    int index = field.getIndex();\n+                    Object value = e.getIllegalFieldValue();\n+                    String desc = field.getName();\n+                    DateTimeParserBucket newBucket = new DateTimeParserBucket(millis, getChronology());\n+                    for (int i = 0; i < index; ++i) {\n+                        field = savedFields[i];\n+                        newBucket.saveField(field.iField, newBucket.fieldValue(field.iField));\n+                    }\n+                    if (field.isSaved()) {\n+                        field = new SavedField(field.getField(), field.getValue(), false);\n+                    }\n+                    field.set(newBucket, value);\n+                    for (int i = index + 1; i < count; ++i) {\n+                        field = savedFields[i];\n+                        if (!field.isSaved()) {\n+                            break;\n+                        }\n+                        newBucket.saveField(field.iField, field.getValue());\n+                    }\n+                    return f.computeMillis(resetFields, newBucket);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}