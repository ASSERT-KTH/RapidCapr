{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                        Node parent) {\n  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n    return;\n  }\n\n  Node arrayNode = left.getFirstChild();\n  Node functionName = left.getSecondChild();\n\n  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n      !functionName.getString().equals(\"join\")) {\n    return;\n  }\n\n  String joinString = NodeUtil.getStringValue(right);\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = new StringBuilder();\n  boolean hasImmutableChildren = false;\n  int foldedSize = 0;\n  Node elem = arrayNode.getFirstChild();\n  // Merges adjacent String nodes.\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      hasImmutableChildren = true;\n      String value = NodeUtil.getStringValue(elem);\n      if (sb.length() > 0) {\n        sb.append(joinString);\n        foldedSize += joinString.length();\n      }\n      sb.append(value);\n      foldedSize += value.length();\n    } else {\n      if (sb.length() > 0) {\n        // + 2 for the quotes.\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n        sb = new StringBuilder();\n      }\n      arrayFoldedChildren.add(elem);\n      foldedSize += InlineCostEstimator.getCost(elem);\n    }\n    elem = elem.getNext();\n  }\n\n  if (sb.length() > 0) {\n    // + 2 for the quotes.\n    foldedSize += sb.length() + 2;\n    arrayFoldedChildren.add(Node.newString(sb.toString()));\n  }\n  // one for each comma, except for the last element.\n  int commaCount = Math.max(arrayFoldedChildren.size() - 1, 0);\n  if (commaCount > 0) {\n    foldedSize += joinString.length() * commaCount;\n  }\n\n  int originalSize = InlineCostEstimator.getCost(n);\n  boolean isFoldable = (arrayFoldedChildren.size() < arrayNode.getChildCount())\n      || hasImmutableChildren;\n\n  if (arrayFoldedChildren.isEmpty()) {\n    parent.replaceChild(n, Node.newString(\"\"));\n  } else if (arrayFoldedChildren.size() == 1 && !hasImmutableChildren) {\n    Node foldedStringNode = arrayFoldedChildren.remove(0);\n    if (foldedSize > originalSize) {\n      return;\n    }\n    arrayNode.detachChildren();\n    if (foldedStringNode.getType() != Token.STRING) {\n      // If the Node is not a string literal, ensure that\n      // it is coerced to a string.\n      Node replacement = new Node(Token.ADD,\n          Node.newString(\"\"), foldedStringNode);\n      foldedStringNode = replacement;\n    }\n    parent.replaceChild(n, foldedStringNode);\n  } else if (isFoldable && foldedSize <= originalSize + 10) {\n    int stringLiteralCount = 0;\n    int nonStringLiteralCount = 0;\n    for (Node node : arrayFoldedChildren) {\n      if (node.getType() == Token.STRING) {\n        stringLiteralCount++;\n      } else {\n        nonStringLiteralCount += InlineCostEstimator.getCost(node);\n      }\n    }\n    Node newStringNode = null;\n    if (stringLiteralCount > nonStringLiteralCount) {\n      StringBuilder newString = new StringBuilder();\n      for (int i = 0; i < arrayFoldedChildren.size(); i++) {\n        Node node = arrayFoldedChildren.get(i);\n        if (i != 0) {\n          newString.append(joinString);\n        }\n        newString.append(NodeUtil.getStringValue(node));\n        foldedSize += NodeUtil.getStringValue(node).length();\n      }\n      newStringNode = Node.newString(newString.toString());\n    }\n    if (newStringNode != null) {\n      parent.replaceChild(n, newStringNode);\n    } else {\n      String varName = t.getUniqueName(\"strLit\");\n      Node stringLiteralList = Node.newString(\"\");\n      for (Node stringLiteralNode : arrayFoldedChildren) {\n        Node stringLiteralVar = IR.var(IR.name(varName),\n            stringLiteralNode.cloneNode());\n        stringLiteralList.addChildToBack(stringLiteralVar);\n      }\n      Node stringConcat = makeStringConcatenation(stringLiteralList, joinString);\n      Node var = IR.var(IR.name(varName), stringConcat);\n      parent.replaceChild(n, IR.name(varName));\n      parent.addChildBefore(var, n);\n      t.reportCodeChange();\n    }\n  }\n}\n\nprivate static Node makeStringConcatenation(Node stringLiteralList,\n                                            String joinString) {\n  Node add = null;\n  for (Node node : stringLiteralList.children()) {\n    if (add == null) {\n      add = node;\n    } else {\n      add = IR.add(add, Node.newString(joinString));\n      add = IR.add(add, node);\n    }\n  }\n  return add;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..f9d05196 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,95 +1458,136 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n-    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n+                        Node parent) {\n+  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n+    return;\n+  }\n+\n+  Node arrayNode = left.getFirstChild();\n+  Node functionName = left.getSecondChild();\n+\n+  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n+      !functionName.getString().equals(\"join\")) {\n+    return;\n+  }\n+\n+  String joinString = NodeUtil.getStringValue(right);\n+  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n+  StringBuilder sb = new StringBuilder();\n+  boolean hasImmutableChildren = false;\n+  int foldedSize = 0;\n+  Node elem = arrayNode.getFirstChild();\n+  // Merges adjacent String nodes.\n+  while (elem != null) {\n+    if (NodeUtil.isImmutableValue(elem)) {\n+      hasImmutableChildren = true;\n+      String value = NodeUtil.getStringValue(elem);\n+      if (sb.length() > 0) {\n+        sb.append(joinString);\n+        foldedSize += joinString.length();\n+      }\n+      sb.append(value);\n+      foldedSize += value.length();\n+    } else {\n+      if (sb.length() > 0) {\n+        // + 2 for the quotes.\n+        foldedSize += sb.length() + 2;\n+        arrayFoldedChildren.add(Node.newString(sb.toString()));\n+        sb = new StringBuilder();\n+      }\n+      arrayFoldedChildren.add(elem);\n+      foldedSize += InlineCostEstimator.getCost(elem);\n     }\n+    elem = elem.getNext();\n+  }\n \n-    Node arrayNode = left.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  if (sb.length() > 0) {\n+    // + 2 for the quotes.\n+    foldedSize += sb.length() + 2;\n+    arrayFoldedChildren.add(Node.newString(sb.toString()));\n+  }\n+  // one for each comma, except for the last element.\n+  int commaCount = Math.max(arrayFoldedChildren.size() - 1, 0);\n+  if (commaCount > 0) {\n+    foldedSize += joinString.length() * commaCount;\n+  }\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n+  int originalSize = InlineCostEstimator.getCost(n);\n+  boolean isFoldable = (arrayFoldedChildren.size() < arrayNode.getChildCount())\n+      || hasImmutableChildren;\n+\n+  if (arrayFoldedChildren.isEmpty()) {\n+    parent.replaceChild(n, Node.newString(\"\"));\n+  } else if (arrayFoldedChildren.size() == 1 && !hasImmutableChildren) {\n+    Node foldedStringNode = arrayFoldedChildren.remove(0);\n+    if (foldedSize > originalSize) {\n       return;\n     }\n-\n-    String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = new StringBuilder();\n-    int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n+    arrayNode.detachChildren();\n+    if (foldedStringNode.getType() != Token.STRING) {\n+      // If the Node is not a string literal, ensure that\n+      // it is coerced to a string.\n+      Node replacement = new Node(Token.ADD,\n+          Node.newString(\"\"), foldedStringNode);\n+      foldedStringNode = replacement;\n+    }\n+    parent.replaceChild(n, foldedStringNode);\n+  } else if (isFoldable && foldedSize <= originalSize + 10) {\n+    int stringLiteralCount = 0;\n+    int nonStringLiteralCount = 0;\n+    for (Node node : arrayFoldedChildren) {\n+      if (node.getType() == Token.STRING) {\n+        stringLiteralCount++;\n       } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n+        nonStringLiteralCount += InlineCostEstimator.getCost(node);\n+      }\n+    }\n+    Node newStringNode = null;\n+    if (stringLiteralCount > nonStringLiteralCount) {\n+      StringBuilder newString = new StringBuilder();\n+      for (int i = 0; i < arrayFoldedChildren.size(); i++) {\n+        Node node = arrayFoldedChildren.get(i);\n+        if (i != 0) {\n+          newString.append(joinString);\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+        newString.append(NodeUtil.getStringValue(node));\n+        foldedSize += NodeUtil.getStringValue(node).length();\n       }\n-      elem = elem.getNext();\n+      newStringNode = Node.newString(newString.toString());\n     }\n-\n-    if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n+    if (newStringNode != null) {\n+      parent.replaceChild(n, newStringNode);\n+    } else {\n+      String varName = t.getUniqueName(\"strLit\");\n+      Node stringLiteralList = Node.newString(\"\");\n+      for (Node stringLiteralNode : arrayFoldedChildren) {\n+        Node stringLiteralVar = IR.var(IR.name(varName),\n+            stringLiteralNode.cloneNode());\n+        stringLiteralList.addChildToBack(stringLiteralVar);\n+      }\n+      Node stringConcat = makeStringConcatenation(stringLiteralList, joinString);\n+      Node var = IR.var(IR.name(varName), stringConcat);\n+      parent.replaceChild(n, IR.name(varName));\n+      parent.addChildBefore(var, n);\n+      t.reportCodeChange();\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n-\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+  }\n+}\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n+private static Node makeStringConcatenation(Node stringLiteralList,\n+                                            String joinString) {\n+  Node add = null;\n+  for (Node node : stringLiteralList.children()) {\n+    if (add == null) {\n+      add = node;\n+    } else {\n+      add = IR.add(add, Node.newString(joinString));\n+      add = IR.add(add, node);\n     }\n-    t.getCompiler().reportCodeChange();\n   }\n+  return add;\n+}\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}