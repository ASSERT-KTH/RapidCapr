{
    "patch": "JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> enclosingScope) {\n    // Check if the type is already resolved\n    if (isResolved()) {\n        return registry != null && registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    // Try to resolve the type through the registry\n    boolean resolved = resolveViaRegistry(errorReporter, enclosingScope);\n    if (resolved) {\n        super.resolveInternal(errorReporter, enclosingScope);\n        finishPropertyContinuations();\n        return registry != null && registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    // Try to resolve the type through the property map\n    resolveViaProperties(errorReporter, enclosingScope);\n\n    // Check again if the type is already resolved\n    if (isResolved()) {\n        super.resolveInternal(errorReporter, enclosingScope);\n        finishPropertyContinuations();\n        return registry != null && registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    // If cyclic dependency detected, handle the cycle and try resolving type again\n    if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(errorReporter);\n        resolved = resolveViaRegistry(errorReporter, enclosingScope);\n        if (resolved) {\n            super.resolveInternal(errorReporter, enclosingScope);\n            finishPropertyContinuations();\n            return registry != null && registry.isLastGeneration() ? getReferencedType() : this;\n        }\n\n        resolveViaProperties(errorReporter, enclosingScope);\n    }\n\n    // Check again if the type is already resolved\n    if (isResolved()) {\n        super.resolveInternal(errorReporter, enclosingScope);\n        finishPropertyContinuations();\n        return registry != null && registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    // Unable to resolve the type, report an error\n    if (errorReporter != null) {\n        reportUnresolvableType(errorReporter);\n    }\n\n    return this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..044960c3 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,57 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> enclosingScope) {\n+    // Check if the type is already resolved\n+    if (isResolved()) {\n+        return registry != null && registry.isLastGeneration() ? getReferencedType() : this;\n     }\n \n+    // Try to resolve the type through the registry\n+    boolean resolved = resolveViaRegistry(errorReporter, enclosingScope);\n     if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+        super.resolveInternal(errorReporter, enclosingScope);\n+        finishPropertyContinuations();\n+        return registry != null && registry.isLastGeneration() ? getReferencedType() : this;\n+    }\n+\n+    // Try to resolve the type through the property map\n+    resolveViaProperties(errorReporter, enclosingScope);\n+\n+    // Check again if the type is already resolved\n+    if (isResolved()) {\n+        super.resolveInternal(errorReporter, enclosingScope);\n+        finishPropertyContinuations();\n+        return registry != null && registry.isLastGeneration() ? getReferencedType() : this;\n     }\n \n-    resolveViaProperties(t, enclosing);\n+    // If cyclic dependency detected, handle the cycle and try resolving type again\n     if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+        handleTypeCycle(errorReporter);\n+        resolved = resolveViaRegistry(errorReporter, enclosingScope);\n+        if (resolved) {\n+            super.resolveInternal(errorReporter, enclosingScope);\n+            finishPropertyContinuations();\n+            return registry != null && registry.isLastGeneration() ? getReferencedType() : this;\n+        }\n+\n+        resolveViaProperties(errorReporter, enclosingScope);\n     }\n \n-    super.resolveInternal(t, enclosing);\n+    // Check again if the type is already resolved\n     if (isResolved()) {\n-      finishPropertyContinuations();\n+        super.resolveInternal(errorReporter, enclosingScope);\n+        finishPropertyContinuations();\n+        return registry != null && registry.isLastGeneration() ? getReferencedType() : this;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+\n+    // Unable to resolve the type, report an error\n+    if (errorReporter != null) {\n+        reportUnresolvableType(errorReporter);\n+    }\n+\n+    return this;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}