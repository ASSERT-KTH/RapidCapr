{
    "patch": "else if (isInitializingAssignmentAt(i)) {\n  Reference initRef = references.get(i);\n  // Check that this is the only assignment to this variable.\n  boolean foundAnotherAssignment = false;\n  for (int j = i + 1; j < size; j++) {\n    if (references.get(j).isAssignmentToSameName(initRef)) {\n      foundAnotherAssignment = true;\n      break;\n    }\n  }\n  if (!foundAnotherAssignment) {\n    return initRef;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..ce5abbb5 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,20 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+else if (isInitializingAssignmentAt(i)) {\n+  Reference initRef = references.get(i);\n+  // Check that this is the only assignment to this variable.\n+  boolean foundAnotherAssignment = false;\n+  for (int j = i + 1; j < size; j++) {\n+    if (references.get(j).isAssignmentToSameName(initRef)) {\n+      foundAnotherAssignment = true;\n+      break;\n+    }\n+  }\n+  if (!foundAnotherAssignment) {\n+    return initRef;\n+  }\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}