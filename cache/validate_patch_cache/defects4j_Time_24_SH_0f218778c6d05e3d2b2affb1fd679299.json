{
    "patch": "        SavedField lastSavedField = null;\n        for (int i = 0; i < count; i++) {\n            SavedField savedField = savedFields[i];\n            if (lastSavedField != null) {\n                DurationField currentField = lastSavedField.iField.getDurationField();\n                DurationField nextDurationField = savedField.iField.getDurationField();\n                if (compareReverse(currentField, nextDurationField) > 0) {\n                    throw new IllegalArgumentException(\"Fields invalid for parsing: \" + currentField.getName() + \" -> \" + nextDurationField.getName());\n                }\n            }\n\n            if (DateTimeFieldType.year().equals(savedField.iField.getType())) {\n                try {\n                    millis = savedField.set(millis, resetFields);\n                } catch (IllegalFieldValueException e) {\n                    iDefaultYear = -iDefaultYear;\n                    DateTimeField yearField = savedField.iField;\n                    millis = yearField.set(0L, iDefaultYear);\n                    savedField = new SavedField(yearField, iDefaultYear);\n                    millis = savedField.set(millis, resetFields);\n                }\n            } else {\n                try {\n                    millis = savedField.set(millis, resetFields);\n                } catch (IllegalFieldValueException ex) {\n                    if (lastSavedField == null || lastSavedField.iField.getType() != DateTimeFieldType.year()) {\n                        if (text != null) {\n                            ex.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                        }\n                        throw ex;\n                    } else {\n                        int year = lastSavedField.iValue;\n                        DateTimeField yearField = lastSavedField.iField;\n                        iDefaultYear = -year;\n                        millis = yearField.set(0L, iDefaultYear);\n                        millis = savedField.set(millis, resetFields);\n                    }\n                }\n            }\n\n            lastSavedField = savedField;\n\n            if (lastSavedField != null && lastSavedField.iField.getType() == DateTimeFieldType.weekyear()) {\n                int lastValue = lastSavedField.iValue;\n                int weekOfWeekyear = savedField.iField.get(millis);\n                Chronology chrono = savedField.iField.getChronology();\n                lastValue = lastValue - weekOfWeekyear + 1;\n                millis = savedField.iField.set(millis, lastValue);\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..28719552 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,56 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        SavedField lastSavedField = null;\n+        for (int i = 0; i < count; i++) {\n+            SavedField savedField = savedFields[i];\n+            if (lastSavedField != null) {\n+                DurationField currentField = lastSavedField.iField.getDurationField();\n+                DurationField nextDurationField = savedField.iField.getDurationField();\n+                if (compareReverse(currentField, nextDurationField) > 0) {\n+                    throw new IllegalArgumentException(\"Fields invalid for parsing: \" + currentField.getName() + \" -> \" + nextDurationField.getName());\n+                }\n+            }\n+\n+            if (DateTimeFieldType.year().equals(savedField.iField.getType())) {\n+                try {\n+                    millis = savedField.set(millis, resetFields);\n+                } catch (IllegalFieldValueException e) {\n+                    iDefaultYear = -iDefaultYear;\n+                    DateTimeField yearField = savedField.iField;\n+                    millis = yearField.set(0L, iDefaultYear);\n+                    savedField = new SavedField(yearField, iDefaultYear);\n+                    millis = savedField.set(millis, resetFields);\n+                }\n+            } else {\n+                try {\n+                    millis = savedField.set(millis, resetFields);\n+                } catch (IllegalFieldValueException ex) {\n+                    if (lastSavedField == null || lastSavedField.iField.getType() != DateTimeFieldType.year()) {\n+                        if (text != null) {\n+                            ex.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                        }\n+                        throw ex;\n+                    } else {\n+                        int year = lastSavedField.iValue;\n+                        DateTimeField yearField = lastSavedField.iField;\n+                        iDefaultYear = -year;\n+                        millis = yearField.set(0L, iDefaultYear);\n+                        millis = savedField.set(millis, resetFields);\n+                    }\n+                }\n+            }\n+\n+            lastSavedField = savedField;\n+\n+            if (lastSavedField != null && lastSavedField.iField.getType() == DateTimeFieldType.weekyear()) {\n+                int lastValue = lastSavedField.iValue;\n+                int weekOfWeekyear = savedField.iField.get(millis);\n+                Chronology chrono = savedField.iField.getChronology();\n+                lastValue = lastValue - weekOfWeekyear + 1;\n+                millis = savedField.iField.set(millis, lastValue);\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}