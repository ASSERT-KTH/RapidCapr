{
    "patch": "public EqualsBuilder append(Object lhs, Object rhs) {\n\t\tif (isEquals == false) {\n\t\t\treturn this;\n\t\t}\n\t\tif (lhs == rhs) {\n\t\t\treturn this;\n\t\t}\n\t\tif (lhs == null || rhs == null) {\n\t\t\tthis.setEquals(false);\n\t\t\treturn this;\n\t\t}\n\t\tClass<?> lhsClass = lhs.getClass();\n\t\tif (!lhsClass.isArray()) {\n\t\t\tisEquals = lhs.equals(rhs);\n\t\t} else if (lhs.getClass() != rhs.getClass()) {\n\t\t\tthis.setEquals(false);\n\t\t} else if (lhs instanceof long[]) {\n\t\t\tappend((long[]) lhs, (long[]) rhs);\n\t\t} else if (lhs instanceof int[]) {\n\t\t\tappend((int[]) lhs, (int[]) rhs);\n\t\t} else if (lhs instanceof short[]) {\n\t\t\tappend((short[]) lhs, (short[]) rhs);\n\t\t} else if (lhs instanceof char[]) {\n\t\t\tappend((char[]) lhs, (char[]) rhs);\n\t\t} else if (lhs instanceof byte[]) {\n\t\t\tappend((byte[]) lhs, (byte[]) rhs);\n\t\t} else if (lhs instanceof double[]) {\n\t\t\tappend((double[]) lhs, (double[]) rhs);\n\t\t} else if (lhs instanceof float[]) {\n\t\t\tappend((float[]) lhs, (float[]) rhs);\n\t\t} else if (lhs instanceof boolean[]) {\n\t\t\tappend((boolean[]) lhs, (boolean[]) rhs);\n\t\t} else {\n\t\t\tappend((Object[]) lhs, (Object[]) rhs);\n\t\t}\n\t\treturn this;\n\t}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..4663b233 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,49 +364,43 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n-    public EqualsBuilder append(Object lhs, Object rhs) {\n-        if (isEquals == false) {\n-            return this;\n-        }\n-        if (lhs == rhs) {\n-            return this;\n-        }\n-        if (lhs == null || rhs == null) {\n-            this.setEquals(false);\n-            return this;\n-        }\n-        Class lhsClass = lhs.getClass();\n-        if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n-            this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n-        } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n-        } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n-        } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n-        } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n-        } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n-        } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n-        } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n-        } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n-        }\n-        return this;\n-    }\n+public EqualsBuilder append(Object lhs, Object rhs) {\n+\t\tif (isEquals == false) {\n+\t\t\treturn this;\n+\t\t}\n+\t\tif (lhs == rhs) {\n+\t\t\treturn this;\n+\t\t}\n+\t\tif (lhs == null || rhs == null) {\n+\t\t\tthis.setEquals(false);\n+\t\t\treturn this;\n+\t\t}\n+\t\tClass<?> lhsClass = lhs.getClass();\n+\t\tif (!lhsClass.isArray()) {\n+\t\t\tisEquals = lhs.equals(rhs);\n+\t\t} else if (lhs.getClass() != rhs.getClass()) {\n+\t\t\tthis.setEquals(false);\n+\t\t} else if (lhs instanceof long[]) {\n+\t\t\tappend((long[]) lhs, (long[]) rhs);\n+\t\t} else if (lhs instanceof int[]) {\n+\t\t\tappend((int[]) lhs, (int[]) rhs);\n+\t\t} else if (lhs instanceof short[]) {\n+\t\t\tappend((short[]) lhs, (short[]) rhs);\n+\t\t} else if (lhs instanceof char[]) {\n+\t\t\tappend((char[]) lhs, (char[]) rhs);\n+\t\t} else if (lhs instanceof byte[]) {\n+\t\t\tappend((byte[]) lhs, (byte[]) rhs);\n+\t\t} else if (lhs instanceof double[]) {\n+\t\t\tappend((double[]) lhs, (double[]) rhs);\n+\t\t} else if (lhs instanceof float[]) {\n+\t\t\tappend((float[]) lhs, (float[]) rhs);\n+\t\t} else if (lhs instanceof boolean[]) {\n+\t\t\tappend((boolean[]) lhs, (boolean[]) rhs);\n+\t\t} else {\n+\t\t\tappend((Object[]) lhs, (Object[]) rhs);\n+\t\t}\n+\t\treturn this;\n+\t}\n \n     /**\n      * <p>",
    "result_reason": "error: generics are not supported in -source 1.3",
    "test_result": "ERROR"
}