{
    "patch": "private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    Type[] interfaces = typeVariable.getClass().getGenericInterfaces();\n    for (Type type : interfaces) {\n        if (type instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType) type;\n            Type[] typeArguments = parameterizedType.getActualTypeArguments();\n            TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n            for (int i = 0; i < typeArguments.length; i++) {\n                if (typeParameters[i].equals(typeVariable)) {\n                    Type typeArgument = typeArguments[i];\n                    if (typeArgument instanceof TypeVariable) {\n                        Type actualTypeArgument = getActualTypeArgumentFor((TypeVariable<?>) typeArgument);\n                        if (actualTypeArgument != null) {\n                            return actualTypeArgument;\n                        }\n                    } else {\n                        return typeArgument;\n                    }\n                }\n            }\n        } else if (type instanceof Class) {\n            TypeVariable<?>[] typeParameters = ((Class<?>) type).getTypeParameters();\n            for (int i = 0; i < typeParameters.length; i++) {\n                if (typeParameters[i].equals(typeVariable)) {\n                    return null;\n                }\n            }\n        }\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..7d2e8d2c1 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,42 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    Type[] interfaces = typeVariable.getClass().getGenericInterfaces();\n+    for (Type type : interfaces) {\n+        if (type instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType) type;\n+            Type[] typeArguments = parameterizedType.getActualTypeArguments();\n+            TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n+            for (int i = 0; i < typeArguments.length; i++) {\n+                if (typeParameters[i].equals(typeVariable)) {\n+                    Type typeArgument = typeArguments[i];\n+                    if (typeArgument instanceof TypeVariable) {\n+                        Type actualTypeArgument = getActualTypeArgumentFor((TypeVariable<?>) typeArgument);\n+                        if (actualTypeArgument != null) {\n+                            return actualTypeArgument;\n+                        }\n+                    } else {\n+                        return typeArgument;\n+                    }\n+                }\n+            }\n+        } else if (type instanceof Class) {\n+            TypeVariable<?>[] typeParameters = ((Class<?>) type).getTypeParameters();\n+            for (int i = 0; i < typeParameters.length; i++) {\n+                if (typeParameters[i].equals(typeVariable)) {\n+                    return null;\n+                }\n+            }\n+        }\n+    }\n+    return null;\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}