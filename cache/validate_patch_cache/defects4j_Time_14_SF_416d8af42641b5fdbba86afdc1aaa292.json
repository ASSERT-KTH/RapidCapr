{
    "patch": " public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    boolean isContiguousField = DateTimeUtils.isContiguous(partial) && (\n            (fieldIndex == 0 && partial.size() == 2) || fieldIndex == 1);\n    if (isContiguousField) {\n\n        long instant = 0L;\n        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue();\n        int newFieldValue = FieldUtils.safeAdd(values[fieldIndex], valueToAdd);\n        int currentMonth = iChronology.monthOfYear().get(values);\n        int currentDayOfMonth = iChronology.dayOfMonth().get(values);\n\n        //edge case when adding months to february 29th and we land on a non-leap year\n        boolean feb29OnNonLeapYear = currentMonth == 2 && currentDayOfMonth == 29 && \n                !iChronology.year().isLeap(iChronology.set(partial, values));\n\n        try {\n            instant = partial.with(fieldIndex, newFieldValue).getChronology().set(partial, 0L);\n        } catch (IllegalFieldValueException e) {\n            if (e.getIllegalFieldValue() == null || !e.getIllegalFieldValue().getFieldName().equals(\"monthOfYear\")) {\n                throw e;\n            }\n\n            if (newFieldValue > iChronology.monthOfYear().getMaximumValue() || newFieldValue < iChronology.monthOfYear().getMinimumValue()) {\n                throw e;\n            }\n\n            int year = iChronology.year().get(values);\n            int dayOfMonth = Math.min(currentDayOfMonth, iChronology.dayOfMonth().getMaximumValue(year, newFieldValue));\n\n            instant = instant(withYear(withMonthOfYear(withDayOfMonth(partial, dayOfMonth), newFieldValue), year)).getMillis();\n\n            //edge case when adding months to february 29th and we land on a non-leap year\n            if (feb29OnNonLeapYear && !iChronology.year().isLeap(iChronology.set(partial, instant))) {\n                instant = iChronology.withChronology(iChronology.gregorian()).dayOfMonth().set(instant, Math.min(28, iChronology.dayOfMonth().getMaximumValue(year, newFieldValue)));\n            }\n\n        }\n\n        return iChronology.get(partial, instant + ((long) valueToAdd) * 86400000L);\n\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..ea0a11ad 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,23 +200,51 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+ public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    boolean isContiguousField = DateTimeUtils.isContiguous(partial) && (\n+            (fieldIndex == 0 && partial.size() == 2) || fieldIndex == 1);\n+    if (isContiguousField) {\n+\n+        long instant = 0L;\n+        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue();\n+        int newFieldValue = FieldUtils.safeAdd(values[fieldIndex], valueToAdd);\n+        int currentMonth = iChronology.monthOfYear().get(values);\n+        int currentDayOfMonth = iChronology.dayOfMonth().get(values);\n+\n+        //edge case when adding months to february 29th and we land on a non-leap year\n+        boolean feb29OnNonLeapYear = currentMonth == 2 && currentDayOfMonth == 29 && \n+                !iChronology.year().isLeap(iChronology.set(partial, values));\n+\n+        try {\n+            instant = partial.with(fieldIndex, newFieldValue).getChronology().set(partial, 0L);\n+        } catch (IllegalFieldValueException e) {\n+            if (e.getIllegalFieldValue() == null || !e.getIllegalFieldValue().getFieldName().equals(\"monthOfYear\")) {\n+                throw e;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+\n+            if (newFieldValue > iChronology.monthOfYear().getMaximumValue() || newFieldValue < iChronology.monthOfYear().getMinimumValue()) {\n+                throw e;\n+            }\n+\n+            int year = iChronology.year().get(values);\n+            int dayOfMonth = Math.min(currentDayOfMonth, iChronology.dayOfMonth().getMaximumValue(year, newFieldValue));\n+\n+            instant = instant(withYear(withMonthOfYear(withDayOfMonth(partial, dayOfMonth), newFieldValue), year)).getMillis();\n+\n+            //edge case when adding months to february 29th and we land on a non-leap year\n+            if (feb29OnNonLeapYear && !iChronology.year().isLeap(iChronology.set(partial, instant))) {\n+                instant = iChronology.withChronology(iChronology.gregorian()).dayOfMonth().set(instant, Math.min(28, iChronology.dayOfMonth().getMaximumValue(year, newFieldValue)));\n+            }\n+\n         }\n+\n+        return iChronology.get(partial, instant + ((long) valueToAdd) * 86400000L);\n+\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}