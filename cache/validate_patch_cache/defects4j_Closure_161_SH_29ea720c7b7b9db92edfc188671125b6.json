{
    "patch": "    if (parent.getType() == Token.ASSIGN) {\n      Node assignLeft = parent.getFirstChild();\n      if (assignLeft.getType() == Token.GETELEM && assignLeft.getFirstChild().isEquivalentTo(left)) {\n        if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild().isEquivalentTo(n)) {\n          return n;\n        }\n        if (assignLeft.getParent().getType() == Token.ASSIGN && assignLeft.getParent().getFirstChild() == assignLeft\n            && assignLeft.getParent().getLastChild().isEquivalentTo(n)) {\n          return n;\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..d61c81ce 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,18 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+    if (parent.getType() == Token.ASSIGN) {\n+      Node assignLeft = parent.getFirstChild();\n+      if (assignLeft.getType() == Token.GETELEM && assignLeft.getFirstChild().isEquivalentTo(left)) {\n+        if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild().isEquivalentTo(n)) {\n+          return n;\n+        }\n+        if (assignLeft.getParent().getType() == Token.ASSIGN && assignLeft.getParent().getFirstChild() == assignLeft\n+            && assignLeft.getParent().getLastChild().isEquivalentTo(n)) {\n+          return n;\n+        }\n+      }\n+    }\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}