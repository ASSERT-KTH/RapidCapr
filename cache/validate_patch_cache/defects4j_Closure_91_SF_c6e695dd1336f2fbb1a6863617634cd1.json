{
    "patch": "      if (jsDoc != null && jsDoc.containsDeclaration() ||\n          jsDoc.isConstructor() ||\n          jsDoc.isInterface() ||\n          jsDoc.hasThisType() ||\n          jsDoc.isOverride() ||\n          isLendsDeclaration(jsDoc)) {\n        return false;\n      }\n\n      if (parent != null) {\n        int parentType = parent.getType();\n        int grandparentType = parent.getParent().getType();\n        if (parentType == Token.ASSIGN &&\n            NodeUtil.isGet(parent.getFirstChild()) &&\n            grandparentType == Token.EXPRESSION_STATEMENT &&\n            parent.getNext() != null &&\n            parent.getNext().getType() == Token.FUNCTION) {\n          // Don't traverse functions that are assigned to prototype properties.\n          Node rvalue = parent.getNext().getFirstChild();\n          if (rvalue.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          // Don't traverse functions that are getting lent to a prototype.\n          if (isLendsAnnotation(rvalue.getChildAtIndex(1))) {\n            return false;\n          }\n        }\n\n        if (grandparentType == Token.OBJECTLIT &&\n            parentType == Token.STRING) {\n          // Skip object literal keys.\n          return false;\n        }\n\n        if (grandparentType == Token.CATCH) {\n          // Skip catch parameters.\n          return false;\n        }\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else if (NodeUtil.isGet(lhs)) {\n        // Only traverse the right side if it's not an assignment to a prototype.\n        if (lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        Node llhs = lhs.getFirstChild();\n        if (llhs.getType() == Token.GETPROP &&\n            llhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..b6de2344 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,44 +79,49 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n+      if (jsDoc != null && jsDoc.containsDeclaration() ||\n+          jsDoc.isConstructor() ||\n+          jsDoc.isInterface() ||\n+          jsDoc.hasThisType() ||\n+          jsDoc.isOverride() ||\n+          isLendsDeclaration(jsDoc)) {\n         return false;\n       }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n-        return false;\n-      }\n+      if (parent != null) {\n+        int parentType = parent.getType();\n+        int grandparentType = parent.getParent().getType();\n+        if (parentType == Token.ASSIGN &&\n+            NodeUtil.isGet(parent.getFirstChild()) &&\n+            grandparentType == Token.EXPRESSION_STATEMENT &&\n+            parent.getNext() != null &&\n+            parent.getNext().getType() == Token.FUNCTION) {\n+          // Don't traverse functions that are assigned to prototype properties.\n+          Node rvalue = parent.getNext().getFirstChild();\n+          if (rvalue.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+          // Don't traverse functions that are getting lent to a prototype.\n+          if (isLendsAnnotation(rvalue.getChildAtIndex(1))) {\n+            return false;\n+          }\n+        }\n \n-      // Don't traverse functions that are getting lent to a prototype.\n+        if (grandparentType == Token.OBJECTLIT &&\n+            parentType == Token.STRING) {\n+          // Skip object literal keys.\n+          return false;\n+        }\n+\n+        if (grandparentType == Token.CATCH) {\n+          // Skip catch parameters.\n+          return false;\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n       Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n \n       if (n == lhs) {\n         // Always traverse the left side of the assignment. To handle\n@@ -125,25 +130,16 @@ final class CheckGlobalThis implements Callback {\n         if (assignLhsChild == null) {\n           assignLhsChild = lhs;\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n+      } else if (NodeUtil.isGet(lhs)) {\n+        // Only traverse the right side if it's not an assignment to a prototype.\n+        if (lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n         }\n-      }\n-    }\n-\n-    return true;\n-  }\n+        Node llhs = lhs.getFirstChild();\n+        if (llhs.getType() == Token.GETPROP &&\n+            llhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}