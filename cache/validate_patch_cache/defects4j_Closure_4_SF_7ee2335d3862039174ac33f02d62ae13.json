{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    // TODO(user): Investigate whether it is really necessary to keep two\n    // different mechanisms for resolving named types, and if so, which order\n    // makes more sense. Now, resolution via registry is first in order to\n    // avoid triggering the warnings built into the resolution via properties.\n    // return value indicating if the type was resolved via registry\n    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n\n    if (resolvedViaRegistry && detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n      return getReferencedType() != null ?\n          getReferencedType().resolveInternal(t, enclosing) :\n          getComputedPropertyType();\n    }\n\n    // if type was not resolved via registry, try resolving via properties\n    if (!resolvedViaRegistry) {\n      resolveViaProperties(t, enclosing);\n    }\n\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n      return getReferencedType() != null ?\n          getReferencedType().resolveInternal(t, enclosing) :\n          getComputedPropertyType();\n    }\n\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ?\n          getReferencedType() : this;\n    }\n\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..1a84bc3b 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -186,27 +186,35 @@ class NamedType extends ProxyObjectType {\n     // different mechanisms for resolving named types, and if so, which order\n     // makes more sense. Now, resolution via registry is first in order to\n     // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n+    // return value indicating if the type was resolved via registry\n+    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+\n+    if (resolvedViaRegistry && detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n+      return getReferencedType() != null ?\n+          getReferencedType().resolveInternal(t, enclosing) :\n+          getComputedPropertyType();\n     }\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+    // if type was not resolved via registry, try resolving via properties\n+    if (!resolvedViaRegistry) {\n+      resolveViaProperties(t, enclosing);\n     }\n \n-    resolveViaProperties(t, enclosing);\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n+      return getReferencedType() != null ?\n+          getReferencedType().resolveInternal(t, enclosing) :\n+          getComputedPropertyType();\n     }\n \n     super.resolveInternal(t, enclosing);\n     if (isResolved()) {\n       finishPropertyContinuations();\n+      return registry.isLastGeneration() ?\n+          getReferencedType() : this;\n     }\n+\n     return registry.isLastGeneration() ?\n         getReferencedType() : this;\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}