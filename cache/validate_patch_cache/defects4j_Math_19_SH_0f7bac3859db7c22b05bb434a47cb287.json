{
    "patch": "                throw new NumberIsTooLargeException(null, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true);\n            } else {\n                // Convert API to internal handling of boundaries.\n                boundaries = new double[2][];\n                boundaries[0] = lB;\n                boundaries[1] = uB;\n\n                // Abort early if the normalization will overflow (cf. \"encode\" method).\n                double sum = 0;\n                for (int i = 0; i < init.length; i++) {\n                    final double w = FastMath.max(0, uB[i] - lB[i]);\n                    final double mid = 0.5 * (uB[i] + lB[i]);\n                    final double normalized = (init[i] - mid) / w;\n                    final double range = FastMath.max(FastMath.abs(normalized), 1);\n                    sum += w * range * range;\n                }\n                if (sum > Double.MAX_VALUE) {\n                    throw new NumberIsTooLargeException(sum, Double.MAX_VALUE, false);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..626aece73 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,24 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                throw new NumberIsTooLargeException(null, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, true);\n+            } else {\n+                // Convert API to internal handling of boundaries.\n+                boundaries = new double[2][];\n+                boundaries[0] = lB;\n+                boundaries[1] = uB;\n+\n+                // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                double sum = 0;\n+                for (int i = 0; i < init.length; i++) {\n+                    final double w = FastMath.max(0, uB[i] - lB[i]);\n+                    final double mid = 0.5 * (uB[i] + lB[i]);\n+                    final double normalized = (init[i] - mid) / w;\n+                    final double range = FastMath.max(FastMath.abs(normalized), 1);\n+                    sum += w * range * range;\n+                }\n+                if (sum > Double.MAX_VALUE) {\n+                    throw new NumberIsTooLargeException(sum, Double.MAX_VALUE, false);\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}