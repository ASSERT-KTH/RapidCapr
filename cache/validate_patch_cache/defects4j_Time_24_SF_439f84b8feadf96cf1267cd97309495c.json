{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DateTimeFieldType firstType = savedFields[0].iField.getType();\n        DurationField months = firstType.getField(iChrono).getDurationField();\n        DurationField days = firstType.getField(iChrono).getRangeDurationField();\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n\n    long millis = iMillis;\n    boolean leapDayAllowed = true;\n    try {\n        for (int i = 0; i < count; i++) {\n            SavedField savedField = savedFields[i];\n            DateTimeField field = savedField.iField;\n            int newVal = savedField.iValue;\n            if (field.getType() == DateTimeFieldType.dayOfMonth()) {\n                int currentYear = iChrono.year().get(millis);\n                // Check if the current year is a leap year\n                boolean isLeapYear = iChrono.year().isLeap(currentYear);\n                int currentMonth = iChrono.monthOfYear().get(millis);\n                if (isLeapYear && currentMonth == 2 && newVal == 29) {\n                    leapDayAllowed = true;\n                }\n                // Do not allow leap day for non-leap year\n                if (!isLeapYear && currentMonth == 2 && newVal > 28) {\n                    throw new IllegalFieldValueException(field.getType(), newVal);\n                }\n            }\n            millis = field.set(millis, newVal);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    if (!leapDayAllowed) {\n        throw new IllegalFieldValueException(DateTimeFieldType.dayOfMonth(), 29);\n    }\n\n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..52d06471 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,76 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+    if (count > 0) {\n+        // alter base year for parsing if first field is month or day\n+        DateTimeFieldType firstType = savedFields[0].iField.getType();\n+        DurationField months = firstType.getField(iChrono).getDurationField();\n+        DurationField days = firstType.getField(iChrono).getRangeDurationField();\n+        DurationField first = savedFields[0].iField.getDurationField();\n+        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+            saveField(DateTimeFieldType.year(), iDefaultYear);\n+            return computeMillis(resetFields, text);\n         }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+    }\n+\n+    long millis = iMillis;\n+    boolean leapDayAllowed = true;\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            SavedField savedField = savedFields[i];\n+            DateTimeField field = savedField.iField;\n+            int newVal = savedField.iValue;\n+            if (field.getType() == DateTimeFieldType.dayOfMonth()) {\n+                int currentYear = iChrono.year().get(millis);\n+                // Check if the current year is a leap year\n+                boolean isLeapYear = iChrono.year().isLeap(currentYear);\n+                int currentMonth = iChrono.monthOfYear().get(millis);\n+                if (isLeapYear && currentMonth == 2 && newVal == 29) {\n+                    leapDayAllowed = true;\n+                }\n+                // Do not allow leap day for non-leap year\n+                if (!isLeapYear && currentMonth == 2 && newVal > 28) {\n+                    throw new IllegalFieldValueException(field.getType(), newVal);\n+                }\n             }\n+            millis = field.set(millis, newVal);\n+        }\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n         }\n+        throw e;\n+    }\n \n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n+                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n             if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n-            throw e;\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n-            }\n-        }\n-        \n-        return millis;\n     }\n+\n+    if (!leapDayAllowed) {\n+        throw new IllegalFieldValueException(DateTimeFieldType.dayOfMonth(), 29);\n+    }\n+\n+    return millis;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: no suitable constructor found for IllegalFieldValueException(DateTimeFieldType,int)",
    "test_result": "ERROR"
}