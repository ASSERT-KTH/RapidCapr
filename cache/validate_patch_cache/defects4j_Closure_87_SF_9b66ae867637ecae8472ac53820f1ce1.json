{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      Node firstStatement = n.getFirstChild();\n      if (firstStatement != null && firstStatement.getNext() == null) {\n        if (firstStatement.getType() == Token.EXPR_RESULT) {\n          Node maybeExpr = firstStatement.getFirstChild();\n          if (NodeUtil.isExpressionNode(maybeExpr) &&\n              !NodeUtil.isCallNode(maybeExpr) &&\n              !NodeUtil.isCommaNode(maybeExpr)) {\n            return true;\n          }\n        } else if (firstStatement.getType() == Token.EMPTY) {\n          return true;\n        } else if (firstStatement.getType() == Token.BLOCK) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..183246f9 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -518,22 +518,22 @@ public class PeepholeSubstituteAlternateSyntax\n    */\n   private boolean isFoldableExpressBlock(Node n) {\n     if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+      Node firstStatement = n.getFirstChild();\n+      if (firstStatement != null && firstStatement.getNext() == null) {\n+        if (firstStatement.getType() == Token.EXPR_RESULT) {\n+          Node maybeExpr = firstStatement.getFirstChild();\n+          if (NodeUtil.isExpressionNode(maybeExpr) &&\n+              !NodeUtil.isCallNode(maybeExpr) &&\n+              !NodeUtil.isCommaNode(maybeExpr)) {\n+            return true;\n+          }\n+        } else if (firstStatement.getType() == Token.EMPTY) {\n+          return true;\n+        } else if (firstStatement.getType() == Token.BLOCK) {\n+          return true;\n+        }\n       }\n     }\n-\n     return false;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}