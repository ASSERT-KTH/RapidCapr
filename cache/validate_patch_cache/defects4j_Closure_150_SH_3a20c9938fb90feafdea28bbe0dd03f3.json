{
    "patch": "attachLiteralTypes(n);\nif (n.isFunction()) {\n  if (NodeUtil.isFunctionDeclaration(n)) {\n    defineDeclaredFunction(n, parent);\n  } else if (NodeUtil.isFunctionExpression(n)\n             && parent.isExprResult()\n             && parent.getParent().isFunction()) {\n    defineDeclaredFunction(n, parent);\n  } else {\n    handleFunctionInputs(n.getParent());\n  }\n} else if (n.isExprResult()) {\n  Node grandparent = n.getParent();\n  if (grandparent.isBlock()) {\n    grandparent = grandparent.getParent();\n    if (grandparent.isFunction()) {\n      Node expr = n.getFirstChild();\n      if (expr.isAssign()) {\n        defineVar(expr.getFirstChild(), n);\n      } else if (expr.isCall()) {\n        handleAssignCall(expr, n);\n      }\n    } else if (NodeUtil.isStatement(n) && NodeUtil.isStatementBlock(grandparent)) {\n      // Define statements and expression results in block scope.\n      defineExpressionResult(n, parent);\n    }\n  } else if (NodeUtil.isStatement(n)) {\n    defineExpressionResult(n, parent);\n  }\n} else if (n.isCatch()) {\n  defineCatch(n, parent);\n} else if (n.isVar()) {\n  defineVar(n, parent);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..98c8e123 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,40 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+attachLiteralTypes(n);\n+if (n.isFunction()) {\n+  if (NodeUtil.isFunctionDeclaration(n)) {\n+    defineDeclaredFunction(n, parent);\n+  } else if (NodeUtil.isFunctionExpression(n)\n+             && parent.isExprResult()\n+             && parent.getParent().isFunction()) {\n+    defineDeclaredFunction(n, parent);\n+  } else {\n+    handleFunctionInputs(n.getParent());\n+  }\n+} else if (n.isExprResult()) {\n+  Node grandparent = n.getParent();\n+  if (grandparent.isBlock()) {\n+    grandparent = grandparent.getParent();\n+    if (grandparent.isFunction()) {\n+      Node expr = n.getFirstChild();\n+      if (expr.isAssign()) {\n+        defineVar(expr.getFirstChild(), n);\n+      } else if (expr.isCall()) {\n+        handleAssignCall(expr, n);\n       }\n+    } else if (NodeUtil.isStatement(n) && NodeUtil.isStatementBlock(grandparent)) {\n+      // Define statements and expression results in block scope.\n+      defineExpressionResult(n, parent);\n+    }\n+  } else if (NodeUtil.isStatement(n)) {\n+    defineExpressionResult(n, parent);\n+  }\n+} else if (n.isCatch()) {\n+  defineCatch(n, parent);\n+} else if (n.isVar()) {\n+  defineVar(n, parent);\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}