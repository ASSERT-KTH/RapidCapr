{
    "patch": "    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                long baseMillis = computeMillis(resetFields, text);\n\n                // calculate base year from base millis\n                int baseYear = iChrono.year().get(baseMillis);\n\n                // reset the fields that were parsed during recursion\n                if (resetFields) {\n                    savedFields = iSavedFields;\n                    for (int i = 0; i < count; i++) {\n                        if (savedFields[i].iFieldType == DateTimeFieldType.year()) {\n                            savedFields[i] = new SavedField(savedFields[i].iField, baseYear);\n                        }\n                    }\n                }\n\n                // re-sort and re-parse fields\n                sort(savedFields, count);\n                if (resetFields) {\n                    reset();\n                }\n                long fixedMillis = iMillis;\n                try {\n                    for (int i = 0; i < count; i++) {\n                        fixedMillis = savedFields[i].set(fixedMillis, resetFields);\n                    }\n                } catch (IllegalFieldValueException e) {\n                    if (text != null) {\n                        e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n                    }\n                    throw e;\n                }\n\n                // adjust for time zone and return result\n                if (iZone == null) {\n                    fixedMillis -= iOffset;\n                } else {\n                    int offset = iZone.getOffsetFromLocal(fixedMillis);\n                    fixedMillis -= offset;\n                    if (offset != iZone.getOffset(fixedMillis)) {\n                        String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                        if (text != null) {\n                            message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                        }\n                        throw new IllegalArgumentException(message);\n                    }\n                }\n                return fixedMillis;\n            }\n        }\n\n        // normal case: just update fields and return result\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n            }\n            throw e;\n        }\n\n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        return millis;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..697bebc1 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -343,10 +343,57 @@ public class DateTimeParserBucket {\n             DurationField first = savedFields[0].iField.getDurationField();\n             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                 saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+                long baseMillis = computeMillis(resetFields, text);\n+\n+                // calculate base year from base millis\n+                int baseYear = iChrono.year().get(baseMillis);\n+\n+                // reset the fields that were parsed during recursion\n+                if (resetFields) {\n+                    savedFields = iSavedFields;\n+                    for (int i = 0; i < count; i++) {\n+                        if (savedFields[i].iFieldType == DateTimeFieldType.year()) {\n+                            savedFields[i] = new SavedField(savedFields[i].iField, baseYear);\n+                        }\n+                    }\n+                }\n+\n+                // re-sort and re-parse fields\n+                sort(savedFields, count);\n+                if (resetFields) {\n+                    reset();\n+                }\n+                long fixedMillis = iMillis;\n+                try {\n+                    for (int i = 0; i < count; i++) {\n+                        fixedMillis = savedFields[i].set(fixedMillis, resetFields);\n+                    }\n+                } catch (IllegalFieldValueException e) {\n+                    if (text != null) {\n+                        e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+                    }\n+                    throw e;\n+                }\n+\n+                // adjust for time zone and return result\n+                if (iZone == null) {\n+                    fixedMillis -= iOffset;\n+                } else {\n+                    int offset = iZone.getOffsetFromLocal(fixedMillis);\n+                    fixedMillis -= offset;\n+                    if (offset != iZone.getOffset(fixedMillis)) {\n+                        String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+                        if (text != null) {\n+                            message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+                        }\n+                        throw new IllegalArgumentException(message);\n+                    }\n+                }\n+                return fixedMillis;\n             }\n         }\n \n+        // normal case: just update fields and return result\n         long millis = iMillis;\n         try {\n             for (int i = 0; i < count; i++) {\n@@ -354,26 +401,24 @@ public class DateTimeParserBucket {\n             }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n             }\n             throw e;\n         }\n-        \n+\n         if (iZone == null) {\n             millis -= iOffset;\n         } else {\n             int offset = iZone.getOffsetFromLocal(millis);\n             millis -= offset;\n             if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+                String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                 if (text != null) {\n                     message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                 }\n                 throw new IllegalArgumentException(message);\n             }\n         }\n-        \n         return millis;\n     }\n     ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}