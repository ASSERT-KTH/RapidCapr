{
    "patch": "      JSDocInfo jsdoc = NodeUtil.getBestJSDocInfo(n);\n      if (jsdoc != null && jsdoc.hasThisType() && NodeUtil.isNormalGetElemOrProp(n.getParent())) {\n        // validate that the call is properly-formed (e.g. can only call\n        // a matching \"this\" type)\n        JSType thisType = getJSType(n.getFirstChild().getNext());\n        if (thisType != null && jsdoc.getThisType().equals(thisType.toString())) {\n          report(t, n, EXPLICIT_THIS);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..ce58bedd 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,14 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      JSDocInfo jsdoc = NodeUtil.getBestJSDocInfo(n);\n+      if (jsdoc != null && jsdoc.hasThisType() && NodeUtil.isNormalGetElemOrProp(n.getParent())) {\n+        // validate that the call is properly-formed (e.g. can only call\n+        // a matching \"this\" type)\n+        JSType thisType = getJSType(n.getFirstChild().getNext());\n+        if (thisType != null && jsdoc.getThisType().equals(thisType.toString())) {\n+          report(t, n, EXPLICIT_THIS);\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}