{
    "patch": "      // If there are any unused params left in the function declaration,\n      // reset the function's parameter node to a new node that contains only\n      // the used parameters.\n      int numArgsToRemove = argList.getChildCount() - referenced.size();\n      if (numArgsToRemove > 0) {\n        Node newArgList = IR.paramList();\n        for (Node arg : argList.children()) {\n          if (referenced.contains(fnScope.getVar(arg.getString()))) {\n            newArgList.addChildToBack(IR.name(arg.getString()));\n          }\n        }\n        function.replaceChild(argList, newArgList);\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..3305720c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,19 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      // If there are any unused params left in the function declaration,\n+      // reset the function's parameter node to a new node that contains only\n+      // the used parameters.\n+      int numArgsToRemove = argList.getChildCount() - referenced.size();\n+      if (numArgsToRemove > 0) {\n+        Node newArgList = IR.paramList();\n+        for (Node arg : argList.children()) {\n+          if (referenced.contains(fnScope.getVar(arg.getString()))) {\n+            newArgList.addChildToBack(IR.name(arg.getString()));\n+          }\n+        }\n+        function.replaceChild(argList, newArgList);\n+        compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}