{
    "patch": "Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\nif (candidate != null) {\n    Class<?> fieldType = field.getType();\n    Class<?> candidateType = candidate.getClass();\n\n    if (fieldType.isArray() && candidateType.isArray()) {\n        if (fieldType.getComponentType().isAssignableFrom(candidateType.getComponentType())) {\n            field.setAccessible(true);\n            try {\n                field.set(fieldInstance, candidate);\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    } else if (fieldType.isAssignableFrom(candidateType)) {\n        field.setAccessible(true);\n        try {\n            field.set(fieldInstance, candidate);\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n    } else {\n        throw new IllegalArgumentException(String.format(\"Cannot inject %s into %s field %s. Incompatible types: %s and %s\",\n                candidate, awaitingInjectionClazz.getSimpleName(), field.getName(),\n                candidateType.getSimpleName(), fieldType.getSimpleName()));\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..e684471dc 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,36 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+if (candidate != null) {\n+    Class<?> fieldType = field.getType();\n+    Class<?> candidateType = candidate.getClass();\n+\n+    if (fieldType.isArray() && candidateType.isArray()) {\n+        if (fieldType.getComponentType().isAssignableFrom(candidateType.getComponentType())) {\n+            field.setAccessible(true);\n+            try {\n+                field.set(fieldInstance, candidate);\n+            } catch (IllegalAccessException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    } else if (fieldType.isAssignableFrom(candidateType)) {\n+        field.setAccessible(true);\n+        try {\n+            field.set(fieldInstance, candidate);\n+        } catch (IllegalAccessException e) {\n+            e.printStackTrace();\n+        }\n+    } else {\n+        throw new IllegalArgumentException(String.format(\"Cannot inject %s into %s field %s. Incompatible types: %s and %s\",\n+                candidate, awaitingInjectionClazz.getSimpleName(), field.getName(),\n+                candidateType.getSimpleName(), fieldType.getSimpleName()));\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "java.lang.IllegalArgumentException: Cannot inject org.mockito.internal.configuration.injection.FinalMockCandidateFilter$1@156cfd3b into Tested field dependency. Incompatible types: and Dependency",
    "test_result": "FAIL"
}