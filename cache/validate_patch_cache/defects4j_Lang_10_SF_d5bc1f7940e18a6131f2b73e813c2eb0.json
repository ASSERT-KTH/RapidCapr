{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite = false;\n    StringBuilder eraRegex = null;\n\n    for (int i = 0; i < value.length(); ++i) {\n        char c = value.charAt(i);\n\n        if (Character.isWhitespace(c)) {\n            if (!wasWhite) {\n                wasWhite = true;\n                regex.append(\"\\\\s*+\");\n            }\n            continue;\n        }\n\n        wasWhite = false;\n\n        switch (c) {\n        case '\\'': {\n            if (unquote) {\n                if (++i == value.length()) {\n                    return regex;\n                }\n                c = value.charAt(i);\n            } else if (i == value.length() - 1) {\n                regex.append(\"\\\\'\");\n                return regex;\n            }\n            break;\n        }\n        case '[':\n        case ']':\n        case '(':\n        case ')':\n        case '{':\n        case '}':\n        case '\\\\':\n        case '|':\n        case '?':\n        case '*':\n        case '+':\n        case '^':\n        case '$':\n        case '.':\n            regex.append('\\\\');\n            break;\n        case 'G': {\n            if (i + 3 < value.length() && value.substring(i, i + 4).equals(\"GGGG\")) {\n                if (eraRegex == null) {\n                    eraRegex = new StringBuilder();\n                }\n                eraRegex.append(\"(AD|BC)\");\n                i = i + 3;\n            } else if (i + 1 < value.length() && value.substring(i, i + 2).equals(\"G\")) {\n                if (eraRegex == null) {\n                    eraRegex = new StringBuilder();\n                }\n                eraRegex.append(\"(AD|BC|\u043f\u0440\\\\.? \u043d\\\\.? ?\u0435\\\\.\\\\?|\u043d\\\\.? ?\u0435\\\\.?)\");\n                i = i + 1;\n            } else {\n                regex.append(c);\n            }\n            break;\n        }\n        default:\n            regex.append(c);\n            break;\n        }\n    }\n\n    if (wasWhite) {\n        regex.append(\"\\\\s*\");\n    }\n\n    if (eraRegex != null) {\n        regex.insert(0, eraRegex.toString());\n    }\n\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..60af1a05 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,48 +300,87 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite = false;\n+    StringBuilder eraRegex = null;\n+\n+    for (int i = 0; i < value.length(); ++i) {\n+        char c = value.charAt(i);\n+\n+        if (Character.isWhitespace(c)) {\n+            if (!wasWhite) {\n+                wasWhite = true;\n+                regex.append(\"\\\\s*+\");\n+            }\n+            continue;\n+        }\n+\n+        wasWhite = false;\n+\n+        switch (c) {\n+        case '\\'': {\n+            if (unquote) {\n+                if (++i == value.length()) {\n+                    return regex;\n                 }\n-                continue;\n+                c = value.charAt(i);\n+            } else if (i == value.length() - 1) {\n+                regex.append(\"\\\\'\");\n+                return regex;\n             }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n+            break;\n+        }\n+        case '[':\n+        case ']':\n+        case '(':\n+        case ')':\n+        case '{':\n+        case '}':\n+        case '\\\\':\n+        case '|':\n+        case '?':\n+        case '*':\n+        case '+':\n+        case '^':\n+        case '$':\n+        case '.':\n+            regex.append('\\\\');\n+            break;\n+        case 'G': {\n+            if (i + 3 < value.length() && value.substring(i, i + 4).equals(\"GGGG\")) {\n+                if (eraRegex == null) {\n+                    eraRegex = new StringBuilder();\n                 }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n+                eraRegex.append(\"(AD|BC)\");\n+                i = i + 3;\n+            } else if (i + 1 < value.length() && value.substring(i, i + 2).equals(\"G\")) {\n+                if (eraRegex == null) {\n+                    eraRegex = new StringBuilder();\n+                }\n+                eraRegex.append(\"(AD|BC|\u043f\u0440\\\\.? \u043d\\\\.? ?\u0435\\\\.\\\\?|\u043d\\\\.? ?\u0435\\\\.?)\");\n+                i = i + 1;\n+            } else {\n+                regex.append(c);\n             }\n+            break;\n+        }\n+        default:\n             regex.append(c);\n+            break;\n         }\n-        return regex;\n     }\n \n+    if (wasWhite) {\n+        regex.append(\"\\\\s*\");\n+    }\n+\n+    if (eraRegex != null) {\n+        regex.insert(0, eraRegex.toString());\n+    }\n+\n+    return regex;\n+}\n+\n     /**\n      * A class to store Key / Value pairs\n      */",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}