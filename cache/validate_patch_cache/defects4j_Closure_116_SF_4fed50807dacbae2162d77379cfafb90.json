{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // Functions called via 'call' and 'apply' have a this-object as the first parameter, but this is not part of the\n  // called function's parameter list.\n  int nParams = fnNode.isArrowFunction() ? 1 : NodeUtil.getFunctionParameters(fnNode).getChildCount();\n  boolean isVarArgs = NodeUtil.isVarArgsFunction(fnNode);\n  boolean hasSpread = false;\n  if (!callNode.getFirstChild().isName()) {\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      // TODO(johnlenz): Support replace this with a value.\n      if (cArg == null || !cArg.isThis()) {\n        return CanInlineResult.NO;\n      }\n      cArg = cArg.getNext();\n    } else {\n      // \".apply\" call should be filtered before this.\n      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      if (cArg != null && cArg.getNext() != null\n          && NodeUtil.isSpreadExpression(cArg.getNext())) {\n        hasSpread = true;\n      } else if (nParams > 0 && !isVarArgs && !hasSpread) {\n        // apply-like called with wrong number of parameters\n        return CanInlineResult.NO;\n      }\n    }\n  }\n\n  int paramIndex = 0;\n  int argIndex = 1;\n  for (; cArg != null || paramIndex < nParams; ++paramIndex, ++argIndex) {\n    Node fnParam = null;\n    boolean shouldSkipNextNode = false;\n\n    if (paramIndex < nParams) {\n      fnParam = NodeUtil.getFunctionParameters(fnNode).getChildAt(paramIndex);\n    } else if (isVarArgs) {\n      Node lastParam = NodeUtil.getFunctionParameters(fnNode).getLastChild();\n      JSDocInfo info = NodeUtil.getBestJSDocInfo(lastParam);\n      // The number of elements we _need_ to accept is the difference between the number of params and the number\n      // of args we scanned so far.\n      int delta = nParams - argIndex;\n      if (hasSpread) {\n        // We can safely accept as many args as we see.\n        delta = Integer.MAX_VALUE;\n      }\n      if (info != null && info.isVarArgs()) {\n        JSType varArgType = info.getType();\n        // Compute the number of _named_ parameters before the varargs.\n        int namedCount = nParams - 1;\n        checkArgument(namedCount >= 0);\n        if (varArgType != null) {\n          ObjectType otype = ObjectType.cast(varArgType.restrictByNotNullOrUndefined().autobox());\n          if (otype == null || !otype.hasProperty(LENGTH_PROP, false)) {\n            throw new IllegalStateException(\"failed to get length of vararg type: \" + varArgType);\n          }\n          int varargsCount = JSType.toUint32(otype.getPropertyValue(LENGTH_PROP));\n\n          // If there's a mismatch, it's an error case except if the number of required args is exhausted and\n          // no more parameters are left.\n          boolean varargsTypeMismatch = delta < varargsCount || (delta > varargsCount && namedCount > 0);\n          if (varargsTypeMismatch) {\n            return CanInlineResult.NO;\n          }\n          // If there's exactly one varargs of an array type, it's accepted without verification.\n          if (varargsCount == 1 &&\n              // check if it is a well-typed ARRAYLIKE\n              (otype.hasProperty(\"slice\", false) || varArgType.equals(getNativeType(ARRAYLIKE_TYPE)))) {\n            Node typeAnno = Node.newString(Token.STRING, \"ArrayLike\");\n            typeAnno.putProp(Node.ORIGINALNAME_PROP, \"ArrayLike\");\n            JSDocInfo.Builder builder = JSDocInfo.builder().recordType(typeAnno);\n            lastParam.setJSDocInfo(builder.build());\n            lastParam.setOptionalArg(true);\n            shouldSkipNextNode = true;\n          }\n        } else {\n          if (delta > 0) {\n            return CanInlineResult.NO;\n          }\n          // If there's no information, accept whatever's at this spot so long as we're not supposed to fail.\n          // NB: ordinarly we'd check if the varargs are restricted to \"undefined or null\", but we have no easy\n          // way to check that at this point.\n        }\n      }\n    }\n\n    if (shouldSkipNextNode) {\n      continue;\n    }\n\n    if (fnParam != null) {\n      if (cArg == null && !fnParam.isDefaultValue()) {\n        // not enough arguments, and without a default value\n        return CanInlineResult.NO;\n      } else if (cArg != null) {\n        // Check for arguments that are evaluated more than once.\n        // Note: Unlike block inlining, there it is _not_ possible that a parameter reference will be in a loop.\n        if (NodeUtil.mayEffectMutableState(cArg, compiler)\n            && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n          return CanInlineResult.NO;\n        }\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          Node fn = NodeUtil.getEnclosingFunction(callNode);\n          if (fn == null || !isInliningSafe(callNode, fn)) {\n            return CanInlineResult.NO;\n          }\n        }\n        cArg = cArg.getNext();\n      }\n    } else if (cArg != null && !hasSpread) {\n      // too many arguments\n      return CanInlineResult.NO;\n    } else if (hasSpread) {\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        Node fn = NodeUtil.getEnclosingFunction(callNode);\n        if (fn == null || !isInliningSafe(callNode, fn)) {\n          return CanInlineResult.NO;\n        }\n      }\n      cArg = cArg.getNext();\n    }\n  }\n\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..d8ca8acd 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,68 +686,139 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n-\n-    Node block = fnNode.getLastChild();\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n+  Node block = fnNode.getLastChild();\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n+  Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+  // Functions called via 'call' and 'apply' have a this-object as the first parameter, but this is not part of the\n+  // called function's parameter list.\n+  int nParams = fnNode.isArrowFunction() ? 1 : NodeUtil.getFunctionParameters(fnNode).getChildCount();\n+  boolean isVarArgs = NodeUtil.isVarArgsFunction(fnNode);\n+  boolean hasSpread = false;\n+  if (!callNode.getFirstChild().isName()) {\n+    if (NodeUtil.isFunctionObjectCall(callNode)) {\n+      // TODO(johnlenz): Support replace this with a value.\n+      if (cArg == null || !cArg.isThis()) {\n+        return CanInlineResult.NO;\n+      }\n+      cArg = cArg.getNext();\n+    } else {\n+      // \".apply\" call should be filtered before this.\n+      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+      if (cArg != null && cArg.getNext() != null\n+          && NodeUtil.isSpreadExpression(cArg.getNext())) {\n+        hasSpread = true;\n+      } else if (nParams > 0 && !isVarArgs && !hasSpread) {\n+        // apply-like called with wrong number of parameters\n+        return CanInlineResult.NO;\n       }\n     }\n+  }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n+  int paramIndex = 0;\n+  int argIndex = 1;\n+  for (; cArg != null || paramIndex < nParams; ++paramIndex, ++argIndex) {\n+    Node fnParam = null;\n+    boolean shouldSkipNextNode = false;\n+\n+    if (paramIndex < nParams) {\n+      fnParam = NodeUtil.getFunctionParameters(fnNode).getChildAt(paramIndex);\n+    } else if (isVarArgs) {\n+      Node lastParam = NodeUtil.getFunctionParameters(fnNode).getLastChild();\n+      JSDocInfo info = NodeUtil.getBestJSDocInfo(lastParam);\n+      // The number of elements we _need_ to accept is the difference between the number of params and the number\n+      // of args we scanned so far.\n+      int delta = nParams - argIndex;\n+      if (hasSpread) {\n+        // We can safely accept as many args as we see.\n+        delta = Integer.MAX_VALUE;\n+      }\n+      if (info != null && info.isVarArgs()) {\n+        JSType varArgType = info.getType();\n+        // Compute the number of _named_ parameters before the varargs.\n+        int namedCount = nParams - 1;\n+        checkArgument(namedCount >= 0);\n+        if (varArgType != null) {\n+          ObjectType otype = ObjectType.cast(varArgType.restrictByNotNullOrUndefined().autobox());\n+          if (otype == null || !otype.hasProperty(LENGTH_PROP, false)) {\n+            throw new IllegalStateException(\"failed to get length of vararg type: \" + varArgType);\n+          }\n+          int varargsCount = JSType.toUint32(otype.getPropertyValue(LENGTH_PROP));\n \n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+          // If there's a mismatch, it's an error case except if the number of required args is exhausted and\n+          // no more parameters are left.\n+          boolean varargsTypeMismatch = delta < varargsCount || (delta > varargsCount && namedCount > 0);\n+          if (varargsTypeMismatch) {\n+            return CanInlineResult.NO;\n+          }\n+          // If there's exactly one varargs of an array type, it's accepted without verification.\n+          if (varargsCount == 1 &&\n+              // check if it is a well-typed ARRAYLIKE\n+              (otype.hasProperty(\"slice\", false) || varArgType.equals(getNativeType(ARRAYLIKE_TYPE)))) {\n+            Node typeAnno = Node.newString(Token.STRING, \"ArrayLike\");\n+            typeAnno.putProp(Node.ORIGINALNAME_PROP, \"ArrayLike\");\n+            JSDocInfo.Builder builder = JSDocInfo.builder().recordType(typeAnno);\n+            lastParam.setJSDocInfo(builder.build());\n+            lastParam.setOptionalArg(true);\n+            shouldSkipNextNode = true;\n+          }\n+        } else {\n+          if (delta > 0) {\n             return CanInlineResult.NO;\n           }\n+          // If there's no information, accept whatever's at this spot so long as we're not supposed to fail.\n+          // NB: ordinarly we'd check if the varargs are restricted to \"undefined or null\", but we have no easy\n+          // way to check that at this point.\n         }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n       }\n+    }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+    if (shouldSkipNextNode) {\n+      continue;\n+    }\n+\n+    if (fnParam != null) {\n+      if (cArg == null && !fnParam.isDefaultValue()) {\n+        // not enough arguments, and without a default value\n+        return CanInlineResult.NO;\n+      } else if (cArg != null) {\n+        // Check for arguments that are evaluated more than once.\n+        // Note: Unlike block inlining, there it is _not_ possible that a parameter reference will be in a loop.\n+        if (NodeUtil.mayEffectMutableState(cArg, compiler)\n+            && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n           return CanInlineResult.NO;\n         }\n+        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+          Node fn = NodeUtil.getEnclosingFunction(callNode);\n+          if (fn == null || !isInliningSafe(callNode, fn)) {\n+            return CanInlineResult.NO;\n+          }\n+        }\n         cArg = cArg.getNext();\n       }\n+    } else if (cArg != null && !hasSpread) {\n+      // too many arguments\n+      return CanInlineResult.NO;\n+    } else if (hasSpread) {\n+      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+        Node fn = NodeUtil.getEnclosingFunction(callNode);\n+        if (fn == null || !isInliningSafe(callNode, fn)) {\n+          return CanInlineResult.NO;\n+        }\n+      }\n+      cArg = cArg.getNext();\n     }\n-\n-    return CanInlineResult.YES;\n   }\n \n+  return CanInlineResult.YES;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}