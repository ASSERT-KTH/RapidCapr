{
    "patch": "public String fixCode(String input) {\n    int idx = input.indexOf(\"for(\");\n    if (idx == -1) {\n        return input;\n    }\n\n    int startIdx = input.indexOf(\"[\", idx);\n    int endIdx = input.indexOf(\"]\", startIdx);\n\n    StringBuilder sb = new StringBuilder(input);\n    sb.setCharAt(startIdx + 1, '(');\n    sb.setCharAt(endIdx - 1, ')');\n\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..28ece76a 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,21 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String input) {\n+    int idx = input.indexOf(\"for(\");\n+    if (idx == -1) {\n+        return input;\n+    }\n+\n+    int startIdx = input.indexOf(\"[\", idx);\n+    int endIdx = input.indexOf(\"]\", startIdx);\n+\n+    StringBuilder sb = new StringBuilder(input);\n+    sb.setCharAt(startIdx + 1, '(');\n+    sb.setCharAt(endIdx - 1, ')');\n+\n+    return sb.toString();\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}