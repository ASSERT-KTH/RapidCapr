{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node parameter = null;\n  Node argument = null;\n  boolean varArgs = functionType.isVarArgs();\n\n  while (parameters.hasNext()) {\n    parameter = parameters.next();\n    if (!arguments.hasNext()) {\n      if (varArgs) {\n        return;\n      }\n      // Report an error if there are not enough arguments\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(ordinal), String.valueOf(functionType.getMinArguments()),\n              functionType.getMaxArguments() != Integer.MAX_VALUE ?\n              \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n      return;\n    }\n    argument = arguments.next();\n    ordinal++;\n\n    if (parameters.hasNext() || varArgs || arguments.hasNext()) {\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    } else {\n      // Report an error if the argument list is too long for a non-varargs\n      // function\n      int numArgs = call.getChildCount() - 1;\n      int maxArgs = functionType.getMaxArguments();\n      if (numArgs > maxArgs && maxArgs != -1) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n                validator.getReadableJSTypeName(call.getFirstChild(), false),\n                String.valueOf(numArgs), String.valueOf(functionType.getMinArguments()),\n                \" and no more than \" + maxArgs + \" argument(s)\");\n      } else {\n        // No error found\n        validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), getJSType(parameter), call, ordinal);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..3b2de1ba 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,54 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  int ordinal = 0;\n+  Node parameter = null;\n+  Node argument = null;\n+  boolean varArgs = functionType.isVarArgs();\n+\n+  while (parameters.hasNext()) {\n+    parameter = parameters.next();\n+    if (!arguments.hasNext()) {\n+      if (varArgs) {\n+        return;\n+      }\n+      // Report an error if there are not enough arguments\n+      report(t, call, WRONG_ARGUMENT_COUNT,\n+              validator.getReadableJSTypeName(call.getFirstChild(), false),\n+              String.valueOf(ordinal), String.valueOf(functionType.getMinArguments()),\n+              functionType.getMaxArguments() != Integer.MAX_VALUE ?\n+              \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n+      return;\n+    }\n+    argument = arguments.next();\n+    ordinal++;\n \n+    if (parameters.hasNext() || varArgs || arguments.hasNext()) {\n       validator.expectArgumentMatchesParameter(t, argument,\n           getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n-\n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    } else {\n+      // Report an error if the argument list is too long for a non-varargs\n+      // function\n+      int numArgs = call.getChildCount() - 1;\n+      int maxArgs = functionType.getMaxArguments();\n+      if (numArgs > maxArgs && maxArgs != -1) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+                validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                String.valueOf(numArgs), String.valueOf(functionType.getMinArguments()),\n+                \" and no more than \" + maxArgs + \" argument(s)\");\n+      } else {\n+        // No error found\n+        validator.expectArgumentMatchesParameter(t, argument,\n+            getJSType(argument), getJSType(parameter), call, ordinal);\n+      }\n     }\n   }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}