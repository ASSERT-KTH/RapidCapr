{
    "patch": "// Maybe STRING, GET, SET\nTokenType childTokenType = child.getToken().getTokenType();\nif (childTokenType == STRING) {\n  // We should never see a mix of numbers and strings.\n  String name = child.getString();\n  T type = typeSystem.getType(getScope(), n, name);\n\n  Property prop = getProperty(name);\n  if (!prop.scheduleRenaming(child,\n       processProperty(t, prop, type, null))) {\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(\n          t.getSourceName(), child, propertiesToErrorFor.get(name),\n          Warnings.INVALIDATION, name,\n          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n    }\n  }\n} else {\n  String errorMsg =\n      \"Object literals should only have string keys for properties, but saw property with \" +\n      childTokenType.toString() + \" key\";\n  compiler.report(\n      JSError.make(t.getSourceName(), child, IRV_USELESS_CODE_ERROR, errorMsg));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..b44ae6c2 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,30 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+// Maybe STRING, GET, SET\n+TokenType childTokenType = child.getToken().getTokenType();\n+if (childTokenType == STRING) {\n+  // We should never see a mix of numbers and strings.\n+  String name = child.getString();\n+  T type = typeSystem.getType(getScope(), n, name);\n+\n+  Property prop = getProperty(name);\n+  if (!prop.scheduleRenaming(child,\n+       processProperty(t, prop, type, null))) {\n+    if (propertiesToErrorFor.containsKey(name)) {\n+      compiler.report(JSError.make(\n+          t.getSourceName(), child, propertiesToErrorFor.get(name),\n+          Warnings.INVALIDATION, name,\n+          (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+    }\n+  }\n+} else {\n+  String errorMsg =\n+      \"Object literals should only have string keys for properties, but saw property with \" +\n+      childTokenType.toString() + \" key\";\n+  compiler.report(\n+      JSError.make(t.getSourceName(), child, IRV_USELESS_CODE_ERROR, errorMsg));\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}