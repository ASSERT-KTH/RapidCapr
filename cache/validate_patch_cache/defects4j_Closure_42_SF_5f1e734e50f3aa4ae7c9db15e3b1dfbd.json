{
    "patch": "public class TransformDispatcher extends NodeVisitor<AstNode> {\n\n    private final AstRoot root;\n    private final SourceInfo sourceInfo;\n    private final CompilerEnvirons compilerEnv;\n    private final ErrorReporter errorReporter;\n\n    private Deque<Scope> scopeStack = new ArrayDeque<>();\n\n    /**\n     * Create a new instance of the transform dispatcher.\n     *\n     * @param root           root of the AST\n     * @param sourceInfo     source info for the AST\n     * @param compilerEnv    compiler environs for the AST\n     * @param errorReporter error reporter for the AST\n     */\n    public TransformDispatcher(\n            AstRoot root,\n            SourceInfo sourceInfo,\n            CompilerEnvirons compilerEnv,\n            ErrorReporter errorReporter) {\n        this.root = root;\n        this.sourceInfo = sourceInfo;\n        this.compilerEnv = compilerEnv;\n        this.errorReporter = errorReporter;\n    }\n\n    /**\n     * Determines whether a given statement is a directive.\n     *\n     * @param n the statement node to check\n     * @return true if the statement is a directive, false otherwise\n     */\n    private boolean isDirective(Node n) {\n        if (n == null) {\n            return false;\n        }\n        int nType = n.getType();\n        return nType == Token.EXPR_RESULT && n.getFirstChild().isString()\n                && ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n    }\n\n    /**\n     * Pushes a scope onto the stack.\n     *\n     * @param scope the scope to push\n     */\n    private void pushScope(Scope scope) {\n        scopeStack.push(scope);\n    }\n\n    /**\n     * Pops a scope off the stack.\n     */\n    private void popScope() {\n        scopeStack.pop();\n    }\n\n    /**\n     * Creates a temporary variable node.\n     *\n     * @return the newly created temporary variable node\n     */\n    private Node createTempVar() {\n        return scopeStack.peek().createTempNode();\n    }\n\n    @Override\n    public AstNode visit(AstNode node) {\n        if (node == null) {\n            return null;\n        }\n        if (node instanceof ExpressionStatement) {\n            return processExpressionStatement((ExpressionStatement) node);\n        } else if (node instanceof ForInLoop) {\n            return processForInLoop((ForInLoop) node);\n        }\n        return super.visit(node);\n    }\n\n    /**\n     * Processes a for-in loop.\n     *\n     * @param loopNode the for-in loop node\n     * @return the processed for-in loop node\n     */\n    private AstNode processForInLoop(ForInLoop loopNode) {\n        AstNode loopVar = visit(loopNode.getIterator());\n        AstNode iteratedObj = visit(loopNode.getIteratedObject());\n        Scope loopScope = createScopeNode(Scope.FOR_LOOP, loopNode);\n        pushScope(loopScope);\n        // Generate a temporary variable to hold the result of \"iterate.getprop(lenProp)\".\n        Node tempVar = createTempVar();\n        Node getProp = createPropertyGet(iteratedObj, \"length\");\n        Node init = createAssign(tempVar, getProp);\n        Node test = createIn(init.getLastChild(), iteratedObj);\n        loopScope.addChildToFront(init);\n        AstNode body = visitOrIncrement(loopNode.getBody());\n        loopScope.addChildrenToBack(\n                new Node(Token.FOR, loopVar, tempVar, test, body).copyInformationFrom(loopNode));\n        loopScope.getEnclosing().addChildToFront(loopScope);\n        popScope();\n        return loopScope;\n    }\n\n    /**\n     * Processes an expression statement.\n     *\n     * @param statementNode the expression statement node\n     * @return the processed expression statement node\n     */\n    private AstNode processExpressionStatement(ExpressionStatement statementNode) {\n        Node expression = visit(statementNode.getExpression());\n\n        if (isDirective(expression)) {\n            return newNode(Token.EXPR_RESULT, expression)\n                    .copyInformationFrom(expression);\n        }\n\n        return new Node(Token.EXPR_RESULT, expression);\n    }\n\n    /**\n     * Creates a new scope node.\n     *\n     * @param type       the type of scope node to create\n     * @param enclosing the enclosing scope node\n     * @return the newly created scope node\n     */\n    private Scope createScopeNode(int type, Scope enclosing) {\n        Scope node = new Scope();\n        node.setType(type);\n        node.setEnclosing(enclosing);\n        return node;\n    }\n\n    /**\n     * Creates a property get node.\n     *\n     * @param target the target node\n     * @param prop   the property to get\n     * @return the newly created property get node\n     */\n    private Node createPropertyGet(Node target, String prop) {\n        return new Node(Token.GETPROP, target, new Node(Token.STRING, prop));\n    }\n\n    /**\n     * Creates an assignment node.\n     *\n     * @param lhs the left hand side of the assignment\n     * @param rhs the right hand side of the assignment\n     * @return the newly created assignment node\n     */\n    private Node createAssign(Node lhs, Node rhs) {\n        return new Node(Token.ASSIGN, lhs, rhs);\n    }\n\n    /**\n     * Creates a 'in' node.\n     *\n     * @param lhs the left hand side of the 'in' expression\n     * @param rhs the right hand side of the 'in' expression\n     * @return the newly created 'in' node\n     */\n    private Node createIn(Node lhs, Node rhs) {\n        return new Node(Token.IN, lhs, rhs);\n    }\n\n    /**\n     * Visits a node if it is an AstNode.\n     *\n     * @param node the node to visit\n     * @return the visited node, or null if the node is not an AstNode\n     */\n    private AstNode visitOrIncrement(Node node) {\n        if (node instanceof AstNode) {\n            return visit((AstNode) node);\n        } else if (node instanceof IncrementDecrement) {\n            return (AstNode) node;\n        }\n        return null;\n    }\n\n    /**\n     * Transforms a token type.\n     *\n     * @param type the type to transform\n     * @return the transformed token type\n     */\n    private int transformTokenType(int type) {\n        switch (type) {\n            case Token.CONST:\n            case Token.LET:\n                return Token.VAR;\n            default:\n                return type;\n        }\n    }\n\n    /**\n     * Creates a new node.\n     *\n     * @param type the type of the node to create\n     * @param args the arguments to add to the node\n     * @return the newly created node\n     */\n    private Node newNode(int type, Node... args) {\n        Node node = new Node(type);\n        for (Node arg : args) {\n            if (arg != null) {\n                node.addChildToBack(arg);\n            }\n        }\n        return node;\n    }\n\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..8a42edc2 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,107 +473,226 @@ class IRFactory {\n       }\n     }\n \n+public class TransformDispatcher extends NodeVisitor<AstNode> {\n+\n+    private final AstRoot root;\n+    private final SourceInfo sourceInfo;\n+    private final CompilerEnvirons compilerEnv;\n+    private final ErrorReporter errorReporter;\n+\n+    private Deque<Scope> scopeStack = new ArrayDeque<>();\n+\n+    /**\n+     * Create a new instance of the transform dispatcher.\n+     *\n+     * @param root           root of the AST\n+     * @param sourceInfo     source info for the AST\n+     * @param compilerEnv    compiler environs for the AST\n+     * @param errorReporter error reporter for the AST\n+     */\n+    public TransformDispatcher(\n+            AstRoot root,\n+            SourceInfo sourceInfo,\n+            CompilerEnvirons compilerEnv,\n+            ErrorReporter errorReporter) {\n+        this.root = root;\n+        this.sourceInfo = sourceInfo;\n+        this.compilerEnv = compilerEnv;\n+        this.errorReporter = errorReporter;\n+    }\n+\n+    /**\n+     * Determines whether a given statement is a directive.\n+     *\n+     * @param n the statement node to check\n+     * @return true if the statement is a directive, false otherwise\n+     */\n     private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+        if (n == null) {\n+            return false;\n+        }\n+        int nType = n.getType();\n+        return nType == Token.EXPR_RESULT && n.getFirstChild().isString()\n+                && ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+    }\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+    /**\n+     * Pushes a scope onto the stack.\n+     *\n+     * @param scope the scope to push\n+     */\n+    private void pushScope(Scope scope) {\n+        scopeStack.push(scope);\n     }\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n+    /**\n+     * Pops a scope off the stack.\n+     */\n+    private void popScope() {\n+        scopeStack.pop();\n     }\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+    /**\n+     * Creates a temporary variable node.\n+     *\n+     * @return the newly created temporary variable node\n+     */\n+    private Node createTempVar() {\n+        return scopeStack.peek().createTempNode();\n     }\n \n     @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n+    public AstNode visit(AstNode node) {\n+        if (node == null) {\n+            return null;\n+        }\n+        if (node instanceof ExpressionStatement) {\n+            return processExpressionStatement((ExpressionStatement) node);\n+        } else if (node instanceof ForInLoop) {\n+            return processForInLoop((ForInLoop) node);\n+        }\n+        return super.visit(node);\n     }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+    /**\n+     * Processes a for-in loop.\n+     *\n+     * @param loopNode the for-in loop node\n+     * @return the processed for-in loop node\n+     */\n+    private AstNode processForInLoop(ForInLoop loopNode) {\n+        AstNode loopVar = visit(loopNode.getIterator());\n+        AstNode iteratedObj = visit(loopNode.getIteratedObject());\n+        Scope loopScope = createScopeNode(Scope.FOR_LOOP, loopNode);\n+        pushScope(loopScope);\n+        // Generate a temporary variable to hold the result of \"iterate.getprop(lenProp)\".\n+        Node tempVar = createTempVar();\n+        Node getProp = createPropertyGet(iteratedObj, \"length\");\n+        Node init = createAssign(tempVar, getProp);\n+        Node test = createIn(init.getLastChild(), iteratedObj);\n+        loopScope.addChildToFront(init);\n+        AstNode body = visitOrIncrement(loopNode.getBody());\n+        loopScope.addChildrenToBack(\n+                new Node(Token.FOR, loopVar, tempVar, test, body).copyInformationFrom(loopNode));\n+        loopScope.getEnclosing().addChildToFront(loopScope);\n+        popScope();\n+        return loopScope;\n     }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+    /**\n+     * Processes an expression statement.\n+     *\n+     * @param statementNode the expression statement node\n+     * @return the processed expression statement node\n+     */\n+    private AstNode processExpressionStatement(ExpressionStatement statementNode) {\n+        Node expression = visit(statementNode.getExpression());\n+\n+        if (isDirective(expression)) {\n+            return newNode(Token.EXPR_RESULT, expression)\n+                    .copyInformationFrom(expression);\n+        }\n+\n+        return new Node(Token.EXPR_RESULT, expression);\n     }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+    /**\n+     * Creates a new scope node.\n+     *\n+     * @param type       the type of scope node to create\n+     * @param enclosing the enclosing scope node\n+     * @return the newly created scope node\n+     */\n+    private Scope createScopeNode(int type, Scope enclosing) {\n+        Scope node = new Scope();\n+        node.setType(type);\n+        node.setEnclosing(enclosing);\n+        return node;\n     }\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+    /**\n+     * Creates a property get node.\n+     *\n+     * @param target the target node\n+     * @param prop   the property to get\n+     * @return the newly created property get node\n+     */\n+    private Node createPropertyGet(Node target, String prop) {\n+        return new Node(Token.GETPROP, target, new Node(Token.STRING, prop));\n     }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+    /**\n+     * Creates an assignment node.\n+     *\n+     * @param lhs the left hand side of the assignment\n+     * @param rhs the right hand side of the assignment\n+     * @return the newly created assignment node\n+     */\n+    private Node createAssign(Node lhs, Node rhs) {\n+        return new Node(Token.ASSIGN, lhs, rhs);\n     }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+    /**\n+     * Creates a 'in' node.\n+     *\n+     * @param lhs the left hand side of the 'in' expression\n+     * @param rhs the right hand side of the 'in' expression\n+     * @return the newly created 'in' node\n+     */\n+    private Node createIn(Node lhs, Node rhs) {\n+        return new Node(Token.IN, lhs, rhs);\n     }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n+    /**\n+     * Visits a node if it is an AstNode.\n+     *\n+     * @param node the node to visit\n+     * @return the visited node, or null if the node is not an AstNode\n+     */\n+    private AstNode visitOrIncrement(Node node) {\n+        if (node instanceof AstNode) {\n+            return visit((AstNode) node);\n+        } else if (node instanceof IncrementDecrement) {\n+            return (AstNode) node;\n+        }\n+        return null;\n+    }\n \n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+    /**\n+     * Transforms a token type.\n+     *\n+     * @param type the type to transform\n+     * @return the transformed token type\n+     */\n+    private int transformTokenType(int type) {\n+        switch (type) {\n+            case Token.CONST:\n+            case Token.LET:\n+                return Token.VAR;\n+            default:\n+                return type;\n+        }\n     }\n \n+    /**\n+     * Creates a new node.\n+     *\n+     * @param type the type of the node to create\n+     * @param args the arguments to add to the node\n+     * @return the newly created node\n+     */\n+    private Node newNode(int type, Node... args) {\n+        Node node = new Node(type);\n+        for (Node arg : args) {\n+            if (arg != null) {\n+                node.addChildToBack(arg);\n+            }\n+        }\n+        return node;\n+    }\n+\n+}\n+\n     @Override\n     Node processForLoop(ForLoop loopNode) {\n       Node node = newNode(",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}