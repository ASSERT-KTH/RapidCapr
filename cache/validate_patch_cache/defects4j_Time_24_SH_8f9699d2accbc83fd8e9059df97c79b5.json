{
    "patch": "            if (savedFields[i].iField.getType().equals(DateTimeFieldType.year()) &&\n                    savedFields[i].iField.getName().startsWith(\"WK\")) {\n                int weekyear = savedFields[i].get();\n                int year = iChrono.year().get(millis);\n                millis = iChrono.setYear(weekyear, millis);\n                if (iChrono.year().get(millis) <= year - 1) {\n                    millis = iChrono.setYear(year, millis);\n                    // Although strictly speaking the chronology should be re-evaluated,\n                    // recursion is a more effective solution in practice.\n                    return computeMillis(resetFields, text);\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..476d0062 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,17 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (savedFields[i].iField.getType().equals(DateTimeFieldType.year()) &&\n+                    savedFields[i].iField.getName().startsWith(\"WK\")) {\n+                int weekyear = savedFields[i].get();\n+                int year = iChrono.year().get(millis);\n+                millis = iChrono.setYear(weekyear, millis);\n+                if (iChrono.year().get(millis) <= year - 1) {\n+                    millis = iChrono.setYear(year, millis);\n+                    // Although strictly speaking the chronology should be re-evaluated,\n+                    // recursion is a more effective solution in practice.\n+                    return computeMillis(resetFields, text);\n+                }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}