{
    "patch": "import org.apache.commons.math3.linear.CholeskyDecomposition;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealMatrixChangingVisitor;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    final CholeskyDecomposition dec = new CholeskyDecomposition(m, true);\n    final RealMatrix l = dec.getL();\n    l.walkInOptimizedOrder(new RealMatrixChangingVisitor() {\n        public void start(int rows, int columns, int startRow, int endRow,\n                int startColumn, int endColumn) {\n        }\n        public double visit(int row, int column, double value) {\n            return value * Math.sqrt(dec.getDeterminant());\n        }\n        public double end() {\n            return Double.NaN; // ignored\n        }\n    });\n    return l.transpose().multiply(l);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..a76f8e77e 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,24 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+import org.apache.commons.math3.linear.CholeskyDecomposition;\n+import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.linear.RealMatrixChangingVisitor;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final CholeskyDecomposition dec = new CholeskyDecomposition(m, true);\n+    final RealMatrix l = dec.getL();\n+    l.walkInOptimizedOrder(new RealMatrixChangingVisitor() {\n+        public void start(int rows, int columns, int startRow, int endRow,\n+                int startColumn, int endColumn) {\n+        }\n+        public double visit(int row, int column, double value) {\n+            return value * Math.sqrt(dec.getDeterminant());\n+        }\n+        public double end() {\n+            return Double.NaN; // ignored\n+        }\n+    });\n+    return l.transpose().multiply(l);\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}