{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    if(cfgNode instanceof CFGExitNode) {\n        CFGExitNode exitNode = (CFGExitNode) cfgNode;\n        return !exitNode.getExceptionRefs().isEmpty();\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..f9797fe2 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,6 +157,13 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    if(cfgNode instanceof CFGExitNode) {\n+        CFGExitNode exitNode = (CFGExitNode) cfgNode;\n+        return !exitNode.getExceptionRefs().isEmpty();\n+    }\n+    return false;\n+}\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}