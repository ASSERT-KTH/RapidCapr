{
    "patch": "Type[] bounds = typeVariable.getBounds();\nif (bounds.length > 0) {\n    boolean hasValidBound = false;\n    for (Type bound : bounds) {\n        if (isClassOrParameterizedType(bound)) {  // utility method that checks if type is a Class or ParameterizedType\n            registerTypeVariablesOn(bound);\n            hasValidBound = true;\n            break;\n        } else if (bound instanceof TypeVariable) {\n            readTypeVariables((TypeVariable<?>) bound);\n            hasValidBound = true;\n            break;\n        }\n    }\n    if (!hasValidBound) {\n        registerTypeVariablesOn(Object.class);\n    }\n} else {\n    registerTypeVariablesOn(typeVariable);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..d5c6a0a04 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,31 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type[] bounds = typeVariable.getBounds();\n+if (bounds.length > 0) {\n+    boolean hasValidBound = false;\n+    for (Type bound : bounds) {\n+        if (isClassOrParameterizedType(bound)) {  // utility method that checks if type is a Class or ParameterizedType\n+            registerTypeVariablesOn(bound);\n+            hasValidBound = true;\n+            break;\n+        } else if (bound instanceof TypeVariable) {\n+            readTypeVariables((TypeVariable<?>) bound);\n+            hasValidBound = true;\n+            break;\n+        }\n+    }\n+    if (!hasValidBound) {\n+        registerTypeVariablesOn(Object.class);\n+    }\n+} else {\n+    registerTypeVariablesOn(typeVariable);\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}