{
    "patch": "      if (parent.getType() == Token.ASSIGN && parent.getFirstChild().getType() == Token.GETPROP) {\n        Node lhs = parent.getFirstChild().getFirstChild();\n        if (lhs.getType() == Token.THIS) {\n          // Don't traverse functions that are getting lent to a prototype.\n          if (parent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..ebf57ec1 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,14 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent.getType() == Token.ASSIGN && parent.getFirstChild().getType() == Token.GETPROP) {\n+        Node lhs = parent.getFirstChild().getFirstChild();\n+        if (lhs.getType() == Token.THIS) {\n+          // Don't traverse functions that are getting lent to a prototype.\n+          if (parent.getFirstChild().getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}