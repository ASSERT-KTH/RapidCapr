{
    "patch": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                    WhitespaceOption option) {\n  StringBuilder multilineTextBuilder = new StringBuilder();\n  int startLineno = stream.getLineno();\n  int startCharno = stream.getCharno();\n  boolean endsWithNewLine = false;\n\n  String line = stream.getRemainingJSDocLine();\n  if (option != WhitespaceOption.PRESERVE) {\n    line = line.trim();\n  }\n\n  if (!line.isEmpty()) {\n    multilineTextBuilder.append(line);\n    if (multilineTextBuilder.lastIndexOf(\"\\n\") == multilineTextBuilder.length() - 1) {\n      endsWithNewLine = true;\n    }\n  }\n\n  token = next();\n\n  while (true) {\n    switch (token) {\n      case EOL:\n        if (option != WhitespaceOption.SINGLE_LINE) {\n          multilineTextBuilder.append('\\n');\n        }\n\n        // Ensure that we ignore EOL tokens when they occur back-to-back.\n        boolean skipEolToken = false;\n        while (true) {\n          line = stream.getRemainingJSDocLine();\n          if (line == null) {\n            break;\n          } else if (line.trim().isEmpty()) {\n            if (!endsWithNewLine) {\n              multilineTextBuilder.append('\\n');\n            }\n            endsWithNewLine = true;\n          } else {\n            if (option != WhitespaceOption.PRESERVE) {\n              line = line.trim();\n            }\n            if (!line.isEmpty()) {\n              if (!endsWithNewLine) {\n                multilineTextBuilder.append(' ');\n              }\n              multilineTextBuilder.append(line);\n              if (line.endsWith(\"\\n\")) {\n                endsWithNewLine = true;\n              } else {\n                endsWithNewLine = false;\n              }\n            }\n            break;\n          }\n          token = next();\n          skipEolToken = true;\n        }\n        if (skipEolToken) {\n          continue;\n        }\n\n        token = next();\n        break;\n\n      case STAR:\n        int lineno = stream.getLineno();\n        int charno = stream.getCharno() + 1;\n        multilineTextBuilder.append('*');\n        token = next();\n        if (token != null && token != JsDocToken.EOC && token != JsDocToken.EOL) {\n          jsdocBuilder.markText(\"*\", lineno, charno, lineno, charno + 1);\n        }\n        break;\n\n      case EOF:\n      case EOC:\n        String multilineText = multilineTextBuilder.toString();\n        if (option != WhitespaceOption.PRESERVE) {\n          multilineText = multilineText.trim();\n        }\n\n        int endLineno = stream.getLineno();\n        int endCharno = stream.getCharno();\n        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n\n        return new ExtractionInfo(multilineText, token);\n\n      default:\n        if (multilineTextBuilder.length() > 0 && !endsWithNewLine) {\n          multilineTextBuilder.append(' ');\n        }\n        multilineTextBuilder.append(toString(token));\n        endsWithNewLine = false;\n\n        line = stream.getRemainingJSDocLine();\n        if (line != null && !line.isEmpty()) {\n          if (option != WhitespaceOption.PRESERVE) {\n            line = line.trim();\n          }\n          if (!line.isEmpty()) {\n            multilineTextBuilder.append(' ').append(line);\n            if (line.endsWith(\"\\n\")) {\n              endsWithNewLine = true;\n            }\n          }\n        }\n\n        token = next();\n        break;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..acc8d961 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,107 +1326,120 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n-                                                      WhitespaceOption option) {\n-\n-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n-        token == JsDocToken.EOF) {\n-      return new ExtractionInfo(\"\", token);\n-    }\n-\n-    stream.update();\n-    int startLineno = stream.getLineno();\n-    int startCharno = stream.getCharno() + 1;\n-\n-    // Read the content from the first line.\n-    String line = stream.getRemainingJSDocLine();\n-    if (option != WhitespaceOption.PRESERVE) {\n-      line = line.trim();\n+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n+                                                    WhitespaceOption option) {\n+  StringBuilder multilineTextBuilder = new StringBuilder();\n+  int startLineno = stream.getLineno();\n+  int startCharno = stream.getCharno();\n+  boolean endsWithNewLine = false;\n+\n+  String line = stream.getRemainingJSDocLine();\n+  if (option != WhitespaceOption.PRESERVE) {\n+    line = line.trim();\n+  }\n+\n+  if (!line.isEmpty()) {\n+    multilineTextBuilder.append(line);\n+    if (multilineTextBuilder.lastIndexOf(\"\\n\") == multilineTextBuilder.length() - 1) {\n+      endsWithNewLine = true;\n     }\n+  }\n \n-    StringBuilder builder = new StringBuilder();\n-    builder.append(line);\n-\n-    state = State.SEARCHING_ANNOTATION;\n-    token = next();\n-\n-    boolean ignoreStar = false;\n+  token = next();\n \n-    // Track the start of the line to count whitespace that\n-    // the tokenizer skipped. Because this case is rare, it's easier\n-    // to do this here than in the tokenizer.\n+  while (true) {\n+    switch (token) {\n+      case EOL:\n+        if (option != WhitespaceOption.SINGLE_LINE) {\n+          multilineTextBuilder.append('\\n');\n+        }\n \n-    do {\n-      switch (token) {\n-        case STAR:\n-          if (ignoreStar) {\n-            // Mark the position after the star as the new start of the line.\n+        // Ensure that we ignore EOL tokens when they occur back-to-back.\n+        boolean skipEolToken = false;\n+        while (true) {\n+          line = stream.getRemainingJSDocLine();\n+          if (line == null) {\n+            break;\n+          } else if (line.trim().isEmpty()) {\n+            if (!endsWithNewLine) {\n+              multilineTextBuilder.append('\\n');\n+            }\n+            endsWithNewLine = true;\n           } else {\n-            // The star is part of the comment.\n-            if (builder.length() > 0) {\n-              builder.append(' ');\n+            if (option != WhitespaceOption.PRESERVE) {\n+              line = line.trim();\n             }\n-\n-            builder.append('*');\n-          }\n-\n-          token = next();\n-          continue;\n-\n-        case EOL:\n-          if (option != WhitespaceOption.SINGLE_LINE) {\n-            builder.append(\"\\n\");\n+            if (!line.isEmpty()) {\n+              if (!endsWithNewLine) {\n+                multilineTextBuilder.append(' ');\n+              }\n+              multilineTextBuilder.append(line);\n+              if (line.endsWith(\"\\n\")) {\n+                endsWithNewLine = true;\n+              } else {\n+                endsWithNewLine = false;\n+              }\n+            }\n+            break;\n           }\n-\n-          ignoreStar = true;\n           token = next();\n+          skipEolToken = true;\n+        }\n+        if (skipEolToken) {\n           continue;\n+        }\n \n-        default:\n-          ignoreStar = false;\n-          state = State.SEARCHING_ANNOTATION;\n-\n-              // All tokens must be separated by a space.\n-\n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n-            String multilineText = builder.toString();\n-\n-            if (option != WhitespaceOption.PRESERVE) {\n-              multilineText = multilineText.trim();\n-            }\n+        token = next();\n+        break;\n \n-            int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n+      case STAR:\n+        int lineno = stream.getLineno();\n+        int charno = stream.getCharno() + 1;\n+        multilineTextBuilder.append('*');\n+        token = next();\n+        if (token != null && token != JsDocToken.EOC && token != JsDocToken.EOL) {\n+          jsdocBuilder.markText(\"*\", lineno, charno, lineno, charno + 1);\n+        }\n+        break;\n \n-            if (multilineText.length() > 0) {\n-              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n-                  endLineno, endCharno);\n-            }\n+      case EOF:\n+      case EOC:\n+        String multilineText = multilineTextBuilder.toString();\n+        if (option != WhitespaceOption.PRESERVE) {\n+          multilineText = multilineText.trim();\n+        }\n \n-            return new ExtractionInfo(multilineText, token);\n-          }\n+        int endLineno = stream.getLineno();\n+        int endCharno = stream.getCharno();\n+        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n \n-          if (builder.length() > 0) {\n-            builder.append(' ');\n-          }\n-          builder.append(toString(token));\n+        return new ExtractionInfo(multilineText, token);\n \n-          line = stream.getRemainingJSDocLine();\n+      default:\n+        if (multilineTextBuilder.length() > 0 && !endsWithNewLine) {\n+          multilineTextBuilder.append(' ');\n+        }\n+        multilineTextBuilder.append(toString(token));\n+        endsWithNewLine = false;\n \n+        line = stream.getRemainingJSDocLine();\n+        if (line != null && !line.isEmpty()) {\n           if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n+            line = line.trim();\n+          }\n+          if (!line.isEmpty()) {\n+            multilineTextBuilder.append(' ').append(line);\n+            if (line.endsWith(\"\\n\")) {\n+              endsWithNewLine = true;\n+            }\n           }\n+        }\n \n-          builder.append(line);\n-          token = next();\n-      }\n-    } while (true);\n+        token = next();\n+        break;\n+    }\n   }\n+}\n \n \n   /**",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}