{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandler<T> newMockHandler = new MockHandler<>(mock);\n    MockSettingsImpl settings = (MockSettingsImpl) withSettings().defaultAnswer(RETURNS_DEFAULTS);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, settings);\n    if (mock instanceof Factory) {\n        try {\n            // use the Objenesis StdInstantiatorStrategy because CGLIB has some issues with Kotlin classes\n            Objenesis objenesis = new ObjenesisStd(true);\n\n            // create a new instance of the mock using the Objenesis instantiator\n            T newMock = objenesis.newInstance(mock.getClass());\n\n            // initialize the new mock by copying state from the original mock\n            ((Factory) newMock).setCallbacks(((Factory) mock).getCallbacks());\n\n            // set the new mock with the method interceptor filter\n            ((Factory) newMock).setCallback(0, newFilter);\n\n            // reset the mock object reference to the new mock instance\n            Field field = MockUtil.getMockHandler(mock).getClass().getDeclaredField(\"mockSettings\");\n            field.setAccessible(true);\n            field.set(MockUtil.getMockHandler(mock), settings);\n            field = MockUtil.getMockHandler(mock).getClass().getDeclaredField(\"instance\");\n            field.setAccessible(true);\n            field.set(MockUtil.getMockHandler(mock), newMock);\n        } catch (Exception e) {\n            throw new MockitoException(\"Problems initiating spied field \" + mock.getClass(), e);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..7dfc6c823 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,37 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandler<T> newMockHandler = new MockHandler<>(mock);\n+    MockSettingsImpl settings = (MockSettingsImpl) withSettings().defaultAnswer(RETURNS_DEFAULTS);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, settings);\n+    if (mock instanceof Factory) {\n+        try {\n+            // use the Objenesis StdInstantiatorStrategy because CGLIB has some issues with Kotlin classes\n+            Objenesis objenesis = new ObjenesisStd(true);\n+\n+            // create a new instance of the mock using the Objenesis instantiator\n+            T newMock = objenesis.newInstance(mock.getClass());\n+\n+            // initialize the new mock by copying state from the original mock\n+            ((Factory) newMock).setCallbacks(((Factory) mock).getCallbacks());\n+\n+            // set the new mock with the method interceptor filter\n+            ((Factory) newMock).setCallback(0, newFilter);\n+\n+            // reset the mock object reference to the new mock instance\n+            Field field = MockUtil.getMockHandler(mock).getClass().getDeclaredField(\"mockSettings\");\n+            field.setAccessible(true);\n+            field.set(MockUtil.getMockHandler(mock), settings);\n+            field = MockUtil.getMockHandler(mock).getClass().getDeclaredField(\"instance\");\n+            field.setAccessible(true);\n+            field.set(MockUtil.getMockHandler(mock), newMock);\n+        } catch (Exception e) {\n+            throw new MockitoException(\"Problems initiating spied field \" + mock.getClass(), e);\n+        }\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}