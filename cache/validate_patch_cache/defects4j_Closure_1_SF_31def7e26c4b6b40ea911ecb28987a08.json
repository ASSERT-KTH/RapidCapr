{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n  Node function = fnScope.getRootNode();\n\n  Preconditions.checkState(function.isFunction());\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n\n  Node argList = getFunctionArgList(function);\n  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\n  int argCount = 0;\n  for (Node child = argList.getFirstChild(); child != null; child = child.getNext()) {\n    String argName = child.getString();\n    Var var = fnScope.getVar(argName);\n\n    if (var == null || !referenced.contains(var)) {\n      argList.removeChild(child);\n      compiler.reportCodeChange();\n    } else {\n      argCount++;\n    }\n  }\n\n  if (!modifyCallers) {\n    // Restore the proper number of declared arguments to avoid breaking Function.prototype.length\n    if (function.getBooleanProp(Node.FUNCTION_PROPERTY_ARROW_FUNCTION)) {\n      // For arrow functions, update the declaration directly\n      function.putProp(Node.ARROW_FN_HEAD_PARAMS_COUNT, argCount);\n    } else {\n      // For normal functions, add or remove additional unnamed arguments as necessary\n      int expectedArgCount = Math.max(argCount, function.getArity());\n      while (argCount < expectedArgCount) {\n        argList.addChildToFront(IR.name(\"\").srcref(argList).useSourceInfoFrom(argList));\n        argCount++;\n        compiler.reportCodeChange();\n      }\n      while (argCount > expectedArgCount) {\n        argList.removeChildAt(argList.getChildCount() - 1);\n        argCount--;\n        compiler.reportCodeChange();\n      }\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d83568c1 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,54 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n-        }\n-      }\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+  Node function = fnScope.getRootNode();\n+\n+  Preconditions.checkState(function.isFunction());\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+  }\n+\n+  Node argList = getFunctionArgList(function);\n+  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+  int argCount = 0;\n+  for (Node child = argList.getFirstChild(); child != null; child = child.getNext()) {\n+    String argName = child.getString();\n+    Var var = fnScope.getVar(argName);\n+\n+    if (var == null || !referenced.contains(var)) {\n+      argList.removeChild(child);\n+      compiler.reportCodeChange();\n+    } else {\n+      argCount++;\n+    }\n+  }\n+\n+  if (!modifyCallers) {\n+    // Restore the proper number of declared arguments to avoid breaking Function.prototype.length\n+    if (function.getBooleanProp(Node.FUNCTION_PROPERTY_ARROW_FUNCTION)) {\n+      // For arrow functions, update the declaration directly\n+      function.putProp(Node.ARROW_FN_HEAD_PARAMS_COUNT, argCount);\n     } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n+      // For normal functions, add or remove additional unnamed arguments as necessary\n+      int expectedArgCount = Math.max(argCount, function.getArity());\n+      while (argCount < expectedArgCount) {\n+        argList.addChildToFront(IR.name(\"\").srcref(argList).useSourceInfoFrom(argList));\n+        argCount++;\n+        compiler.reportCodeChange();\n+      }\n+      while (argCount > expectedArgCount) {\n+        argList.removeChildAt(argList.getChildCount() - 1);\n+        argCount--;\n+        compiler.reportCodeChange();\n+      }\n     }\n+  } else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n   }\n+}\n \n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}