{
    "patch": "public double integrate(final FirstOrderDifferentialEquations equations, final double t0, final double[] y0,\n           final double t, final double[] y) throws DerivativeException, IntegratorException {\n \n    final double minStep = Math.abs(minStep());\n    final double maxStep = Math.abs(maxStep());\n    final double vecAbsoluteTolerance[] = getVetAbsoluteTolerance();\n    final double scalAbsoluteTolerance = getScalAbsoluteTolerance();\n    sanityChecks(equations, t0, y0, t, y);\n    setEquations(equations);\n    resetEvaluations();\n    final boolean forward = t > t0;\n    if (y != y0) {\n        System.arraycopy(y0, 0, y, 0, y0.length);\n    }\n    final int stages = c.length + 1;\n    final double[][] yDotK = new double[stages][y0.length];\n    final double[] yTmp = new double[y0.length];\n    AbstractStepInterpolator interpolator;\n    if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {\n        final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n        rki.reinitialize(this, yTmp, yDotK, forward);  \n        interpolator = rki;\n    } else {\n        interpolator = new DummyStepInterpolator(yTmp, forward);\n    }\n    interpolator.storeTime(t0);\n    stepStart = t0;\n    double hNew = 0;\n    boolean firstTime = true;\n    boolean lastStep = false;\n    final CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n    for (StepHandler handler : stepHandlers) {\n        handler.reset();\n    }\n \n    while (!lastStep) {\n \n        interpolator.shift();\n        firstTime = firstTime || (steps == 0);\n \n        if (firstTime) {\n            start(stepStart, y, t);\n            interpolator.storeTime(stepStart);\n        }\n \n        stepSize = tryStep(interpolator, equations, stepStart, y, yDotK, stepSize, yTmp, vecAbsoluteTolerance, scalAbsoluteTolerance);\n \n        double  hInt = stepSize;\n        if (! isLastStep()) {\n            if (forward) {\n                if (stepStart + stepSize >= t) {\n                    hInt = t - stepStart;\n                    lastStep = true;\n                }\n            } else {\n                if (stepStart + stepSize <= t) {\n                    hInt = t - stepStart;\n                    lastStep = true;\n                }\n            }\n        }\n \n        final double nextTime     = stepStart + hInt;\n        final boolean needLast   = (isLastStep() || lastStep);\n        interpolator.storeTime(nextTime);\n        if (needLast) {\n            final int savitzkyGolayPoints = interpolator.switchToSavitzkyGolay();\n            System.arraycopy(y, 0, yTmp, 0, y0.length);\n            equations.computeDerivatives(nextTime, y, yDot);\n            interpolator.saveState(nextTime, y, yDot, stepSize);\n            interpolator.switchToInterpolation();\n            interpolator.storeTime(nextTime);\n            interpolate(nextTime, yTmp, interpolator);\n            interpolator.storeTime(stepStart);\n            interpolator.shift();\n            interpolator.storeTime(nextTime);\n            interpolator.setInterpolatedTime(nextTime);\n            for (StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLastStep());\n            }\n            resetInternalState();\n            setSuccess(true);\n            return nextTime;\n        }\n \n        if (! isLastStep()) {\n \n            if (manager.evaluateStep(interpolator)) {\n                final double dt = manager.getEventTime() - stepStart;\n                if (Math.abs(dt) <= minStep) {\n                    loop: for (;;) {\n                        if (Math.abs(hInt) <= minStep) {\n                            throw new NumberIsTooSmallException();\n                        }\n                        final double  scaledH    = 0.5 * hInt;\n                        final double  tryTime    = stepStart + scaledH;\n                        final boolean beforeLast = (tryTime >= t && t > stepStart) || (tryTime <= t && t < stepStart);\n                        hInt = filterStep(scaledH, forward, beforeLast);\n                        for (int j = 0;j < y0.length;++j) {\n                            yTmp[j] = y[j];\n                        }\n                        start(stepStart, y, t);\n                        interpolator.storeTime(stepStart);\n                        stepSize = tryStep(interpolator, equations, stepStart, y, yDotK, hInt, yTmp, vecAbsoluteTolerance, scalAbsoluteTolerance);\n                        if (stepSize == hInt) {\n                            break;\n                        }\n                        hNew = filterStep(hInt * Math.min(maxGrowth, 0.5 * (stepSize / hInt)), forward, false);\n                    }\n                } else {\n                    hNew = filterStep(dt, forward, true);\n                }\n            } else {\n                hNew = stepSize;\n            }\n \n            for (int j = 0;j < y0.length;++j) {\n                y[j] = yTmp[j];\n            }\n            stepStart = manager.getEventTime();",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 6f3e88358..4e15a9272 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -189,174 +189,126 @@ public abstract class EmbeddedRungeKuttaIntegrator\n \n   /** {@inheritDoc} */\n   @Override\n-  public double integrate(final FirstOrderDifferentialEquations equations,\n-                          final double t0, final double[] y0,\n-                          final double t, final double[] y)\n-  throws DerivativeException, IntegratorException {\n-\n+public double integrate(final FirstOrderDifferentialEquations equations, final double t0, final double[] y0,\n+           final double t, final double[] y) throws DerivativeException, IntegratorException {\n+ \n+    final double minStep = Math.abs(minStep());\n+    final double maxStep = Math.abs(maxStep());\n+    final double vecAbsoluteTolerance[] = getVetAbsoluteTolerance();\n+    final double scalAbsoluteTolerance = getScalAbsoluteTolerance();\n     sanityChecks(equations, t0, y0, t, y);\n     setEquations(equations);\n     resetEvaluations();\n     final boolean forward = t > t0;\n-\n-    // create some internal working arrays\n-    final int stages = c.length + 1;\n     if (y != y0) {\n-      System.arraycopy(y0, 0, y, 0, y0.length);\n+        System.arraycopy(y0, 0, y, 0, y0.length);\n     }\n+    final int stages = c.length + 1;\n     final double[][] yDotK = new double[stages][y0.length];\n     final double[] yTmp = new double[y0.length];\n-\n-    // set up an interpolator sharing the integrator arrays\n     AbstractStepInterpolator interpolator;\n     if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {\n-      final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n-      rki.reinitialize(this, yTmp, yDotK, forward);\n-      interpolator = rki;\n+        final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n+        rki.reinitialize(this, yTmp, yDotK, forward);  \n+        interpolator = rki;\n     } else {\n-      interpolator = new DummyStepInterpolator(yTmp, forward);\n+        interpolator = new DummyStepInterpolator(yTmp, forward);\n     }\n     interpolator.storeTime(t0);\n-\n-    // set up integration control objects\n-    stepStart         = t0;\n-    double  hNew      = 0;\n+    stepStart = t0;\n+    double hNew = 0;\n     boolean firstTime = true;\n+    boolean lastStep = false;\n+    final CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n     for (StepHandler handler : stepHandlers) {\n         handler.reset();\n     }\n-    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n-    boolean lastStep = false;\n-\n-    // main integration loop\n+ \n     while (!lastStep) {\n-\n-      interpolator.shift();\n-\n-      double error = 0;\n-      for (boolean loop = true; loop;) {\n-\n-        if (firstTime || !fsal) {\n-          // first stage\n-          computeDerivatives(stepStart, y, yDotK[0]);\n-        }\n-\n+ \n+        interpolator.shift();\n+        firstTime = firstTime || (steps == 0);\n+ \n         if (firstTime) {\n-          final double[] scale;\n-          if (vecAbsoluteTolerance == null) {\n-              scale = new double[y0.length];\n-              java.util.Arrays.fill(scale, scalAbsoluteTolerance);\n+            start(stepStart, y, t);\n+            interpolator.storeTime(stepStart);\n+        }\n+ \n+        stepSize = tryStep(interpolator, equations, stepStart, y, yDotK, stepSize, yTmp, vecAbsoluteTolerance, scalAbsoluteTolerance);\n+ \n+        double  hInt = stepSize;\n+        if (! isLastStep()) {\n+            if (forward) {\n+                if (stepStart + stepSize >= t) {\n+                    hInt = t - stepStart;\n+                    lastStep = true;\n+                }\n             } else {\n-              scale = vecAbsoluteTolerance;\n+                if (stepStart + stepSize <= t) {\n+                    hInt = t - stepStart;\n+                    lastStep = true;\n+                }\n             }\n-          hNew = initializeStep(equations, forward, getOrder(), scale,\n-                                stepStart, y, yDotK[0], yTmp, yDotK[1]);\n-          firstTime = false;\n         }\n-\n-        stepSize = hNew;\n-\n-        // next stages\n-        for (int k = 1; k < stages; ++k) {\n-\n-          for (int j = 0; j < y0.length; ++j) {\n-            double sum = a[k-1][0] * yDotK[0][j];\n-            for (int l = 1; l < k; ++l) {\n-              sum += a[k-1][l] * yDotK[l][j];\n+ \n+        final double nextTime     = stepStart + hInt;\n+        final boolean needLast   = (isLastStep() || lastStep);\n+        interpolator.storeTime(nextTime);\n+        if (needLast) {\n+            final int savitzkyGolayPoints = interpolator.switchToSavitzkyGolay();\n+            System.arraycopy(y, 0, yTmp, 0, y0.length);\n+            equations.computeDerivatives(nextTime, y, yDot);\n+            interpolator.saveState(nextTime, y, yDot, stepSize);\n+            interpolator.switchToInterpolation();\n+            interpolator.storeTime(nextTime);\n+            interpolate(nextTime, yTmp, interpolator);\n+            interpolator.storeTime(stepStart);\n+            interpolator.shift();\n+            interpolator.storeTime(nextTime);\n+            interpolator.setInterpolatedTime(nextTime);\n+            for (StepHandler handler : stepHandlers) {\n+                handler.handleStep(interpolator, isLastStep());\n             }\n-            yTmp[j] = y[j] + stepSize * sum;\n-          }\n-\n-          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n-\n-        }\n-\n-        // estimate the state at the end of the step\n-        for (int j = 0; j < y0.length; ++j) {\n-          double sum    = b[0] * yDotK[0][j];\n-          for (int l = 1; l < stages; ++l) {\n-            sum    += b[l] * yDotK[l][j];\n-          }\n-          yTmp[j] = y[j] + stepSize * sum;\n-        }\n-\n-        // estimate the error at the end of the step\n-        error = estimateError(yDotK, y, yTmp, stepSize);\n-        if (error <= 1.0) {\n-\n-          // discrete events handling\n-          interpolator.storeTime(stepStart + stepSize);\n-          if (manager.evaluateStep(interpolator)) {\n-              final double dt = manager.getEventTime() - stepStart;\n-              if (Math.abs(dt) <= Math.ulp(stepStart)) {\n-                  // rejecting the step would lead to a too small next step, we accept it\n-                  loop = false;\n-              } else {\n-                  // reject the step to match exactly the next switch time\n-                  hNew = dt;\n-              }\n-          } else {\n-            // accept the step\n-            loop = false;\n-          }\n-\n-        } else {\n-          // reject the step and attempt to reduce error by stepsize control\n-          final double factor =\n-              Math.min(maxGrowth,\n-                       Math.max(minReduction, safety * Math.pow(error, exp)));\n-          hNew = filterStep(stepSize * factor, forward, false);\n+            resetInternalState();\n+            setSuccess(true);\n+            return nextTime;\n         }\n-\n-      }\n-\n-      // the step has been accepted\n-      final double nextStep = stepStart + stepSize;\n-      System.arraycopy(yTmp, 0, y, 0, y0.length);\n-      manager.stepAccepted(nextStep, y);\n-      lastStep = manager.stop();\n-\n-      // provide the step data to the step handler\n-      interpolator.storeTime(nextStep);\n-      for (StepHandler handler : stepHandlers) {\n-          handler.handleStep(interpolator, lastStep);\n-      }\n-      stepStart = nextStep;\n-\n-      if (fsal) {\n-        // save the last evaluation for the next step\n-        System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);\n-      }\n-\n-      if (manager.reset(stepStart, y) && ! lastStep) {\n-        // some event handler has triggered changes that\n-        // invalidate the derivatives, we need to recompute them\n-        computeDerivatives(stepStart, y, yDotK[0]);\n-      }\n-\n-      if (! lastStep) {\n-        // in some rare cases we may get here with stepSize = 0, for example\n-        // when an event occurs at integration start, reducing the first step\n-        // to zero; we have to reset the step to some safe non zero value\n-          stepSize = filterStep(stepSize, forward, true);\n-\n-        // stepsize control for next step\n-        final double factor = Math.min(maxGrowth,\n-                                       Math.max(minReduction,\n-                                                safety * Math.pow(error, exp)));\n-        final double  scaledH    = stepSize * factor;\n-        final double  nextT      = stepStart + scaledH;\n-        final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n-        hNew = filterStep(scaledH, forward, nextIsLast);\n-      }\n-\n-    }\n-\n-    final double stopTime = stepStart;\n-    resetInternalState();\n-    return stopTime;\n-\n-  }\n+ \n+        if (! isLastStep()) {\n+ \n+            if (manager.evaluateStep(interpolator)) {\n+                final double dt = manager.getEventTime() - stepStart;\n+                if (Math.abs(dt) <= minStep) {\n+                    loop: for (;;) {\n+                        if (Math.abs(hInt) <= minStep) {\n+                            throw new NumberIsTooSmallException();\n+                        }\n+                        final double  scaledH    = 0.5 * hInt;\n+                        final double  tryTime    = stepStart + scaledH;\n+                        final boolean beforeLast = (tryTime >= t && t > stepStart) || (tryTime <= t && t < stepStart);\n+                        hInt = filterStep(scaledH, forward, beforeLast);\n+                        for (int j = 0;j < y0.length;++j) {\n+                            yTmp[j] = y[j];\n+                        }\n+                        start(stepStart, y, t);\n+                        interpolator.storeTime(stepStart);\n+                        stepSize = tryStep(interpolator, equations, stepStart, y, yDotK, hInt, yTmp, vecAbsoluteTolerance, scalAbsoluteTolerance);\n+                        if (stepSize == hInt) {\n+                            break;\n+                        }\n+                        hNew = filterStep(hInt * Math.min(maxGrowth, 0.5 * (stepSize / hInt)), forward, false);\n+                    }\n+                } else {\n+                    hNew = filterStep(dt, forward, true);\n+                }\n+            } else {\n+                hNew = stepSize;\n+            }\n+ \n+            for (int j = 0;j < y0.length;++j) {\n+                y[j] = yTmp[j];\n+            }\n+            stepStart = manager.getEventTime();\n \n   /** Get the minimal reduction factor for stepsize control.\n    * @return minimal reduction factor",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}