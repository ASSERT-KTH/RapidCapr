{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    if (elementPairs.size() == 1) {\n        Object[] comp = createComposite(elementPairs);\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    } else {\n        Separator sep = null;\n        int index = -1;\n        for (int i = 0; i < elementPairs.size(); i++) {\n            if (elementPairs.get(i) instanceof Separator) {\n                index = i;\n                sep = (Separator) elementPairs.get(index);\n                break;\n            }\n        }\n        Object[] leftComp = createComposite(elementPairs.subList(0, index));\n        Object[] rightComp = createComposite(elementPairs.subList(index + 1, elementPairs.size()));\n        PeriodPrinter printer = null;\n        if(!notPrinter){\n            printer = sep.finish((PeriodPrinter)leftComp[0], (PeriodParser)rightComp[1]);\n        }\n        PeriodParser parser = null;\n        if(!notParser){\n            parser = sep.finish((PeriodPrinter)rightComp[0], (PeriodParser)leftComp[1]);\n        }\n        return new PeriodFormatter(printer, parser);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..057320b7 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,36 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    if (elementPairs.size() == 1) {\n+        Object[] comp = createComposite(elementPairs);\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    } else {\n+        Separator sep = null;\n+        int index = -1;\n+        for (int i = 0; i < elementPairs.size(); i++) {\n+            if (elementPairs.get(i) instanceof Separator) {\n+                index = i;\n+                sep = (Separator) elementPairs.get(index);\n+                break;\n+            }\n         }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+        Object[] leftComp = createComposite(elementPairs.subList(0, index));\n+        Object[] rightComp = createComposite(elementPairs.subList(index + 1, elementPairs.size()));\n+        PeriodPrinter printer = null;\n+        if(!notPrinter){\n+            printer = sep.finish((PeriodPrinter)leftComp[0], (PeriodParser)rightComp[1]);\n         }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+        PeriodParser parser = null;\n+        if(!notParser){\n+            parser = sep.finish((PeriodPrinter)rightComp[0], (PeriodParser)leftComp[1]);\n         }\n+        return new PeriodFormatter(printer, parser);\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.IndexOutOfBoundsException: Index: 7, Size: 7",
    "test_result": "FAIL"
}