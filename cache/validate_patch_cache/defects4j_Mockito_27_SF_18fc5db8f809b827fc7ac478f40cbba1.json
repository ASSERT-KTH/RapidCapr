{
    "patch": "public <T> void resetMock(T mock) {\n    if (mock instanceof MockitoMocks.MockAccess<?>) {\n        MockitoMocks.MockAccess<T> access = (MockitoMocks.MockAccess<T>) mock;\n        MockHandlerInterface<T> oldMockHandler = access.getMockitoMockHandler();\n\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler,\n                (MockSettingsImpl) org.mockito.Mockito.withSettings()\n                        .defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\n        access.setMockitoMockHandler(newMockHandler);\n\n        if (access instanceof MockitoMocks.MockitoMock) {\n            MockitoMocks.MockitoMock<T> mockitoMock = (MockitoMocks.MockitoMock<T>) access;\n            MockitoState state = Mockito.framework().getState();\n\n            if (state.pullListeners().size() != 0 || state.pullInvocationContainer() != null) {\n                ObjectFactory objectFactory = new ObjenesisStd().getInstantiatorOf(mockitoMock.mock.getClass());\n                mockitoMock.interceptor = (MockitoMethodInterceptor) objectFactory.newInstance(MockitoMethodInterceptor.class);\n            } else {\n                mockitoMock.interceptor = new MockitoMethodInterceptor();\n            }\n\n            Callback filter = newFilter;\n            Callback interceptor = mockitoMock.interceptor;\n            Callback[] callbacks = { filter, interceptor };\n\n            mockitoMock.mockMaker.setCallbacks(mockitoMock.mock, callbacks);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..331f8920c 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,38 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    if (mock instanceof MockitoMocks.MockAccess<?>) {\n+        MockitoMocks.MockAccess<T> access = (MockitoMocks.MockAccess<T>) mock;\n+        MockHandlerInterface<T> oldMockHandler = access.getMockitoMockHandler();\n+\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler,\n+                (MockSettingsImpl) org.mockito.Mockito.withSettings()\n+                        .defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+        access.setMockitoMockHandler(newMockHandler);\n+\n+        if (access instanceof MockitoMocks.MockitoMock) {\n+            MockitoMocks.MockitoMock<T> mockitoMock = (MockitoMocks.MockitoMock<T>) access;\n+            MockitoState state = Mockito.framework().getState();\n+\n+            if (state.pullListeners().size() != 0 || state.pullInvocationContainer() != null) {\n+                ObjectFactory objectFactory = new ObjenesisStd().getInstantiatorOf(mockitoMock.mock.getClass());\n+                mockitoMock.interceptor = (MockitoMethodInterceptor) objectFactory.newInstance(MockitoMethodInterceptor.class);\n+            } else {\n+                mockitoMock.interceptor = new MockitoMethodInterceptor();\n+            }\n+\n+            Callback filter = newFilter;\n+            Callback interceptor = mockitoMock.interceptor;\n+            Callback[] callbacks = { filter, interceptor };\n+\n+            mockitoMock.mockMaker.setCallbacks(mockitoMock.mock, callbacks);\n+        }\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: package MockitoMocks does not exist",
    "test_result": "ERROR"
}