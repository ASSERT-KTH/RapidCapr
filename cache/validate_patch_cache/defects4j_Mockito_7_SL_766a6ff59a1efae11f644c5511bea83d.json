{
    "patch": "Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument == null) {\n        for (Type type : typeVariable.getBounds()) {\n            if (!type.equals(typeVariable)) {\n                registerTypeVariablesOn(type);\n            }\n        }\n    } else if (actualTypeArgument instanceof TypeVariable) {\n        readTypeVariableBounds((TypeVariable<?>) actualTypeArgument);\n    } else {\n        registerTypeVariablesOn(actualTypeArgument);\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..adc08c538 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,23 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument == null) {\n+        for (Type type : typeVariable.getBounds()) {\n+            if (!type.equals(typeVariable)) {\n+                registerTypeVariablesOn(type);\n+            }\n+        }\n+    } else if (actualTypeArgument instanceof TypeVariable) {\n+        readTypeVariableBounds((TypeVariable<?>) actualTypeArgument);\n+    } else {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}