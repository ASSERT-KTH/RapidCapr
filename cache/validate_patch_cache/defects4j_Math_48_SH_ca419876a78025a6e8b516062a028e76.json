{
    "patch": "if (FastMath.abs(fx) <= ftol) {\n    switch (allowed) {\n        case ANY_SIDE:\n            return x;\n        case LEFT_SIDE:\n            return inverted ? x : x0;\n        case RIGHT_SIDE:\n            return inverted ? x0 : x;\n        case BELOW_SIDE:\n            return (fx <= 0) ? x : x0;\n        case ABOVE_SIDE:\n            return (fx >= 0) ? x : x0;\n        default:\n            throw new MathInternalError();\n    }\n}\n\n// Detect early that algorithm is stuck, instead of waiting\n// for the maximum number of iterations to be exceeded.\nfinal double delta = FastMath.abs(x - x1);\nif (delta < FastMath.ulp(x1) || delta < FastMath.ulp(x)) {\n    throw new ConvergenceException();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..d7b24f5b1 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,29 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+if (FastMath.abs(fx) <= ftol) {\n+    switch (allowed) {\n+        case ANY_SIDE:\n+            return x;\n+        case LEFT_SIDE:\n+            return inverted ? x : x0;\n+        case RIGHT_SIDE:\n+            return inverted ? x0 : x;\n+        case BELOW_SIDE:\n+            return (fx <= 0) ? x : x0;\n+        case ABOVE_SIDE:\n+            return (fx >= 0) ? x : x0;\n+        default:\n+            throw new MathInternalError();\n+    }\n+}\n+\n+// Detect early that algorithm is stuck, instead of waiting\n+// for the maximum number of iterations to be exceeded.\n+final double delta = FastMath.abs(x - x1);\n+if (delta < FastMath.ulp(x1) || delta < FastMath.ulp(x)) {\n+    throw new ConvergenceException();\n+}\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}