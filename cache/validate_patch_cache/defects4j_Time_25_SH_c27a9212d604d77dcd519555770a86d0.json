{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // we need to ensure that time is always after the DST gap\n    // this happens naturally for positive offsets, but not for negative\n    long prevTransition = previousTransition(instantAdjusted);\n    long nextTransition = nextTransition(instantAdjusted);\n    if (prevTransition == nextTransition) {\n        // ambivalent near DST boundary\n        return offsetLocal;\n    }\n    int prevOffset = getOffset(prevTransition);\n    int nextOffset = getOffset(nextTransition);\n    if (offsetLocal < offsetAdjusted && prevOffset == offsetAdjusted) {\n        // gap continued for longer than 'diff', so 'instantLocal' falls on the other side of the gap\n        return offsetAdjusted;\n    } else if (offsetLocal > offsetAdjusted && nextOffset == offsetLocal) {\n        // overlap continued for longer than 'diff', so 'instantLocal' falls on the overlap\n        return offsetAdjusted;\n    } else {\n        return offsetLocal;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..f2e1532e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,27 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // we need to ensure that time is always after the DST gap\n+    // this happens naturally for positive offsets, but not for negative\n+    long prevTransition = previousTransition(instantAdjusted);\n+    long nextTransition = nextTransition(instantAdjusted);\n+    if (prevTransition == nextTransition) {\n+        // ambivalent near DST boundary\n+        return offsetLocal;\n+    }\n+    int prevOffset = getOffset(prevTransition);\n+    int nextOffset = getOffset(nextTransition);\n+    if (offsetLocal < offsetAdjusted && prevOffset == offsetAdjusted) {\n+        // gap continued for longer than 'diff', so 'instantLocal' falls on the other side of the gap\n+        return offsetAdjusted;\n+    } else if (offsetLocal > offsetAdjusted && nextOffset == offsetLocal) {\n+        // overlap continued for longer than 'diff', so 'instantLocal' falls on the overlap\n+        return offsetAdjusted;\n+    } else {\n+        return offsetLocal;\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}