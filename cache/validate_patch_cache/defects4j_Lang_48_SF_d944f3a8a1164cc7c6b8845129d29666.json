{
    "patch": "public class EqualsBuilder {\n\n    private boolean isEquals = true;\n\n    private final Set<Pair<Object, Object>> comparedPairs = new HashSet<>();\n\n    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        Class lhsClass = lhs.getClass();\n        if (!lhsClass.isArray()) {\n            // The simple case, not an array, just test the element\n            isEquals = lhs.equals(rhs);\n        } else if (lhs.getClass() != rhs.getClass()) {\n            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[]\n            this.setEquals(false);\n        }\n        // 'Switch' on type of array, to dispatch to the correct handler\n        // This handles multi dimensional arrays of the same depth\n        else if (lhs instanceof long[]) {\n            append((long[]) lhs, (long[]) rhs);\n        } else if (lhs instanceof int[]) {\n            append((int[]) lhs, (int[]) rhs);\n        } else if (lhs instanceof short[]) {\n            append((short[]) lhs, (short[]) rhs);\n        } else if (lhs instanceof char[]) {\n            append((char[]) lhs, (char[]) rhs);\n        } else if (lhs instanceof byte[]) {\n            append((byte[]) lhs, (byte[]) rhs);\n        } else if (lhs instanceof double[]) {\n            append((double[]) lhs, (double[]) rhs);\n        } else if (lhs instanceof float[]) {\n            append((float[]) lhs, (float[]) rhs);\n        } else if (lhs instanceof boolean[]) {\n            append((boolean[]) lhs, (boolean[]) rhs);\n        } else {\n            // Not an array of primitives\n            append((Object[]) lhs, (Object[]) rhs);\n        }\n        return this;\n    }\n\n    /**\n     * Append two Object arrays ensuring that every element in them are equally compared.\n     *\n     * @param lhs\n     *            the left hand Object array\n     * @param rhs\n     *            the right hand Object array\n     */\n    private void append(Object[] lhs, Object[] rhs) {\n        if (isEquals == false) {\n            return;\n        }\n        if (lhs == rhs) {\n            return;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return;\n        }\n        if (lhs.length != rhs.length) {\n            this.setEquals(false);\n            return;\n        }\n        for (int i = 0; i < lhs.length; i++) {\n            Object lhsElement = lhs[i];\n            Object rhsElement = rhs[i];\n            Pair<Object, Object> pair = Pair.of(lhsElement, rhsElement);\n            if (comparedPairs.contains(pair)) {\n                continue;\n            } else {\n                comparedPairs.add(pair);\n            }\n            append(lhsElement, rhsElement);\n        }\n    }\n\n    /**\n     * Returns the \"equals\" status that has been built up.\n     *\n     * @return true if equal\n     */\n    public boolean isEquals() {\n        return this.isEquals;\n    }\n\n    /**\n     * Sets the comparison result to {@code false}.\n     *\n     * @param falseIfNull\n     *            whether to consider the case that both are null as an inequality\n     * @return {@code false}\n     */\n    private boolean setEquals(boolean falseIfNull) {\n        this.isEquals = false;\n        return falseIfNull ? false : this.isEquals;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..86693d08 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,6 +364,12 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n+public class EqualsBuilder {\n+\n+    private boolean isEquals = true;\n+\n+    private final Set<Pair<Object, Object>> comparedPairs = new HashSet<>();\n+\n     public EqualsBuilder append(Object lhs, Object rhs) {\n         if (isEquals == false) {\n             return this;\n@@ -377,10 +383,10 @@ public class EqualsBuilder {\n         }\n         Class lhsClass = lhs.getClass();\n         if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n+            // The simple case, not an array, just test the element\n+            isEquals = lhs.equals(rhs);\n         } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n+            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[]\n             this.setEquals(false);\n         }\n         // 'Switch' on type of array, to dispatch to the correct handler\n@@ -408,6 +414,64 @@ public class EqualsBuilder {\n         return this;\n     }\n \n+    /**\n+     * Append two Object arrays ensuring that every element in them are equally compared.\n+     *\n+     * @param lhs\n+     *            the left hand Object array\n+     * @param rhs\n+     *            the right hand Object array\n+     */\n+    private void append(Object[] lhs, Object[] rhs) {\n+        if (isEquals == false) {\n+            return;\n+        }\n+        if (lhs == rhs) {\n+            return;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < lhs.length; i++) {\n+            Object lhsElement = lhs[i];\n+            Object rhsElement = rhs[i];\n+            Pair<Object, Object> pair = Pair.of(lhsElement, rhsElement);\n+            if (comparedPairs.contains(pair)) {\n+                continue;\n+            } else {\n+                comparedPairs.add(pair);\n+            }\n+            append(lhsElement, rhsElement);\n+        }\n+    }\n+\n+    /**\n+     * Returns the \"equals\" status that has been built up.\n+     *\n+     * @return true if equal\n+     */\n+    public boolean isEquals() {\n+        return this.isEquals;\n+    }\n+\n+    /**\n+     * Sets the comparison result to {@code false}.\n+     *\n+     * @param falseIfNull\n+     *            whether to consider the case that both are null as an inequality\n+     * @return {@code false}\n+     */\n+    private boolean setEquals(boolean falseIfNull) {\n+        this.isEquals = false;\n+        return falseIfNull ? false : this.isEquals;\n+    }\n+}\n+\n     /**\n      * <p>\n      * Test if two <code>long</code> s are equal.",
    "result_reason": "error: generics are not supported in -source 1.3",
    "test_result": "ERROR"
}