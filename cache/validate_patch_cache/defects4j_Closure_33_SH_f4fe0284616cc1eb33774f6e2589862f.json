{
    "patch": "      ObjectType ownerType = getOwner().toObjectType();\n      for (String prop : ownerType.getOwnPropertyNames()) {\n        JSType propType = ownerType.getPropertyType(prop);\n        if (propType.isStructuralInterface() &&\n            constraintObj.isSubtypeWithoutStructuralTyping(propType)) {\n          definePropertyOnReceiverIfUnseen(prop, propType,\n              ownerType.getOwnPropertyJSDocInfo(prop));\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..ae503d79 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,15 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+      ObjectType ownerType = getOwner().toObjectType();\n+      for (String prop : ownerType.getOwnPropertyNames()) {\n+        JSType propType = ownerType.getPropertyType(prop);\n+        if (propType.isStructuralInterface() &&\n+            constraintObj.isSubtypeWithoutStructuralTyping(propType)) {\n+          definePropertyOnReceiverIfUnseen(prop, propType,\n+              ownerType.getOwnPropertyJSDocInfo(prop));\n+        }\n+      }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}