{
    "patch": "import java.util.Arrays;\n\npublic class AutomatedProgramRepairTool {\n\n    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        if (DateTimeUtils.isContiguous(partial)) {\n            // month is largest field and being added to, such as month-day\n            long instant = 0L;\n            int monthFieldIndex = -1;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n                    monthFieldIndex = i;\n                }\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n\n            if (monthFieldIndex != -1) {\n                int year = iChronology.year().get(instant);\n                int month = iChronology.monthOfYear().get(instant);\n                int day = iChronology.dayOfMonth().get(instant);\n                int maxDays = iChronology.monthOfYear().getMaximumValue(year);\n                if (day > maxDays) {\n                    // Date is out of range, so use the last day of the month instead.\n                    // e.g. 31st March -> 30th April, or 29th Feb 2004 -> 31st Mar 2004\n                    day = maxDays;\n                }\n\n                int[] newValues = Arrays.copyOf(values, values.length);\n                newValues[monthFieldIndex] += valueToAdd;\n                int carry = iChronology.monthOfYear().set(newValues[monthFieldIndex], month);\n                if (carry != month) {\n                    // Date is out of range, so use the last day of the month instead.\n                    // e.g. 31st March -> 30th April, or 29th Feb 2004 -> 31st Mar 2004\n                    day = iChronology.monthOfYear().getMaximumValue(year);\n                }\n\n                int[] result = iChronology.get(partial.getFieldTypes(), instant);\n                result = iChronology.set(result, monthFieldIndex, newValues[monthFieldIndex]);\n                result = iChronology.set(result, iChronology.dayOfMonth(), day);\n                return result;\n            } else {\n                long instant = add(iChronology.set(partial, 0L), valueToAdd);\n                return iChronology.get(partial, instant);\n            }\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..ef02eeec 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,60 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n+import java.util.Arrays;\n+\n+public class AutomatedProgramRepairTool {\n+\n     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n         // overridden as superclass algorithm can't handle\n         // 2004-02-29 + 48 months -> 2008-02-29 type dates\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n+            // month is largest field and being added to, such as month-day\n             long instant = 0L;\n+            int monthFieldIndex = -1;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n+                if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n+                    monthFieldIndex = i;\n+                }\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+\n+            if (monthFieldIndex != -1) {\n+                int year = iChronology.year().get(instant);\n+                int month = iChronology.monthOfYear().get(instant);\n+                int day = iChronology.dayOfMonth().get(instant);\n+                int maxDays = iChronology.monthOfYear().getMaximumValue(year);\n+                if (day > maxDays) {\n+                    // Date is out of range, so use the last day of the month instead.\n+                    // e.g. 31st March -> 30th April, or 29th Feb 2004 -> 31st Mar 2004\n+                    day = maxDays;\n+                }\n+\n+                int[] newValues = Arrays.copyOf(values, values.length);\n+                newValues[monthFieldIndex] += valueToAdd;\n+                int carry = iChronology.monthOfYear().set(newValues[monthFieldIndex], month);\n+                if (carry != month) {\n+                    // Date is out of range, so use the last day of the month instead.\n+                    // e.g. 31st March -> 30th April, or 29th Feb 2004 -> 31st Mar 2004\n+                    day = iChronology.monthOfYear().getMaximumValue(year);\n+                }\n+\n+                int[] result = iChronology.get(partial.getFieldTypes(), instant);\n+                result = iChronology.set(result, monthFieldIndex, newValues[monthFieldIndex]);\n+                result = iChronology.set(result, iChronology.dayOfMonth(), day);\n+                return result;\n+            } else {\n+                long instant = add(iChronology.set(partial, 0L), valueToAdd);\n+                return iChronology.get(partial, instant);\n+            }\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}