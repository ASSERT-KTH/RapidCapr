{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        boolean isLeapYear = false;\n        boolean isFebruary29 = false;\n        boolean isDayOfMonthInvalid = false;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (partial.getFieldType(i) == DateTimeFieldType.year()) {\n                if (iChronology.isLeapYear(values[i])) {\n                    isLeapYear = true;\n                }\n            }\n            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\n                if (values[i] == 2 && iChronology.dayOfMonth().getMaximumValue(instant) == 29) {\n                    isFebruary29 = (iChronology.dayOfMonth().get(instant) == 29);\n                }\n            }\n            if (partial.getFieldType(i) == DateTimeFieldType.dayOfMonth()) {\n                int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n                if (values[i] < 1 || values[i] > maxDayOfMonth) {\n                    isDayOfMonthInvalid = true;\n                }\n            }\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        while (valueToAdd != 0) {\n            if (isDayOfMonthInvalid) {\n                int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n                instant = iChronology.dayOfMonth().set(instant, maxDayOfMonth);\n            }\n            instant = iChronology.monthOfYear().add(instant, valueToAdd > 0 ? 1 : -1);\n            int newMonth = iChronology.monthOfYear().get(instant);\n            int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n            int dayOfMonth = iChronology.dayOfMonth().get(instant);\n            if (isLeapYear && dayOfMonth == 29 && newMonth == 3) {\n                instant = iChronology.dayOfMonth().set(instant, 28);\n            } else if (isFebruary29 && dayOfMonth == 1 && newMonth == 3) {\n                instant = iChronology.dayOfMonth().set(instant, 29);\n            } else if (dayOfMonth > maxDayOfMonth) {\n                instant = iChronology.dayOfMonth().set(instant, maxDayOfMonth);\n            }\n            valueToAdd += valueToAdd > 0 ? -1 : 1;\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..7a51ef28 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,57 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        boolean isLeapYear = false;\n+        boolean isFebruary29 = false;\n+        boolean isDayOfMonthInvalid = false;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (partial.getFieldType(i) == DateTimeFieldType.year()) {\n+                if (iChronology.isLeapYear(values[i])) {\n+                    isLeapYear = true;\n+                }\n+            }\n+            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {\n+                if (values[i] == 2 && iChronology.dayOfMonth().getMaximumValue(instant) == 29) {\n+                    isFebruary29 = (iChronology.dayOfMonth().get(instant) == 29);\n+                }\n+            }\n+            if (partial.getFieldType(i) == DateTimeFieldType.dayOfMonth()) {\n+                int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n+                if (values[i] < 1 || values[i] > maxDayOfMonth) {\n+                    isDayOfMonthInvalid = true;\n+                }\n+            }\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        while (valueToAdd != 0) {\n+            if (isDayOfMonthInvalid) {\n+                int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n+                instant = iChronology.dayOfMonth().set(instant, maxDayOfMonth);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            instant = iChronology.monthOfYear().add(instant, valueToAdd > 0 ? 1 : -1);\n+            int newMonth = iChronology.monthOfYear().get(instant);\n+            int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n+            int dayOfMonth = iChronology.dayOfMonth().get(instant);\n+            if (isLeapYear && dayOfMonth == 29 && newMonth == 3) {\n+                instant = iChronology.dayOfMonth().set(instant, 28);\n+            } else if (isFebruary29 && dayOfMonth == 1 && newMonth == 3) {\n+                instant = iChronology.dayOfMonth().set(instant, 29);\n+            } else if (dayOfMonth > maxDayOfMonth) {\n+                instant = iChronology.dayOfMonth().set(instant, maxDayOfMonth);\n+            }\n+            valueToAdd += valueToAdd > 0 ? -1 : 1;\n         }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]",
    "test_result": "FAIL"
}