{
    "patch": "public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n    if (expected == null || observed == null || expected.length != observed.length) {\n        throw new IllegalArgumentException(\"Invalid inputs: expected and observed arrays must have the same length\");\n    }\n\n    double sumSq = 0.0d;\n    double[] fracDiffs = new double[expected.length]; // fraction differences\n    int dof = 0; // degrees of freedom\n    for (int i = 0; i < observed.length; i++) {\n        if (expected[i] <= 0.0d || observed[i] < 0L) {\n            throw new IllegalArgumentException(\"Invalid inputs: expected counts must be positive and observed counts must be non-negative\");\n        }\n        fracDiffs[i] = (observed[i] - expected[i]) / Math.sqrt(expected[i]); // use standardized difference\n        sumSq += fracDiffs[i] * fracDiffs[i];\n        dof++;\n    }\n    if (sumSq == Double.POSITIVE_INFINITY) { // check for overflow\n        return Double.POSITIVE_INFINITY;\n    }\n\n    // calculate p-value using chi-square distribution\n    ChiSquaredDistribution distribution = new ChiSquaredDistribution(dof - 1);\n    double pValue = 1.0d - distribution.cumulativeProbability(sumSq);\n\n    return pValue;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\nindex c87b0101f..25c0441bd 100644\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n@@ -61,25 +61,33 @@ public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n      * @throws IllegalArgumentException if preconditions are not met\n      * or length is less than 2\n      */\n-    public double chiSquare(double[] expected, long[] observed)\n-        throws IllegalArgumentException {\n-        if ((expected.length < 2) || (expected.length != observed.length)) {\n-            throw new IllegalArgumentException(\n-                    \"observed, expected array lengths incorrect\");\n-        }\n-        if (!isPositive(expected) || !isNonNegative(observed)) {\n-            throw new IllegalArgumentException(\n-                \"observed counts must be non-negative and expected counts must be postive\");\n-        }\n-        double sumSq = 0.0d;\n-        double dev = 0.0d;\n-        for (int i = 0; i < observed.length; i++) {\n-                dev = ((double) observed[i] - expected[i]);\n-                sumSq += dev * dev / expected[i];\n+public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n+    if (expected == null || observed == null || expected.length != observed.length) {\n+        throw new IllegalArgumentException(\"Invalid inputs: expected and observed arrays must have the same length\");\n+    }\n+\n+    double sumSq = 0.0d;\n+    double[] fracDiffs = new double[expected.length]; // fraction differences\n+    int dof = 0; // degrees of freedom\n+    for (int i = 0; i < observed.length; i++) {\n+        if (expected[i] <= 0.0d || observed[i] < 0L) {\n+            throw new IllegalArgumentException(\"Invalid inputs: expected counts must be positive and observed counts must be non-negative\");\n         }\n-        return sumSq;\n+        fracDiffs[i] = (observed[i] - expected[i]) / Math.sqrt(expected[i]); // use standardized difference\n+        sumSq += fracDiffs[i] * fracDiffs[i];\n+        dof++;\n+    }\n+    if (sumSq == Double.POSITIVE_INFINITY) { // check for overflow\n+        return Double.POSITIVE_INFINITY;\n     }\n \n+    // calculate p-value using chi-square distribution\n+    ChiSquaredDistribution distribution = new ChiSquaredDistribution(dof - 1);\n+    double pValue = 1.0d - distribution.cumulativeProbability(sumSq);\n+\n+    return pValue;\n+}\n+\n     /**\n      * {@inheritDoc}\n      * <p><strong>Note: </strong>This implementation rescales the ",
    "result_reason": "error: ChiSquaredDistribution is abstract; cannot be instantiated",
    "test_result": "ERROR"
}