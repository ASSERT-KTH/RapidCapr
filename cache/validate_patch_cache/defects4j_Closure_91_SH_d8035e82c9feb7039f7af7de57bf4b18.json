{
    "patch": "      Node grandparent = parent.getParent();\n      if (grandparent != null && grandparent.getType() == Token.EXPR_RESULT) {\n        Node greatGrandparent = grandparent.getParent();\n        if (greatGrandparent != null && greatGrandparent.getType() == Token.SCRIPT) {\n          if (getScopeRoot().getParent() == null &&\n              getTwinScopeRoot() != null &&\n              getTwinScopeRoot().getParent() == null) {\n            // If we only have global variables, and this is a global variable being var'd,\n            // then it's okay. We're replacing a global variable decl.\n            if (NodeUtil.isNameDeclaration(parent)) {\n              return true;\n            }\n            // Global variable being assigned to something else is an error,\n            // unless it's a prototype property subproperty.\n            if (!(NodeUtil.isGet(lhs) &&\n                  lhs.getType() == Token.GETPROP &&\n                  lhs.getLastChild().getString().equals(\"prototype\"))) {\n              return false;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..9c5ed40d 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,25 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node grandparent = parent.getParent();\n+      if (grandparent != null && grandparent.getType() == Token.EXPR_RESULT) {\n+        Node greatGrandparent = grandparent.getParent();\n+        if (greatGrandparent != null && greatGrandparent.getType() == Token.SCRIPT) {\n+          if (getScopeRoot().getParent() == null &&\n+              getTwinScopeRoot() != null &&\n+              getTwinScopeRoot().getParent() == null) {\n+            // If we only have global variables, and this is a global variable being var'd,\n+            // then it's okay. We're replacing a global variable decl.\n+            if (NodeUtil.isNameDeclaration(parent)) {\n+              return true;\n+            }\n+            // Global variable being assigned to something else is an error,\n+            // unless it's a prototype property subproperty.\n+            if (!(NodeUtil.isGet(lhs) &&\n+                  lhs.getType() == Token.GETPROP &&\n+                  lhs.getLastChild().getString().equals(\"prototype\"))) {\n+              return false;\n+            }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}