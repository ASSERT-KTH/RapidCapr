{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final EigenDecomposition dec = new EigenDecomposition(m);\n\n    double[] realEigenvalues = dec.getRealEigenvalues();\n    double[] imagEigenvalues = dec.getImagEigenvalues();\n\n    // Check if matrix is positive definite\n    for (int i = 0; i < realEigenvalues.length; i++) {\n        if (realEigenvalues[i] <= 0.0) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        }\n        if (imagEigenvalues[i] != 0.0) {\n            throw new IllegalArgumentException(\"Matrix is not real symmetric\");\n        }\n    }\n\n    final RealMatrix v = dec.getV();\n\n    // Compute the diagonal matrix of the square root of the eigenvalues\n    final double[] sqrtValues = new double[n];\n    for (int i = 0; i < n; i++) {\n        sqrtValues[i] = Math.sqrt(realEigenvalues[i]);\n    }\n    final RealMatrix sqrtValuesDiag = MatrixUtils.createRealDiagonalMatrix(sqrtValues);\n\n    // Compute the square root of the matrix\n    final RealMatrix result = v.multiply(sqrtValuesDiag).multiply(v.transpose());\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..94b3b66b4 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,35 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+\n+    double[] realEigenvalues = dec.getRealEigenvalues();\n+    double[] imagEigenvalues = dec.getImagEigenvalues();\n+\n+    // Check if matrix is positive definite\n+    for (int i = 0; i < realEigenvalues.length; i++) {\n+        if (realEigenvalues[i] <= 0.0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        }\n+        if (imagEigenvalues[i] != 0.0) {\n+            throw new IllegalArgumentException(\"Matrix is not real symmetric\");\n+        }\n+    }\n+\n+    final RealMatrix v = dec.getV();\n+\n+    // Compute the diagonal matrix of the square root of the eigenvalues\n+    final double[] sqrtValues = new double[n];\n+    for (int i = 0; i < n; i++) {\n+        sqrtValues[i] = Math.sqrt(realEigenvalues[i]);\n     }\n+    final RealMatrix sqrtValuesDiag = MatrixUtils.createRealDiagonalMatrix(sqrtValues);\n+\n+    // Compute the square root of the matrix\n+    final RealMatrix result = v.multiply(sqrtValuesDiag).multiply(v.transpose());\n+\n+    return result;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}