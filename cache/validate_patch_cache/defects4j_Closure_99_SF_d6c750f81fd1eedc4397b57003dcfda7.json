{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        boolean constructor = jsDoc != null && jsDoc.isConstructor();\n        boolean hasThisType = jsDoc != null && jsDoc.hasThisType();\n        boolean isOverride = jsDoc != null && jsDoc.isOverride();\n        if (constructor || hasThisType || isOverride) {\n            return false;\n        }\n\n        // Check if the function is directly assigned to an exported variable.\n        if (parent != null && parent.getType() == Token.EXPORT) {\n            parent = parent.getParent();\n            if (parent != null && parent.getType() == Token.VAR) {\n                for (Node child : parent.children()) {\n                    if (child.getLastChild().equals(n)) {\n                        return false;\n                    }\n                }\n            }\n        }\n\n        // Don't traverse functions unless they would normally\n        // be able to have a @this annotation associated with them. e.g.,\n        // var a = function() { }; // or\n        // function a() {} // or\n        // a.x = function() {};\n        int pType = parent.getType();\n        if (!(pType == Token.BLOCK ||\n                pType == Token.SCRIPT ||\n                pType == Token.NAME ||\n                (pType == Token.EXPR_RESULT && parent.getParent() != null && (parent.getParent().getType() == Token.BLOCK || parent.getParent().getType() == Token.SCRIPT)) ||\n                (pType == Token.ASSIGN || pType == Token.VAR && this.isFunctionDeclaration(parent)))) {\n            return false;\n        }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n            if (assignLhsChild == null) {\n                assignLhsChild = lhs;\n            }\n        } else {\n            if (lhs.getType() == Token.GETPROP &&\n                    lhs.getLastChild().getString().equals(\"prototype\")) {\n                return false;\n            }\n            if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\nprivate boolean isFunctionDeclaration(Node n) {\n    if (n.getType() == Token.VAR) {\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            if (c.getType() == Token.FUNCTION) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..7325ec0e 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,75 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        boolean constructor = jsDoc != null && jsDoc.isConstructor();\n+        boolean hasThisType = jsDoc != null && jsDoc.hasThisType();\n+        boolean isOverride = jsDoc != null && jsDoc.isOverride();\n+        if (constructor || hasThisType || isOverride) {\n+            return false;\n+        }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n+        // Check if the function is directly assigned to an exported variable.\n+        if (parent != null && parent.getType() == Token.EXPORT) {\n+            parent = parent.getParent();\n+            if (parent != null && parent.getType() == Token.VAR) {\n+                for (Node child : parent.children()) {\n+                    if (child.getLastChild().equals(n)) {\n+                        return false;\n+                    }\n+                }\n+            }\n+        }\n+\n+        // Don't traverse functions unless they would normally\n+        // be able to have a @this annotation associated with them. e.g.,\n+        // var a = function() { }; // or\n+        // function a() {} // or\n+        // a.x = function() {};\n+        int pType = parent.getType();\n+        if (!(pType == Token.BLOCK ||\n+                pType == Token.SCRIPT ||\n+                pType == Token.NAME ||\n+                (pType == Token.EXPR_RESULT && parent.getParent() != null && (parent.getParent().getType() == Token.BLOCK || parent.getParent().getType() == Token.SCRIPT)) ||\n+                (pType == Token.ASSIGN || pType == Token.VAR && this.isFunctionDeclaration(parent)))) {\n+            return false;\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+            if (assignLhsChild == null) {\n+                assignLhsChild = lhs;\n+            }\n+        } else {\n+            if (lhs.getType() == Token.GETPROP &&\n+                    lhs.getLastChild().getString().equals(\"prototype\")) {\n+                return false;\n+            }\n+            if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+                return false;\n+            }\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n-      }\n     }\n \n     return true;\n-  }\n+}\n+\n+private boolean isFunctionDeclaration(Node n) {\n+    if (n.getType() == Token.VAR) {\n+        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+            if (c.getType() == Token.FUNCTION) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "junit.framework.AssertionFailedError: There should be one error. expected:<1> but was:<0>",
    "test_result": "FAIL"
}