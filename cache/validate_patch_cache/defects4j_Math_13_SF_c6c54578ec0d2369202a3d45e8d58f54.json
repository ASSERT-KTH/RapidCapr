{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix d = MatrixUtils.createRealDiagonalMatrix(dec.getRealEigenvalues());\n    final RealMatrix v = dec.getV();\n    final RealMatrix vInverse = new LUDecomposition(v).getSolver().getInverse();\n    final RealMatrix sqrtD = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        final double eigenvalue = d.getEntry(i, i);\n        if (eigenvalue < 0) {\n            throw new IllegalArgumentException(\"Matrix must be positive semi-definite\");\n        }\n        sqrtD.setEntry(i, i, FastMath.sqrt(eigenvalue));\n    }\n    final RealMatrix sqrtM = v.multiply(sqrtD).multiply(vInverse);\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..d60bc21c0 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,21 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix d = MatrixUtils.createRealDiagonalMatrix(dec.getRealEigenvalues());\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix vInverse = new LUDecomposition(v).getSolver().getInverse();\n+    final RealMatrix sqrtD = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        final double eigenvalue = d.getEntry(i, i);\n+        if (eigenvalue < 0) {\n+            throw new IllegalArgumentException(\"Matrix must be positive semi-definite\");\n+        }\n+        sqrtD.setEntry(i, i, FastMath.sqrt(eigenvalue));\n     }\n+    final RealMatrix sqrtM = v.multiply(sqrtD).multiply(vInverse);\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}