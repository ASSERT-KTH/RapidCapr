{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  // If the function block has more than one statement, inlining is not safe\n  if (block.getChildCount() != 1) {\n    return CanInlineResult.NO;\n  }\n\n  // If the single statement in the function is not a return statement, inlining is not safe\n  Node stmt = block.getOnlyChild();\n  if (!stmt.isReturn()) {\n    return CanInlineResult.NO;\n  }\n\n  Node retExpr = stmt.getFirstChild();\n  if (retExpr == null) {\n    return CanInlineResult.YES;\n  }\n\n  Node cArg = callNode.getFirstChild().getNext();\n\n  for (Node fnParam : NodeUtil.getFunctionParameters(fnNode).children()) {\n    // If there are no more arguments, we cannot inline\n    if (cArg == null) {\n      return CanInlineResult.NO;\n    }\n\n    boolean isThisParam = fnParam.isThis();\n    boolean isNamedParam = fnParam.isName();\n    boolean isSpreadParam = fnParam.isSpread();\n\n    // In case of a spread parameter, inline all remaining arguments and return YES\n    if (isSpreadParam) {\n      while (cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n      return CanInlineResult.YES;\n    }\n\n    // If the function parameter is `this`, inline if the argument is `null` or `undefined`\n    if (isThisParam) {\n      if (cArg == null || NodeUtil.isNullOrUndefined(cArg)) {\n        cArg = cArg != null ? cArg.getNext() : null;\n        continue;\n      } else {\n        return CanInlineResult.NO;\n      }\n    }\n\n    // If the function parameter is a named parameter, check if the argument is side effect-free\n    if (isNamedParam) {\n      if (hasSideEffect(cArg, retExpr)) {\n        return CanInlineResult.NO;\n      }\n\n      if (NodeUtil.mayEffectMutableState(cArg, compiler)\n          && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n\n      cArg = cArg.getNext();\n    }\n  }\n\n  // If there are more arguments than parameters, we cannot inline\n  if (cArg != null) {\n    return CanInlineResult.NO;\n  }\n\n  return CanInlineResult.YES;\n}\n\nprivate boolean hasSideEffect(Node cArg, Node retExpr) {\n  // If the return expression relies on the value of the argument,\n  // it is not safe to inline the function\n  return NodeUtil.isEffectivelyImmutableValue(cArg)\n      ? false\n      : NodeUtil.containsAccessToName(retExpr, cArg.getString());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..4250789f 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,77 +686,93 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  Node block = fnNode.getLastChild();\n \n-    boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n+  // If the function block has more than one statement, inlining is not safe\n+  if (block.getChildCount() != 1) {\n+    return CanInlineResult.NO;\n+  }\n+\n+  // If the single statement in the function is not a return statement, inlining is not safe\n+  Node stmt = block.getOnlyChild();\n+  if (!stmt.isReturn()) {\n+    return CanInlineResult.NO;\n+  }\n+\n+  Node retExpr = stmt.getFirstChild();\n+  if (retExpr == null) {\n+    return CanInlineResult.YES;\n+  }\n+\n+  Node cArg = callNode.getFirstChild().getNext();\n+\n+  for (Node fnParam : NodeUtil.getFunctionParameters(fnNode).children()) {\n+    // If there are no more arguments, we cannot inline\n+    if (cArg == null) {\n+      return CanInlineResult.NO;\n     }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n+    boolean isThisParam = fnParam.isThis();\n+    boolean isNamedParam = fnParam.isName();\n+    boolean isSpreadParam = fnParam.isSpread();\n+\n+    // In case of a spread parameter, inline all remaining arguments and return YES\n+    if (isSpreadParam) {\n+      while (cArg != null) {\n+        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n           return CanInlineResult.NO;\n         }\n         cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n       }\n+      return CanInlineResult.YES;\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+    // If the function parameter is `this`, inline if the argument is `null` or `undefined`\n+    if (isThisParam) {\n+      if (cArg == null || NodeUtil.isNullOrUndefined(cArg)) {\n+        cArg = cArg != null ? cArg.getNext() : null;\n+        continue;\n+      } else {\n+        return CanInlineResult.NO;\n+      }\n+    }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+    // If the function parameter is a named parameter, check if the argument is side effect-free\n+    if (isNamedParam) {\n+      if (hasSideEffect(cArg, retExpr)) {\n+        return CanInlineResult.NO;\n       }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+      if (NodeUtil.mayEffectMutableState(cArg, compiler)\n+          && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n+        return CanInlineResult.NO;\n       }\n+\n+      cArg = cArg.getNext();\n     }\n+  }\n \n-    return CanInlineResult.YES;\n+  // If there are more arguments than parameters, we cannot inline\n+  if (cArg != null) {\n+    return CanInlineResult.NO;\n   }\n \n+  return CanInlineResult.YES;\n+}\n+\n+private boolean hasSideEffect(Node cArg, Node retExpr) {\n+  // If the return expression relies on the value of the argument,\n+  // it is not safe to inline the function\n+  return NodeUtil.isEffectivelyImmutableValue(cArg)\n+      ? false\n+      : NodeUtil.containsAccessToName(retExpr, cArg.getString());\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}