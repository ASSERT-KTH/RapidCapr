{
    "patch": "Node function = fnScope.getRootNode();\nPreconditions.checkState(function.isFunction());\n\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n  // The parameters object literal setters can not be removed.\n  return;\n}\n\nNode argList = getFunctionArgList(function);\n\nboolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\nif (!modifyCallers) {\n  // Strip unreferenced args off the end of the function declaration.\n  while (argList.hasChildren()) {\n    Node lastArg = argList.getLastChild();\n    if (NodeUtil.isVarArgsFunction(function)) {\n      // don't remove variable arguments. A variable arguments parameter\n      // is considered used if the length of the argument list is greater\n      // than the number of parameters, or if the arguments object is modified.\n      if (lastArg.isName() && lastArg.getString().equals(\"arguments\")) {\n        referenced.add(Scope.createArgumentsVar(fnScope));\n        break;\n      } else if (NodeUtil.isRest(lastArg)) {\n        break;\n      }\n    }\n\n    Var var = fnScope.getVar(lastArg.getString());\n\n    if (!referenced.contains(var)) {\n      argList.removeChild(lastArg);\n      compiler.reportCodeChange();\n    } else {\n      // don't remove any of the earlier parameters.\n      break;\n    }\n  }\n} else {\n  callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d8430fe6 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,47 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+Preconditions.checkState(function.isFunction());\n+\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+  // The parameters object literal setters can not be removed.\n+  return;\n+}\n+\n+Node argList = getFunctionArgList(function);\n+\n+boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+if (!modifyCallers) {\n+  // Strip unreferenced args off the end of the function declaration.\n+  while (argList.hasChildren()) {\n+    Node lastArg = argList.getLastChild();\n+    if (NodeUtil.isVarArgsFunction(function)) {\n+      // don't remove variable arguments. A variable arguments parameter\n+      // is considered used if the length of the argument list is greater\n+      // than the number of parameters, or if the arguments object is modified.\n+      if (lastArg.isName() && lastArg.getString().equals(\"arguments\")) {\n+        referenced.add(Scope.createArgumentsVar(fnScope));\n+        break;\n+      } else if (NodeUtil.isRest(lastArg)) {\n+        break;\n+      }\n+    }\n+\n+    Var var = fnScope.getVar(lastArg.getString());\n+\n+    if (!referenced.contains(var)) {\n+      argList.removeChild(lastArg);\n+      compiler.reportCodeChange();\n+    } else {\n+      // don't remove any of the earlier parameters.\n+      break;\n+    }\n+  }\n+} else {\n+  callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}