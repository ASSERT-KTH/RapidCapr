{
    "patch": "public class MyClass<T> {\n    private T value;\n\n    public MyClass(T value) {\n        this.value = value;\n    }\n\n    public T getValue() {\n        return value;\n    }\n\n    public static void main(String[] args) {\n        MyClass<Integer> values = new MyClass<>(null);\n        assertFalse(((Iterable) values.getValue()).iterator().hasNext());\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..c9c924139 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,22 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public class MyClass<T> {\n+    private T value;\n+\n+    public MyClass(T value) {\n+        this.value = value;\n+    }\n+\n+    public T getValue() {\n+        return value;\n+    }\n+\n+    public static void main(String[] args) {\n+        MyClass<Integer> values = new MyClass<>(null);\n+        assertFalse(((Iterable) values.getValue()).iterator().hasNext());\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}