{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant;\n            int maxDay;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n                DurationFieldType fieldType = partial.getFieldType(i);\n                if (fieldType == null) {\n                    continue;\n                }\n                int curValue = values[i];\n                int newValue;\n                if (fieldType.equals(DateTimeFieldType.monthOfYear())){\n                    newValue = curValue+valueToAdd;\n                    instant = partial.getFieldType(i).getField(iChronology).set(0L, newValue);\n                    int newMonthValue = iChronology.getMonthOfYear(instant);\n                    if (newMonthValue != newValue) {\n                        throw new org.joda.time.IllegalFieldValueException(DateTimeFieldType.monthOfYear(), String.valueOf(newValue));\n                    }\n                } else {\n                    instant = partial.getFieldType(i).getField(iChronology).set(0L, curValue);\n                }\n                if (fieldType.equals(DateTimeFieldType.year())){\n                    int newMonthValue = iChronology.get(instant, fieldType);\n                    maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n                     if (values[DateTimeFieldType.monthOfYear().getFieldIndex()] == 2 && values[DateTimeFieldType.dayOfMonth().getFieldIndex()] == 29 && !iChronology.isLeap(iChronology.get(instant, fieldType))) {\n                        //\u5f53\u524d\u65e5\u671f\u662f\u95f0\u5e74\u4e8c\u670829\u65e5,\u5982\u679c\u52a0\u4e0a\u540e\u4e0d\u662f\u95f0\u5e74\u800c\u4e14\u5f53\u6708\u6700\u5927\u5929\u6570\u6ca1\u8fbe\u523029\u5929\uff0c\u5c31\u6539\u4e3a28\u53f7\n                        maxDay = 28;\n                        if (newMonthValue == 2 && instant+iChronology.dayOfMonth().getField(1).getFieldValue(iChronology.get(instant, fieldType)) > iChronology.getDateTimeMillis(2100, 3, 1, 0)) {\n                            //\u5f53\u6708\u6700\u5927\u5929\u6570\u6536\u5230\u5e74\u4efd\u5f71\u54cd\uff0c\u5230\u8fbe2100\u5e74\u65f63\u67081\u65e5\u53d8\u621028\u5929\u540e\uff0c\u5e94\u5f53\u628a\u5f53\u524d\u65e5\u671f\u6539\u621028\u53f7\n                            instant = iChronology.dayOfMonth().set(instant, 28);\n                        }\n                    }\n                }else{\n                    maxDay = iChronology.getMaximumValue(fieldType.getRangeDurationType(), instant);\n                }\n                if (newMonthValue == 2 && curValue == 29 && iChronology.dayOfMonth().getMaximumValue(instant) == 28) {\n                    //\u5f53\u524d\u65e5\u671f\u662f\u95f0\u5e74\u4e8c\u670829\u65e5\uff0c\u5982\u679c\u52a0\u4e0a\u540e\u662f\u5e73\u5e74\u4e8c\u6708\uff0c\u5c31\u6539\u4e3a28\u53f7\n                    instant = iChronology.dayOfMonth().set(instant, 28);\n                }\n                if (fieldType.equals(DateTimeFieldType.dayOfMonth())) {\n                    maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n                    if(curValue > maxDay){\n                        instant = iChronology.dayOfMonth().set(instant, maxDay);\n                    }else{\n                        instant = iChronology.dayOfMonth().set(instant, curValue);\n                    }\n                    if(newInstant == instant && !fieldType.equals(DateTimeFieldType.monthOfYear())){\n                        throw new org.joda.time.IllegalFieldValueException(fieldType, String.valueOf(curValue));\n                    }\n                } else {\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, curValue);\n                }\n            }\n            instant = add(instant, valueToAdd);\n            int[] result = iChronology.get(partial, instant);\n            if (result[DateTimeFieldType.monthOfYear().getFieldIndex()] != (values[DateTimeFieldType.monthOfYear().getFieldIndex()] + valueToAdd)) {\n                throw new org.joda.time.IllegalFieldValueException(DateTimeFieldType.monthOfYear(), String.valueOf(result[DateTimeFieldType.monthOfYear().getFieldIndex()]));\n            }\n            return result;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..97912b61 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,71 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n         // overridden as superclass algorithm can't handle\n         // 2004-02-29 + 48 months -> 2008-02-29 type dates\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            long instant;\n+            int maxDay;\n+             for (int i = 0, isize = partial.size(); i < isize; i++) {\n+                DurationFieldType fieldType = partial.getFieldType(i);\n+                if (fieldType == null) {\n+                    continue;\n+                }\n+                int curValue = values[i];\n+                int newValue;\n+                if (fieldType.equals(DateTimeFieldType.monthOfYear())){\n+                    newValue = curValue+valueToAdd;\n+                    instant = partial.getFieldType(i).getField(iChronology).set(0L, newValue);\n+                    int newMonthValue = iChronology.getMonthOfYear(instant);\n+                    if (newMonthValue != newValue) {\n+                        throw new org.joda.time.IllegalFieldValueException(DateTimeFieldType.monthOfYear(), String.valueOf(newValue));\n+                    }\n+                } else {\n+                    instant = partial.getFieldType(i).getField(iChronology).set(0L, curValue);\n+                }\n+                if (fieldType.equals(DateTimeFieldType.year())){\n+                    int newMonthValue = iChronology.get(instant, fieldType);\n+                    maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n+                     if (values[DateTimeFieldType.monthOfYear().getFieldIndex()] == 2 && values[DateTimeFieldType.dayOfMonth().getFieldIndex()] == 29 && !iChronology.isLeap(iChronology.get(instant, fieldType))) {\n+                        //\u5f53\u524d\u65e5\u671f\u662f\u95f0\u5e74\u4e8c\u670829\u65e5,\u5982\u679c\u52a0\u4e0a\u540e\u4e0d\u662f\u95f0\u5e74\u800c\u4e14\u5f53\u6708\u6700\u5927\u5929\u6570\u6ca1\u8fbe\u523029\u5929\uff0c\u5c31\u6539\u4e3a28\u53f7\n+                        maxDay = 28;\n+                        if (newMonthValue == 2 && instant+iChronology.dayOfMonth().getField(1).getFieldValue(iChronology.get(instant, fieldType)) > iChronology.getDateTimeMillis(2100, 3, 1, 0)) {\n+                            //\u5f53\u6708\u6700\u5927\u5929\u6570\u6536\u5230\u5e74\u4efd\u5f71\u54cd\uff0c\u5230\u8fbe2100\u5e74\u65f63\u67081\u65e5\u53d8\u621028\u5929\u540e\uff0c\u5e94\u5f53\u628a\u5f53\u524d\u65e5\u671f\u6539\u621028\u53f7\n+                            instant = iChronology.dayOfMonth().set(instant, 28);\n+                        }\n+                    }\n+                }else{\n+                    maxDay = iChronology.getMaximumValue(fieldType.getRangeDurationType(), instant);\n+                }\n+                if (newMonthValue == 2 && curValue == 29 && iChronology.dayOfMonth().getMaximumValue(instant) == 28) {\n+                    //\u5f53\u524d\u65e5\u671f\u662f\u95f0\u5e74\u4e8c\u670829\u65e5\uff0c\u5982\u679c\u52a0\u4e0a\u540e\u662f\u5e73\u5e74\u4e8c\u6708\uff0c\u5c31\u6539\u4e3a28\u53f7\n+                    instant = iChronology.dayOfMonth().set(instant, 28);\n+                }\n+                if (fieldType.equals(DateTimeFieldType.dayOfMonth())) {\n+                    maxDay = iChronology.dayOfMonth().getMaximumValue(instant);\n+                    if(curValue > maxDay){\n+                        instant = iChronology.dayOfMonth().set(instant, maxDay);\n+                    }else{\n+                        instant = iChronology.dayOfMonth().set(instant, curValue);\n+                    }\n+                    if(newInstant == instant && !fieldType.equals(DateTimeFieldType.monthOfYear())){\n+                        throw new org.joda.time.IllegalFieldValueException(fieldType, String.valueOf(curValue));\n+                    }\n+                } else {\n+                    instant = partial.getFieldType(i).getField(iChronology).set(instant, curValue);\n+                }\n             }\n             instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n-    }\n+            int[] result = iChronology.get(partial, instant);\n+            if (result[DateTimeFieldType.monthOfYear().getFieldIndex()] != (values[DateTimeFieldType.monthOfYear().getFieldIndex()] + valueToAdd)) {\n+                throw new org.joda.time.IllegalFieldValueException(DateTimeFieldType.monthOfYear(), String.valueOf(result[DateTimeFieldType.monthOfYear().getFieldIndex()]));\n+            }\n+            return result;\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}