{
    "patch": "    if (typeOfThis != null) {\n      JSType resolvedTypeOfThis = typeOfThis.resolve(t, scope);\n      if (!(resolvedTypeOfThis instanceof ObjectType)) {\n        t.report(typeOfThis.getSourceName(), typeOfThis.getSourceLineNumber(),\n            \"parameter 'this' is not an object\");\n        return getNativeType(UNKNOWN_TYPE);\n      }\n      typeOfThis = (ObjectType) resolvedTypeOfThis;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..17f4f2b5 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,14 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    if (typeOfThis != null) {\n+      JSType resolvedTypeOfThis = typeOfThis.resolve(t, scope);\n+      if (!(resolvedTypeOfThis instanceof ObjectType)) {\n+        t.report(typeOfThis.getSourceName(), typeOfThis.getSourceLineNumber(),\n+            \"parameter 'this' is not an object\");\n+        return getNativeType(UNKNOWN_TYPE);\n+      }\n+      typeOfThis = (ObjectType) resolvedTypeOfThis;\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}