{
    "patch": "import com.google.javascript.jscomp.NodeUtil;\nimport com.google.javascript.jscomp.Scope;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\nimport com.google.javascript.rhino.jstype.JSType;\nimport com.google.javascript.rhino.jstype.JSTypeRegistry;\nimport com.google.javascript.rhino.jstype.RecordType;\nimport com.google.javascript.rhino.jstype.TemplateType;\nimport com.google.javascript.rhino.jstype.TemplatizedType;\nimport com.google.javascript.rhino.jstype.UnionType;\nimport com.google.javascript.rhino.jstype.VoidType;\nimport com.google.javascript.rhino.jstype.WithType;\nimport com.google.javascript.rhino.jstype.template.TemplateTypeMap;\nimport com.google.javascript.rhino.jstype.template.TemplateTypeMap.Builder;\nimport com.google.javascript.rhino.jstype.template.TemplateTypeParameter;\nimport com.google.javascript.rhino.jstype.template.TemplateTypeReplacer;\nimport com.google.javascript.rhino.jstype.template.TypeMatchingStrategy;\nimport com.google.javascript.rhino.testing.Asserts;\n\nimport com.google.common.base.Preconditions;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nclass ProgramRepairTool {\n\n    private final Set<Var> referenced = new HashSet<>();\n    private final AbstractCompiler compiler;\n    private final boolean modifyCallSites;\n\n    ProgramRepairTool(AbstractCompiler compiler, boolean modifyCallSites) {\n        this.compiler = compiler;\n        this.modifyCallSites = modifyCallSites;\n    }\n\n    private Node getFunctionArgList(Node function) {\n        Node paramList = NodeUtil.getFunctionParameters(function);\n        if (paramList != null) {\n            return paramList;\n        }\n        return null;\n    }\n\n    void removeUnreferencedFunctionArgs(Scope fnScope) {\n        // Notice that removing unreferenced function args breaks\n        // Function.prototype.length. In advanced mode, we don't really care\n        // about this: we consider \"length\" the equivalent of reflecting on\n        // the function's lexical source.\n        //\n        // Rather than create a new option for this, we assume that if the user\n        // is removing globals, then it's OK to remove unused function args.\n        //\n        // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n        Node function = fnScope.getRootNode();\n\n        Preconditions.checkState(function.isFunction());\n        if (NodeUtil.isGetOrSetKey(function.getParent())) {\n            // The parameters object literal setters can not be removed.\n            return;\n        }\n\n        Node argList = getFunctionArgList(function);\n        boolean modifyCallers = modifyCallSites\n            && callSiteOptimizer.canModifyCallers(function);\n        if (!modifyCallers) {\n            // Strip unreferenced args off the end of the function declaration.\n            Node arg = argList.getFirstChild();\n            while (arg != null) {\n                Node next = arg.getNext();\n                Var var = fnScope.getVar(arg.getString());\n                if (!referenced.contains(var)) {\n                    arg.detach();\n                    compiler.reportChangeToEnclosingScope(arg);\n                } else if (var.isReferenced()) {\n                    referenced.add(var);\n                }\n                arg = next;\n            }\n        } else {\n            callSiteOptimizer.optimize(fnScope, referenced);\n        }\n    }\n  \n    // implementation of Var class in other files\n\n    // implementation of CallSiteOptimizer class in other files\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..3ccd3c42 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,93 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n+import com.google.javascript.jscomp.NodeUtil;\n+import com.google.javascript.jscomp.Scope;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.jstype.JSType;\n+import com.google.javascript.rhino.jstype.JSTypeRegistry;\n+import com.google.javascript.rhino.jstype.RecordType;\n+import com.google.javascript.rhino.jstype.TemplateType;\n+import com.google.javascript.rhino.jstype.TemplatizedType;\n+import com.google.javascript.rhino.jstype.UnionType;\n+import com.google.javascript.rhino.jstype.VoidType;\n+import com.google.javascript.rhino.jstype.WithType;\n+import com.google.javascript.rhino.jstype.template.TemplateTypeMap;\n+import com.google.javascript.rhino.jstype.template.TemplateTypeMap.Builder;\n+import com.google.javascript.rhino.jstype.template.TemplateTypeParameter;\n+import com.google.javascript.rhino.jstype.template.TemplateTypeReplacer;\n+import com.google.javascript.rhino.jstype.template.TypeMatchingStrategy;\n+import com.google.javascript.rhino.testing.Asserts;\n+\n+import com.google.common.base.Preconditions;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+class ProgramRepairTool {\n+\n+    private final Set<Var> referenced = new HashSet<>();\n+    private final AbstractCompiler compiler;\n+    private final boolean modifyCallSites;\n+\n+    ProgramRepairTool(AbstractCompiler compiler, boolean modifyCallSites) {\n+        this.compiler = compiler;\n+        this.modifyCallSites = modifyCallSites;\n+    }\n+\n+    private Node getFunctionArgList(Node function) {\n+        Node paramList = NodeUtil.getFunctionParameters(function);\n+        if (paramList != null) {\n+            return paramList;\n+        }\n+        return null;\n+    }\n+\n+    void removeUnreferencedFunctionArgs(Scope fnScope) {\n+        // Notice that removing unreferenced function args breaks\n+        // Function.prototype.length. In advanced mode, we don't really care\n+        // about this: we consider \"length\" the equivalent of reflecting on\n+        // the function's lexical source.\n+        //\n+        // Rather than create a new option for this, we assume that if the user\n+        // is removing globals, then it's OK to remove unused function args.\n+        //\n+        // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+        Node function = fnScope.getRootNode();\n+\n+        Preconditions.checkState(function.isFunction());\n+        if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+            // The parameters object literal setters can not be removed.\n+            return;\n+        }\n+\n+        Node argList = getFunctionArgList(function);\n+        boolean modifyCallers = modifyCallSites\n+            && callSiteOptimizer.canModifyCallers(function);\n+        if (!modifyCallers) {\n+            // Strip unreferenced args off the end of the function declaration.\n+            Node arg = argList.getFirstChild();\n+            while (arg != null) {\n+                Node next = arg.getNext();\n+                Var var = fnScope.getVar(arg.getString());\n+                if (!referenced.contains(var)) {\n+                    arg.detach();\n+                    compiler.reportChangeToEnclosingScope(arg);\n+                } else if (var.isReferenced()) {\n+                    referenced.add(var);\n+                }\n+                arg = next;\n+            }\n         } else {\n-          break;\n+            callSiteOptimizer.optimize(fnScope, referenced);\n         }\n-      }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n     }\n-  }\n+  \n+    // implementation of Var class in other files\n+\n+    // implementation of CallSiteOptimizer class in other files\n+}\n \n \n   /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}