{
    "patch": "import java.util.Comparator;\nimport org.apache.commons.math3.analysis.MultivariateFunction;\nimport org.apache.commons.math3.exception.TooManyEvaluationsException;\nimport org.apache.commons.math3.optim.PointValuePair;\nimport org.apache.commons.math3.optim.SimpleBounds;\nimport org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex;\nimport org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;\nimport org.apache.commons.math3.random.RandomGenerator;\nimport org.apache.commons.math3.random.RandomGeneratorFactory;\n\nprotected void iterateSimplex(final Comparator<PointValuePair> comparator)\n    throws TooManyEvaluationsException, EvaluationException, OptimizationException {\n    final double[] xMin = getStartPoint();\n    final int numParameters = xMin.length;\n    final int maxEval = getMaxEvaluations();\n    final MultivariateFunction evalFunc = new SimplexOptimizerFunctionWrapper(this, getMaxEvaluations(), getConvergenceChecker());\n    final SimpleBounds bounds = getSimpleBounds();\n    final RandomGenerator generator = RandomGeneratorFactory.createRandomGenerator(getRandomSeed());\n    final NelderMeadSimplex simplex = new NelderMeadSimplex(xMin, generator.nextDoubles(numParameters), getSimplexSize(), bounds);\n    int i = 0;\n    while (++i <= maxEval) {\n        updateBest(simplex.getPoint(0), simplex.getFunctionValue(0), false);\n        final PointValuePair prevWorst = AbstractSimplex.getPreviousVertex(simplex);\n        \n        // Perform a reflection step\n        final PointValuePair reflected = evaluateNewSimplex(simplex, comparator, evalFunc, AbstractSimplex.transform(simplex, ReflectionTransform.R_SINGLE));\n\n        if (comparator.compare(reflected, prevWorst) < 0) {\n            updateBest(reflected, true);\n            final PointValuePair expanded = evaluateNewSimplex(simplex, comparator, evalFunc, AbstractSimplex.transform(simplex, ReflectionTransform.E_SINGLE));\n            updateBest(expanded, true);\n\n            if (comparator.compare(expanded, reflected) < 0) {\n                simplex.setPoint(simplex.getDimension() - 1, expanded);\n            } else {\n                simplex.setPoint(simplex.getDimension() - 1, reflected);\n            }\n        } else if (comparator.compare(reflected, simplex.getPoint(simplex.getDimension() - 2)) >= 0) {\n            if (comparator.compare(reflected, prevWorst) < 0) {\n                updateBest(reflected, true);\n                simplex.setPoint(simplex.getDimension() - 1, reflected);\n            } else {\n                final PointValuePair contracted = evaluateNewSimplex(simplex, comparator, evalFunc, AbstractSimplex.transform(simplex, ReflectionTransform.C_SINGLE));\n                if (comparator.compare(contracted, prevWorst) < 0) {\n                    updateBest(contracted, true);\n                    simplex.setPoint(simplex.getDimension() - 1, contracted);\n                } else {\n                    shrink(comparator, evalFunc, simplex);\n                }\n            }\n        } else {\n            simplex.setPoint(simplex.getDimension() - 1, reflected);\n        }\n\n        if (isConverged(simplex)) {\n            return;\n        }\n    }\n    throw new OptimizationException(\"Maximal number of evaluations exceeded\");\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..1e7cb1ba8 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,66 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n+import java.util.Comparator;\n+import org.apache.commons.math3.analysis.MultivariateFunction;\n+import org.apache.commons.math3.exception.TooManyEvaluationsException;\n+import org.apache.commons.math3.optim.PointValuePair;\n+import org.apache.commons.math3.optim.SimpleBounds;\n+import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex;\n+import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;\n+import org.apache.commons.math3.random.RandomGenerator;\n+import org.apache.commons.math3.random.RandomGeneratorFactory;\n+\n+protected void iterateSimplex(final Comparator<PointValuePair> comparator)\n+    throws TooManyEvaluationsException, EvaluationException, OptimizationException {\n+    final double[] xMin = getStartPoint();\n+    final int numParameters = xMin.length;\n+    final int maxEval = getMaxEvaluations();\n+    final MultivariateFunction evalFunc = new SimplexOptimizerFunctionWrapper(this, getMaxEvaluations(), getConvergenceChecker());\n+    final SimpleBounds bounds = getSimpleBounds();\n+    final RandomGenerator generator = RandomGeneratorFactory.createRandomGenerator(getRandomSeed());\n+    final NelderMeadSimplex simplex = new NelderMeadSimplex(xMin, generator.nextDoubles(numParameters), getSimplexSize(), bounds);\n+    int i = 0;\n+    while (++i <= maxEval) {\n+        updateBest(simplex.getPoint(0), simplex.getFunctionValue(0), false);\n+        final PointValuePair prevWorst = AbstractSimplex.getPreviousVertex(simplex);\n+        \n+        // Perform a reflection step\n+        final PointValuePair reflected = evaluateNewSimplex(simplex, comparator, evalFunc, AbstractSimplex.transform(simplex, ReflectionTransform.R_SINGLE));\n+\n+        if (comparator.compare(reflected, prevWorst) < 0) {\n+            updateBest(reflected, true);\n+            final PointValuePair expanded = evaluateNewSimplex(simplex, comparator, evalFunc, AbstractSimplex.transform(simplex, ReflectionTransform.E_SINGLE));\n+            updateBest(expanded, true);\n+\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                simplex.setPoint(simplex.getDimension() - 1, expanded);\n+            } else {\n+                simplex.setPoint(simplex.getDimension() - 1, reflected);\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+        } else if (comparator.compare(reflected, simplex.getPoint(simplex.getDimension() - 2)) >= 0) {\n+            if (comparator.compare(reflected, prevWorst) < 0) {\n+                updateBest(reflected, true);\n+                simplex.setPoint(simplex.getDimension() - 1, reflected);\n+            } else {\n+                final PointValuePair contracted = evaluateNewSimplex(simplex, comparator, evalFunc, AbstractSimplex.transform(simplex, ReflectionTransform.C_SINGLE));\n+                if (comparator.compare(contracted, prevWorst) < 0) {\n+                    updateBest(contracted, true);\n+                    simplex.setPoint(simplex.getDimension() - 1, contracted);\n+                } else {\n+                    shrink(comparator, evalFunc, simplex);\n+                }\n             }\n-\n+        } else {\n+            simplex.setPoint(simplex.getDimension() - 1, reflected);\n         }\n \n+        if (isConverged(simplex)) {\n+            return;\n+        }\n     }\n+    throw new OptimizationException(\"Maximal number of evaluations exceeded\");\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}