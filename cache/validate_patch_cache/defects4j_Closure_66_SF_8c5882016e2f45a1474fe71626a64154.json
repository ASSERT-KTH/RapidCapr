{
    "patch": "public double getTypedPercent(JSONObject obj) {\n    double keys = 0.0;\n    double typedKeys = 0.0;\n    Iterator<String> iterator = obj.keys();\n    while (iterator.hasNext()) { \n        String key = iterator.next();\n        keys += 1.0;\n        if (obj.get(key) instanceof Number) {\n            typedKeys += 1.0;\n        }\n    }\n    return typedKeys / keys * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..bcd7f34b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(JSONObject obj) {\n+    double keys = 0.0;\n+    double typedKeys = 0.0;\n+    Iterator<String> iterator = obj.keys();\n+    while (iterator.hasNext()) { \n+        String key = iterator.next();\n+        keys += 1.0;\n+        if (obj.get(key) instanceof Number) {\n+            typedKeys += 1.0;\n+        }\n+    }\n+    return typedKeys / keys * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}