{
    "patch": "private void inferTypesForRecord(ObjectType objectType,\n        ObjectType constraintObject) {\n    for (String propName : constraintObject.getOwnPropertyNames()) {\n        JSType constraintPropType = constraintObject.getPropertyType(propName);\n        if (!objectType.isPropertyTypeInferred(propName)\n                && !objectType.isPropertyTypeDeclared(propName)) {\n            JSType inferredType;\n            if (constraintPropType.isConstructor()) {\n                FunctionType constrFnType = constraintPropType.toMaybeFunctionType();\n                inferredType = constrFnType.getReturnType();\n            } else if (constraintPropType.isInterface()) {\n                inferredType = constraintPropType;\n            } else {\n                inferredType = getNativeType(VOID_TYPE).getLeastSupertype(constraintPropType);\n            }\n            objectType.defineInferredProperty(propName, inferredType, null);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..06a4430c 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,42 +1111,25 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n-    if (type == null || constraint == null) {\n-      return;\n-    }\n-\n-    ObjectType constraintObj =\n-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+private void inferTypesForRecord(ObjectType objectType,\n+        ObjectType constraintObject) {\n+    for (String propName : constraintObject.getOwnPropertyNames()) {\n+        JSType constraintPropType = constraintObject.getPropertyType(propName);\n+        if (!objectType.isPropertyTypeInferred(propName)\n+                && !objectType.isPropertyTypeDeclared(propName)) {\n+            JSType inferredType;\n+            if (constraintPropType.isConstructor()) {\n+                FunctionType constrFnType = constraintPropType.toMaybeFunctionType();\n+                inferredType = constrFnType.getReturnType();\n+            } else if (constraintPropType.isInterface()) {\n+                inferredType = constraintPropType;\n+            } else {\n+                inferredType = getNativeType(VOID_TYPE).getLeastSupertype(constraintPropType);\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n+            objectType.defineInferredProperty(propName, inferredType, null);\n         }\n-      }\n     }\n-  }\n-\n-  /**\n-   * If we access a property of a symbol, then that symbol is not\n-   * null or undefined.\n-   */\n-  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n-    if (n.isQualifiedName()) {\n-      JSType type = getJSType(n);\n-      JSType narrowed = type.restrictByNotNullOrUndefined();\n-      if (type != narrowed) {\n-        scope = narrowScope(scope, n, narrowed);\n-      }\n+}\n     }\n     return scope;\n   }",
    "result_reason": "error: modifier private not allowed here",
    "test_result": "ERROR"
}