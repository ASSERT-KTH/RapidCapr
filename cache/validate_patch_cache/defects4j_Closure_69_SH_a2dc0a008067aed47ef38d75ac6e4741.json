{
    "patch": "      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      Node parent = n.getParent();\n      if (!NodeUtil.isGet(parent) && !NodeUtil.isGetElem(parent)) {\n        for (JSType thisType : functionType.getTypeOfThis().getAlternatesWithoutUndefined()) {\n          if (!(thisType instanceof FunctionType || thisType.isInterface())) {\n            report(t, n, INCORRECT_THIS_TYPE, thisType.toString());\n          }\n        }\n      }\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..3402f107 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      // Functions with explicit 'this' types must be called in a GETPROP\n+      // or GETELEM.\n+      Node parent = n.getParent();\n+      if (!NodeUtil.isGet(parent) && !NodeUtil.isGetElem(parent)) {\n+        for (JSType thisType : functionType.getTypeOfThis().getAlternatesWithoutUndefined()) {\n+          if (!(thisType instanceof FunctionType || thisType.isInterface())) {\n+            report(t, n, INCORRECT_THIS_TYPE, thisType.toString());\n+          }\n+        }\n+      }\n+\n+      visitParameterList(t, n, functionType);\n+      ensureTyped(t, n, functionType.getReturnType());\n+    } else {\n+      ensureTyped(t, n);\n+    }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}