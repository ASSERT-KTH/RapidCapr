{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    if (oldMockHandler == null) {\n        // Mock doesn't have a handler yet. Use Mockito's default.\n        oldMockHandler = (MockHandlerInterface<T>) org.mockito.internal.creation.cglib.CglibMockMaker.INSTANCE.getHandler(mock);\n        setMockHandler(mock, oldMockHandler);\n    }\n    MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    if (mock instanceof Factory) {\n        ((Factory) mock).setCallback(0, newFilter);\n    } else {\n        mock = (T) Proxy.newProxyInstance(\n                mock.getClass().getClassLoader(),\n                new Class<?>[]{mock.getClass().getInterfaces()[0]},\n                newFilter);\n        setMockHandler(mock, newMockHandler);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..9d283b9b7 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,26 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    if (oldMockHandler == null) {\n+        // Mock doesn't have a handler yet. Use Mockito's default.\n+        oldMockHandler = (MockHandlerInterface<T>) org.mockito.internal.creation.cglib.CglibMockMaker.INSTANCE.getHandler(mock);\n+        setMockHandler(mock, oldMockHandler);\n+    }\n+    MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    if (mock instanceof Factory) {\n+        ((Factory) mock).setCallback(0, newFilter);\n+    } else {\n+        mock = (T) Proxy.newProxyInstance(\n+                mock.getClass().getClassLoader(),\n+                new Class<?>[]{mock.getClass().getInterfaces()[0]},\n+                newFilter);\n+        setMockHandler(mock, newMockHandler);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}