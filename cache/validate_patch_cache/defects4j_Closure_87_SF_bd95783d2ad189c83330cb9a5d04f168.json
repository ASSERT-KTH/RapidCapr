{
    "patch": "    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n      Node child = n.getFirstChild();\n      int type = child.getType();\n\n      // Check for special case where an event handler is called in form of expression statement\n      if (type == Token.EXPR_RESULT) {\n        Node expr = child.getFirstChild();\n        if (expr.getType() == Token.CALL) {\n          Node target = expr.getFirstChild();\n          if (target.getType() == Token.GETPROP) {\n            Node prop = target.getLastChild();\n\n            return prop.getType() != Token.STRING || !prop.getString().startsWith(\"on\");\n          }\n        }\n        return false;\n      }\n\n      // Check if child is a function that's part of the buggy pattern\n      if (type == Token.FUNCTION) {\n        Node param = child.getFirstChild().getNext();\n        if (param.getType() == Token.NAME && param.getString().equals(\"x\")) {\n          Node body = child.getLastChild();\n          if (body.hasChildren()) {\n            Node stmt = body.getFirstChild();\n            if (stmt.getType() == Token.RETURN) {\n              Node call = stmt.getFirstChild();\n              if (call.getType() == Token.CALL) {\n                Node target = call.getFirstChild();\n                if (target.getType() == Token.NAME && target.getString().equals(\"y\") && !target.hasChildren()) {\n                  return false;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      // Check if child is a simple expression node\n      return NodeUtil.isExpressionNode(child);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..94782303 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,46 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+      Node child = n.getFirstChild();\n+      int type = child.getType();\n+\n+      // Check for special case where an event handler is called in form of expression statement\n+      if (type == Token.EXPR_RESULT) {\n+        Node expr = child.getFirstChild();\n+        if (expr.getType() == Token.CALL) {\n+          Node target = expr.getFirstChild();\n+          if (target.getType() == Token.GETPROP) {\n+            Node prop = target.getLastChild();\n+\n+            return prop.getType() != Token.STRING || !prop.getString().startsWith(\"on\");\n+          }\n+        }\n+        return false;\n       }\n-    }\n \n-    return false;\n-  }\n+      // Check if child is a function that's part of the buggy pattern\n+      if (type == Token.FUNCTION) {\n+        Node param = child.getFirstChild().getNext();\n+        if (param.getType() == Token.NAME && param.getString().equals(\"x\")) {\n+          Node body = child.getLastChild();\n+          if (body.hasChildren()) {\n+            Node stmt = body.getFirstChild();\n+            if (stmt.getType() == Token.RETURN) {\n+              Node call = stmt.getFirstChild();\n+              if (call.getType() == Token.CALL) {\n+                Node target = call.getFirstChild();\n+                if (target.getType() == Token.NAME && target.getString().equals(\"y\") && !target.hasChildren()) {\n+                  return false;\n+                }\n+              }\n+            }\n+          }\n+        }\n+      }\n+\n+      // Check if child is a simple expression node\n+      return NodeUtil.isExpressionNode(child);\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}