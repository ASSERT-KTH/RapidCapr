{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    Gson gson = new Gson();\n    Type type = new TypeToken<Map<String, Object>>(){}.getType();\n    Map<String, Object> map = gson.fromJson(jsonStr, type);\n    int totalCount = map.size();\n    int typedCount = 0;\n    for (Map.Entry<String, Object> entry : map.entrySet()) {\n        if (entry.getValue() != null) {\n            typedCount++;\n        }\n    }\n    return 100.0 * typedCount / totalCount;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..69cf03c8 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    Gson gson = new Gson();\n+    Type type = new TypeToken<Map<String, Object>>(){}.getType();\n+    Map<String, Object> map = gson.fromJson(jsonStr, type);\n+    int totalCount = map.size();\n+    int typedCount = 0;\n+    for (Map.Entry<String, Object> entry : map.entrySet()) {\n+        if (entry.getValue() != null) {\n+            typedCount++;\n+        }\n+    }\n+    return 100.0 * typedCount / totalCount;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}