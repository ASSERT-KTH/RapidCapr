{
    "patch": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {\n        return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    String line = stream.getRemainingJSDocLine();\n    if (option != WhitespaceOption.PRESERVE) {\n        line = line.trim();\n    }\n\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n\n    state = State.SEARCHING_ANNOTATION;\n    token = next();\n\n    boolean ignoreStar = false;\n\n    do {\n        switch (token) {\n            case STAR:\n                if (ignoreStar) {\n                    // Mark the position after the star as the new start of the line.\n                } else {\n                    if (builder.length() > 0 && !Character.isWhitespace(builder.charAt(builder.length() - 1)))\n                    {\n                        builder.append(' ');\n                    }\n                    builder.append('*');\n                }\n                ignoreStar = false;\n                break;\n\n            case EOL:\n                if (option != WhitespaceOption.SINGLE_LINE) {\n                    builder.append('\\n');\n                }\n                ignoreStar = true;\n                break;\n\n            default:\n                ignoreStar = false;\n                state = State.SEARCHING_ANNOTATION;\n\n                // Only add space if necessary.\n                if (builder.length() > 0 && !Character.isWhitespace(builder.charAt(builder.length() - 1)))\n                {\n                    builder.append(' ');\n                }\n                builder.append(toString(token));\n\n                line = stream.getRemainingJSDocLine();\n\n                if (option != WhitespaceOption.PRESERVE) {\n                    line = line.trim();\n                }\n\n                break;\n        }\n\n        token = next();\n\n        // Trim whitespace between non-whitespace tokens\n        if (!ignoreStar && builder.length() > 0 && !Character.isWhitespace(builder.charAt(builder.length() - 1))\n                && !isEmptyOrWhitespace(line) && !Character.isWhitespace(line.charAt(0))) {\n            builder.append(' ');\n        }\n\n        builder.append(line);\n\n        // Check for EOF or EOC to prevent infinite loop\n        if (token == JsDocToken.EOF || token == JsDocToken.EOC) {\n            break;\n        }\n\n        // If trimming the end of the line results in an empty string,\n        // then exit the loop\n        line = stream.getRemainingJSDocLine();\n        if (isEmptyOrWhitespace(line)) {\n            break;\n        }\n        if (option != WhitespaceOption.PRESERVE) {\n            line = trimEnd(line);\n        }\n    } while (true);\n\n    String multilineText = builder.toString();\n\n    if (option != WhitespaceOption.PRESERVE) {\n        multilineText = multilineText.trim();\n    }\n\n    int endLineno = stream.getLineno();\n    int endCharno = stream.getCharno();\n\n    if (multilineText.length() > 0) {\n        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n    }\n\n    return new ExtractionInfo(multilineText, token);\n}\n\nprivate static boolean isEmptyOrWhitespace(String text) {\n    if (text == null || text.isEmpty()) {\n        return true;\n    }\n    return text.trim().isEmpty();\n}\n\nprivate static String trimEnd(String string) {\n    int end = string.length() - 1;\n    while (end > 0 && Character.isWhitespace(string.charAt(end))) {\n        end--;\n    }\n    return string.substring(0, end + 1);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..d0707827 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,22 +1326,18 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n-                                                      WhitespaceOption option) {\n-\n-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n-        token == JsDocToken.EOF) {\n-      return new ExtractionInfo(\"\", token);\n+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n+    if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {\n+        return new ExtractionInfo(\"\", token);\n     }\n \n     stream.update();\n     int startLineno = stream.getLineno();\n     int startCharno = stream.getCharno() + 1;\n \n-    // Read the content from the first line.\n     String line = stream.getRemainingJSDocLine();\n     if (option != WhitespaceOption.PRESERVE) {\n-      line = line.trim();\n+        line = line.trim();\n     }\n \n     StringBuilder builder = new StringBuilder();\n@@ -1352,81 +1348,104 @@ public final class JsDocInfoParser {\n \n     boolean ignoreStar = false;\n \n-    // Track the start of the line to count whitespace that\n-    // the tokenizer skipped. Because this case is rare, it's easier\n-    // to do this here than in the tokenizer.\n-\n     do {\n-      switch (token) {\n-        case STAR:\n-          if (ignoreStar) {\n-            // Mark the position after the star as the new start of the line.\n-          } else {\n-            // The star is part of the comment.\n-            if (builder.length() > 0) {\n-              builder.append(' ');\n-            }\n-\n-            builder.append('*');\n-          }\n-\n-          token = next();\n-          continue;\n-\n-        case EOL:\n-          if (option != WhitespaceOption.SINGLE_LINE) {\n-            builder.append(\"\\n\");\n-          }\n+        switch (token) {\n+            case STAR:\n+                if (ignoreStar) {\n+                    // Mark the position after the star as the new start of the line.\n+                } else {\n+                    if (builder.length() > 0 && !Character.isWhitespace(builder.charAt(builder.length() - 1)))\n+                    {\n+                        builder.append(' ');\n+                    }\n+                    builder.append('*');\n+                }\n+                ignoreStar = false;\n+                break;\n+\n+            case EOL:\n+                if (option != WhitespaceOption.SINGLE_LINE) {\n+                    builder.append('\\n');\n+                }\n+                ignoreStar = true;\n+                break;\n+\n+            default:\n+                ignoreStar = false;\n+                state = State.SEARCHING_ANNOTATION;\n+\n+                // Only add space if necessary.\n+                if (builder.length() > 0 && !Character.isWhitespace(builder.charAt(builder.length() - 1)))\n+                {\n+                    builder.append(' ');\n+                }\n+                builder.append(toString(token));\n+\n+                line = stream.getRemainingJSDocLine();\n+\n+                if (option != WhitespaceOption.PRESERVE) {\n+                    line = line.trim();\n+                }\n+\n+                break;\n+        }\n \n-          ignoreStar = true;\n-          token = next();\n-          continue;\n+        token = next();\n \n-        default:\n-          ignoreStar = false;\n-          state = State.SEARCHING_ANNOTATION;\n+        // Trim whitespace between non-whitespace tokens\n+        if (!ignoreStar && builder.length() > 0 && !Character.isWhitespace(builder.charAt(builder.length() - 1))\n+                && !isEmptyOrWhitespace(line) && !Character.isWhitespace(line.charAt(0))) {\n+            builder.append(' ');\n+        }\n \n-              // All tokens must be separated by a space.\n+        builder.append(line);\n \n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n-            String multilineText = builder.toString();\n+        // Check for EOF or EOC to prevent infinite loop\n+        if (token == JsDocToken.EOF || token == JsDocToken.EOC) {\n+            break;\n+        }\n \n-            if (option != WhitespaceOption.PRESERVE) {\n-              multilineText = multilineText.trim();\n-            }\n+        // If trimming the end of the line results in an empty string,\n+        // then exit the loop\n+        line = stream.getRemainingJSDocLine();\n+        if (isEmptyOrWhitespace(line)) {\n+            break;\n+        }\n+        if (option != WhitespaceOption.PRESERVE) {\n+            line = trimEnd(line);\n+        }\n+    } while (true);\n \n-            int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n+    String multilineText = builder.toString();\n \n-            if (multilineText.length() > 0) {\n-              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n-                  endLineno, endCharno);\n-            }\n+    if (option != WhitespaceOption.PRESERVE) {\n+        multilineText = multilineText.trim();\n+    }\n \n-            return new ExtractionInfo(multilineText, token);\n-          }\n+    int endLineno = stream.getLineno();\n+    int endCharno = stream.getCharno();\n \n-          if (builder.length() > 0) {\n-            builder.append(' ');\n-          }\n-          builder.append(toString(token));\n+    if (multilineText.length() > 0) {\n+        jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n+    }\n \n-          line = stream.getRemainingJSDocLine();\n+    return new ExtractionInfo(multilineText, token);\n+}\n \n-          if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n-          }\n+private static boolean isEmptyOrWhitespace(String text) {\n+    if (text == null || text.isEmpty()) {\n+        return true;\n+    }\n+    return text.trim().isEmpty();\n+}\n \n-          builder.append(line);\n-          token = next();\n-      }\n-    } while (true);\n-  }\n+private static String trimEnd(String string) {\n+    int end = string.length() - 1;\n+    while (end > 0 && Character.isWhitespace(string.charAt(end))) {\n+        end--;\n+    }\n+    return string.substring(0, end + 1);\n+}\n \n \n   /**",
    "result_reason": "error: method trimEnd(String) is already defined in class JsDocInfoParser",
    "test_result": "ERROR"
}