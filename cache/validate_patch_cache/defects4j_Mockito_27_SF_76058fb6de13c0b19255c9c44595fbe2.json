{
    "patch": "import org.mockito.cglib.proxy.Callback;\nimport org.mockito.cglib.proxy.Enhancer;\n\npublic <T> void resetMock(T mock) {\n    try {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        Enhancer enhancer = new Enhancer();\n        enhancer.setSuperclass(mock.getClass());\n        enhancer.setCallbackTypes(new Class[] { MethodInterceptorFilter.class });\n        Class<?> proxyClass = enhancer.createClass();\n        Object newProxy = proxyClass.newInstance();\n        ((Factory) newProxy).setCallbacks(new Callback[] { new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS)) });\n        // update the old mock object with the new proxy object\n        ((MockAccess) ((MockitoMock) mock).getMockHandler()).setMockitoInterceptor((MockitoInterceptor) ((Factory) newProxy).getCallback(0));\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..f8f9bf946 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,26 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.cglib.proxy.Callback;\n+import org.mockito.cglib.proxy.Enhancer;\n+\n+public <T> void resetMock(T mock) {\n+    try {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        Enhancer enhancer = new Enhancer();\n+        enhancer.setSuperclass(mock.getClass());\n+        enhancer.setCallbackTypes(new Class[] { MethodInterceptorFilter.class });\n+        Class<?> proxyClass = enhancer.createClass();\n+        Object newProxy = proxyClass.newInstance();\n+        ((Factory) newProxy).setCallbacks(new Callback[] { new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS)) });\n+        // update the old mock object with the new proxy object\n+        ((MockAccess) ((MockitoMock) mock).getMockHandler()).setMockitoInterceptor((MockitoInterceptor) ((Factory) newProxy).getCallback(0));\n+    } catch (Exception e) {\n+        throw new RuntimeException(e);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}