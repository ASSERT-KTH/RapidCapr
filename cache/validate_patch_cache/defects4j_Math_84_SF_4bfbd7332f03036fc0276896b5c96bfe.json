{
    "patch": "            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(expanded, reflectedSimplex[reflectedSimplex.length - 1]) < 0) {\n                    // accept the expanded simplex\n                    simplex = replaceWorstPoint(original, expanded, comparator);\n                } else {\n                    // accept the reflected simplex\n                    simplex = replaceWorstPoint(original, reflected, comparator);\n                }\n\n            } else {\n                // check if we need to perform an intermediate operation\n                final boolean intermediateOperation;\n                if (comparator.compare(reflected, original[original.length - 2]) < 0) {\n                    intermediateOperation = comparator.compare(reflected, original[original.length - 1]) >= 0;\n                } else {\n                    intermediateOperation = comparator.compare(reflected, original[original.length - 1]) > 0;\n                }\n\n                if (intermediateOperation) {\n                    // perform intermediate operation (contraction or multiple contraction)\n                    final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n                    if (comparator.compare(contracted, reflected) < 0) {\n                        // accept the contracted simplex\n                        simplex = replaceWorstPoint(original, contracted, comparator);\n                    } else {\n                        final RealPointValuePair[] contractedSimplex = contractInside(original, sigma, comparator);\n                        simplex = contractedSimplex;\n                    }\n                } else {\n                    // perform a contraction step\n                    final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n                    if (comparator.compare(contracted, best) < 0) {\n                        simplex = replaceWorstPoint(original, contracted, comparator);\n                    } else {\n                        simplex = contractInside(original, sigma, comparator);\n                    }\n                }\n            }\n\n            // check convergence\n            final RealPointValuePair newBest = simplex[0];\n            final double newValue = newBest.getValue();\n            if (Math.abs(best.getValue() - newValue) <= getRelativeThreshold() * (getRelativeThreshold() * Math.abs(newValue) + getAbsoluteThreshold())) {\n                return;\n            }\n\n            // check if the maximum number of evaluations has been exceeded\n            if (getEvaluations() >= getMaxEvaluations()) {\n                throw new OptimizationException(\"Maximum number of evaluations exceeded\");",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..e7b5b0e82 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,8 +58,7 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n \n@@ -75,28 +74,55 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+                if (comparator.compare(expanded, reflectedSimplex[reflectedSimplex.length - 1]) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = replaceWorstPoint(original, expanded, comparator);\n+                } else {\n                     // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                    simplex = replaceWorstPoint(original, reflected, comparator);\n                 }\n \n-                return;\n+            } else {\n+                // check if we need to perform an intermediate operation\n+                final boolean intermediateOperation;\n+                if (comparator.compare(reflected, original[original.length - 2]) < 0) {\n+                    intermediateOperation = comparator.compare(reflected, original[original.length - 1]) >= 0;\n+                } else {\n+                    intermediateOperation = comparator.compare(reflected, original[original.length - 1]) > 0;\n+                }\n \n+                if (intermediateOperation) {\n+                    // perform intermediate operation (contraction or multiple contraction)\n+                    final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+                    if (comparator.compare(contracted, reflected) < 0) {\n+                        // accept the contracted simplex\n+                        simplex = replaceWorstPoint(original, contracted, comparator);\n+                    } else {\n+                        final RealPointValuePair[] contractedSimplex = contractInside(original, sigma, comparator);\n+                        simplex = contractedSimplex;\n+                    }\n+                } else {\n+                    // perform a contraction step\n+                    final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+                    if (comparator.compare(contracted, best) < 0) {\n+                        simplex = replaceWorstPoint(original, contracted, comparator);\n+                    } else {\n+                        simplex = contractInside(original, sigma, comparator);\n+                    }\n+                }\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n             // check convergence\n+            final RealPointValuePair newBest = simplex[0];\n+            final double newValue = newBest.getValue();\n+            if (Math.abs(best.getValue() - newValue) <= getRelativeThreshold() * (getRelativeThreshold() * Math.abs(newValue) + getAbsoluteThreshold())) {\n                 return;\n             }\n \n-        }\n-\n-    }\n+            // check if the maximum number of evaluations has been exceeded\n+            if (getEvaluations() >= getMaxEvaluations()) {\n+                throw new OptimizationException(\"Maximum number of evaluations exceeded\");\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}