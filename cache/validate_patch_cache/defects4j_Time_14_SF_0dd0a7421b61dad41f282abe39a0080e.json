{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        boolean lenient = iChronology.isLenient();\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            int val = values[i];\n            DateTimeField field = partial.getFieldType(i).getField(iChronology);\n            if (i == fieldIndex) {\n                // handle month add with year overflow\n                if (lenient) {\n                    int year = field.get(instant);\n                    val = iChronology.add(field.get(instant), val);\n                    instant = field.set(instant, val);\n                    if (iChronology.getYear(instant) != year) {\n                        throw new IllegalFieldValueException(DateTimeFieldType.year(), \"\", \"\");\n                    }\n                } else {\n                    instant = field.add(instant, val);\n                }\n            } else {\n                instant = field.set(instant, val);\n            }\n        }\n        instant = add(instant, valueToAdd);\n        int[] result = iChronology.get(partial, instant);\n        if (lenient && result[fieldIndex] != values[fieldIndex]) {\n            // handle leap year issue with invalid date like Feb 29th\n            Instant dt = partial.toDateTime(new DateTime(iChronology));\n            DateTimeFieldType type = partial.getFieldType(fieldIndex);\n            if (type == DateTimeFieldType.monthOfYear() && dt.dayOfMonth().getMaximumValue() < values[DateTimeFieldType.dayOfMonth().getFieldIndex()]) {\n                // rollback month\n                result = iChronology.get(partial, iChronology.add(instant, -valueToAdd));\n                if (result[fieldIndex] == values[fieldIndex]) {\n                    throw new IllegalFieldValueException(type, \"\", \"\");\n                }\n            }\n        }\n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..5ab90d37 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,54 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        boolean lenient = iChronology.isLenient();\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            int val = values[i];\n+            DateTimeField field = partial.getFieldType(i).getField(iChronology);\n+            if (i == fieldIndex) {\n+                // handle month add with year overflow\n+                if (lenient) {\n+                    int year = field.get(instant);\n+                    val = iChronology.add(field.get(instant), val);\n+                    instant = field.set(instant, val);\n+                    if (iChronology.getYear(instant) != year) {\n+                        throw new IllegalFieldValueException(DateTimeFieldType.year(), \"\", \"\");\n+                    }\n+                } else {\n+                    instant = field.add(instant, val);\n+                }\n+            } else {\n+                instant = field.set(instant, val);\n+            }\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        instant = add(instant, valueToAdd);\n+        int[] result = iChronology.get(partial, instant);\n+        if (lenient && result[fieldIndex] != values[fieldIndex]) {\n+            // handle leap year issue with invalid date like Feb 29th\n+            Instant dt = partial.toDateTime(new DateTime(iChronology));\n+            DateTimeFieldType type = partial.getFieldType(fieldIndex);\n+            if (type == DateTimeFieldType.monthOfYear() && dt.dayOfMonth().getMaximumValue() < values[DateTimeFieldType.dayOfMonth().getFieldIndex()]) {\n+                // rollback month\n+                result = iChronology.get(partial, iChronology.add(instant, -valueToAdd));\n+                if (result[fieldIndex] == values[fieldIndex]) {\n+                    throw new IllegalFieldValueException(type, \"\", \"\");\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        return result;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}