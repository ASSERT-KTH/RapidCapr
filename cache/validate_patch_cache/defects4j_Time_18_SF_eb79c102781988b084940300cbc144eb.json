{
    "patch": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                  int hourOfDay, int minuteOfHour,\n                                  int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException {\n    if (year < 1582 || (year == 1582 && monthOfYear < 10) || (year == 1582 && monthOfYear == 10 && dayOfMonth < 15)) {\n        // If the date is before the Gregorian cutover, use the Julian chronology\n        if (monthOfYear == 2 && dayOfMonth == 29 && !iJulianChronology.isLeapYear(year)) {\n            // Check if the date is a leap year in the Julian chronology\n            throw new IllegalArgumentException(\"Invalid leap year day\");\n        }\n        long instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant >= iCutoverMillis) {\n            // If the date is in the overlap period, use the Gregorian chronology\n            instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant < iCutoverMillis) {\n                throw new IllegalArgumentException(\"Specified date does not exist in Julian calendar\");\n            }\n        }\n        return instant;\n    } else {\n        // If the date is after the Gregorian cutover, use the Gregorian chronology\n        long instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant < iCutoverMillis) {\n            // If the date is in the overlap period, use the Julian chronology\n            instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            if (instant >= iCutoverMillis) {\n                throw new IllegalArgumentException(\"Specified date does not exist in Gregorian calendar\");\n            }\n        }\n        return instant;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 29e559d4..070002dd 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -347,35 +347,42 @@ public final class GJChronology extends AssembledChronology {\n         return instant;\n     }\n \n-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                                   int hourOfDay, int minuteOfHour,\n                                   int secondOfMinute, int millisOfSecond)\n-        throws IllegalArgumentException\n-    {\n-        Chronology base;\n-        if ((base = getBase()) != null) {\n-            return base.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        throws IllegalArgumentException {\n+    if (year < 1582 || (year == 1582 && monthOfYear < 10) || (year == 1582 && monthOfYear == 10 && dayOfMonth < 15)) {\n+        // If the date is before the Gregorian cutover, use the Julian chronology\n+        if (monthOfYear == 2 && dayOfMonth == 29 && !iJulianChronology.isLeapYear(year)) {\n+            // Check if the date is a leap year in the Julian chronology\n+            throw new IllegalArgumentException(\"Invalid leap year day\");\n+        }\n+        long instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        if (instant >= iCutoverMillis) {\n+            // If the date is in the overlap period, use the Gregorian chronology\n+            instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+            if (instant < iCutoverMillis) {\n+                throw new IllegalArgumentException(\"Specified date does not exist in Julian calendar\");\n+            }\n         }\n-\n-        // Assume date is Gregorian.\n-        long instant;\n-            instant = iGregorianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        return instant;\n+    } else {\n+        // If the date is after the Gregorian cutover, use the Gregorian chronology\n+        long instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n         if (instant < iCutoverMillis) {\n-            // Maybe it's Julian.\n-            instant = iJulianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+            // If the date is in the overlap period, use the Julian chronology\n+            instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n             if (instant >= iCutoverMillis) {\n-                // Okay, it's in the illegal cutover gap.\n-                throw new IllegalArgumentException(\"Specified date does not exist\");\n+                throw new IllegalArgumentException(\"Specified date does not exist in Gregorian calendar\");\n             }\n         }\n         return instant;\n     }\n+}\n \n     /**\n      * Gets the cutover instant between Gregorian and Julian chronologies.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<10> but was:<11>",
    "test_result": "FAIL"
}