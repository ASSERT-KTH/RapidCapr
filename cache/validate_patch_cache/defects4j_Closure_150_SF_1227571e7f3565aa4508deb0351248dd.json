{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) {\n        return;\n    }\n    boolean isFunctionCallInput = false;\n    boolean isFunctionDeclaration = false;\n    boolean defineCatch = false;\n    boolean defineVars = false;\n\n    switch (parent.getType()) {\n        case Token.VAR:\n            defineVars = true;\n            break;\n        case Token.CATCH:\n            defineCatch = true;\n            break;\n        case Token.FUNCTION:\n            if (parent.getParent().getType() == Token.SCRIPT) {\n                isFunctionDeclaration = true;\n            } \n            break;\n        default:\n            if (parent.getType() == Token.CALL && n.equals(parent.getFirstChild())) {\n                Node functionNode = parent.getFirstChild();\n                if (functionNode.getType() == Token.GETPROP) {\n                    String functionName = functionNode.getLastChild().getString();\n                    if (\"stub\".equals(functionName)) {\n                        isFunctionCallInput = true;\n                    }\n                }\n            }\n            break;\n    }\n    if (isFunctionDeclaration) {\n        defineDeclaredFunction(n, parent);\n    } else if (defineCatch) {\n        defineCatch(n, parent);\n    } else if (defineVars) {\n        defineVar(n, parent);\n    } else {\n        attachLiteralTypes(n);\n    }\n    if (isFunctionCallInput) {\n        handleFunctionInputs(n.getNext());\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..e4563dc7 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,53 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) {\n         return;\n-      }\n+    }\n+    boolean isFunctionCallInput = false;\n+    boolean isFunctionDeclaration = false;\n+    boolean defineCatch = false;\n+    boolean defineVars = false;\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n+    switch (parent.getType()) {\n         case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+            defineVars = true;\n+            break;\n+        case Token.CATCH:\n+            defineCatch = true;\n+            break;\n+        case Token.FUNCTION:\n+            if (parent.getParent().getType() == Token.SCRIPT) {\n+                isFunctionDeclaration = true;\n+            } \n+            break;\n+        default:\n+            if (parent.getType() == Token.CALL && n.equals(parent.getFirstChild())) {\n+                Node functionNode = parent.getFirstChild();\n+                if (functionNode.getType() == Token.GETPROP) {\n+                    String functionName = functionNode.getLastChild().getString();\n+                    if (\"stub\".equals(functionName)) {\n+                        isFunctionCallInput = true;\n+                    }\n+                }\n+            }\n+            break;\n+    }\n+    if (isFunctionDeclaration) {\n+        defineDeclaredFunction(n, parent);\n+    } else if (defineCatch) {\n+        defineCatch(n, parent);\n+    } else if (defineVars) {\n+        defineVar(n, parent);\n+    } else {\n+        attachLiteralTypes(n);\n     }\n+    if (isFunctionCallInput) {\n+        handleFunctionInputs(n.getNext());\n+    }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}