{
    "patch": "boolean currentFieldAdded = false;\nboolean nextFieldAdded = false;\n\nif (currentStrategy != null) {\n    currentFieldAdded = currentStrategy.addRegex(this, regex);\n    if (currentFieldAdded) {\n        collector.add(currentStrategy);\n    }\n} else {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n}\nwhile (nextStrategy != null) {\n    patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n    if (!patternMatcher.lookingAt()) {\n        break;\n    }\n    String nextFormatField = patternMatcher.group();\n    nextStrategy = getStrategy(nextFormatField);\n    if (nextStrategy != null) {\n        nextFieldAdded = nextStrategy.addRegex(this, regex);\n        if (nextFieldAdded && !currentFieldAdded) {\n            collector.add(nextStrategy);\n        }\n        currentFieldAdded = nextFieldAdded;\n    }\n}\ncurrentFormatField = null;\n\nif (collector.isEmpty()) {\n    throw new IllegalArgumentException(\"Invalid pattern\");\n} else {\n    strategies = collector.toArray(new Strategy[0]);\n    parsePattern = Pattern.compile(regex.toString());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..8451c07d 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,40 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+boolean currentFieldAdded = false;\n+boolean nextFieldAdded = false;\n+\n+if (currentStrategy != null) {\n+    currentFieldAdded = currentStrategy.addRegex(this, regex);\n+    if (currentFieldAdded) {\n+        collector.add(currentStrategy);\n+    }\n+} else {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+}\n+while (nextStrategy != null) {\n+    patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n+    if (!patternMatcher.lookingAt()) {\n+        break;\n+    }\n+    String nextFormatField = patternMatcher.group();\n+    nextStrategy = getStrategy(nextFormatField);\n+    if (nextStrategy != null) {\n+        nextFieldAdded = nextStrategy.addRegex(this, regex);\n+        if (nextFieldAdded && !currentFieldAdded) {\n+            collector.add(nextStrategy);\n+        }\n+        currentFieldAdded = nextFieldAdded;\n+    }\n+}\n+currentFormatField = null;\n+\n+if (collector.isEmpty()) {\n+    throw new IllegalArgumentException(\"Invalid pattern\");\n+} else {\n+    strategies = collector.toArray(new Strategy[0]);\n+    parsePattern = Pattern.compile(regex.toString());\n+}\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}