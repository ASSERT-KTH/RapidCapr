{
    "patch": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        if (type.isSupported(DurationFieldType.years())) {\n            result = result.withYears(getYears());\n        } else {\n            int years = getYears();\n            if (years != 0) {\n                long days = (long) years * 365;\n                if (years > 0) {\n                    days = Math.min(days, Integer.MAX_VALUE - (long) getDays());\n                } else {\n                    days = Math.max(days, Integer.MIN_VALUE - (long) getDays());\n                }\n                result = result.plusDays((int) days);\n                result = result.withYears(0);\n            }\n        }\n        if (type.isSupported(DurationFieldType.months())) {\n            result = result.withMonths(getMonths());\n        } else {\n            int months = getMonths();\n            if (months != 0) {\n                int totalMonths = getYears() * 12 + months;\n                int remainderDays = getDays();\n                int calculatedMonths = (totalMonths % 12 + 12) % 12;\n                int quotientMonths = (totalMonths - calculatedMonths) / 12;\n                int quotientYears = getYears() + quotientMonths;\n                int maxDaysInMonth = new DateTime(result.getYear(), calculatedMonths + 1, 1, 0, 0, 0, 0, ISOChronology.getInstanceUTC()).minusDays(1).getDayOfMonth();\n                if (remainderDays > maxDaysInMonth) {\n                    remainderDays -= maxDaysInMonth;\n                    calculatedMonths++;\n                    if (calculatedMonths == 12) {\n                        quotientYears++;\n                        calculatedMonths = 0;\n                    }\n                }\n                result = result.plusMonths(calculatedMonths - months);\n                result = result.plusYears(quotientYears - getYears());\n                result = result.plusDays(remainderDays - getDays());\n                result = result.withMonths(0);\n            }\n        }\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..fa5b00b1 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1622,16 +1622,44 @@ public final class Period\n         millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n         millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n         Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n+        if (type.isSupported(DurationFieldType.years())) {\n+            result = result.withYears(getYears());\n+        } else {\n+            int years = getYears();\n             if (years != 0) {\n-                result = result.withYears(years);\n+                long days = (long) years * 365;\n+                if (years > 0) {\n+                    days = Math.min(days, Integer.MAX_VALUE - (long) getDays());\n+                } else {\n+                    days = Math.max(days, Integer.MIN_VALUE - (long) getDays());\n+                }\n+                result = result.plusDays((int) days);\n+                result = result.withYears(0);\n             }\n+        }\n+        if (type.isSupported(DurationFieldType.months())) {\n+            result = result.withMonths(getMonths());\n+        } else {\n+            int months = getMonths();\n             if (months != 0) {\n-                result = result.withMonths(months);\n+                int totalMonths = getYears() * 12 + months;\n+                int remainderDays = getDays();\n+                int calculatedMonths = (totalMonths % 12 + 12) % 12;\n+                int quotientMonths = (totalMonths - calculatedMonths) / 12;\n+                int quotientYears = getYears() + quotientMonths;\n+                int maxDaysInMonth = new DateTime(result.getYear(), calculatedMonths + 1, 1, 0, 0, 0, 0, ISOChronology.getInstanceUTC()).minusDays(1).getDayOfMonth();\n+                if (remainderDays > maxDaysInMonth) {\n+                    remainderDays -= maxDaysInMonth;\n+                    calculatedMonths++;\n+                    if (calculatedMonths == 12) {\n+                        quotientYears++;\n+                        calculatedMonths = 0;\n+                    }\n+                }\n+                result = result.plusMonths(calculatedMonths - months);\n+                result = result.plusYears(quotientYears - getYears());\n+                result = result.plusDays(remainderDays - getDays());\n+                result = result.withMonths(0);\n             }\n         }\n         return result;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}