{
    "patch": "public static String convertISO8859_1_ESCAPE(String input) {\n    StringBuilder result = new StringBuilder();\n    int len = input.length();\n    int i = 0;\n    while (i < len) {\n        char c = input.charAt(i++);\n        if (c == '\\\\') {\n            if (i < len) {\n                c = input.charAt(i++);\n                if (c == 'n') {\n                    c = '\\n';\n                } else if (c == 'r') {\n                    c = '\\r';\n                } else if (c == 't') {\n                    c = '\\t';\n                } else if (c == 'f') {\n                    c = '\\f';\n                } else if (c == 'b') {\n                    c = '\\b';\n                } else if (c == '\\\\') {\n                    c = '\\\\';\n                } else if (c == '\\'') {\n                    c = '\\'';\n                } else if (c == '\\\"') {\n                    c = '\\\"';\n                } else if (c >= '0' && c <= '7') {\n                    int octal = c - '0';\n                    if (i < len && input.charAt(i) >= '0' && input.charAt(i) <= '7') {\n                        octal = octal * 8 + input.charAt(i++) - '0';\n                    }\n                    if (i < len && input.charAt(i) >= '0' && input.charAt(i) <= '7') {\n                        octal = octal * 8 + input.charAt(i++) - '0';\n                    }\n                    c = (char) octal;\n                } else if (c == 'u') {\n                    if (i + 4 <= len) {\n                        String unicode = input.substring(i, i + 4);\n                        try {\n                            c = (char) Integer.parseInt(unicode, 16);\n                            i += 4;\n                        } catch (NumberFormatException e) {\n                            throw new IllegalArgumentException(\"Malformed Unicode escape\");\n                        }\n                    } else {\n                        throw new IllegalArgumentException(\"Malformed Unicode escape\");\n                    }\n                } else {\n                    throw new IllegalArgumentException(\"Illegal escape character\");\n                }\n            } else {\n                throw new IllegalArgumentException(\"Illegal escape character\");\n            }\n        }\n        result.append(c);\n    }\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5fdde06d 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,63 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String convertISO8859_1_ESCAPE(String input) {\n+    StringBuilder result = new StringBuilder();\n+    int len = input.length();\n+    int i = 0;\n+    while (i < len) {\n+        char c = input.charAt(i++);\n+        if (c == '\\\\') {\n+            if (i < len) {\n+                c = input.charAt(i++);\n+                if (c == 'n') {\n+                    c = '\\n';\n+                } else if (c == 'r') {\n+                    c = '\\r';\n+                } else if (c == 't') {\n+                    c = '\\t';\n+                } else if (c == 'f') {\n+                    c = '\\f';\n+                } else if (c == 'b') {\n+                    c = '\\b';\n+                } else if (c == '\\\\') {\n+                    c = '\\\\';\n+                } else if (c == '\\'') {\n+                    c = '\\'';\n+                } else if (c == '\\\"') {\n+                    c = '\\\"';\n+                } else if (c >= '0' && c <= '7') {\n+                    int octal = c - '0';\n+                    if (i < len && input.charAt(i) >= '0' && input.charAt(i) <= '7') {\n+                        octal = octal * 8 + input.charAt(i++) - '0';\n+                    }\n+                    if (i < len && input.charAt(i) >= '0' && input.charAt(i) <= '7') {\n+                        octal = octal * 8 + input.charAt(i++) - '0';\n+                    }\n+                    c = (char) octal;\n+                } else if (c == 'u') {\n+                    if (i + 4 <= len) {\n+                        String unicode = input.substring(i, i + 4);\n+                        try {\n+                            c = (char) Integer.parseInt(unicode, 16);\n+                            i += 4;\n+                        } catch (NumberFormatException e) {\n+                            throw new IllegalArgumentException(\"Malformed Unicode escape\");\n+                        }\n+                    } else {\n+                        throw new IllegalArgumentException(\"Malformed Unicode escape\");\n+                    }\n+                } else {\n+                    throw new IllegalArgumentException(\"Illegal escape character\");\n+                }\n+            } else {\n+                throw new IllegalArgumentException(\"Illegal escape character\");\n+            }\n+        }\n+        result.append(c);\n+    }\n+    return result.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}