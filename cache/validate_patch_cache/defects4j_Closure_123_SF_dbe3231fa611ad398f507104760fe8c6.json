{
    "patch": "public String fixCode(String code) {\n    String fixedCode;\n    try {\n        CompilationUnit cu = JavaParser.parse(code);\n        new MethodCallExpr(new NameExpr(\"foo\"), new NodeList<>());\n        for (ForStmt fs : cu.findAll(ForStmt.class)) {\n            if (fs.getCompare().isPresent()) {\n                Expression exp = fs.getCompare().get();\n                if (exp.isBinaryExpr()) {\n                    BinaryExpr binaryExpr = exp.asBinaryExpr();\n                    if (binaryExpr.getOperator() == BinaryExpr.Operator.EQUALS &&\n                            binaryExpr.getRight().isFieldAccessExpr() &&\n                            binaryExpr.getRight().asFieldAccessExpr().getName().getIdentifier().equals(\"length\")) {\n                        int forIndex = code.indexOf(\"for\");\n                        String forStatement = code.substring(forIndex, code.indexOf(\")\", forIndex) + 1);\n                        String[] splitValues = forStatement.split(\";\");\n                        String condition = splitValues[1].trim();\n                        if (condition.contains(\"(\") && !condition.contains(\")\")) {\n                            condition += \")\";\n                        }\n                        String fixedCondition = condition.replace(\"==\", \">=\")\n                                .replace(\".length\", \".size()\")\n                                .replace(\"[\", \".contains(\")\n                                .replace(\"]\", \")\");\n\n                        fixedCode = code.substring(0, code.indexOf(condition)) +\n                                fixedCondition +\n                                code.substring(code.indexOf(condition) + condition.length());\n\n                        return fixedCode;\n                    }\n                }\n            }\n        }\n        fixedCode = cu.toString();\n    } catch (ParseException e) {\n        fixedCode = code;\n    }\n    return fixedCode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..9e88145b 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,46 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+    String fixedCode;\n+    try {\n+        CompilationUnit cu = JavaParser.parse(code);\n+        new MethodCallExpr(new NameExpr(\"foo\"), new NodeList<>());\n+        for (ForStmt fs : cu.findAll(ForStmt.class)) {\n+            if (fs.getCompare().isPresent()) {\n+                Expression exp = fs.getCompare().get();\n+                if (exp.isBinaryExpr()) {\n+                    BinaryExpr binaryExpr = exp.asBinaryExpr();\n+                    if (binaryExpr.getOperator() == BinaryExpr.Operator.EQUALS &&\n+                            binaryExpr.getRight().isFieldAccessExpr() &&\n+                            binaryExpr.getRight().asFieldAccessExpr().getName().getIdentifier().equals(\"length\")) {\n+                        int forIndex = code.indexOf(\"for\");\n+                        String forStatement = code.substring(forIndex, code.indexOf(\")\", forIndex) + 1);\n+                        String[] splitValues = forStatement.split(\";\");\n+                        String condition = splitValues[1].trim();\n+                        if (condition.contains(\"(\") && !condition.contains(\")\")) {\n+                            condition += \")\";\n+                        }\n+                        String fixedCondition = condition.replace(\"==\", \">=\")\n+                                .replace(\".length\", \".size()\")\n+                                .replace(\"[\", \".contains(\")\n+                                .replace(\"]\", \")\");\n+\n+                        fixedCode = code.substring(0, code.indexOf(condition)) +\n+                                fixedCondition +\n+                                code.substring(code.indexOf(condition) + condition.length());\n+\n+                        return fixedCode;\n+                    }\n+                }\n+            }\n+        }\n+        fixedCode = cu.toString();\n+    } catch (ParseException e) {\n+        fixedCode = code;\n+    }\n+    return fixedCode;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}