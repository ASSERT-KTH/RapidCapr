{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n    Node maybeExpr = n.getFirstChild();\n\n    // Check if we have an expression that can be folded\n    if (NodeUtil.isExpressionNode(maybeExpr) && !NodeUtil.isCallOrNew(maybeExpr)) {\n      BooleanExpressionInfo info = scanBooleanExpression(maybeExpr);\n      if (info.canFold) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nprivate class BooleanExpressionInfo {\n  boolean canFold;\n  boolean hasIfStatement;\n  Set<Node> nonConditionalNodes;\n\n  BooleanExpressionInfo(boolean canFold, boolean hasIfStatement, Set<Node> nonConditionalNodes) {\n    this.canFold = canFold;\n    this.hasIfStatement = hasIfStatement;\n    this.nonConditionalNodes = nonConditionalNodes;\n  }\n}\n\n// Helper method to scan a boolean expression for foldable content.\nprivate BooleanExpressionInfo scanBooleanExpression(Node n) {\n  boolean hasIfStatement = false;\n  Set<Node> nonConditionalNodes = Sets.newHashSet();\n  for (Node child : n.children()) {\n    // We can only handle IF statements at the top level.\n    if (child.getType() == Token.IF) {\n      if (child.getChildCount() <= 2) {\n        // This is not an \"IF/ELSE\" and can potentially be folded.\n        Node grandChild = child.getFirstChild();\n        if (NodeUtil.isExpressionNode(grandChild)) {\n          // It doesn't make sense to fold this conditional if it has a CALL or NEW.\n          if (NodeUtil.isCallOrNew(grandChild)) {\n            return new BooleanExpressionInfo(false, false, null);\n          }\n          for (Node greatGrandChild : grandChild.children()) {\n            if (greatGrandChild.getType() == Token.IF) {\n              // This nested IF is not foldable.\n              return new BooleanExpressionInfo(false, false, null);\n            }\n            if (!NodeUtil.isConditional(greatGrandChild) && !isBooleanLiteral(greatGrandChild)) {\n              nonConditionalNodes.add(greatGrandChild);\n            }\n          }\n        } else {\n          // This is not an expression.\n          return new BooleanExpressionInfo(false, false, null);\n        }\n      } else {\n        // This is an \"IF/ELSE\" and can't be folded.\n        return new BooleanExpressionInfo(false, false, null);\n      }\n      hasIfStatement = true;\n    } else {\n      if (!NodeUtil.isConditional(child) && !isBooleanLiteral(child)) {\n        nonConditionalNodes.add(child);\n      }\n    }\n  }\n  boolean canFold = !hasIfStatement && nonConditionalNodes.isEmpty();\n  return new BooleanExpressionInfo(canFold, hasIfStatement, nonConditionalNodes);\n}\n\n// Helper method to check if a node is a boolean literal.\nprivate boolean isBooleanLiteral(Node n) {\n  return n.getType() == Token.TRUE || n.getType() == Token.FALSE;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..69ec7e77 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,81 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+    Node maybeExpr = n.getFirstChild();\n+\n+    // Check if we have an expression that can be folded\n+    if (NodeUtil.isExpressionNode(maybeExpr) && !NodeUtil.isCallOrNew(maybeExpr)) {\n+      BooleanExpressionInfo info = scanBooleanExpression(maybeExpr);\n+      if (info.canFold) {\n+        return true;\n       }\n     }\n+  }\n \n-    return false;\n+  return false;\n+}\n+\n+private class BooleanExpressionInfo {\n+  boolean canFold;\n+  boolean hasIfStatement;\n+  Set<Node> nonConditionalNodes;\n+\n+  BooleanExpressionInfo(boolean canFold, boolean hasIfStatement, Set<Node> nonConditionalNodes) {\n+    this.canFold = canFold;\n+    this.hasIfStatement = hasIfStatement;\n+    this.nonConditionalNodes = nonConditionalNodes;\n   }\n+}\n+\n+// Helper method to scan a boolean expression for foldable content.\n+private BooleanExpressionInfo scanBooleanExpression(Node n) {\n+  boolean hasIfStatement = false;\n+  Set<Node> nonConditionalNodes = Sets.newHashSet();\n+  for (Node child : n.children()) {\n+    // We can only handle IF statements at the top level.\n+    if (child.getType() == Token.IF) {\n+      if (child.getChildCount() <= 2) {\n+        // This is not an \"IF/ELSE\" and can potentially be folded.\n+        Node grandChild = child.getFirstChild();\n+        if (NodeUtil.isExpressionNode(grandChild)) {\n+          // It doesn't make sense to fold this conditional if it has a CALL or NEW.\n+          if (NodeUtil.isCallOrNew(grandChild)) {\n+            return new BooleanExpressionInfo(false, false, null);\n+          }\n+          for (Node greatGrandChild : grandChild.children()) {\n+            if (greatGrandChild.getType() == Token.IF) {\n+              // This nested IF is not foldable.\n+              return new BooleanExpressionInfo(false, false, null);\n+            }\n+            if (!NodeUtil.isConditional(greatGrandChild) && !isBooleanLiteral(greatGrandChild)) {\n+              nonConditionalNodes.add(greatGrandChild);\n+            }\n+          }\n+        } else {\n+          // This is not an expression.\n+          return new BooleanExpressionInfo(false, false, null);\n+        }\n+      } else {\n+        // This is an \"IF/ELSE\" and can't be folded.\n+        return new BooleanExpressionInfo(false, false, null);\n+      }\n+      hasIfStatement = true;\n+    } else {\n+      if (!NodeUtil.isConditional(child) && !isBooleanLiteral(child)) {\n+        nonConditionalNodes.add(child);\n+      }\n+    }\n+  }\n+  boolean canFold = !hasIfStatement && nonConditionalNodes.isEmpty();\n+  return new BooleanExpressionInfo(canFold, hasIfStatement, nonConditionalNodes);\n+}\n+\n+// Helper method to check if a node is a boolean literal.\n+private boolean isBooleanLiteral(Node n) {\n+  return n.getType() == Token.TRUE || n.getType() == Token.FALSE;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}