{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  // Resolve the type via registry, potentially checking for a cycle.\n  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n  boolean cycleDetected = detectImplicitPrototypeCycle();\n  \n  // If the type wasn't resolved or a cycle was detected, try to resolve via properties.\n  if (!resolvedViaRegistry || cycleDetected) {\n    resolveViaProperties(t, enclosing);\n    cycleDetected |= detectImplicitPrototypeCycle();\n  }\n  \n  // If the type is now resolved, finish the property continuations.\n  if (isResolved()) {\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n  }\n  \n  // If a cycle was detected, error out.\n  if (cycleDetected) {\n    handleTypeCycle(t);\n    return this;\n  }\n  \n  // Otherwise, return the referenced type if possible, or this.\n  return registry.isLastGeneration() ? getReferencedType() : this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..77cab183 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,32 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n-\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  // Resolve the type via registry, potentially checking for a cycle.\n+  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+  boolean cycleDetected = detectImplicitPrototypeCycle();\n+  \n+  // If the type wasn't resolved or a cycle was detected, try to resolve via properties.\n+  if (!resolvedViaRegistry || cycleDetected) {\n     resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n+    cycleDetected |= detectImplicitPrototypeCycle();\n+  }\n+  \n+  // If the type is now resolved, finish the property continuations.\n+  if (isResolved()) {\n     super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    finishPropertyContinuations();\n+  }\n+  \n+  // If a cycle was detected, error out.\n+  if (cycleDetected) {\n+    handleTypeCycle(t);\n+    return this;\n   }\n+  \n+  // Otherwise, return the referenced type if possible, or this.\n+  return registry.isLastGeneration() ? getReferencedType() : this;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}