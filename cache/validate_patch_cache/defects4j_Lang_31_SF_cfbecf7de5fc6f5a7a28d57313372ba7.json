{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int strLen = str.length();\n    int searchLen = searchChars.length;\n    int strLast = strLen - 1;\n    int searchLast = searchLen - 1;\n    for (int i = 0; i < strLen; i++) {\n        char ch = str.charAt(i);\n        if (ch <= CharUtils.MAX_ASCII_CHAR) {\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                    return true;\n                }\n            }\n        } else if (ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE && (i < strLast)) {\n            char ch2 = str.charAt(i + 1);\n            if (ch2 >= Character.MIN_LOW_SURROGATE && ch2 <= Character.MAX_LOW_SURROGATE) {\n                int codePoint = Character.toCodePoint(ch, ch2);\n                for (int j = 0; j < searchLen; j++) {\n                    if (searchChars[j] == ch || searchChars[j] == ch2) {\n                        return true;\n                    } else if (j < searchLast && searchChars[j + 1] == ch2) {\n                        return true;\n                    } else if (j < searchLast) {\n                        j++;\n                    }\n                }\n            }\n        } else if (i < strLast) {\n            char ch2 = str.charAt(i + 1);\n            if (Character.isSurrogatePair(ch, ch2)) {\n                int codePoint = Character.toCodePoint(ch, ch2);\n                for (int j = 0; j < searchLen; j++) {\n                    if (searchChars[j] == ch || searchChars[j] == ch2) {\n                        return true;\n                    } else if (j < searchLast && searchChars[j + 1] == ch2) {\n                        return true;\n                    } else if (j < searchLast) {\n                        j++;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..9cff93b5 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,54 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    int strLen = str.length();\n+    int searchLen = searchChars.length;\n+    int strLast = strLen - 1;\n+    int searchLast = searchLen - 1;\n+    for (int i = 0; i < strLen; i++) {\n+        char ch = str.charAt(i);\n+        if (ch <= CharUtils.MAX_ASCII_CHAR) {\n+            for (int j = 0; j < searchLen; j++) {\n+                if (searchChars[j] == ch) {\n+                    return true;\n+                }\n+            }\n+        } else if (ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE && (i < strLast)) {\n+            char ch2 = str.charAt(i + 1);\n+            if (ch2 >= Character.MIN_LOW_SURROGATE && ch2 <= Character.MAX_LOW_SURROGATE) {\n+                int codePoint = Character.toCodePoint(ch, ch2);\n+                for (int j = 0; j < searchLen; j++) {\n+                    if (searchChars[j] == ch || searchChars[j] == ch2) {\n+                        return true;\n+                    } else if (j < searchLast && searchChars[j + 1] == ch2) {\n+                        return true;\n+                    } else if (j < searchLast) {\n+                        j++;\n+                    }\n+                }\n+            }\n+        } else if (i < strLast) {\n+            char ch2 = str.charAt(i + 1);\n+            if (Character.isSurrogatePair(ch, ch2)) {\n+                int codePoint = Character.toCodePoint(ch, ch2);\n+                for (int j = 0; j < searchLen; j++) {\n+                    if (searchChars[j] == ch || searchChars[j] == ch2) {\n+                        return true;\n+                    } else if (j < searchLast && searchChars[j + 1] == ch2) {\n+                        return true;\n+                    } else if (j < searchLast) {\n+                        j++;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}