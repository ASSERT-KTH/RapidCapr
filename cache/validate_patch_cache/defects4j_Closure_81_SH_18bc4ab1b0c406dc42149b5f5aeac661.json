{
    "patch": "      Node node = newNode(Token.FUNCTION, transform(name));\n      node.putProp(Node.FUNCTION_PROPERTY_IS_NAMED,\n          functionNode.getFunctionName() != null);\n      if (!isUnnamedFunction) {\n        node.addChildToFront(transform(functionNode.getFunctionName()));\n      }\n\n      Node lp = newNode(Token.LP);\n      // The left paren's complicated because it's not represented by an\n      // AstNode, so there's nothing that has the actual line number that it\n      // appeared on.  We know the paren has to appear on the same line as the\n      // function name (or else a semicolon will be inserted.)  If there's no\n      // function name, assume the paren was on the same line as the function.\n      // TODO(bowdidge): Mark line number of paren correctly.\n      Name fnName = functionNode.getFunctionName();\n      if (fnName != null) {\n        lp.setLineno(fnName.getLineno());\n      } else {\n        lp.setLineno(functionNode.getLineno());\n      }\n      int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();\n\n      lp.setCharno(position2charno(lparenCharno));\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n     return node;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..50f0b281 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,39 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+      Node node = newNode(Token.FUNCTION, transform(name));\n+      node.putProp(Node.FUNCTION_PROPERTY_IS_NAMED,\n+          functionNode.getFunctionName() != null);\n+      if (!isUnnamedFunction) {\n+        node.addChildToFront(transform(functionNode.getFunctionName()));\n+      }\n+\n+      Node lp = newNode(Token.LP);\n+      // The left paren's complicated because it's not represented by an\n+      // AstNode, so there's nothing that has the actual line number that it\n+      // appeared on.  We know the paren has to appear on the same line as the\n+      // function name (or else a semicolon will be inserted.)  If there's no\n+      // function name, assume the paren was on the same line as the function.\n+      // TODO(bowdidge): Mark line number of paren correctly.\n+      Name fnName = functionNode.getFunctionName();\n+      if (fnName != null) {\n+        lp.setLineno(fnName.getLineno());\n+      } else {\n+        lp.setLineno(functionNode.getLineno());\n+      }\n+      int lparenCharno = functionNode.getLp() +\n+          functionNode.getAbsolutePosition();\n+\n+      lp.setCharno(position2charno(lparenCharno));\n+      for (AstNode param : functionNode.getParams()) {\n+        lp.addChildToBack(transform(param));\n+      }\n+      node.addChildToBack(lp);\n+\n+      Node bodyNode = transform(functionNode.getBody());\n+      parseDirectives(bodyNode);\n+      node.addChildToBack(bodyNode);\n+     return node;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}