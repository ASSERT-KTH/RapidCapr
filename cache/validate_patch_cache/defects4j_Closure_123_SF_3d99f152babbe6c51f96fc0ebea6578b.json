{
    "patch": "public String printInOperatorInForLoop(boolean c, int[] d) {\n    String expected = \"for(a=c?0:[(0 in d)];;)foo()\";\n    StringBuilder sb = new StringBuilder(\"for(a=\");\n    if (c) {\n        sb.append(\"0\");\n    } else {\n        sb.append(\"[\");\n        sb.append(\"0 in d\");\n        sb.append(\"]\");\n    }\n    sb.append(\";;)foo()\");\n    String result = sb.toString();\n    if (expected.equals(result)) {\n        return \"Pass\";\n    } else {\n        return \"Fail\";\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..93d8cbb8 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,24 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String printInOperatorInForLoop(boolean c, int[] d) {\n+    String expected = \"for(a=c?0:[(0 in d)];;)foo()\";\n+    StringBuilder sb = new StringBuilder(\"for(a=\");\n+    if (c) {\n+        sb.append(\"0\");\n+    } else {\n+        sb.append(\"[\");\n+        sb.append(\"0 in d\");\n+        sb.append(\"]\");\n+    }\n+    sb.append(\";;)foo()\");\n+    String result = sb.toString();\n+    if (expected.equals(result)) {\n+        return \"Pass\";\n+    } else {\n+        return \"Fail\";\n+    }\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}