{
    "patch": "Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\nif (actualTypeArgument != null) {\n    if(actualTypeArgument instanceof ParameterizedType || actualTypeArgument instanceof GenericArrayType) {\n        Type[] arguments = getActualTypeArgumentsFor(actualTypeArgument);\n        if (arguments != null) {\n            for (Type argument : arguments) {\n                if (argument instanceof TypeVariable) {\n                    // If the actual type argument is a type variable, recursively register its type variables\n                    readTypeVariables((TypeVariable<?>) argument);\n                } else {\n                    registerTypeVariablesOn(argument);\n                }\n            }\n        }\n    } else if (actualTypeArgument instanceof WildcardType) {\n        Type upperBound = ((WildcardType) actualTypeArgument).getUpperBounds()[0];\n        if (upperBound instanceof TypeVariable) {\n            // If the upper bound is a type variable, recursively register its type variables\n            readTypeVariables((TypeVariable<?>) upperBound);\n        } else {\n            registerTypeVariablesOn(upperBound);\n        }\n    } else {\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..bf823465c 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,37 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+if (actualTypeArgument != null) {\n+    if(actualTypeArgument instanceof ParameterizedType || actualTypeArgument instanceof GenericArrayType) {\n+        Type[] arguments = getActualTypeArgumentsFor(actualTypeArgument);\n+        if (arguments != null) {\n+            for (Type argument : arguments) {\n+                if (argument instanceof TypeVariable) {\n+                    // If the actual type argument is a type variable, recursively register its type variables\n+                    readTypeVariables((TypeVariable<?>) argument);\n+                } else {\n+                    registerTypeVariablesOn(argument);\n+                }\n+            }\n+        }\n+    } else if (actualTypeArgument instanceof WildcardType) {\n+        Type upperBound = ((WildcardType) actualTypeArgument).getUpperBounds()[0];\n+        if (upperBound instanceof TypeVariable) {\n+            // If the upper bound is a type variable, recursively register its type variables\n+            readTypeVariables((TypeVariable<?>) upperBound);\n+        } else {\n+            registerTypeVariablesOn(upperBound);\n+        }\n+    } else {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}