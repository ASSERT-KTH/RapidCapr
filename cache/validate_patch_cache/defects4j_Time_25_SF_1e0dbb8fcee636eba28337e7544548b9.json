{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int localOffset = getOffset(instantLocal);\n    final long instantAdjusted = instantLocal - localOffset;\n    final int adjustedOffset = getOffset(instantAdjusted);\n    if (localOffset == adjustedOffset) {\n        return localOffset;\n    }\n\n    long nextLocal = nextTransition(instantLocal);\n    long nextAdjusted = nextTransition(instantAdjusted);\n\n    // If there are no upcoming transitions, return the current offset\n    if (nextLocal == Long.MAX_VALUE && nextAdjusted == Long.MAX_VALUE) {\n        return localOffset;\n    }\n\n    // If the next transitions are different for the local and adjusted times,\n    // we are inside a gap or overlap\n    if (nextLocal != nextAdjusted) {\n\n        // Determine if we are in a gap or an overlap\n        boolean isGap = nextLocal > instantLocal;\n        long transition = isGap ? nextLocal : nextAdjusted;\n\n        // Find the future and past offsets for the transition\n        int futureOffset = getOffset(transition + (isGap ? 0 : 1));\n        int pastOffset = getOffset(transition - 1);\n\n        // Determine which offset to use based on whether we are in a gap or an overlap\n        int offset = isGap ? pastOffset : futureOffset;\n\n        // If the transition is close to the local time, choose the offset based on the smallest difference\n        if (Math.abs(transition - instantLocal) < (2 * DateTimeConstants.MILLIS_PER_HOUR)) {\n            int localDiff = Math.abs(localOffset - offset);\n            int adjustedDiff = Math.abs(adjustedOffset - offset);\n            return localDiff < adjustedDiff ? localOffset : adjustedOffset;\n        }\n\n        return offset;\n    }\n\n    // If the next transitions are the same, return the offset for that transition\n    return getOffset(nextLocal);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..4eca0443 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,51 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int localOffset = getOffset(instantLocal);\n+    final long instantAdjusted = instantLocal - localOffset;\n+    final int adjustedOffset = getOffset(instantAdjusted);\n+    if (localOffset == adjustedOffset) {\n+        return localOffset;\n+    }\n+\n+    long nextLocal = nextTransition(instantLocal);\n+    long nextAdjusted = nextTransition(instantAdjusted);\n+\n+    // If there are no upcoming transitions, return the current offset\n+    if (nextLocal == Long.MAX_VALUE && nextAdjusted == Long.MAX_VALUE) {\n+        return localOffset;\n+    }\n+\n+    // If the next transitions are different for the local and adjusted times,\n+    // we are inside a gap or overlap\n+    if (nextLocal != nextAdjusted) {\n+\n+        // Determine if we are in a gap or an overlap\n+        boolean isGap = nextLocal > instantLocal;\n+        long transition = isGap ? nextLocal : nextAdjusted;\n+\n+        // Find the future and past offsets for the transition\n+        int futureOffset = getOffset(transition + (isGap ? 0 : 1));\n+        int pastOffset = getOffset(transition - 1);\n+\n+        // Determine which offset to use based on whether we are in a gap or an overlap\n+        int offset = isGap ? pastOffset : futureOffset;\n+\n+        // If the transition is close to the local time, choose the offset based on the smallest difference\n+        if (Math.abs(transition - instantLocal) < (2 * DateTimeConstants.MILLIS_PER_HOUR)) {\n+            int localDiff = Math.abs(localOffset - offset);\n+            int adjustedDiff = Math.abs(adjustedOffset - offset);\n+            return localDiff < adjustedDiff ? localOffset : adjustedOffset;\n         }\n-        return offsetAdjusted;\n+\n+        return offset;\n     }\n \n+    // If the next transitions are the same, return the offset for that transition\n+    return getOffset(nextLocal);\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}