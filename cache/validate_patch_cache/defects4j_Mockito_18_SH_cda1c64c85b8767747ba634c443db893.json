{
    "patch": "public Object execute(ExecutionEvent event) throws ExecutionException {\n    ISelection currentSelection = HandlerUtil.getCurrentSelectionChecked(event);\n    if (!(currentSelection instanceof ITypedSelection)) {\n        return new Status(IStatus.ERROR, Plugin.PLUGIN_ID, \"Selection is not ITypedSelection\");\n    }\n\n    ITypedSelection typedSelection = (ITypedSelection) currentSelection;\n    if (typedSelection.isEmpty()) {\n        return Collections.emptyList(); // return empty list instead of null\n    }\n\n    List<Object> selectionValues = new ArrayList<>();\n    for (Object element : typedSelection.getElements()) {\n        selectionValues.add(getValueFor(element));\n    }\n\n    return selectionValues;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}