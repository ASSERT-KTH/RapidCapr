{
    "patch": "        this(duration, null, null, null);\n    }\n\n    protected BasePeriod(long duration, PeriodType type, DateTimeZone zone, Chronology chrono) {\n        super(duration, type);\n\n        if (chrono != null) {\n            iChronology = chrono;\n        } else {\n            iChronology = ISOChronology.getInstance();\n        }\n\n        if (zone != null) {\n            iZone = zone;\n        } else {\n            iZone = DateTimeZone.getDefault();\n        }\n\n        iStartMillis = setPeriodInto(iChronology.set(new DateTime(0L, iChronology), 0), iZone);\n        super.setValues();\n    }\n\n    protected long setPeriodInto(ReadableInstant startInstant, DateTimeZone zone) {\n        if (zone == null) {\n            zone = DateTimeZone.getDefault();\n        }\n        long instant = startInstant.getMillis();\n        instant = zone.convertLocalToUTC(instant, false);\n        instant = iChronology.set(startInstant, instant);\n        instant = zone.convertUTCToLocal(instant);\n        return instant;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..5a3e894c 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,11 +218,38 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n+        this(duration, null, null, null);\n     }\n \n+    protected BasePeriod(long duration, PeriodType type, DateTimeZone zone, Chronology chrono) {\n+        super(duration, type);\n+\n+        if (chrono != null) {\n+            iChronology = chrono;\n+        } else {\n+            iChronology = ISOChronology.getInstance();\n+        }\n+\n+        if (zone != null) {\n+            iZone = zone;\n+        } else {\n+            iZone = DateTimeZone.getDefault();\n+        }\n+\n+        iStartMillis = setPeriodInto(iChronology.set(new DateTime(0L, iChronology), 0), iZone);\n+        super.setValues();\n+    }\n+\n+    protected long setPeriodInto(ReadableInstant startInstant, DateTimeZone zone) {\n+        if (zone == null) {\n+            zone = DateTimeZone.getDefault();\n+        }\n+        long instant = startInstant.getMillis();\n+        instant = zone.convertLocalToUTC(instant, false);\n+        instant = iChronology.set(startInstant, instant);\n+        instant = zone.convertUTCToLocal(instant);\n+        return instant;\n+\n     /**\n      * Creates a period from the given millisecond duration, which is only really\n      * suitable for durations less than one day.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}