{
    "patch": "if (offsetLocal < 0 && offsetAdjusted >= 0 && instantAdjusted + offsetAdjusted >= 0) {\n    // we have crossed a negative to positive offset DST boundary\n    long nextLocal = nextTransition(instantAdjusted + DateTimeConstants.MILLIS_PER_HOUR);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted + DateTimeConstants.MILLIS_PER_HOUR);\n    if (nextLocal != nextAdjusted) {\n        // we can now safely tell which side of the DST boundary we are on\n        if (offsetLocal + getOffset(nextLocal) == 0) {\n            // we are in the transition\n            long nextAdjustedLocal = nextTransition(nextLocal - getOffset(nextLocal));\n            if (instantLocal >= nextAdjustedLocal) {\n                return getOffset(nextLocal);\n            } else {\n                return offsetLocal;\n            }\n        } else if (offsetLocal > 0) {\n            // we are in winter time\n            return getOffset(nextLocal);\n        } else {\n            // we are in summer time\n            return offsetLocal;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..a54dace0 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,29 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal < 0 && offsetAdjusted >= 0 && instantAdjusted + offsetAdjusted >= 0) {\n+    // we have crossed a negative to positive offset DST boundary\n+    long nextLocal = nextTransition(instantAdjusted + DateTimeConstants.MILLIS_PER_HOUR);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted + DateTimeConstants.MILLIS_PER_HOUR);\n+    if (nextLocal != nextAdjusted) {\n+        // we can now safely tell which side of the DST boundary we are on\n+        if (offsetLocal + getOffset(nextLocal) == 0) {\n+            // we are in the transition\n+            long nextAdjustedLocal = nextTransition(nextLocal - getOffset(nextLocal));\n+            if (instantLocal >= nextAdjustedLocal) {\n+                return getOffset(nextLocal);\n+            } else {\n+                return offsetLocal;\n+            }\n+        } else if (offsetLocal > 0) {\n+            // we are in winter time\n+            return getOffset(nextLocal);\n+        } else {\n+            // we are in summer time\n+            return offsetLocal;\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}