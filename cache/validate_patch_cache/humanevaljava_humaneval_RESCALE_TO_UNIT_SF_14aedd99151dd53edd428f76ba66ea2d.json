{
    "patch": "public static double[] rescale_to_unit(double[] numbers){\n    if (numbers == null || numbers.length == 0) {\n        return new double[0];\n    }\n\n    double min = numbers[0];\n    double max = numbers[0];\n\n    for (int i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n\n    if (Math.abs(max - min) <= Double.MIN_VALUE) { // Use Double.MIN_VALUE as epsilon for floating-point comparisons\n        return new double[numbers.length];\n    }\n\n    double[] result = new double[numbers.length];\n    for (int i = 0; i < numbers.length; i++) {\n        result[i] = (numbers[i] - min) / (max - min);\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/RESCALE_TO_UNIT.java b/src/main/java/humaneval/buggy/RESCALE_TO_UNIT.java\nindex 905614f..8d7b091 100644\n--- a/src/main/java/humaneval/buggy/RESCALE_TO_UNIT.java\n+++ b/src/main/java/humaneval/buggy/RESCALE_TO_UNIT.java\n@@ -1,23 +1,31 @@\n package humaneval.buggy;\n \n public class RESCALE_TO_UNIT {\n-    public static double[] rescale_to_unit(double[] numbers){\n-        double min = Double.MAX_VALUE;\n-        double max = Double.MIN_VALUE;\n+public static double[] rescale_to_unit(double[] numbers){\n+    if (numbers == null || numbers.length == 0) {\n+        return new double[0];\n+    }\n \n-        for (int i = 0; i < numbers.length; i += 1) {\n-            if (numbers[i] > max) {\n-                max = numbers[i];\n-            }\n-            else if (numbers[i] < min) {\n-                min = numbers[i];\n-            }\n-        }\n+    double min = numbers[0];\n+    double max = numbers[0];\n \n-        double[] result = new double[numbers.length];\n-        for (int i = 0; i < numbers.length; i += 1) {\n-            result[i] = (numbers[i] - min) / (max - min);\n+    for (int i = 1; i < numbers.length; i++) {\n+        if (numbers[i] > max) {\n+            max = numbers[i];\n         }\n-        return result;\n+        if (numbers[i] < min) {\n+            min = numbers[i];\n+        }\n+    }\n+\n+    if (Math.abs(max - min) <= Double.MIN_VALUE) { // Use Double.MIN_VALUE as epsilon for floating-point comparisons\n+        return new double[numbers.length];\n+    }\n+\n+    double[] result = new double[numbers.length];\n+    for (int i = 0; i < numbers.length; i++) {\n+        result[i] = (numbers[i] - min) / (max - min);\n     }\n+    return result;\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}