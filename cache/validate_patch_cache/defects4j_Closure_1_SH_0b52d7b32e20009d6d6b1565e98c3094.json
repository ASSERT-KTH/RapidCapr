{
    "patch": "    // If function is referenced via the arguments object or `Function.arguments`, do not remove\n    // any arguments. This is because we can't determine whether arguments to the function might be\n    // accessed via the arguments object.\n    boolean isFnReferenced = function.isName()\n        && (fnScope.isArgumentsAlias(function.getString()) || function.getString().equals(\"arguments\"));\n    if (isFnReferenced) {\n      return;\n    }\n    \n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..ee154248 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,22 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // If function is referenced via the arguments object or `Function.arguments`, do not remove\n+    // any arguments. This is because we can't determine whether arguments to the function might be\n+    // accessed via the arguments object.\n+    boolean isFnReferenced = function.isName()\n+        && (fnScope.isArgumentsAlias(function.getString()) || function.getString().equals(\"arguments\"));\n+    if (isFnReferenced) {\n+      return;\n+    }\n+    \n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}