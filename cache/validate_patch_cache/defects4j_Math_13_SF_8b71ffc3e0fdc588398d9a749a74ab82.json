{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m, m.getRowDimension() * m.getColumnDimension());\n    final RealMatrix v = dec.getV();\n    final RealMatrix vt = v.transpose();\n    final RealMatrix d = dec.getD();\n    final double[] s = d.getRow(0);\n    final int n = s.length;\n\n    for (int i = 0; i < n; i++) {\n        if (s[i] < 0.0) {\n            throw new IllegalArgumentException(\"Matrix has non-real or negative eigenvalues\");\n        } else {\n            s[i] = Math.sqrt(s[i]);\n        }\n    }\n\n    RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(s);\n\n    return v.multiply(sqrtD).multiply(vt);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..b1e158515 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,24 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m, m.getRowDimension() * m.getColumnDimension());\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix vt = v.transpose();\n+    final RealMatrix d = dec.getD();\n+    final double[] s = d.getRow(0);\n+    final int n = s.length;\n+\n+    for (int i = 0; i < n; i++) {\n+        if (s[i] < 0.0) {\n+            throw new IllegalArgumentException(\"Matrix has non-real or negative eigenvalues\");\n+        } else {\n+            s[i] = Math.sqrt(s[i]);\n+        }\n     }\n+\n+    RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(s);\n+\n+    return v.multiply(sqrtD).multiply(vt);\n+}\n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1.6357215104109237> but was:<1.9452074317534194>",
    "test_result": "FAIL"
}