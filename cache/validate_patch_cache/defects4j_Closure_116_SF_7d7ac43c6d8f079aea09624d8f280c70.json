{
    "patch": "  private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node functionNode = fnNode;\n    Node callTarget = callNode.getFirstChild();\n\n    if (callTarget.isGetProp() && callTarget.getLastChild().getString().equals(\"call\")) {\n      // Skip the \"call\" function.\n      callTarget = callTarget.getFirstChild();\n    }\n\n    // The call target should be a name or a function expression with a name.\n    if (!callTarget.isName() && !(callTarget.isFunction() && callTarget.getFirstChild().isName())) {\n      return CanInlineResult.NO;\n    }\n\n    Node args = callTarget.getNext();\n\n    if (NodeUtil.isFunctionDeclaration(functionNode)) {\n      return CanInlineResult.NO;\n    }\n\n    // Not applicable for Class declarations (ECMA2015)\n    if (NodeUtil.isClassExpression(functionNode) || NodeUtil.isClassStatement(functionNode)) {\n      return CanInlineResult.NO;\n    }\n\n    // Not applicable for constructors (ECMA2015).\n    if (functionNode.isClassConstructor()) {\n      return CanInlineResult.NO;\n    }\n\n    // To prevent violations of the constant property restriction, we don't\n    // inline calls to functions that contain writes to const's.  We use\n    // mayHaveSideEffects here since its cheaper then\n    // NodeUtil.getSideEffectFlags().\n    if (functionNode.isArrowFunction()) {\n      // An arrow function does not belong to a class, therefore, it\n      // can not write to a \"this\" binding. Therefore, we only need to\n      // check const and let\n      if (NodeUtil.mayHaveSideEffects(functionNode, compiler)) {\n        return CanInlineResult.NO;\n      }\n    } else if (NodeUtil.isFunctionObjectCall(callNode)\n        || NodeUtil.isFunctionObjectApply(callNode)) {\n\n      // Skip [[HasInstance]] check to infer function type of callable object.\n      compiler.setRelaxTypes(true);\n      JSType callTargetType = NodeUtil.getExpressionType(callTarget, compiler);\n\n      if (callTargetType == null\n          // Arrow functions can't be constructed.\n          || callTargetType.isArrowFunction()) {\n        compiler.setRelaxTypes(false);\n        return CanInlineResult.NO;\n      }\n\n      functionNode = callTargetType.getLooseType().getFunction();\n\n      // Restore [[HasInstance]] check.\n      compiler.setRelaxTypes(false);\n    }\n\n    if (NodeUtil.mayHaveSideEffects(functionNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = NodeUtil.getFunctionBody(functionNode);\n    Node functionCallArgs = args;\n\n    if (NodeUtil.isFunctionObjectApply(callNode)) {\n      // For \".apply\", the last argument is an array whose elements should\n      // be inserted into the list of arguments to the call.\n      if (args.getNext().getLastChild().isArrayLit()) {\n        functionCallArgs = args.getNext().getLastChild().getFirstChild();\n      }\n    }\n\n    Node functionNodeParams = NodeUtil.getFunctionParameters(functionNode).getFirstChild();\n\n    while (functionNodeParams != null || functionCallArgs != null) {\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match.\n      if (functionCallArgs != null) {\n        if (NodeUtil.mayHaveSideEffects(functionCallArgs, compiler)) {\n          return CanInlineResult.NO;\n        }\n        functionCallArgs = functionCallArgs.getNext();\n      }\n\n      // For each named parameter check if a mutable argument use more than one.\n      if (functionNodeParams != null) {\n        if (functionCallArgs == null) {\n          // Found a named parameter without a matching function call argument.\n          return CanInlineResult.NO;\n        }\n\n        // Check for arguments that are evaluated more than once.\n        if (NodeUtil.mayEffectMutableState(functionCallArgs, compiler)\n            && NodeUtil.getNameReferenceCount(\n                block, functionNodeParams.getString()) > 1) {\n          return CanInlineResult.NO;\n        }\n\n        // Move to the next argument and parameter.\n        functionCallArgs = functionCallArgs.getNext();\n        functionNodeParams = functionNodeParams.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..99f070c3 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,62 +686,116 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+  private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n     }\n \n-    Node block = fnNode.getLastChild();\n+    Node functionNode = fnNode;\n+    Node callTarget = callNode.getFirstChild();\n \n+    if (callTarget.isGetProp() && callTarget.getLastChild().getString().equals(\"call\")) {\n+      // Skip the \"call\" function.\n+      callTarget = callTarget.getFirstChild();\n+    }\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+    // The call target should be a name or a function expression with a name.\n+    if (!callTarget.isName() && !(callTarget.isFunction() && callTarget.getFirstChild().isName())) {\n+      return CanInlineResult.NO;\n+    }\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+    Node args = callTarget.getNext();\n+\n+    if (NodeUtil.isFunctionDeclaration(functionNode)) {\n+      return CanInlineResult.NO;\n+    }\n+\n+    // Not applicable for Class declarations (ECMA2015)\n+    if (NodeUtil.isClassExpression(functionNode) || NodeUtil.isClassStatement(functionNode)) {\n+      return CanInlineResult.NO;\n+    }\n+\n+    // Not applicable for constructors (ECMA2015).\n+    if (functionNode.isClassConstructor()) {\n+      return CanInlineResult.NO;\n+    }\n+\n+    // To prevent violations of the constant property restriction, we don't\n+    // inline calls to functions that contain writes to const's.  We use\n+    // mayHaveSideEffects here since its cheaper then\n+    // NodeUtil.getSideEffectFlags().\n+    if (functionNode.isArrowFunction()) {\n+      // An arrow function does not belong to a class, therefore, it\n+      // can not write to a \"this\" binding. Therefore, we only need to\n+      // check const and let\n+      if (NodeUtil.mayHaveSideEffects(functionNode, compiler)) {\n+        return CanInlineResult.NO;\n       }\n+    } else if (NodeUtil.isFunctionObjectCall(callNode)\n+        || NodeUtil.isFunctionObjectApply(callNode)) {\n+\n+      // Skip [[HasInstance]] check to infer function type of callable object.\n+      compiler.setRelaxTypes(true);\n+      JSType callTargetType = NodeUtil.getExpressionType(callTarget, compiler);\n+\n+      if (callTargetType == null\n+          // Arrow functions can't be constructed.\n+          || callTargetType.isArrowFunction()) {\n+        compiler.setRelaxTypes(false);\n+        return CanInlineResult.NO;\n+      }\n+\n+      functionNode = callTargetType.getLooseType().getFunction();\n+\n+      // Restore [[HasInstance]] check.\n+      compiler.setRelaxTypes(false);\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+    if (NodeUtil.mayHaveSideEffects(functionNode)) {\n+      return CanInlineResult.NO;\n+    }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+    Node block = NodeUtil.getFunctionBody(functionNode);\n+    Node functionCallArgs = args;\n+\n+    if (NodeUtil.isFunctionObjectApply(callNode)) {\n+      // For \".apply\", the last argument is an array whose elements should\n+      // be inserted into the list of arguments to the call.\n+      if (args.getNext().getLastChild().isArrayLit()) {\n+        functionCallArgs = args.getNext().getLastChild().getFirstChild();\n       }\n+    }\n \n+    Node functionNodeParams = NodeUtil.getFunctionParameters(functionNode).getFirstChild();\n+\n+    while (functionNodeParams != null || functionCallArgs != null) {\n       // For every call argument check for side-effects, even if there\n       // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+      if (functionCallArgs != null) {\n+        if (NodeUtil.mayHaveSideEffects(functionCallArgs, compiler)) {\n+          return CanInlineResult.NO;\n+        }\n+        functionCallArgs = functionCallArgs.getNext();\n+      }\n+\n+      // For each named parameter check if a mutable argument use more than one.\n+      if (functionNodeParams != null) {\n+        if (functionCallArgs == null) {\n+          // Found a named parameter without a matching function call argument.\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n+\n+        // Check for arguments that are evaluated more than once.\n+        if (NodeUtil.mayEffectMutableState(functionCallArgs, compiler)\n+            && NodeUtil.getNameReferenceCount(\n+                block, functionNodeParams.getString()) > 1) {\n+          return CanInlineResult.NO;\n+        }\n+\n+        // Move to the next argument and parameter.\n+        functionCallArgs = functionCallArgs.getNext();\n+        functionNodeParams = functionNodeParams.getNext();\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}