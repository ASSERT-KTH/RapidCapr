{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() ||\n        n.isComma() || n.isBlock()) {\n      return;\n    }\n\n    // Recurse down to find the innermost child that we intend to modify.\n    Node inner = n;\n    Node prev = null;\n    while (inner.hasChildren()) {\n      if (inner.isExprResult() || inner.isBlock()) {\n        return;\n      }\n      if (NodeUtil.mayHaveSideEffects(inner.getFirstChild())) {\n        prev = inner;\n        inner = inner.getFirstChild();\n      } else if (NodeUtil.mayHaveSideEffects(inner.getLastChild())) {\n        prev = inner;\n        inner = inner.getLastChild();\n      } else {\n        return;\n      }\n    }\n\n    if (prev == null) {\n      return;\n    } else if (!NodeUtil.isStatement(prev)) {\n      problemNodes.add(inner);\n      return;\n    }\n\n    int parentType = parent.getType();\n    if ((parentType == Token.FOR || parentType == Token.FOR_IN || parentType == Token.WHILE || parentType == Token.DO) && parent.getLastChild().isBlock() && parent.getLastChild().getFirstChild() == prev) {\n      return; // We already do checks on the loop blocks.\n    }\n\n    if (parent.getFirstChild() == prev && NodeUtil.isParsableStatement(n)) {\n      return; // Let the ANNOTATION_CHECK pass check this node.\n    }\n\n    if (!NodeUtil.isStatement(prev) || NodeUtil.isFunctionExpression(parent)) {\n      problemNodes.add(inner);\n    } else if (!NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString() || n.isTemplateLit()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (NodeUtil.isAssignmentOp(n) || NodeUtil.isCompoundAssignmentOp(n)) {\n        msg = \"Did you intend to use the non-assignment version of this expression?\";\n      } else if (NodeUtil.isIncrementDecrementOp(n)) {\n        msg = \"Did you intend to use the postfix operator?\";\n      }\n      t.reportCodeChange();\n      t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..ed37c21c 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,71 +81,63 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public void visit(NodeTraversal t, Node n, Node parent) {\n     // VOID nodes appear when there are extra semicolons at the BLOCK level.\n     // I've been unable to think of any cases where this indicates a bug,\n     // and apparently some people like keeping these semicolons around,\n     // so we'll allow it.\n     if (n.isEmpty() ||\n-        n.isComma()) {\n+        n.isComma() || n.isBlock()) {\n       return;\n     }\n \n-    if (parent == null) {\n-      return;\n+    // Recurse down to find the innermost child that we intend to modify.\n+    Node inner = n;\n+    Node prev = null;\n+    while (inner.hasChildren()) {\n+      if (inner.isExprResult() || inner.isBlock()) {\n+        return;\n+      }\n+      if (NodeUtil.mayHaveSideEffects(inner.getFirstChild())) {\n+        prev = inner;\n+        inner = inner.getFirstChild();\n+      } else if (NodeUtil.mayHaveSideEffects(inner.getLastChild())) {\n+        prev = inner;\n+        inner = inner.getLastChild();\n+      } else {\n+        return;\n+      }\n     }\n \n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult()) {\n+    if (prev == null) {\n+      return;\n+    } else if (!NodeUtil.isStatement(prev)) {\n+      problemNodes.add(inner);\n       return;\n     }\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n-      return;\n+    int parentType = parent.getType();\n+    if ((parentType == Token.FOR || parentType == Token.FOR_IN || parentType == Token.WHILE || parentType == Token.DO) && parent.getLastChild().isBlock() && parent.getLastChild().getFirstChild() == prev) {\n+      return; // We already do checks on the loop blocks.\n     }\n \n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (parent.getType() == Token.COMMA) {\n-      if (isResultUsed) {\n-        return;\n-      }\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n-        }\n-      }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n-        return;\n-      }\n+    if (parent.getFirstChild() == prev && NodeUtil.isParsableStatement(n)) {\n+      return; // Let the ANNOTATION_CHECK pass check this node.\n     }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n+\n+    if (!NodeUtil.isStatement(prev) || NodeUtil.isFunctionExpression(parent)) {\n+      problemNodes.add(inner);\n+    } else if (!NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n+      if (n.isString() || n.isTemplateLit()) {\n         msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n+      } else if (NodeUtil.isAssignmentOp(n) || NodeUtil.isCompoundAssignmentOp(n)) {\n+        msg = \"Did you intend to use the non-assignment version of this expression?\";\n+      } else if (NodeUtil.isIncrementDecrementOp(n)) {\n+        msg = \"Did you intend to use the postfix operator?\";\n       }\n-\n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n-      }\n-    }\n-  }\n+      t.reportCodeChange();\n+      t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}