{
    "patch": "public double evaluate(final double[] values, final double[] weights,\n                       final double mean, final int begin, final int length) {\n    if (length < 2) { // if array size is zero or one, variance cannot be calculated",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\nindex e5518e31a..94dcea6aa 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java\n@@ -498,38 +498,9 @@ public class Variance extends AbstractStorelessUnivariateStatistic implements Se\n      * @throws IllegalArgumentException if the parameters are not valid\n      * @since 2.1\n      */\n-    public double evaluate(final double[] values, final double[] weights,\n-                           final double mean, final int begin, final int length) {\n-\n-        double var = Double.NaN;\n-\n-        if (test(values, weights, begin, length)) {\n-            if (length == 1) {\n-                var = 0.0;\n-            } else if (length > 1) {\n-                double accum = 0.0;\n-                double dev = 0.0;\n-                double accum2 = 0.0;\n-                for (int i = begin; i < begin + length; i++) {\n-                    dev = values[i] - mean;\n-                    accum += weights[i] * (dev * dev);\n-                    accum2 += weights[i] * dev;\n-                }\n-\n-                double sumWts = 0;\n-                for (int i = 0; i < weights.length; i++) {\n-                    sumWts += weights[i];\n-                }\n-\n-                if (isBiasCorrected) {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);\n-                } else {\n-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;\n-                }\n-            }\n-        }\n-        return var;\n-    }\n+public double evaluate(final double[] values, final double[] weights,\n+                       final double mean, final int begin, final int length) {\n+    if (length < 2) { // if array size is zero or one, variance cannot be calculated\n \n     /**\n      * <p>Returns the weighted variance of the values in the input array, using",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}