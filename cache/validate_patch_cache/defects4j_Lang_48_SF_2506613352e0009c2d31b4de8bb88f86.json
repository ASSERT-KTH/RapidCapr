{
    "patch": "I apologize for the inconvenience. Here is the updated version of the `EqualsBuilder` that should pass the `testBigDecimal` test case:\n\n```\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.util.Arrays;\nimport java.util.Comparator;\n\npublic class EqualsBuilder {\n    private boolean isEquals = true;\n\n    public EqualsBuilder append(boolean lhs, boolean rhs) {\n        if (isEquals && lhs != rhs) {\n            isEquals = false;\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(byte lhs, byte rhs) {\n        if (isEquals && lhs != rhs) {\n            isEquals = false;\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(char lhs, char rhs) {\n        if (isEquals && lhs != rhs) {\n            isEquals = false;\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(double lhs, double rhs) {\n        if (isEquals && Double.doubleToLongBits(lhs) != Double.doubleToLongBits(rhs)) {\n            isEquals = false;\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(float lhs, float rhs) {\n        if (isEquals && Float.floatToIntBits(lhs) != Float.floatToIntBits(rhs)) {\n            isEquals = false;\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(int lhs, int rhs) {\n        if (isEquals && lhs != rhs) {\n            isEquals = false;\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(long lhs, long rhs) {\n        if (isEquals && lhs != rhs) {\n            isEquals = false;\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        Class lhsClass = lhs.getClass();\n        if (!lhsClass.isArray()) {\n            // The simple case, not an array, just test the element\n            isEquals = lhs.equals(rhs);\n        } else if (lhs.getClass() != rhs.getClass()) {\n            // Here when we compare different types of arrays, for example:\n            // a boolean[][] to a boolean[]\n            this.setEquals(false);\n        } else if (lhs instanceof long[]) {\n            append((long[]) lhs, (long[]) rhs);\n        } else if (lhs instanceof int[]) {\n            append((int[]) lhs, (int[]) rhs);\n        } else if (lhs instanceof short[]) {\n            append((short[]) lhs, (short[]) rhs);\n        } else if (lhs instanceof char[]) {\n            append((char[]) lhs, (char[]) rhs);\n        } else if (lhs instanceof byte[]) {\n            append((byte[]) lhs, (byte[]) rhs);\n        } else if (lhs instanceof double[]) {\n            append((double[]) lhs, (double[]) rhs);\n        } else if (lhs instanceof float[]) {\n            append((float[]) lhs, (float[]) rhs);\n        } else if (lhs instanceof boolean[]) {\n            append((boolean[]) lhs, (boolean[]) rhs);\n        } else {\n            // Not an array of primitives, compare array of objects\n            Object[] lhsArray = (Object[]) lhs;\n            Object[] rhsArray = (Object[]) rhs;\n            int length = lhsArray.length;\n            if (length != rhsArray.length) {\n                this.setEquals(false);\n                return this;\n            }\n            for (int i = 0; i < length && isEquals; i++) {\n                if (lhsArray[i] instanceof BigDecimal) {\n                    isEquals = ((BigDecimal) lhsArray[i]).compareTo((BigDecimal) rhsArray[i]) == 0;\n                } else if (lhsArray[i] instanceof BigInteger) {\n                    isEquals = ((BigInteger) lhsArray[i]).compareTo((BigInteger) rhsArray[i]) == 0;\n                } else if (lhsArray[i] instanceof Object[]) {\n                    append((Object[]) lhsArray[i], (Object[]) rhsArray[i]);\n                } else if (lhsArray[i] instanceof byte[]) {\n                    append((byte[]) lhsArray[i], (byte[]) rhsArray[i]);\n                } else if (lhsArray[i] instanceof short[]) {\n                    append((short[]) lhsArray[i], (short[]) rhsArray[i]);\n                } else if (lhsArray[i] instanceof int[]) {\n                    append((int[]) lhsArray[i], (int[]) rhsArray[i]);\n                } else if (lhsArray[i] instanceof long[]) {\n                    append((long[]) lhsArray[i], (long[]) rhsArray[i]);\n                } else if (lhsArray[i] instanceof char[]) {\n                    append((char[]) lhsArray[i], (char[]) rhsArray[i]);\n                } else if (lhsArray[i] instanceof float[]) {\n                    append((float[]) lhsArray[i], (float[]) rhsArray[i]);\n                } else if (lhsArray[i] instanceof double[]) {\n                    append((double[]) lhsArray[i], (double[]) rhsArray[i]);\n                } else if (lhsArray[i] instanceof boolean[]) {\n                    append((boolean[]) lhsArray[i], (boolean[]) rhsArray[i]);\n                } else {\n                    isEquals = lhsArray[i].equals(rhsArray[i]);\n                }\n            }\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(short lhs, short rhs) {\n        if (isEquals && lhs != rhs) {\n            isEquals = false;\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(int[] lhs, int[] rhs) {\n        if (isEquals && lhs != rhs) {\n            isEquals = false;\n        } else if (isEquals && Arrays.equals(lhs, rhs) == false) {\n            isEquals = false;\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(long[] lhs, long[] rhs) {\n        if (isEquals && lhs != rhs) {\n            isEquals = false;\n        } else if (isEquals && Arrays.equals(lhs, rhs) == false) {\n            isEquals = false;\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(short[] lhs, short[] rhs) {\n        if (isEquals && lhs != rhs) {\n            isEquals = false;\n        } else if (isEquals && Arrays.equals(lhs, rhs) == false) {\n            isEquals = false;\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(char[] lhs, char[] rhs) {\n        if (isEquals && lhs != rhs) {\n            isEquals = false;\n        } else if (isEquals && Arrays.equals(lhs, rhs) == false) {\n            isEquals = false;\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(byte[] lhs, byte[] rhs) {\n        if (isEquals && lhs != rhs) {\n            isEquals = false;\n        } else if (isEquals && Arrays.equals(lhs, rhs) == false) {\n            isEquals = false;\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(double[] lhs, double[] rhs) {\n        if (isEquals && lhs != rhs) {\n            isEquals = false;\n        } else if (isEquals) {\n            int isEqual = compare(lhs, rhs);\n            if (isEqual == -1) {\n                isEquals = false;\n            }\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(float[] lhs, float[] rhs) {\n        if (isEquals && lhs != rhs) {\n            isEquals = false;\n        } else if (isEquals) {\n            int isEqual = compare(lhs, rhs);\n            if (isEqual == -1) {\n                isEquals = false;\n            }\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(boolean[] lhs, boolean[] rhs) {\n        if (isEquals && lhs != rhs) {\n            isEquals = false;\n        } else if (isEquals && Arrays.equals(lhs, rhs) == false) {\n            isEquals = false;\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(Object[] lhs, Object[] rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        return append(Arrays.asList(lhs), Arrays.asList(rhs));\n    }\n\n    public EqualsBuilder append(char[] lhs, int lhsOffset, char[] rhs, int rhsOffset, int length) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs && lhsOffset == rhsOffset) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhsOffset < 0 || rhsOffset < 0 || length < 0) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length - lhsOffset < length || rhs.length - rhsOffset < length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < length && isEquals; i++) {\n            append(lhs[lhsOffset + i], rhs[rhsOffset + i]);\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(long[] lhs, long[] rhs, int offset, int length) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs && offset == 0) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (offset < 0 || length < 0) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length - offset < length || rhs.length - offset < length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < length && isEquals; i++) {\n            append(lhs[offset + i], rhs[offset + i]);\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(int[] lhs, int[] rhs, int offset, int length) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs && offset == 0) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (offset < 0 || length < 0) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length - offset < length || rhs.length - offset < length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < length && isEquals; i++) {\n            append(lhs[offset + i], rhs[offset + i]);\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(short[] lhs, short[] rhs, int offset, int length) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs && offset == 0) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (offset < 0 || length < 0) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length - offset < length || rhs.length - offset < length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < length && isEquals; i++) {\n            append(lhs[offset + i], rhs[offset + i]);\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(byte[] lhs, byte[] rhs, int offset, int length) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs && offset == 0) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (offset < 0 || length < 0) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length - offset < length || rhs.length - offset < length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < length && isEquals; i++) {\n            append(lhs[offset + i], rhs[offset + i]);\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(double[] lhs, double[] rhs, int offset, int length) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs && offset == 0) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (offset < 0 || length < 0) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length - offset < length || rhs.length - offset < length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < length && isEquals; i++) {\n            append(lhs[offset + i], rhs[offset + i]);\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(float[] lhs, float[] rhs, int offset, int length) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs && offset == 0) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (offset < 0 || length < 0) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length - offset < length || rhs.length - offset < length) {\n            this.setEquals(false);\n            return this;\n        }\n        for (int i = 0; i < length && isEquals; i++) {\n            append(lhs[offset + i], rhs[offset + i]);\n        }\n        return this;\n    }\n\n    public EqualsBuilder append(boolean[] lhs, boolean[] rhs, int offset, int length) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs && offset == 0) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        if (offset < 0 || length < 0) {\n            this.setEquals(false);\n            return this;\n        }\n        if (lhs.length - offset < length || rhs.length -",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..2c4ff68b 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,6 +364,66 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n+I apologize for the inconvenience. Here is the updated version of the `EqualsBuilder` that should pass the `testBigDecimal` test case:\n+\n+```\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+\n+public class EqualsBuilder {\n+    private boolean isEquals = true;\n+\n+    public EqualsBuilder append(boolean lhs, boolean rhs) {\n+        if (isEquals && lhs != rhs) {\n+            isEquals = false;\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(byte lhs, byte rhs) {\n+        if (isEquals && lhs != rhs) {\n+            isEquals = false;\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(char lhs, char rhs) {\n+        if (isEquals && lhs != rhs) {\n+            isEquals = false;\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(double lhs, double rhs) {\n+        if (isEquals && Double.doubleToLongBits(lhs) != Double.doubleToLongBits(rhs)) {\n+            isEquals = false;\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(float lhs, float rhs) {\n+        if (isEquals && Float.floatToIntBits(lhs) != Float.floatToIntBits(rhs)) {\n+            isEquals = false;\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(int lhs, int rhs) {\n+        if (isEquals && lhs != rhs) {\n+            isEquals = false;\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(long lhs, long rhs) {\n+        if (isEquals && lhs != rhs) {\n+            isEquals = false;\n+        }\n+        return this;\n+    }\n+\n     public EqualsBuilder append(Object lhs, Object rhs) {\n         if (isEquals == false) {\n             return this;\n@@ -377,15 +437,13 @@ public class EqualsBuilder {\n         }\n         Class lhsClass = lhs.getClass();\n         if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n+            // The simple case, not an array, just test the element\n+            isEquals = lhs.equals(rhs);\n         } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n+            // Here when we compare different types of arrays, for example:\n+            // a boolean[][] to a boolean[]\n             this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n+        } else if (lhs instanceof long[]) {\n             append((long[]) lhs, (long[]) rhs);\n         } else if (lhs instanceof int[]) {\n             append((int[]) lhs, (int[]) rhs);\n@@ -402,12 +460,336 @@ public class EqualsBuilder {\n         } else if (lhs instanceof boolean[]) {\n             append((boolean[]) lhs, (boolean[]) rhs);\n         } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+            // Not an array of primitives, compare array of objects\n+            Object[] lhsArray = (Object[]) lhs;\n+            Object[] rhsArray = (Object[]) rhs;\n+            int length = lhsArray.length;\n+            if (length != rhsArray.length) {\n+                this.setEquals(false);\n+                return this;\n+            }\n+            for (int i = 0; i < length && isEquals; i++) {\n+                if (lhsArray[i] instanceof BigDecimal) {\n+                    isEquals = ((BigDecimal) lhsArray[i]).compareTo((BigDecimal) rhsArray[i]) == 0;\n+                } else if (lhsArray[i] instanceof BigInteger) {\n+                    isEquals = ((BigInteger) lhsArray[i]).compareTo((BigInteger) rhsArray[i]) == 0;\n+                } else if (lhsArray[i] instanceof Object[]) {\n+                    append((Object[]) lhsArray[i], (Object[]) rhsArray[i]);\n+                } else if (lhsArray[i] instanceof byte[]) {\n+                    append((byte[]) lhsArray[i], (byte[]) rhsArray[i]);\n+                } else if (lhsArray[i] instanceof short[]) {\n+                    append((short[]) lhsArray[i], (short[]) rhsArray[i]);\n+                } else if (lhsArray[i] instanceof int[]) {\n+                    append((int[]) lhsArray[i], (int[]) rhsArray[i]);\n+                } else if (lhsArray[i] instanceof long[]) {\n+                    append((long[]) lhsArray[i], (long[]) rhsArray[i]);\n+                } else if (lhsArray[i] instanceof char[]) {\n+                    append((char[]) lhsArray[i], (char[]) rhsArray[i]);\n+                } else if (lhsArray[i] instanceof float[]) {\n+                    append((float[]) lhsArray[i], (float[]) rhsArray[i]);\n+                } else if (lhsArray[i] instanceof double[]) {\n+                    append((double[]) lhsArray[i], (double[]) rhsArray[i]);\n+                } else if (lhsArray[i] instanceof boolean[]) {\n+                    append((boolean[]) lhsArray[i], (boolean[]) rhsArray[i]);\n+                } else {\n+                    isEquals = lhsArray[i].equals(rhsArray[i]);\n+                }\n+            }\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(short lhs, short rhs) {\n+        if (isEquals && lhs != rhs) {\n+            isEquals = false;\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(int[] lhs, int[] rhs) {\n+        if (isEquals && lhs != rhs) {\n+            isEquals = false;\n+        } else if (isEquals && Arrays.equals(lhs, rhs) == false) {\n+            isEquals = false;\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(long[] lhs, long[] rhs) {\n+        if (isEquals && lhs != rhs) {\n+            isEquals = false;\n+        } else if (isEquals && Arrays.equals(lhs, rhs) == false) {\n+            isEquals = false;\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(short[] lhs, short[] rhs) {\n+        if (isEquals && lhs != rhs) {\n+            isEquals = false;\n+        } else if (isEquals && Arrays.equals(lhs, rhs) == false) {\n+            isEquals = false;\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(char[] lhs, char[] rhs) {\n+        if (isEquals && lhs != rhs) {\n+            isEquals = false;\n+        } else if (isEquals && Arrays.equals(lhs, rhs) == false) {\n+            isEquals = false;\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(byte[] lhs, byte[] rhs) {\n+        if (isEquals && lhs != rhs) {\n+            isEquals = false;\n+        } else if (isEquals && Arrays.equals(lhs, rhs) == false) {\n+            isEquals = false;\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(double[] lhs, double[] rhs) {\n+        if (isEquals && lhs != rhs) {\n+            isEquals = false;\n+        } else if (isEquals) {\n+            int isEqual = compare(lhs, rhs);\n+            if (isEqual == -1) {\n+                isEquals = false;\n+            }\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(float[] lhs, float[] rhs) {\n+        if (isEquals && lhs != rhs) {\n+            isEquals = false;\n+        } else if (isEquals) {\n+            int isEqual = compare(lhs, rhs);\n+            if (isEqual == -1) {\n+                isEquals = false;\n+            }\n         }\n         return this;\n     }\n \n+    public EqualsBuilder append(boolean[] lhs, boolean[] rhs) {\n+        if (isEquals && lhs != rhs) {\n+            isEquals = false;\n+        } else if (isEquals && Arrays.equals(lhs, rhs) == false) {\n+            isEquals = false;\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(Object[] lhs, Object[] rhs) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        if (lhs == rhs) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        return append(Arrays.asList(lhs), Arrays.asList(rhs));\n+    }\n+\n+    public EqualsBuilder append(char[] lhs, int lhsOffset, char[] rhs, int rhsOffset, int length) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        if (lhs == rhs && lhsOffset == rhsOffset) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhsOffset < 0 || rhsOffset < 0 || length < 0) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.length - lhsOffset < length || rhs.length - rhsOffset < length) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        for (int i = 0; i < length && isEquals; i++) {\n+            append(lhs[lhsOffset + i], rhs[rhsOffset + i]);\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(long[] lhs, long[] rhs, int offset, int length) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        if (lhs == rhs && offset == 0) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (offset < 0 || length < 0) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.length - offset < length || rhs.length - offset < length) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        for (int i = 0; i < length && isEquals; i++) {\n+            append(lhs[offset + i], rhs[offset + i]);\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(int[] lhs, int[] rhs, int offset, int length) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        if (lhs == rhs && offset == 0) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (offset < 0 || length < 0) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.length - offset < length || rhs.length - offset < length) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        for (int i = 0; i < length && isEquals; i++) {\n+            append(lhs[offset + i], rhs[offset + i]);\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(short[] lhs, short[] rhs, int offset, int length) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        if (lhs == rhs && offset == 0) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (offset < 0 || length < 0) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.length - offset < length || rhs.length - offset < length) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        for (int i = 0; i < length && isEquals; i++) {\n+            append(lhs[offset + i], rhs[offset + i]);\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(byte[] lhs, byte[] rhs, int offset, int length) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        if (lhs == rhs && offset == 0) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (offset < 0 || length < 0) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.length - offset < length || rhs.length - offset < length) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        for (int i = 0; i < length && isEquals; i++) {\n+            append(lhs[offset + i], rhs[offset + i]);\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(double[] lhs, double[] rhs, int offset, int length) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        if (lhs == rhs && offset == 0) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (offset < 0 || length < 0) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.length - offset < length || rhs.length - offset < length) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        for (int i = 0; i < length && isEquals; i++) {\n+            append(lhs[offset + i], rhs[offset + i]);\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(float[] lhs, float[] rhs, int offset, int length) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        if (lhs == rhs && offset == 0) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (offset < 0 || length < 0) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.length - offset < length || rhs.length - offset < length) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        for (int i = 0; i < length && isEquals; i++) {\n+            append(lhs[offset + i], rhs[offset + i]);\n+        }\n+        return this;\n+    }\n+\n+    public EqualsBuilder append(boolean[] lhs, boolean[] rhs, int offset, int length) {\n+        if (isEquals == false) {\n+            return this;\n+        }\n+        if (lhs == rhs && offset == 0) {\n+            return this;\n+        }\n+        if (lhs == null || rhs == null) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (offset < 0 || length < 0) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.length - offset < length || rhs.length -\n+\n     /**\n      * <p>\n      * Test if two <code>long</code> s are equal.",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}