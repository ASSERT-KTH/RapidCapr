{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.MathUtils;\n\npublic class MyClass {\n   public static double regularizedGammaPositivePositive(double a, double x) {\n      if (a <= 0.0 || x < 0.0) {\n         throw new IllegalArgumentException(\"Invalid input arguments\");\n      }\n      if (x == 0.0) {\n          return 0.0;\n      }\n      double epsilon = MathUtils.EPSILON;\n      double logGammaA = Gamma.logGamma(a);\n      double term = Math.exp(a * Math.log(x) - x - logGammaA) / a;\n      double sum = term;\n      int i = 1;\n      while (term > epsilon * sum) {\n         double logTerm = Math.log(x) + i * Math.log(a) - Gamma.logGamma(a + i);\n         term = Math.exp(logTerm) / (++i);\n         sum += term;\n      }\n      return Math.min(1.0, sum);\n   }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..a87e0f962 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,30 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.MathUtils;\n+\n+public class MyClass {\n+   public static double regularizedGammaPositivePositive(double a, double x) {\n+      if (a <= 0.0 || x < 0.0) {\n+         throw new IllegalArgumentException(\"Invalid input arguments\");\n+      }\n+      if (x == 0.0) {\n+          return 0.0;\n+      }\n+      double epsilon = MathUtils.EPSILON;\n+      double logGammaA = Gamma.logGamma(a);\n+      double term = Math.exp(a * Math.log(x) - x - logGammaA) / a;\n+      double sum = term;\n+      int i = 1;\n+      while (term > epsilon * sum) {\n+         double logTerm = Math.log(x) + i * Math.log(a) - Gamma.logGamma(a + i);\n+         term = Math.exp(logTerm) / (++i);\n+         sum += term;\n+      }\n+      return Math.min(1.0, sum);\n+   }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}