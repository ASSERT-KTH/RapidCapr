{
    "patch": "public static double getTypedPercent(String jsonString) {\n    double count = 0.0;\n    double totalCount = 0.0;\n    JSONObject json = new JSONObject(jsonString);\n    JSONArray concepts = json.getJSONArray(\"concepts\");\n    int len = concepts.length();\n\n    for (int i = 0; i < len; i++) {\n        JSONObject concept = concepts.getJSONObject(i);\n        String typeString = concept.getString(\"type\");\n        if (typeString != null && !typeString.isEmpty()) {\n            // getTypedPercent method only works for 'person' values\n            if (typeString.equals(\"person\")) {\n                count++;\n            }\n            totalCount++;\n        }\n    }\n\n    if (totalCount == 0) {\n        return 0.0; // avoid divide by zero error\n    }\n\n    return (count / totalCount) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..de64b3fc 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,31 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonString) {\n+    double count = 0.0;\n+    double totalCount = 0.0;\n+    JSONObject json = new JSONObject(jsonString);\n+    JSONArray concepts = json.getJSONArray(\"concepts\");\n+    int len = concepts.length();\n+\n+    for (int i = 0; i < len; i++) {\n+        JSONObject concept = concepts.getJSONObject(i);\n+        String typeString = concept.getString(\"type\");\n+        if (typeString != null && !typeString.isEmpty()) {\n+            // getTypedPercent method only works for 'person' values\n+            if (typeString.equals(\"person\")) {\n+                count++;\n+            }\n+            totalCount++;\n+        }\n+    }\n+\n+    if (totalCount == 0) {\n+        return 0.0; // avoid divide by zero error\n+    }\n+\n+    return (count / totalCount) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}