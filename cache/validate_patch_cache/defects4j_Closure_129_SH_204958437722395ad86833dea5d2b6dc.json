{
    "patch": "      Node toAnnotate = first;\n      while (toAnnotate.isCast()) {\n        toAnnotate = toAnnotate.getFirstChild();\n      }\n\n      if (!NodeUtil.isGet(toAnnotate)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..d676198a 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,12 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+      Node toAnnotate = first;\n+      while (toAnnotate.isCast()) {\n+        toAnnotate = toAnnotate.getFirstChild();\n+      }\n+\n+      if (!NodeUtil.isGet(toAnnotate)) {\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}