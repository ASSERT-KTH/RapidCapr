{
    "patch": "            } else if (boundaries != null) {\n                // Convert API to internal handling of boundaries.\n                boundaries = new double[2][];\n                boundaries[0] = lB;\n                boundaries[1] = uB;\n                // Abort early if the normalization will overflow (cf. \"encode\" method).\n                for (int i = 0; i < init.length; i++) {\n                    final double[] b = boundaries[i];\n                    final double t = (init[i] - b[1]) / inputSigma[i];\n                    final double rescaled = (t >= 0) ?\n                        FastMath.min(FastMath.sqrt(Long.MAX_VALUE), t) :\n                        FastMath.max(-FastMath.sqrt(Long.MAX_VALUE), t);\n                    if (Double.isNaN(rescaled)) {\n                        throw new MathArithmeticException();\n                    } else if (Math.abs(rescaled) > FastMath.sqrt(Long.MAX_VALUE)) {\n                        throw new NumberIsTooLargeException(rescaled, FastMath.sqrt(Long.MAX_VALUE), true);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..cd0d47599 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,22 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+            } else if (boundaries != null) {\n+                // Convert API to internal handling of boundaries.\n+                boundaries = new double[2][];\n+                boundaries[0] = lB;\n+                boundaries[1] = uB;\n+                // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                for (int i = 0; i < init.length; i++) {\n+                    final double[] b = boundaries[i];\n+                    final double t = (init[i] - b[1]) / inputSigma[i];\n+                    final double rescaled = (t >= 0) ?\n+                        FastMath.min(FastMath.sqrt(Long.MAX_VALUE), t) :\n+                        FastMath.max(-FastMath.sqrt(Long.MAX_VALUE), t);\n+                    if (Double.isNaN(rescaled)) {\n+                        throw new MathArithmeticException();\n+                    } else if (Math.abs(rescaled) > FastMath.sqrt(Long.MAX_VALUE)) {\n+                        throw new NumberIsTooLargeException(rescaled, FastMath.sqrt(Long.MAX_VALUE), true);\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}