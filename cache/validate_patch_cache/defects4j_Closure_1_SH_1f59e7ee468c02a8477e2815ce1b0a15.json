{
    "patch": "    // Strip unreferenced args off the end of the function declaration.\n    Node argList = getFunctionArgList(function);\n\n    Node curParam = argList.getFirstChild();\n    if (curParam == null) {\n      return;\n    }\n\n    Node lastParam = null;\n    while (curParam != null) {\n      if (!curParam.isName()) {\n        return;\n      }\n      if (!referenced.contains(fnScope.getVar(curParam.getString()))) {\n        if (lastParam == null) {\n          argList.removeChild(curParam);\n          curParam = argList.getFirstChild();\n        } else {\n          argList.removeChild(lastParam.getNext());\n          curParam = lastParam.getNext();\n        }\n        compiler.reportCodeChange();\n      } else {\n        lastParam = curParam;\n        curParam = curParam.getNext();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..52364a9f 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,31 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node argList = getFunctionArgList(function);\n+\n+    Node curParam = argList.getFirstChild();\n+    if (curParam == null) {\n+      return;\n+    }\n+\n+    Node lastParam = null;\n+    while (curParam != null) {\n+      if (!curParam.isName()) {\n+        return;\n+      }\n+      if (!referenced.contains(fnScope.getVar(curParam.getString()))) {\n+        if (lastParam == null) {\n+          argList.removeChild(curParam);\n+          curParam = argList.getFirstChild();\n+        } else {\n+          argList.removeChild(lastParam.getNext());\n+          curParam = lastParam.getNext();\n+        }\n+        compiler.reportCodeChange();\n+      } else {\n+        lastParam = curParam;\n+        curParam = curParam.getNext();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}