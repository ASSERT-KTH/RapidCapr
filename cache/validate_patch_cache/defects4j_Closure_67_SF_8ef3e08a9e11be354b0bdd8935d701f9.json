{
    "patch": "    private boolean isPrototypePropertyAssign(Node assign) {\n      Node n = assign.getFirstChild();\n      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n          && n.getType() == Token.GETPROP\n          ) {\n        int getPropChildrenCount = n.getChildCount();\n        if (getPropChildrenCount == 2) {\n          Node child = n.getLastChild();\n\n          if (child.getType() == Token.STRING &&\n              child.getString().equals(\"prototype\")) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..f6172179 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -316,12 +316,9 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n           ) {\n-        // We want to exclude the assignment itself from the usage list\n-        boolean isChainedProperty =\n-            n.getFirstChild().getType() == Token.GETPROP;\n-\n-        if (isChainedProperty) {\n-          Node child = n.getFirstChild().getFirstChild().getNext();\n+        int getPropChildrenCount = n.getChildCount();\n+        if (getPropChildrenCount == 2) {\n+          Node child = n.getLastChild();\n \n           if (child.getType() == Token.STRING &&\n               child.getString().equals(\"prototype\")) {",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}