{
    "patch": "static String strEscape(String s, char quote,\n                         String doublequoteEscape,\n                         String singlequoteEscape,\n                         String backslashEscape,\n                         CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      switch (c) {\n        case '\\0':\n          sb.append(\"\\\\0\");\n          break;\n        case '\\n':\n          sb.append(\"\\\\n\");\n          break;\n        case '\\r':\n          sb.append(\"\\\\r\");\n          break;\n        case '\\t':\n          sb.append(\"\\\\t\");\n          break;\n        case '\\\\':\n          sb.append(backslashEscape);\n          break;\n        case '\\\"':\n          sb.append(doublequoteEscape);\n          break;\n        case '\\'':\n          sb.append(singlequoteEscape);\n          break;\n        case '>':\n          // Break --> into --\\> or ]]> into ]]\\>\n          final String COMMENT_END = \"--\\\\>\";\n          if (i >= 2 && (s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-')) {\n            sb.append(\"\\\\>\");\n          } else if (s.regionMatches(i, \"]]>\", 0, 3)) {\n            sb.append(\"\\\\]\\\\]>\");\n            i += 2;\n          } else if (s.regionMatches(true, i + 1, COMMENT_END, 0, COMMENT_END.length())) {\n            sb.append(\"--\\\\\\\\>\");\n            i += 4;\n          } else {\n            sb.append(c);\n          }\n          break;\n        case '<':\n          // </script or <!--\n          // Break </script into <\\/script\n          final String END_SCRIPT = \"/script\";\n          final String START_COMMENT = \"!--\";\n          if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length()) &&\n              (i + END_SCRIPT.length() + 1 == s.length() ||\n               !isAlphaNumeric(s.charAt(i + END_SCRIPT.length() + 1)))) {\n            sb.append(\"<\\\\/\");\n          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n            sb.append(\"<\\\\!\");\n            i += 3;\n          } else {\n            sb.append(c);\n          }\n          break;\n        default:\n          // Pass straight latin characters through, and escape the rest.\n          if (isValidCharCodePoint(c, outputCharsetEncoder)) {\n            sb.append(c);\n          } else {\n            // Unicode-escape the character.\n            appendHexJavaScriptRepresentation(sb, c);\n          }\n          break;\n      }\n    }\n    sb.append(quote);\n    return sb.toString();\n  }\n  \n  private static boolean isAlphaNumeric(char c) {\n    return (c >= 'a' && c <= 'z') ||\n           (c >= 'A' && c <= 'Z') ||\n           (c >= '0' && c <= '9');\n  }\n  \n  private static boolean isValidCharCodePoint(char c, CharsetEncoder charsetEncoder) {\n    if (charsetEncoder != null) {\n      return charsetEncoder.canEncode(c);\n    }\n    // Legacy behavior for non-BMP characters.\n    return !(c >= '\\uD800' && c <= '\\uDFFF');\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 6117a89b..4d86f2c4 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -1002,77 +1002,96 @@ class CodeGenerator {\n   }\n \n   /** Helper to escape javascript string as well as regular expression */\n-  static String strEscape(String s, char quote,\n-                          String doublequoteEscape,\n-                          String singlequoteEscape,\n-                          String backslashEscape,\n-                          CharsetEncoder outputCharsetEncoder) {\n+static String strEscape(String s, char quote,\n+                         String doublequoteEscape,\n+                         String singlequoteEscape,\n+                         String backslashEscape,\n+                         CharsetEncoder outputCharsetEncoder) {\n     StringBuilder sb = new StringBuilder(s.length() + 2);\n     sb.append(quote);\n     for (int i = 0; i < s.length(); i++) {\n       char c = s.charAt(i);\n       switch (c) {\n-        case '\\0': sb.append(\"\\\\0\"); break;\n-        case '\\n': sb.append(\"\\\\n\"); break;\n-        case '\\r': sb.append(\"\\\\r\"); break;\n-        case '\\t': sb.append(\"\\\\t\"); break;\n-        case '\\\\': sb.append(backslashEscape); break;\n-        case '\\\"': sb.append(doublequoteEscape); break;\n-        case '\\'': sb.append(singlequoteEscape); break;\n-        case '>':                       // Break --> into --\\> or ]]> into ]]\\>\n-          if (i >= 2 &&\n-              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n-               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n+        case '\\0':\n+          sb.append(\"\\\\0\");\n+          break;\n+        case '\\n':\n+          sb.append(\"\\\\n\");\n+          break;\n+        case '\\r':\n+          sb.append(\"\\\\r\");\n+          break;\n+        case '\\t':\n+          sb.append(\"\\\\t\");\n+          break;\n+        case '\\\\':\n+          sb.append(backslashEscape);\n+          break;\n+        case '\\\"':\n+          sb.append(doublequoteEscape);\n+          break;\n+        case '\\'':\n+          sb.append(singlequoteEscape);\n+          break;\n+        case '>':\n+          // Break --> into --\\> or ]]> into ]]\\>\n+          final String COMMENT_END = \"--\\\\>\";\n+          if (i >= 2 && (s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-')) {\n             sb.append(\"\\\\>\");\n+          } else if (s.regionMatches(i, \"]]>\", 0, 3)) {\n+            sb.append(\"\\\\]\\\\]>\");\n+            i += 2;\n+          } else if (s.regionMatches(true, i + 1, COMMENT_END, 0, COMMENT_END.length())) {\n+            sb.append(\"--\\\\\\\\>\");\n+            i += 4;\n           } else {\n             sb.append(c);\n           }\n           break;\n         case '<':\n+          // </script or <!--\n           // Break </script into <\\/script\n           final String END_SCRIPT = \"/script\";\n-\n-          // Break <!-- into <\\!--\n           final String START_COMMENT = \"!--\";\n-\n-          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n-                              END_SCRIPT.length())) {\n-            sb.append(\"<\\\\\");\n-          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n-                                     START_COMMENT.length())) {\n-            sb.append(\"<\\\\\");\n+          if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length()) &&\n+              (i + END_SCRIPT.length() + 1 == s.length() ||\n+               !isAlphaNumeric(s.charAt(i + END_SCRIPT.length() + 1)))) {\n+            sb.append(\"<\\\\/\");\n+          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n+            sb.append(\"<\\\\!\");\n+            i += 3;\n           } else {\n             sb.append(c);\n           }\n           break;\n         default:\n-          // If we're given an outputCharsetEncoder, then check if the\n-          //  character can be represented in this character set.\n-          if (outputCharsetEncoder != null) {\n-            if (outputCharsetEncoder.canEncode(c)) {\n-              sb.append(c);\n-            } else {\n-              // Unicode-escape the character.\n-              appendHexJavaScriptRepresentation(sb, c);\n-            }\n+          // Pass straight latin characters through, and escape the rest.\n+          if (isValidCharCodePoint(c, outputCharsetEncoder)) {\n+            sb.append(c);\n           } else {\n-            // No charsetEncoder provided - pass straight latin characters\n-            // through, and escape the rest.  Doing the explicit character\n-            // check is measurably faster than using the CharsetEncoder.\n-            if (c > 0x1f && c < 0x7f) {\n-              sb.append(c);\n-            } else {\n-              // Other characters can be misinterpreted by some js parsers,\n-              // or perhaps mangled by proxies along the way,\n-              // so we play it safe and unicode escape them.\n-              appendHexJavaScriptRepresentation(sb, c);\n-            }\n+            // Unicode-escape the character.\n+            appendHexJavaScriptRepresentation(sb, c);\n           }\n+          break;\n       }\n     }\n     sb.append(quote);\n     return sb.toString();\n   }\n+  \n+  private static boolean isAlphaNumeric(char c) {\n+    return (c >= 'a' && c <= 'z') ||\n+           (c >= 'A' && c <= 'Z') ||\n+           (c >= '0' && c <= '9');\n+  }\n+  \n+  private static boolean isValidCharCodePoint(char c, CharsetEncoder charsetEncoder) {\n+    if (charsetEncoder != null) {\n+      return charsetEncoder.canEncode(c);\n+    }\n+    // Legacy behavior for non-BMP characters.\n+    return !(c >= '\\uD800' && c <= '\\uDFFF');\n+  }\n \n   static String identifierEscape(String s) {\n     // First check if escaping is needed at all -- in most cases it isn't.",
    "result_reason": "junit.framework.ComparisonFailure: expected:<\"<\\/[]script>\"> but was:<\"<\\/[/]script>\">",
    "test_result": "FAIL"
}