{
    "patch": "try {\n    int newPos = Character.offsetByCodePoints(input, pos, 1);\n    if (newPos <= pos) {\n        char[] c = Character.toChars(Character.codePointAt(input, pos));\n        out.write(c);\n        pos += c.length;\n    } else {\n        pos = newPos;\n    }\n} catch (IndexOutOfBoundsException e) {\n    throw new StringIndexOutOfBoundsException(e.getMessage());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..36933107 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,18 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+try {\n+    int newPos = Character.offsetByCodePoints(input, pos, 1);\n+    if (newPos <= pos) {\n+        char[] c = Character.toChars(Character.codePointAt(input, pos));\n+        out.write(c);\n+        pos += c.length;\n+    } else {\n+        pos = newPos;\n+    }\n+} catch (IndexOutOfBoundsException e) {\n+    throw new StringIndexOutOfBoundsException(e.getMessage());\n+}\n             }\n         }\n     }",
    "result_reason": "java.lang.StringIndexOutOfBoundsException",
    "test_result": "FAIL"
}