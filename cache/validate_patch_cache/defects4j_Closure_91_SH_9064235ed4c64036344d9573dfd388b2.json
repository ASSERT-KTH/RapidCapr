{
    "patch": "      if (parent.getType() == Token.EXPR_RESULT) {\n        Node expr = parent.getFirstChild();\n        if (expr != null && expr.getType() == Token.ASSIGN) {\n          Node lhs = expr.getFirstChild();\n          Node rhs = expr.getLastChild();\n          if (NodeUtil.isGet(lhs) && lhs.getLastChild().getString().equals(\"prototype\")) {\n            if (rhs != null && rhs.getFirstChild() == n) {\n              return false;\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..5623039f 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,16 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent.getType() == Token.EXPR_RESULT) {\n+        Node expr = parent.getFirstChild();\n+        if (expr != null && expr.getType() == Token.ASSIGN) {\n+          Node lhs = expr.getFirstChild();\n+          Node rhs = expr.getLastChild();\n+          if (NodeUtil.isGet(lhs) && lhs.getLastChild().getString().equals(\"prototype\")) {\n+            if (rhs != null && rhs.getFirstChild() == n) {\n+              return false;\n+            }\n+          }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}