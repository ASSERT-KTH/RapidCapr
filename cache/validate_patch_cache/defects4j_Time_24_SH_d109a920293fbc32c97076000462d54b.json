{
    "patch": "            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                boolean yearAltered = saveField(DateTimeFieldType.year(), iDefaultYear);\n                millis = computeMillis(resetFields, text);\n                if (yearAltered) {\n                    DurationField years = DurationFieldType.years().getField(iChrono);\n                    long shiftedMillis = years.add(millis, -iDefaultYear);\n                    if (shiftedMillis != millis) {\n                        throw new IllegalArgumentException(\"Invalid base year: \" + iDefaultYear);\n                    }\n                }\n                return millis;\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..d65b50de 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,18 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+                boolean yearAltered = saveField(DateTimeFieldType.year(), iDefaultYear);\n+                millis = computeMillis(resetFields, text);\n+                if (yearAltered) {\n+                    DurationField years = DurationFieldType.years().getField(iChrono);\n+                    long shiftedMillis = years.add(millis, -iDefaultYear);\n+                    if (shiftedMillis != millis) {\n+                        throw new IllegalArgumentException(\"Invalid base year: \" + iDefaultYear);\n+                    }\n+                }\n+                return millis;\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}