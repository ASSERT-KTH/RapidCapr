{
    "patch": "      Node grandparent = parent.getParent();\n      if (NodeUtil.isGet(parent) && grandparent != null) {\n        // Check if the parent is a \"getprop\" and the grandparent is a \"call\".\n        if (grandparent.getType() == Token.CALL || grandparent.getType() == Token.NEW) {\n          Node method = grandparent.getFirstChild();\n          if (method.getType() == Token.GETPROP && \"prototype\".equals(method.getLastChild().getString())) {\n            return false;\n          }\n        } else if (grandparent.getType() == Token.ASSIGN) {\n          Node lhs = grandparent.getFirstChild();\n          if (lhs.isGetProp() && lhs.getLastChild().getString().equals(\"prototype\")) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..04eb1a3a 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,17 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node grandparent = parent.getParent();\n+      if (NodeUtil.isGet(parent) && grandparent != null) {\n+        // Check if the parent is a \"getprop\" and the grandparent is a \"call\".\n+        if (grandparent.getType() == Token.CALL || grandparent.getType() == Token.NEW) {\n+          Node method = grandparent.getFirstChild();\n+          if (method.getType() == Token.GETPROP && \"prototype\".equals(method.getLastChild().getString())) {\n+            return false;\n+          }\n+        } else if (grandparent.getType() == Token.ASSIGN) {\n+          Node lhs = grandparent.getFirstChild();\n+          if (lhs.isGetProp() && lhs.getLastChild().getString().equals(\"prototype\")) {\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}