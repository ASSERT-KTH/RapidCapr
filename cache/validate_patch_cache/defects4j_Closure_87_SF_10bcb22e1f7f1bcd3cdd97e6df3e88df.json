{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n  \n      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n        Node expr = maybeExpr.removeFirstChild();\n        if (!NodeUtil.isExpressionNode(expr)) {\n          return false;\n        }\n  \n        Node parent = maybeExpr.getParent();\n        boolean insideEventHandler =\n          parent != null &&\n          NodeUtil.isFunctionExpression(parent) &&\n          NodeUtil.isEventHandler(parent.getLastChild());\n  \n        if (!insideEventHandler) {\n          return false;\n        }\n      } else {\n        if (!NodeUtil.isExpressionNode(maybeExpr)) {\n          return false;\n        }\n  \n        Node parent = n.getParent();\n        boolean insideEventHandler =\n          parent != null &&\n          NodeUtil.isFunctionExpression(parent) &&\n          NodeUtil.isEventHandler(parent.getLastChild());\n  \n        if (!insideEventHandler) {\n          return false;\n        }\n      }\n  \n      return true;\n    }\n  }\n  \n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..7826fb24 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,48 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+  \n+      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+        Node expr = maybeExpr.removeFirstChild();\n+        if (!NodeUtil.isExpressionNode(expr)) {\n+          return false;\n+        }\n+  \n+        Node parent = maybeExpr.getParent();\n+        boolean insideEventHandler =\n+          parent != null &&\n+          NodeUtil.isFunctionExpression(parent) &&\n+          NodeUtil.isEventHandler(parent.getLastChild());\n+  \n+        if (!insideEventHandler) {\n+          return false;\n+        }\n+      } else {\n+        if (!NodeUtil.isExpressionNode(maybeExpr)) {\n+          return false;\n+        }\n+  \n+        Node parent = n.getParent();\n+        boolean insideEventHandler =\n+          parent != null &&\n+          NodeUtil.isFunctionExpression(parent) &&\n+          NodeUtil.isEventHandler(parent.getLastChild());\n+  \n+        if (!insideEventHandler) {\n+          return false;\n+        }\n       }\n+  \n+      return true;\n     }\n-\n-    return false;\n   }\n+  \n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}