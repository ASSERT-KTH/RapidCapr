{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex.clone();\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // check if we are close to the target\n            final double previousBest = best.getValue();\n            final double currentBest  = reflected.getValue();\n            final double[] previous = best.getPointRef();\n            final double[] reflectedArray = reflected.getPointRef();\n            final double delta = FastMath.abs(currentBest - previousBest);\n            final double rLimit = relativeThreshold * (FastMath.abs(previousBest) + FastMath.abs(currentBest)) * 0.5;\n\n            if (delta <= absoluteThreshold || delta <= rLimit) {\n                return;\n            }\n\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n            final RealPointValuePair replacement;\n            if (comparator.compare(expanded, reflected) < 0) {\n                replacement = expanded;\n            } else {\n                replacement = reflected;\n            }\n            final RealPointValuePair[] replaced = replaceWorstPoint(original, replacement, comparator);\n\n            if (comparator.compare(original[0], replaced[0]) == 0) {\n                final RealPointValuePair[] shrinked = shrink(original, comparator);\n                if (comparator.compare(shrinked[0], original[0]) < 0) {\n                    simplex = shrinked;\n                } else {\n                    simplex = replaced;\n                }\n            } else {\n                simplex = replaced;\n            }\n\n        } else {\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n\n            if (comparator.compare(contracted, original[0]) < 0) {\n                final RealPointValuePair[] replaced = replaceWorstPoint(original, contracted, comparator);\n                simplex = replaced;\n            } else {\n                final RealPointValuePair[] shrinked = shrink(original, comparator);\n                if (comparator.compare(shrinked[0], original[0]) < 0) {\n                    simplex = shrinked;\n                } else {\n                    simplex = replaced;\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..181aa4dca 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,73 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex.clone();\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+            // check if we are close to the target\n+            final double previousBest = best.getValue();\n+            final double currentBest  = reflected.getValue();\n+            final double[] previous = best.getPointRef();\n+            final double[] reflectedArray = reflected.getPointRef();\n+            final double delta = FastMath.abs(currentBest - previousBest);\n+            final double rLimit = relativeThreshold * (FastMath.abs(previousBest) + FastMath.abs(currentBest)) * 0.5;\n \n+            if (delta <= absoluteThreshold || delta <= rLimit) {\n                 return;\n+            }\n \n+            // compute the expanded simplex\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+            final RealPointValuePair replacement;\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                replacement = expanded;\n+            } else {\n+                replacement = reflected;\n+            }\n+            final RealPointValuePair[] replaced = replaceWorstPoint(original, replacement, comparator);\n+\n+            if (comparator.compare(original[0], replaced[0]) == 0) {\n+                final RealPointValuePair[] shrinked = shrink(original, comparator);\n+                if (comparator.compare(shrinked[0], original[0]) < 0) {\n+                    simplex = shrinked;\n+                } else {\n+                    simplex = replaced;\n+                }\n+            } else {\n+                simplex = replaced;\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+        } else {\n \n-            // check convergence\n-                return;\n+            // compute the contracted simplex\n+            final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+\n+            if (comparator.compare(contracted, original[0]) < 0) {\n+                final RealPointValuePair[] replaced = replaceWorstPoint(original, contracted, comparator);\n+                simplex = replaced;\n+            } else {\n+                final RealPointValuePair[] shrinked = shrink(original, comparator);\n+                if (comparator.compare(shrinked[0], original[0]) < 0) {\n+                    simplex = shrinked;\n+                } else {\n+                    simplex = replaced;\n+                }\n             }\n-\n         }\n-\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}