{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    if (x >= a + 1) {\n        double b = x + 1;\n        double c = 1 / (b * 2.0);\n        double d = c;\n        double h = d;\n\n        for (int i = 1; i < 10000; ++i) {\n            double an = -i * (i - a);\n            b += 2.0;\n            d = an * d + b;\n            if (Math.abs(d) > Double.MAX_VALUE / 10.0) {\n                an *= 1e-300;\n                d *= 1e-300;\n                h *= 1e-300;\n            }\n            c = b + an / c;\n            if (Math.abs(c) > Double.MAX_VALUE / 10.0) {\n                b *= 1e-300;\n                c *= 1e-300;\n                d *= 1e-300;\n                h *= 1e-300;\n            }\n            d = 1 / d;\n            double del = d * c;\n            h *= del;\n            if (Math.abs(del - 1.0) < 3e-14) {\n                break;\n            }\n        }\n\n        return 1 - h * Math.exp(-x + a * Math.log(x) - logGamma(a));\n    } else {\n        double b = x / a + 1;\n        double c = 1 / 1.0e-30;\n        double d = 1 / b;\n        double h = d;\n\n        for (int i = 1; i < 10000; ++i) {\n            double an = i - a;\n            b += 2.0;\n            d = an * d + b;\n            if (Math.abs(d) > Double.MAX_VALUE / 10.0) {\n                an *= 1e-300;\n                d *= 1e-300;\n                h *= 1e-300;\n            }\n            c = b + an / c;\n            if (Math.abs(c) > Double.MAX_VALUE / 10.0) {\n                b *= 1e-300;\n                c *= 1e-300;\n                d *= 1e-300;\n                h *= 1e-300;\n            }\n            d = 1 / d;\n            double del = d * c;\n            h *= del;\n            if (Math.abs(del - 1.0) < 3e-14) {\n                break;\n            }\n        }\n\n        return h * Math.exp(-x + a * Math.log(x) - logGamma(a));\n    }\n}\n\npublic static double logGamma(double x) {\n    if (x <= 0.0) {\n        return Double.NaN;\n    }\n\n    double z = x - 1;\n    double t = z + 5.5;\n    double ser = 1.000000000190015;\n    double[] cof = {76.18009172947146,     -86.50532032941677,      24.01409824083091,\n                    -1.231739572450155,     0.1208650973866179e-2, -0.5395239384953e-5};\n    double w = cof[0];\n\n    for (int i = 1; i < cof.length; i++) {\n        w += cof[i] / (z + i);\n        ser += cof[i] / (z + i);\n    }\n\n    return ((0.5 * Math.log(2.0 * Math.PI) + (z + 0.5) * Math.log(t) - t) + Math.log(ser / x));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..e696a9913 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,99 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    if (x >= a + 1) {\n+        double b = x + 1;\n+        double c = 1 / (b * 2.0);\n+        double d = c;\n+        double h = d;\n+\n+        for (int i = 1; i < 10000; ++i) {\n+            double an = -i * (i - a);\n+            b += 2.0;\n+            d = an * d + b;\n+            if (Math.abs(d) > Double.MAX_VALUE / 10.0) {\n+                an *= 1e-300;\n+                d *= 1e-300;\n+                h *= 1e-300;\n+            }\n+            c = b + an / c;\n+            if (Math.abs(c) > Double.MAX_VALUE / 10.0) {\n+                b *= 1e-300;\n+                c *= 1e-300;\n+                d *= 1e-300;\n+                h *= 1e-300;\n+            }\n+            d = 1 / d;\n+            double del = d * c;\n+            h *= del;\n+            if (Math.abs(del - 1.0) < 3e-14) {\n+                break;\n+            }\n+        }\n+\n+        return 1 - h * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+    } else {\n+        double b = x / a + 1;\n+        double c = 1 / 1.0e-30;\n+        double d = 1 / b;\n+        double h = d;\n+\n+        for (int i = 1; i < 10000; ++i) {\n+            double an = i - a;\n+            b += 2.0;\n+            d = an * d + b;\n+            if (Math.abs(d) > Double.MAX_VALUE / 10.0) {\n+                an *= 1e-300;\n+                d *= 1e-300;\n+                h *= 1e-300;\n+            }\n+            c = b + an / c;\n+            if (Math.abs(c) > Double.MAX_VALUE / 10.0) {\n+                b *= 1e-300;\n+                c *= 1e-300;\n+                d *= 1e-300;\n+                h *= 1e-300;\n+            }\n+            d = 1 / d;\n+            double del = d * c;\n+            h *= del;\n+            if (Math.abs(del - 1.0) < 3e-14) {\n+                break;\n+            }\n+        }\n+\n+        return h * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+    }\n+}\n+\n+public static double logGamma(double x) {\n+    if (x <= 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    double z = x - 1;\n+    double t = z + 5.5;\n+    double ser = 1.000000000190015;\n+    double[] cof = {76.18009172947146,     -86.50532032941677,      24.01409824083091,\n+                    -1.231739572450155,     0.1208650973866179e-2, -0.5395239384953e-5};\n+    double w = cof[0];\n+\n+    for (int i = 1; i < cof.length; i++) {\n+        w += cof[i] / (z + i);\n+        ser += cof[i] / (z + i);\n+    }\n+\n+    return ((0.5 * Math.log(2.0 * Math.PI) + (z + 0.5) * Math.log(t) - t) + Math.log(ser / x));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}