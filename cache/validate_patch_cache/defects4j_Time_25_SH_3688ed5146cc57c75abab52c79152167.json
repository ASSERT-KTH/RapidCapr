{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n\n    if (offsetLocal < 0 && offsetAdjusted >= 0 && instantAdjusted + offsetAdjusted >= 0) {\n        return getOffset(instantAdjusted + offsetAdjusted);\n    }\n\n    if (nextLocal != nextAdjusted && nextLocal <= instantLocal - offsetLocal) {\n        // If there is a transition happening between instantLocal and the next transition\n        // when instantAdjusted is considered, we will switch when we transition.\n        return offsetAdjusted;\n    } else {\n        // We are in a gap\n        return offsetLocal;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..fe60cf21 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,23 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+\n+    if (offsetLocal < 0 && offsetAdjusted >= 0 && instantAdjusted + offsetAdjusted >= 0) {\n+        return getOffset(instantAdjusted + offsetAdjusted);\n+    }\n+\n+    if (nextLocal != nextAdjusted && nextLocal <= instantLocal - offsetLocal) {\n+        // If there is a transition happening between instantLocal and the next transition\n+        // when instantAdjusted is considered, we will switch when we transition.\n+        return offsetAdjusted;\n+    } else {\n+        // We are in a gap\n+        return offsetLocal;\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}