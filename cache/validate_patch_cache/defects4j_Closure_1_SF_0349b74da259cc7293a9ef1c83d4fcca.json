{
    "patch": "import com.google.common.base.Preconditions;\nimport com.google.common.collect.Lists;\nimport com.google.javascript.jscomp.NodeUtil;\nimport com.google.javascript.jscomp.Scope;\nimport com.google.javascript.jscomp.Var;\nimport com.google.javascript.jscomp.VarReference;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\n\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Set;\n\nprivate void removeUnreferencedFunctionArgs(Scope fnScope) {\n    List<Node> referencedParams = Lists.newArrayList();\n    List<Var> referenced = findReferencedVars(fnScope, referencedParams);\n\n    Node fnNode = fnScope.getRootNode();\n    Preconditions.checkState(fnNode.isFunction(), fnNode);\n\n    if (NodeUtil.isGetOrSetKey(fnNode.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return;\n    }\n\n    Node argList = NodeUtil.getFunctionParameters(fnNode);\n    List<Node> unusedArgs = Lists.newLinkedList();\n    int totalArgs = argList.getChildCount();\n    boolean varArgs = NodeUtil.isVarArgsFunction(fnNode);\n\n    for (int i = 0; i < totalArgs; i++) {\n        Node arg = argList.getChildAtIndex(i);\n        Var var = fnScope.getVar(arg.getString());\n\n        if (!referenced.contains(var)) {\n            unusedArgs.add(arg);\n        }\n    }\n\n    while (!unusedArgs.isEmpty()) {\n        Node unusedArg = unusedArgs.removeLast();\n        argList.removeChild(unusedArg);\n        compiler.reportCodeChange();\n    }\n\n    if (modifyCallSites\n            && callSiteOptimizer.canModifyCallers(fnNode)) {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    } else if (varArgs) {\n        // If the function has variable arguments, we need to check for\n        // calls to this function with too few arguments.\n        String fnName = NodeUtil.getName(fnNode);\n        NodeTraversal.traverse(compiler,\n                new VarArgsChecker(referencedParams, fnName, fnNode));\n    }\n}\n\nprivate List<Var> findReferencedVars(Scope fnScope, List<Node> referencedParams) {\n    Set<Var> referenced = new HashSet<>();\n    Iterator<Var> iter = fnScope.getVars();\n    while (iter.hasNext()) {\n        Var var = iter.next();\n        if (isReferencedVariable(var, fnScope)) {\n            referenced.add(var);\n        }\n        if (NodeUtil.isFunctionDeclaration(var.getNode())) {\n            referenced.addAll(findReferencedVars(\n                    var.getScope(), referencedParams));\n        }\n    }\n\n    Iterator<VarReference> refIter = fnScope.getVarReferences();\n    while (refIter.hasNext()) {\n        VarReference ref = refIter.next();\n        if (!ref.isWellDefined()) {\n            // Some callers to the function may not pass in a known number of\n            // arguments. We do our best to account for these unknown arguments\n            // when not flagging function arguments as being referenced.\n            Node parentNode = ref.getParent();\n            if (parentNode.isCall() && parentNode.getLastChild() == ref.getNode()) {\n                Node grandParentNode = parentNode.getParent();\n                if (grandParentNode.isExprResult() || grandParentNode.isReturn()) {\n                    Node fnNode = fnScope.getRootNode();\n                    String fnName = NodeUtil.getName(fnNode);\n                    Node argList = parentNode.getFirstChild();\n                    if (!NodeUtil.isVarArgsFunction(fnNode) ||\n                            argList.getChildCount() > fnNode.getChildCount() - 3) {\n                        // If the function has a fixed number of arguments and the\n                        // number of arguments passed in is greater than or equal to\n                        // the number of fixed arguments then we can safely assume all\n                        // those arguments are referenced.\n                        referencedParams.addAll(Lists.newArrayList(argList.children()));\n                    } else {\n                        // If the function has variable number of arguments or the number\n                        // of arguments passed in is less than the number of fixed arguments,\n                        // we conservatively assume all arguments are referenced.\n                        for (int i = 0, count = argList.getChildCount(); i < count; ++i) {\n                            referencedParams.add(argList.getChildAtIndex(i));\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return Lists.newArrayList(referenced);\n}\n\nprivate boolean isReferencedVariable(Var v, Scope fnScope) {\n    Node name = v.getNameNode();\n    if (!v.isArguments() && !v.isExtern() && v.getParentNode() != null &&\n            v.getParentNode().isBlock() && !v.isTrapped() && !v.isModuleScope() &&\n            !v.isLocal()) {\n        // Process variables only if\n        // 1) they are not 'arguments' - function arguments are handled specially\n        // 2) they are not external - externs still need their arguments, and\n        //    we don't know how they are used externally\n        // 3) they are in a real block - we are only removing arguments from\n        //    declared function blocks\n        // 4) they are not trapped\n        // 5) they are not at module scope\n        // 6) they are not local - local variables can be used in inner functions\n\n        Node value = v.getNode().getFirstChild();\n        if (v.isLet() || v.isConst()) {\n            // let/const variables that don't have an initializer are assumed to\n            // be argument variables to inner functions. We must include them in\n            // the unreferenced list in case they are truely unreferenced.\n            if (value == null) {\n                return true;\n            }\n        }\n\n        // If variable has function expression, don't remove, which would\n        // change the scope of the function.\n        while (value != null && value.isCast()) {\n            value = value.getFirstChild();\n        }\n        if (value != null && value.isFunction()) {\n            return true;\n        }\n\n        // Don't remove if variable is referenced by eval.\n        if (v.isGlobal() && !compiler.getOptions().isRemoveUnusedPrototypeProperties() &&\n                NodeUtil.isVarOrSimpleAssignLhs(name) &&\n                NodeUtil.knownNotCallable(name.getNext())) {\n            Node parent = name.getParent();\n            if (parent.isGetProp() &&\n                    parent.getNext().isNull() &&\n                    NodeUtil.mayBeObjectLitKey(parent, parent.getParent())) {\n                return true;\n            }\n            if (parent.isCall() ||\n                    (parent.isName() &&\n                            (\"setTimeout\".equals(parent.getString()) ||\n                                    \"setInterval\".equals(parent.getString())))) {\n                return true;\n            }\n            if (NodeUtil.isExpressionNode(parent)) {\n                Node maybeEval = parent.getFirstChild();\n                if (maybeEval != null && maybeEval.isCall() &&\n                        maybeEval.getFirstChild().getString().equals(\"eval\")) {\n                    return true;\n                }\n            }\n        }\n\n        boolean unused = isUnused(v.getNode(), v, fnScope);\n        return unused;\n    }\n    return false;\n}\n\n/**\n * Returns true if a variable is not used.\n *\n * @param node the variable node (VAR or NAME)\n * @param var the Var for the variable\n * @param functionScope the function containing the variable\n * @return whether the variable is used\n */\nprivate boolean isUnused(Node node, Var var, Scope functionScope) {\n    Preconditions.checkArgument(node.isName() || node.isVar());\n\n    // Ignore unused exception vars of try/catch/finally.\n    if (node.isName() && var.getParentNode() != null && var.getParentNode().isCatch()) {\n        return false;\n    }\n\n    if (var.isLocal()) {\n        // Even if a variable is unused, we cannot remove it if it's a loop\n        // initializer (for-loop or for-in).\n        if (node.getParent() != null) {\n            Node parent = node.getParent();\n            if (parent.isFor() && parent.getFirstChild() == node) {\n                // Don't remove loop initializers.\n                return false;\n            }\n            if (parent.isForIn() && parent.getFirstChild() == node) {\n                // Don't remove loop initializers.\n                return false;\n            }\n            if (parent.isCatch() && parent.getFirstChild() == node) {\n                // Don't remove catch parameters.\n                return false;\n            }\n        }\n        if (NodeUtil.isInFunction(node)) {\n            // Check if the variable is used in any descendant of this function\n            // that is not also a descendant of some function that assigns to\n            // the variable.\n            //\n            // This is necessary because removing the variable will move the\n            // problematic code to a location where it might no longer be an\n            // issue.\n            //\n            // Does not check for variable re-assignments within loops or\n            // conditional statements (until loop and conditional structures\n            // are better recognized as structural patterns).\n            List<Node> childFunctions = getNonproblematicDescendantFunctions(node, functionScope);\n            for (Node fn : childFunctions) {\n                NodeUtil declFinder = new NodeUtil.MatchShallowNodeByType(Token.NAME, fn);\n                if (declFinder.hasMatchedNode()) {\n                    return false;\n                }\n            }\n        }\n    }\n\n    Node value = null;\n    if (node.isVar()) {\n        value = node.getFirstChild();\n    } else if (node.isName()) {\n        value = node;\n    }\n\n    if (value != null && NodeUtil.isFunctionDeclaration(value)) {\n        return false;\n    }\n\n    boolean isUnused = !NodeUtil.isReferenceUsed(node, var, functionScope);\n    return isUnused;\n}\n\n/**\n * Get descendant functions of a node within the scope\n * of a function without reassignments in between. This ensures that\n * the results of descendant functions are unavailable from the\n * declaring function that declared the variable.\n */\nprivate List<Node> getNonproblematicDescendantFunctions(Node node, final Scope fnScope) {\n    final LinkedList<Node> result = Lists.newLinkedList();\n    NodeUtil.visitPreOrder(\n            node,\n            new NodeUtil.Visitor() {\n                @Override\n                public void visit(Node node) {\n                    if (NodeUtil.isFunctionExpression(node) &&\n                            fnScope.getClosestHoistScope().getDepth() <= node.getScope().getDepth()) {\n                        String name = NodeUtil.getName(node);\n                        // The function's name and params are still visible, so it doesn't\n                        // entirely escape the function.\n                        if (!fnScope.getVar(name).getScope().equals(node.getScope()) &&\n                                !node.isArrowFunction()) {\n                            result.add(node);\n                        }\n                    }\n                }\n            },\n            NodeUtil.StopExecutionPredicate.CONTINUE_AFTER_ALL);\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d09c9f9f 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,280 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+import com.google.javascript.jscomp.NodeUtil;\n+import com.google.javascript.jscomp.Scope;\n+import com.google.javascript.jscomp.Var;\n+import com.google.javascript.jscomp.VarReference;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Set;\n+\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    List<Node> referencedParams = Lists.newArrayList();\n+    List<Var> referenced = findReferencedVars(fnScope, referencedParams);\n+\n+    Node fnNode = fnScope.getRootNode();\n+    Preconditions.checkState(fnNode.isFunction(), fnNode);\n+\n+    if (NodeUtil.isGetOrSetKey(fnNode.getParent())) {\n+        // The parameters object literal setters can not be removed.\n+        return;\n+    }\n+\n+    Node argList = NodeUtil.getFunctionParameters(fnNode);\n+    List<Node> unusedArgs = Lists.newLinkedList();\n+    int totalArgs = argList.getChildCount();\n+    boolean varArgs = NodeUtil.isVarArgsFunction(fnNode);\n+\n+    for (int i = 0; i < totalArgs; i++) {\n+        Node arg = argList.getChildAtIndex(i);\n+        Var var = fnScope.getVar(arg.getString());\n+\n         if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+            unusedArgs.add(arg);\n         }\n-      }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n     }\n-  }\n+\n+    while (!unusedArgs.isEmpty()) {\n+        Node unusedArg = unusedArgs.removeLast();\n+        argList.removeChild(unusedArg);\n+        compiler.reportCodeChange();\n+    }\n+\n+    if (modifyCallSites\n+            && callSiteOptimizer.canModifyCallers(fnNode)) {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n+    } else if (varArgs) {\n+        // If the function has variable arguments, we need to check for\n+        // calls to this function with too few arguments.\n+        String fnName = NodeUtil.getName(fnNode);\n+        NodeTraversal.traverse(compiler,\n+                new VarArgsChecker(referencedParams, fnName, fnNode));\n+    }\n+}\n+\n+private List<Var> findReferencedVars(Scope fnScope, List<Node> referencedParams) {\n+    Set<Var> referenced = new HashSet<>();\n+    Iterator<Var> iter = fnScope.getVars();\n+    while (iter.hasNext()) {\n+        Var var = iter.next();\n+        if (isReferencedVariable(var, fnScope)) {\n+            referenced.add(var);\n+        }\n+        if (NodeUtil.isFunctionDeclaration(var.getNode())) {\n+            referenced.addAll(findReferencedVars(\n+                    var.getScope(), referencedParams));\n+        }\n+    }\n+\n+    Iterator<VarReference> refIter = fnScope.getVarReferences();\n+    while (refIter.hasNext()) {\n+        VarReference ref = refIter.next();\n+        if (!ref.isWellDefined()) {\n+            // Some callers to the function may not pass in a known number of\n+            // arguments. We do our best to account for these unknown arguments\n+            // when not flagging function arguments as being referenced.\n+            Node parentNode = ref.getParent();\n+            if (parentNode.isCall() && parentNode.getLastChild() == ref.getNode()) {\n+                Node grandParentNode = parentNode.getParent();\n+                if (grandParentNode.isExprResult() || grandParentNode.isReturn()) {\n+                    Node fnNode = fnScope.getRootNode();\n+                    String fnName = NodeUtil.getName(fnNode);\n+                    Node argList = parentNode.getFirstChild();\n+                    if (!NodeUtil.isVarArgsFunction(fnNode) ||\n+                            argList.getChildCount() > fnNode.getChildCount() - 3) {\n+                        // If the function has a fixed number of arguments and the\n+                        // number of arguments passed in is greater than or equal to\n+                        // the number of fixed arguments then we can safely assume all\n+                        // those arguments are referenced.\n+                        referencedParams.addAll(Lists.newArrayList(argList.children()));\n+                    } else {\n+                        // If the function has variable number of arguments or the number\n+                        // of arguments passed in is less than the number of fixed arguments,\n+                        // we conservatively assume all arguments are referenced.\n+                        for (int i = 0, count = argList.getChildCount(); i < count; ++i) {\n+                            referencedParams.add(argList.getChildAtIndex(i));\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    return Lists.newArrayList(referenced);\n+}\n+\n+private boolean isReferencedVariable(Var v, Scope fnScope) {\n+    Node name = v.getNameNode();\n+    if (!v.isArguments() && !v.isExtern() && v.getParentNode() != null &&\n+            v.getParentNode().isBlock() && !v.isTrapped() && !v.isModuleScope() &&\n+            !v.isLocal()) {\n+        // Process variables only if\n+        // 1) they are not 'arguments' - function arguments are handled specially\n+        // 2) they are not external - externs still need their arguments, and\n+        //    we don't know how they are used externally\n+        // 3) they are in a real block - we are only removing arguments from\n+        //    declared function blocks\n+        // 4) they are not trapped\n+        // 5) they are not at module scope\n+        // 6) they are not local - local variables can be used in inner functions\n+\n+        Node value = v.getNode().getFirstChild();\n+        if (v.isLet() || v.isConst()) {\n+            // let/const variables that don't have an initializer are assumed to\n+            // be argument variables to inner functions. We must include them in\n+            // the unreferenced list in case they are truely unreferenced.\n+            if (value == null) {\n+                return true;\n+            }\n+        }\n+\n+        // If variable has function expression, don't remove, which would\n+        // change the scope of the function.\n+        while (value != null && value.isCast()) {\n+            value = value.getFirstChild();\n+        }\n+        if (value != null && value.isFunction()) {\n+            return true;\n+        }\n+\n+        // Don't remove if variable is referenced by eval.\n+        if (v.isGlobal() && !compiler.getOptions().isRemoveUnusedPrototypeProperties() &&\n+                NodeUtil.isVarOrSimpleAssignLhs(name) &&\n+                NodeUtil.knownNotCallable(name.getNext())) {\n+            Node parent = name.getParent();\n+            if (parent.isGetProp() &&\n+                    parent.getNext().isNull() &&\n+                    NodeUtil.mayBeObjectLitKey(parent, parent.getParent())) {\n+                return true;\n+            }\n+            if (parent.isCall() ||\n+                    (parent.isName() &&\n+                            (\"setTimeout\".equals(parent.getString()) ||\n+                                    \"setInterval\".equals(parent.getString())))) {\n+                return true;\n+            }\n+            if (NodeUtil.isExpressionNode(parent)) {\n+                Node maybeEval = parent.getFirstChild();\n+                if (maybeEval != null && maybeEval.isCall() &&\n+                        maybeEval.getFirstChild().getString().equals(\"eval\")) {\n+                    return true;\n+                }\n+            }\n+        }\n+\n+        boolean unused = isUnused(v.getNode(), v, fnScope);\n+        return unused;\n+    }\n+    return false;\n+}\n+\n+/**\n+ * Returns true if a variable is not used.\n+ *\n+ * @param node the variable node (VAR or NAME)\n+ * @param var the Var for the variable\n+ * @param functionScope the function containing the variable\n+ * @return whether the variable is used\n+ */\n+private boolean isUnused(Node node, Var var, Scope functionScope) {\n+    Preconditions.checkArgument(node.isName() || node.isVar());\n+\n+    // Ignore unused exception vars of try/catch/finally.\n+    if (node.isName() && var.getParentNode() != null && var.getParentNode().isCatch()) {\n+        return false;\n+    }\n+\n+    if (var.isLocal()) {\n+        // Even if a variable is unused, we cannot remove it if it's a loop\n+        // initializer (for-loop or for-in).\n+        if (node.getParent() != null) {\n+            Node parent = node.getParent();\n+            if (parent.isFor() && parent.getFirstChild() == node) {\n+                // Don't remove loop initializers.\n+                return false;\n+            }\n+            if (parent.isForIn() && parent.getFirstChild() == node) {\n+                // Don't remove loop initializers.\n+                return false;\n+            }\n+            if (parent.isCatch() && parent.getFirstChild() == node) {\n+                // Don't remove catch parameters.\n+                return false;\n+            }\n+        }\n+        if (NodeUtil.isInFunction(node)) {\n+            // Check if the variable is used in any descendant of this function\n+            // that is not also a descendant of some function that assigns to\n+            // the variable.\n+            //\n+            // This is necessary because removing the variable will move the\n+            // problematic code to a location where it might no longer be an\n+            // issue.\n+            //\n+            // Does not check for variable re-assignments within loops or\n+            // conditional statements (until loop and conditional structures\n+            // are better recognized as structural patterns).\n+            List<Node> childFunctions = getNonproblematicDescendantFunctions(node, functionScope);\n+            for (Node fn : childFunctions) {\n+                NodeUtil declFinder = new NodeUtil.MatchShallowNodeByType(Token.NAME, fn);\n+                if (declFinder.hasMatchedNode()) {\n+                    return false;\n+                }\n+            }\n+        }\n+    }\n+\n+    Node value = null;\n+    if (node.isVar()) {\n+        value = node.getFirstChild();\n+    } else if (node.isName()) {\n+        value = node;\n+    }\n+\n+    if (value != null && NodeUtil.isFunctionDeclaration(value)) {\n+        return false;\n+    }\n+\n+    boolean isUnused = !NodeUtil.isReferenceUsed(node, var, functionScope);\n+    return isUnused;\n+}\n+\n+/**\n+ * Get descendant functions of a node within the scope\n+ * of a function without reassignments in between. This ensures that\n+ * the results of descendant functions are unavailable from the\n+ * declaring function that declared the variable.\n+ */\n+private List<Node> getNonproblematicDescendantFunctions(Node node, final Scope fnScope) {\n+    final LinkedList<Node> result = Lists.newLinkedList();\n+    NodeUtil.visitPreOrder(\n+            node,\n+            new NodeUtil.Visitor() {\n+                @Override\n+                public void visit(Node node) {\n+                    if (NodeUtil.isFunctionExpression(node) &&\n+                            fnScope.getClosestHoistScope().getDepth() <= node.getScope().getDepth()) {\n+                        String name = NodeUtil.getName(node);\n+                        // The function's name and params are still visible, so it doesn't\n+                        // entirely escape the function.\n+                        if (!fnScope.getVar(name).getScope().equals(node.getScope()) &&\n+                                !node.isArrowFunction()) {\n+                            result.add(node);\n+                        }\n+                    }\n+                }\n+            },\n+            NodeUtil.StopExecutionPredicate.CONTINUE_AFTER_ALL);\n+    return result;\n+}\n \n \n   /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}