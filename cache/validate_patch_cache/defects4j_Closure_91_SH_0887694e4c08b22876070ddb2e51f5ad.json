{
    "patch": "// Don't traverse functions that are getting lent to a prototype.\nif (NodeUtil.isGet(parent)) {\n  Node lhs = parent.getFirstChild();\n  Node grandparent = parent.getParent();\n  if (NodeUtil.isAssignmentOp(grandparent)) {\n    Node llhs = lhs.getFirstChild();\n    if (llhs.getType() == Token.GETPROP &&\n        llhs.getLastChild().getString().equals(\"prototype\")) {\n      return false;\n    }\n  } else if (grandparent.getType() == Token.CALL) {\n    Node callee = grandparent.getFirstChild();\n    Node method = NodeUtil.isGet(callee) ? callee.getLastChild() : callee;\n    if (method.getType() == Token.GETPROP &&\n        method.getLastChild().getString().equals(\"prototype\")) {\n      return false;\n    }\n  }\n} else if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface())) {\n  if (parent.getType() == Token.NEW) {\n    return false;\n  }\n  Node current = parent.getNext();\n  while (current != null && NodeUtil.isExprAssign(current)) {\n    if (NodeUtil.isPrototypeProperty(current.getLastChild())) {\n      return false;\n    }\n    current = current.getNext();\n  }\n  return !NodeUtil.isPrototypeProperty(parent.getParent()) && !NodeUtil.isNew(parent);\n} else if (NodeUtil.isPrototypeProperty(parent.getParent())) {\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..11bed4ea 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,39 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+// Don't traverse functions that are getting lent to a prototype.\n+if (NodeUtil.isGet(parent)) {\n+  Node lhs = parent.getFirstChild();\n+  Node grandparent = parent.getParent();\n+  if (NodeUtil.isAssignmentOp(grandparent)) {\n+    Node llhs = lhs.getFirstChild();\n+    if (llhs.getType() == Token.GETPROP &&\n+        llhs.getLastChild().getString().equals(\"prototype\")) {\n+      return false;\n+    }\n+  } else if (grandparent.getType() == Token.CALL) {\n+    Node callee = grandparent.getFirstChild();\n+    Node method = NodeUtil.isGet(callee) ? callee.getLastChild() : callee;\n+    if (method.getType() == Token.GETPROP &&\n+        method.getLastChild().getString().equals(\"prototype\")) {\n+      return false;\n+    }\n+  }\n+} else if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface())) {\n+  if (parent.getType() == Token.NEW) {\n+    return false;\n+  }\n+  Node current = parent.getNext();\n+  while (current != null && NodeUtil.isExprAssign(current)) {\n+    if (NodeUtil.isPrototypeProperty(current.getLastChild())) {\n+      return false;\n+    }\n+    current = current.getNext();\n+  }\n+  return !NodeUtil.isPrototypeProperty(parent.getParent()) && !NodeUtil.isNew(parent);\n+} else if (NodeUtil.isPrototypeProperty(parent.getParent())) {\n+  return false;\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 110 expected:<0> but was:<1>",
    "test_result": "FAIL"
}