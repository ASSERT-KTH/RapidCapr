{
    "patch": "public static String unescape(String str) {\n    if (str == null) {\n        return null;\n    }\n    int len = str.length();\n    StringBuilder out = new StringBuilder(len);\n    int i = 0;\n    while (i < len) {\n        char c = str.charAt(i++);\n        if (c == '\\\\') {\n            if (i < len) {\n                c = str.charAt(i++);\n                if (c == 'u') {\n                    // Unicode escape\n                    int value = 0;\n                    for (int j = 0; j < 4 && i < len; j++) {\n                        c = str.charAt(i++);\n                        switch (c) {\n                            case '0': case '1': case '2': case '3': case '4':\n                            case '5': case '6': case '7': case '8': case '9':\n                                value = (value << 4) + c - '0';\n                                break;\n                            case 'a': case 'b': case 'c': case 'd': case 'e': case 'f':\n                                value = (value << 4) + 10 + c - 'a';\n                                break;\n                            case 'A': case 'B': case 'C': case 'D': case 'E': case 'F':\n                                value = (value << 4) + 10 + c - 'A';\n                                break;\n                            default:\n                                throw new IllegalArgumentException(\n                                    \"Malformed encoding.\");\n                        }\n                    }\n                    out.append((char) value);\n                } else if (c == '\\\\') {\n                    out.append('\\\\');\n                } else if (c == 'n') {\n                    out.append('\\n');\n                } else if (c == 'r') {\n                    out.append('\\r');\n                } else if (c == 't') {\n                    out.append('\\t');\n                } else if (c == 'b') {\n                    out.append('\\b');\n                } else if (c == 'f') {\n                    out.append('\\f');\n                } else if (c == '\\'') {\n                    out.append('\\'');\n                } else if (c == '\\\"') {\n                    out.append('\\\"');\n                } else if (c >= '0' && c <= '7') {\n                    // Octal escape\n                    int value = c - '0';\n                    if (i < len && str.charAt(i) >= '0' && str.charAt(i) <= '7') {\n                        value = (value << 3) + str.charAt(i++) - '0';\n                    }\n                    if (i < len && str.charAt(i) >= '0' && str.charAt(i) <= '7') {\n                        value = (value << 3) + str.charAt(i++) - '0';\n                    }\n                    out.append((char) value);\n                } else {\n                    // Unrecognized escape - output verbatim\n                    out.append('\\\\').append(c);\n                }\n            } else {\n                // Trailing backslash - output verbatim\n                out.append('\\\\');\n            }\n        } else {\n            // Non-escape character - output verbatim\n            out.append(c);\n        }\n    }\n    return out.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..ba5b10bb 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,81 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+public static String unescape(String str) {\n+    if (str == null) {\n+        return null;\n+    }\n+    int len = str.length();\n+    StringBuilder out = new StringBuilder(len);\n+    int i = 0;\n+    while (i < len) {\n+        char c = str.charAt(i++);\n+        if (c == '\\\\') {\n+            if (i < len) {\n+                c = str.charAt(i++);\n+                if (c == 'u') {\n+                    // Unicode escape\n+                    int value = 0;\n+                    for (int j = 0; j < 4 && i < len; j++) {\n+                        c = str.charAt(i++);\n+                        switch (c) {\n+                            case '0': case '1': case '2': case '3': case '4':\n+                            case '5': case '6': case '7': case '8': case '9':\n+                                value = (value << 4) + c - '0';\n+                                break;\n+                            case 'a': case 'b': case 'c': case 'd': case 'e': case 'f':\n+                                value = (value << 4) + 10 + c - 'a';\n+                                break;\n+                            case 'A': case 'B': case 'C': case 'D': case 'E': case 'F':\n+                                value = (value << 4) + 10 + c - 'A';\n+                                break;\n+                            default:\n+                                throw new IllegalArgumentException(\n+                                    \"Malformed encoding.\");\n+                        }\n+                    }\n+                    out.append((char) value);\n+                } else if (c == '\\\\') {\n+                    out.append('\\\\');\n+                } else if (c == 'n') {\n+                    out.append('\\n');\n+                } else if (c == 'r') {\n+                    out.append('\\r');\n+                } else if (c == 't') {\n+                    out.append('\\t');\n+                } else if (c == 'b') {\n+                    out.append('\\b');\n+                } else if (c == 'f') {\n+                    out.append('\\f');\n+                } else if (c == '\\'') {\n+                    out.append('\\'');\n+                } else if (c == '\\\"') {\n+                    out.append('\\\"');\n+                } else if (c >= '0' && c <= '7') {\n+                    // Octal escape\n+                    int value = c - '0';\n+                    if (i < len && str.charAt(i) >= '0' && str.charAt(i) <= '7') {\n+                        value = (value << 3) + str.charAt(i++) - '0';\n+                    }\n+                    if (i < len && str.charAt(i) >= '0' && str.charAt(i) <= '7') {\n+                        value = (value << 3) + str.charAt(i++) - '0';\n+                    }\n+                    out.append((char) value);\n+                } else {\n+                    // Unrecognized escape - output verbatim\n+                    out.append('\\\\').append(c);\n+                }\n+            } else {\n+                // Trailing backslash - output verbatim\n+                out.append('\\\\');\n             }\n+        } else {\n+            // Non-escape character - output verbatim\n+            out.append(c);\n         }\n     }\n+    return out.toString();\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "error: no suitable method found for translate(CharSequence,StringWriter)",
    "test_result": "ERROR"
}