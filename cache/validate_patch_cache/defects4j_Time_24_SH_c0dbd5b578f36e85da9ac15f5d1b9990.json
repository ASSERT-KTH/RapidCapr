{
    "patch": "            if (count > 0) {\n                // alter base year for parsing if first field is month or day\n                DurationField firstField = savedFields[0].iField.getDurationField();\n                if (compareReverse(firstField.getFieldType(), DateTimeFieldType.weekyear()) == 0 ||\n                    compareReverse(firstField.getFieldType(), DateTimeFieldType.year()) == 0) {\n                    int year = savedFields[0].iField.get(DateTimeFieldType.year(), iChrono.year().getMinimumValue());\n                    int weekyear = savedFields[0].iField.get(DateTimeFieldType.weekyear(), iChrono.weekyear().get(year, 1));\n                    int weekOfWeekyear = savedFields[0].iField.get(DateTimeFieldType.weekOfWeekyear(), 1);\n                    if (weekyear != iDefaultYear || year != iDefaultYear) {\n                        // compute dayOfYear directly\n                        int dayOfYear = 0;\n                        for (int i = 0; i < count; i++) {\n                            dayOfYear += savedFields[i].iField.set(millis, savedFields[i].iValue);\n                        }\n                        millis = getChronology().withWeekyear(weekyear).withWeekOfWeekyear(weekOfWeekyear).withDayOfYear(dayOfYear).withMillisOfDay((int)millis).getDateTimeMillis(0);\n                        LocalDate localDate = new LocalDate(millis, getChronology());\n                        if (localDate.getWeekyear() != weekyear ||\n                            localDate.getYear() != year ||\n                            localDate.getWeekOfWeekyear() != weekOfWeekyear) {\n                            // rollback and let the algorithm continue\n                            saveField(DateTimeFieldType.year(), iDefaultYear);\n                            saveField(DateTimeFieldType.weekyear(), iDefaultYear);\n                            millis = iMillis;\n                            continue;\n                        }\n                        // update millis to local midnight\n                        millis = localDate.toDateTimeAtStartOfDay(getChronology()).getMillis();\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..6cfe5fd5 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,36 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (count > 0) {\n+                // alter base year for parsing if first field is month or day\n+                DurationField firstField = savedFields[0].iField.getDurationField();\n+                if (compareReverse(firstField.getFieldType(), DateTimeFieldType.weekyear()) == 0 ||\n+                    compareReverse(firstField.getFieldType(), DateTimeFieldType.year()) == 0) {\n+                    int year = savedFields[0].iField.get(DateTimeFieldType.year(), iChrono.year().getMinimumValue());\n+                    int weekyear = savedFields[0].iField.get(DateTimeFieldType.weekyear(), iChrono.weekyear().get(year, 1));\n+                    int weekOfWeekyear = savedFields[0].iField.get(DateTimeFieldType.weekOfWeekyear(), 1);\n+                    if (weekyear != iDefaultYear || year != iDefaultYear) {\n+                        // compute dayOfYear directly\n+                        int dayOfYear = 0;\n+                        for (int i = 0; i < count; i++) {\n+                            dayOfYear += savedFields[i].iField.set(millis, savedFields[i].iValue);\n+                        }\n+                        millis = getChronology().withWeekyear(weekyear).withWeekOfWeekyear(weekOfWeekyear).withDayOfYear(dayOfYear).withMillisOfDay((int)millis).getDateTimeMillis(0);\n+                        LocalDate localDate = new LocalDate(millis, getChronology());\n+                        if (localDate.getWeekyear() != weekyear ||\n+                            localDate.getYear() != year ||\n+                            localDate.getWeekOfWeekyear() != weekOfWeekyear) {\n+                            // rollback and let the algorithm continue\n+                            saveField(DateTimeFieldType.year(), iDefaultYear);\n+                            saveField(DateTimeFieldType.weekyear(), iDefaultYear);\n+                            millis = iMillis;\n+                            continue;\n+                        }\n+                        // update millis to local midnight\n+                        millis = localDate.toDateTimeAtStartOfDay(getChronology()).getMillis();\n+                    }\n+                }\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}