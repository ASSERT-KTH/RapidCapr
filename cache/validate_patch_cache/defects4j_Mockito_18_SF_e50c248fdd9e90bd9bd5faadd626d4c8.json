{
    "patch": "public static <T> Optional<T> findFirstMatching(Class<T> clazz, Object... objects) {\n    for (Object object : objects) {\n        if (clazz.isInstance(object)) {\n            return Optional.of(clazz.cast(object));\n        }\n    }\n    return Optional.empty();\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..bf2a0afc2 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,14 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static <T> Optional<T> findFirstMatching(Class<T> clazz, Object... objects) {\n+    for (Object object : objects) {\n+        if (clazz.isInstance(object)) {\n+            return Optional.of(clazz.cast(object));\n+        }\n+    }\n+    return Optional.empty();\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}