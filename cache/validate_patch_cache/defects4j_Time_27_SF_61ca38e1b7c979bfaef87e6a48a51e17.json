{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n    if (size == 1 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        return new PeriodFormatter(sep, sep);\n    } else if (elementPairs.isEmpty()) {\n        return new PeriodFormatter(null, null);\n    } else {\n        Separator sep = null;\n        PeriodPrinter printer = null;\n        PeriodParser parser = null;\n        boolean first = true;\n        for (Object obj : elementPairs) {\n            if (obj instanceof Separator) {\n                sep = (Separator) obj;\n                first = true;\n            } else {\n                Object[] comp = createComposite(Collections.singletonList(obj));\n                if (!notPrinter) {\n                    printer = first ? (PeriodPrinter) comp[0] : printer.withPrinter((PeriodPrinter) comp[0]);\n                }\n                if (!notParser) {\n                    parser = first ? (PeriodParser) comp[1] : parser.withParser((PeriodParser) comp[1]);\n                }\n                first = false;\n            }\n        }\n        return new PeriodFormatter(printer, parser).withSeparatorIfFieldsAfter(sep);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..6f6c957f 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,40 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+    if (size == 1 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        return new PeriodFormatter(sep, sep);\n+    } else if (elementPairs.isEmpty()) {\n+        return new PeriodFormatter(null, null);\n+    } else {\n+        Separator sep = null;\n+        PeriodPrinter printer = null;\n+        PeriodParser parser = null;\n+        boolean first = true;\n+        for (Object obj : elementPairs) {\n+            if (obj instanceof Separator) {\n+                sep = (Separator) obj;\n+                first = true;\n+            } else {\n+                Object[] comp = createComposite(Collections.singletonList(obj));\n+                if (!notPrinter) {\n+                    printer = first ? (PeriodPrinter) comp[0] : printer.withPrinter((PeriodPrinter) comp[0]);\n+                }\n+                if (!notParser) {\n+                    parser = first ? (PeriodParser) comp[1] : parser.withParser((PeriodParser) comp[1]);\n+                }\n+                first = false;\n+            }\n         }\n+        return new PeriodFormatter(printer, parser).withSeparatorIfFieldsAfter(sep);\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}