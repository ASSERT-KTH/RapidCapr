{
    "patch": "public static String unescape(String value) {\n    if (value.indexOf(\"\\\\u\") == -1 && value.indexOf(\"\\\\n\") == -1 && value.indexOf(\"\\\\r\") == -1 && value.indexOf(\"\\\\t\") == -1 && value.indexOf(\"\\\\'\") == -1 && value.indexOf(\"\\\\\\\\\") == -1) {\n        return value;\n    }\n    StringBuilder buf = new StringBuilder(value.length());\n    for (int i = 0; i < value.length(); i++) {\n        char ch = value.charAt(i);\n        if (ch == '\\\\' && i + 1 < value.length()) {\n            char nextChar = value.charAt(i + 1);\n            switch (nextChar) {\n                case '\\\\':\n                    buf.append('\\\\');\n                    break;\n                case 'u':\n                    // Unicode escape sequence\n                    int code = 0;\n                    for (int j = 0; j < 4; j++) {\n                        char hexChar = value.charAt(i + 2 + j);\n                        switch (hexChar) {\n                            case '0':\n                            case '1':\n                            case '2':\n                            case '3':\n                            case '4':\n                            case '5':\n                            case '6':\n                            case '7':\n                            case '8':\n                            case '9':\n                                code = (code << 4) + hexChar - '0';\n                                break;\n                            case 'a':\n                            case 'b':\n                            case 'c':\n                            case 'd':\n                            case 'e':\n                            case 'f':\n                                code = (code << 4) + 10 + hexChar - 'a';\n                                break;\n                            case 'A':\n                            case 'B':\n                            case 'C':\n                            case 'D':\n                            case 'E':\n                            case 'F':\n                                code = (code << 4) + 10 + hexChar - 'A';\n                                break;\n                            default:\n                                throw new IllegalArgumentException(\"Malformed \\\\uxxxx encoding.\");\n                        }\n                    }\n                    i += 5;\n                    buf.append((char) code);\n                    break;\n                case 'n':\n                    buf.append('\\n');\n                    i++;\n                    break;\n                case 'r':\n                    buf.append('\\r');\n                    i++;\n                    break;\n                case 't':\n                    buf.append('\\t');\n                    i++;\n                    break;\n                case '\\'':\n                    buf.append('\\'');\n                    i++;\n                    break;\n                default:\n                    buf.append(ch);\n                    break;\n            }\n        } else {\n            buf.append(ch);\n        }\n    }\n    return buf.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5163a64c 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,86 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String value) {\n+    if (value.indexOf(\"\\\\u\") == -1 && value.indexOf(\"\\\\n\") == -1 && value.indexOf(\"\\\\r\") == -1 && value.indexOf(\"\\\\t\") == -1 && value.indexOf(\"\\\\'\") == -1 && value.indexOf(\"\\\\\\\\\") == -1) {\n+        return value;\n+    }\n+    StringBuilder buf = new StringBuilder(value.length());\n+    for (int i = 0; i < value.length(); i++) {\n+        char ch = value.charAt(i);\n+        if (ch == '\\\\' && i + 1 < value.length()) {\n+            char nextChar = value.charAt(i + 1);\n+            switch (nextChar) {\n+                case '\\\\':\n+                    buf.append('\\\\');\n+                    break;\n+                case 'u':\n+                    // Unicode escape sequence\n+                    int code = 0;\n+                    for (int j = 0; j < 4; j++) {\n+                        char hexChar = value.charAt(i + 2 + j);\n+                        switch (hexChar) {\n+                            case '0':\n+                            case '1':\n+                            case '2':\n+                            case '3':\n+                            case '4':\n+                            case '5':\n+                            case '6':\n+                            case '7':\n+                            case '8':\n+                            case '9':\n+                                code = (code << 4) + hexChar - '0';\n+                                break;\n+                            case 'a':\n+                            case 'b':\n+                            case 'c':\n+                            case 'd':\n+                            case 'e':\n+                            case 'f':\n+                                code = (code << 4) + 10 + hexChar - 'a';\n+                                break;\n+                            case 'A':\n+                            case 'B':\n+                            case 'C':\n+                            case 'D':\n+                            case 'E':\n+                            case 'F':\n+                                code = (code << 4) + 10 + hexChar - 'A';\n+                                break;\n+                            default:\n+                                throw new IllegalArgumentException(\"Malformed \\\\uxxxx encoding.\");\n+                        }\n+                    }\n+                    i += 5;\n+                    buf.append((char) code);\n+                    break;\n+                case 'n':\n+                    buf.append('\\n');\n+                    i++;\n+                    break;\n+                case 'r':\n+                    buf.append('\\r');\n+                    i++;\n+                    break;\n+                case 't':\n+                    buf.append('\\t');\n+                    i++;\n+                    break;\n+                case '\\'':\n+                    buf.append('\\'');\n+                    i++;\n+                    break;\n+                default:\n+                    buf.append(ch);\n+                    break;\n+            }\n+        } else {\n+            buf.append(ch);\n+        }\n+    }\n+    return buf.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}