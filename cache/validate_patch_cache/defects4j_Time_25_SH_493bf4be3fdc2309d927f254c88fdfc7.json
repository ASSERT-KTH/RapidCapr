{
    "patch": "                if (offsetLocal < offsetAdjusted) {\n                    long prevTransition =\n                            previousTransition(instantLocal - offsetLocal);\n                    int prevOffset = getOffset(prevTransition);\n                    if (prevOffset == offsetAdjusted) {\n                        return offsetAdjusted;\n                    }\n                    return offsetLocal;\n                } else {\n                    long nextTransition =\n                            nextTransition(instantLocal - offsetLocal);\n                    int nextOffset = getOffset(nextTransition);\n                    if (nextOffset < offsetAdjusted) {\n                        return nextOffset;\n                    }\n                    return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..bf744488 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,22 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                if (offsetLocal < offsetAdjusted) {\n+                    long prevTransition =\n+                            previousTransition(instantLocal - offsetLocal);\n+                    int prevOffset = getOffset(prevTransition);\n+                    if (prevOffset == offsetAdjusted) {\n+                        return offsetAdjusted;\n+                    }\n+                    return offsetLocal;\n+                } else {\n+                    long nextTransition =\n+                            nextTransition(instantLocal - offsetLocal);\n+                    int nextOffset = getOffset(nextTransition);\n+                    if (nextOffset < offsetAdjusted) {\n+                        return nextOffset;\n+                    }\n+                    return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}