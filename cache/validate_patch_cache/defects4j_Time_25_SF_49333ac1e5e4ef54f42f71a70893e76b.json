{
    "patch": "public int getOffsetFromLocal(long localInstant) {\n    int initialOffset = getOffset(localInstant);\n    long adjustedInstant = localInstant - initialOffset;\n    int adjustedOffset = getOffset(adjustedInstant);\n    if (initialOffset != adjustedOffset) {\n        Boolean isGap = null;\n        long nextTransition;\n        \n        // Check if we're in a gap or an overlap\n        while (true) {\n            nextTransition = (isGap == null) ? nextTransition(localInstant) : (isGap ? nextTransition(nextTransition) : previousTransition(nextTransition));\n            if (nextTransition == DateTimeUtils.MIN_MILLIS || nextTransition == DateTimeUtils.MAX_MILLIS) {\n                // reached beginning or end of valid time, return initial offset\n                return initialOffset;\n            }\n            \n            int nextOffset = getOffset(nextTransition);\n            if (isGap == null) {\n                isGap = nextOffset > initialOffset;\n            }\n            \n            boolean inOverlap = isGap ? (initialOffset >= nextOffset) : (initialOffset < nextOffset);\n            if (!inOverlap) {\n                break;\n            }\n        }\n        \n        // we've found the next transition, compute new initial offset\n        if (isGap) {\n            initialOffset = getOffset(nextTransition - 1);\n        } else {\n            initialOffset = getOffset(nextTransition);\n        }\n    }\n    return initialOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..03b1322f 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,42 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long localInstant) {\n+    int initialOffset = getOffset(localInstant);\n+    long adjustedInstant = localInstant - initialOffset;\n+    int adjustedOffset = getOffset(adjustedInstant);\n+    if (initialOffset != adjustedOffset) {\n+        Boolean isGap = null;\n+        long nextTransition;\n+        \n+        // Check if we're in a gap or an overlap\n+        while (true) {\n+            nextTransition = (isGap == null) ? nextTransition(localInstant) : (isGap ? nextTransition(nextTransition) : previousTransition(nextTransition));\n+            if (nextTransition == DateTimeUtils.MIN_MILLIS || nextTransition == DateTimeUtils.MAX_MILLIS) {\n+                // reached beginning or end of valid time, return initial offset\n+                return initialOffset;\n             }\n+            \n+            int nextOffset = getOffset(nextTransition);\n+            if (isGap == null) {\n+                isGap = nextOffset > initialOffset;\n+            }\n+            \n+            boolean inOverlap = isGap ? (initialOffset >= nextOffset) : (initialOffset < nextOffset);\n+            if (!inOverlap) {\n+                break;\n+            }\n+        }\n+        \n+        // we've found the next transition, compute new initial offset\n+        if (isGap) {\n+            initialOffset = getOffset(nextTransition - 1);\n+        } else {\n+            initialOffset = getOffset(nextTransition);\n         }\n-        return offsetAdjusted;\n     }\n+    return initialOffset;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}