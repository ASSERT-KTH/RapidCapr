{
    "patch": "      if (parent.getType() == Token.ASSIGN) {\n        Node leftSide = parent.getFirstChild();\n        if (NodeUtil.isGet(leftSide) && \"prototype\".equals(leftSide.getLastChild().getString())) {\n          return false;\n        }\n      } else if (NodeUtil.isObjectLitKey(parent, n)) {\n        Node parentParent = parent.getParent();\n        if (parentParent != null && NodeUtil.isGet(parentParent) &&\n            \"prototype\".equals(parentParent.getLastChild().getString())) {\n          return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..8b72ada7 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,16 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent.getType() == Token.ASSIGN) {\n+        Node leftSide = parent.getFirstChild();\n+        if (NodeUtil.isGet(leftSide) && \"prototype\".equals(leftSide.getLastChild().getString())) {\n+          return false;\n+        }\n+      } else if (NodeUtil.isObjectLitKey(parent, n)) {\n+        Node parentParent = parent.getParent();\n+        if (parentParent != null && NodeUtil.isGet(parentParent) &&\n+            \"prototype\".equals(parentParent.getLastChild().getString())) {\n+          return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}