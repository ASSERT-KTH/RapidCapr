{
    "patch": "public static double getTypedPercent(String jsonData) {\n    JsonParser parser = new JsonParser();\n    JsonObject obj = parser.parse(jsonData).getAsJsonObject();\n    double count = 0;\n\n    Set<String> keys = obj.keySet();\n    for (String key : keys) {\n        if (obj.get(key).isJsonPrimitive() && obj.get(key).getAsJsonPrimitive().isNumber()) {\n            count += 1.0;\n        }\n    }\n\n    double percent = count / keys.size() * 100.0;\n    return percent;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..6f3ec891 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonData) {\n+    JsonParser parser = new JsonParser();\n+    JsonObject obj = parser.parse(jsonData).getAsJsonObject();\n+    double count = 0;\n+\n+    Set<String> keys = obj.keySet();\n+    for (String key : keys) {\n+        if (obj.get(key).isJsonPrimitive() && obj.get(key).getAsJsonPrimitive().isNumber()) {\n+            count += 1.0;\n+        }\n+    }\n+\n+    double percent = count / keys.size() * 100.0;\n+    return percent;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}