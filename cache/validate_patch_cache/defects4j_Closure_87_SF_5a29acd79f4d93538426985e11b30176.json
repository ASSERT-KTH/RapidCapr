{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        // IE has a bug where event handlers behave differently when\n        // their return value is used vs. when their return value is in\n        // an EXPR_RESULT. It's pretty freaking weird. See:\n        // http://code.google.com/p/closure-compiler/issues/detail?id=291\n        // We try to detect this case, and not fold EXPR_RESULTs\n        // into other expressions.\n\n        // We only have to worry about methods with an implicit 'this'\n        // param, or this doesn't happen.\n        if (NodeUtil.isExpressionNode(maybeExpr) && !NodeUtil.isCallOrNew(maybeExpr)) {\n            boolean hasIfWithoutElse = false;\n            for (Node child : maybeExpr.children()) {\n                if (child.getType() == Token.IF && !child.getLastChild().hasChildren()) {\n                    hasIfWithoutElse = true;\n                    break;\n                }\n            }\n\n            if (hasIfWithoutElse) {\n                return false;\n            }\n\n            return true;\n        }\n    }\n\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..8e19e5b5 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,37 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n+        // IE has a bug where event handlers behave differently when\n+        // their return value is used vs. when their return value is in\n+        // an EXPR_RESULT. It's pretty freaking weird. See:\n+        // http://code.google.com/p/closure-compiler/issues/detail?id=291\n+        // We try to detect this case, and not fold EXPR_RESULTs\n+        // into other expressions.\n+\n+        // We only have to worry about methods with an implicit 'this'\n+        // param, or this doesn't happen.\n+        if (NodeUtil.isExpressionNode(maybeExpr) && !NodeUtil.isCallOrNew(maybeExpr)) {\n+            boolean hasIfWithoutElse = false;\n+            for (Node child : maybeExpr.children()) {\n+                if (child.getType() == Token.IF && !child.getLastChild().hasChildren()) {\n+                    hasIfWithoutElse = true;\n+                    break;\n+                }\n+            }\n \n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n+            if (hasIfWithoutElse) {\n+                return false;\n+            }\n \n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+            return true;\n+        }\n     }\n \n     return false;\n-  }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}