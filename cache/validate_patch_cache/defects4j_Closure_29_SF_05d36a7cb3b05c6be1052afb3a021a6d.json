{
    "patch": "private boolean isInlinableObject(List<Reference> refs) {\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    // Ignore indirect references, like x.y (except x.y(), since\n    // the function referenced by y might reference 'this').\n    //\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      // A call target maybe using the object as a 'this' value.\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      }\n\n      // NOTE(nicksantos): This pass's object-splitting algorithm has\n      // a blind spot. It assumes that if a property isn't defined on an\n      // object, then the value is undefined. This is not true, because\n      // Object.prototype can have arbitrary properties on it.\n      //\n      // We short-circuit this problem by bailing out if we see a reference\n      // to a property that isn't defined on the object literal. This\n      // isn't a perfect algorithm, but it should catch most cases.\n      continue;\n    }\n\n    // Only rewrite VAR declarations or simple assignment statements\n    if (!isVarOrAssignExprLhs(name)) {\n      continue;\n    }\n\n    Node val = ref.getAssignedValue();\n    if (val == null) {\n      // A var with no assignment.\n      continue;\n    }\n\n    // We're looking for object literal assignments only.\n    if (!val.isObjectLit()) {\n      continue;\n    }\n\n    // Make sure that the value is not self-refential.\n    // IOW, disallow things like x = {b: x.a}.\n    // Also, ES5 getters/setters aren't handled by this pass.\n    if (isSelfReferringObjectLiteral(val, refs)) {\n      continue;\n    }\n\n    // We have found an acceptable object literal assignment. As\n    // long as there are no other assignments that mess things up,\n    // we can inline.\n    return true;\n  }\n  return false;\n}\n\nprivate boolean isSelfReferringObjectLiteral(Node obj, List<Reference> refs) {\n  Set<Node> children = Sets.newIdentityHashSet();\n  for (Node child = obj.getFirstChild(); child != null;\n      child = child.getNext()) {\n    if (child.isGetterDef() || child.isSetterDef()) {\n      // ES5 get/set not supported.\n      return true;\n    }\n    children.add(child);\n  }\n  Set<Node> visited = Sets.newIdentityHashSet();\n  for (Node child = obj.getFirstChild(); child != null;\n      child = child.getNext()) {\n    if (isSelfReferringObjectLiteralHelper(child, refs, children, visited)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nprivate boolean isSelfReferringObjectLiteralHelper(Node obj,\n    List<Reference> refs, Set<Node> children, Set<Node> visited) {\n  // Make sure the object is an object literal.\n  if (obj.isCall() || !obj.isAssign()) {\n    return false;\n  }\n\n  // Check if any child of the object is being assigned a reference\n  // to the object itself.\n  Node rhs = obj.getLastChild().getFirstChild();\n  while(rhs != null) {\n    if (children.contains(rhs)) {\n      if (isReferenceInNodeOrChild(rhs, refs, obj)) {\n        return true;\n      } else if (rhs.isObjectLit()) {\n        if (visited.contains(rhs)) {\n          // Do not recurse if we have already checked this object.\n          rhs = rhs.getNext();\n          continue;\n        }\n        visited.add(rhs);\n        if (isSelfReferringObjectLiteralHelper(rhs, refs, children, visited)) {\n          return true;\n        }\n      }\n    }\n    rhs = rhs.getNext();\n  }\n  return false;\n}\n\nprivate boolean isReferenceInNodeOrChild(Node node,\n    List<Reference> refs, Node exclude) {\n  for (Reference ref : refs) {\n    // Check if rhs is the parent of any of the passed in\n    // references, as that is how self-referential assignments\n    // will happen.\n    Node refNode = ref.getParent();\n    while (!NodeUtil.isStatementBlock(refNode)) {\n      if (refNode.getFirstChild() == node && refNode != exclude) {\n        return true;\n      }\n      refNode = refNode.getParent();\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..28d9c143 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,92 +152,132 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      for (Reference ref : refs) {\n-        Node name = ref.getNode();\n-        Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n-\n-        // Ignore indirect references, like x.y (except x.y(), since\n-        // the function referenced by y might reference 'this').\n-        //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n+private boolean isInlinableObject(List<Reference> refs) {\n+  for (Reference ref : refs) {\n+    Node name = ref.getNode();\n+    Node parent = ref.getParent();\n+    Node gramps = ref.getGrandparent();\n+\n+    // Ignore indirect references, like x.y (except x.y(), since\n+    // the function referenced by y might reference 'this').\n+    //\n+    if (parent.isGetProp()) {\n+      Preconditions.checkState(parent.getFirstChild() == name);\n+      // A call target maybe using the object as a 'this' value.\n+      if (gramps.isCall()\n+          && gramps.getFirstChild() == parent) {\n+        return false;\n+      }\n \n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          continue;\n-        }\n+      // NOTE(nicksantos): This pass's object-splitting algorithm has\n+      // a blind spot. It assumes that if a property isn't defined on an\n+      // object, then the value is undefined. This is not true, because\n+      // Object.prototype can have arbitrary properties on it.\n+      //\n+      // We short-circuit this problem by bailing out if we see a reference\n+      // to a property that isn't defined on the object literal. This\n+      // isn't a perfect algorithm, but it should catch most cases.\n+      continue;\n+    }\n \n-        // Only rewrite VAR declarations or simple assignment statements\n-        if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n-        }\n+    // Only rewrite VAR declarations or simple assignment statements\n+    if (!isVarOrAssignExprLhs(name)) {\n+      continue;\n+    }\n \n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n-          continue;\n-        }\n+    Node val = ref.getAssignedValue();\n+    if (val == null) {\n+      // A var with no assignment.\n+      continue;\n+    }\n \n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n-          return false;\n-        }\n+    // We're looking for object literal assignments only.\n+    if (!val.isObjectLit()) {\n+      continue;\n+    }\n \n-        // Make sure that the value is not self-refential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n-            return false;\n-          }\n+    // Make sure that the value is not self-refential.\n+    // IOW, disallow things like x = {b: x.a}.\n+    // Also, ES5 getters/setters aren't handled by this pass.\n+    if (isSelfReferringObjectLiteral(val, refs)) {\n+      continue;\n+    }\n \n+    // We have found an acceptable object literal assignment. As\n+    // long as there are no other assignments that mess things up,\n+    // we can inline.\n+    return true;\n+  }\n+  return false;\n+}\n \n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n-            }\n-          }\n-        }\n+private boolean isSelfReferringObjectLiteral(Node obj, List<Reference> refs) {\n+  Set<Node> children = Sets.newIdentityHashSet();\n+  for (Node child = obj.getFirstChild(); child != null;\n+      child = child.getNext()) {\n+    if (child.isGetterDef() || child.isSetterDef()) {\n+      // ES5 get/set not supported.\n+      return true;\n+    }\n+    children.add(child);\n+  }\n+  Set<Node> visited = Sets.newIdentityHashSet();\n+  for (Node child = obj.getFirstChild(); child != null;\n+      child = child.getNext()) {\n+    if (isSelfReferringObjectLiteralHelper(child, refs, children, visited)) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n+\n+private boolean isSelfReferringObjectLiteralHelper(Node obj,\n+    List<Reference> refs, Set<Node> children, Set<Node> visited) {\n+  // Make sure the object is an object literal.\n+  if (obj.isCall() || !obj.isAssign()) {\n+    return false;\n+  }\n \n+  // Check if any child of the object is being assigned a reference\n+  // to the object itself.\n+  Node rhs = obj.getLastChild().getFirstChild();\n+  while(rhs != null) {\n+    if (children.contains(rhs)) {\n+      if (isReferenceInNodeOrChild(rhs, refs, obj)) {\n+        return true;\n+      } else if (rhs.isObjectLit()) {\n+        if (visited.contains(rhs)) {\n+          // Do not recurse if we have already checked this object.\n+          rhs = rhs.getNext();\n+          continue;\n+        }\n+        visited.add(rhs);\n+        if (isSelfReferringObjectLiteralHelper(rhs, refs, children, visited)) {\n+          return true;\n+        }\n+      }\n+    }\n+    rhs = rhs.getNext();\n+  }\n+  return false;\n+}\n \n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n+private boolean isReferenceInNodeOrChild(Node node,\n+    List<Reference> refs, Node exclude) {\n+  for (Reference ref : refs) {\n+    // Check if rhs is the parent of any of the passed in\n+    // references, as that is how self-referential assignments\n+    // will happen.\n+    Node refNode = ref.getParent();\n+    while (!NodeUtil.isStatementBlock(refNode)) {\n+      if (refNode.getFirstChild() == node && refNode != exclude) {\n+        return true;\n       }\n-      return ret;\n+      refNode = refNode.getParent();\n     }\n+  }\n+  return false;\n+}\n \n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}