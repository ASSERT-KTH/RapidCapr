{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final double[][] sqrt = new double[n][n];\n    final FieldMatrix<Complex> fieldMatrix\n            = new Array2DRowFieldMatrix<>(MatrixUtils.createFieldMatrix(m.getData()));\n    final FieldLUDecomposition<Complex> lu = new FieldLUDecomposition<>(fieldMatrix);\n    final FieldMatrix<Complex> l = lu.getL();\n    final FieldMatrix<Complex> u = lu.getU();\n    for (int i=0; i<n; i++) {\n        for (int j=0; j<n; j++) {\n            if (i == j) {\n                sqrt[i][j] = FastMath.sqrt(l.getEntry(i, j).getReal());\n            } else {\n                double sum = 0;\n                for (int k=0; k<j; k++) {\n                    sum += sqrt[i][k] * sqrt[j][k];\n                }\n                sqrt[i][j] = (1.0 / sqrt[j][j]) * (m.getEntry(i, j) - sum);\n            }\n        }\n    }\n    return MatrixUtils.createRealMatrix(sqrt);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..972118f15 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,27 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final double[][] sqrt = new double[n][n];\n+    final FieldMatrix<Complex> fieldMatrix\n+            = new Array2DRowFieldMatrix<>(MatrixUtils.createFieldMatrix(m.getData()));\n+    final FieldLUDecomposition<Complex> lu = new FieldLUDecomposition<>(fieldMatrix);\n+    final FieldMatrix<Complex> l = lu.getL();\n+    final FieldMatrix<Complex> u = lu.getU();\n+    for (int i=0; i<n; i++) {\n+        for (int j=0; j<n; j++) {\n+            if (i == j) {\n+                sqrt[i][j] = FastMath.sqrt(l.getEntry(i, j).getReal());\n+            } else {\n+                double sum = 0;\n+                for (int k=0; k<j; k++) {\n+                    sum += sqrt[i][k] * sqrt[j][k];\n+                }\n+                sqrt[i][j] = (1.0 / sqrt[j][j]) * (m.getEntry(i, j) - sum);\n+            }\n+        }\n     }\n+    return MatrixUtils.createRealMatrix(sqrt);\n+}\n }",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}