{
    "patch": "public static double getTypedPercent(String json) {\n    try {\n        JSONObject jsonObject = new JSONObject(json);\n        JSONObject summary = (JSONObject) jsonObject.get(\"summary\");\n        int total = summary.getInt(\"total\");\n        int typedCount = summary.getInt(\"typed\");\n        double typedPercent = ((double) typedCount / total) * 100;\n        return typedPercent;\n    } catch (JSONException e) {\n        e.printStackTrace();\n    }\n    return 0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..1b97cd92 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    try {\n+        JSONObject jsonObject = new JSONObject(json);\n+        JSONObject summary = (JSONObject) jsonObject.get(\"summary\");\n+        int total = summary.getInt(\"total\");\n+        int typedCount = summary.getInt(\"typed\");\n+        double typedPercent = ((double) typedCount / total) * 100;\n+        return typedPercent;\n+    } catch (JSONException e) {\n+        e.printStackTrace();\n+    }\n+    return 0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}