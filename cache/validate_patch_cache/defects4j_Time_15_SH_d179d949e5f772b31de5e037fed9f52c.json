{
    "patch": "    public static long safeMultiply(long val1, int val2) {\n        switch (val2) {\n            case -1:\n                try {\n                    return Math.multiplyExact(val1, -1);\n                } catch (ArithmeticException e) {\n                    if (val1 == Long.MIN_VALUE) {\n                        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                    }\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }\n        long total = val1 * val2;\n        if (total / val2 != val1) {\n            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n        }\n        return total;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/field/FieldUtils.java b/src/main/java/org/joda/time/field/FieldUtils.java\nindex a0fe7e2d..d1fa0d33 100644\n--- a/src/main/java/org/joda/time/field/FieldUtils.java\n+++ b/src/main/java/org/joda/time/field/FieldUtils.java\n@@ -135,6 +135,28 @@ public class FieldUtils {\n     public static long safeMultiply(long val1, int val2) {\n         switch (val2) {\n             case -1:\n+    public static long safeMultiply(long val1, int val2) {\n+        switch (val2) {\n+            case -1:\n+                try {\n+                    return Math.multiplyExact(val1, -1);\n+                } catch (ArithmeticException e) {\n+                    if (val1 == Long.MIN_VALUE) {\n+                        throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n+                    }\n+                }\n+                return -val1;\n+            case 0:\n+                return 0L;\n+            case 1:\n+                return val1;\n+        }\n+        long total = val1 * val2;\n+        if (total / val2 != val1) {\n+            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n+        }\n+        return total;\n+    }\n                 return -val1;\n             case 0:\n                 return 0L;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}