{
    "patch": "      ProvidedName provided = providedNames.get(ns);\n      if (provided == null || !provided.isExplicitlyProvided()) {\n        unrecognizedRequires.add(\n            new UnrecognizedRequire(n, ns, t.getSourceName()));\n      } else {\n        JSModule providedModule = provided.explicitModule;\n\n        // This must be non-null, because there was an explicit provide.\n        Preconditions.checkNotNull(providedModule);\n\n        JSModule module = t.getModule();\n        if (moduleGraph != null &&\n            module != providedModule &&\n            !moduleGraph.dependsOn(module, providedModule)) {\n          compiler.report(\n              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                  providedModule.getName(),\n                  module.getName()));\n        } else {\n          // Remove goog.requires that are already included.\n          Node grandparent = parent.getParent();\n          if (grandparent.isCall() && \"goog.module\".equals(\n              grandparent.getFirstChild().getQualifiedName())) {\n            // If we're inside a goog.module call, then we can safely remove it.\n            parent.detachFromParent();\n          } else if (!t.getInput().isExtern() && !n.getBooleanProp(Node.EXPLICIT_REQUIRE)) {\n            // Only remove if it's not an EXPLICIT_REQUIRE.\n            // To allow clients to stop \"re-removing\" us this pass will not remove goog.requires\n            // without this flag. Clients have to opt into this behavior.\n            \n            // Make sure the parent has a grandparent before detaching it from parent\n            if (parent.getParent() != null) {\n              parent.detachFromParent();\n            }\n          }\n\n          compiler.reportCodeChange();\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..41ade0d2 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,45 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+      ProvidedName provided = providedNames.get(ns);\n+      if (provided == null || !provided.isExplicitlyProvided()) {\n+        unrecognizedRequires.add(\n+            new UnrecognizedRequire(n, ns, t.getSourceName()));\n+      } else {\n+        JSModule providedModule = provided.explicitModule;\n+\n+        // This must be non-null, because there was an explicit provide.\n+        Preconditions.checkNotNull(providedModule);\n+\n+        JSModule module = t.getModule();\n+        if (moduleGraph != null &&\n+            module != providedModule &&\n+            !moduleGraph.dependsOn(module, providedModule)) {\n+          compiler.report(\n+              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+                  providedModule.getName(),\n+                  module.getName()));\n+        } else {\n+          // Remove goog.requires that are already included.\n+          Node grandparent = parent.getParent();\n+          if (grandparent.isCall() && \"goog.module\".equals(\n+              grandparent.getFirstChild().getQualifiedName())) {\n+            // If we're inside a goog.module call, then we can safely remove it.\n+            parent.detachFromParent();\n+          } else if (!t.getInput().isExtern() && !n.getBooleanProp(Node.EXPLICIT_REQUIRE)) {\n+            // Only remove if it's not an EXPLICIT_REQUIRE.\n+            // To allow clients to stop \"re-removing\" us this pass will not remove goog.requires\n+            // without this flag. Clients have to opt into this behavior.\n+            \n+            // Make sure the parent has a grandparent before detaching it from parent\n+            if (parent.getParent() != null) {\n+              parent.detachFromParent();\n+            }\n+          }\n+\n+          compiler.reportCodeChange();\n+        }\n+      }\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}