{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    int retryAttempts = 0;\n    boolean resolved = false;\n\n    do {\n        retryAttempts++;\n        if (retryAttempts > 100) {\n            t.error(getNode(), MaximumRetryAttemptsExceeded.getMessage());\n            return this;\n        }\n\n        // Check for implicit prototype cycles before attempting to resolve the type\n        if (detectImplicitPrototypeCycle()) {\n            handleTypeCycle(t);\n        }\n        \n        // Try to resolve the type using the registry\n        resolved = resolveViaRegistry(t, enclosing);\n        if (resolved) {\n            // If the type was resolved, call super.resolveInternal and finish the property continuations\n            super.resolveInternal(t, enclosing);\n            finishPropertyContinuations();\n            // Return the resolved type, or this if it couldn't be resolved\n            return registry.isLastGeneration() ?\n                    getReferencedType() : this;\n        }\n\n        // If the type couldn't be resolved via the registry, try to resolve it via properties\n        resolveViaProperties(t, enclosing);\n        resolved = isResolved();\n    } while (!resolved);\n\n    // Call super.resolveInternal and finish the property continuations\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n\n    // Return the resolved type if successful, or this if it couldn't be resolved\n    if (registry.isLastGeneration() && resolved) {\n        return getReferencedType();\n    } else {\n        return this;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..fb510137 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,49 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+    int retryAttempts = 0;\n+    boolean resolved = false;\n+\n+    do {\n+        retryAttempts++;\n+        if (retryAttempts > 100) {\n+            t.error(getNode(), MaximumRetryAttemptsExceeded.getMessage());\n+            return this;\n+        }\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n+        // Check for implicit prototype cycles before attempting to resolve the type\n+        if (detectImplicitPrototypeCycle()) {\n+            handleTypeCycle(t);\n+        }\n+        \n+        // Try to resolve the type using the registry\n+        resolved = resolveViaRegistry(t, enclosing);\n+        if (resolved) {\n+            // If the type was resolved, call super.resolveInternal and finish the property continuations\n+            super.resolveInternal(t, enclosing);\n+            finishPropertyContinuations();\n+            // Return the resolved type, or this if it couldn't be resolved\n+            return registry.isLastGeneration() ?\n+                    getReferencedType() : this;\n+        }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+        // If the type couldn't be resolved via the registry, try to resolve it via properties\n+        resolveViaProperties(t, enclosing);\n+        resolved = isResolved();\n+    } while (!resolved);\n \n+    // Call super.resolveInternal and finish the property continuations\n     super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n+    finishPropertyContinuations();\n+\n+    // Return the resolved type if successful, or this if it couldn't be resolved\n+    if (registry.isLastGeneration() && resolved) {\n+        return getReferencedType();\n+    } else {\n+        return this;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}