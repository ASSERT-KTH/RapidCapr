{
    "patch": "import java.util.Arrays;\n\npublic class Example {\n  public void printInOperatorInForLoop(boolean c, Object[] d) {\n      int inOperatorValue = Arrays.asList(d).contains(0) ? 0 : -1;\n      String expected = \"for(a=c?0:\" + inOperatorValue + \";;)foo()\";\n      String actual = \"for(a=c?0:[0 in d];;)foo()\";\n      assertEquals(expected, actual);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..1bc42e57 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,16 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+import java.util.Arrays;\n+\n+public class Example {\n+  public void printInOperatorInForLoop(boolean c, Object[] d) {\n+      int inOperatorValue = Arrays.asList(d).contains(0) ? 0 : -1;\n+      String expected = \"for(a=c?0:\" + inOperatorValue + \";;)foo()\";\n+      String actual = \"for(a=c?0:[0 in d];;)foo()\";\n+      assertEquals(expected, actual);\n+  }\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}