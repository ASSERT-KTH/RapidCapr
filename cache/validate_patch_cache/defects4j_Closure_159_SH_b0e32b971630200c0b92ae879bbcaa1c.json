{
    "patch": "    if (node != null && node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child != null && child.getType() == Token.NAME) {\n        String functionName = child.getString();\n        if (functionName != null && !functionName.startsWith(\"$\") &&\n            !functionName.startsWith(\"goog.\") && !functionName.startsWith(\"__\") &&\n            !functionName.equals(\"isNaN\") && !functionName.equals(\"parseInt\") &&\n            !functionName.equals(\"parseFloat\") && !functionName.equals(\"alert\")) {\n          changed.add(functionName);\n        }\n      }\n      for (Node c = child.getNext(); c != null; c = c.getNext()) {\n        findCalledFunctions(c, changed);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..cf10b39e 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -774,10 +774,19 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n+    if (node != null && node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+      if (child != null && child.getType() == Token.NAME) {\n+        String functionName = child.getString();\n+        if (functionName != null && !functionName.startsWith(\"$\") &&\n+            !functionName.startsWith(\"goog.\") && !functionName.startsWith(\"__\") &&\n+            !functionName.equals(\"isNaN\") && !functionName.equals(\"parseInt\") &&\n+            !functionName.equals(\"parseFloat\") && !functionName.equals(\"alert\")) {\n+          changed.add(functionName);\n+        }\n+      }\n+      for (Node c = child.getNext(); c != null; c = c.getNext()) {\n+        findCalledFunctions(c, changed);\n       }\n     }\n ",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}