{
    "patch": "public static int largest_divisor(int n) {\n    if (n <= 0) {\n        throw new IllegalArgumentException(\"Input must be positive\");\n    }\n    if (n == 1) {\n        return 1;\n    }\n    for (int i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i == 0) {\n            int otherDivisor = n / i;\n            return Math.max(i, otherDivisor);\n        }\n    }\n    return n;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java b/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java\nindex e93b282..538a705 100644\n--- a/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java\n+++ b/src/main/java/humaneval/buggy/LARGEST_DIVISOR.java\n@@ -1,11 +1,19 @@\n package humaneval.buggy;\n \n public class LARGEST_DIVISOR {\n-    public static int largest_divisor(int n) {\n-        for (int i = n; i >= 0; i -= 1){\n-            if (n % i == 0)\n-                return i;\n-        }\n+public static int largest_divisor(int n) {\n+    if (n <= 0) {\n+        throw new IllegalArgumentException(\"Input must be positive\");\n+    }\n+    if (n == 1) {\n         return 1;\n     }\n+    for (int i = 2; i <= Math.sqrt(n); i++) {\n+        if (n % i == 0) {\n+            int otherDivisor = n / i;\n+            return Math.max(i, otherDivisor);\n+        }\n+    }\n+    return n;\n+}\n }",
    "result_reason": "   TEST_LARGEST_DIVISOR.test_0:7 expected:<3> but was:<1>",
    "test_result": "FAIL"
}