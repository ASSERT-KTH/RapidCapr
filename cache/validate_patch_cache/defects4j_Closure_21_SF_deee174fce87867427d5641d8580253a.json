{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n.isEmpty() || n.isComma() || n.isFunction()) {\n    return;\n  }\n\n  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n  int parentType = parent == null ? -1 : parent.getType();\n\n  if (parentType == Token.COMMA) {\n    // If `n` is the last child of a COMMA node, it may be safe to remove it.\n    if (isResultUsed) {\n      return;\n    }\n\n    // Check if we are in a comma chain, and prevent removing elements from it,\n    // unless the immediate parent is an expr result or a block.\n    if (n == parent.getLastChild() && parent.getParent() != null) {\n      boolean canRemoveParent = false;\n      for (Node ancestor : parent.getAncestors()) {\n        if (ancestor.getType() == Token.COMMA) {\n          continue;\n        } else if (ancestor.getType() == Token.EXPR_RESULT || ancestor.getType() == Token.BLOCK) {\n          canRemoveParent = true;\n        }\n        // Stop traversing ancestors if we found a non-ancestral,\n        // non-expr-result, or non-block parent.\n        break;\n      }\n      if (!canRemoveParent) {\n        return;\n      }\n    }\n  } else if ((parentType != Token.EXPR_RESULT && parentType != Token.BLOCK && parentType != Token.CATCH && parentType != Token.FUNCTION\n             && parentType != Token.CALL && parentType != Token.NEW) || (parentType == Token.CALL && n == parent.getLastChild())) {\n    // If `n` is part of a binary operator or has no side effects, it may be safe to remove it.\n    if (!(parentType == Token.FOR && parent.getLastChild().getType() == Token.BLOCK && parent.getChildCount() == 4)\n            && n != parent.getFirstChild()) { // Exclude the first child of CALL and NEW nodes\n\n      if (!NodeUtil.isStatement(n) && (!NodeUtil.mayHaveSideEffects(n, t.getCompiler()) || isSimpleOp)) {\n        String msg = \"This code lacks side-effects. Is there a bug?\";\n        if (n.isString()) {\n          msg = \"Is there a missing '+' on the previous line?\";\n        } else if (isSimpleOp) {\n          msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() + \"' operator is not being used.\";\n        }\n  \n        t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n  \n        if (!NodeUtil.isStatement(n)) {\n          problemNodes.add(n);\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..7fbe5c48 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,71 +81,62 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n-      return;\n-    }\n-\n-    if (parent == null) {\n-      return;\n-    }\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n.isEmpty() || n.isComma() || n.isFunction()) {\n+    return;\n+  }\n \n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult()) {\n-      return;\n-    }\n+  boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n+  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n+  int parentType = parent == null ? -1 : parent.getType();\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n+  if (parentType == Token.COMMA) {\n+    // If `n` is the last child of a COMMA node, it may be safe to remove it.\n+    if (isResultUsed) {\n       return;\n     }\n \n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (parent.getType() == Token.COMMA) {\n-      if (isResultUsed) {\n-        return;\n-      }\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n+    // Check if we are in a comma chain, and prevent removing elements from it,\n+    // unless the immediate parent is an expr result or a block.\n+    if (n == parent.getLastChild() && parent.getParent() != null) {\n+      boolean canRemoveParent = false;\n+      for (Node ancestor : parent.getAncestors()) {\n+        if (ancestor.getType() == Token.COMMA) {\n+          continue;\n+        } else if (ancestor.getType() == Token.EXPR_RESULT || ancestor.getType() == Token.BLOCK) {\n+          canRemoveParent = true;\n         }\n+        // Stop traversing ancestors if we found a non-ancestral,\n+        // non-expr-result, or non-block parent.\n+        break;\n       }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+      if (!canRemoveParent) {\n         return;\n       }\n     }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n-      }\n-\n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n+  } else if ((parentType != Token.EXPR_RESULT && parentType != Token.BLOCK && parentType != Token.CATCH && parentType != Token.FUNCTION\n+             && parentType != Token.CALL && parentType != Token.NEW) || (parentType == Token.CALL && n == parent.getLastChild())) {\n+    // If `n` is part of a binary operator or has no side effects, it may be safe to remove it.\n+    if (!(parentType == Token.FOR && parent.getLastChild().getType() == Token.BLOCK && parent.getChildCount() == 4)\n+            && n != parent.getFirstChild()) { // Exclude the first child of CALL and NEW nodes\n+\n+      if (!NodeUtil.isStatement(n) && (!NodeUtil.mayHaveSideEffects(n, t.getCompiler()) || isSimpleOp)) {\n+        String msg = \"This code lacks side-effects. Is there a bug?\";\n+        if (n.isString()) {\n+          msg = \"Is there a missing '+' on the previous line?\";\n+        } else if (isSimpleOp) {\n+          msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() + \"' operator is not being used.\";\n+        }\n+  \n+        t.getCompiler().report(t.makeError(n, level, USELESS_CODE_ERROR, msg));\n+  \n+        if (!NodeUtil.isStatement(n)) {\n+          problemNodes.add(n);\n+        }\n       }\n     }\n   }\n+}\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "java.lang.RuntimeException: java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}