{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    double x = v1.getY() * v2.getZ() - v1.getZ() * v2.getY();\n    double y = v1.getZ() * v2.getX() - v1.getX() * v2.getZ();\n    double z = v1.getX() * v2.getY() - v1.getY() * v2.getX();\n    double mag = Math.sqrt(x * x + y * y + z * z);\n    final double eps = 1e-12;\n    if (mag < eps) {\n        double max = Math.max(Math.max(v1.getX(), v1.getY()), v1.getZ());\n        if (max == v1.getX()) {\n            x = 0;\n            y = v1.getZ();\n            z = -v1.getY();\n        } else if (max == v1.getY()) {\n            x = -v1.getZ();\n            y = 0;\n            z = v1.getX();\n        } else {\n            x = v1.getY();\n            y = -v1.getX();\n            z = 0;\n        }\n        mag = Math.sqrt(x * x + y * y + z * z);\n        if (mag < eps) {\n            max = Math.max(Math.max(v2.getX(), v2.getY()), v2.getZ());\n            if (max == v2.getX()) {\n                x = 0;\n                y = -v2.getZ();\n                z = v2.getY();\n            } else if (max == v2.getY()) {\n                x = v2.getZ();\n                y = 0;\n                z = -v2.getX();\n            } else {\n                x = -v2.getY();\n                y = v2.getX();\n                z = 0;\n            }\n            mag = Math.sqrt(x * x + y * y + z * z);\n        }\n    }\n    return new Vector3D(x / mag, y / mag, z / mag);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..ab15b0c67 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,48 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+    double x = v1.getY() * v2.getZ() - v1.getZ() * v2.getY();\n+    double y = v1.getZ() * v2.getX() - v1.getX() * v2.getZ();\n+    double z = v1.getX() * v2.getY() - v1.getY() * v2.getX();\n+    double mag = Math.sqrt(x * x + y * y + z * z);\n+    final double eps = 1e-12;\n+    if (mag < eps) {\n+        double max = Math.max(Math.max(v1.getX(), v1.getY()), v1.getZ());\n+        if (max == v1.getX()) {\n+            x = 0;\n+            y = v1.getZ();\n+            z = -v1.getY();\n+        } else if (max == v1.getY()) {\n+            x = -v1.getZ();\n+            y = 0;\n+            z = v1.getX();\n+        } else {\n+            x = v1.getY();\n+            y = -v1.getX();\n+            z = 0;\n+        }\n+        mag = Math.sqrt(x * x + y * y + z * z);\n+        if (mag < eps) {\n+            max = Math.max(Math.max(v2.getX(), v2.getY()), v2.getZ());\n+            if (max == v2.getX()) {\n+                x = 0;\n+                y = -v2.getZ();\n+                z = v2.getY();\n+            } else if (max == v2.getY()) {\n+                x = v2.getZ();\n+                y = 0;\n+                z = -v2.getX();\n+            } else {\n+                x = -v2.getY();\n+                y = v2.getX();\n+                z = 0;\n+            }\n+            mag = Math.sqrt(x * x + y * y + z * z);\n+        }\n+    }\n+    return new Vector3D(x / mag, y / mag, z / mag);\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.0> but was:<0.28603877677367767>",
    "test_result": "FAIL"
}