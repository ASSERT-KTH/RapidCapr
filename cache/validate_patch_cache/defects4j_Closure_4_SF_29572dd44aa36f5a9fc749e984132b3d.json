{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  boolean resolved = false;\n  boolean implicitCycle = false;\n  do {\n    resolved = resolveViaRegistry(t, enclosing);\n    if (resolved) {\n      finishPropertyContinuations();\n    }\n\n    implicitCycle = detectImplicitPrototypeCycle();\n    if (implicitCycle) {\n      handleTypeCycle(t);\n      // attempting resolveViaRegistry again\n      resolved = false;\n    }\n  } while (implicitCycle && !resolved);\n\n  if (!resolved) {\n    resolveViaProperties(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n      resolved = true;\n    }\n  }\n\n  if (resolved) {\n    super.resolveInternal(t, enclosing);\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  } else {\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..5e71d72d 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,41 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  boolean resolved = false;\n+  boolean implicitCycle = false;\n+  do {\n+    resolved = resolveViaRegistry(t, enclosing);\n     if (resolved) {\n-      super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n     }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n+    implicitCycle = detectImplicitPrototypeCycle();\n+    if (implicitCycle) {\n       handleTypeCycle(t);\n+      // attempting resolveViaRegistry again\n+      resolved = false;\n     }\n+  } while (implicitCycle && !resolved);\n \n-    super.resolveInternal(t, enclosing);\n+  if (!resolved) {\n+    resolveViaProperties(t, enclosing);\n     if (isResolved()) {\n       finishPropertyContinuations();\n+      resolved = true;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n   }\n \n+  if (resolved) {\n+    super.resolveInternal(t, enclosing);\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+  } else {\n+    super.resolveInternal(t, enclosing);\n+    finishPropertyContinuations();\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+  }\n+}\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}