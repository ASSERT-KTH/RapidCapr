{
    "patch": "public class TransformDispatcher implements IRFactory.TypeSafeDispatcher {\n  private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n      ImmutableSet.of(\n          \"use strict\", // ES5 strict mode\n          \"use babel\", // babel.js\n          \"use strict-mode\" // Mozilla\n          );\n\n  private final AstRoot root;\n  private final ErrorReporter errorReporter;\n  private final String sourceName;\n\n  public TransformDispatcher(AstRoot root, ErrorReporter errorReporter, String sourceName) {\n    this.root = root;\n    this.errorReporter = errorReporter;\n    this.sourceName = sourceName;\n  }\n\n  private Node newNode(int type, AstNode original) {\n    int position = original != null ? original.getPosition() : -1;\n    return new Node(position, type);\n  }\n\n  private Node newNode(int type, AstNode left, AstNode right) {\n    int position = left != null ? left.getPosition() : -1;\n    Node node = new Node(position, type);\n    if (left != null) {\n      node.addChildToBack(transform(left));\n    }\n    if (right != null) {\n      node.addChildToBack(transform(right));\n    }\n    return node;\n  }\n\n  private Node newNode(int type, AstNode left, AstNode middle, AstNode right) {\n    int position = left != null ? left.getPosition() : -1;\n    Node node = new Node(position, type);\n    if (left != null) {\n      node.addChildToBack(transform(left));\n    }\n    if (middle != null) {\n      node.addChildToBack(transform(middle));\n    }\n    if (right != null) {\n      node.addChildToBack(transform(right));\n    }\n    return node;\n  }\n\n  private Node transform(AstNode node) {\n    checkNotNull(node);\n    return node.accept(this);\n  }\n\n  private Node transformBlock(AstNode block) {\n    if (block == null) return null;\n    checkState(block instanceof Block);\n    return processGeneric((Block) block);\n  }\n\n  private int position2charno(int pos) {\n    return root.getPositionMapper().getColumnNumber(pos);\n  }\n\n  private void parseDirectives(Node n) {\n    if (isDirective(n)) {\n      String directive = n.getFirstChild().getString();\n      if (!ALLOWED_DIRECTIVES.contains(directive)) {\n        errorReporter.warning(\n            \"Misplaced directive \\\"\" + directive + \"\\\"\",\n            sourceName,\n            n.getLineno(),\n            n.getCharno());\n      }\n    }\n  }\n\n  private boolean isDirective(Node n) {\n    if (n == null) return false;\n\n    int nType = n.getType();\n    return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n        n.getFirstChild().getType() == Token.STRING &&\n        ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n  }\n\n  private Node processGeneric(AstNode node) {\n    Node genericNode = newNode(node.getType(), node);\n\n    for (AstNode child : node) {\n      genericNode.addChildToBack(transform(child));\n    }\n\n    return genericNode;\n  }\n\n  private boolean hasExceptionHandler(Node cfgNode) {\n    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n      if (edge.getValue() == Branch.ON_EX) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private DiGraph<Node, ControlFlowGraph.Branch> getCfg() {\n    return ((JsFunction) root.getFunctionNode()).getCfg();\n  }\n\n  @Override\n  public Node processArrayComprehension(ArrayComprehension node) {\n    throw new UnsupportedOperationException(\"Array comprehensions not supported\");\n  }\n\n  @Override\n  public Node processArrayLiteral(ArrayLiteral node) {\n    return newNode(Token.ARRAYLIT, node);\n  }\n\n  @Override\n  public Node processAstRoot(AstRoot root) {\n    return processGeneric(root);\n  }\n\n  @Override\n  public Node processAssignment(Assignment node) {\n    return newNode(Token.ASSIGN, node.getLeft(), node.getRight());\n  }\n\n  @Override\n  public Node processAstNode(AstNode node) {\n    throw new UnsupportedOperationException(\"Invalid node type: \" + node.getClass());\n  }\n\n  @Override\n  public Node processBlock(Block node) {\n    return processGeneric(node);\n  }\n\n  @Override\n  public Node processBlockComment(BlockComment node) {\n    return newNode(Token.BLOCK_COMMENT_NODE, node);\n  }\n\n  @Override\n  public Node processBreakStatement(BreakStatement node) {\n    Node newNode = newNode(Token.BREAK);\n\n    if (node.getBreakLabel() != null) {\n      newNode.addChildToBack(newNode(Token.LABEL_NAME, node.getBreakLabel()));\n    }\n\n    return newNode;\n  }\n\n  @Override\n  public Node processCaseClause(CaseClause node) {\n    Node newNode = newNode(Token.CASE, node.getExpression());\n\n    for (AstNode statement : node.getStatements()) {\n      newNode.addChildToBack(transform(statement));\n    }\n\n    return newNode;\n  }\n\n  @Override\n  public Node processCatchClause(CatchClause node) {\n    Node catchName = newNode(Token.NAME, node.getParam());\n    Node catchBody = transform(node.getBody());\n    Node catchNode = newNode(Token.CATCH, catchName, catchBody);\n\n    catchNode.addChildToBack(catchBody);\n\n    return catchNode;\n  }\n\n  @Override\n  public Node processComment(Comment node) {\n    return newNode(Token.LBINARY, newNode(Token.NUMBER, 1000.0),\n        newNode(Token.STRING, node.getValue()));\n  }\n\n  @Override\n  public Node processConditionalExpression(ConditionalExpression node) {\n    return newNode(Token.HOOK, node.getTestExpression(), node.getTrueExpression(),\n        node.getFalseExpression());\n  }\n\n  @Override\n  public Node processContinueStatement(ContinueStatement node) {\n    Node newNode = newNode(Token.CONTINUE);\n\n    if (node.getLabel() != null) {\n      newNode.addChildToBack(newNode(Token.LABEL_NAME, node.getLabel()));\n    }\n\n    return newNode;\n  }\n\n  @Override\n  public Node processDefaultCase(DefaultCase node) {\n    Node newNode = newNode(Token.DEFAULT);\n\n    for (AstNode statement : node.getStatements()) {\n      newNode.addChildToBack(transform(statement));\n    }\n\n    return newNode;\n  }\n\n  @Override\n  public Node processDoLoop(DoLoop node) {\n    return newNode(Token.DO, transform(node.getBody()), node.getCondition());\n  }\n\n  @Override\n  public Node processElementGet(ElementGet node) {\n    return newNode(Token.GETELEM, node.getTarget(), node.getElement());\n  }\n\n  @Override\n  public Node processEmptyExpression(EmptyExpression node) {\n    return newNode(Token.EMPTY);\n  }\n\n  @Override\n  public Node processErrorNode(ErrorNode node) {\n    throw new UnsupportedOperationException(\"Error nodes not supported\");\n  }\n\n  @Override\n  public Node processExpressionStatement(ExpressionStatement node) {\n    return newNode(Token.EXPR_RESULT, node.getExpression());\n  }\n\n  @Override\n  public Node processForInLoop(ForInLoop node) {\n    return newNode(Token.FORIN, transform(node.getIterator()), transform(node.getIteratedObject()),\n        transform(node.getBody()));\n  }\n\n  @Override\n  public Node processForLoop(ForLoop node) {\n    return newNode(Token.FOR, transform(node.getInitializer()), transform(node.getCondition()),\n        transform(node.getIncrement()), transform(node.getBody()));\n  }\n\n  @Override\n  public Node processFunctionCall(FunctionCall node) {\n    Node call = newNode(Token.CALL, node.getTarget());\n\n    if (node.getArguments() != null) {\n      for (AstNode arg : node.getArguments()) {\n        call.addChildToBack(transform(arg));\n      }\n    }\n\n    call.putIntProp(Node.FREE_CALL, node.isNewExpression() ? 1 : 0);\n\n    return call;\n  }\n\n  @Override\n  public Node processFunctionNode(FunctionNode node) {\n    Node body = transform(node.getBody());\n\n    Node fn = newNode(Token.FUNCTION, newNode(Token.NAME, node.getFunctionName()), body);\n    fn.putProp(Node.IS_ARROW_FUNCTION, node.isArrowFunction());\n    fn.putBooleanProp(Node.IS_METHOD, node.isMethod());\n\n    if (node.getFunctionType() != FunctionNode.FUNCTION_EXPRESSION) {\n      fn.putIntProp(Node.FUNCTION_DESCRIPTOR, node.getFunctionType());\n    }\n\n    for (AstNode param : node.getParams()) {\n      fn.addChildToBack(newNode(Token.PARAM_LIST, transform(param)));\n    }\n\n    return fn;\n  }\n\n  @Override\n  public Node processGeneratorExpression(GeneratorExpression node) {\n    throw new UnsupportedOperationException(\"Generator expressions not supported\");\n  }\n\n  @Override\n  public Node processGetProp(GetPropNode node) {\n    return newNode(Token.GETPROP, node.getTarget(), newNode(Token.STRING, node.getProperty()));\n  }\n\n  @Override\n  public Node processInfixExpression(InfixExpression node) {\n    if (node.getType() == Token.IN) {\n      return newNode(Token.IN, node.getLeft(), node.getRight());\n    } else if (node.getType() == Token.INSTANCEOF) {\n      return newNode(Token.INSTANCEOF, node.getLeft(), node.getRight());\n    } else {\n      return newNode(node.getType(), node.getLeft(), node.getRight());\n    }\n  }\n\n  @Override\n  public Node processKeywordLiteral(KeywordLiteral node) {\n    switch (node.getType()) {\n      case Token.NULL:\n        return newNode(Token.NULL);\n      case Token.TRUE:\n        return newNode(Token.TRUE);\n      case Token.FALSE:\n        return newNode(Token.FALSE);\n      case Token.THIS:\n        return newNode(Token.THIS);\n      default:\n        throw new IllegalStateException(\"Unexpected keyword literal: \" + node.getType());\n    }\n  }\n\n  @Override\n  public Node processLabel(Label node) {\n    Node labeledStatement = transform(node.getStatement());\n    labeledStatement.addChildToFront(newNode(Token.LABEL_NAME, node.getName()));\n    return labeledStatement;\n  }\n\n  @Override\n  public Node processLetNode(LetNode node) {\n    throw new UnsupportedOperationException(\"Let nodes not supported\");\n  }\n\n  @Overrid",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..52d116ba 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -385,181 +385,340 @@ public class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+public class TransformDispatcher implements IRFactory.TypeSafeDispatcher {\n+  private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n+      ImmutableSet.of(\n+          \"use strict\", // ES5 strict mode\n+          \"use babel\", // babel.js\n+          \"use strict-mode\" // Mozilla\n+          );\n+\n+  private final AstRoot root;\n+  private final ErrorReporter errorReporter;\n+  private final String sourceName;\n \n-      int nType = n.getType();\n-      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n-          n.getFirstChild().getType() == Token.STRING &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n+  public TransformDispatcher(AstRoot root, ErrorReporter errorReporter, String sourceName) {\n+    this.root = root;\n+    this.errorReporter = errorReporter;\n+    this.sourceName = sourceName;\n+  }\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n+  private Node newNode(int type, AstNode original) {\n+    int position = original != null ? original.getPosition() : -1;\n+    return new Node(position, type);\n+  }\n+\n+  private Node newNode(int type, AstNode left, AstNode right) {\n+    int position = left != null ? left.getPosition() : -1;\n+    Node node = new Node(position, type);\n+    if (left != null) {\n+      node.addChildToBack(transform(left));\n     }\n+    if (right != null) {\n+      node.addChildToBack(transform(right));\n+    }\n+    return node;\n+  }\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+  private Node newNode(int type, AstNode left, AstNode middle, AstNode right) {\n+    int position = left != null ? left.getPosition() : -1;\n+    Node node = new Node(position, type);\n+    if (left != null) {\n+      node.addChildToBack(transform(left));\n+    }\n+    if (middle != null) {\n+      node.addChildToBack(transform(middle));\n     }\n+    if (right != null) {\n+      node.addChildToBack(transform(right));\n+    }\n+    return node;\n+  }\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n+  private Node transform(AstNode node) {\n+    checkNotNull(node);\n+    return node.accept(this);\n+  }\n+\n+  private Node transformBlock(AstNode block) {\n+    if (block == null) return null;\n+    checkState(block instanceof Block);\n+    return processGeneric((Block) block);\n+  }\n+\n+  private int position2charno(int pos) {\n+    return root.getPositionMapper().getColumnNumber(pos);\n+  }\n+\n+  private void parseDirectives(Node n) {\n+    if (isDirective(n)) {\n+      String directive = n.getFirstChild().getString();\n+      if (!ALLOWED_DIRECTIVES.contains(directive)) {\n+        errorReporter.warning(\n+            \"Misplaced directive \\\"\" + directive + \"\\\"\",\n             sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n+            n.getLineno(),\n+            n.getCharno());\n       }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n     }\n+  }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+  private boolean isDirective(Node n) {\n+    if (n == null) return false;\n+\n+    int nType = n.getType();\n+    return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n+        n.getFirstChild().getType() == Token.STRING &&\n+        ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+  }\n+\n+  private Node processGeneric(AstNode node) {\n+    Node genericNode = newNode(node.getType(), node);\n+\n+    for (AstNode child : node) {\n+      genericNode.addChildToBack(transform(child));\n     }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n+    return genericNode;\n+  }\n+\n+  private boolean hasExceptionHandler(Node cfgNode) {\n+    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n+    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+      if (edge.getValue() == Branch.ON_EX) {\n+        return true;\n       }\n-      return node;\n     }\n+    return false;\n+  }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n+  private DiGraph<Node, ControlFlowGraph.Branch> getCfg() {\n+    return ((JsFunction) root.getFunctionNode()).getCfg();\n+  }\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n+  @Override\n+  public Node processArrayComprehension(ArrayComprehension node) {\n+    throw new UnsupportedOperationException(\"Array comprehensions not supported\");\n+  }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+  @Override\n+  public Node processArrayLiteral(ArrayLiteral node) {\n+    return newNode(Token.ARRAYLIT, node);\n+  }\n+\n+  @Override\n+  public Node processAstRoot(AstRoot root) {\n+    return processGeneric(root);\n+  }\n+\n+  @Override\n+  public Node processAssignment(Assignment node) {\n+    return newNode(Token.ASSIGN, node.getLeft(), node.getRight());\n+  }\n+\n+  @Override\n+  public Node processAstNode(AstNode node) {\n+    throw new UnsupportedOperationException(\"Invalid node type: \" + node.getClass());\n+  }\n+\n+  @Override\n+  public Node processBlock(Block node) {\n+    return processGeneric(node);\n+  }\n+\n+  @Override\n+  public Node processBlockComment(BlockComment node) {\n+    return newNode(Token.BLOCK_COMMENT_NODE, node);\n+  }\n+\n+  @Override\n+  public Node processBreakStatement(BreakStatement node) {\n+    Node newNode = newNode(Token.BREAK);\n+\n+    if (node.getBreakLabel() != null) {\n+      newNode.addChildToBack(newNode(Token.LABEL_NAME, node.getBreakLabel()));\n     }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+    return newNode;\n+  }\n+\n+  @Override\n+  public Node processCaseClause(CaseClause node) {\n+    Node newNode = newNode(Token.CASE, node.getExpression());\n+\n+    for (AstNode statement : node.getStatements()) {\n+      newNode.addChildToBack(transform(statement));\n     }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+    return newNode;\n+  }\n+\n+  @Override\n+  public Node processCatchClause(CatchClause node) {\n+    Node catchName = newNode(Token.NAME, node.getParam());\n+    Node catchBody = transform(node.getBody());\n+    Node catchNode = newNode(Token.CATCH, catchName, catchBody);\n+\n+    catchNode.addChildToBack(catchBody);\n+\n+    return catchNode;\n+  }\n+\n+  @Override\n+  public Node processComment(Comment node) {\n+    return newNode(Token.LBINARY, newNode(Token.NUMBER, 1000.0),\n+        newNode(Token.STRING, node.getValue()));\n+  }\n+\n+  @Override\n+  public Node processConditionalExpression(ConditionalExpression node) {\n+    return newNode(Token.HOOK, node.getTestExpression(), node.getTrueExpression(),\n+        node.getFalseExpression());\n+  }\n+\n+  @Override\n+  public Node processContinueStatement(ContinueStatement node) {\n+    Node newNode = newNode(Token.CONTINUE);\n+\n+    if (node.getLabel() != null) {\n+      newNode.addChildToBack(newNode(Token.LABEL_NAME, node.getLabel()));\n     }\n \n-    @Override\n-    Node processForLoop(ForLoop loopNode) {\n-      Node node = newNode(\n-          Token.FOR,\n-          transform(loopNode.getInitializer()),\n-          transform(loopNode.getCondition()),\n-          transform(loopNode.getIncrement()));\n-      node.addChildToBack(transformBlock(loopNode.getBody()));\n-      return node;\n+    return newNode;\n+  }\n+\n+  @Override\n+  public Node processDefaultCase(DefaultCase node) {\n+    Node newNode = newNode(Token.DEFAULT);\n+\n+    for (AstNode statement : node.getStatements()) {\n+      newNode.addChildToBack(transform(statement));\n     }\n \n-    @Override\n-    Node processFunctionCall(FunctionCall callNode) {\n-      Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n-      for (AstNode child : callNode.getArguments()) {\n-        node.addChildToBack(transform(child));\n+    return newNode;\n+  }\n+\n+  @Override\n+  public Node processDoLoop(DoLoop node) {\n+    return newNode(Token.DO, transform(node.getBody()), node.getCondition());\n+  }\n+\n+  @Override\n+  public Node processElementGet(ElementGet node) {\n+    return newNode(Token.GETELEM, node.getTarget(), node.getElement());\n+  }\n+\n+  @Override\n+  public Node processEmptyExpression(EmptyExpression node) {\n+    return newNode(Token.EMPTY);\n+  }\n+\n+  @Override\n+  public Node processErrorNode(ErrorNode node) {\n+    throw new UnsupportedOperationException(\"Error nodes not supported\");\n+  }\n+\n+  @Override\n+  public Node processExpressionStatement(ExpressionStatement node) {\n+    return newNode(Token.EXPR_RESULT, node.getExpression());\n+  }\n+\n+  @Override\n+  public Node processForInLoop(ForInLoop node) {\n+    return newNode(Token.FORIN, transform(node.getIterator()), transform(node.getIteratedObject()),\n+        transform(node.getBody()));\n+  }\n+\n+  @Override\n+  public Node processForLoop(ForLoop node) {\n+    return newNode(Token.FOR, transform(node.getInitializer()), transform(node.getCondition()),\n+        transform(node.getIncrement()), transform(node.getBody()));\n+  }\n+\n+  @Override\n+  public Node processFunctionCall(FunctionCall node) {\n+    Node call = newNode(Token.CALL, node.getTarget());\n+\n+    if (node.getArguments() != null) {\n+      for (AstNode arg : node.getArguments()) {\n+        call.addChildToBack(transform(arg));\n       }\n+    }\n \n-      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n-      node.setLineno(callNode.getLineno());\n-      node.setCharno(position2charno(leftParamPos));\n-      return node;\n+    call.putIntProp(Node.FREE_CALL, node.isNewExpression() ? 1 : 0);\n+\n+    return call;\n+  }\n+\n+  @Override\n+  public Node processFunctionNode(FunctionNode node) {\n+    Node body = transform(node.getBody());\n+\n+    Node fn = newNode(Token.FUNCTION, newNode(Token.NAME, node.getFunctionName()), body);\n+    fn.putProp(Node.IS_ARROW_FUNCTION, node.isArrowFunction());\n+    fn.putBooleanProp(Node.IS_METHOD, node.isMethod());\n+\n+    if (node.getFunctionType() != FunctionNode.FUNCTION_EXPRESSION) {\n+      fn.putIntProp(Node.FUNCTION_DESCRIPTOR, node.getFunctionType());\n     }\n \n-    @Override\n-    Node processFunctionNode(FunctionNode functionNode) {\n-      Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n-      if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n-        isUnnamedFunction = true;\n-      }\n-      Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n-      if (isUnnamedFunction) {\n-        // Old Rhino tagged the empty name node with the line number of the\n-        // declaration.\n-        newName.setLineno(functionNode.getLineno());\n-        // TODO(bowdidge) Mark line number of paren correctly.\n-        // Same problem as below - the left paren might not be on the\n-        // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n-        newName.setCharno(position2charno(lpColumn));\n-      }\n+    for (AstNode param : node.getParams()) {\n+      fn.addChildToBack(newNode(Token.PARAM_LIST, transform(param)));\n+    }\n \n-      node.addChildToBack(newName);\n-      Node lp = newNode(Token.LP);\n-      // The left paren's complicated because it's not represented by an\n-      // AstNode, so there's nothing that has the actual line number that it\n-      // appeared on.  We know the paren has to appear on the same line as the\n-      // function name (or else a semicolon will be inserted.)  If there's no\n-      // function name, assume the paren was on the same line as the function.\n-      // TODO(bowdidge): Mark line number of paren correctly.\n-      Name fnName = functionNode.getFunctionName();\n-      if (fnName != null) {\n-        lp.setLineno(fnName.getLineno());\n-      } else {\n-        lp.setLineno(functionNode.getLineno());\n-      }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n+    return fn;\n+  }\n \n-      lp.setCharno(position2charno(lparenCharno));\n-      for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n-      }\n-      node.addChildToBack(lp);\n+  @Override\n+  public Node processGeneratorExpression(GeneratorExpression node) {\n+    throw new UnsupportedOperationException(\"Generator expressions not supported\");\n+  }\n \n-      Node bodyNode = transform(functionNode.getBody());\n-      parseDirectives(bodyNode);\n-      node.addChildToBack(bodyNode);\n-     return node;\n+  @Override\n+  public Node processGetProp(GetPropNode node) {\n+    return newNode(Token.GETPROP, node.getTarget(), newNode(Token.STRING, node.getProperty()));\n+  }\n+\n+  @Override\n+  public Node processInfixExpression(InfixExpression node) {\n+    if (node.getType() == Token.IN) {\n+      return newNode(Token.IN, node.getLeft(), node.getRight());\n+    } else if (node.getType() == Token.INSTANCEOF) {\n+      return newNode(Token.INSTANCEOF, node.getLeft(), node.getRight());\n+    } else {\n+      return newNode(node.getType(), node.getLeft(), node.getRight());\n     }\n+  }\n+\n+  @Override\n+  public Node processKeywordLiteral(KeywordLiteral node) {\n+    switch (node.getType()) {\n+      case Token.NULL:\n+        return newNode(Token.NULL);\n+      case Token.TRUE:\n+        return newNode(Token.TRUE);\n+      case Token.FALSE:\n+        return newNode(Token.FALSE);\n+      case Token.THIS:\n+        return newNode(Token.THIS);\n+      default:\n+        throw new IllegalStateException(\"Unexpected keyword literal: \" + node.getType());\n+    }\n+  }\n+\n+  @Override\n+  public Node processLabel(Label node) {\n+    Node labeledStatement = transform(node.getStatement());\n+    labeledStatement.addChildToFront(newNode(Token.LABEL_NAME, node.getName()));\n+    return labeledStatement;\n+  }\n+\n+  @Override\n+  public Node processLetNode(LetNode node) {\n+    throw new UnsupportedOperationException(\"Let nodes not supported\");\n+  }\n+\n+  @Overrid\n \n     @Override\n     Node processIfStatement(IfStatement statementNode) {",
    "result_reason": "error: reached end of file while parsing",
    "test_result": "ERROR"
}