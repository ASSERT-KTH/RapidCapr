{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    Node parent = n.getParent();\n    Node grandparent = parent != null ? parent.getParent() : null;\n    if (parent != null && parent.isVar() && grandparent != null && grandparent.isScript()) {\n      Node initializer = n.getFirstChild();\n      if (initializer != null && initializer.isQualifiedName()) {\n        // Get the aliasVar for the name of the current Var.\n        Var aliasVar = scope.getVar(v.getName());\n        if (aliasVar != null) {\n          // Add the alias to the aliases map.\n          aliases.put(v.getName(), aliasVar);\n\n          Node initialValue = aliasVar.getInitialValue();\n          if (initialValue != null && initialValue.isQualifiedName()) {\n            // Add the alias to the transformation object.\n            String qualifiedName = initialValue.getQualifiedName();\n            transformation.addAlias(v.getName(), qualifiedName);\n          }\n        }\n      } else if (!v.isBleedingFunction()) {\n        // Report an error for non-alias local.\n        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..9ccb1636 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,35 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    Node parent = n.getParent();\n+    Node grandparent = parent != null ? parent.getParent() : null;\n+    if (parent != null && parent.isVar() && grandparent != null && grandparent.isScript()) {\n+      Node initializer = n.getFirstChild();\n+      if (initializer != null && initializer.isQualifiedName()) {\n+        // Get the aliasVar for the name of the current Var.\n+        Var aliasVar = scope.getVar(v.getName());\n+        if (aliasVar != null) {\n+          // Add the alias to the aliases map.\n+          aliases.put(v.getName(), aliasVar);\n+\n+          Node initialValue = aliasVar.getInitialValue();\n+          if (initialValue != null && initialValue.isQualifiedName()) {\n+            // Add the alias to the transformation object.\n+            String qualifiedName = initialValue.getQualifiedName();\n+            transformation.addAlias(v.getName(), qualifiedName);\n+          }\n         }\n+      } else if (!v.isBleedingFunction()) {\n+        // Report an error for non-alias local.\n+        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n       }\n     }\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}