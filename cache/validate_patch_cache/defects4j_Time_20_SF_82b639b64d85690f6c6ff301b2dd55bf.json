{
    "patch": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    String str = text.substring(position);\n    for (String id : ALL_IDS) {\n        int idLen = id.length();\n        if (idLen <= str.length() && str.regionMatches(true, 0, id, 0, idLen) &&\n                (idLen == str.length() || str.charAt(idLen) == '/' || Character.isWhitespace(str.charAt(idLen)))) {\n            // check that the following character is not part of a longer time zone ID\n            char nextChar = idLen < str.length() ? str.charAt(idLen) : '\\0';\n            if (!Character.isLetterOrDigit(nextChar) && nextChar != '_') {\n                bucket.setZone(DateTimeZone.forID(id));\n                return position + idLen;\n            }\n        }\n    }\n    // If no match is found, try parsing with ZoneParser\n    DateTimeParser parser = new ZoneParser();\n    return parser.parseInto(bucket, text, position);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\nindex 558a5864..3b973f81 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n@@ -2537,16 +2537,24 @@ public class DateTimeFormatterBuilder {\n             return MAX_LENGTH;\n         }\n \n-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n-            String str = text.substring(position);\n-            for (String id : ALL_IDS) {\n-                if (str.startsWith(id)) {\n-                    bucket.setZone(DateTimeZone.forID(id));\n-                    return position + id.length();\n-                }\n-            }\n-            return ~position;\n-        }\n+public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+    String str = text.substring(position);\n+    for (String id : ALL_IDS) {\n+        int idLen = id.length();\n+        if (idLen <= str.length() && str.regionMatches(true, 0, id, 0, idLen) &&\n+                (idLen == str.length() || str.charAt(idLen) == '/' || Character.isWhitespace(str.charAt(idLen)))) {\n+            // check that the following character is not part of a longer time zone ID\n+            char nextChar = idLen < str.length() ? str.charAt(idLen) : '\\0';\n+            if (!Character.isLetterOrDigit(nextChar) && nextChar != '_') {\n+                bucket.setZone(DateTimeZone.forID(id));\n+                return position + idLen;\n+            }\n+        }\n+    }\n+    // If no match is found, try parsing with ZoneParser\n+    DateTimeParser parser = new ZoneParser();\n+    return parser.parseInto(bucket, text, position);\n+}\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}