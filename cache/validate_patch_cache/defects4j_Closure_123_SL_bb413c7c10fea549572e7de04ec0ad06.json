{
    "patch": "        Context rhsContext = null;\n        if (rhsNode instanceof MethodCallExpr || rhsNode instanceof ObjectCreationExpr) {\n            rhsContext = Context.OTHER;\n        } else {\n            if (rhsNode instanceof NameExpr) {\n                String varName = ((NameExpr) rhsNode).getNameAsString();\n                Optional<VariableDeclarationExpr> vde = rhsNode.findAncestor(VariableDeclarationExpr.class);\n                if(vde.isPresent()){\n                    for(VariableDeclarator vd : vde.get().getVariables()){\n                        if(vd.getName().getIdentifier().equals(varName)){\n                            if(vd.getType().isPrimitiveType()){\n                                rhsContext = Context.PRIMITIVE;\n                            } else {\n                                rhsContext = Context.OTHER;\n                            }\n                            break;\n                        }\n                    }\n                }else{\n                    rhsContext = Context.PRIMITIVE;\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}