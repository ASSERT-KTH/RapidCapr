{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex.clone();\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    simplex = reflected.getPoint();\n                }\n\n            } else {\n\n                // compute the contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = contracted.getPoint();\n                } else {\n                    final RealPointValuePair[] contractedSimplex = original.clone();\n                    for (int i = 1; i < simplex.length; i++) {\n                        contractedSimplex[i] =\n                                new RealPointValuePair(midpoint(original[i].getPoint(), best.getPoint()),\n                                        Double.NaN);\n                    }\n                    simplex = contractedSimplex;\n                }\n            }\n\n            // check convergence\n            if (checker != null && checker.converged(getIterations(), best, original)) {\n                return;\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..56dcc6d59 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -74,28 +74,38 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             if (comparator.compare(reflected, best) < 0) {\n \n                 // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n+                final RealPointValuePair[] reflectedSimplex = simplex.clone();\n                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                 if (comparator.compare(reflected, expanded) <= 0) {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    simplex = reflected.getPoint();\n                 }\n \n-                return;\n-\n+            } else {\n+\n+                // compute the contracted simplex\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = contracted.getPoint();\n+                } else {\n+                    final RealPointValuePair[] contractedSimplex = original.clone();\n+                    for (int i = 1; i < simplex.length; i++) {\n+                        contractedSimplex[i] =\n+                                new RealPointValuePair(midpoint(original[i].getPoint(), best.getPoint()),\n+                                        Double.NaN);\n+                    }\n+                    simplex = contractedSimplex;\n+                }\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n             // check convergence\n+            if (checker != null && checker.converged(getIterations(), best, original)) {\n                 return;\n             }\n-\n         }\n-\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}