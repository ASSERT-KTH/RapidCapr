{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite = false;\n    boolean escapedLast = false;\n    for (int i = 0; i < value.length(); ++i) {\n        char c = value.charAt(i);\n        if (Character.isWhitespace(c)) {\n            if (!wasWhite) {\n                regex.append(\"\\\\s*+\");\n                wasWhite = true;\n            }\n            escapedLast = false;\n            continue;\n        }\n        wasWhite = false;\n        switch(c) {\n            case '\\'':\n                if (unquote) {\n                    regex.append(\"(?:(?:'\\\")|(?:\\\"'))?\");\n                    if (i + 1 < value.length() && (value.charAt(i + 1) == '\\\"' || value.charAt(i + 1) == '\\'')) {\n                        ++i;\n                    }\n                } else {\n                    if (escapedLast) {\n                        regex.append('\\\\');\n                    }\n                    regex.append(c);\n                }\n                break;\n            case '?':\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '|':\n            case '*':\n            case '+':\n            case '^':\n            case '$':\n            case '.':\n            case '\\\\':\n                if (escapedLast) {\n                    regex.append('\\\\');\n                }\n                regex.append(c);\n                escapedLast = true;\n                break;\n            default:\n                if (escapedLast) {\n                    regex.append('\\\\');\n                }\n                regex.append(c);\n                escapedLast = false;\n                break;\n        }\n    }\n    if (wasWhite && !escapedLast) {\n        regex.append(\"\\\\s*+\");\n    }\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..fe363951 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,25 +300,32 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite = false;\n+    boolean escapedLast = false;\n+    for (int i = 0; i < value.length(); ++i) {\n+        char c = value.charAt(i);\n+        if (Character.isWhitespace(c)) {\n+            if (!wasWhite) {\n+                regex.append(\"\\\\s*+\");\n+                wasWhite = true;\n             }\n-            wasWhite= false;\n-            switch(c) {\n+            escapedLast = false;\n+            continue;\n+        }\n+        wasWhite = false;\n+        switch(c) {\n             case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n+                if (unquote) {\n+                    regex.append(\"(?:(?:'\\\")|(?:\\\"'))?\");\n+                    if (i + 1 < value.length() && (value.charAt(i + 1) == '\\\"' || value.charAt(i + 1) == '\\'')) {\n+                        ++i;\n                     }\n-                    c= value.charAt(i);\n+                } else {\n+                    if (escapedLast) {\n+                        regex.append('\\\\');\n+                    }\n+                    regex.append(c);\n                 }\n                 break;\n             case '?':\n@@ -328,19 +335,33 @@ public class FastDateParser implements DateParser, Serializable {\n             case ')':\n             case '{':\n             case '}':\n-            case '\\\\':\n             case '|':\n             case '*':\n             case '+':\n             case '^':\n             case '$':\n             case '.':\n-                regex.append('\\\\');\n-            }\n-            regex.append(c);\n+            case '\\\\':\n+                if (escapedLast) {\n+                    regex.append('\\\\');\n+                }\n+                regex.append(c);\n+                escapedLast = true;\n+                break;\n+            default:\n+                if (escapedLast) {\n+                    regex.append('\\\\');\n+                }\n+                regex.append(c);\n+                escapedLast = false;\n+                break;\n         }\n-        return regex;\n     }\n+    if (wasWhite && !escapedLast) {\n+        regex.append(\"\\\\s*+\");\n+    }\n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}