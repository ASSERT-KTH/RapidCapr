{
    "patch": "    boolean shouldRemove = !modifyCallers;\n\n    // Strip unreferenced args off the end of the function declaration.\n    while (argList.getLastChild() != null && !referenced.contains(var)) {\n      if (shouldRemove) {\n        Node lastArg = argList.getLastChild();\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n      }\n\n      referenced.remove(var);\n    }\n\n    if (modifyCallers) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..5dd8d89e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,20 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    boolean shouldRemove = !modifyCallers;\n+\n+    // Strip unreferenced args off the end of the function declaration.\n+    while (argList.getLastChild() != null && !referenced.contains(var)) {\n+      if (shouldRemove) {\n+        Node lastArg = argList.getLastChild();\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+      }\n+\n+      referenced.remove(var);\n+    }\n+\n+    if (modifyCallers) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}