{
    "patch": "StringBuffer buf = new StringBuffer();\n\nfor (int i = 0; i < input.length; i++) {\n    char c = input[i];\n    if (c == '_') {\n        buf.append(' ');\n    } else if (c == '+') {\n        buf.append('.');\n    } else if (c == '%') {\n        try {\n            buf.append((char) Integer.parseInt(input[++i] + \"\" + input[++i], 16));\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException();\n        } catch (ArrayIndexOutOfBoundsException e) {\n            throw new IllegalArgumentException();\n        }\n    } else buf.append(c);\n}\n\nString result = buf.toString();\nassertEquals(expected, result);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}