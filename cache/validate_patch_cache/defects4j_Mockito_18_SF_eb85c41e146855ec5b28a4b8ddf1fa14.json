{
    "patch": "\n\npublic class Values {\n    private Object returnValue;\n    \n    public Values() {\n        this.returnValue = null;\n    }\n    \n    public <T> void returnValueFor(Class<T> clazz, T value) {\n        this.returnValue = value;\n    }\n    \n    public <T> T returnValueFor(Class<T> clazz) {\n        return clazz.cast(returnValue);\n    }\n    \n    public <T> Iterable<T> iterableReturnValueFor(Class<T> clazz) {\n        Object returnVal = this.returnValue;\n        if(returnVal instanceof Iterable) {  \n            return (Iterable<T>) returnVal;\n        }\n        return Collections.emptyList(); // Fix here\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..28b931774 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,31 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n+\n+public class Values {\n+    private Object returnValue;\n+    \n+    public Values() {\n+        this.returnValue = null;\n+    }\n+    \n+    public <T> void returnValueFor(Class<T> clazz, T value) {\n+        this.returnValue = value;\n+    }\n+    \n+    public <T> T returnValueFor(Class<T> clazz) {\n+        return clazz.cast(returnValue);\n+    }\n+    \n+    public <T> Iterable<T> iterableReturnValueFor(Class<T> clazz) {\n+        Object returnVal = this.returnValue;\n+        if(returnVal instanceof Iterable) {  \n+            return (Iterable<T>) returnVal;\n+        }\n+        return Collections.emptyList(); // Fix here\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}