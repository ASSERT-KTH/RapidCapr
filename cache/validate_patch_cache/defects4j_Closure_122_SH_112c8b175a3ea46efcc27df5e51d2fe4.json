{
    "patch": "    boolean hasAtSign = false;\n    String commentValue = comment.getValue();\n    String[] commentLines = commentValue.split(\"\\\\r?\\\\n\");\n    for (String line : commentLines) {\n      if (line.trim().indexOf(\"/* @\") == 0 || line.trim().indexOf(\"* @\") == 0) {\n        hasAtSign = true;\n        break;\n      }\n    }\n    if (hasAtSign) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 709534bf..81a1c3a3 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -249,7 +249,16 @@ class IRFactory {\n    * Check to see if the given block comment looks like it should be JSDoc.\n    */\n   private void handleBlockComment(Comment comment) {\n-    if (comment.getValue().indexOf(\"/* @\") != -1 || comment.getValue().indexOf(\"\\n * @\") != -1) {\n+    boolean hasAtSign = false;\n+    String commentValue = comment.getValue();\n+    String[] commentLines = commentValue.split(\"\\\\r?\\\\n\");\n+    for (String line : commentLines) {\n+      if (line.trim().indexOf(\"/* @\") == 0 || line.trim().indexOf(\"* @\") == 0) {\n+        hasAtSign = true;\n+        break;\n+      }\n+    }\n+    if (hasAtSign) {\n       errorReporter.warning(\n           SUSPICIOUS_COMMENT_WARNING,\n           sourceName,",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}