{
    "patch": "                if (offsetLocal < offsetAdjusted) {\n                    // we need to add extra hours to instantAdjusted to get the correct offset\n                    int diff = offsetAdjusted - offsetLocal;\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal + diff);\n                    if (nextLocal != nextAdjusted) {\n                        return offsetLocal;\n                    } else {\n                        return offsetAdjusted;\n                    }\n                } else {\n                    return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..c4e25cae 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,18 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                if (offsetLocal < offsetAdjusted) {\n+                    // we need to add extra hours to instantAdjusted to get the correct offset\n+                    int diff = offsetAdjusted - offsetLocal;\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal + diff);\n+                    if (nextLocal != nextAdjusted) {\n+                        return offsetLocal;\n+                    } else {\n+                        return offsetAdjusted;\n+                    }\n+                } else {\n+                    return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}