{
    "patch": "if (value.isFunction()) {\n  Node callNode = reference.getParent();\n  if (callNode != null && callNode.isCall() && callNode.getFirstChild() == reference.getNode()) {\n    ExpressionStatementTree parentStatement = (ExpressionStatementTree) Trees.instance(compiler).getTree(callNode.getParent());\n    if (parentStatement == null || parentStatement.expression() == null) {\n      return false;\n    }\n    if((parentStatement.parent() instanceof BlockTree\n        && !((BlockTree) parentStatement.parent()).is(Tree.Kind.SCRIPT))\n          || parentStatement.parent() instanceof ParenthesizedTree) {\n      return false;\n    }\n    if(parentStatement.expression().is(Tree.Kind.ASSIGNMENT)) {\n      ExpressionTree lhsTree = ((AssignmentTree) parentStatement.expression()).variable();\n      if (lhsTree.is(Tree.Kind.MEMBER_SELECT)) {\n        lhsTree = ((MemberSelectTree)lhsTree).expression();\n      }\n      if(lhsTree.is(Tree.Kind.IDENTIFIER) && parentStatement.parent() instanceof ExpressionStatementTree) {\n        ExpressionStatementTree grandparent = (ExpressionStatementTree) parentStatement.parent();\n        if(grandparent.expression().is(Tree.Kind.ASSIGNMENT)) {\n          Node grandparentNode = ((UnaryExpressionTree)grandparent.expression()).expression().mongooseGetJNode();\n          if(grandparentNode.isAssign() && grandparentNode.getFirstChild().isName()) {\n            String grandparentLhs = grandparentNode.getFirstChild().getString();\n            String assignmentRhs = ((IdentifierTree)lhsTree).name();\n            if(grandparentLhs.equals(assignmentRhs)) {\n              return false;\n            }\n          }\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..6361ffc6 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,39 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+if (value.isFunction()) {\n+  Node callNode = reference.getParent();\n+  if (callNode != null && callNode.isCall() && callNode.getFirstChild() == reference.getNode()) {\n+    ExpressionStatementTree parentStatement = (ExpressionStatementTree) Trees.instance(compiler).getTree(callNode.getParent());\n+    if (parentStatement == null || parentStatement.expression() == null) {\n+      return false;\n+    }\n+    if((parentStatement.parent() instanceof BlockTree\n+        && !((BlockTree) parentStatement.parent()).is(Tree.Kind.SCRIPT))\n+          || parentStatement.parent() instanceof ParenthesizedTree) {\n+      return false;\n+    }\n+    if(parentStatement.expression().is(Tree.Kind.ASSIGNMENT)) {\n+      ExpressionTree lhsTree = ((AssignmentTree) parentStatement.expression()).variable();\n+      if (lhsTree.is(Tree.Kind.MEMBER_SELECT)) {\n+        lhsTree = ((MemberSelectTree)lhsTree).expression();\n+      }\n+      if(lhsTree.is(Tree.Kind.IDENTIFIER) && parentStatement.parent() instanceof ExpressionStatementTree) {\n+        ExpressionStatementTree grandparent = (ExpressionStatementTree) parentStatement.parent();\n+        if(grandparent.expression().is(Tree.Kind.ASSIGNMENT)) {\n+          Node grandparentNode = ((UnaryExpressionTree)grandparent.expression()).expression().mongooseGetJNode();\n+          if(grandparentNode.isAssign() && grandparentNode.getFirstChild().isName()) {\n+            String grandparentLhs = grandparentNode.getFirstChild().getString();\n+            String assignmentRhs = ((IdentifierTree)lhsTree).name();\n+            if(grandparentLhs.equals(assignmentRhs)) {\n+              return false;\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+}\n         }\n       }\n ",
    "result_reason": "error: variable callNode is already defined in method canInline(Reference,Reference,Reference)",
    "test_result": "ERROR"
}