{
    "patch": "public ReturnValueForMatcher<T> isNotNull() {\n    return new ReturnValueForMatcher<T>() {\n        @Override\n        public boolean matches(Method method) {\n            return true;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        @Override\n        public T returnValueFor(Class clazz) {\n            if (clazz.isAssignableFrom(Iterable.class)) {\n                return (T) Collections.singletonList(new Object());\n            } else if (clazz.isAssignableFrom(Iterator.class)) {\n                return (T) Collections.singletonList(new Object()).iterator();\n            } else if (clazz.isAssignableFrom(Collection.class)) {\n                return (T) Collections.singletonList(new Object());\n            } else if (clazz.isAssignableFrom(List.class)) {\n                return (T) Collections.singletonList(new Object());\n            } else if (clazz.isAssignableFrom(Map.class)) {\n                return (T) new HashMap<>();\n            } else if (clazz.isAssignableFrom(Set.class)) {\n                return (T) new HashSet<>();\n            } else {\n                return Mockito.mock(clazz);\n            }\n        }\n    };\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}