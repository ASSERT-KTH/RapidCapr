{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n        if (lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        if (NodeUtil.isGet(lhs) && lhs.getFirstChild().getType() == Token.NAME) {\n          Var v = t.getScope().getVar(lhs.getFirstChild().getString());\n          JSDocInfo varJsDoc = var.getJSDocInfo();\n          if (varJsDoc != null && varJsDoc.isConstructor()) {\n            return false;\n          }\n          if (v != null && (v.isExtern() || v.isGlobal())) {\n            // Don't traverse functions being copied into an externs or globals object.\n            return false;\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..fcc44a89 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,26 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+        if (lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+        if (NodeUtil.isGet(lhs) && lhs.getFirstChild().getType() == Token.NAME) {\n+          Var v = t.getScope().getVar(lhs.getFirstChild().getString());\n+          JSDocInfo varJsDoc = var.getJSDocInfo();\n+          if (varJsDoc != null && varJsDoc.isConstructor()) {\n+            return false;\n+          }\n+          if (v != null && (v.isExtern() || v.isGlobal())) {\n+            // Don't traverse functions being copied into an externs or globals object.\n+            return false;\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}