{
    "patch": "public Fraction reduce() {\n    int gcd = gcd(Math.abs(numerator), Math.abs(denominator));\n    int newNum = numerator / gcd;\n    int newDen = denominator / gcd;\n\n    if (newNum == 0) {\n        return Fraction.ZERO;\n    } else if (newDen < 0) {\n        newNum = -newNum;\n        newDen = -newDen;\n    }\n\n    return new Fraction(newNum, newDen);\n}\n\nprivate int gcd(int x, int y) {\n    return y == 0 ? x : gcd(y, x % y);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..3def5af8 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,14 +462,25 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n-        }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+public Fraction reduce() {\n+    int gcd = gcd(Math.abs(numerator), Math.abs(denominator));\n+    int newNum = numerator / gcd;\n+    int newDen = denominator / gcd;\n+\n+    if (newNum == 0) {\n+        return Fraction.ZERO;\n+    } else if (newDen < 0) {\n+        newNum = -newNum;\n+        newDen = -newDen;\n     }\n \n+    return new Fraction(newNum, newDen);\n+}\n+\n+private int gcd(int x, int y) {\n+    return y == 0 ? x : gcd(y, x % y);\n+}\n+\n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>\n      * ",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<-2/3> was not:<-2/3>",
    "test_result": "FAIL"
}