{
    "patch": "      if (block.isFunction) {\n        if (ref.isInitializingDeclaration() || block != ref.getBasicBlock()) {\n          return false;\n        }\n        // A variable declared in a function scope may be redefined within nested child scopes.\n        ref = getFirstReferenceInBlock(block);\n      } else if (block.isLoop) {\n        if (block == ref.getBasicBlock()) {\n          return true;\n        } else if (block.getParent() != ref.getBasicBlock().getParent()) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..c2bbe252 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,16 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        if (ref.isInitializingDeclaration() || block != ref.getBasicBlock()) {\n+          return false;\n+        }\n+        // A variable declared in a function scope may be redefined within nested child scopes.\n+        ref = getFirstReferenceInBlock(block);\n+      } else if (block.isLoop) {\n+        if (block == ref.getBasicBlock()) {\n+          return true;\n+        } else if (block.getParent() != ref.getBasicBlock().getParent()) {\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}