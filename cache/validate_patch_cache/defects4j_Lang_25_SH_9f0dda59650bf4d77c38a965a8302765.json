{
    "patch": "public static String unescapeJava(String str) {\n    if (str == null) {\n        return null;\n    }\n    int sz = str.length();\n    StringBuilder out = new StringBuilder(sz);\n    StringBuilder unicode = new StringBuilder(4);\n    boolean hadSlash = false;\n    boolean inUnicode = false;\n    for (int i = 0; i < sz; i++) {\n        char ch = str.charAt(i);\n        if (inUnicode) {\n            unicode.append(ch);\n            if (unicode.length() == 4) {\n                try {\n                    int value = Integer.parseInt(unicode.toString(), 16);\n                    out.append((char) value);\n                    unicode.setLength(0);\n                    inUnicode = false;\n                    hadSlash = false;\n                } catch (NumberFormatException nfe) {\n                    throw new IllegalArgumentException(\"Unable to parse unicode value: \" + unicode, nfe);\n                }\n            }\n        } else if (hadSlash) {\n            hadSlash = false;\n            switch (ch) {\n                case '\\\\':\n                    out.append('\\\\');\n                    break;\n                case '\\'':\n                    out.append('\\'');\n                    break;\n                case '\\\"':\n                    out.append('\"');\n                    break;\n                case 'r':\n                    out.append('\\r');\n                    break;\n                case 'f':\n                    out.append('\\f');\n                    break;\n                case 't':\n                    out.append('\\t');\n                    break;\n                case 'n':\n                    out.append('\\n');\n                    break;\n                case 'b':\n                    out.append('\\b');\n                    break;\n                case 'u':\n                    inUnicode = true;\n                    break;\n                default:\n                    out.append(ch);\n                    break;\n            }\n        } else if (ch == '\\\\') {\n            hadSlash = true;\n        } else {\n            out.append(ch);\n        }\n    }\n    if (hadSlash) {\n        out.append('\\\\');\n    }\n    return out.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}