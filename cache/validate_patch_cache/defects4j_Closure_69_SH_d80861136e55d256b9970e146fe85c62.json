{
    "patch": "      ObjectType thisType = functionType.getTypeOfThis();\n      if (thisType != null &&\n          (n.getParent().isGetProp() || n.getParent().isGetElem() ||\n           n.getParent().isName())) {\n        JSType receiverType = n.getParent().isGetProp() || n.getParent().isGetElem()\n            ? getJSType(n.getParent().getFirstChild()).restrictByNotNullOrUndefined()\n            : getScope().getVar(receiverString).getType();\n        if (receiverType != null && !receiverType.isSubtypeOf(thisType)) {\n          report(t, n, EXPECTED_THIS_TYPE, thisType.toString(), receiverType.toString());\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..72299441 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      ObjectType thisType = functionType.getTypeOfThis();\n+      if (thisType != null &&\n+          (n.getParent().isGetProp() || n.getParent().isGetElem() ||\n+           n.getParent().isName())) {\n+        JSType receiverType = n.getParent().isGetProp() || n.getParent().isGetElem()\n+            ? getJSType(n.getParent().getFirstChild()).restrictByNotNullOrUndefined()\n+            : getScope().getVar(receiverString).getType();\n+        if (receiverType != null && !receiverType.isSubtypeOf(thisType)) {\n+          report(t, n, EXPECTED_THIS_TYPE, thisType.toString(), receiverType.toString());\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}