{
    "patch": "        if(NodeUtil.isFunctionExpression(n.getFirstChild())) { // Add this line to the original code\n          defineDeclaredFunction(n.getFirstChild(), n);\n\n        } else {\n          handleFunctionInputs(n);\n        }\n        \n        return;\n      }\n      \n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        default:\n          break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..7608b635 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,6 +1448,16 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n+        if(NodeUtil.isFunctionExpression(n.getFirstChild())) { // Add this line to the original code\n+          defineDeclaredFunction(n.getFirstChild(), n);\n+\n+        } else {\n+          handleFunctionInputs(n);\n+        }\n+        \n+        return;\n+      }\n+      \n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n@@ -1462,7 +1472,8 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n-      }\n+        default:\n+          break;\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: invalid method declaration; return type required",
    "test_result": "ERROR"
}