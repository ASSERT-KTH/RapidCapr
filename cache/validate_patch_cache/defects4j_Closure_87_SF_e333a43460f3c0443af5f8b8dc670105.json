{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n        return false;\n    }\n    Node maybeExpression = n.getFirstChild();\n    if (!NodeUtil.isExpressionNode(maybeExpression)) {\n        return false;\n    }\n    boolean isFunctionExpression = !maybeExpression.isName() && NodeUtil.isFunctionExpression(maybeExpression);\n    if (isFunctionExpression) {\n        return false;\n    }\n    int nodeType = maybeExpression.getType();\n    if (nodeType == Token.OBJECTLIT || nodeType == Token.ARRAYLIT || nodeType == Token.FUNCTION || nodeType == Token.REGEXP) {\n        return false;\n    }\n     if (NodeUtil.mayHaveSideEffects(maybeExpression)) {\n        return false;\n    }\n    Node parent = n.getParent();\n    int parentType = parent.getType();\n    if (parentType == Token.EXPR_RESULT) {\n        return parent.getFirstChild() == n;\n    } else if (parentType == Token.VAR || parentType == Token.CONST) {\n        return parent.getFirstChild() == n;\n    } else if (parentType == Token.RETURN) {\n        return parent.getFirstChild() == n;\n    } else if (parentType == Token.IF) {\n        Node gp = parent.getParent();\n        return gp.isLabel() || parent.getParent().getType() == Token.CASE;\n    } else if (parentType == Token.FOR) {\n        return parent.getLastChild() == n && parent.getChildBefore(n).getType() == Token.EMPTY;\n    } else if (parentType == Token.WHILE) {\n        return parent.getFirstChild() == n;\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..477484a5 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,43 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.getType() != Token.BLOCK || !n.hasOneChild()) {\n+        return false;\n+    }\n+    Node maybeExpression = n.getFirstChild();\n+    if (!NodeUtil.isExpressionNode(maybeExpression)) {\n+        return false;\n+    }\n+    boolean isFunctionExpression = !maybeExpression.isName() && NodeUtil.isFunctionExpression(maybeExpression);\n+    if (isFunctionExpression) {\n+        return false;\n+    }\n+    int nodeType = maybeExpression.getType();\n+    if (nodeType == Token.OBJECTLIT || nodeType == Token.ARRAYLIT || nodeType == Token.FUNCTION || nodeType == Token.REGEXP) {\n+        return false;\n+    }\n+     if (NodeUtil.mayHaveSideEffects(maybeExpression)) {\n+        return false;\n+    }\n+    Node parent = n.getParent();\n+    int parentType = parent.getType();\n+    if (parentType == Token.EXPR_RESULT) {\n+        return parent.getFirstChild() == n;\n+    } else if (parentType == Token.VAR || parentType == Token.CONST) {\n+        return parent.getFirstChild() == n;\n+    } else if (parentType == Token.RETURN) {\n+        return parent.getFirstChild() == n;\n+    } else if (parentType == Token.IF) {\n+        Node gp = parent.getParent();\n+        return gp.isLabel() || parent.getParent().getType() == Token.CASE;\n+    } else if (parentType == Token.FOR) {\n+        return parent.getLastChild() == n && parent.getChildBefore(n).getType() == Token.EMPTY;\n+    } else if (parentType == Token.WHILE) {\n+        return parent.getFirstChild() == n;\n     }\n-\n     return false;\n-  }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}