{
    "patch": "        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        InvocationListener invocationListener = getInvocationListener(mock);\n        ((MockitoMock) mock).resetMockitoState();\n        mock = Mockito.mock(mock.getClass(), settings());\n        Mockito.withSession(() -> {\n            invocationListener.startSession();\n            try {\n                Iterator i$ = oldMockHandler.getInvocationContainer().getInvocationMarkers().iterator();\n\n                while(i$.hasNext()) {\n                    MethodInvocationMarker marker = (MethodInvocationMarker)i$.next();\n                    marker.injectMock(mock);\n                    Object result = marker.invoke();\n                    if (result instanceof Answer) {\n                        Answer resultAnswer = (Answer) result;\n                        oldMockHandler.getInvocationContainer().setAnswerForInvocation(resultAnswer, marker);\n                    }\n                }\n            } catch (Throwable var10) {\n                invocationListener.onFailure(var10);\n            }\n\n            invocationListener.completeSession();\n            //reset the listeners\n            MockUtil.getListeners(mock).clear();\n            MockingDetails mockingDetails = MockUtil.getMockingDetails(mock);\n            mockingDetails.getListenersDispatcher().addListener(invocationListener);\n            for (InvocationListener listener : invocationListeners) {\n                mockingDetails.getListenersDispatcher().addListener(listener);\n            }\n        });",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..9b4031276 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,40 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        InvocationListener invocationListener = getInvocationListener(mock);\n+        ((MockitoMock) mock).resetMockitoState();\n+        mock = Mockito.mock(mock.getClass(), settings());\n+        Mockito.withSession(() -> {\n+            invocationListener.startSession();\n+            try {\n+                Iterator i$ = oldMockHandler.getInvocationContainer().getInvocationMarkers().iterator();\n+\n+                while(i$.hasNext()) {\n+                    MethodInvocationMarker marker = (MethodInvocationMarker)i$.next();\n+                    marker.injectMock(mock);\n+                    Object result = marker.invoke();\n+                    if (result instanceof Answer) {\n+                        Answer resultAnswer = (Answer) result;\n+                        oldMockHandler.getInvocationContainer().setAnswerForInvocation(resultAnswer, marker);\n+                    }\n+                }\n+            } catch (Throwable var10) {\n+                invocationListener.onFailure(var10);\n+            }\n+\n+            invocationListener.completeSession();\n+            //reset the listeners\n+            MockUtil.getListeners(mock).clear();\n+            MockingDetails mockingDetails = MockUtil.getMockingDetails(mock);\n+            mockingDetails.getListenersDispatcher().addListener(invocationListener);\n+            for (InvocationListener listener : invocationListeners) {\n+                mockingDetails.getListenersDispatcher().addListener(listener);\n+            }\n+        });\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: lambda expressions are not supported in -source 1.5",
    "test_result": "ERROR"
}