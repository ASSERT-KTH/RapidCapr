{
    "patch": "public static double regularizedGammaQ(double a, double x, double epsilon, int maxIterations) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 1.0;\n    }\n    if (x >= a + 1) {\n        // use regularizedGammaP because it should converge faster in this case.\n        return 1 - regularizedGammaP(a, x, epsilon, maxIterations);\n    }\n    // series representation\n    double gln = LogGamma.logGamma(a);\n    double ap = a;\n    double sum = 1.0 / a;\n    double del = sum;\n    for (int n = 1; n <= maxIterations; n++) {\n        ap += 1;\n        del *= x / ap;\n        sum += del;\n        if (Math.abs(del) < Math.abs(sum) * epsilon) {\n            return Math.exp(-x + a * Math.log(x) - gln) * sum;\n        }\n    }\n    throw new MaxIterationsExceededException(maxIterations);\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    return regularizedGammaQ(a, x, DEFAULT_EPSILON, DEFAULT_MAX_ITERATIONS);\n}\n\n// New line to be added\nprivate static final double DEFAULT_EPSILON = 1e-9;",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bade3b581 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,7 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}