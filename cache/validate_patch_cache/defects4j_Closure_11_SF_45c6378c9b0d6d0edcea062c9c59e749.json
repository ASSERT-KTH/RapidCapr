{
    "patch": "public String getProperty(String key) throws IOException {\n    InputStream input = null;\n    String value = \"\";\n    try {\n        Properties prop = new Properties();\n        String propFileName = \"config.properties\";\n\n        input = getClass().getClassLoader().getResourceAsStream(propFileName);\n        if (input == null) {\n            throw new FileNotFoundException(\"Property file '\" + propFileName + \"' not found in the classpath\");\n        }\n\n        prop.load(input);\n \n        value = prop.getProperty(key);\n \n        if (value == null || value.isEmpty()) {\n            throw new IllegalArgumentException(\"Value not found for the given key\");\n        }\n    } catch (Exception ex) {\n        ex.printStackTrace();\n    } finally {\n        if (input != null) {\n            input.close();\n        }\n    }\n    return value;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..ce572e44 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,34 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getProperty(String key) throws IOException {\n+    InputStream input = null;\n+    String value = \"\";\n+    try {\n+        Properties prop = new Properties();\n+        String propFileName = \"config.properties\";\n+\n+        input = getClass().getClassLoader().getResourceAsStream(propFileName);\n+        if (input == null) {\n+            throw new FileNotFoundException(\"Property file '\" + propFileName + \"' not found in the classpath\");\n+        }\n+\n+        prop.load(input);\n+ \n+        value = prop.getProperty(key);\n+ \n+        if (value == null || value.isEmpty()) {\n+            throw new IllegalArgumentException(\"Value not found for the given key\");\n+        }\n+    } catch (Exception ex) {\n+        ex.printStackTrace();\n+    } finally {\n+        if (input != null) {\n+            input.close();\n+        }\n+    }\n+    return value;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}