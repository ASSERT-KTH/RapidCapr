{
    "patch": "public static boolean containsAny(String str, char[] chars) {\n    final int strLen = str.length();\n    final int charsLen = chars.length;\n    for (int i = 0; i < strLen; i++) {\n        final char ch = str.charAt(i);\n        if (Character.isHighSurrogate(ch) && i + 1 < strLen) {\n            i++;\n            final char ch2 = str.charAt(i);\n            final int codePoint = Character.toCodePoint(ch, ch2);\n            for (int j = 0; j < charsLen; j++) {\n                if (Character.isSupplementaryCodePoint(chars[j], 0)) {\n                    final int cp2 = Character.codePointAt(chars, j);\n                    if (codePoint == cp2) {\n                        return true;\n                    }\n                } else {\n                    if (ch == chars[j] || ch2 == chars[j]) {\n                        return true;\n                    }\n                }\n            }\n        } else if (Character.isLowSurrogate(ch)) {\n            // Do nothing - invalid surrogate pair\n        } else {\n            for (int j = 0; j < charsLen; j++) {\n                if (Character.isSupplementaryCodePoint(chars[j], 0)) {\n                    final int cp2 = Character.codePointAt(chars, j);\n                    if (ch == cp2) {\n                        return true;\n                    }\n                } else {\n                    if (ch == chars[j]) {\n                        return true;\n                    }\n                }\n            } \n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..38d50b89 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,46 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] chars) {\n+    final int strLen = str.length();\n+    final int charsLen = chars.length;\n+    for (int i = 0; i < strLen; i++) {\n+        final char ch = str.charAt(i);\n+        if (Character.isHighSurrogate(ch) && i + 1 < strLen) {\n+            i++;\n+            final char ch2 = str.charAt(i);\n+            final int codePoint = Character.toCodePoint(ch, ch2);\n+            for (int j = 0; j < charsLen; j++) {\n+                if (Character.isSupplementaryCodePoint(chars[j], 0)) {\n+                    final int cp2 = Character.codePointAt(chars, j);\n+                    if (codePoint == cp2) {\n+                        return true;\n+                    }\n+                } else {\n+                    if (ch == chars[j] || ch2 == chars[j]) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        } else if (Character.isLowSurrogate(ch)) {\n+            // Do nothing - invalid surrogate pair\n+        } else {\n+            for (int j = 0; j < charsLen; j++) {\n+                if (Character.isSupplementaryCodePoint(chars[j], 0)) {\n+                    final int cp2 = Character.codePointAt(chars, j);\n+                    if (ch == cp2) {\n+                        return true;\n+                    }\n+                } else {\n+                    if (ch == chars[j]) {\n+                        return true;\n+                    }\n+                }\n+            } \n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}