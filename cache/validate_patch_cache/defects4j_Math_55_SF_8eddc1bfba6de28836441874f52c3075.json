{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    double v1x = v1.getX();\n    double v1y = v1.getY();\n    double v1z = v1.getZ();\n    double v2x = v2.getX();\n    double v2y = v2.getY();\n    double v2z = v2.getZ();\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    double factor1 = Utils.epsilonP(Math.max(Math.max(Math.abs(v1x), Math.abs(v1y)), Math.abs(v1z)));\n    double factor2 = Utils.epsilonP(Math.max(Math.max(Math.abs(v2x), Math.abs(v2y)), Math.abs(v2z)));\n    double v1xp = v1x * factor1;\n    double v1yp = v1y * factor1;\n    double v1zp = v1z * factor1;\n    double v2xp = v2x * factor2;\n    double v2yp = v2y * factor2;\n    double v2zp = v2z * factor2;\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n    double rho = (v1xp * v2xp + v1yp * v2yp + v1zp * v2zp) / (v2xp * v2xp + v2yp * v2yp + v2zp * v2zp);\n    double v3x = v1xp - rho * v2xp;\n    double v3y = v1yp - rho * v2yp;\n    double v3z = v1zp - rho * v2zp;\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    return new Vector3D(v3y * v2zp - v3z * v2yp, v3z * v2xp - v3x * v2zp, v3x * v2yp - v3y * v2xp);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..04e39c208 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,41 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+    double v1x = v1.getX();\n+    double v1y = v1.getY();\n+    double v1z = v1.getZ();\n+    double v2x = v2.getX();\n+    double v2y = v2.getY();\n+    double v2z = v2.getZ();\n+\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    double factor1 = Utils.epsilonP(Math.max(Math.max(Math.abs(v1x), Math.abs(v1y)), Math.abs(v1z)));\n+    double factor2 = Utils.epsilonP(Math.max(Math.max(Math.abs(v2x), Math.abs(v2y)), Math.abs(v2z)));\n+    double v1xp = v1x * factor1;\n+    double v1yp = v1y * factor1;\n+    double v1zp = v1z * factor1;\n+    double v2xp = v2x * factor2;\n+    double v2yp = v2y * factor2;\n+    double v2zp = v2z * factor2;\n+\n+    // we reduce cancellation errors by preconditioning,\n+    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+    // v3 without loss of precision. See Kahan lecture\n+    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+\n+    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    double rho = (v1xp * v2xp + v1yp * v2yp + v1zp * v2zp) / (v2xp * v2xp + v2yp * v2yp + v2zp * v2zp);\n+    double v3x = v1xp - rho * v2xp;\n+    double v3y = v1yp - rho * v2yp;\n+    double v3z = v1zp - rho * v2zp;\n+\n+    // compute cross product from v3 and v2 instead of v1 and v2\n+    return new Vector3D(v3y * v2zp - v3z * v2yp, v3z * v2xp - v3x * v2zp, v3x * v2yp - v3y * v2xp);\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}