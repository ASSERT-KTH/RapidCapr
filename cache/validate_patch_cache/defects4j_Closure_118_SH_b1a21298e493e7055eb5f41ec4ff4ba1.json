{
    "patch": "        // Maybe STRING, GET, SET\n        switch (child.getToken()) {\n            case GETPROP:\n                if (\"prototype\".equals(child.getLastChild().getString())) {\n                    // This is defining a prototype. Redirect to the function type.\n                    handleFunctionLiteral(t, child.getFirstChild().getJSTypeNotNull()\n                        .toObjectType().getConstructor().getSource());\n                    continue;\n                }\n                break;\n            case MEMBER_FUNCTION_DEF:\n                // This is a method property.\n                typeSystem.addMemberTypeToProperty(\n                    getScope(), n, child, getProperty(child.getString()));\n                continue;\n            case STRING:\n                break;\n            default:\n                return;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..a5bb4c9d 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,26 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+        // Maybe STRING, GET, SET\n+        switch (child.getToken()) {\n+            case GETPROP:\n+                if (\"prototype\".equals(child.getLastChild().getString())) {\n+                    // This is defining a prototype. Redirect to the function type.\n+                    handleFunctionLiteral(t, child.getFirstChild().getJSTypeNotNull()\n+                        .toObjectType().getConstructor().getSource());\n+                    continue;\n+                }\n+                break;\n+            case MEMBER_FUNCTION_DEF:\n+                // This is a method property.\n+                typeSystem.addMemberTypeToProperty(\n+                    getScope(), n, child, getProperty(child.getString()));\n+                continue;\n+            case STRING:\n+                break;\n+            default:\n+                return;\n+        }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}