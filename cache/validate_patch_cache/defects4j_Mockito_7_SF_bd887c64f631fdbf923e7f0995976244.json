{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds != null && bounds.length > 0) {\n        for (Type bound : bounds) {\n            if (bound instanceof TypeVariable) {\n                readTypeVariables((TypeVariable<?>) bound);\n            } else {\n                registerTypeVariablesOn(bound);\n            }\n        }\n    }\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null && !(actualTypeArgument instanceof TypeVariable)) {\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n    TypeVariable<?>[] variables = typeVariable.getGenericDeclaration().getTypeParameters();\n    for (TypeVariable<?> variable : variables) {\n        Type variableActualTypeArgument = getActualTypeArgumentFor(variable);\n        if (variableActualTypeArgument != null && !(variableActualTypeArgument instanceof TypeVariable) && !variableActualTypeArgument.equals(actualTypeArgument)) {\n            registerTypeVariablesOn(variableActualTypeArgument);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..e9ed155f7 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,30 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds != null && bounds.length > 0) {\n+        for (Type bound : bounds) {\n+            if (bound instanceof TypeVariable) {\n+                readTypeVariables((TypeVariable<?>) bound);\n+            } else {\n+                registerTypeVariablesOn(bound);\n+            }\n+        }\n+    }\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null && !(actualTypeArgument instanceof TypeVariable)) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+    TypeVariable<?>[] variables = typeVariable.getGenericDeclaration().getTypeParameters();\n+    for (TypeVariable<?> variable : variables) {\n+        Type variableActualTypeArgument = getActualTypeArgumentFor(variable);\n+        if (variableActualTypeArgument != null && !(variableActualTypeArgument instanceof TypeVariable) && !variableActualTypeArgument.equals(actualTypeArgument)) {\n+            registerTypeVariablesOn(variableActualTypeArgument);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: method readTypeVariables in class TypeVariableReturnType cannot be applied to given types;",
    "test_result": "ERROR"
}