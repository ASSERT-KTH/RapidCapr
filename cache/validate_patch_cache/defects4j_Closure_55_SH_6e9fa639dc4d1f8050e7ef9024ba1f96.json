{
    "patch": "if (NodeUtil.isFunctionExpression(n)) {\n  Node parent = n.getParent();\n  if (parent == null) {\n    return false;\n  }\n  int parentType = parent.getType();\n  switch (parentType) {\n    case Token.CALL:\n    case Token.NEW:\n    case Token.OBJECTLIT:\n      return false;\n    case Token.EXPR_RESULT:\n    case Token.ASSIGN:\n    case Token.VAR:\n    case Token.RETURN:\n    case Token.IF:\n      return true;\n    case Token.BLOCK:\n      Node grandParent = parent.getParent();\n      return grandParent != null && grandParent.getType() == Token.FUNCTION;\n    default:\n      return NodeUtil.isStatement(parent);\n  }\n}\nreturn false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..638102dc 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,31 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+if (NodeUtil.isFunctionExpression(n)) {\n+  Node parent = n.getParent();\n+  if (parent == null) {\n+    return false;\n+  }\n+  int parentType = parent.getType();\n+  switch (parentType) {\n+    case Token.CALL:\n+    case Token.NEW:\n+    case Token.OBJECTLIT:\n+      return false;\n+    case Token.EXPR_RESULT:\n+    case Token.ASSIGN:\n+    case Token.VAR:\n+    case Token.RETURN:\n+    case Token.IF:\n+      return true;\n+    case Token.BLOCK:\n+      Node grandParent = parent.getParent();\n+      return grandParent != null && grandParent.getType() == Token.FUNCTION;\n+    default:\n+      return NodeUtil.isStatement(parent);\n+  }\n+}\n+return false;\n   }\n \n   /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}