{
    "patch": "      if (block.isFunction) {\n        break;\n      } else if (block.isLoop) {\n        return false;\n      } else if (block.getUniqueSuccessor().getIncomingSize() > 1) {\n        // Multiple incoming edges, so this block is a merger.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..580c3921 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,12 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        break;\n+      } else if (block.isLoop) {\n+        return false;\n+      } else if (block.getUniqueSuccessor().getIncomingSize() > 1) {\n+        // Multiple incoming edges, so this block is a merger.\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}