{
    "patch": "public String fixCode(String code) {\n    int index = code.indexOf(\"in\");\n    while (index != -1) {\n        if (code.charAt(index - 1) == ' ' && code.charAt(index + 2) == ' ') {\n            int startIndex = index - 2;\n            int endIndex = index + 3;\n            while (startIndex >= 0 && code.charAt(startIndex) != '(') {\n                startIndex--;\n            }\n            while (endIndex < code.length() && code.charAt(endIndex) != ')') {\n                endIndex++;\n            }\n            if (startIndex >= 0 && endIndex < code.length()) {\n                String loopHeader = code.substring(startIndex + 1, endIndex + 1);\n                code = code.replace(loopHeader, loopHeader.replace(\"in\", \":\"));\n            }\n        }\n        index = code.indexOf(\"in\", index + 1);\n    }\n    return code;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..07edc1be 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,27 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String code) {\n+    int index = code.indexOf(\"in\");\n+    while (index != -1) {\n+        if (code.charAt(index - 1) == ' ' && code.charAt(index + 2) == ' ') {\n+            int startIndex = index - 2;\n+            int endIndex = index + 3;\n+            while (startIndex >= 0 && code.charAt(startIndex) != '(') {\n+                startIndex--;\n+            }\n+            while (endIndex < code.length() && code.charAt(endIndex) != ')') {\n+                endIndex++;\n+            }\n+            if (startIndex >= 0 && endIndex < code.length()) {\n+                String loopHeader = code.substring(startIndex + 1, endIndex + 1);\n+                code = code.replace(loopHeader, loopHeader.replace(\"in\", \":\"));\n+            }\n+        }\n+        index = code.indexOf(\"in\", index + 1);\n+    }\n+    return code;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}