{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  int numArgs = call.getChildCount() - 1; // exclude function name\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n\n  List<Node> varArgArguments = new ArrayList<>();\n  int requiredCount = 0;\n  int ordinal = 0;\n\n  while (arguments.hasNext()) {\n    if (functionType.getParameters().size() <= ordinal) { // varargs\n      varArgArguments.add(arguments.next());\n      continue;\n    }\n\n    Node parameter = functionType.getParameters().get(ordinal);\n    Node argument = arguments.next();\n    ordinal++;\n\n    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n\n    if (!isOptional(parameter)) {\n      requiredCount++;\n    }\n  }\n\n  // Check that there are enough required arguments.\n  if (requiredCount > numArgs) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs),\n            String.valueOf(requiredCount),\n            \"\");\n    return;\n  }\n\n  // Check that there are not too many arguments.\n  if (maxArgs != -1 && numArgs > maxArgs) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(numArgs),\n            String.valueOf(minArgs),\n            \" and no more than \" + maxArgs + \" argument(s).\");\n    return;\n  }\n\n  // Check that all missing parameters are optional.\n  for (int i = ordinal; i < functionType.getParameters().size(); i++) {\n    Node parameter = functionType.getParameters().get(i);\n    if (!isOptional(parameter)) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs),\n              String.valueOf(requiredCount),\n              \"\");\n      return;\n    }\n  }\n\n  // Check that there are enough arguments for varargs.\n  int varArgCount = varArgArguments.size();\n  if (varArgCount > 0 && functionType.getParameters().size() == ordinal) {\n    Node varArgParameter = functionType.getParameters().get(ordinal - 1);\n    int varArgMinCount = getMinArgumentCount(varArgParameter);\n    if (numArgs < requiredCount + varArgMinCount) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs),\n              String.valueOf(requiredCount),\n              \" and at least \" + varArgMinCount + \" argument(s) for the rest parameter.\");\n      return;\n    }\n  }\n\n  // Check types of varArgs\n  for (int i = 0; i < varArgArguments.size(); i++) {\n    Node varArg = varArgArguments.get(i);\n    Node varArgParameter = functionType.getParameters().get(ordinal - 1);\n    int varArgMinCount = getMinArgumentCount(varArgParameter);\n    if (i < varArgMinCount) {\n      validator.expectArgumentMatchesParameter(t, varArg, getJSType(varArg), getJSType(varArgParameter), call, ordinal);\n    } else {\n      validator.expectArgumentMatchesParameter(t, varArg, getJSType(varArg), getJSType(varArgParameter), call, ordinal + i - varArgMinCount + 1);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..24cc7188 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,39 +1396,96 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  int numArgs = call.getChildCount() - 1; // exclude function name\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+\n+  List<Node> varArgArguments = new ArrayList<>();\n+  int requiredCount = 0;\n+  int ordinal = 0;\n+\n+  while (arguments.hasNext()) {\n+    if (functionType.getParameters().size() <= ordinal) { // varargs\n+      varArgArguments.add(arguments.next());\n+      continue;\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n+    Node parameter = functionType.getParameters().get(ordinal);\n+    Node argument = arguments.next();\n+    ordinal++;\n+\n+    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n+\n+    if (!isOptional(parameter)) {\n+      requiredCount++;\n+    }\n+  }\n+\n+  // Check that there are enough required arguments.\n+  if (requiredCount > numArgs) {\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(numArgs),\n+            String.valueOf(requiredCount),\n+            \"\");\n+    return;\n+  }\n+\n+  // Check that there are not too many arguments.\n+  if (maxArgs != -1 && numArgs > maxArgs) {\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(numArgs),\n+            String.valueOf(minArgs),\n+            \" and no more than \" + maxArgs + \" argument(s).\");\n+    return;\n+  }\n+\n+  // Check that all missing parameters are optional.\n+  for (int i = ordinal; i < functionType.getParameters().size(); i++) {\n+    Node parameter = functionType.getParameters().get(i);\n+    if (!isOptional(parameter)) {\n       report(t, call, WRONG_ARGUMENT_COUNT,\n               validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+              String.valueOf(numArgs),\n+              String.valueOf(requiredCount),\n+              \"\");\n+      return;\n     }\n   }\n \n+  // Check that there are enough arguments for varargs.\n+  int varArgCount = varArgArguments.size();\n+  if (varArgCount > 0 && functionType.getParameters().size() == ordinal) {\n+    Node varArgParameter = functionType.getParameters().get(ordinal - 1);\n+    int varArgMinCount = getMinArgumentCount(varArgParameter);\n+    if (numArgs < requiredCount + varArgMinCount) {\n+      report(t, call, WRONG_ARGUMENT_COUNT,\n+              validator.getReadableJSTypeName(call.getFirstChild(), false),\n+              String.valueOf(numArgs),\n+              String.valueOf(requiredCount),\n+              \" and at least \" + varArgMinCount + \" argument(s) for the rest parameter.\");\n+      return;\n+    }\n+  }\n+\n+  // Check types of varArgs\n+  for (int i = 0; i < varArgArguments.size(); i++) {\n+    Node varArg = varArgArguments.get(i);\n+    Node varArgParameter = functionType.getParameters().get(ordinal - 1);\n+    int varArgMinCount = getMinArgumentCount(varArgParameter);\n+    if (i < varArgMinCount) {\n+      validator.expectArgumentMatchesParameter(t, varArg, getJSType(varArg), getJSType(varArgParameter), call, ordinal);\n+    } else {\n+      validator.expectArgumentMatchesParameter(t, varArg, getJSType(varArg), getJSType(varArgParameter), call, ordinal + i - varArgMinCount + 1);\n+    }\n+  }\n+}\n+\n   /**\n    * Visits a RETURN node.\n    *",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}