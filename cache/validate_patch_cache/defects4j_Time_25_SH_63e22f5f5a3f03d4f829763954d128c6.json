{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    if (offsetAdjusted < offsetLocal) {\n        long next = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        long nextDiff = next - instantAdjusted;\n        long nextAdjustedDiff = nextAdjusted - instantLocal;\n        if (next != nextAdjusted && ((nextAdjustedDiff > 0 && nextDiff > nextAdjustedDiff) || nextAdjustedDiff <= 0)) {\n            int millisecondsToNext = (int) (next - instantAdjusted);\n            if (millisecondsToNext - (nextAdjusted - instantLocal) <= 1800000) { // Add half the transition size due to Moscow's special rule\n                return offsetAdjusted;\n            }\n        }\n        return offsetLocal;\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..c625b503 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,22 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    if (offsetAdjusted < offsetLocal) {\n+        long next = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        long nextDiff = next - instantAdjusted;\n+        long nextAdjustedDiff = nextAdjusted - instantLocal;\n+        if (next != nextAdjusted && ((nextAdjustedDiff > 0 && nextDiff > nextAdjustedDiff) || nextAdjustedDiff <= 0)) {\n+            int millisecondsToNext = (int) (next - instantAdjusted);\n+            if (millisecondsToNext - (nextAdjusted - instantLocal) <= 1800000) { // Add half the transition size due to Moscow's special rule\n+                return offsetAdjusted;\n+            }\n+        }\n+        return offsetLocal;\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}