{
    "patch": "          Node catchBlock = NodeUtil.getCatchBlock(parent);\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(catchBlock.getNext());\n          } else {\n            cfa.createEdge(fromNode, Branch.UNCOND, NodeUtil.getFunctionBody(catchBlock));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..4dcd511a 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,11 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+          Node catchBlock = NodeUtil.getCatchBlock(parent);\n+          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n+            return computeFallThrough(catchBlock.getNext());\n+          } else {\n+            cfa.createEdge(fromNode, Branch.UNCOND, NodeUtil.getFunctionBody(catchBlock));\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}