{
    "patch": "I apologize for the error in my previous response. Here's the corrected implementation for the `containsAny` function that handles supplementary characters correctly:\n\n```\npublic static boolean containsAny(CharSequence seq, char... searchChars) {\n    if (seq == null || searchChars == null) {\n        return false;\n    }\n    int seqLen = seq.length();\n    int csLen = searchChars.length;\n    if (seqLen == 0 || csLen == 0) {\n        return false;\n    }\n    int i = 0;\n    int j = 0;\n    while (i < seqLen) {\n        char ch = seq.charAt(i);\n        char searchChar = searchChars[j];\n        if (Character.isHighSurrogate(ch) && i < seqLen - 1) {\n            int codePoint = Character.toCodePoint(ch, seq.charAt(i + 1));\n            if (contains(searchChars, codePoint)) {\n                return true;\n            }\n            i++;\n        } else {\n            if (ch == searchChar) {\n                return true;\n            }\n        }\n        i++;\n        j = (j + 1) % csLen;\n    }\n    return false;\n}\n\nprivate static boolean contains(char[] array, int value) {\n    for (char c : array) {\n        if (c == value) {\n            return true;\n        }\n    }\n    return false;\n}\n```\n\nThis implementation checks for surrogate pairs using the `isHighSurrogate` and `toCodePoint` methods of the `Character` class. It also includes a separate `contains` method to handle the search for the supplementary characters.",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..cf428c0e 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,51 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+I apologize for the error in my previous response. Here's the corrected implementation for the `containsAny` function that handles supplementary characters correctly:\n+\n+```\n+public static boolean containsAny(CharSequence seq, char... searchChars) {\n+    if (seq == null || searchChars == null) {\n+        return false;\n+    }\n+    int seqLen = seq.length();\n+    int csLen = searchChars.length;\n+    if (seqLen == 0 || csLen == 0) {\n+        return false;\n+    }\n+    int i = 0;\n+    int j = 0;\n+    while (i < seqLen) {\n+        char ch = seq.charAt(i);\n+        char searchChar = searchChars[j];\n+        if (Character.isHighSurrogate(ch) && i < seqLen - 1) {\n+            int codePoint = Character.toCodePoint(ch, seq.charAt(i + 1));\n+            if (contains(searchChars, codePoint)) {\n+                return true;\n+            }\n+            i++;\n+        } else {\n+            if (ch == searchChar) {\n+                return true;\n+            }\n+        }\n+        i++;\n+        j = (j + 1) % csLen;\n+    }\n+    return false;\n+}\n+\n+private static boolean contains(char[] array, int value) {\n+    for (char c : array) {\n+        if (c == value) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+```\n+\n+This implementation checks for surrogate pairs using the `isHighSurrogate` and `toCodePoint` methods of the `Character` class. It also includes a separate `contains` method to handle the search for the supplementary characters.\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}