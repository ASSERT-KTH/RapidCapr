{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    simplex = shrink(original, comparator);\n                }\n                return;\n\n            } else {\n                // compute the contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    final RealPointValuePair[] contractedSimplex = simplex;\n                    simplex = contractedSimplex;\n                } else {\n                    simplex = shrink(original, comparator);\n                }\n            }\n\n        }\n\n    }\n\n    private RealPointValuePair[] shrink(final RealPointValuePair[] original,\n                                         final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException {\n        final RealPointValuePair best = original[0];\n        final RealPointValuePair[] shrunkSimplex = new RealPointValuePair[original.length];\n        shrunkSimplex[0] = best;\n        for (int i = 1; i < original.length; i++) {\n            final RealPointValuePair vertex = original[i];\n            final double[] point = new double[vertex.getPointRef().length];\n            for (int j = 0; j < point.length; j++) {\n                point[j] = best.getPointRef()[j] +\n                        sigma * (vertex.getPointRef()[j] - best.getPointRef()[j]);\n            }\n            shrunkSimplex[i] = new RealPointValuePair(point, Double.NaN, false);\n        }\n        Arrays.sort(shrunkSimplex, comparator);\n        return shrunkSimplex;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..fcfec1908 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -79,23 +79,44 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 if (comparator.compare(reflected, expanded) <= 0) {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    simplex = shrink(original, comparator);\n                 }\n-\n                 return;\n \n+            } else {\n+                // compute the contracted simplex\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    final RealPointValuePair[] contractedSimplex = simplex;\n+                    simplex = contractedSimplex;\n+                } else {\n+                    simplex = shrink(original, comparator);\n+                }\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+        }\n \n-            // check convergence\n-                return;\n-            }\n+    }\n \n+    private RealPointValuePair[] shrink(final RealPointValuePair[] original,\n+                                         final Comparator<RealPointValuePair> comparator)\n+            throws FunctionEvaluationException {\n+        final RealPointValuePair best = original[0];\n+        final RealPointValuePair[] shrunkSimplex = new RealPointValuePair[original.length];\n+        shrunkSimplex[0] = best;\n+        for (int i = 1; i < original.length; i++) {\n+            final RealPointValuePair vertex = original[i];\n+            final double[] point = new double[vertex.getPointRef().length];\n+            for (int j = 0; j < point.length; j++) {\n+                point[j] = best.getPointRef()[j] +\n+                        sigma * (vertex.getPointRef()[j] - best.getPointRef()[j]);\n+            }\n+            shrunkSimplex[i] = new RealPointValuePair(point, Double.NaN, false);\n         }\n-\n+        Arrays.sort(shrunkSimplex, comparator);\n+        return shrunkSimplex;\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}