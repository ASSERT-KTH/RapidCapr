{
    "patch": "      attachLiteralTypes(n);\n      // Check that function decldared with `name = function(){}`\n      if (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) {\n        Node varNode = parent.getFirstChild();\n        Node varNameNode = varNode.getFirstChild();\n        Node functionNode = n;\n        functionNode.putBooleanProp(Node.FUNCTION_EXPRESSION, false);\n        defineDeclaredFunction(functionNode, varNode);\n        return;\n      }\n      \n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..fb1f33aa 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1449,6 +1449,16 @@ final class TypedScopeCreator implements ScopeCreator {\n       }\n \n       attachLiteralTypes(n);\n+      // Check that function decldared with `name = function(){}`\n+      if (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) {\n+        Node varNode = parent.getFirstChild();\n+        Node varNameNode = varNode.getFirstChild();\n+        Node functionNode = n;\n+        functionNode.putBooleanProp(Node.FUNCTION_EXPRESSION, false);\n+        defineDeclaredFunction(functionNode, varNode);\n+        return;\n+      }\n+      \n       switch (n.getType()) {\n         case Token.FUNCTION:\n           if (parent.getType() == Token.NAME) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}