{
    "patch": "  private void setTypeContext(NodeTraversal t, Scope scope) {\n    AbstractCompiler compiler = t.getCompiler();\n    JSTypeRegistry registry = compiler.getTypeRegistry();\n\n    Node root = t.getScopeRoot();\n    Node externs = t.getCompiler().getRoot().getFirstChild();\n\n    // Start with an unknown source file name. The NodeUtil.getSourceFileName\n    // method will then start looking at parents of this node for a source\n    // file name, allowing us to find the correct source file.\n    root.setStaticSourceFile(new SimpleSourceFile(\"unknown\"));\n\n    GlobalTypeInfo globalTypeInfo = t.getCompiler().getGlobalTypeInfo();\n\n    // Recover the types of any assignments in the externs tree.\n    NodeTraversal.traverse(compiler, externs, new GlobalTypeInfoCollector(compiler));\n\n    // Collect types from any JSDoc annotations.  The inline JSDoc\n    // annotation parser does not have access to types from other files.\n    NodeTraversal.traverse(compiler, root, new CollectFileOverviewTypes(scope.getScope()));\n\n    // Collect information about property names.\n    new PropertyReferenceGraphBuilder(compiler).process(compiler.getExternsRoot(), compiler.getJsRoot());\n\n    // Collect information about classes.\n    new Es6ToEs3ClassSideEffectCollapser(compiler).process(compiler.getExternsRoot(),\n        compiler.getJsRoot());\n\n    if (globalTypeInfo.hasNewTypeInference()) {\n      // Collect type information from all files\n      for (Node script : NodeUtil.getAllScriptTags(root)) {\n        compiler.reportChangeToEnclosingScope(script);\n        NodeTraversal.traverse(compiler, script, new TypeInferenceCollector(globalTypeInfo));\n      }\n      // Infer type information across the entire program.\n      globalTypeInfo.finishTypeInference();\n      for (Node script : NodeUtil.getAllScriptTags(root)) {\n        compiler.reportChangeToEnclosingScope(script);\n        NodeTraversal.traverse(compiler, script, new TypeInferenceProcessor(compiler,\n            scope, registry, globalTypeInfo));\n      }\n    } else {\n      NodeUtil.getEnclosingChangeScopeRoot(root).putBooleanProp(Node.GOOG_SCOPE, true);\n      // Process types in the body of the script.\n      NodeTraversal.traverse(compiler, root, new ProcessScope(scope, registry));\n    }\n\n    // Handle any leftover JSDoc info.  (This can happen if there are circular\n    // dependencies that TypeScript can't follow.)\n    NodeTraversal.traverse(compiler, root, new ProcessScope(scope, registry));\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex c43a7d1a..03fa99e0 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -521,109 +521,57 @@ class TypeInference\n    * an assignment or a type cast.\n    */\n   private void updateScopeForTypeChange(\n-      FlowScope scope, Node left, JSType leftType, JSType resultType) {\n-    Preconditions.checkNotNull(resultType);\n-    switch (left.getType()) {\n-      case Token.NAME:\n-        String varName = left.getString();\n-        Var var = syntacticScope.getVar(varName);\n-        boolean isVarDeclaration = left.hasChildren();\n+  private void setTypeContext(NodeTraversal t, Scope scope) {\n+    AbstractCompiler compiler = t.getCompiler();\n+    JSTypeRegistry registry = compiler.getTypeRegistry();\n \n-        // When looking at VAR initializers for declared VARs, we tend\n-        // to use the declared type over the type it's being\n-        // initialized to in the global scope.\n-        //\n-        // For example,\n-        // /** @param {number} */ var f = goog.abstractMethod;\n-        // it's obvious that the programmer wants you to use\n-        // the declared function signature, not the inferred signature.\n-        //\n-        // Or,\n-        // /** @type {Object.<string>} */ var x = {};\n-        // the one-time anonymous object on the right side\n-        // is as narrow as it can possibly be, but we need to make\n-        // sure we back-infer the <string> element constraint on\n-        // the left hand side, so we use the left hand side.\n-\n-        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();\n-            // Makes it easier to check for NPEs.\n-\n-        // TODO(nicksantos): This might be a better check once we have\n-        // back-inference of object/array constraints.  It will probably\n-        // introduce more type warnings.  It uses the result type iff it's\n-        // strictly narrower than the declared var type.\n-        //\n-        //boolean isVarTypeBetter = isVarDeclaration &&\n-        //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)\n-        //     || !resultType.isSubtype(varType));\n+    Node root = t.getScopeRoot();\n+    Node externs = t.getCompiler().getRoot().getFirstChild();\n \n+    // Start with an unknown source file name. The NodeUtil.getSourceFileName\n+    // method will then start looking at parents of this node for a source\n+    // file name, allowing us to find the correct source file.\n+    root.setStaticSourceFile(new SimpleSourceFile(\"unknown\"));\n \n-        if (isVarTypeBetter) {\n-          redeclareSimpleVar(scope, left, resultType);\n-        }\n-        left.setJSType(isVarDeclaration || leftType == null ?\n-            resultType : null);\n+    GlobalTypeInfo globalTypeInfo = t.getCompiler().getGlobalTypeInfo();\n \n-        if (var != null && var.isTypeInferred()) {\n-          JSType oldType = var.getType();\n-          var.setType(oldType == null ?\n-              resultType : oldType.getLeastSupertype(resultType));\n-        }\n-        break;\n-      case Token.GETPROP:\n-        String qualifiedName = left.getQualifiedName();\n-        if (qualifiedName != null) {\n-          scope.inferQualifiedSlot(left, qualifiedName,\n-              leftType == null ? unknownType : leftType,\n-              resultType);\n-        }\n+    // Recover the types of any assignments in the externs tree.\n+    NodeTraversal.traverse(compiler, externs, new GlobalTypeInfoCollector(compiler));\n \n-        left.setJSType(resultType);\n-        ensurePropertyDefined(left, resultType);\n-        break;\n-    }\n-  }\n+    // Collect types from any JSDoc annotations.  The inline JSDoc\n+    // annotation parser does not have access to types from other files.\n+    NodeTraversal.traverse(compiler, root, new CollectFileOverviewTypes(scope.getScope()));\n \n-  /**\n-   * Defines a property if the property has not been defined yet.\n-   */\n-  private void ensurePropertyDefined(Node getprop, JSType rightType) {\n-    String propName = getprop.getLastChild().getString();\n-    Node obj = getprop.getFirstChild();\n-    JSType nodeType = getJSType(obj);\n-    ObjectType objectType = ObjectType.cast(\n-        nodeType.restrictByNotNullOrUndefined());\n-    boolean propCreationInConstructor = obj.isThis() &&\n-        getJSType(syntacticScope.getRootNode()).isConstructor();\n-\n-    if (objectType == null) {\n-      registry.registerPropertyOnType(propName, nodeType);\n-    } else {\n-      if (nodeType.isStruct() && !objectType.hasProperty(propName)) {\n-        // In general, we don't want to define a property on a struct object,\n-        // b/c TypeCheck will later check for improper property creation on\n-        // structs. There are two exceptions.\n-        // 1) If it's a property created inside the constructor, on the newly\n-        //    created instance, allow it.\n-        // 2) If it's a prototype property, allow it. For example:\n-        //    Foo.prototype.bar = baz;\n-        //    where Foo.prototype is a struct and the assignment happens at the\n-        //    top level and the constructor Foo is defined in the same file.\n-        boolean staticPropCreation = false;\n-        Node maybeAssignStm = getprop.getParent().getParent();\n-        if (syntacticScope.isGlobal() &&\n-            NodeUtil.isPrototypePropertyDeclaration(maybeAssignStm)) {\n-          String propCreationFilename = maybeAssignStm.getSourceFileName();\n-          Node ctor = objectType.getOwnerFunction().getSource();\n-          if (ctor != null &&\n-              ctor.getSourceFileName().equals(propCreationFilename)) {\n-            staticPropCreation = true;\n-          }\n-        }\n-        if (!propCreationInConstructor && !staticPropCreation) {\n-          return; // Early return to avoid creating the property below.\n-        }\n+    // Collect information about property names.\n+    new PropertyReferenceGraphBuilder(compiler).process(compiler.getExternsRoot(), compiler.getJsRoot());\n+\n+    // Collect information about classes.\n+    new Es6ToEs3ClassSideEffectCollapser(compiler).process(compiler.getExternsRoot(),\n+        compiler.getJsRoot());\n+\n+    if (globalTypeInfo.hasNewTypeInference()) {\n+      // Collect type information from all files\n+      for (Node script : NodeUtil.getAllScriptTags(root)) {\n+        compiler.reportChangeToEnclosingScope(script);\n+        NodeTraversal.traverse(compiler, script, new TypeInferenceCollector(globalTypeInfo));\n+      }\n+      // Infer type information across the entire program.\n+      globalTypeInfo.finishTypeInference();\n+      for (Node script : NodeUtil.getAllScriptTags(root)) {\n+        compiler.reportChangeToEnclosingScope(script);\n+        NodeTraversal.traverse(compiler, script, new TypeInferenceProcessor(compiler,\n+            scope, registry, globalTypeInfo));\n       }\n+    } else {\n+      NodeUtil.getEnclosingChangeScopeRoot(root).putBooleanProp(Node.GOOG_SCOPE, true);\n+      // Process types in the body of the script.\n+      NodeTraversal.traverse(compiler, root, new ProcessScope(scope, registry));\n+    }\n+\n+    // Handle any leftover JSDoc info.  (This can happen if there are circular\n+    // dependencies that TypeScript can't follow.)\n+    NodeTraversal.traverse(compiler, root, new ProcessScope(scope, registry));\n+  }\n \n       if (ensurePropertyDeclaredHelper(getprop, objectType)) {\n         return;",
    "result_reason": "error: modifier private not allowed here",
    "test_result": "ERROR"
}