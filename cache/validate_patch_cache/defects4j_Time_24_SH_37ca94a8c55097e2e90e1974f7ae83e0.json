{
    "patch": "    private long leapWeekYearAdjustment(long millis) {\n        int leapWeekYears = iChrono.weekyear().remainder(millis);\n        if (leapWeekYears <= 0) {\n            millis -= iChrono.weeksInYear(leapWeekYears - 1) * DateTimeConstants.MILLIS_PER_WEEK;\n        } else {\n            millis += iChrono.weeksInYear(leapWeekYears) * DateTimeConstants.MILLIS_PER_WEEK;\n        }\n        return millis;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..1627dac9 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,15 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+    private long leapWeekYearAdjustment(long millis) {\n+        int leapWeekYears = iChrono.weekyear().remainder(millis);\n+        if (leapWeekYears <= 0) {\n+            millis -= iChrono.weeksInYear(leapWeekYears - 1) * DateTimeConstants.MILLIS_PER_WEEK;\n+        } else {\n+            millis += iChrono.weeksInYear(leapWeekYears) * DateTimeConstants.MILLIS_PER_WEEK;\n+        }\n+        return millis;\n+    }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}