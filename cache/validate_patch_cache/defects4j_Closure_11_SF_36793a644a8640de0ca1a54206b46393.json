{
    "patch": "public static String[] getprop() {\n    String[] prop = new String[0];\n    try {\n        String command = \"getprop\";\n        String line;\n        Process process = Runtime.getRuntime().exec(command);\n        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        while ((line = reader.readLine()) != null) {\n            if (line.startsWith(\"[ro.\") || line.startsWith(\"[persist.\")) {\n                prop = Arrays.copyOf(prop, prop.length+1);\n                prop[prop.length-1] = line;\n            }\n        }\n        reader.close();\n        process.waitFor();\n    } catch (Exception e) {\n        fail(\"An exception occurred.\");\n    }\n    return prop;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..a554bcc9 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String[] getprop() {\n+    String[] prop = new String[0];\n+    try {\n+        String command = \"getprop\";\n+        String line;\n+        Process process = Runtime.getRuntime().exec(command);\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n+        while ((line = reader.readLine()) != null) {\n+            if (line.startsWith(\"[ro.\") || line.startsWith(\"[persist.\")) {\n+                prop = Arrays.copyOf(prop, prop.length+1);\n+                prop[prop.length-1] = line;\n+            }\n+        }\n+        reader.close();\n+        process.waitFor();\n+    } catch (Exception e) {\n+        fail(\"An exception occurred.\");\n+    }\n+    return prop;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}