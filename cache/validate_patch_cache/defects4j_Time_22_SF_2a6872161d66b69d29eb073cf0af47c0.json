{
    "patch": "public int getWeeks() {\n    int days = getDays();\n    int weeks = days / 7;\n    if (days % 7 != 0) {\n        int dayOfWeek = iStart.getDayOfWeek();\n        if (dayOfWeek == DateTimeConstants.SUNDAY) {\n            weeks++;\n        } else {\n            int daysToAdd = 7 - dayOfWeek;\n            int adjustment = (days % 7 >= daysToAdd ? 2 : 1);\n            weeks += adjustment;\n        }\n    }\n    return weeks;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..9db2114b 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,21 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n+public int getWeeks() {\n+    int days = getDays();\n+    int weeks = days / 7;\n+    if (days % 7 != 0) {\n+        int dayOfWeek = iStart.getDayOfWeek();\n+        if (dayOfWeek == DateTimeConstants.SUNDAY) {\n+            weeks++;\n+        } else {\n+            int daysToAdd = 7 - dayOfWeek;\n+            int adjustment = (days % 7 >= daysToAdd ? 2 : 1);\n+            weeks += adjustment;\n+        }\n     }\n+    return weeks;\n+}\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}