{
    "patch": "    protected BasePeriod(long duration) {\n        super();\n        iPeriodType = PeriodType.standard();\n        iValues = new int[8];\n        setPeriod(duration);\n    }\n    \n    private void setPeriod(long duration) {\n        long remainder = duration;\n        for (int i = 0; i < iValues.length - 1; i++) {\n            int value = (int) (remainder / MIN_FIELD_VALUES[i]);\n            if (value != 0) {\n                remainder = setFieldValue(remainder, i, value);\n            }\n            if (remainder == 0) {\n                break;\n            }\n        }\n        // leftover is milliseconds\n        iValues[iValues.length - 1] = FieldUtils.safeToInt(remainder);\n    }\n    \n    private long setFieldValue(long duration, int fieldIndex, int value) {\n        iValues[fieldIndex] = value;\n        duration -= value * MIN_FIELD_VALUES[fieldIndex];\n        return duration;\n    }\n    \n    protected void setPeriod(ReadableInterval interval) {\n        if (interval == null) {\n            throw new IllegalArgumentException(\"Interval must not be null\");\n        }\n        Chronology chrono = interval.getChronology();\n        long startMillis = interval.getStartMillis();\n        long endMillis = interval.getEndMillis();\n        // calculate difference\n        for (int i = 0; i < iValues.length; i++) {\n            DurationFieldType type = TYPES[i];\n            if (type == null) {\n                // unsupported\n                continue;\n            }\n            int value;\n            try {\n                value = chrono.getDifference(endMillis, startMillis, type);\n            } catch (ArithmeticException ex) {\n                throw new IllegalArgumentException(\"The field \" + type.getName() + \" is larger than a supported size\");\n            }\n            if (value != 0) {\n                startMillis = chrono.add(startMillis, value);\n                iValues[i] = value;\n            }\n        }\n        // calc remainder\n        int millis = chronology.millisOfDay().getDifference(endMillis, startMillis);\n        if (millis != 0) {\n            iValues[iValues.length - 1] = millis;\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..4b7b6510 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -219,8 +219,63 @@ public abstract class BasePeriod\n      * @param duration  the duration, in milliseconds\n      */\n     protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n+        super();\n+        iPeriodType = PeriodType.standard();\n+        iValues = new int[8];\n+        setPeriod(duration);\n+    }\n+    \n+    private void setPeriod(long duration) {\n+        long remainder = duration;\n+        for (int i = 0; i < iValues.length - 1; i++) {\n+            int value = (int) (remainder / MIN_FIELD_VALUES[i]);\n+            if (value != 0) {\n+                remainder = setFieldValue(remainder, i, value);\n+            }\n+            if (remainder == 0) {\n+                break;\n+            }\n+        }\n+        // leftover is milliseconds\n+        iValues[iValues.length - 1] = FieldUtils.safeToInt(remainder);\n+    }\n+    \n+    private long setFieldValue(long duration, int fieldIndex, int value) {\n+        iValues[fieldIndex] = value;\n+        duration -= value * MIN_FIELD_VALUES[fieldIndex];\n+        return duration;\n+    }\n+    \n+    protected void setPeriod(ReadableInterval interval) {\n+        if (interval == null) {\n+            throw new IllegalArgumentException(\"Interval must not be null\");\n+        }\n+        Chronology chrono = interval.getChronology();\n+        long startMillis = interval.getStartMillis();\n+        long endMillis = interval.getEndMillis();\n+        // calculate difference\n+        for (int i = 0; i < iValues.length; i++) {\n+            DurationFieldType type = TYPES[i];\n+            if (type == null) {\n+                // unsupported\n+                continue;\n+            }\n+            int value;\n+            try {\n+                value = chrono.getDifference(endMillis, startMillis, type);\n+            } catch (ArithmeticException ex) {\n+                throw new IllegalArgumentException(\"The field \" + type.getName() + \" is larger than a supported size\");\n+            }\n+            if (value != 0) {\n+                startMillis = chrono.add(startMillis, value);\n+                iValues[i] = value;\n+            }\n+        }\n+        // calc remainder\n+        int millis = chronology.millisOfDay().getDifference(endMillis, startMillis);\n+        if (millis != 0) {\n+            iValues[iValues.length - 1] = millis;\n+        }\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}