{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    Node parent = n.getParent();\n    if (parent != null && \n        (parent.getType() == Token.EXPR_RESULT ||\n         parent.getType() == Token.FOR ||\n         parent.getType() == Token.WHILE || \n         parent.getType() == Token.DO)) { \n      // Don't fold if this is a statement block\n      return false;\n    }\n    if (n.getChildCount() == 1) {\n      Node child = n.getFirstChild();\n      if (child.getType() == Token.LABEL) {\n        // Don't fold a label. This happens in beautify-like passes.\n        return false;\n      } else if (child.getType() == Token.CONST) {\n        // Don't fold a constant identifier declaration.\n        return false;\n      } else if (child.getType() == Token.EXPR_RESULT) {\n        // Ignore EXPR_RESULT nodes that are returned from an event handler.\n        // This is because IE has a bug where event handlers behave differently\n        // when their return value is used vs. when their return value is in\n        // an EXPR_RESULT. See:\n        // http://code.google.com/p/closure-compiler/issues/detail?id=291\n        Node expr = child.getFirstChild();\n        if (NodeUtil.isFunctionExpression(expr)) {\n          Node returnNode = expr.getLastChild();\n          if (returnNode != null && returnNode.getType() == Token.RETURN &&\n              returnNode.getFirstChild() != null) {\n            return false;\n          }\n        } else if (expr != null && expr.getType() == Token.NAME && \n            expr.getString().endsWith(\"_\")) {\n          return false;\n        } else if ((expr != null && expr.getType() == Token.OBJECTLIT) ||\n                   NodeUtil.isImmutableValue(expr)) {\n          // Don't fold an immutable expression or an object literal.\n          return false;\n        } else if (!NodeUtil.isExpressionNode(expr)) {\n          // This is not a valid expression node.\n          return false;\n        } else if (NodeUtil.mayHaveSideEffects(expr) && !NodeUtil.isSimpleOperator(expr)) {\n          // Don't fold an expression that may have a side effect.\n          return false;\n        } else {\n          return true;\n        }\n      } else if (child.getType() == Token.VAR) {\n        Node grandChild = child.getFirstChild();\n        if (grandChild.getNext() == null) {\n          // This is a block with one var. Return true to fold.\n          return true;\n        } else if (grandChild.getNext().getNext() != null) {\n          // More than one child is found.\n          // Do not fold when there are more than one grand child nodes.\n          return false;\n        } else {\n          // Exactly one var grandchild is found.\n          // Do not fold if the grandchild is an object literal.\n          return grandChild.getNext().getType() != Token.OBJECTLIT;\n        }\n      } else if (!NodeUtil.isExpressionNode(child)) {\n        // This is not a valid expression or statement node.\n        return false;\n      } else if (NodeUtil.mayHaveSideEffects(child)) {\n        // Don't fold an expression that may have a side effect.\n        return false;\n      } else {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..d1fbab95 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,83 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    Node parent = n.getParent();\n+    if (parent != null && \n+        (parent.getType() == Token.EXPR_RESULT ||\n+         parent.getType() == Token.FOR ||\n+         parent.getType() == Token.WHILE || \n+         parent.getType() == Token.DO)) { \n+      // Don't fold if this is a statement block\n+      return false;\n+    }\n+    if (n.getChildCount() == 1) {\n+      Node child = n.getFirstChild();\n+      if (child.getType() == Token.LABEL) {\n+        // Don't fold a label. This happens in beautify-like passes.\n+        return false;\n+      } else if (child.getType() == Token.CONST) {\n+        // Don't fold a constant identifier declaration.\n+        return false;\n+      } else if (child.getType() == Token.EXPR_RESULT) {\n+        // Ignore EXPR_RESULT nodes that are returned from an event handler.\n+        // This is because IE has a bug where event handlers behave differently\n+        // when their return value is used vs. when their return value is in\n+        // an EXPR_RESULT. See:\n+        // http://code.google.com/p/closure-compiler/issues/detail?id=291\n+        Node expr = child.getFirstChild();\n+        if (NodeUtil.isFunctionExpression(expr)) {\n+          Node returnNode = expr.getLastChild();\n+          if (returnNode != null && returnNode.getType() == Token.RETURN &&\n+              returnNode.getFirstChild() != null) {\n+            return false;\n+          }\n+        } else if (expr != null && expr.getType() == Token.NAME && \n+            expr.getString().endsWith(\"_\")) {\n+          return false;\n+        } else if ((expr != null && expr.getType() == Token.OBJECTLIT) ||\n+                   NodeUtil.isImmutableValue(expr)) {\n+          // Don't fold an immutable expression or an object literal.\n+          return false;\n+        } else if (!NodeUtil.isExpressionNode(expr)) {\n+          // This is not a valid expression node.\n+          return false;\n+        } else if (NodeUtil.mayHaveSideEffects(expr) && !NodeUtil.isSimpleOperator(expr)) {\n+          // Don't fold an expression that may have a side effect.\n+          return false;\n+        } else {\n+          return true;\n+        }\n+      } else if (child.getType() == Token.VAR) {\n+        Node grandChild = child.getFirstChild();\n+        if (grandChild.getNext() == null) {\n+          // This is a block with one var. Return true to fold.\n+          return true;\n+        } else if (grandChild.getNext().getNext() != null) {\n+          // More than one child is found.\n+          // Do not fold when there are more than one grand child nodes.\n+          return false;\n+        } else {\n+          // Exactly one var grandchild is found.\n+          // Do not fold if the grandchild is an object literal.\n+          return grandChild.getNext().getType() != Token.OBJECTLIT;\n+        }\n+      } else if (!NodeUtil.isExpressionNode(child)) {\n+        // This is not a valid expression or statement node.\n+        return false;\n+      } else if (NodeUtil.mayHaveSideEffects(child)) {\n+        // Don't fold an expression that may have a side effect.\n+        return false;\n+      } else {\n+        return true;\n       }\n     }\n-\n-    return false;\n   }\n \n+  return false;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}