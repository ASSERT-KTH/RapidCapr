{
    "patch": "public static String unescape(String original) {\n    String result = original;\n    int index = 0;\n    while ((index = result.indexOf(\"\\\\\", index)) >= 0) {\n        if (index < result.length() - 1) {\n            char nextChar = result.charAt(index + 1);\n            switch (nextChar) {\n                case '\\\\':\n                    result = result.substring(0, index) + \"\\\\\" + result.substring(index + 2);\n                    break;\n                case 'u':\n                    if (index < result.length() - 5) {\n                        char c;\n                        try {\n                            c = (char) Integer.parseInt(result.substring(index + 2, index + 6), 16);\n                            result = result.substring(0, index) + c + result.substring(index + 6);\n                        } catch (NumberFormatException e) {\n                            index++;\n                        }\n                    } else {\n                        index++;\n                    }\n                    break;\n                case 'n':\n                    result = result.substring(0, index) + \"\\n\" + result.substring(index + 2);\n                    break;\n                case 'r':\n                    result = result.substring(0, index) + \"\\r\" + result.substring(index + 2);\n                    break;\n                case 't':\n                    result = result.substring(0, index) + \"\\t\" + result.substring(index + 2);\n                    break;\n                case 'b':\n                    result = result.substring(0, index) + \"\\b\" + result.substring(index + 2);\n                    break;\n                case 'f':\n                    result = result.substring(0, index) + \"\\f\" + result.substring(index + 2);\n                    break;\n                default:\n                    index++;\n                    break;\n            }\n        } else {\n            index++;\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..37dea69d 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,54 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String original) {\n+    String result = original;\n+    int index = 0;\n+    while ((index = result.indexOf(\"\\\\\", index)) >= 0) {\n+        if (index < result.length() - 1) {\n+            char nextChar = result.charAt(index + 1);\n+            switch (nextChar) {\n+                case '\\\\':\n+                    result = result.substring(0, index) + \"\\\\\" + result.substring(index + 2);\n+                    break;\n+                case 'u':\n+                    if (index < result.length() - 5) {\n+                        char c;\n+                        try {\n+                            c = (char) Integer.parseInt(result.substring(index + 2, index + 6), 16);\n+                            result = result.substring(0, index) + c + result.substring(index + 6);\n+                        } catch (NumberFormatException e) {\n+                            index++;\n+                        }\n+                    } else {\n+                        index++;\n+                    }\n+                    break;\n+                case 'n':\n+                    result = result.substring(0, index) + \"\\n\" + result.substring(index + 2);\n+                    break;\n+                case 'r':\n+                    result = result.substring(0, index) + \"\\r\" + result.substring(index + 2);\n+                    break;\n+                case 't':\n+                    result = result.substring(0, index) + \"\\t\" + result.substring(index + 2);\n+                    break;\n+                case 'b':\n+                    result = result.substring(0, index) + \"\\b\" + result.substring(index + 2);\n+                    break;\n+                case 'f':\n+                    result = result.substring(0, index) + \"\\f\" + result.substring(index + 2);\n+                    break;\n+                default:\n+                    index++;\n+                    break;\n+            }\n+        } else {\n+            index++;\n+        }\n+    }\n+    return result;\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}