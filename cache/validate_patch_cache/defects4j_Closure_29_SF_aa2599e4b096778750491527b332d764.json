{
    "patch": "private boolean isInlinableObject(List<Reference> refs) {\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    // Ignore indirect references, like x.y (except x.y(), since\n    // the function referenced by y might reference 'this').\n    if (parent.isGetProp() && parent.getFirstChild().equals(name)) {\n\n      if (gramps.isCall() && gramps.getFirstChild().equals(parent)) {\n        // A call target maybe using the object as a 'this' value.\n        // Bail out of this loop and check the next assignee.\n        continue;\n      }\n\n      // A non-call assignment to a property after an initial declaration\n      // cannot be an object literal and will break object splitting. We\n      // simply bail out of this loop in such cases.\n      for (int i = refs.indexOf(ref) + 1; i < refs.size(); i++) {\n        Node otherParent = refs.get(i).getParent();\n        if (otherParent.isAssign()\n                && otherParent.getFirstChild().equals(parent)) {\n          continue;\n        }\n      }\n\n      Node objectNode = parent.getFirstChild();\n      if (objectNode.isName()) {\n        Node grandGramps = gramps.getGrandparent();\n        for (Node sibling = objectNode.getNext();\n             sibling != null;\n             sibling = sibling.getNext()) {\n          if (sibling.isFunction()) {\n            if ((grandGramps != null\n                        && grandGramps.isExprResult()\n                        && gramps == grandGramps.getFirstChild())\n                    || isStatementBlock(parent)) {\n              // An object literal defined as a function body or object key.\n              return true;\n            }\n            // Any other object reference in the function indicates a self-reference.\n            for (Name occurence = nameManager.getReferencesByName(objectNode.getString())\n                    .getNextOccurrence(nameManager.getIndex(parent.getLineno()));\n                     occurence != null;\n                     occurence = occurence.getNextOccurrence(nameManager)\n            ) {\n              if (!occurence.getNode().isGetProp()\n                      && occurence.getNode() != objectNode) {\n                return false;\n              }\n            }\n            continue;\n          }\n\n          if (!sibling.isStringKey()) {\n            return false;\n          }\n\n        }\n        // All properties are string keys, this is a candidate for object inlining.\n        return true;\n      } else if (objectNode.isObjectLit()) {\n        // This is a candidate for object inlining.\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    // Make sure that we're looking VAR declarations or simple assignment\n    // statements, with a non-null value.\n    if (!isVarOrAssignExprLhs(name)) {\n      continue;\n    }\n    Node val = ref.getAssignedValue();\n\n    // A var with no assignment or a non-object-literal assignment.\n    if (val == null || !val.isObjectLit()) {\n      continue;\n    }\n\n    boolean hasSelfReference = false;\n\n    for (Node child = val.getFirstChild(); child != null;\n         child = child.getNext()) {\n      if (child.isGetterDef() || child.isSetterDef()) {\n        // ES5 get/set not supported.\n        return false;\n      }\n      Node childVal = child.getFirstChild();\n\n      // Check if childVal is the parent of any of the passed in\n      // references, as that is how self-referential assignments\n      // will happen.\n      for (Reference t : refs) {\n        Node refNode = t.getParent();\n        while (!NodeUtil.isStatementBlock(refNode)) {\n          if (refNode == childVal) {\n            // There's a self-referential assignment.\n            // Bail out of this loop and check the next assignee.\n            hasSelfReference = true;\n            break;\n          }\n          refNode = refNode.getParent();\n        }\n        if (hasSelfReference) {\n          break;\n        }\n      }\n      if (hasSelfReference) {\n        break;\n      }\n    }\n\n    if (hasSelfReference) {\n      continue;\n    }\n\n    // We have found an acceptable object literal assignment.\n    return true;\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..a95c98a3 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,93 +152,132 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      for (Reference ref : refs) {\n-        Node name = ref.getNode();\n-        Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n-\n-        // Ignore indirect references, like x.y (except x.y(), since\n-        // the function referenced by y might reference 'this').\n-        //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n+private boolean isInlinableObject(List<Reference> refs) {\n+  for (Reference ref : refs) {\n+    Node name = ref.getNode();\n+    Node parent = ref.getParent();\n+    Node gramps = ref.getGrandparent();\n+\n+    // Ignore indirect references, like x.y (except x.y(), since\n+    // the function referenced by y might reference 'this').\n+    if (parent.isGetProp() && parent.getFirstChild().equals(name)) {\n+\n+      if (gramps.isCall() && gramps.getFirstChild().equals(parent)) {\n+        // A call target maybe using the object as a 'this' value.\n+        // Bail out of this loop and check the next assignee.\n+        continue;\n+      }\n \n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n+      // A non-call assignment to a property after an initial declaration\n+      // cannot be an object literal and will break object splitting. We\n+      // simply bail out of this loop in such cases.\n+      for (int i = refs.indexOf(ref) + 1; i < refs.size(); i++) {\n+        Node otherParent = refs.get(i).getParent();\n+        if (otherParent.isAssign()\n+                && otherParent.getFirstChild().equals(parent)) {\n           continue;\n         }\n+      }\n \n-        // Only rewrite VAR declarations or simple assignment statements\n-        if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n-        }\n+      Node objectNode = parent.getFirstChild();\n+      if (objectNode.isName()) {\n+        Node grandGramps = gramps.getGrandparent();\n+        for (Node sibling = objectNode.getNext();\n+             sibling != null;\n+             sibling = sibling.getNext()) {\n+          if (sibling.isFunction()) {\n+            if ((grandGramps != null\n+                        && grandGramps.isExprResult()\n+                        && gramps == grandGramps.getFirstChild())\n+                    || isStatementBlock(parent)) {\n+              // An object literal defined as a function body or object key.\n+              return true;\n+            }\n+            // Any other object reference in the function indicates a self-reference.\n+            for (Name occurence = nameManager.getReferencesByName(objectNode.getString())\n+                    .getNextOccurrence(nameManager.getIndex(parent.getLineno()));\n+                     occurence != null;\n+                     occurence = occurence.getNextOccurrence(nameManager)\n+            ) {\n+              if (!occurence.getNode().isGetProp()\n+                      && occurence.getNode() != objectNode) {\n+                return false;\n+              }\n+            }\n+            continue;\n+          }\n \n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n-          continue;\n-        }\n+          if (!sibling.isStringKey()) {\n+            return false;\n+          }\n \n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n-          return false;\n         }\n+        // All properties are string keys, this is a candidate for object inlining.\n+        return true;\n+      } else if (objectNode.isObjectLit()) {\n+        // This is a candidate for object inlining.\n+        return true;\n+      } else {\n+        return false;\n+      }\n+    }\n \n-        // Make sure that the value is not self-refential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n-            return false;\n-          }\n+    // Make sure that we're looking VAR declarations or simple assignment\n+    // statements, with a non-null value.\n+    if (!isVarOrAssignExprLhs(name)) {\n+      continue;\n+    }\n+    Node val = ref.getAssignedValue();\n \n+    // A var with no assignment or a non-object-literal assignment.\n+    if (val == null || !val.isObjectLit()) {\n+      continue;\n+    }\n \n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n-            }\n+    boolean hasSelfReference = false;\n+\n+    for (Node child = val.getFirstChild(); child != null;\n+         child = child.getNext()) {\n+      if (child.isGetterDef() || child.isSetterDef()) {\n+        // ES5 get/set not supported.\n+        return false;\n+      }\n+      Node childVal = child.getFirstChild();\n+\n+      // Check if childVal is the parent of any of the passed in\n+      // references, as that is how self-referential assignments\n+      // will happen.\n+      for (Reference t : refs) {\n+        Node refNode = t.getParent();\n+        while (!NodeUtil.isStatementBlock(refNode)) {\n+          if (refNode == childVal) {\n+            // There's a self-referential assignment.\n+            // Bail out of this loop and check the next assignee.\n+            hasSelfReference = true;\n+            break;\n           }\n+          refNode = refNode.getParent();\n         }\n-\n-\n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n+        if (hasSelfReference) {\n+          break;\n+        }\n+      }\n+      if (hasSelfReference) {\n+        break;\n       }\n-      return ret;\n     }\n \n+    if (hasSelfReference) {\n+      continue;\n+    }\n+\n+    // We have found an acceptable object literal assignment.\n+    return true;\n+  }\n+\n+  return false;\n+}\n+\n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();\n       return parent.isVar() ||",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}