{
    "patch": "MockCandidate filteredCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\nif (filteredCandidate != null) {\n    Object injectMock = filteredCandidate.thenInject();\n    if (injectMock != null) {\n        field.setAccessible(true);\n        try {\n            field.set(fieldInstance, injectMock);\n            return;\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(String.format(\"Failed to inject mock [%s] for field [%s] of class [%s].\", filteredCandidate.getMock().getClass().getSimpleName(), field.getName(), fieldInstance.getClass().getSimpleName()), e);\n        }\n    }\n}\n\nif (fieldInstance == null) {\n    throw new RuntimeException(String.format(\"Could not inject mock for field [%s] in class [%s].\", field.getName(), awaitingInjectionClazz.getSimpleName()));\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..8010af08c 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,26 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+MockCandidate filteredCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+if (filteredCandidate != null) {\n+    Object injectMock = filteredCandidate.thenInject();\n+    if (injectMock != null) {\n+        field.setAccessible(true);\n+        try {\n+            field.set(fieldInstance, injectMock);\n+            return;\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(String.format(\"Failed to inject mock [%s] for field [%s] of class [%s].\", filteredCandidate.getMock().getClass().getSimpleName(), field.getName(), fieldInstance.getClass().getSimpleName()), e);\n+        }\n+    }\n+}\n+\n+if (fieldInstance == null) {\n+    throw new RuntimeException(String.format(\"Could not inject mock for field [%s] in class [%s].\", field.getName(), awaitingInjectionClazz.getSimpleName()));\n+}\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}