{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        boolean isLeapYear = iChronology.year().isLeap(values[0]);\n        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n        int minDayOfMonth = iChronology.dayOfMonth().getMinimumValue(instant);\n        int monthToAdd = valueToAdd % 12;\n        int yearToAdd = valueToAdd / 12;\n        int newMonth = values[1] + monthToAdd;\n        int newYear = values[0] + yearToAdd;\n        if (newMonth > 12) {\n            newMonth -= 12;\n            newYear++;\n        } else if (newMonth < 1) {\n            newMonth += 12;\n            newYear--;\n        }\n        if (isLeapYear && newMonth == 2 && values[2] == 29) {\n            // Special case for February 29 in leap years\n            values[0] = newYear;\n            values[1] = newMonth;\n            values[2] = 29;\n        } else {\n            values[0] = newYear;\n            values[1] = newMonth;\n            if (values[2] > maxDayOfMonth) {\n                values[2] = maxDayOfMonth;\n            }\n            if (values[2] < minDayOfMonth) {\n                values[2] = minDayOfMonth;\n            }\n        }\n        return values;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..fbf3cf40 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,49 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+        boolean isLeapYear = iChronology.year().isLeap(values[0]);\n+        int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(instant);\n+        int minDayOfMonth = iChronology.dayOfMonth().getMinimumValue(instant);\n+        int monthToAdd = valueToAdd % 12;\n+        int yearToAdd = valueToAdd / 12;\n+        int newMonth = values[1] + monthToAdd;\n+        int newYear = values[0] + yearToAdd;\n+        if (newMonth > 12) {\n+            newMonth -= 12;\n+            newYear++;\n+        } else if (newMonth < 1) {\n+            newMonth += 12;\n+            newYear--;\n+        }\n+        if (isLeapYear && newMonth == 2 && values[2] == 29) {\n+            // Special case for February 29 in leap years\n+            values[0] = newYear;\n+            values[1] = newMonth;\n+            values[2] = 29;\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            values[0] = newYear;\n+            values[1] = newMonth;\n+            if (values[2] > maxDayOfMonth) {\n+                values[2] = maxDayOfMonth;\n+            }\n+            if (values[2] < minDayOfMonth) {\n+                values[2] = minDayOfMonth;\n+            }\n         }\n+        return values;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]",
    "test_result": "FAIL"
}