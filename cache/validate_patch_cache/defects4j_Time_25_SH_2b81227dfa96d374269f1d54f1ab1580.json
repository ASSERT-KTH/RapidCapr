{
    "patch": "        int offsetAdjusted = getOffset(instantAdjusted);\n        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            // we need to ensure that time is always after the DST gap\n            // this happens naturally for positive offsets, but not for negative\n            if (offsetAdjusted < offsetLocal) {\n                long prevLocal = previousTransition(instantLocal - offsetLocal);\n                long prevAdjusted = previousTransition(instantAdjusted);\n                offsetAdjusted = getOffset(prevAdjusted);\n                if (offsetAdjusted < offsetLocal) {",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..5937c2f7 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,16 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+        int offsetAdjusted = getOffset(instantAdjusted);\n+        // if the offsets differ, we must be near a DST boundary\n+        if (offsetLocal != offsetAdjusted) {\n+            // we need to ensure that time is always after the DST gap\n+            // this happens naturally for positive offsets, but not for negative\n+            if (offsetAdjusted < offsetLocal) {\n+                long prevLocal = previousTransition(instantLocal - offsetLocal);\n+                long prevAdjusted = previousTransition(instantAdjusted);\n+                offsetAdjusted = getOffset(prevAdjusted);\n+                if (offsetAdjusted < offsetLocal) {\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}