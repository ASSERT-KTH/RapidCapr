{
    "patch": "public XYDataItem addOrUpdate(Number x, Number y) {\n    if (x == null) {\n        throw new IllegalArgumentException(\"Null 'x' argument.\");\n    }\n    XYDataItem overwritten = null;\n    int index = indexOf(x);\n    if (index >= 0 && !this.allowDuplicateXValues) {\n        XYDataItem existing = (XYDataItem) this.data.get(index);\n        try {\n            overwritten = (XYDataItem) existing.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new SeriesException(\"Couldn't clone XYDataItem!\");\n        }\n        existing.setY(y);\n    } else {\n        boolean added = false;\n        int itemCount = getItemCount();\n        if (itemCount == 0) {\n            this.data.add(new XYDataItem(x, y));\n            added = true;\n        } else if (this.autoSort) {\n            // Find the index where the new item should be added\n            // using binary search\n            int startIndex = 0;\n            int endIndex = itemCount - 1;\n            int pivotIndex;\n            while (startIndex <= endIndex) {\n                pivotIndex = (startIndex + endIndex) / 2;\n                int cmp = x.compareTo(getX(pivotIndex));\n                if (cmp == 0) {\n                    if (allowDuplicateXValues) {\n                        this.data.add(pivotIndex + 1, new XYDataItem(x, y));\n                    } else {\n                        XYDataItem existing = getDataItem(pivotIndex);\n                        try {\n                            overwritten = (XYDataItem) existing.clone();\n                        } catch (CloneNotSupportedException e) {\n                            throw new SeriesException(\"Couldn't clone XYDataItem!\");\n                        }\n                        existing.setY(y);\n                    }\n                    added = true;\n                    break;\n                } else if (cmp < 0) {\n                    endIndex = pivotIndex - 1;\n                } else {\n                    startIndex = pivotIndex + 1;\n                }\n            }\n            if (!added) {\n                this.data.add(startIndex, new XYDataItem(x, y));\n                added = true;\n            }\n        }\n        // Non-sorted data or item not added yet\n        if (!added) {\n            for (int i = (--itemCount); i >= 0; i--) {\n                XYDataItem item = getDataItem(i);\n                if (x.equals(item.getX())) {\n                    if (this.allowDuplicateXValues) {\n                        this.data.add(i + 1, new XYDataItem(x, y));\n                    } else {\n                        try {\n                            overwritten = (XYDataItem) item.clone();\n                            item.setY(y);\n                            break;\n                        } catch (CloneNotSupportedException e) {\n                            throw new SeriesException(\"Couldn't clone XYDataItem!\");\n                        }\n                    }\n                } else if (x.doubleValue() > item.getX().doubleValue()) {\n                    this.data.add(i + 1, new XYDataItem(x, y));\n                    break;\n                }\n            }\n            if (itemCount == getItemCount()) {\n                this.data.add(0, new XYDataItem(x, y));\n            }\n        }\n        // Remove items if the maximum item count is exceeded\n        if (getItemCount() > this.maximumItemCount) {\n            this.data.remove(0);\n        }\n    }\n    fireSeriesChanged();\n    return overwritten;\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/xy/XYSeries.java b/source/org/jfree/data/xy/XYSeries.java\nindex 0b37e6e..c010124 100644\n--- a/source/org/jfree/data/xy/XYSeries.java\n+++ b/source/org/jfree/data/xy/XYSeries.java\n@@ -537,43 +537,93 @@ public class XYSeries extends Series implements Cloneable, Serializable {\n      * @return A copy of the overwritten data item, or <code>null</code> if no\n      *         item was overwritten.\n      */\n-    public XYDataItem addOrUpdate(Number x, Number y) {\n-        if (x == null) {\n-            throw new IllegalArgumentException(\"Null 'x' argument.\");\n-        }\n-\n-        // if we get to here, we know that duplicate X values are not permitted\n-        XYDataItem overwritten = null;\n-        int index = indexOf(x);\n-        if (index >= 0 && !this.allowDuplicateXValues) {\n-            XYDataItem existing = (XYDataItem) this.data.get(index);\n-            try {\n-                overwritten = (XYDataItem) existing.clone();\n-            }\n-            catch (CloneNotSupportedException e) {\n-                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n-            }\n-            existing.setY(y);\n-        }\n-        else {\n-            // if the series is sorted, the negative index is a result from\n-            // Collections.binarySearch() and tells us where to insert the\n-            // new item...otherwise it will be just -1 and we should just\n-            // append the value to the list...\n-            if (this.autoSort) {\n-                this.data.add(-index - 1, new XYDataItem(x, y));\n-            }\n-            else {\n-                this.data.add(new XYDataItem(x, y));\n-            }\n-            // check if this addition will exceed the maximum item count...\n-            if (getItemCount() > this.maximumItemCount) {\n-                this.data.remove(0);\n-            }\n-        }\n-        fireSeriesChanged();\n-        return overwritten;\n-    }\n+public XYDataItem addOrUpdate(Number x, Number y) {\n+    if (x == null) {\n+        throw new IllegalArgumentException(\"Null 'x' argument.\");\n+    }\n+    XYDataItem overwritten = null;\n+    int index = indexOf(x);\n+    if (index >= 0 && !this.allowDuplicateXValues) {\n+        XYDataItem existing = (XYDataItem) this.data.get(index);\n+        try {\n+            overwritten = (XYDataItem) existing.clone();\n+        } catch (CloneNotSupportedException e) {\n+            throw new SeriesException(\"Couldn't clone XYDataItem!\");\n+        }\n+        existing.setY(y);\n+    } else {\n+        boolean added = false;\n+        int itemCount = getItemCount();\n+        if (itemCount == 0) {\n+            this.data.add(new XYDataItem(x, y));\n+            added = true;\n+        } else if (this.autoSort) {\n+            // Find the index where the new item should be added\n+            // using binary search\n+            int startIndex = 0;\n+            int endIndex = itemCount - 1;\n+            int pivotIndex;\n+            while (startIndex <= endIndex) {\n+                pivotIndex = (startIndex + endIndex) / 2;\n+                int cmp = x.compareTo(getX(pivotIndex));\n+                if (cmp == 0) {\n+                    if (allowDuplicateXValues) {\n+                        this.data.add(pivotIndex + 1, new XYDataItem(x, y));\n+                    } else {\n+                        XYDataItem existing = getDataItem(pivotIndex);\n+                        try {\n+                            overwritten = (XYDataItem) existing.clone();\n+                        } catch (CloneNotSupportedException e) {\n+                            throw new SeriesException(\"Couldn't clone XYDataItem!\");\n+                        }\n+                        existing.setY(y);\n+                    }\n+                    added = true;\n+                    break;\n+                } else if (cmp < 0) {\n+                    endIndex = pivotIndex - 1;\n+                } else {\n+                    startIndex = pivotIndex + 1;\n+                }\n+            }\n+            if (!added) {\n+                this.data.add(startIndex, new XYDataItem(x, y));\n+                added = true;\n+            }\n+        }\n+        // Non-sorted data or item not added yet\n+        if (!added) {\n+            for (int i = (--itemCount); i >= 0; i--) {\n+                XYDataItem item = getDataItem(i);\n+                if (x.equals(item.getX())) {\n+                    if (this.allowDuplicateXValues) {\n+                        this.data.add(i + 1, new XYDataItem(x, y));\n+                    } else {\n+                        try {\n+                            overwritten = (XYDataItem) item.clone();\n+                            item.setY(y);\n+                            break;\n+                        } catch (CloneNotSupportedException e) {\n+                            throw new SeriesException(\"Couldn't clone XYDataItem!\");\n+                        }\n+                    }\n+                } else if (x.doubleValue() > item.getX().doubleValue()) {\n+                    this.data.add(i + 1, new XYDataItem(x, y));\n+                    break;\n+                }\n+            }\n+            if (itemCount == getItemCount()) {\n+                this.data.add(0, new XYDataItem(x, y));\n+            }\n+        }\n+        // Remove items if the maximum item count is exceeded\n+        if (getItemCount() > this.maximumItemCount) {\n+            this.data.remove(0);\n+        }\n+    }\n+    fireSeriesChanged();\n+    return overwritten;\n+}\n \n     /**\n      * Returns the index of the item with the specified x-value, or a negative",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}