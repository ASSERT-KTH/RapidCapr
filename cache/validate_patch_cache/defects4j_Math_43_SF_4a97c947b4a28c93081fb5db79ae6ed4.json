{
    "patch": "public void addValue(double value) throws MathIllegalStateException {\n    // Ignore NaN and infinite values\n    if (Double.isNaN(value) || Double.isInfinite(value)) {\n        return;\n    }\n\n    // Update count\n    n++;\n\n    // Update running statistics\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    secondMoment.increment(value);\n\n    // Handle custom implementations of mean, variance, and geometric mean\n    if (meanImpl != null) {\n        if (!(meanImpl instanceof Mean)) {\n            meanImpl.increment(value);\n        } else {\n            ((Mean) meanImpl).increment(value);\n        }\n    }\n    if (varianceImpl != null) {\n        if (!(varianceImpl instanceof Variance)) {\n            varianceImpl.increment(value);\n        } else {\n            ((Variance) varianceImpl).increment(value);\n        }\n    }\n    if (geoMeanImpl != null) {\n        if (value <= 0) {\n            throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX, value);\n        } else if (!(geoMeanImpl instanceof GeometricMean)) {\n            sumLogImpl.increment(Math.log(Math.abs(value)));\n        } else {\n            ((GeometricMean) geoMeanImpl).increment(value);\n        }\n    }\n\n    // Check for overflow\n    if (n < 0) {\n        throw new MathIllegalStateException(LocalizedFormats.OVERFLOW);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..2360cdb11 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,27 +146,53 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n+public void addValue(double value) throws MathIllegalStateException {\n+    // Ignore NaN and infinite values\n+    if (Double.isNaN(value) || Double.isInfinite(value)) {\n+        return;\n+    }\n+\n+    // Update count\n+    n++;\n+\n+    // Update running statistics\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    secondMoment.increment(value);\n+\n+    // Handle custom implementations of mean, variance, and geometric mean\n+    if (meanImpl != null) {\n         if (!(meanImpl instanceof Mean)) {\n             meanImpl.increment(value);\n+        } else {\n+            ((Mean) meanImpl).increment(value);\n         }\n+    }\n+    if (varianceImpl != null) {\n         if (!(varianceImpl instanceof Variance)) {\n             varianceImpl.increment(value);\n+        } else {\n+            ((Variance) varianceImpl).increment(value);\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n+    }\n+    if (geoMeanImpl != null) {\n+        if (value <= 0) {\n+            throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX, value);\n+        } else if (!(geoMeanImpl instanceof GeometricMean)) {\n+            sumLogImpl.increment(Math.log(Math.abs(value)));\n+        } else {\n+            ((GeometricMean) geoMeanImpl).increment(value);\n         }\n-        n++;\n     }\n \n+    // Check for overflow\n+    if (n < 0) {\n+        throw new MathIllegalStateException(LocalizedFormats.OVERFLOW);\n+    }\n+}\n+\n     /**\n      * Returns the number of available values\n      * @return The number of available values",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}