{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index || intIndex < 0) {\n      error(n, \"Invalid index\");\n      return n;\n    }\n\n    Node current = left.getFirstChild();\n    Node elem = null;\n    for (int i = 0; current != null && i < intIndex; i++) {\n      elem = current;\n      current = current.getNext();\n    }\n\n    if (current == null) {\n      error(n, \"Index out of bounds\");\n      return n;\n    }\n\n    if (elem != null) {\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    Node value = current.removeFirstChild();\n    n.insertBefore(value);\n    n.detachFromParent();\n    reportCodeChange();\n    return value;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..b59d1f71 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,7 +1419,7 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n@@ -1436,39 +1436,33 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n \n     double index = right.getDouble();\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n-\n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    if (intIndex != index || intIndex < 0) {\n+      error(n, \"Invalid index\");\n       return n;\n     }\n \n     Node current = left.getFirstChild();\n     Node elem = null;\n     for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n+      elem = current;\n       current = current.getNext();\n     }\n \n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    if (current == null) {\n+      error(n, \"Index out of bounds\");\n       return n;\n     }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n+    if (elem != null) {\n       left.removeChild(elem);\n     }\n \n     // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n+    Node value = current.removeFirstChild();\n+    n.insertBefore(value);\n+    n.detachFromParent();\n     reportCodeChange();\n-    return elem;\n+    return value;\n   }\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {",
    "result_reason": "error: method error in class AbstractPeepholeOptimization cannot be applied to given types;",
    "test_result": "ERROR"
}