{
    "patch": "                    if (str.startsWith(id + '/')) {\n                        bucket.setZone(DateTimeZone.forID(id));\n                        return position + id.length() + 1;\n                    } else if (id.equals(\"UTC\")) {\n                        bucket.setZone(DateTimeZone.UTC);\n                        return position + 3;\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\nindex 558a5864..4ded3918 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n@@ -2537,16 +2537,13 @@ public class DateTimeFormatterBuilder {\n             return MAX_LENGTH;\n         }\n \n-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n-            String str = text.substring(position);\n-            for (String id : ALL_IDS) {\n-                if (str.startsWith(id)) {\n-                    bucket.setZone(DateTimeZone.forID(id));\n-                    return position + id.length();\n-                }\n-            }\n-            return ~position;\n-        }\n+                    if (str.startsWith(id + '/')) {\n+                        bucket.setZone(DateTimeZone.forID(id));\n+                        return position + id.length() + 1;\n+                    } else if (id.equals(\"UTC\")) {\n+                        bucket.setZone(DateTimeZone.UTC);\n+                        return position + 3;\n+                    }\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}