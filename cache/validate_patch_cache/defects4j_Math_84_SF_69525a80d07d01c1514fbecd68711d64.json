{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        int numIterations = 0;\n        final int maxIterations = getMaxIterations();\n\n        while (numIterations < maxIterations) {\n\n            incrementIterationsCounter();\n            numIterations++;\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            final RealPointValuePair[] reflectedSimplex = replaceWorstPoint(original, reflected, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n                // compute the expanded simplex\n                final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n                simplex = comparator.compare(expanded, best) < 0 ?\n                        replaceWorstPoint(original, expanded, comparator) :\n                        reflectedSimplex;\n                return;\n            }\n\n            // Compute the contracted simplex\n            final RealPointValuePair contracted;\n            if (comparator.compare(reflected, original[n]) < 0) {\n                contracted = evaluateNewSimplex(original, sigma, comparator);\n            } else {\n                contracted = evaluateNewSimplex(original, rho, comparator);\n            }\n            simplex = comparator.compare(contracted, best) < 0 ?\n                    replaceWorstPoint(original, contracted, comparator) :\n                    shrink(original, comparator);\n        }\n\n        throw new OptimizationException(\"Maximal number of iterations exceeded: \" + maxIterations);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..0f5387e6e 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,12 +58,16 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+        int numIterations = 0;\n+        final int maxIterations = getMaxIterations();\n+\n+        while (numIterations < maxIterations) {\n \n             incrementIterationsCounter();\n+            numIterations++;\n \n             // save the original vertex\n             final RealPointValuePair[] original = simplex;\n@@ -71,31 +75,29 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n             // perform a reflection step\n             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+            final RealPointValuePair[] reflectedSimplex = replaceWorstPoint(original, reflected, comparator);\n             if (comparator.compare(reflected, best) < 0) {\n-\n                 // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n+                final RealPointValuePair expanded = evaluateNewSimplex(original, gamma, comparator);\n+                simplex = comparator.compare(expanded, best) < 0 ?\n+                        replaceWorstPoint(original, expanded, comparator) :\n+                        reflectedSimplex;\n                 return;\n-\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+            // Compute the contracted simplex\n+            final RealPointValuePair contracted;\n+            if (comparator.compare(reflected, original[n]) < 0) {\n+                contracted = evaluateNewSimplex(original, sigma, comparator);\n+            } else {\n+                contracted = evaluateNewSimplex(original, rho, comparator);\n             }\n-\n+            simplex = comparator.compare(contracted, best) < 0 ?\n+                    replaceWorstPoint(original, contracted, comparator) :\n+                    shrink(original, comparator);\n         }\n \n+        throw new OptimizationException(\"Maximal number of iterations exceeded: \" + maxIterations);\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: method replaceWorstPoint in class DirectSearchOptimizer cannot be applied to given types;",
    "test_result": "ERROR"
}