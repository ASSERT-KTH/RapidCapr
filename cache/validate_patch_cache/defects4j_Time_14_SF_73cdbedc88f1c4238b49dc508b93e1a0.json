{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        boolean monthChanged = false;\n        int[] newValues = Arrays.copyOf(values, values.length);\n        newValues[fieldIndex] += valueToAdd;\n        int maxIndex = partial.size() - 1;\n        int startIndex = fieldIndex;\n        while (startIndex > 0 && newValues[startIndex] < partial.getFieldType(startIndex).getMinimumValue()) {\n            newValues[startIndex] = partial.getFieldType(startIndex).getMaximumValue();\n            startIndex--;\n            newValues[startIndex]++;\n        }\n        startIndex = fieldIndex;\n        while (startIndex < maxIndex && newValues[startIndex] > partial.getFieldType(startIndex).getMaximumValue()) {\n            newValues[startIndex] = partial.getFieldType(startIndex).getMinimumValue();\n            startIndex++;\n            newValues[startIndex]++;\n        }\n        long instant = 0L;\n        for (int i = 0; i <= maxIndex; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, newValues[i]);\n            if (iChronology.monthOfYear().getFieldDifference(instant, 0L) != 0) {\n                monthChanged = true;\n            }\n        }\n        if (monthChanged) {\n            int lastDay = iChronology.dayOfMonth().getMaximumValue(instant);\n            int dayOfMonth = iChronology.dayOfMonth().get(instant);\n            if (dayOfMonth > lastDay) {\n                instant = iChronology.dayOfMonth().set(instant, lastDay);\n            }\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..2c4c2092 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,49 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        boolean monthChanged = false;\n+        int[] newValues = Arrays.copyOf(values, values.length);\n+        newValues[fieldIndex] += valueToAdd;\n+        int maxIndex = partial.size() - 1;\n+        int startIndex = fieldIndex;\n+        while (startIndex > 0 && newValues[startIndex] < partial.getFieldType(startIndex).getMinimumValue()) {\n+            newValues[startIndex] = partial.getFieldType(startIndex).getMaximumValue();\n+            startIndex--;\n+            newValues[startIndex]++;\n+        }\n+        startIndex = fieldIndex;\n+        while (startIndex < maxIndex && newValues[startIndex] > partial.getFieldType(startIndex).getMaximumValue()) {\n+            newValues[startIndex] = partial.getFieldType(startIndex).getMinimumValue();\n+            startIndex++;\n+            newValues[startIndex]++;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        long instant = 0L;\n+        for (int i = 0; i <= maxIndex; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, newValues[i]);\n+            if (iChronology.monthOfYear().getFieldDifference(instant, 0L) != 0) {\n+                monthChanged = true;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        if (monthChanged) {\n+            int lastDay = iChronology.dayOfMonth().getMaximumValue(instant);\n+            int dayOfMonth = iChronology.dayOfMonth().get(instant);\n+            if (dayOfMonth > lastDay) {\n+                instant = iChronology.dayOfMonth().set(instant, lastDay);\n+            }\n+        }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}