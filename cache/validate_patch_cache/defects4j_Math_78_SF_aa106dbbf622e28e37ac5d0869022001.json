{
    "patch": "public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final int n = (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval);\n        final double h = (t1 - t0) / n;\n\n        double previousT = t0;\n        double previousG = g0;\n        for (int i = 1; i <= n; ++i) {\n            final double tI = interpolator.isForward() ? (t0 + i * h) : (t1 - i * h);\n            interpolator.setInterpolatedTime(tI);\n            final double gI = handler.g(tI, interpolator.getInterpolatedState());\n\n            if (Math.signum(previousG) != Math.signum(gI)) {\n                // Event detected during this substep.\n                increasing = gI >= previousG;\n                final UnivariateRealFunction f = new UnivariateRealFunction() {\n                    @Override\n                    public double value(final double t) throws FunctionEvaluationException {\n                        try {\n                            interpolator.setInterpolatedTime(t);\n                            return handler.g(t, interpolator.getInterpolatedState());\n                        } catch (final DerivativeException de) {\n                            throw new FunctionEvaluationException(de, t);\n                        } catch (final EventException ee) {\n                            throw new FunctionEvaluationException(ee, t);\n                        }\n                    }\n                };\n                final BrentSolver solver = new BrentSolver(convergence);\n                solver.setMaximalIterationCount(maxIterationCount);\n                final double root;\n                if (i == 1) {\n                    // First substep: previousG must be the g value at t0.\n                    if (startingOnEvent(previousG, gI)) {\n                        root = solver.solve(f, t0, tI);\n                    } else {\n                        root = findRootNearEvent(f, t0, tI, previousT, tI, previousG);\n                    }\n                } else {\n                    // Not the first substep.\n                    if (previousRoot == 0.0 || previousRoot != previousT) {\n                        // Last time there was no event at t0.\n                        root = solver.solve(f, previousT, tI);\n                    } else {\n                        // Last time an event was detected at t0, we need to search from the other end.\n                        root = solver.solve(f, tI, previousT);\n                    }\n                }\n                final double dt = Math.abs(root - previousT);\n                if (dt <= convergence) {\n                    // Another event at almost the same time (less than convergence apart).\n                    previousT = tI;\n                    previousG = gI;\n                    continue;\n                }\n                final double dRegistered = Math.abs(root - previousRoot);\n                if (!Double.isNaN(previousRoot) && dRegistered < convergence) {\n                    // Not the first step, there was an event earlier (previousRoot).\n                    if (Math.signum(previousRoot - tI) == Math.signum(root - tI)) {\n                        // Another event registered on the same side of this substep.\n                        previousT = tI;\n                        previousG = gI;\n                        continue;\n                    }\n                }\n                if (previousEventOccurred != null && pendingEvent) {\n                    // There was a pending event.\n                    if (Math.abs(pendingEventTime - root) < convergence) {\n                        // The pending event occurred exactly at the detected event.\n                        pendingEvent = false;\n                        pendingEventTime = Double.NaN;\n                        return false;\n                    } else if (Math.abs(pendingEventTime - tI) < convergence) {\n                        // The detected event is already the pending event.\n                        previousRoot = root;\n                        previousEventOccurred = true;\n                        break;\n                    }\n                    // A different event occurred before the pending event was detected. Continue to the next step.\n                    previousT = tI;\n                    previousG = gI;\n                    continue;\n                }\n                if (Math.abs(t1 - root) <= convergence) {\n                    // The detected event occurred at the end of the step.\n                    previousEventOccurred = true;\n                    break;\n                }\n                // A new event occurs during this step.\n                pendingEvent = true;\n                pendingEventTime = root;\n                previousRoot = root;\n                previousEventOccurred = true;\n                return true;\n            }\n            previousT = tI;\n            previousG = gI;\n        }\n        // No event detected during this step.\n        pendingEvent = false;\n        pendingEventTime = Double.NaN;\n        previousRoot = Double.NaN;\n        previousEventOccurred = null;\n        return false;\n    } catch (FunctionEvaluationException fee) {\n        if (fee.getCause() instanceof DerivativeException) {\n            throw (DerivativeException) fee.getCause();\n        }\n        if (fee.getCause() instanceof EventException) {\n            throw (EventException) fee.getCause();\n        }\n        throw new EventException(fee);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/events/EventState.java b/src/main/java/org/apache/commons/math/ode/events/EventState.java\nindex 50060650e..f8db6d5aa 100644\n--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java\n@@ -164,103 +164,125 @@ public class EventState {\n      * cannot be evaluated\n      * @exception ConvergenceException if an event cannot be located\n      */\n-    public boolean evaluateStep(final StepInterpolator interpolator)\n+public boolean evaluateStep(final StepInterpolator interpolator)\n         throws DerivativeException, EventException, ConvergenceException {\n \n-        try {\n-\n-            forward = interpolator.isForward();\n-            final double t1 = interpolator.getCurrentTime();\n-            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n-            final double h  = (t1 - t0) / n;\n-\n-            double ta = t0;\n-            double ga = g0;\n-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n-            for (int i = 0; i < n; ++i) {\n-\n-                // evaluate handler value at the end of the substep\n-                tb += h;\n-                interpolator.setInterpolatedTime(tb);\n-                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n-\n-                // check events occurrence\n-                if (g0Positive ^ (gb >= 0)) {\n-                    // there is a sign change: an event is expected during this step\n-\n-                        // this is a corner case:\n-                        // - there was an event near ta,\n-                        // - there is another event between ta and tb\n-                        // - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n-                        // this implies that the real sign of ga is the same as gb, so we need to slightly\n-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain\n-                        // about bracketing\n-                            // this should never happen\n-                         \n-                    // variation direction, with respect to the integration direction\n-                    increasing = gb >= ga;\n-\n-                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n-                        public double value(final double t) throws FunctionEvaluationException {\n-                            try {\n-                                interpolator.setInterpolatedTime(t);\n-                                return handler.g(t, interpolator.getInterpolatedState());\n-                            } catch (DerivativeException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            } catch (EventException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            }\n+    try {\n+\n+        forward = interpolator.isForward();\n+        final double t1 = interpolator.getCurrentTime();\n+        final int n = (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval);\n+        final double h = (t1 - t0) / n;\n+\n+        double previousT = t0;\n+        double previousG = g0;\n+        for (int i = 1; i <= n; ++i) {\n+            final double tI = interpolator.isForward() ? (t0 + i * h) : (t1 - i * h);\n+            interpolator.setInterpolatedTime(tI);\n+            final double gI = handler.g(tI, interpolator.getInterpolatedState());\n+\n+            if (Math.signum(previousG) != Math.signum(gI)) {\n+                // Event detected during this substep.\n+                increasing = gI >= previousG;\n+                final UnivariateRealFunction f = new UnivariateRealFunction() {\n+                    @Override\n+                    public double value(final double t) throws FunctionEvaluationException {\n+                        try {\n+                            interpolator.setInterpolatedTime(t);\n+                            return handler.g(t, interpolator.getInterpolatedState());\n+                        } catch (final DerivativeException de) {\n+                            throw new FunctionEvaluationException(de, t);\n+                        } catch (final EventException ee) {\n+                            throw new FunctionEvaluationException(ee, t);\n                         }\n-                    };\n-                    final BrentSolver solver = new BrentSolver();\n-                    solver.setAbsoluteAccuracy(convergence);\n-                    solver.setMaximalIterationCount(maxIterationCount);\n-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n-                    if ((Math.abs(root - ta) <= convergence) &&\n-                         (Math.abs(root - previousEventTime) <= convergence)) {\n-                        // we have either found nothing or found (again ?) a past event, we simply ignore it\n-                        ta = tb;\n-                        ga = gb;\n-                    } else if (Double.isNaN(previousEventTime) ||\n-                               (Math.abs(previousEventTime - root) > convergence)) {\n-                        pendingEventTime = root;\n-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n-                            // we were already waiting for this event which was\n-                            // found during a previous call for a step that was\n-                            // rejected, this step must now be accepted since it\n-                            // properly ends exactly at the event occurrence\n-                            return false;\n-                        }\n-                        // either we were not waiting for the event or it has\n-                        // moved in such a way the step cannot be accepted\n-                        pendingEvent = true;\n-                        return true;\n                     }\n-\n+                };\n+                final BrentSolver solver = new BrentSolver(convergence);\n+                solver.setMaximalIterationCount(maxIterationCount);\n+                final double root;\n+                if (i == 1) {\n+                    // First substep: previousG must be the g value at t0.\n+                    if (startingOnEvent(previousG, gI)) {\n+                        root = solver.solve(f, t0, tI);\n+                    } else {\n+                        root = findRootNearEvent(f, t0, tI, previousT, tI, previousG);\n+                    }\n                 } else {\n-                    // no sign change: there is no event for now\n-                    ta = tb;\n-                    ga = gb;\n+                    // Not the first substep.\n+                    if (previousRoot == 0.0 || previousRoot != previousT) {\n+                        // Last time there was no event at t0.\n+                        root = solver.solve(f, previousT, tI);\n+                    } else {\n+                        // Last time an event was detected at t0, we need to search from the other end.\n+                        root = solver.solve(f, tI, previousT);\n+                    }\n                 }\n-\n-            }\n-\n-            // no event during the whole step\n-            pendingEvent     = false;\n-            pendingEventTime = Double.NaN;\n-            return false;\n-\n-        } catch (FunctionEvaluationException e) {\n-            final Throwable cause = e.getCause();\n-            if ((cause != null) && (cause instanceof DerivativeException)) {\n-                throw (DerivativeException) cause;\n-            } else if ((cause != null) && (cause instanceof EventException)) {\n-                throw (EventException) cause;\n+                final double dt = Math.abs(root - previousT);\n+                if (dt <= convergence) {\n+                    // Another event at almost the same time (less than convergence apart).\n+                    previousT = tI;\n+                    previousG = gI;\n+                    continue;\n+                }\n+                final double dRegistered = Math.abs(root - previousRoot);\n+                if (!Double.isNaN(previousRoot) && dRegistered < convergence) {\n+                    // Not the first step, there was an event earlier (previousRoot).\n+                    if (Math.signum(previousRoot - tI) == Math.signum(root - tI)) {\n+                        // Another event registered on the same side of this substep.\n+                        previousT = tI;\n+                        previousG = gI;\n+                        continue;\n+                    }\n+                }\n+                if (previousEventOccurred != null && pendingEvent) {\n+                    // There was a pending event.\n+                    if (Math.abs(pendingEventTime - root) < convergence) {\n+                        // The pending event occurred exactly at the detected event.\n+                        pendingEvent = false;\n+                        pendingEventTime = Double.NaN;\n+                        return false;\n+                    } else if (Math.abs(pendingEventTime - tI) < convergence) {\n+                        // The detected event is already the pending event.\n+                        previousRoot = root;\n+                        previousEventOccurred = true;\n+                        break;\n+                    }\n+                    // A different event occurred before the pending event was detected. Continue to the next step.\n+                    previousT = tI;\n+                    previousG = gI;\n+                    continue;\n+                }\n+                if (Math.abs(t1 - root) <= convergence) {\n+                    // The detected event occurred at the end of the step.\n+                    previousEventOccurred = true;\n+                    break;\n+                }\n+                // A new event occurs during this step.\n+                pendingEvent = true;\n+                pendingEventTime = root;\n+                previousRoot = root;\n+                previousEventOccurred = true;\n+                return true;\n             }\n-            throw new EventException(e);\n+            previousT = tI;\n+            previousG = gI;\n         }\n-\n+        // No event detected during this step.\n+        pendingEvent = false;\n+        pendingEventTime = Double.NaN;\n+        previousRoot = Double.NaN;\n+        previousEventOccurred = null;\n+        return false;\n+    } catch (FunctionEvaluationException fee) {\n+        if (fee.getCause() instanceof DerivativeException) {\n+            throw (DerivativeException) fee.getCause();\n+        }\n+        if (fee.getCause() instanceof EventException) {\n+            throw (EventException) fee.getCause();\n+        }\n+        throw new EventException(fee);\n     }\n+}\n \n     /** Get the occurrence time of the event triggered in the current\n      * step.",
    "result_reason": "error: no suitable constructor found for BrentSolver(double)",
    "test_result": "ERROR"
}