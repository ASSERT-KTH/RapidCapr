{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n    if (size == 1 && elementPairs.get(0) instanceof Literal) {\n        return new PeriodFormatter(null, null);\n    } \n\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        List<Object> remainingPairs = elementPairs.subList(1, size);\n\n        int nextSeparatorIndex = -1;\n        for (int i = 0; i < remainingPairs.size(); i++) {\n            if (remainingPairs.get(i) instanceof Separator) {\n                nextSeparatorIndex = i;\n                break;\n            }\n        }\n\n        PeriodPrinter printer = null;\n        PeriodParser parser = null;\n\n        if (nextSeparatorIndex != -1) {\n            List<Object> firstPart = remainingPairs.subList(0, nextSeparatorIndex);\n            List<Object> secondPart = remainingPairs.subList(nextSeparatorIndex, remainingPairs.size());\n\n            PeriodFormatter formatter1 = toFormatter(firstPart, notPrinter, notParser);\n            PeriodFormatter formatter2 = toFormatter(secondPart, notPrinter, notParser);\n            \n            if (formatter1.getPrinter() != null && formatter2.getParser() != null) {\n                sep = sep.finish(formatter1.getPrinter(), formatter2.getParser());\n            }\n\n            printer = formatter1.getPrinter() != null ? formatter1.getPrinter() : formatter2.getPrinter();\n            parser = formatter1.getParser() != null ? formatter1.getParser() : formatter2.getParser();\n        } else {\n            PeriodFormatter formatter = toFormatter(remainingPairs, notPrinter, notParser);\n            printer = formatter.getPrinter();\n            parser = formatter.getParser();\n\n            if (sep != null && printer != null && parser != null) {\n                sep = sep.finish(printer, parser);\n            }\n        }\n\n        return new PeriodFormatter(sep, sep).withPrinter(printer).withParser(parser);\n    }\n\n    Object[] comp = createComposite(elementPairs);\n    final PeriodPrinter printer;\n    final PeriodParser parser;\n    if (notPrinter) {\n        printer = null;\n        parser = (PeriodParser) comp[1];\n    } else if (notParser) {\n        printer = (PeriodPrinter) comp[0];\n        parser = null;\n    } else {\n        printer = (PeriodPrinter) comp[0];\n        parser = (PeriodParser) comp[1];\n    }\n    return new PeriodFormatter(null, null).withPrinter(printer).withParser(parser);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..7b600955 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,72 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+    if (size == 1 && elementPairs.get(0) instanceof Literal) {\n+        return new PeriodFormatter(null, null);\n+    } \n+\n+    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        List<Object> remainingPairs = elementPairs.subList(1, size);\n+\n+        int nextSeparatorIndex = -1;\n+        for (int i = 0; i < remainingPairs.size(); i++) {\n+            if (remainingPairs.get(i) instanceof Separator) {\n+                nextSeparatorIndex = i;\n+                break;\n+            }\n+        }\n+\n+        PeriodPrinter printer = null;\n+        PeriodParser parser = null;\n+\n+        if (nextSeparatorIndex != -1) {\n+            List<Object> firstPart = remainingPairs.subList(0, nextSeparatorIndex);\n+            List<Object> secondPart = remainingPairs.subList(nextSeparatorIndex, remainingPairs.size());\n+\n+            PeriodFormatter formatter1 = toFormatter(firstPart, notPrinter, notParser);\n+            PeriodFormatter formatter2 = toFormatter(secondPart, notPrinter, notParser);\n+            \n+            if (formatter1.getPrinter() != null && formatter2.getParser() != null) {\n+                sep = sep.finish(formatter1.getPrinter(), formatter2.getParser());\n+            }\n+\n+            printer = formatter1.getPrinter() != null ? formatter1.getPrinter() : formatter2.getPrinter();\n+            parser = formatter1.getParser() != null ? formatter1.getParser() : formatter2.getParser();\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            PeriodFormatter formatter = toFormatter(remainingPairs, notPrinter, notParser);\n+            printer = formatter.getPrinter();\n+            parser = formatter.getParser();\n+\n+            if (sep != null && printer != null && parser != null) {\n+                sep = sep.finish(printer, parser);\n+            }\n         }\n+\n+        return new PeriodFormatter(sep, sep).withPrinter(printer).withParser(parser);\n+    }\n+\n+    Object[] comp = createComposite(elementPairs);\n+    final PeriodPrinter printer;\n+    final PeriodParser parser;\n+    if (notPrinter) {\n+        printer = null;\n+        parser = (PeriodParser) comp[1];\n+    } else if (notParser) {\n+        printer = (PeriodPrinter) comp[0];\n+        parser = null;\n+    } else {\n+        printer = (PeriodPrinter) comp[0];\n+        parser = (PeriodParser) comp[1];\n     }\n+    return new PeriodFormatter(null, null).withPrinter(printer).withParser(parser);\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}