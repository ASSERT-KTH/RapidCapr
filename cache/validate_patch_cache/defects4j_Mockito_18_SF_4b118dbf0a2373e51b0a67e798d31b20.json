{
    "patch": "public static Map<String, Integer> countCharacters(String inputString) {\n    Map<String, Integer> charCountMap = new HashMap<>();\n    char[] strArray = inputString.toCharArray();\n    for (char c : strArray) {\n      String charStr = String.valueOf(c);\n      if (charCountMap.containsKey(charStr)) {\n        int count = charCountMap.get(charStr);\n        charCountMap.put(charStr, count + 1);\n      } else {\n        charCountMap.put(charStr, 1);\n      }\n    }\n    return charCountMap;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..e8f38675d 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,20 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Map<String, Integer> countCharacters(String inputString) {\n+    Map<String, Integer> charCountMap = new HashMap<>();\n+    char[] strArray = inputString.toCharArray();\n+    for (char c : strArray) {\n+      String charStr = String.valueOf(c);\n+      if (charCountMap.containsKey(charStr)) {\n+        int count = charCountMap.get(charStr);\n+        charCountMap.put(charStr, count + 1);\n+      } else {\n+        charCountMap.put(charStr, 1);\n+      }\n+    }\n+    return charCountMap;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}