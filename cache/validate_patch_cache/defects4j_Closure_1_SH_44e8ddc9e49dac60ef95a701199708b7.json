{
    "patch": "    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\n    // To remove only the unused function args, we'll start by flagging\n    // all function args, and unflagging ones that we visit.\n    Set<String> flagged = new HashSet<>();\n    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n      flagged.add(arg.getString());\n    }\n\n    // Build a map of all vars that are referenced by something in the function.\n    Map<Node, Var> allVars = getAllVarsDeclaredInFunction(fnScope);\n    allVars.putAll(getAllVarsReferencedInFunction(fnScope));\n\n    // Go through all variables, and unflag those that are references in the function body.\n    for (Var referencedVar : allVars.values()) {\n      if (referenced.contains(referencedVar)) {\n        for (String name : referencedVar.getNameNode().getQualifiedName().split(\"\\\\.\")) {\n         flagged.remove(name);\n        }\n      }\n    }\n\n    // If call-sites need to be modified, then we need to optimize those rather than stripping\n    // function args (they may be needed by some, but not all call-sites).\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n      return;\n    }\n\n    // Now remove all args that are still flagged.\n    while (!flagged.isEmpty()) {\n      String argName = Iterables.getLast(flagged);\n      flagged.remove(argName);\n\n      Node paramNode = getParamNodeByName(argList, argName);\n      Preconditions.checkNotNull(\n          paramNode, \"Could not find parameter : %s \", argName);\n\n      argList.removeChild(paramNode);\n      compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..95b0f3e5 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,46 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+    // To remove only the unused function args, we'll start by flagging\n+    // all function args, and unflagging ones that we visit.\n+    Set<String> flagged = new HashSet<>();\n+    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+      flagged.add(arg.getString());\n+    }\n+\n+    // Build a map of all vars that are referenced by something in the function.\n+    Map<Node, Var> allVars = getAllVarsDeclaredInFunction(fnScope);\n+    allVars.putAll(getAllVarsReferencedInFunction(fnScope));\n+\n+    // Go through all variables, and unflag those that are references in the function body.\n+    for (Var referencedVar : allVars.values()) {\n+      if (referenced.contains(referencedVar)) {\n+        for (String name : referencedVar.getNameNode().getQualifiedName().split(\"\\\\.\")) {\n+         flagged.remove(name);\n+        }\n+      }\n+    }\n+\n+    // If call-sites need to be modified, then we need to optimize those rather than stripping\n+    // function args (they may be needed by some, but not all call-sites).\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+      return;\n+    }\n+\n+    // Now remove all args that are still flagged.\n+    while (!flagged.isEmpty()) {\n+      String argName = Iterables.getLast(flagged);\n+      flagged.remove(argName);\n+\n+      Node paramNode = getParamNodeByName(argList, argName);\n+      Preconditions.checkNotNull(\n+          paramNode, \"Could not find parameter : %s \", argName);\n+\n+      argList.removeChild(paramNode);\n+      compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}