{
    "patch": "  private static boolean isReduceableFunctionExpression(Node n) {\n    if (NodeUtil.isFunctionExpression(n)) {\n      return !NodeUtil.isNameDeclaration(n.getParent()) && !NodeUtil.isClassDeclaration(n.getParent());\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..40ff63ec 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,10 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+    if (NodeUtil.isFunctionExpression(n)) {\n+      return !NodeUtil.isNameDeclaration(n.getParent()) && !NodeUtil.isClassDeclaration(n.getParent());\n+    }\n+    return false;\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}