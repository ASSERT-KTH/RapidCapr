{
    "patch": "      boolean removedArgs = false;\n      for (Node child : argList.children()) {\n        String paramName = child.getString();\n        Var var = fnScope.getVar(paramName);\n        if (!referenced.contains(var)) {\n          argList.removeChild(child);\n          compiler.reportCodeChange();\n          removedArgs = true;\n        } else if (removedArgs) {\n          // We've already removed some arguments,\n          // so don't preserve the style of parameters here.\n          child.setToken(Token.EMPTY);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..ab7380a5 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,18 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      boolean removedArgs = false;\n+      for (Node child : argList.children()) {\n+        String paramName = child.getString();\n+        Var var = fnScope.getVar(paramName);\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(child);\n+          compiler.reportCodeChange();\n+          removedArgs = true;\n+        } else if (removedArgs) {\n+          // We've already removed some arguments,\n+          // so don't preserve the style of parameters here.\n+          child.setToken(Token.EMPTY);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}