{
    "patch": "        double x0 = min;\n        double y0 = yMin;\n        double x1 = initial;\n        double y1 = yInitial;\n        double x2 = max;\n        double y2 = yMax;\n\n        // ensure endpoints bracket the root\n        if ((y0 > 0 && y2 > 0) || (y0 < 0 && y2 < 0)) {\n            throw new IllegalArgumentException(\"Function values at endpoints do not have different signs.  Endpoints: [\"\n                    + x0 + \",\" + x2 + \"], Values: [\" + y0 + \",\" + y2 + \"]\");\n        }\n\n        // if one endpoint has zero function value, return it\n        if (Math.abs(y0) <= functionValueAccuracy) {\n            setResult(x0, 0);\n            return result;\n        }\n        if (Math.abs(y2) <= functionValueAccuracy) {\n            setResult(x2, 0);\n            return result;\n        }\n\n        // if initial guess is within tolerance, return it\n        if (Math.abs(y1) <= functionValueAccuracy) {\n            setResult(x1, 0);\n            return result;\n        }\n\n        // use linear interpolation if bracket is startegicall small\n        if (Math.abs(y2 - y1) < Math.abs(y0 - y1)) {\n            return solveLinear(f, x2, y2, x1, y1, accurateRoot);\n        }\n        if (Math.abs(y1 - y0) < Math.abs(y2 - y0)) {\n            return solveLinear(f, x1, y1, x0, y0, accurateRoot);\n        }\n\n        // full Brent algorithm starting with provided initial guess\n        return solve(f, x0, y0, x2, y2, x1, y1);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..70d6c8b38 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,45 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+        double x0 = min;\n+        double y0 = yMin;\n+        double x1 = initial;\n+        double y1 = yInitial;\n+        double x2 = max;\n+        double y2 = yMax;\n+\n+        // ensure endpoints bracket the root\n+        if ((y0 > 0 && y2 > 0) || (y0 < 0 && y2 < 0)) {\n+            throw new IllegalArgumentException(\"Function values at endpoints do not have different signs.  Endpoints: [\"\n+                    + x0 + \",\" + x2 + \"], Values: [\" + y0 + \",\" + y2 + \"]\");\n+        }\n+\n+        // if one endpoint has zero function value, return it\n+        if (Math.abs(y0) <= functionValueAccuracy) {\n+            setResult(x0, 0);\n+            return result;\n+        }\n+        if (Math.abs(y2) <= functionValueAccuracy) {\n+            setResult(x2, 0);\n+            return result;\n+        }\n+\n+        // if initial guess is within tolerance, return it\n+        if (Math.abs(y1) <= functionValueAccuracy) {\n+            setResult(x1, 0);\n+            return result;\n+        }\n+\n+        // use linear interpolation if bracket is startegicall small\n+        if (Math.abs(y2 - y1) < Math.abs(y0 - y1)) {\n+            return solveLinear(f, x2, y2, x1, y1, accurateRoot);\n+        }\n+        if (Math.abs(y1 - y0) < Math.abs(y2 - y0)) {\n+            return solveLinear(f, x1, y1, x0, y0, accurateRoot);\n+        }\n+\n+        // full Brent algorithm starting with provided initial guess\n+        return solve(f, x0, y0, x2, y2, x1, y1);\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}