{
    "patch": "            for(int i=0; i<input.length(); i++) {\n                char c = input.charAt(i);\n                if(c == ESCAPE_CHAR) {\n                    if(input.length() > i + 1) {\n                        char d = input.charAt(i + 1);\n                        if(d == 'u') {\n                            if(input.length() > i + 5) {\n                                char h1 = input.charAt(i + 2);\n                                char h2 = input.charAt(i + 3);\n                                char h3 = input.charAt(i + 4);\n                                char h4 = input.charAt(i + 5);\n                                int codepoint = hexToInt(h1, h2, h3, h4);\n                                output.write(codepoint);\n                                i += 5;\n                            } else {\n                                success = false;\n                                System.err.println(\"Malformed \\\\uxxxx encoding.\");\n                            }\n                        } else {\n                            output.write(escapeESCAPED(d));\n                            i++;\n                        }\n                    } else {\n                        throw new IllegalArgumentException(\"Invalid UTF8 encoding.\");\n                    }\n                } else {\n                    output.write(c);\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}