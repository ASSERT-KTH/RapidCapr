{
    "patch": "long maxMillis = Long.MAX_VALUE;\nif (iZone != null && iOffset != 0) {\n    int offset = iZone.getOffsetFromLocal(maxMillis);\n    maxMillis -= offset < 0 ? Long.MAX_VALUE + offset + 1 : offset;\n}\n\nfor (int i = 0; i < count; i++) {\n    SavedField save = savedFields[i];\n    try {\n        long next = save.set(millis, resetFields);\n        if (next != millis) {\n            millis = next;\n\n            // Check millis overflow\n            if (millis < iMillis || millis > maxMillis) {\n                throw new IllegalArgumentException(\"Value \" + millis + \" is out of bounds for \" + text);\n            }\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n        }\n        throw e;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..51215889 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,31 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+long maxMillis = Long.MAX_VALUE;\n+if (iZone != null && iOffset != 0) {\n+    int offset = iZone.getOffsetFromLocal(maxMillis);\n+    maxMillis -= offset < 0 ? Long.MAX_VALUE + offset + 1 : offset;\n+}\n+\n+for (int i = 0; i < count; i++) {\n+    SavedField save = savedFields[i];\n+    try {\n+        long next = save.set(millis, resetFields);\n+        if (next != millis) {\n+            millis = next;\n+\n+            // Check millis overflow\n+            if (millis < iMillis || millis > maxMillis) {\n+                throw new IllegalArgumentException(\"Value \" + millis + \" is out of bounds for \" + text);\n+            }\n+        }\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n+        }\n+        throw e;\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: HourM1a expected:<-1> but was:<0>",
    "test_result": "FAIL"
}