{
    "patch": "public Fraction reduce() {\n    int num = numerator;\n    int den = denominator;\n    if (num == 0) {\n        return Fraction.ZERO;\n    }\n    int sign = (num < 0) ? -1 : 1;\n    int gcd = greatestCommonDivisor(Math.abs(num), Math.abs(den));\n    num /= gcd;\n    den /= gcd;\n    if (num != 0 && den < 0) {\n        num = -num;\n        den = -den;\n    }\n    return new Fraction(sign * num, den);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..a8f7ccda 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,13 +462,22 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n-        }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n-    }\n+public Fraction reduce() {\n+    int num = numerator;\n+    int den = denominator;\n+    if (num == 0) {\n+        return Fraction.ZERO;\n+    }\n+    int sign = (num < 0) ? -1 : 1;\n+    int gcd = greatestCommonDivisor(Math.abs(num), Math.abs(den));\n+    num /= gcd;\n+    den /= gcd;\n+    if (num != 0 && den < 0) {\n+        num = -num;\n+        den = -den;\n+    }\n+    return new Fraction(sign * num, den);\n+}\n \n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>",
    "result_reason": "junit.framework.AssertionFailedError: expected:<-2> but was:<2>",
    "test_result": "FAIL"
}