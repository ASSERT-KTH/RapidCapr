{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        long newMillis = savedFields[i].set(millis, resetFields);\n        if (millis != newMillis && i + 1 < count) {\n            DateTimeField nextField = savedFields[i + 1].iField;\n            // We need to ensure that we're not jumping months - if we are,\n            // it's possible for the resulting date to be out by one month.\n            if (DateTimeFieldType.monthOfYear().equals(nextField.getType())) {\n                int addedMonths = (int) (newMillis - millis) / (30 * 24 * 60 * 60 * 1000L);\n                if (addedMonths >= 1 && addedMonths <= 2) {\n                    millis = savedFields[i].set(millis + (30 * 24 * 60 * 60 * 1000L), resetFields);\n                } else if (addedMonths <= -1 && addedMonths >= -2) {\n                    millis = savedFields[i].set(millis - (30 * 24 * 60 * 60 * 1000L), resetFields);\n                } else {\n                    millis = newMillis;\n                }\n            } else {\n                millis = newMillis;\n            }\n        } else {\n            millis = newMillis;\n        }\n    }\n} catch (IllegalFieldValueException ifve) {\n    if (text != null) {\n        ifve.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n    }\n    throw ifve;\n} catch (RuntimeException ex) {\n    if (text != null) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"Cannot parse \\\"\");\n        sb.append(text);\n        sb.append(\"\\\": \");\n        sb.append(ex.getMessage());\n        throw new IllegalArgumentException(sb.toString(), ex);\n    }\n    throw ex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..e8917f5e 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,45 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        long newMillis = savedFields[i].set(millis, resetFields);\n+        if (millis != newMillis && i + 1 < count) {\n+            DateTimeField nextField = savedFields[i + 1].iField;\n+            // We need to ensure that we're not jumping months - if we are,\n+            // it's possible for the resulting date to be out by one month.\n+            if (DateTimeFieldType.monthOfYear().equals(nextField.getType())) {\n+                int addedMonths = (int) (newMillis - millis) / (30 * 24 * 60 * 60 * 1000L);\n+                if (addedMonths >= 1 && addedMonths <= 2) {\n+                    millis = savedFields[i].set(millis + (30 * 24 * 60 * 60 * 1000L), resetFields);\n+                } else if (addedMonths <= -1 && addedMonths >= -2) {\n+                    millis = savedFields[i].set(millis - (30 * 24 * 60 * 60 * 1000L), resetFields);\n+                } else {\n+                    millis = newMillis;\n+                }\n+            } else {\n+                millis = newMillis;\n+            }\n+        } else {\n+            millis = newMillis;\n+        }\n+    }\n+} catch (IllegalFieldValueException ifve) {\n+    if (text != null) {\n+        ifve.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+    }\n+    throw ifve;\n+} catch (RuntimeException ex) {\n+    if (text != null) {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"Cannot parse \\\"\");\n+        sb.append(text);\n+        sb.append(\"\\\": \");\n+        sb.append(ex.getMessage());\n+        throw new IllegalArgumentException(sb.toString(), ex);\n+    }\n+    throw ex;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}