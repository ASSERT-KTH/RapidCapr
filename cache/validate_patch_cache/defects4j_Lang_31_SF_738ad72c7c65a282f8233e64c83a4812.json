{
    "patch": "public static boolean containsAny(CharSequence str, char[] searchChars) {\n    if (str == null || str.length() == 0 || searchChars == null || searchChars.length == 0) {\n        return false;\n    }\n    int strLength = str.length();\n    int searchCharsLength = searchChars.length;\n    int strLast = strLength - 1;\n    int searchCharsLast = searchCharsLength - 1;\n    for (int i = 0; i < strLength; i++) {\n        char ch = str.charAt(i);\n        if (searchCharsLast < Character.MAX_VALUE) {\n            for (int j = 0; j < searchCharsLength; j++) {\n                if (searchChars[j] == ch) {\n                    if (Character.isHighSurrogate(ch)) {\n                        if (j == searchCharsLength - 1) {\n                            // Missing low surrogate, fine, like String.indexOf().\n                            return false;\n                        }\n                        if (i < strLast && searchChars[j + 1] == str.charAt(i + 1)) {\n                            return true;\n                        }\n                    } else {\n                        return true;\n                    }\n                }\n            }\n        } else {\n            if (Character.isHighSurrogate(ch)) {\n                if (i < strLast) {\n                    int codepoint = Character.toCodePoint(ch, str.charAt(++i));\n                    for (int j = 0; j <= searchCharsLast; j++) {\n                        if (searchChars[j] == codepoint) {\n                            return true;\n                        }\n                    }\n                }\n            } else {\n                for (int j = 0; j <= searchCharsLast; j++) {\n                    if (searchChars[j] == ch) {\n                        return true;\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..f00cbcd1 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,53 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(CharSequence str, char[] searchChars) {\n+    if (str == null || str.length() == 0 || searchChars == null || searchChars.length == 0) {\n+        return false;\n+    }\n+    int strLength = str.length();\n+    int searchCharsLength = searchChars.length;\n+    int strLast = strLength - 1;\n+    int searchCharsLast = searchCharsLength - 1;\n+    for (int i = 0; i < strLength; i++) {\n+        char ch = str.charAt(i);\n+        if (searchCharsLast < Character.MAX_VALUE) {\n+            for (int j = 0; j < searchCharsLength; j++) {\n+                if (searchChars[j] == ch) {\n+                    if (Character.isHighSurrogate(ch)) {\n+                        if (j == searchCharsLength - 1) {\n+                            // Missing low surrogate, fine, like String.indexOf().\n+                            return false;\n+                        }\n+                        if (i < strLast && searchChars[j + 1] == str.charAt(i + 1)) {\n+                            return true;\n+                        }\n+                    } else {\n+                        return true;\n+                    }\n+                }\n+            }\n+        } else {\n+            if (Character.isHighSurrogate(ch)) {\n+                if (i < strLast) {\n+                    int codepoint = Character.toCodePoint(ch, str.charAt(++i));\n+                    for (int j = 0; j <= searchCharsLast; j++) {\n+                        if (searchChars[j] == codepoint) {\n+                            return true;\n+                        }\n+                    }\n+                }\n+            } else {\n+                for (int j = 0; j <= searchCharsLast; j++) {\n+                    if (searchChars[j] == ch) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}