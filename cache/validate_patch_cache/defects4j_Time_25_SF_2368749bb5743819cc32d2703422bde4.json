{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n\n    // if the offset does not change, we use it\n    if (getOffset(instantLocal - offsetLocal) == offsetLocal) {\n        return offsetLocal;\n    }\n    \n    // if instantLocal is in a spring DST interval, return the smallest valid offset\n    if (getStandardOffset(instantLocal) > offsetLocal) {\n        int smallestOffset = offsetLocal;\n        for(long instant = instantLocal - 1; getOffset(instant) > offsetLocal; instant--) {\n            int offset = getOffset(instant);\n            if (offset < smallestOffset)\n                smallestOffset = offset;\n        }\n        return smallestOffset;\n    }\n    \n    // if instantLocal is in a fall DST interval, return the largest valid offset\n    if (offsetLocal > getStandardOffset(instantLocal)) {\n        int largestOffset = offsetLocal;\n        for(long instant = instantLocal + 1; getOffset(instant) == offsetLocal; instant++) {\n            int offset = getOffset(instant);\n            if (offset > largestOffset)\n                largestOffset = offset;\n        }\n        return largestOffset;\n    }\n\n    // adjust instantLocal using the initial offset estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n\n    if (offsetLocal != offsetAdjusted) {\n        if (offsetLocal > offsetAdjusted) {\n            long prevLocal = previousTransition(instantAdjusted);\n            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n            if (prevLocal != prevAdjusted) {\n                return offsetLocal;\n            }\n        } else if (offsetLocal < offsetAdjusted) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal != nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n    }\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..f46ba55d 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,58 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    final int offsetLocal = getOffset(instantLocal);\n+\n+    // if the offset does not change, we use it\n+    if (getOffset(instantLocal - offsetLocal) == offsetLocal) {\n+        return offsetLocal;\n+    }\n+    \n+    // if instantLocal is in a spring DST interval, return the smallest valid offset\n+    if (getStandardOffset(instantLocal) > offsetLocal) {\n+        int smallestOffset = offsetLocal;\n+        for(long instant = instantLocal - 1; getOffset(instant) > offsetLocal; instant--) {\n+            int offset = getOffset(instant);\n+            if (offset < smallestOffset)\n+                smallestOffset = offset;\n+        }\n+        return smallestOffset;\n+    }\n+    \n+    // if instantLocal is in a fall DST interval, return the largest valid offset\n+    if (offsetLocal > getStandardOffset(instantLocal)) {\n+        int largestOffset = offsetLocal;\n+        for(long instant = instantLocal + 1; getOffset(instant) == offsetLocal; instant++) {\n+            int offset = getOffset(instant);\n+            if (offset > largestOffset)\n+                largestOffset = offset;\n+        }\n+        return largestOffset;\n+    }\n+\n+    // adjust instantLocal using the initial offset estimate and recalc the offset\n+    final long instantAdjusted = instantLocal - offsetLocal;\n+    final int offsetAdjusted = getOffset(instantAdjusted);\n+\n+    if (offsetLocal != offsetAdjusted) {\n+        if (offsetLocal > offsetAdjusted) {\n+            long prevLocal = previousTransition(instantAdjusted);\n+            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+            if (prevLocal != prevAdjusted) {\n+                return offsetLocal;\n+            }\n+        } else if (offsetLocal < offsetAdjusted) {\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            if (nextLocal != nextAdjusted) {\n+                return offsetLocal;\n             }\n         }\n-        return offsetAdjusted;\n     }\n+    return offsetAdjusted;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}