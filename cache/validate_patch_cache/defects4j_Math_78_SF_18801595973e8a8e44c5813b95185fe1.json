{
    "patch": "import org.apache.commons.math3.analysis.UnivariateFunction;\nimport org.apache.commons.math3.analysis.solvers.BisectionSolver;\nimport org.apache.commons.math3.analysis.solvers.BrentSolver;\nimport org.apache.commons.math3.analysis.solvers.UnivariateSolver;\nimport org.apache.commons.math3.exception.ConvergenceException;\nimport org.apache.commons.math3.exception.DerivativeException;\nimport org.apache.commons.math3.exception.EventException;\nimport org.apache.commons.math3.exception.MathIllegalStateException;\nimport org.apache.commons.math3.exception.MathRuntimeException;\nimport org.apache.commons.math3.exception.util.LocalizedFormats;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathUtils;\nimport org.apache.commons.math3.util.Precision;\n\npublic boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h = (t1 - t0) / n;\n\n        double ta = t0;\n        double ga = g0;\n        double tb = t0 + (forward ? convergence : -convergence);\n        for (int i = 0; i < n; ++i) {\n\n            // evaluate handler value at the end of the substep\n            tb += h;\n            interpolator.setInterpolatedTime(tb);\n            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n            // check events occurrence\n            if (MathUtils.sign(ga) != MathUtils.sign(gb)) {\n                // there is a sign change: an event is expected during this step\n                final UnivariateFunction f = new UnivariateFunction() {\n                    public double value(final double t) {\n                        try {\n                            interpolator.setInterpolatedTime(t);\n                            return handler.g(t, interpolator.getInterpolatedState());\n                        } catch (DerivativeException e) {\n                            throw new MathRuntimeException(e);\n                        } catch (EventException e) {\n                            throw new MathRuntimeException(e);\n                        }\n                    }\n                };\n                final double root;\n                try {\n                    root = (ta <= tb) ? bracketing.getBracketedRoot(f, ta, tb).getMidpoint() :\n                            bracketing.getBracketedRoot(f, tb, ta).getMidpoint();\n                } catch (MathIllegalStateException m) {\n                    // Failed to bracket, deactivate bracketing and use bisection\n                    bracketingInterval = Double.NaN;\n                    final UnivariateSolver bsolver = new BisectionSolver();\n                    bsolver.setAbsoluteAccuracy(convergence);\n                    bsolver.setMaximalIterationCount(maxIterationCount);\n                    root = (ta <= tb) ? bsolver.solve(f, ta, tb) : bsolver.solve(f, tb, ta);\n                }\n                if ((Math.abs(root - ta) <= convergence) &&\n                        (Math.abs(root - previousEventTime) <= convergence)) {\n                    // we have either found nothing or found (again ?) a past event, we simply ignore it\n                    ta = tb;\n                    ga = gb;\n                } else if (Double.isNaN(previousEventTime) ||\n                        (Math.abs(previousEventTime - root) > convergence)) {\n                    pendingEventTime = root;\n                    if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                        // we were already waiting for this event which was\n                        // found during a previous call for a step that was\n                        // rejected, this step must now be accepted since it\n                        // properly ends exactly at the event occurrence\n                        return false;\n                    }\n                    // either we were not waiting for the event or it has\n                    // moved in such a way the step cannot be accepted\n                    pendingEvent = true;\n                    return true;\n                }\n\n            } else {\n                // no sign change: there is no event for now\n                ta = tb;\n                ga = gb;\n            }\n\n        }\n\n        // no event during the whole step\n        pendingEvent = false;\n        pendingEventTime = Double.NaN;\n        return false;\n\n    } catch (DerivativeException | EventException e) {\n        throw new EventException(e);\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/events/EventState.java b/src/main/java/org/apache/commons/math/ode/events/EventState.java\nindex 50060650e..57e5c6faa 100644\n--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java\n@@ -164,104 +164,106 @@ public class EventState {\n      * cannot be evaluated\n      * @exception ConvergenceException if an event cannot be located\n      */\n-    public boolean evaluateStep(final StepInterpolator interpolator)\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.solvers.BisectionSolver;\n+import org.apache.commons.math3.analysis.solvers.BrentSolver;\n+import org.apache.commons.math3.analysis.solvers.UnivariateSolver;\n+import org.apache.commons.math3.exception.ConvergenceException;\n+import org.apache.commons.math3.exception.DerivativeException;\n+import org.apache.commons.math3.exception.EventException;\n+import org.apache.commons.math3.exception.MathIllegalStateException;\n+import org.apache.commons.math3.exception.MathRuntimeException;\n+import org.apache.commons.math3.exception.util.LocalizedFormats;\n+import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.util.MathUtils;\n+import org.apache.commons.math3.util.Precision;\n+\n+public boolean evaluateStep(final StepInterpolator interpolator)\n         throws DerivativeException, EventException, ConvergenceException {\n \n-        try {\n-\n-            forward = interpolator.isForward();\n-            final double t1 = interpolator.getCurrentTime();\n-            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n-            final double h  = (t1 - t0) / n;\n-\n-            double ta = t0;\n-            double ga = g0;\n-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n-            for (int i = 0; i < n; ++i) {\n-\n-                // evaluate handler value at the end of the substep\n-                tb += h;\n-                interpolator.setInterpolatedTime(tb);\n-                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n-\n-                // check events occurrence\n-                if (g0Positive ^ (gb >= 0)) {\n-                    // there is a sign change: an event is expected during this step\n-\n-                        // this is a corner case:\n-                        // - there was an event near ta,\n-                        // - there is another event between ta and tb\n-                        // - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n-                        // this implies that the real sign of ga is the same as gb, so we need to slightly\n-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain\n-                        // about bracketing\n-                            // this should never happen\n-                         \n-                    // variation direction, with respect to the integration direction\n-                    increasing = gb >= ga;\n-\n-                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n-                        public double value(final double t) throws FunctionEvaluationException {\n-                            try {\n-                                interpolator.setInterpolatedTime(t);\n-                                return handler.g(t, interpolator.getInterpolatedState());\n-                            } catch (DerivativeException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            } catch (EventException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            }\n+    try {\n+        forward = interpolator.isForward();\n+        final double t1 = interpolator.getCurrentTime();\n+        final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n+        final double h = (t1 - t0) / n;\n+\n+        double ta = t0;\n+        double ga = g0;\n+        double tb = t0 + (forward ? convergence : -convergence);\n+        for (int i = 0; i < n; ++i) {\n+\n+            // evaluate handler value at the end of the substep\n+            tb += h;\n+            interpolator.setInterpolatedTime(tb);\n+            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n+\n+            // check events occurrence\n+            if (MathUtils.sign(ga) != MathUtils.sign(gb)) {\n+                // there is a sign change: an event is expected during this step\n+                final UnivariateFunction f = new UnivariateFunction() {\n+                    public double value(final double t) {\n+                        try {\n+                            interpolator.setInterpolatedTime(t);\n+                            return handler.g(t, interpolator.getInterpolatedState());\n+                        } catch (DerivativeException e) {\n+                            throw new MathRuntimeException(e);\n+                        } catch (EventException e) {\n+                            throw new MathRuntimeException(e);\n                         }\n-                    };\n-                    final BrentSolver solver = new BrentSolver();\n-                    solver.setAbsoluteAccuracy(convergence);\n-                    solver.setMaximalIterationCount(maxIterationCount);\n-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n-                    if ((Math.abs(root - ta) <= convergence) &&\n-                         (Math.abs(root - previousEventTime) <= convergence)) {\n-                        // we have either found nothing or found (again ?) a past event, we simply ignore it\n-                        ta = tb;\n-                        ga = gb;\n-                    } else if (Double.isNaN(previousEventTime) ||\n-                               (Math.abs(previousEventTime - root) > convergence)) {\n-                        pendingEventTime = root;\n-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n-                            // we were already waiting for this event which was\n-                            // found during a previous call for a step that was\n-                            // rejected, this step must now be accepted since it\n-                            // properly ends exactly at the event occurrence\n-                            return false;\n-                        }\n-                        // either we were not waiting for the event or it has\n-                        // moved in such a way the step cannot be accepted\n-                        pendingEvent = true;\n-                        return true;\n                     }\n-\n-                } else {\n-                    // no sign change: there is no event for now\n+                };\n+                final double root;\n+                try {\n+                    root = (ta <= tb) ? bracketing.getBracketedRoot(f, ta, tb).getMidpoint() :\n+                            bracketing.getBracketedRoot(f, tb, ta).getMidpoint();\n+                } catch (MathIllegalStateException m) {\n+                    // Failed to bracket, deactivate bracketing and use bisection\n+                    bracketingInterval = Double.NaN;\n+                    final UnivariateSolver bsolver = new BisectionSolver();\n+                    bsolver.setAbsoluteAccuracy(convergence);\n+                    bsolver.setMaximalIterationCount(maxIterationCount);\n+                    root = (ta <= tb) ? bsolver.solve(f, ta, tb) : bsolver.solve(f, tb, ta);\n+                }\n+                if ((Math.abs(root - ta) <= convergence) &&\n+                        (Math.abs(root - previousEventTime) <= convergence)) {\n+                    // we have either found nothing or found (again ?) a past event, we simply ignore it\n                     ta = tb;\n                     ga = gb;\n+                } else if (Double.isNaN(previousEventTime) ||\n+                        (Math.abs(previousEventTime - root) > convergence)) {\n+                    pendingEventTime = root;\n+                    if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n+                        // we were already waiting for this event which was\n+                        // found during a previous call for a step that was\n+                        // rejected, this step must now be accepted since it\n+                        // properly ends exactly at the event occurrence\n+                        return false;\n+                    }\n+                    // either we were not waiting for the event or it has\n+                    // moved in such a way the step cannot be accepted\n+                    pendingEvent = true;\n+                    return true;\n                 }\n \n+            } else {\n+                // no sign change: there is no event for now\n+                ta = tb;\n+                ga = gb;\n             }\n \n-            // no event during the whole step\n-            pendingEvent     = false;\n-            pendingEventTime = Double.NaN;\n-            return false;\n-\n-        } catch (FunctionEvaluationException e) {\n-            final Throwable cause = e.getCause();\n-            if ((cause != null) && (cause instanceof DerivativeException)) {\n-                throw (DerivativeException) cause;\n-            } else if ((cause != null) && (cause instanceof EventException)) {\n-                throw (EventException) cause;\n-            }\n-            throw new EventException(e);\n         }\n \n+        // no event during the whole step\n+        pendingEvent = false;\n+        pendingEventTime = Double.NaN;\n+        return false;\n+\n+    } catch (DerivativeException | EventException e) {\n+        throw new EventException(e);\n     }\n \n+}\n+\n     /** Get the occurrence time of the event triggered in the current\n      * step.\n      * @return occurrence time of the event triggered in the current",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}