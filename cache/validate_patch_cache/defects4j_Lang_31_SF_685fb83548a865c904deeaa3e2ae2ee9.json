{
    "patch": " public static boolean containsAny(final CharSequence sequence, final char[] searchChars) {\n        if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n            return false;\n        }\n        final int strLen = sequence.length();\n        final int searchLen = searchChars.length;\n        final int strLast = strLen - 1;\n        final int searchLast = searchLen - 1;\n        char high;\n        for (int i = 0; i < strLen;) {\n            final int codePoint = Character.codePointAt(sequence, i);\n            if (codePoint >= Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n                i += Character.charCount(codePoint);\n                high = Character.highSurrogate(codePoint);\n                final int result = Arrays.binarySearch(searchChars, high);\n                if (result >= 0) {\n                    return true;\n                }\n                high = Character.lowSurrogate(codePoint);\n                if(Arrays.binarySearch(searchChars, high) >= 0) {\n                    return true;\n                }\n            } else {\n                if (contains(searchChars, sequence.charAt(i++))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    \n    private static boolean contains(final char[] array, final char valueToFind) {\n        for (final char c : array) {\n            if (c == valueToFind) {\n                return true;\n            }\n        }\n        return false;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..60c10b39 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,45 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+ public static boolean containsAny(final CharSequence sequence, final char[] searchChars) {\n+        if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n+            return false;\n+        }\n+        final int strLen = sequence.length();\n+        final int searchLen = searchChars.length;\n+        final int strLast = strLen - 1;\n+        final int searchLast = searchLen - 1;\n+        char high;\n+        for (int i = 0; i < strLen;) {\n+            final int codePoint = Character.codePointAt(sequence, i);\n+            if (codePoint >= Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n+                i += Character.charCount(codePoint);\n+                high = Character.highSurrogate(codePoint);\n+                final int result = Arrays.binarySearch(searchChars, high);\n+                if (result >= 0) {\n+                    return true;\n+                }\n+                high = Character.lowSurrogate(codePoint);\n+                if(Arrays.binarySearch(searchChars, high) >= 0) {\n+                    return true;\n+                }\n+            } else {\n+                if (contains(searchChars, sequence.charAt(i++))) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+    \n+    private static boolean contains(final char[] array, final char valueToFind) {\n+        for (final char c : array) {\n+            if (c == valueToFind) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}