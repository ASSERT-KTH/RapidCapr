{
    "patch": "public static double getTypedPercent(List<JsonObject> list) {\n    double count = 0.0;\n    double total = 0.0;\n    for (JsonObject obj : list) {\n        if (obj.has(\"type\") && obj.get(\"type\").getAsString().equals(\"typed\")) {\n            total += 1.0;\n            if (obj.has(\"success\") && obj.get(\"success\").getAsBoolean()) {\n                count += 1.0;\n            }\n        }\n    }\n    if (total == 0.0) {\n        return 0.0;\n    }\n    return (count / total) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..07e8e83f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(List<JsonObject> list) {\n+    double count = 0.0;\n+    double total = 0.0;\n+    for (JsonObject obj : list) {\n+        if (obj.has(\"type\") && obj.get(\"type\").getAsString().equals(\"typed\")) {\n+            total += 1.0;\n+            if (obj.has(\"success\") && obj.get(\"success\").getAsBoolean()) {\n+                count += 1.0;\n+            }\n+        }\n+    }\n+    if (total == 0.0) {\n+        return 0.0;\n+    }\n+    return (count / total) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}