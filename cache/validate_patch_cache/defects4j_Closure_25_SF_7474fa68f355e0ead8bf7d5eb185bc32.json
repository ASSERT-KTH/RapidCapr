{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceTypeOrUnknown();\n        }\n      }\n    }\n    n.setJSType(type);\n    if (type != null && type.isRecordType()) {\n      int i = 0;\n      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        // if the argument is a non-optional varargs parameter of the constructor (see,\n        // e.g., Array.prototype.constructor) we don't want to modify its type\n        JSType ctorParamType =\n            ct == null || i >= ct.getParametersCount() || ct.getParameter(i).isOptional()\n                ? null\n                : ct.getParameter(i);\n        scope = traverseWithEs6Typed(new NewTypeNode(ctorParamType, arg), scope);\n        i++;\n      }\n    } else {\n      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n      }\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..8704de66 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1033,7 +1033,6 @@ class TypeInference\n   }\n \n   private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n@@ -1051,13 +1050,27 @@ class TypeInference\n           ct = (FunctionType) constructorType;\n         }\n         if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+          type = ct.getInstanceTypeOrUnknown();\n         }\n       }\n     }\n     n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+    if (type != null && type.isRecordType()) {\n+      int i = 0;\n+      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+        // if the argument is a non-optional varargs parameter of the constructor (see,\n+        // e.g., Array.prototype.constructor) we don't want to modify its type\n+        JSType ctorParamType =\n+            ct == null || i >= ct.getParametersCount() || ct.getParameter(i).isOptional()\n+                ? null\n+                : ct.getParameter(i);\n+        scope = traverseWithEs6Typed(new NewTypeNode(ctorParamType, arg), scope);\n+        i++;\n+      }\n+    } else {\n+      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+        scope = traverse(arg, scope);\n+      }\n     }\n     return scope;\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}