{
    "patch": "        int nOdSign = Double.compare(doubleValue(), 0.0);\n        int dOnSign = Double.compare(object.doubleValue(), 0.0);\n\n        if (nOdSign != dOnSign) {\n            return nOdSign < dOnSign ? -1 : 1;\n        }\n\n        long lcm = MathUtils.lcm(denominator, object.denominator);\n        long left = numerator * (lcm / denominator);\n        long right = object.numerator * (lcm / object.denominator);\n\n        return Long.compare(left, right);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/fraction/Fraction.java b/src/java/org/apache/commons/math/fraction/Fraction.java\nindex 0706f8c41..ec2b67126 100644\n--- a/src/java/org/apache/commons/math/fraction/Fraction.java\n+++ b/src/java/org/apache/commons/math/fraction/Fraction.java\n@@ -256,8 +256,18 @@ public class Fraction extends Number implements Comparable<Fraction> {\n      *         than <tt>object</tt>, 0 if they are equal.\n      */\n     public int compareTo(Fraction object) {\n-        double nOd = doubleValue();\n-        double dOn = object.doubleValue();\n+        int nOdSign = Double.compare(doubleValue(), 0.0);\n+        int dOnSign = Double.compare(object.doubleValue(), 0.0);\n+\n+        if (nOdSign != dOnSign) {\n+            return nOdSign < dOnSign ? -1 : 1;\n+        }\n+\n+        long lcm = MathUtils.lcm(denominator, object.denominator);\n+        long left = numerator * (lcm / denominator);\n+        long right = object.numerator * (lcm / object.denominator);\n+\n+        return Long.compare(left, right);\n         return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n     }\n     ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}