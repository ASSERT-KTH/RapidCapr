{
    "patch": "switch (n.getType()) {\n    case Token.FUNCTION:\n        Node firstChild = n.getFirstChild();\n        boolean isAnonymousFunction = NodeUtil.isFunctionExpression(n);\n        if (isAnonymousFunction) {\n            boolean isDeclaration =\n                    (parent != null &&\n                            (parent.getType() == Token.VAR ||\n                            parent.getType() == Token.LET ||\n                            parent.getType() == Token.CONST ||\n                            parent.getType() == Token.EXPR_RESULT ||\n                            parent.getType() == Token.ASSIGN ||\n                            parent.getType() == Token.COLON)) ||\n                    (NodeUtil.isExpressionNodeParent(parent) &&\n                            !parent.isCall() &&\n                            !parent.isNew()) ||\n                    (parent.getType() == Token.FOR &&\n                            firstChild.getType() == Token.VAR);\n            if (isDeclaration) {\n                defineDeclaredFunction(n, parent);\n                return;\n            }\n            break;\n        } else if (parent != null && parent.getType() != Token.CATCH && parent.getType() != Token.LP && parent.getType() != Token.GETTER_DEF) {\n            return;\n        }\n        defineDeclaredFunction(n, parent);\n        break;\n\n    case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n\n    case Token.VAR:\n    case Token.LET:\n    case Token.CONST:\n    case Token.EXPR_RESULT:\n    case Token.ASSIGN:\n        defineVar(n, parent);\n        break;\n\n    case Token.COLON:\n        if (NodeUtil.isObjectLitKey(n, parent)) {\n            defineVar(n, parent);\n        }\n        break;\n\n    case Token.NAME:\n        if (NodeUtil.isNameDeclaration(parent) ||\n                NodeUtil.isFunctionDeclaration(parent) ||\n                NodeUtil.isClassDeclaration(parent)) {\n            defineDeclaredVariable(n.getString(), n, scope);\n        }\n        break;\n\n    case Token.OBJECT_PATTERN:\n    case Token.ARRAY_PATTERN:\n        defineDestructuringVariables(n);\n        break;\n\n    default:\n        break;\n}\nattachLiteralTypes(n);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..a7994b95 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,70 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+switch (n.getType()) {\n+    case Token.FUNCTION:\n+        Node firstChild = n.getFirstChild();\n+        boolean isAnonymousFunction = NodeUtil.isFunctionExpression(n);\n+        if (isAnonymousFunction) {\n+            boolean isDeclaration =\n+                    (parent != null &&\n+                            (parent.getType() == Token.VAR ||\n+                            parent.getType() == Token.LET ||\n+                            parent.getType() == Token.CONST ||\n+                            parent.getType() == Token.EXPR_RESULT ||\n+                            parent.getType() == Token.ASSIGN ||\n+                            parent.getType() == Token.COLON)) ||\n+                    (NodeUtil.isExpressionNodeParent(parent) &&\n+                            !parent.isCall() &&\n+                            !parent.isNew()) ||\n+                    (parent.getType() == Token.FOR &&\n+                            firstChild.getType() == Token.VAR);\n+            if (isDeclaration) {\n+                defineDeclaredFunction(n, parent);\n+                return;\n+            }\n+            break;\n+        } else if (parent != null && parent.getType() != Token.CATCH && parent.getType() != Token.LP && parent.getType() != Token.GETTER_DEF) {\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        defineDeclaredFunction(n, parent);\n+        break;\n+\n+    case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+\n+    case Token.VAR:\n+    case Token.LET:\n+    case Token.CONST:\n+    case Token.EXPR_RESULT:\n+    case Token.ASSIGN:\n+        defineVar(n, parent);\n+        break;\n+\n+    case Token.COLON:\n+        if (NodeUtil.isObjectLitKey(n, parent)) {\n+            defineVar(n, parent);\n+        }\n+        break;\n+\n+    case Token.NAME:\n+        if (NodeUtil.isNameDeclaration(parent) ||\n+                NodeUtil.isFunctionDeclaration(parent) ||\n+                NodeUtil.isClassDeclaration(parent)) {\n+            defineDeclaredVariable(n.getString(), n, scope);\n+        }\n+        break;\n+\n+    case Token.OBJECT_PATTERN:\n+    case Token.ARRAY_PATTERN:\n+        defineDestructuringVariables(n);\n+        break;\n+\n+    default:\n+        break;\n+}\n+attachLiteralTypes(n);\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}