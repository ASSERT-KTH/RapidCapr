{
    "patch": "public class MyClass {\n    public static <T> ReturnValue<T> getEmptyReturn(Class<T> clazz) {\n        T emptyInstance = null;\n        if (Iterable.class.isAssignableFrom(clazz)) {\n            emptyInstance = (T) Collections.emptyList();\n        } else if (Map.class.isAssignableFrom(clazz)) {\n            emptyInstance = (T) Collections.emptyMap();\n        } else if (Set.class.isAssignableFrom(clazz)) {\n            emptyInstance = (T) Collections.emptySet();\n        }\n        return new ReturnValue<>(emptyInstance);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..14b4c0f12 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,19 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public class MyClass {\n+    public static <T> ReturnValue<T> getEmptyReturn(Class<T> clazz) {\n+        T emptyInstance = null;\n+        if (Iterable.class.isAssignableFrom(clazz)) {\n+            emptyInstance = (T) Collections.emptyList();\n+        } else if (Map.class.isAssignableFrom(clazz)) {\n+            emptyInstance = (T) Collections.emptyMap();\n+        } else if (Set.class.isAssignableFrom(clazz)) {\n+            emptyInstance = (T) Collections.emptySet();\n+        }\n+        return new ReturnValue<>(emptyInstance);\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}