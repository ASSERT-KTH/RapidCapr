{
    "patch": "      // initialize hash set of params to remove\n      Set<Node> paramsToRemove = new HashSet<>();\n      Node arg = argList.getFirstChild();\n      while (arg != null && !referenced.contains(fnScope.getVar(arg.getString()))) {\n        paramsToRemove.add(arg);\n        arg = arg.getNext();\n      }\n\n      // scan through function body and determine if references exist\n      // to remaining parameters; build the final list of unreferenced\n      // parameters\n      if (arg != null) {\n        for (Node ancestor : function.getParent().getAncestors()) {\n          NodeTraversal.traverse(compiler, ancestor, new AbstractPostOrderCallback() {\n            @Override\n            public void visit(NodeTraversal nt, Node node, Node parent) {\n              if (node == arg) {\n                arg = arg.getNext();\n                if (arg == null) {\n                  return;\n                }\n              }\n              if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n                paramsToRemove.add(arg);\n              }\n            }\n          });\n        }\n      }\n\n      // remove unreferenced parameters\n      for (Node param : paramsToRemove) {\n        argList.removeChild(param);\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..8e8a944e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,40 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      // initialize hash set of params to remove\n+      Set<Node> paramsToRemove = new HashSet<>();\n+      Node arg = argList.getFirstChild();\n+      while (arg != null && !referenced.contains(fnScope.getVar(arg.getString()))) {\n+        paramsToRemove.add(arg);\n+        arg = arg.getNext();\n+      }\n+\n+      // scan through function body and determine if references exist\n+      // to remaining parameters; build the final list of unreferenced\n+      // parameters\n+      if (arg != null) {\n+        for (Node ancestor : function.getParent().getAncestors()) {\n+          NodeTraversal.traverse(compiler, ancestor, new AbstractPostOrderCallback() {\n+            @Override\n+            public void visit(NodeTraversal nt, Node node, Node parent) {\n+              if (node == arg) {\n+                arg = arg.getNext();\n+                if (arg == null) {\n+                  return;\n+                }\n+              }\n+              if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n+                paramsToRemove.add(arg);\n+              }\n+            }\n+          });\n+        }\n+      }\n+\n+      // remove unreferenced parameters\n+      for (Node param : paramsToRemove) {\n+        argList.removeChild(param);\n+        compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}