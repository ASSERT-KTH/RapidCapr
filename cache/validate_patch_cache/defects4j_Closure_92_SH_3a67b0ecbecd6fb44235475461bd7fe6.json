{
    "patch": "          } else if (indexOfDot == -1) {\n            // Any old place is fine.\n            compiler.getNodeForCodeInsertion(minimumModule)\n                .addChildToBack(replacementNode);\n          } else {\n            // Add it after the parent namespace.\n            ProvidedName parentName =\n                providedNames.get(namespace.substring(0, indexOfDot));\n            Preconditions.checkNotNull(parentName);\n            Preconditions.checkNotNull(parentName.replacementNode);\n            parentName.replacementNode.getParent().addChildAfter(\n                replacementNode, parentName.replacementNode);\n          }\n        } else {\n          // Handle the case where we didn't find a candidate.\n          replacementNode = createDeclarationNode();\n          Node toAddBefore = firstNode == null ? null : firstNode.getParent();\n          if (toAddBefore != null) {\n            toAddBefore.addChildBefore(replacementNode, firstNode);\n          } else {\n            minimumModule.\n                getParent().getLastChild().addChildToFront(replacementNode);\n          }\n          if (explicitNode != null) {\n            explicitNode.detachFromParent();\n          }\n          compiler.reportCodeChange();\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex c929a363..937da56f 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -786,7 +786,36 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n         } else {\n           // In this case, the name was implicitly provided by two independent\n           // modules. We need to move this code up to a common module.\n-          int indexOfDot = namespace.indexOf('.');\n+          } else if (indexOfDot == -1) {\n+            // Any old place is fine.\n+            compiler.getNodeForCodeInsertion(minimumModule)\n+                .addChildToBack(replacementNode);\n+          } else {\n+            // Add it after the parent namespace.\n+            ProvidedName parentName =\n+                providedNames.get(namespace.substring(0, indexOfDot));\n+            Preconditions.checkNotNull(parentName);\n+            Preconditions.checkNotNull(parentName.replacementNode);\n+            parentName.replacementNode.getParent().addChildAfter(\n+                replacementNode, parentName.replacementNode);\n+          }\n+        } else {\n+          // Handle the case where we didn't find a candidate.\n+          replacementNode = createDeclarationNode();\n+          Node toAddBefore = firstNode == null ? null : firstNode.getParent();\n+          if (toAddBefore != null) {\n+            toAddBefore.addChildBefore(replacementNode, firstNode);\n+          } else {\n+            minimumModule.\n+                getParent().getLastChild().addChildToFront(replacementNode);\n+          }\n+          if (explicitNode != null) {\n+            explicitNode.detachFromParent();\n+          }\n+          compiler.reportCodeChange();\n+        }\n+      }\n+    }\n           if (indexOfDot == -1) {\n             // Any old place is fine.\n             compiler.getNodeForCodeInsertion(minimumModule)",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}