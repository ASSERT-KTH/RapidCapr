{
    "patch": "      if (constraintObj != null && constraintObj.isRecordType()) {\n        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n        if (objType != null) {\n          for (String prop : constraintObj.getOwnPropertyNames()) {\n            JSType propType = constraintObj.getPropertyType(prop);\n            JSType declaredPropType = objType.getPropertyType(prop);\n            if (declaredPropType == null || declaredPropType.isUnknownType()) {\n              if (!objType.isPropertyTypeInferred(prop) || !objType.isLoose()) {\n                objType.defineInferredProperty(prop, propType, null);\n              }\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..d6add3c5 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,21 +1118,19 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+      if (constraintObj != null && constraintObj.isRecordType()) {\n+        ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+        if (objType != null) {\n+          for (String prop : constraintObj.getOwnPropertyNames()) {\n+            JSType propType = constraintObj.getPropertyType(prop);\n+            JSType declaredPropType = objType.getPropertyType(prop);\n+            if (declaredPropType == null || declaredPropType.isUnknownType()) {\n+              if (!objType.isPropertyTypeInferred(prop) || !objType.isLoose()) {\n+                objType.defineInferredProperty(prop, propType, null);\n+              }\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}