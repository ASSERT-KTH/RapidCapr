{
    "patch": "Apologies for the mistake. The correct hunk at the infill location to fix the test failure is:\n```\nSet<String> referenced = Sets.newHashSet(fnScope.getVarNames());\nNode function = fnScope.getRootNode();\n\nNodeUtil.VisitTraversal traversal = NodeUtil.getEffectiveArgumentTraversal(\n    function.getParent().getType() == Token.CALL ? function.getPrevious() : null);\nfor (Node arg : argList.children()) {\n  if (!referenced.contains(arg.getString())) {\n    continue;\n  }\n\n  IdentifierReplacement replacer = new IdentifierReplacement(\n      arg.getString(), arg.cloneTree());\n  refactoringCallback = replacer;\n  traversal.traverseWithScope(fnScope, refactoringCallback);\n  if (replacer.wasUsed()) {\n    continue;\n  }\n\n  arg.detach();\n  compiler.reportCodeChange();\n}\n```",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0e2c7e20 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,30 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Apologies for the mistake. The correct hunk at the infill location to fix the test failure is:\n+```\n+Set<String> referenced = Sets.newHashSet(fnScope.getVarNames());\n+Node function = fnScope.getRootNode();\n+\n+NodeUtil.VisitTraversal traversal = NodeUtil.getEffectiveArgumentTraversal(\n+    function.getParent().getType() == Token.CALL ? function.getPrevious() : null);\n+for (Node arg : argList.children()) {\n+  if (!referenced.contains(arg.getString())) {\n+    continue;\n+  }\n+\n+  IdentifierReplacement replacer = new IdentifierReplacement(\n+      arg.getString(), arg.cloneTree());\n+  refactoringCallback = replacer;\n+  traversal.traverseWithScope(fnScope, refactoringCallback);\n+  if (replacer.wasUsed()) {\n+    continue;\n+  }\n+\n+  arg.detach();\n+  compiler.reportCodeChange();\n+}\n+```\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}