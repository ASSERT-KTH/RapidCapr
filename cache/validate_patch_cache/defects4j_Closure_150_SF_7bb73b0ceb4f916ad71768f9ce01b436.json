{
    "patch": "    //add imports statement\n    import com.google.javascript.rhino.NodeUtil;\n   \n    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (NodeUtil.isFunctionExpression(parent) || parent.getType() == Token.SCRIPT) { // Change parent condition, add NodeUtil import.\n            defineDeclaredFunction(n, parent);\n            handleFunctionInputs(n); // Add this line to handle call to handleFunctionInputs() for function expression.\n          } else if (parent.getType() == Token.NAME)\n            return;\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n    } ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..da74fd1c 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,6 +1440,9 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n+    //add imports statement\n+    import com.google.javascript.rhino.NodeUtil;\n+   \n     @Override public void visit(NodeTraversal t, Node n, Node parent) {\n       if (n == scope.getRootNode()) return;\n \n@@ -1451,10 +1454,11 @@ final class TypedScopeCreator implements ScopeCreator {\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+          if (NodeUtil.isFunctionExpression(parent) || parent.getType() == Token.SCRIPT) { // Change parent condition, add NodeUtil import.\n+            defineDeclaredFunction(n, parent);\n+            handleFunctionInputs(n); // Add this line to handle call to handleFunctionInputs() for function expression.\n+          } else if (parent.getType() == Token.NAME)\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n@@ -1463,7 +1467,7 @@ final class TypedScopeCreator implements ScopeCreator {\n           defineVar(n, parent);\n           break;\n       }\n-    }\n+    } \n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}