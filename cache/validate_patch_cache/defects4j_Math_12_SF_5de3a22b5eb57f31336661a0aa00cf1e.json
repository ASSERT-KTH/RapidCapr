{
    "patch": "public static double[] distributionClone(double[] a) {\n    int n = a.length;\n    double[] clone = Arrays.copyOf(a, n);\n\n    // Scale the input distribution to sum to 1.\n    double total = 0.0;\n    for (double d : a) {\n        total += d;\n    }\n    for (int i = 0; i < n; i++) {\n        clone[i] /= total;\n    }\n\n    // Adjust the clone to match the given distribution.\n    double error = Double.POSITIVE_INFINITY;\n    double EPSILON = 0.0001;\n    while (error > EPSILON) {\n        double[] temp = new double[n];\n        temp[0] = clone[0];\n        for (int i = 1; i < n; i++) {\n            temp[i] = temp[i-1] + clone[i];\n        }\n        double[] newClone = Arrays.copyOf(clone, n);\n        for (int i = 0; i < n; i++) {\n            int j = Arrays.binarySearch(temp, a[i]);\n            if (j < 0) {\n                j = -(j+1);\n            }\n            if (j == 0) {\n                newClone[i] = temp[0]/a[i];\n            } else if (j == n) {\n                newClone[i] = (temp[n-1]+1-a[i])/a[i];\n            } else {\n                newClone[i] = (temp[j]+temp[j-1]+1-a[i])/(2.0*a[i]);\n            }\n        }\n        double diff = 0.0;\n        for (int i = 0; i < n; i++) {\n            diff += Math.abs(newClone[i] - clone[i]);\n        }\n        error = diff;\n        clone = newClone;\n    }\n\n    return clone;\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}