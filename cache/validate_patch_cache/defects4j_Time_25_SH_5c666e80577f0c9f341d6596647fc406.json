{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        final int offsetLocal = getOffset(instantLocal);\n        // adjust instantLocal using the estimate and recalc the offset\n        final long instantAdjusted = instantLocal - offsetLocal;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            // we need to ensure that time is always after the DST gap\n            // this happens naturally for positive offsets, but not for negative\n            if (offsetLocal > 0 && offsetAdjusted < 0 && instantLocal + offsetLocal < 0) {\n                return offsetLocal;\n            }\n            if (offsetLocal < 0 && offsetLocal - offsetAdjusted < 0) {\n                // Handle case when time is in gap of transition\n                long prevTransition = previousTransition(instantAdjusted);\n                long nextTransition = nextTransition(instantAdjusted);\n                if (nextTransition == instantLocal - offsetLocal) {\n                    return offsetAdjusted;\n                } else if (prevTransition == instantLocal - offsetLocal) {\n                    return offsetLocal;\n                } else {\n                    throw new IllegalArgumentException(\"Switching time zone boundaries not well-defined in this case.\");\n                }\n            }\n            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    int previousOffset = getOffset(nextAdjusted - 1);\n                    // Offset changed without a transition, so we are near\n                    // the border of a transition. Choose the greater of the\n                    // two offsets\n                    return Math.max(offsetLocal, previousOffset);\n                }\n\n                final long nextLocal = nextTransition(instantAdjusted);\n                final int offsetNext = getOffset(nextLocal);\n                if (offsetLocal != offsetNext && offsetAdjusted == offsetNext) {\n                    return offsetLocal;\n                }\n            }\n            if (offsetLocal < offsetAdjusted) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n            } else {\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                if (prevLocal != prevAdjusted) {\n                    return offsetLocal;\n                }\n            }\n        }\n        return offsetAdjusted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..da10b5c0 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,64 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+    public int getOffsetFromLocal(long instantLocal) {\n+        // get the offset at instantLocal (first estimate)\n+        final int offsetLocal = getOffset(instantLocal);\n+        // adjust instantLocal using the estimate and recalc the offset\n+        final long instantAdjusted = instantLocal - offsetLocal;\n+        final int offsetAdjusted = getOffset(instantAdjusted);\n+        // if the offsets differ, we must be near a DST boundary\n+        if (offsetLocal != offsetAdjusted) {\n+            // we need to ensure that time is always after the DST gap\n+            // this happens naturally for positive offsets, but not for negative\n+            if (offsetLocal > 0 && offsetAdjusted < 0 && instantLocal + offsetLocal < 0) {\n+                return offsetLocal;\n+            }\n+            if (offsetLocal < 0 && offsetLocal - offsetAdjusted < 0) {\n+                // Handle case when time is in gap of transition\n+                long prevTransition = previousTransition(instantAdjusted);\n+                long nextTransition = nextTransition(instantAdjusted);\n+                if (nextTransition == instantLocal - offsetLocal) {\n+                    return offsetAdjusted;\n+                } else if (prevTransition == instantLocal - offsetLocal) {\n+                    return offsetLocal;\n+                } else {\n+                    throw new IllegalArgumentException(\"Switching time zone boundaries not well-defined in this case.\");\n+                }\n+            }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    int previousOffset = getOffset(nextAdjusted - 1);\n+                    // Offset changed without a transition, so we are near\n+                    // the border of a transition. Choose the greater of the\n+                    // two offsets\n+                    return Math.max(offsetLocal, previousOffset);\n+                }\n+\n+                final long nextLocal = nextTransition(instantAdjusted);\n+                final int offsetNext = getOffset(nextLocal);\n+                if (offsetLocal != offsetNext && offsetAdjusted == offsetNext) {\n+                    return offsetLocal;\n+                }\n+            }\n+            if (offsetLocal < offsetAdjusted) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+            } else {\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                if (prevLocal != prevAdjusted) {\n+                    return offsetLocal;\n+                }\n+            }\n+        }\n+        return offsetAdjusted;\n+    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}