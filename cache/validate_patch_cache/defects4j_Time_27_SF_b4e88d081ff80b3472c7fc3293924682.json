{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    PeriodPrinter printer = null;\n    PeriodParser parser = null;\n    int i = 0;\n    while (i < elementPairs.size()) {\n        Object elem = elementPairs.get(i);\n        if (elem instanceof Separator) {\n            Separator sep = (Separator) elem;\n            List<Object> preElemPairs = elementPairs.subList(0, i);\n            PeriodFormatter preElemFormatter = toFormatter(preElemPairs, notPrinter, true);\n            PeriodFormatter postElemFormatter = toFormatter(elementPairs.subList(i + 1, elementPairs.size()), true, notParser);\n            sep = sep.finish(preElemFormatter.getPrinter(), postElemFormatter.getParser());\n            return new PeriodFormatter(sep, sep);\n        } else if (elem instanceof PeriodFormatterBuilder) {\n            PeriodFormatterBuilder subBuilder = (PeriodFormatterBuilder) elem;\n            PeriodFormatter subFormatter = subBuilder.toFormatter();\n            printer = printer == null ? subFormatter.getPrinter() : new CompositePrinter(printer, subFormatter.getPrinter());\n            parser = parser == null ? subFormatter.getParser() : new CompositeParser(parser, subFormatter.getParser());\n        }\n        i++;\n    }\n\n    if (notPrinter) {\n        if (parser == null) {\n            throw new IllegalStateException(\"Can't build a printer with no formatter\");\n        }\n        return new PeriodFormatter(null, parser);\n    } else if (notParser) {\n        if (printer == null) {\n            throw new IllegalStateException(\"Can't build a parser with no formatter\");\n        }\n        return new PeriodFormatter(printer, null);\n    } else {\n        if (printer == null || parser == null) {\n            throw new IllegalStateException(\"Can't build a formatter with no printer and no parser\");\n        }\n        return new PeriodFormatter(printer, parser);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..1ae3cea8 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,49 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    PeriodPrinter printer = null;\n+    PeriodParser parser = null;\n+    int i = 0;\n+    while (i < elementPairs.size()) {\n+        Object elem = elementPairs.get(i);\n+        if (elem instanceof Separator) {\n+            Separator sep = (Separator) elem;\n+            List<Object> preElemPairs = elementPairs.subList(0, i);\n+            PeriodFormatter preElemFormatter = toFormatter(preElemPairs, notPrinter, true);\n+            PeriodFormatter postElemFormatter = toFormatter(elementPairs.subList(i + 1, elementPairs.size()), true, notParser);\n+            sep = sep.finish(preElemFormatter.getPrinter(), postElemFormatter.getParser());\n+            return new PeriodFormatter(sep, sep);\n+        } else if (elem instanceof PeriodFormatterBuilder) {\n+            PeriodFormatterBuilder subBuilder = (PeriodFormatterBuilder) elem;\n+            PeriodFormatter subFormatter = subBuilder.toFormatter();\n+            printer = printer == null ? subFormatter.getPrinter() : new CompositePrinter(printer, subFormatter.getPrinter());\n+            parser = parser == null ? subFormatter.getParser() : new CompositeParser(parser, subFormatter.getParser());\n+        }\n+        i++;\n+    }\n+\n+    if (notPrinter) {\n+        if (parser == null) {\n+            throw new IllegalStateException(\"Can't build a printer with no formatter\");\n+        }\n+        return new PeriodFormatter(null, parser);\n+    } else if (notParser) {\n+        if (printer == null) {\n+            throw new IllegalStateException(\"Can't build a parser with no formatter\");\n         }\n+        return new PeriodFormatter(printer, null);\n+    } else {\n+        if (printer == null || parser == null) {\n+            throw new IllegalStateException(\"Can't build a formatter with no printer and no parser\");\n+        }\n+        return new PeriodFormatter(printer, parser);\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}