{
    "patch": "import org.apache.commons.math3.linear.CholeskyDecomposition;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.SparseRealMatrix;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    // Convert input matrix to a sparse matrix\n    SparseRealMatrix sparseM = new SparseRealMatrix(m.getData());\n\n    // Compute the Cholesky decomposition of the sparse matrix\n    CholeskyDecomposition cholesky = new CholeskyDecomposition(sparseM);\n    RealMatrix sqrtM = cholesky.getL();\n\n    // Multiply the lower Cholesky factor by its transpose to get the square root\n    return sqrtM.multiply(sqrtM.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..280aeb4cc 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,19 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+import org.apache.commons.math3.linear.CholeskyDecomposition;\n+import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.linear.SparseRealMatrix;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    // Convert input matrix to a sparse matrix\n+    SparseRealMatrix sparseM = new SparseRealMatrix(m.getData());\n+\n+    // Compute the Cholesky decomposition of the sparse matrix\n+    CholeskyDecomposition cholesky = new CholeskyDecomposition(sparseM);\n+    RealMatrix sqrtM = cholesky.getL();\n+\n+    // Multiply the lower Cholesky factor by its transpose to get the square root\n+    return sqrtM.multiply(sqrtM.transpose());\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}