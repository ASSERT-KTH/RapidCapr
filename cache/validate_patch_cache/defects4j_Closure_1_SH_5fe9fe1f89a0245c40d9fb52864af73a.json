{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = function.getSecondChild();\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      Map<String, Var> referenced = google.research.com.googleinterns.dlss.App.gatherAllRefs(fnScope, function, new HashSet<String>());\n      // Strip unreferenced args off the end of the function declaration.\n      while (argList.getLastChild() != null) {\n        Node lastArg = argList.getLastChild();\n        String varName = lastArg.getString();\n        Var var = fnScope.getVar(varName);\n        if (!referenced.containsKey(varName) && !isImplicitExponentiationParameter(var, function)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, new HashSet<>(Collections.singletonList(function)));\n    } ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..887b1f07 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,34 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = function.getSecondChild();\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      Map<String, Var> referenced = google.research.com.googleinterns.dlss.App.gatherAllRefs(fnScope, function, new HashSet<String>());\n+      // Strip unreferenced args off the end of the function declaration.\n+      while (argList.getLastChild() != null) {\n+        Node lastArg = argList.getLastChild();\n+        String varName = lastArg.getString();\n+        Var var = fnScope.getVar(varName);\n+        if (!referenced.containsKey(varName) && !isImplicitExponentiationParameter(var, function)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, new HashSet<>(Collections.singletonList(function)));\n+    } \n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}