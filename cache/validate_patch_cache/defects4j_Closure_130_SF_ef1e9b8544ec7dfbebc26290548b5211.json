{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n        // Dequeue a name from the worklist.\n        Name name = workList.pop();\n\n        // Don't attempt to inline a getter or setter property as a variable.\n        if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n            continue;\n        }\n\n        // Check if the name has a local-set reference and only one global-set reference\n        // and at least one aliasing-get reference.\n        if (name.localSets > 0 || name.globalSets != 1 || name.aliasingGets == 0) {\n            continue;\n        }\n\n        // Find all of the local-aliasing-get references for the name and try to inline them.\n        Set<Ref> refSet = Sets.newHashSet(name.getRefs());\n        for (Ref ref : refSet) {\n            if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n                // Try to inline the local-aliasing-get reference.\n                if (inlineAliasIfPossible(ref, namespace)) {\n                    // Inlining successful - remove the reference from the name.\n                    name.removeRef(ref);\n                }\n            }\n        }\n\n        // All of the children of the name meet condition (a), so they can be added to the worklist.\n        if (name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) {\n            if (name.props != null) {\n                workList.addAll(name.props);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..f1d54c9f 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,43 +158,44 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n+private void inlineAliases(GlobalNamespace namespace) {\n     // Invariant: All the names in the worklist meet condition (a).\n     Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n     while (!workList.isEmpty()) {\n-      Name name = workList.pop();\n+        // Dequeue a name from the worklist.\n+        Name name = workList.pop();\n \n-      // Don't attempt to inline a getter or setter property as a variable.\n-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n-        continue;\n-      }\n+        // Don't attempt to inline a getter or setter property as a variable.\n+        if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+            continue;\n+        }\n+\n+        // Check if the name has a local-set reference and only one global-set reference\n+        // and at least one aliasing-get reference.\n+        if (name.localSets > 0 || name.globalSets != 1 || name.aliasingGets == 0) {\n+            continue;\n+        }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+        // Find all of the local-aliasing-get references for the name and try to inline them.\n+        Set<Ref> refSet = Sets.newHashSet(name.getRefs());\n+        for (Ref ref : refSet) {\n+            if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+                // Try to inline the local-aliasing-get reference.\n+                if (inlineAliasIfPossible(ref, namespace)) {\n+                    // Inlining successful - remove the reference from the name.\n+                    name.removeRef(ref);\n+                }\n             }\n-          }\n         }\n-      }\n \n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n-      }\n+        // All of the children of the name meet condition (a), so they can be added to the worklist.\n+        if (name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) {\n+            if (name.props != null) {\n+                workList.addAll(name.props);\n+            }\n+        }\n     }\n-  }\n+}\n \n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}