{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    final char AMPERSAND = '&';\n    final char HASH = '#';\n    final char SEMICOLON = ';';\n\n    int length = input.length();\n    if (index < 0 || index >= length) {\n        return 0;\n    }\n\n    if (input.charAt(index) != AMPERSAND || length < index + 3) {\n        return 0;\n    }\n\n    int start = index + 2;\n    boolean isHex = false;\n\n    if (input.charAt(start - 1) == HASH && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n        isHex = true;\n        start++;\n    }\n\n    int end = start;\n    while (end < length && input.charAt(end) != SEMICOLON) {\n        end++;\n    }\n\n    if (end == length) {\n        return 0;\n    }\n\n    String numericEntity = input.subSequence(start, end).toString();\n    if (isHex) {\n        if (!numericEntity.matches(\"[0-9A-F]+\")) {\n            return 0;\n        }\n    } else {\n        if (!numericEntity.matches(\"[0-9]+\")) {\n            return 0;\n        }\n    }\n\n    int entityValue = Integer.parseInt(numericEntity, isHex ? 16 : 10);\n    if (!Character.isValidCodePoint(entityValue)) {\n        return 0;\n    }\n\n    if (Character.isBmpCodePoint(entityValue)) {\n        out.write(entityValue);\n    } else {\n        char[] surrogatePair = Character.toChars(entityValue);\n        out.write(surrogatePair[0]);\n        out.write(surrogatePair[1]);\n    }\n\n    return end - index + 1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex c3cb8695..c1bf09dc 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -32,37 +32,61 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        // TODO: Protect from ArrayIndexOutOfBounds\n-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    final char AMPERSAND = '&';\n+    final char HASH = '#';\n+    final char SEMICOLON = ';';\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-            }\n+    int length = input.length();\n+    if (index < 0 || index >= length) {\n+        return 0;\n+    }\n+\n+    if (input.charAt(index) != AMPERSAND || length < index + 3) {\n+        return 0;\n+    }\n \n-            int end = start;\n-            while(input.charAt(end) != ';') {\n-                end++;\n-            }\n+    int start = index + 2;\n+    boolean isHex = false;\n+\n+    if (input.charAt(start - 1) == HASH && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n+        isHex = true;\n+        start++;\n+    }\n+\n+    int end = start;\n+    while (end < length && input.charAt(end) != SEMICOLON) {\n+        end++;\n+    }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-                return 0;\n-            }\n+    if (end == length) {\n+        return 0;\n+    }\n \n-                out.write(entityValue);\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+    String numericEntity = input.subSequence(start, end).toString();\n+    if (isHex) {\n+        if (!numericEntity.matches(\"[0-9A-F]+\")) {\n+            return 0;\n+        }\n+    } else {\n+        if (!numericEntity.matches(\"[0-9]+\")) {\n+            return 0;\n         }\n+    }\n+\n+    int entityValue = Integer.parseInt(numericEntity, isHex ? 16 : 10);\n+    if (!Character.isValidCodePoint(entityValue)) {\n         return 0;\n     }\n+\n+    if (Character.isBmpCodePoint(entityValue)) {\n+        out.write(entityValue);\n+    } else {\n+        char[] surrogatePair = Character.toChars(entityValue);\n+        out.write(surrogatePair[0]);\n+        out.write(surrogatePair[1]);\n+    }\n+\n+    return end - index + 1;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape index 9 expected:< [",
    "test_result": "FAIL"
}