{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final int maxRowsColumns = 5000; // set maximum matrix size\n    if (n > maxRowsColumns) {\n        final QRDecomposition qr = new QRDecomposition(m);\n        final RealMatrix q = qr.getQ();\n        final RealMatrix r = qr.getR();\n\n        // Compute the square root of the Q matrix\n        final int[] p = qr.getPivot();\n        final int k = r.getColumnDimension();\n        final int[] v = new int[k];\n        for (int i = 0; i < k; i++) {\n            v[i] = p[i] - 1;\n        }\n        final SubMatrix qSub = new SubMatrix(q, 0, q.getRowDimension() - 1, v);\n        final RealMatrix qSqrt = squareRoot(qSub.getData());\n\n        // Compute the square root of the R matrix\n        final double[][] rData = r.getData();\n        final double[][] rSqrtData = new double[k][k];\n        for (int i = 0; i < k; i++) {\n            final double rdi = rData[i][i];\n            for (int j = 0; j < k; j++) {\n                if (i == j) {\n                    rSqrtData[i][j] = Math.sqrt(rdi);\n                } else if (i < j) {\n                    rSqrtData[i][j] = rData[i][j] / (rSqrtData[i][i] + rSqrtData[j][j]);\n                } else {\n                    rSqrtData[i][j] = 0.0;\n                }\n            }\n        }\n        final RealMatrix rSqrt = MatrixUtils.createRealMatrix(rSqrtData);\n\n        // Combine the square roots of Q and R matrices\n        return qSqrt.multiply(rSqrt);\n    } else {\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    }\n}\n\nprivate RealMatrix squareRoot(double[][] m) {\n    final int n = m.length;\n    final int maxRowsColumns = 5000; // set maximum matrix size\n    if (n > maxRowsColumns) {\n        final QRDecomposition qr = new QRDecomposition(m);\n        final double[][] q = qr.getQ().getData();\n        final double[][] r = qr.getR().getData();\n\n        // Compute the square root of the Q matrix\n        final int[] p = qr.getPivot();\n        final int k = r[0].length;\n        final int[] v = new int[k];\n        for (int i = 0; i < k; i++) {\n            v[i] = p[i] - 1;\n        }\n        final double[][] qData = new double[n][k];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < k; j++) {\n                qData[i][j] = q[i][v[j]];\n            }\n        }\n        final RealMatrix qSqrt = squareRoot(qData);\n\n        // Compute the square root of the R matrix\n        final double[][] rSqrtData = new double[k][k];\n        for (int i = 0; i < k; i++) {\n            final double rdi = r[i][i];\n            for (int j = 0; j < k; j++) {\n                if (i == j) {\n                    rSqrtData[i][j] = Math.sqrt(rdi);\n                } else if (i < j) {\n                    rSqrtData[i][j] = r[i][j] / (rSqrtData[i][i] + rSqrtData[j][j]);\n                } else {\n                    rSqrtData[i][j] = 0.0;\n                }\n            }\n        }\n        final RealMatrix rSqrt = MatrixUtils.createRealMatrix(rSqrtData);\n\n        // Combine the square roots of Q and R matrices\n        return qSqrt.multiply(rSqrt);\n    } else {\n        final EigenDecomposition dec = new EigenDecomposition(MatrixUtils.createRealMatrix(m));\n        return dec.getSquareRoot();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..27a8707f7 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,93 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final int maxRowsColumns = 5000; // set maximum matrix size\n+    if (n > maxRowsColumns) {\n+        final QRDecomposition qr = new QRDecomposition(m);\n+        final RealMatrix q = qr.getQ();\n+        final RealMatrix r = qr.getR();\n+\n+        // Compute the square root of the Q matrix\n+        final int[] p = qr.getPivot();\n+        final int k = r.getColumnDimension();\n+        final int[] v = new int[k];\n+        for (int i = 0; i < k; i++) {\n+            v[i] = p[i] - 1;\n+        }\n+        final SubMatrix qSub = new SubMatrix(q, 0, q.getRowDimension() - 1, v);\n+        final RealMatrix qSqrt = squareRoot(qSub.getData());\n+\n+        // Compute the square root of the R matrix\n+        final double[][] rData = r.getData();\n+        final double[][] rSqrtData = new double[k][k];\n+        for (int i = 0; i < k; i++) {\n+            final double rdi = rData[i][i];\n+            for (int j = 0; j < k; j++) {\n+                if (i == j) {\n+                    rSqrtData[i][j] = Math.sqrt(rdi);\n+                } else if (i < j) {\n+                    rSqrtData[i][j] = rData[i][j] / (rSqrtData[i][i] + rSqrtData[j][j]);\n+                } else {\n+                    rSqrtData[i][j] = 0.0;\n+                }\n+            }\n+        }\n+        final RealMatrix rSqrt = MatrixUtils.createRealMatrix(rSqrtData);\n+\n+        // Combine the square roots of Q and R matrices\n+        return qSqrt.multiply(rSqrt);\n+    } else {\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n+    }\n+}\n+\n+private RealMatrix squareRoot(double[][] m) {\n+    final int n = m.length;\n+    final int maxRowsColumns = 5000; // set maximum matrix size\n+    if (n > maxRowsColumns) {\n+        final QRDecomposition qr = new QRDecomposition(m);\n+        final double[][] q = qr.getQ().getData();\n+        final double[][] r = qr.getR().getData();\n+\n+        // Compute the square root of the Q matrix\n+        final int[] p = qr.getPivot();\n+        final int k = r[0].length;\n+        final int[] v = new int[k];\n+        for (int i = 0; i < k; i++) {\n+            v[i] = p[i] - 1;\n+        }\n+        final double[][] qData = new double[n][k];\n+        for (int i = 0; i < n; i++) {\n+            for (int j = 0; j < k; j++) {\n+                qData[i][j] = q[i][v[j]];\n+            }\n+        }\n+        final RealMatrix qSqrt = squareRoot(qData);\n+\n+        // Compute the square root of the R matrix\n+        final double[][] rSqrtData = new double[k][k];\n+        for (int i = 0; i < k; i++) {\n+            final double rdi = r[i][i];\n+            for (int j = 0; j < k; j++) {\n+                if (i == j) {\n+                    rSqrtData[i][j] = Math.sqrt(rdi);\n+                } else if (i < j) {\n+                    rSqrtData[i][j] = r[i][j] / (rSqrtData[i][i] + rSqrtData[j][j]);\n+                } else {\n+                    rSqrtData[i][j] = 0.0;\n+                }\n+            }\n+        }\n+        final RealMatrix rSqrt = MatrixUtils.createRealMatrix(rSqrtData);\n+\n+        // Combine the square roots of Q and R matrices\n+        return qSqrt.multiply(rSqrt);\n+    } else {\n+        final EigenDecomposition dec = new EigenDecomposition(MatrixUtils.createRealMatrix(m));\n+        return dec.getSquareRoot();\n     }\n }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}