{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n        final int n = m.getRowDimension();\n        final double epsilon = 1e-6;\n        RealMatrix x = m;\n        RealMatrix y = MatrixUtils.createRealIdentityMatrix(n);\n\n        while (true) {\n            RealMatrix xPrev = x;\n            x = x.multiply(y).add(y.multiply(x)).scalarMultiply(0.5);\n            double delta = max(abs(xPrev.subtract(x)).getData());\n            if (delta < epsilon) {\n                break;\n            }\n            y = solve(y, xPrev, x);\n        }\n\n        return x;\n    }\n    \n    private RealMatrix solve(RealMatrix y, RealMatrix a, RealMatrix b) {\n        final int n = y.getRowDimension();\n        final RealMatrix i = MatrixUtils.createRealIdentityMatrix(n);\n        RealMatrix z = i.subtract(y.multiply(a));\n        return i.add(z).multiply(b).multiply(0.5);\n    }\n\n    private double max(double[][] a) {\n        double max = Double.MIN_VALUE;\n        for (double[] row : a) {\n            for (double val : row) {\n                max = Math.max(max, val);\n            }\n        }\n        return max;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..74cf39eb7 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,38 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+        final int n = m.getRowDimension();\n+        final double epsilon = 1e-6;\n+        RealMatrix x = m;\n+        RealMatrix y = MatrixUtils.createRealIdentityMatrix(n);\n+\n+        while (true) {\n+            RealMatrix xPrev = x;\n+            x = x.multiply(y).add(y.multiply(x)).scalarMultiply(0.5);\n+            double delta = max(abs(xPrev.subtract(x)).getData());\n+            if (delta < epsilon) {\n+                break;\n+            }\n+            y = solve(y, xPrev, x);\n+        }\n+\n+        return x;\n+    }\n+    \n+    private RealMatrix solve(RealMatrix y, RealMatrix a, RealMatrix b) {\n+        final int n = y.getRowDimension();\n+        final RealMatrix i = MatrixUtils.createRealIdentityMatrix(n);\n+        RealMatrix z = i.subtract(y.multiply(a));\n+        return i.add(z).multiply(b).multiply(0.5);\n+    }\n+\n+    private double max(double[][] a) {\n+        double max = Double.MIN_VALUE;\n+        for (double[] row : a) {\n+            for (double val : row) {\n+                max = Math.max(max, val);\n+            }\n+        }\n+        return max;\n     }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}