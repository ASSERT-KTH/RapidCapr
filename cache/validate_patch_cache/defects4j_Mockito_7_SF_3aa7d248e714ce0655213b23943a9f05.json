{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n    // Skip type variables with no bounds\n    if (typeVariable.getBounds().length == 0) {\n        return;\n    }\n    for (Type type : typeVariable.getBounds()) {\n        // Skip type variables representing themselves\n        if (type instanceof TypeVariable) {\n            TypeVariable<?> tv = (TypeVariable<?>) type;\n            if (tv.getName().equals(typeVariable.getName())) {\n                continue;\n            }\n        }\n        registerTypeVariablesOn(type);\n    }\n    // Skip actual type argument representing itself\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null \n            && !(actualTypeArgument instanceof TypeVariable)\n            && !actualTypeArgument.equals(typeVariable)) {\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..b5d90610e 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,33 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+    // Skip type variables with no bounds\n+    if (typeVariable.getBounds().length == 0) {\n+        return;\n+    }\n+    for (Type type : typeVariable.getBounds()) {\n+        // Skip type variables representing themselves\n+        if (type instanceof TypeVariable) {\n+            TypeVariable<?> tv = (TypeVariable<?>) type;\n+            if (tv.getName().equals(typeVariable.getName())) {\n+                continue;\n+            }\n+        }\n+        registerTypeVariablesOn(type);\n+    }\n+    // Skip actual type argument representing itself\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null \n+            && !(actualTypeArgument instanceof TypeVariable)\n+            && !actualTypeArgument.equals(typeVariable)) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}