{
    "patch": "protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge,\n                                  AxisState state, PlotRenderingInfo plotState) {\n        // Check if the state argument is null\n        if (state == null) {\n            throw new IllegalArgumentException(\"Null 'state' argument.\");\n        }\n\n        // Check if the label argument is null or an empty string\n        if ((label == null) || (label.isEmpty())) {\n            return state;\n        }\n\n        // Set the font, insets, color, and font metrics\n        g2.setFont(getLabelFont());\n        RectangleInsets insets = getLabelInsets();\n        g2.setPaint(getLabelPaint());\n        FontMetrics fm = g2.getFontMetrics();\n\n        // Get the label bounds and create a hotspot Shape\n        Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n        Shape hotspot;\n\n        // Calculate the coordinates of the label position and draw the text\n        if (edge == RectangleEdge.TOP) {\n            double centerX = dataArea.getCenterX();\n            double labelX = centerX - labelBounds.getWidth() / 2.0;\n            double labelY = state.getCursor() - insets.getBottom() - labelBounds.getHeight() / 2.0;\n            TextUtilities.drawRotatedString(label, g2, labelX, labelY, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n            hotspot = new Rectangle2D.Double(labelX, labelY, labelBounds.getWidth(), labelBounds.getHeight());\n            state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n        } else if (edge == RectangleEdge.BOTTOM) {\n            double centerX = dataArea.getCenterX();\n            double labelX = centerX - labelBounds.getWidth() / 2.0;\n            double labelY = state.getCursor() + insets.getTop() + labelBounds.getHeight() / 2.0;\n            TextUtilities.drawRotatedString(label, g2, labelX, labelY, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n            hotspot = new Rectangle2D.Double(labelX, labelY - labelBounds.getHeight(), labelBounds.getWidth(), labelBounds.getHeight());\n            state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n        } else if (edge == RectangleEdge.LEFT) {\n            double centerY = dataArea.getCenterY();\n            double labelX ",
    "patch_diff": "diff --git a/source/org/jfree/chart/axis/Axis.java b/source/org/jfree/chart/axis/Axis.java\nindex 78a6c66..df4c64f 100644\n--- a/source/org/jfree/chart/axis/Axis.java\n+++ b/source/org/jfree/chart/axis/Axis.java\n@@ -1089,115 +1089,46 @@ public abstract class Axis implements Cloneable, Serializable {\n      *\n      * @return Information about the axis.\n      */\n-    protected AxisState drawLabel(String label, Graphics2D g2, \n-            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, \n-            AxisState state, PlotRenderingInfo plotState) {\n-\n-        // it is unlikely that 'state' will be null, but check anyway...\n-        if (state == null) {\n-            throw new IllegalArgumentException(\"Null 'state' argument.\");\n-        }\n-        \n-        if ((label == null) || (label.equals(\"\"))) {\n-            return state;\n-        }\n-\n-        Font font = getLabelFont();\n-        RectangleInsets insets = getLabelInsets();\n-        g2.setFont(font);\n-        g2.setPaint(getLabelPaint());\n-        FontMetrics fm = g2.getFontMetrics();\n-        Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n-        Shape hotspot = null;\n-        \n-        if (edge == RectangleEdge.TOP) {\n-            AffineTransform t = AffineTransform.getRotateInstance(\n-                    getLabelAngle(), labelBounds.getCenterX(), \n-                    labelBounds.getCenterY());\n-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-            labelBounds = rotatedLabelBounds.getBounds2D();\n-            float w = (float) labelBounds.getWidth();\n-            float h = (float) labelBounds.getHeight();\n-            float labelx = (float) dataArea.getCenterX();\n-            float labely = (float) (state.getCursor() - insets.getBottom() \n-                    - h / 2.0);\n-            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n-                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n-                    labely - h / 2.0f, w, h);\n-            state.cursorUp(insets.getTop() + labelBounds.getHeight() \n-                    + insets.getBottom());\n-        }\n-        else if (edge == RectangleEdge.BOTTOM) {\n-            AffineTransform t = AffineTransform.getRotateInstance(\n-                    getLabelAngle(), labelBounds.getCenterX(), \n-                    labelBounds.getCenterY());\n-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-            labelBounds = rotatedLabelBounds.getBounds2D();\n-            float w = (float) labelBounds.getWidth();\n-            float h = (float) labelBounds.getHeight();\n-            float labelx = (float) dataArea.getCenterX();\n-            float labely = (float) (state.getCursor() + insets.getTop() \n-                    + h / 2.0);\n-            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n-                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n-                    labely - h / 2.0f, w, h);\n-            state.cursorDown(insets.getTop() + labelBounds.getHeight() \n-                    + insets.getBottom());\n-        }\n-        else if (edge == RectangleEdge.LEFT) {\n-            AffineTransform t = AffineTransform.getRotateInstance(\n-                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), \n-                    labelBounds.getCenterY());\n-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-            labelBounds = rotatedLabelBounds.getBounds2D();\n-            float w = (float) labelBounds.getWidth();\n-            float h = (float) labelBounds.getHeight();\n-            float labelx = (float) (state.getCursor() - insets.getRight() \n-                    - w / 2.0);\n-            float labely = (float) dataArea.getCenterY();\n-            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n-                    TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, \n-                    TextAnchor.CENTER);\n-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n-                    labely - h / 2.0f, w, h);\n-            state.cursorLeft(insets.getLeft() + labelBounds.getWidth() \n-                    + insets.getRight());\n-        }\n-        else if (edge == RectangleEdge.RIGHT) {\n-\n-            AffineTransform t = AffineTransform.getRotateInstance(\n-                    getLabelAngle() + Math.PI / 2.0, \n-                    labelBounds.getCenterX(), labelBounds.getCenterY());\n-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-            labelBounds = rotatedLabelBounds.getBounds2D();\n-            float w = (float) labelBounds.getWidth();\n-            float h = (float) labelBounds.getHeight();\n-            float labelx = (float) (state.getCursor() \n-                            + insets.getLeft() + w / 2.0);\n-            float labely = (float) (dataArea.getY() + dataArea.getHeight() \n-                    / 2.0);\n-            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n-                    TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, \n-                    TextAnchor.CENTER);\n-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n-                    labely - h / 2.0f, w, h);\n-            state.cursorRight(insets.getLeft() + labelBounds.getWidth() \n-                    + insets.getRight());\n-\n-        }\n-        if (plotState != null && hotspot != null) {\n-            ChartRenderingInfo owner = plotState.getOwner();\n-                EntityCollection entities = owner.getEntityCollection();\n-                if (entities != null) {\n-                    entities.add(new AxisLabelEntity(this, hotspot, \n-                            this.labelToolTip, this.labelURL));\n-                }\n-        }\n-        return state;\n-\n-    }\n+protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge,\n+                                  AxisState state, PlotRenderingInfo plotState) {\n+        // Check if the state argument is null\n+        if (state == null) {\n+            throw new IllegalArgumentException(\"Null 'state' argument.\");\n+        }\n+\n+        // Check if the label argument is null or an empty string\n+        if ((label == null) || (label.isEmpty())) {\n+            return state;\n+        }\n+\n+        // Set the font, insets, color, and font metrics\n+        g2.setFont(getLabelFont());\n+        RectangleInsets insets = getLabelInsets();\n+        g2.setPaint(getLabelPaint());\n+        FontMetrics fm = g2.getFontMetrics();\n+\n+        // Get the label bounds and create a hotspot Shape\n+        Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n+        Shape hotspot;\n+\n+        // Calculate the coordinates of the label position and draw the text\n+        if (edge == RectangleEdge.TOP) {\n+            double centerX = dataArea.getCenterX();\n+            double labelX = centerX - labelBounds.getWidth() / 2.0;\n+            double labelY = state.getCursor() - insets.getBottom() - labelBounds.getHeight() / 2.0;\n+            TextUtilities.drawRotatedString(label, g2, labelX, labelY, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n+            hotspot = new Rectangle2D.Double(labelX, labelY, labelBounds.getWidth(), labelBounds.getHeight());\n+            state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n+        } else if (edge == RectangleEdge.BOTTOM) {\n+            double centerX = dataArea.getCenterX();\n+            double labelX = centerX - labelBounds.getWidth() / 2.0;\n+            double labelY = state.getCursor() + insets.getTop() + labelBounds.getHeight() / 2.0;\n+            TextUtilities.drawRotatedString(label, g2, labelX, labelY, TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n+            hotspot = new Rectangle2D.Double(labelX, labelY - labelBounds.getHeight(), labelBounds.getWidth(), labelBounds.getHeight());\n+            state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n+        } else if (edge == RectangleEdge.LEFT) {\n+            double centerY = dataArea.getCenterY();\n+            double labelX \n \n     /**\n      * Draws an axis line at the current cursor position and edge.",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}