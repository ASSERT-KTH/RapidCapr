{
    "patch": "      Node lastArg = null;\n      for (Node arg : argList.children()) {\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          if (lastArg == null) {\n            // The first unreferenced argument.\n            lastArg = arg;\n          }\n        } else {\n          // There was a gap that contained only unreferenced arguments.\n          if (lastArg != null) {\n            argList.removeChildren(lastArg, arg);\n            compiler.reportCodeChange();\n            lastArg = null;\n          }\n        }\n      }\n\n      // Strip the last unreferenced arguments off the end.\n      if (lastArg != null) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..2ada4492 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,28 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node lastArg = null;\n+      for (Node arg : argList.children()) {\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          if (lastArg == null) {\n+            // The first unreferenced argument.\n+            lastArg = arg;\n+          }\n+        } else {\n+          // There was a gap that contained only unreferenced arguments.\n+          if (lastArg != null) {\n+            argList.removeChildren(lastArg, arg);\n+            compiler.reportCodeChange();\n+            lastArg = null;\n+          }\n+        }\n+      }\n+\n+      // Strip the last unreferenced arguments off the end.\n+      if (lastArg != null) {\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}