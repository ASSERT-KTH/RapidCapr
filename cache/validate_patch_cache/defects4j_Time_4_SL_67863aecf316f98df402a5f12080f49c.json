{
    "patch": "DateTimeField[] fields = new DateTimeField[newTypes.length];\nfor (int j = 0; j < newTypes.length; j++) {\n    fields[j] = newTypes[j].getField(iChronology);\n}\nPartial newPartial = new Partial(fields, newValues);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..1104ae88 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -461,7 +461,11 @@ public final class Partial\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+DateTimeField[] fields = new DateTimeField[newTypes.length];\n+for (int j = 0; j < newTypes.length; j++) {\n+    fields[j] = newTypes[j].getField(iChronology);\n+}\n+Partial newPartial = new Partial(fields, newValues);\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }",
    "result_reason": "error: no suitable constructor found for Partial(DateTimeField[],int[])",
    "test_result": "ERROR"
}