{
    "patch": "private boolean isInlinableObject(List<Reference> refs) {\n    boolean ret = false;\n    for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        // Ignore indirect references, like x.y (except x.y(), since\n        // the function referenced by y might reference 'this').\n        if (parent.isGetProp()) {\n            Preconditions.checkState(parent.getFirstChild() == name);\n            if (gramps.isCall()\n                    && gramps.getFirstChild() == parent) {\n                return false;\n            }\n\n            // Handle special cases where properties are defined elsewhere.\n            if (!parent.isQualifiedName()) {\n                continue;\n            }\n            Var var = t.getScope().getVar(parent.getFirstChild().getQualifiedName());\n            if (var == null) {\n                continue;\n            }\n            if (var.isExtern()) {\n                // \"extern\" variables cannot have their properties\n                // flattened.\n                return false;\n            }\n            Node rvalue = var.getInitialValue();\n            if (rvalue == null) {\n                continue;\n            }\n            if (!rvalue.isObjectLit()) {\n                // The variable should be assigned an object literal.\n                return false;\n            }\n            if (!NodeUtil.isExpressionResultUsed(gramps)) {\n                // We're modifying a property of the object, not\n                // the object itself.\n                continue;\n            }\n            parent = var.getParentNode();\n        }\n\n        // Only rewrite VAR declarations or simple assignment statements\n        if (!isVarOrAssignExprLhs(name)) {\n            return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n            // A var with no assignment.\n            continue;\n        }\n\n        // We're looking for object literal assignments only.\n        if (!val.isObjectLit()) {\n            return false;\n        }\n\n        // Detect self-referential object literal assignments.\n        Preconditions.checkState(parent.isAssign() || NodeUtil.isNameDeclaration(parent));\n        Node grandParent = parent.getParent();\n        if (grandParent.isForIn() || grandParent.isForOf()) {\n            // In a for-in loop, we don't know what names\n            // are being assigned, so play it safe.\n            return false;\n        }\n        if (grandParent.isAssign() && parent.getNext() != null) {\n            // Chained assignment: a = b = {c: d}\n            // We can optimize this, but only if 'a'\n            // is a declaration (var, let, const).\n            Node aName = parent.getFirstChild();\n            Preconditions.checkState(\n                    aName.isName() || aName.isString());\n            if (aName.isName()) {\n                Var aVar = t.getScope().getVar(aName.getString());\n                if (aVar == null || !NodeUtil.isNameDeclaration(aVar.getParentNode())) {\n                    return false;\n                }\n            }\n        } else if (grandParent.isName()) {\n            // x = {a: b};\n            // This is okay, as long as 'x' is not used\n            // anywhere else.\n            String newName = varNameConverter.getNewName(name.getString() + \"_obj\");\n            NodeUtil.rename(name, newname, t);\n            if (!OptimizeCalls.getReferences(t.getScope(), name).isEmpty()) {\n                NodeUtil.rename(name, name.getString(), t);\n                return false;\n            }\n            varNameConverter.addMapping(name.getString(), newname);\n            Node varNode = parent.getParent();\n            while (!varNode.isBlock()) {\n                varNode = varNode.getParent();\n            }\n            Node declNode = varNode.getParent();\n            for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n                Preconditions.checkState(child.isStringKey() || child.isMemberFunctionDef());\n                if (child.isComputedProp()) {\n                    return false;\n                }\n                Node keyNode = child.getFirstChild();\n                Preconditions.checkState(\n                        keyNode.isString() || keyNode.isNumber());\n                Node valueNode = keyNode.getNext();\n                Node lhs = IR.getprop(IR.name(newname), IR.string(keyNode.getString()));\n                lhs.useSourceInfoIfMissingFromForTree(child);\n                if (valueNode.isFunction()) {\n                    Node expr = IR.exprResult(\n                            IR.assign(lhs, valueNode).useSourceInfoFrom(valueNode));\n                    declNode.addChildToFront(expr);\n                    continue;\n                }\n                Node expr = IR.exprResult(IR.assign(lhs, valueNode));\n                declNode.addChildToFront(expr);\n            }\n            BlocklyCompiler.updateScopeLocalVarReferenceMaps(\n                    varNode.getNext(), ref.getNode().getString(), newname, t);\n            return false;\n        } else if (parent.getNext() != null || ref.isLvalue()) {\n            return false;\n        }\n\n        // We have found an acceptable object literal assignment. As\n        // long as there are no other assignments that mess things up,\n        // we can inline.\n        ret = true;\n    }\n    return ret;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..e2f7eee8 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,92 +152,138 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      for (Reference ref : refs) {\n+private boolean isInlinableObject(List<Reference> refs) {\n+    boolean ret = false;\n+    for (Reference ref : refs) {\n         Node name = ref.getNode();\n         Node parent = ref.getParent();\n         Node gramps = ref.getGrandparent();\n \n         // Ignore indirect references, like x.y (except x.y(), since\n         // the function referenced by y might reference 'this').\n-        //\n         if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n+            Preconditions.checkState(parent.getFirstChild() == name);\n+            if (gramps.isCall()\n+                    && gramps.getFirstChild() == parent) {\n+                return false;\n+            }\n \n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          continue;\n+            // Handle special cases where properties are defined elsewhere.\n+            if (!parent.isQualifiedName()) {\n+                continue;\n+            }\n+            Var var = t.getScope().getVar(parent.getFirstChild().getQualifiedName());\n+            if (var == null) {\n+                continue;\n+            }\n+            if (var.isExtern()) {\n+                // \"extern\" variables cannot have their properties\n+                // flattened.\n+                return false;\n+            }\n+            Node rvalue = var.getInitialValue();\n+            if (rvalue == null) {\n+                continue;\n+            }\n+            if (!rvalue.isObjectLit()) {\n+                // The variable should be assigned an object literal.\n+                return false;\n+            }\n+            if (!NodeUtil.isExpressionResultUsed(gramps)) {\n+                // We're modifying a property of the object, not\n+                // the object itself.\n+                continue;\n+            }\n+            parent = var.getParentNode();\n         }\n \n         // Only rewrite VAR declarations or simple assignment statements\n         if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n+            return false;\n         }\n \n         Node val = ref.getAssignedValue();\n         if (val == null) {\n-          // A var with no assignment.\n-          continue;\n+            // A var with no assignment.\n+            continue;\n         }\n \n         // We're looking for object literal assignments only.\n         if (!val.isObjectLit()) {\n-          return false;\n+            return false;\n         }\n \n-        // Make sure that the value is not self-refential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n+        // Detect self-referential object literal assignments.\n+        Preconditions.checkState(parent.isAssign() || NodeUtil.isNameDeclaration(parent));\n+        Node grandParent = parent.getParent();\n+        if (grandParent.isForIn() || grandParent.isForOf()) {\n+            // In a for-in loop, we don't know what names\n+            // are being assigned, so play it safe.\n             return false;\n-          }\n-\n-\n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n+        }\n+        if (grandParent.isAssign() && parent.getNext() != null) {\n+            // Chained assignment: a = b = {c: d}\n+            // We can optimize this, but only if 'a'\n+            // is a declaration (var, let, const).\n+            Node aName = parent.getFirstChild();\n+            Preconditions.checkState(\n+                    aName.isName() || aName.isString());\n+            if (aName.isName()) {\n+                Var aVar = t.getScope().getVar(aName.getString());\n+                if (aVar == null || !NodeUtil.isNameDeclaration(aVar.getParentNode())) {\n+                    return false;\n+                }\n+            }\n+        } else if (grandParent.isName()) {\n+            // x = {a: b};\n+            // This is okay, as long as 'x' is not used\n+            // anywhere else.\n+            String newName = varNameConverter.getNewName(name.getString() + \"_obj\");\n+            NodeUtil.rename(name, newname, t);\n+            if (!OptimizeCalls.getReferences(t.getScope(), name).isEmpty()) {\n+                NodeUtil.rename(name, name.getString(), t);\n                 return false;\n-              }\n-              refNode = refNode.getParent();\n             }\n-          }\n+            varNameConverter.addMapping(name.getString(), newname);\n+            Node varNode = parent.getParent();\n+            while (!varNode.isBlock()) {\n+                varNode = varNode.getParent();\n+            }\n+            Node declNode = varNode.getParent();\n+            for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {\n+                Preconditions.checkState(child.isStringKey() || child.isMemberFunctionDef());\n+                if (child.isComputedProp()) {\n+                    return false;\n+                }\n+                Node keyNode = child.getFirstChild();\n+                Preconditions.checkState(\n+                        keyNode.isString() || keyNode.isNumber());\n+                Node valueNode = keyNode.getNext();\n+                Node lhs = IR.getprop(IR.name(newname), IR.string(keyNode.getString()));\n+                lhs.useSourceInfoIfMissingFromForTree(child);\n+                if (valueNode.isFunction()) {\n+                    Node expr = IR.exprResult(\n+                            IR.assign(lhs, valueNode).useSourceInfoFrom(valueNode));\n+                    declNode.addChildToFront(expr);\n+                    continue;\n+                }\n+                Node expr = IR.exprResult(IR.assign(lhs, valueNode));\n+                declNode.addChildToFront(expr);\n+            }\n+            BlocklyCompiler.updateScopeLocalVarReferenceMaps(\n+                    varNode.getNext(), ref.getNode().getString(), newname, t);\n+            return false;\n+        } else if (parent.getNext() != null || ref.isLvalue()) {\n+            return false;\n         }\n \n-\n         // We have found an acceptable object literal assignment. As\n         // long as there are no other assignments that mess things up,\n         // we can inline.\n         ret = true;\n-      }\n-      return ret;\n     }\n+    return ret;\n+}\n \n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}