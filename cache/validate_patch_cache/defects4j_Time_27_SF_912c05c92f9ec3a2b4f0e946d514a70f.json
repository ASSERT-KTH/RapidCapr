{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size == 0) {\n        return new PeriodFormatter(null, null);\n    } else if (size == 1) {\n        Object obj = elementPairs.get(0);\n        if (obj instanceof PeriodPrinter) {\n            return new PeriodFormatter((PeriodPrinter) obj, null);\n        } else if (obj instanceof PeriodParser) {\n            return new PeriodFormatter(null, (PeriodParser) obj);\n        } else {\n            throw new IllegalArgumentException(\"Invalid input\");\n        }\n    } else {\n        Object first = elementPairs.get(0);\n        if (first instanceof Separator) {\n            Separator sep = (Separator) first;\n            int i = 1;\n            while (i < size && elementPairs.get(i) instanceof Separator) {\n                if (notPrinter && notParser && i == size - 1) {\n                    throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n                }\n                sep = sep.finish(null, null);\n                sep = (Separator) elementPairs.get(i++);\n            }\n            List<Object> sublist = elementPairs.subList(i, size);\n            PeriodFormatter f = toFormatter(sublist, notPrinter, notParser);\n            PeriodPrinter p = notPrinter ? null : sep.finish(f.getPrinter(), null);\n            PeriodParser pp = notParser ? null : sep.finish(null, f.getParser());\n            return new PeriodFormatter(p, pp);\n        } else {\n            Object[] comp = createComposite(elementPairs);\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..bd406979 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,45 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size == 0) {\n+        return new PeriodFormatter(null, null);\n+    } else if (size == 1) {\n+        Object obj = elementPairs.get(0);\n+        if (obj instanceof PeriodPrinter) {\n+            return new PeriodFormatter((PeriodPrinter) obj, null);\n+        } else if (obj instanceof PeriodParser) {\n+            return new PeriodFormatter(null, (PeriodParser) obj);\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid input\");\n+        }\n+    } else {\n+        Object first = elementPairs.get(0);\n+        if (first instanceof Separator) {\n+            Separator sep = (Separator) first;\n+            int i = 1;\n+            while (i < size && elementPairs.get(i) instanceof Separator) {\n+                if (notPrinter && notParser && i == size - 1) {\n+                    throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+                }\n+                sep = sep.finish(null, null);\n+                sep = (Separator) elementPairs.get(i++);\n+            }\n+            List<Object> sublist = elementPairs.subList(i, size);\n+            PeriodFormatter f = toFormatter(sublist, notPrinter, notParser);\n+            PeriodPrinter p = notPrinter ? null : sep.finish(f.getPrinter(), null);\n+            PeriodParser pp = notParser ? null : sep.finish(null, f.getParser());\n+            return new PeriodFormatter(p, pp);\n         } else {\n+            Object[] comp = createComposite(elementPairs);\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}