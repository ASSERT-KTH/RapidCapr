{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    SingularValueDecomposition svd = new SingularValueDecomposition(m);\n    RealMatrix s = svd.getS();\n    RealMatrix sqrtS = MatrixUtils.createRealMatrix(s.getRowDimension(),\n                                                     s.getColumnDimension());\n    double epsilon = Math.ulp(1d);\n    for (int i = 0; i < s.getRowDimension(); i++) {\n        for (int j = 0; j < s.getColumnDimension(); j++) {\n            sqrtS.setEntry(i, j, FastMath.sqrt(FastMath.max(s.getEntry(i, j), epsilon)));\n        }\n    }\n    RealMatrix u = svd.getU();\n    RealMatrix v = svd.getVT();\n    return u.multiply(sqrtS).multiply(v);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..59ba4cbfb 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,19 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    SingularValueDecomposition svd = new SingularValueDecomposition(m);\n+    RealMatrix s = svd.getS();\n+    RealMatrix sqrtS = MatrixUtils.createRealMatrix(s.getRowDimension(),\n+                                                     s.getColumnDimension());\n+    double epsilon = Math.ulp(1d);\n+    for (int i = 0; i < s.getRowDimension(); i++) {\n+        for (int j = 0; j < s.getColumnDimension(); j++) {\n+            sqrtS.setEntry(i, j, FastMath.sqrt(FastMath.max(s.getEntry(i, j), epsilon)));\n+        }\n     }\n+    RealMatrix u = svd.getU();\n+    RealMatrix v = svd.getVT();\n+    return u.multiply(sqrtS).multiply(v);\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}