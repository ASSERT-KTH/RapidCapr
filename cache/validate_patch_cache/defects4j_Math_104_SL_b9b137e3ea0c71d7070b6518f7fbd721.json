{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException();\n    }\n\n    double gamma = Gamma.gamma(a);\n    double igamma = Gamma.regularizedGammaQ(a, x);\n\n    return 1.0 - igamma * gamma / Math.pow(x, a);\n}\n\n// infill location\n\nprivate static final double DEFAULT_EPSILON = 1e-9;\n\npublic static void assertEquals(double expected, double actual, double eps) {\n    if (Double.isNaN(expected) && Double.isNaN(actual))\n        return;\n    if (Double.isInfinite(expected) && Double.isInfinite(actual) && Math.signum(expected) == Math.signum(actual))\n        return;\n    if (Double.compare(expected, actual) == 0)\n        return;\n    if (!(Math.abs(expected - actual) <= Math.max(DEFAULT_EPSILON, Math.abs(eps * expected)))) {\n        throw new AssertionFailedError(\"expected:<\" + expected + \"> but was:<\" + actual + \">\");\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bade3b581 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,7 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}