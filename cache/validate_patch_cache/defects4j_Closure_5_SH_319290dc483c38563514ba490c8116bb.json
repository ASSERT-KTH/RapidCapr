{
    "patch": "    private boolean isInlinableObject(List<Reference> refs) {\n      boolean ret = false;\n      Set<String> validProperties = Sets.newHashSet();\n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        if (parent.isGetProp()) {\n          Preconditions.checkState(parent.getFirstChild() == name);\n          \n          // A call target may be using the object as a 'this' value.\n          if (gramps.isCall()\n              && gramps.getFirstChild() == parent) {\n            return false;\n          }\n\n          // Do not inline deleted properties\n          if (parent.getParent().isDelProp()) {\n            return false;\n          }\n\n          String propName = parent.getLastChild().getString();\n          if (!validProperties.contains(propName)) {\n            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n              validProperties.add(propName);\n            } else {\n              return false;\n            }\n          }\n          continue;\n        }\n\n        if (isVarOrAssignExprLhs(name)) {\n          Node val = ref.getAssignedValue();\n          if (val != null && val.isObjectLit()) {\n\n            // Check if value is self-referential\n            for (Node child = val.getFirstChild(); child != null;\n                child = child.getNext()) {\n              if (child.isGetterDef() || child.isSetterDef()) {\n                return false;\n              }\n\n              validProperties.add(child.getString());\n\n              Node childVal = child.getFirstChild();\n              for (Reference t : refs) {\n                Node refNode = t.getParent();\n                while (!NodeUtil.isStatementBlock(refNode)) {\n                  if (refNode == childVal) {\n                    return false;\n                  }\n                  refNode = refNode.getParent();\n                }\n              }\n            }\n\n            // We have found an acceptable object literal assignment. As\n            // long as there are no other assignments that mess things up,\n            // we can inline.\n            ret = true;\n          } else {\n            return false;\n          }\n        } else {\n          return false;\n        }\n      }\n      return ret;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..2bbf50d0 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,77 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+    private boolean isInlinableObject(List<Reference> refs) {\n+      boolean ret = false;\n+      Set<String> validProperties = Sets.newHashSet();\n+      for (Reference ref : refs) {\n+        Node name = ref.getNode();\n+        Node parent = ref.getParent();\n+        Node gramps = ref.getGrandparent();\n+\n+        if (parent.isGetProp()) {\n+          Preconditions.checkState(parent.getFirstChild() == name);\n+          \n+          // A call target may be using the object as a 'this' value.\n+          if (gramps.isCall()\n+              && gramps.getFirstChild() == parent) {\n+            return false;\n+          }\n+\n+          // Do not inline deleted properties\n+          if (parent.getParent().isDelProp()) {\n+            return false;\n+          }\n+\n+          String propName = parent.getLastChild().getString();\n+          if (!validProperties.contains(propName)) {\n+            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n+              validProperties.add(propName);\n+            } else {\n+              return false;\n+            }\n+          }\n+          continue;\n+        }\n+\n+        if (isVarOrAssignExprLhs(name)) {\n+          Node val = ref.getAssignedValue();\n+          if (val != null && val.isObjectLit()) {\n+\n+            // Check if value is self-referential\n+            for (Node child = val.getFirstChild(); child != null;\n+                child = child.getNext()) {\n+              if (child.isGetterDef() || child.isSetterDef()) {\n+                return false;\n+              }\n+\n+              validProperties.add(child.getString());\n+\n+              Node childVal = child.getFirstChild();\n+              for (Reference t : refs) {\n+                Node refNode = t.getParent();\n+                while (!NodeUtil.isStatementBlock(refNode)) {\n+                  if (refNode == childVal) {\n+                    return false;\n+                  }\n+                  refNode = refNode.getParent();\n+                }\n+              }\n+            }\n+\n+            // We have found an acceptable object literal assignment. As\n+            // long as there are no other assignments that mess things up,\n+            // we can inline.\n+            ret = true;\n+          } else {\n+            return false;\n+          }\n+        } else {\n+          return false;\n+        }\n+      }\n+      return ret;\n+    }\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}