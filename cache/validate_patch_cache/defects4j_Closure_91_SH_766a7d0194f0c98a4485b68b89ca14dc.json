{
    "patch": "      if (NodeUtil.isFunctionExpression(n)) {\n        Node parentAssign = NodeUtil.getParentOfType(parent, Token.ASSIGN);\n        if (parentAssign != null) {\n          Node lhs = parentAssign.getFirstChild();\n          if (NodeUtil.isGet(lhs)) {\n            Node llhs = lhs.getFirstChild();\n            if (llhs.getType() == Token.NAME) {\n              String sname = llhs.getString();\n              if (sname != null && !\"prototype\".equals(sname)) {\n                return false;\n              }\n            }\n          }\n          return(lhs == assignLhsChild);\n        }\n        return true;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..309e0b8f 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,23 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isFunctionExpression(n)) {\n+        Node parentAssign = NodeUtil.getParentOfType(parent, Token.ASSIGN);\n+        if (parentAssign != null) {\n+          Node lhs = parentAssign.getFirstChild();\n+          if (NodeUtil.isGet(lhs)) {\n+            Node llhs = lhs.getFirstChild();\n+            if (llhs.getType() == Token.NAME) {\n+              String sname = llhs.getString();\n+              if (sname != null && !\"prototype\".equals(sname)) {\n+                return false;\n+              }\n+            }\n+          }\n+          return(lhs == assignLhsChild);\n+        }\n+        return true;\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}