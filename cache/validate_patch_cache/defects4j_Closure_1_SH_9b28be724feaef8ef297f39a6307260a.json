{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    // List of parameter names used in this function.\n    Set<String> usedParams = new HashSet<>();\n    NodeTraversal.traverseEs6(compiler, function, new AbstractShallowCallback() {\n      @Override\n      public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n.isName() && parent.isParamList()) {\n          usedParams.add(n.getString());\n        }\n      }\n    });\n\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node currArg = argList.getFirstChild();\n      while (currArg != null && !usedParams.isEmpty()) {\n        Node nextArg = currArg.getNext();\n        if (!usedParams.contains(currArg.getString())) {\n          argList.removeChild(currArg);\n          compiler.reportCodeChange();\n        } else {\n          // Mark the parameter as used.\n          usedParams.remove(currArg.getString());\n        }\n        currArg = nextArg;\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..ee197e1b 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,45 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    // List of parameter names used in this function.\n+    Set<String> usedParams = new HashSet<>();\n+    NodeTraversal.traverseEs6(compiler, function, new AbstractShallowCallback() {\n+      @Override\n+      public void visit(NodeTraversal t, Node n, Node parent) {\n+        if (n.isName() && parent.isParamList()) {\n+          usedParams.add(n.getString());\n+        }\n+      }\n+    });\n+\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node currArg = argList.getFirstChild();\n+      while (currArg != null && !usedParams.isEmpty()) {\n+        Node nextArg = currArg.getNext();\n+        if (!usedParams.contains(currArg.getString())) {\n+          argList.removeChild(currArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          // Mark the parameter as used.\n+          usedParams.remove(currArg.getString());\n+        }\n+        currArg = nextArg;\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}