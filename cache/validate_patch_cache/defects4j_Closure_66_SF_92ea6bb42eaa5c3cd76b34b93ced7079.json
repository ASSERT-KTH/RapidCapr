{
    "patch": "public static double getTypedPercent(String javascript) {\n    int length = javascript.length();\n    int inComment = 0;\n    int typedChars = 0;\n\n    for (int i = 0; i < length; i++) {\n        char currentChar = javascript.charAt(i);\n        if (inComment == 0) {\n            if (currentChar == '/' && i < length - 1 && javascript.charAt(i + 1) == '/') {\n                inComment = 1;\n                i++;\n            } else if (i < length - 1 && currentChar == '/' && javascript.charAt(i + 1) == '*') {\n                inComment = 2;\n                i++;\n            } else if (Character.isLetterOrDigit(currentChar) || currentChar == '{' || currentChar == '}' || currentChar == '(' || currentChar == ')' || currentChar == ';' || currentChar == '=') {\n                typedChars++;\n            }\n        } else if (inComment == 1 && currentChar == '\\n') {\n            inComment = 0;\n        } else if (inComment == 2 && currentChar == '*' && i < length - 1 && javascript.charAt(i + 1) == '/') {\n            inComment = 0;\n            i++;\n        }\n    }\n\n    return ((double) typedChars / length) * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..d93bec40 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,33 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String javascript) {\n+    int length = javascript.length();\n+    int inComment = 0;\n+    int typedChars = 0;\n+\n+    for (int i = 0; i < length; i++) {\n+        char currentChar = javascript.charAt(i);\n+        if (inComment == 0) {\n+            if (currentChar == '/' && i < length - 1 && javascript.charAt(i + 1) == '/') {\n+                inComment = 1;\n+                i++;\n+            } else if (i < length - 1 && currentChar == '/' && javascript.charAt(i + 1) == '*') {\n+                inComment = 2;\n+                i++;\n+            } else if (Character.isLetterOrDigit(currentChar) || currentChar == '{' || currentChar == '}' || currentChar == '(' || currentChar == ')' || currentChar == ';' || currentChar == '=') {\n+                typedChars++;\n+            }\n+        } else if (inComment == 1 && currentChar == '\\n') {\n+            inComment = 0;\n+        } else if (inComment == 2 && currentChar == '*' && i < length - 1 && javascript.charAt(i + 1) == '/') {\n+            inComment = 0;\n+            i++;\n+        }\n+    }\n+\n+    return ((double) typedChars / length) * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}