{
    "patch": "  @Override\n  public JSType greatestSubtype(JSType other) {\n    if (other.isUnknownType() || equals(other)) {\n      // this UnionType is already the greatest known subtype of 'other'\n      return this;\n    } else if (other.isUnionType()) {\n      Set<JSType> newAlts = new LinkedHashSet<>();\n      newAlts.addAll(alternates);\n      for (JSType otherAlternate : ((UnionType) other).alternates) {\n        newAlts.add(getNativeTypes(otherAlternate).getTypeWithoutSubtypes());\n      }\n      return new UnionType(getNativeTypes, newAlts).evaluate(false);\n    } else if (isSubtype(other)) {\n      return other;\n    } else if (this.isObject() && other.isObject()) {\n      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    } else {\n      return getNativeType(JSTypeNative.NO_TYPE);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..bb713c2c 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -288,7 +288,26 @@ public class UnionType extends JSType {\n       builder.addAlternate(that);\n     }\n     JSType result = builder.build();\n-    if (result != null) {\n+  @Override\n+  public JSType greatestSubtype(JSType other) {\n+    if (other.isUnknownType() || equals(other)) {\n+      // this UnionType is already the greatest known subtype of 'other'\n+      return this;\n+    } else if (other.isUnionType()) {\n+      Set<JSType> newAlts = new LinkedHashSet<>();\n+      newAlts.addAll(alternates);\n+      for (JSType otherAlternate : ((UnionType) other).alternates) {\n+        newAlts.add(getNativeTypes(otherAlternate).getTypeWithoutSubtypes());\n+      }\n+      return new UnionType(getNativeTypes, newAlts).evaluate(false);\n+    } else if (isSubtype(other)) {\n+      return other;\n+    } else if (this.isObject() && other.isObject()) {\n+      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    } else {\n+      return getNativeType(JSTypeNative.NO_TYPE);\n+    }\n+  }\n       return result;\n     } else if (this.isObject() && that.isObject()) {\n       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}