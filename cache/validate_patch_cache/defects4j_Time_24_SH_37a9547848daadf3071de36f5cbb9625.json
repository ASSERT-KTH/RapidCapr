{
    "patch": "                // validate savedFields[i].set() result\n                for (int j = 0; j < i; j++) {\n                    if (savedFields[i].iField.getType() == savedFields[j].iField.getType()) {\n                        int value1 = savedFields[i].iValue;\n                        int value2 = savedFields[j].iValue;\n                        if (value1 != value2) {\n                            String conflictMessage = \"Conflict found: \" + savedFields[i].iField.getName() + \" \" + value1 + \" and \" + value2;\n                            if (text != null) {\n                                conflictMessage = \"Cannot parse \\\"\" + text + \"\\\": \" + conflictMessage;\n                            }\n                            throw new IllegalArgumentException(conflictMessage);\n                        }\n                    }\n                }\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        } catch (IllegalArgumentException e) {\n            if (text != null) {\n                e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage(), e);\n            }\n            throw e;\n        }  ",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..7be4d8be 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,32 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                // validate savedFields[i].set() result\n+                for (int j = 0; j < i; j++) {\n+                    if (savedFields[i].iField.getType() == savedFields[j].iField.getType()) {\n+                        int value1 = savedFields[i].iValue;\n+                        int value2 = savedFields[j].iValue;\n+                        if (value1 != value2) {\n+                            String conflictMessage = \"Conflict found: \" + savedFields[i].iField.getName() + \" \" + value1 + \" and \" + value2;\n+                            if (text != null) {\n+                                conflictMessage = \"Cannot parse \\\"\" + text + \"\\\": \" + conflictMessage;\n+                            }\n+                            throw new IllegalArgumentException(conflictMessage);\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        } catch (IllegalArgumentException e) {\n+            if (text != null) {\n+                e = new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage(), e);\n+            }\n+            throw e;\n+        }  \n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'try' without 'catch' or 'finally'",
    "test_result": "ERROR"
}