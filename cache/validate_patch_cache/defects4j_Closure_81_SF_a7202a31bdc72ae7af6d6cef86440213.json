{
    "patch": "public class TransformDispatcher extends IRFactory.TransformDispatcher {\n\n  private AstNode transform(AstNode node) {\n    return node == null ? null : node.accept(this);\n  }\n\n  private Node newNode(Token token) {\n    return new Node(token);\n  }\n\n  private Node newNode(Token token, Node child) {\n    Node result = newNode(token);\n    result.addChildToBack(child);\n    return result;\n  }\n\n  private Node newNode(Token token, Node left, Node right) {\n    Node result = newNode(token, left);\n    result.addChildToBack(right);\n    return result;\n  }\n\n  private Node newNode(Token token, Node child1, Node child2, Node child3) {\n    Node result = newNode(token, child1, child2);\n    result.addChildToBack(child3);\n    return result;\n  }\n\n  private Name createName(String label) {\n    return label == null ? new Name() : new Name(null, label);\n  }\n\n  @Override\n  public Node processFunctionNode(FunctionNode functionNode) {\n    Name name = functionNode.getFunctionName();\n    Boolean isUnnamedFunction = false;\n\n    if (name == null) {\n      name = createName(\"\");\n      isUnnamedFunction = true;\n    }\n\n    Node function = newNode(Token.FUNCTION);\n    Node newName = transform(name);\n\n    if (isUnnamedFunction) {\n      newName.setLineno(functionNode.getLineno());\n      int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n      newName.setCharno(position2charno(lpColumn));\n    }\n\n    function.addChildToBack(newName);\n\n    Node lp = newNode(Token.LP);\n    Name fnName = functionNode.getFunctionName();\n    if (fnName != null) {\n      lp.setLineno(fnName.getLineno());\n    } else {\n      lp.setLineno(functionNode.getLineno());\n    }\n\n    int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n    lp.setCharno(position2charno(lparenCharno));\n\n    for (AstNode param : functionNode.getParams()) {\n      lp.addChildToBack(transform(param));\n    }\n\n    function.addChildToBack(lp);\n    Node bodyNode = transform(functionNode.getBody());\n    parseDirectives(bodyNode);\n    function.addChildToBack(bodyNode);\n\n    return function;\n  }\n\n  @Override\n  protected Node createName(Name name) {\n    return new Node(Token.NAME, name);\n  }\n\n  @Override\n  protected Node createString(String string) {\n    return new Node(Token.STRING, string);\n  }\n\n  @Override\n  protected Node createNumber(String number) {\n    return new Node(Token.NUMBER, number);\n  }\n\n  @Override\n  protected Node createCall(Node target) {\n    return newNode(Token.CALL, target);\n  }\n\n  @Override\n  protected Node createPropertyGet(Node target, String property) {\n    return newNode(Token.GETPROP, target, new Node(Token.STRING, property));\n  }\n\n  @Override\n  protected Node createIndexGet(Node target, Node index) {\n    return newNode(Token.GETELEM, target, index);\n  }\n\n  @Override\n  protected Node createUnary(int type, Node child) {\n    return newNode(type, child);\n  }\n\n  @Override\n  protected Node createBinary(int type, Node left, Node right) {\n    return newNode(type, left, right);\n  }\n\n  @Override\n  protected Node createConditional(Node condition, Node ifTrue, Node ifFalse) {\n    return newNode(Token.HOOK, condition, ifTrue, ifFalse);\n  }\n\n  @Override\n  protected Node createAssignment(int type, Node left, Node right) {\n    return newNode(type, left, right);\n  }\n\n  @Override\n  protected Node createVariable(Name name) {\n    return newNode(Token.NAME, name);\n  }\n\n  @Override\n  protected Node createBlock() {\n    return newNode(Token.BLOCK);\n  }\n\n  @Override\n  protected Node createForIn(Node iterator, Node iterable, Node body) {\n    return newNode(Token.FOR, iterator, iterable, body);\n  }\n\n  @Override\n  protected Node createFor(Node initializer, Node condition, Node increment, Node body) {\n    return newNode(Token.FOR, initializer, condition, increment, body);\n  }\n\n  @Override\n  protected Node createWhile(Node condition, Node body) {\n    return newNode(Token.WHILE, condition, body);\n  }\n\n  @Override\n  protected Node createDoWhile(Node body, Node condition) {\n    return newNode(Token.DO, body, condition);\n  }\n\n  @Override\n  protected Node createSwitch(Node expr) {\n    return newNode(Token.SWITCH, expr);\n  }\n\n  @Override\n  protected Node createSwitchCase(Node expression) {\n    return newNode(Token.CASE, expression);\n  }\n\n  @Override\n  protected Node createDefaultCase() {\n    return newNode(Token.DEFAULT);\n  }\n\n  @Override\n  protected Node createBreak(String label) {\n    return createStatement(Token.BREAK, label);\n  }\n\n  @Override\n  protected Node createContinue(String label) {\n    return createStatement(Token.CONTINUE, label);\n  }\n\n  private Node createStatement(int token, String label) {\n    Node statement = newNode(token);\n    if (label != null) {\n      statement.addChildToBack(newNode(Token.LABEL_NAME, createName(label)));\n    }\n    return statement;\n  }\n\n  @Override\n  protected Node createThrow(Node expression) {\n    return newNode(Token.THROW, expression);\n  }\n\n  @Override\n  protected Node createTryCatchFinally(Node tryBlock, Node catchBlock, Node finallyBlock) {\n    Node result = newNode(Token.TRY, tryBlock);\n    if (catchBlock != null) {\n      result.addChildToBack(catchBlock);\n    }\n    if (finallyBlock != null) {\n      result.addChildToBack(finallyBlock);\n    }\n    return result;\n  }\n\n  @Override\n  protected Node createArgumentList() {\n    return newNode(Token.LIST);\n  }\n\n  @Override\n  protected Node createElementList() {\n    return newNode(Token.ARRAYLIT);\n  }\n\n  @Override\n  protected Node createObjectLiteral() {\n    return newNode(Token.OBJECTLIT);\n  }\n\n  @Override\n  protected Node createGetterProperty(Node property) {\n    return newNode(Token.GETTER_DEF, property);\n  }\n\n  @Override\n  protected Node createSetterProperty(Node property, Node parameter) {\n    return newNode(Token.SETTER_DEF, property, new Node(Token.PARAM_LIST, parameter));\n  }\n\n  @Override\n  protected Node createRegExpLiteral(String regexp) {\n    return newNode(Token.REGEXP, new Node(Token.STRING, regexp),\n        new Node(Token.STRING, \"\"));\n  }\n\n  @Override\n  protected Node createFunctionNode(boolean isExpression, Name name, Node params, Node body) {\n    Node function = newNode(Token.FUNCTION);\n    if (name != null) {\n      function.addChildToBack(transform(name));\n    }\n\n    Node lp = new Node(Token.LP);\n    if (params != null) {\n      lp.addChildrenToFront(transformList((List<?>) params));\n    }\n    function.addChildToBack(lp);\n\n    if (body != null) {\n      function.addChildToBack(transform(body));\n    }\n\n    return function;\n  }\n\n  @Override\n  Node processBlock(Block blockNode) {\n    Node block = newNode(Token.BLOCK);\n    for (Node n : transformList(blockNode)) {\n      block.addChildToBack(n);\n    }\n    return block;\n  }\n\n  @Override\n  Node processArrayLiteral(ArrayLiteral node) {\n    Node literal = newNode(Token.ARRAYLIT);\n    for (AstNode element : node.getElements()) {\n      if (element == null) {\n        literal.addChildToBack(newNode(Token.EMPTY));\n      } else if (element instanceof EmptyExpression) {\n        literal.addChildToBack(newNode(Token.EMPTY));\n      } else {\n        literal.addChildToBack(transform(element));\n      }\n    }\n    return literal;\n  }\n\n  @Override\n  Node processAssignment(Assignment node) {\n    return newNode(\n        Node.assignToken(node.getType()),\n        transform(node.getLeft()),\n        transform(node.getRight()));\n  }\n\n  @Override\n  Node processAstRoot(AstRoot root) {\n    Node block = newNode(Token.BLOCK);\n    for (Node n : transformList(root)) {\n      block.addChildToBack(n);\n    }\n    return block;\n  }\n\n  @Override\n  Node processBinaryOperation(BinaryOperator node) {\n    switch (node.getType()) {\n      case Token.OR:\n        return newNode(Token.OR,\n            transform(node.getLeft()),\n            transform(node.getRight()));\n      case Token.AND:\n        return newNode(Token.AND,\n            transform(node.getLeft()),\n            transform(node.getRight()));\n      default:\n        return newNode(\n            node.getType(),\n            transform(node.getLeft()),\n            transform(node.getRight()));\n    }\n  }\n\n  @Override\n  Node processBooleanLiteral(BooleanLiteral boolNode) {\n    return boolNode.getValue() ? Node.TRUE : Node.FALSE;\n  }\n\n  @Override\n  Node processBreakStatement(BreakStatement statementNode) {\n    Node node = newNode(Token.BREAK);\n    if (statementNode.getBreakLabel() != null) {\n      Name labelName = createName(statementNode.getBreakLabel());\n      node.addChildToBack(newNode(Token.LABEL_NAME, transform(labelName)));\n    }\n    return node;\n  }\n\n  @Override\n  Node processCatchClause(CatchClause clauseNode) {\n    Node catchvar = transform(clauseNode.getCatchCondition());\n    Node catchBlock = transform(clauseNode.getBody());\n    Node catchNode = newNode(Token.CATCH, catchvar, catchBlock);\n\n    AstNode condition = clauseNode.getCondition();\n    if (condition != null) {\n      catchNode.addChildToFront(transform(condition));\n    }\n    return catchNode;\n  }\n\n  @Override\n  Node processConditionalExpression(ConditionalExpression node) {\n    return newNode(Token.HOOK,\n        transform(node.getTestExpression()),\n        transform(node.getTrueExpression()),\n        transform(node.getFalseExpression()));\n  }\n\n  @Override\n  Node processContinueStatement(ContinueStatement statementNode) {\n    Node node = newNode(Token.CONTINUE);\n    if (statementNode.getLabel() != null) {\n      Name labelName = createName(statementNode.getLabel());\n      node.addChildToBack(newNode(Token.LABEL_NAME, transform(labelName)));\n    }\n    return node;\n  }\n\n  @Override\n  Node processDoLoop(DoLoop loopNode) {\n    return newNode(Token.DO,\n        transform(loopNode.getBody()),\n        transform(loopNode.getCondition()));\n  }\n\n  @Override\n  Node processEmptyExpression(EmptyExpression node) {\n    return newNode(Token.EMPTY);\n  }\n\n  @Override\n  Node processExpressionStatement(ExpressionStatement node) {\n    return newNode(Token.EXPR_RESULT,\n        transform(node.getExpression()));\n  }\n\n  @Override\n  Node processForInLoop(ForInLoop loopNode) {\n    Node left = transform(loopNode.getIterator());\n    Node right = transform(loopNode.getIteratedObject());\n    Node body = transform(loopNode.getBody());\n    return newNode(Token.FOR, left, right, body);\n  }\n\n  @Override\n  Node processForLoop(ForLoop loopNode) {\n    Node left = transform(loopNode.getInitializer());\n    Node right = transform(loopNode.getCondition());\n    Node incr = transform(loopNode.getIncrement());\n    Node body = transform(loopNode.getBody());\n    return newNode(Token.FOR, left, right, incr, body);\n  }\n\n  @Override\n  Node processFunctionCall(FunctionCall node) {\n    Node target = transform(node.getTarget());\n    Node obj = newNode(Token.CALL, target);\n    for (AstNode arg : node.getArguments()) {\n      Node child = transform(arg);\n      obj.addChildToBack(child);\n    }\n\n    int leftParamPos = node.getAbsolutePosition() + node.getLp();\n    obj.setLineno(node.getLineno());\n    obj.setCharno(position2charno(leftParamPos));\n    return obj;\n  }\n",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..272281df 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -385,182 +385,420 @@ public class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+public class TransformDispatcher extends IRFactory.TransformDispatcher {\n \n-      int nType = n.getType();\n-      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n-          n.getFirstChild().getType() == Token.STRING &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+  private AstNode transform(AstNode node) {\n+    return node == null ? null : node.accept(this);\n+  }\n+\n+  private Node newNode(Token token) {\n+    return new Node(token);\n+  }\n+\n+  private Node newNode(Token token, Node child) {\n+    Node result = newNode(token);\n+    result.addChildToBack(child);\n+    return result;\n+  }\n+\n+  private Node newNode(Token token, Node left, Node right) {\n+    Node result = newNode(token, left);\n+    result.addChildToBack(right);\n+    return result;\n+  }\n+\n+  private Node newNode(Token token, Node child1, Node child2, Node child3) {\n+    Node result = newNode(token, child1, child2);\n+    result.addChildToBack(child3);\n+    return result;\n+  }\n+\n+  private Name createName(String label) {\n+    return label == null ? new Name() : new Name(null, label);\n+  }\n+\n+  @Override\n+  public Node processFunctionNode(FunctionNode functionNode) {\n+    Name name = functionNode.getFunctionName();\n+    Boolean isUnnamedFunction = false;\n+\n+    if (name == null) {\n+      name = createName(\"\");\n+      isUnnamedFunction = true;\n     }\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n+    Node function = newNode(Token.FUNCTION);\n+    Node newName = transform(name);\n+\n+    if (isUnnamedFunction) {\n+      newName.setLineno(functionNode.getLineno());\n+      int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n+      newName.setCharno(position2charno(lpColumn));\n     }\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+    function.addChildToBack(newName);\n+\n+    Node lp = newNode(Token.LP);\n+    Name fnName = functionNode.getFunctionName();\n+    if (fnName != null) {\n+      lp.setLineno(fnName.getLineno());\n+    } else {\n+      lp.setLineno(functionNode.getLineno());\n     }\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n+    int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n+    lp.setCharno(position2charno(lparenCharno));\n+\n+    for (AstNode param : functionNode.getParams()) {\n+      lp.addChildToBack(transform(param));\n     }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+    function.addChildToBack(lp);\n+    Node bodyNode = transform(functionNode.getBody());\n+    parseDirectives(bodyNode);\n+    function.addChildToBack(bodyNode);\n+\n+    return function;\n+  }\n+\n+  @Override\n+  protected Node createName(Name name) {\n+    return new Node(Token.NAME, name);\n+  }\n+\n+  @Override\n+  protected Node createString(String string) {\n+    return new Node(Token.STRING, string);\n+  }\n+\n+  @Override\n+  protected Node createNumber(String number) {\n+    return new Node(Token.NUMBER, number);\n+  }\n+\n+  @Override\n+  protected Node createCall(Node target) {\n+    return newNode(Token.CALL, target);\n+  }\n+\n+  @Override\n+  protected Node createPropertyGet(Node target, String property) {\n+    return newNode(Token.GETPROP, target, new Node(Token.STRING, property));\n+  }\n+\n+  @Override\n+  protected Node createIndexGet(Node target, Node index) {\n+    return newNode(Token.GETELEM, target, index);\n+  }\n+\n+  @Override\n+  protected Node createUnary(int type, Node child) {\n+    return newNode(type, child);\n+  }\n+\n+  @Override\n+  protected Node createBinary(int type, Node left, Node right) {\n+    return newNode(type, left, right);\n+  }\n+\n+  @Override\n+  protected Node createConditional(Node condition, Node ifTrue, Node ifFalse) {\n+    return newNode(Token.HOOK, condition, ifTrue, ifFalse);\n+  }\n+\n+  @Override\n+  protected Node createAssignment(int type, Node left, Node right) {\n+    return newNode(type, left, right);\n+  }\n+\n+  @Override\n+  protected Node createVariable(Name name) {\n+    return newNode(Token.NAME, name);\n+  }\n+\n+  @Override\n+  protected Node createBlock() {\n+    return newNode(Token.BLOCK);\n+  }\n+\n+  @Override\n+  protected Node createForIn(Node iterator, Node iterable, Node body) {\n+    return newNode(Token.FOR, iterator, iterable, body);\n+  }\n+\n+  @Override\n+  protected Node createFor(Node initializer, Node condition, Node increment, Node body) {\n+    return newNode(Token.FOR, initializer, condition, increment, body);\n+  }\n+\n+  @Override\n+  protected Node createWhile(Node condition, Node body) {\n+    return newNode(Token.WHILE, condition, body);\n+  }\n+\n+  @Override\n+  protected Node createDoWhile(Node body, Node condition) {\n+    return newNode(Token.DO, body, condition);\n+  }\n+\n+  @Override\n+  protected Node createSwitch(Node expr) {\n+    return newNode(Token.SWITCH, expr);\n+  }\n+\n+  @Override\n+  protected Node createSwitchCase(Node expression) {\n+    return newNode(Token.CASE, expression);\n+  }\n+\n+  @Override\n+  protected Node createDefaultCase() {\n+    return newNode(Token.DEFAULT);\n+  }\n+\n+  @Override\n+  protected Node createBreak(String label) {\n+    return createStatement(Token.BREAK, label);\n+  }\n+\n+  @Override\n+  protected Node createContinue(String label) {\n+    return createStatement(Token.CONTINUE, label);\n+  }\n+\n+  private Node createStatement(int token, String label) {\n+    Node statement = newNode(token);\n+    if (label != null) {\n+      statement.addChildToBack(newNode(Token.LABEL_NAME, createName(label)));\n     }\n+    return statement;\n+  }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+  @Override\n+  protected Node createThrow(Node expression) {\n+    return newNode(Token.THROW, expression);\n+  }\n+\n+  @Override\n+  protected Node createTryCatchFinally(Node tryBlock, Node catchBlock, Node finallyBlock) {\n+    Node result = newNode(Token.TRY, tryBlock);\n+    if (catchBlock != null) {\n+      result.addChildToBack(catchBlock);\n     }\n+    if (finallyBlock != null) {\n+      result.addChildToBack(finallyBlock);\n+    }\n+    return result;\n+  }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+  @Override\n+  protected Node createArgumentList() {\n+    return newNode(Token.LIST);\n+  }\n+\n+  @Override\n+  protected Node createElementList() {\n+    return newNode(Token.ARRAYLIT);\n+  }\n+\n+  @Override\n+  protected Node createObjectLiteral() {\n+    return newNode(Token.OBJECTLIT);\n+  }\n+\n+  @Override\n+  protected Node createGetterProperty(Node property) {\n+    return newNode(Token.GETTER_DEF, property);\n+  }\n+\n+  @Override\n+  protected Node createSetterProperty(Node property, Node parameter) {\n+    return newNode(Token.SETTER_DEF, property, new Node(Token.PARAM_LIST, parameter));\n+  }\n+\n+  @Override\n+  protected Node createRegExpLiteral(String regexp) {\n+    return newNode(Token.REGEXP, new Node(Token.STRING, regexp),\n+        new Node(Token.STRING, \"\"));\n+  }\n+\n+  @Override\n+  protected Node createFunctionNode(boolean isExpression, Name name, Node params, Node body) {\n+    Node function = newNode(Token.FUNCTION);\n+    if (name != null) {\n+      function.addChildToBack(transform(name));\n     }\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+    Node lp = new Node(Token.LP);\n+    if (params != null) {\n+      lp.addChildrenToFront(transformList((List<?>) params));\n     }\n+    function.addChildToBack(lp);\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+    if (body != null) {\n+      function.addChildToBack(transform(body));\n     }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+    return function;\n+  }\n+\n+  @Override\n+  Node processBlock(Block blockNode) {\n+    Node block = newNode(Token.BLOCK);\n+    for (Node n : transformList(blockNode)) {\n+      block.addChildToBack(n);\n     }\n+    return block;\n+  }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+  @Override\n+  Node processArrayLiteral(ArrayLiteral node) {\n+    Node literal = newNode(Token.ARRAYLIT);\n+    for (AstNode element : node.getElements()) {\n+      if (element == null) {\n+        literal.addChildToBack(newNode(Token.EMPTY));\n+      } else if (element instanceof EmptyExpression) {\n+        literal.addChildToBack(newNode(Token.EMPTY));\n+      } else {\n+        literal.addChildToBack(transform(element));\n+      }\n     }\n+    return literal;\n+  }\n \n-    @Override\n-    Node processForLoop(ForLoop loopNode) {\n-      Node node = newNode(\n-          Token.FOR,\n-          transform(loopNode.getInitializer()),\n-          transform(loopNode.getCondition()),\n-          transform(loopNode.getIncrement()));\n-      node.addChildToBack(transformBlock(loopNode.getBody()));\n-      return node;\n+  @Override\n+  Node processAssignment(Assignment node) {\n+    return newNode(\n+        Node.assignToken(node.getType()),\n+        transform(node.getLeft()),\n+        transform(node.getRight()));\n+  }\n+\n+  @Override\n+  Node processAstRoot(AstRoot root) {\n+    Node block = newNode(Token.BLOCK);\n+    for (Node n : transformList(root)) {\n+      block.addChildToBack(n);\n     }\n+    return block;\n+  }\n \n-    @Override\n-    Node processFunctionCall(FunctionCall callNode) {\n-      Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n-      for (AstNode child : callNode.getArguments()) {\n-        node.addChildToBack(transform(child));\n-      }\n+  @Override\n+  Node processBinaryOperation(BinaryOperator node) {\n+    switch (node.getType()) {\n+      case Token.OR:\n+        return newNode(Token.OR,\n+            transform(node.getLeft()),\n+            transform(node.getRight()));\n+      case Token.AND:\n+        return newNode(Token.AND,\n+            transform(node.getLeft()),\n+            transform(node.getRight()));\n+      default:\n+        return newNode(\n+            node.getType(),\n+            transform(node.getLeft()),\n+            transform(node.getRight()));\n+    }\n+  }\n \n-      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n-      node.setLineno(callNode.getLineno());\n-      node.setCharno(position2charno(leftParamPos));\n-      return node;\n+  @Override\n+  Node processBooleanLiteral(BooleanLiteral boolNode) {\n+    return boolNode.getValue() ? Node.TRUE : Node.FALSE;\n+  }\n+\n+  @Override\n+  Node processBreakStatement(BreakStatement statementNode) {\n+    Node node = newNode(Token.BREAK);\n+    if (statementNode.getBreakLabel() != null) {\n+      Name labelName = createName(statementNode.getBreakLabel());\n+      node.addChildToBack(newNode(Token.LABEL_NAME, transform(labelName)));\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processFunctionNode(FunctionNode functionNode) {\n-      Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n-      if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n-        isUnnamedFunction = true;\n-      }\n-      Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n-      if (isUnnamedFunction) {\n-        // Old Rhino tagged the empty name node with the line number of the\n-        // declaration.\n-        newName.setLineno(functionNode.getLineno());\n-        // TODO(bowdidge) Mark line number of paren correctly.\n-        // Same problem as below - the left paren might not be on the\n-        // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n-        newName.setCharno(position2charno(lpColumn));\n-      }\n+  @Override\n+  Node processCatchClause(CatchClause clauseNode) {\n+    Node catchvar = transform(clauseNode.getCatchCondition());\n+    Node catchBlock = transform(clauseNode.getBody());\n+    Node catchNode = newNode(Token.CATCH, catchvar, catchBlock);\n \n-      node.addChildToBack(newName);\n-      Node lp = newNode(Token.LP);\n-      // The left paren's complicated because it's not represented by an\n-      // AstNode, so there's nothing that has the actual line number that it\n-      // appeared on.  We know the paren has to appear on the same line as the\n-      // function name (or else a semicolon will be inserted.)  If there's no\n-      // function name, assume the paren was on the same line as the function.\n-      // TODO(bowdidge): Mark line number of paren correctly.\n-      Name fnName = functionNode.getFunctionName();\n-      if (fnName != null) {\n-        lp.setLineno(fnName.getLineno());\n-      } else {\n-        lp.setLineno(functionNode.getLineno());\n-      }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n+    AstNode condition = clauseNode.getCondition();\n+    if (condition != null) {\n+      catchNode.addChildToFront(transform(condition));\n+    }\n+    return catchNode;\n+  }\n \n-      lp.setCharno(position2charno(lparenCharno));\n-      for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n-      }\n-      node.addChildToBack(lp);\n+  @Override\n+  Node processConditionalExpression(ConditionalExpression node) {\n+    return newNode(Token.HOOK,\n+        transform(node.getTestExpression()),\n+        transform(node.getTrueExpression()),\n+        transform(node.getFalseExpression()));\n+  }\n+\n+  @Override\n+  Node processContinueStatement(ContinueStatement statementNode) {\n+    Node node = newNode(Token.CONTINUE);\n+    if (statementNode.getLabel() != null) {\n+      Name labelName = createName(statementNode.getLabel());\n+      node.addChildToBack(newNode(Token.LABEL_NAME, transform(labelName)));\n+    }\n+    return node;\n+  }\n+\n+  @Override\n+  Node processDoLoop(DoLoop loopNode) {\n+    return newNode(Token.DO,\n+        transform(loopNode.getBody()),\n+        transform(loopNode.getCondition()));\n+  }\n+\n+  @Override\n+  Node processEmptyExpression(EmptyExpression node) {\n+    return newNode(Token.EMPTY);\n+  }\n \n-      Node bodyNode = transform(functionNode.getBody());\n-      parseDirectives(bodyNode);\n-      node.addChildToBack(bodyNode);\n-     return node;\n+  @Override\n+  Node processExpressionStatement(ExpressionStatement node) {\n+    return newNode(Token.EXPR_RESULT,\n+        transform(node.getExpression()));\n+  }\n+\n+  @Override\n+  Node processForInLoop(ForInLoop loopNode) {\n+    Node left = transform(loopNode.getIterator());\n+    Node right = transform(loopNode.getIteratedObject());\n+    Node body = transform(loopNode.getBody());\n+    return newNode(Token.FOR, left, right, body);\n+  }\n+\n+  @Override\n+  Node processForLoop(ForLoop loopNode) {\n+    Node left = transform(loopNode.getInitializer());\n+    Node right = transform(loopNode.getCondition());\n+    Node incr = transform(loopNode.getIncrement());\n+    Node body = transform(loopNode.getBody());\n+    return newNode(Token.FOR, left, right, incr, body);\n+  }\n+\n+  @Override\n+  Node processFunctionCall(FunctionCall node) {\n+    Node target = transform(node.getTarget());\n+    Node obj = newNode(Token.CALL, target);\n+    for (AstNode arg : node.getArguments()) {\n+      Node child = transform(arg);\n+      obj.addChildToBack(child);\n     }\n \n+    int leftParamPos = node.getAbsolutePosition() + node.getLp();\n+    obj.setLineno(node.getLineno());\n+    obj.setCharno(position2charno(leftParamPos));\n+    return obj;\n+  }\n+\n+\n     @Override\n     Node processIfStatement(IfStatement statementNode) {\n       Node node = newNode(Token.IF);",
    "result_reason": "error: reached end of file while parsing",
    "test_result": "ERROR"
}