{
    "patch": "    if (cfgNode == null || !cfgNode.hasChildren()) {\n        return false;\n    }\n\n    Node lastChild = cfgNode.getLastChild();\n    return lastChild.isTry() && lastChild.hasChildren() && lastChild.getLastChild().isCatch();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..dc60c7bd 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -156,9 +156,12 @@ class MaybeReachingVariableUse extends\n     return output;\n   }\n \n-  private boolean hasExceptionHandler(Node cfgNode) {\n-    return false;\n-  }\n+    if (cfgNode == null || !cfgNode.hasChildren()) {\n+        return false;\n+    }\n+\n+    Node lastChild = cfgNode.getLastChild();\n+    return lastChild.isTry() && lastChild.hasChildren() && lastChild.getLastChild().isCatch();\n \n   private void computeMayUse(\n       Node n, Node cfgNode, ReachingUses output, boolean conditional) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}