{
    "patch": "private static MethodInterceptorFilter sharedFilter = null;\n\npublic <T> T resetMock(T mock) {\n    org.mockito.Mockito.reset(mock);\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    if(sharedFilter == null) {\n        sharedFilter = new MethodInterceptorFilter(newMockHandler,\n                (MockSettingsImpl) org.mockito.Mockito.withSettings()\n                    .defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    }\n    ((Factory) mock).setCallback(0, sharedFilter);\n    return mock;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..ed1ae1760 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,21 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+private static MethodInterceptorFilter sharedFilter = null;\n+\n+public <T> T resetMock(T mock) {\n+    org.mockito.Mockito.reset(mock);\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    if(sharedFilter == null) {\n+        sharedFilter = new MethodInterceptorFilter(newMockHandler,\n+                (MockSettingsImpl) org.mockito.Mockito.withSettings()\n+                    .defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    }\n+    ((Factory) mock).setCallback(0, sharedFilter);\n+    return mock;\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}