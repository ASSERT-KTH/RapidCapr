{
    "patch": "        && n.getNext() != null && n.getNext().getType() == Token.GETPROP &&\n           NodeUtil.isGet(n.getNext()) && n.getNext().getLastChild() == null &&\n           n.getNext().getString().equals(\"prototype\")) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..0b2e6b05 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -315,7 +315,9 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+        && n.getNext() != null && n.getNext().getType() == Token.GETPROP &&\n+           NodeUtil.isGet(n.getNext()) && n.getNext().getLastChild() == null &&\n+           n.getNext().getString().equals(\"prototype\")) {\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}