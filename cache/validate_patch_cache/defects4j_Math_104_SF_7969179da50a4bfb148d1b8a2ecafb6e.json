{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    final double epsilon = 10e-15;\n    final int maxIterations = 1000;\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException(\"Invalid input arguments for regularization calculation\");\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x > a + 1.0) {\n        return 1.0 - regularizedGammaQ(a, x);\n    }\n    double n = 0.0;\n    double an = 1.0 / a;\n    double sum = an;\n    while (Math.abs(an / sum) > epsilon && n < maxIterations) {\n        n++;\n        an *= x / (a + n);\n        sum += an;\n    }\n    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    final double epsilon = 10e-15;\n    final int maxIterations = 1000;\n    if (a <= 0.0 || x < 0.0) {\n        throw new IllegalArgumentException(\"Invalid input arguments for regularization calculation\");\n    }\n    if (x == 0.0) {\n        return 1.0;\n    }\n    if (x < a + 1.0) {\n        return 1.0 - regularizedGammaP(a, x);\n    }\n    double n = 0.0;\n    double b = x + 1.0 - a;\n    double c = 1.0 / epsilon;\n    double d = 1.0 / b;\n    double h = d;\n    double an = 1.0 * d;\n    while (Math.abs(d - c) > epsilon * Math.abs(d) && Math.abs(d - c) > epsilon * Math.abs(c) && n < maxIterations) {\n        n++;\n        an *= -((double) n - a) * x / ((double) n * b);\n        d = 1.0 / (an + d);\n        c = h * d;\n        h = an * d - h;\n    }\n    return c * Math.exp(-x + a * Math.log(x) - logGamma(a));\n}\n\npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1.0) + 24.01409822 / (x + 2.0) - 1.231739516 / (x + 3.0) + 0.00120858003 / (x + 4.0) - 0.00000536382 / (x + 5.0);\n    return tmp + Math.log(ser * Math.sqrt(2.0 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..84d39f509 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,62 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    final double epsilon = 10e-15;\n+    final int maxIterations = 1000;\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException(\"Invalid input arguments for regularization calculation\");\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x > a + 1.0) {\n+        return 1.0 - regularizedGammaQ(a, x);\n+    }\n+    double n = 0.0;\n+    double an = 1.0 / a;\n+    double sum = an;\n+    while (Math.abs(an / sum) > epsilon && n < maxIterations) {\n+        n++;\n+        an *= x / (a + n);\n+        sum += an;\n+    }\n+    return Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    final double epsilon = 10e-15;\n+    final int maxIterations = 1000;\n+    if (a <= 0.0 || x < 0.0) {\n+        throw new IllegalArgumentException(\"Invalid input arguments for regularization calculation\");\n+    }\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+    if (x < a + 1.0) {\n+        return 1.0 - regularizedGammaP(a, x);\n+    }\n+    double n = 0.0;\n+    double b = x + 1.0 - a;\n+    double c = 1.0 / epsilon;\n+    double d = 1.0 / b;\n+    double h = d;\n+    double an = 1.0 * d;\n+    while (Math.abs(d - c) > epsilon * Math.abs(d) && Math.abs(d - c) > epsilon * Math.abs(c) && n < maxIterations) {\n+        n++;\n+        an *= -((double) n - a) * x / ((double) n * b);\n+        d = 1.0 / (an + d);\n+        c = h * d;\n+        h = an * d - h;\n+    }\n+    return c * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+}\n+\n+public static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1.0) + 24.01409822 / (x + 2.0) - 1.231739516 / (x + 3.0) + 0.00120858003 / (x + 4.0) - 0.00000536382 / (x + 5.0);\n+    return tmp + Math.log(ser * Math.sqrt(2.0 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}