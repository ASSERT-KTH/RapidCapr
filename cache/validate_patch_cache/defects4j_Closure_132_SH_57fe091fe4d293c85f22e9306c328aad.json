{
    "patch": "      if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n        Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n        Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n        if (thenOp.getType() == elseOp.getType() &&\n            !(NodeUtil.mayHaveSideEffects(thenOp.getFirstChild()) ||\n              NodeUtil.mayHaveSideEffects(elseOp.getFirstChild()))) {\n          // if(x)a=1;else a=2; -> a=x?1:2;\n          if (NodeUtil.isAssignmentOp(thenOp)) {\n            Node lhs = thenOp.getFirstChild();\n            if (areNodesEqualForInlining(lhs, elseOp.getFirstChild())) {\n\n              n.removeChild(cond);\n              Node assignName = thenOp.removeFirstChild();\n              Node thenExpr = thenOp.removeFirstChild();\n              Node elseExpr = elseOp.getLastChild();\n              elseOp.removeChild(elseExpr);\n\n              Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n              Node assign = new Node(thenOp.getType(), assignName, hookNode)\n                  .srcref(thenOp);\n              Node expr = NodeUtil.newExpr(assign);\n              parent.replaceChild(n, expr);\n              reportCodeChange();\n\n              return expr;\n            }\n          }\n          // if(x)foo();else bar(); -> x?foo():bar()\n          n.removeChild(cond);\n          thenOp.detachFromParent();\n          elseOp.detachFromParent();\n          Node expr = IR.exprResult(\n              IR.hook(cond, thenOp, elseOp).srcref(n));\n          parent.replaceChild(n, expr);\n          reportCodeChange();\n          return expr;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..a5d48608 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,42 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+      if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n+        Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n+        Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n+        if (thenOp.getType() == elseOp.getType() &&\n+            !(NodeUtil.mayHaveSideEffects(thenOp.getFirstChild()) ||\n+              NodeUtil.mayHaveSideEffects(elseOp.getFirstChild()))) {\n+          // if(x)a=1;else a=2; -> a=x?1:2;\n+          if (NodeUtil.isAssignmentOp(thenOp)) {\n+            Node lhs = thenOp.getFirstChild();\n+            if (areNodesEqualForInlining(lhs, elseOp.getFirstChild())) {\n+\n+              n.removeChild(cond);\n+              Node assignName = thenOp.removeFirstChild();\n+              Node thenExpr = thenOp.removeFirstChild();\n+              Node elseExpr = elseOp.getLastChild();\n+              elseOp.removeChild(elseExpr);\n+\n+              Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n+              Node assign = new Node(thenOp.getType(), assignName, hookNode)\n+                  .srcref(thenOp);\n+              Node expr = NodeUtil.newExpr(assign);\n+              parent.replaceChild(n, expr);\n+              reportCodeChange();\n+\n+              return expr;\n+            }\n+          }\n+          // if(x)foo();else bar(); -> x?foo():bar()\n+          n.removeChild(cond);\n+          thenOp.detachFromParent();\n+          elseOp.detachFromParent();\n+          Node expr = IR.exprResult(\n+              IR.hook(cond, thenOp, elseOp).srcref(n));\n+          parent.replaceChild(n, expr);\n+          reportCodeChange();\n+          return expr;\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}