{
    "patch": "    private void init() {\n        thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n\n        nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n\n        StringBuilder regex= new StringBuilder();\n        List<Strategy> collector = new ArrayList<Strategy>();\n\n        Matcher patternMatcher= formatPattern.matcher(pattern);        \n        if(!patternMatcher.matches()) {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n\n        Strategy currentStrategy = null; // added line\n        for(int i = 1; i <= patternMatcher.groupCount(); i++) {\n            String currentFormatField = patternMatcher.group(i);\n            currentStrategy = getStrategy(currentFormatField);\n            if(currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            }\n        }\n        if(currentStrategy != null) { // added line\n            currentFormatField= null;\n            strategies= collector.toArray(new Strategy[collector.size()]);\n            parsePattern= Pattern.compile(regex.toString());\n        } else { // added line\n            throw new IllegalArgumentException(\"Invalid pattern\"); // added line\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..f617d0b4 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -120,33 +120,26 @@ public class FastDateParser implements DateParser, Serializable {\n         StringBuilder regex= new StringBuilder();\n         List<Strategy> collector = new ArrayList<Strategy>();\n \n-        Matcher patternMatcher= formatPattern.matcher(pattern);\n-        if(!patternMatcher.lookingAt()) {\n+        Matcher patternMatcher= formatPattern.matcher(pattern);        \n+        if(!patternMatcher.matches()) {\n             throw new IllegalArgumentException(\"Invalid pattern\");\n         }\n \n-        currentFormatField= patternMatcher.group();\n-        Strategy currentStrategy= getStrategy(currentFormatField);\n-        for(;;) {\n-            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n-            if(!patternMatcher.lookingAt()) {\n-                nextStrategy = null;\n-                break;\n-            }\n-            String nextFormatField= patternMatcher.group();\n-            nextStrategy = getStrategy(nextFormatField);\n+        Strategy currentStrategy = null; // added line\n+        for(int i = 1; i <= patternMatcher.groupCount(); i++) {\n+            String currentFormatField = patternMatcher.group(i);\n+            currentStrategy = getStrategy(currentFormatField);\n             if(currentStrategy.addRegex(this, regex)) {\n                 collector.add(currentStrategy);\n             }\n-            currentFormatField= nextFormatField;\n-            currentStrategy= nextStrategy;\n         }\n-        if(currentStrategy.addRegex(this, regex)) {\n-            collector.add(currentStrategy);\n+        if(currentStrategy != null) { // added line\n+            currentFormatField= null;\n+            strategies= collector.toArray(new Strategy[collector.size()]);\n+            parsePattern= Pattern.compile(regex.toString());\n+        } else { // added line\n+            throw new IllegalArgumentException(\"Invalid pattern\"); // added line\n         }\n-        currentFormatField= null;\n-        strategies= collector.toArray(new Strategy[collector.size()]);\n-        parsePattern= Pattern.compile(regex.toString());\n     }\n \n     // Accessors",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}