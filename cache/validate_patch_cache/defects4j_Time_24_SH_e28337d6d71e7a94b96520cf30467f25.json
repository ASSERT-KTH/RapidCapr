{
    "patch": "            if (savedFields[i].isSaved()) {\n                throw new IllegalStateException(\"Unexpected field saved for \" +\n                        savedFields[i].getDateTimeField().getName());\n            }\n            int value = savedFields[i].getValue();\n            DateTimeField field = savedFields[i].getField();\n            try {\n                millis = field.set(millis, value);\n            } catch (IllegalArgumentException e) {\n                String message = \"Cannot parse \\\"\" + text + '\"';\n                // Include the name of the field that caused the parse to fail.\n                if (e.getMessage().startsWith(\"Value \")) {\n                    message += \": \" + field.getName() + \" \";\n                    message += e.getMessage().substring(6);\n                } else {\n                    message += \" (\" + e.getMessage() + ')';\n                }\n                throw new IllegalFieldValueException(\n                        field.getType(), message, value, null, e);\n            }\n            resetFields = resetFields || savedFields[i].isMarkedField();",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..fa9fc514 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,27 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (savedFields[i].isSaved()) {\n+                throw new IllegalStateException(\"Unexpected field saved for \" +\n+                        savedFields[i].getDateTimeField().getName());\n+            }\n+            int value = savedFields[i].getValue();\n+            DateTimeField field = savedFields[i].getField();\n+            try {\n+                millis = field.set(millis, value);\n+            } catch (IllegalArgumentException e) {\n+                String message = \"Cannot parse \\\"\" + text + '\"';\n+                // Include the name of the field that caused the parse to fail.\n+                if (e.getMessage().startsWith(\"Value \")) {\n+                    message += \": \" + field.getName() + \" \";\n+                    message += e.getMessage().substring(6);\n+                } else {\n+                    message += \" (\" + e.getMessage() + ')';\n+                }\n+                throw new IllegalFieldValueException(\n+                        field.getType(), message, value, null, e);\n+            }\n+            resetFields = resetFields || savedFields[i].isMarkedField();\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}