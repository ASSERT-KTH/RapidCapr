{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex.clone();\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(reflected, reflectedSimplex[0]) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    // accept the reflected point\n                    simplex[0] = reflected;\n                }\n                continue;\n\n            }\n\n            if (comparator.compare(reflected, simplex[simplex.length - 1]) >= 0) {\n                // perform an outside contraction\n                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = evaluateNewSimplex(original, sigma, comparator);\n                } else {\n                    // shrink the simplex around the best point\n                    simplex = shrink(original, best, comparator);\n                }\n                continue;\n            }\n\n            // perform an inside contraction\n            final RealPointValuePair contracted = evaluateNewSimplex(original, -chi, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = evaluateNewSimplex(original, psi, comparator);\n                continue;\n            }\n\n            // shrink the simplex around the best point\n            simplex = shrink(original, best, comparator);\n\n        }\n\n    }\n    \n    private RealPointValuePair[] evaluateNewSimplex(final RealPointValuePair[] original,\n                                                    final double coeff,\n                                                    final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException {\n        final int dimension = original[0].getPointRef().length;\n        final int n = original.length;\n        final RealPointValuePair[] evaluations = new RealPointValuePair[n];\n        final double[] xSmallest = original[0].getPointRef();\n        final double[] xLargest = xSmallest.clone();\n        for (int i = 0; i < n; i++) {\n            final double[] xOriginal = original[i].getPointRef();\n            final double[] xTransformed = new double[dimension];\n            for (int j = 0; j < dimension; j++) {\n                final double xSmallestJ = xSmallest[j];\n                final double delta = coeff * (xOriginal[j] - xSmallestJ);\n                final double xTransformedJ = xSmallestJ + delta;\n                xLargest[j] = FastMath.max(xLargest[j], xTransformedJ);\n                xTransformed[j] = xTransformedJ;\n            }\n            evaluations[i] = new RealPointValuePair(xTransformed, computeObjectiveValue(xTransformed));\n        }\n\n        // sort the vertices\n        Arrays.sort(evaluations, comparator);\n\n        return evaluations;\n    }\n\n    private RealPointValuePair[] shrink(final RealPointValuePair[] original,\n                                              final RealPointValuePair best,\n                                              final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException {\n        final int dimension = original[0].getPointRef().length;\n        final int n = original.length;\n        final RealPointValuePair[] evaluations = new RealPointValuePair[n];\n        for (int i = 1; i < n; i++) {\n            final double[] xOriginal = original[i].getPointRef();\n            final double[] xTransformed = new double[dimension];\n            for (int j = 0; j < dimension; j++) {\n                final double xBestJ = best.getPointRef()[j];\n                final double xOriginalJ = xOriginal[j];\n                final double xTransformedJ = xBestJ + sigma * (xOriginalJ - xBestJ);\n                xTransformed[j] = xTransformedJ;\n            }\n            evaluations[i] = new RealPointValuePair(xTransformed, computeObjectiveValue(xTransformed));\n        }\n        evaluations[0] = best;\n\n        // sort the vertices\n        Arrays.sort(evaluations, comparator);\n\n        return evaluations;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..18130b0e7 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -66,7 +66,7 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             incrementIterationsCounter();\n \n             // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n+            final RealPointValuePair[] original = simplex.clone();\n             final RealPointValuePair best = original[0];\n \n             // perform a reflection step\n@@ -74,28 +74,98 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             if (comparator.compare(reflected, best) < 0) {\n \n                 // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                final RealPointValuePair[] reflectedSimplex = evaluateNewSimplex(original, gamma, comparator);\n+                if (comparator.compare(reflected, reflectedSimplex[0]) <= 0) {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    // accept the reflected point\n+                    simplex[0] = reflected;\n                 }\n+                continue;\n \n-                return;\n+            }\n \n+            if (comparator.compare(reflected, simplex[simplex.length - 1]) >= 0) {\n+                // perform an outside contraction\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = evaluateNewSimplex(original, sigma, comparator);\n+                } else {\n+                    // shrink the simplex around the best point\n+                    simplex = shrink(original, best, comparator);\n+                }\n+                continue;\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+            // perform an inside contraction\n+            final RealPointValuePair contracted = evaluateNewSimplex(original, -chi, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                simplex = evaluateNewSimplex(original, psi, comparator);\n+                continue;\n+            }\n \n-            // check convergence\n-                return;\n+            // shrink the simplex around the best point\n+            simplex = shrink(original, best, comparator);\n+\n+        }\n+\n+    }\n+    \n+    private RealPointValuePair[] evaluateNewSimplex(final RealPointValuePair[] original,\n+                                                    final double coeff,\n+                                                    final Comparator<RealPointValuePair> comparator)\n+        throws FunctionEvaluationException, OptimizationException {\n+        final int dimension = original[0].getPointRef().length;\n+        final int n = original.length;\n+        final RealPointValuePair[] evaluations = new RealPointValuePair[n];\n+        final double[] xSmallest = original[0].getPointRef();\n+        final double[] xLargest = xSmallest.clone();\n+        for (int i = 0; i < n; i++) {\n+            final double[] xOriginal = original[i].getPointRef();\n+            final double[] xTransformed = new double[dimension];\n+            for (int j = 0; j < dimension; j++) {\n+                final double xSmallestJ = xSmallest[j];\n+                final double delta = coeff * (xOriginal[j] - xSmallestJ);\n+                final double xTransformedJ = xSmallestJ + delta;\n+                xLargest[j] = FastMath.max(xLargest[j], xTransformedJ);\n+                xTransformed[j] = xTransformedJ;\n             }\n+            evaluations[i] = new RealPointValuePair(xTransformed, computeObjectiveValue(xTransformed));\n+        }\n+\n+        // sort the vertices\n+        Arrays.sort(evaluations, comparator);\n+\n+        return evaluations;\n+    }\n \n+    private RealPointValuePair[] shrink(final RealPointValuePair[] original,\n+                                              final RealPointValuePair best,\n+                                              final Comparator<RealPointValuePair> comparator)\n+        throws FunctionEvaluationException, OptimizationException {\n+        final int dimension = original[0].getPointRef().length;\n+        final int n = original.length;\n+        final RealPointValuePair[] evaluations = new RealPointValuePair[n];\n+        for (int i = 1; i < n; i++) {\n+            final double[] xOriginal = original[i].getPointRef();\n+            final double[] xTransformed = new double[dimension];\n+            for (int j = 0; j < dimension; j++) {\n+                final double xBestJ = best.getPointRef()[j];\n+                final double xOriginalJ = xOriginal[j];\n+                final double xTransformedJ = xBestJ + sigma * (xOriginalJ - xBestJ);\n+                xTransformed[j] = xTransformedJ;\n+            }\n+            evaluations[i] = new RealPointValuePair(xTransformed, computeObjectiveValue(xTransformed));\n         }\n+        evaluations[0] = best;\n+\n+        // sort the vertices\n+        Arrays.sort(evaluations, comparator);\n \n+        return evaluations;\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: method evaluateNewSimplex(RealPointValuePair[],double,Comparator<RealPointValuePair>) is already defined in class MultiDirectional",
    "test_result": "ERROR"
}