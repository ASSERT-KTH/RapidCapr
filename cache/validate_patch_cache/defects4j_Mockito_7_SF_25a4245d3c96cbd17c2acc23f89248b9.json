{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return;\n    }\n    \n    for (Type bound : typeVariable.getBounds()) {\n        if (bound instanceof TypeVariable) {\n            TypeVariable<?> typeVar = (TypeVariable<?>) bound;\n            Type[] typeVarBounds = typeVar.getBounds();\n            if (typeVarBounds.length == 1 && typeVarBounds[0] == Object.class) {\n                continue;\n            }\n            registerTypeVariablesOn(typeVar);\n            readTypeVariables(typeVar);\n        } else {\n            registerTypeVariablesOn(bound);\n        }\n    }\n    \n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    \n    if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n        readTypeVariables(actualTypeArgument);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..6e7c59d5c 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,33 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return;\n+    }\n+    \n+    for (Type bound : typeVariable.getBounds()) {\n+        if (bound instanceof TypeVariable) {\n+            TypeVariable<?> typeVar = (TypeVariable<?>) bound;\n+            Type[] typeVarBounds = typeVar.getBounds();\n+            if (typeVarBounds.length == 1 && typeVarBounds[0] == Object.class) {\n+                continue;\n+            }\n+            registerTypeVariablesOn(typeVar);\n+            readTypeVariables(typeVar);\n+        } else {\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+    \n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    \n+    if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+        readTypeVariables(actualTypeArgument);\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: method readTypeVariables in class TypeVariableReturnType cannot be applied to given types;",
    "test_result": "ERROR"
}