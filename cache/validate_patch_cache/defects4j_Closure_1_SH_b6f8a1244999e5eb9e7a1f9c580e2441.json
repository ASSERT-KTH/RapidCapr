{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n\n    // Remove unused parameters from the beginning of the param list.\n    Node child = function.getFirstChild().getNext();\n    Node argList = child.getFirstChild();\n    NodeUtil.visitPreOrder(argList, new NodeVisitor() {\n      int removed = 0;\n      @Override\n      public void visit(Node node) {\n        if (node.isParamList()) {\n          return;\n        }\n        if (!referenced.contains(fnScope.getVar(node.getString()))) {\n          argList.removeChild(node);\n          compiler.reportCodeChange();\n          ++removed;\n        } else if (removed > 0) {\n          node.setDeclaredTypeExpression(\n              IR.name(\"JSCOMPILER_RENAME_FUNCTION_PARAM_TYPE\").srcref(node));\n        }\n      }\n    });",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..51deaeef 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,29 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+\n+    // Remove unused parameters from the beginning of the param list.\n+    Node child = function.getFirstChild().getNext();\n+    Node argList = child.getFirstChild();\n+    NodeUtil.visitPreOrder(argList, new NodeVisitor() {\n+      int removed = 0;\n+      @Override\n+      public void visit(Node node) {\n+        if (node.isParamList()) {\n+          return;\n+        }\n+        if (!referenced.contains(fnScope.getVar(node.getString()))) {\n+          argList.removeChild(node);\n+          compiler.reportCodeChange();\n+          ++removed;\n+        } else if (removed > 0) {\n+          node.setDeclaredTypeExpression(\n+              IR.name(\"JSCOMPILER_RENAME_FUNCTION_PARAM_TYPE\").srcref(node));\n+        }\n+      }\n+    });\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}