{
    "patch": "public void testGetprop4() {\n    String propName = \"myprop\";\n    String propValue = \"myvalue\";\n    try {\n        Runtime.getRuntime().exec(\"setprop \" + propName + \" '\" + propValue + \"'\");\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    String[] warnings = getSystemWarnings();\n    assertTrue(\"expected a warning\", warnings.length > 0);\n    boolean foundProp = false;\n    for (String warning : warnings) {\n        if (warning.contains(propName + \"=\" + propValue)) {\n            foundProp = true;\n            break;\n        }\n    }\n    assertTrue(\"expected to find \" + propName + \" in warnings\", foundProp);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..83206a05 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public void testGetprop4() {\n+    String propName = \"myprop\";\n+    String propValue = \"myvalue\";\n+    try {\n+        Runtime.getRuntime().exec(\"setprop \" + propName + \" '\" + propValue + \"'\");\n+    } catch (IOException e) {\n+        e.printStackTrace();\n+    }\n+    String[] warnings = getSystemWarnings();\n+    assertTrue(\"expected a warning\", warnings.length > 0);\n+    boolean foundProp = false;\n+    for (String warning : warnings) {\n+        if (warning.contains(propName + \"=\" + propValue)) {\n+            foundProp = true;\n+            break;\n+        }\n+    }\n+    assertTrue(\"expected to find \" + propName + \" in warnings\", foundProp);\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}