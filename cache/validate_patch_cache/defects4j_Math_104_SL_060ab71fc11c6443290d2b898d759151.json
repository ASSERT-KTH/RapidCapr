{
    "patch": "import org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.MathUtils;\n\npublic class RegularizedGamma {\n\n    private static final double DEFAULT_EPSILON = 1E-15;\n\n    public static double logGamma(double x) {\n        if (Double.isNaN(x) || (x <= 0.0)) {\n            return Double.NaN;\n        }\n\n        /* Split the function domain into three intervals:\n         * (0, 0.001), [0.001, 12), and (12, infinity)\n         */\n\n        double ret;\n\n        if (x < 0.001) {\n            // Use the first-order Taylor approximation of log(gamma(x))\n            ret = -FastMath.log(x);\n        } else if (x < 12.0) {\n            // Use the Lanczos approximation with g=7\n            ret = MathUtils.logSum(\n                    LanczosApproximation.logGamma(x),\n                    0.5 * FastMath.log(2 * FastMath.PI) - x,\n                    (x - 0.5) * FastMath.log(x),\n                    -1.0 * LanczosApproximation.SERIES.evaluate(x));\n        } else {\n            // Use the asymptotic series approximation of log(gamma(x))\n            ret = LanczosApproximation.ASYMPTOTIC_SERIES.logValue(x);\n        }\n\n        return ret;\n    }\n\n    public static double regularizedGammaP(double a, double x) {\n        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n    }\n\n    public static double regularizedGammaP(double a, double x, double epsilon,\n            int maxIterations) {\n        if (Double.isNaN(a) || Double.isNaN(x) ||\n                (a <= 0.0) || (x < 0.0)) {\n            return Double.NaN;\n        }\n        \n        if (x == 0) {\n            return 0;\n        }\n\n        if (x == Double.POSITIVE_INFINITY) {\n            if (a < 1.0) {\n                return Double.POSITIVE_INFINITY;\n            } else {\n                return 1.0;\n            }\n        }\n\n        if (a > 0.0 && a <= 1.0) {\n            double factor = FastMath.pow(x, a) / a;\n            return factor *\n                    hypergeometricSeries(new double[] {a, 1.0 - x},\n                            new double[] {a + 1.0}, epsilon, maxIterations);\n        }\n\n        /* use the following if ((a > 1.0) && (x > a + 1.0)) */\n        return 1 - regularizedGammaQ(a, x, epsilon, maxIterations);\n    }\n\n    public static double regularizedGammaQ(double a, double x) {\n        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);\n    }\n\n    public static double regularizedGammaQ(double a, double x, double epsilon,\n            int maxIterations) {\n        if (Double.isNaN(a) || Double.isNaN(x) ||\n                (a <= 0.0) || (x < 0.0)) {\n            return Double.NaN;\n        }\n        \n        if (x == 0) {\n            if (a < 1.0) {\n                return Double.POSITIVE_INFINITY;\n            } else {\n                return 1.0;\n            }\n        }\n\n        if (x == Double.POSITIVE_INFINITY) {\n            return 0.0;\n        }\n\n        if (a > 0.0 && a <= 1.0) {\n            double factor = FastMath.pow(x, a) / a;\n            return 1 - factor *\n                    hypergeometricSeries(new double[] {a, 1.0 - x},\n                            new double[] {a + 1.0}, epsilon, maxIterations);\n        }\n\n        /* use the following if ((a > 1.0) && (x > a + 1.0)) */\n        return 1 - regularizedGammaP(a, x, epsilon, maxIterations);\n    }\n\n    private static double hypergeometricSeries(double[] a, double[] b,\n            double epsilon, int maxIterations) {\n        int n = 0;\n        double an = a[0];\n        double sum = an / b[0];\n        double ratio = 1.0;\n\n        while ((n < a.length - 1) &&\n               (Math.abs(ratio) > epsilon) &&\n               (n < maxIterations)) {\n            /* Advance to next term */\n            n++;\n            an = an * (a[n] / b[n-1]);\n            ratio = an / b[n];\n            sum += ratio;\n        }\n\n        if (n >= maxIterations) {\n            throw new RuntimeException(\"Maximal number of iterations exceeded\");\n        }\n\n        return sum;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bade3b581 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,7 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}