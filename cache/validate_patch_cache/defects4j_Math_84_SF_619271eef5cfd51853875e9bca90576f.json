{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n        while (true) {\n            incrementIterationsCounter();\n            final RealPointValuePair best = simplex[0];\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(simplex, 1.0, comparator);\n\n            // if the reflected point is better than the current best point, try expansion\n            RealPointValuePair toAdd;\n            if (comparator.compare(reflected, best) < 0) {\n                final RealPointValuePair expanded = evaluateNewSimplex(simplex, rho, comparator);\n                toAdd = comparator.compare(expanded, reflected) < 0 ? expanded : reflected;\n            }\n            // otherwise, perform a contraction step\n            else {\n                final RealPointValuePair contracted = evaluateNewSimplex(simplex, sigma, comparator);\n                toAdd = comparator.compare(contracted, best) < 0 ? contracted : null;\n            }\n            if (toAdd != null) {\n                final RealPointValuePair[] newSimplex = new RealPointValuePair[simplex.length];\n                newSimplex[0] = toAdd;\n                for (int i = 0; i < simplex.length - 1; ++i) {\n                    newSimplex[i + 1] = evaluateNewPoint(toAdd, simplex[i], gamma);\n                }\n                Arrays.sort(newSimplex, comparator);\n                simplex = newSimplex;\n            } else {",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..7e61b7fa7 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -60,43 +60,32 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     @Override\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n         while (true) {\n-\n             incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n+            final RealPointValuePair best = simplex[0];\n             // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+            final RealPointValuePair reflected = evaluateNewSimplex(simplex, 1.0, comparator);\n \n+            // if the reflected point is better than the current best point, try expansion\n+            RealPointValuePair toAdd;\n+            if (comparator.compare(reflected, best) < 0) {\n+                final RealPointValuePair expanded = evaluateNewSimplex(simplex, rho, comparator);\n+                toAdd = comparator.compare(expanded, reflected) < 0 ? expanded : reflected;\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+            // otherwise, perform a contraction step\n+            else {\n+                final RealPointValuePair contracted = evaluateNewSimplex(simplex, sigma, comparator);\n+                toAdd = comparator.compare(contracted, best) < 0 ? contracted : null;\n             }\n-\n-        }\n-\n-    }\n+            if (toAdd != null) {\n+                final RealPointValuePair[] newSimplex = new RealPointValuePair[simplex.length];\n+                newSimplex[0] = toAdd;\n+                for (int i = 0; i < simplex.length - 1; ++i) {\n+                    newSimplex[i + 1] = evaluateNewPoint(toAdd, simplex[i], gamma);\n+                }\n+                Arrays.sort(newSimplex, comparator);\n+                simplex = newSimplex;\n+            } else {\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}