{
    "patch": "            PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n            PeriodPrinter printer = f.getPrinter();\n            if (printer == null) {\n                printer = new Composite((List<Object>) f.getOriginalList()).withPrinter((InternalPrinter) NullPrinter.INSTANCE);\n            }\n            PeriodParser parser = f.getParser();\n            if (parser == null) {\n                parser = new Composite((List<Object>) f.getOriginalList()).withParser((InternalParser) VoidParser.INSTANCE);\n            }\n            sep = sep.finish(printer, parser);\n            return new PeriodFormatter(sep, sep);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..35a886c1 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,17 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n-        }\n-    }\n+            PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n+            PeriodPrinter printer = f.getPrinter();\n+            if (printer == null) {\n+                printer = new Composite((List<Object>) f.getOriginalList()).withPrinter((InternalPrinter) NullPrinter.INSTANCE);\n+            }\n+            PeriodParser parser = f.getParser();\n+            if (parser == null) {\n+                parser = new Composite((List<Object>) f.getOriginalList()).withParser((InternalParser) VoidParser.INSTANCE);\n+            }\n+            sep = sep.finish(printer, parser);\n+            return new PeriodFormatter(sep, sep);\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}