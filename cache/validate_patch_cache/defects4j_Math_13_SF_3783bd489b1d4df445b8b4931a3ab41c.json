{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m, m.getRowDimension()); // specify high accuracy level\n    final double[] eigenValues = dec.getRealEigenvalues();\n    final double[] modEigenValues = Arrays.stream(eigenValues).map(Math::abs).toArray();\n    final RealMatrix eigenVectors = dec.getV();\n    final int dim = m.getColumnDimension();\n    final double[] sqrtEigen = new double[dim];\n\n    // Check for negative or near-zero eigenvalues\n    for (int i = 0; i < dim; i++) {\n        if (modEigenValues[i] < 1e-12) {\n            eigenValues[i] = 0.0;\n        } else if (eigenValues[i] < 0) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        }\n        sqrtEigen[i] = Math.sqrt(Math.max(eigenValues[i], 0.0));\n    }\n\n    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEigen);\n    final RealMatrix sqrtM = eigenVectors.multiply(sqrtD).multiply(eigenVectors.transpose());\n\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..64c8b5e32 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,27 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m, m.getRowDimension()); // specify high accuracy level\n+    final double[] eigenValues = dec.getRealEigenvalues();\n+    final double[] modEigenValues = Arrays.stream(eigenValues).map(Math::abs).toArray();\n+    final RealMatrix eigenVectors = dec.getV();\n+    final int dim = m.getColumnDimension();\n+    final double[] sqrtEigen = new double[dim];\n+\n+    // Check for negative or near-zero eigenvalues\n+    for (int i = 0; i < dim; i++) {\n+        if (modEigenValues[i] < 1e-12) {\n+            eigenValues[i] = 0.0;\n+        } else if (eigenValues[i] < 0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        }\n+        sqrtEigen[i] = Math.sqrt(Math.max(eigenValues[i], 0.0));\n     }\n+\n+    final RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(sqrtEigen);\n+    final RealMatrix sqrtM = eigenVectors.multiply(sqrtD).multiply(eigenVectors.transpose());\n+\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}