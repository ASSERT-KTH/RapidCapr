{
    "patch": "public void printInOperatorInForLoop(boolean c, boolean[] d, String expected) {\n    String output = \"\";\n    for (int i = 0; i < (c ? 1 : d.length); i++) {\n        if (c || d[i]) {\n            output += \"in,\";\n        } else {\n            output += \"out,\";\n        }\n    }\n    assertEquals(expected, \"for(a=\" + (c ? 0 : \"[0 in d]\") + \"; ; ) foo()\");\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..97fc98bb 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,17 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public void printInOperatorInForLoop(boolean c, boolean[] d, String expected) {\n+    String output = \"\";\n+    for (int i = 0; i < (c ? 1 : d.length); i++) {\n+        if (c || d[i]) {\n+            output += \"in,\";\n+        } else {\n+            output += \"out,\";\n+        }\n+    }\n+    assertEquals(expected, \"for(a=\" + (c ? 0 : \"[0 in d]\") + \"; ; ) foo()\");\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}