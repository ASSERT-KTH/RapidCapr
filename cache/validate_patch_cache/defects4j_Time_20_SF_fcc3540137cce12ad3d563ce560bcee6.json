{
    "patch": "            String validSubStr = str;\n            int validLength = -1;\n            for (String id : ALL_IDS) {\n                if (str.startsWith(id) && id.length()>validLength) {\n                    validSubStr = id;\n                    validLength = id.length();\n                }\n            }\n            if (validLength == -1) {\n                return ~position;\n            }\n            bucket.setZone(DateTimeZone.forID(validSubStr));\n            return position + validLength;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\nindex 558a5864..2a376cc3 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n@@ -2537,16 +2537,19 @@ public class DateTimeFormatterBuilder {\n             return MAX_LENGTH;\n         }\n \n-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n-            String str = text.substring(position);\n+            String validSubStr = str;\n+            int validLength = -1;\n             for (String id : ALL_IDS) {\n-                if (str.startsWith(id)) {\n-                    bucket.setZone(DateTimeZone.forID(id));\n-                    return position + id.length();\n+                if (str.startsWith(id) && id.length()>validLength) {\n+                    validSubStr = id;\n+                    validLength = id.length();\n                 }\n             }\n-            return ~position;\n-        }\n+            if (validLength == -1) {\n+                return ~position;\n+            }\n+            bucket.setZone(DateTimeZone.forID(validSubStr));\n+            return position + validLength;\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}