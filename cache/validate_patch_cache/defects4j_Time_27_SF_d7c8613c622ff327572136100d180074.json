{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n    if (size == 1 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        if (notPrinter) {\n            return new PeriodFormatter(null, new PeriodParserLiteral(sep.getValue()));\n        } else if (notParser) {\n            return new PeriodFormatter(new PeriodPrinterLiteral(sep.getValue()), null);\n        } else {\n            return new PeriodFormatter(new PeriodPrinterLiteral(sep.getValue()), new PeriodParserLiteral(sep.getValue()));\n        }\n    } else if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        \n        List<Object> tail = elementPairs.subList(1, size);\n        if (tail.size() == 1 && tail.get(0) instanceof Separator) {\n            PeriodFormatter f;\n            if (notPrinter) {\n                f = new PeriodFormatter(null, new PeriodParserLiteral(((Separator) tail.get(0)).getValue()));\n            } else if (notParser) {\n                f = new PeriodFormatter(new PeriodPrinterLiteral(((Separator) tail.get(0)).getValue()), null);\n            } else {\n                f = new PeriodFormatter(new PeriodPrinterLiteral(((Separator) tail.get(0)).getValue()), new PeriodParserLiteral(((Separator) tail.get(0)).getValue()));\n            }\n            sep = sep.finish(f.getPrinter(), f.getParser());\n        } else {\n            PeriodFormatter f = toFormatter(tail, notPrinter, notParser);\n            sep = sep.finish(f.getPrinter(), f.getParser());\n        }\n\n        return new PeriodFormatter(sep, sep);\n    } else {\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..0a70d3ad 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,17 +791,42 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+    if (size == 1 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        if (notPrinter) {\n+            return new PeriodFormatter(null, new PeriodParserLiteral(sep.getValue()));\n+        } else if (notParser) {\n+            return new PeriodFormatter(new PeriodPrinterLiteral(sep.getValue()), null);\n+        } else {\n+            return new PeriodFormatter(new PeriodPrinterLiteral(sep.getValue()), new PeriodParserLiteral(sep.getValue()));\n         }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n+    } else if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        \n+        List<Object> tail = elementPairs.subList(1, size);\n+        if (tail.size() == 1 && tail.get(0) instanceof Separator) {\n+            PeriodFormatter f;\n+            if (notPrinter) {\n+                f = new PeriodFormatter(null, new PeriodParserLiteral(((Separator) tail.get(0)).getValue()));\n+            } else if (notParser) {\n+                f = new PeriodFormatter(new PeriodPrinterLiteral(((Separator) tail.get(0)).getValue()), null);\n+            } else {\n+                f = new PeriodFormatter(new PeriodPrinterLiteral(((Separator) tail.get(0)).getValue()), new PeriodParserLiteral(((Separator) tail.get(0)).getValue()));\n+            }\n+            sep = sep.finish(f.getPrinter(), f.getParser());\n+        } else {\n+            PeriodFormatter f = toFormatter(tail, notPrinter, notParser);\n+            sep = sep.finish(f.getPrinter(), f.getParser());\n         }\n+\n+        return new PeriodFormatter(sep, sep);\n+    } else {\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n@@ -811,6 +836,7 @@ public class PeriodFormatterBuilder {\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}