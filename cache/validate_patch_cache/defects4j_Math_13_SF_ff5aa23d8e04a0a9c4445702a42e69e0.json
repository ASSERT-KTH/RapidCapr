{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final double[] realEigen = dec.getRealEigenvalues();\n    final int n = realEigen.length;\n    final double[] sqrtEigen = new double[n];\n    double maxEigen = 0;\n    \n    for (int i = 0; i < n; i++) {\n        if (realEigen[i] < 0) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        }\n        sqrtEigen[i] = Math.sqrt(realEigen[i]);\n        if (realEigen[i] > maxEigen) {\n            maxEigen = realEigen[i];\n        }\n    }\n\n    if (maxEigen < 1e-6) {\n        final RealMatrix sqrtD = MatrixUtils.createRealIdentityMatrix(n);\n        for (int i = 0; i < n; i++) {\n            sqrtD.setEntry(i, i, sqrtEigen[i]);\n        }\n        return dec.getV().multiply(sqrtD).multiply(dec.getV().transpose());\n    } else {\n        final double threshold = maxEigen * 1e-6;\n        final double[] zeroEigen = new double[n];\n        final int numNonZero = Arrays.stream(realEigen).filter(val -> val >= threshold).toArray().length;\n        final double[] sqZeroEigen = new double[numNonZero];\n        final RealMatrix V = dec.getV();\n        int zeroIndex = 0;\n        int nonZeroIndex = 0;\n        for (int i = 0; i < n; i++) {\n            if (realEigen[i] < threshold) {\n                zeroEigen[zeroIndex++] = realEigen[i];\n            } else {\n                sqZeroEigen[nonZeroIndex++] = Math.sqrt(realEigen[i]);\n            }\n        }\n        final RealMatrix zeroD = MatrixUtils.createRealDiagonalMatrix(zeroEigen);\n        final RealMatrix nonZeroD = MatrixUtils.createRealDiagonalMatrix(sqZeroEigen);\n        final RealMatrix zeroSubSpace = V.getSubMatrix(0, n - 1, 0, zeroIndex - 1);\n        final RealMatrix nonZeroSubSpace = V.getSubMatrix(0, n - 1, zeroIndex, n - 1);\n        final RealMatrix upperLeft = nonZeroSubSpace.multiply(nonZeroD).multiply(nonZeroSubSpace.transpose());\n        final RealMatrix lowerRight = zeroSubSpace.multiply(zeroD).multiply(zeroSubSpace.transpose());\n        final RealMatrix upperRight = nonZeroSubSpace.multiply(MatrixUtils.createRealDiagonalMatrix(Arrays.stream(sqrtEigen).filter(val -> val >= threshold).toArray())).multiply(zeroSubSpace.transpose());\n        final RealMatrix lowerLeft = MatrixUtils.createRealIdentityMatrix(n - numNonZero).scalarMultiply(0.0);\n        return new Array2DRowRealMatrix(MatrixUtils.blockMatrix(upperLeft, upperRight, lowerLeft, lowerRight));\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..06d93f81a 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,53 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final double[] realEigen = dec.getRealEigenvalues();\n+    final int n = realEigen.length;\n+    final double[] sqrtEigen = new double[n];\n+    double maxEigen = 0;\n+    \n+    for (int i = 0; i < n; i++) {\n+        if (realEigen[i] < 0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        }\n+        sqrtEigen[i] = Math.sqrt(realEigen[i]);\n+        if (realEigen[i] > maxEigen) {\n+            maxEigen = realEigen[i];\n+        }\n+    }\n+\n+    if (maxEigen < 1e-6) {\n+        final RealMatrix sqrtD = MatrixUtils.createRealIdentityMatrix(n);\n+        for (int i = 0; i < n; i++) {\n+            sqrtD.setEntry(i, i, sqrtEigen[i]);\n+        }\n+        return dec.getV().multiply(sqrtD).multiply(dec.getV().transpose());\n+    } else {\n+        final double threshold = maxEigen * 1e-6;\n+        final double[] zeroEigen = new double[n];\n+        final int numNonZero = Arrays.stream(realEigen).filter(val -> val >= threshold).toArray().length;\n+        final double[] sqZeroEigen = new double[numNonZero];\n+        final RealMatrix V = dec.getV();\n+        int zeroIndex = 0;\n+        int nonZeroIndex = 0;\n+        for (int i = 0; i < n; i++) {\n+            if (realEigen[i] < threshold) {\n+                zeroEigen[zeroIndex++] = realEigen[i];\n+            } else {\n+                sqZeroEigen[nonZeroIndex++] = Math.sqrt(realEigen[i]);\n+            }\n+        }\n+        final RealMatrix zeroD = MatrixUtils.createRealDiagonalMatrix(zeroEigen);\n+        final RealMatrix nonZeroD = MatrixUtils.createRealDiagonalMatrix(sqZeroEigen);\n+        final RealMatrix zeroSubSpace = V.getSubMatrix(0, n - 1, 0, zeroIndex - 1);\n+        final RealMatrix nonZeroSubSpace = V.getSubMatrix(0, n - 1, zeroIndex, n - 1);\n+        final RealMatrix upperLeft = nonZeroSubSpace.multiply(nonZeroD).multiply(nonZeroSubSpace.transpose());\n+        final RealMatrix lowerRight = zeroSubSpace.multiply(zeroD).multiply(zeroSubSpace.transpose());\n+        final RealMatrix upperRight = nonZeroSubSpace.multiply(MatrixUtils.createRealDiagonalMatrix(Arrays.stream(sqrtEigen).filter(val -> val >= threshold).toArray())).multiply(zeroSubSpace.transpose());\n+        final RealMatrix lowerLeft = MatrixUtils.createRealIdentityMatrix(n - numNonZero).scalarMultiply(0.0);\n+        return new Array2DRowRealMatrix(MatrixUtils.blockMatrix(upperLeft, upperRight, lowerLeft, lowerRight));\n     }\n }\n+}",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}