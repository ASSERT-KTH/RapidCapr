{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isGetProp()) {\n        if (isGlobalObject(n.getFirstChild())) {\n            return;\n        } else if (parent.isAssign() && (n.getFirstChild() == parent.getFirstChild() || n.getLastChild() == parent.getFirstChild())) {\n            return;\n        } else if (n.getParent().isExprResult() && n.getNext() == null) {\n            // Ignore cases where the property access is the last thing in an expression.\n            return;\n        }\n\n        String propName = n.getLastChild().getString();\n        if (propName.startsWith(\"webkit\") || propName.startsWith(\"moz\") || propName.startsWith(\"ms\")) {\n            t.report(n, METRICS_ERROR, \"Unsupported browser-specific property '\" + propName + \"'.\");\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}