{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final double EPSILON = 1e-12;\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealMatrix d = dec.getD();\n    final int n = m.getColumnDimension();\n    final RealMatrix dSqrt = MatrixUtils.createRealMatrix(n, n);\n\n    for (int i = 0; i < n; i++) {\n        double eigval = d.getEntry(i, i);\n        if (eigval < -EPSILON) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        }\n        if (eigval < 0.0) {\n            eigval = 0.0;\n        }\n        dSqrt.setEntry(i, i, Math.sqrt(eigval));\n    }\n\n    RealMatrix sqrt = v.multiply(dSqrt).multiply(v.transpose());\n    MatrixUtils.checkMatrix(sqrt);\n\n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..f25179908 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,28 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final double EPSILON = 1e-12;\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d = dec.getD();\n+    final int n = m.getColumnDimension();\n+    final RealMatrix dSqrt = MatrixUtils.createRealMatrix(n, n);\n+\n+    for (int i = 0; i < n; i++) {\n+        double eigval = d.getEntry(i, i);\n+        if (eigval < -EPSILON) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        }\n+        if (eigval < 0.0) {\n+            eigval = 0.0;\n+        }\n+        dSqrt.setEntry(i, i, Math.sqrt(eigval));\n     }\n+\n+    RealMatrix sqrt = v.multiply(dSqrt).multiply(v.transpose());\n+    MatrixUtils.checkMatrix(sqrt);\n+\n+    return sqrt;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}