{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    final double epsilon = 10e-15;\n    double sum = 0;\n    double term = 1;\n    int n = 0;\n    while (Math.abs(term) > epsilon) {\n        term = Gamma.gamma(a+n) * Math.pow(x,n) / (factorial(n) * (a+n));\n        sum += term;\n        n++;\n    }\n    double pdf = Math.exp(-x) * Math.pow(x, a) / Gamma.gamma(a);\n    return pdf * sum;\n}\n\npublic static double factorial(int n) {\n    double result = 1;\n    for (int i = 1; i <= n; i++) {\n        result = result * i;\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..1ba5d4d5a 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,27 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    final double epsilon = 10e-15;\n+    double sum = 0;\n+    double term = 1;\n+    int n = 0;\n+    while (Math.abs(term) > epsilon) {\n+        term = Gamma.gamma(a+n) * Math.pow(x,n) / (factorial(n) * (a+n));\n+        sum += term;\n+        n++;\n+    }\n+    double pdf = Math.exp(-x) * Math.pow(x, a) / Gamma.gamma(a);\n+    return pdf * sum;\n+}\n+\n+public static double factorial(int n) {\n+    double result = 1;\n+    for (int i = 1; i <= n; i++) {\n+        result = result * i;\n+    }\n+    return result;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}