{
    "patch": "void add(String newcode) {\n    maybeEndStatement();\n\n    if (newcode.length() == 0) {\n        return;\n    }\n\n    char first = newcode.charAt(0);\n    char last = getLastChar();\n\n    if (last == '/' && (first == '/' || first == '*')) {\n        // Do not allow a forward slash or asterisk to appear after a DIV.\n        // For example, REGEXP DIV REGEXP is valid and should print like / // / /\n        append(\" \");\n    }\n    else if (first != '/' && last != '/' && first != '*' && last != '*'\n            && ((isWordChar(first) && !isWordChar(last)) || (!isWordChar(first) && isWordChar(last)))) {\n        // Need space to separate. This is not pretty printing.\n        // For example: \"return foo;\"\n        append(\" \");\n    }\n\n    append(newcode);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 47556652..c54bc18d 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -178,28 +178,30 @@ abstract class CodeConsumer {\n   void endCaseBody() {\n   }\n \n-  void add(String newcode) {\n+void add(String newcode) {\n     maybeEndStatement();\n \n     if (newcode.length() == 0) {\n-      return;\n+        return;\n     }\n \n-    char c = newcode.charAt(0);\n-    if ((isWordChar(c) || c == '\\\\') &&\n-        isWordChar(getLastChar())) {\n-      // need space to separate. This is not pretty printing.\n-      // For example: \"return foo;\"\n-      append(\" \");\n-      // Do not allow a forward slash to appear after a DIV.\n-      // For example,\n-      // REGEXP DIV REGEXP\n-      // is valid and should print like\n-      // / // / /\n+    char first = newcode.charAt(0);\n+    char last = getLastChar();\n+\n+    if (last == '/' && (first == '/' || first == '*')) {\n+        // Do not allow a forward slash or asterisk to appear after a DIV.\n+        // For example, REGEXP DIV REGEXP is valid and should print like / // / /\n+        append(\" \");\n+    }\n+    else if (first != '/' && last != '/' && first != '*' && last != '*'\n+            && ((isWordChar(first) && !isWordChar(last)) || (!isWordChar(first) && isWordChar(last)))) {\n+        // Need space to separate. This is not pretty printing.\n+        // For example: \"return foo;\"\n+        append(\" \");\n     }\n \n     append(newcode);\n-  }\n+}\n \n   void appendOp(String op, boolean binOp) {\n     append(op);",
    "result_reason": "junit.framework.ComparisonFailure: expected:<... }",
    "test_result": "FAIL"
}