{
    "patch": "        final ParametricUnivariateSolver solver = new BrentSolver();\n        final double x = solver.solve(1000, new UnivariateFunction() {\n\n            public double value(double alpha) {\n                return new PearsonCorrelation(xValues, yValues, getObservations(), alpha).getCorrelationCoefficient();\n            }\n\n        }, -1, 1);\n\n        guess[0] = x;\n        \n        return fit(new ParametricUnivariateFunction() {\n\n            public double value(double x, double... parameters) {\n                double norm = 2 * Math.sqrt(Math.PI) * parameters[1];\n                double dx = x - parameters[0];\n                return (parameters[2] / norm) * Math.exp(-(dx * dx) / (2 * parameters[1] * parameters[1]));\n            }\n\n            public double[] gradient(double x, double... parameters) {\n                final double norm = 2 * Math.sqrt(Math.PI) * parameters[1];\n                final double dx = x - parameters[0];\n                final double t = dx / parameters[1];\n                final double d1 = (parameters[2] / norm) * Math.exp(-0.5 * t * t);\n                final double d2 = d1 * t / parameters[1];\n                final double d3 = d2 * t / parameters[1];\n                return new double[] { -d1, -d2, -d3 };\n            }\n\n        }, guess);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..fe36e30db 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -118,7 +118,36 @@ public class GaussianFitter extends CurveFitter {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        final ParametricUnivariateSolver solver = new BrentSolver();\n+        final double x = solver.solve(1000, new UnivariateFunction() {\n+\n+            public double value(double alpha) {\n+                return new PearsonCorrelation(xValues, yValues, getObservations(), alpha).getCorrelationCoefficient();\n+            }\n+\n+        }, -1, 1);\n+\n+        guess[0] = x;\n+        \n+        return fit(new ParametricUnivariateFunction() {\n+\n+            public double value(double x, double... parameters) {\n+                double norm = 2 * Math.sqrt(Math.PI) * parameters[1];\n+                double dx = x - parameters[0];\n+                return (parameters[2] / norm) * Math.exp(-(dx * dx) / (2 * parameters[1] * parameters[1]));\n+            }\n+\n+            public double[] gradient(double x, double... parameters) {\n+                final double norm = 2 * Math.sqrt(Math.PI) * parameters[1];\n+                final double dx = x - parameters[0];\n+                final double t = dx / parameters[1];\n+                final double d1 = (parameters[2] / norm) * Math.exp(-0.5 * t * t);\n+                final double d2 = d1 * t / parameters[1];\n+                final double d3 = d2 * t / parameters[1];\n+                return new double[] { -d1, -d2, -d3 };\n+            }\n+\n+        }, guess);\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}