{
    "patch": "        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n\n        if (field.getType().isInstance(candidate)) {\n            field.setAccessible(true);\n            try {\n                field.set(fieldInstance, candidate);\n                mocks.remove(candidate); // remove the used mock from the set of available mocks\n            } catch (IllegalAccessException e) {\n                throw new RuntimeException(\"Unable to inject mock candidate\", e);\n            }\n        } else if (candidate != null) {\n            throw new RuntimeException(\"Mock candidate \" + candidate.getClass().getSimpleName() + \" is not compatible with field type \" + field.getType().getSimpleName());\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..486d64b28 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,22 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+\n+        if (field.getType().isInstance(candidate)) {\n+            field.setAccessible(true);\n+            try {\n+                field.set(fieldInstance, candidate);\n+                mocks.remove(candidate); // remove the used mock from the set of available mocks\n+            } catch (IllegalAccessException e) {\n+                throw new RuntimeException(\"Unable to inject mock candidate\", e);\n+            }\n+        } else if (candidate != null) {\n+            throw new RuntimeException(\"Mock candidate \" + candidate.getClass().getSimpleName() + \" is not compatible with field type \" + field.getType().getSimpleName());\n+        }\n         }\n     }\n ",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}