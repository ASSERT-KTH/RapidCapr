{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n\n    int weeks = getWeeks();\n    int days = getDays();\n\n    // Normalize weeks and days to days only\n    if (weeks != 0 || days != 0) {\n        int totalDays = (weeks * 7) + days;\n        weeks = totalDays / 7;\n        days = totalDays % 7;\n\n        // Add the normalized weeks and days to the millis value\n        millis += (((long) totalDays) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    }\n\n    int years = getYears();\n    int months = getMonths();\n\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    // Normalize years and months\n    if (years != 0 || months != 0) {\n        int totalMonths = (years * 12) + months;\n        years = totalMonths / 12;\n        months = totalMonths % 12;\n\n        // Add the normalized years and months to the result\n        result = result.withYears(years).withMonths(months);\n    }\n\n    // Adjust weeks and days as necessary\n    if (weeks != 0 && type.isSupported(DurationFieldType.weeks())) {\n        result = result.withWeeks(weeks);\n    }\n    if (days != 0 && type.isSupported(DurationFieldType.days())) {\n        result = result.withDays(days);\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..38f06404 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,50 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+\n+    int weeks = getWeeks();\n+    int days = getDays();\n+\n+    // Normalize weeks and days to days only\n+    if (weeks != 0 || days != 0) {\n+        int totalDays = (weeks * 7) + days;\n+        weeks = totalDays / 7;\n+        days = totalDays % 7;\n+\n+        // Add the normalized weeks and days to the millis value\n+        millis += (((long) totalDays) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    }\n+\n+    int years = getYears();\n+    int months = getMonths();\n+\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+\n+    // Normalize years and months\n+    if (years != 0 || months != 0) {\n+        int totalMonths = (years * 12) + months;\n+        years = totalMonths / 12;\n+        months = totalMonths % 12;\n+\n+        // Add the normalized years and months to the result\n+        result = result.withYears(years).withMonths(months);\n     }\n \n+    // Adjust weeks and days as necessary\n+    if (weeks != 0 && type.isSupported(DurationFieldType.weeks())) {\n+        result = result.withWeeks(weeks);\n+    }\n+    if (days != 0 && type.isSupported(DurationFieldType.days())) {\n+        result = result.withDays(days);\n+    }\n+\n+    return result;\n+}\n+\n }",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}