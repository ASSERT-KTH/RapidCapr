{
    "patch": "        for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n            Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n            if(mockCandidate != null) {\n                field.setAccessible(true);\n                try {\n                    Object oldValue = field.get(fieldInstance);\n                    field.set(fieldInstance, mockCandidate);\n                    for (Field innerField : mockCandidate.getClass().getDeclaredFields()) {\n                        innerField.setAccessible(true);\n                        if (!Modifier.isStatic(innerField.getModifiers()) && innerField.get(mockCandidate) == oldValue) {\n                            Object innerCandidate = mockCandidateFilter.filterCandidate(mocks, innerField, mockCandidate).thenInject();\n                            if (innerCandidate != null) {\n                                innerField.set(mockCandidate, innerCandidate);\n                            }\n                        }\n                    }\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(e);\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..523da5e66 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,29 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+        for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+            Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            if(mockCandidate != null) {\n+                field.setAccessible(true);\n+                try {\n+                    Object oldValue = field.get(fieldInstance);\n+                    field.set(fieldInstance, mockCandidate);\n+                    for (Field innerField : mockCandidate.getClass().getDeclaredFields()) {\n+                        innerField.setAccessible(true);\n+                        if (!Modifier.isStatic(innerField.getModifiers()) && innerField.get(mockCandidate) == oldValue) {\n+                            Object innerCandidate = mockCandidateFilter.filterCandidate(mocks, innerField, mockCandidate).thenInject();\n+                            if (innerCandidate != null) {\n+                                innerField.set(mockCandidate, innerCandidate);\n+                            }\n+                        }\n+                    }\n+                } catch (IllegalAccessException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n         }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}