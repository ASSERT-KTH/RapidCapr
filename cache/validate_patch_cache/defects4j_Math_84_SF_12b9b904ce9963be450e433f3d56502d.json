{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws TooManyEvaluationsException {\n    incrementIterationsCounter();\n    final int n = simplex.length - 1;\n    final RealPointValuePair best = simplex[0];\n    final RealPointValuePair secondWorst = simplex[n - 1];\n    final RealPointValuePair worst = simplex[n];\n    final RealPointValuePair reflected = evaluateNewSimplex(getPointReflect(best, worst).getPoint(), comparator);\n    final double reflectedValue = reflected.getValue();\n    if (comparator.compare(reflected, secondWorst) < 0) {\n        if (comparator.compare(reflected, best) < 0) {\n            // Case 1: new vertex is better than the best vertex.\n            final RealPointValuePair[] newSimplex = simplex.clone();\n            newSimplex[0] = reflected;\n            final RealPointValuePair expanded = evaluateNewSimplex(getPointExpand(reflected, worst).getPoint(), comparator);\n            newSimplex[n] = comparator.compare(expanded, reflected) < 0 ? expanded : reflected;\n            simplex = newSimplex;\n        } else {\n            // Case 2: new vertex is better than the second worst but not better than the best vertex.\n            simplex[n] = reflected;\n        }\n    } else {\n        if (comparator.compare(reflected, worst) < 0) {\n            // Case 3: new vertex is worse than the second worst vertex but better than the worst vertex.\n            final RealPointValuePair[] newSimplex = simplex.clone();\n            newSimplex[n] = reflected;\n            simplex = newSimplex;\n        } else {\n            // Case 4: new vertex is worse than the worst vertex.\n            final RealPointValuePair contracted = evaluateNewSimplex(getPointContract(best, worst).getPoint(), comparator);\n            if (comparator.compare(contracted, worst) < 0) {\n                simplex[n] = contracted;\n            } else {\n                shrink(comparator);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..3d188ef1d 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,44 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n-            }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+        throws TooManyEvaluationsException {\n+    incrementIterationsCounter();\n+    final int n = simplex.length - 1;\n+    final RealPointValuePair best = simplex[0];\n+    final RealPointValuePair secondWorst = simplex[n - 1];\n+    final RealPointValuePair worst = simplex[n];\n+    final RealPointValuePair reflected = evaluateNewSimplex(getPointReflect(best, worst).getPoint(), comparator);\n+    final double reflectedValue = reflected.getValue();\n+    if (comparator.compare(reflected, secondWorst) < 0) {\n+        if (comparator.compare(reflected, best) < 0) {\n+            // Case 1: new vertex is better than the best vertex.\n+            final RealPointValuePair[] newSimplex = simplex.clone();\n+            newSimplex[0] = reflected;\n+            final RealPointValuePair expanded = evaluateNewSimplex(getPointExpand(reflected, worst).getPoint(), comparator);\n+            newSimplex[n] = comparator.compare(expanded, reflected) < 0 ? expanded : reflected;\n+            simplex = newSimplex;\n+        } else {\n+            // Case 2: new vertex is better than the second worst but not better than the best vertex.\n+            simplex[n] = reflected;\n+        }\n+    } else {\n+        if (comparator.compare(reflected, worst) < 0) {\n+            // Case 3: new vertex is worse than the second worst vertex but better than the worst vertex.\n+            final RealPointValuePair[] newSimplex = simplex.clone();\n+            newSimplex[n] = reflected;\n+            simplex = newSimplex;\n+        } else {\n+            // Case 4: new vertex is worse than the worst vertex.\n+            final RealPointValuePair contracted = evaluateNewSimplex(getPointContract(best, worst).getPoint(), comparator);\n+            if (comparator.compare(contracted, worst) < 0) {\n+                simplex[n] = contracted;\n+            } else {\n+                shrink(comparator);\n             }\n-\n         }\n-\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}