{
    "patch": "        if(Double.isNaN(result[resultOffset])) {\n            // Special cases for NaN\n            for(int i = 0; i < result.length; i++) {\n                result[resultOffset + i] = Double.NaN;\n            }\n        } else {\n            double absX = FastMath.abs(x[xOffset]);\n            double absY = FastMath.abs(y[yOffset]);\n            if(absX + absY == absX) { // x == 0\n                if(y[yOffset] > 0) {\n                    for(int i = 0; i < result.length; i++) {\n                        result[resultOffset + i] = FastMath.PI / 2;\n                    }\n                } else if(y[yOffset] < 0) {\n                    for(int i = 0; i < result.length; i++) {\n                        result[resultOffset + i] = -FastMath.PI / 2;\n                    }\n                } else { // y == 0\n                    for(int i = 0; i < result.length; i++) {\n                        result[resultOffset + i] = 0.0;\n                    }\n                }\n            } else if(Double.isInfinite(absY)) { // y is infinite\n                if(absX == Double.POSITIVE_INFINITY) {\n                    if(y[yOffset] == Double.POSITIVE_INFINITY) {\n                        for(int i = 0; i < result.length; i++) {\n                            result[resultOffset + i] = FastMath.PI / 4;\n                        }\n                    } else { // y == Double.NEGATIVE_INFINITY\n                        for(int i = 0; i < result.length; i++) {\n                            result[resultOffset + i] = -FastMath.PI / 4;\n                        }\n                    }\n                } else {\n                    if(y[yOffset] == Double.POSITIVE_INFINITY) {\n                        for(int i = 0; i < result.length; i++) {\n                            result[resultOffset + i] = FastMath.PI / 2;\n                        }\n                    } else { // y == Double.NEGATIVE_INFINITY\n                        for(int i = 0; i < result.length; i++) {\n                            result[resultOffset + i] = -FastMath.PI / 2;\n                        }\n                    }\n                }\n            } else {\n                atan2(y, yOffset, x, xOffset, result, resultOffset);\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..4d59746d3 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,54 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+        if(Double.isNaN(result[resultOffset])) {\n+            // Special cases for NaN\n+            for(int i = 0; i < result.length; i++) {\n+                result[resultOffset + i] = Double.NaN;\n+            }\n+        } else {\n+            double absX = FastMath.abs(x[xOffset]);\n+            double absY = FastMath.abs(y[yOffset]);\n+            if(absX + absY == absX) { // x == 0\n+                if(y[yOffset] > 0) {\n+                    for(int i = 0; i < result.length; i++) {\n+                        result[resultOffset + i] = FastMath.PI / 2;\n+                    }\n+                } else if(y[yOffset] < 0) {\n+                    for(int i = 0; i < result.length; i++) {\n+                        result[resultOffset + i] = -FastMath.PI / 2;\n+                    }\n+                } else { // y == 0\n+                    for(int i = 0; i < result.length; i++) {\n+                        result[resultOffset + i] = 0.0;\n+                    }\n+                }\n+            } else if(Double.isInfinite(absY)) { // y is infinite\n+                if(absX == Double.POSITIVE_INFINITY) {\n+                    if(y[yOffset] == Double.POSITIVE_INFINITY) {\n+                        for(int i = 0; i < result.length; i++) {\n+                            result[resultOffset + i] = FastMath.PI / 4;\n+                        }\n+                    } else { // y == Double.NEGATIVE_INFINITY\n+                        for(int i = 0; i < result.length; i++) {\n+                            result[resultOffset + i] = -FastMath.PI / 4;\n+                        }\n+                    }\n+                } else {\n+                    if(y[yOffset] == Double.POSITIVE_INFINITY) {\n+                        for(int i = 0; i < result.length; i++) {\n+                            result[resultOffset + i] = FastMath.PI / 2;\n+                        }\n+                    } else { // y == Double.NEGATIVE_INFINITY\n+                        for(int i = 0; i < result.length; i++) {\n+                            result[resultOffset + i] = -FastMath.PI / 2;\n+                        }\n+                    }\n+                }\n+            } else {\n+                atan2(y, yOffset, x, xOffset, result, resultOffset);\n+            }\n+        }\n \n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<NaN>",
    "test_result": "FAIL"
}