{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n    boolean detectedCycle = detectImplicitPrototypeCycle();\n    boolean resolvedViaProperties = !resolvedViaRegistry && !detectedCycle\n        && resolveViaProperties(t, enclosing);\n    if (!resolvedViaRegistry && detectedCycle) {\n      handleTypeCycle(t);\n    }\n    if (resolvedViaRegistry || resolvedViaProperties) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    } else {\n      super.resolveInternal(t, enclosing);\n      if (isResolved()) {\n        finishPropertyContinuations();\n      }\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..5193e8cf 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -182,33 +182,24 @@ class NamedType extends ProxyObjectType {\n    */\n   @Override\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n+    boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+    boolean detectedCycle = detectImplicitPrototypeCycle();\n+    boolean resolvedViaProperties = !resolvedViaRegistry && !detectedCycle\n+        && resolveViaProperties(t, enclosing);\n+    if (!resolvedViaRegistry && detectedCycle) {\n       handleTypeCycle(t);\n     }\n-\n-    if (resolved) {\n+    if (resolvedViaRegistry || resolvedViaProperties) {\n       super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n+    } else {\n+      super.resolveInternal(t, enclosing);\n+      if (isResolved()) {\n+        finishPropertyContinuations();\n+      }\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n   }\n \n   /**",
    "result_reason": "error: 'void' type not allowed here",
    "test_result": "ERROR"
}