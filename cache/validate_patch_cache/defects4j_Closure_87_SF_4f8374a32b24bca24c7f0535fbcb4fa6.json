{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n        if (NodeUtil.isFunctionDeclaration(maybeExpr.getFirstChild())) {\n          // Don't fold function declarations\n          return false;\n        }\n        Node child = maybeExpr.getFirstChild();\n        if (child != null && (child.isCall() || child.isNew())) {\n          // Don't fold function calls or object instantiations.\n          return false;\n        }\n        if (NodeUtil.isAssignmentOp(child)) {\n          Node lhs = child.getFirstChild();\n          Node rhs = child.getLastChild();\n          if (lhs.getType() == Token.NAME && !NodeUtil.mayHaveSideEffects(rhs)) {\n            Node parent = n.getParent();\n            if (parent.getType() == Token.BLOCK) {\n              Node grandparent = parent.getParent();\n              if (grandparent == null || grandparent.getType() != Token.BLOCK) {\n                // It is not contained within another block.\n                Node ancestor = maybeExpr;\n                while (ancestor != null && ancestor != parent\n                    && !NodeUtil.isStatementBlock(ancestor)) {\n                  ancestor = ancestor.getParent();\n                }\n                if (ancestor == parent) {\n                  // It is not contained within an if/for/while statement.\n                  return true;\n                }\n              }\n            }\n          }\n        } else if (child.getType() == Token.IF) {\n          // Handle the case when the child of the block is an if statement\n          Node thenBlock = child.getFirstChild().getNext();\n          Node elseBlock = child.getChildCount() > 2 ? child.getLastChild() : null;\n          return isFoldableExpressBlock(thenBlock) && (elseBlock == null || isFoldableExpressBlock(elseBlock));\n        } else if (NodeUtil.isExpressionNode(child)) {\n          // It is an expression statement.\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..c8923693 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,55 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+      if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+        if (NodeUtil.isFunctionDeclaration(maybeExpr.getFirstChild())) {\n+          // Don't fold function declarations\n+          return false;\n+        }\n+        Node child = maybeExpr.getFirstChild();\n+        if (child != null && (child.isCall() || child.isNew())) {\n+          // Don't fold function calls or object instantiations.\n+          return false;\n+        }\n+        if (NodeUtil.isAssignmentOp(child)) {\n+          Node lhs = child.getFirstChild();\n+          Node rhs = child.getLastChild();\n+          if (lhs.getType() == Token.NAME && !NodeUtil.mayHaveSideEffects(rhs)) {\n+            Node parent = n.getParent();\n+            if (parent.getType() == Token.BLOCK) {\n+              Node grandparent = parent.getParent();\n+              if (grandparent == null || grandparent.getType() != Token.BLOCK) {\n+                // It is not contained within another block.\n+                Node ancestor = maybeExpr;\n+                while (ancestor != null && ancestor != parent\n+                    && !NodeUtil.isStatementBlock(ancestor)) {\n+                  ancestor = ancestor.getParent();\n+                }\n+                if (ancestor == parent) {\n+                  // It is not contained within an if/for/while statement.\n+                  return true;\n+                }\n+              }\n+            }\n+          }\n+        } else if (child.getType() == Token.IF) {\n+          // Handle the case when the child of the block is an if statement\n+          Node thenBlock = child.getFirstChild().getNext();\n+          Node elseBlock = child.getChildCount() > 2 ? child.getLastChild() : null;\n+          return isFoldableExpressBlock(thenBlock) && (elseBlock == null || isFoldableExpressBlock(elseBlock));\n+        } else if (NodeUtil.isExpressionNode(child)) {\n+          // It is an expression statement.\n+          return true;\n+        }\n       }\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}