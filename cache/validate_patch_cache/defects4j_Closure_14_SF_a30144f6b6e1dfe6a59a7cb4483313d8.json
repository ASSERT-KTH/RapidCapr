{
    "patch": "private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    /*\n     * This is the case where:\n     *\n     * 1. Parent is null implies that we are transferring control to the end of\n     * the script.\n     *\n     * 2. Parent is a function implies that we are transferring control back to\n     * the caller of the function.\n     *\n     * 3. If the node is a return statement, we should also transfer control\n     * back to the caller of the function.\n     *\n     * 4. If the node is root then we have reached the end of what we have been\n     * asked to traverse.\n     *\n     * In all cases we should transfer control to a \"symbolic return\" node.\n     * This will make life easier for DFAs.\n     */\n    Node parent = node.getParent();\n    if (parent == null || parent.isFunction() || (parent.isScript() && parent.getBooleanProp(Node.GOOG_MODULE))) {\n      return null;\n    } else if (NodeUtil.isLoopStructure(parent)) {\n      // If we are coming out of loop we should follow the fallthrough.\n      return computeFallThrough(node);\n    }\n\n    // If we are just before an IF/WHILE/DO/FOR/TRY:\n    switch (parent.getType()) {\n      case Token.IF:\n        return computeFollowNode(fromNode, parent, cfa);\n      case Token.CASE:\n      case Token.DEFAULT_CASE:\n        if (parent.getNext() != null) {\n          if (parent.getNext().isCase()) {\n            return parent.getNext().getFirstChild().getNext();\n          } else if (parent.getNext().isDefaultCase()) {\n            return parent.getNext().getFirstChild();\n          } else if (parent.getNext().isBlock() && !parent.getNext().hasChildren()) {\n            return computeFollowNode(fromNode, parent, cfa);\n          } else {\n            return computeFallThrough(parent.getNext());\n          }\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n      case Token.FOR:\n        if (NodeUtil.isForIn(parent)) {\n          return parent;\n        } else {\n          return parent.getFirstChild().getNext().getNext();\n        }\n      case Token.WHILE:\n      case Token.DO:\n        return parent;\n      case Token.TRY: {\n        Node catchBlock = NodeUtil.getCatchBlock(parent);\n        if (catchBlock == null) {\n          if (!NodeUtil.hasFinallyBlock(parent)) {\n            // If we're in the try block and there is neither a catch block nor a finally block.\n            return computeFallThrough(node);\n          } else {\n            Node finallyBlock = NodeUtil.getFinallyBlock(parent);\n            if (finallyBlock.getLastChild().isEmpty()) {\n              // If we're at the end of the catch block, the control flow will immediately move to finally block.\n              return computeFallThrough(finallyBlock.getFirstChild());\n            } else {\n              // If we're in the try block and there is a finally block.\n              Node catchBody = parent.getFirstChild().getNext();\n              cfa.createEdge(fromNode, Branch.UNCOND, catchBody);\n              return computeFallThrough(finallyBlock.getFirstChild());\n            }\n          }\n        } else {\n          // If we're in the catch block.\n          if (catchBlock.getLastChild().isEmpty()) {\n            return parent.getNext();\n          } else {\n            // If there is a finally block.\n            Node finallyBlock = NodeUtil.getFinallyBlock(parent);\n            Node catchBody = catchBlock.getLastChild();\n            cfa.createEdge(fromNode, Branch.UNCOND, catchBody);\n            if (finallyBlock.getLastChild().isEmpty()) {\n              // If there is no fallback case in the finally block, go to the next statement after the try/catch.\n              return parent.getNext();\n            } else {\n              // If there is a fallback case in the finally block.\n              Node afterCatchFinallyFallback = NodeUtil.getTwoDotOneChildren(finallyBlock).getLastChild();\n              return computeFallThrough(afterCatchFinallyFallback);\n            }\n          }\n        }\n      }\n    }\n\n    Node nextSibling = node.getNext();\n    while (nextSibling != null) {\n      if (NodeUtil.getEnclosingBlock(nextSibling) == parent) {\n        if (nextSibling.isBreak() || nextSibling.isContinue()) {\n          Node label = nextSibling.getFirstChild();\n          Node dest = NodeUtil.getBreakingControlTarget(nextSibling);\n          if (label == null) {\n            cfa.createEdge(fromNode, Branch.UNCOND, dest);\n          } else {\n            cfa.createEdge(fromNode, Branch.UNCOND, label);\n          }\n          return null;\n        } else {\n          return computeFallThrough(nextSibling);\n        }\n      } else {\n        nextSibling = nextSibling.getNext();\n      }\n    }\n\n    return computeFollowNode(fromNode, parent, cfa);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..0a310715 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -689,8 +689,7 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n    *        during recursion.\n    * @param node The node that follow() should compute.\n    */\n-  private static Node computeFollowNode(\n-      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n+private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {\n     /*\n      * This is the case where:\n      *\n@@ -710,32 +709,32 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n      * This will make life easier for DFAs.\n      */\n     Node parent = node.getParent();\n-    if (parent == null || parent.isFunction() ||\n-        (cfa != null && node == cfa.root)) {\n+    if (parent == null || parent.isFunction() || (parent.isScript() && parent.getBooleanProp(Node.GOOG_MODULE))) {\n       return null;\n+    } else if (NodeUtil.isLoopStructure(parent)) {\n+      // If we are coming out of loop we should follow the fallthrough.\n+      return computeFallThrough(node);\n     }\n \n-    // If we are just before a IF/WHILE/DO/FOR:\n+    // If we are just before an IF/WHILE/DO/FOR/TRY:\n     switch (parent.getType()) {\n-      // The follow() of any of the path from IF would be what follows IF.\n       case Token.IF:\n         return computeFollowNode(fromNode, parent, cfa);\n       case Token.CASE:\n       case Token.DEFAULT_CASE:\n-        // After the body of a CASE, the control goes to the body of the next\n-        // case, without having to go to the case condition.\n         if (parent.getNext() != null) {\n           if (parent.getNext().isCase()) {\n             return parent.getNext().getFirstChild().getNext();\n           } else if (parent.getNext().isDefaultCase()) {\n             return parent.getNext().getFirstChild();\n+          } else if (parent.getNext().isBlock() && !parent.getNext().hasChildren()) {\n+            return computeFollowNode(fromNode, parent, cfa);\n           } else {\n-            Preconditions.checkState(false, \"Not reachable\");\n+            return computeFallThrough(parent.getNext());\n           }\n         } else {\n           return computeFollowNode(fromNode, parent, cfa);\n         }\n-        break;\n       case Token.FOR:\n         if (NodeUtil.isForIn(parent)) {\n           return parent;\n@@ -745,48 +744,67 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n       case Token.WHILE:\n       case Token.DO:\n         return parent;\n-      case Token.TRY:\n-        // If we are coming out of the TRY block...\n-        if (parent.getFirstChild() == node) {\n-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n-            return computeFallThrough(parent.getLastChild());\n-          } else { // and have no FINALLY.\n-            return computeFollowNode(fromNode, parent, cfa);\n-          }\n-        // CATCH block.\n-        } else if (NodeUtil.getCatchBlock(parent) == node){\n-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n-            return computeFallThrough(node.getNext());\n+      case Token.TRY: {\n+        Node catchBlock = NodeUtil.getCatchBlock(parent);\n+        if (catchBlock == null) {\n+          if (!NodeUtil.hasFinallyBlock(parent)) {\n+            // If we're in the try block and there is neither a catch block nor a finally block.\n+            return computeFallThrough(node);\n           } else {\n-            return computeFollowNode(fromNode, parent, cfa);\n+            Node finallyBlock = NodeUtil.getFinallyBlock(parent);\n+            if (finallyBlock.getLastChild().isEmpty()) {\n+              // If we're at the end of the catch block, the control flow will immediately move to finally block.\n+              return computeFallThrough(finallyBlock.getFirstChild());\n+            } else {\n+              // If we're in the try block and there is a finally block.\n+              Node catchBody = parent.getFirstChild().getNext();\n+              cfa.createEdge(fromNode, Branch.UNCOND, catchBody);\n+              return computeFallThrough(finallyBlock.getFirstChild());\n+            }\n           }\n-        // If we are coming out of the FINALLY block...\n-        } else if (parent.getLastChild() == node){\n-          if (cfa != null) {\n-            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+        } else {\n+          // If we're in the catch block.\n+          if (catchBlock.getLastChild().isEmpty()) {\n+            return parent.getNext();\n+          } else {\n+            // If there is a finally block.\n+            Node finallyBlock = NodeUtil.getFinallyBlock(parent);\n+            Node catchBody = catchBlock.getLastChild();\n+            cfa.createEdge(fromNode, Branch.UNCOND, catchBody);\n+            if (finallyBlock.getLastChild().isEmpty()) {\n+              // If there is no fallback case in the finally block, go to the next statement after the try/catch.\n+              return parent.getNext();\n+            } else {\n+              // If there is a fallback case in the finally block.\n+              Node afterCatchFinallyFallback = NodeUtil.getTwoDotOneChildren(finallyBlock).getLastChild();\n+              return computeFallThrough(afterCatchFinallyFallback);\n             }\n           }\n-          return computeFollowNode(fromNode, parent, cfa);\n         }\n+      }\n     }\n \n-    // Now that we are done with the special cases follow should be its\n-    // immediate sibling, unless its sibling is a function\n     Node nextSibling = node.getNext();\n-\n-    // Skip function declarations because control doesn't get pass into it.\n-    while (nextSibling != null && nextSibling.isFunction()) {\n-      nextSibling = nextSibling.getNext();\n+    while (nextSibling != null) {\n+      if (NodeUtil.getEnclosingBlock(nextSibling) == parent) {\n+        if (nextSibling.isBreak() || nextSibling.isContinue()) {\n+          Node label = nextSibling.getFirstChild();\n+          Node dest = NodeUtil.getBreakingControlTarget(nextSibling);\n+          if (label == null) {\n+            cfa.createEdge(fromNode, Branch.UNCOND, dest);\n+          } else {\n+            cfa.createEdge(fromNode, Branch.UNCOND, label);\n+          }\n+          return null;\n+        } else {\n+          return computeFallThrough(nextSibling);\n+        }\n+      } else {\n+        nextSibling = nextSibling.getNext();\n+      }\n     }\n \n-    if (nextSibling != null) {\n-      return computeFallThrough(nextSibling);\n-    } else {\n-      // If there are no more siblings, control is transferred up the AST.\n-      return computeFollowNode(fromNode, parent, cfa);\n-    }\n-  }\n+    return computeFollowNode(fromNode, parent, cfa);\n \n   /**\n    * Computes the destination node of n when we want to fallthrough into the",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}