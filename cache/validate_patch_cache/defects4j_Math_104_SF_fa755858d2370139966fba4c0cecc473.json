{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    final int MAXITER = 100;\n    final double EPSILON = 10e-15;\n\n    if (Double.isNaN(a) || Double.isNaN(x)) {\n        return Double.NaN;\n    }\n    if (Double.isInfinite(a) || Double.isInfinite(x) || a <= 0.0) {\n        return Double.NaN;\n    }\n    if (x < 0.0) {\n        return 0.0;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    double ret = 0.0;\n    boolean check = false;\n    if (x < a + 1.0) {\n        ret = pseries(a, x, EPSILON);\n        check = true;\n    } else {\n        ret = 1.0 - qseries(a, x, EPSILON);\n        check = false;\n    }\n    if (Double.isNaN(ret)) {\n        return ret;\n    }\n\n    double carg = a * Math.log(x) - x - logGamma(a);\n    double result = Math.exp(carg) * ret;\n\n    if (check) {\n        result /= a;\n    }\n\n    double oldResult = 0.0;\n    for (int i = 1; i <= MAXITER; i++) {\n        oldResult = result;\n        carg = -x + a * Math.log(x) + logGamma(a + i);\n        ret = Math.exp(carg) / (a + i);\n        result += ret;\n        if (oldResult == result) {\n            break;\n        }\n    }\n\n    return result;\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    final int MAXITER = 100;\n    final double EPSILON = 10e-15;\n\n    if (Double.isNaN(a) || Double.isNaN(x)) {\n        return Double.NaN;\n    }\n    if (Double.isInfinite(a) || Double.isInfinite(x) || a <= 0.0) {\n        return Double.NaN;\n    }\n    if (x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 1.0;\n    }\n\n    double ret = 0.0;\n    boolean check = false;\n    if (x < a + 1.0) {\n        ret = pseries(a, x, EPSILON);\n        check = true;\n    } else {\n        ret = 1.0 - qseries(a, x, EPSILON);\n        check = false;\n    }\n    if (Double.isNaN(ret)) {\n        return ret;\n    }\n\n    double carg = a * Math.log(x) - x - logGamma(a);\n    double result = Math.exp(carg) * ret;\n\n    if (!check) {\n        result /= a;\n    }\n    double oldResult = 0.0;\n    for (int i = 1; i <= MAXITER; i++) {\n        oldResult = result;\n        carg = -x + a * Math.log(x) + logGamma(a + i);\n        ret = Math.exp(carg) / (a + i);\n        result += ret;\n        if (oldResult == result) {\n            break;\n        }\n    }\n\n    return 1.0 - result;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..0af035a5b 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,106 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    final int MAXITER = 100;\n+    final double EPSILON = 10e-15;\n+\n+    if (Double.isNaN(a) || Double.isNaN(x)) {\n+        return Double.NaN;\n+    }\n+    if (Double.isInfinite(a) || Double.isInfinite(x) || a <= 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x < 0.0) {\n+        return 0.0;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    double ret = 0.0;\n+    boolean check = false;\n+    if (x < a + 1.0) {\n+        ret = pseries(a, x, EPSILON);\n+        check = true;\n+    } else {\n+        ret = 1.0 - qseries(a, x, EPSILON);\n+        check = false;\n+    }\n+    if (Double.isNaN(ret)) {\n+        return ret;\n+    }\n+\n+    double carg = a * Math.log(x) - x - logGamma(a);\n+    double result = Math.exp(carg) * ret;\n+\n+    if (check) {\n+        result /= a;\n+    }\n+\n+    double oldResult = 0.0;\n+    for (int i = 1; i <= MAXITER; i++) {\n+        oldResult = result;\n+        carg = -x + a * Math.log(x) + logGamma(a + i);\n+        ret = Math.exp(carg) / (a + i);\n+        result += ret;\n+        if (oldResult == result) {\n+            break;\n+        }\n+    }\n+\n+    return result;\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    final int MAXITER = 100;\n+    final double EPSILON = 10e-15;\n+\n+    if (Double.isNaN(a) || Double.isNaN(x)) {\n+        return Double.NaN;\n+    }\n+    if (Double.isInfinite(a) || Double.isInfinite(x) || a <= 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+\n+    double ret = 0.0;\n+    boolean check = false;\n+    if (x < a + 1.0) {\n+        ret = pseries(a, x, EPSILON);\n+        check = true;\n+    } else {\n+        ret = 1.0 - qseries(a, x, EPSILON);\n+        check = false;\n+    }\n+    if (Double.isNaN(ret)) {\n+        return ret;\n+    }\n+\n+    double carg = a * Math.log(x) - x - logGamma(a);\n+    double result = Math.exp(carg) * ret;\n+\n+    if (!check) {\n+        result /= a;\n+    }\n+    double oldResult = 0.0;\n+    for (int i = 1; i <= MAXITER; i++) {\n+        oldResult = result;\n+        carg = -x + a * Math.log(x) + logGamma(a + i);\n+        ret = Math.exp(carg) / (a + i);\n+        result += ret;\n+        if (oldResult == result) {\n+            break;\n+        }\n+    }\n+\n+    return 1.0 - result;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}