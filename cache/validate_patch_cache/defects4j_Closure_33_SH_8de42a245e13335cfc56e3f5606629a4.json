{
    "patch": "// We only want to match constraints on anonymous types.\nif (!this.isNominalConstructor() && constraintObj.isRecordType()) {\n    boolean anyDeclared = false;\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (isPropertyTypeDeclared(prop)) {\n            anyDeclared = true;\n        } else {\n            JSType typeToInfer = propType;\n            if (!hasProperty(prop)) {\n              if (anyDeclared) {\n                  warnings.add(\"Property \" + prop + \" not declared in \" + this.getName() + \". \" +\n                      \"Adding it as a weak property.\");\n                  typeToInfer = unsetType();\n              } else {\n                  typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                      .getLeastSupertype(propType);\n              }\n            }\n            defineInferredProperty(prop, typeToInfer, null);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..290cfad8 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,29 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+// We only want to match constraints on anonymous types.\n+if (!this.isNominalConstructor() && constraintObj.isRecordType()) {\n+    boolean anyDeclared = false;\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+        JSType propType = constraintObj.getPropertyType(prop);\n+        if (isPropertyTypeDeclared(prop)) {\n+            anyDeclared = true;\n+        } else {\n+            JSType typeToInfer = propType;\n+            if (!hasProperty(prop)) {\n+              if (anyDeclared) {\n+                  warnings.add(\"Property \" + prop + \" not declared in \" + this.getName() + \". \" +\n+                      \"Adding it as a weak property.\");\n+                  typeToInfer = unsetType();\n+              } else {\n+                  typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+                      .getLeastSupertype(propType);\n+              }\n+            }\n+            defineInferredProperty(prop, typeToInfer, null);\n+        }\n+    }\n+}\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}