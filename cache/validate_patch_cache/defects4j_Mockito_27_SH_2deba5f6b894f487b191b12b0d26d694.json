{
    "patch": "        if (!(oldMockHandler instanceof MockHandler)) {\n            return;\n        }\n        MockHandler<T> oldMockHandlerCast = (MockHandler<T>) oldMockHandler;\n        InvocationContainer invocationContainer = oldMockHandlerCast.getInvocationContainer();\n        if (!(invocationContainer instanceof InvocationContainerImpl)) {\n            return;\n        }\n        InvocationContainerImpl invocationContainerImpl = (InvocationContainerImpl) invocationContainer;\n        List<Invocation> invocations = invocationContainerImpl.getInvocations();\n        int invocationCount = invocations.size();\n        if (invocationCount >= threshold) {\n            invocationContainerImpl.clear();\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..d57e05f40 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,23 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        if (!(oldMockHandler instanceof MockHandler)) {\n+            return;\n+        }\n+        MockHandler<T> oldMockHandlerCast = (MockHandler<T>) oldMockHandler;\n+        InvocationContainer invocationContainer = oldMockHandlerCast.getInvocationContainer();\n+        if (!(invocationContainer instanceof InvocationContainerImpl)) {\n+            return;\n+        }\n+        InvocationContainerImpl invocationContainerImpl = (InvocationContainerImpl) invocationContainer;\n+        List<Invocation> invocations = invocationContainerImpl.getInvocations();\n+        int invocationCount = invocations.size();\n+        if (invocationCount >= threshold) {\n+            invocationContainerImpl.clear();\n+        }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}