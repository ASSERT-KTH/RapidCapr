{
    "patch": "case Token.URSH:\n    // JavaScript handles zero shifts on signed numbers differently than\n    // Java as a Java int can not represent the unsigned 32-bit number but\n    // a long can represent all 64-bit unsigned numbers so we convert here.\n    long valLong = lvalInt & 0xFFFFFFFFL;\n    result = valLong >>> rvalInt;\n    break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex d6c194a3..46693688 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -695,7 +695,13 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n           // JavaScript handles zero shifts on signed numbers differently than\n           // Java as an Java int can not represent the unsigned 32-bit number\n           // where JavaScript can so use a long here.\n-          result = lvalInt >>> rvalInt;\n+case Token.URSH:\n+    // JavaScript handles zero shifts on signed numbers differently than\n+    // Java as a Java int can not represent the unsigned 32-bit number but\n+    // a long can represent all 64-bit unsigned numbers so we convert here.\n+    long valLong = lvalInt & 0xFFFFFFFFL;\n+    result = valLong >>> rvalInt;\n+    break;\n           break;\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +",
    "result_reason": "error: duplicate case label",
    "test_result": "ERROR"
}