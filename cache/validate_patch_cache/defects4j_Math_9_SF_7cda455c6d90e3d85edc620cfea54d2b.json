{
    "patch": "public Line revert() {\n    Vector3D revertedDirection = direction.negate();\n    double[] expectedCoords = {0.0, 0.0, 0.0};\n    double[] actualCoords = revertedDirection.toArray();\n    for (int i = 0; i < 3; ++i) {\n        if (Math.abs(expectedCoords[i] - actualCoords[i]) < 1e-12) {\n            actualCoords[i] = expectedCoords[i];\n        }\n    }\n    return new Line(Vector3D.of(actualCoords), Vector3D.of(revertedDirection.toArray()));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..e38cbe5fe 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,17 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n+public Line revert() {\n+    Vector3D revertedDirection = direction.negate();\n+    double[] expectedCoords = {0.0, 0.0, 0.0};\n+    double[] actualCoords = revertedDirection.toArray();\n+    for (int i = 0; i < 3; ++i) {\n+        if (Math.abs(expectedCoords[i] - actualCoords[i]) < 1e-12) {\n+            actualCoords[i] = expectedCoords[i];\n+        }\n     }\n+    return new Line(Vector3D.of(actualCoords), Vector3D.of(revertedDirection.toArray()));\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}