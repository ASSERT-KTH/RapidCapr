{
    "patch": "            } catch (IllegalArgumentException ex) {\n                // Create and throw a new IllegalFieldValueException with the original exception as the cause\n                // unless a cause has already been set (i.e. do not overwrite causes).\n                IllegalFieldValueException ifve = new IllegalFieldValueException(\n                        savedFields[i].iField.getType(),\n                        Integer.valueOf(savedFields[i].iValue),\n                        ex.getMessage(),\n                        ex);\n                for (int j = 0; j < i; j++) {\n                    ifve.addFieldValue(savedFields[j].iField, savedFields[j].iValue);\n                }\n                throw ifve;\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..99ce809b 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,19 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            } catch (IllegalArgumentException ex) {\n+                // Create and throw a new IllegalFieldValueException with the original exception as the cause\n+                // unless a cause has already been set (i.e. do not overwrite causes).\n+                IllegalFieldValueException ifve = new IllegalFieldValueException(\n+                        savedFields[i].iField.getType(),\n+                        Integer.valueOf(savedFields[i].iValue),\n+                        ex.getMessage(),\n+                        ex);\n+                for (int j = 0; j < i; j++) {\n+                    ifve.addFieldValue(savedFields[j].iField, savedFields[j].iValue);\n+                }\n+                throw ifve;\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}