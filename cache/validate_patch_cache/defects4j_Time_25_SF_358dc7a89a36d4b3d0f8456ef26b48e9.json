{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // Get initial offset at the local time\n    final int initialOffset = getOffset(instantLocal);\n    \n    // Adjust the instant time based on the initial offset\n    long instantAdjusted = instantLocal - initialOffset;\n    int offsetAdjusted = getOffset(instantAdjusted);\n    \n    // If the initial and adjusted offsets are the same, we are done. Return the initial offset.\n    if (initialOffset == offsetAdjusted) {\n        return initialOffset;\n    }\n    \n    // Find the next and previous transition times relative to the adjusted time.\n    long nextTransition = nextTransition(instantAdjusted);\n    long prevTransition = previousTransition(instantAdjusted);\n    \n    // Adjust the next and previous transition times based on the initial offset.\n    long nextTransitionAdjusted = nextTransition - initialOffset;\n    long prevTransitionAdjusted = prevTransition - initialOffset;\n    \n    // Case 1: There is no transition between next and previous transition.\n    if (nextTransitionAdjusted == prevTransitionAdjusted) {\n        return initialOffset;\n    }\n    \n    // Calculate the offset before and after the instant time.\n    int offsetBefore = getOffset(prevTransitionAdjusted - 1);\n    int offsetAfter = getOffset(nextTransitionAdjusted);\n    \n    // Case 2: The instant time falls within the gap between two transitions.\n    if (offsetBefore > offsetAfter) {\n        throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" + new DateTime(instantLocal));\n    }\n    \n    // Case 3: The instant time falls within the overlap between two transitions.\n    if (offsetBefore < offsetAfter) {\n        if (initialOffset < offsetBefore) {\n            return offsetBefore; //Instant falls before the overlap \n        } else if (initialOffset > offsetAfter) {\n            return offsetAfter; //Instant falls after the overlap\n        }\n    }\n    \n    // Case 4: The instant time falls within the range of next and previous transition.\n    if (nextTransitionAdjusted > instantLocal && instantLocal >= prevTransitionAdjusted) {\n        // If instant falls before the transition point, return the offset before the transition.\n        if (instantLocal < (nextTransitionAdjusted + prevTransitionAdjusted) / 2) {\n            return offsetBefore;\n        } else { // instant falls after the transition point, return the offset after the transition.\n            return offsetAfter;\n        }\n    }\n    \n    return offsetAdjusted; // Return adjusted offset if there is no any transition.\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b754f88f 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,62 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // Get initial offset at the local time\n+    final int initialOffset = getOffset(instantLocal);\n+    \n+    // Adjust the instant time based on the initial offset\n+    long instantAdjusted = instantLocal - initialOffset;\n+    int offsetAdjusted = getOffset(instantAdjusted);\n+    \n+    // If the initial and adjusted offsets are the same, we are done. Return the initial offset.\n+    if (initialOffset == offsetAdjusted) {\n+        return initialOffset;\n+    }\n+    \n+    // Find the next and previous transition times relative to the adjusted time.\n+    long nextTransition = nextTransition(instantAdjusted);\n+    long prevTransition = previousTransition(instantAdjusted);\n+    \n+    // Adjust the next and previous transition times based on the initial offset.\n+    long nextTransitionAdjusted = nextTransition - initialOffset;\n+    long prevTransitionAdjusted = prevTransition - initialOffset;\n+    \n+    // Case 1: There is no transition between next and previous transition.\n+    if (nextTransitionAdjusted == prevTransitionAdjusted) {\n+        return initialOffset;\n+    }\n+    \n+    // Calculate the offset before and after the instant time.\n+    int offsetBefore = getOffset(prevTransitionAdjusted - 1);\n+    int offsetAfter = getOffset(nextTransitionAdjusted);\n+    \n+    // Case 2: The instant time falls within the gap between two transitions.\n+    if (offsetBefore > offsetAfter) {\n+        throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" + new DateTime(instantLocal));\n+    }\n+    \n+    // Case 3: The instant time falls within the overlap between two transitions.\n+    if (offsetBefore < offsetAfter) {\n+        if (initialOffset < offsetBefore) {\n+            return offsetBefore; //Instant falls before the overlap \n+        } else if (initialOffset > offsetAfter) {\n+            return offsetAfter; //Instant falls after the overlap\n         }\n-        return offsetAdjusted;\n     }\n+    \n+    // Case 4: The instant time falls within the range of next and previous transition.\n+    if (nextTransitionAdjusted > instantLocal && instantLocal >= prevTransitionAdjusted) {\n+        // If instant falls before the transition point, return the offset before the transition.\n+        if (instantLocal < (nextTransitionAdjusted + prevTransitionAdjusted) / 2) {\n+            return offsetBefore;\n+        } else { // instant falls after the transition point, return the offset after the transition.\n+            return offsetAfter;\n+        }\n+    }\n+    \n+    return offsetAdjusted; // Return adjusted offset if there is no any transition.\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}