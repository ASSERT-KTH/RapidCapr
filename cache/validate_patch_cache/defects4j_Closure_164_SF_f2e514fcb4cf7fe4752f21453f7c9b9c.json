{
    "patch": "public boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  if (parameters.hasRestFormals() != that.parameters.hasRestFormals()) {\n    // If one function has rest parameters but the other doesn't,\n    // they're not compatible. The only exception is if the function\n    // types are identical except for the presence/absence of rest\n    // parameters, but we're not considering that at the moment.\n    return false;\n  }\n\n  // This is described in Draft 2 of the ES4 spec, Section 3.4.7:\n  // Subtyping Function Types.\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // that.paramType[i] <: this.paramType[i] (contravariant)\n  //\n  // If this.paramType[i] is required,\n  // then that.paramType[i] is required.\n  // If this.paramType[i] is optional or variadic,\n  // then that.paramType[i] can be required, optional, or variadic.\n  // If this.paramType[i] is variadic,\n  // then that.paramType[i] must be variadic.\n  //\n  // In theory, the \"required-ness\" should work in the other direction as\n  // well. In other words, if we have\n  //\n  // function f(number, number) {}\n  // function g(number) {}\n  //\n  // Then f *should* not be a subtype of g, and g *should* not be\n  // a subtype of f. But in practice, we do not implement it this way.\n  // We want to support the use case where you can pass g where f is\n  // expected, and pretend that g ignores the second argument.\n  // That way, you can have a single \"no-op\" function, and you don't have\n  // to create a new no-op function for every possible type signature.\n  //\n  // So, in this case, g < f, but f !< g\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n  while (thisParam != null && thatParam != null) {\n    JSType thisParamType = thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n\n    // For parameters that have different names or that are not in the same position in the declaration order,\n    // we proceed to the next ones.\n    if (!thisParam.matchesName(thatParam) || !thisParam.matchesIndex(thatParam)) {\n      thisParam = thisParam.getNext();\n      thatParam = thatParam.getNext();\n      continue;\n    }\n\n    if (thisParamType != null) {\n      boolean isThisParamVariable = thisParam.isVarArgs();\n      boolean isThatParamVariable = thatParam.isVarArgs();\n      boolean isThisParamOptional = thisParam.isOptionalArg();\n      boolean isThatParamOptional = thatParam.isOptionalArg();\n\n      if (isThisParamVariable && !isThatParamVariable) {\n        // If this parameter is variadic but that parameter isn't, they're not compatible.\n        return false;\n      }\n\n      if (!isThisParamVariable) {\n        // If this parameter isn't variadic, then check if it's a subtype of that parameter.\n        if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n          return false;\n        }\n\n        if (!isThatParamVariable) {\n          // If that parameter isn't variadic, then this parameter must not be optional.\n          if (isThisParamOptional && !isThatParamOptional) {\n            return false;\n          }\n        }\n      }\n    }\n\n    // Proceed to next parameters.\n    thisParam = thisParam.getNext();\n    thatParam = thatParam.getNext();\n  }\n\n  // If this function has more required parameters than that function, it's not a subtype.\n  while (thisParam != null && thisParam.isOptionalArg()) {\n    thisParam = thisParam.getNext();\n  }\n  while (thatParam != null && thatParam.isOptionalArg()) {\n    thatParam = thatParam.getNext();\n  }\n  return thisParam == null && thatParam == null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..3c01ca41 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,81 +77,106 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n-    if (!(other instanceof ArrowType)) {\n-      return false;\n-    }\n+public boolean isSubtype(JSType other) {\n+  if (!(other instanceof ArrowType)) {\n+    return false;\n+  }\n \n-    ArrowType that = (ArrowType) other;\n+  ArrowType that = (ArrowType) other;\n \n-    // This is described in Draft 2 of the ES4 spec,\n-    // Section 3.4.7: Subtyping Function Types.\n+  if (parameters.hasRestFormals() != that.parameters.hasRestFormals()) {\n+    // If one function has rest parameters but the other doesn't,\n+    // they're not compatible. The only exception is if the function\n+    // types are identical except for the presence/absence of rest\n+    // parameters, but we're not considering that at the moment.\n+    return false;\n+  }\n \n-    // this.returnType <: that.returnType (covariant)\n-    if (!this.returnType.isSubtype(that.returnType)) {\n-      return false;\n-    }\n+  // This is described in Draft 2 of the ES4 spec, Section 3.4.7:\n+  // Subtyping Function Types.\n \n-    // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n-    Node thisParam = parameters.getFirstChild();\n-    Node thatParam = that.parameters.getFirstChild();\n-    while (thisParam != null && thatParam != null) {\n-      JSType thisParamType = thisParam.getJSType();\n-      JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n-          return false;\n-        }\n-      }\n+  // this.returnType <: that.returnType (covariant)\n+  if (!this.returnType.isSubtype(that.returnType)) {\n+    return false;\n+  }\n+\n+  // that.paramType[i] <: this.paramType[i] (contravariant)\n+  //\n+  // If this.paramType[i] is required,\n+  // then that.paramType[i] is required.\n+  // If this.paramType[i] is optional or variadic,\n+  // then that.paramType[i] can be required, optional, or variadic.\n+  // If this.paramType[i] is variadic,\n+  // then that.paramType[i] must be variadic.\n+  //\n+  // In theory, the \"required-ness\" should work in the other direction as\n+  // well. In other words, if we have\n+  //\n+  // function f(number, number) {}\n+  // function g(number) {}\n+  //\n+  // Then f *should* not be a subtype of g, and g *should* not be\n+  // a subtype of f. But in practice, we do not implement it this way.\n+  // We want to support the use case where you can pass g where f is\n+  // expected, and pretend that g ignores the second argument.\n+  // That way, you can have a single \"no-op\" function, and you don't have\n+  // to create a new no-op function for every possible type signature.\n+  //\n+  // So, in this case, g < f, but f !< g\n+  Node thisParam = parameters.getFirstChild();\n+  Node thatParam = that.parameters.getFirstChild();\n+  while (thisParam != null && thatParam != null) {\n+    JSType thisParamType = thisParam.getJSType();\n+    JSType thatParamType = thatParam.getJSType();\n \n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n+    // For parameters that have different names or that are not in the same position in the declaration order,\n+    // we proceed to the next ones.\n+    if (!thisParam.matchesName(thatParam) || !thisParam.matchesIndex(thatParam)) {\n+      thisParam = thisParam.getNext();\n+      thatParam = thatParam.getNext();\n+      continue;\n+    }\n \n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+    if (thisParamType != null) {\n+      boolean isThisParamVariable = thisParam.isVarArgs();\n+      boolean isThatParamVariable = thatParam.isVarArgs();\n+      boolean isThisParamOptional = thisParam.isOptionalArg();\n+      boolean isThatParamOptional = thatParam.isOptionalArg();\n \n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n-        thisParam = thisParam.getNext();\n-      }\n-      if (!thatIsVarArgs) {\n-        thatParam = thatParam.getNext();\n+      if (isThisParamVariable && !isThatParamVariable) {\n+        // If this parameter is variadic but that parameter isn't, they're not compatible.\n+        return false;\n       }\n \n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n+      if (!isThisParamVariable) {\n+        // If this parameter isn't variadic, then check if it's a subtype of that parameter.\n+        if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n+          return false;\n+        }\n+\n+        if (!isThatParamVariable) {\n+          // If that parameter isn't variadic, then this parameter must not be optional.\n+          if (isThisParamOptional && !isThatParamOptional) {\n+            return false;\n+          }\n+        }\n       }\n     }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n+    // Proceed to next parameters.\n+    thisParam = thisParam.getNext();\n+    thatParam = thatParam.getNext();\n+  }\n \n-    return true;\n+  // If this function has more required parameters than that function, it's not a subtype.\n+  while (thisParam != null && thisParam.isOptionalArg()) {\n+    thisParam = thisParam.getNext();\n+  }\n+  while (thatParam != null && thatParam.isOptionalArg()) {\n+    thatParam = thatParam.getNext();\n   }\n+  return thisParam == null && thatParam == null;\n+}\n \n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}