{
    "patch": "public void testRegularizedGammaPositivePositive() {\n    double[] x = {2.1, 4.2, 6.3, 8.4, 10.5};\n    double[] z = {1, 5, 10, 15, 20};\n    double[] expected = {0.9971170604334977, 0.9999999998597679, 0.9999999999999873, 1.0, 1.0};\n    double actualP;\n    for (int i = 0; i < x.length; i++) {\n        actualP = Gamma.regularizedGammaP(x[i], z[i]);\n        TestUtils.assertEquals(expected[i], actualP, 10e-15);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..ff57099fc 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,16 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public void testRegularizedGammaPositivePositive() {\n+    double[] x = {2.1, 4.2, 6.3, 8.4, 10.5};\n+    double[] z = {1, 5, 10, 15, 20};\n+    double[] expected = {0.9971170604334977, 0.9999999998597679, 0.9999999999999873, 1.0, 1.0};\n+    double actualP;\n+    for (int i = 0; i < x.length; i++) {\n+        actualP = Gamma.regularizedGammaP(x[i], z[i]);\n+        TestUtils.assertEquals(expected[i], actualP, 10e-15);\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}