{
    "patch": "    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException\n    {\n        long overflow = Integer.MAX_VALUE;\n        long denom = 1;\n\n        while (denom <= maxDenominator && denom <= overflow) {\n            long num = (long) FastMath.floor(denom * value + 0.5d);\n            long delta = FastMath.abs(num / denom - value) <= epsilon ? 0 : 1;\n\n            if (delta == 0) {\n                this.numerator = (int) num;\n                this.denominator = (int) denom;\n                return;\n            }\n\n            denom++;\n        }\n\n        throw new FractionConversionException(value, maxIterations);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f81ff0a94..e78cb41c9 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -176,65 +176,22 @@ public class Fraction\n         throws FractionConversionException\n     {\n         long overflow = Integer.MAX_VALUE;\n-        double r0 = value;\n-        long a0 = (long)FastMath.floor(r0);\n-        if (a0 > overflow) {\n-            throw new FractionConversionException(value, a0, 1l);\n-        }\n-\n-        // check for (almost) integer arguments, which should not go\n-        // to iterations.\n-        if (FastMath.abs(a0 - value) < epsilon) {\n-            this.numerator = (int) a0;\n-            this.denominator = 1;\n-            return;\n-        }\n+        long denom = 1;\n \n-        long p0 = 1;\n-        long q0 = 0;\n-        long p1 = a0;\n-        long q1 = 1;\n-\n-        long p2 = 0;\n-        long q2 = 1;\n-\n-        int n = 0;\n-        boolean stop = false;\n-        do {\n-            ++n;\n-            double r1 = 1.0 / (r0 - a0);\n-            long a1 = (long)FastMath.floor(r1);\n-            p2 = (a1 * p1) + p0;\n-            q2 = (a1 * q1) + q0;\n-            if ((p2 > overflow) || (q2 > overflow)) {\n-                throw new FractionConversionException(value, p2, q2);\n-            }\n+        while (denom <= maxDenominator && denom <= overflow) {\n+            long num = (long) FastMath.floor(denom * value + 0.5d);\n+            long delta = FastMath.abs(num / denom - value) <= epsilon ? 0 : 1;\n \n-            double convergent = (double)p2 / (double)q2;\n-            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n-                p0 = p1;\n-                p1 = p2;\n-                q0 = q1;\n-                q1 = q2;\n-                a0 = a1;\n-                r0 = r1;\n-            } else {\n-                stop = true;\n+            if (delta == 0) {\n+                this.numerator = (int) num;\n+                this.denominator = (int) denom;\n+                return;\n             }\n-        } while (!stop);\n \n-        if (n >= maxIterations) {\n-            throw new FractionConversionException(value, maxIterations);\n-        }\n-\n-        if (q2 < maxDenominator) {\n-            this.numerator = (int) p2;\n-            this.denominator = (int) q2;\n-        } else {\n-            this.numerator = (int) p1;\n-            this.denominator = (int) q1;\n+            denom++;\n         }\n \n+        throw new FractionConversionException(value, maxIterations);\n     }\n \n     /**",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}