{
    "patch": "import org.apache.commons.math3.exception.ConvergenceException;\nimport org.apache.commons.math3.exception.TooManyEvaluationsException;\nimport org.apache.commons.math3.exception.NumberIsTooLargeException;\nimport org.apache.commons.math3.analysis.UnivariateFunction;\n\npublic class RiddersSolver extends AbstractUnivariateSolver {\n\n    ...\n\n    protected double doSolve() {\n        double min = getMin();\n        double max = getMax();\n        double startValue = getStartValue();\n\n        double targetY;\n        double secondY;\n\n        double x1;\n        double y1;\n\n        double x2;\n        double y2;\n\n        double x3;\n        double y3;\n\n        if (startValue < min || startValue > max) {\n            startValue = min + 0.5 * (max - min);\n        }\n\n        double yStart = computeObjectiveValue(startValue);\n\n        if (yStart == 0) {\n            return startValue;\n        }\n\n        double yMin = computeObjectiveValue(min);\n        if (yMin == 0) {\n            return min;\n        }\n\n        if (yStart * yMin < 0) {\n            targetY = 0;\n            x1 = startValue;\n            y1 = yStart;\n            x2 = min;\n            y2 = yMin;\n        } else {\n            double yMax = computeObjectiveValue(max);\n            if (yMax == 0) {\n                return max;\n            }\n\n            if (yStart * yMax < 0) {\n                targetY = 0;\n                x1 = startValue;\n                y1 = yStart;\n                x2 = max;\n                y2 = yMax;\n            } else {\n                throw new ConvergenceException(LocalizedFormats.FAILED_BRACKETING,\n                        min, max, yMin, yMax, yStart);\n            }\n        }\n\n        int numIterations = 0;\n        while (true) {\n\n            // Calculate the next approximation.\n            double xMid = 0.5 * (x1 + x2);\n            double yMid = computeObjectiveValue(xMid);\n\n            if (FastMath.abs(yMid) <= functionValueAccuracy) {\n                return xMid;\n            }\n\n            if (yMid * y1 < 0) {\n                x2 = xMid;\n                y2 = yMid;\n            } else {\n                x1 = xMid;\n                y1 = yMid;\n            }\n\n            numIterations++;\n\n            if (numIterations >= maximumIterations) {\n                throw new ConvergenceException(\n                        LocalizedFormats.MAXIMUM_NUMBER_OF_ITERATIONS_EXCEEDED,\n                        maximumIterations);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e258c68c6..6b644956a 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -125,126 +125,100 @@ public abstract class BaseSecantSolver\n     }\n \n     /** {@inheritDoc} */\n-    protected final double doSolve() {\n-        // Get initial solution\n-        double x0 = getMin();\n-        double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n-\n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n+import org.apache.commons.math3.exception.ConvergenceException;\n+import org.apache.commons.math3.exception.TooManyEvaluationsException;\n+import org.apache.commons.math3.exception.NumberIsTooLargeException;\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+\n+public class RiddersSolver extends AbstractUnivariateSolver {\n+\n+    ...\n+\n+    protected double doSolve() {\n+        double min = getMin();\n+        double max = getMax();\n+        double startValue = getStartValue();\n+\n+        double targetY;\n+        double secondY;\n+\n+        double x1;\n+        double y1;\n+\n+        double x2;\n+        double y2;\n+\n+        double x3;\n+        double y3;\n+\n+        if (startValue < min || startValue > max) {\n+            startValue = min + 0.5 * (max - min);\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n+\n+        double yStart = computeObjectiveValue(startValue);\n+\n+        if (yStart == 0) {\n+            return startValue;\n         }\n \n-        // Verify bracketing of initial solution.\n-        verifyBracketing(x0, x1);\n+        double yMin = computeObjectiveValue(min);\n+        if (yMin == 0) {\n+            return min;\n+        }\n \n-        // Get accuracies.\n-        final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        if (yStart * yMin < 0) {\n+            targetY = 0;\n+            x1 = startValue;\n+            y1 = yStart;\n+            x2 = min;\n+            y2 = yMin;\n+        } else {\n+            double yMax = computeObjectiveValue(max);\n+            if (yMax == 0) {\n+                return max;\n+            }\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n-        // larger than the right bound.\n-        boolean inverted = false;\n+            if (yStart * yMax < 0) {\n+                targetY = 0;\n+                x1 = startValue;\n+                y1 = yStart;\n+                x2 = max;\n+                y2 = yMax;\n+            } else {\n+                throw new ConvergenceException(LocalizedFormats.FAILED_BRACKETING,\n+                        min, max, yMin, yMax, yStart);\n+            }\n+        }\n \n-        // Keep finding better approximations.\n+        int numIterations = 0;\n         while (true) {\n+\n             // Calculate the next approximation.\n-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n-\n-            // If the new approximation is the exact root, return it. Since\n-            // this is not an under-approximation or an over-approximation,\n-            // we can return it regardless of the allowed solutions.\n-            if (fx == 0.0) {\n-                return x;\n+            double xMid = 0.5 * (x1 + x2);\n+            double yMid = computeObjectiveValue(xMid);\n+\n+            if (FastMath.abs(yMid) <= functionValueAccuracy) {\n+                return xMid;\n             }\n \n-            // Update the bounds with the new approximation.\n-            if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n-                // the interval.\n-                x0 = x1;\n-                f0 = f1;\n-                inverted = !inverted;\n+            if (yMid * y1 < 0) {\n+                x2 = xMid;\n+                y2 = yMid;\n             } else {\n-                switch (method) {\n-                case ILLINOIS:\n-                    f0 *= 0.5;\n-                    break;\n-                case PEGASUS:\n-                    f0 *= f1 / (f1 + fx);\n-                    break;\n-                        // Update formula cannot make any progress: Update the\n-                        // search interval.\n-                default:\n-                    // Should never happen.\n-                }\n-            }\n-            // Update from [x0, x1] to [x0, x].\n-            x1 = x;\n-            f1 = fx;\n-\n-            // If the function value of the last approximation is too small,\n-            // given the function value accuracy, then we can't get closer to\n-            // the root than we already are.\n-            if (FastMath.abs(f1) <= ftol) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    if (inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case RIGHT_SIDE:\n-                    if (!inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case BELOW_SIDE:\n-                    if (f1 <= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                case ABOVE_SIDE:\n-                    if (f1 >= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                default:\n-                    throw new MathInternalError();\n-                }\n+                x1 = xMid;\n+                y1 = yMid;\n             }\n \n-            // If the current interval is within the given accuracies, we\n-            // are satisfied with the current approximation.\n-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n-                                                     atol)) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    return inverted ? x1 : x0;\n-                case RIGHT_SIDE:\n-                    return inverted ? x0 : x1;\n-                case BELOW_SIDE:\n-                    return (f1 <= 0) ? x1 : x0;\n-                case ABOVE_SIDE:\n-                    return (f1 >= 0) ? x1 : x0;\n-                default:\n-                    throw new MathInternalError();\n-                }\n+            numIterations++;\n+\n+            if (numIterations >= maximumIterations) {\n+                throw new ConvergenceException(\n+                        LocalizedFormats.MAXIMUM_NUMBER_OF_ITERATIONS_EXCEEDED,\n+                        maximumIterations);\n             }\n         }\n     }\n+}\n \n     /** <em>Secant</em>-based root-finding methods. */\n     protected enum Method {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}