{
    "patch": "Type[] bounds = typeVariable.getBounds();\nfor (Type type : bounds) {\n    if (type instanceof TypeVariable) {\n        readTypeVariables();\n    } else {\n        if (type != null && !(type instanceof TypeVariable)) {\n            registerTypeVariablesOn(type);\n        }\n    }\n}\nType actualTypeArgumentFor = getActualTypeArgumentFor(typeVariable);\nif (actualTypeArgumentFor != null && !(actualTypeArgumentFor instanceof TypeVariable)) {\n    registerTypeVariablesOn(actualTypeArgumentFor);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..a86a84a08 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,25 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type[] bounds = typeVariable.getBounds();\n+for (Type type : bounds) {\n+    if (type instanceof TypeVariable) {\n+        readTypeVariables();\n+    } else {\n+        if (type != null && !(type instanceof TypeVariable)) {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+}\n+Type actualTypeArgumentFor = getActualTypeArgumentFor(typeVariable);\n+if (actualTypeArgumentFor != null && !(actualTypeArgumentFor instanceof TypeVariable)) {\n+    registerTypeVariablesOn(actualTypeArgumentFor);\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}