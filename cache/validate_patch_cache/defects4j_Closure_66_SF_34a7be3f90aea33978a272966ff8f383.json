{
    "patch": "public double getTypedPercent(JsonObject json) {\n    JsonArray data = json.getAsJsonArray(\"data\");\n    int typedCount = 0;\n    int totalCount = 0;\n    for (JsonElement element : data) {\n        JsonObject datum = element.getAsJsonObject();\n        String type = datum.get(\"type\").getAsString();\n        int count = datum.get(\"count\").getAsInt();\n        totalCount += count;\n        if (type.equals(\"typed\")) {\n            typedCount += count;\n        }\n    }\n    return (double) typedCount / totalCount * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..2914353b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(JsonObject json) {\n+    JsonArray data = json.getAsJsonArray(\"data\");\n+    int typedCount = 0;\n+    int totalCount = 0;\n+    for (JsonElement element : data) {\n+        JsonObject datum = element.getAsJsonObject();\n+        String type = datum.get(\"type\").getAsString();\n+        int count = datum.get(\"count\").getAsInt();\n+        totalCount += count;\n+        if (type.equals(\"typed\")) {\n+            typedCount += count;\n+        }\n+    }\n+    return (double) typedCount / totalCount * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}