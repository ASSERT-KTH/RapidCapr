{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long durationMillis = getMillis();\n    durationMillis += ((long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND);\n    durationMillis += ((long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE);\n    durationMillis += ((long) getHours() * DateTimeConstants.MILLIS_PER_HOUR);\n    durationMillis += ((long) getDays() * DateTimeConstants.MILLIS_PER_DAY);\n    durationMillis += ((long) getWeeks() * 7 * DateTimeConstants.MILLIS_PER_DAY);\n    int years = 0;\n    int months = 0;\n    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n        years = getYears();\n        months = getMonths();\n\n        if (type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {\n            long totalMonths = (long)years * 12 + months;\n            years = (int) (totalMonths / 12);\n            months = (int) (totalMonths % 12);\n        } else if (type.isSupported(DurationFieldType.years())) {\n            years += months / 12;\n            months = months % 12;\n        } else if (type.isSupported(DurationFieldType.months())) {\n            years = 0;\n            months += years * 12;\n        }\n    }\n\n    Period result = new Period(durationMillis, type, ISOChronology.getInstanceUTC())\n            .withYears(years)\n            .withMonths(months)\n            .withWeeks(0)\n            .withDays(0);\n    return result.normalizedStandard();\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..dff3ce50 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,39 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long durationMillis = getMillis();\n+    durationMillis += ((long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND);\n+    durationMillis += ((long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE);\n+    durationMillis += ((long) getHours() * DateTimeConstants.MILLIS_PER_HOUR);\n+    durationMillis += ((long) getDays() * DateTimeConstants.MILLIS_PER_DAY);\n+    durationMillis += ((long) getWeeks() * 7 * DateTimeConstants.MILLIS_PER_DAY);\n+    int years = 0;\n+    int months = 0;\n+    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n+        years = getYears();\n+        months = getMonths();\n+\n+        if (type.isSupported(DurationFieldType.years()) && type.isSupported(DurationFieldType.months())) {\n+            long totalMonths = (long)years * 12 + months;\n+            years = (int) (totalMonths / 12);\n+            months = (int) (totalMonths % 12);\n+        } else if (type.isSupported(DurationFieldType.years())) {\n+            years += months / 12;\n             months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+        } else if (type.isSupported(DurationFieldType.months())) {\n+            years = 0;\n+            months += years * 12;\n         }\n-        return result;\n     }\n \n+    Period result = new Period(durationMillis, type, ISOChronology.getInstanceUTC())\n+            .withYears(years)\n+            .withMonths(months)\n+            .withWeeks(0)\n+            .withDays(0);\n+    return result.normalizedStandard();\n+}\n+\n }",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}