{
    "patch": "  public void process(Node externs, Node root) {\n    // Rename variables to make them unique\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      t.traverseRoots(externs, root);\n    }\n    \n    // Propagate constant annotations\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n    \n    // Remove duplicate declarations\n    removeDuplicateDeclarations(root);\n    \n    // Traverse the AST nodes with the current instance of the program transformer\n    NodeTraversal.traverse(compiler, root, this);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Normalize.java b/src/com/google/javascript/jscomp/Normalize.java\nindex 4aa45558..9a50309f 100644\n--- a/src/com/google/javascript/jscomp/Normalize.java\n+++ b/src/com/google/javascript/jscomp/Normalize.java\n@@ -85,15 +85,22 @@ class Normalize implements CompilerPass, Callback {\n \n   @Override\n   public void process(Node externs, Node root) {\n-    NodeTraversal.traverse(compiler, root, this);\n+    // Rename variables to make them unique\n     if (MAKE_LOCAL_NAMES_UNIQUE) {\n       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n       NodeTraversal t = new NodeTraversal(compiler, renamer);\n       t.traverseRoots(externs, root);\n     }\n-    removeDuplicateDeclarations(root);\n+    \n+    // Propagate constant annotations\n     new PropogateConstantAnnotations(compiler, assertOnChange)\n         .process(externs, root);\n+    \n+    // Remove duplicate declarations\n+    removeDuplicateDeclarations(root);\n+    \n+    // Traverse the AST nodes with the current instance of the program transformer\n+    NodeTraversal.traverse(compiler, root, this);\n   }\n \n   @Override",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}