{
    "patch": "  @Override public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) {\n      // Ignore the root node of the scope.\n      return;\n    }\n\n    if (n.getType() == Token.LP && parent.getType() == Token.FUNCTION ||\n        n.getType() == Token.STRING_KEY ||\n        n.getType() == Token.COMPUTED_PROP ||\n        n.getType() == Token.GETPROP ||\n        n.getType() == Token.NAME && parent.getType() == Token.CATCH ||\n        n.getType() == Token.FUNCTION && NodeUtil.isFunctionExpression(parent) ||\n        n.getType() == Token.VAR && NodeUtil.isStatementBlock(parent.getParent())) {\n      // Attach literal types to specific nodes:\n      // - the inputs of a function expression\n      // - property names and keys\n      // - property access chains\n      // - catch variable names\n      // - functions expressions (assigned or unassigned in an statement block)\n      attachLiteralTypes(n);\n    } else if (n.getType() == Token.FUNCTION && parent.getType() != Token.NAME) {\n      // Define a declared function, except for function expressions assigned to a name.\n      defineDeclaredFunction(n, parent);\n    } else if (n.getType() == Token.CATCH) {\n      // Define a catch variable.\n      defineCatch(n, parent);\n    } else if (n.getType() == Token.VAR) {\n      // Define variables.\n      defineVar(n, parent);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..9f70791a 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,37 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+  @Override public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) {\n+      // Ignore the root node of the scope.\n+      return;\n+    }\n \n+    if (n.getType() == Token.LP && parent.getType() == Token.FUNCTION ||\n+        n.getType() == Token.STRING_KEY ||\n+        n.getType() == Token.COMPUTED_PROP ||\n+        n.getType() == Token.GETPROP ||\n+        n.getType() == Token.NAME && parent.getType() == Token.CATCH ||\n+        n.getType() == Token.FUNCTION && NodeUtil.isFunctionExpression(parent) ||\n+        n.getType() == Token.VAR && NodeUtil.isStatementBlock(parent.getParent())) {\n+      // Attach literal types to specific nodes:\n+      // - the inputs of a function expression\n+      // - property names and keys\n+      // - property access chains\n+      // - catch variable names\n+      // - functions expressions (assigned or unassigned in an statement block)\n       attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+    } else if (n.getType() == Token.FUNCTION && parent.getType() != Token.NAME) {\n+      // Define a declared function, except for function expressions assigned to a name.\n+      defineDeclaredFunction(n, parent);\n+    } else if (n.getType() == Token.CATCH) {\n+      // Define a catch variable.\n+      defineCatch(n, parent);\n+    } else if (n.getType() == Token.VAR) {\n+      // Define variables.\n+      defineVar(n, parent);\n     }\n+  }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}