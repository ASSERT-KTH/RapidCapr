{
    "patch": "private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    Type[] genericInterfaces = clazz.getGenericInterfaces();\n    for (Type genericInterface : genericInterfaces) {\n        if (genericInterface instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType) genericInterface;\n            Type rawType = parameterizedType.getRawType();\n            if (rawType instanceof Class) {\n                TypeVariable<?>[] typeParameters = ((Class<?>) rawType).getTypeParameters();\n                Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n                for (int i = 0; i < typeParameters.length; i++) {\n                    if (typeParameters[i].equals(typeVariable)) {\n                        return actualTypeArguments[i];\n                    }\n                }\n            }\n        }\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..3643ee2c0 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,30 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    Type[] genericInterfaces = clazz.getGenericInterfaces();\n+    for (Type genericInterface : genericInterfaces) {\n+        if (genericInterface instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType) genericInterface;\n+            Type rawType = parameterizedType.getRawType();\n+            if (rawType instanceof Class) {\n+                TypeVariable<?>[] typeParameters = ((Class<?>) rawType).getTypeParameters();\n+                Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+                for (int i = 0; i < typeParameters.length; i++) {\n+                    if (typeParameters[i].equals(typeVariable)) {\n+                        return actualTypeArguments[i];\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    return null;\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}