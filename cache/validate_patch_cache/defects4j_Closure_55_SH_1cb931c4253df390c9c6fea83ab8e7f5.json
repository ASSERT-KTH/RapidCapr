{
    "patch": "if (n.getType() != Token.FUNCTION) {\n  return false;\n}\nif (!NodeUtil.isStatementBlock(n.getParent().getType())) {\n  return false;\n}\nNode grandparent = n.getParent().getParent();\nif (grandparent == null ||\n    (grandparent.getType() != Token.VAR && grandparent.getType() != Token.EXPR_RESULT && grandparent.getType() != Token.ASSIGN)) {\n  return false;\n}\nreturn true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..1494e685 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,18 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+if (n.getType() != Token.FUNCTION) {\n+  return false;\n+}\n+if (!NodeUtil.isStatementBlock(n.getParent().getType())) {\n+  return false;\n+}\n+Node grandparent = n.getParent().getParent();\n+if (grandparent == null ||\n+    (grandparent.getType() != Token.VAR && grandparent.getType() != Token.EXPR_RESULT && grandparent.getType() != Token.ASSIGN)) {\n+  return false;\n+}\n+return true;\n   }\n \n   /**",
    "result_reason": "error: method isStatementBlock in class NodeUtil cannot be applied to given types;",
    "test_result": "ERROR"
}