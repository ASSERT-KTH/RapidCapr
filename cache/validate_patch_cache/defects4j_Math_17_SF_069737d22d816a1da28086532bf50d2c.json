{
    "patch": "    public Dfp multiply(final int x) {\n        if (isNaN()) {\n            return newInstance(getField(), getZero(), DfpField.QNAN);\n        }\n\n        if (x == 0) {\n            return newInstance(getField(), getZero(), DfpField.FINITE);\n        }\n\n        int[] product = new int[getDimension() + 1];\n\n        int xi = Math.abs(x);\n        int carry = 0;\n\n        for (int i = 0; i < getDimension(); i++) {\n            int p = (xi * mant[i]) + carry;\n            product[i] = p % radix;\n            carry = p / radix;\n        }\n\n        product[getDimension()] = carry;\n\n        if (x < 0) {\n            return newInstance(mant, product, exp, sign ^ 1);\n        } else {\n            return newInstance(mant, product, exp, sign);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..5369873bc 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,32 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+        if (isNaN()) {\n+            return newInstance(getField(), getZero(), DfpField.QNAN);\n+        }\n+\n+        if (x == 0) {\n+            return newInstance(getField(), getZero(), DfpField.FINITE);\n+        }\n+\n+        int[] product = new int[getDimension() + 1];\n+\n+        int xi = Math.abs(x);\n+        int carry = 0;\n+\n+        for (int i = 0; i < getDimension(); i++) {\n+            int p = (xi * mant[i]) + carry;\n+            product[i] = p % radix;\n+            carry = p / radix;\n+        }\n+\n+        product[getDimension()] = carry;\n+\n+        if (x < 0) {\n+            return newInstance(mant, product, exp, sign ^ 1);\n+        } else {\n+            return newInstance(mant, product, exp, sign);\n+        }\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}