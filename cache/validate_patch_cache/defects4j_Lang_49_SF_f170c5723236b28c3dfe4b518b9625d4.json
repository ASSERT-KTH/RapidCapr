{
    "patch": "        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n        if (gcd == denominator) {\n            return Fraction.getFraction(Math.abs(numerator) / denominator, 1);\n        } else if (gcd == 1) {\n            return this;\n        }\n        int num = numerator < 0 ? -1 * (numerator / gcd) : numerator / gcd;\n        int den = denominator < 0 ? -1 * (denominator / gcd) : denominator / gcd;\n        return Fraction.getFraction(num, den);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..1c48b4da 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -462,13 +462,15 @@ public final class Fraction extends Number implements Comparable {\n      *\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n-    public Fraction reduce() {\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n+        if (gcd == denominator) {\n+            return Fraction.getFraction(Math.abs(numerator) / denominator, 1);\n+        } else if (gcd == 1) {\n             return this;\n         }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n-    }\n+        int num = numerator < 0 ? -1 * (numerator / gcd) : numerator / gcd;\n+        int den = denominator < 0 ? -1 * (denominator / gcd) : denominator / gcd;\n+        return Fraction.getFraction(num, den);\n \n     /**\n      * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}