{
    "patch": "if (scope == null) {\n    return;\n}\n\nattachLiteralTypes(n);\n\nswitch (n.getType()) {\n    case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n    case Token.VAR:\n        defineVar(n, parent);\n        break;\n    case Token.FUNCTION:\n        // Check function expression\n        if (NodeUtil.isFunctionExpression(n)) {\n            // Check if function expression is named\n            Node nameNode = n.getFirstChild();\n            if (nameNode != null && nameNode.getType() == Token.NAME) {\n                if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n                    // Handle named function expressions\n                    defineDeclaredFunction(n, parent);\n                } else {\n                    // Handle function expressions inside a variable declaration\n                    defineDeclaredFunction(nameNode, parent);\n                    attachLiteralTypes(nameNode.getPrevious());\n                }\n            } else {\n                // Handle anonymous function expressions\n                defineDeclaredFunction(n, parent);\n            }\n        } else {\n            // Handle function declarations\n            defineDeclaredFunction(n, parent);\n        }\n        break;\n    default:\n        break;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..363f322a 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,45 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+if (scope == null) {\n+    return;\n+}\n+\n+attachLiteralTypes(n);\n+\n+switch (n.getType()) {\n+    case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+    case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+    case Token.FUNCTION:\n+        // Check function expression\n+        if (NodeUtil.isFunctionExpression(n)) {\n+            // Check if function expression is named\n+            Node nameNode = n.getFirstChild();\n+            if (nameNode != null && nameNode.getType() == Token.NAME) {\n+                if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n+                    // Handle named function expressions\n+                    defineDeclaredFunction(n, parent);\n+                } else {\n+                    // Handle function expressions inside a variable declaration\n+                    defineDeclaredFunction(nameNode, parent);\n+                    attachLiteralTypes(nameNode.getPrevious());\n+                }\n+            } else {\n+                // Handle anonymous function expressions\n+                defineDeclaredFunction(n, parent);\n+            }\n+        } else {\n+            // Handle function declarations\n+            defineDeclaredFunction(n, parent);\n+        }\n+        break;\n+    default:\n+        break;\n+}\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}