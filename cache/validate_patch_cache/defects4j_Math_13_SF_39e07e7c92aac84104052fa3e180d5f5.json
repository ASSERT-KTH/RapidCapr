{
    "patch": "import org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.EigenDecomposition;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix eigenvalues = MatrixUtils.createRealDiagonalMatrix(dec.getRealEigenvalues());\n    RealMatrix eigenvectors = dec.getV();\n    RealMatrix sqrtEigenvalues = MatrixUtils.createRealDiagonalMatrix(\n            eigenvectors.transpose().operate(diag(eigenvalues.getData())).sqrt());\n    return eigenvectors.multiply(sqrtEigenvalues).multiply(eigenvectors.transpose());\n}\n\nprivate double[] diag(double[][] matrix) {\n    int n = matrix.length;\n    double[] diagonal = new double[n];\n    for (int i = 0; i < n; i++) {\n        diagonal[i] = matrix[i][i];\n    }\n    return diagonal;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..7e1fc6a42 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,25 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.MatrixUtils;\n+import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.linear.EigenDecomposition;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix eigenvalues = MatrixUtils.createRealDiagonalMatrix(dec.getRealEigenvalues());\n+    RealMatrix eigenvectors = dec.getV();\n+    RealMatrix sqrtEigenvalues = MatrixUtils.createRealDiagonalMatrix(\n+            eigenvectors.transpose().operate(diag(eigenvalues.getData())).sqrt());\n+    return eigenvectors.multiply(sqrtEigenvalues).multiply(eigenvectors.transpose());\n+}\n+\n+private double[] diag(double[][] matrix) {\n+    int n = matrix.length;\n+    double[] diagonal = new double[n];\n+    for (int i = 0; i < n; i++) {\n+        diagonal[i] = matrix[i][i];\n     }\n+    return diagonal;\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}