{
    "patch": "        } else {\n            int potentialDiff = offsetLocal - offsetAdjusted;\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal != nextAdjusted && potentialDiff < 0) {\n                return offsetLocal;\n            } else {\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                int offsetPrevLocal = getOffset(prevLocal);\n                int diff = offsetPrevLocal - offsetLocal;\n                if (diff >= 0 || prevAdjusted < prevLocal || instantAdjusted - prevAdjusted > diff) {\n                    return offsetLocal;\n                } else {\n                    return offsetPrevLocal;\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..dec9f992 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,24 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        } else {\n+            int potentialDiff = offsetLocal - offsetAdjusted;\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            if (nextLocal != nextAdjusted && potentialDiff < 0) {\n+                return offsetLocal;\n+            } else {\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                int offsetPrevLocal = getOffset(prevLocal);\n+                int diff = offsetPrevLocal - offsetLocal;\n+                if (diff >= 0 || prevAdjusted < prevLocal || instantAdjusted - prevAdjusted > diff) {\n+                    return offsetLocal;\n+                } else {\n+                    return offsetPrevLocal;\n+                }\n+            }\n+        }\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}