{
    "patch": "// Strip unreferenced args and their default value off the end of the function declaration.\nNode parameter = argList.getFirstChild();\nNode lastArg = null;\nwhile (parameter != null) {\n  if (!NodeUtil.isRest(parameter)) {\n    Var var = fnScope.getVar(parameter.getString());\n    if (!referenced.contains(var)) {\n      lastArg = (Node) parameter.getPrevious();\n      if (lastArg != null) {\n        Node defaultValue = lastArg.getLastChild().detach();\n        if (defaultValue != null) {\n          compiler.reportCodeChange();\n        }\n      }\n      argList.removeChild(parameter);\n      compiler.reportCodeChange();\n      parameter = null;\n    } else {\n      referenced.remove(var);\n      lastArg = parameter;\n      parameter = parameter.getNext();\n    }\n  } else {\n    lastArg = parameter;\n    parameter = parameter.getNext();\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c75ac727 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,33 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+// Strip unreferenced args and their default value off the end of the function declaration.\n+Node parameter = argList.getFirstChild();\n+Node lastArg = null;\n+while (parameter != null) {\n+  if (!NodeUtil.isRest(parameter)) {\n+    Var var = fnScope.getVar(parameter.getString());\n+    if (!referenced.contains(var)) {\n+      lastArg = (Node) parameter.getPrevious();\n+      if (lastArg != null) {\n+        Node defaultValue = lastArg.getLastChild().detach();\n+        if (defaultValue != null) {\n+          compiler.reportCodeChange();\n+        }\n+      }\n+      argList.removeChild(parameter);\n+      compiler.reportCodeChange();\n+      parameter = null;\n+    } else {\n+      referenced.remove(var);\n+      lastArg = parameter;\n+      parameter = parameter.getNext();\n+    }\n+  } else {\n+    lastArg = parameter;\n+    parameter = parameter.getNext();\n+  }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}