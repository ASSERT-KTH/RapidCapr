{
    "patch": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  boolean hasSideEffects = false;\n  if (block.hasChildren()) {\n    Preconditions.checkState(block.hasOneChild());\n    Node stmt = block.getFirstChild();\n    if (stmt.isReturn()) {\n      hasSideEffects = NodeUtil.mayHaveSideEffects(stmt, compiler);\n    }\n  }\n\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n  Node cArgTail = null;\n\n  // If the call has few arguments than the function, assume \"undefined\"\n  // for the missing argument values.\n  if (cArg == null) {\n    cArgTail = callNode.getLastChild();\n    while (cArgTail != null && NodeUtil.isUndefinedOrNull(cArgTail)) {\n      cArgTail = cArgTail.getPrevious();\n    }\n  }\n\n  // FUNCTIONS NODE -> LP NODE: [ ARG1, ARG2, ... ]\n  int i = 0;\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  while (fnParam != null || cArg != null) {\n    if (fnParam != null && fnParam.isRest()) {\n      if (NodeUtil.isSplat(cArg)) {\n        // Transpile the trailing arguments to an array literal.\n        Node arrLit = IR.arraylit();\n        arrLit.addChildrenToBack(cArg.getNext());\n        cArg.getParent().replaceChild(\n            cArg,\n            IR.call(NodeUtil.newQName(compiler, \"Array.from\"), cArg)\n                .srcref(cArg));\n        cArg = null;\n      } else if (cArgTail != null) {\n        // The previous argument becomes the rest parameter.\n        fnParam.setString(\"\");\n        fnParam.addChildAfter(\n            IR.name(\"\").srcref(fnParam),\n            fnParam.getPrevious());  // LP\n        fnParam.addChildAfter(\n            IR.name(\"\").srcref(fnParam),  // Default (\"undefined\").\n            fnParam.getPrevious());  // LP\n        addArgumentsToParameter(\n            cArgTail.getNext(), fnParam, fnNode, block, compiler);\n      } else {\n        // There is no trailing argument to pass to the rest parameter.\n        return CanInlineResult.NO;\n      }\n    } else if (cArg != null && NodeUtil.isSpread(cArg)) {\n      int restArgs = countRestArguments(\n          cArg.getNext(), cArgTail, fnParam, compiler);\n      if (restArgs == -1) {\n        // Could not count rest parameter arguments statically.\n        return CanInlineResult.NO;\n      }\n      if (restArgs == 0) {\n        // There are no arguments to pass to the spread parameter.\n        return CanInlineResult.NO;\n      }\n      if (restArgs == 1) {\n        Node spreadArg = cArg.getNext();\n        if (!NodeUtil.mayHaveSideEffects(spreadArg, compiler)) {\n          cArg.getParent().replaceChild(cArg, spreadArg.detach());\n          cArg = spreadArg;\n        }\n      } else {\n        Slice cArgSlice = sliceArguments(cArg.getNext(), cArgTail, restArgs);\n        if (cArgSlice == null) {\n          // Could not extract spread parameter arguments statically.\n          return CanInlineResult.NO;\n        }\n        fnParam.addChildBefore(\n            cArgSlice.arguments,\n            fnParam.getNext());\n        // Replace spread expression with an array literal\n        Node arrLit = IR.arraylit(cArgSlice.prefix);\n        arrLit.addChildrenToBack(cArgSlice.arguments);\n        arrLit.addChildrenToBack(cArgSlice.suffix);\n        cArg.getParent().replaceChild(cArg, arrLit);\n        cArg = arrLit;\n      }\n    } else if (fnParam != null) {\n      i++;\n      if (cArg != null) {\n        checkSideEffects:\n        if (hasSideEffects) {\n          if (NodeUtil.isImmutableValue(cArg)) {\n            cArg = cArg.getNext();\n            break checkSideEffects;\n          } else {\n            return CanInlineResult.NO;\n          }\n        }\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n      fnParam = fnParam.getNext();\n    } else {\n      // i.e. fnParam == null && cArg != null\n      return CanInlineResult.NO;\n    }\n  }\n\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..0031e062 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,77 +686,125 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n+private CanInlineResult canInlineReferenceDirectly(\n+    Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n+\n+  Node block = fnNode.getLastChild();\n+\n+  boolean hasSideEffects = false;\n+  if (block.hasChildren()) {\n+    Preconditions.checkState(block.hasOneChild());\n+    Node stmt = block.getFirstChild();\n+    if (stmt.isReturn()) {\n+      hasSideEffects = NodeUtil.mayHaveSideEffects(stmt, compiler);\n     }\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n+  Node cArg = callNode.getFirstChild().getNext();\n+  Node cArgTail = null;\n \n-    boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n+  // If the call has few arguments than the function, assume \"undefined\"\n+  // for the missing argument values.\n+  if (cArg == null) {\n+    cArgTail = callNode.getLastChild();\n+    while (cArgTail != null && NodeUtil.isUndefinedOrNull(cArgTail)) {\n+      cArgTail = cArgTail.getPrevious();\n     }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  }\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n+  // FUNCTIONS NODE -> LP NODE: [ ARG1, ARG2, ... ]\n+  int i = 0;\n+  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+  while (fnParam != null || cArg != null) {\n+    if (fnParam != null && fnParam.isRest()) {\n+      if (NodeUtil.isSplat(cArg)) {\n+        // Transpile the trailing arguments to an array literal.\n+        Node arrLit = IR.arraylit();\n+        arrLit.addChildrenToBack(cArg.getNext());\n+        cArg.getParent().replaceChild(\n+            cArg,\n+            IR.call(NodeUtil.newQName(compiler, \"Array.from\"), cArg)\n+                .srcref(cArg));\n+        cArg = null;\n+      } else if (cArgTail != null) {\n+        // The previous argument becomes the rest parameter.\n+        fnParam.setString(\"\");\n+        fnParam.addChildAfter(\n+            IR.name(\"\").srcref(fnParam),\n+            fnParam.getPrevious());  // LP\n+        fnParam.addChildAfter(\n+            IR.name(\"\").srcref(fnParam),  // Default (\"undefined\").\n+            fnParam.getPrevious());  // LP\n+        addArgumentsToParameter(\n+            cArgTail.getNext(), fnParam, fnNode, block, compiler);\n+      } else {\n+        // There is no trailing argument to pass to the rest parameter.\n+        return CanInlineResult.NO;\n+      }\n+    } else if (cArg != null && NodeUtil.isSpread(cArg)) {\n+      int restArgs = countRestArguments(\n+          cArg.getNext(), cArgTail, fnParam, compiler);\n+      if (restArgs == -1) {\n+        // Could not count rest parameter arguments statically.\n+        return CanInlineResult.NO;\n+      }\n+      if (restArgs == 0) {\n+        // There are no arguments to pass to the spread parameter.\n+        return CanInlineResult.NO;\n+      }\n+      if (restArgs == 1) {\n+        Node spreadArg = cArg.getNext();\n+        if (!NodeUtil.mayHaveSideEffects(spreadArg, compiler)) {\n+          cArg.getParent().replaceChild(cArg, spreadArg.detach());\n+          cArg = spreadArg;\n         }\n-        cArg = cArg.getNext();\n       } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+        Slice cArgSlice = sliceArguments(cArg.getNext(), cArgTail, restArgs);\n+        if (cArgSlice == null) {\n+          // Could not extract spread parameter arguments statically.\n+          return CanInlineResult.NO;\n+        }\n+        fnParam.addChildBefore(\n+            cArgSlice.arguments,\n+            fnParam.getNext());\n+        // Replace spread expression with an array literal\n+        Node arrLit = IR.arraylit(cArgSlice.prefix);\n+        arrLit.addChildrenToBack(cArgSlice.arguments);\n+        arrLit.addChildrenToBack(cArgSlice.suffix);\n+        cArg.getParent().replaceChild(cArg, arrLit);\n+        cArg = arrLit;\n       }\n-    }\n-\n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+    } else if (fnParam != null) {\n+      i++;\n+      if (cArg != null) {\n+        checkSideEffects:\n+        if (hasSideEffects) {\n+          if (NodeUtil.isImmutableValue(cArg)) {\n+            cArg = cArg.getNext();\n+            break checkSideEffects;\n+          } else {\n             return CanInlineResult.NO;\n           }\n         }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n           return CanInlineResult.NO;\n         }\n         cArg = cArg.getNext();\n       }\n+      fnParam = fnParam.getNext();\n+    } else {\n+      // i.e. fnParam == null && cArg != null\n+      return CanInlineResult.NO;\n     }\n-\n-    return CanInlineResult.YES;\n   }\n \n+  return CanInlineResult.YES;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}