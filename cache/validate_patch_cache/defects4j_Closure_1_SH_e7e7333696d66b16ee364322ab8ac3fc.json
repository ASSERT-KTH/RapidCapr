{
    "patch": "      Node lastArg = argList.getLastChild();\n      while (lastArg != null) {\n        // Keep the parameter if it is used.\n        if (referenced.contains(fnScope.getVar(lastArg.getString()))) {\n          break;\n        }\n        Node prev = lastArg.getPrevious();\n        argList.removeChild(lastArg);\n        lastArg = prev;\n        compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..03f3a3fd 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,16 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null) {\n+        // Keep the parameter if it is used.\n+        if (referenced.contains(fnScope.getVar(lastArg.getString()))) {\n+          break;\n+        }\n+        Node prev = lastArg.getPrevious();\n+        argList.removeChild(lastArg);\n+        lastArg = prev;\n+        compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}