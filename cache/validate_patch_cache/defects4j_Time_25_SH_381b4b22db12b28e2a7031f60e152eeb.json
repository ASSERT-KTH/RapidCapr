{
    "patch": "            // we must be near a DST boundary\n            // find when the new offset comes into effect\n            long transition = offsetAdjusted > offsetLocal ?\n                    nextTransition(instantAdjusted) :\n                    previousTransition(instantAdjusted);\n            long transitionAdjusted = transition - offsetLocal;\n            if (instantLocal >= transitionAdjusted) {\n                // we are on or after the transition (so use new offset)\n                offsetLocal = offsetAdjusted;\n            } else if (offsetLocal < 0 && offsetAdjusted == 0) {\n                // we need to ensure that time is always after the DST gap\n                // this happens naturally for positive offsets, but not for negative\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n                if (prevLocal != prevAdjusted) {\n                    return offsetLocal;\n                }\n            }\n        }\n        return offsetLocal;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..981afe1a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,26 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            // we must be near a DST boundary\n+            // find when the new offset comes into effect\n+            long transition = offsetAdjusted > offsetLocal ?\n+                    nextTransition(instantAdjusted) :\n+                    previousTransition(instantAdjusted);\n+            long transitionAdjusted = transition - offsetLocal;\n+            if (instantLocal >= transitionAdjusted) {\n+                // we are on or after the transition (so use new offset)\n+                offsetLocal = offsetAdjusted;\n+            } else if (offsetLocal < 0 && offsetAdjusted == 0) {\n+                // we need to ensure that time is always after the DST gap\n+                // this happens naturally for positive offsets, but not for negative\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+                if (prevLocal != prevAdjusted) {\n+                    return offsetLocal;\n+                }\n+            }\n+        }\n+        return offsetLocal;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}