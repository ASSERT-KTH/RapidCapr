{
    "patch": "private void findAliases(NodeTraversal t) {\n    Scope scope = t.getScope();\n    for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        Node parent = n.getParent();\n        if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n            String name = n.getString();\n            Var aliasVar = scope.getVar(name);\n            if (aliasVar != null && aliasVar.getInitialValue() != null) {\n                aliases.put(name, aliasVar);\n                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n                transformation.addAlias(name, qualifiedName);\n            } else {\n                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n            }\n        } else if (!parent.isFunction()) {\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        }\n    }\n    if (t.getScopeDepth() == 0) {\n        if (t.getModuleType() != null) {\n            /**\n            * For modules, the goog.scope wrapper will go inside the module wrapper.\n            * Except for the entry point module, which has the ID goog.\n            */\n            if (t.getModuleType() == ModuleType.GOOG_PROVIDE && !isTopLevelCall(t)) {\n            report(t, t.getScopeRoot(), MISPLACED_GOOG_SCOPE_WRAPPER);\n            }\n        } else if (t.getGlobalThisValue() == null) {\n            /**\n            * If we are not in a module (check t.getModuleType above),\n            * and we are not in a script that has already set a top-level value\n            * (check t.getGlobalThisValue above), then the user has probably\n            * copy-pasted a goog.scope call in the file. In this case, we should\n            * report rather than crash their page.\n            */\n            report(t, t.getScopeRoot(), MISPLACED_GOOG_SCOPE_WRAPPER);\n        }\n    }\n}\n\nprivate boolean isTopLevelCall(NodeTraversal t) {\n    Node parent = t.getScopeRoot().getParent();\n    if (parent == null || !parent.isCall()) {\n        return false;\n    }\n    return t.getScopeRoot().getString().equals(\"goog.scope\") &&\n           parent.getFirstChild().isQualifiedName() &&\n           parent.getFirstChild().getString().equals(\"goog.module\");\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..c6152503 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,56 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n+private void findAliases(NodeTraversal t) {\n+    Scope scope = t.getScope();\n+    for (Var v : scope.getVarIterable()) {\n         Node n = v.getNode();\n-        int type = n.getType();\n         Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+        if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+            String name = n.getString();\n+            Var aliasVar = scope.getVar(name);\n+            if (aliasVar != null && aliasVar.getInitialValue() != null) {\n+                aliases.put(name, aliasVar);\n+                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+                transformation.addAlias(name, qualifiedName);\n+            } else {\n+                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+            }\n+        } else if (!parent.isFunction()) {\n+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n         }\n+    }\n+    if (t.getScopeDepth() == 0) {\n+        if (t.getModuleType() != null) {\n+            /**\n+            * For modules, the goog.scope wrapper will go inside the module wrapper.\n+            * Except for the entry point module, which has the ID goog.\n+            */\n+            if (t.getModuleType() == ModuleType.GOOG_PROVIDE && !isTopLevelCall(t)) {\n+            report(t, t.getScopeRoot(), MISPLACED_GOOG_SCOPE_WRAPPER);\n+            }\n+        } else if (t.getGlobalThisValue() == null) {\n+            /**\n+            * If we are not in a module (check t.getModuleType above),\n+            * and we are not in a script that has already set a top-level value\n+            * (check t.getGlobalThisValue above), then the user has probably\n+            * copy-pasted a goog.scope call in the file. In this case, we should\n+            * report rather than crash their page.\n+            */\n+            report(t, t.getScopeRoot(), MISPLACED_GOOG_SCOPE_WRAPPER);\n         }\n-      }\n     }\n+}\n+\n+private boolean isTopLevelCall(NodeTraversal t) {\n+    Node parent = t.getScopeRoot().getParent();\n+    if (parent == null || !parent.isCall()) {\n+        return false;\n+    }\n+    return t.getScopeRoot().getString().equals(\"goog.scope\") &&\n+           parent.getFirstChild().isQualifiedName() &&\n+           parent.getFirstChild().getString().equals(\"goog.module\");\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}