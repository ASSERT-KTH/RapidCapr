{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    // Maybe STRING_KEY, STRING, GETPROP, GETELEM, NUMBER, SET\n    if (!NodeUtil.isGetOrSetKey(child)) {\n      String name = null;\n      if (child.isStringKey() || child.isString()) {\n        name = child.getString();\n      } else if (child.isGetProp()) {\n        Node firstChild = child.getFirstChild();\n        Node secondChild = firstChild.getNext();\n        // Handle GETPROP case\n        if (firstChild.isString() && secondChild.isString()) {\n          name = firstChild.getString() + \".\" + secondChild.getString();\n        }\n      } else if (child.isGetElem()) {\n        Node firstChild = child.getFirstChild();\n        Node secondChild = firstChild.getNext();\n        // Handle GETELEM case\n        if (firstChild != null && secondChild != null && firstChild.isString() && secondChild.isString()) {\n          String firstChildName = firstChild.getString();\n          String secondChildName = secondChild.getString();\n          name = NodeUtil.isNumericKey(firstChildName) ? \"[\" + firstChildName + \"]\" : firstChildName + \"[\" + secondChildName + \"]\";\n        }\n      } else if (child.isNumber()) {\n        // Handle the NUMBER node case\n        name = \"[\" + child.getNumber() + \"]\";\n      }\n      if (name == null) {\n        continue;\n      }\n      // We should never see a mix of numbers and strings.\n      T type = typeSystem.getType(getScope(), n, name);\n      Property prop = getProperty(name);\n      if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n        if (propertiesToErrorFor.containsKey(name)) {\n          compiler.report(JSError.make(t.getSourceName(), child,\n              propertiesToErrorFor.get(name), Warnings.INVALIDATION, name,\n              (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..78fe17da 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,49 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+    // Maybe STRING_KEY, STRING, GETPROP, GETELEM, NUMBER, SET\n+    if (!NodeUtil.isGetOrSetKey(child)) {\n+      String name = null;\n+      if (child.isStringKey() || child.isString()) {\n+        name = child.getString();\n+      } else if (child.isGetProp()) {\n+        Node firstChild = child.getFirstChild();\n+        Node secondChild = firstChild.getNext();\n+        // Handle GETPROP case\n+        if (firstChild.isString() && secondChild.isString()) {\n+          name = firstChild.getString() + \".\" + secondChild.getString();\n+        }\n+      } else if (child.isGetElem()) {\n+        Node firstChild = child.getFirstChild();\n+        Node secondChild = firstChild.getNext();\n+        // Handle GETELEM case\n+        if (firstChild != null && secondChild != null && firstChild.isString() && secondChild.isString()) {\n+          String firstChildName = firstChild.getString();\n+          String secondChildName = secondChild.getString();\n+          name = NodeUtil.isNumericKey(firstChildName) ? \"[\" + firstChildName + \"]\" : firstChildName + \"[\" + secondChildName + \"]\";\n+        }\n+      } else if (child.isNumber()) {\n+        // Handle the NUMBER node case\n+        name = \"[\" + child.getNumber() + \"]\";\n+      }\n+      if (name == null) {\n+        continue;\n+      }\n+      // We should never see a mix of numbers and strings.\n+      T type = typeSystem.getType(getScope(), n, name);\n+      Property prop = getProperty(name);\n+      if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+        if (propertiesToErrorFor.containsKey(name)) {\n+          compiler.report(JSError.make(t.getSourceName(), child,\n+              propertiesToErrorFor.get(name), Warnings.INVALIDATION, name,\n+              (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+        }\n+      }\n+    }\n+  }\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}