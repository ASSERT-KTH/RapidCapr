{
    "patch": "        // function keyword.\n        newName.setLineno(functionNode.getLineno());\n        // Old Rhino generated a zero-width token for the function name,\n        // so we have to estimate the column number of the missing NAME node to\n        // be right after 'function'.\n        int fnKeywordEndPos = functionNode.getAbsolutePosition() +\n            functionNode.getFunctionKeyword().length();\n        newName.setCharno(position2charno(fnKeywordEndPos));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..97166937 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,14 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+        // function keyword.\n+        newName.setLineno(functionNode.getLineno());\n+        // Old Rhino generated a zero-width token for the function name,\n+        // so we have to estimate the column number of the missing NAME node to\n+        // be right after 'function'.\n+        int fnKeywordEndPos = functionNode.getAbsolutePosition() +\n+            functionNode.getFunctionKeyword().length();\n+        newName.setCharno(position2charno(fnKeywordEndPos));\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}