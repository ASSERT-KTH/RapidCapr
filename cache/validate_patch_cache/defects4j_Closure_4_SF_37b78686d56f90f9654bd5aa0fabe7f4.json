{
    "patch": "JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> enclosing) {\n    boolean resolvedViaRegistry = resolveViaRegistry(errorReporter, enclosing);\n\n    if (resolvedViaRegistry) {\n        if (detectImplicitPrototypeCycle()) {\n            handleTypeCycle(errorReporter);\n            return null;\n        }\n\n        super.resolveInternal(errorReporter, enclosing);\n        finishPropertyContinuations();\n        return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    resolveViaProperties(errorReporter, enclosing);\n\n    if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(errorReporter);\n        return null;\n    }\n\n    super.resolveInternal(errorReporter, enclosing);\n\n    if (isResolved()) {\n        finishPropertyContinuations();\n        return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    return null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..d7a52e98 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,36 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> enclosing) {\n+    boolean resolvedViaRegistry = resolveViaRegistry(errorReporter, enclosing);\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+    if (resolvedViaRegistry) {\n+        if (detectImplicitPrototypeCycle()) {\n+            handleTypeCycle(errorReporter);\n+            return null;\n+        }\n+\n+        super.resolveInternal(errorReporter, enclosing);\n+        finishPropertyContinuations();\n+        return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n \n-    resolveViaProperties(t, enclosing);\n+    resolveViaProperties(errorReporter, enclosing);\n+\n     if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+        handleTypeCycle(errorReporter);\n+        return null;\n     }\n \n-    super.resolveInternal(t, enclosing);\n+    super.resolveInternal(errorReporter, enclosing);\n+\n     if (isResolved()) {\n-      finishPropertyContinuations();\n+        finishPropertyContinuations();\n+        return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+\n+    return null;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}