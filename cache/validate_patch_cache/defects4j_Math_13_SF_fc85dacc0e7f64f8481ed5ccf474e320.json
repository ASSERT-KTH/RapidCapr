{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n        final QRDecomposition dec = new QRDecomposition(m);\n        final RealMatrix q = dec.getQ();\n        final RealMatrix r = dec.getR();\n        final RealMatrix r2 = MatrixUtils.createRealIdentityMatrix(r.getRowDimension());\n\n        for (int i = 0; i < 50; i++) {\n            r2 = r2.multiply(r).multiply(r2).add(r).scalarMultiply(0.5);\n        }\n\n        return q.multiply(r2).multiply(q.transpose());\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..8d9f015fb 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,15 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+        final QRDecomposition dec = new QRDecomposition(m);\n+        final RealMatrix q = dec.getQ();\n+        final RealMatrix r = dec.getR();\n+        final RealMatrix r2 = MatrixUtils.createRealIdentityMatrix(r.getRowDimension());\n+\n+        for (int i = 0; i < 50; i++) {\n+            r2 = r2.multiply(r).multiply(r2).add(r).scalarMultiply(0.5);\n+        }\n+\n+        return q.multiply(r2).multiply(q.transpose());\n     }\n }",
    "result_reason": "error: cannot assign a value to final variable r2",
    "test_result": "ERROR"
}