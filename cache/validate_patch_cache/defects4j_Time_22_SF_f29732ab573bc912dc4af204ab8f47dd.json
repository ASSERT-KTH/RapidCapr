{
    "patch": "protected BasePeriod(long duration) {\n    long durationMillis = Math.abs(duration);\n    PeriodType periodType = PeriodType.standard().withWeeksRemoved().withDaysRemoved();\n    Duration durationObj = new Duration(durationMillis);\n    if (durationMillis < durationObj.getStandardDays()) {\n        periodType = periodType.withHoursRemoved().withMinutesRemoved().withSecondsRemoved();\n    }\n    this(durationObj.toPeriod(periodType), PeriodType.standard(), ISOChronology.getInstanceUTC());\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..aba96134 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,15 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n-    }\n+protected BasePeriod(long duration) {\n+    long durationMillis = Math.abs(duration);\n+    PeriodType periodType = PeriodType.standard().withWeeksRemoved().withDaysRemoved();\n+    Duration durationObj = new Duration(durationMillis);\n+    if (durationMillis < durationObj.getStandardDays()) {\n+        periodType = periodType.withHoursRemoved().withMinutesRemoved().withSecondsRemoved();\n+    }\n+    this(durationObj.toPeriod(periodType), PeriodType.standard(), ISOChronology.getInstanceUTC());\n+}\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: call to this must be first statement in constructor",
    "test_result": "ERROR"
}