{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n        final int maxEigenSize = 100000; // maximum size for exact eigen decomposition\n        final int n = m.getRowDimension();\n        RealMatrix sqrt;\n        if (n <= maxEigenSize) {\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            sqrt = dec.getSquareRoot();\n        } else {\n            // Use approximation method for large matrices\n            sqrt = m.copy();\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < n; j++) {\n                    double entry = sqrt.getEntry(i, j);\n                    if (i == j) {\n                        // diagonal entries\n                        entry = Math.sqrt(entry);\n                    } else {\n                        // off-diagonal entries\n                        entry = 0.5 * (entry / sqrt.getEntry(j, j) + sqrt.getEntry(j, i) / entry);\n                    }\n                    sqrt.setEntry(i, j, entry);\n                }\n            }\n        }\n        return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..f10d3944c 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,30 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n+private RealMatrix squareRoot(RealMatrix m) {\n+        final int maxEigenSize = 100000; // maximum size for exact eigen decomposition\n+        final int n = m.getRowDimension();\n+        RealMatrix sqrt;\n+        if (n <= maxEigenSize) {\n             final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+            sqrt = dec.getSquareRoot();\n+        } else {\n+            // Use approximation method for large matrices\n+            sqrt = m.copy();\n+            for (int i = 0; i < n; i++) {\n+                for (int j = 0; j < n; j++) {\n+                    double entry = sqrt.getEntry(i, j);\n+                    if (i == j) {\n+                        // diagonal entries\n+                        entry = Math.sqrt(entry);\n+                    } else {\n+                        // off-diagonal entries\n+                        entry = 0.5 * (entry / sqrt.getEntry(j, j) + sqrt.getEntry(j, i) / entry);\n+                    }\n+                    sqrt.setEntry(i, j, entry);\n+                }\n+            }\n+        }\n+        return sqrt;\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}