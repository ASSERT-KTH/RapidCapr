{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    } else if (x == 0.0) {\n        return 0.0;\n    } else if (x >= a + 1.0) {\n        /* Use regularizedGammaQ because it should converge faster in this case. */\n        return 1.0 - regularizedGammaQ(a, x);\n    } else {\n        /* Continued fraction representation. */\n        double eps = 10e-15;\n        int maxIterations = 1000;\n        double am1 = 0.0;\n        double a0 = 1.0;\n        double a1 = x;\n        double b1 = x + 1.0;\n        double fpmin = Double.MIN_NORMAL / eps;\n\n        for (int i = 1; i <= maxIterations; i++) {\n            double em = (double) i;\n            double tem = em + a;\n            double d = 1.0 / (tem * b1);\n            double h = d * a1;\n            double hp = h * 1.0 + am1;\n            if (Math.abs(hp) < fpmin) {\n                hp = fpmin;\n            }\n            double den = 1.0 + d * a0 - h * b1;\n            if (Math.abs(den) < fpmin) {\n                den = fpmin;\n            }\n            double w = d * hp;\n            double delta = w * den;\n            double dpi = -1.0 * d;\n            double dr = -1.0 * delta;\n            double dp = dpi * am1 + dr * a1;\n            double a2 = dp;\n            double db = delta * b1;\n            double bm1 = am1;\n            am1 = a1;\n            a0 = a2;\n            a1 = a2 * b1 + bm1;\n            b1 = x + em + 1.0;\n            if (Math.abs(a2) > fpmin) {\n                /* Rescale to avoid underflow. */\n                am1 /= a2;\n                a0 /= a2;\n                a1 /= a2;\n                b1 /= a2;\n            }\n            if (i % 50 == 0) {\n                /* Rescale if denominator gets too small. */\n                double scale = Math.max(Math.max(Math.max(am1, a0), a1), b1);\n                if (scale <= Double.MAX_VALUE / eps) {\n                    scale = 1.0;\n                } else {\n                    scale = 1.0 / (eps * Math.sqrt(scale));\n                    am1 *= scale;\n                    a0 *= scale;\n                    a1 *= scale;\n                    b1 *= scale;\n                }\n            }\n            if (i % 100 == 0) {\n                /* Begin error checks. */\n                double ei = (double) i / 100.0;\n                double difmuk = Math.max(Math.max(Math.max(Math.abs(am1 - bm1), Math.abs(a0 - bm1)), Math.abs(a1 - bm1)), Math.abs(b1 - bm1));\n                double abskp = (Math.abs(bm1) * eps) / difmuk;\n                double absk = 2.0 * Math.sqrt(ei) * abskp;\n                if (absk <= eps) {\n                    absk = eps;\n                }\n                if (delta < 0.0) {\n                    absk *= -1.0;\n                }\n                if (Math.abs(delta) > absk) {\n                    break;\n                }\n            }\n        }\n\n        return Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * a0;\n    }\n}\n\nprivate static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1.0) + 24.01409822 / (x + 2.0)\n            - 1.231739516 / (x + 3.0) + 0.00120858003 / (x + 4.0) - 0.00000536382 / (x + 5.0);\n    return tmp + Math.log(ser * Math.sqrt(2.0 * Math.PI));\n}\n\npublic static double regularizedGammaQ(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    } else if (x == 0.0) {\n        return 1.0;\n    } else if (x < a + 1.0) {\n        /* Use regularizedGammaP because it should converge faster in this case. */\n        return 1.0 - regularizedGammaP(a, x);\n    } else {\n        /* Continued fraction representation. */\n        double eps = 10e-15;\n        int maxIterations = 1000;\n        double am1 = 1.0;\n        double a0 = x;\n        double b0 = 0.0;\n        double b1 = 1.0;\n        double fpmin = Double.MIN_NORMAL / eps;\n\n        for (int i = 1; i <= maxIterations; i++) {\n            double em = (double) i;\n            double tem = em + a;\n            double d = em * (a - em) / (tem * (x + em));\n            double h = 1.0 + d * b0;\n            if (Math.abs(h) < fpmin) {\n                h = fpmin;\n            }\n            double den = 1.0 + d * am1;\n            if (Math.abs(den) < fpmin) {\n                den = fpmin;\n            }\n            double w = h / den;\n            double delta = d * w;\n            double b2 = b1 + delta * b1;\n            double bm = b0 + delta * b1;\n            double br = b2 / bm;\n            if (i % 50 == 0) {\n                /* Rescale to avoid underflow. */\n                double scale = Math.max(Math.max(Math.max(am1, a0), b1), Math.abs(br));\n                if (scale <= Double.MAX_VALUE / eps) {\n                    scale = 1.0;\n                } else {\n                    scale = 1.0 / (eps * Math.sqrt(scale));\n                    am1 *= scale;\n                    a0 *= scale;\n                    b1 *= scale;\n                }\n            }\n            am1 = b1;\n            a0 = b2;\n            b0 = bm;\n            b1 = br;\n            if (Math.abs(br - 1.0) < eps) {\n                break;\n            }\n        }\n\n        return Math.exp(a * Math.log(x) - x - logGamma(a)) * b1;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..3df12de83 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,157 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    } else if (x == 0.0) {\n+        return 0.0;\n+    } else if (x >= a + 1.0) {\n+        /* Use regularizedGammaQ because it should converge faster in this case. */\n+        return 1.0 - regularizedGammaQ(a, x);\n+    } else {\n+        /* Continued fraction representation. */\n+        double eps = 10e-15;\n+        int maxIterations = 1000;\n+        double am1 = 0.0;\n+        double a0 = 1.0;\n+        double a1 = x;\n+        double b1 = x + 1.0;\n+        double fpmin = Double.MIN_NORMAL / eps;\n+\n+        for (int i = 1; i <= maxIterations; i++) {\n+            double em = (double) i;\n+            double tem = em + a;\n+            double d = 1.0 / (tem * b1);\n+            double h = d * a1;\n+            double hp = h * 1.0 + am1;\n+            if (Math.abs(hp) < fpmin) {\n+                hp = fpmin;\n+            }\n+            double den = 1.0 + d * a0 - h * b1;\n+            if (Math.abs(den) < fpmin) {\n+                den = fpmin;\n+            }\n+            double w = d * hp;\n+            double delta = w * den;\n+            double dpi = -1.0 * d;\n+            double dr = -1.0 * delta;\n+            double dp = dpi * am1 + dr * a1;\n+            double a2 = dp;\n+            double db = delta * b1;\n+            double bm1 = am1;\n+            am1 = a1;\n+            a0 = a2;\n+            a1 = a2 * b1 + bm1;\n+            b1 = x + em + 1.0;\n+            if (Math.abs(a2) > fpmin) {\n+                /* Rescale to avoid underflow. */\n+                am1 /= a2;\n+                a0 /= a2;\n+                a1 /= a2;\n+                b1 /= a2;\n+            }\n+            if (i % 50 == 0) {\n+                /* Rescale if denominator gets too small. */\n+                double scale = Math.max(Math.max(Math.max(am1, a0), a1), b1);\n+                if (scale <= Double.MAX_VALUE / eps) {\n+                    scale = 1.0;\n+                } else {\n+                    scale = 1.0 / (eps * Math.sqrt(scale));\n+                    am1 *= scale;\n+                    a0 *= scale;\n+                    a1 *= scale;\n+                    b1 *= scale;\n+                }\n+            }\n+            if (i % 100 == 0) {\n+                /* Begin error checks. */\n+                double ei = (double) i / 100.0;\n+                double difmuk = Math.max(Math.max(Math.max(Math.abs(am1 - bm1), Math.abs(a0 - bm1)), Math.abs(a1 - bm1)), Math.abs(b1 - bm1));\n+                double abskp = (Math.abs(bm1) * eps) / difmuk;\n+                double absk = 2.0 * Math.sqrt(ei) * abskp;\n+                if (absk <= eps) {\n+                    absk = eps;\n+                }\n+                if (delta < 0.0) {\n+                    absk *= -1.0;\n+                }\n+                if (Math.abs(delta) > absk) {\n+                    break;\n+                }\n+            }\n+        }\n+\n+        return Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * a0;\n+    }\n+}\n+\n+private static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1.0) + 24.01409822 / (x + 2.0)\n+            - 1.231739516 / (x + 3.0) + 0.00120858003 / (x + 4.0) - 0.00000536382 / (x + 5.0);\n+    return tmp + Math.log(ser * Math.sqrt(2.0 * Math.PI));\n+}\n+\n+public static double regularizedGammaQ(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    } else if (x == 0.0) {\n+        return 1.0;\n+    } else if (x < a + 1.0) {\n+        /* Use regularizedGammaP because it should converge faster in this case. */\n+        return 1.0 - regularizedGammaP(a, x);\n+    } else {\n+        /* Continued fraction representation. */\n+        double eps = 10e-15;\n+        int maxIterations = 1000;\n+        double am1 = 1.0;\n+        double a0 = x;\n+        double b0 = 0.0;\n+        double b1 = 1.0;\n+        double fpmin = Double.MIN_NORMAL / eps;\n+\n+        for (int i = 1; i <= maxIterations; i++) {\n+            double em = (double) i;\n+            double tem = em + a;\n+            double d = em * (a - em) / (tem * (x + em));\n+            double h = 1.0 + d * b0;\n+            if (Math.abs(h) < fpmin) {\n+                h = fpmin;\n+            }\n+            double den = 1.0 + d * am1;\n+            if (Math.abs(den) < fpmin) {\n+                den = fpmin;\n+            }\n+            double w = h / den;\n+            double delta = d * w;\n+            double b2 = b1 + delta * b1;\n+            double bm = b0 + delta * b1;\n+            double br = b2 / bm;\n+            if (i % 50 == 0) {\n+                /* Rescale to avoid underflow. */\n+                double scale = Math.max(Math.max(Math.max(am1, a0), b1), Math.abs(br));\n+                if (scale <= Double.MAX_VALUE / eps) {\n+                    scale = 1.0;\n+                } else {\n+                    scale = 1.0 / (eps * Math.sqrt(scale));\n+                    am1 *= scale;\n+                    a0 *= scale;\n+                    b1 *= scale;\n+                }\n+            }\n+            am1 = b1;\n+            a0 = b2;\n+            b0 = bm;\n+            b1 = br;\n+            if (Math.abs(br - 1.0) < eps) {\n+                break;\n+            }\n+        }\n+\n+        return Math.exp(a * Math.log(x) - x - logGamma(a)) * b1;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}