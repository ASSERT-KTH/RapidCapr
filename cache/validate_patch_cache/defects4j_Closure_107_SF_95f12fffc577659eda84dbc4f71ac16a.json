{
    "patch": "  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    CodingConvention codingConvention;\n    if (flags.processJqueryPrimitives) {\n        codingConvention = new JqueryCodingConvention();\n    } else {\n        codingConvention = new ClosureCodingConvention();\n    }\n    if (!flags.extraAnnotationName.isEmpty()) {\n      options.setExtraAnnotationNames(ImmutableList.copyOf(flags.extraAnnotationName));\n    }\n    CompilationLevel level = flags.compilationLevel;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n    if (flags.useTypesForOptimization) {\n      level.setTypeBasedOptimizationOptions(options);\n    }\n    if (flags.generateExports) {\n      options.setGenerateExports(true);\n    }\n    WarningLevel wLevel = flags.warningLevel;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n        formattingOption.applyToOptions(options);\n    }\n    options.setCodingConvention(codingConvention);\n    options.setCheckTypes(true);\n    options.setAcceptConstKeyword(true);\n    options.setAngularPass(flags.angularPass);\n    options.setClosurePass(flags.processClosurePrimitives);\n    if (!flags.translationsFile.isEmpty()) {\n        try {\n            options.setMessageBundle(new XtbMessageBundle(\n                    new FileInputStream(flags.translationsFile),\n                    flags.translationsProject));\n        } catch (IOException e) {\n            throw new RuntimeException(\"Reading XTB file\", e);\n        }\n    } else {\n        EmptyMessageBundle bundle = new EmptyMessageBundle();\n        if (flags.compilationLevel == CompilationLevel.ADVANCED_OPTIMIZATIONS) {\n            bundle.setDoNotCrunch(true);\n        }\n        options.setMessageBundle(bundle);\n    }\n    return options;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex 93b35475..2df2fadd 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -805,62 +805,51 @@ public class CommandLineRunner extends\n   @Override\n   protected CompilerOptions createOptions() {\n     CompilerOptions options = new CompilerOptions();\n+    CodingConvention codingConvention;\n     if (flags.processJqueryPrimitives) {\n-      options.setCodingConvention(new JqueryCodingConvention());\n+        codingConvention = new JqueryCodingConvention();\n     } else {\n-      options.setCodingConvention(new ClosureCodingConvention());\n+        codingConvention = new ClosureCodingConvention();\n+    }\n+    if (!flags.extraAnnotationName.isEmpty()) {\n+      options.setExtraAnnotationNames(ImmutableList.copyOf(flags.extraAnnotationName));\n     }\n-\n-    options.setExtraAnnotationNames(flags.extraAnnotationName);\n-\n     CompilationLevel level = flags.compilationLevel;\n     level.setOptionsForCompilationLevel(options);\n-\n     if (flags.debug) {\n-      level.setDebugOptionsForCompilationLevel(options);\n+        level.setDebugOptionsForCompilationLevel(options);\n     }\n-\n     if (flags.useTypesForOptimization) {\n       level.setTypeBasedOptimizationOptions(options);\n     }\n-\n     if (flags.generateExports) {\n-      options.setGenerateExports(flags.generateExports);\n+      options.setGenerateExports(true);\n     }\n-\n     WarningLevel wLevel = flags.warningLevel;\n     wLevel.setOptionsForWarningLevel(options);\n     for (FormattingOption formattingOption : flags.formatting) {\n-      formattingOption.applyToOptions(options);\n+        formattingOption.applyToOptions(options);\n     }\n-\n-    options.closurePass = flags.processClosurePrimitives;\n-\n-    options.jqueryPass = CompilationLevel.ADVANCED_OPTIMIZATIONS == level &&\n-        flags.processJqueryPrimitives;\n-\n-    options.angularPass = flags.angularPass;\n-\n+    options.setCodingConvention(codingConvention);\n+    options.setCheckTypes(true);\n+    options.setAcceptConstKeyword(true);\n+    options.setAngularPass(flags.angularPass);\n+    options.setClosurePass(flags.processClosurePrimitives);\n     if (!flags.translationsFile.isEmpty()) {\n-      try {\n-        options.messageBundle = new XtbMessageBundle(\n-            new FileInputStream(flags.translationsFile),\n-            flags.translationsProject);\n-      } catch (IOException e) {\n-        throw new RuntimeException(\"Reading XTB file\", e);\n-      }\n-    } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n-      // In SIMPLE or WHITESPACE mode, if the user hasn't specified a\n-      // translations file, they might reasonably try to write their own\n-      // implementation of goog.getMsg that makes the substitution at\n-      // run-time.\n-      //\n-      // In ADVANCED mode, goog.getMsg is going to be renamed anyway,\n-      // so we might as well inline it. But shut off the i18n warnings,\n-      // because the user didn't really ask for i18n.\n-      options.messageBundle = new EmptyMessageBundle();\n+        try {\n+            options.setMessageBundle(new XtbMessageBundle(\n+                    new FileInputStream(flags.translationsFile),\n+                    flags.translationsProject));\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Reading XTB file\", e);\n+        }\n+    } else {\n+        EmptyMessageBundle bundle = new EmptyMessageBundle();\n+        if (flags.compilationLevel == CompilationLevel.ADVANCED_OPTIMIZATIONS) {\n+            bundle.setDoNotCrunch(true);\n+        }\n+        options.setMessageBundle(bundle);\n     }\n-\n     return options;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}