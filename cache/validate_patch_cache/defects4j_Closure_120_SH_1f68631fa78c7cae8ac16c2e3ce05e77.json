{
    "patch": "      boolean isAssigned = false;\n      for (int i = 0; i < references.size(); i++) {\n        final Reference r = references.get(i);\n        if (r.isAssignmentToName() && r.getNode() == ref.getNode()) {\n          if (!isAssigned) {\n            isAssigned = true;\n          } else {\n            return false;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..7c2c6812 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,15 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      boolean isAssigned = false;\n+      for (int i = 0; i < references.size(); i++) {\n+        final Reference r = references.get(i);\n+        if (r.isAssignmentToName() && r.getNode() == ref.getNode()) {\n+          if (!isAssigned) {\n+            isAssigned = true;\n+          } else {\n+            return false;\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}