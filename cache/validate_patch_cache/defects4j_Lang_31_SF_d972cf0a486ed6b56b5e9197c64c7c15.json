{
    "patch": "public static boolean containsAny(char[] arr1, char[] arr2) {\n    if (arr1 == null || arr2 == null) {\n        return false;\n    }\n    for (int i = 0; i < arr1.length; i++) {\n        char c1 = arr1[i];\n        if (Character.isHighSurrogate(c1)) {\n            if (i < arr1.length - 1) {\n                char c2 = arr1[i + 1];\n                int codePoint = Character.toCodePoint(c1, c2);\n                if (contains(codePoint, arr2)) {\n                    return true;\n                }\n                i++;\n            }\n        } else {\n            if (contains(c1, arr2)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nprivate static boolean contains(char c, char[] arr) {\n    for (char candidate : arr) {\n        if (c == candidate) {\n            return true;\n        }\n    }\n    return false;\n}\n\nprivate static boolean contains(int codePoint, char[] arr) {\n    int high = Character.highSurrogate(codePoint);\n    int low = Character.lowSurrogate(codePoint);\n    for (int i = 0; i < arr.length; i++) {\n        char c1 = arr[i];\n        if (c1 == high) {\n            if (i < arr.length - 1) {\n                char c2 = arr[i + 1];\n                if (c2 == low) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..732a7eda 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,55 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(char[] arr1, char[] arr2) {\n+    if (arr1 == null || arr2 == null) {\n+        return false;\n+    }\n+    for (int i = 0; i < arr1.length; i++) {\n+        char c1 = arr1[i];\n+        if (Character.isHighSurrogate(c1)) {\n+            if (i < arr1.length - 1) {\n+                char c2 = arr1[i + 1];\n+                int codePoint = Character.toCodePoint(c1, c2);\n+                if (contains(codePoint, arr2)) {\n+                    return true;\n+                }\n+                i++;\n+            }\n+        } else {\n+            if (contains(c1, arr2)) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean contains(char c, char[] arr) {\n+    for (char candidate : arr) {\n+        if (c == candidate) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean contains(int codePoint, char[] arr) {\n+    int high = Character.highSurrogate(codePoint);\n+    int low = Character.lowSurrogate(codePoint);\n+    for (int i = 0; i < arr.length; i++) {\n+        char c1 = arr[i];\n+        if (c1 == high) {\n+            if (i < arr.length - 1) {\n+                char c2 = arr[i + 1];\n+                if (c2 == low) {\n+                    return true;\n+                }\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}