{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n        int defaultYear = chrono.year().get(instantLocal);\n\n        DateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n\n        // Add this check to handle leap year day and month\n        if (bucket.getParseMode() == DateTimeParserBucket.LENIENT) {\n            LocalDate dateLocal = bucket.toLocalDate();\n            if (dateLocal != null\n                    && dateLocal.getMonthOfYear() == 2\n                    && dateLocal.getDayOfMonth() == 29\n                    && !dateLocal.getChronology().isLeapYear(dateLocal.getYear())) {\n                throw new IllegalFieldValueException(\n                        DateTimeFieldType.dayOfMonth(), \"29\",\n                        DateTimeFieldType.monthOfYear(), String.valueOf(dateLocal.getMonthOfYear()),\n                        \"Value 29 for dayOfMonth must be in the range [1,28]\"\n                );\n            }\n        }\n\n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..a4be646f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -702,16 +702,31 @@ public class DateTimeFormatter {\n         if (instant == null) {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n-        \n+\n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n         int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+\n+        DateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n+\n+        // Add this check to handle leap year day and month\n+        if (bucket.getParseMode() == DateTimeParserBucket.LENIENT) {\n+            LocalDate dateLocal = bucket.toLocalDate();\n+            if (dateLocal != null\n+                    && dateLocal.getMonthOfYear() == 2\n+                    && dateLocal.getDayOfMonth() == 29\n+                    && !dateLocal.getChronology().isLeapYear(dateLocal.getYear())) {\n+                throw new IllegalFieldValueException(\n+                        DateTimeFieldType.dayOfMonth(), \"29\",\n+                        DateTimeFieldType.monthOfYear(), String.valueOf(dateLocal.getMonthOfYear()),\n+                        \"Value 29 for dayOfMonth must be in the range [1,28]\"\n+                );\n+            }\n+        }\n+\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}