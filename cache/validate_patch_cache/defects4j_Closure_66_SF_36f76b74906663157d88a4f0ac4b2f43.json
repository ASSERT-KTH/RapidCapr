{
    "patch": "public double getTypedPercent(String json) {\n    int correct = 0;\n    int total = 0;\n    \n    try {\n        JSONObject obj = new JSONObject(json);\n        JSONArray questions = obj.getJSONArray(\"questions\");\n        \n        for (int i = 0; i < questions.length(); i++) {\n            JSONObject question = questions.getJSONObject(i);\n            JSONArray answers = question.getJSONArray(\"answers\");\n            \n            for (int j = 0; j < answers.length(); j++) {\n                JSONObject answer = answers.getJSONObject(j);\n                boolean isCorrect = answer.getBoolean(\"correct\");\n                boolean answered = answer.has(\"answered\");\n                \n                if (isCorrect && answered) {\n                    correct++;\n                }\n                \n                if (answered) {\n                    total++;\n                }\n            }\n        }\n    } catch (JSONException e) {\n        System.out.println(\"Invalid JSON string\");\n    }\n    \n    if (total == 0) {\n        return 0.0;\n    } else {\n        return (correct * 100.0) / total;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..889773b9 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,42 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String json) {\n+    int correct = 0;\n+    int total = 0;\n+    \n+    try {\n+        JSONObject obj = new JSONObject(json);\n+        JSONArray questions = obj.getJSONArray(\"questions\");\n+        \n+        for (int i = 0; i < questions.length(); i++) {\n+            JSONObject question = questions.getJSONObject(i);\n+            JSONArray answers = question.getJSONArray(\"answers\");\n+            \n+            for (int j = 0; j < answers.length(); j++) {\n+                JSONObject answer = answers.getJSONObject(j);\n+                boolean isCorrect = answer.getBoolean(\"correct\");\n+                boolean answered = answer.has(\"answered\");\n+                \n+                if (isCorrect && answered) {\n+                    correct++;\n+                }\n+                \n+                if (answered) {\n+                    total++;\n+                }\n+            }\n+        }\n+    } catch (JSONException e) {\n+        System.out.println(\"Invalid JSON string\");\n+    }\n+    \n+    if (total == 0) {\n+        return 0.0;\n+    } else {\n+        return (correct * 100.0) / total;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}