{
    "patch": "if (block.isFunction) {\n    // Only allow one assignment to a variable in a function.\n    for (int i = index + 1; i < references.size(); i++) {\n        Reference assignment = references.get(i);\n        if (assignment.isDeclaration() || assignment.isSimpleAssignmentToName()) {\n            return false;\n        }\n    }\n    return true;\n} else if (block.isLoop) {\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..c56feb66 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,18 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (block.isFunction) {\n+    // Only allow one assignment to a variable in a function.\n+    for (int i = index + 1; i < references.size(); i++) {\n+        Reference assignment = references.get(i);\n+        if (assignment.isDeclaration() || assignment.isSimpleAssignmentToName()) {\n+            return false;\n+        }\n+    }\n+    return true;\n+} else if (block.isLoop) {\n+    return false;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}