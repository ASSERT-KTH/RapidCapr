{
    "patch": "Name name = functionNode.getFunctionName();\nif (name == null || name.getIdentifier() == null) {\n  name = new Name();\n  name.setIdentifier(\"\");\n}\nNode node = newNode(Token.FUNCTION);\nNode newName = transform(name);\nif (name.isEmpty()) {\n  newName.setLineno(functionNode.getLineno());\n  newName.setCharno(position2charno(functionNode.getParamCount()));\n} else {\n  newName.setLineno(name.getLineno());\n  newName.setCharno(position2charno(name.getAbsolutePosition()));\n}\n\nnode.addChildToBack(newName);\n\nNode lp = newNode(Token.LP);\nlp.setLineno(name.getLineno());\nlp.setCharno(position2charno(functionNode.getParamCount()));\n\nfor (AstNode param : functionNode.getParams()) {\n  lp.addChildToBack(transform(param));\n}\n\nnode.addChildToBack(lp);\nnode.addChildToBack(transform(functionNode.getBody()));\nreturn node;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..1893ef46 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,34 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+Name name = functionNode.getFunctionName();\n+if (name == null || name.getIdentifier() == null) {\n+  name = new Name();\n+  name.setIdentifier(\"\");\n+}\n+Node node = newNode(Token.FUNCTION);\n+Node newName = transform(name);\n+if (name.isEmpty()) {\n+  newName.setLineno(functionNode.getLineno());\n+  newName.setCharno(position2charno(functionNode.getParamCount()));\n+} else {\n+  newName.setLineno(name.getLineno());\n+  newName.setCharno(position2charno(name.getAbsolutePosition()));\n+}\n+\n+node.addChildToBack(newName);\n+\n+Node lp = newNode(Token.LP);\n+lp.setLineno(name.getLineno());\n+lp.setCharno(position2charno(functionNode.getParamCount()));\n+\n+for (AstNode param : functionNode.getParams()) {\n+  lp.addChildToBack(transform(param));\n+}\n+\n+node.addChildToBack(lp);\n+node.addChildToBack(transform(functionNode.getBody()));\n+return node;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: variable name is already defined in method processFunctionNode(FunctionNode)",
    "test_result": "ERROR"
}