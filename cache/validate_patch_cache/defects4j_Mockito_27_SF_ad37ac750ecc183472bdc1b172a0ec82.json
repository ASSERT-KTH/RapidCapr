{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter<T>(newMockHandler,\n            (MockSettingsImpl) withSettings().defaultAnswer(RETURNS_DEFAULTS));\n    if (mock instanceof Class) {\n        Class<T> type = (Class<T>) mock;\n        Objenesis objenesis = new ObjenesisStd();\n        Enhancer enhancer = new Enhancer();\n        enhancer.setSuperclass(type);\n        enhancer.setCallback(newFilter);\n\n        mock = objenesis.newInstance(enhancer);\n    } else if (mock instanceof Factory) {\n        Factory factory = (Factory) mock;\n        Callback[] allCallbacks = factory.getCallbacks();\n\n        for (int i = 0; i < allCallbacks.length; i++) {\n            if (allCallbacks[i] instanceof MethodInterceptorFilter) {\n                allCallbacks[i] = newFilter;\n                break;\n            }\n        }\n        factory.setCallbacks(allCallbacks);\n    } else {\n        ((MockitoObject) mock).setMockHandler(newMockHandler);\n    }\n\n    if (mock instanceof MockitoSpy) {\n        MockitoFramework.instance().initiateSpiedField(mock);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..62a9c6a8f 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,39 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter<T>(newMockHandler,\n+            (MockSettingsImpl) withSettings().defaultAnswer(RETURNS_DEFAULTS));\n+    if (mock instanceof Class) {\n+        Class<T> type = (Class<T>) mock;\n+        Objenesis objenesis = new ObjenesisStd();\n+        Enhancer enhancer = new Enhancer();\n+        enhancer.setSuperclass(type);\n+        enhancer.setCallback(newFilter);\n+\n+        mock = objenesis.newInstance(enhancer);\n+    } else if (mock instanceof Factory) {\n+        Factory factory = (Factory) mock;\n+        Callback[] allCallbacks = factory.getCallbacks();\n+\n+        for (int i = 0; i < allCallbacks.length; i++) {\n+            if (allCallbacks[i] instanceof MethodInterceptorFilter) {\n+                allCallbacks[i] = newFilter;\n+                break;\n+            }\n+        }\n+        factory.setCallbacks(allCallbacks);\n+    } else {\n+        ((MockitoObject) mock).setMockHandler(newMockHandler);\n+    }\n+\n+    if (mock instanceof MockitoSpy) {\n+        MockitoFramework.instance().initiateSpiedField(mock);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}