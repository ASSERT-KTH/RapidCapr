{
    "patch": "private void findCalledFunctions(Node node, Set<String> changed) {\n    Preconditions.checkNotNull(node, \"Node cannot be null\");\n    Preconditions.checkNotNull(changed, \"Set of changed functions cannot be null\");\n\n    if (node.getType() == Token.CALL) {\n        Node child = node.getFirstChild();\n        while (child != null) {\n            if (child.getType() == Token.NAME) {\n                changed.add(child.getString());\n            } else {\n                findCalledFunctions(child, changed);\n            }\n            child = child.getNext();\n        }\n    } else {\n        for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n            findCalledFunctions(c, changed);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..297e607e 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -770,21 +770,26 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n   /**\n    * @see #findCalledFunctions(Node)\n    */\n-  private void findCalledFunctions(\n-      Node node, Set<String> changed) {\n-    Preconditions.checkArgument(changed != null);\n-    // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n-      }\n-    }\n+private void findCalledFunctions(Node node, Set<String> changed) {\n+    Preconditions.checkNotNull(node, \"Node cannot be null\");\n+    Preconditions.checkNotNull(changed, \"Set of changed functions cannot be null\");\n \n-    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n-      findCalledFunctions(c, changed);\n+    if (node.getType() == Token.CALL) {\n+        Node child = node.getFirstChild();\n+        while (child != null) {\n+            if (child.getType() == Token.NAME) {\n+                changed.add(child.getString());\n+            } else {\n+                findCalledFunctions(child, changed);\n+            }\n+            child = child.getNext();\n+        }\n+    } else {\n+        for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+            findCalledFunctions(c, changed);\n+        }\n     }\n-  }\n+}\n \n   /**\n    * For any call-site that needs it, prepare the call-site for inlining",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}