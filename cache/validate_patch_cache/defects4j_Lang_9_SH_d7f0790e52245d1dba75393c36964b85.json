{
    "patch": "// Parse last format field if exists\nif(currentStrategy.addRegex(this, regex)) {\n    collector.add(currentStrategy);\n}\ncurrentFormatField = null;\nstrategies = collector.toArray(new Strategy[collector.size()]);\nif(strategies.length > 0) {\n    parsePattern = Pattern.compile(regex.toString());\n} else {\n    parsePattern = null;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..70c9debc 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,17 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+// Parse last format field if exists\n+if(currentStrategy.addRegex(this, regex)) {\n+    collector.add(currentStrategy);\n+}\n+currentFormatField = null;\n+strategies = collector.toArray(new Strategy[collector.size()]);\n+if(strategies.length > 0) {\n+    parsePattern = Pattern.compile(regex.toString());\n+} else {\n+    parsePattern = null;\n+}\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}