{
    "patch": "            boolean runningNeg = false;\n            for (int i = 0; i < count; i++) {\n                SavedField savedField = savedFields[i];\n\n                if (i == 0 && savedField.iField.getType() == DateTimeFieldType.weekyear()) {\n                    int value = savedField.iValue;\n                    int parsedYear = getParsedYear();\n                    int countDigits = (parsedYear < 0 ? 5 : 4) - Math.min(4, FormatUtils.calculateDigitCount(value));\n                    if (countDigits == 0) {\n                        continue;\n                    }\n                    \n                    int initPos = savedField.iPosition + Math.min(2, savedField.iSize);\n                    int newPos = initPos + countDigits;\n                    if (newPos <= text.length()) {\n                        int val = parseInt(text, initPos, newPos);\n                        value = (val < 0) ? -val : val;\n                        if (val < 0) {\n                            runningNeg = !runningNeg;\n                        }\n                    \n                        try {\n                            parsedYear = setParsedField(DateTimeFieldType.weekyear(), parsedYear, value);\n                        } catch (IllegalArgumentException e) {\n                            if (savedFields[i].iField.getType() != DateTimeFieldType.weekyear()) {\n                                throw e;\n                            }\n                            // ignore an error, due to early number\n                            // use last valid year, or original default\n                        }\n\n                        if (val >= 0) {\n                            savedField.iValue = value;\n                            savedField.iError = null;\n                        }\n                    }\n                }\n\n                savedFields[i].saveField(millis, runningNeg);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..ccf42b2f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,46 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            boolean runningNeg = false;\n+            for (int i = 0; i < count; i++) {\n+                SavedField savedField = savedFields[i];\n+\n+                if (i == 0 && savedField.iField.getType() == DateTimeFieldType.weekyear()) {\n+                    int value = savedField.iValue;\n+                    int parsedYear = getParsedYear();\n+                    int countDigits = (parsedYear < 0 ? 5 : 4) - Math.min(4, FormatUtils.calculateDigitCount(value));\n+                    if (countDigits == 0) {\n+                        continue;\n+                    }\n+                    \n+                    int initPos = savedField.iPosition + Math.min(2, savedField.iSize);\n+                    int newPos = initPos + countDigits;\n+                    if (newPos <= text.length()) {\n+                        int val = parseInt(text, initPos, newPos);\n+                        value = (val < 0) ? -val : val;\n+                        if (val < 0) {\n+                            runningNeg = !runningNeg;\n+                        }\n+                    \n+                        try {\n+                            parsedYear = setParsedField(DateTimeFieldType.weekyear(), parsedYear, value);\n+                        } catch (IllegalArgumentException e) {\n+                            if (savedFields[i].iField.getType() != DateTimeFieldType.weekyear()) {\n+                                throw e;\n+                            }\n+                            // ignore an error, due to early number\n+                            // use last valid year, or original default\n+                        }\n+\n+                        if (val >= 0) {\n+                            savedField.iValue = value;\n+                            savedField.iError = null;\n+                        }\n+                    }\n+                }\n+\n+                savedFields[i].saveField(millis, runningNeg);\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}