{
    "patch": "public static String fixCode(String code) {\n    String regex = \"\\\\bfor\\\\s*\\\\(.*?\\\\)\";\n    Pattern pattern = Pattern.compile(regex, Pattern.DOTALL);\n    Matcher matcher = pattern.matcher(code);\n\n    while (matcher.find()) {\n        String forLoop = matcher.group();\n        if (forLoop.contains(\"in\")) {\n            int startIdx = code.indexOf(forLoop);\n            int endIdx = startIdx + forLoop.length();\n            String prefix = code.substring(0, startIdx);\n            String suffix = code.substring(endIdx);\n            String[] parts = forLoop.split(\"\\\\s+\");\n            for (int i = 0; i < parts.length; i++) {\n                if (parts[i].equals(\"in\")) {\n                    parts[i+1] = \"[\" + parts[i+1] + \"]\";\n                }\n            }\n            String fixedForLoop = String.join(\" \", parts);\n\n            code = prefix + fixedForLoop + suffix;\n        }\n    }\n\n    return code;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6e70e801 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,32 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    String regex = \"\\\\bfor\\\\s*\\\\(.*?\\\\)\";\n+    Pattern pattern = Pattern.compile(regex, Pattern.DOTALL);\n+    Matcher matcher = pattern.matcher(code);\n+\n+    while (matcher.find()) {\n+        String forLoop = matcher.group();\n+        if (forLoop.contains(\"in\")) {\n+            int startIdx = code.indexOf(forLoop);\n+            int endIdx = startIdx + forLoop.length();\n+            String prefix = code.substring(0, startIdx);\n+            String suffix = code.substring(endIdx);\n+            String[] parts = forLoop.split(\"\\\\s+\");\n+            for (int i = 0; i < parts.length; i++) {\n+                if (parts[i].equals(\"in\")) {\n+                    parts[i+1] = \"[\" + parts[i+1] + \"]\";\n+                }\n+            }\n+            String fixedForLoop = String.join(\" \", parts);\n+\n+            code = prefix + fixedForLoop + suffix;\n+        }\n+    }\n+\n+    return code;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}