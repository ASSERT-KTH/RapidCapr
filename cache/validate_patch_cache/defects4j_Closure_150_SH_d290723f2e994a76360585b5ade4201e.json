{
    "patch": "    if (parent != null) {\n      // If this is a function's label, skip it. e.g. function F() {}\n      if (parent.getType() == Token.LABEL && grandparent != null && grandparent.getType() == Token.FUNCTION) {\n        return;\n      }\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.LP:\n          if (parent.getType() == Token.FUNCTION) {\n            defineDeclaredFunction(parent, parent.getParent());\n          } else if (parent == scope.getRootNode() || parent.getType() == Token.SCRIPT) {\n            handleFunctionInputs(parent);\n          }\n          break;\n        default:\n          break;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..5c25d395 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,6 +1448,11 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n+    if (parent != null) {\n+      // If this is a function's label, skip it. e.g. function F() {}\n+      if (parent.getType() == Token.LABEL && grandparent != null && grandparent.getType() == Token.FUNCTION) {\n+        return;\n+      }\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n@@ -1462,8 +1467,18 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n+        case Token.LP:\n+          if (parent.getType() == Token.FUNCTION) {\n+            defineDeclaredFunction(parent, parent.getParent());\n+          } else if (parent == scope.getRootNode() || parent.getType() == Token.SCRIPT) {\n+            handleFunctionInputs(parent);\n+          }\n+          break;\n+        default:\n+          break;\n       }\n     }\n+    }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}