{
    "patch": "            // check if there is a gap next which we must push over\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal != nextAdjusted && (nextLocal - instantAdjusted) < DateTimeConstants.MILLIS_PER_HOUR) {\n                int offsetNext = getOffset(nextLocal);\n                int diff = offsetNext - offsetAdjusted;\n                if (diff > 0) {\n                    offsetAdjusted = offsetNext;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..6b067c2b 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,14 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            // check if there is a gap next which we must push over\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            if (nextLocal != nextAdjusted && (nextLocal - instantAdjusted) < DateTimeConstants.MILLIS_PER_HOUR) {\n+                int offsetNext = getOffset(nextLocal);\n+                int diff = offsetNext - offsetAdjusted;\n+                if (diff > 0) {\n+                    offsetAdjusted = offsetNext;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}