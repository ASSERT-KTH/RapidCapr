{
    "patch": "private String convertUnicode_escape(String input) {\n    boolean success = true;\n    int i = 0;\n    int length = input.length();\n    StringBuffer output = new StringBuffer(length);\n    while (i < length) {\n        char ch = input.charAt(i++);\n        if (ch == '\\\\') {\n            if (i < length) {\n                ch = input.charAt(i++);\n                if (ch == 'u') {\n                    // Fixed line: check if next 4 characters are hexadecimal\n                    if (i + 4 <= length) {\n                        String hex = input.substring(i, i + 4);\n                        try {\n                            ch = (char) Integer.parseInt(hex, 16);\n                            i += 4;\n                        } catch (NumberFormatException nfe) {\n                            success = false;\n                            break;\n                        }\n                    } else { // not enough characters\n                        success = false;\n                        break;\n                    }\n                } else {\n                    switch (ch) {\n                        case 't':\n                            ch = '\\t';\n                            break;\n                        case 'r':\n                            ch = '\\r';\n                            break;\n                        case 'n':\n                            ch = '\\n';\n                            break;\n                        case 'f':\n                            ch = '\\f';\n                            break;\n                        case '\\\\':\n                            ch = '\\\\';\n                            break;\n                        default:\n                            // Fixed line: invalid escape sequence\n                            success = false;\n                            break;\n                    }\n                }\n            } else { // input ends with incomplete '\\'\n                success = false;\n                break;\n            }\n        }\n        output.append(ch);\n    }\n    if (!success) {\n        output.setLength(0);\n        output.append(input);\n    }\n    return output.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}