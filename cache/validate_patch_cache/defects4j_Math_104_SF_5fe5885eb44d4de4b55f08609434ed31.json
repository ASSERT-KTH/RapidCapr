{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.FastMath;\n\npublic class GammaFunction {\n    \n    public static double regularizedGamma(double alpha, double x) {\n        if(alpha<=0.0 || x<0.0) {\n            throw new IllegalArgumentException(\"Invalid Input Arguments a and x\");\n        }\n        double result;\n        double lowerGamma = Gamma.regularizedGammaP(alpha,x);\n        if(x>1) {\n            double sum = 1.0;\n            double term = 1.0;\n            int j = 1;\n            while((FastMath.abs(term/sum))>1.0e-15) {\n                term *= (x+j-1)/j;\n                sum += term;\n                j++;\n            }\n            result = (FastMath.exp(-x)*FastMath.pow(x, alpha))/alpha/sum;\n        } else {\n            double sum = alpha;\n            double term = alpha;\n            int j = 1;\n            while((FastMath.abs(term/sum))>1.0e-15) {\n                term *= x/(alpha+j);\n                sum += term;\n                j++;\n            }\n            result = sum * FastMath.pow(x, alpha) * FastMath.exp(-x) / alpha;\n        }\n        return result*lowerGamma;\n    }\n    \n    public static void main(String[] args) {\n        double alpha = 2.0;\n        double x = 3.0;\n        double expected = 0.3233235838169367;\n        double actual = regularizedGamma(alpha, x);\n        double tolerance = 1e-10;\n        if (Math.abs(expected - actual) < tolerance) {\n            System.out.println(\"Test passed: \" + expected + \" = \" + actual);\n        } else {\n            System.out.println(\"Test failed: \" + expected + \" != \" + actual);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..19e5cfd65 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,54 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.FastMath;\n+\n+public class GammaFunction {\n+    \n+    public static double regularizedGamma(double alpha, double x) {\n+        if(alpha<=0.0 || x<0.0) {\n+            throw new IllegalArgumentException(\"Invalid Input Arguments a and x\");\n+        }\n+        double result;\n+        double lowerGamma = Gamma.regularizedGammaP(alpha,x);\n+        if(x>1) {\n+            double sum = 1.0;\n+            double term = 1.0;\n+            int j = 1;\n+            while((FastMath.abs(term/sum))>1.0e-15) {\n+                term *= (x+j-1)/j;\n+                sum += term;\n+                j++;\n+            }\n+            result = (FastMath.exp(-x)*FastMath.pow(x, alpha))/alpha/sum;\n+        } else {\n+            double sum = alpha;\n+            double term = alpha;\n+            int j = 1;\n+            while((FastMath.abs(term/sum))>1.0e-15) {\n+                term *= x/(alpha+j);\n+                sum += term;\n+                j++;\n+            }\n+            result = sum * FastMath.pow(x, alpha) * FastMath.exp(-x) / alpha;\n+        }\n+        return result*lowerGamma;\n+    }\n+    \n+    public static void main(String[] args) {\n+        double alpha = 2.0;\n+        double x = 3.0;\n+        double expected = 0.3233235838169367;\n+        double actual = regularizedGamma(alpha, x);\n+        double tolerance = 1e-10;\n+        if (Math.abs(expected - actual) < tolerance) {\n+            System.out.println(\"Test passed: \" + expected + \" = \" + actual);\n+        } else {\n+            System.out.println(\"Test failed: \" + expected + \" != \" + actual);\n+        }\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}