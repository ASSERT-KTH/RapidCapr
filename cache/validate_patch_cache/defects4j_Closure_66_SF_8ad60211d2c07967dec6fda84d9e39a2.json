{
    "patch": "public static double getTypedPercent(JsonObject js) {\n  double numTyped=0.0;\n  double numFields=0.0;\n  \n  for (String key : js.keySet()) {\n    numFields++;\n    JsonElement val = js.get(key);\n    if (val.isJsonPrimitive() && ((JsonPrimitive)val).isNumber()) {\n      numTyped++;\n    }\n  }\n  return (numTyped/numFields)*100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..39a37341 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JsonObject js) {\n+  double numTyped=0.0;\n+  double numFields=0.0;\n+  \n+  for (String key : js.keySet()) {\n+    numFields++;\n+    JsonElement val = js.get(key);\n+    if (val.isJsonPrimitive() && ((JsonPrimitive)val).isNumber()) {\n+      numTyped++;\n+    }\n+  }\n+  return (numTyped/numFields)*100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}