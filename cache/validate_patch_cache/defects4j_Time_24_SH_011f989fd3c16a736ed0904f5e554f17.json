{
    "patch": "        for (int i = 0; i < count; i++) {\n            long newMillis = savedFields[i].set(millis, resetFields);\n            if (newMillis == millis) {\n                continue;\n            }\n            if (newMillis < millis && i > 0) {\n                SavedField tmp = savedFields[i - 1];\n                savedFields[i - 1] = savedFields[i];\n                savedFields[i] = tmp;\n                i -= 2;\n            } else {\n                millis = newMillis;\n            }\n        }\n\n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                        \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n\n        if (millis < 0 && millis + 24 * 60 * 60 * 1000 >= 0) {\n            // handle single negative day due to daylight savings time jump\n            millis += 24 * 60 * 60 * 1000;\n            millis = iChrono.dayOfYear().set(millis, 1);\n            millis = iChrono.year().add(millis, 1);\n        }\n\n        return millis;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..b7ad207f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,44 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        for (int i = 0; i < count; i++) {\n+            long newMillis = savedFields[i].set(millis, resetFields);\n+            if (newMillis == millis) {\n+                continue;\n+            }\n+            if (newMillis < millis && i > 0) {\n+                SavedField tmp = savedFields[i - 1];\n+                savedFields[i - 1] = savedFields[i];\n+                savedFields[i] = tmp;\n+                i -= 2;\n+            } else {\n+                millis = newMillis;\n+            }\n+        }\n+\n+        if (iZone == null) {\n+            millis -= iOffset;\n+        } else {\n+            int offset = iZone.getOffsetFromLocal(millis);\n+            millis -= offset;\n+            if (offset != iZone.getOffset(millis)) {\n+                String message =\n+                        \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+                if (text != null) {\n+                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+                }\n+                throw new IllegalArgumentException(message);\n+            }\n+        }\n+\n+        if (millis < 0 && millis + 24 * 60 * 60 * 1000 >= 0) {\n+            // handle single negative day due to daylight savings time jump\n+            millis += 24 * 60 * 60 * 1000;\n+            millis = iChrono.dayOfYear().set(millis, 1);\n+            millis = iChrono.year().add(millis, 1);\n+        }\n+\n+        return millis;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}