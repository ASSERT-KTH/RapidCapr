{
    "patch": "      if (functionType.getTypeOfThis() != null) {\n        Node parent = n.getParent();\n        Node thisNode = null;\n        if (parent.isGetProp() || parent.isGetElem()) {\n          thisNode = parent.getFirstChild();\n        } else if (parent.isCall()) {\n          Node grandparent = parent.getParent();\n          if (grandparent.isGetProp() || grandparent.isGetElem()) {\n            thisNode = grandparent.getFirstChild();\n          }\n        }\n        if (thisNode == null || !getJSType(thisNode).equals(functionType.getTypeOfThis())) {\n          report(t, n, EXPECTED_THIS_TYPE, childType.toString());\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..04d88870 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.getTypeOfThis() != null) {\n+        Node parent = n.getParent();\n+        Node thisNode = null;\n+        if (parent.isGetProp() || parent.isGetElem()) {\n+          thisNode = parent.getFirstChild();\n+        } else if (parent.isCall()) {\n+          Node grandparent = parent.getParent();\n+          if (grandparent.isGetProp() || grandparent.isGetElem()) {\n+            thisNode = grandparent.getFirstChild();\n+          }\n+        }\n+        if (thisNode == null || !getJSType(thisNode).equals(functionType.getTypeOfThis())) {\n+          report(t, n, EXPECTED_THIS_TYPE, childType.toString());\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}