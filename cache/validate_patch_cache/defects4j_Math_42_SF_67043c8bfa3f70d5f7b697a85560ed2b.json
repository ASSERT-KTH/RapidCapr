{
    "patch": "protected RealPointValuePair getSolution() {\n    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n    Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n    double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n\n    Set<Integer> basicRows = new HashSet<Integer>();\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n\n    // Initialize all coefficients to 0\n    Arrays.fill(coefficients, 0);\n\n    for (int i = 0; i < getNumObjectiveFunctions(); i++) {\n        Integer basicRow = getBasicRow(i);\n        for (int j = 0; j < getOriginalNumDecisionVariables(); j++) {\n            int colIndex = columnLabels.indexOf(\"x\" + j);\n            if (colIndex >= 0 && colIndex < getNumObjectiveFunctions()) {\n                if (basicRow != null && basicRow == i) {\n                    // Coefficient of the variable in the objective function row is 0\n                    continue;\n                }\n            } else {\n                if (basicRow == null) {\n                    // Coefficient of the unconstrained variable is 0\n                    continue;\n                } else if (!basicRows.contains(basicRow)) {\n                    // Choose the first row with a basic variable of this column and set other rows to 0\n                    coefficients[j] = getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative ? 0 : mostNegative);\n                    basicRows.add(basicRow);\n                }\n            }\n        }\n    }\n\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 02c22b59f..8dcba5e13 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -393,37 +393,42 @@ class SimplexTableau implements Serializable {\n      *\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n-      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n-\n-      Set<Integer> basicRows = new HashSet<Integer>();\n-      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-      for (int i = 0; i < coefficients.length; i++) {\n-          int colIndex = columnLabels.indexOf(\"x\" + i);\n-          if (colIndex < 0) {\n-            coefficients[i] = 0;\n-            continue;\n-          }\n-          Integer basicRow = getBasicRow(colIndex);\n-              // if the basic row is found to be the objective function row\n-              // set the coefficient to 0 -> this case handles unconstrained \n-              // variables that are still part of the objective function\n-          if (basicRows.contains(basicRow)) {\n-              // if multiple variables can take a given value\n-              // then we choose the first and set the rest equal to 0\n-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n-          } else {\n-              basicRows.add(basicRow);\n-              coefficients[i] =\n-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                  (restrictToNonNegative ? 0 : mostNegative);\n-          }\n-      }\n-      return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+protected RealPointValuePair getSolution() {\n+    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n+    Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n+    double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n+\n+    Set<Integer> basicRows = new HashSet<Integer>();\n+    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n+\n+    // Initialize all coefficients to 0\n+    Arrays.fill(coefficients, 0);\n+\n+    for (int i = 0; i < getNumObjectiveFunctions(); i++) {\n+        Integer basicRow = getBasicRow(i);\n+        for (int j = 0; j < getOriginalNumDecisionVariables(); j++) {\n+            int colIndex = columnLabels.indexOf(\"x\" + j);\n+            if (colIndex >= 0 && colIndex < getNumObjectiveFunctions()) {\n+                if (basicRow != null && basicRow == i) {\n+                    // Coefficient of the variable in the objective function row is 0\n+                    continue;\n+                }\n+            } else {\n+                if (basicRow == null) {\n+                    // Coefficient of the unconstrained variable is 0\n+                    continue;\n+                } else if (!basicRows.contains(basicRow)) {\n+                    // Choose the first row with a basic variable of this column and set other rows to 0\n+                    coefficients[j] = getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative ? 0 : mostNegative);\n+                    basicRows.add(basicRow);\n+                }\n+            }\n+        }\n     }\n \n+    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+}\n+\n     /**\n      * Subtracts a multiple of one row from another.\n      * <p>",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}