{
    "patch": "public class GammaFunction {\n\n    public static double logGamma(double x) {\n        double[] cof = {\n                76.18009172947146, -86.50532032941677, 24.01409824083091,\n                -1.231739572450155, 0.001208650973866179, -0.000005395239384953\n        };\n        double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n        double ser = 1.0 + 0.9999999999999978 * cof[0];\n        for (int j = 1; j <= 5; j++) {\n            ser += cof[j] / (x + j);\n        }\n        return tmp + Math.log(2.5066282746310007 * ser / x);\n    }\n\n    public static double regularizedGammaP(double a, double x) {\n        if (a <= 0.0 || x < 0.0) {\n            throw new IllegalArgumentException(\"Invalid arguments!\");\n        }\n        if (x == 0.0) {\n            return 0.0;\n        }\n        if (x > a + 1.0) {\n            return 1.0 - regularizedGammaQ(a, x);\n        }\n        double sum = 1.0 / a;\n        double term = sum;\n        for (int i = 1; i < 100; i++) {\n            term *= x / (a + i);\n            sum += term;\n            if (Math.abs(term / sum) < 1e-15){\n                return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n            }\n        }\n        throw new IllegalStateException(\"Incomplete gamma sum does not converge for a = \" + a + \" and x = \" + x);\n    }\n\n    public static double regularizedGammaQ(double a, double x) {\n        if (a <= 0.0 || x < 0.0) {\n            throw new IllegalArgumentException(\"Invalid arguments!\");\n        }\n        if (x == 0.0) {\n            return 1.0;\n        }\n        if (x <= a + 1.0) {\n            return 1.0 - regularizedGammaP(a, x);\n        }\n        double sum = 1.0 / regularizedGammaPcf(a, x);\n        double ap = a;\n        double del = sum;\n        for (int i = 1; i < 100; i++) {\n            ap += 1.0;\n            del *= x / ap;\n            sum += del;\n            if (Math.abs(del / sum) < 1e-15){\n                return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n            }\n        }\n        throw new IllegalStateException(\"Regularized gamma Q sum does not converge for a = \" + a + \" and x = \" + x);\n    }\n\n    public static double regularizedGammaPcf(double a, double x) {\n        double cf[] = { 1.0, x / a };\n        double small = 1e-15;\n        double hfsq = 0.25;\n        double tolerance = 1e-14 / small;\n        double ra = 1.0 / a;\n        double g = hfsq + ra - x;\n        double gr = g + ra;\n        while (Math.abs(g - gr) > small * Math.abs(gr)) {\n            double temp = g;\n            double cf1[] = { 1.0, 1.0 };\n            double d = 0.0;\n            for (int i = 2; i < 100; i++) {\n                double aa = (i - 1) * ra;\n                cf1[1] = cf[1] + aa * cf1[0];\n                double bb = i - a;\n                if (Math.abs(bb) < small) {\n                    bb = small;\n                }\n                d = bb * d + cf1[1];\n                if (Math.abs(cf1[1]) > 1e15) {\n                    cf1[0] /= cf1[1];\n                    cf1[1] /= cf1[1];\n                }\n                if (i % 10 == 0) {\n                    double factor = cf1[0];\n                    for (int j = 0; j < 10; j++) {\n                        factor *= aa + j;\n                    }\n                    d *= factor;\n                    cf1[0] = 1.0;\n                    cf1[1] = cf[1];\n                }\n            }\n            d = x + small - a;\n            if (Math.abs(d) < small) {\n                d = small;\n            }\n            d = cf1[1] / d;\n            g = temp + d;\n            gr = g + ra;\n            if (Math.abs(d / gr) < tolerance) {\n                return gr;\n            }\n            cf[0] = cf[1];\n            cf[1] = d;\n            if (Math.abs(d) > 1e15) {\n                cf[0] /= d;\n                cf[1] /= d;\n            }\n        }\n        return gr;\n    }\n\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..37c903e0b 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,122 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public class GammaFunction {\n+\n+    public static double logGamma(double x) {\n+        double[] cof = {\n+                76.18009172947146, -86.50532032941677, 24.01409824083091,\n+                -1.231739572450155, 0.001208650973866179, -0.000005395239384953\n+        };\n+        double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+        double ser = 1.0 + 0.9999999999999978 * cof[0];\n+        for (int j = 1; j <= 5; j++) {\n+            ser += cof[j] / (x + j);\n+        }\n+        return tmp + Math.log(2.5066282746310007 * ser / x);\n+    }\n+\n+    public static double regularizedGammaP(double a, double x) {\n+        if (a <= 0.0 || x < 0.0) {\n+            throw new IllegalArgumentException(\"Invalid arguments!\");\n+        }\n+        if (x == 0.0) {\n+            return 0.0;\n+        }\n+        if (x > a + 1.0) {\n+            return 1.0 - regularizedGammaQ(a, x);\n+        }\n+        double sum = 1.0 / a;\n+        double term = sum;\n+        for (int i = 1; i < 100; i++) {\n+            term *= x / (a + i);\n+            sum += term;\n+            if (Math.abs(term / sum) < 1e-15){\n+                return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+            }\n+        }\n+        throw new IllegalStateException(\"Incomplete gamma sum does not converge for a = \" + a + \" and x = \" + x);\n+    }\n+\n+    public static double regularizedGammaQ(double a, double x) {\n+        if (a <= 0.0 || x < 0.0) {\n+            throw new IllegalArgumentException(\"Invalid arguments!\");\n+        }\n+        if (x == 0.0) {\n+            return 1.0;\n+        }\n+        if (x <= a + 1.0) {\n+            return 1.0 - regularizedGammaP(a, x);\n+        }\n+        double sum = 1.0 / regularizedGammaPcf(a, x);\n+        double ap = a;\n+        double del = sum;\n+        for (int i = 1; i < 100; i++) {\n+            ap += 1.0;\n+            del *= x / ap;\n+            sum += del;\n+            if (Math.abs(del / sum) < 1e-15){\n+                return sum * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+            }\n+        }\n+        throw new IllegalStateException(\"Regularized gamma Q sum does not converge for a = \" + a + \" and x = \" + x);\n+    }\n+\n+    public static double regularizedGammaPcf(double a, double x) {\n+        double cf[] = { 1.0, x / a };\n+        double small = 1e-15;\n+        double hfsq = 0.25;\n+        double tolerance = 1e-14 / small;\n+        double ra = 1.0 / a;\n+        double g = hfsq + ra - x;\n+        double gr = g + ra;\n+        while (Math.abs(g - gr) > small * Math.abs(gr)) {\n+            double temp = g;\n+            double cf1[] = { 1.0, 1.0 };\n+            double d = 0.0;\n+            for (int i = 2; i < 100; i++) {\n+                double aa = (i - 1) * ra;\n+                cf1[1] = cf[1] + aa * cf1[0];\n+                double bb = i - a;\n+                if (Math.abs(bb) < small) {\n+                    bb = small;\n+                }\n+                d = bb * d + cf1[1];\n+                if (Math.abs(cf1[1]) > 1e15) {\n+                    cf1[0] /= cf1[1];\n+                    cf1[1] /= cf1[1];\n+                }\n+                if (i % 10 == 0) {\n+                    double factor = cf1[0];\n+                    for (int j = 0; j < 10; j++) {\n+                        factor *= aa + j;\n+                    }\n+                    d *= factor;\n+                    cf1[0] = 1.0;\n+                    cf1[1] = cf[1];\n+                }\n+            }\n+            d = x + small - a;\n+            if (Math.abs(d) < small) {\n+                d = small;\n+            }\n+            d = cf1[1] / d;\n+            g = temp + d;\n+            gr = g + ra;\n+            if (Math.abs(d / gr) < tolerance) {\n+                return gr;\n+            }\n+            cf[0] = cf[1];\n+            cf[1] = d;\n+            if (Math.abs(d) > 1e15) {\n+                cf[0] /= d;\n+                cf[1] /= d;\n+            }\n+        }\n+        return gr;\n+    }\n+\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}