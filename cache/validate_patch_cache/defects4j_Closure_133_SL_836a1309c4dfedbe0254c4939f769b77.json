{
    "patch": "private String getRemainingJSDocLine() {\n    String result = stream.getRemainingJSDocLine();\n    if (result == null || result.contains(\"Bad type annotation\")) {\n        return null;\n    }\n    jsdocParser.parse();\n    jsdocParser.getWarnings().removeAll(Collections.singletonList(JSDocInfo.WarningType.JSC_TYPE_PARSE_ERROR)); // add this line\n    result = result.trim();\n    return result.isEmpty() ? null : result.replaceAll(\"\\\\s+\", \" \");\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..223f0c95 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,16 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+private String getRemainingJSDocLine() {\n+    String result = stream.getRemainingJSDocLine();\n+    if (result == null || result.contains(\"Bad type annotation\")) {\n+        return null;\n+    }\n+    jsdocParser.parse();\n+    jsdocParser.getWarnings().removeAll(Collections.singletonList(JSDocInfo.WarningType.JSC_TYPE_PARSE_ERROR)); // add this line\n+    result = result.trim();\n+    return result.isEmpty() ? null : result.replaceAll(\"\\\\s+\", \" \");\n+}\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}