{
    "patch": "@Override \npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) return;\n\n    if (n.getType() == Token.NAME) {\n        if (parent != null && parent.getType() == Token.FUNCTION) {\n            n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n            return; \n        } else {\n            if (parent != null && (parent.getType() == Token.SCRIPT || parent.getType() == Token.BLOCK)) {\n                defineVar(n, parent);\n                return;\n            }\n        }\n    } else if (n.getType() == Token.FUNCTION) {\n        if (parent != null && (parent.getType() == Token.SCRIPT || parent.getType() == Token.BLOCK)) {\n            defineDeclaredFunction(n, parent);\n            return;\n        } else if (parent != null && parent.getType() == Token.ASSIGN &&\n                parent.getFirstChild() == n) {\n                    n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n                    return;\n        }\n    } else if (n.getType() == Token.VAR) {\n        defineVar(n, parent);\n        return;\n    } else if (n.getType() == Token.CATCH) {\n        defineCatch(n, parent);\n        return;\n    } else if (n.getType() == Token.LP) {\n        if (parent != null && parent.getType() == Token.CALL){\n            handleFunctionInputs(parent);\n            return;\n        } else if (parent != null && parent.getType() == Token.FUNCTION &&\n                    !NodeUtil.isFunctionExpression(parent)) {\n            handleFunctionInputs(parent);\n            return;\n        } else if (parent == null || parent.getType()== Token.SCRIPT) {\n            handleFunctionInputs(n);\n            return;\n        }\n    } \n\n    attachLiteralTypes(n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..4cd5be22 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,51 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+@Override \n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) return;\n+\n+    if (n.getType() == Token.NAME) {\n+        if (parent != null && parent.getType() == Token.FUNCTION) {\n+            n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n+            return; \n+        } else {\n+            if (parent != null && (parent.getType() == Token.SCRIPT || parent.getType() == Token.BLOCK)) {\n+                defineVar(n, parent);\n+                return;\n+            }\n+        }\n+    } else if (n.getType() == Token.FUNCTION) {\n+        if (parent != null && (parent.getType() == Token.SCRIPT || parent.getType() == Token.BLOCK)) {\n+            defineDeclaredFunction(n, parent);\n+            return;\n+        } else if (parent != null && parent.getType() == Token.ASSIGN &&\n+                parent.getFirstChild() == n) {\n+                    n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n+                    return;\n+        }\n+    } else if (n.getType() == Token.VAR) {\n+        defineVar(n, parent);\n         return;\n-      }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+    } else if (n.getType() == Token.CATCH) {\n+        defineCatch(n, parent);\n+        return;\n+    } else if (n.getType() == Token.LP) {\n+        if (parent != null && parent.getType() == Token.CALL){\n+            handleFunctionInputs(parent);\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n-    }\n+        } else if (parent != null && parent.getType() == Token.FUNCTION &&\n+                    !NodeUtil.isFunctionExpression(parent)) {\n+            handleFunctionInputs(parent);\n+            return;\n+        } else if (parent == null || parent.getType()== Token.SCRIPT) {\n+            handleFunctionInputs(n);\n+            return;\n+        }\n+    } \n+\n+    attachLiteralTypes(n);\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}