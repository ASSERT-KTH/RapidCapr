{
    "patch": "private void inlineNonConstants(\n\tVar v, ReferenceCollection referenceInfo,\n\tboolean maybeModifiedArguments) {\n\tint refCount = referenceInfo.references.size();\n\tReference declaration = referenceInfo.references.get(0);\n\tReference init = referenceInfo.getInitializingReference();\n\tint firstRefAfterInit = (declaration == init) ? 2 : 3;\n\n\tif (refCount > 1 &&\n\t\t\tisImmutableAndWellDefinedVariable(v, referenceInfo)) {\n\t\t// if the variable is referenced more than once, we can only\n\t\t// inline it if it's immutable and never defined before referenced.\n\t\tNode value;\n\t\tif (init != null) {\n\t\t\tvalue = init.getAssignedValue();\n\t\t} else {\n\t\t\t// Create a new node for variable that is never initialized.\n\t\t\tNode srcLocation = declaration.getNode();\n\t\t\tvalue = IR.name(v.name).srcrefTree(srcLocation);\n\t\t}\n\t\tcheckNotNull(value);\n\t\tinlineWellDefinedVariable(v, value, referenceInfo.references);\n\t\tstaleVars.add(v);\n\t} else if (refCount == firstRefAfterInit) {\n\t\t// The variable likely only read once, try some more\n\t\t// complex inlining heuristics.\n\t\tReference reference = referenceInfo.references.get(\n\t\t\tfirstRefAfterInit - 1);\n\t\tif (canInline(declaration, init, reference)) {\n\t\t\tinline(v, declaration, init, reference);\n\t\t\tstaleVars.add(v);\n\t\t}\n\t} else if (declaration != init && refCount == 2) {\n\t\tif (isValidDeclaration(declaration) && isValidInitialization(init)) {\n\t\t\t// The only reference is the initialization, remove the assignment and\n\t\t\t// the variable declaration.\n\t\t\tNode value = init.getAssignedValue();\n\t\t\tcheckNotNull(value);\n\t\t\tinlineWellDefinedVariable(v, value, referenceInfo.references);\n\t\t\tstaleVars.add(v);\n\t\t}\n\t}\n\n\t// If this variable was not inlined normally, check if we can\n\t// inline an alias of it. (If the variable was inlined, then the\n\t// reference data is out of sync. We're better off just waiting for\n\t// the next pass.)\n\tif (!maybeModifiedArguments &&\n\t\t\t!staleVars.contains(v) &&\n\t\t\treferenceInfo.isWellDefined() &&\n\t\t\treferenceInfo.isAssignedOnceInLifetime()) {\n\t\t// Inlining the variable based solely on well-defined and assigned\n\t\t// once is *NOT* correct. We relax the correctness requirement if\n\t\t// the variable is declared constant.\n\t\tList<Reference> refs = referenceInfo.references;\n\t\tfor (int i = 1 /* start from a read */; i < refs.size(); i++) {\n\t\t\tNode nameNode = refs.get(i).getNode();\n\t\t\tif (aliasCandidates.containsKey(nameNode)) {\n\t\t\t\tAliasCandidate candidate = aliasCandidates.get(nameNode);\n\t\t\t\tif (!staleVars.contains(candidate.alias) &&\n\t\t\t\t\t\t!isVarInlineForbidden(candidate.alias)) {\n\t\t\t\t\tReference aliasInit;\n\t\t\t\t\taliasInit = candidate.refInfo.getInitializingReference();\n\t\t\t\t\tNode value = aliasInit.getAssignedValue();\n\t\t\t\t\tcheckNotNull(value);\n\t\t\t\t\tinlineWellDefinedVariable(candidate.alias,\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\tcandidate.refInfo.references);\n\t\t\t\t\tstaleVars.add(candidate.alias);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 376abd40..d1b8146b 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -251,80 +251,80 @@ class InlineVariables implements CompilerPass {\n           && parent.getFirstChild() == n));\n     }\n \n-    private void inlineNonConstants(\n-        Var v, ReferenceCollection referenceInfo,\n-        boolean maybeModifiedArguments) {\n-      int refCount = referenceInfo.references.size();\n-      Reference declaration = referenceInfo.references.get(0);\n-      Reference init = referenceInfo.getInitializingReference();\n-      int firstRefAfterInit = (declaration == init) ? 2 : 3;\n-\n-      if (refCount > 1 &&\n-          isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n-        // if the variable is referenced more than once, we can only\n-        // inline it if it's immutable and never defined before referenced.\n-        Node value;\n-        if (init != null) {\n-          value = init.getAssignedValue();\n-        } else {\n-          // Create a new node for variable that is never initialized.\n-          Node srcLocation = declaration.getNode();\n-          value = NodeUtil.newUndefinedNode(srcLocation);\n-        }\n-        Preconditions.checkNotNull(value);\n-        inlineWellDefinedVariable(v, value, referenceInfo.references);\n-        staleVars.add(v);\n-      } else if (refCount == firstRefAfterInit) {\n-        // The variable likely only read once, try some more\n-        // complex inlining heuristics.\n-        Reference reference = referenceInfo.references.get(\n-            firstRefAfterInit - 1);\n-        if (canInline(declaration, init, reference)) {\n-          inline(v, declaration, init, reference);\n-          staleVars.add(v);\n-        }\n-      } else if (declaration != init && refCount == 2) {\n-        if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n-          // The only reference is the initialization, remove the assignment and\n-          // the variable declaration.\n-          Node value = init.getAssignedValue();\n-          Preconditions.checkNotNull(value);\n-          inlineWellDefinedVariable(v, value, referenceInfo.references);\n-          staleVars.add(v);\n-        }\n-      }\n-\n-      // If this variable was not inlined normally, check if we can\n-      // inline an alias of it. (If the variable was inlined, then the\n-      // reference data is out of sync. We're better off just waiting for\n-      // the next pass.)\n-      if (!maybeModifiedArguments &&\n-          !staleVars.contains(v) &&\n-          referenceInfo.isWellDefined() &&\n-          referenceInfo.isAssignedOnceInLifetime()) {\n-          // Inlining the variable based solely on well-defined and assigned\n-          // once is *NOT* correct. We relax the correctness requirement if\n-          // the variable is declared constant.\n-        List<Reference> refs = referenceInfo.references;\n-        for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n-          Node nameNode = refs.get(i).getNode();\n-          if (aliasCandidates.containsKey(nameNode)) {\n-            AliasCandidate candidate = aliasCandidates.get(nameNode);\n-            if (!staleVars.contains(candidate.alias) &&\n-                !isVarInlineForbidden(candidate.alias)) {\n-              Reference aliasInit;\n-              aliasInit = candidate.refInfo.getInitializingReference();\n-              Node value = aliasInit.getAssignedValue();\n-              Preconditions.checkNotNull(value);\n-              inlineWellDefinedVariable(candidate.alias,\n-                  value,\n-                  candidate.refInfo.references);\n-              staleVars.add(candidate.alias);\n-            }\n-          }\n-        }\n-      }\n-    }\n+private void inlineNonConstants(\n+\tVar v, ReferenceCollection referenceInfo,\n+\tboolean maybeModifiedArguments) {\n+\tint refCount = referenceInfo.references.size();\n+\tReference declaration = referenceInfo.references.get(0);\n+\tReference init = referenceInfo.getInitializingReference();\n+\tint firstRefAfterInit = (declaration == init) ? 2 : 3;\n+\n+\tif (refCount > 1 &&\n+\t\t\tisImmutableAndWellDefinedVariable(v, referenceInfo)) {\n+\t\t// if the variable is referenced more than once, we can only\n+\t\t// inline it if it's immutable and never defined before referenced.\n+\t\tNode value;\n+\t\tif (init != null) {\n+\t\t\tvalue = init.getAssignedValue();\n+\t\t} else {\n+\t\t\t// Create a new node for variable that is never initialized.\n+\t\t\tNode srcLocation = declaration.getNode();\n+\t\t\tvalue = IR.name(v.name).srcrefTree(srcLocation);\n+\t\t}\n+\t\tcheckNotNull(value);\n+\t\tinlineWellDefinedVariable(v, value, referenceInfo.references);\n+\t\tstaleVars.add(v);\n+\t} else if (refCount == firstRefAfterInit) {\n+\t\t// The variable likely only read once, try some more\n+\t\t// complex inlining heuristics.\n+\t\tReference reference = referenceInfo.references.get(\n+\t\t\tfirstRefAfterInit - 1);\n+\t\tif (canInline(declaration, init, reference)) {\n+\t\t\tinline(v, declaration, init, reference);\n+\t\t\tstaleVars.add(v);\n+\t\t}\n+\t} else if (declaration != init && refCount == 2) {\n+\t\tif (isValidDeclaration(declaration) && isValidInitialization(init)) {\n+\t\t\t// The only reference is the initialization, remove the assignment and\n+\t\t\t// the variable declaration.\n+\t\t\tNode value = init.getAssignedValue();\n+\t\t\tcheckNotNull(value);\n+\t\t\tinlineWellDefinedVariable(v, value, referenceInfo.references);\n+\t\t\tstaleVars.add(v);\n+\t\t}\n+\t}\n+\n+\t// If this variable was not inlined normally, check if we can\n+\t// inline an alias of it. (If the variable was inlined, then the\n+\t// reference data is out of sync. We're better off just waiting for\n+\t// the next pass.)\n+\tif (!maybeModifiedArguments &&\n+\t\t\t!staleVars.contains(v) &&\n+\t\t\treferenceInfo.isWellDefined() &&\n+\t\t\treferenceInfo.isAssignedOnceInLifetime()) {\n+\t\t// Inlining the variable based solely on well-defined and assigned\n+\t\t// once is *NOT* correct. We relax the correctness requirement if\n+\t\t// the variable is declared constant.\n+\t\tList<Reference> refs = referenceInfo.references;\n+\t\tfor (int i = 1 /* start from a read */; i < refs.size(); i++) {\n+\t\t\tNode nameNode = refs.get(i).getNode();\n+\t\t\tif (aliasCandidates.containsKey(nameNode)) {\n+\t\t\t\tAliasCandidate candidate = aliasCandidates.get(nameNode);\n+\t\t\t\tif (!staleVars.contains(candidate.alias) &&\n+\t\t\t\t\t\t!isVarInlineForbidden(candidate.alias)) {\n+\t\t\t\t\tReference aliasInit;\n+\t\t\t\t\taliasInit = candidate.refInfo.getInitializingReference();\n+\t\t\t\t\tNode value = aliasInit.getAssignedValue();\n+\t\t\t\t\tcheckNotNull(value);\n+\t\t\t\t\tinlineWellDefinedVariable(candidate.alias,\n+\t\t\t\t\t\t\tvalue,\n+\t\t\t\t\t\t\tcandidate.refInfo.references);\n+\t\t\t\t\tstaleVars.add(candidate.alias);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n \n     /**\n      * If there are any variable references in the given node tree, blacklist",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}