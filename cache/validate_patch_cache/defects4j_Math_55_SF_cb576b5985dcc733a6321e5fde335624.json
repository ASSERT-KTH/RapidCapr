{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    final double x = v1.getY() * v2.getZ() - v1.getZ() * v2.getY();\n    final double y = v1.getZ() * v2.getX() - v1.getX() * v2.getZ();\n    final double z = v1.getX() * v2.getY() - v1.getY() * v2.getX();\n    final double norm = Math.sqrt(x * x + y * y + z * z);\n    if (norm == 0.0) {\n        if (v1.getNormSq() == 0.0 || v2.getNormSq() == 0.0) {\n            // either v1 or v2 has zero norm\n            throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);\n        }\n        // the cross product is zero if and only if the vectors are parallel or antiparallel\n        final double dot = Vector3D.dotProduct(v1, v2);\n        if (dot < 0) {\n            // vectors are antiparallel, return a vector with any non-zero component\n            if (Math.abs(v1.getX()) < Math.abs(v1.getY())) {\n                if (Math.abs(v1.getX()) < Math.abs(v1.getZ())) {\n                    return new Vector3D(-v1.getY(), v1.getX(), 0.0);\n                } else {\n                    return new Vector3D(0.0, -v1.getZ(), v1.getY());\n                }\n            } else {\n                if (Math.abs(v1.getY()) < Math.abs(v1.getZ())) {\n                    return new Vector3D(v1.getY(), -v1.getX(), 0.0);\n                } else {\n                    return new Vector3D(0.0, -v1.getZ(), v1.getY());\n                }\n            }\n        } else {\n            // vectors are parallel, return a zero vector\n            return Vector3D.ZERO;\n        }\n    }\n    return new Vector3D(x/norm, y/norm, z/norm);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..9d09d4cfe 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,40 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+    final double x = v1.getY() * v2.getZ() - v1.getZ() * v2.getY();\n+    final double y = v1.getZ() * v2.getX() - v1.getX() * v2.getZ();\n+    final double z = v1.getX() * v2.getY() - v1.getY() * v2.getX();\n+    final double norm = Math.sqrt(x * x + y * y + z * z);\n+    if (norm == 0.0) {\n+        if (v1.getNormSq() == 0.0 || v2.getNormSq() == 0.0) {\n+            // either v1 or v2 has zero norm\n+            throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);\n+        }\n+        // the cross product is zero if and only if the vectors are parallel or antiparallel\n+        final double dot = Vector3D.dotProduct(v1, v2);\n+        if (dot < 0) {\n+            // vectors are antiparallel, return a vector with any non-zero component\n+            if (Math.abs(v1.getX()) < Math.abs(v1.getY())) {\n+                if (Math.abs(v1.getX()) < Math.abs(v1.getZ())) {\n+                    return new Vector3D(-v1.getY(), v1.getX(), 0.0);\n+                } else {\n+                    return new Vector3D(0.0, -v1.getZ(), v1.getY());\n+                }\n+            } else {\n+                if (Math.abs(v1.getY()) < Math.abs(v1.getZ())) {\n+                    return new Vector3D(v1.getY(), -v1.getX(), 0.0);\n+                } else {\n+                    return new Vector3D(0.0, -v1.getZ(), v1.getY());\n+                }\n+            }\n+        } else {\n+            // vectors are parallel, return a zero vector\n+            return Vector3D.ZERO;\n+        }\n+    }\n+    return new Vector3D(x/norm, y/norm, z/norm);\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}