{
    "patch": "      if (functionType.getTypeOfThis().isFunctionType()) {\n        boolean thisIsFunction = false;\n        Node parent = n.getParent();\n        if (parent != null) {\n          switch (parent.getToken()) {\n            case GETPROP:\n              thisIsFunction = parent.getFirstChild() == n;\n              break;\n            case CALL:\n              thisIsFunction = true;\n              break;\n            case GETELEM:\n              thisIsFunction = true;\n              break;\n            default:\n              break;\n          }\n        }\n        if (!thisIsFunction) {\n          report(t, n, FUNCTION_LITERAL_METHOD_WITHOUT_THIS, childType.toString());\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..3ef9318a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.getTypeOfThis().isFunctionType()) {\n+        boolean thisIsFunction = false;\n+        Node parent = n.getParent();\n+        if (parent != null) {\n+          switch (parent.getToken()) {\n+            case GETPROP:\n+              thisIsFunction = parent.getFirstChild() == n;\n+              break;\n+            case CALL:\n+              thisIsFunction = true;\n+              break;\n+            case GETELEM:\n+              thisIsFunction = true;\n+              break;\n+            default:\n+              break;\n+          }\n+        }\n+        if (!thisIsFunction) {\n+          report(t, n, FUNCTION_LITERAL_METHOD_WITHOUT_THIS, childType.toString());\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}