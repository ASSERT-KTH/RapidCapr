{
    "patch": "private Node tryFoldSimpleFunctionCall(Node n) {\n  Preconditions.checkState(n.isCall());\n  Node callTarget = n.getFirstChild();\n  if (callTarget != null && callTarget.isName() && callTarget.getString().equals(\"String\")) {\n    Node value = callTarget.getNext();\n    if (value != null && isImmutable(value)) {\n      // Do not fold String(a) if 'a' is not an immutable value,\n      // because String(a) has slightly different semantics than '' + (a).\n      Node addition = IR.add(IR.string(\"\").srcref(callTarget), value.detachFromParent());\n      n.getParent().replaceChild(n, addition);\n      reportCodeChange();\n      return addition;\n    }\n  }\n  return n;\n}\n\nprivate boolean isImmutable(Node value) {\n  // An expression is immutable if it does not perform any side effects.\n  IntoImmutableVisitor intoImmutableVisitor = new IntoImmutableVisitor();\n  value.visit(intoImmutableVisitor);\n  return intoImmutableVisitor.getResult();\n}\n\nprivate static class IntoImmutableVisitor implements NodeVisitor {\n  private boolean result = true;\n\n  @Override\n  public void visit(Node node) {\n    if (!result) {\n      return;\n    }\n\n    switch (node.getToken()) {\n      case VAR:\n      case LET:\n      case CONST:\n      case FUNCTION:\n      case CLASS:\n      case NEW:\n      case TEMPLATELIT:\n      case ARRAYLIT:\n      case OBJECTLIT:\n      case REGEXP:\n      case NUMBER:\n      case BIGINT:\n      case STRING:\n      case TRUE:\n      case FALSE:\n      case NULL:\n        return;\n      case ASSIGN:\n        // An assignment is only immutable if its RHS is immutable.\n        // If there is a side-effect in its RHS, this assignment may cause it.\n        visit(node.getLastChild());\n        break;\n      case CALL:\n        if (!isExpressionWithoutSideEffects(node)) {\n          result = false;\n        }\n        break;\n      default:\n        // We do not consider non-leaf expressions such as operator expressions,\n        // logical expressions, and comparisons to be immutable.\n        // Also, an expression with a mutable RHS is itself mutable.\n        for (Node child : node.children()) {\n          visit(child);\n        }\n    }\n  }\n\n  public boolean getResult() {\n    return result;\n  }\n\n  private boolean isExpressionWithoutSideEffects(Node node) {\n    Preconditions.checkState(node.isCall());\n\n    final Node callee = node.getFirstChild();\n    if (callee == null) {\n      return true;\n    }\n\n    String calleeName;\n    if (callee.isQualifiedName()) {\n      calleeName = callee.getQualifiedName();\n    } else if (callee.isName()) {\n      calleeName = callee.getString();\n    } else {\n      return false;\n    }\n\n    return !calleeName.startsWith(\"goog.\") && !calleeName.startsWith(\"$jscomp.\");\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..23635164 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -205,29 +205,101 @@ class PeepholeSubstituteAlternateSyntax\n     }\n   }\n \n-  private Node tryFoldSimpleFunctionCall(Node n) {\n-    Preconditions.checkState(n.isCall());\n-    Node callTarget = n.getFirstChild();\n-    if (callTarget != null && callTarget.isName() &&\n-          callTarget.getString().equals(\"String\")) {\n-      // Fold String(a) to '' + (a) on immutable literals,\n-      // which allows further optimizations\n-      //\n-      // We can't do this in the general case, because String(a) has\n-      // slightly different semantics than '' + (a). See\n-      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n-      Node value = callTarget.getNext();\n-      if (value != null) {\n-        Node addition = IR.add(\n-            IR.string(\"\").srcref(callTarget),\n-            value.detachFromParent());\n-        n.getParent().replaceChild(n, addition);\n-        reportCodeChange();\n-        return addition;\n-      }\n+private Node tryFoldSimpleFunctionCall(Node n) {\n+  Preconditions.checkState(n.isCall());\n+  Node callTarget = n.getFirstChild();\n+  if (callTarget != null && callTarget.isName() && callTarget.getString().equals(\"String\")) {\n+    Node value = callTarget.getNext();\n+    if (value != null && isImmutable(value)) {\n+      // Do not fold String(a) if 'a' is not an immutable value,\n+      // because String(a) has slightly different semantics than '' + (a).\n+      Node addition = IR.add(IR.string(\"\").srcref(callTarget), value.detachFromParent());\n+      n.getParent().replaceChild(n, addition);\n+      reportCodeChange();\n+      return addition;\n     }\n-    return n;\n   }\n+  return n;\n+}\n+\n+private boolean isImmutable(Node value) {\n+  // An expression is immutable if it does not perform any side effects.\n+  IntoImmutableVisitor intoImmutableVisitor = new IntoImmutableVisitor();\n+  value.visit(intoImmutableVisitor);\n+  return intoImmutableVisitor.getResult();\n+}\n+\n+private static class IntoImmutableVisitor implements NodeVisitor {\n+  private boolean result = true;\n+\n+  @Override\n+  public void visit(Node node) {\n+    if (!result) {\n+      return;\n+    }\n+\n+    switch (node.getToken()) {\n+      case VAR:\n+      case LET:\n+      case CONST:\n+      case FUNCTION:\n+      case CLASS:\n+      case NEW:\n+      case TEMPLATELIT:\n+      case ARRAYLIT:\n+      case OBJECTLIT:\n+      case REGEXP:\n+      case NUMBER:\n+      case BIGINT:\n+      case STRING:\n+      case TRUE:\n+      case FALSE:\n+      case NULL:\n+        return;\n+      case ASSIGN:\n+        // An assignment is only immutable if its RHS is immutable.\n+        // If there is a side-effect in its RHS, this assignment may cause it.\n+        visit(node.getLastChild());\n+        break;\n+      case CALL:\n+        if (!isExpressionWithoutSideEffects(node)) {\n+          result = false;\n+        }\n+        break;\n+      default:\n+        // We do not consider non-leaf expressions such as operator expressions,\n+        // logical expressions, and comparisons to be immutable.\n+        // Also, an expression with a mutable RHS is itself mutable.\n+        for (Node child : node.children()) {\n+          visit(child);\n+        }\n+    }\n+  }\n+\n+  public boolean getResult() {\n+    return result;\n+  }\n+\n+  private boolean isExpressionWithoutSideEffects(Node node) {\n+    Preconditions.checkState(node.isCall());\n+\n+    final Node callee = node.getFirstChild();\n+    if (callee == null) {\n+      return true;\n+    }\n+\n+    String calleeName;\n+    if (callee.isQualifiedName()) {\n+      calleeName = callee.getQualifiedName();\n+    } else if (callee.isName()) {\n+      calleeName = callee.getString();\n+    } else {\n+      return false;\n+    }\n+\n+    return !calleeName.startsWith(\"goog.\") && !calleeName.startsWith(\"$jscomp.\");\n+  }\n+}\n \n   private Node tryFoldImmediateCallToBoundFunction(Node n) {\n     // Rewriting \"(fn.bind(a,b))()\" to \"fn.call(a,b)\" makes it inlinable",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}