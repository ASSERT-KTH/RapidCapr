{
    "patch": "public class MyProperties extends Properties {\n\n    public MyProperties() {\n        super();\n    }\n\n    @Override\n    public synchronized void load(InputStream inStream) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(inStream));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            int idx = line.indexOf('#');\n            if (idx != -1) {  // remove comments\n                line = line.substring(0, idx);\n            }\n            idx = line.indexOf('=');\n            if (idx != -1) {  // parse key-value pairs\n                String key = line.substring(0, idx).trim();\n                String value = line.substring(idx + 1).trim();\n                if (!key.isEmpty() && !value.isEmpty()) {\n                    // update or add property\n                    setProperty(key, value);\n                }\n            }\n        }\n    }\n\n    public String getprop(String key) {\n        String value = getProperty(key);\n        if (value == null) {\n            throw new IllegalArgumentException(\"property not found: \" + key);\n        }\n        return value;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..3db016ef 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,41 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public class MyProperties extends Properties {\n+\n+    public MyProperties() {\n+        super();\n+    }\n+\n+    @Override\n+    public synchronized void load(InputStream inStream) throws IOException {\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(inStream));\n+        String line;\n+        while ((line = reader.readLine()) != null) {\n+            int idx = line.indexOf('#');\n+            if (idx != -1) {  // remove comments\n+                line = line.substring(0, idx);\n+            }\n+            idx = line.indexOf('=');\n+            if (idx != -1) {  // parse key-value pairs\n+                String key = line.substring(0, idx).trim();\n+                String value = line.substring(idx + 1).trim();\n+                if (!key.isEmpty() && !value.isEmpty()) {\n+                    // update or add property\n+                    setProperty(key, value);\n+                }\n+            }\n+        }\n+    }\n+\n+    public String getprop(String key) {\n+        String value = getProperty(key);\n+        if (value == null) {\n+            throw new IllegalArgumentException(\"property not found: \" + key);\n+        }\n+        return value;\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}