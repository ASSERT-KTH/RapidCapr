{
    "patch": "      Reference ref = getOneAndOnlyAssignment();\n      if (ref == null) {\n        return false;\n      }\n\n      // Make sure this assignment is not in a loop.\n      boolean foundAssignment = false;\n      for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          break;\n        } else if (block.isLoop && !foundAssignment) {\n          return false;\n        }\n        if (block.getEscapees().contains(ref)) {\n          foundAssignment = true;\n        }\n      }\n\n      // If the assignment was found before we reached a loop, or if the variable is reassigned\n      // after the loop, then the variable is assigned once in its lifetime.\n      return foundAssignment;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..57cb3370 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,27 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      Reference ref = getOneAndOnlyAssignment();\n+      if (ref == null) {\n+        return false;\n+      }\n+\n+      // Make sure this assignment is not in a loop.\n+      boolean foundAssignment = false;\n+      for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoop && !foundAssignment) {\n+          return false;\n+        }\n+        if (block.getEscapees().contains(ref)) {\n+          foundAssignment = true;\n+        }\n+      }\n+\n+      // If the assignment was found before we reached a loop, or if the variable is reassigned\n+      // after the loop, then the variable is assigned once in its lifetime.\n+      return foundAssignment;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable ref is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}