{
    "patch": "      attachLiteralTypes(n);\n      if (n.isFunction()) {\n        if (parent.isName()) {\n          return;\n        }\n        defineDeclaredFunction(n, parent);\n      } else if (n.isCatch()) {\n        defineCatch(n, parent);\n      } else if (NodeUtil.isNameDeclaration(n)) {\n        defineVar(n, parent);\n      } else if (n.isParamList()) {\n        if (parent.isFunction()) {\n          handleFunctionInputs(parent);\n          return;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..950038e7 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1449,19 +1449,20 @@ final class TypedScopeCreator implements ScopeCreator {\n       }\n \n       attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+      if (n.isFunction()) {\n+        if (parent.isName()) {\n+          return;\n+        }\n+        defineDeclaredFunction(n, parent);\n+      } else if (n.isCatch()) {\n+        defineCatch(n, parent);\n+      } else if (NodeUtil.isNameDeclaration(n)) {\n+        defineVar(n, parent);\n+      } else if (n.isParamList()) {\n+        if (parent.isFunction()) {\n+          handleFunctionInputs(parent);\n+          return;\n+        }\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}