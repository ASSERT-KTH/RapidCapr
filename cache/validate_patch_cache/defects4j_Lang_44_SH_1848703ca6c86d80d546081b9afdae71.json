{
    "patch": "if (val.startsWith(\"--\")) {\n    // this is protection for poorness in java.lang.BigDecimal.\n    // it accepts this as a legal value, but it does not appear \n    // to be in specification of class. OS X Java parses it to \n    // a wrong value.\n    return null;\n}\nint decPos = val.indexOf('.');\nif (val.startsWith(\"0x\") || val.startsWith(\"-0x\") || decPos > -1) {\n    if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n        return createInteger(val);\n    } else {\n        boolean endsWithDecimal = val.endsWith(\".\");\n        if (endsWithDecimal || val.endsWith(\"e\") || val.endsWith(\"E\")) {\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n        try {\n            return createBigDecimal(val);\n        } catch (NumberFormatException e) {\n            if (endsWithDecimal) {\n                throw new NumberFormatException(val + \" is not a valid number.\");\n            } else {\n                throw e;\n            }\n        }\n    }\n}\ntry {\n    return createLong(val);\n} catch (NumberFormatException nfe) {\n    // ignore the bad input\n}\nreturn createBigInteger(val);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..e6f4a66d 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,39 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+if (val.startsWith(\"--\")) {\n+    // this is protection for poorness in java.lang.BigDecimal.\n+    // it accepts this as a legal value, but it does not appear \n+    // to be in specification of class. OS X Java parses it to \n+    // a wrong value.\n+    return null;\n+}\n+int decPos = val.indexOf('.');\n+if (val.startsWith(\"0x\") || val.startsWith(\"-0x\") || decPos > -1) {\n+    if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+        return createInteger(val);\n+    } else {\n+        boolean endsWithDecimal = val.endsWith(\".\");\n+        if (endsWithDecimal || val.endsWith(\"e\") || val.endsWith(\"E\")) {\n+            throw new NumberFormatException(val + \" is not a valid number.\");\n+        }\n+        try {\n+            return createBigDecimal(val);\n+        } catch (NumberFormatException e) {\n+            if (endsWithDecimal) {\n+                throw new NumberFormatException(val + \" is not a valid number.\");\n+            } else {\n+                throw e;\n+            }\n+        }\n+    }\n+}\n+try {\n+    return createLong(val);\n+} catch (NumberFormatException nfe) {\n+    // ignore the bad input\n+}\n+return createBigInteger(val);\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: variable decPos is already defined in method createNumber(String)",
    "test_result": "ERROR"
}