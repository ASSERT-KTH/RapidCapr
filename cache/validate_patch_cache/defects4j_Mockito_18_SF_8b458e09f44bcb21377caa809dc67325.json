{
    "patch": "public Optional<String> getOptionalValue(Map<String, String> map, String key) {\n    if (map == null || key == null) {\n        return Optional.empty();\n    }\n\n    String value = map.get(key);\n    if (value == null || value.trim().isEmpty()) {\n        return Optional.empty();\n    }\n\n    return Optional.of(value.trim());\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..854229d95 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,18 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public Optional<String> getOptionalValue(Map<String, String> map, String key) {\n+    if (map == null || key == null) {\n+        return Optional.empty();\n+    }\n+\n+    String value = map.get(key);\n+    if (value == null || value.trim().isEmpty()) {\n+        return Optional.empty();\n+    }\n+\n+    return Optional.of(value.trim());\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}