{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    for (int i = 0; i < cfgNode.getSuccs().size(); i++) {\n        Node successor = cfgNode.getSuccs().get(i);\n        if (successor.isExceptionTarget()) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..e4480a69 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,6 +157,15 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    for (int i = 0; i < cfgNode.getSuccs().size(); i++) {\n+        Node successor = cfgNode.getSuccs().get(i);\n+        if (successor.isExceptionTarget()) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}