{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    double v1x = v1.getX();\n    double v1y = v1.getY();\n    double v1z = v1.getZ();\n    double v2x = v2.getX();\n    double v2y = v2.getY();\n    double v2z = v2.getZ();\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    double ax = Math.abs(v1x);\n    double ay = Math.abs(v1y);\n    double az = Math.abs(v1z);\n    double bx = Math.abs(v2x);\n    double by = Math.abs(v2y);\n    double bz = Math.abs(v2z);\n\n    double max = Math.max(ax, Math.max(ay, az));\n    double norm1 = ax + ay + az;\n    if (max > 0x1p-1022) {\n        max *= RADIX;\n        v1x = Math.scalb(v1x, (int) (-DoubleFunctions.getExponent(max)));\n        v1y = Math.scalb(v1y, (int) (-DoubleFunctions.getExponent(max)));\n        v1z = Math.scalb(v1z, (int) (-DoubleFunctions.getExponent(max)));\n        norm1 = Math.scalb(norm1, (int) (-DoubleFunctions.getExponent(max)));\n    }\n\n    max = Math.max(bx, Math.max(by, bz));\n    double norm2 = bx + by + bz;\n    if (max > 0x1p-1022) {\n        max *= RADIX;\n        v2x = Math.scalb(v2x, (int) (-DoubleFunctions.getExponent(max)));\n        v2y = Math.scalb(v2y, (int) (-DoubleFunctions.getExponent(max)));\n        v2z = Math.scalb(v2z, (int) (-DoubleFunctions.getExponent(max)));\n        norm2 = Math.scalb(norm2, (int) (-DoubleFunctions.getExponent(max)));\n    }\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n    double rho = 1;\n    double absV2X = Math.abs(v2x);\n    double absV2Y = Math.abs(v2y);\n    double absV2Z = Math.abs(v2z);\n    double scale = absV2X + absV2Y + absV2Z;\n    if (scale == 0) {\n        // v1 and v2 are parallel, cross product should be the zero vector\n        return Vector3D.ZERO;\n    } else {\n        double invScale = 1 / scale;\n        double a = v1y * v2z - v1z * v2y;\n        double b = v1z * v2x - v1x * v2z;\n        double c = v1x * v2y - v1y * v2x;\n        double normA = absV2Y * az + absV2Z * ay;\n        double normB = absV2Z * ax + absV2X * az;\n        double normC = absV2X * ay + absV2Y * ax;\n        double maxNorm = Math.max(normA, Math.max(normB, normC));\n        if (maxNorm > 0x1p-1022) {\n            maxNorm *= RADIX;\n            a = Math.scalb(a, (int) (-DoubleFunctions.getExponent(maxNorm)));\n            b = Math.scalb(b, (int) (-DoubleFunctions.getExponent(maxNorm)));\n            c = Math.scalb(c, (int) (-DoubleFunctions.getExponent(maxNorm)));\n        }\n        rho = ((a * v2x + b * v2y + c * v2z) * invScale) * invScale;\n    }\n\n    double v3x = v1x - rho * v2x;\n    double v3y = v1y - rho * v2y;\n    double v3z = v1z - rho * v2z;\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    return new Vector3D(v3y * v2z - v3z * v2y, v3z * v2x - v3x * v2z, v3x * v2y - v3y * v2x);\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..f84b50d1f 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,85 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+    double v1x = v1.getX();\n+    double v1y = v1.getY();\n+    double v1z = v1.getZ();\n+    double v2x = v2.getX();\n+    double v2y = v2.getY();\n+    double v2z = v2.getZ();\n+\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    double ax = Math.abs(v1x);\n+    double ay = Math.abs(v1y);\n+    double az = Math.abs(v1z);\n+    double bx = Math.abs(v2x);\n+    double by = Math.abs(v2y);\n+    double bz = Math.abs(v2z);\n+\n+    double max = Math.max(ax, Math.max(ay, az));\n+    double norm1 = ax + ay + az;\n+    if (max > 0x1p-1022) {\n+        max *= RADIX;\n+        v1x = Math.scalb(v1x, (int) (-DoubleFunctions.getExponent(max)));\n+        v1y = Math.scalb(v1y, (int) (-DoubleFunctions.getExponent(max)));\n+        v1z = Math.scalb(v1z, (int) (-DoubleFunctions.getExponent(max)));\n+        norm1 = Math.scalb(norm1, (int) (-DoubleFunctions.getExponent(max)));\n+    }\n \n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+    max = Math.max(bx, Math.max(by, bz));\n+    double norm2 = bx + by + bz;\n+    if (max > 0x1p-1022) {\n+        max *= RADIX;\n+        v2x = Math.scalb(v2x, (int) (-DoubleFunctions.getExponent(max)));\n+        v2y = Math.scalb(v2y, (int) (-DoubleFunctions.getExponent(max)));\n+        v2z = Math.scalb(v2z, (int) (-DoubleFunctions.getExponent(max)));\n+        norm2 = Math.scalb(norm2, (int) (-DoubleFunctions.getExponent(max)));\n+    }\n \n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    // we reduce cancellation errors by preconditioning,\n+    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+    // v3 without loss of precision. See Kahan lecture\n+    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+\n+    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    double rho = 1;\n+    double absV2X = Math.abs(v2x);\n+    double absV2Y = Math.abs(v2y);\n+    double absV2Z = Math.abs(v2z);\n+    double scale = absV2X + absV2Y + absV2Z;\n+    if (scale == 0) {\n+        // v1 and v2 are parallel, cross product should be the zero vector\n+        return Vector3D.ZERO;\n+    } else {\n+        double invScale = 1 / scale;\n+        double a = v1y * v2z - v1z * v2y;\n+        double b = v1z * v2x - v1x * v2z;\n+        double c = v1x * v2y - v1y * v2x;\n+        double normA = absV2Y * az + absV2Z * ay;\n+        double normB = absV2Z * ax + absV2X * az;\n+        double normC = absV2X * ay + absV2Y * ax;\n+        double maxNorm = Math.max(normA, Math.max(normB, normC));\n+        if (maxNorm > 0x1p-1022) {\n+            maxNorm *= RADIX;\n+            a = Math.scalb(a, (int) (-DoubleFunctions.getExponent(maxNorm)));\n+            b = Math.scalb(b, (int) (-DoubleFunctions.getExponent(maxNorm)));\n+            c = Math.scalb(c, (int) (-DoubleFunctions.getExponent(maxNorm)));\n+        }\n+        rho = ((a * v2x + b * v2y + c * v2z) * invScale) * invScale;\n+    }\n \n+    double v3x = v1x - rho * v2x;\n+    double v3y = v1y - rho * v2y;\n+    double v3z = v1z - rho * v2z;\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    // compute cross product from v3 and v2 instead of v1 and v2\n+    return new Vector3D(v3y * v2z - v3z * v2y, v3z * v2x - v3x * v2z, v3x * v2y - v3y * v2x);\n \n-  }\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}