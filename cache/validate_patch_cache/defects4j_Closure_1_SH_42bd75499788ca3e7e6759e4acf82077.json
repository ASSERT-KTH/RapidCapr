{
    "patch": "    \n    // Remove unused default parameters\n    Node block = function.getLastChild();\n    for (Node child = block.getFirstChild(); child != null; child = child.getNext()) {\n      if (child.isParamList()) {\n        Node arg = child.getFirstChild();\n        while (arg != null) {\n          if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n            Node nextArg = arg.getNext();\n            child.removeChild(arg);\n            arg = nextArg;\n            compiler.reportCodeChange();\n          } else {\n            arg = arg.getNext();\n          }\n        }\n        break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c6c7015b 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,23 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    \n+    // Remove unused default parameters\n+    Node block = function.getLastChild();\n+    for (Node child = block.getFirstChild(); child != null; child = child.getNext()) {\n+      if (child.isParamList()) {\n+        Node arg = child.getFirstChild();\n+        while (arg != null) {\n+          if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n+            Node nextArg = arg.getNext();\n+            child.removeChild(arg);\n+            arg = nextArg;\n+            compiler.reportCodeChange();\n+          } else {\n+            arg = arg.getNext();\n+          }\n+        }\n+        break;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}