{
    "patch": "public static String fixCode(String code) {\n    int index = code.indexOf(\"for(\");\n    while (index != -1) {\n        int endIndex = getEndIndex(code, index + 4);\n        if (endIndex != -1) {\n            String loop = code.substring(index + 4, endIndex);\n            String[] parts = loop.split(\";\");\n            for (int i = 0; i < parts.length; i++) {\n                String part = parts[i];\n                if (part.contains(\"in\")) {\n                    String[] inParts = part.split(\"in\");\n                    if (inParts.length == 2) {\n                        inParts[0] = inParts[0].trim();\n                        inParts[1] = inParts[1].trim();\n                        if (inParts[1].startsWith(\"[\") && inParts[1].endsWith(\"]\")) {\n                            parts[i] = inParts[0] + \" in \" + inParts[1];\n                        } else {\n                            parts[i] = inParts[0] + \" in [\" + inParts[1] + \"]\";\n                        }\n                    }\n                }\n            }\n            String fixedLoop = \"for(\" + String.join(\";\", parts) + \")\";\n            code = code.substring(0, index) + fixedLoop + code.substring(endIndex);\n            index = code.indexOf(\"for(\", index + 1);\n        } else {\n            break;\n        }\n    }\n    return code;\n}\n\nprivate static int getEndIndex(String code, int startIndex) {\n    int depth = 1;\n    for (int i = startIndex; i < code.length(); i++) {\n        char c = code.charAt(i);\n        if (c == '(') {\n            depth++;\n        } else if (c == ')') {\n            depth--;\n            if (depth == 0) {\n                return i + 1;\n            }\n        }\n    }\n    return -1;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..82a1d0a4 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,53 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    int index = code.indexOf(\"for(\");\n+    while (index != -1) {\n+        int endIndex = getEndIndex(code, index + 4);\n+        if (endIndex != -1) {\n+            String loop = code.substring(index + 4, endIndex);\n+            String[] parts = loop.split(\";\");\n+            for (int i = 0; i < parts.length; i++) {\n+                String part = parts[i];\n+                if (part.contains(\"in\")) {\n+                    String[] inParts = part.split(\"in\");\n+                    if (inParts.length == 2) {\n+                        inParts[0] = inParts[0].trim();\n+                        inParts[1] = inParts[1].trim();\n+                        if (inParts[1].startsWith(\"[\") && inParts[1].endsWith(\"]\")) {\n+                            parts[i] = inParts[0] + \" in \" + inParts[1];\n+                        } else {\n+                            parts[i] = inParts[0] + \" in [\" + inParts[1] + \"]\";\n+                        }\n+                    }\n+                }\n+            }\n+            String fixedLoop = \"for(\" + String.join(\";\", parts) + \")\";\n+            code = code.substring(0, index) + fixedLoop + code.substring(endIndex);\n+            index = code.indexOf(\"for(\", index + 1);\n+        } else {\n+            break;\n+        }\n+    }\n+    return code;\n+}\n+\n+private static int getEndIndex(String code, int startIndex) {\n+    int depth = 1;\n+    for (int i = startIndex; i < code.length(); i++) {\n+        char c = code.charAt(i);\n+        if (c == '(') {\n+            depth++;\n+        } else if (c == ')') {\n+            depth--;\n+            if (depth == 0) {\n+                return i + 1;\n+            }\n+        }\n+    }\n+    return -1;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}