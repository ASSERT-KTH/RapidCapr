{
    "patch": "  JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> enclosing) {\n    boolean resolved = false;\n    try {\n      resolved = resolveViaRegistry(errorReporter, enclosing);\n    } catch (RedeclarationException e) {\n      // Handle RedeclarationException without triggering warnings.\n      resolved = true;\n    }\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(errorReporter);\n    }\n\n    if (resolved) {\n      super.resolveInternal(errorReporter, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    resolved = resolveViaProperties(errorReporter, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(errorReporter);\n    }\n\n    if (resolved) {\n      super.resolveInternal(errorReporter, enclosing);\n      if (isResolved()) {\n        finishPropertyContinuations();\n      }\n    }\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..8ee8a91e 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,34 +181,36 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+  JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> enclosing) {\n+    boolean resolved = false;\n+    try {\n+      resolved = resolveViaRegistry(errorReporter, enclosing);\n+    } catch (RedeclarationException e) {\n+      // Handle RedeclarationException without triggering warnings.\n+      resolved = true;\n+    }\n     if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+      handleTypeCycle(errorReporter);\n     }\n \n     if (resolved) {\n-      super.resolveInternal(t, enclosing);\n+      super.resolveInternal(errorReporter, enclosing);\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n \n-    resolveViaProperties(t, enclosing);\n+    resolved = resolveViaProperties(errorReporter, enclosing);\n     if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+      handleTypeCycle(errorReporter);\n     }\n \n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n+    if (resolved) {\n+      super.resolveInternal(errorReporter, enclosing);\n+      if (isResolved()) {\n+        finishPropertyContinuations();\n+      }\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}