{
    "patch": "public double[] distributionClone(double[] genotypeProbabilities, int M, int D, int N) {\n    double[] probabilities = new double[M];\n    double[][] transitionMatrix = getTransitionMatrix(genotypeProbabilities, M);\n\n    for (int i = 0; i < M; i++) {\n        probabilities[i] = 1.0 / M;\n    }\n\n    for (int i = 0; i < D; i++) {\n        probabilities = matrixVectorMult(transitionMatrix, probabilities);\n    }\n\n    double[] result = new double[N + 1];\n\n    for (int i = 0; i < M; i++) {\n        result[populationCount(i)] += probabilities[i];\n    }\n\n    for (int i = 0; i < N + 1; i++) {\n        result[i] /= Math.pow(M, D);\n    }\n\n    return result;\n}\n\nprivate double[][] getTransitionMatrix(double[] genotypeProbabilities, int M) {\n    double[][] transitionMatrix = new double[M][M];\n\n    for (int i = 0; i < M; i++) {\n        for (int j = 0; j < M; j++) {\n            transitionMatrix[i][j] = transitionProbability(i, j, genotypeProbabilities, M);\n        }\n    }\n\n    return transitionMatrix;\n}\n\nprivate double transitionProbability(int i, int j, double[] genotypeProbabilities, int M) {\n    double sum = 0.0;\n\n    for (int k = 0; k < M; k++) {\n        for (int l = 0; l < M; l++) {\n            if (getDominant(k, l, M) == i) {\n                sum += genotypeProbabilities[k] * genotypeProbabilities[l];\n            }\n        }\n    }\n\n    return genotypeProbabilities[j] * sum;\n}\n\nprivate int getDominant(int i, int j, int M) {\n    int result = 0;\n\n    for (int x = 1; x <= i; x++) {\n        result += M - x;\n    }\n\n    return result + j;\n}\n\nprivate int populationCount(int i) {\n    int result = 0;\n\n    while (i > 0) {\n        result += i % 2;\n        i /= 2;\n    }\n\n    return result;\n}\n\nprivate double[] matrixVectorMult(double[][] matrix, double[] vector) {\n    double[] result = new double[vector.length];\n\n    for (int i = 0; i < matrix.length; i++) {\n        double rowSum = 0.0;\n\n        for (int j = 0; j < matrix[0].length; j++) {\n            rowSum += matrix[i][j] * vector[j];\n        }\n\n        result[i] = rowSum;\n    }\n\n    return result;\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}