{
    "patch": "        Preconditions.checkState(n.isCall());\n\n        // Keep track of the \"this\" context of a call.\n        // A call without an explicit \"this\" is a free call.\n        Node callee = n.getFirstChild();\n        if (!NodeUtil.isGet(callee)) {\n            n.putBooleanProp(Node.FREE_CALL, true);\n        }\n\n        // Keep track of the context in which eval is called.\n        // It is important to distinguish between \"(0, eval)()\" and \"eval()\".\n        if (callee.isName() && \"eval\".equals(callee.getString())) {\n            callee.putBooleanProp(Node.DIRECT_EVAL, true);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..56a0105b 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,20 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+        Preconditions.checkState(n.isCall());\n+\n+        // Keep track of the \"this\" context of a call.\n+        // A call without an explicit \"this\" is a free call.\n+        Node callee = n.getFirstChild();\n+        if (!NodeUtil.isGet(callee)) {\n+            n.putBooleanProp(Node.FREE_CALL, true);\n+        }\n+\n+        // Keep track of the context in which eval is called.\n+        // It is important to distinguish between \"(0, eval)()\" and \"eval()\".\n+        if (callee.isName() && \"eval\".equals(callee.getString())) {\n+            callee.putBooleanProp(Node.DIRECT_EVAL, true);\n+        }\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}