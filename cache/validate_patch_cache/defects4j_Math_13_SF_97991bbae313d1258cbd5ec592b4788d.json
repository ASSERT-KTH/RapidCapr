{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int MAX_SIZE_FOR_SQRT = 500; // Maximum size of matrix for computing exact square root\n    if (m.getRowDimension() > MAX_SIZE_FOR_SQRT || m.getColumnDimension() > MAX_SIZE_FOR_SQRT) {\n        // Compute matrix approximation\n        final QRDecomposition qr = new QRDecomposition(m);\n        final RealMatrix q = qr.getQ();\n        final RealMatrix r = qr.getR();\n        final RealMatrix qrt = q.transpose();\n        final RealMatrix s = q.multiply(qrt);\n        final RealMatrix t = r.add(s.scalarMultiply(-1));\n        final SingularValueDecomposition svd = new SingularValueDecomposition(t);\n        final RealMatrix u = svd.getU();\n        final RealMatrix s_sqrt = MatrixUtils.createRealDiagonalMatrix(\n            Arrays.stream(svd.getSingularValues()).map(FastMath::sqrt).toArray()\n        );\n        final RealMatrix approx_sqrt = u.multiply(s_sqrt).multiply(u.transpose());\n        return approx_sqrt;\n    } else {\n        // Compute exact square root\n        final EigenDecomposition dec = new EigenDecomposition(m);\n        return dec.getSquareRoot();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..6a07537db 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,27 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int MAX_SIZE_FOR_SQRT = 500; // Maximum size of matrix for computing exact square root\n+    if (m.getRowDimension() > MAX_SIZE_FOR_SQRT || m.getColumnDimension() > MAX_SIZE_FOR_SQRT) {\n+        // Compute matrix approximation\n+        final QRDecomposition qr = new QRDecomposition(m);\n+        final RealMatrix q = qr.getQ();\n+        final RealMatrix r = qr.getR();\n+        final RealMatrix qrt = q.transpose();\n+        final RealMatrix s = q.multiply(qrt);\n+        final RealMatrix t = r.add(s.scalarMultiply(-1));\n+        final SingularValueDecomposition svd = new SingularValueDecomposition(t);\n+        final RealMatrix u = svd.getU();\n+        final RealMatrix s_sqrt = MatrixUtils.createRealDiagonalMatrix(\n+            Arrays.stream(svd.getSingularValues()).map(FastMath::sqrt).toArray()\n+        );\n+        final RealMatrix approx_sqrt = u.multiply(s_sqrt).multiply(u.transpose());\n+        return approx_sqrt;\n+    } else {\n+        // Compute exact square root\n+        final EigenDecomposition dec = new EigenDecomposition(m);\n+        return dec.getSquareRoot();\n     }\n }\n+}",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}