{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n\n    // If GETPROP/GETELEM is used as assignment target,\n    // we can't fold it here, e.g., \"[][0] += 1\".\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    // Only fold constant numeric array indices.\n    if (!right.isNumber()) {\n      return n;\n    }\n\n    int index = right.getIntValue();\n    if (index < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // Find the element at the constant array index.\n    Node child = left.getChildAtIndex(index);\n    if (child == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // Replace the entire GETELEM with the element at the given constant array index.\n    Node replacement = child.detach();\n    parent.replaceChild(n, replacement);\n    reportCodeChange();\n    return replacement;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..8eda26e6 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,56 +1419,38 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n+\n+    // If GETPROP/GETELEM is used as assignment target,\n+    // we can't fold it here, e.g., \"[][0] += 1\".\n     if (isAssignmentTarget(n)) {\n       return n;\n     }\n \n+    // Only fold constant numeric array indices.\n     if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n-    }\n-\n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n       return n;\n     }\n \n-    if (intIndex < 0) {\n+    int index = right.getIntValue();\n+    if (index < 0) {\n       error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }\n \n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n-    }\n-\n-    if (elem == null) {\n+    // Find the element at the constant array index.\n+    Node child = left.getChildAtIndex(index);\n+    if (child == null) {\n       error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n-    }\n-\n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n+    // Replace the entire GETELEM with the element at the given constant array index.\n+    Node replacement = child.detach();\n+    parent.replaceChild(n, replacement);\n     reportCodeChange();\n-    return elem;\n+    return replacement;\n   }\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}