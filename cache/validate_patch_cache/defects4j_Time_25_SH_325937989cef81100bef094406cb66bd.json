{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    if (offsetLocal > offsetAdjusted) {\n        long prevLocal = previousTransition(instantAdjusted);\n        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n        if ((prevLocal + offsetLocal) != (prevAdjusted + offsetAdjusted)) {\n            return offsetLocal;\n        } else {\n            int beforeDiff = offsetLocal - getOffset(prevLocal + 1);\n            int afterDiff = getOffset(prevAdjusted + 1) - offsetAdjusted;\n            if (beforeDiff > afterDiff) {\n                return offsetLocal;\n            } else if (beforeDiff == afterDiff && prevAdjusted > prevLocal) {\n                int newBeforeDiff = offsetLocal - getOffset(prevLocal);\n                int newAfterDiff = getOffset(prevAdjusted) - offsetAdjusted;\n                if (newBeforeDiff > newAfterDiff) {\n                    return offsetLocal;\n                }\n            }\n        }\n    } else {\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if ((nextLocal + offsetLocal) != (nextAdjusted + offsetAdjusted)) {\n            int beforeDiff = getOffset(nextLocal - 1) - offsetLocal;\n            int afterDiff = offsetAdjusted - getOffset(nextAdjusted - 1);\n            if (beforeDiff >= afterDiff) {\n                return offsetLocal;\n            } else if (beforeDiff == afterDiff && nextAdjusted > nextLocal) {\n                int newBeforeDiff = getOffset(nextLocal) - offsetLocal;\n                int newAfterDiff = offsetAdjusted - getOffset(nextAdjusted);\n                if (newBeforeDiff > newAfterDiff) {\n                    return offsetLocal;\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..f64a3093 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,43 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    if (offsetLocal > offsetAdjusted) {\n+        long prevLocal = previousTransition(instantAdjusted);\n+        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+        if ((prevLocal + offsetLocal) != (prevAdjusted + offsetAdjusted)) {\n+            return offsetLocal;\n+        } else {\n+            int beforeDiff = offsetLocal - getOffset(prevLocal + 1);\n+            int afterDiff = getOffset(prevAdjusted + 1) - offsetAdjusted;\n+            if (beforeDiff > afterDiff) {\n+                return offsetLocal;\n+            } else if (beforeDiff == afterDiff && prevAdjusted > prevLocal) {\n+                int newBeforeDiff = offsetLocal - getOffset(prevLocal);\n+                int newAfterDiff = getOffset(prevAdjusted) - offsetAdjusted;\n+                if (newBeforeDiff > newAfterDiff) {\n+                    return offsetLocal;\n+                }\n+            }\n+        }\n+    } else {\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if ((nextLocal + offsetLocal) != (nextAdjusted + offsetAdjusted)) {\n+            int beforeDiff = getOffset(nextLocal - 1) - offsetLocal;\n+            int afterDiff = offsetAdjusted - getOffset(nextAdjusted - 1);\n+            if (beforeDiff >= afterDiff) {\n+                return offsetLocal;\n+            } else if (beforeDiff == afterDiff && nextAdjusted > nextLocal) {\n+                int newBeforeDiff = getOffset(nextLocal) - offsetLocal;\n+                int newAfterDiff = offsetAdjusted - getOffset(nextAdjusted);\n+                if (newBeforeDiff > newAfterDiff) {\n+                    return offsetLocal;\n+                }\n+            }\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}