{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    if (value == null) {\n        return regex;\n    }\n\n    boolean wasWhite = false;\n    boolean escaped = false;\n\n    for (int i = 0; i < value.length(); ++i) {\n        char c = value.charAt(i);\n        boolean needEscape = false;\n\n        if (Character.isWhitespace(c)) {\n            if (!wasWhite) {\n                wasWhite = true;\n                regex.append(\"\\\\s*+\");\n            }\n            continue;\n        }\n\n        wasWhite = false;\n\n        switch (c) {\n            case '?':\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '\\\\':\n            case '|':\n            case '*':\n            case '+':\n            case '^':\n            case '$':\n            case '.':\n                needEscape = true;\n                break;\n\n            case '\\'':\n                if (unquote) {\n                    if (i == value.length() - 1) {\n                        break;\n                    }\n\n                    char nextChar = value.charAt(i + 1);\n                    if (nextChar == '\\'') {\n                        i++;\n                        continue;\n                    }\n\n                    if (Character.isWhitespace(nextChar)) {\n                        needEscape = true;\n                    } else if (nextChar == '\\\\') {\n                        if (i < value.length() - 2 && value.charAt(i + 2) == '\\'') {\n                            i += 2;\n                            continue;\n                        } else {\n                            needEscape = true;\n                        }\n                    }\n                }\n                break;\n\n            case 'G':\n                if (i < value.length() - 3 && value.substring(i, i + 4).equals(\"GGGG\")) {\n                    needEscape = true;\n                }\n                break;\n\n            case 'y':\n                if (i < value.length() - 3 && value.substring(i + 1, i + 4).equals(\"yyy\")) {\n                    needEscape = true;\n                }\n                break;\n\n            case 'M':\n                if (i < value.length() - 4 && value.substring(i + 1, i + 5).equals(\"MMMM\")) {\n                    needEscape = true;\n                }\n                break;\n\n            case 'd':\n                if (i < value.length() - 2 && value.substring(i + 1, i + 3).equals(\"dd\")) {\n                    needEscape = true;\n                }\n                break;\n\n            case 'h':\n                if (i < value.length() - 2 && value.substring(i + 1, i + 3).equals(\"hh\")) {\n                    needEscape = true;\n                }\n                break;\n\n            case 'a':\n                if (i < value.length() - 2 && value.substring(i + 1, i + 3).equals(\"aa\")) {\n                    needEscape = true;\n                }\n                break;\n\n            case 'E':\n                if (i < value.length() - 4 && value.substring(i, i + 5).equals(\"EEEEE\")) {\n                    needEscape = true;\n                }\n                break;\n\n            case 'Z':\n                if (i < value.length() - 3 && value.substring(i, i + 4).equals(\"ZZZZ\")) {\n                    needEscape = true;\n                }\n                break;\n\n            default:\n                break;\n        }\n\n        if (needEscape) {\n            regex.append('\\\\');\n        }\n\n        regex.append(c);\n    }\n\n    if (wasWhite) {\n        regex.append(\"\\\\s*+\");\n    }\n\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..92bc3813 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,27 +300,29 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    if (value == null) {\n+        return regex;\n+    }\n+\n+    boolean wasWhite = false;\n+    boolean escaped = false;\n+\n+    for (int i = 0; i < value.length(); ++i) {\n+        char c = value.charAt(i);\n+        boolean needEscape = false;\n+\n+        if (Character.isWhitespace(c)) {\n+            if (!wasWhite) {\n+                wasWhite = true;\n+                regex.append(\"\\\\s*+\");\n             }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n-                }\n-                break;\n+            continue;\n+        }\n+\n+        wasWhite = false;\n+\n+        switch (c) {\n             case '?':\n             case '[':\n             case ']':\n@@ -335,13 +337,100 @@ public class FastDateParser implements DateParser, Serializable {\n             case '^':\n             case '$':\n             case '.':\n-                regex.append('\\\\');\n-            }\n-            regex.append(c);\n+                needEscape = true;\n+                break;\n+\n+            case '\\'':\n+                if (unquote) {\n+                    if (i == value.length() - 1) {\n+                        break;\n+                    }\n+\n+                    char nextChar = value.charAt(i + 1);\n+                    if (nextChar == '\\'') {\n+                        i++;\n+                        continue;\n+                    }\n+\n+                    if (Character.isWhitespace(nextChar)) {\n+                        needEscape = true;\n+                    } else if (nextChar == '\\\\') {\n+                        if (i < value.length() - 2 && value.charAt(i + 2) == '\\'') {\n+                            i += 2;\n+                            continue;\n+                        } else {\n+                            needEscape = true;\n+                        }\n+                    }\n+                }\n+                break;\n+\n+            case 'G':\n+                if (i < value.length() - 3 && value.substring(i, i + 4).equals(\"GGGG\")) {\n+                    needEscape = true;\n+                }\n+                break;\n+\n+            case 'y':\n+                if (i < value.length() - 3 && value.substring(i + 1, i + 4).equals(\"yyy\")) {\n+                    needEscape = true;\n+                }\n+                break;\n+\n+            case 'M':\n+                if (i < value.length() - 4 && value.substring(i + 1, i + 5).equals(\"MMMM\")) {\n+                    needEscape = true;\n+                }\n+                break;\n+\n+            case 'd':\n+                if (i < value.length() - 2 && value.substring(i + 1, i + 3).equals(\"dd\")) {\n+                    needEscape = true;\n+                }\n+                break;\n+\n+            case 'h':\n+                if (i < value.length() - 2 && value.substring(i + 1, i + 3).equals(\"hh\")) {\n+                    needEscape = true;\n+                }\n+                break;\n+\n+            case 'a':\n+                if (i < value.length() - 2 && value.substring(i + 1, i + 3).equals(\"aa\")) {\n+                    needEscape = true;\n+                }\n+                break;\n+\n+            case 'E':\n+                if (i < value.length() - 4 && value.substring(i, i + 5).equals(\"EEEEE\")) {\n+                    needEscape = true;\n+                }\n+                break;\n+\n+            case 'Z':\n+                if (i < value.length() - 3 && value.substring(i, i + 4).equals(\"ZZZZ\")) {\n+                    needEscape = true;\n+                }\n+                break;\n+\n+            default:\n+                break;\n         }\n-        return regex;\n+\n+        if (needEscape) {\n+            regex.append('\\\\');\n+        }\n+\n+        regex.append(c);\n     }\n \n+    if (wasWhite) {\n+        regex.append(\"\\\\s*+\");\n+    }\n+\n+    return regex;\n+}\n+\n     /**\n      * A class to store Key / Value pairs\n      */",
    "result_reason": "junit.framework.AssertionFailedError: Parsed dates should be equal expected:<null> but was:<Mon Mar 02 21:00:00 PST 1970>",
    "test_result": "FAIL"
}