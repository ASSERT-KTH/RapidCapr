{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix eigenvectors = dec.getV();\n    final RealMatrix eigenvalues = dec.getD();\n    final RealMatrix s = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        final double lambda = eigenvalues.getEntry(i, i);\n        if (lambda < 0) {\n            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n        }\n        s.setEntry(i, i, Math.sqrt(lambda));\n    }\n    final RealMatrix vtv = eigenvectors.transpose().multiply(s).multiply(eigenvectors);\n    final RealMatrix vtvSqrt = new CholeskyDecomposition(vtv).getL();\n    final RealMatrix sqrtMatrix = eigenvectors.multiply(vtvSqrt).multiply(eigenvectors.transpose());\n    return sqrtMatrix;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..84df925c8 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,22 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix eigenvectors = dec.getV();\n+    final RealMatrix eigenvalues = dec.getD();\n+    final RealMatrix s = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        final double lambda = eigenvalues.getEntry(i, i);\n+        if (lambda < 0) {\n+            throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+        }\n+        s.setEntry(i, i, Math.sqrt(lambda));\n     }\n+    final RealMatrix vtv = eigenvectors.transpose().multiply(s).multiply(eigenvectors);\n+    final RealMatrix vtvSqrt = new CholeskyDecomposition(vtv).getL();\n+    final RealMatrix sqrtMatrix = eigenvectors.multiply(vtvSqrt).multiply(eigenvectors.transpose());\n+    return sqrtMatrix;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}