{
    "patch": "import com.google.common.base.Preconditions;\nimport com.google.javascript.jscomp.Compiler;\nimport com.google.javascript.jscomp.Var;\nimport com.google.javascript.rhino.JSType;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\nimport com.google.javascript.rhino.jstype.FunctionType;\nimport com.google.javascript.rhino.jstype.JSTypeNative;\nimport com.google.javascript.rhino.jstype.ObjectType;\n\nclass NodeUtilFix {\n  private final Compiler compiler;\n\n  NodeUtilFix(Compiler compiler) {\n    this.compiler = compiler;\n  }\n\n  void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n    Preconditions.checkNotNull(n);\n    Preconditions.checkNotNull(parent);\n    Preconditions.checkArgument(inferred || type != null);\n\n    boolean shouldDeclareOnGlobalThis = false;\n\n    if (n.getToken() == Token.NAME) {\n      switch (parent.getToken()) {\n        case FUNCTION:\n        case VAR:\n        case LP:\n        case CATCH:\n          shouldDeclareOnGlobalThis = scope.isGlobal() &&\n            (parent.getToken() == Token.VAR || parent.getToken() == Token.FUNCTION);\n          break;\n        default:\n          throw new IllegalArgumentException(\"Invalid parent: \" + parent);\n      }\n    } else if (n.getToken() == Token.GETPROP) {\n      switch (parent.getToken()) {\n        case ASSIGN:\n        case EXPR_RESULT:\n          break;\n        default:\n          throw new IllegalArgumentException(\"Invalid parent: \" + parent);\n      }\n    } else {\n      throw new IllegalArgumentException(\"Invalid Node type: \" + n.getToken());\n    }\n\n    String variableName = n.getQualifiedName();\n\n    Preconditions.checkNotNull(variableName);\n    Preconditions.checkArgument(!variableName.isEmpty());\n\n    Scope scopeToDeclareIn = scope;\n\n    if (scopeToDeclareIn.isDeleted()) {\n      scopeToDeclareIn = scopeToDeclareIn.getParent();\n    }\n\n    if (scopeToDeclareIn.isGlobal() && !inferred && scopeToDeclareIn.isDeclared(variableName, !inferred)) {\n      Var var = scopeToDeclareIn.getVar(variableName);\n      validator.expectUndeclaredVariable(sourceName, n, parent, var, variableName, type);\n      return;\n    }\n\n    if (n.getToken() == Token.NAME) {\n      switch (parent.getToken()) {\n        case FUNCTION:\n        case VAR:\n        case LP:\n        case CATCH:\n          shouldDeclareOnGlobalThis = scope.isGlobal() && ((parent.getToken() == Token.VAR ||\n                parent.getToken() == Token.FUNCTION));\n          break;\n        default:\n          throw new IllegalArgumentException(\"Invalid parent: \" + parent);\n      }\n    }\n\n    if (scopeToDeclareIn.isDeclared(variableName, !inferred)) {\n      if(scopeToDeclareIn.getClosestHoistScope().getVar(variableName).getParentNode() == parent\n        || (scopeToDeclareIn.isBlockScope() && parent.getToken() == Token.FOR && parent.hasOneChild() && parent.getFirstChild().getToken() == Token.VAR && scopeToDeclareIn == parent.getScope())\n      ) {\n        validator.expectRedefinedVariable(sourceName, n, parent,\n            scopeToDeclareIn.getClosestHoistScope().getVar(variableName));\n      } else {\n        validator.expectDuplicateVariableDefinition(sourceName, n,\n            scopeToDeclareIn.getClosestHoistScope().getVar(variableName).getNameNode());\n      }\n    } else {\n      if (inferred) {\n        if (n.getToken() != Token.NAME || !parent.getToken().equals(Token.VAR)) {\n          setDeferredType(n, type);\n        }\n      } else {\n        scopeToDeclareIn.declare(variableName, n, type, compiler.getInput(sourceName), inferred);\n\n        if (shouldDeclareOnGlobalThis) {\n          ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n          boolean isExtern = compiler.getInput(sourceName).isExtern();\n          globalThis.defineDeclaredProperty(variableName, type, isExtern);\n        }\n\n        if (scopeToDeclareIn.getClosestHoistScope().isFunctionScope() && type instanceof FunctionType) {\n          FunctionType fnType = (FunctionType) type;\n          if (fnType.isConstructor() || fnType.isInterface()) {\n            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                fnType.getPrototype(), compiler.getInput(sourceName),\n                superClassCtor == null ||\n                superClassCtor.getInstanceType().equals(\n                    getNativeType(JSTypeNative.OBJECT_TYPE)));\n          }\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..54c3f5df 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,80 +869,124 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n-      } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n+import com.google.common.base.Preconditions;\n+import com.google.javascript.jscomp.Compiler;\n+import com.google.javascript.jscomp.Var;\n+import com.google.javascript.rhino.JSType;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.jstype.FunctionType;\n+import com.google.javascript.rhino.jstype.JSTypeNative;\n+import com.google.javascript.rhino.jstype.ObjectType;\n+\n+class NodeUtilFix {\n+  private final Compiler compiler;\n+\n+  NodeUtilFix(Compiler compiler) {\n+    this.compiler = compiler;\n+  }\n+\n+  void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+    Preconditions.checkNotNull(n);\n+    Preconditions.checkNotNull(parent);\n+    Preconditions.checkArgument(inferred || type != null);\n+\n+    boolean shouldDeclareOnGlobalThis = false;\n+\n+    if (n.getToken() == Token.NAME) {\n+      switch (parent.getToken()) {\n+        case FUNCTION:\n+        case VAR:\n+        case LP:\n+        case CATCH:\n+          shouldDeclareOnGlobalThis = scope.isGlobal() &&\n+            (parent.getToken() == Token.VAR || parent.getToken() == Token.FUNCTION);\n+          break;\n+        default:\n+          throw new IllegalArgumentException(\"Invalid parent: \" + parent);\n+      }\n+    } else if (n.getToken() == Token.GETPROP) {\n+      switch (parent.getToken()) {\n+        case ASSIGN:\n+        case EXPR_RESULT:\n+          break;\n+        default:\n+          throw new IllegalArgumentException(\"Invalid parent: \" + parent);\n+      }\n+    } else {\n+      throw new IllegalArgumentException(\"Invalid Node type: \" + n.getToken());\n+    }\n+\n+    String variableName = n.getQualifiedName();\n+\n+    Preconditions.checkNotNull(variableName);\n+    Preconditions.checkArgument(!variableName.isEmpty());\n+\n+    Scope scopeToDeclareIn = scope;\n+\n+    if (scopeToDeclareIn.isDeleted()) {\n+      scopeToDeclareIn = scopeToDeclareIn.getParent();\n+    }\n+\n+    if (scopeToDeclareIn.isGlobal() && !inferred && scopeToDeclareIn.isDeclared(variableName, !inferred)) {\n+      Var var = scopeToDeclareIn.getVar(variableName);\n+      validator.expectUndeclaredVariable(sourceName, n, parent, var, variableName, type);\n+      return;\n+    }\n+\n+    if (n.getToken() == Token.NAME) {\n+      switch (parent.getToken()) {\n+        case FUNCTION:\n+        case VAR:\n+        case LP:\n+        case CATCH:\n+          shouldDeclareOnGlobalThis = scope.isGlobal() && ((parent.getToken() == Token.VAR ||\n+                parent.getToken() == Token.FUNCTION));\n+          break;\n+        default:\n+          throw new IllegalArgumentException(\"Invalid parent: \" + parent);\n       }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n+    }\n+\n+    if (scopeToDeclareIn.isDeclared(variableName, !inferred)) {\n+      if(scopeToDeclareIn.getClosestHoistScope().getVar(variableName).getParentNode() == parent\n+        || (scopeToDeclareIn.isBlockScope() && parent.getToken() == Token.FOR && parent.hasOneChild() && parent.getFirstChild().getToken() == Token.VAR && scopeToDeclareIn == parent.getScope())\n+      ) {\n+        validator.expectRedefinedVariable(sourceName, n, parent,\n+            scopeToDeclareIn.getClosestHoistScope().getVar(variableName));\n       } else {\n-        if (!inferred) {\n+        validator.expectDuplicateVariableDefinition(sourceName, n,\n+            scopeToDeclareIn.getClosestHoistScope().getVar(variableName).getNameNode());\n+      }\n+    } else {\n+      if (inferred) {\n+        if (n.getToken() != Token.NAME || !parent.getToken().equals(Token.VAR)) {\n           setDeferredType(n, type);\n         }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n+      } else {\n+        scopeToDeclareIn.declare(variableName, n, type, compiler.getInput(sourceName), inferred);\n \n         if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n+          ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+          boolean isExtern = compiler.getInput(sourceName).isExtern();\n+          globalThis.defineDeclaredProperty(variableName, type, isExtern);\n         }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n+        if (scopeToDeclareIn.getClosestHoistScope().isFunctionScope() && type instanceof FunctionType) {\n           FunctionType fnType = (FunctionType) type;\n           if (fnType.isConstructor() || fnType.isInterface()) {\n             FunctionType superClassCtor = fnType.getSuperClassConstructor();\n             scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                 fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n                 superClassCtor == null ||\n                 superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n+                    getNativeType(JSTypeNative.OBJECT_TYPE)));\n           }\n         }\n       }\n     }\n+  }\n+}\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}