{
    "patch": "if (!NodeUtil.isFunctionExpression(n)) {\n    return false;\n}\nNode parent = n.getParent();\nif (parent == null || parent.isCall() || parent.isNew() || parent.isObjectLit() ||\n    (NodeUtil.isStatementBlock(parent) && parent.getFirstChild() != n)) {\n    return false;\n}\nNode grandParent = parent.getParent();\nint grandParentType = grandParent.getType();\nif (grandParentType == Token.CALL || grandParentType == Token.NEW ||\n    grandParentType == Token.OBJECTLIT) {\n    return false;\n} else {\n    return grandParentType == Token.EXPR_RESULT || grandParentType == Token.CALL ||\n           grandParentType == Token.ASSIGN || grandParentType == Token.VAR ||\n           grandParentType == Token.RETURN ||\n           (grandParentType == Token.BLOCK && grandParent.getParent() != null &&\n            grandParent.getParent().getType() == Token.FUNCTION);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..e037ba59 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,26 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+if (!NodeUtil.isFunctionExpression(n)) {\n+    return false;\n+}\n+Node parent = n.getParent();\n+if (parent == null || parent.isCall() || parent.isNew() || parent.isObjectLit() ||\n+    (NodeUtil.isStatementBlock(parent) && parent.getFirstChild() != n)) {\n+    return false;\n+}\n+Node grandParent = parent.getParent();\n+int grandParentType = grandParent.getType();\n+if (grandParentType == Token.CALL || grandParentType == Token.NEW ||\n+    grandParentType == Token.OBJECTLIT) {\n+    return false;\n+} else {\n+    return grandParentType == Token.EXPR_RESULT || grandParentType == Token.CALL ||\n+           grandParentType == Token.ASSIGN || grandParentType == Token.VAR ||\n+           grandParentType == Token.RETURN ||\n+           (grandParentType == Token.BLOCK && grandParent.getParent() != null &&\n+            grandParent.getParent().getType() == Token.FUNCTION);\n+}\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}