{
    "patch": "                for (int i = 0; i < lB.length; i++) {\n                    if (Double.isInfinite(lB[i])) {\n                        throw new NumberIsTooLargeException(lB[i], Double.POSITIVE_INFINITY, false);\n                    }\n                    if (Double.isInfinite(uB[i])) {\n                        throw new NumberIsTooLargeException(Double.NEGATIVE_INFINITY, uB[i], true);\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..3fbbbbed0 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,14 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                for (int i = 0; i < lB.length; i++) {\n+                    if (Double.isInfinite(lB[i])) {\n+                        throw new NumberIsTooLargeException(lB[i], Double.POSITIVE_INFINITY, false);\n+                    }\n+                    if (Double.isInfinite(uB[i])) {\n+                        throw new NumberIsTooLargeException(Double.NEGATIVE_INFINITY, uB[i], true);\n+                    }\n+                }\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "java.lang.Exception: Unexpected exception, expected<org.apache.commons.math3.exception.NumberIsTooLargeException> but was<org.apache.commons.math3.exception.MathIllegalStateException>",
    "test_result": "FAIL"
}