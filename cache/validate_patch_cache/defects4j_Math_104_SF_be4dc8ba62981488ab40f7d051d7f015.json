{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    final double epsilon = 1e-14;\n    final double big = 4.503599627370496E15;\n    final double bigInv =  2.22044604925031308085E-16;\n\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 0.0;\n    }\n\n    if (x >= a + 1.0) {\n        // use regularizedGammaQ because it should converge faster in this case.\n        return 1 - regularizedGammaQ(a, x);\n    }\n\n    double ax = a * Math.log(x) - x - logGamma(a);\n    if (ax < -MAX_LOG) {\n        return 0.0;\n    }\n\n    ax = Math.exp(ax);\n    double t = 1.0 / a;\n    double y = t;\n    double z = y;\n    double sum = 0.0;\n    for (int i = 1; Math.abs(y) > epsilon; i++) {\n        double a_i = i;\n        t *= x / (a + a_i);\n        y = t * a_i;\n        z += y;\n        if (z >= big) {\n            sum += Math.log(z);\n            z = 0.0;\n        }\n    }\n    sum += Math.log(z);\n    sum += ax * Math.log(y / a);\n    return (Math.exp(sum) * bigInv);\n}\n\nprivate static double regularizedGammaQ(double a, double x) {\n    final double epsilon = 1e-14;\n    final double big = 4.503599627370496E15;\n    final double bigInv =  2.22044604925031308085E-16;\n    final int maxIterations = 10000;\n\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0.0) {\n        return 1.0;\n    }\n\n    if (x < a + 1.0) {\n        // use regularizedGammaP because it should converge faster in this case.\n        return 1 - regularizedGammaP(a, x);\n    }\n\n    ContinuedFraction fraction = new ContinuedFraction() {\n        @Override\n        protected double getA(int n, double x) {\n            return 2 * n + 1 - a + x;\n        }\n\n        @Override\n        protected double getB(int n, double x) {\n            return n * (a - n);\n        }\n    };\n\n    double small = 1.0 / big;\n    double h = fraction.evaluate(x, epsilon, maxIterations);\n    double temp = a * Math.log(x) - x - logGamma(a);\n    double c = Math.exp(temp);\n    double sum = c * h;\n\n    double y = 1.0 / x;\n    double del = h;\n    for (int n = 1; Math.abs(del) > small; n++) {\n        double a_n = n * (a - n);\n        del = a_n * y * del;\n        sum += del;\n    }\n\n    return sum * bigInv;\n}\n\nprivate static double logGamma(double x) {\n    if (x <= 0.0) {\n        return Double.NaN;\n    }\n\n    double sum = 0.0;\n    double tmp = x + 5.5;\n    tmp -= (x + 0.5) * Math.log(tmp);\n    for (int i = 0; i < 6; ++i) {\n        sum += COF[i] / ++x;\n    }\n    return -tmp + Math.log(2.5066282746310005 * sum);\n}\n\nprivate static final double[] COF = {\n        76.18009172947146,\n        -86.50532032941677,\n        24.01409824083091,\n        -1.231739572450155,\n        0.001208650973866179,\n        -5.395239384953E-06\n};\nprivate static final double MAX_LOG = Math.log(Double.MAX_VALUE);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..85dce0c4c 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,120 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    final double epsilon = 1e-14;\n+    final double big = 4.503599627370496E15;\n+    final double bigInv =  2.22044604925031308085E-16;\n+\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+\n+    if (x >= a + 1.0) {\n+        // use regularizedGammaQ because it should converge faster in this case.\n+        return 1 - regularizedGammaQ(a, x);\n+    }\n+\n+    double ax = a * Math.log(x) - x - logGamma(a);\n+    if (ax < -MAX_LOG) {\n+        return 0.0;\n+    }\n+\n+    ax = Math.exp(ax);\n+    double t = 1.0 / a;\n+    double y = t;\n+    double z = y;\n+    double sum = 0.0;\n+    for (int i = 1; Math.abs(y) > epsilon; i++) {\n+        double a_i = i;\n+        t *= x / (a + a_i);\n+        y = t * a_i;\n+        z += y;\n+        if (z >= big) {\n+            sum += Math.log(z);\n+            z = 0.0;\n+        }\n+    }\n+    sum += Math.log(z);\n+    sum += ax * Math.log(y / a);\n+    return (Math.exp(sum) * bigInv);\n+}\n+\n+private static double regularizedGammaQ(double a, double x) {\n+    final double epsilon = 1e-14;\n+    final double big = 4.503599627370496E15;\n+    final double bigInv =  2.22044604925031308085E-16;\n+    final int maxIterations = 10000;\n+\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0.0) {\n+        return 1.0;\n+    }\n+\n+    if (x < a + 1.0) {\n+        // use regularizedGammaP because it should converge faster in this case.\n+        return 1 - regularizedGammaP(a, x);\n+    }\n+\n+    ContinuedFraction fraction = new ContinuedFraction() {\n+        @Override\n+        protected double getA(int n, double x) {\n+            return 2 * n + 1 - a + x;\n+        }\n+\n+        @Override\n+        protected double getB(int n, double x) {\n+            return n * (a - n);\n+        }\n+    };\n+\n+    double small = 1.0 / big;\n+    double h = fraction.evaluate(x, epsilon, maxIterations);\n+    double temp = a * Math.log(x) - x - logGamma(a);\n+    double c = Math.exp(temp);\n+    double sum = c * h;\n+\n+    double y = 1.0 / x;\n+    double del = h;\n+    for (int n = 1; Math.abs(del) > small; n++) {\n+        double a_n = n * (a - n);\n+        del = a_n * y * del;\n+        sum += del;\n+    }\n+\n+    return sum * bigInv;\n+}\n+\n+private static double logGamma(double x) {\n+    if (x <= 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    double sum = 0.0;\n+    double tmp = x + 5.5;\n+    tmp -= (x + 0.5) * Math.log(tmp);\n+    for (int i = 0; i < 6; ++i) {\n+        sum += COF[i] / ++x;\n+    }\n+    return -tmp + Math.log(2.5066282746310005 * sum);\n+}\n+\n+private static final double[] COF = {\n+        76.18009172947146,\n+        -86.50532032941677,\n+        24.01409824083091,\n+        -1.231739572450155,\n+        0.001208650973866179,\n+        -5.395239384953E-06\n+};\n+private static final double MAX_LOG = Math.log(Double.MAX_VALUE);\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}