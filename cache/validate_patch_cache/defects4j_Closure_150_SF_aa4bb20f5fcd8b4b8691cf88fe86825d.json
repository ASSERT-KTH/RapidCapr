{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode())\n        return;\n\n    switch (n.getType()) {\n    case Token.FUNCTION:\n        if (parent.getType() == Token.NAME || parent.getType() == Token.ASSIGN) {\n            // Don't consider function expression or function assignment\n            return;\n        }\n        defineDeclaredFunction(n, parent);\n        break;\n    case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n    case Token.VAR:\n        defineVar(n, parent);\n        break;\n    case Token.CALL:\n        if (n.getFirstChild().getType() == Token.NAME && \n            n.getFirstChild().getString().equals(\"goog.inherits\") && \n            n.getSecondChild().getFirstChild().getType() == Token.NAME) {\n            addExtends(n.getSecondChild().getFirstChild().getString(), n);\n        }\n        break;\n    case Token.LP:\n        if (parent == scope.getRootNode() || \n            isVarDeclaration(parent) || \n            (parent.getParent() != null && parent.getParent().getType() == Token.EXPR_RESULT)) {\n            handleFunctionInputs(n);\n        }\n        break;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..04d963f1 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,41 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode())\n         return;\n-      }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+    switch (n.getType()) {\n+    case Token.FUNCTION:\n+        if (parent.getType() == Token.NAME || parent.getType() == Token.ASSIGN) {\n+            // Don't consider function expression or function assignment\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        defineDeclaredFunction(n, parent);\n+        break;\n+    case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+    case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+    case Token.CALL:\n+        if (n.getFirstChild().getType() == Token.NAME && \n+            n.getFirstChild().getString().equals(\"goog.inherits\") && \n+            n.getSecondChild().getFirstChild().getType() == Token.NAME) {\n+            addExtends(n.getSecondChild().getFirstChild().getString(), n);\n+        }\n+        break;\n+    case Token.LP:\n+        if (parent == scope.getRootNode() || \n+            isVarDeclaration(parent) || \n+            (parent.getParent() != null && parent.getParent().getType() == Token.EXPR_RESULT)) {\n+            handleFunctionInputs(n);\n+        }\n+        break;\n     }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}