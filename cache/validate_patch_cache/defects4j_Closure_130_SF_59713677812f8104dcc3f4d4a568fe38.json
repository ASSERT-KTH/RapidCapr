{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n      if (name.aliasingGets > 0 && name.localSets == 0) {\n        boolean allRefsMeetConditions = true;\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type == Type.ALIASING_GET && !ref.scope.isLocal()) {\n            allRefsMeetConditions = false;\n            break;\n          } else if (ref.type == Type.SET_FROM_GLOBAL && ref.scope.isHoistScope()) {\n            allRefsMeetConditions = false;\n            break;\n          }\n        }\n\n        if (allRefsMeetConditions) {\n          // Try to inline all aliases.\n          for (Ref ref : refs) {\n            if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n              // Try to inline {@code ref}.\n              if (inlineAliasIfPossible(ref, namespace)) {\n                // If we successfully inlined {@code ref}, remove it from {@code name}'s refs list.\n                name.removeRef(ref);\n              }\n            }\n          }\n        }\n      }\n\n      // Check if {@code name} has any aliases left after the\n      // local-alias-inlining above.\n      if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION)\n          && name.aliasingGets == 0 && name.props != null) {\n        // All of {@code name}'s children meet condition (a), so they can be\n        // added to the worklist.\n        workList.addAll(name.props);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..d705f720 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,7 +158,7 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n+private void inlineAliases(GlobalNamespace namespace) {\n     // Invariant: All the names in the worklist meet condition (a).\n     Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n     while (!workList.isEmpty()) {\n@@ -169,16 +169,28 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n+      if (name.aliasingGets > 0 && name.localSets == 0) {\n+        boolean allRefsMeetConditions = true;\n         List<Ref> refs = Lists.newArrayList(name.getRefs());\n         for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+          if (ref.type == Type.ALIASING_GET && !ref.scope.isLocal()) {\n+            allRefsMeetConditions = false;\n+            break;\n+          } else if (ref.type == Type.SET_FROM_GLOBAL && ref.scope.isHoistScope()) {\n+            allRefsMeetConditions = false;\n+            break;\n+          }\n+        }\n+\n+        if (allRefsMeetConditions) {\n+          // Try to inline all aliases.\n+          for (Ref ref : refs) {\n+            if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+              // Try to inline {@code ref}.\n+              if (inlineAliasIfPossible(ref, namespace)) {\n+                // If we successfully inlined {@code ref}, remove it from {@code name}'s refs list.\n+                name.removeRef(ref);\n+              }\n             }\n           }\n         }\n@@ -186,9 +198,8 @@ class CollapseProperties implements CompilerPass {\n \n       // Check if {@code name} has any aliases left after the\n       // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n+      if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION)\n+          && name.aliasingGets == 0 && name.props != null) {\n         // All of {@code name}'s children meet condition (a), so they can be\n         // added to the worklist.\n         workList.addAll(name.props);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}