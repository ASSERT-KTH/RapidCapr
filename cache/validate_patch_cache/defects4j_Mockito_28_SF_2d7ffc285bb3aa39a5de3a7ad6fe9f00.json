{
    "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n            if (!field.getType().isInstance(fieldInstance)) {\n                continue;\n            }\n            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n            if (candidate == null) {\n                continue;\n            }\n            if (!field.getType().isInstance(candidate)) {\n                continue;\n            }\n            field.setAccessible(true);\n            try {\n                field.set(fieldInstance, candidate);\n            } catch (IllegalAccessException e) {\n                throw new IllegalArgumentException(\"Failed to set field \" + field.getName() + \" of \"\n                        + awaitingInjectionClazz.getSimpleName() + \" to \" + candidate + \" due to \" + e.getMessage(), e);\n            }\n            injectMockCandidate(candidate.getClass(), mocks, candidate);\n            return;",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..4f352ab2a 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,11 +88,28 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n-        }\n-    }\n+\n+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+            if (!field.getType().isInstance(fieldInstance)) {\n+                continue;\n+            }\n+            Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+            if (candidate == null) {\n+                continue;\n+            }\n+            if (!field.getType().isInstance(candidate)) {\n+                continue;\n+            }\n+            field.setAccessible(true);\n+            try {\n+                field.set(fieldInstance, candidate);\n+            } catch (IllegalAccessException e) {\n+                throw new IllegalArgumentException(\"Failed to set field \" + field.getName() + \" of \"\n+                        + awaitingInjectionClazz.getSimpleName() + \" to \" + candidate + \" due to \" + e.getMessage(), e);\n+            }\n+            injectMockCandidate(candidate.getClass(), mocks, candidate);\n+            return;\n \n     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {\n         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}