{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    Gson gson = new Gson();\n    Type listType = new TypeToken<List<Type>>(){}.getType();\n    List<Type> types = gson.fromJson(jsonStr, listType);\n\n    int totalCount = 0;\n    int typedCount = 0;\n\n    for (Type type : types) {\n        if (type.isWellTyped()) {\n            typedCount++;\n        }\n        totalCount++;\n    }\n    \n    return (double)typedCount / totalCount * 100;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..8d26cd62 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    Gson gson = new Gson();\n+    Type listType = new TypeToken<List<Type>>(){}.getType();\n+    List<Type> types = gson.fromJson(jsonStr, listType);\n+\n+    int totalCount = 0;\n+    int typedCount = 0;\n+\n+    for (Type type : types) {\n+        if (type.isWellTyped()) {\n+            typedCount++;\n+        }\n+        totalCount++;\n+    }\n+    \n+    return (double)typedCount / totalCount * 100;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}