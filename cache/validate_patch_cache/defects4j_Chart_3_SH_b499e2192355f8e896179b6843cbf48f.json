{
    "patch": "        int copyIndex = 0;\n        for (int index = 0; index < this.getItemCount(); index++) {\n            TimeSeriesDataItem item = this.getDataItem(index);\n            long timestamp = item.getPeriod().getFirstMillisecond();\n            if (timestamp >= this.getDataItem(start).getPeriod().getFirstMillisecond() &&\n                    timestamp <= this.getDataItem(end).getPeriod().getFirstMillisecond()) {\n                TimeSeriesDataItem cloneItem = (TimeSeriesDataItem) item.clone();\n                try {\n                    copy.add(cloneItem);\n                } catch (SeriesException e) {\n                    e.printStackTrace();\n                }\n                copyIndex++;\n            }\n            if (copyIndex > end) {\n                break;",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..3731be5 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,6 +1054,22 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n+        int copyIndex = 0;\n+        for (int index = 0; index < this.getItemCount(); index++) {\n+            TimeSeriesDataItem item = this.getDataItem(index);\n+            long timestamp = item.getPeriod().getFirstMillisecond();\n+            if (timestamp >= this.getDataItem(start).getPeriod().getFirstMillisecond() &&\n+                    timestamp <= this.getDataItem(end).getPeriod().getFirstMillisecond()) {\n+                TimeSeriesDataItem cloneItem = (TimeSeriesDataItem) item.clone();\n+                try {\n+                    copy.add(cloneItem);\n+                } catch (SeriesException e) {\n+                    e.printStackTrace();\n+                }\n+                copyIndex++;\n+            }\n+            if (copyIndex > end) {\n+                break;\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}