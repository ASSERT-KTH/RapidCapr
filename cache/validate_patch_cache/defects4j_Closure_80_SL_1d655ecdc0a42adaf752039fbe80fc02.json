{
    "patch": "import com.google.javascript.rhino.Token;\nimport com.google.javascript.rhino.NodeUtil;\nimport java.util.function.Predicate;\n\npublic class BugFix {\n\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        return newHasLocalResult(value)\n               || locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.IN:\n      case Token.INSTANCEOF:\n        // These operators always return a local value\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }\n\n  private static boolean isSimpleOperator(Node n) {\n    switch (n.getType()) {\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GET:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NEG:\n      case Token.NOT:\n      case Token.POS:\n      case Token.RSH:\n      case Token.SUB:\n      case Token.URSH:\n      case Token.VOID:\n        return true;\n      default:\n        break;\n    }\n    return false;\n  }\n\n  private static boolean isAssignmentOp(Node n) {\n    switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_URSH:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  private static boolean callHasLocalResult(Node n) {\n    Node callTarget = n.getFirstChild();\n    if (callTarget.getType() != Token.NAME) {\n      return true;\n    }\n\n    String name = callTarget.getString();\n    if (name.equals(\"eval\") || name.equals(\"parseInt\")) {\n      return true;\n    } else if (name.equals(\"String\")) {\n      // Only the String function that takes an object will always produce a\n      // local value.  This is because once the object is coerced to a string\n      // the resulting string is always the same,\n      return n.getChildCount() == 2\n          && !NodeUtil.mayHaveSideEffects(n.getLastChild(), /* compiler= */ null);\n    }\n    return false;\n  }\n\n  private static boolean newHasLocalResult(Node n) {\n    Node constructor = n.getFirstChild();\n    if (constructor.getType() != Token.NAME) {\n      return true;\n    }\n\n    String name = constructor.getString();\n    return name.equals(\"Number\")\n        || name.equals(\"String\")\n        || name.equals(\"Boolean\");\n  }\n\n  private static boolean isToStringMethodCall(Node n) {\n    return n.getType() == Token.CALL\n        && n.getFirstChild().getFirstFirstChild() != null\n        && \"toString\".equals(n.getFirstChild().getFirstFirstChild().getString());\n  }\n\n  private static boolean isImmutableValue(Node n) {\n      return NodeUtil.isLiteralValue(n) || n.getType() == Token.REGEXP;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 08fb954f..e598dcc1 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1239,70 +1239,235 @@ public final class NodeUtil {\n     return valueCheck(n, BOOLEAN_RESULT_PREDICATE);\n   }\n \n-  static boolean isBooleanResultHelper(Node n) {\n-    switch (n.getType()) {\n-      // Primitives\n-      case Token.TRUE:\n-      case Token.FALSE:\n-      // Comparisons\n-      case Token.EQ:\n-      case Token.NE:\n-      case Token.SHEQ:\n-      case Token.SHNE:\n-      case Token.LT:\n-      case Token.GT:\n-      case Token.LE:\n-      case Token.GE:\n-      // Queryies\n+  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n+    switch (value.getType()) {\n+      case Token.ASSIGN:\n+        // A result that is aliased by a non-local name, is the effectively the\n+        // same as returning a non-local name, but this doesn't matter if the\n+        // value is immutable.\n+        return NodeUtil.isImmutableValue(value.getLastChild())\n+            || (locals.apply(value)\n+                && evaluatesToLocalValue(value.getLastChild(), locals));\n+      case Token.COMMA:\n+        return evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.AND:\n+      case Token.OR:\n+        return evaluatesToLocalValue(value.getFirstChild(), locals)\n+           && evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.HOOK:\n+        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n+           && evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.INC:\n+      case Token.DEC:\n+        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n+          return evaluatesToLocalValue(value.getFirstChild(), locals);\n+        } else {\n+          return true;\n+        }\n+      case Token.THIS:\n+        return locals.apply(value);\n+      case Token.NAME:\n+        return isImmutableValue(value) || locals.apply(value);\n+      case Token.GETELEM:\n+      case Token.GETPROP:\n+        // There is no information about the locality of object properties.\n+        return locals.apply(value);\n+      case Token.CALL:\n+        return callHasLocalResult(value)\n+            || isToStringMethodCall(value)\n+            || locals.apply(value);\n+      case Token.NEW:\n+        return newHasLocalResult(value)\n+               || locals.apply(value);\n+      case Token.FUNCTION:\n+      case Token.REGEXP:\n+      case Token.ARRAYLIT:\n+      case Token.OBJECTLIT:\n+        // Literals objects with non-literal children are allowed.\n+        return true;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.NodeUtil;\n+import java.util.function.Predicate;\n+\n+public class BugFix {\n+\n+  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n+    switch (value.getType()) {\n+      case Token.ASSIGN:\n+        // A result that is aliased by a non-local name, is the effectively the\n+        // same as returning a non-local name, but this doesn't matter if the\n+        // value is immutable.\n+        return NodeUtil.isImmutableValue(value.getLastChild())\n+            || (locals.apply(value)\n+                && evaluatesToLocalValue(value.getLastChild(), locals));\n+      case Token.COMMA:\n+        return evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.AND:\n+      case Token.OR:\n+        return evaluatesToLocalValue(value.getFirstChild(), locals)\n+           && evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.HOOK:\n+        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n+           && evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.INC:\n+      case Token.DEC:\n+        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n+          return evaluatesToLocalValue(value.getFirstChild(), locals);\n+        } else {\n+          return true;\n+        }\n+      case Token.THIS:\n+        return locals.apply(value);\n+      case Token.NAME:\n+        return isImmutableValue(value) || locals.apply(value);\n+      case Token.GETELEM:\n+      case Token.GETPROP:\n+        // There is no information about the locality of object properties.\n+        return locals.apply(value);\n+      case Token.CALL:\n+        return callHasLocalResult(value)\n+            || isToStringMethodCall(value)\n+            || locals.apply(value);\n+      case Token.NEW:\n+        return newHasLocalResult(value)\n+               || locals.apply(value);\n+      case Token.FUNCTION:\n+      case Token.REGEXP:\n+      case Token.ARRAYLIT:\n+      case Token.OBJECTLIT:\n+        // Literals objects with non-literal children are allowed.\n+        return true;\n       case Token.IN:\n       case Token.INSTANCEOF:\n-      // Inversion\n-      case Token.NOT:\n-      // delete operator returns a boolean.\n+        // These operators always return a local value\n         return true;\n       default:\n-        return false;\n+        // Other op force a local value:\n+        //  x = '' + g (x is now an local string)\n+        //  x -= g (x is now an local number)\n+        if (isAssignmentOp(value)\n+            || isSimpleOperator(value)\n+            || isImmutableValue(value)) {\n+          return true;\n+        }\n+\n+        throw new IllegalStateException(\n+            \"Unexpected expression node\" + value +\n+            \"\\n parent:\" + value.getParent());\n     }\n   }\n \n-  static boolean isUndefined(Node n) {\n+  private static boolean isSimpleOperator(Node n) {\n     switch (n.getType()) {\n+      case Token.BITAND:\n+      case Token.BITNOT:\n+      case Token.BITOR:\n+      case Token.BITXOR:\n+      case Token.DIV:\n+      case Token.EQ:\n+      case Token.GE:\n+      case Token.GET:\n+      case Token.GT:\n+      case Token.INSTANCEOF:\n+      case Token.LE:\n+      case Token.LSH:\n+      case Token.LT:\n+      case Token.MOD:\n+      case Token.MUL:\n+      case Token.NE:\n+      case Token.NEG:\n+      case Token.NOT:\n+      case Token.POS:\n+      case Token.RSH:\n+      case Token.SUB:\n+      case Token.URSH:\n       case Token.VOID:\n         return true;\n-      case Token.NAME:\n-        return n.getString().equals(\"undefined\");\n+      default:\n+        break;\n     }\n     return false;\n   }\n \n-  static boolean isNull(Node n) {\n-    return n.getType() == Token.NULL;\n+  private static boolean isAssignmentOp(Node n) {\n+    switch (n.getType()) {\n+      case Token.ASSIGN:\n+      case Token.ASSIGN_ADD:\n+      case Token.ASSIGN_BITAND:\n+      case Token.ASSIGN_BITOR:\n+      case Token.ASSIGN_BITXOR:\n+      case Token.ASSIGN_DIV:\n+      case Token.ASSIGN_LSH:\n+      case Token.ASSIGN_MOD:\n+      case Token.ASSIGN_MUL:\n+      case Token.ASSIGN_RSH:\n+      case Token.ASSIGN_SUB:\n+      case Token.ASSIGN_URSH:\n+        return true;\n+      default:\n+        return false;\n+    }\n   }\n \n-  static boolean isNullOrUndefined(Node n) {\n-    return isNull(n) || isUndefined(n);\n+  private static boolean callHasLocalResult(Node n) {\n+    Node callTarget = n.getFirstChild();\n+    if (callTarget.getType() != Token.NAME) {\n+      return true;\n+    }\n+\n+    String name = callTarget.getString();\n+    if (name.equals(\"eval\") || name.equals(\"parseInt\")) {\n+      return true;\n+    } else if (name.equals(\"String\")) {\n+      // Only the String function that takes an object will always produce a\n+      // local value.  This is because once the object is coerced to a string\n+      // the resulting string is always the same,\n+      return n.getChildCount() == 2\n+          && !NodeUtil.mayHaveSideEffects(n.getLastChild(), /* compiler= */ null);\n+    }\n+    return false;\n   }\n \n-  static class MayBeStringResultPredicate implements Predicate<Node> {\n-    public boolean apply(Node n) {\n-      return mayBeStringHelper(n);\n+  private static boolean newHasLocalResult(Node n) {\n+    Node constructor = n.getFirstChild();\n+    if (constructor.getType() != Token.NAME) {\n+      return true;\n     }\n+\n+    String name = constructor.getString();\n+    return name.equals(\"Number\")\n+        || name.equals(\"String\")\n+        || name.equals(\"Boolean\");\n   }\n \n-  static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =\n-      new MayBeStringResultPredicate();\n+  private static boolean isToStringMethodCall(Node n) {\n+    return n.getType() == Token.CALL\n+        && n.getFirstChild().getFirstFirstChild() != null\n+        && \"toString\".equals(n.getFirstChild().getFirstFirstChild().getString());\n+  }\n \n-  /**\n-   * @returns Whether the results is possibly a string.\n-   */\n-  static boolean mayBeString(Node n) {\n-    return mayBeString(n, true);\n+  private static boolean isImmutableValue(Node n) {\n+      return NodeUtil.isLiteralValue(n) || n.getType() == Token.REGEXP;\n   }\n+}\n+      case Token.IN:\n+        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n+        return true;\n+      default:\n+        // Other op force a local value:\n+        //  x = '' + g (x is now an local string)\n+        //  x -= g (x is now an local number)\n+        if (isAssignmentOp(value)\n+            || isSimpleOperator(value)\n+            || isImmutableValue(value)) {\n+          return true;\n+        }\n \n-  static boolean mayBeString(Node n, boolean recurse) {\n-    if (recurse) {\n-      return valueCheck(n, MAY_BE_STRING_PREDICATE);\n-    } else {\n+        throw new IllegalStateException(\n+            \"Unexpected expression node\" + value +\n+            \"\\n parent:\" + value.getParent());\n+    }\n+  }\n       return mayBeStringHelper(n);\n     }\n   }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}