{
    "patch": "protected void dropPhase1Objective() {\n    if (getNumObjectiveFunctions() == 1) {\n        return;\n    }\n\n    List<Integer> columnsToDrop = new ArrayList<Integer>();\n    columnsToDrop.add(0);\n\n    // positive cost non-artificial variables\n    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n        final double entry = tableau.getEntry(0, i);\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            columnsToDrop.add(i);\n        }\n    }\n\n    // non-basic artificial variables\n    for (int i = 0; i < getNumArtificialVariables(); i++) {\n        int col = i + getArtificialVariableOffset();\n        if (getBasicRow(col) == null) {\n            columnsToDrop.add(col);\n        }\n    }\n\n    // Copy matrix without dropped columns\n    double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n    for (int i = 1; i < getHeight(); i++) {\n        int col = 0;\n        for (int j = 0; j < getWidth(); j++) {\n            if (!columnsToDrop.contains(j)) {\n                matrix[i - 1][col++] = tableau.getEntry(i, j);\n            }\n        }\n    }\n\n    // Swap columns for non-basic artificial variables\n    for (int i = 0; i < getNumArtificialVariables(); i++) {\n        int col = i + getArtificialVariableOffset();\n        Integer index = columnsToDrop.indexOf(col);\n        if (getBasicRow(col) == null && index != columnsToDrop.size() - 1) {\n            int swapColumn = columnsToDrop.get(columnsToDrop.size() - 1);\n            MatrixUtils.swapColumns(tableau, col, swapColumn);\n            Collections.swap(columnLabels, col, swapColumn);\n            columnsToDrop.set(index, swapColumn);\n            columnsToDrop.remove(columnsToDrop.size() - 1);\n        }\n    }\n    // Remove dropped artificial variables\n    for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n        columnLabels.remove((int) columnsToDrop.get(i));\n    }\n\n    this.tableau = new Array2DRowRealMatrix(matrix);\n    this.numArtificialVariables = 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\nindex 9a6993a55..913543d7d 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -324,47 +324,61 @@ class SimplexTableau implements Serializable {\n      * Removes the phase 1 objective function, positive cost non-artificial variables,\n      * and the non-basic artificial variables from this tableau.\n      */\n-    protected void dropPhase1Objective() {\n-        if (getNumObjectiveFunctions() == 1) {\n-            return;\n-        }\n+protected void dropPhase1Objective() {\n+    if (getNumObjectiveFunctions() == 1) {\n+        return;\n+    }\n \n-        List<Integer> columnsToDrop = new ArrayList<Integer>();\n-        columnsToDrop.add(0);\n+    List<Integer> columnsToDrop = new ArrayList<Integer>();\n+    columnsToDrop.add(0);\n \n-        // positive cost non-artificial variables\n-        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n-            final double entry = tableau.getEntry(0, i);\n-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n-                columnsToDrop.add(i);\n-            }\n+    // positive cost non-artificial variables\n+    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n+        final double entry = tableau.getEntry(0, i);\n+        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+            columnsToDrop.add(i);\n         }\n+    }\n \n-        // non-basic artificial variables\n-        for (int i = 0; i < getNumArtificialVariables(); i++) {\n-          int col = i + getArtificialVariableOffset();\n-          if (getBasicRow(col) == null) {\n+    // non-basic artificial variables\n+    for (int i = 0; i < getNumArtificialVariables(); i++) {\n+        int col = i + getArtificialVariableOffset();\n+        if (getBasicRow(col) == null) {\n             columnsToDrop.add(col);\n-          }\n         }\n+    }\n \n-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n-        for (int i = 1; i < getHeight(); i++) {\n-          int col = 0;\n-          for (int j = 0; j < getWidth(); j++) {\n+    // Copy matrix without dropped columns\n+    double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n+    for (int i = 1; i < getHeight(); i++) {\n+        int col = 0;\n+        for (int j = 0; j < getWidth(); j++) {\n             if (!columnsToDrop.contains(j)) {\n-              matrix[i - 1][col++] = tableau.getEntry(i, j);\n+                matrix[i - 1][col++] = tableau.getEntry(i, j);\n             }\n-          }\n         }\n+    }\n \n-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n-          columnLabels.remove((int) columnsToDrop.get(i));\n+    // Swap columns for non-basic artificial variables\n+    for (int i = 0; i < getNumArtificialVariables(); i++) {\n+        int col = i + getArtificialVariableOffset();\n+        Integer index = columnsToDrop.indexOf(col);\n+        if (getBasicRow(col) == null && index != columnsToDrop.size() - 1) {\n+            int swapColumn = columnsToDrop.get(columnsToDrop.size() - 1);\n+            MatrixUtils.swapColumns(tableau, col, swapColumn);\n+            Collections.swap(columnLabels, col, swapColumn);\n+            columnsToDrop.set(index, swapColumn);\n+            columnsToDrop.remove(columnsToDrop.size() - 1);\n         }\n-\n-        this.tableau = new Array2DRowRealMatrix(matrix);\n-        this.numArtificialVariables = 0;\n     }\n+    // Remove dropped artificial variables\n+    for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n+        columnLabels.remove((int) columnsToDrop.get(i));\n+    }\n+\n+    this.tableau = new Array2DRowRealMatrix(matrix);\n+    this.numArtificialVariables = 0;\n+}\n \n     /**\n      * @param src the source array",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}