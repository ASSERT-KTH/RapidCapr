{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int initialOffset = getOffset(instantLocal);\n    final long initialInstant = instantLocal - initialOffset;\n\n    // Check if the given instant is within a DST gap\n    if (isInDaylightSavingGap(instantLocal)) {\n        // Find the next transition after the gap ends\n        final long endOfGapInstant = nextTransition(instantLocal);\n        // Find the offset at the end of the gap\n        final int endOfGapOffset = getOffset(endOfGapInstant);\n        // Return the offset at the end of the gap\n        return endOfGapOffset;\n    }\n\n    // Find the previous and next transitions for the given instant\n    final long prevTransitionInstant = previousTransition(initialInstant);\n    final long nextTransitionInstant = nextTransition(initialInstant);\n\n    // Check if the given instant is before the first transition or after the last transition\n    if (prevTransitionInstant == nextTransitionInstant) {\n        return initialOffset;\n    }\n\n    // Check if the given instant is within a DST overlap\n    final int prevOffset = getOffset(prevTransitionInstant);\n    final int nextOffset = getOffset(nextTransitionInstant);\n    if (initialOffset > prevOffset) {\n        if (initialOffset >= nextOffset) {\n            // We are after the overlap, so use the earlier offset\n            return prevOffset;\n        } else {\n            // We are within the overlap, so choose the offset that is closer to the initial offset\n            final int diffPrev = initialOffset - prevOffset;\n            final int diffNext = nextOffset - initialOffset;\n            return diffPrev < diffNext ? prevOffset : nextOffset;\n        }\n    } else {\n        // We are before the overlap, so use the later offset\n        return nextOffset;\n    }\n}\n\nprivate boolean isInDaylightSavingGap(long instantLocal) {\n    final int initialOffset = getOffset(instantLocal);\n    final int prevOffset = getOffset(instantLocal - 1);\n    return initialOffset > prevOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..2df298dd 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,53 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int initialOffset = getOffset(instantLocal);\n+    final long initialInstant = instantLocal - initialOffset;\n+\n+    // Check if the given instant is within a DST gap\n+    if (isInDaylightSavingGap(instantLocal)) {\n+        // Find the next transition after the gap ends\n+        final long endOfGapInstant = nextTransition(instantLocal);\n+        // Find the offset at the end of the gap\n+        final int endOfGapOffset = getOffset(endOfGapInstant);\n+        // Return the offset at the end of the gap\n+        return endOfGapOffset;\n+    }\n+\n+    // Find the previous and next transitions for the given instant\n+    final long prevTransitionInstant = previousTransition(initialInstant);\n+    final long nextTransitionInstant = nextTransition(initialInstant);\n+\n+    // Check if the given instant is before the first transition or after the last transition\n+    if (prevTransitionInstant == nextTransitionInstant) {\n+        return initialOffset;\n+    }\n+\n+    // Check if the given instant is within a DST overlap\n+    final int prevOffset = getOffset(prevTransitionInstant);\n+    final int nextOffset = getOffset(nextTransitionInstant);\n+    if (initialOffset > prevOffset) {\n+        if (initialOffset >= nextOffset) {\n+            // We are after the overlap, so use the earlier offset\n+            return prevOffset;\n+        } else {\n+            // We are within the overlap, so choose the offset that is closer to the initial offset\n+            final int diffPrev = initialOffset - prevOffset;\n+            final int diffNext = nextOffset - initialOffset;\n+            return diffPrev < diffNext ? prevOffset : nextOffset;\n         }\n-        return offsetAdjusted;\n+    } else {\n+        // We are before the overlap, so use the later offset\n+        return nextOffset;\n     }\n+}\n+\n+private boolean isInDaylightSavingGap(long instantLocal) {\n+    final int initialOffset = getOffset(instantLocal);\n+    final int prevOffset = getOffset(instantLocal - 1);\n+    return initialOffset > prevOffset;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "java.lang.IllegalArgumentException: Illegal instant due to time zone offset transition: 2006-06-09T11:00:00.000",
    "test_result": "FAIL"
}