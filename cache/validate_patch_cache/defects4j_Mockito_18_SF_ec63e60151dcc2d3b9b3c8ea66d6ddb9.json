{
    "patch": "public Iterable<BigInteger> getFibonacciSequence(int n) {\n    Iterable<BigInteger> result = new ArrayList<>();\n    if (n <= 0) {\n        return result;\n    } else if (n == 1) {\n        result.add(BigInteger.ZERO);\n        return result;\n    } else if (n == 2) {\n        result.add(BigInteger.ZERO);\n        result.add(BigInteger.ONE);\n        return result;\n    } else {\n        result.add(BigInteger.ZERO);\n        result.add(BigInteger.ONE);\n        BigInteger prev = BigInteger.ZERO;\n        BigInteger curr = BigInteger.ONE;\n        for (int i = 2; i < n; i++) {\n            BigInteger next = prev.add(curr);\n            result.add(next);\n            prev = curr;\n            curr = next;\n        }\n        return result;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..90ef8a33e 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,31 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public Iterable<BigInteger> getFibonacciSequence(int n) {\n+    Iterable<BigInteger> result = new ArrayList<>();\n+    if (n <= 0) {\n+        return result;\n+    } else if (n == 1) {\n+        result.add(BigInteger.ZERO);\n+        return result;\n+    } else if (n == 2) {\n+        result.add(BigInteger.ZERO);\n+        result.add(BigInteger.ONE);\n+        return result;\n+    } else {\n+        result.add(BigInteger.ZERO);\n+        result.add(BigInteger.ONE);\n+        BigInteger prev = BigInteger.ZERO;\n+        BigInteger curr = BigInteger.ONE;\n+        for (int i = 2; i < n; i++) {\n+            BigInteger next = prev.add(curr);\n+            result.add(next);\n+            prev = curr;\n+            curr = next;\n+        }\n+        return result;\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}