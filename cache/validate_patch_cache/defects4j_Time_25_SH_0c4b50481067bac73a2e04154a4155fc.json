{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    if (nextLocal == nextAdjusted) {\n        int diff = offsetAdjusted - offsetLocal;\n        if ((instantLocal - nextLocal) >= diff * DateTimeConstants.MILLIS_PER_HOUR &&\n                (nextLocal - instantAdjusted) >= diff * DateTimeConstants.MILLIS_PER_HOUR) {\n            return offsetLocal;\n        } else {\n            int nextOffset = getOffset(nextLocal - 1);\n            if (offsetLocal > offsetAdjusted && offsetLocal <= nextOffset) {\n                return offsetLocal;\n            }\n            int nextAdjustedOffset = getOffset(nextAdjusted -1);\n            if (offsetAdjusted > offsetLocal && offsetAdjusted <= nextAdjustedOffset) {\n                return offsetLocal;\n            }\n            diff = offsetAdjusted - nextAdjustedOffset;\n            if (diff > 0) {\n                // check if we're in the daylight gap\n                int gap = getOffset(nextLocal -1) - nextAdjustedOffset;\n                if (gap > 0 && (nextLocal - instantAdjusted) < gap * DateTimeConstants.MILLIS_PER_HOUR) {\n                    return offsetLocal;\n                }\n            }\n        }\n    } else {\n        int offsetNext;\n        int diff;\n        if (offsetLocal > offsetAdjusted) {\n            offsetNext = getOffset(nextAdjusted - 1);\n            if (offsetLocal <= offsetNext) {\n                return offsetLocal;\n            }\n            diff = offsetAdjusted - offsetNext;\n        } else {\n            offsetNext = getOffset(nextLocal);\n            if (offsetNext < offsetAdjusted) {\n                return offsetLocal;\n            }\n            diff = offsetNext - offsetLocal;\n        }\n        \n        if (diff > 0) {\n            // check if we're in the daylight gap\n            int gap = getOffset(nextLocal -1) - offsetLocal;\n            if (gap > 0 && (nextLocal - instantAdjusted) < gap * DateTimeConstants.MILLIS_PER_HOUR) {\n                return offsetLocal;\n            }\n        }\n\n        if ((nextLocal - instantAdjusted) < diff * DateTimeConstants.MILLIS_PER_HOUR) {\n            return offsetLocal;\n        }\n        if ((nextAdjusted - instantLocal) < diff * DateTimeConstants.MILLIS_PER_HOUR) {\n            return offsetNext;\n        }\n        if (offsetLocal > offsetAdjusted) {\n            return offsetNext;\n        } else {\n            return offsetLocal;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..db405bad 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,70 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    if (nextLocal == nextAdjusted) {\n+        int diff = offsetAdjusted - offsetLocal;\n+        if ((instantLocal - nextLocal) >= diff * DateTimeConstants.MILLIS_PER_HOUR &&\n+                (nextLocal - instantAdjusted) >= diff * DateTimeConstants.MILLIS_PER_HOUR) {\n+            return offsetLocal;\n+        } else {\n+            int nextOffset = getOffset(nextLocal - 1);\n+            if (offsetLocal > offsetAdjusted && offsetLocal <= nextOffset) {\n+                return offsetLocal;\n+            }\n+            int nextAdjustedOffset = getOffset(nextAdjusted -1);\n+            if (offsetAdjusted > offsetLocal && offsetAdjusted <= nextAdjustedOffset) {\n+                return offsetLocal;\n+            }\n+            diff = offsetAdjusted - nextAdjustedOffset;\n+            if (diff > 0) {\n+                // check if we're in the daylight gap\n+                int gap = getOffset(nextLocal -1) - nextAdjustedOffset;\n+                if (gap > 0 && (nextLocal - instantAdjusted) < gap * DateTimeConstants.MILLIS_PER_HOUR) {\n+                    return offsetLocal;\n+                }\n+            }\n+        }\n+    } else {\n+        int offsetNext;\n+        int diff;\n+        if (offsetLocal > offsetAdjusted) {\n+            offsetNext = getOffset(nextAdjusted - 1);\n+            if (offsetLocal <= offsetNext) {\n+                return offsetLocal;\n+            }\n+            diff = offsetAdjusted - offsetNext;\n+        } else {\n+            offsetNext = getOffset(nextLocal);\n+            if (offsetNext < offsetAdjusted) {\n+                return offsetLocal;\n+            }\n+            diff = offsetNext - offsetLocal;\n+        }\n+        \n+        if (diff > 0) {\n+            // check if we're in the daylight gap\n+            int gap = getOffset(nextLocal -1) - offsetLocal;\n+            if (gap > 0 && (nextLocal - instantAdjusted) < gap * DateTimeConstants.MILLIS_PER_HOUR) {\n+                return offsetLocal;\n+            }\n+        }\n+\n+        if ((nextLocal - instantAdjusted) < diff * DateTimeConstants.MILLIS_PER_HOUR) {\n+            return offsetLocal;\n+        }\n+        if ((nextAdjusted - instantLocal) < diff * DateTimeConstants.MILLIS_PER_HOUR) {\n+            return offsetNext;\n+        }\n+        if (offsetLocal > offsetAdjusted) {\n+            return offsetNext;\n+        } else {\n+            return offsetLocal;\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}