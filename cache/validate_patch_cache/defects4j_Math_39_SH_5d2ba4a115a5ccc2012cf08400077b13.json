{
    "patch": "    stepStart = acceptStep(interpolator, y, yDotTmp, t);\n    System.arraycopy(y, 0, yTmp, 0, y.length);\n    final double nextStepStart = stepStart + stepSize;\n    if ((forward && nextStepStart >= t && nextStepStart - t > 1e-12) ||\n        (!forward && nextStepStart <= t && t - nextStepStart > 1e-12)) {\n        stepSize = t - stepStart;\n    }\n\n    if (!isLastStep) {\n        // prepare next step\n        interpolator.storeTime(stepStart);\n\n        if (fsal) {\n            System.arraycopy(yDotTmp, 0, yDotK[0], 0, y0.length);\n        }\n\n        final double factor =\n            FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));\n        final double scaledH = stepSize * factor;\n        final double filteredNextStepStart = stepStart + scaledH;\n        boolean nextIsLast;\n        if (forward) {\n            nextIsLast = filteredNextStepStart >= t || (filteredNextStepStart - t > -1e-12 && error <= 1d);\n        } else {\n            nextIsLast = filteredNextStepStart <= t || (t - filteredNextStepStart > -1e-12 && error <= 1d);\n        }\n        final double nextStepSize = nextIsLast ? t - stepStart : filterStep(scaledH, forward, false);\n        final double filteredNextStepSize;\n        if (filteredNextStepStart + nextStepSize > t && forward) {\n            filteredNextStepSize = t - filteredNextStepStart;\n        } else if (filteredNextStepStart + nextStepSize < t && !forward) {\n            filteredNextStepSize = t - filteredNextStepStart;\n        } else {\n            filteredNextStepSize = nextStepSize;\n        }\n        hNew = useFsal ? nextStepSize : filteredNextStepSize;\n    }\n} while (!isLastStep);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 13ced27d7..8ddafb2ca 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -247,6 +247,44 @@ public abstract class EmbeddedRungeKuttaIntegrator\n         }\n \n         stepSize = hNew;\n+    stepStart = acceptStep(interpolator, y, yDotTmp, t);\n+    System.arraycopy(y, 0, yTmp, 0, y.length);\n+    final double nextStepStart = stepStart + stepSize;\n+    if ((forward && nextStepStart >= t && nextStepStart - t > 1e-12) ||\n+        (!forward && nextStepStart <= t && t - nextStepStart > 1e-12)) {\n+        stepSize = t - stepStart;\n+    }\n+\n+    if (!isLastStep) {\n+        // prepare next step\n+        interpolator.storeTime(stepStart);\n+\n+        if (fsal) {\n+            System.arraycopy(yDotTmp, 0, yDotK[0], 0, y0.length);\n+        }\n+\n+        final double factor =\n+            FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));\n+        final double scaledH = stepSize * factor;\n+        final double filteredNextStepStart = stepStart + scaledH;\n+        boolean nextIsLast;\n+        if (forward) {\n+            nextIsLast = filteredNextStepStart >= t || (filteredNextStepStart - t > -1e-12 && error <= 1d);\n+        } else {\n+            nextIsLast = filteredNextStepStart <= t || (t - filteredNextStepStart > -1e-12 && error <= 1d);\n+        }\n+        final double nextStepSize = nextIsLast ? t - stepStart : filterStep(scaledH, forward, false);\n+        final double filteredNextStepSize;\n+        if (filteredNextStepStart + nextStepSize > t && forward) {\n+            filteredNextStepSize = t - filteredNextStepStart;\n+        } else if (filteredNextStepStart + nextStepSize < t && !forward) {\n+            filteredNextStepSize = t - filteredNextStepStart;\n+        } else {\n+            filteredNextStepSize = nextStepSize;\n+        }\n+        hNew = useFsal ? nextStepSize : filteredNextStepSize;\n+    }\n+} while (!isLastStep);\n \n         // next stages\n         for (int k = 1; k < stages; ++k) {",
    "result_reason": "error: while expected",
    "test_result": "ERROR"
}