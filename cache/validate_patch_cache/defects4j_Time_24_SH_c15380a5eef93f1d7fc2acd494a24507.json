{
    "patch": " try {\n      for (int i = 0; i < count; i++) {\n          long newMillis = savedFields[i].set(millis, resetFields);\n          for (int j = i + 1; j < count; j++) {\n              int index1 = savedFields[i].iField.getType();\n              int index2 = savedFields[j].iField.getType();                    \n              if (index1 == index2) {\n                  int value1 = savedFields[i].iValue;\n                  int value2 = savedFields[j].iValue;\n                  if (value1 != value2) {\n                      throw new IllegalArgumentException(\"Conflict found: \" + \n                           savedFields[i].iField.getName() + \" \" + value1 + \" and \" + savedFields[j].iField.getName() + \" \" + value2);\n                  }\n              }\n          }\n          // Check the range of millis\n          if (newMillis != millis) {\n              if ((newMillis ^ millis) < 0) {\n                  throw new IllegalArgumentException(\"The instant is too \" + (newMillis < millis ? \"early\" : \"late\"));\n              }\n              millis = newMillis;\n          } else if (i == count - 1) { \n              // The last field has been reached and no changes were made to millis.            \n              if ((millis ^ newMillis) < 0) {\n                  throw new IllegalArgumentException(\"The instant is too \" + (millis < 0 ? \"early\" : \"late\"));\n              }\n          }\n      }\n  } catch (IllegalFieldValueException e) {\n      if (text != null) {\n          e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n      }\n      throw e;\n  }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..7134bf13 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,40 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+ try {\n+      for (int i = 0; i < count; i++) {\n+          long newMillis = savedFields[i].set(millis, resetFields);\n+          for (int j = i + 1; j < count; j++) {\n+              int index1 = savedFields[i].iField.getType();\n+              int index2 = savedFields[j].iField.getType();                    \n+              if (index1 == index2) {\n+                  int value1 = savedFields[i].iValue;\n+                  int value2 = savedFields[j].iValue;\n+                  if (value1 != value2) {\n+                      throw new IllegalArgumentException(\"Conflict found: \" + \n+                           savedFields[i].iField.getName() + \" \" + value1 + \" and \" + savedFields[j].iField.getName() + \" \" + value2);\n+                  }\n+              }\n+          }\n+          // Check the range of millis\n+          if (newMillis != millis) {\n+              if ((newMillis ^ millis) < 0) {\n+                  throw new IllegalArgumentException(\"The instant is too \" + (newMillis < millis ? \"early\" : \"late\"));\n+              }\n+              millis = newMillis;\n+          } else if (i == count - 1) { \n+              // The last field has been reached and no changes were made to millis.            \n+              if ((millis ^ newMillis) < 0) {\n+                  throw new IllegalArgumentException(\"The instant is too \" + (millis < 0 ? \"early\" : \"late\"));\n+              }\n+          }\n+      }\n+  } catch (IllegalFieldValueException e) {\n+      if (text != null) {\n+          e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+      }\n+      throw e;\n+  }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}