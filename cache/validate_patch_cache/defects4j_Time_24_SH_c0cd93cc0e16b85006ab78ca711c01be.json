{
    "patch": "                // check for datetime field overflow\n                if (i == count - 1) {\n                    if ((millis / 1000) * 1000 != millis) {\n                        StringBuilder stringBuilder = new StringBuilder();\n                        stringBuilder.append(\"Invalid millis value: \");\n                        stringBuilder.append(millis);\n                        throw new IllegalArgumentException(stringBuilder.toString());\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..a98c185d 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,14 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                // check for datetime field overflow\n+                if (i == count - 1) {\n+                    if ((millis / 1000) * 1000 != millis) {\n+                        StringBuilder stringBuilder = new StringBuilder();\n+                        stringBuilder.append(\"Invalid millis value: \");\n+                        stringBuilder.append(millis);\n+                        throw new IllegalArgumentException(stringBuilder.toString());\n+                    }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}