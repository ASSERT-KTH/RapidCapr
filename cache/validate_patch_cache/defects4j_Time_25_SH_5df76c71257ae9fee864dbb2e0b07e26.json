{
    "patch": "                // adjust the instant again with the new offset\n                final long instantAdjusted2 = instantLocal - offsetAdjusted;\n                final int offsetAdjusted2 = getOffset(instantAdjusted2);\n                if (offsetAdjusted != offsetAdjusted2) {\n                    return offsetLocal;\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..e44baefb 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,12 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // adjust the instant again with the new offset\n+                final long instantAdjusted2 = instantLocal - offsetAdjusted;\n+                final int offsetAdjusted2 = getOffset(instantAdjusted2);\n+                if (offsetAdjusted != offsetAdjusted2) {\n+                    return offsetLocal;\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}