{
    "patch": "            // Find the first index of the original series corresponding to\n            // the start time in the new series.\n            int startIndex = findStartIndex(start);\n            for (int i = startIndex; i < this.data.size() && i <= end; i++) {\n                TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(i);\n                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n                try {\n                    // If the new series already contains an observation for the\n                    // time period, remove it first before adding the new observation.\n                    int indexToRemove = copy.getIndex(clone.getPeriod());\n                    if (indexToRemove >= 0) {\n                        copy.delete(indexToRemove, indexToRemove);\n                    }\n                    copy.add(clone);\n                } catch (SeriesException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return copy;\n    }\n\n    /**\n     * Find the index of the first observation in the original series that\n     * corresponds to the start time in the new series.\n     * @param start the start time in the new series\n     * @return the index of the first observation in the original series\n     *         corresponding to the start time in the new series\n     */\n    private int findStartIndex(int start) {\n        int startIndex = 0;\n        for (int i = 0; i < this.data.size(); i++) {\n            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(i);\n            if (item.getPeriod().getFirstMillisecond() >= start) {\n                startIndex = i;\n                break;\n            }\n        }\n        return startIndex;",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..cf5df8d 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1045,31 +1045,45 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n      *\n      * @throws CloneNotSupportedException if there is a cloning problem.\n      */\n-    public TimeSeries createCopy(int start, int end)\n-            throws CloneNotSupportedException {\n-        if (start < 0) {\n-            throw new IllegalArgumentException(\"Requires start >= 0.\");\n-        }\n-        if (end < start) {\n-            throw new IllegalArgumentException(\"Requires start <= end.\");\n-        }\n-        TimeSeries copy = (TimeSeries) super.clone();\n-        copy.data = new java.util.ArrayList();\n-        if (this.data.size() > 0) {\n-            for (int index = start; index <= end; index++) {\n-                TimeSeriesDataItem item\n-                        = (TimeSeriesDataItem) this.data.get(index);\n-                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n-                try {\n-                    copy.add(clone);\n-                }\n-                catch (SeriesException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        }\n-        return copy;\n-    }\n+            // Find the first index of the original series corresponding to\n+            // the start time in the new series.\n+            int startIndex = findStartIndex(start);\n+            for (int i = startIndex; i < this.data.size() && i <= end; i++) {\n+                TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(i);\n+                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+                try {\n+                    // If the new series already contains an observation for the\n+                    // time period, remove it first before adding the new observation.\n+                    int indexToRemove = copy.getIndex(clone.getPeriod());\n+                    if (indexToRemove >= 0) {\n+                        copy.delete(indexToRemove, indexToRemove);\n+                    }\n+                    copy.add(clone);\n+                } catch (SeriesException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        }\n+        return copy;\n+    }\n+\n+    /**\n+     * Find the index of the first observation in the original series that\n+     * corresponds to the start time in the new series.\n+     * @param start the start time in the new series\n+     * @return the index of the first observation in the original series\n+     *         corresponding to the start time in the new series\n+     */\n+    private int findStartIndex(int start) {\n+        int startIndex = 0;\n+        for (int i = 0; i < this.data.size(); i++) {\n+            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(i);\n+            if (item.getPeriod().getFirstMillisecond() >= start) {\n+                startIndex = i;\n+                break;\n+            }\n+        }\n+        return startIndex;\n \n     /**\n      * Creates a new timeseries by copying a subset of the data in this time",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}