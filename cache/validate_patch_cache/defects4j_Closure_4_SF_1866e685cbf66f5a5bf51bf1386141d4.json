{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  if (detectImplicitPrototypeCycle()) {\n    handleTypeCycle(t);\n  }\n  \n  boolean resolved = resolveViaRegistry(t, enclosing);\n  if (resolved) {\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  } else {\n    // record the start time for debugging purposes\n    long startTime = System.nanoTime();\n    JSType resolvedType = tryResolveViaProperties(t, enclosing);\n    long elapsedTime = System.nanoTime() - startTime;\n    // print the elapsed time for debugging purposes\n    System.out.println(\"Time to resolve via properties: \" + elapsedTime + \" ns\");\n\n    if (resolvedType != null) {\n      if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n      }\n      return resolvedType;\n    } else {\n      super.resolveInternal(t, enclosing);\n      if (isResolved()) {\n        finishPropertyContinuations();\n        return registry.isLastGeneration() ? getReferencedType() : this;\n      } else {\n        return this;\n      }\n    }\n  }\n}\n\nprivate JSType tryResolveViaProperties(ErrorReporter t, StaticScope<JSType> enclosing) {\n  // Add a guard to make sure we don't get stuck in an infinite loop\n  if (propertyResolutionsInProgress.contains(this)) {\n    return null;\n  }\n  propertyResolutionsInProgress.add(this);\n\n  resolveViaProperties(t, enclosing);\n\n  boolean resolved = resolveViaRegistry(t, enclosing);\n  JSType resolvedType = resolved ? registry.getReferencedType() : null;\n\n  if (resolvedType != null) {\n    resolvedType.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n  }\n\n  // remove the guard\n  propertyResolutionsInProgress.remove(this);\n\n  return resolvedType;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..e414a938 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,64 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    if (resolved) {\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  if (detectImplicitPrototypeCycle()) {\n+    handleTypeCycle(t);\n+  }\n+  \n+  boolean resolved = resolveViaRegistry(t, enclosing);\n+  if (resolved) {\n+    super.resolveInternal(t, enclosing);\n+    finishPropertyContinuations();\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+  } else {\n+    // record the start time for debugging purposes\n+    long startTime = System.nanoTime();\n+    JSType resolvedType = tryResolveViaProperties(t, enclosing);\n+    long elapsedTime = System.nanoTime() - startTime;\n+    // print the elapsed time for debugging purposes\n+    System.out.println(\"Time to resolve via properties: \" + elapsedTime + \" ns\");\n+\n+    if (resolvedType != null) {\n+      if (detectImplicitPrototypeCycle()) {\n+        handleTypeCycle(t);\n+      }\n+      return resolvedType;\n+    } else {\n       super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+      if (isResolved()) {\n+        finishPropertyContinuations();\n+        return registry.isLastGeneration() ? getReferencedType() : this;\n+      } else {\n+        return this;\n+      }\n     }\n+  }\n+}\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+private JSType tryResolveViaProperties(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  // Add a guard to make sure we don't get stuck in an infinite loop\n+  if (propertyResolutionsInProgress.contains(this)) {\n+    return null;\n+  }\n+  propertyResolutionsInProgress.add(this);\n \n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+  resolveViaProperties(t, enclosing);\n+\n+  boolean resolved = resolveViaRegistry(t, enclosing);\n+  JSType resolvedType = resolved ? registry.getReferencedType() : null;\n+\n+  if (resolvedType != null) {\n+    resolvedType.resolveInternal(t, enclosing);\n+    finishPropertyContinuations();\n   }\n \n+  // remove the guard\n+  propertyResolutionsInProgress.remove(this);\n+\n+  return resolvedType;\n+}\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}