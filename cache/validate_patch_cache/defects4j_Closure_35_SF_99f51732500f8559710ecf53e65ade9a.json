{
    "patch": "private void inferPropertiesFromRecordType(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType() &&\n        objType != null) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!objType.hasProperty(prop)\n              || objType.isPropertyTypeInferred(prop)\n              || !objType.getPropertyType(prop).isSubtypeOf(propType)) {\n            typeToInfer = getNativeType(VOID_TYPE)\n                .getLeastSupertype(propType);\n          }\n          objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }\n\n  /** If we access a property of a symbol, then that symbol is not\n   * null or undefined. */\n  private FlowScope dereferencePointer(\n      Node node, FlowScope scope) {\n    if (node.isQualifiedName()) {\n      ObjectType objectType =\n          ObjectType.cast(getJSType(node)\n              .restrictByNotNullOrUndefined());\n      if (objectType != null) {\n        scope =\n            narrowScope(scope, node,\n                objectType.withProperty(\n                    UNKNOWN_PROPERTY,\n                    getNativeType(UNKNOWN_TYPE)));\n      }\n    }\n    return scope;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..1bca5784 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,6 +1111,7 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n+private void inferPropertiesFromRecordType(\n       JSType type, JSType constraint) {\n     if (type == null || constraint == null) {\n       return;\n@@ -1118,37 +1119,44 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+    if (constraintObj != null && constraintObj.isRecordType() &&\n+        objType != null) {\n+      for (String prop : constraintObj.getOwnPropertyNames()) {\n+        JSType propType = constraintObj.getPropertyType(prop);\n+        if (!objType.isPropertyTypeDeclared(prop)) {\n+          JSType typeToInfer = propType;\n+          if (!objType.hasProperty(prop)\n+              || objType.isPropertyTypeInferred(prop)\n+              || !objType.getPropertyType(prop).isSubtypeOf(propType)) {\n+            typeToInfer = getNativeType(VOID_TYPE)\n+                .getLeastSupertype(propType);\n           }\n+          objType.defineInferredProperty(prop, typeToInfer, null);\n         }\n       }\n     }\n   }\n \n-  /**\n-   * If we access a property of a symbol, then that symbol is not\n-   * null or undefined.\n-   */\n-  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n-    if (n.isQualifiedName()) {\n-      JSType type = getJSType(n);\n-      JSType narrowed = type.restrictByNotNullOrUndefined();\n-      if (type != narrowed) {\n-        scope = narrowScope(scope, n, narrowed);\n+  /** If we access a property of a symbol, then that symbol is not\n+   * null or undefined. */\n+  private FlowScope dereferencePointer(\n+      Node node, FlowScope scope) {\n+    if (node.isQualifiedName()) {\n+      ObjectType objectType =\n+          ObjectType.cast(getJSType(node)\n+              .restrictByNotNullOrUndefined());\n+      if (objectType != null) {\n+        scope =\n+            narrowScope(scope, node,\n+                objectType.withProperty(\n+                    UNKNOWN_PROPERTY,\n+                    getNativeType(UNKNOWN_TYPE)));\n       }\n     }\n     return scope;\n+    }\n+    return scope;\n   }\n \n   private JSType getPropertyType(JSType objType, String propName,",
    "result_reason": "error: modifier private not allowed here",
    "test_result": "ERROR"
}