{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) < 0) {\n                // accept the expanded simplex\n                simplex = computeShrunkenSimplex(reflectedSimplex, comparator);\n            } else {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n\n            return;\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            simplex = computeShrunkenSimplex(original, comparator);\n        } else if (isContractionWithinTolerance(original, contracted)) {\n            // accept the simplex within contraction tolerance\n            simplex = computeShrunkenSimplex(original, comparator);\n            return;\n        }\n    }\n}\n\nprivate RealPointValuePair[] computeShrunkenSimplex(RealPointValuePair[] original,\n                                                     Comparator<RealPointValuePair> comparator) {\n    final RealPointValuePair best = original[0];\n    final int n = original.length;\n\n    final RealPointValuePair[] reflectedSimplex = new RealPointValuePair[n];\n    reflectedSimplex[0] = best;\n    for (int i = 1; i < n; i++) {\n        final double[] reflectedPoint = contract(original[i].getPoint(), best.getPoint(), sigma);\n        reflectedSimplex[i] = new RealPointValuePair(reflectedPoint,\n                getCachedObjectiveFunction().value(reflectedPoint),\n                false);\n    }\n\n    Arrays.sort(reflectedSimplex, comparator);\n\n    return reflectedSimplex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..bce76cc30 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,66 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n+    while (true) {\n+        incrementIterationsCounter();\n+\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n+\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) < 0) {\n+                // accept the expanded simplex\n+                simplex = computeShrunkenSimplex(reflectedSimplex, comparator);\n+            } else {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n-            }\n+            return;\n+        }\n \n+        // compute the contracted simplex\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+        if (comparator.compare(contracted, best) < 0) {\n+            // accept the contracted simplex\n+            simplex = computeShrunkenSimplex(original, comparator);\n+        } else if (isContractionWithinTolerance(original, contracted)) {\n+            // accept the simplex within contraction tolerance\n+            simplex = computeShrunkenSimplex(original, comparator);\n+            return;\n         }\n+    }\n+}\n \n+private RealPointValuePair[] computeShrunkenSimplex(RealPointValuePair[] original,\n+                                                     Comparator<RealPointValuePair> comparator) {\n+    final RealPointValuePair best = original[0];\n+    final int n = original.length;\n+\n+    final RealPointValuePair[] reflectedSimplex = new RealPointValuePair[n];\n+    reflectedSimplex[0] = best;\n+    for (int i = 1; i < n; i++) {\n+        final double[] reflectedPoint = contract(original[i].getPoint(), best.getPoint(), sigma);\n+        reflectedSimplex[i] = new RealPointValuePair(reflectedPoint,\n+                getCachedObjectiveFunction().value(reflectedPoint),\n+                false);\n     }\n \n+    Arrays.sort(reflectedSimplex, comparator);\n+\n+    return reflectedSimplex;\n+}\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}