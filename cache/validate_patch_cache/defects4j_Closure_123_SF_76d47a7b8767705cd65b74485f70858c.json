{
    "patch": "public static void printInOperatorInForLoop() {\n    boolean c = true;\n    Object[] d = {1, 2, 3};\n    String expected = \"for(a=c?0:(0 in d);;)foo()\";\n    StringBuilder actualBuilder = new StringBuilder();\n    for (int a = c ? 0 : 0; ; foo()) {\n        actualBuilder.append(\"for(a=c?\")\n                .append(a).append(\":\")\n                .append(\"(0 in d)\");\n        actualBuilder.append(\";)foo()\");\n        break;\n    }\n    String actual = actualBuilder.toString().replaceAll(\"\\\\s+\", \"\");\n    assertEquals(expected, actual);\n}\n\n// helper method\npublic static void foo() {\n    // does nothing\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..e52afb98 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,26 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static void printInOperatorInForLoop() {\n+    boolean c = true;\n+    Object[] d = {1, 2, 3};\n+    String expected = \"for(a=c?0:(0 in d);;)foo()\";\n+    StringBuilder actualBuilder = new StringBuilder();\n+    for (int a = c ? 0 : 0; ; foo()) {\n+        actualBuilder.append(\"for(a=c?\")\n+                .append(a).append(\":\")\n+                .append(\"(0 in d)\");\n+        actualBuilder.append(\";)foo()\");\n+        break;\n+    }\n+    String actual = actualBuilder.toString().replaceAll(\"\\\\s+\", \"\");\n+    assertEquals(expected, actual);\n+}\n+\n+// helper method\n+public static void foo() {\n+    // does nothing\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}