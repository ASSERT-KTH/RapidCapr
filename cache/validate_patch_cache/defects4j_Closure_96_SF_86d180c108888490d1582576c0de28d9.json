{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n                                FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n\n  if (functionType.hasRestFormals()) {\n    // Get the number of fixed parameters.\n    int numFixedParams = functionType.getParametersWithoutRest().size();\n    for (int i = 0; i < numFixedParams && arguments.hasNext(); i++) {\n      Node argument = arguments.next();\n      Node parameter = parameters.next();\n      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n              getJSType(parameter), call, i + 1);\n    }\n\n    if (arguments.hasNext()) {\n      // We have at least one var_args argument.\n      Node restFormalNode = parameters.next();\n      String restFormalType = getJSType(restFormalNode).toString();\n      do {\n        Node argument = arguments.next();\n        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n                restFormalType, call, numFixedParams++);\n      } while (arguments.hasNext());\n    }\n  } else {\n    // We handle the case without rest formals.\n    for (int i = 0; parameters.hasNext() && arguments.hasNext(); i++) {\n      Node argument = arguments.next();\n      Node parameter = parameters.next();\n      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n              getJSType(parameter), call, i + 1);\n    }\n  }\n\n  // Check if the argument count matches.\n  if (numArgs < minArgs || numArgs > maxArgs) {\n    StringBuilder sb = new StringBuilder();\n    if (maxArgs >= 0) {\n      sb.append(\"between \").append(minArgs).append(\" and \").append(maxArgs);\n    } else {\n      sb.append(\"at least \").append(minArgs);\n    }\n    String msg = \"Wrong number of arguments for \" + nodeToString(call.getFirstChild()) + \". \"\n            + \"Expected \" + sb.toString() + \", got \" + numArgs + \".\";\n    report(t, call, msg);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..82bb0714 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,59 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+private void visitParameterList(NodeTraversal t, Node call,\n+                                FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  int numArgs = call.getChildCount() - 1;\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+\n+  if (functionType.hasRestFormals()) {\n+    // Get the number of fixed parameters.\n+    int numFixedParams = functionType.getParametersWithoutRest().size();\n+    for (int i = 0; i < numFixedParams && arguments.hasNext(); i++) {\n+      Node argument = arguments.next();\n+      Node parameter = parameters.next();\n+      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+              getJSType(parameter), call, i + 1);\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    if (arguments.hasNext()) {\n+      // We have at least one var_args argument.\n+      Node restFormalNode = parameters.next();\n+      String restFormalType = getJSType(restFormalNode).toString();\n+      do {\n+        Node argument = arguments.next();\n+        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+                restFormalType, call, numFixedParams++);\n+      } while (arguments.hasNext());\n     }\n+  } else {\n+    // We handle the case without rest formals.\n+    for (int i = 0; parameters.hasNext() && arguments.hasNext(); i++) {\n+      Node argument = arguments.next();\n+      Node parameter = parameters.next();\n+      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+              getJSType(parameter), call, i + 1);\n+    }\n+  }\n+\n+  // Check if the argument count matches.\n+  if (numArgs < minArgs || numArgs > maxArgs) {\n+    StringBuilder sb = new StringBuilder();\n+    if (maxArgs >= 0) {\n+      sb.append(\"between \").append(minArgs).append(\" and \").append(maxArgs);\n+    } else {\n+      sb.append(\"at least \").append(minArgs);\n+    }\n+    String msg = \"Wrong number of arguments for \" + nodeToString(call.getFirstChild()) + \". \"\n+            + \"Expected \" + sb.toString() + \", got \" + numArgs + \".\";\n+    report(t, call, msg);\n   }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}