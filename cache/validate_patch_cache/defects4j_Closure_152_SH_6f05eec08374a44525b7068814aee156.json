{
    "patch": "    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (resolvedTypeOfThis == null) {\n      resolvedTypeOfThis = registry.getNativeType(JSTypeNative.NO_TYPE);\n      t.report(JSError.make(n.getSourceFileName(), n.getLineno(), AbstractTypedAstBuilder.TYPE_PARSE_ERROR));\n    } else if (resolvedTypeOfThis.isUnknownType() || resolvedTypeOfThis instanceof AllType) {\n      resolvedTypeOfThis = registry.getNativeType(JSTypeNative.TOP_OBJECT_TYPE);\n    } else if (!(resolvedTypeOfThis instanceof ObjectType)) {\n      t.report(JSError.make(n.getSourceFileName(), n.getLineno(), AbstractTypedAstBuilder.TYPE_PARSE_ERROR));\n      resolvedTypeOfThis = registry.getNativeType(JSTypeNative.TOP_OBJECT_TYPE);\n    }\n    typeOfThis = (ObjectType) resolvedTypeOfThis;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..30ed756b 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,17 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n+    if (resolvedTypeOfThis == null) {\n+      resolvedTypeOfThis = registry.getNativeType(JSTypeNative.NO_TYPE);\n+      t.report(JSError.make(n.getSourceFileName(), n.getLineno(), AbstractTypedAstBuilder.TYPE_PARSE_ERROR));\n+    } else if (resolvedTypeOfThis.isUnknownType() || resolvedTypeOfThis instanceof AllType) {\n+      resolvedTypeOfThis = registry.getNativeType(JSTypeNative.TOP_OBJECT_TYPE);\n+    } else if (!(resolvedTypeOfThis instanceof ObjectType)) {\n+      t.report(JSError.make(n.getSourceFileName(), n.getLineno(), AbstractTypedAstBuilder.TYPE_PARSE_ERROR));\n+      resolvedTypeOfThis = registry.getNativeType(JSTypeNative.TOP_OBJECT_TYPE);\n+    }\n+    typeOfThis = (ObjectType) resolvedTypeOfThis;\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}