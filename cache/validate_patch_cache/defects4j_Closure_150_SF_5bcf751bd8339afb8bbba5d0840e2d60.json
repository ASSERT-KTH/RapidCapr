{
    "patch": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP) {\n        if (parent.getType() == Token.FUNCTION) {\n          handleFunctionInputs(parent);\n          return;\n        }\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME || parent.getType() == Token.FUNCTION) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..2ea62b19 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1443,15 +1443,17 @@ final class TypedScopeCreator implements ScopeCreator {\n     @Override public void visit(NodeTraversal t, Node n, Node parent) {\n       if (n == scope.getRootNode()) return;\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n+      if (n.getType() == Token.LP) {\n+        if (parent.getType() == Token.FUNCTION) {\n+          handleFunctionInputs(parent);\n+          return;\n+        }\n       }\n \n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+          if (parent.getType() == Token.NAME || parent.getType() == Token.FUNCTION) {\n             return;\n           }\n           defineDeclaredFunction(n, parent);",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}