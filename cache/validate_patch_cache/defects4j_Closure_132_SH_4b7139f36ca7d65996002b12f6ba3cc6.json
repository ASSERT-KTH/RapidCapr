{
    "patch": "              // if LHS has side effects, don't proceed [since the optimization\n              // evaluates LHS before cond]\n              // NOTE - there are some circumstances where we can\n              // proceed even if there are side effects...\n              Node lhs = thenOp.removeFirstChild();\n              \n              if (!mayEffectMutableState(lhs)) {\n              \n                n.removeChild(cond);\n                Node assignName = thenOp.removeFirstChild();\n                Node thenExpr = thenOp.getFirstChild();\n                Node elseExpr = elseOp.getLastChild();\n                elseOp.removeChild(elseExpr);\n\n                Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n                Node assign = new Node(thenOp.getType(), assignName, hookNode)\n                                  .srcref(thenOp);\n                Node expr = NodeUtil.newExpr(assign);\n                parent.replaceChild(n, expr);\n                reportCodeChange();\n\n                return expr;\n              }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..10b0dfe0 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,29 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              // if LHS has side effects, don't proceed [since the optimization\n+              // evaluates LHS before cond]\n+              // NOTE - there are some circumstances where we can\n+              // proceed even if there are side effects...\n+              Node lhs = thenOp.removeFirstChild();\n+              \n+              if (!mayEffectMutableState(lhs)) {\n+              \n+                n.removeChild(cond);\n+                Node assignName = thenOp.removeFirstChild();\n+                Node thenExpr = thenOp.getFirstChild();\n+                Node elseExpr = elseOp.getLastChild();\n+                elseOp.removeChild(elseExpr);\n+\n+                Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n+                Node assign = new Node(thenOp.getType(), assignName, hookNode)\n+                                  .srcref(thenOp);\n+                Node expr = NodeUtil.newExpr(assign);\n+                parent.replaceChild(n, expr);\n+                reportCodeChange();\n+\n+                return expr;\n+              }\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}