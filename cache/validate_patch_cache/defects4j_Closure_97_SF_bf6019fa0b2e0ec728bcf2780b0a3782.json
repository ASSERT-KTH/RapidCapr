{
    "patch": "private Node tryFoldShift(Node n, Node left, Node right) {\n  if (left.isNumber() && right.isNumber()) {\n    double lval = left.getDouble();\n    double rval = right.getDouble();\n    boolean isURSh = n.getType() == Token.URSH;\n    boolean isSmi = NodeUtil.isNumericSmi(left) && NodeUtil.isNumericSmi(right);\n\n    // Check ranges. Shift amounts must be between 0 and 31, inclusive.\n    // NOTE: An unsigned right shift greater than 31 is automatically zero.\n    if (rval < 0 || (rval >= 32 && !isURSh)) {\n      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n      return n;\n    }\n\n    // Check that the left operand is an integer and whithin a valid (safe) range.\n    if (isURSh && lval < 0) {\n      // Since there is no \">>>=\" operator in JavaScript, the parser\n      // changes all unsigned right shifts into signed right shifts\n      // if the number being shifted appears to be a signed integer.\n      error(SIGNED_RIGHT_SHIFT, n);\n      return n;\n    }\n    if (Math.abs(lval) > MAX_SAFE_INTEGER) {\n      error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n      return n;\n    }\n\n    // Do smis first for performance.\n    if (isSmi) {\n      long smiResult;\n      if (n.getType() == Token.LSH) {\n        smiResult = NodeUtil.toInt32(left.getLong() << rval);\n      } else if (n.getType() == Token.RSH) {\n        smiResult = NodeUtil.toInt32(left.getLong() >> rval);\n      } else if (n.getType() == Token.URSH) {\n        smiResult = NodeUtil.toUint32(left.getLong() >>> rval);\n      } else {\n        throw new AssertionError(\"Unknown shift operator: \" + n);\n      }\n      Node foldedNode = Node.newNumber(smiResult);\n      n.replaceWith(foldedNode);\n      reportCodeChange();\n      return foldedNode;\n    } else {\n      double result;\n      if (n.getType() == Token.LSH) {\n        result = lval * Math.pow(2, rval);\n      } else if (n.getType() == Token.RSH) {\n        result = Math.floor(lval / Math.pow(2, rval));\n      } else {\n        long uint32 = NodeUtil.toUint32(lval);\n        double pow = Math.pow(2, rval);\n        result = NodeUtil.isNegative(left)\n            ? Math.floor(uint32 / pow)\n            : NodeUtil.toUint32(uint32 / pow);\n      }\n      Node foldedNode = simplifyNumber(result);\n      if (foldedNode != null) {\n        n.replaceWith(foldedNode);\n        reportCodeChange();\n        return foldedNode;\n      }\n      Node newNumber = Node.newNumber(result);\n      n.replaceWith(newNumber);\n      reportCodeChange();\n      return newNumber;\n    }\n  }\n  return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex d6c194a3..5a7409db 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -649,68 +649,76 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n   /**\n    * Try to fold shift operations\n    */\n-  private Node tryFoldShift(Node n, Node left, Node right) {\n-    if (left.getType() == Token.NUMBER &&\n-        right.getType() == Token.NUMBER) {\n-\n-      double result;\n-      double lval = left.getDouble();\n-      double rval = right.getDouble();\n-\n-      // check ranges.  We do not do anything that would clip the double to\n-      // a 32-bit range, since the user likely does not intend that.\n-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n-        error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n-        return n;\n-      }\n+private Node tryFoldShift(Node n, Node left, Node right) {\n+  if (left.isNumber() && right.isNumber()) {\n+    double lval = left.getDouble();\n+    double rval = right.getDouble();\n+    boolean isURSh = n.getType() == Token.URSH;\n+    boolean isSmi = NodeUtil.isNumericSmi(left) && NodeUtil.isNumericSmi(right);\n+\n+    // Check ranges. Shift amounts must be between 0 and 31, inclusive.\n+    // NOTE: An unsigned right shift greater than 31 is automatically zero.\n+    if (rval < 0 || (rval >= 32 && !isURSh)) {\n+      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n+      return n;\n+    }\n \n-      // only the lower 5 bits are used when shifting, so don't do anything\n-      // if the shift amount is outside [0,32)\n-      if (!(rval >= 0 && rval < 32)) {\n-        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n-        return n;\n-      }\n+    // Check that the left operand is an integer and whithin a valid (safe) range.\n+    if (isURSh && lval < 0) {\n+      // Since there is no \">>>=\" operator in JavaScript, the parser\n+      // changes all unsigned right shifts into signed right shifts\n+      // if the number being shifted appears to be a signed integer.\n+      error(SIGNED_RIGHT_SHIFT, n);\n+      return n;\n+    }\n+    if (Math.abs(lval) > MAX_SAFE_INTEGER) {\n+      error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n+      return n;\n+    }\n \n-      // Convert the numbers to ints\n-      int lvalInt = (int) lval;\n-      if (lvalInt != lval) {\n-        error(FRACTIONAL_BITWISE_OPERAND, left);\n-        return n;\n+    // Do smis first for performance.\n+    if (isSmi) {\n+      long smiResult;\n+      if (n.getType() == Token.LSH) {\n+        smiResult = NodeUtil.toInt32(left.getLong() << rval);\n+      } else if (n.getType() == Token.RSH) {\n+        smiResult = NodeUtil.toInt32(left.getLong() >> rval);\n+      } else if (n.getType() == Token.URSH) {\n+        smiResult = NodeUtil.toUint32(left.getLong() >>> rval);\n+      } else {\n+        throw new AssertionError(\"Unknown shift operator: \" + n);\n       }\n-\n-      int rvalInt = (int) rval;\n-      if (rvalInt != rval) {\n-        error(FRACTIONAL_BITWISE_OPERAND, right);\n-        return n;\n+      Node foldedNode = Node.newNumber(smiResult);\n+      n.replaceWith(foldedNode);\n+      reportCodeChange();\n+      return foldedNode;\n+    } else {\n+      double result;\n+      if (n.getType() == Token.LSH) {\n+        result = lval * Math.pow(2, rval);\n+      } else if (n.getType() == Token.RSH) {\n+        result = Math.floor(lval / Math.pow(2, rval));\n+      } else {\n+        long uint32 = NodeUtil.toUint32(lval);\n+        double pow = Math.pow(2, rval);\n+        result = NodeUtil.isNegative(left)\n+            ? Math.floor(uint32 / pow)\n+            : NodeUtil.toUint32(uint32 / pow);\n       }\n-\n-      switch (n.getType()) {\n-        case Token.LSH:\n-          result = lvalInt << rvalInt;\n-          break;\n-        case Token.RSH:\n-          result = lvalInt >> rvalInt;\n-          break;\n-        case Token.URSH:\n-          // JavaScript handles zero shifts on signed numbers differently than\n-          // Java as an Java int can not represent the unsigned 32-bit number\n-          // where JavaScript can so use a long here.\n-          result = lvalInt >>> rvalInt;\n-          break;\n-        default:\n-          throw new AssertionError(\"Unknown shift operator: \" +\n-              Node.tokenToName(n.getType()));\n+      Node foldedNode = simplifyNumber(result);\n+      if (foldedNode != null) {\n+        n.replaceWith(foldedNode);\n+        reportCodeChange();\n+        return foldedNode;\n       }\n-\n       Node newNumber = Node.newNumber(result);\n-      n.getParent().replaceChild(n, newNumber);\n+      n.replaceWith(newNumber);\n       reportCodeChange();\n-\n       return newNumber;\n     }\n-\n-    return n;\n   }\n+  return n;\n+}\n \n   /**\n    * Try to fold comparison nodes, e.g ==",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}