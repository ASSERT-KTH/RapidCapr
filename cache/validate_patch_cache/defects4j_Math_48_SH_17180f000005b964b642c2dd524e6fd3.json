{
    "patch": "                    case ILLINOIS:\n                        f0 *= 0.5;\n                        break;\n                    case PEGASUS:\n                        f0 *= f1 / (f1 + fx);\n                        break;\n                    case REGULA_FALSI:\n                        // Detect early that algorithm is stuck, instead of waiting\n                        // for the maximum number of iterations to be exceeded.\n                        if (numberOfIterations >= maximalIterationCount) {\n                            throw new ConvergenceException(LocalizedFormats.CONVERGENCE_FAILED, getMaximalIterationCount());\n                        }\n                        break;\n                    default:\n                        // Should never happen.\n                        throw new MathInternalError();\n                }\n            }\n            // Update from [x0, x1] to [x0, x].\n            x1 = x;\n            f1 = fx;\n\n            // If the function value of the last approximation is too small,\n            // given the function value accuracy, then we can't get closer to\n            // the root than we already are.\n            if (FastMath.abs(f1) <= ftol) {\n                switch (allowed) {\n                    case ANY_SIDE:\n                        return x1;\n                    case LEFT_SIDE:\n                        if (inverted) {\n                            return x1;\n                        }\n                        break;\n                    case RIGHT_SIDE:\n                        if (!inverted) {\n                            return x1;\n                        }\n                        break;\n                    case BELOW_SIDE:\n                        if (f1 <= 0) {\n                            return x1;\n                        }\n                        break;\n                    case ABOVE_SIDE:\n                        if (f1 >= 0) {\n                            return x1;\n                        }\n                        break;\n                    default:\n                        throw new MathInternalError();\n                }\n            }\n\n            // If the current interval is within the given accuracies, we\n            // are satisfied with the current approximation.\n            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                atol)) {\n                switch (allowed) {\n                    case ANY_SIDE:\n                        return x1;\n                    case LEFT_SIDE:\n                        return inverted ? x1 : x0;\n                    case RIGHT_SIDE:\n                        return inverted ? x0 : x1;\n                    case BELOW_SIDE:\n                        return (f1 <= 0) ? x1 : x0;\n                    case ABOVE_SIDE:\n                        return (f1 >= 0) ? x1 : x0;\n                    default:\n                        throw new MathInternalError();\n                }\n            }\n            numberOfIterations++;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..1f678a65c 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,80 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+                    case ILLINOIS:\n+                        f0 *= 0.5;\n+                        break;\n+                    case PEGASUS:\n+                        f0 *= f1 / (f1 + fx);\n+                        break;\n+                    case REGULA_FALSI:\n+                        // Detect early that algorithm is stuck, instead of waiting\n+                        // for the maximum number of iterations to be exceeded.\n+                        if (numberOfIterations >= maximalIterationCount) {\n+                            throw new ConvergenceException(LocalizedFormats.CONVERGENCE_FAILED, getMaximalIterationCount());\n+                        }\n+                        break;\n+                    default:\n+                        // Should never happen.\n+                        throw new MathInternalError();\n+                }\n+            }\n+            // Update from [x0, x1] to [x0, x].\n+            x1 = x;\n+            f1 = fx;\n+\n+            // If the function value of the last approximation is too small,\n+            // given the function value accuracy, then we can't get closer to\n+            // the root than we already are.\n+            if (FastMath.abs(f1) <= ftol) {\n+                switch (allowed) {\n+                    case ANY_SIDE:\n+                        return x1;\n+                    case LEFT_SIDE:\n+                        if (inverted) {\n+                            return x1;\n+                        }\n+                        break;\n+                    case RIGHT_SIDE:\n+                        if (!inverted) {\n+                            return x1;\n+                        }\n+                        break;\n+                    case BELOW_SIDE:\n+                        if (f1 <= 0) {\n+                            return x1;\n+                        }\n+                        break;\n+                    case ABOVE_SIDE:\n+                        if (f1 >= 0) {\n+                            return x1;\n+                        }\n+                        break;\n+                    default:\n+                        throw new MathInternalError();\n+                }\n+            }\n+\n+            // If the current interval is within the given accuracies, we\n+            // are satisfied with the current approximation.\n+            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n+                atol)) {\n+                switch (allowed) {\n+                    case ANY_SIDE:\n+                        return x1;\n+                    case LEFT_SIDE:\n+                        return inverted ? x1 : x0;\n+                    case RIGHT_SIDE:\n+                        return inverted ? x0 : x1;\n+                    case BELOW_SIDE:\n+                        return (f1 <= 0) ? x1 : x0;\n+                    case ABOVE_SIDE:\n+                        return (f1 >= 0) ? x1 : x0;\n+                    default:\n+                        throw new MathInternalError();\n+                }\n+            }\n+            numberOfIterations++;\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: orphaned default",
    "test_result": "ERROR"
}