{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n   Node parent = n.getParent();\n+  if (left.getType() == Token.ARRAYLIT && left.getFirstChild() == null) {\n+    if (parent.getType() == Token.ASSIGN) {\n+      return n;\n+    }\n+    return NodeUtil.newUndefinedNode(n);\n+  }\n\n   if (right.getType() != Token.NUMBER) {\n     // Sometimes people like to use complex expressions to index into\n     // arrays, or strings to index into array methods.\n     return n;\n   }\n\n   double index = right.getDouble();\n   int intIndex = (int) index;\n   if (intIndex != index) {\n     error(INVALID_GETELEM_INDEX_ERROR, right);\n     return n;\n   }\n\n   if (intIndex < 0 || (left.isArrayLit() && intIndex >= left.getChildCount())) {\n     error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n     return n;\n   }\n\n   Node elem = left.getFirstChild();\n   for (int i = 0; elem != null && i < intIndex; i++) {\n     elem = elem.getNext();\n   }\n\n   if (elem == null) {\n     error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n     return n;\n   }\n\n   if (elem.getType() == Token.EMPTY) {\n     elem = NodeUtil.newUndefinedNode(elem);\n   } else {\n     left.removeChild(elem);\n   }\n\n   // Replace the entire GETELEM with the value\n   n.getParent().replaceChild(n, elem);\n   reportCodeChange();\n   return elem;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..d2ad4c6b 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,54 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+   Node parent = n.getParent();\n++  if (left.getType() == Token.ARRAYLIT && left.getFirstChild() == null) {\n++    if (parent.getType() == Token.ASSIGN) {\n++      return n;\n++    }\n++    return NodeUtil.newUndefinedNode(n);\n++  }\n+\n+   if (right.getType() != Token.NUMBER) {\n+     // Sometimes people like to use complex expressions to index into\n+     // arrays, or strings to index into array methods.\n+     return n;\n+   }\n+\n+   double index = right.getDouble();\n+   int intIndex = (int) index;\n+   if (intIndex != index) {\n+     error(INVALID_GETELEM_INDEX_ERROR, right);\n+     return n;\n+   }\n+\n+   if (intIndex < 0 || (left.isArrayLit() && intIndex >= left.getChildCount())) {\n+     error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+     return n;\n+   }\n+\n+   Node elem = left.getFirstChild();\n+   for (int i = 0; elem != null && i < intIndex; i++) {\n+     elem = elem.getNext();\n+   }\n+\n+   if (elem == null) {\n+     error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+     return n;\n+   }\n+\n+   if (elem.getType() == Token.EMPTY) {\n+     elem = NodeUtil.newUndefinedNode(elem);\n+   } else {\n+     left.removeChild(elem);\n+   }\n+\n+   // Replace the entire GETELEM with the value\n+   n.getParent().replaceChild(n, elem);\n+   reportCodeChange();\n+   return elem;\n+}\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}