{
    "patch": "MockSettings settings = org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS);\nMockHandler<T> newMockHandler = new MockHandler<>(settings);\nMethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler);\nProxyFactory mockFactory = new ProxyFactory();\nmockFactory.setSuperclass(mock.getClass());\nmockFactory.setInterfaces(mock.getClass().getInterfaces());\nmockFactory.setFilter(newFilter);\nT newMock = (T)mockFactory.create(new Class[0], new Object[0], new MethodInterceptor() {\n    @Override\n    public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n        Object ret = null;\n        try {\n            ret = proxy.invokeSuper(obj, args);\n        } catch (Throwable t) {\n          // handle throwable\n        }\n        MethodInvocationReport invocationReport = new MethodInvocationReport(method.getName(), args, ret);\n        invocationListener.reportInvocation(invocationReport);\n        return ret;\n    }\n});",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..71da8a89f 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,30 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+MockSettings settings = org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS);\n+MockHandler<T> newMockHandler = new MockHandler<>(settings);\n+MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler);\n+ProxyFactory mockFactory = new ProxyFactory();\n+mockFactory.setSuperclass(mock.getClass());\n+mockFactory.setInterfaces(mock.getClass().getInterfaces());\n+mockFactory.setFilter(newFilter);\n+T newMock = (T)mockFactory.create(new Class[0], new Object[0], new MethodInterceptor() {\n+    @Override\n+    public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n+        Object ret = null;\n+        try {\n+            ret = proxy.invokeSuper(obj, args);\n+        } catch (Throwable t) {\n+          // handle throwable\n+        }\n+        MethodInvocationReport invocationReport = new MethodInvocationReport(method.getName(), args, ret);\n+        invocationListener.reportInvocation(invocationReport);\n+        return ret;\n+    }\n+});\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}