{
    "patch": "\tprivate void declareArguments(Node functionNode) {\n\t\tNode astParameters = functionNode.getFirstChild().getNext();\n\t\tNode body = astParameters.getNext();\n\t\tFunctionType functionType = (FunctionType) functionNode.getJSType();\n\t\tif (functionType != null) {\n\t\t\tNode jsDocParameters = functionType.getParametersNode();\n\t\t\tif (jsDocParameters != null) {\n\t\t\t\tNode jsDocParameter = jsDocParameters.getFirstChild();\n\t\t\t\tSet<String> seenNames = new HashSet<>();\n\t\t\t\tfor (Node astParameter : astParameters.children()) {\n\t\t\t\t\tif (jsDocParameter != null) {\n\t\t\t\t\t\tString parameterName = astParameter.getString();\n\t\t\t\t\t\tif (seenNames.contains(parameterName)) {\n\t\t\t\t\t\t\tthis.report(JSError.make(astParameter, VAR_MULTIPLY_DECLARED_ERROR));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdefineSlot(astParameter, functionNode, jsDocParameter.getJSType(), true);\n\t\t\t\t\t\t\tseenNames.add(parameterName);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjsDocParameter = jsDocParameter.getNext();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdefineSlot(astParameter, functionNode, null, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 210bb66e..0157cffe 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1731,26 +1731,32 @@ final class TypedScopeCreator implements ScopeCreator {\n     /**\n      * Declares all of a function's arguments.\n      */\n-    private void declareArguments(Node functionNode) {\n-      Node astParameters = functionNode.getFirstChild().getNext();\n-      Node body = astParameters.getNext();\n-      FunctionType functionType = (FunctionType) functionNode.getJSType();\n-      if (functionType != null) {\n-        Node jsDocParameters = functionType.getParametersNode();\n-        if (jsDocParameters != null) {\n-          Node jsDocParameter = jsDocParameters.getFirstChild();\n-          for (Node astParameter : astParameters.children()) {\n-            if (jsDocParameter != null) {\n-              defineSlot(astParameter, functionNode,\n-                  jsDocParameter.getJSType(), true);\n-              jsDocParameter = jsDocParameter.getNext();\n-            } else {\n-              defineSlot(astParameter, functionNode, null, true);\n-            }\n-          }\n-        }\n-      }\n-    } // end declareArguments\n+\tprivate void declareArguments(Node functionNode) {\n+\t\tNode astParameters = functionNode.getFirstChild().getNext();\n+\t\tNode body = astParameters.getNext();\n+\t\tFunctionType functionType = (FunctionType) functionNode.getJSType();\n+\t\tif (functionType != null) {\n+\t\t\tNode jsDocParameters = functionType.getParametersNode();\n+\t\t\tif (jsDocParameters != null) {\n+\t\t\t\tNode jsDocParameter = jsDocParameters.getFirstChild();\n+\t\t\t\tSet<String> seenNames = new HashSet<>();\n+\t\t\t\tfor (Node astParameter : astParameters.children()) {\n+\t\t\t\t\tif (jsDocParameter != null) {\n+\t\t\t\t\t\tString parameterName = astParameter.getString();\n+\t\t\t\t\t\tif (seenNames.contains(parameterName)) {\n+\t\t\t\t\t\t\tthis.report(JSError.make(astParameter, VAR_MULTIPLY_DECLARED_ERROR));\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tdefineSlot(astParameter, functionNode, jsDocParameter.getJSType(), true);\n+\t\t\t\t\t\t\tseenNames.add(parameterName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tjsDocParameter = jsDocParameter.getNext();\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tdefineSlot(astParameter, functionNode, null, true);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n   } // end LocalScopeBuilder\n \n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}