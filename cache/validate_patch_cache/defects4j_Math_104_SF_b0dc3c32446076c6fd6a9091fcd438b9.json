{
    "patch": "public static double regularizedGamma(double a, double x) {\n    if (a <= 0 || x < 0) {\n        throw new IllegalArgumentException(\"Invalid argument for regularized gamma function\");\n    }\n    \n    double gammaValue = Gamma.gamma(a);\n    double result = incompleteGamma(a, x) / gammaValue;\n    return result;\n}\n\nprivate static double incompleteGamma(double a, double x) {\n    if (x == 0) {\n        return 0;\n    }\n    \n    double term = Math.pow(x, a) * Math.exp(-x);\n    double sum = term;\n    for (int i = 1; i < 1000; i++) {\n        term *= x / (a + i);\n        sum += term;\n        if (term < sum * 1e-15) {\n            break;\n        }\n    }\n    return sum;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..201320ec7 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,32 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    if (a <= 0 || x < 0) {\n+        throw new IllegalArgumentException(\"Invalid argument for regularized gamma function\");\n+    }\n+    \n+    double gammaValue = Gamma.gamma(a);\n+    double result = incompleteGamma(a, x) / gammaValue;\n+    return result;\n+}\n+\n+private static double incompleteGamma(double a, double x) {\n+    if (x == 0) {\n+        return 0;\n+    }\n+    \n+    double term = Math.pow(x, a) * Math.exp(-x);\n+    double sum = term;\n+    for (int i = 1; i < 1000; i++) {\n+        term *= x / (a + i);\n+        sum += term;\n+        if (term < sum * 1e-15) {\n+            break;\n+        }\n+    }\n+    return sum;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}