{
    "patch": "  void testAnalyzeTypes1() throws Exception {\n    String js = \"var x;var y=100;function f(z){y=z;}\";\n    TypeCheckResult p = parseAndTypeCheck(js);\n    DisambiguateProperties dp = new DisambiguateProperties(p.getCompiler());\n    assertTrue(p.getRoot().getLastChild().isChangeHandler());\n    assertTrue(p.getRoot().getLastChild().getNext().isElementFor());\n    assertTrue(p.getRoot().getLastChild().getNext().getNext().isElementFor());\n    assertTrue(p.getRoot().getLastChild().getNext().getNext().getNext().isChangeHandler());\n    dp.process(p.getRoot());\n    Node gety = findNameNode(dp.globalScope, \"y\");\n    assertTypeEquals(gety.getJSType(), getNativeNumberType());\n    assertTypeEquals(findNameNode(dp.globalScope, \"z\").getJSType(), getNativeNumberType());\n    FunctionType diffType = dp.propertyDiff.getPropagatedType();\n    assertEquals(\"{y: number}\", diffType.toString());\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..77969912 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,21 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+  void testAnalyzeTypes1() throws Exception {\n+    String js = \"var x;var y=100;function f(z){y=z;}\";\n+    TypeCheckResult p = parseAndTypeCheck(js);\n+    DisambiguateProperties dp = new DisambiguateProperties(p.getCompiler());\n+    assertTrue(p.getRoot().getLastChild().isChangeHandler());\n+    assertTrue(p.getRoot().getLastChild().getNext().isElementFor());\n+    assertTrue(p.getRoot().getLastChild().getNext().getNext().isElementFor());\n+    assertTrue(p.getRoot().getLastChild().getNext().getNext().getNext().isChangeHandler());\n+    dp.process(p.getRoot());\n+    Node gety = findNameNode(dp.globalScope, \"y\");\n+    assertTypeEquals(gety.getJSType(), getNativeNumberType());\n+    assertTypeEquals(findNameNode(dp.globalScope, \"z\").getJSType(), getNativeNumberType());\n+    FunctionType diffType = dp.propertyDiff.getPropagatedType();\n+    assertEquals(\"{y: number}\", diffType.toString());\n+  }\n         }\n       }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}