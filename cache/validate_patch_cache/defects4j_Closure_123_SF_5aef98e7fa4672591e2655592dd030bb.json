{
    "patch": "public static String fixCode(String code) {\n    int index = 0;\n    while ((index = code.indexOf(\"for\", index)) != -1) {\n        int left = code.indexOf('(', index);\n        int right = findMatchingRightParenthesis(code, left);\n        String forLoop = code.substring(left, right + 1);\n        \n        if (forLoop.contains(\":\")) {\n            forLoop = forLoop.replace(\":\", \"{\") + \"}\";\n        } else {\n            int inIndex = forLoop.indexOf(\" in \");\n            int semicolonIndex = findSemicolonBeforeLeftParenthesis(forLoop);\n            if (semicolonIndex < inIndex) {\n                forLoop = forLoop.substring(0, semicolonIndex+1) + \"[0\" + forLoop.substring(semicolonIndex+1) + \"]\";\n            } else {\n                forLoop = forLoop.substring(0, inIndex) + \"?(0):[\" + forLoop.substring(inIndex + 4) + \"]\";\n            }\n        }\n        code = code.substring(0, left) + forLoop + code.substring(right + 1);\n        index += forLoop.length();\n    }\n    return code;\n}\n\npublic static int findMatchingRightParenthesis(String str, int left) {\n    int right = left;\n    int counter = 1;\n    while (counter > 0) {\n        right++;\n        if (str.charAt(right) == '(') {\n            counter++;\n        } else if (str.charAt(right) == ')') {\n            counter--;\n        }\n    }\n    return right;\n}\n\npublic static int findSemicolonBeforeLeftParenthesis(String str) {\n    int right = str.indexOf('(') - 1;\n    while (right >= 0 && (Character.isWhitespace(str.charAt(right)) || str.charAt(right) == ';')) {\n        right--;\n    }\n    return right;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..5a8f74e8 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,51 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    int index = 0;\n+    while ((index = code.indexOf(\"for\", index)) != -1) {\n+        int left = code.indexOf('(', index);\n+        int right = findMatchingRightParenthesis(code, left);\n+        String forLoop = code.substring(left, right + 1);\n+        \n+        if (forLoop.contains(\":\")) {\n+            forLoop = forLoop.replace(\":\", \"{\") + \"}\";\n+        } else {\n+            int inIndex = forLoop.indexOf(\" in \");\n+            int semicolonIndex = findSemicolonBeforeLeftParenthesis(forLoop);\n+            if (semicolonIndex < inIndex) {\n+                forLoop = forLoop.substring(0, semicolonIndex+1) + \"[0\" + forLoop.substring(semicolonIndex+1) + \"]\";\n+            } else {\n+                forLoop = forLoop.substring(0, inIndex) + \"?(0):[\" + forLoop.substring(inIndex + 4) + \"]\";\n+            }\n+        }\n+        code = code.substring(0, left) + forLoop + code.substring(right + 1);\n+        index += forLoop.length();\n+    }\n+    return code;\n+}\n+\n+public static int findMatchingRightParenthesis(String str, int left) {\n+    int right = left;\n+    int counter = 1;\n+    while (counter > 0) {\n+        right++;\n+        if (str.charAt(right) == '(') {\n+            counter++;\n+        } else if (str.charAt(right) == ')') {\n+            counter--;\n+        }\n+    }\n+    return right;\n+}\n+\n+public static int findSemicolonBeforeLeftParenthesis(String str) {\n+    int right = str.indexOf('(') - 1;\n+    while (right >= 0 && (Character.isWhitespace(str.charAt(right)) || str.charAt(right) == ';')) {\n+        right--;\n+    }\n+    return right;\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}