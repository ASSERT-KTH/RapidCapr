{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long totalMillis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    totalMillis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    totalMillis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    totalMillis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    totalMillis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    totalMillis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n    // Calculate the total number of months contained in the period\n    int totalMonths = 0;\n    totalMonths += safeMultiply(getYears(), 12);\n    totalMonths += getMonths();\n\n    // Calculate the years and months from the total number of months\n    int years = totalMonths / 12;\n    int months = totalMonths % 12;\n\n    Period result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n    if (years != 0) {\n        result = result.withYears(years);\n    }\n    if (months != 0) {\n        result = result.withMonths(months);\n    }\n    return result.normalizedStandard(type);\n}\n\nprivate int safeMultiply(int num, int factor) {\n    if (num == 0) {\n        return 0;\n    }\n    if (num > 0 ? factor > Integer.MAX_VALUE / num || factor < Integer.MIN_VALUE / num\n            : (num < -1 ? factor > Integer.MIN_VALUE / num || factor < Integer.MAX_VALUE / num\n            : factor == Integer.MIN_VALUE)) {\n        throw new ArithmeticException(\"Multiplication overflows an int: \" + num + \" * \" + factor);\n    }\n    return num * factor;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..204261c3 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,44 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long totalMillis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+    totalMillis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    totalMillis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    totalMillis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    totalMillis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    totalMillis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+\n+    // Calculate the total number of months contained in the period\n+    int totalMonths = 0;\n+    totalMonths += safeMultiply(getYears(), 12);\n+    totalMonths += getMonths();\n+\n+    // Calculate the years and months from the total number of months\n+    int years = totalMonths / 12;\n+    int months = totalMonths % 12;\n+\n+    Period result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n+    if (years != 0) {\n+        result = result.withYears(years);\n+    }\n+    if (months != 0) {\n+        result = result.withMonths(months);\n+    }\n+    return result.normalizedStandard(type);\n+}\n+\n+private int safeMultiply(int num, int factor) {\n+    if (num == 0) {\n+        return 0;\n+    }\n+    if (num > 0 ? factor > Integer.MAX_VALUE / num || factor < Integer.MIN_VALUE / num\n+            : (num < -1 ? factor > Integer.MIN_VALUE / num || factor < Integer.MAX_VALUE / num\n+            : factor == Integer.MIN_VALUE)) {\n+        throw new ArithmeticException(\"Multiplication overflows an int: \" + num + \" * \" + factor);\n     }\n+    return num * factor;\n+}\n \n }",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}