{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n    FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  boolean hasVarArgs = functionType.getParameters().isVarArgs();\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node parameter = null;\n  Node argument = null;\n  while (arguments.hasNext()) {\n    if (!parameters.hasNext()) {\n      // No more parameters, so check if function has varargs.\n      if (hasVarArgs) {\n        // Match the remaining arguments to the varargs parameter.\n        parameter = functionType.getParameters().getVarArgsParameter();\n        while (arguments.hasNext()) {\n          argument = arguments.next();\n          ordinal++;\n          validator.expectArgumentMatchesParameter(t, argument,\n              getJSType(argument), getJSType(parameter), call, ordinal);\n        }\n      } else {\n        // Too many arguments.\n        argument = arguments.next();\n        ordinal++;\n        report(t, argument, FUNCTION_ARGUMENT_MISMATCH,\n            validator.getReadableJSTypeName(argument, false),\n            String.valueOf(ordinal), String.valueOf(parameters.size()));\n      }\n      break;\n    }\n    parameter = parameters.next();\n    argument = arguments.next();\n    ordinal++;\n\n    validator.expectArgumentMatchesParameter(t, argument,\n        getJSType(argument), getJSType(parameter), call, ordinal);\n  }\n\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  if (minArgs > numArgs || maxArgs < numArgs) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs), String.valueOf(minArgs),\n        maxArgs != Integer.MAX_VALUE ?\n        \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..d0f9fd3b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,39 +1396,58 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+private void visitParameterList(NodeTraversal t, Node call,\n+    FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  boolean hasVarArgs = functionType.getParameters().isVarArgs();\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  int ordinal = 0;\n+  Node parameter = null;\n+  Node argument = null;\n+  while (arguments.hasNext()) {\n+    if (!parameters.hasNext()) {\n+      // No more parameters, so check if function has varargs.\n+      if (hasVarArgs) {\n+        // Match the remaining arguments to the varargs parameter.\n+        parameter = functionType.getParameters().getVarArgsParameter();\n+        while (arguments.hasNext()) {\n+          argument = arguments.next();\n+          ordinal++;\n+          validator.expectArgumentMatchesParameter(t, argument,\n+              getJSType(argument), getJSType(parameter), call, ordinal);\n+        }\n+      } else {\n+        // Too many arguments.\n+        argument = arguments.next();\n+        ordinal++;\n+        report(t, argument, FUNCTION_ARGUMENT_MISMATCH,\n+            validator.getReadableJSTypeName(argument, false),\n+            String.valueOf(ordinal), String.valueOf(parameters.size()));\n+      }\n+      break;\n     }\n+    parameter = parameters.next();\n+    argument = arguments.next();\n+    ordinal++;\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n-    }\n+    validator.expectArgumentMatchesParameter(t, argument,\n+        getJSType(argument), getJSType(parameter), call, ordinal);\n   }\n \n+  int numArgs = call.getChildCount() - 1;\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+  if (minArgs > numArgs || maxArgs < numArgs) {\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(numArgs), String.valueOf(minArgs),\n+        maxArgs != Integer.MAX_VALUE ?\n+        \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+  }\n+}\n+\n   /**\n    * Visits a RETURN node.\n    *",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}