{
    "patch": "public TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    TimeSeries copy = (TimeSeries) super.clone();\n    copy.data = new ArrayList();\n    if (this.data.size() > 0) {\n        List<TimeSeriesDataItem> items = getTimeRange(start, end);\n        for (TimeSeriesDataItem item : items) {\n            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n            try {\n                copy.add(clone);\n            } catch (SeriesException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return copy;\n}\n\nprivate List<TimeSeriesDataItem> getTimeRange(int start, int end) {\n    List<TimeSeriesDataItem> items = new ArrayList<>();\n    if (this.data.size() > 0) {\n        TimeSeriesDataItem startItem = this.data.get(start);\n        Instant startTime = startItem.getPeriod().getStart();\n        Instant endTime = startItem.getPeriod().getEnd();\n        items.add(startItem);\n        for (int i = start + 1; i <= end; i++) {\n            TimeSeriesDataItem item = this.data.get(i);\n            Instant time = item.getPeriod().getStart();\n            if (time.isAfter(endTime)) {\n                break;\n            }\n            if (!time.isBefore(startTime)) {\n                items.add(item);\n                endTime = item.getPeriod().getEnd();\n            }\n        }\n    }\n    return items;\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..f39e3bb 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,6 +1054,51 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n+public TimeSeries createCopy(int start, int end)\n+        throws CloneNotSupportedException {\n+    if (start < 0) {\n+        throw new IllegalArgumentException(\"Requires start >= 0.\");\n+    }\n+    if (end < start) {\n+        throw new IllegalArgumentException(\"Requires start <= end.\");\n+    }\n+    TimeSeries copy = (TimeSeries) super.clone();\n+    copy.data = new ArrayList();\n+    if (this.data.size() > 0) {\n+        List<TimeSeriesDataItem> items = getTimeRange(start, end);\n+        for (TimeSeriesDataItem item : items) {\n+            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+            try {\n+                copy.add(clone);\n+            } catch (SeriesException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+    return copy;\n+}\n+\n+private List<TimeSeriesDataItem> getTimeRange(int start, int end) {\n+    List<TimeSeriesDataItem> items = new ArrayList<>();\n+    if (this.data.size() > 0) {\n+        TimeSeriesDataItem startItem = this.data.get(start);\n+        Instant startTime = startItem.getPeriod().getStart();\n+        Instant endTime = startItem.getPeriod().getEnd();\n+        items.add(startItem);\n+        for (int i = start + 1; i <= end; i++) {\n+            TimeSeriesDataItem item = this.data.get(i);\n+            Instant time = item.getPeriod().getStart();\n+            if (time.isAfter(endTime)) {\n+                break;\n+            }\n+            if (!time.isBefore(startTime)) {\n+                items.add(item);\n+                endTime = item.getPeriod().getEnd();\n+            }\n+        }\n+    }\n+    return items;\n+}\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}