{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    // We need to handle the case where the next transition is right at instantLocal\n                    // Otherwise we may end up with the wrong offset (one hour too large)\n                    long nextLocalPrev = previousTransition(instantLocal - offsetLocal);\n                    if (nextLocalPrev == instantLocal - offsetLocal) {\n                        return offsetLocal;\n                    }\n                    \n                    int newOffset = getOffset(nextAdjusted);\n                    long nextGapLocal = nextLocal + offsetLocal;\n                    long nextGapAdjusted = nextGapLocal - (newOffset - offsetLocal) * DateTimeConstants.MILLIS_PER_HOUR;\n                    \n                    if (instantLocal + (newOffset - offsetAdjusted) * DateTimeConstants.MILLIS_PER_HOUR < nextGapAdjusted) {\n                        return offsetLocal;\n                    } else if (instantLocal >= nextGapLocal) {\n                        return newOffset;\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..edfce3c9 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,31 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                // if we just return offsetAdjusted then the time is pushed\n+                // back before the transition, whereas it should be\n+                // on or after the transition\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    // We need to handle the case where the next transition is right at instantLocal\n+                    // Otherwise we may end up with the wrong offset (one hour too large)\n+                    long nextLocalPrev = previousTransition(instantLocal - offsetLocal);\n+                    if (nextLocalPrev == instantLocal - offsetLocal) {\n+                        return offsetLocal;\n+                    }\n+                    \n+                    int newOffset = getOffset(nextAdjusted);\n+                    long nextGapLocal = nextLocal + offsetLocal;\n+                    long nextGapAdjusted = nextGapLocal - (newOffset - offsetLocal) * DateTimeConstants.MILLIS_PER_HOUR;\n+                    \n+                    if (instantLocal + (newOffset - offsetAdjusted) * DateTimeConstants.MILLIS_PER_HOUR < nextGapAdjusted) {\n+                        return offsetLocal;\n+                    } else if (instantLocal >= nextGapLocal) {\n+                        return newOffset;\n+                    }\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}