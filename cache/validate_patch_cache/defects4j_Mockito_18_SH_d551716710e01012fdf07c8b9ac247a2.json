{
    "patch": "public Object apply(Method method, Object[] args) {\n    ReturnValue values = new ReturnValue();\n    for (int i = 0; i < adviceChain.length; i++) {\n        adviceChain[i].before(method, args);\n    }\n\n    try {\n        values.setReturnValue(method.invoke(delegate, args));\n    } catch (Exception e) {\n        for (int i = adviceChain.length - 1; i >= 0; i--) {\n            adviceChain[i].afterThrowing(method, args, e);\n        }\n        throw new RuntimeException(e);\n    }\n\n    for (int i = adviceChain.length - 1; i >= 0; i--) {\n        adviceChain[i].afterReturning(method, args, values);\n    }\n    return values.returnValueFor(method.getReturnType());\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}