{
    "patch": "            long instantPrev = instantAdjusted - 1;\n            long instantNext = instantAdjusted + 1;\n            int offsetPrev = getOffset(instantPrev);\n            int offsetNext = getOffset(instantNext);\n\n            // Find the transition boundaries\n            long nextTransition = nextTransition(instantAdjusted);\n            long previousTransition = previousTransition(instantAdjusted);\n\n            if (offsetPrev == offsetNext) {\n                return offsetPrev;\n            }\n            if (offsetLocal < offsetAdjusted) {\n                if (nextTransition == instantLocal - offsetLocal) {\n                    return offsetLocal;\n                } \n                else if (previousTransition == instantLocal - offsetPrev) {\n                    return offsetPrev;\n                } \n                else {\n                    return offsetNext;\n                }\n            } \n            else {\n                if (previousTransition == instantLocal - offsetAdjusted) {\n                    return offsetAdjusted;\n                } \n                else if (nextTransition == instantLocal - offsetNext) {\n                    return offsetNext;\n                } \n                else {\n                    return offsetPrev;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..3a5d6dfb 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,38 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            long instantPrev = instantAdjusted - 1;\n+            long instantNext = instantAdjusted + 1;\n+            int offsetPrev = getOffset(instantPrev);\n+            int offsetNext = getOffset(instantNext);\n+\n+            // Find the transition boundaries\n+            long nextTransition = nextTransition(instantAdjusted);\n+            long previousTransition = previousTransition(instantAdjusted);\n+\n+            if (offsetPrev == offsetNext) {\n+                return offsetPrev;\n+            }\n+            if (offsetLocal < offsetAdjusted) {\n+                if (nextTransition == instantLocal - offsetLocal) {\n+                    return offsetLocal;\n+                } \n+                else if (previousTransition == instantLocal - offsetPrev) {\n+                    return offsetPrev;\n+                } \n+                else {\n+                    return offsetNext;\n+                }\n+            } \n+            else {\n+                if (previousTransition == instantLocal - offsetAdjusted) {\n+                    return offsetAdjusted;\n+                } \n+                else if (nextTransition == instantLocal - offsetNext) {\n+                    return offsetNext;\n+                } \n+                else {\n+                    return offsetPrev;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}