{
    "patch": "private void updateBounds(TimePeriod period, int index) {\n    long start = period.getStart().getTime();\n    long end = period.getEnd().getTime();\n    long middle = start + ((end - start) / 2);\n\n    TimePeriod minStartPeriod = null;\n    TimePeriod maxStartPeriod = null;\n    TimePeriod minMiddlePeriod = null;\n    TimePeriod maxMiddlePeriod = null;\n    TimePeriod minEndPeriod = null;\n    TimePeriod maxEndPeriod = null;\n\n    if (minStartIndex >= 0) {\n        minStartPeriod = getDataItem(minStartIndex).getPeriod();\n    }\n\n    if (maxStartIndex >= 0) {\n        maxStartPeriod = getDataItem(maxStartIndex).getPeriod();\n    }\n\n    if (minMiddleIndex >= 0) {\n        minMiddlePeriod = getDataItem(minMiddleIndex).getPeriod();\n    }\n\n    if (maxMiddleIndex >= 0) {\n        maxMiddlePeriod = getDataItem(maxMiddleIndex).getPeriod();\n    }\n\n    if (minEndIndex >= 0) {\n        minEndPeriod = getDataItem(minEndIndex).getPeriod();\n    }\n\n    if (maxEndIndex >= 0) {\n        maxEndPeriod = getDataItem(maxEndIndex).getPeriod();\n    }\n\n    if (minStartPeriod == null || start < minStartPeriod.getStart().getTime()) {\n        minStartIndex = index;\n    }\n\n    if (maxStartPeriod == null || start > maxStartPeriod.getStart().getTime()) {\n        maxStartIndex = index;\n    }\n\n    if (minMiddlePeriod == null || middle < (minMiddlePeriod.getStart().getTime() + minMiddlePeriod.getEnd().getTime()) / 2) {\n        minMiddleIndex = index;\n    }\n\n    if (maxMiddlePeriod == null || middle > (maxMiddlePeriod.getStart().getTime() + maxMiddlePeriod.getEnd().getTime()) / 2) {\n        maxMiddleIndex = index;\n    }\n\n    if (minEndPeriod == null || end < minEndPeriod.getEnd().getTime()) {\n        minEndIndex = index;\n    }\n\n    if (maxEndPeriod == null || end > maxEndPeriod.getEnd().getTime()) {\n        maxEndIndex = index;\n    }\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimePeriodValues.java b/source/org/jfree/data/time/TimePeriodValues.java\nindex 0a3e7a1..f1d1b89 100644\n--- a/source/org/jfree/data/time/TimePeriodValues.java\n+++ b/source/org/jfree/data/time/TimePeriodValues.java\n@@ -254,85 +254,66 @@ public class TimePeriodValues extends Series implements Serializable {\n      * @param period  the time period.\n      * @param index  the index of the time period.\n      */\n-    private void updateBounds(TimePeriod period, int index) {\n-        \n-        long start = period.getStart().getTime();\n-        long end = period.getEnd().getTime();\n-        long middle = start + ((end - start) / 2);\n-\n-        if (this.minStartIndex >= 0) {\n-            long minStart = getDataItem(this.minStartIndex).getPeriod()\n-                .getStart().getTime();\n-            if (start < minStart) {\n-                this.minStartIndex = index;           \n-            }\n-        }\n-        else {\n-            this.minStartIndex = index;\n-        }\n-        \n-        if (this.maxStartIndex >= 0) {\n-            long maxStart = getDataItem(this.maxStartIndex).getPeriod()\n-                .getStart().getTime();\n-            if (start > maxStart) {\n-                this.maxStartIndex = index;           \n-            }\n-        }\n-        else {\n-            this.maxStartIndex = index;\n-        }\n-        \n-        if (this.minMiddleIndex >= 0) {\n-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n-                .getTime();\n-            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n-                .getTime();\n-            long minMiddle = s + (e - s) / 2;\n-            if (middle < minMiddle) {\n-                this.minMiddleIndex = index;           \n-            }\n-        }\n-        else {\n-            this.minMiddleIndex = index;\n-        }\n-        \n-        if (this.maxMiddleIndex >= 0) {\n-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n-                .getTime();\n-            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n-                .getTime();\n-            long maxMiddle = s + (e - s) / 2;\n-            if (middle > maxMiddle) {\n-                this.maxMiddleIndex = index;           \n-            }\n-        }\n-        else {\n-            this.maxMiddleIndex = index;\n-        }\n-        \n-        if (this.minEndIndex >= 0) {\n-            long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd()\n-                .getTime();\n-            if (end < minEnd) {\n-                this.minEndIndex = index;           \n-            }\n-        }\n-        else {\n-            this.minEndIndex = index;\n-        }\n-       \n-        if (this.maxEndIndex >= 0) {\n-            long maxEnd = getDataItem(this.maxEndIndex).getPeriod().getEnd()\n-                .getTime();\n-            if (end > maxEnd) {\n-                this.maxEndIndex = index;           \n-            }\n-        }\n-        else {\n-            this.maxEndIndex = index;\n-        }\n-        \n-    }\n+private void updateBounds(TimePeriod period, int index) {\n+    long start = period.getStart().getTime();\n+    long end = period.getEnd().getTime();\n+    long middle = start + ((end - start) / 2);\n+\n+    TimePeriod minStartPeriod = null;\n+    TimePeriod maxStartPeriod = null;\n+    TimePeriod minMiddlePeriod = null;\n+    TimePeriod maxMiddlePeriod = null;\n+    TimePeriod minEndPeriod = null;\n+    TimePeriod maxEndPeriod = null;\n+\n+    if (minStartIndex >= 0) {\n+        minStartPeriod = getDataItem(minStartIndex).getPeriod();\n+    }\n+\n+    if (maxStartIndex >= 0) {\n+        maxStartPeriod = getDataItem(maxStartIndex).getPeriod();\n+    }\n+\n+    if (minMiddleIndex >= 0) {\n+        minMiddlePeriod = getDataItem(minMiddleIndex).getPeriod();\n+    }\n+\n+    if (maxMiddleIndex >= 0) {\n+        maxMiddlePeriod = getDataItem(maxMiddleIndex).getPeriod();\n+    }\n+\n+    if (minEndIndex >= 0) {\n+        minEndPeriod = getDataItem(minEndIndex).getPeriod();\n+    }\n+\n+    if (maxEndIndex >= 0) {\n+        maxEndPeriod = getDataItem(maxEndIndex).getPeriod();\n+    }\n+\n+    if (minStartPeriod == null || start < minStartPeriod.getStart().getTime()) {\n+        minStartIndex = index;\n+    }\n+\n+    if (maxStartPeriod == null || start > maxStartPeriod.getStart().getTime()) {\n+        maxStartIndex = index;\n+    }\n+\n+    if (minMiddlePeriod == null || middle < (minMiddlePeriod.getStart().getTime() + minMiddlePeriod.getEnd().getTime()) / 2) {\n+        minMiddleIndex = index;\n+    }\n+\n+    if (maxMiddlePeriod == null || middle > (maxMiddlePeriod.getStart().getTime() + maxMiddlePeriod.getEnd().getTime()) / 2) {\n+        maxMiddleIndex = index;\n+    }\n+\n+    if (minEndPeriod == null || end < minEndPeriod.getEnd().getTime()) {\n+        minEndIndex = index;\n+    }\n+\n+    if (maxEndPeriod == null || end > maxEndPeriod.getEnd().getTime()) {\n+        maxEndIndex = index;\n+    }\n+}\n     \n     /**\n      * Recalculates the bounds for the collection of items.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}