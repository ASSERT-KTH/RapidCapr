{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node onlyChild = n.getFirstChild();\n      \n      // Do not fold EXPR_RESULT if parent is an expression, if, for, while or return.\n      if (n.getParent() != null \n          && (n.getParent().isExprResult() \n              || n.getParent().isFor() \n              || n.getParent().isWhile() \n              || n.getParent().isFunction() \n              && n.getPrevious() == null \n              && n.getNext() == null)) {\n        return false;\n      }\n      \n      if (onlyChild.getType() == Token.EXPR_RESULT) {\n        Node child = onlyChild.getFirstChild();\n        if (child != null && !child.hasChildren() \n            && (child.getType() == Token.FALSE \n                || child.getType() == Token.TRUE \n                || child.getType() == Token.NUMBER \n                || child.getType() == Token.STRING)) {\n        \t// Literal value should not be wrapped with ExpressionStatement node.\n          return false;\n        } else if (child != null && child.getType() == Token.HOOK) {\n        \t// Conditional expression should not be wrapped with ExpressionStatement node.\n          return false;\n        } else if (child != null && child.isFunction()) {\n        \t// Function declaration should not be wrapped with ExpressionStatement node.\n          return false;\n        }\n      }\n\n      return NodeUtil.isExpressionNode(n.getFirstChild());\n    } else if (n.getFirstChild().getType() == Token.FUNCTION) {\n      // Do not fold a block containing only a function declaration.\n      return false;\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..af2e9b22 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,50 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node onlyChild = n.getFirstChild();\n+      \n+      // Do not fold EXPR_RESULT if parent is an expression, if, for, while or return.\n+      if (n.getParent() != null \n+          && (n.getParent().isExprResult() \n+              || n.getParent().isFor() \n+              || n.getParent().isWhile() \n+              || n.getParent().isFunction() \n+              && n.getPrevious() == null \n+              && n.getNext() == null)) {\n+        return false;\n+      }\n+      \n+      if (onlyChild.getType() == Token.EXPR_RESULT) {\n+        Node child = onlyChild.getFirstChild();\n+        if (child != null && !child.hasChildren() \n+            && (child.getType() == Token.FALSE \n+                || child.getType() == Token.TRUE \n+                || child.getType() == Token.NUMBER \n+                || child.getType() == Token.STRING)) {\n+        \t// Literal value should not be wrapped with ExpressionStatement node.\n+          return false;\n+        } else if (child != null && child.getType() == Token.HOOK) {\n+        \t// Conditional expression should not be wrapped with ExpressionStatement node.\n+          return false;\n+        } else if (child != null && child.isFunction()) {\n+        \t// Function declaration should not be wrapped with ExpressionStatement node.\n+          return false;\n+        }\n       }\n-    }\n \n-    return false;\n+      return NodeUtil.isExpressionNode(n.getFirstChild());\n+    } else if (n.getFirstChild().getType() == Token.FUNCTION) {\n+      // Do not fold a block containing only a function declaration.\n+      return false;\n+    }\n   }\n \n+  return false;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}