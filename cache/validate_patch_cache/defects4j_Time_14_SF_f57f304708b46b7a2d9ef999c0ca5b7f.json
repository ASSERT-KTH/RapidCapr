{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        boolean changedDayOfMonth = false;\n        boolean monthAltered = false;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            DateTimeField field = partial.getFieldType(i).getField(iChronology);\n            int value = values[i];\n            if (i == fieldIndex) {\n                value = FieldUtils.getWrappedValue(value, valueToAdd, field.getMinimumValue(), field.getMaximumValue());\n                if (field.getType().equals(DurationFieldType.months())) {\n                    int dayOfMonth = values[iChronology.dayOfMonth().getFieldIndex()];\n                    int monthLength = iChronology.dayOfMonth().getMaximumValue(instant);\n                    if (dayOfMonth > monthLength) {\n                        dayOfMonth = monthLength;\n                    }\n                    instant = iChronology.monthOfYear().set(instant, value);\n                    instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n                    monthAltered = true;\n                    changedDayOfMonth = true;\n                } else {\n                    instant = field.set(instant, value);\n                }\n            } else {\n                instant = field.set(instant, value);\n            }\n        }\n        if (monthAltered && changedDayOfMonth) {\n            int[] result = iChronology.get(partial, instant);\n            result = correctDayOfMonth(result);\n            return result;\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}\n\n// Check if day of month for date is out of range for the month\n// If it is, sets the day of month to the max value for the month\nprivate int[] correctDayOfMonth(int[] partial) {\n    int dayOfMonthIndex = iChronology.dayOfMonth().getFieldIndex();\n    int maxDayOfMonth = iChronology.getDaysInMonth(partial[0], partial[1]);\n    if (partial[dayOfMonthIndex] > maxDayOfMonth) {\n        partial[dayOfMonthIndex] = maxDayOfMonth;\n    }\n    return partial;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..2dd56e75 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,60 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        boolean changedDayOfMonth = false;\n+        boolean monthAltered = false;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            DateTimeField field = partial.getFieldType(i).getField(iChronology);\n+            int value = values[i];\n+            if (i == fieldIndex) {\n+                value = FieldUtils.getWrappedValue(value, valueToAdd, field.getMinimumValue(), field.getMaximumValue());\n+                if (field.getType().equals(DurationFieldType.months())) {\n+                    int dayOfMonth = values[iChronology.dayOfMonth().getFieldIndex()];\n+                    int monthLength = iChronology.dayOfMonth().getMaximumValue(instant);\n+                    if (dayOfMonth > monthLength) {\n+                        dayOfMonth = monthLength;\n+                    }\n+                    instant = iChronology.monthOfYear().set(instant, value);\n+                    instant = iChronology.dayOfMonth().set(instant, dayOfMonth);\n+                    monthAltered = true;\n+                    changedDayOfMonth = true;\n+                } else {\n+                    instant = field.set(instant, value);\n+                }\n+            } else {\n+                instant = field.set(instant, value);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        if (monthAltered && changedDayOfMonth) {\n+            int[] result = iChronology.get(partial, instant);\n+            result = correctDayOfMonth(result);\n+            return result;\n+        }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n+\n+// Check if day of month for date is out of range for the month\n+// If it is, sets the day of month to the max value for the month\n+private int[] correctDayOfMonth(int[] partial) {\n+    int dayOfMonthIndex = iChronology.dayOfMonth().getFieldIndex();\n+    int maxDayOfMonth = iChronology.getDaysInMonth(partial[0], partial[1]);\n+    if (partial[dayOfMonthIndex] > maxDayOfMonth) {\n+        partial[dayOfMonthIndex] = maxDayOfMonth;\n+    }\n+    return partial;\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}