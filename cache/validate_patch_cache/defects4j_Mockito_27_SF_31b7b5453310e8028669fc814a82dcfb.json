{
    "patch": "import org.mockito.MockitoSessionBuilder;\nimport org.mockito.internal.creation.bytebuddy.MockAccess;\nimport org.mockito.internal.creation.bytebuddy.MockBytecodeGenerator;\nimport org.mockito.internal.creation.bytebuddy.MockMethodInterceptor;\nimport org.mockito.internal.creation.bytebuddy.MockMethodInterceptorFilter;\nimport org.mockito.internal.creation.bytebuddy.MockSettingsImpl;\nimport org.mockito.internal.handler.MockHandler;\nimport org.mockito.internal.handler.MockHandlerInterface;\nimport org.mockito.internal.util.MockUtil;\nimport org.mockito.invocation.MockInvocationHandler;\nimport org.mockito.invocation.MockInvocationInterceptor;\nimport org.mockito.mock.MockCreationSettings;\nimport org.mockito.plugins.MockMaker;\nimport org.mockito.session.MockitoSession;\n\nimport java.lang.reflect.Proxy;\n\n@SuppressWarnings(\"unchecked\")\npublic <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = (MockHandlerInterface<T>) new MockUtil().getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n\n    MockitoSessionBuilder mockitoSessionBuilder = Mockito.mockitoSession().initMocks(mock);\n\n    MockCreationSettings<T> mockCreationSettings = (MockCreationSettings<T>) mockitoSessionBuilder.getMockSettings();\n\n    MockBytecodeGenerator<T> mockBytecodeGenerator = new MockBytecodeGenerator<T>(mockCreationSettings);\n\n    MockMethodInterceptor mockMethodInterceptor = new MockMethodInterceptor<T>(newMockHandler);\n\n    MockMethodInterceptorFilter mockMethodInterceptorFilter = new MockMethodInterceptorFilter(mockMethodInterceptor, mockCreationSettings);\n\n    Class<? extends T> mockType = mockBytecodeGenerator.generateMockClass(mockCreationSettings.getName(),\n            mockMethodInterceptorFilter,\n            mockMethodInterceptorFilter.getAdditionalInterfaces(),\n            mockCreationSettings.getClassLoader(),\n            mockCreationSettings.isUseConstructor(),\n            mockCreationSettings.getOuterClass(),\n            mockCreationSettings.getInterfaces());\n\n    MockMaker mockMaker = mockCreationSettings.getMockitoPlugins().getMockMaker();\n    mock = (T) mockMaker.createMock(mockType, mockCreationSettings);\n    \n    MockAccess<T> mockAccess = (MockAccess<T>) mock;\n\n    MockInvocationHandler<T> mockInvocationHandler = (MockInvocationHandler<T>) mockAccess.getMockitoInterceptor();\n\n    MockInvocationInterceptor oldMockitoInterceptor = (MockInvocationInterceptor) mockInvocationHandler.getDelegate();\n\n    MockInvocationInterceptor newMockitoInterceptor = new MockMethodInterceptor<T>((MockHandlerInterface<T>) oldMockitoInterceptor);\n\n    mockInvocationHandler.setDelegate(newMockitoInterceptor);\n\n    if (mock.getClass().getInterfaces().length > 0) {\n        mock = (T) Proxy.newProxyInstance(mock.getClass().getClassLoader(),\n                mock.getClass().getInterfaces(), newMockHandler);\n        setMockHandler(mock, newMockHandler);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..4a31ae565 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,66 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.MockitoSessionBuilder;\n+import org.mockito.internal.creation.bytebuddy.MockAccess;\n+import org.mockito.internal.creation.bytebuddy.MockBytecodeGenerator;\n+import org.mockito.internal.creation.bytebuddy.MockMethodInterceptor;\n+import org.mockito.internal.creation.bytebuddy.MockMethodInterceptorFilter;\n+import org.mockito.internal.creation.bytebuddy.MockSettingsImpl;\n+import org.mockito.internal.handler.MockHandler;\n+import org.mockito.internal.handler.MockHandlerInterface;\n+import org.mockito.internal.util.MockUtil;\n+import org.mockito.invocation.MockInvocationHandler;\n+import org.mockito.invocation.MockInvocationInterceptor;\n+import org.mockito.mock.MockCreationSettings;\n+import org.mockito.plugins.MockMaker;\n+import org.mockito.session.MockitoSession;\n+\n+import java.lang.reflect.Proxy;\n+\n+@SuppressWarnings(\"unchecked\")\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = (MockHandlerInterface<T>) new MockUtil().getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+\n+    MockitoSessionBuilder mockitoSessionBuilder = Mockito.mockitoSession().initMocks(mock);\n+\n+    MockCreationSettings<T> mockCreationSettings = (MockCreationSettings<T>) mockitoSessionBuilder.getMockSettings();\n+\n+    MockBytecodeGenerator<T> mockBytecodeGenerator = new MockBytecodeGenerator<T>(mockCreationSettings);\n+\n+    MockMethodInterceptor mockMethodInterceptor = new MockMethodInterceptor<T>(newMockHandler);\n+\n+    MockMethodInterceptorFilter mockMethodInterceptorFilter = new MockMethodInterceptorFilter(mockMethodInterceptor, mockCreationSettings);\n+\n+    Class<? extends T> mockType = mockBytecodeGenerator.generateMockClass(mockCreationSettings.getName(),\n+            mockMethodInterceptorFilter,\n+            mockMethodInterceptorFilter.getAdditionalInterfaces(),\n+            mockCreationSettings.getClassLoader(),\n+            mockCreationSettings.isUseConstructor(),\n+            mockCreationSettings.getOuterClass(),\n+            mockCreationSettings.getInterfaces());\n+\n+    MockMaker mockMaker = mockCreationSettings.getMockitoPlugins().getMockMaker();\n+    mock = (T) mockMaker.createMock(mockType, mockCreationSettings);\n+    \n+    MockAccess<T> mockAccess = (MockAccess<T>) mock;\n+\n+    MockInvocationHandler<T> mockInvocationHandler = (MockInvocationHandler<T>) mockAccess.getMockitoInterceptor();\n+\n+    MockInvocationInterceptor oldMockitoInterceptor = (MockInvocationInterceptor) mockInvocationHandler.getDelegate();\n+\n+    MockInvocationInterceptor newMockitoInterceptor = new MockMethodInterceptor<T>((MockHandlerInterface<T>) oldMockitoInterceptor);\n+\n+    mockInvocationHandler.setDelegate(newMockitoInterceptor);\n+\n+    if (mock.getClass().getInterfaces().length > 0) {\n+        mock = (T) Proxy.newProxyInstance(mock.getClass().getClassLoader(),\n+                mock.getClass().getInterfaces(), newMockHandler);\n+        setMockHandler(mock, newMockHandler);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}