{
    "patch": "        Node value = callTarget.getNext();\n        // Only fold if the argument is a primitive immutable value or null\n        // and there are no side effects.\n        if (NodeUtil.isImmutableValue(value, compiler) &&\n            value.isSyntheticBlock() &&\n            NodeUtil.allArgsUnescaped(n)) {\n          Node addition = IR.add(\n              IR.string(\"\").srcref(callTarget),\n              value.detachFromParent());\n          n.getParent().replaceChild(n, addition);\n          reportCodeChange();\n          return addition;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..fb06436e 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,7 +217,19 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+        Node value = callTarget.getNext();\n+        // Only fold if the argument is a primitive immutable value or null\n+        // and there are no side effects.\n+        if (NodeUtil.isImmutableValue(value, compiler) &&\n+            value.isSyntheticBlock() &&\n+            NodeUtil.allArgsUnescaped(n)) {\n+          Node addition = IR.add(\n+              IR.string(\"\").srcref(callTarget),\n+              value.detachFromParent());\n+          n.getParent().replaceChild(n, addition);\n+          reportCodeChange();\n+          return addition;\n+        }\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}