{
    "patch": "            if (savedFields[i].iField.getType().equals(DateTimeFieldType.year())) {\n                if (savedFields[i].iValue < 100) {\n                    if (savedFields[i].iValue < 70) {\n                        savedFields[i].iValue += 2000;\n                    } else {\n                        savedFields[i].iValue += 1900;\n                    }\n                    savedFields[i].set(iChrono.setYear(savedFields[i].iWrappedValue, savedFields[i].iValue), false);\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..5cd0b928 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,16 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (savedFields[i].iField.getType().equals(DateTimeFieldType.year())) {\n+                if (savedFields[i].iValue < 100) {\n+                    if (savedFields[i].iValue < 70) {\n+                        savedFields[i].iValue += 2000;\n+                    } else {\n+                        savedFields[i].iValue += 1900;\n+                    }\n+                    savedFields[i].set(iChrono.setYear(savedFields[i].iWrappedValue, savedFields[i].iValue), false);\n+                }\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}