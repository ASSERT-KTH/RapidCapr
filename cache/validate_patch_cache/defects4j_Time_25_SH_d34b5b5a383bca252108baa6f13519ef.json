{
    "patch": "            final boolean dstBound = offsetLocal != offsetAdjusted;\n            // we need to ensure that time is always after the DST gap\n            if (dstBound && offsetAdjusted < 0) {\n                final long prevLocal = previousTransition(instantAdjusted);\n                final long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                if (prevLocal != prevAdjusted) {\n                    final int newOffsetAdjusted = getOffset(prevLocal);\n                    final boolean newDstBound = offsetLocal != newOffsetAdjusted;\n                    if (newDstBound && newOffsetAdjusted < 0) {\n                        return offsetLocal;\n                    } else {\n                        return newOffsetAdjusted;\n                    }\n                }\n            } else if (dstBound && offsetLocal < offsetAdjusted) {\n                final long nextLocal = nextTransition(instantAdjusted);\n                final long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    final int newOffsetAdjusted = getOffset(nextLocal);\n                    final boolean newDstBound = newOffsetAdjusted != offsetAdjusted;\n                    if (newDstBound) {\n                        final long nextAdjusted2 = nextTransition(instantLocal - newOffsetAdjusted);\n                        if (nextLocal != nextAdjusted2) {\n                            return offsetLocal;\n                        } else {\n                            return newOffsetAdjusted;\n                        }\n                    } else {\n                        return newOffsetAdjusted;\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..1f80fe65 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,36 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            final boolean dstBound = offsetLocal != offsetAdjusted;\n+            // we need to ensure that time is always after the DST gap\n+            if (dstBound && offsetAdjusted < 0) {\n+                final long prevLocal = previousTransition(instantAdjusted);\n+                final long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                if (prevLocal != prevAdjusted) {\n+                    final int newOffsetAdjusted = getOffset(prevLocal);\n+                    final boolean newDstBound = offsetLocal != newOffsetAdjusted;\n+                    if (newDstBound && newOffsetAdjusted < 0) {\n+                        return offsetLocal;\n+                    } else {\n+                        return newOffsetAdjusted;\n+                    }\n+                }\n+            } else if (dstBound && offsetLocal < offsetAdjusted) {\n+                final long nextLocal = nextTransition(instantAdjusted);\n+                final long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    final int newOffsetAdjusted = getOffset(nextLocal);\n+                    final boolean newDstBound = newOffsetAdjusted != offsetAdjusted;\n+                    if (newDstBound) {\n+                        final long nextAdjusted2 = nextTransition(instantLocal - newOffsetAdjusted);\n+                        if (nextLocal != nextAdjusted2) {\n+                            return offsetLocal;\n+                        } else {\n+                            return newOffsetAdjusted;\n+                        }\n+                    } else {\n+                        return newOffsetAdjusted;\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}