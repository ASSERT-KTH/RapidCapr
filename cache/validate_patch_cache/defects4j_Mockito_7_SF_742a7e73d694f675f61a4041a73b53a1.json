{
    "patch": "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n    \n    Type actualTypeArg = null;\n    for (Type lowerBound : typeVariable.getBounds()) {\n        if (lowerBound instanceof Class) {\n            actualTypeArg = lowerBound;\n            break;\n        } else if (lowerBound instanceof ParameterizedType) {\n            actualTypeArg = ((ParameterizedType) lowerBound).getRawType();\n            break;\n        }\n    }\n    if (actualTypeArg == null) {\n        for (Type upperBound : typeVariable.getBounds()) {\n            if (upperBound instanceof Class) {\n                actualTypeArg = upperBound;\n                break;\n            } else if (upperBound instanceof ParameterizedType) {\n                actualTypeArg = ((ParameterizedType) upperBound).getRawType();\n                break;\n            }\n        }\n        if (actualTypeArg == null) {\n            throw new RuntimeException(\"Unable to determine actual type argument for \" + typeVariable.getTypeName());\n        }\n    }\n    if (actualTypeArg instanceof TypeVariable<?>) {\n        actualTypeArg = extractTypeVariableBounds((TypeVariable<?>) actualTypeArg);\n    }\n    \n    registerTypeVariablesOn(actualTypeArg);\n}\n\nprivate Type extractTypeVariableBounds(TypeVariable<?> typeVariable) {\n    Type[] bounds = typeVariable.getBounds();\n    for (Type lowerBound : bounds) {\n        if (lowerBound instanceof Class) {\n            return lowerBound;\n        }\n    }\n    throw new RuntimeException(\"Type variable does not have any bounds: \" + typeVariable.getName());\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..5bff6cd80 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,52 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+    \n+    Type actualTypeArg = null;\n+    for (Type lowerBound : typeVariable.getBounds()) {\n+        if (lowerBound instanceof Class) {\n+            actualTypeArg = lowerBound;\n+            break;\n+        } else if (lowerBound instanceof ParameterizedType) {\n+            actualTypeArg = ((ParameterizedType) lowerBound).getRawType();\n+            break;\n+        }\n+    }\n+    if (actualTypeArg == null) {\n+        for (Type upperBound : typeVariable.getBounds()) {\n+            if (upperBound instanceof Class) {\n+                actualTypeArg = upperBound;\n+                break;\n+            } else if (upperBound instanceof ParameterizedType) {\n+                actualTypeArg = ((ParameterizedType) upperBound).getRawType();\n+                break;\n+            }\n+        }\n+        if (actualTypeArg == null) {\n+            throw new RuntimeException(\"Unable to determine actual type argument for \" + typeVariable.getTypeName());\n+        }\n+    }\n+    if (actualTypeArg instanceof TypeVariable<?>) {\n+        actualTypeArg = extractTypeVariableBounds((TypeVariable<?>) actualTypeArg);\n+    }\n+    \n+    registerTypeVariablesOn(actualTypeArg);\n+}\n+\n+private Type extractTypeVariableBounds(TypeVariable<?> typeVariable) {\n+    Type[] bounds = typeVariable.getBounds();\n+    for (Type lowerBound : bounds) {\n+        if (lowerBound instanceof Class) {\n+            return lowerBound;\n+        }\n+    }\n+    throw new RuntimeException(\"Type variable does not have any bounds: \" + typeVariable.getName());\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "java.lang.RuntimeException: Unable to determine actual type argument for O",
    "test_result": "FAIL"
}