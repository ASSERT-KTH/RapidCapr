{
    "patch": "        if (!n.isName()) {\n          continue;\n        }\n        Node parent = n.getParent();\n        if (parent.isVar() && parent.getFirstChild() != n) {\n          // This variable is an alias.\n          String name = n.getString();\n          Var aliasVar = scope.getVar(name);\n          aliases.put(name, aliasVar);\n          if (aliasVar == null) {\n            continue;\n          }\n\n          // TODO: handle aliasing of goog.scope.$template when it exists\n          Node value = aliasVar.getNode().getSecondChild();\n          if (value == null) {\n            continue;\n          }\n          String qualifiedName = null;\n          if (value.isQualifiedName()) {\n            qualifiedName = value.getQualifiedName();\n          } else if (value.isFunction()) {\n            qualifiedName = reportTemplateTypeAlias(t, value);\n          }\n          if (qualifiedName != null) {\n            transformation.addAlias(name, qualifiedName);\n          }\n        } else if (!isAliasScopeDeclaration(n)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..ba5b7702 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,34 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n+        if (!n.isName()) {\n+          continue;\n+        }\n         Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+        if (parent.isVar() && parent.getFirstChild() != n) {\n+          // This variable is an alias.\n           String name = n.getString();\n           Var aliasVar = scope.getVar(name);\n           aliases.put(name, aliasVar);\n+          if (aliasVar == null) {\n+            continue;\n+          }\n \n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n-        }\n-      }\n-    }\n+          // TODO: handle aliasing of goog.scope.$template when it exists\n+          Node value = aliasVar.getNode().getSecondChild();\n+          if (value == null) {\n+            continue;\n+          }\n+          String qualifiedName = null;\n+          if (value.isQualifiedName()) {\n+            qualifiedName = value.getQualifiedName();\n+          } else if (value.isFunction()) {\n+            qualifiedName = reportTemplateTypeAlias(t, value);\n+          }\n+          if (qualifiedName != null) {\n+            transformation.addAlias(name, qualifiedName);\n+          }\n+        } else if (!isAliasScopeDeclaration(n)) {\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}