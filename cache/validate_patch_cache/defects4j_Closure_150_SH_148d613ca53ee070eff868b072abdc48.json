{
    "patch": " attachLiteralTypes(n);\n switch (n.getType()) {\n    case Token.FUNCTION:\n        if (parent != null && NodeUtil.isFunctionDeclaration(parent)) {\n            break;\n        }\n        defineDeclaredFunction(n, parent);\n        break;\n    case Token.VAR:\n        defineVar(n, parent);\n        break;\n    case Token.LP:\n        if (parent != null) {\n            Node grandparent = parent.getParent();\n            boolean isForLoop =\n              grandparent != null && grandparent.getType() == Token.FOR;\n            if (parent.getType() == Token.EXPR_RESULT &&\n                (grandparent == null ||\n                 (grandparent.getType() != Token.FUNCTION && !isForLoop))) {\n              Node var = parent.getFirstChild();\n              while (var.getType() == Token.COMMA) {\n                var = var.getFirstChild();\n              }\n              defineVar(var, parent);\n              handleFunctionInputs(parent);\n            } else if (parent.getType() == Token.PARAM_LIST &&\n                       parent.getParent() != null &&\n                       parent.getParent().getType() == Token.FUNCTION) {\n              handleFunctionInputs(parent.getParent());\n            }\n        }\n        break;\n    case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n    default:\n        break;\n }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..dbe59ffe 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,44 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+ attachLiteralTypes(n);\n+ switch (n.getType()) {\n+    case Token.FUNCTION:\n+        if (parent != null && NodeUtil.isFunctionDeclaration(parent)) {\n+            break;\n+        }\n+        defineDeclaredFunction(n, parent);\n+        break;\n+    case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+    case Token.LP:\n+        if (parent != null) {\n+            Node grandparent = parent.getParent();\n+            boolean isForLoop =\n+              grandparent != null && grandparent.getType() == Token.FOR;\n+            if (parent.getType() == Token.EXPR_RESULT &&\n+                (grandparent == null ||\n+                 (grandparent.getType() != Token.FUNCTION && !isForLoop))) {\n+              Node var = parent.getFirstChild();\n+              while (var.getType() == Token.COMMA) {\n+                var = var.getFirstChild();\n+              }\n+              defineVar(var, parent);\n+              handleFunctionInputs(parent);\n+            } else if (parent.getType() == Token.PARAM_LIST &&\n+                       parent.getParent() != null &&\n+                       parent.getParent().getType() == Token.FUNCTION) {\n+              handleFunctionInputs(parent.getParent());\n+            }\n+        }\n+        break;\n+    case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+    default:\n+        break;\n+ }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}