{
    "patch": "if (offsetLocal > offsetAdjusted) {\n    long prevLocal = previousTransition(instantAdjusted);\n    long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n    if (prevLocal != prevAdjusted) {\n        return offsetLocal;\n    } else if (offsetLocal == 0 && offsetAdjusted == 1 && (instantLocal - prevLocal) == DateTimeConstants.MILLIS_PER_HOUR) {\n        return 0;\n    }\n} else if (offsetAdjusted > offsetLocal) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    if (nextLocal != nextAdjusted) {\n        return offsetLocal;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b9131264 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,21 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal > offsetAdjusted) {\n+    long prevLocal = previousTransition(instantAdjusted);\n+    long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+    if (prevLocal != prevAdjusted) {\n+        return offsetLocal;\n+    } else if (offsetLocal == 0 && offsetAdjusted == 1 && (instantLocal - prevLocal) == DateTimeConstants.MILLIS_PER_HOUR) {\n+        return 0;\n+    }\n+} else if (offsetAdjusted > offsetLocal) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    if (nextLocal != nextAdjusted) {\n+        return offsetLocal;\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}