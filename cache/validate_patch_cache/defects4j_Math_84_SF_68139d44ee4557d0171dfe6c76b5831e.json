{
    "patch": "                    resetIterationsCounter();\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                final RealPointValuePair[] contractedSimplex = simplex;\n                simplex = contractedSimplex;\n                resetIterationsCounter();\n            } else {\n                // check convergence\n                final double[] y = original[0].getPoint();\n                boolean isConverged = true;\n                for (int i = 1; i < simplex.length; ++i) {\n                    isConverged &= DISTANCE.apply(y, simplex[i].getPoint()) <= getAbsoluteThreshold() ||\n                                   DISTANCE.apply(simplex[0].getPoint(), simplex[i].getPoint()) <= getRelativeThreshold();\n                }\n                if (isConverged) {\n                    return;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..769fdc6eb 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,27 +58,7 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                    resetIterationsCounter();\n                 }\n \n                 return;\n@@ -89,14 +69,19 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n-            }\n-\n-        }\n-\n-    }\n+                final RealPointValuePair[] contractedSimplex = simplex;\n+                simplex = contractedSimplex;\n+                resetIterationsCounter();\n+            } else {\n+                // check convergence\n+                final double[] y = original[0].getPoint();\n+                boolean isConverged = true;\n+                for (int i = 1; i < simplex.length; ++i) {\n+                    isConverged &= DISTANCE.apply(y, simplex[i].getPoint()) <= getAbsoluteThreshold() ||\n+                                   DISTANCE.apply(simplex[0].getPoint(), simplex[i].getPoint()) <= getRelativeThreshold();\n+                }\n+                if (isConverged) {\n+                    return;\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: invalid method declaration; return type required",
    "test_result": "ERROR"
}