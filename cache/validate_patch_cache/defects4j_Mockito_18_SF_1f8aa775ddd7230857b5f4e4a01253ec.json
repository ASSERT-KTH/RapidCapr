{
    "patch": "public static Map<String, Integer> countWords(List<String> list) {\n    Map<String, Integer> counts = new HashMap<>();\n    for (String word : list) {\n        if(counts.containsKey(word)) {\n            counts.put(word, counts.get(word)+1);\n        } else {\n            counts.put(word, 1);\n        }\n    }\n    return counts;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..2aae61f14 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,17 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static Map<String, Integer> countWords(List<String> list) {\n+    Map<String, Integer> counts = new HashMap<>();\n+    for (String word : list) {\n+        if(counts.containsKey(word)) {\n+            counts.put(word, counts.get(word)+1);\n+        } else {\n+            counts.put(word, 1);\n+        }\n+    }\n+    return counts;\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}