{
    "patch": "// Detect early that algorithm is stuck, instead of waiting\n// for the maximum number of iterations to be exceeded.\nif (FastMath.abs(x1 - x) <= FastMath.max(rtol * FastMath.max(FastMath.abs(x1), FastMath.abs(x)),\n                                         atol)) {\n    if (FastMath.abs(fx) <= ftol) {\n        return x;\n    } else {\n        switch (allowed) {\n            case ANY_SIDE:\n                return x;\n            case LEFT_SIDE:\n                return inverted ? x : x0;\n            case RIGHT_SIDE:\n                return inverted ? x0 : x;\n            case BELOW_SIDE:\n                return (fx <= 0) ? x : x0;\n            case ABOVE_SIDE:\n                return (fx >= 0) ? x : x0;\n            default:\n                throw new MathInternalError();\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..ecac67051 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,29 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+// Detect early that algorithm is stuck, instead of waiting\n+// for the maximum number of iterations to be exceeded.\n+if (FastMath.abs(x1 - x) <= FastMath.max(rtol * FastMath.max(FastMath.abs(x1), FastMath.abs(x)),\n+                                         atol)) {\n+    if (FastMath.abs(fx) <= ftol) {\n+        return x;\n+    } else {\n+        switch (allowed) {\n+            case ANY_SIDE:\n+                return x;\n+            case LEFT_SIDE:\n+                return inverted ? x : x0;\n+            case RIGHT_SIDE:\n+                return inverted ? x0 : x;\n+            case BELOW_SIDE:\n+                return (fx <= 0) ? x : x0;\n+            case ABOVE_SIDE:\n+                return (fx >= 0) ? x : x0;\n+            default:\n+                throw new MathInternalError();\n+        }\n+    }\n+}\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "java.lang.Exception: Unexpected exception, expected<org.apache.commons.math.exception.ConvergenceException> but was<java.lang.AssertionError>",
    "test_result": "FAIL"
}