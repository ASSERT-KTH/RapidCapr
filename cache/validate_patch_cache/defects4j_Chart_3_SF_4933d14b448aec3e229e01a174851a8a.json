{
    "patch": "    public TimeSeries createCopy(int start, int end)\n            throws CloneNotSupportedException {\n        if (start < 0) {\n            throw new IllegalArgumentException(\"Requires start >= 0.\");\n        }\n        if (end < start) {\n            throw new IllegalArgumentException(\"Requires start <= end.\");\n        }\n        TimeSeries copy = (TimeSeries) super.clone();\n\n        if (this.data.isEmpty()) {\n            return copy;\n        }\n        \n        copy.data = new java.util.ArrayList();\n        \n        for (int index = start; index <= end && index < this.data.size(); index++) {\n            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n            try {\n                copy.add(clone);\n            } catch (SeriesException e) {\n                e.printStackTrace();\n            }\n        }\n        \n        // Set minY and maxY to default values\n        copy.minY = Double.POSITIVE_INFINITY;\n        copy.maxY = Double.NEGATIVE_INFINITY;\n        \n        // Calculate minY and maxY based on the new data in the copied series\n        for (TimeSeriesDataItem item : copy.getItems()) {\n            double y = item.getValue().doubleValue();\n            if (y < copy.minY) {\n                copy.minY = y;\n            }\n            if (y > copy.maxY) {\n                copy.maxY = y;\n            }\n        }\n\n        return copy;\n    }",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..6cc9357 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1045,31 +1045,49 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n      *\n      * @throws CloneNotSupportedException if there is a cloning problem.\n      */\n-    public TimeSeries createCopy(int start, int end)\n-            throws CloneNotSupportedException {\n-        if (start < 0) {\n-            throw new IllegalArgumentException(\"Requires start >= 0.\");\n-        }\n-        if (end < start) {\n-            throw new IllegalArgumentException(\"Requires start <= end.\");\n-        }\n-        TimeSeries copy = (TimeSeries) super.clone();\n-        copy.data = new java.util.ArrayList();\n-        if (this.data.size() > 0) {\n-            for (int index = start; index <= end; index++) {\n-                TimeSeriesDataItem item\n-                        = (TimeSeriesDataItem) this.data.get(index);\n-                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n-                try {\n-                    copy.add(clone);\n-                }\n-                catch (SeriesException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        }\n-        return copy;\n-    }\n+    public TimeSeries createCopy(int start, int end)\n+            throws CloneNotSupportedException {\n+        if (start < 0) {\n+            throw new IllegalArgumentException(\"Requires start >= 0.\");\n+        }\n+        if (end < start) {\n+            throw new IllegalArgumentException(\"Requires start <= end.\");\n+        }\n+        TimeSeries copy = (TimeSeries) super.clone();\n+\n+        if (this.data.isEmpty()) {\n+            return copy;\n+        }\n+        \n+        copy.data = new java.util.ArrayList();\n+        \n+        for (int index = start; index <= end && index < this.data.size(); index++) {\n+            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n+            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+            try {\n+                copy.add(clone);\n+            } catch (SeriesException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+        \n+        // Set minY and maxY to default values\n+        copy.minY = Double.POSITIVE_INFINITY;\n+        copy.maxY = Double.NEGATIVE_INFINITY;\n+        \n+        // Calculate minY and maxY based on the new data in the copied series\n+        for (TimeSeriesDataItem item : copy.getItems()) {\n+            double y = item.getValue().doubleValue();\n+            if (y < copy.minY) {\n+                copy.minY = y;\n+            }\n+            if (y > copy.maxY) {\n+                copy.maxY = y;\n+            }\n+        }\n+\n+        return copy;\n+    }\n \n     /**\n      * Creates a new timeseries by copying a subset of the data in this time",
    "result_reason": "error: for-each loops are not supported in -source 1.4",
    "test_result": "ERROR"
}