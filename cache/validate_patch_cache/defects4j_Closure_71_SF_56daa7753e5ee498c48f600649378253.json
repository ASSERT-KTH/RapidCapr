{
    "patch": "  private void checkPropertyVisibility(NodeTraversal t,\n      Node getprop, Node parent) {\n    ObjectType objectType =\n        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType == null) {\n      return;\n    }\n\n    // Is this a normal property access, or are we trying to override\n    // an existing property?\n    boolean isOverride = t.inGlobalScope() &&\n        parent.getType() == Token.ASSIGN &&\n        parent.getFirstChild() == getprop;\n\n    // Find the lowest property defined on a class with visibility\n    // information.\n    JSDocInfo docInfo = null;\n    if (isOverride) {\n      objectType = objectType.getImplicitPrototype();\n    }\n    for (; objectType != null;\n         objectType = objectType.getImplicitPrototype()) {\n      docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n      if (docInfo != null &&\n          docInfo.getVisibility() != Visibility.INHERITED) {\n        break;\n      }\n    }\n\n    if (objectType == null || docInfo == null) {\n      // We couldn't find a visibility modifier; assume it's public.\n      return;\n    }\n\n    boolean sameInput =\n        t.getInput().getName().equals(docInfo.getSourceName());\n    Visibility visibility = docInfo.getVisibility();\n    JSType ownerType = normalizeClassType(objectType);\n\n    if (isOverride) {\n      // Check an ASSIGN statement that's trying to override a property\n      // on a superclass.\n      JSDocInfo overridingInfo = parent.getJSDocInfo();\n      Visibility overridingVisibility =\n          overridingInfo == null ?\n          Visibility.INHERITED : overridingInfo.getVisibility();\n\n      // Check that (a) the property *can* be overridden, and\n      // (b) that the visibility of the override is the same as the\n      // visibility of the original property.\n      if (visibility == Visibility.PRIVATE && !sameInput) {\n        compiler.report(\n            t.makeError(getprop, PRIVATE_OVERRIDE,\n                objectType.toString()));\n      } else if (overridingVisibility != Visibility.INHERITED &&\n          overridingVisibility != visibility) {\n        compiler.report(\n            t.makeError(getprop, VISIBILITY_MISMATCH,\n                visibility.name(), objectType.toString(),\n                overridingVisibility.name()));\n      }\n    } else {\n      if (sameInput) {\n        // private access is always allowed in the same file.\n        return;\n      }\n\n      if (visibility == Visibility.PRIVATE &&\n          isAccessedBySubclass(getprop, currentClass)) {\n        return;\n      }\n\n      if (visibility == Visibility.PRIVATE) {\n        if (docInfo.isConstructor() &&\n            isValidPrivateConstructorAccess(parent)) {\n          return;\n        }\n\n        // private access is not allowed outside the file from a different\n        // enclosing class.\n        compiler.report(\n            t.makeError(getprop,\n                BAD_PRIVATE_PROPERTY_ACCESS,\n                propertyName,\n                validator.getReadableJSTypeName(\n                    getprop.getFirstChild(), true)));\n      } else if (visibility == Visibility.PROTECTED) {\n        // There are 3 types of legal accesses of a protected property:\n        // 1) Accesses in the same file\n        // 2) Overriding the property in a subclass\n        // 3) Accessing the property from inside a subclass\n        // The first two have already been checked for.\n        if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n          compiler.report(\n              t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));\n        }\n      }\n    }\n  }\n\n  private static boolean isAccessedBySubclass(Node getprop,\n      ObjectType currentClass) {\n    if (currentClass != null) {\n      Node parent = getprop.getParent();\n      Node owner = parent.getParent().getFirstChild();\n      while (owner != null) {\n        JSType type = owner.getJSType();\n        if (type != null) {\n          ObjectType objectType = ObjectType.cast(dereference(type));\n          if (objectType != null &&\n              objectType.isEquivalentTo(currentClass) &&\n              parent.getFirstChild().getString().equals(\n                  getprop.getLastChild().getString())) {\n            return true;\n          }\n        }\n        owner = owner.getNext();\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..5c58a522 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -410,93 +410,125 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n         ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n     String propertyName = getprop.getLastChild().getString();\n \n-    if (objectType != null) {\n-      // Is this a normal property access, or are we trying to override\n-      // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n-          parent.getType() == Token.ASSIGN &&\n-          parent.getFirstChild() == getprop;\n-\n-      // Find the lowest property defined on a class with visibility\n-      // information.\n-      if (isOverride) {\n-        objectType = objectType.getImplicitPrototype();\n+    if (objectType == null) {\n+      return;\n+    }\n+\n+    // Is this a normal property access, or are we trying to override\n+    // an existing property?\n+    boolean isOverride = t.inGlobalScope() &&\n+        parent.getType() == Token.ASSIGN &&\n+        parent.getFirstChild() == getprop;\n+\n+    // Find the lowest property defined on a class with visibility\n+    // information.\n+    JSDocInfo docInfo = null;\n+    if (isOverride) {\n+      objectType = objectType.getImplicitPrototype();\n+    }\n+    for (; objectType != null;\n+         objectType = objectType.getImplicitPrototype()) {\n+      docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n+      if (docInfo != null &&\n+          docInfo.getVisibility() != Visibility.INHERITED) {\n+        break;\n       }\n-      JSDocInfo docInfo = null;\n-      for (; objectType != null;\n-           objectType = objectType.getImplicitPrototype()) {\n-        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n-        if (docInfo != null &&\n-            docInfo.getVisibility() != Visibility.INHERITED) {\n-          break;\n-        }\n+    }\n+\n+    if (objectType == null || docInfo == null) {\n+      // We couldn't find a visibility modifier; assume it's public.\n+      return;\n+    }\n+\n+    boolean sameInput =\n+        t.getInput().getName().equals(docInfo.getSourceName());\n+    Visibility visibility = docInfo.getVisibility();\n+    JSType ownerType = normalizeClassType(objectType);\n+\n+    if (isOverride) {\n+      // Check an ASSIGN statement that's trying to override a property\n+      // on a superclass.\n+      JSDocInfo overridingInfo = parent.getJSDocInfo();\n+      Visibility overridingVisibility =\n+          overridingInfo == null ?\n+          Visibility.INHERITED : overridingInfo.getVisibility();\n+\n+      // Check that (a) the property *can* be overridden, and\n+      // (b) that the visibility of the override is the same as the\n+      // visibility of the original property.\n+      if (visibility == Visibility.PRIVATE && !sameInput) {\n+        compiler.report(\n+            t.makeError(getprop, PRIVATE_OVERRIDE,\n+                objectType.toString()));\n+      } else if (overridingVisibility != Visibility.INHERITED &&\n+          overridingVisibility != visibility) {\n+        compiler.report(\n+            t.makeError(getprop, VISIBILITY_MISMATCH,\n+                visibility.name(), objectType.toString(),\n+                overridingVisibility.name()));\n+      }\n+    } else {\n+      if (sameInput) {\n+        // private access is always allowed in the same file.\n+        return;\n       }\n \n-      if (objectType == null) {\n-        // We couldn't find a visibility modifier; assume it's public.\n+      if (visibility == Visibility.PRIVATE &&\n+          isAccessedBySubclass(getprop, currentClass)) {\n         return;\n       }\n \n-      boolean sameInput =\n-          t.getInput().getName().equals(docInfo.getSourceName());\n-      Visibility visibility = docInfo.getVisibility();\n-      JSType ownerType = normalizeClassType(objectType);\n-      if (isOverride) {\n-        // Check an ASSIGN statement that's trying to override a property\n-        // on a superclass.\n-        JSDocInfo overridingInfo = parent.getJSDocInfo();\n-        Visibility overridingVisibility = overridingInfo == null ?\n-            Visibility.INHERITED : overridingInfo.getVisibility();\n-\n-        // Check that (a) the property *can* be overridden, and\n-        // (b) that the visibility of the override is the same as the\n-        // visibility of the original property.\n-        if (visibility == Visibility.PRIVATE && !sameInput) {\n-          compiler.report(\n-              t.makeError(getprop, PRIVATE_OVERRIDE,\n-                  objectType.toString()));\n-        } else if (overridingVisibility != Visibility.INHERITED &&\n-            overridingVisibility != visibility) {\n-          compiler.report(\n-              t.makeError(getprop, VISIBILITY_MISMATCH,\n-                  visibility.name(), objectType.toString(),\n-                  overridingVisibility.name()));\n-        }\n-      } else {\n-        if (sameInput) {\n-          // private access is always allowed in the same file.\n+      if (visibility == Visibility.PRIVATE) {\n+        if (docInfo.isConstructor() &&\n+            isValidPrivateConstructorAccess(parent)) {\n           return;\n-        } else if (visibility == Visibility.PRIVATE &&\n-            (currentClass == null || ownerType.differsFrom(currentClass))) {\n-          if (docInfo.isConstructor() &&\n-              isValidPrivateConstructorAccess(parent)) {\n-            return;\n-          }\n+        }\n \n-          // private access is not allowed outside the file from a different\n-          // enclosing class.\n+        // private access is not allowed outside the file from a different\n+        // enclosing class.\n+        compiler.report(\n+            t.makeError(getprop,\n+                BAD_PRIVATE_PROPERTY_ACCESS,\n+                propertyName,\n+                validator.getReadableJSTypeName(\n+                    getprop.getFirstChild(), true)));\n+      } else if (visibility == Visibility.PROTECTED) {\n+        // There are 3 types of legal accesses of a protected property:\n+        // 1) Accesses in the same file\n+        // 2) Overriding the property in a subclass\n+        // 3) Accessing the property from inside a subclass\n+        // The first two have already been checked for.\n+        if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n           compiler.report(\n-              t.makeError(getprop,\n-                  BAD_PRIVATE_PROPERTY_ACCESS,\n+              t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n                   propertyName,\n                   validator.getReadableJSTypeName(\n                       getprop.getFirstChild(), true)));\n-        } else if (visibility == Visibility.PROTECTED) {\n-          // There are 3 types of legal accesses of a protected property:\n-          // 1) Accesses in the same file\n-          // 2) Overriding the property in a subclass\n-          // 3) Accessing the property from inside a subclass\n-          // The first two have already been checked for.\n-          if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n-            compiler.report(\n-                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n-                    propertyName,\n-                    validator.getReadableJSTypeName(\n-                        getprop.getFirstChild(), true)));\n+        }\n+      }\n+    }\n+  }\n+\n+  private static boolean isAccessedBySubclass(Node getprop,\n+      ObjectType currentClass) {\n+    if (currentClass != null) {\n+      Node parent = getprop.getParent();\n+      Node owner = parent.getParent().getFirstChild();\n+      while (owner != null) {\n+        JSType type = owner.getJSType();\n+        if (type != null) {\n+          ObjectType objectType = ObjectType.cast(dereference(type));\n+          if (objectType != null &&\n+              objectType.isEquivalentTo(currentClass) &&\n+              parent.getFirstChild().getString().equals(\n+                  getprop.getLastChild().getString())) {\n+            return true;\n           }\n         }\n+        owner = owner.getNext();\n       }\n     }\n+    return false;\n   }\n \n   /**",
    "result_reason": "error: method isAccessedBySubclass in class CheckAccessControls cannot be applied to given types;",
    "test_result": "ERROR"
}