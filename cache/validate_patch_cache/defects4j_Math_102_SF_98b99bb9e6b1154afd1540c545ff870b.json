{
    "patch": "public double chiSquare(double[] expected, long[] observed) {\n    int n = expected.length;\n    if (n < 2 || n != observed.length) {\n        throw new IllegalArgumentException(\"Invalid input arrays\");\n    }\n\n    double chi2 = 0.0;\n    for (int i = 0; i < n; i++) {\n        if (expected[i] <= 0) {\n            throw new IllegalArgumentException(\"Expected count must be positive\");\n        }\n        if (observed[i] < 0) {\n            throw new IllegalArgumentException(\"Observed count must be non-negative\");\n        }\n        double diff = observed[i] - expected[i];\n        chi2 += (diff * diff) / expected[i];\n    }\n\n    // A check for unreasonably large test statistics due to roundoff error:\n    if (Double.isInfinite(chi2) || Double.isNaN(chi2) || chi2 > 1e6) {\n        throw new IllegalArgumentException(\"Input array contains invalid values\");\n    }\n\n    return chi2;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\nindex c87b0101f..2ce5b662f 100644\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n@@ -61,25 +61,32 @@ public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n      * @throws IllegalArgumentException if preconditions are not met\n      * or length is less than 2\n      */\n-    public double chiSquare(double[] expected, long[] observed)\n-        throws IllegalArgumentException {\n-        if ((expected.length < 2) || (expected.length != observed.length)) {\n-            throw new IllegalArgumentException(\n-                    \"observed, expected array lengths incorrect\");\n+public double chiSquare(double[] expected, long[] observed) {\n+    int n = expected.length;\n+    if (n < 2 || n != observed.length) {\n+        throw new IllegalArgumentException(\"Invalid input arrays\");\n+    }\n+\n+    double chi2 = 0.0;\n+    for (int i = 0; i < n; i++) {\n+        if (expected[i] <= 0) {\n+            throw new IllegalArgumentException(\"Expected count must be positive\");\n         }\n-        if (!isPositive(expected) || !isNonNegative(observed)) {\n-            throw new IllegalArgumentException(\n-                \"observed counts must be non-negative and expected counts must be postive\");\n+        if (observed[i] < 0) {\n+            throw new IllegalArgumentException(\"Observed count must be non-negative\");\n         }\n-        double sumSq = 0.0d;\n-        double dev = 0.0d;\n-        for (int i = 0; i < observed.length; i++) {\n-                dev = ((double) observed[i] - expected[i]);\n-                sumSq += dev * dev / expected[i];\n-        }\n-        return sumSq;\n+        double diff = observed[i] - expected[i];\n+        chi2 += (diff * diff) / expected[i];\n+    }\n+\n+    // A check for unreasonably large test statistics due to roundoff error:\n+    if (Double.isInfinite(chi2) || Double.isNaN(chi2) || chi2 > 1e6) {\n+        throw new IllegalArgumentException(\"Input array contains invalid values\");\n     }\n \n+    return chi2;\n+}\n+\n     /**\n      * {@inheritDoc}\n      * <p><strong>Note: </strong>This implementation rescales the ",
    "result_reason": "java.lang.IllegalArgumentException: Input array contains invalid values",
    "test_result": "FAIL"
}