{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    LUDecomposition luDecomposition = new LUDecomposition(m);\n    RealMatrix lMatrix = luDecomposition.getL();\n    RealMatrix uMatrix = luDecomposition.getU();\n\n    int n = m.getRowDimension();\n    RealMatrix bMatrix = MatrixUtils.createRealIdentityMatrix(n);\n\n    // Forward substitution\n    for (int j = 0; j < n; j++) {\n        for (int k = 0; k < j; k++) {\n            for (int i = k + 1; i < j; i++) {\n                bMatrix.setEntry(j, k, bMatrix.getEntry(j, k) - lMatrix.getEntry(j, i) * bMatrix.getEntry(i, k));\n            }\n            bMatrix.setEntry(j, k, bMatrix.getEntry(j, k) / lMatrix.getEntry(j, j));\n        }\n        bMatrix.setEntry(j, j, bMatrix.getEntry(j, j) / lMatrix.getEntry(j, j));\n    }\n\n    // Backward substitution\n    for (int j = n - 1; j >= 0; j--) {\n        for (int k = j + 1; k < n; k++) {\n            for (int i = j + 1; i < k; i++) {\n                bMatrix.setEntry(j, k, bMatrix.getEntry(j, k) - uMatrix.getEntry(j, i) * bMatrix.getEntry(i, k));\n            }\n            bMatrix.setEntry(j, k, bMatrix.getEntry(j, k) / uMatrix.getEntry(j, j));\n        }\n        bMatrix.setEntry(j, j, bMatrix.getEntry(j, j) / uMatrix.getEntry(j, j));\n    }\n\n    return bMatrix;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..a79e37f92 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,36 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    LUDecomposition luDecomposition = new LUDecomposition(m);\n+    RealMatrix lMatrix = luDecomposition.getL();\n+    RealMatrix uMatrix = luDecomposition.getU();\n+\n+    int n = m.getRowDimension();\n+    RealMatrix bMatrix = MatrixUtils.createRealIdentityMatrix(n);\n+\n+    // Forward substitution\n+    for (int j = 0; j < n; j++) {\n+        for (int k = 0; k < j; k++) {\n+            for (int i = k + 1; i < j; i++) {\n+                bMatrix.setEntry(j, k, bMatrix.getEntry(j, k) - lMatrix.getEntry(j, i) * bMatrix.getEntry(i, k));\n+            }\n+            bMatrix.setEntry(j, k, bMatrix.getEntry(j, k) / lMatrix.getEntry(j, j));\n+        }\n+        bMatrix.setEntry(j, j, bMatrix.getEntry(j, j) / lMatrix.getEntry(j, j));\n+    }\n+\n+    // Backward substitution\n+    for (int j = n - 1; j >= 0; j--) {\n+        for (int k = j + 1; k < n; k++) {\n+            for (int i = j + 1; i < k; i++) {\n+                bMatrix.setEntry(j, k, bMatrix.getEntry(j, k) - uMatrix.getEntry(j, i) * bMatrix.getEntry(i, k));\n+            }\n+            bMatrix.setEntry(j, k, bMatrix.getEntry(j, k) / uMatrix.getEntry(j, j));\n+        }\n+        bMatrix.setEntry(j, j, bMatrix.getEntry(j, j) / uMatrix.getEntry(j, j));\n     }\n+\n+    return bMatrix;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}