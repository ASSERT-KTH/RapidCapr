{
    "patch": "  private boolean checkExplicitThis(Node n, FunctionType functionType, Scope scope,\n      JSType functionTypeAsJSType) {\n    boolean declaredThis = n.isGetElem() || n.isGetProp() || n.isCall() || n.isNew();\n    if (declaredThis && functionType.getTypeOfThis() != null) {\n      JSType thisType = getJSType(n.getFirstChild().getNext());\n      if (thisType == null || !thisType.isSubtypeOf(functionType.getTypeOfThis())) {\n        report(n, INVALID_THIS_TYPE, functionTypeAsJSType.toString());\n        return true;\n      }\n    }\n    return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..48dcf940 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+  private boolean checkExplicitThis(Node n, FunctionType functionType, Scope scope,\n+      JSType functionTypeAsJSType) {\n+    boolean declaredThis = n.isGetElem() || n.isGetProp() || n.isCall() || n.isNew();\n+    if (declaredThis && functionType.getTypeOfThis() != null) {\n+      JSType thisType = getJSType(n.getFirstChild().getNext());\n+      if (thisType == null || !thisType.isSubtypeOf(functionType.getTypeOfThis())) {\n+        report(n, INVALID_THIS_TYPE, functionTypeAsJSType.toString());\n+        return true;\n+      }\n+    }\n+    return false;\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}