{
    "patch": "public static double regularizedGamma(double a, double x) {\n    final double epsilon = 10e-15;\n    final int maxIterations = 1000;\n    double gammaA = Gamma.gamma(a);\n    double term = 1 / gammaA;\n    double sum = term;\n    for (int i = 1; i <= maxIterations; i++) {\n        term *= x / (a + i);\n        sum += term;\n        if (Math.abs(term / sum) < epsilon) {\n            return sum * Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a));\n        }\n    }\n    throw new RuntimeException(\"Gamma regularized series failed to converge after \" + maxIterations + \" iterations\");\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..c331766ad 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,21 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    final double epsilon = 10e-15;\n+    final int maxIterations = 1000;\n+    double gammaA = Gamma.gamma(a);\n+    double term = 1 / gammaA;\n+    double sum = term;\n+    for (int i = 1; i <= maxIterations; i++) {\n+        term *= x / (a + i);\n+        sum += term;\n+        if (Math.abs(term / sum) < epsilon) {\n+            return sum * Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a));\n+        }\n+    }\n+    throw new RuntimeException(\"Gamma regularized series failed to converge after \" + maxIterations + \" iterations\");\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}