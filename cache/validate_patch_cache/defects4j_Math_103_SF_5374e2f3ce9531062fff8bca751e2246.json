{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    if (Double.isNaN(x)) {\n        throw new MathException(\"Input is NaN\");\n    }\n    if (x == Double.NEGATIVE_INFINITY) {\n        return 0;\n    }\n    if (x == Double.POSITIVE_INFINITY) {\n        return 1;\n    }\n    double dev = x - mean;\n    if (Math.abs(dev) > 40 * standardDeviation) {\n        return dev < 0 ? 0 : 1;\n    }\n    double z = dev / (standardDeviation * Math.sqrt(2));\n    if (z < 0) {\n        return 0.5 * Erf.erfc(-z);\n    } else {\n        return 0.5 * (1 + Erf.erf(z));\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..c4dccb747 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -105,10 +105,27 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * x is more than 20 standard deviations from the mean, in which case the\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+public double cumulativeProbability(double x) throws MathException {\n+    if (Double.isNaN(x)) {\n+        throw new MathException(\"Input is NaN\");\n     }\n+    if (x == Double.NEGATIVE_INFINITY) {\n+        return 0;\n+    }\n+    if (x == Double.POSITIVE_INFINITY) {\n+        return 1;\n+    }\n+    double dev = x - mean;\n+    if (Math.abs(dev) > 40 * standardDeviation) {\n+        return dev < 0 ? 0 : 1;\n+    }\n+    double z = dev / (standardDeviation * Math.sqrt(2));\n+    if (z < 0) {\n+        return 0.5 * Erf.erfc(-z);\n+    } else {\n+        return 0.5 * (1 + Erf.erf(z));\n+    }\n+}\n     \n     /**\n      * For this distribution, X, this method returns the critical point x, such",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}