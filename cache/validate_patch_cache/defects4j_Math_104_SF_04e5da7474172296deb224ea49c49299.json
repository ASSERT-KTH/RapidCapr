{
    "patch": "public static double regularizedGammaP(double a, double x) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n    if (x == 0.0) {\n        return 0.0;\n    }\n    if (x >= a + 1.0) {\n        // use regularizedGammaQ because it should converge faster in this case\n        return 1.0 - regularizedGammaQ(a, x);\n    }\n\n    final double logGammaA = Gamma.logGamma(a);\n    if (Double.isInfinite(logGammaA)) {\n        return Double.NaN;\n    }\n\n    final double n = 1000.0;\n    final double eps = 10e-15;\n    final double aeps = a * eps;\n    double gln = 0.0;\n    try {\n        gln = Gamma.logGamma(a);\n    } catch (final NumberFormatException ex) {\n        // Do nothing\n    }\n\n    double a_0 = 1.0;\n    double b_0 = x + a - 1.0;\n    double a_1 = x;\n    double b_1 = x + a;\n    double delta_1 = a * (b_0 - x) / b_1;\n\n    int i = 1;\n    for (; i < n; i++) {\n        final double a_i = (i + 1) * (a + i) * delta_1 - (i + a) * a_0;\n        final double b_i = (i + 1) * (b_0 + i) * delta_1 - (i + a) * b_0;\n\n        if (b_i != 0.0) {\n            final double factor = a_i / b_i;\n            final double p = Math.abs((delta_1 - factor) / factor);\n            if (p < eps) {\n                return Math.exp(a * Math.log(x) - x - gln) * delta_1;\n            }\n            delta_1 = factor;\n        }\n        a_0 = a_1;\n        a_1 = a_i;\n        b_0 = b_1;\n        b_1 = b_i;\n\n        if (Math.abs(a_i) > aeps || Math.abs(b_i) > aeps) {\n            a_0 /= aeps;\n            a_1 /= aeps;\n            b_0 /= aeps;\n            b_1 /= aeps;\n        }\n    }\n    throw new MaxCountExceededException(n);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..01f7d02f7 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,66 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+    if (x == 0.0) {\n+        return 0.0;\n+    }\n+    if (x >= a + 1.0) {\n+        // use regularizedGammaQ because it should converge faster in this case\n+        return 1.0 - regularizedGammaQ(a, x);\n+    }\n+\n+    final double logGammaA = Gamma.logGamma(a);\n+    if (Double.isInfinite(logGammaA)) {\n+        return Double.NaN;\n+    }\n+\n+    final double n = 1000.0;\n+    final double eps = 10e-15;\n+    final double aeps = a * eps;\n+    double gln = 0.0;\n+    try {\n+        gln = Gamma.logGamma(a);\n+    } catch (final NumberFormatException ex) {\n+        // Do nothing\n+    }\n+\n+    double a_0 = 1.0;\n+    double b_0 = x + a - 1.0;\n+    double a_1 = x;\n+    double b_1 = x + a;\n+    double delta_1 = a * (b_0 - x) / b_1;\n+\n+    int i = 1;\n+    for (; i < n; i++) {\n+        final double a_i = (i + 1) * (a + i) * delta_1 - (i + a) * a_0;\n+        final double b_i = (i + 1) * (b_0 + i) * delta_1 - (i + a) * b_0;\n+\n+        if (b_i != 0.0) {\n+            final double factor = a_i / b_i;\n+            final double p = Math.abs((delta_1 - factor) / factor);\n+            if (p < eps) {\n+                return Math.exp(a * Math.log(x) - x - gln) * delta_1;\n+            }\n+            delta_1 = factor;\n+        }\n+        a_0 = a_1;\n+        a_1 = a_i;\n+        b_0 = b_1;\n+        b_1 = b_i;\n+\n+        if (Math.abs(a_i) > aeps || Math.abs(b_i) > aeps) {\n+            a_0 /= aeps;\n+            a_1 /= aeps;\n+            b_0 /= aeps;\n+            b_1 /= aeps;\n+        }\n+    }\n+    throw new MaxCountExceededException(n);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}