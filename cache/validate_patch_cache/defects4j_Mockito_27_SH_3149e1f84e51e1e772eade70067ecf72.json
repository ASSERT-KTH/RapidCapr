{
    "patch": "        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        \n        Enhancer enhancer = new Enhancer();\n        enhancer.setSuperclass(mock.getClass());\n        enhancer.setInterfaces(new Class[] { Factory.class });\n        Callback[] callbacks = new Callback[] { newFilter };\n        enhancer.setCallbacks(callbacks);\n        Object proxiedObject = enhancer.create();\n\n        Field field = ReflectionUtils.getAllFields(mock.getClass()).stream()\n                .filter(f -> f.getDeclaringClass().isAssignableFrom(mock.getClass()) && Factory.class.isAssignableFrom(f.getType()))\n                .findFirst()\n                .orElseThrow(() -> new IllegalStateException(\"Mock object does not contain field of type Factory\"));\n\n        ReflectionUtils.makeAccessible(field);\n        ReflectionUtils.setField(field, mock, proxiedObject);",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..10a8fb075 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,10 +59,26 @@ public class MockUtil {\n         return mock;\n     }\n \n+\n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        \n+        Enhancer enhancer = new Enhancer();\n+        enhancer.setSuperclass(mock.getClass());\n+        enhancer.setInterfaces(new Class[] { Factory.class });\n+        Callback[] callbacks = new Callback[] { newFilter };\n+        enhancer.setCallbacks(callbacks);\n+        Object proxiedObject = enhancer.create();\n+\n+        Field field = ReflectionUtils.getAllFields(mock.getClass()).stream()\n+                .filter(f -> f.getDeclaringClass().isAssignableFrom(mock.getClass()) && Factory.class.isAssignableFrom(f.getType()))\n+                .findFirst()\n+                .orElseThrow(() -> new IllegalStateException(\"Mock object does not contain field of type Factory\"));\n+\n+        ReflectionUtils.makeAccessible(field);\n+        ReflectionUtils.setField(field, mock, proxiedObject);\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: lambda expressions are not supported in -source 1.5",
    "test_result": "ERROR"
}