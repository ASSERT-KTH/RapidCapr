{
    "patch": "        if (!ref.isSimpleAssignmentToName()) {\n          return false;\n        }\n\n        BasicBlock curBlock = ref.getBasicBlock();\n        while (curBlock != null && !curBlock.isFunction) {\n          if (curBlock.isLoop) {\n            if (!curBlock.equals(block)) {\n              return false;\n            }\n            // Now we're looking for exactly 1 assignment in the loop block.\n            int assignmentCount = 0;\n            for (Reference innerRef : curBlock.getReferences()) {\n              if (innerRef.isDeclaration() &&\n                  innerRef.isSimpleAssignmentToName() &&\n                  innerRef.getName().equals(ref.getName())) {\n                assignmentCount++;\n              }\n            }\n            if (assignmentCount > 1) {\n              return false;\n            }\n          }\n          curBlock = curBlock.getParent();\n        }\n        return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..47844c8f 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,32 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (!ref.isSimpleAssignmentToName()) {\n+          return false;\n+        }\n+\n+        BasicBlock curBlock = ref.getBasicBlock();\n+        while (curBlock != null && !curBlock.isFunction) {\n+          if (curBlock.isLoop) {\n+            if (!curBlock.equals(block)) {\n+              return false;\n+            }\n+            // Now we're looking for exactly 1 assignment in the loop block.\n+            int assignmentCount = 0;\n+            for (Reference innerRef : curBlock.getReferences()) {\n+              if (innerRef.isDeclaration() &&\n+                  innerRef.isSimpleAssignmentToName() &&\n+                  innerRef.getName().equals(ref.getName())) {\n+                assignmentCount++;\n+              }\n+            }\n+            if (assignmentCount > 1) {\n+              return false;\n+            }\n+          }\n+          curBlock = curBlock.getParent();\n+        }\n+        return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}