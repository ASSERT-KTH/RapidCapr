{
    "patch": "      if (NodeUtil.isGet(parent) && parent.getFirstChild().getType() == Token.GETPROP) {\n        String propName = parent.getLastChild().getString();\n        if (propName.equals(\"prototype\")) {\n          return false;\n        }\n        Node obj = parent.getFirstChild().getFirstChild();\n        if (obj != null && obj.matchesQualifiedName(\"window\") || obj.matchesQualifiedName(\"global\")) {\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..7c5d29c5 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,15 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent) && parent.getFirstChild().getType() == Token.GETPROP) {\n+        String propName = parent.getLastChild().getString();\n+        if (propName.equals(\"prototype\")) {\n+          return false;\n+        }\n+        Node obj = parent.getFirstChild().getFirstChild();\n+        if (obj != null && obj.matchesQualifiedName(\"window\") || obj.matchesQualifiedName(\"global\")) {\n+          return false;\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}