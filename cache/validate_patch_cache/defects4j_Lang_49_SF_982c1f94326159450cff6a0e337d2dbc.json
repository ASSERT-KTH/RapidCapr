{
    "patch": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return Fraction.ZERO;\n        }\n\n        int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));\n        int newNumerator = numerator / gcd;\n        int newDenominator = denominator / gcd;\n\n        if (newDenominator < 0) {\n            newNumerator *= -1;\n            newDenominator *= -1;\n        }\n\n        return new Fraction(newNumerator, newDenominator);\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..e6803e31 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,11 +463,20 @@ public final class Fraction extends Number implements Comparable {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n+        if (numerator == 0) {\n+            return Fraction.ZERO;\n+        }\n+\n+        int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));\n+        int newNumerator = numerator / gcd;\n+        int newDenominator = denominator / gcd;\n+\n+        if (newDenominator < 0) {\n+            newNumerator *= -1;\n+            newDenominator *= -1;\n         }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+\n+        return new Fraction(newNumerator, newDenominator);\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<-2/3> was not:<-2/3>",
    "test_result": "FAIL"
}