{
    "patch": "    public Dfp multiply(final int x) {\n        if (isNaN()) {\n            return newInstance(this);\n        }\n        if (x == 0) {\n            return getZero();\n        }\n        if (x == 1) {\n            return newInstance(this);\n        }\n        final DfpField field = getField();\n        final int q = intValue();\n        final int r = getRadixDigits() - q;\n        if (x < field.getTenRadix()) {\n            final Dfp product = newInstance(getField(), 0);\n            final Dfp xi = newInstance(x);\n            final Dfp thisi = newInstance(this);\n            while (!xi.isZero()) {\n                if (xi.and(1) != 0) {\n                    product.add(thisi);\n                }\n                thisi.shiftLeft();\n                xi.shiftRight();\n            }\n            product.shiftLeft(q);\n            product.shiftRight(r);\n            return product;\n        }\n        final int[] product = new int[2 * r];\n        final int[] factor = DfpUtilities.convertToBase(x, getRadix(), product.length);\n        int digit = field.getRadixDigits() - 1;\n        int factorLength = factor.length - 1;\n        while ((digit > r - 1) && (factorLength >= 0)) {\n            digit -= factor[factorLength] == 0 ? 1 : DfpField.getRadixDigits(factor[factorLength]);\n            factorLength--;\n        }\n        final int[] carry = new int[1];\n        int count;\n        for (count = 0; count < r; count++) {\n            int sum = carry[0];\n            int limit = Math.min(factorLength, count + (r - digit));\n            int zcount = count - (r - digit);\n            while (zcount <= limit) {\n                sum += factor[factorLength--] * getDigit(zcount++);\n            }\n            product[count] = sum % getRadix();\n            carry[0] = sum / getRadix();\n        }\n        while ((carry[0] != 0) && (count < product.length)) {\n            int sum = carry[0] + product[count];\n            product[count++] = sum % getRadix();\n            carry[0] = sum / getRadix();\n        }\n        final Dfp result = newInstance(field, this);\n        result.setDigits(product, r);\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..05d7b8eda 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,61 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+        if (isNaN()) {\n+            return newInstance(this);\n+        }\n+        if (x == 0) {\n+            return getZero();\n+        }\n+        if (x == 1) {\n+            return newInstance(this);\n+        }\n+        final DfpField field = getField();\n+        final int q = intValue();\n+        final int r = getRadixDigits() - q;\n+        if (x < field.getTenRadix()) {\n+            final Dfp product = newInstance(getField(), 0);\n+            final Dfp xi = newInstance(x);\n+            final Dfp thisi = newInstance(this);\n+            while (!xi.isZero()) {\n+                if (xi.and(1) != 0) {\n+                    product.add(thisi);\n+                }\n+                thisi.shiftLeft();\n+                xi.shiftRight();\n+            }\n+            product.shiftLeft(q);\n+            product.shiftRight(r);\n+            return product;\n+        }\n+        final int[] product = new int[2 * r];\n+        final int[] factor = DfpUtilities.convertToBase(x, getRadix(), product.length);\n+        int digit = field.getRadixDigits() - 1;\n+        int factorLength = factor.length - 1;\n+        while ((digit > r - 1) && (factorLength >= 0)) {\n+            digit -= factor[factorLength] == 0 ? 1 : DfpField.getRadixDigits(factor[factorLength]);\n+            factorLength--;\n+        }\n+        final int[] carry = new int[1];\n+        int count;\n+        for (count = 0; count < r; count++) {\n+            int sum = carry[0];\n+            int limit = Math.min(factorLength, count + (r - digit));\n+            int zcount = count - (r - digit);\n+            while (zcount <= limit) {\n+                sum += factor[factorLength--] * getDigit(zcount++);\n+            }\n+            product[count] = sum % getRadix();\n+            carry[0] = sum / getRadix();\n+        }\n+        while ((carry[0] != 0) && (count < product.length)) {\n+            int sum = carry[0] + product[count];\n+            product[count++] = sum % getRadix();\n+            carry[0] = sum / getRadix();\n+        }\n+        final Dfp result = newInstance(field, this);\n+        result.setDigits(product, r);\n+        return result;\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}