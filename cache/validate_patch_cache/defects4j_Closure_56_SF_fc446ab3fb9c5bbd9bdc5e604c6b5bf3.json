{
    "patch": "  public String getLine(int lineNumber) {\n    String js = \"\";\n    try {\n      // NOTE(nicksantos): Right now, this is optimized for few warnings.\n      // This is probably the right trade-off, but will be slow if there\n      // are lots of warnings in one file.\n      js = getCode();\n    } catch (IOException e) {\n      return null;\n    }\n\n    int pos = 0;\n    int startLine = 1;\n\n    // If we've saved a previous offset and it's for a line less than the\n    // one we're searching for, then start at that point.\n    if (lineNumber >= lastLine) {\n      pos = lastOffset;\n      startLine = lastLine;\n    }\n\n    for (int n = startLine; n < lineNumber; n++) {\n      int nextpos = js.indexOf('\\n', pos);\n      if (nextpos == -1) {\n        // Check if pos reaches the end of file, then return null\n        if (pos == js.length()) {\n          return null;\n        } else {\n           // if not, return the contents between pos and the end of file.\n          return js.substring(pos);\n        }\n      }\n      pos = nextpos + 1;\n    }\n\n    // Remember this offset for the next search we do.\n    lastOffset = pos;\n    lastLine = lineNumber;\n\n    // Get the next position of the new line character\n    int nextpos = js.indexOf('\\n', pos);\n\n    if (nextpos == -1) {\n      // Check if pos reaches the end of file, then return null\n      if (pos == js.length()) {\n        return null;\n      } else {\n         // if not, return the contents between pos and the end of file.\n        return js.substring(pos);\n      }\n    } else {\n      // Otherwise, return the string between pos and nextpos\n      return js.substring(pos, nextpos);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/SourceFile.java b/src/com/google/javascript/jscomp/SourceFile.java\nindex fc0cf3fc..d5c7dd03 100644\n--- a/src/com/google/javascript/jscomp/SourceFile.java\n+++ b/src/com/google/javascript/jscomp/SourceFile.java\n@@ -226,7 +226,13 @@ public class SourceFile implements StaticSourceFile, Serializable {\n     for (int n = startLine; n < lineNumber; n++) {\n       int nextpos = js.indexOf('\\n', pos);\n       if (nextpos == -1) {\n-        return null;\n+        // Check if pos reaches the end of file, then return null\n+        if (pos == js.length()) {\n+          return null;\n+        } else {\n+           // if not, return the contents between pos and the end of file.\n+          return js.substring(pos);\n+        }\n       }\n       pos = nextpos + 1;\n     }\n@@ -235,13 +241,20 @@ public class SourceFile implements StaticSourceFile, Serializable {\n     lastOffset = pos;\n     lastLine = lineNumber;\n \n-    if (js.indexOf('\\n', pos) == -1) {\n-      // If next new line cannot be found, there are two cases\n-      // 1. pos already reaches the end of file, then null should be returned\n-      // 2. otherwise, return the contents between pos and the end of file.\n+    // Get the next position of the new line character\n+    int nextpos = js.indexOf('\\n', pos);\n+\n+    if (nextpos == -1) {\n+      // Check if pos reaches the end of file, then return null\n+      if (pos == js.length()) {\n         return null;\n+      } else {\n+         // if not, return the contents between pos and the end of file.\n+        return js.substring(pos);\n+      }\n     } else {\n-      return js.substring(pos, js.indexOf('\\n', pos));\n+      // Otherwise, return the string between pos and nextpos\n+      return js.substring(pos, nextpos);\n     }\n   }\n ",
    "result_reason": "junit.framework.ComparisonFailure: expected:<null> but was:<foo2:third line>",
    "test_result": "FAIL"
}