{
    "patch": "public static double[] bracket(UnivariateRealFunction function, double initial,\n            double lowerBound, double upperBound, int maximumIterations)\n            throws ConvergenceException, FunctionEvaluationException {\n        if (function == null) {\n            throw new MathIllegalArgumentException(LocalizedFormats.FUNCTION, \"null\");\n        }\n        if (maximumIterations <= 0) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_MAX_ITERATIONS, maximumIterations);\n        }\n        if (initial < lowerBound || initial > upperBound) {\n            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS,\n                    initial, lowerBound, upperBound);\n        }\n        double[] bracket = new double[3];\n        bracket[0] = lowerBound; // left limit\n        bracket[1] = initial; // right limit\n        bracket[2] = Double.NaN; // Middle limit\n        int numIterations = 0;\n        while (bracket[2] != bracket[0] && bracket[2] != bracket[1] && numIterations < maximumIterations) {\n            bracket[2] = (bracket[0] + bracket[1]) / 2;\n            final double fMid = function.value(bracket[2]);\n            if (fMid == 0) {\n                //luckily we found an exact solution at the middle point\n                return new double[]{bracket[2], bracket[2]};\n            }\n            if (fMid * function.value(bracket[0]) > 0) {\n                bracket[0] = bracket[2];\n            } else {\n                bracket[1] = bracket[2];\n            }\n            numIterations++;\n        }\n        if (numIterations >= maximumIterations) {\n            throw new ConvergenceException(LocalizedFormats.MAXIMAL_ITERATIONS_EXCEEDED, maximumIterations);\n        }\n\n        if (Double.isNaN(bracket[2])) {\n            //last attempt to find an exact f(x) = 0 solution before throwing an exception.    \n            final double fA = function.value(bracket[0]);\n            if (fA == 0) {\n                return new double[]{bracket[0], bracket[0]};\n            }\n            final double fB = function.value(bracket[1]);\n            if (fB == 0) {\n                return new double[]{bracket[1], bracket[1]};\n            }\n            throw new ConvergenceException(LocalizedFormats.FAILED_BRACKETING,\n                    bracket[0], bracket[1],\n                    function.value(bracket[0]),\n                    function.value(bracket[1]));\n        }\n\n        return new double[]{bracket[0], bracket[1]};\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..b04335303 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,49 +162,59 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n+public static double[] bracket(UnivariateRealFunction function, double initial,\n+            double lowerBound, double upperBound, int maximumIterations)\n+            throws ConvergenceException, FunctionEvaluationException {\n         if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n+            throw new MathIllegalArgumentException(LocalizedFormats.FUNCTION, \"null\");\n         }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n+        if (maximumIterations <= 0) {\n+            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_MAX_ITERATIONS, maximumIterations);\n         }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n+        if (initial < lowerBound || initial > upperBound) {\n+            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS,\n+                    initial, lowerBound, upperBound);\n         }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n-            \n-            fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+        double[] bracket = new double[3];\n+        bracket[0] = lowerBound; // left limit\n+        bracket[1] = initial; // right limit\n+        bracket[2] = Double.NaN; // Middle limit\n+        int numIterations = 0;\n+        while (bracket[2] != bracket[0] && bracket[2] != bracket[1] && numIterations < maximumIterations) {\n+            bracket[2] = (bracket[0] + bracket[1]) / 2;\n+            final double fMid = function.value(bracket[2]);\n+            if (fMid == 0) {\n+                //luckily we found an exact solution at the middle point\n+                return new double[]{bracket[2], bracket[2]};\n+            }\n+            if (fMid * function.value(bracket[0]) > 0) {\n+                bracket[0] = bracket[2];\n+            } else {\n+                bracket[1] = bracket[2];\n+            }\n+            numIterations++;\n+        }\n+        if (numIterations >= maximumIterations) {\n+            throw new ConvergenceException(LocalizedFormats.MAXIMAL_ITERATIONS_EXCEEDED, maximumIterations);\n         }\n-        \n-        return new double[]{a, b};\n+\n+        if (Double.isNaN(bracket[2])) {\n+            //last attempt to find an exact f(x) = 0 solution before throwing an exception.    \n+            final double fA = function.value(bracket[0]);\n+            if (fA == 0) {\n+                return new double[]{bracket[0], bracket[0]};\n+            }\n+            final double fB = function.value(bracket[1]);\n+            if (fB == 0) {\n+                return new double[]{bracket[1], bracket[1]};\n+            }\n+            throw new ConvergenceException(LocalizedFormats.FAILED_BRACKETING,\n+                    bracket[0], bracket[1],\n+                    function.value(bracket[0]),\n+                    function.value(bracket[1]));\n+        }\n+\n+        return new double[]{bracket[0], bracket[1]};\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}