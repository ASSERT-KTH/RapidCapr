{
    "patch": "final boolean dstBound = offsetLocal != offsetAdjusted;\nif (dstBound) {\n    final long prevLocal = previousTransition(instantAdjusted);\n    final long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n    if (prevLocal != prevAdjusted) {\n        final int newOffsetAdjusted = getOffset(prevLocal);\n        final boolean newDstBound = offsetLocal != newOffsetAdjusted;\n        if (newDstBound) {\n            final long nextLocal = nextTransition(prevLocal);\n            final long nextAdjusted = nextTransition(instantLocal - newOffsetAdjusted);\n            if (nextLocal != nextAdjusted) {\n                return offsetLocal;\n            } else {\n                return newOffsetAdjusted;\n            }\n        } else {\n            return newOffsetAdjusted;\n        }\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..45544599 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,27 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+final boolean dstBound = offsetLocal != offsetAdjusted;\n+if (dstBound) {\n+    final long prevLocal = previousTransition(instantAdjusted);\n+    final long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+    if (prevLocal != prevAdjusted) {\n+        final int newOffsetAdjusted = getOffset(prevLocal);\n+        final boolean newDstBound = offsetLocal != newOffsetAdjusted;\n+        if (newDstBound) {\n+            final long nextLocal = nextTransition(prevLocal);\n+            final long nextAdjusted = nextTransition(instantLocal - newOffsetAdjusted);\n+            if (nextLocal != nextAdjusted) {\n+                return offsetLocal;\n+            } else {\n+                return newOffsetAdjusted;\n+            }\n+        } else {\n+            return newOffsetAdjusted;\n+        }\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}