{
    "patch": "        int idx = 1;\n        while (count < index) {\n            count += idx;\n            ++idx;\n        }\n        --idx;\n        count -= idx;\n        for (int i = last-1; i >= 0; i--) {\n            // Fix off-by-one error\n            int pos = count % uniCounterOffset[i];\n            count = count / uniCounterOffset[i];\n            indices[i] = pos;\n        }\n        indices[last] = count;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..0124d08bc 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -240,7 +240,14 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             ++idx;\n         }\n         --idx;\n-        indices[last] = idx;\n+        count -= idx;\n+        for (int i = last-1; i >= 0; i--) {\n+            // Fix off-by-one error\n+            int pos = count % uniCounterOffset[i];\n+            count = count / uniCounterOffset[i];\n+            indices[i] = pos;\n+        }\n+        indices[last] = count;\n \n         return indices;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: Wrong multidimensional index for [1][2] expected:<1> but was:<0>",
    "test_result": "FAIL"
}