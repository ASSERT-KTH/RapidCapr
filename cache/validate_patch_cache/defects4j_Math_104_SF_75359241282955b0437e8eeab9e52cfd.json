{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.Pair;\nimport org.apache.commons.math3.util.FastMath;\n\npublic class GammaFunction {\n\n    public static double regularizedGamma(double a, double x) {\n        final double LOG_MAX_VALUE = FastMath.log(Double.MAX_VALUE);\n        final double SMALL = 10e-15;\n        final double LARGE = 10e15;\n        if (a <= 0.0 || x < 0.0) {\n            throw new IllegalArgumentException();\n        } else if (x == 0.0) {\n            return 0.0;\n        } else if (x > a + LARGE) {\n            return 1.0;\n        } else {\n            final boolean isSmall = x < a + 1;\n            final double b = x + (isSmall ? 1.0 : 0.0) - a;\n            final double G = 607.0 / 128.0;\n            final double[] P = {0.99999999999999709182, 57.156235665862923517,\n                                -59.597960355475491248, 14.136097974741747174,\n                                -0.49191381609762019978, .33994649984811888699e-4,\n                                .46523628927048575665e-4, -.98374475304879564677e-4,\n                                .15808870322491248884e-3, -.21026444172410488319e-3,\n                                .21743961811521264320e-3, -.16431810653676389022e-3,\n                                .84418223983852743293e-4, -.26190838401581408670e-4,\n                                .36899182659531622704e-5};\n            final double[] Q = {57.156235665862923517, -59.597960355475491248,\n                                14.136097974741747174, -0.49191381609762019978,\n                                .33994649984811888699e-4, .46523628927048575665e-4,\n                                -.98374475304879564677e-4, .15808870322491248884e-3,\n                                -.21026444172410488319e-3, .21743961811521264320e-3,\n                                -.16431810653676389022e-3, .84418223983852743293e-4,\n                                -.26190838401581408670e-4, .36899182659531622704e-5,\n                                0.0};\n            double result, a0, a1, a2, y = 0.0, z = 0.0;\n            int i;\n\n            // Case a is large.\n            if (x > a) {\n                final double denom = 1.0 / (b + G + 0.5);\n                a0 = (2 * FastMath.PI) * P[0];\n                a1 = G + P[1] / (b + 1.);\n                for (i = 2; i < P.length; i++) {\n                    a0 += P[i] / (a + i - 0.5);\n                    a1 += P[i] / (b + i - 0.5);\n                }\n                y = b + (0.5 * G) - 1.0;\n                z = denom * a1;\n                result = FastMath.sqrt(denom) * FastMath.exp(a0) * Gamma.gamma(a) * ContinuedFraction.regularizedFraction1(a, b);\n                result -= z * result;\n            } else {\n                final double denom = 1.0 / a;\n                a0 = (2 * FastMath.PI) * Q[0];\n                a1 = Q[1] / a;\n                for (i = 2; i < Q.length; i++) {\n                    a0 += Q[i] / (a + i - 0.5);\n                    a1 += Q[i] / (x + i - 1.0);\n                }\n                y = x - a + 0.5 * G - 1.0;\n                z = denom * a1;\n                result = FastMath.sqrt(denom) * FastMath.exp(a0) * (isSmall ? 1.0 : Gamma.gamma(a));\n                result *= ContinuedFraction.regularizedFraction2(a, b, x);\n                result += z * result;\n            }\n\n            // Fix up result at extreme ends.\n            if (Double.isInfinite(result)) {\n                if (x == Double.POSITIVE_INFINITY) {\n                    return 1.0;\n                } else if (x == Double.NEGATIVE_INFINITY || a == Double.POSITIVE_INFINITY) {\n                    return 0.0;\n                }\n            } else {\n                result = FastMath.min(result, 1.0);\n            }\n\n            // Series.\n            if (isSmall) {\n                double ackf = (y != 0.0) ? 1.0 : Double.NaN;\n                Pair<Double, Double> p = Gamma.series(a, x, ackf, SMALL);\n                result *= p.getFirst();\n                if (Double.isNaN(result)) {\n                    throw new ArithmeticException();\n                }\n                result += p.getSecond();\n            }\n\n            return result;\n        }\n    }\n\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..fba0b44b1 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,100 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.Pair;\n+import org.apache.commons.math3.util.FastMath;\n+\n+public class GammaFunction {\n+\n+    public static double regularizedGamma(double a, double x) {\n+        final double LOG_MAX_VALUE = FastMath.log(Double.MAX_VALUE);\n+        final double SMALL = 10e-15;\n+        final double LARGE = 10e15;\n+        if (a <= 0.0 || x < 0.0) {\n+            throw new IllegalArgumentException();\n+        } else if (x == 0.0) {\n+            return 0.0;\n+        } else if (x > a + LARGE) {\n+            return 1.0;\n+        } else {\n+            final boolean isSmall = x < a + 1;\n+            final double b = x + (isSmall ? 1.0 : 0.0) - a;\n+            final double G = 607.0 / 128.0;\n+            final double[] P = {0.99999999999999709182, 57.156235665862923517,\n+                                -59.597960355475491248, 14.136097974741747174,\n+                                -0.49191381609762019978, .33994649984811888699e-4,\n+                                .46523628927048575665e-4, -.98374475304879564677e-4,\n+                                .15808870322491248884e-3, -.21026444172410488319e-3,\n+                                .21743961811521264320e-3, -.16431810653676389022e-3,\n+                                .84418223983852743293e-4, -.26190838401581408670e-4,\n+                                .36899182659531622704e-5};\n+            final double[] Q = {57.156235665862923517, -59.597960355475491248,\n+                                14.136097974741747174, -0.49191381609762019978,\n+                                .33994649984811888699e-4, .46523628927048575665e-4,\n+                                -.98374475304879564677e-4, .15808870322491248884e-3,\n+                                -.21026444172410488319e-3, .21743961811521264320e-3,\n+                                -.16431810653676389022e-3, .84418223983852743293e-4,\n+                                -.26190838401581408670e-4, .36899182659531622704e-5,\n+                                0.0};\n+            double result, a0, a1, a2, y = 0.0, z = 0.0;\n+            int i;\n+\n+            // Case a is large.\n+            if (x > a) {\n+                final double denom = 1.0 / (b + G + 0.5);\n+                a0 = (2 * FastMath.PI) * P[0];\n+                a1 = G + P[1] / (b + 1.);\n+                for (i = 2; i < P.length; i++) {\n+                    a0 += P[i] / (a + i - 0.5);\n+                    a1 += P[i] / (b + i - 0.5);\n+                }\n+                y = b + (0.5 * G) - 1.0;\n+                z = denom * a1;\n+                result = FastMath.sqrt(denom) * FastMath.exp(a0) * Gamma.gamma(a) * ContinuedFraction.regularizedFraction1(a, b);\n+                result -= z * result;\n+            } else {\n+                final double denom = 1.0 / a;\n+                a0 = (2 * FastMath.PI) * Q[0];\n+                a1 = Q[1] / a;\n+                for (i = 2; i < Q.length; i++) {\n+                    a0 += Q[i] / (a + i - 0.5);\n+                    a1 += Q[i] / (x + i - 1.0);\n+                }\n+                y = x - a + 0.5 * G - 1.0;\n+                z = denom * a1;\n+                result = FastMath.sqrt(denom) * FastMath.exp(a0) * (isSmall ? 1.0 : Gamma.gamma(a));\n+                result *= ContinuedFraction.regularizedFraction2(a, b, x);\n+                result += z * result;\n+            }\n+\n+            // Fix up result at extreme ends.\n+            if (Double.isInfinite(result)) {\n+                if (x == Double.POSITIVE_INFINITY) {\n+                    return 1.0;\n+                } else if (x == Double.NEGATIVE_INFINITY || a == Double.POSITIVE_INFINITY) {\n+                    return 0.0;\n+                }\n+            } else {\n+                result = FastMath.min(result, 1.0);\n+            }\n+\n+            // Series.\n+            if (isSmall) {\n+                double ackf = (y != 0.0) ? 1.0 : Double.NaN;\n+                Pair<Double, Double> p = Gamma.series(a, x, ackf, SMALL);\n+                result *= p.getFirst();\n+                if (Double.isNaN(result)) {\n+                    throw new ArithmeticException();\n+                }\n+                result += p.getSecond();\n+            }\n+\n+            return result;\n+        }\n+    }\n+\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}