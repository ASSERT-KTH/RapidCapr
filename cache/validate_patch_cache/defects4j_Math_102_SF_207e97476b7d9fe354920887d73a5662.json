{
    "patch": "            throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\n                    \"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                \"observed counts must be non-negative and expected counts must be postive\");\n        }\n        double sumSq = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            double dev = ((double) observed[i] - expected[i]);\n            if (expected[i] == 0.0 && dev != 0.0) {\n                throw new IllegalArgumentException(\"Illegal argument: expected[\" + i + \"] = 0, but observed[\" + i + \"] != 0\");\n            }\n            sumSq += dev * dev / expected[i];",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\nindex c87b0101f..044381252 100644\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n@@ -61,8 +61,7 @@ public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n      * @throws IllegalArgumentException if preconditions are not met\n      * or length is less than 2\n      */\n-    public double chiSquare(double[] expected, long[] observed)\n-        throws IllegalArgumentException {\n+            throws IllegalArgumentException {\n         if ((expected.length < 2) || (expected.length != observed.length)) {\n             throw new IllegalArgumentException(\n                     \"observed, expected array lengths incorrect\");\n@@ -72,13 +71,12 @@ public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n                 \"observed counts must be non-negative and expected counts must be postive\");\n         }\n         double sumSq = 0.0d;\n-        double dev = 0.0d;\n         for (int i = 0; i < observed.length; i++) {\n-                dev = ((double) observed[i] - expected[i]);\n-                sumSq += dev * dev / expected[i];\n-        }\n-        return sumSq;\n-    }\n+            double dev = ((double) observed[i] - expected[i]);\n+            if (expected[i] == 0.0 && dev != 0.0) {\n+                throw new IllegalArgumentException(\"Illegal argument: expected[\" + i + \"] = 0, but observed[\" + i + \"] != 0\");\n+            }\n+            sumSq += dev * dev / expected[i];\n \n     /**\n      * {@inheritDoc}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}