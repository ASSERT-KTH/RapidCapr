{
    "patch": "public Iterator<Chromosome> iterator() {\n    return new Iterator<Chromosome>() {\n        private int currentIndex = 0;\n        \n        @Override\n        public boolean hasNext() {\n            return currentIndex < chromosomes.size();\n        }\n        \n        @Override\n        public Chromosome next() {\n            return chromosomes.get(currentIndex++);\n        }\n        \n        @Override\n        public void remove() {\n            throw new UnsupportedOperationException();\n        }\n    };\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java b/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\nindex 1eb005316..e499b71dd 100644\n--- a/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\n+++ b/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\n@@ -205,7 +205,24 @@ public abstract class ListPopulation implements Population {\n      *\n      * @return chromosome iterator\n      */\n-    public Iterator<Chromosome> iterator() {\n-        return chromosomes.iterator();\n-    }\n+public Iterator<Chromosome> iterator() {\n+    return new Iterator<Chromosome>() {\n+        private int currentIndex = 0;\n+        \n+        @Override\n+        public boolean hasNext() {\n+            return currentIndex < chromosomes.size();\n+        }\n+        \n+        @Override\n+        public Chromosome next() {\n+            return chromosomes.get(currentIndex++);\n+        }\n+        \n+        @Override\n+        public void remove() {\n+            throw new UnsupportedOperationException();\n+        }\n+    };\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}