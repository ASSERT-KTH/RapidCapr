{
    "patch": "public void matchConstraint(ObjectType constraintObj) {\n  // We only want to match constraints on anonymous types, records, and enums.\n  if (constraintObj.hasReferenceName() || constraintObj.isFunctionType() ||\n      constraintObj.isNamedType() || !constraintObj.isObject()) {\n    return;\n  }\n\n  // Handle the case where the constraint object is a record type.\n  //\n  // param constraintObj {{prop: (number|undefined)}}\n  // function f(constraintObj) {}\n  // f({});\n  //\n  // We want to modify the object literal to match the constraint, by\n  // taking each property on the record and trying to match\n  // properties on this object.\n  if (constraintObj.isRecordType()) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!hasProperty(prop)) {\n          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n        }\n        defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n    return;\n  }\n\n  // Handle the case where the constraint object is an enum.\n  if (constraintObj.isEnumType()) {\n    ReferenceName enumName = constraintObj.getReferenceName();\n    if (!enumName.isObfuscatedName()) {\n      for (String enumProp : constraintObj.getOwnPropertyNames()) {\n        if (!isPropertyTypeDeclared(enumProp)) {\n          defineInferredProperty(enumProp, constraintObj, null);\n        }\n      }\n      return;\n    }\n  }\n\n  // Handle the case where the constraint object is an anonymous object type.\n  for (String prop : constraintObj.getOwnPropertyNames()) {\n    JSType propType = constraintObj.getPropertyType(prop);\n    if (!isPropertyTypeDeclared(prop)) {\n      JSType typeToInfer = propType;\n      if (!hasProperty(prop)) {\n        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n      }\n      defineInferredProperty(prop, typeToInfer, null);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..b3c38309 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,61 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+public void matchConstraint(ObjectType constraintObj) {\n+  // We only want to match constraints on anonymous types, records, and enums.\n+  if (constraintObj.hasReferenceName() || constraintObj.isFunctionType() ||\n+      constraintObj.isNamedType() || !constraintObj.isObject()) {\n+    return;\n+  }\n+\n+  // Handle the case where the constraint object is a record type.\n+  //\n+  // param constraintObj {{prop: (number|undefined)}}\n+  // function f(constraintObj) {}\n+  // f({});\n+  //\n+  // We want to modify the object literal to match the constraint, by\n+  // taking each property on the record and trying to match\n+  // properties on this object.\n+  if (constraintObj.isRecordType()) {\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+      JSType propType = constraintObj.getPropertyType(prop);\n+      if (!isPropertyTypeDeclared(prop)) {\n+        JSType typeToInfer = propType;\n+        if (!hasProperty(prop)) {\n+          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n+        }\n+        defineInferredProperty(prop, typeToInfer, null);\n+      }\n+    }\n+    return;\n+  }\n+\n+  // Handle the case where the constraint object is an enum.\n+  if (constraintObj.isEnumType()) {\n+    ReferenceName enumName = constraintObj.getReferenceName();\n+    if (!enumName.isObfuscatedName()) {\n+      for (String enumProp : constraintObj.getOwnPropertyNames()) {\n+        if (!isPropertyTypeDeclared(enumProp)) {\n+          defineInferredProperty(enumProp, constraintObj, null);\n+        }\n+      }\n+      return;\n+    }\n+  }\n+\n+  // Handle the case where the constraint object is an anonymous object type.\n+  for (String prop : constraintObj.getOwnPropertyNames()) {\n+    JSType propType = constraintObj.getPropertyType(prop);\n+    if (!isPropertyTypeDeclared(prop)) {\n+      JSType typeToInfer = propType;\n+      if (!hasProperty(prop)) {\n+        typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);\n+      }\n+      defineInferredProperty(prop, typeToInfer, null);\n+    }\n+  }\n+}\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}