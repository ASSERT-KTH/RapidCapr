{
    "patch": "        for (int i = 0; i < count; i++) {\n            SavedField savedField = savedFields[i];\n            if (resetFields && savedField.isSaved() == false) {\n                continue;\n            }\n            DateTimeField field = savedField.getField();\n            int parsedValue = savedField.getValue();\n            try {\n                millis = field.set(millis, parsedValue);\n                if (millis < 0) {\n                    throw new IllegalFieldValueException(field.getType(), Long.valueOf(parsedValue), null, null);\n                }\n            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..46e313f8 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,25 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        for (int i = 0; i < count; i++) {\n+            SavedField savedField = savedFields[i];\n+            if (resetFields && savedField.isSaved() == false) {\n+                continue;\n+            }\n+            DateTimeField field = savedField.getField();\n+            int parsedValue = savedField.getValue();\n+            try {\n+                millis = field.set(millis, parsedValue);\n+                if (millis < 0) {\n+                    throw new IllegalFieldValueException(field.getType(), Long.valueOf(parsedValue), null, null);\n+                }\n+            } catch (IllegalFieldValueException e) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                throw e;\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}