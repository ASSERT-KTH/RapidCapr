{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n\n    JSType constructorType = constructor.getJSType();\n    if (constructorType != null) {\n        constructorType = constructorType.restrictByNotNullOrUndefined();\n\n        // If we don't know anything, call the constructor with\n        // unknown arguments.\n        JSType type = getNativeType(UNKNOWN_TYPE);\n\n        // find the constructor function\n        if (constructorType.isFunctionType()) {\n            FunctionType ft = constructorType.toFunctionType();\n\n            // if constructorType is a NoObjectType,\n            // then toMaybeFunctionType will return null.\n            // But NoObjectType has a constructor, you can use to construct it.\n            if (ft != null && ft.isConstructor() && ft.getInstanceType() != null) {\n                type = ft.getInstanceType();\n            }\n        }\n\n        // Propagate type information to the arguments\n        for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n            scope = traverse(arg, scope);\n            arg.setJSType(getNativeType(UNKNOWN_TYPE).getLeastSupertype(type));\n        }\n        n.setJSType(type);\n    }\n    return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..52df308d 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,38 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n+\n     JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n     if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n+        constructorType = constructorType.restrictByNotNullOrUndefined();\n+\n+        // If we don't know anything, call the constructor with\n+        // unknown arguments.\n+        JSType type = getNativeType(UNKNOWN_TYPE);\n+\n+        // find the constructor function\n+        if (constructorType.isFunctionType()) {\n+            FunctionType ft = constructorType.toFunctionType();\n+\n+            // if constructorType is a NoObjectType,\n+            // then toMaybeFunctionType will return null.\n+            // But NoObjectType has a constructor, you can use to construct it.\n+            if (ft != null && ft.isConstructor() && ft.getInstanceType() != null) {\n+                type = ft.getInstanceType();\n+            }\n         }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+\n+        // Propagate type information to the arguments\n+        for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+            scope = traverse(arg, scope);\n+            arg.setJSType(getNativeType(UNKNOWN_TYPE).getLeastSupertype(type));\n         }\n-      }\n-    }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+        n.setJSType(type);\n     }\n     return scope;\n-  }\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}