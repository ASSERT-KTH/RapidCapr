{
    "patch": "import org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\npublic class TypedObjectCounter {\n\n  public static double getTypedPercent(String json) {\n    double total = 0;\n    double typed = 0;\n\n    try {\n      JSONArray jsonArray = new JSONArray(json);\n\n      for (int i = 0; i < jsonArray.length(); i++) {\n        JSONObject jsonObject = jsonArray.getJSONObject(i);\n\n        if (jsonObject != null && jsonObject.has(\"type\")) {\n          String type = jsonObject.getString(\"type\");\n          if (type != null && !type.isEmpty()) {\n            typed++;\n          }\n          total++;\n        }\n      }\n    } catch (JSONException e) {\n      e.printStackTrace();\n    }\n    if (total == 0) {\n      return 0.0;\n    }\n    return (typed / total) * 100;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..5d33ab55 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,39 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class TypedObjectCounter {\n+\n+  public static double getTypedPercent(String json) {\n+    double total = 0;\n+    double typed = 0;\n+\n+    try {\n+      JSONArray jsonArray = new JSONArray(json);\n+\n+      for (int i = 0; i < jsonArray.length(); i++) {\n+        JSONObject jsonObject = jsonArray.getJSONObject(i);\n+\n+        if (jsonObject != null && jsonObject.has(\"type\")) {\n+          String type = jsonObject.getString(\"type\");\n+          if (type != null && !type.isEmpty()) {\n+            typed++;\n+          }\n+          total++;\n+        }\n+      }\n+    } catch (JSONException e) {\n+      e.printStackTrace();\n+    }\n+    if (total == 0) {\n+      return 0.0;\n+    }\n+    return (typed / total) * 100;\n+  }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}