{
    "patch": "            // we need to ensure that time is always after the DST gap\n            // this happens naturally for positive offsets, but not for negative\n            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    int totalOffsetsGap = offsetLocal - offsetAdjusted;\n                    long instantTarget = nextAdjusted - totalOffsetsGap * DateUtils.MILLIS_PER_HOUR;\n                    int offsetFromTarget = getOffset(instantTarget);\n                    if (offsetFromTarget == offsetAdjusted) {\n                        return offsetFromTarget;\n                    } else if (offsetLocal == offsetFromTarget) {\n                        return offsetLocal;\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..f7ea3198 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,22 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            // we need to ensure that time is always after the DST gap\n+            // this happens naturally for positive offsets, but not for negative\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    int totalOffsetsGap = offsetLocal - offsetAdjusted;\n+                    long instantTarget = nextAdjusted - totalOffsetsGap * DateUtils.MILLIS_PER_HOUR;\n+                    int offsetFromTarget = getOffset(instantTarget);\n+                    if (offsetFromTarget == offsetAdjusted) {\n+                        return offsetFromTarget;\n+                    } else if (offsetLocal == offsetFromTarget) {\n+                        return offsetLocal;\n+                    }\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}