{
    "patch": "      if (functionType.getTypeOfThis() != null &&\n          (child.getPrevious() == null ||\n           (child.getPrevious().getToken() != Token.GETPROP &&\n            child.getPrevious().getToken() != Token.GETELEM))) {\n        report(t, n, INCORRECT_THIS_TYPE, childType.toString());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..9e76ae6d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,11 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.getTypeOfThis() != null &&\n+          (child.getPrevious() == null ||\n+           (child.getPrevious().getToken() != Token.GETPROP &&\n+            child.getPrevious().getToken() != Token.GETELEM))) {\n+        report(t, n, INCORRECT_THIS_TYPE, childType.toString());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}