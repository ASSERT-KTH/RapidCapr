{
    "patch": "    List<Node> references = NodeUtil.getFunctionBody(function).getFirstChild().getInputNodes();\n    List<String> referencedArgs = new ArrayList<>();\n    for (Node ref : references) {\n      if (ref.isName() && ref.getParent().isParamList()) {\n        referencedArgs.add(ref.getString());\n      }\n    }\n    Set<String> referencedArgsSet = new HashSet<>(referencedArgs);\n\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        if (!referencedArgsSet.contains(lastArg.getString())) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referencedArgsSet);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..fe1f8c44 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,30 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    List<Node> references = NodeUtil.getFunctionBody(function).getFirstChild().getInputNodes();\n+    List<String> referencedArgs = new ArrayList<>();\n+    for (Node ref : references) {\n+      if (ref.isName() && ref.getParent().isParamList()) {\n+        referencedArgs.add(ref.getString());\n+      }\n+    }\n+    Set<String> referencedArgsSet = new HashSet<>(referencedArgs);\n+\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        if (!referencedArgsSet.contains(lastArg.getString())) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referencedArgsSet);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}