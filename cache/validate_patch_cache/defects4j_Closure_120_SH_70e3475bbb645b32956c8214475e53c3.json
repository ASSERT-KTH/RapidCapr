{
    "patch": "  } else if (isInitializingAssignmentAt(index)) {\n    Reference maybeInit = references.get(index);\n    Preconditions.checkState(maybeInit.isSimpleAssignmentToName());\n    return maybeInit;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..740cc765 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,11 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+  } else if (isInitializingAssignmentAt(index)) {\n+    Reference maybeInit = references.get(index);\n+    Preconditions.checkState(maybeInit.isSimpleAssignmentToName());\n+    return maybeInit;\n+  }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}