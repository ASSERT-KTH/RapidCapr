{
    "patch": "            } else if (actualTypeArgument instanceof TypeVariable) {\n                TypeVariable typeVariable = (TypeVariable) actualTypeArgument;\n                Type resolvedType = contextualActualTypeParameters.get(typeVariable);\n                if (resolvedType == null) {\n                    Type[] bounds = typeVariable.getBounds();\n                    resolvedType = bounds[0];\n                    //If the type variable has multiple bounds, choose the first bound that is not itself, if possible.\n                    for (int j = 1; j < bounds.length && resolvedType.equals(actualTypeArgument); j++) {\n                        resolvedType = bounds[j];\n                    }\n                }\n                contextualActualTypeParameters.put(typeParameter, resolvedType);\n            } else {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..f990ef055 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,21 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+            } else if (actualTypeArgument instanceof TypeVariable) {\n+                TypeVariable typeVariable = (TypeVariable) actualTypeArgument;\n+                Type resolvedType = contextualActualTypeParameters.get(typeVariable);\n+                if (resolvedType == null) {\n+                    Type[] bounds = typeVariable.getBounds();\n+                    resolvedType = bounds[0];\n+                    //If the type variable has multiple bounds, choose the first bound that is not itself, if possible.\n+                    for (int j = 1; j < bounds.length && resolvedType.equals(actualTypeArgument); j++) {\n+                        resolvedType = bounds[j];\n+                    }\n+                }\n+                contextualActualTypeParameters.put(typeParameter, resolvedType);\n+            } else {\n+                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+            }\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}