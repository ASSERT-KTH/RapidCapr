{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n        // Don't traverse functions that are constructors or have the @this or @override annotation.\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n            return false;\n        }\n        // Don't traverse functions unless they would normally be able to have a @this annotation associated with them.\n        // e.g., var a = function() { }; // or function a() {} // or a.x = function() {};\n        int pType = parent.getType();\n        if (!(pType == Token.BLOCK ||\n                pType == Token.SCRIPT ||\n                pType == Token.NAME ||\n                pType == Token.ASSIGN ||\n                pType == Token.OBJECTLIT)) {\n            return false;\n        }\n    }\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n            // Always traverse the left side of the assignment. To handle nested assignments properly\n            // (e.g., (a = this).property = c;), assignLhsChild should not be overridden.\n            if (assignLhsChild == null) {\n                assignLhsChild = lhs;\n            }\n        } else {\n            if (lhs.getType() == Token.GETPROP) {\n                Node prop = lhs.getLastChild();\n                // Only traverse the right side if it's not an assignment to a prototype property or subproperty.\n                if (prop.getType() == Token.STRING &&\n                        prop.getString().equals(\"prototype\")) {\n                    return false;\n                }\n                // If the assignment is to a constructor's prototype property and the RHS is a function, skip over it,\n                // because we handle the function separately.\n                if (prop.getType() == Token.NAME && \"prototype\".equals(prop.getString()) && rhs.getType() == Token.FUNCTION) {\n                    return false;\n                }\n            } else if (lhs.getType() == Token.NAME && lhs.getQualifiedName() != null && lhs.getQualifiedName().endsWith(\".prototype\")) {\n                // Don't traverse the RHS of assignments to properties such as Foo.prototype. This is so that we don't\n                // try to create properties on objects that are certainly not the constructors.\n                return false;\n            }\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..64297632 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,56 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n-    }\n-\n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n+        // Don't traverse functions that are constructors or have the @this or @override annotation.\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n             return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+        }\n+        // Don't traverse functions unless they would normally be able to have a @this annotation associated with them.\n+        // e.g., var a = function() { }; // or function a() {} // or a.x = function() {};\n+        int pType = parent.getType();\n+        if (!(pType == Token.BLOCK ||\n+                pType == Token.SCRIPT ||\n+                pType == Token.NAME ||\n+                pType == Token.ASSIGN ||\n+                pType == Token.OBJECTLIT)) {\n             return false;\n-          }\n-      }\n+        }\n     }\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n \n+        if (n == lhs) {\n+            // Always traverse the left side of the assignment. To handle nested assignments properly\n+            // (e.g., (a = this).property = c;), assignLhsChild should not be overridden.\n+            if (assignLhsChild == null) {\n+                assignLhsChild = lhs;\n+            }\n+        } else {\n+            if (lhs.getType() == Token.GETPROP) {\n+                Node prop = lhs.getLastChild();\n+                // Only traverse the right side if it's not an assignment to a prototype property or subproperty.\n+                if (prop.getType() == Token.STRING &&\n+                        prop.getString().equals(\"prototype\")) {\n+                    return false;\n+                }\n+                // If the assignment is to a constructor's prototype property and the RHS is a function, skip over it,\n+                // because we handle the function separately.\n+                if (prop.getType() == Token.NAME && \"prototype\".equals(prop.getString()) && rhs.getType() == Token.FUNCTION) {\n+                    return false;\n+                }\n+            } else if (lhs.getType() == Token.NAME && lhs.getQualifiedName() != null && lhs.getQualifiedName().endsWith(\".prototype\")) {\n+                // Don't traverse the RHS of assignments to properties such as Foo.prototype. This is so that we don't\n+                // try to create properties on objects that are certainly not the constructors.\n+                return false;\n+            }\n+        }\n+    }\n     return true;\n-  }\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 46 expected:<0> but was:<1>",
    "test_result": "FAIL"
}