{
    "patch": "if (x == x1) {\n    // New approximation is same as previous one\n    if (FastMath.abs(f1) > FastMath.abs(f0)) {\n        // Use a contraction\n        final double x1New = 0.5 * (x + x1);\n        final double f1New = computeObjectiveValue(x1New);\n        if (FastMath.abs(f1) > FastMath.abs(f1New)) {\n            // Successful contraction\n            x0 = x1;\n            x1 = x1New;\n            f0 = f1;\n            f1 = f1New;\n        } else {\n            // Failed contraction\n            final double delta = FastMath.max(rtol * FastMath.abs(x1), atol);\n            if (inverted) {\n                x0 = FastMath.max(x0 - delta, getMin());\n            } else {\n                x1 = FastMath.min(x1 + delta, getMax());\n            }\n            f0 = computeObjectiveValue(x0);\n        }\n    } else {\n        // Use a bisection\n        final double delta = FastMath.max(rtol * FastMath.abs(x1), atol);\n        if (inverted) {\n            x0 = FastMath.max(x0 - delta, getMin());\n        } else {\n            x1 = FastMath.min(x1 + delta, getMax());\n        }\n        f0 = computeObjectiveValue(x0);\n    }\n} else {\n    // New approximation is different from previous one\n    if (f1 * fx < 0) {\n        // Signs are different\n        x0 = x1;\n        f0 = f1;\n        inverted = !inverted;\n    } else {\n        // Signs are same\n        switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            case REGULA_FALSI:\n                // Nothing.\n                break;\n            default:\n                throw new MathInternalError();\n        }\n    }\n    x1 = x;\n    f1 = fx;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e47d98204..9b4ca3d63 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -184,10 +184,64 @@ public abstract class BaseSecantSolver\n                     break;\n                 case REGULA_FALSI:\n                     // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+if (x == x1) {\n+    // New approximation is same as previous one\n+    if (FastMath.abs(f1) > FastMath.abs(f0)) {\n+        // Use a contraction\n+        final double x1New = 0.5 * (x + x1);\n+        final double f1New = computeObjectiveValue(x1New);\n+        if (FastMath.abs(f1) > FastMath.abs(f1New)) {\n+            // Successful contraction\n+            x0 = x1;\n+            x1 = x1New;\n+            f0 = f1;\n+            f1 = f1New;\n+        } else {\n+            // Failed contraction\n+            final double delta = FastMath.max(rtol * FastMath.abs(x1), atol);\n+            if (inverted) {\n+                x0 = FastMath.max(x0 - delta, getMin());\n+            } else {\n+                x1 = FastMath.min(x1 + delta, getMax());\n+            }\n+            f0 = computeObjectiveValue(x0);\n+        }\n+    } else {\n+        // Use a bisection\n+        final double delta = FastMath.max(rtol * FastMath.abs(x1), atol);\n+        if (inverted) {\n+            x0 = FastMath.max(x0 - delta, getMin());\n+        } else {\n+            x1 = FastMath.min(x1 + delta, getMax());\n+        }\n+        f0 = computeObjectiveValue(x0);\n+    }\n+} else {\n+    // New approximation is different from previous one\n+    if (f1 * fx < 0) {\n+        // Signs are different\n+        x0 = x1;\n+        f0 = f1;\n+        inverted = !inverted;\n+    } else {\n+        // Signs are same\n+        switch (method) {\n+            case ILLINOIS:\n+                f0 *= 0.5;\n+                break;\n+            case PEGASUS:\n+                f0 *= f1 / (f1 + fx);\n+                break;\n+            case REGULA_FALSI:\n+                // Nothing.\n+                break;\n+            default:\n+                throw new MathInternalError();\n+        }\n+    }\n+    x1 = x;\n+    f1 = fx;\n+}\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}