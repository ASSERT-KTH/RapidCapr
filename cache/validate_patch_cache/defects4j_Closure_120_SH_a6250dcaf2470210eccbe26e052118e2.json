{
    "patch": "     * @return Whether the variable is a constant as defined in externs.\n     */\n    boolean isExternConstant() {\n      if (!isDeclaredOrInferredConst()) {\n        return false;\n      }\n\n      Reference ref = getInitializingReferenceForConstants();\n      if (ref == null) {\n        return false;\n      }\n      if (!ref.isAssignedOnceInLifetime()) {\n        return false;\n      }\n      \n      // Look for a second assignment in this block.\n      for (int i = 0; i < references.size(); i++) {\n        Reference secondRef = references.get(i);\n        if (secondRef.getBasicBlock() == ref.getBasicBlock() && secondRef.isAssignment()) {\n          // If there's a second assignment in this block, this reference isn't the only one.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..82295016 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,26 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+     * @return Whether the variable is a constant as defined in externs.\n+     */\n+    boolean isExternConstant() {\n+      if (!isDeclaredOrInferredConst()) {\n+        return false;\n+      }\n+\n+      Reference ref = getInitializingReferenceForConstants();\n+      if (ref == null) {\n+        return false;\n+      }\n+      if (!ref.isAssignedOnceInLifetime()) {\n+        return false;\n+      }\n+      \n+      // Look for a second assignment in this block.\n+      for (int i = 0; i < references.size(); i++) {\n+        Reference secondRef = references.get(i);\n+        if (secondRef.getBasicBlock() == ref.getBasicBlock() && secondRef.isAssignment()) {\n+          // If there's a second assignment in this block, this reference isn't the only one.\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}