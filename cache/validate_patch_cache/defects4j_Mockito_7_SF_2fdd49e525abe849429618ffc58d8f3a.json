{
    "patch": "private void readTypeVariables() {\n    if (typeVariable == null) {\n        return; // or throw an exception as appropriate\n    }\n    Type[] bounds = typeVariable.getBounds();\n    registerTypeVariablesOn(bounds);\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument instanceof TypeVariable) {\n        TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArgument;\n        readTypeVariablesOnExtendingBounds(actualTypeVariable);\n    } else if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n}\n\nprivate void readTypeVariablesOnExtendingBounds(TypeVariable<?> typeVariable) {\n    Type[] bounds = typeVariable.getBounds();\n    registerTypeVariablesOn(bounds);\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument instanceof TypeVariable) {\n        TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArgument;\n        readTypeVariablesOnExtendingBounds(actualTypeVariable);\n    } else if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n}\n\nprivate void registerTypeVariablesOn(Type... types) {\n    for (Type type : types) {\n        if (type instanceof TypeVariable) {\n            TypeVariable<?> typeVariable = (TypeVariable<?>) type;\n            Type[] bounds = typeVariable.getBounds();\n            registerTypeVariablesOn(bounds);\n        } else if (type instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType) type;\n            Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n            registerTypeVariablesOn(actualTypeArguments);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..1755cf9a7 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,47 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    if (typeVariable == null) {\n+        return; // or throw an exception as appropriate\n+    }\n+    Type[] bounds = typeVariable.getBounds();\n+    registerTypeVariablesOn(bounds);\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument instanceof TypeVariable) {\n+        TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArgument;\n+        readTypeVariablesOnExtendingBounds(actualTypeVariable);\n+    } else if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+}\n+\n+private void readTypeVariablesOnExtendingBounds(TypeVariable<?> typeVariable) {\n+    Type[] bounds = typeVariable.getBounds();\n+    registerTypeVariablesOn(bounds);\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument instanceof TypeVariable) {\n+        TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArgument;\n+        readTypeVariablesOnExtendingBounds(actualTypeVariable);\n+    } else if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+}\n+\n+private void registerTypeVariablesOn(Type... types) {\n+    for (Type type : types) {\n+        if (type instanceof TypeVariable) {\n+            TypeVariable<?> typeVariable = (TypeVariable<?>) type;\n+            Type[] bounds = typeVariable.getBounds();\n+            registerTypeVariablesOn(bounds);\n+        } else if (type instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType) type;\n+            Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+            registerTypeVariablesOn(actualTypeArguments);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}