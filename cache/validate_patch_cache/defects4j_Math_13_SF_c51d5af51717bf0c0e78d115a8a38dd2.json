{
    "patch": "import org.apache.commons.math3.linear.DecompositionSolver;\nimport org.apache.commons.math3.linear.LUDecomposition;\nimport org.apache.commons.math3.linear.LowerTriangularMatrix;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    int n = m.getColumnDimension();\n    RealMatrix l = MatrixUtils.createRealMatrix(n, n); // lower triangular matrix\n\n    // Perform Cholesky decomposition\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j <= i; j++) {\n            double s = 0.0;\n            for (int k = 0; k < j; k++) {\n                s += l.getEntry(i, k) * l.getEntry(j, k);\n            }\n            if (i == j) {\n                l.setEntry(i, j, Math.sqrt(m.getEntry(i, i) - s));\n            } else {\n                l.setEntry(i, j, (m.getEntry(i, j) - s) / l.getEntry(j, j));\n            }\n        }\n    }\n\n    // Compute the square root of the matrix\n    RealMatrix lTransposed = MatrixUtils.createRealMatrix(LowerTriangularMatrix.transpose(l).getData());\n    DecompositionSolver solver = new LUDecomposition(lTransposed).getSolver();\n    RealMatrix lInverse = solver.getInverse();\n    RealMatrix squareRoot = l.multiply(lInverse).scalarMultiply(Math.sqrt(n));\n\n    return squareRoot;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..182a9090f 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,37 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.DecompositionSolver;\n+import org.apache.commons.math3.linear.LUDecomposition;\n+import org.apache.commons.math3.linear.LowerTriangularMatrix;\n+import org.apache.commons.math3.linear.MatrixUtils;\n+import org.apache.commons.math3.linear.RealMatrix;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    int n = m.getColumnDimension();\n+    RealMatrix l = MatrixUtils.createRealMatrix(n, n); // lower triangular matrix\n+\n+    // Perform Cholesky decomposition\n+    for (int i = 0; i < n; i++) {\n+        for (int j = 0; j <= i; j++) {\n+            double s = 0.0;\n+            for (int k = 0; k < j; k++) {\n+                s += l.getEntry(i, k) * l.getEntry(j, k);\n+            }\n+            if (i == j) {\n+                l.setEntry(i, j, Math.sqrt(m.getEntry(i, i) - s));\n+            } else {\n+                l.setEntry(i, j, (m.getEntry(i, j) - s) / l.getEntry(j, j));\n+            }\n+        }\n     }\n+\n+    // Compute the square root of the matrix\n+    RealMatrix lTransposed = MatrixUtils.createRealMatrix(LowerTriangularMatrix.transpose(l).getData());\n+    DecompositionSolver solver = new LUDecomposition(lTransposed).getSolver();\n+    RealMatrix lInverse = solver.getInverse();\n+    RealMatrix squareRoot = l.multiply(lInverse).scalarMultiply(Math.sqrt(n));\n+\n+    return squareRoot;\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}