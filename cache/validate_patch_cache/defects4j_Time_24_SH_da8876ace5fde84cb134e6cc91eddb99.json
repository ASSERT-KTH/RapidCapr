{
    "patch": "            // added lines start here\n            DurationField years = DurationFieldType.years().getField(iChrono);\n            DateTimeField first = savedFields[0].iField;\n            if (compareReverse(first.getDurationField(), years) <= 0) {\n                millis = first.roundFloor(millis);\n                for (int i = 1; i < count; i++) {\n                    millis = savedFields[i].set(millis, resetFields);\n                }\n            } \n            // added lines end here\n            else {\n                throw e;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..763c859c 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,18 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            // added lines start here\n+            DurationField years = DurationFieldType.years().getField(iChrono);\n+            DateTimeField first = savedFields[0].iField;\n+            if (compareReverse(first.getDurationField(), years) <= 0) {\n+                millis = first.roundFloor(millis);\n+                for (int i = 1; i < count; i++) {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                }\n+            } \n+            // added lines end here\n+            else {\n+                throw e;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}