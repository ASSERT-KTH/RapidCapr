{
    "patch": "/**\n * Determines if a given node represents a foldable expression block.\n * \n * @param n The node to check.\n * @return True if the node represents a foldable expression block, false otherwise.\n */\nprivate boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() != Token.BLOCK) {\n        return false;\n    }\n    if (n.hasOneChild()) {\n        Node child = n.getFirstChild();\n        if (NodeUtil.isExpressionNode(child)) {\n            // It is an expression statement.\n            return true;\n        } else if (child.getType() == Token.RETURN && child.getChildCount() == 1) {\n            Node returnChild = child.getFirstChild();\n            if (returnChild.getType() == Token.NAME && \"undefined\".equals(returnChild.getString())) {\n                // IE has a bug where event handlers behave differently when their return value is used vs. when\n                // their return value is in an EXPR_RESULT. We don't fold EXPR_RESULTs into other expressions in\n                // this case.\n                return false;\n            }\n            if (NodeUtil.isExpressionNode(returnChild)) {\n                // It is a return statement with an expression.\n                Node parent = n.getParent();\n                if (parent == null || parent.getType() != Token.BLOCK) {\n                    // It is not contained within another block.\n                    if (!NodeUtil.mayHaveSideEffects(returnChild)) {\n                        // Its expression has no side effects.\n                        if (!isContainedInLoopsOrConditionals(n)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * Determines if a given node is contained within a loop or a conditional statement.\n * \n * @param n The node to check.\n * @return True if the node is contained within a loop or a conditional statement, false otherwise.\n */\nprivate boolean isContainedInLoopsOrConditionals(Node n) {\n    Node parent = n.getParent();\n    while (parent != null && parent.getType() != Token.SCRIPT) {\n        if (NodeUtil.isLoopStructure(parent) || NodeUtil.isConditionalControlStructure(parent)) {\n            return true;\n        }\n        parent = parent.getParent();\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..87ca7268 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,63 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+/**\n+ * Determines if a given node represents a foldable expression block.\n+ * \n+ * @param n The node to check.\n+ * @return True if the node represents a foldable expression block, false otherwise.\n+ */\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.getType() != Token.BLOCK) {\n+        return false;\n+    }\n+    if (n.hasOneChild()) {\n+        Node child = n.getFirstChild();\n+        if (NodeUtil.isExpressionNode(child)) {\n+            // It is an expression statement.\n+            return true;\n+        } else if (child.getType() == Token.RETURN && child.getChildCount() == 1) {\n+            Node returnChild = child.getFirstChild();\n+            if (returnChild.getType() == Token.NAME && \"undefined\".equals(returnChild.getString())) {\n+                // IE has a bug where event handlers behave differently when their return value is used vs. when\n+                // their return value is in an EXPR_RESULT. We don't fold EXPR_RESULTs into other expressions in\n+                // this case.\n+                return false;\n+            }\n+            if (NodeUtil.isExpressionNode(returnChild)) {\n+                // It is a return statement with an expression.\n+                Node parent = n.getParent();\n+                if (parent == null || parent.getType() != Token.BLOCK) {\n+                    // It is not contained within another block.\n+                    if (!NodeUtil.mayHaveSideEffects(returnChild)) {\n+                        // Its expression has no side effects.\n+                        if (!isContainedInLoopsOrConditionals(n)) {\n+                            return true;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n     }\n+    return false;\n+}\n \n+/**\n+ * Determines if a given node is contained within a loop or a conditional statement.\n+ * \n+ * @param n The node to check.\n+ * @return True if the node is contained within a loop or a conditional statement, false otherwise.\n+ */\n+private boolean isContainedInLoopsOrConditionals(Node n) {\n+    Node parent = n.getParent();\n+    while (parent != null && parent.getType() != Token.SCRIPT) {\n+        if (NodeUtil.isLoopStructure(parent) || NodeUtil.isConditionalControlStructure(parent)) {\n+            return true;\n+        }\n+        parent = parent.getParent();\n+    }\n     return false;\n-  }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}