{
    "patch": "      Node parent = n.getParent();\n      if (!NodeUtil.isGet(parent) && !NodeUtil.isGetElem(parent)) {\n        String fnName = functionType.isConstructor()\n            ? \"constructor \" + child.getQualifiedName() : child.getQualifiedName();\n        report(t, n, FUNCTION_CALL_NON_FUNC, fnName);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..e75ac5a3 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,11 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      Node parent = n.getParent();\n+      if (!NodeUtil.isGet(parent) && !NodeUtil.isGetElem(parent)) {\n+        String fnName = functionType.isConstructor()\n+            ? \"constructor \" + child.getQualifiedName() : child.getQualifiedName();\n+        report(t, n, FUNCTION_CALL_NON_FUNC, fnName);\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}