{
    "patch": "public static boolean containsAny(char[] str, char[] searchChars) {\n    if (str == null || searchChars == null) {\n        return false;\n    }\n    int csLength = str.length;\n    int searchLength = searchChars.length;\n    int csLast = csLength - 1;\n    int searchLast = searchLength - 1;\n    for (int i = 0; i < csLength; i++) {\n        char ch = str[i];\n        if (isHighSurrogate(ch)) {\n            if (i >= csLast || searchLength == 0) {\n                return false;\n            }\n            char ch2 = str[++i];\n            if (!isLowSurrogate(ch2)) {\n                return false;\n            }\n            if (containsChar(searchChars, toCodePoint(ch, ch2))) {\n                return true;\n            }\n        } else {\n            if (containsChar(searchChars, ch)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nprivate static boolean containsChar(char[] array, int ch) {\n    for (char c : array) {\n        if (c == ch) {\n            return true;\n        }\n    }\n    return false;\n}\n\nprivate static boolean isHighSurrogate(char ch) {\n    return ch >= '\\uD800' && ch <= '\\uDBFF';\n}\n\nprivate static boolean isLowSurrogate(char ch) {\n    return ch >= '\\uDC00' && ch <= '\\uDFFF';\n}\n\nprivate static int toCodePoint(char high, char low) {\n    return ((high - 0xD800) << 10) + (low - 0xDC00) + 0x10000;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..d735eed3 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,56 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(char[] str, char[] searchChars) {\n+    if (str == null || searchChars == null) {\n+        return false;\n+    }\n+    int csLength = str.length;\n+    int searchLength = searchChars.length;\n+    int csLast = csLength - 1;\n+    int searchLast = searchLength - 1;\n+    for (int i = 0; i < csLength; i++) {\n+        char ch = str[i];\n+        if (isHighSurrogate(ch)) {\n+            if (i >= csLast || searchLength == 0) {\n+                return false;\n+            }\n+            char ch2 = str[++i];\n+            if (!isLowSurrogate(ch2)) {\n+                return false;\n+            }\n+            if (containsChar(searchChars, toCodePoint(ch, ch2))) {\n+                return true;\n+            }\n+        } else {\n+            if (containsChar(searchChars, ch)) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean containsChar(char[] array, int ch) {\n+    for (char c : array) {\n+        if (c == ch) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean isHighSurrogate(char ch) {\n+    return ch >= '\\uD800' && ch <= '\\uDBFF';\n+}\n+\n+private static boolean isLowSurrogate(char ch) {\n+    return ch >= '\\uDC00' && ch <= '\\uDFFF';\n+}\n+\n+private static int toCodePoint(char high, char low) {\n+    return ((high - 0xD800) << 10) + (low - 0xDC00) + 0x10000;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}