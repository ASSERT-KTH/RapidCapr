{
    "patch": "if (v == null) {\n     return 0;\n}\nif (v instanceof String) {\n    try {\n        return getCumPct((Comparable<?>) Integer.parseInt((String) v));\n    } catch (NumberFormatException e) {\n        return getCumPct((Comparable<?>) v);\n    }\n}\nif (v instanceof Comparable) {\n    return getCumPct((Comparable<?>) v);\n}\nreturn getCumPct((Comparable<?>) String.valueOf(v));",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/Frequency.java b/src/main/java/org/apache/commons/math/stat/Frequency.java\nindex c45d72883..fef65c96e 100644\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n@@ -300,8 +300,21 @@ public class Frequency implements Serializable {\n      */\n     @Deprecated\n     public double getPct(Object v) {\n+if (v == null) {\n+     return 0;\n+}\n+if (v instanceof String) {\n+    try {\n+        return getCumPct((Comparable<?>) Integer.parseInt((String) v));\n+    } catch (NumberFormatException e) {\n         return getCumPct((Comparable<?>) v);\n     }\n+}\n+if (v instanceof Comparable) {\n+    return getCumPct((Comparable<?>) v);\n+}\n+return getCumPct((Comparable<?>) String.valueOf(v));\n+    }\n \n     /**\n      * Returns the percentage of values that are equal to v",
    "result_reason": "junit.framework.AssertionFailedError: three (Object) pct expected:<0.5> but was:<1.0>",
    "test_result": "FAIL"
}