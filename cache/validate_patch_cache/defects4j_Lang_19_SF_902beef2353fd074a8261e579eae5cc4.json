{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    if (index <= seqEnd - 2 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        if (start <= seqEnd - 1) {\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n\n                if (start > seqEnd - 1) { // check for unfinished entity after an 'x' or 'X'\n                    return 0;\n                }\n            }\n\n            int end = start;\n            while (end <= seqEnd - 1 && input.charAt(end) != ';') {\n                end++;\n            }\n\n            if (end == seqEnd) { // check for unfinished entity without a semicolon\n                return 0;\n            }\n\n            int entityValue = 0;\n            try {\n                if (isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch (NumberFormatException nfe) {\n                System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start + \"][\" + end + \"]\");\n                return 0;\n            }\n\n            if (entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                out.write(entityValue);\n            }\n\n            return 2 + (end - start) + (isHex ? 1 : 0) + 1; // account for the length of '&#', the number, and ';', and 'x' or 'X'\n        }\n    }\n    \n    return 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..157986b9 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,41 +34,45 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n+    if (index <= seqEnd - 2 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n+        int start = index + 2;\n+        boolean isHex = false;\n \n+        if (start <= seqEnd - 1) {\n             char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n+            if (firstChar == 'x' || firstChar == 'X') {\n                 start++;\n                 isHex = true;\n \n-                // Check there's more than just an x after the &#\n+                if (start > seqEnd - 1) { // check for unfinished entity after an 'x' or 'X'\n+                    return 0;\n+                }\n             }\n \n             int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n+            while (end <= seqEnd - 1 && input.charAt(end) != ';') {\n                 end++;\n             }\n \n-            int entityValue;\n+            if (end == seqEnd) { // check for unfinished entity without a semicolon\n+                return 0;\n+            }\n+\n+            int entityValue = 0;\n             try {\n-                if(isHex) {\n+                if (isHex) {\n                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                 } else {\n                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                 }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n+            } catch (NumberFormatException nfe) {\n+                System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start + \"][\" + end + \"]\");\n                 return 0;\n             }\n \n-            if(entityValue > 0xFFFF) {\n+            if (entityValue > 0xFFFF) {\n                 char[] chrs = Character.toChars(entityValue);\n                 out.write(chrs[0]);\n                 out.write(chrs[1]);\n@@ -76,9 +80,10 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 out.write(entityValue);\n             }\n \n-\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+            return 2 + (end - start) + (isHex ? 1 : 0) + 1; // account for the length of '&#', the number, and ';', and 'x' or 'X'\n         }\n-        return 0;\n     }\n+    \n+    return 0;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: Failed to support unfinished entities (i.e. missing semi-colon expected:<Test []0 not test> but was:<Test [&#x3]0 not test>",
    "test_result": "FAIL"
}