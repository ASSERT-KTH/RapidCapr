{
    "patch": "public static double regularizedGamma(double a, double x, double epsilon) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    } else if (x == 0.0) {\n        return 0.0;\n    } else if (x >= a + 1.0) {\n        // Use the following expression when x >= a + 1\n        return 1 - regularizedGammaComplement(a, x, epsilon);\n    } else {\n        final double lg = Gamma.logGamma(a);\n        if (Double.isInfinite(lg)) {\n            return lg;\n        }\n\n        final double d = 1.0 / a;\n        final double c = 0.0;\n        final double limit = 100;\n\n        double hPrev = regularizedGammaPrefix(d, c, x, epsilon);\n        double n = 1.0;\n        double hN = d * x * hPrev + Math.exp(-x) * Math.pow(x, d);\n\n        while (n < limit && Math.abs(hN - hPrev) > epsilon * Math.abs(hPrev)) {\n            final double aN = n * d - c;\n            hPrev = hN;\n            hN = (aN * hPrev + Math.exp(-x) * Math.pow(x, aN)) / (1.0 + aN - d);\n            ++n;\n        }\n\n        return Math.exp(-x + a * Math.log(x) - lg) * hN;\n    }\n}\n\npublic static double regularizedGammaPrefix(final double d, final double c, final double x, final double epsilon) {\n    double hPrev = 1.0;\n    double hN = d * x + c;\n    int counter = 1;\n    while (counter < 100 && Math.abs(hN - hPrev) > epsilon * Math.abs(hPrev)) {\n        final double aN = counter - d;\n        final double next = (aN * hN + x) / (aN + 1.0);\n        hPrev = hN;\n        hN = next;\n        ++counter;\n    }\n    return hN;\n}\n",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..894947775 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,53 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x, double epsilon) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    } else if (x == 0.0) {\n+        return 0.0;\n+    } else if (x >= a + 1.0) {\n+        // Use the following expression when x >= a + 1\n+        return 1 - regularizedGammaComplement(a, x, epsilon);\n+    } else {\n+        final double lg = Gamma.logGamma(a);\n+        if (Double.isInfinite(lg)) {\n+            return lg;\n+        }\n+\n+        final double d = 1.0 / a;\n+        final double c = 0.0;\n+        final double limit = 100;\n+\n+        double hPrev = regularizedGammaPrefix(d, c, x, epsilon);\n+        double n = 1.0;\n+        double hN = d * x * hPrev + Math.exp(-x) * Math.pow(x, d);\n+\n+        while (n < limit && Math.abs(hN - hPrev) > epsilon * Math.abs(hPrev)) {\n+            final double aN = n * d - c;\n+            hPrev = hN;\n+            hN = (aN * hPrev + Math.exp(-x) * Math.pow(x, aN)) / (1.0 + aN - d);\n+            ++n;\n+        }\n+\n+        return Math.exp(-x + a * Math.log(x) - lg) * hN;\n+    }\n+}\n+\n+public static double regularizedGammaPrefix(final double d, final double c, final double x, final double epsilon) {\n+    double hPrev = 1.0;\n+    double hN = d * x + c;\n+    int counter = 1;\n+    while (counter < 100 && Math.abs(hN - hPrev) > epsilon * Math.abs(hPrev)) {\n+        final double aN = counter - d;\n+        final double next = (aN * hN + x) / (aN + 1.0);\n+        hPrev = hN;\n+        hN = next;\n+        ++counter;\n+    }\n+    return hN;\n+}\n+\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}