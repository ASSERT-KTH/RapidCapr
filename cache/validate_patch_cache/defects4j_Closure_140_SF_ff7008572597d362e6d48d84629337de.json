{
    "patch": "@Override\nNode getNodeForCodeInsertion(JSModule module) {\n  if (module == null) {\n    if (inputs.length == 0) {\n      throw new IllegalStateException(\"No inputs\");\n    }\n    return inputs[0].getAstRoot(this);\n  }\n  for (JSModule m : getSortedTransitiveDeps(module)) {\n    if (!m.equals(module)) {\n      List<CompilerInput> inputs = m.getInputs();\n      if (inputs.size() > 0) {\n        return inputs.get(0).getAstRoot(this);\n      }\n    }\n  }\n  throw new IllegalStateException(\"Module \" + module.getName() + \" has no inputs\");\n}\n\nprivate List<JSModule> getSortedTransitiveDeps(JSModule module) {\n  final Set<JSModule> visited = new HashSet<>();\n  final List<JSModule> result = new ArrayList<>();\n\n  final Deque<JSModule> workSet = new ArrayDeque<>();\n\n  workSet.add(module);\n  visited.add(module);\n\n  while (!workSet.isEmpty()) {\n    final JSModule m = workSet.pop();\n    result.add(m);\n    for (JSModule dep : m.getDependencies()) {\n      if (!visited.contains(dep)) {\n        visited.add(dep);\n        workSet.add(dep);\n      }\n    }\n  }\n  return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex d2524b4f..dd09d082 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -256,43 +256,46 @@ public class Compiler extends AbstractCompiler {\n   /**\n    * Initializes the instance state needed for a compile job.\n    */\n-  public void init(JSSourceFile[] externs, JSModule[] modules,\n-      CompilerOptions options) {\n-    initOptions(options);\n+@Override\n+Node getNodeForCodeInsertion(JSModule module) {\n+  if (module == null) {\n+    if (inputs.length == 0) {\n+      throw new IllegalStateException(\"No inputs\");\n+    }\n+    return inputs[0].getAstRoot(this);\n+  }\n+  for (JSModule m : getSortedTransitiveDeps(module)) {\n+    if (!m.equals(module)) {\n+      List<CompilerInput> inputs = m.getInputs();\n+      if (inputs.size() > 0) {\n+        return inputs.get(0).getAstRoot(this);\n+      }\n+    }\n+  }\n+  throw new IllegalStateException(\"Module \" + module.getName() + \" has no inputs\");\n+}\n \n-    checkFirstModule(modules);\n+private List<JSModule> getSortedTransitiveDeps(JSModule module) {\n+  final Set<JSModule> visited = new HashSet<>();\n+  final List<JSModule> result = new ArrayList<>();\n \n-    this.externs = makeCompilerInput(externs, true);\n-    this.modules = modules;\n-    // Generate the module graph, and report any errors in the module\n-    // specification as errors.\n-    try {\n-      this.moduleGraph = new JSModuleGraph(modules);\n-    } catch (JSModuleGraph.ModuleDependenceException e) {\n-      // problems with the module format.  Report as an error.  The\n-      // message gives all details.\n-      report(JSError.make(MODULE_DEPENDENCY_ERROR,\n-          e.getModule().getName(), e.getDependentModule().getName()));\n-      return;\n-    }\n-    this.inputs = getAllInputsFromModules();\n-    initBasedOnOptions();\n+  final Deque<JSModule> workSet = new ArrayDeque<>();\n \n-    initInputsByNameMap();\n-  }\n+  workSet.add(module);\n+  visited.add(module);\n \n-  /**\n-   * Do any initialization that is dependent on the compiler options.\n-   */\n-  private void initBasedOnOptions() {\n-    // Create the source map if necessary.\n-    if (options.sourceMapOutputPath != null) {\n-      sourceMap = new SourceMap();\n+  while (!workSet.isEmpty()) {\n+    final JSModule m = workSet.pop();\n+    result.add(m);\n+    for (JSModule dep : m.getDependencies()) {\n+      if (!visited.contains(dep)) {\n+        visited.add(dep);\n+        workSet.add(dep);\n+      }\n     }\n   }\n-\n-  private CompilerInput[] makeCompilerInput(\n-      JSSourceFile[] files, boolean isExtern) {\n+  return result;\n+}\n     CompilerInput [] inputs = new CompilerInput[files.length];\n     for (int i = 0; i < files.length; ++i) {\n       inputs[i] = new CompilerInput(files[i], isExtern);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}