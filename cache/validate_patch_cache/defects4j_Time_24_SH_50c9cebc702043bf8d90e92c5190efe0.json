{
    "patch": "            if (savedFields[i].iField.getType() == DateTimeFieldType.year() &&\n                    savedFields[i].iField.isLeapYear(millis / DateTimeConstants.MILLIS_PER_SECOND + iChrono.getDateTimeMillis(0L, millis)) &&\n                    savedFields[i].iValue == 60) {\n                millis = savedFields[i].set(millis, resetFields);\n            } else {\n                millis = savedFields[i].set(millis, resetFields);\n                if (iStrict && iSavedFields[i].iValue != savedFields[i].iValue) {\n                    DateTimeField field = savedFields[i].iField.getField(iChrono);\n                    throw new IllegalFieldValueException(field.getType(),\n                            Integer.valueOf(savedFields[i].iValue),\n                            null, null);\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..83ba7ff9 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,18 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (savedFields[i].iField.getType() == DateTimeFieldType.year() &&\n+                    savedFields[i].iField.isLeapYear(millis / DateTimeConstants.MILLIS_PER_SECOND + iChrono.getDateTimeMillis(0L, millis)) &&\n+                    savedFields[i].iValue == 60) {\n+                millis = savedFields[i].set(millis, resetFields);\n+            } else {\n+                millis = savedFields[i].set(millis, resetFields);\n+                if (iStrict && iSavedFields[i].iValue != savedFields[i].iValue) {\n+                    DateTimeField field = savedFields[i].iField.getField(iChrono);\n+                    throw new IllegalFieldValueException(field.getType(),\n+                            Integer.valueOf(savedFields[i].iValue),\n+                            null, null);\n+                }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}