{
    "patch": "private void readTypeVariables() {\n    Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArg != null) {\n        registerTypeVariablesOn(actualTypeArg);\n    } else {\n        for (Type bound : typeVariable.getBounds()) {\n            if (bound instanceof TypeVariable) {\n                readTypeVariable((TypeVariable<?>) bound);\n            } else if (!bound.equals(Object.class)) {\n                registerTypeVariablesOn(bound);\n            }\n        }\n        registerTypeVariablesOn(typeVariable);\n    }\n}\n\nprivate void readTypeVariable(TypeVariable<?> typeVariable) {\n    for (Type bound : typeVariable.getBounds()) {\n        if (bound instanceof TypeVariable) {\n            readTypeVariable((TypeVariable<?>) bound);\n        } else if (!bound.equals(Object.class)) {\n            registerTypeVariablesOn(bound);\n        }\n    }\n    registerTypeVariablesOn(typeVariable);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..2d3245974 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,33 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArg != null) {\n+        registerTypeVariablesOn(actualTypeArg);\n+    } else {\n+        for (Type bound : typeVariable.getBounds()) {\n+            if (bound instanceof TypeVariable) {\n+                readTypeVariable((TypeVariable<?>) bound);\n+            } else if (!bound.equals(Object.class)) {\n+                registerTypeVariablesOn(bound);\n+            }\n+        }\n+        registerTypeVariablesOn(typeVariable);\n+    }\n+}\n+\n+private void readTypeVariable(TypeVariable<?> typeVariable) {\n+    for (Type bound : typeVariable.getBounds()) {\n+        if (bound instanceof TypeVariable) {\n+            readTypeVariable((TypeVariable<?>) bound);\n+        } else if (!bound.equals(Object.class)) {\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+    registerTypeVariablesOn(typeVariable);\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}