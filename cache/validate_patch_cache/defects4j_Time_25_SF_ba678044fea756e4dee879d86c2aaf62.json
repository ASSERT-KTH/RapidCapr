{
    "patch": "            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal == nextAdjusted) {\n                // no further transition, return the new offset\n                return offsetAdjusted;\n            } else if (offsetLocal < offsetAdjusted) {\n                // negative transition, we jumped back into STD\n                long prevAdjusted = previousTransition(nextLocal - 1);\n                if (prevAdjusted <= instantAdjusted) {\n                    return getOffset(nextLocal - 1);\n                } else {\n                    return offsetLocal;\n                }\n            } else {\n                // positive transition, we jumped forward into DST\n                long nextLocalPrev = previousTransition(nextLocal);\n                if (nextLocalPrev <= instantAdjusted || nextAdjusted == nextLocalPrev) {\n                    return offsetAdjusted;\n                } else {\n                    return getOffset(nextLocalPrev);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..cdad97cc 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,26 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            if (nextLocal == nextAdjusted) {\n+                // no further transition, return the new offset\n+                return offsetAdjusted;\n+            } else if (offsetLocal < offsetAdjusted) {\n+                // negative transition, we jumped back into STD\n+                long prevAdjusted = previousTransition(nextLocal - 1);\n+                if (prevAdjusted <= instantAdjusted) {\n+                    return getOffset(nextLocal - 1);\n+                } else {\n                     return offsetLocal;\n                 }\n-            }\n-        }\n-        return offsetAdjusted;\n-    }\n+            } else {\n+                // positive transition, we jumped forward into DST\n+                long nextLocalPrev = previousTransition(nextLocal);\n+                if (nextLocalPrev <= instantAdjusted || nextAdjusted == nextLocalPrev) {\n+                    return offsetAdjusted;\n+                } else {\n+                    return getOffset(nextLocalPrev);\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}