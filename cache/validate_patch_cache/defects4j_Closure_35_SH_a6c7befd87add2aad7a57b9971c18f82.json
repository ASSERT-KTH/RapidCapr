{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType castedType = ObjectType.cast(constraintObj);\n      if (castedType != null) {\n        for (String prop : castedType.getOwnPropertyNames()) {\n          JSType propType = castedType.getPropertyType(prop);\n          JSType narrowed = type.restrictByNotNullOrUndefined();\n          if (narrowed.mayHaveProp(prop)) {\n            JSType oldType = narrowed.hasProp(prop) ? narrowed.getProp(prop) : null;\n            JSType newType = oldType == null || propType.isUnknownType() ? propType :\n                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            narrowed = narrowed.withDeclaredProp(prop, newType);\n          }\n          JSType typeToInfer = narrowed != type ?\n              narrowed : propType;\n          declareInferredProperty(n, scope, prop, typeToInfer);\n          JSType inferred = getInferredTypeOf(n, scope);\n          if (inferred != null) {\n            inferred = inferred.specialize(propType);\n          }\n          if (inferred != null && !inferred.isSubtype(propType)) {\n            warnings.add(makeTypeMismatchWarning(n, propType, inferred));\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..166eef25 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1119,21 +1119,31 @@ class TypeInference\n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n     if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+      ObjectType castedType = ObjectType.cast(constraintObj);\n+      if (castedType != null) {\n+        for (String prop : castedType.getOwnPropertyNames()) {\n+          JSType propType = castedType.getPropertyType(prop);\n+          JSType narrowed = type.restrictByNotNullOrUndefined();\n+          if (narrowed.mayHaveProp(prop)) {\n+            JSType oldType = narrowed.hasProp(prop) ? narrowed.getProp(prop) : null;\n+            JSType newType = oldType == null || propType.isUnknownType() ? propType :\n+                getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+            narrowed = narrowed.withDeclaredProp(prop, newType);\n+          }\n+          JSType typeToInfer = narrowed != type ?\n+              narrowed : propType;\n+          declareInferredProperty(n, scope, prop, typeToInfer);\n+          JSType inferred = getInferredTypeOf(n, scope);\n+          if (inferred != null) {\n+            inferred = inferred.specialize(propType);\n+          }\n+          if (inferred != null && !inferred.isSubtype(propType)) {\n+            warnings.add(makeTypeMismatchWarning(n, propType, inferred));\n           }\n         }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}