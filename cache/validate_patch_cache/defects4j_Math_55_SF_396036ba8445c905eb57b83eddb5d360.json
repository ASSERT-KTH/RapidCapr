{
    "patch": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n      final double factor1 = v1.getNorm() / v1.getNormInf();\n      final double factor2 = v2.getNorm() / v2.getNormInf();\n\n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n      final double p1 = v1.getY() * v2.getZ();\n      final double p2 = v1.getZ() * v2.getY();\n      final double q1 = v1.getZ() * v2.getX();\n      final double q2 = v1.getX() * v2.getZ();\n      final double r1 = v1.getX() * v2.getY();\n      final double r2 = v1.getY() * v2.getX();\n      final double alpha = (p1 - p2) * factor2 + (q1 - q2) * factor1 + (r1 - r2) * factor2 * factor1;\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      final Vector3D v3 = new Vector3D(factor1 * v1.getX() - alpha * v2.getX(),\n                                       factor1 * v1.getY() - alpha * v2.getY(),\n                                       factor1 * v1.getZ() - alpha * v2.getZ());\n      final double x = v3.getY() * v2.getZ() - v3.getZ() * v2.getY();\n      final double y = v3.getZ() * v2.getX() - v3.getX() * v2.getZ();\n      final double z = v3.getX() * v2.getY() - v3.getY() * v2.getX();\n      return new Vector3D(x, y, z);\n\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..731d6f593 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -456,9 +456,10 @@ public class Vector3D implements Serializable {\n    */\n   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n-\n       // rescale both vectors without losing precision,\n       // to ensure their norm are the same order of magnitude\n+      final double factor1 = v1.getNorm() / v1.getNormInf();\n+      final double factor2 = v2.getNorm() / v2.getNormInf();\n \n       // we reduce cancellation errors by preconditioning,\n       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n@@ -467,10 +468,22 @@ public class Vector3D implements Serializable {\n       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n \n       // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n+      final double p1 = v1.getY() * v2.getZ();\n+      final double p2 = v1.getZ() * v2.getY();\n+      final double q1 = v1.getZ() * v2.getX();\n+      final double q2 = v1.getX() * v2.getZ();\n+      final double r1 = v1.getX() * v2.getY();\n+      final double r2 = v1.getY() * v2.getX();\n+      final double alpha = (p1 - p2) * factor2 + (q1 - q2) * factor1 + (r1 - r2) * factor2 * factor1;\n \n       // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+      final Vector3D v3 = new Vector3D(factor1 * v1.getX() - alpha * v2.getX(),\n+                                       factor1 * v1.getY() - alpha * v2.getY(),\n+                                       factor1 * v1.getZ() - alpha * v2.getZ());\n+      final double x = v3.getY() * v2.getZ() - v3.getZ() * v2.getY();\n+      final double y = v3.getZ() * v2.getX() - v3.getX() * v2.getZ();\n+      final double z = v3.getX() * v2.getY() - v3.getY() * v2.getX();\n+      return new Vector3D(x, y, z);\n \n   }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<0.18878460970471067>",
    "test_result": "FAIL"
}