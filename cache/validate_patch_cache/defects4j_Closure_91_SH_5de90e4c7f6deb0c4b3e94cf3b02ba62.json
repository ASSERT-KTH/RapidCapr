{
    "patch": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      Node fnNameNode = null;\n      if (n.getFirstChild() != null && n.getFirstChild().isName()) {\n        fnNameNode = n.getFirstChild();\n      }\n      Node fnPropsNode = NodeUtil.getFunctionBody(n).getFirstChild();\n\n      if (fnPropsNode != null && fnPropsNode.isBlock() &&\n          fnPropsNode.hasChildren() && fnPropsNode.getFirstChild().isString()) {\n        // This is a shorthand object method, like:\n        //   {method() { ... }}\n        return false;\n      }\n\n      if (fnPropsNode == null || !fnPropsNode.hasChildren()) {\n        // This function has no properties to analyze.\n        return true;\n      }\n\n      Node firstPropNode = fnPropsNode.getFirstChild();\n      if (!firstPropNode.isAssign() || firstPropNode.getNext() != null ||\n          firstPropNode.getFirstChild().getToken() != Token.THIS) {\n        // This function's first property is not a `this.name = value` assignment,\n        // so it can't be an object literal getter or setter.\n        return true;\n      }\n\n      if (fnPropsNode.getChildCount() == 1) {\n        // This function has exactly one property. It must be a getter, because\n        // a setter would require a second assignment to `this`.\n        return false;\n      }\n\n      // This function has at least two properties. If the first property is a\n      // getter and the second property is a setter, then this is a getter/setter\n      // pair.\n      Node secondPropNode = firstPropNode.getNext();\n      return secondPropNode.isAssign() && secondPropNode.getNext() == null &&\n          secondPropNode.getFirstChild().getToken() == Token.THIS &&\n          secondPropNode.isForcedInGetterOrSetter();\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..a79322c9 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,110 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+\n+    if (n.getType() == Token.FUNCTION) {\n+      // Don't traverse functions that are constructors or have the @this\n+      // or @override annotation.\n+      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+      if (jsDoc != null &&\n+          (jsDoc.isConstructor() ||\n+           jsDoc.isInterface() ||\n+           jsDoc.hasThisType() ||\n+           jsDoc.isOverride())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions unless they would normally\n+      // be able to have a @this annotation associated with them. e.g.,\n+      // var a = function() { }; // or\n+      // function a() {} // or\n+      // a.x = function() {}; // or\n+      // var a = {x: function() {}};\n+      int pType = parent.getType();\n+      if (!(pType == Token.BLOCK ||\n+            pType == Token.SCRIPT ||\n+            pType == Token.NAME ||\n+            pType == Token.ASSIGN ||\n+\n+            // object literal keys\n+            pType == Token.STRING ||\n+            pType == Token.NUMBER)) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      Node fnNameNode = null;\n+      if (n.getFirstChild() != null && n.getFirstChild().isName()) {\n+        fnNameNode = n.getFirstChild();\n+      }\n+      Node fnPropsNode = NodeUtil.getFunctionBody(n).getFirstChild();\n+\n+      if (fnPropsNode != null && fnPropsNode.isBlock() &&\n+          fnPropsNode.hasChildren() && fnPropsNode.getFirstChild().isString()) {\n+        // This is a shorthand object method, like:\n+        //   {method() { ... }}\n+        return false;\n+      }\n+\n+      if (fnPropsNode == null || !fnPropsNode.hasChildren()) {\n+        // This function has no properties to analyze.\n+        return true;\n+      }\n+\n+      Node firstPropNode = fnPropsNode.getFirstChild();\n+      if (!firstPropNode.isAssign() || firstPropNode.getNext() != null ||\n+          firstPropNode.getFirstChild().getToken() != Token.THIS) {\n+        // This function's first property is not a `this.name = value` assignment,\n+        // so it can't be an object literal getter or setter.\n+        return true;\n+      }\n+\n+      if (fnPropsNode.getChildCount() == 1) {\n+        // This function has exactly one property. It must be a getter, because\n+        // a setter would require a second assignment to `this`.\n+        return false;\n+      }\n+\n+      // This function has at least two properties. If the first property is a\n+      // getter and the second property is a setter, then this is a getter/setter\n+      // pair.\n+      Node secondPropNode = firstPropNode.getNext();\n+      return secondPropNode.isAssign() && secondPropNode.getNext() == null &&\n+          secondPropNode.getFirstChild().getToken() == Token.THIS &&\n+          secondPropNode.isForcedInGetterOrSetter();\n+    }\n+\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+      Node lhs = parent.getFirstChild();\n+      Node rhs = lhs.getNext();\n+\n+      if (n == lhs) {\n+        // Always traverse the left side of the assignment. To handle\n+        // nested assignments properly (e.g., (a = this).property = c;),\n+        // assignLhsChild should not be overridden.\n+        if (assignLhsChild == null) {\n+          assignLhsChild = lhs;\n+        }\n+      } else {\n+        // Only traverse the right side if it's not an assignment to a prototype\n+        // property or subproperty.\n+        if (NodeUtil.isGet(lhs)) {\n+          if (lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.GETPROP &&\n+              llhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n+      }\n+    }\n+\n+    return true;\n+  }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}