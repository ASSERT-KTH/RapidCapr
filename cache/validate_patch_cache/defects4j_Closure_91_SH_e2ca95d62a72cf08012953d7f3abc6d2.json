{
    "patch": " /**\n   * Determines whether the given node should be traversed.\n   *\n   * @param t The current traversal\n   * @param n The node to check\n   * @param parent The parent of the node\n   * @return Whether the node should be traversed\n   */\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse function expressions or function declarations used in an\n      // expression, except those used in a call expression or a return statement.\n      // If the parent is not a statement, check if it is a child of an expression.\n      boolean isCallOrReturn = NodeUtil.isInvocationOrCall(parent);\n      boolean isTopLevelStatement = parent.getType() == Token.BLOCK ||\n                                     parent.getType() == Token.SCRIPT ||\n                                     parent.getType() == Token.CATCH ||\n                                     parent.getType() == Token.LABEL;\n      boolean isStatement = parent.isStatement() || isTopLevelStatement;\n      boolean isPotentiallyExecutable = !NodeUtil.mayBeExpression(parent);\n      boolean isExpression = NodeUtil.isExpression(parent) ||\n          (isPotentiallyExecutable && !isStatement);\n      if (!isCallOrReturn && isExpression) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      boolean isPrototypeAssignment = NodeUtil.isPrototypeAssignment(parent);\n      boolean isPrototypeFunction = isPrototypeCall(n, parent);\n      if (isPrototypeAssignment || isPrototypeFunction) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype, and ignore\n        // assignments of function expressions to properties or variables (e.g. var x = function() {}).\n        boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration(rhs);\n        boolean isFunctionExpression =\n            (NodeUtil.isFunctionExpression(rhs) && lhs.getType() != Token.GETELEM);\n        if (NodeUtil.isGet(lhs) && !isFunctionDeclaration && !isFunctionExpression) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        } else if (parent.getParent() != null) {\n          Node parentParent = parent.getParent();\n          if (NodeUtil.isGet(parentParent) && parentParent.getType() == Token.GETPROP &&\n              parentParent.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          } \n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Check if the given node is a function call applied on the prototype property of an object.\n   *\n   * @param n The node to check\n   * @param parent The parent of the node\n   * @return Whether the node is a function call on the prototype of an object\n   */\n  private boolean isPrototypeCall(Node n, Node parent) {\n    if (parent.getType() == Token.CALL) {\n      Node callTarget = parent.getFirstChild();\n      if (callTarget.getType() == Token.GETPROP) {\n        String propName = callTarget.getLastChild().getString();\n        if (\"prototype\".equals(propName)) {\n          Node targetObject = callTarget.getFirstChild();\n          int objectType = targetObject.getType();\n          if (objectType == Token.NAME || objectType == Token.GETPROP) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check whether the given node is an assignment to an object's prototype property.\n   *\n   * @param n The node to check\n   * @return Whether the node is an assignment to an object's prototype property\n   */\n  private boolean isPrototypeAssignment(Node n) {\n    Node parent = n.getParent();\n    if (parent.getType() == Token.ASSIGN) {\n      Node target = parent.getFirstChild();\n      if (target.getType() == Token.GETPROP) {\n        String propName = target.getLastChild().getString();\n        if (\"prototype\".equals(propName)) {\n          Node targetObject = target.getFirstChild();\n          int objectType = targetObject.getType();\n          if (objectType == Token.NAME || objectType == Token.GETPROP) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..96bba77a 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,138 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+ /**\n+   * Determines whether the given node should be traversed.\n+   *\n+   * @param t The current traversal\n+   * @param n The node to check\n+   * @param parent The parent of the node\n+   * @return Whether the node should be traversed\n+   */\n+  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+    if (n.getType() == Token.FUNCTION) {\n+      // Don't traverse functions that are constructors or have the @this\n+      // or @override annotation.\n+      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+      if (jsDoc != null &&\n+          (jsDoc.isConstructor() ||\n+           jsDoc.isInterface() ||\n+           jsDoc.hasThisType() ||\n+           jsDoc.isOverride())) {\n+        return false;\n+      }\n+\n+      // Don't traverse function expressions or function declarations used in an\n+      // expression, except those used in a call expression or a return statement.\n+      // If the parent is not a statement, check if it is a child of an expression.\n+      boolean isCallOrReturn = NodeUtil.isInvocationOrCall(parent);\n+      boolean isTopLevelStatement = parent.getType() == Token.BLOCK ||\n+                                     parent.getType() == Token.SCRIPT ||\n+                                     parent.getType() == Token.CATCH ||\n+                                     parent.getType() == Token.LABEL;\n+      boolean isStatement = parent.isStatement() || isTopLevelStatement;\n+      boolean isPotentiallyExecutable = !NodeUtil.mayBeExpression(parent);\n+      boolean isExpression = NodeUtil.isExpression(parent) ||\n+          (isPotentiallyExecutable && !isStatement);\n+      if (!isCallOrReturn && isExpression) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      boolean isPrototypeAssignment = NodeUtil.isPrototypeAssignment(parent);\n+      boolean isPrototypeFunction = isPrototypeCall(n, parent);\n+      if (isPrototypeAssignment || isPrototypeFunction) {\n+        return false;\n+      }\n+    }\n+\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+      Node lhs = parent.getFirstChild();\n+      Node rhs = lhs.getNext();\n+\n+      if (n == lhs) {\n+        // Always traverse the left side of the assignment. To handle\n+        // nested assignments properly (e.g., (a = this).property = c;),\n+        // assignLhsChild should not be overridden.\n+        if (assignLhsChild == null) {\n+          assignLhsChild = lhs;\n+        }\n+      } else {\n+        // Only traverse the right side if it's not an assignment to a prototype, and ignore\n+        // assignments of function expressions to properties or variables (e.g. var x = function() {}).\n+        boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration(rhs);\n+        boolean isFunctionExpression =\n+            (NodeUtil.isFunctionExpression(rhs) && lhs.getType() != Token.GETELEM);\n+        if (NodeUtil.isGet(lhs) && !isFunctionDeclaration && !isFunctionExpression) {\n+          if (lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.GETPROP &&\n+              llhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        } else if (parent.getParent() != null) {\n+          Node parentParent = parent.getParent();\n+          if (NodeUtil.isGet(parentParent) && parentParent.getType() == Token.GETPROP &&\n+              parentParent.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          } \n+        }\n+      }\n+    }\n+\n+    return true;\n+  }\n+\n+  /**\n+   * Check if the given node is a function call applied on the prototype property of an object.\n+   *\n+   * @param n The node to check\n+   * @param parent The parent of the node\n+   * @return Whether the node is a function call on the prototype of an object\n+   */\n+  private boolean isPrototypeCall(Node n, Node parent) {\n+    if (parent.getType() == Token.CALL) {\n+      Node callTarget = parent.getFirstChild();\n+      if (callTarget.getType() == Token.GETPROP) {\n+        String propName = callTarget.getLastChild().getString();\n+        if (\"prototype\".equals(propName)) {\n+          Node targetObject = callTarget.getFirstChild();\n+          int objectType = targetObject.getType();\n+          if (objectType == Token.NAME || objectType == Token.GETPROP) {\n+            return true;\n+          }\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Check whether the given node is an assignment to an object's prototype property.\n+   *\n+   * @param n The node to check\n+   * @return Whether the node is an assignment to an object's prototype property\n+   */\n+  private boolean isPrototypeAssignment(Node n) {\n+    Node parent = n.getParent();\n+    if (parent.getType() == Token.ASSIGN) {\n+      Node target = parent.getFirstChild();\n+      if (target.getType() == Token.GETPROP) {\n+        String propName = target.getLastChild().getString();\n+        if (\"prototype\".equals(propName)) {\n+          Node targetObject = target.getFirstChild();\n+          int objectType = targetObject.getType();\n+          if (objectType == Token.NAME || objectType == Token.GETPROP) {\n+            return true;\n+          }\n+        }\n+      }\n+    }\n+    return false;\n+  }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}