{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n  \n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node argument = null;\n  while (parameters.hasNext()) { // iterate only over parameters\n    Node parameter = parameters.next();\n    if (!arguments.hasNext()) { // error case, not enough arguments\n      report(t, call, WRONG_ARGUMENT_COUNT,\n             validator.getReadableJSTypeName(call.getFirstChild(), false),\n             String.valueOf(arguments.length()), String.valueOf(functionType.getMinArguments()),\n             (functionType.getMaxArguments() != Integer.MAX_VALUE ? \n              \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\"));\n      return;\n    }\n    argument = arguments.next();\n    ordinal++;\n    \n    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n  }\n  \n  // Check if the number of arguments exceeds the maximum allowed\n  if (arguments.hasNext()) {\n    List<Node> remainingArgs = ImmutableList.copyOf(arguments);\n    report(t, call, WRONG_ARGUMENT_COUNT,\n           validator.getReadableJSTypeName(call.getFirstChild(), false),\n           String.valueOf(arguments.length() + remainingArgs.size()), \n           String.valueOf(functionType.getMinArguments()),\n           (functionType.getMaxArguments() != Integer.MAX_VALUE ? \n            \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\"));\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..e7d47f13 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,40 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n-\n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+  \n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  int ordinal = 0;\n+  Node argument = null;\n+  while (parameters.hasNext()) { // iterate only over parameters\n+    Node parameter = parameters.next();\n+    if (!arguments.hasNext()) { // error case, not enough arguments\n       report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+             validator.getReadableJSTypeName(call.getFirstChild(), false),\n+             String.valueOf(arguments.length()), String.valueOf(functionType.getMinArguments()),\n+             (functionType.getMaxArguments() != Integer.MAX_VALUE ? \n+              \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\"));\n+      return;\n     }\n+    argument = arguments.next();\n+    ordinal++;\n+    \n+    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n   }\n+  \n+  // Check if the number of arguments exceeds the maximum allowed\n+  if (arguments.hasNext()) {\n+    List<Node> remainingArgs = ImmutableList.copyOf(arguments);\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+           validator.getReadableJSTypeName(call.getFirstChild(), false),\n+           String.valueOf(arguments.length() + remainingArgs.size()), \n+           String.valueOf(functionType.getMinArguments()),\n+           (functionType.getMaxArguments() != Integer.MAX_VALUE ? \n+            \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\"));\n+  }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}