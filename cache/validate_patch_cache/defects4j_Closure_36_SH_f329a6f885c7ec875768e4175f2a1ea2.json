{
    "patch": "if (value.isFunction()) {\n  String getterClassName = convention.getSingletonGetterClassName(value);\n  if (getterClassName != null) {\n    boolean isNew = callNode.isNew();\n    if (isNew && convention.isConstructor(value)) {\n      return false;\n    }\n    if (!isNew && !convention.isConstructor(value)) {\n      return false;\n    }\n    return !isSuperInvocation(value.getParent()) &&\n        convention.getSingletonGetterClassName(\n            reference, callNode, getterClassName);\n  } else if (isSuperInvocation(value.getParent())) {\n    return false;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..f2329d19 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,23 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+if (value.isFunction()) {\n+  String getterClassName = convention.getSingletonGetterClassName(value);\n+  if (getterClassName != null) {\n+    boolean isNew = callNode.isNew();\n+    if (isNew && convention.isConstructor(value)) {\n+      return false;\n+    }\n+    if (!isNew && !convention.isConstructor(value)) {\n+      return false;\n+    }\n+    return !isSuperInvocation(value.getParent()) &&\n+        convention.getSingletonGetterClassName(\n+            reference, callNode, getterClassName);\n+  } else if (isSuperInvocation(value.getParent())) {\n+    return false;\n+  }\n+}\n         }\n       }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}