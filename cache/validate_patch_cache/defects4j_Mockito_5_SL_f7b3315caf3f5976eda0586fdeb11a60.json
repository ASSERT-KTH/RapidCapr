{
    "patch": "        \n        timer.start();\n        while (timer.isCounting()) {\n            try {\n                delegate.verify(data);\n                \n                if (returnOnSuccess) {\n                    return;\n                } else {\n                    error = null;\n                }\n            } catch (MockitoAssertionError e) {\n                error = handleVerifyException(e);\n            } catch (ArgumentsAreDifferent e) { // fixed line\n                error = handleVerifyException(e);\n            }\n        }\n        ",
    "patch_diff": "diff --git a/src/org/mockito/internal/verification/VerificationOverTimeImpl.java b/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\nindex c5a66c501..4f90da61b 100644\n--- a/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n+++ b/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n@@ -88,7 +88,24 @@ public class VerificationOverTimeImpl implements VerificationMode {\n             } catch (MockitoAssertionError e) {\n                 error = handleVerifyException(e);\n             }\n-            catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n+        \n+        timer.start();\n+        while (timer.isCounting()) {\n+            try {\n+                delegate.verify(data);\n+                \n+                if (returnOnSuccess) {\n+                    return;\n+                } else {\n+                    error = null;\n+                }\n+            } catch (MockitoAssertionError e) {\n+                error = handleVerifyException(e);\n+            } catch (ArgumentsAreDifferent e) { // fixed line\n+                error = handleVerifyException(e);\n+            }\n+        }\n+        \n                 error = handleVerifyException(e);\n             }\n         }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}