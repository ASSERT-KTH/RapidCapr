{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    // Maybe STRING_KEY, STRING, GETPROP, GET, SET\n    String name = null;\n    if (NodeUtil.isGet(child)) {\n      // Handle GETPROP case\n      Node getStringNode = NodeUtil.getStringNode(child.getLastChild());\n      if (getStringNode == null) {\n        continue;\n      }\n      name = child.getLastChild().getString();\n      child = child.getFirstChild();\n    } else if (NodeUtil.isStringKey(child)) {\n      name = child.getString();\n    } else {\n      continue;\n    }\n\n    T type = typeSystem.getType(getScope(), n, name);\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n      // TODO(user): It doesn't look like the user can do much in this\n      // case right now.\n      if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(), child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION, name,\n            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..3a2d2382 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -487,30 +487,38 @@ class DisambiguateProperties<T> implements CompilerPass {\n     /**\n      * Processes a OBJECTLIT node.\n      */\n-    private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n-        }\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+    // Maybe STRING_KEY, STRING, GETPROP, GET, SET\n+    String name = null;\n+    if (NodeUtil.isGet(child)) {\n+      // Handle GETPROP case\n+      Node getStringNode = NodeUtil.getStringNode(child.getLastChild());\n+      if (getStringNode == null) {\n+        continue;\n+      }\n+      name = child.getLastChild().getString();\n+      child = child.getFirstChild();\n+    } else if (NodeUtil.isStringKey(child)) {\n+      name = child.getString();\n+    } else {\n+      continue;\n+    }\n+\n+    T type = typeSystem.getType(getScope(), n, name);\n+    Property prop = getProperty(name);\n+    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+      // TODO(user): It doesn't look like the user can do much in this\n+      // case right now.\n+      if (propertiesToErrorFor.containsKey(name)) {\n+        compiler.report(JSError.make(\n+            t.getSourceName(), child, propertiesToErrorFor.get(name),\n+            Warnings.INVALIDATION, name,\n+            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n       }\n     }\n+  }\n+}\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n       if (!t.isObject() || t.isAllType()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}