{
    "patch": "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n\n    Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArg == null) {\n        // try to extract the actual type argument from the superclass or superinterface\n        Type superclass = typeVariable.getGenericDeclaration();\n        if (superclass instanceof Class) {\n            actualTypeArg = extractTypeFromClass((Class<?>) superclass, typeVariable);\n        } else if (superclass instanceof ParameterizedType) {\n            actualTypeArg = extractTypeFromParameterizedType((ParameterizedType) superclass, typeVariable);\n        } else {\n            throw new RuntimeException(\"Unable to determine actual type argument for \" + typeVariable.getTypeName());\n        }\n    }\n\n    if (actualTypeArg instanceof WildcardType) {\n        actualTypeArg = extractWildcardTypeBounds((WildcardType) actualTypeArg);\n    }\n    if (actualTypeArg instanceof TypeVariable<?>) {\n        actualTypeArg = extractTypeVariableBounds((TypeVariable<?>) actualTypeArg);\n    }\n    registerTypeVariablesOn(actualTypeArg);\n}\n\nprivate Type extractTypeFromClass(Class<?> superclass, TypeVariable<?> typeVariable) {\n    TypeVariable<?>[] typeParameters = superclass.getTypeParameters();\n    Type[] genericInterfaces = superclass.getGenericInterfaces();\n    for (Type type : genericInterfaces) {\n        if (type instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType) type;\n            if (parameterizedType.getRawType().equals(superclass)) {\n                typeParameters = superclass.getTypeParameters();\n                break;\n            }\n        }\n    }\n    int index = Arrays.asList(typeParameters).indexOf(typeVariable);\n    if (index == -1) {\n        throw new RuntimeException(\"Unable to determine actual type argument for \" + typeVariable.getTypeName());\n    }\n    Type[] actualTypeArguments = superclass.getTypeParameters()[index].getBounds();\n    if (actualTypeArguments.length == 0) {\n        throw new RuntimeException(\"Type variable does not have any bounds: \" + typeVariable.getName());\n    }\n    return actualTypeArguments[0];\n}\n\nprivate Type extractWildcardTypeBounds(WildcardType wildcardType) {\n    Type[] lowerBounds = wildcardType.getLowerBounds();\n    if (lowerBounds != null && lowerBounds.length > 0) {\n        return lowerBounds[0];\n    }\n    Type[] upperBounds = wildcardType.getUpperBounds();\n    if (upperBounds != null && upperBounds.length > 0) {\n        return upperBounds[0];\n    }\n    throw new RuntimeException(\"Wildcard type argument is invalid for \" + wildcardType);\n}\n\nprivate Type extractTypeFromParameterizedType(ParameterizedType parameterizedType, TypeVariable<?> typeVariable) {\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    int index = Arrays.asList(typeParameters).indexOf(typeVariable);\n    if (index == -1) {\n        throw new RuntimeException(\"Unable to determine actual type argument for \" + typeVariable.getTypeName());\n    }\n    if (actualTypeArguments[index] instanceof WildcardType) {\n        actualTypeArguments[index] = extractWildcardTypeBounds((WildcardType) actualTypeArguments[index]);\n    } else if (actualTypeArguments[index] instanceof TypeVariable<?>) {\n        actualTypeArguments[index] = extractTypeVariableBounds((TypeVariable<?>) actualTypeArguments[index]);\n    }\n    return actualTypeArguments[index];\n}\n\nprivate Type extractTypeVariableBounds(TypeVariable<?> typeVariable) {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds != null && bounds.length > 0) {\n        return bounds[0];\n    }\n    throw new RuntimeException(\"Type variable does not have any bounds: \" + typeVariable.getName());\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..f4b07e55e 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,91 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+\n+    Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArg == null) {\n+        // try to extract the actual type argument from the superclass or superinterface\n+        Type superclass = typeVariable.getGenericDeclaration();\n+        if (superclass instanceof Class) {\n+            actualTypeArg = extractTypeFromClass((Class<?>) superclass, typeVariable);\n+        } else if (superclass instanceof ParameterizedType) {\n+            actualTypeArg = extractTypeFromParameterizedType((ParameterizedType) superclass, typeVariable);\n+        } else {\n+            throw new RuntimeException(\"Unable to determine actual type argument for \" + typeVariable.getTypeName());\n+        }\n+    }\n+\n+    if (actualTypeArg instanceof WildcardType) {\n+        actualTypeArg = extractWildcardTypeBounds((WildcardType) actualTypeArg);\n+    }\n+    if (actualTypeArg instanceof TypeVariable<?>) {\n+        actualTypeArg = extractTypeVariableBounds((TypeVariable<?>) actualTypeArg);\n+    }\n+    registerTypeVariablesOn(actualTypeArg);\n+}\n+\n+private Type extractTypeFromClass(Class<?> superclass, TypeVariable<?> typeVariable) {\n+    TypeVariable<?>[] typeParameters = superclass.getTypeParameters();\n+    Type[] genericInterfaces = superclass.getGenericInterfaces();\n+    for (Type type : genericInterfaces) {\n+        if (type instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType) type;\n+            if (parameterizedType.getRawType().equals(superclass)) {\n+                typeParameters = superclass.getTypeParameters();\n+                break;\n+            }\n+        }\n+    }\n+    int index = Arrays.asList(typeParameters).indexOf(typeVariable);\n+    if (index == -1) {\n+        throw new RuntimeException(\"Unable to determine actual type argument for \" + typeVariable.getTypeName());\n+    }\n+    Type[] actualTypeArguments = superclass.getTypeParameters()[index].getBounds();\n+    if (actualTypeArguments.length == 0) {\n+        throw new RuntimeException(\"Type variable does not have any bounds: \" + typeVariable.getName());\n+    }\n+    return actualTypeArguments[0];\n+}\n+\n+private Type extractWildcardTypeBounds(WildcardType wildcardType) {\n+    Type[] lowerBounds = wildcardType.getLowerBounds();\n+    if (lowerBounds != null && lowerBounds.length > 0) {\n+        return lowerBounds[0];\n+    }\n+    Type[] upperBounds = wildcardType.getUpperBounds();\n+    if (upperBounds != null && upperBounds.length > 0) {\n+        return upperBounds[0];\n+    }\n+    throw new RuntimeException(\"Wildcard type argument is invalid for \" + wildcardType);\n+}\n+\n+private Type extractTypeFromParameterizedType(ParameterizedType parameterizedType, TypeVariable<?> typeVariable) {\n+    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+    TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n+    int index = Arrays.asList(typeParameters).indexOf(typeVariable);\n+    if (index == -1) {\n+        throw new RuntimeException(\"Unable to determine actual type argument for \" + typeVariable.getTypeName());\n+    }\n+    if (actualTypeArguments[index] instanceof WildcardType) {\n+        actualTypeArguments[index] = extractWildcardTypeBounds((WildcardType) actualTypeArguments[index]);\n+    } else if (actualTypeArguments[index] instanceof TypeVariable<?>) {\n+        actualTypeArguments[index] = extractTypeVariableBounds((TypeVariable<?>) actualTypeArguments[index]);\n+    }\n+    return actualTypeArguments[index];\n+}\n+\n+private Type extractTypeVariableBounds(TypeVariable<?> typeVariable) {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds != null && bounds.length > 0) {\n+        return bounds[0];\n+    }\n+    throw new RuntimeException(\"Type variable does not have any bounds: \" + typeVariable.getName());\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: incompatible types: GenericDeclaration cannot be converted to Type",
    "test_result": "ERROR"
}