{
    "patch": "      Node lastArg = null;\n      for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n        Var var = fnScope.getVar(arg.getString());\n        if (referenced.contains(var)) {\n          lastArg = arg;\n        } else if (lastArg != null) {\n          // remove the current arg and the ones that follow it since they are unused\n          Node nextArg = arg;\n          while (nextArg != null) {\n            Node argToRemove = nextArg;\n            nextArg = nextArg.getNext();\n            argList.removeChild(argToRemove);\n            compiler.reportCodeChange();\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..3561499e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,20 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+      Node lastArg = null;\n+      for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+        Var var = fnScope.getVar(arg.getString());\n+        if (referenced.contains(var)) {\n+          lastArg = arg;\n+        } else if (lastArg != null) {\n+          // remove the current arg and the ones that follow it since they are unused\n+          Node nextArg = arg;\n+          while (nextArg != null) {\n+            Node argToRemove = nextArg;\n+            nextArg = nextArg.getNext();\n+            argList.removeChild(argToRemove);\n+            compiler.reportCodeChange();\n+          }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}