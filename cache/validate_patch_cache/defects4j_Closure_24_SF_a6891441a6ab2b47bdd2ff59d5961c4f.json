{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    Node parent = n.getParent();\n    if (parent != null && parent.isVar() && parent.getFirstChild() == n) {\n      if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n        String name = n.getFirstChild().getQualifiedName();\n        Var aliasVar = scope.getVar(name);\n        if (aliasVar == null) {  // Non-alias local variable\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n        } else if (!aliasVar.isBleedingFunction()) {  // Alias local variable\n          Node value = aliasVar.getInitialValue();\n          if (value != null && value.isQualifiedName()) {\n            String qualifiedName = value.getQualifiedName();\n            if (!qualifiedName.equals(name)) {\n              aliases.put(name, aliasVar);\n              transformation.addAlias(name, qualifiedName);\n            } else {  // Self-alias is considered a non-alias local variable\n              report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n            }\n          } else {  // Uninitialized variable is considered a non-alias local variable\n            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n          }\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..7db7f7c1 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,35 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    Node parent = n.getParent();\n+    if (parent != null && parent.isVar() && parent.getFirstChild() == n) {\n+      if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+        String name = n.getFirstChild().getQualifiedName();\n+        Var aliasVar = scope.getVar(name);\n+        if (aliasVar == null) {  // Non-alias local variable\n+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n+        } else if (!aliasVar.isBleedingFunction()) {  // Alias local variable\n+          Node value = aliasVar.getInitialValue();\n+          if (value != null && value.isQualifiedName()) {\n+            String qualifiedName = value.getQualifiedName();\n+            if (!qualifiedName.equals(name)) {\n+              aliases.put(name, aliasVar);\n+              transformation.addAlias(name, qualifiedName);\n+            } else {  // Self-alias is considered a non-alias local variable\n+              report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n+            }\n+          } else {  // Uninitialized variable is considered a non-alias local variable\n+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n+          }\n         }\n       }\n     }\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_GOOG_SCOPE_NON_ALIAS_LOCAL. The local variable goog.dom is in a goog.scope and is not an alias. at testcode line 1 : 27 expected:<0> but was:<1>",
    "test_result": "FAIL"
}