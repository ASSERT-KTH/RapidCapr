{
    "patch": "if (cfa != null && NodeUtil.hasFinally(parent.getParent())) {\n  for (Node finallyNode : cfa.finallyMap.get(parent.getParent())) {\n    cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(finallyNode, parent.getParent(), cfa));\n  }\n} else {\n  cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(fromNode, parent.getParent(), cfa));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..ef354384 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,13 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null && NodeUtil.hasFinally(parent.getParent())) {\n+  for (Node finallyNode : cfa.finallyMap.get(parent.getParent())) {\n+    cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(finallyNode, parent.getParent(), cfa));\n+  }\n+} else {\n+  cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(fromNode, parent.getParent(), cfa));\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: variable finallyNode is already defined in method computeFollowNode(Node,Node,ControlFlowAnalysis)",
    "test_result": "ERROR"
}