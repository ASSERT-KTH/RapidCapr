{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, khi, comparator);\n                if (comparator.compare(expanded, reflectedSimplex[reflectedSimplex.length - 2]) < 0) {\n                    // accept the expanded simplex\n                    simplex = expanded.getPoint() != reflected.getPoint() ?\n                             appendInPlace(reflectedSimplex, expanded) : reflectedSimplex;\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                }\n\n            } else {\n\n                // compute the contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = appendInPlace(original, contracted);\n                } else {\n\n                    // perform a shrink step\n                    final RealPointValuePair[] shrinkedSimplex =\n                        evaluateNewSimplex(original, sigma, comparator);\n                    for (int i = 1; i < shrinkedSimplex.length; i++) {\n                        simplex[i] = shrinkedSimplex[i];\n                    }\n\n                }\n\n            }\n\n            // check convergence\n            final RealPointValuePair[] current = simplex;\n            final double size = current[0].getPointRef()[0];\n            boolean converged = true;\n            for (int i = 1; i < current.length; i++) {\n                final double[] o = original[i].getPoint();\n                final double[] c = current[i].getPoint();\n                double delta = 0;\n                for (int j = 0; j < c.length; j++) {\n                    final double tmp = FastMath.abs(o[j] - c[j]);\n                    delta += tmp > absTol && tmp > relTol * FastMath.max(FastMath.abs(o[j]), FastMath.abs(c[j])) ? 1 : 0;\n                }\n                converged &= delta <= simplex.length;\n            }\n            if (converged || size <= functionValueAccuracy) {\n                return;\n            }\n\n        }\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..560090835 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -75,22 +75,51 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n                 // compute the expanded simplex\n                 final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, khi, comparator);\n+                if (comparator.compare(expanded, reflectedSimplex[reflectedSimplex.length - 2]) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = expanded.getPoint() != reflected.getPoint() ?\n+                             appendInPlace(reflectedSimplex, expanded) : reflectedSimplex;\n+                } else {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n                 }\n \n-                return;\n+            } else {\n \n-            }\n+                // compute the contracted simplex\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = appendInPlace(original, contracted);\n+                } else {\n+\n+                    // perform a shrink step\n+                    final RealPointValuePair[] shrinkedSimplex =\n+                        evaluateNewSimplex(original, sigma, comparator);\n+                    for (int i = 1; i < shrinkedSimplex.length; i++) {\n+                        simplex[i] = shrinkedSimplex[i];\n+                    }\n+\n+                }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            }\n \n             // check convergence\n+            final RealPointValuePair[] current = simplex;\n+            final double size = current[0].getPointRef()[0];\n+            boolean converged = true;\n+            for (int i = 1; i < current.length; i++) {\n+                final double[] o = original[i].getPoint();\n+                final double[] c = current[i].getPoint();\n+                double delta = 0;\n+                for (int j = 0; j < c.length; j++) {\n+                    final double tmp = FastMath.abs(o[j] - c[j]);\n+                    delta += tmp > absTol && tmp > relTol * FastMath.max(FastMath.abs(o[j]), FastMath.abs(c[j])) ? 1 : 0;\n+                }\n+                converged &= delta <= simplex.length;\n+            }\n+            if (converged || size <= functionValueAccuracy) {\n                 return;\n             }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}