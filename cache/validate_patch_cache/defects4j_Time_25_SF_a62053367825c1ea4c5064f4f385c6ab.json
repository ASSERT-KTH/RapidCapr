{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        final int offsetLocal = getOffset(instantLocal);\n        // adjust instantLocal using the estimate and recalc the offset\n        final long instantAdjusted = instantLocal - offsetLocal;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n\n        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            boolean isGap = false;\n            boolean isOverlap = false;\n\n            // check if we are at a DST gap or a DST overlap\n            if(offsetLocal > offsetAdjusted) {\n                isGap = true;\n            } else {\n                long nextAdjusted = nextTransition(instantAdjusted);\n                if(nextAdjusted > instantLocal - offsetLocal) {\n                    isOverlap = true;\n                }\n            }\n\n            // if we are at a DST gap, adjust the offset to the next transition\n            if(isGap) {\n                long nextLocal = nextTransition(instantLocal - offsetAdjusted);\n                int offsetNext = getOffset(nextLocal);\n                if(offsetNext > offsetAdjusted) {\n                    return offsetNext;\n                } else {\n                    return offsetAdjusted;\n                }\n            }\n\n            // if we are at a DST overlap, adjust the offset to the previous transition\n            if(isOverlap) {\n                long prevLocal = previousTransition(instantLocal - offsetAdjusted);\n                int offsetPrev = getOffset(prevLocal);\n                if(offsetPrev == offsetAdjusted) {\n                    return offsetLocal;\n                } else {\n                    return offsetPrev;\n                }\n            }\n        }\n\n        return offsetAdjusted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..0f375a4e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -882,21 +882,45 @@ public abstract class DateTimeZone implements Serializable {\n         // adjust instantLocal using the estimate and recalc the offset\n         final long instantAdjusted = instantLocal - offsetLocal;\n         final int offsetAdjusted = getOffset(instantAdjusted);\n+\n         // if the offsets differ, we must be near a DST boundary\n         if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n+            boolean isGap = false;\n+            boolean isOverlap = false;\n+\n+            // check if we are at a DST gap or a DST overlap\n+            if(offsetLocal > offsetAdjusted) {\n+                isGap = true;\n+            } else {\n+                long nextAdjusted = nextTransition(instantAdjusted);\n+                if(nextAdjusted > instantLocal - offsetLocal) {\n+                    isOverlap = true;\n+                }\n+            }\n+\n+            // if we are at a DST gap, adjust the offset to the next transition\n+            if(isGap) {\n+                long nextLocal = nextTransition(instantLocal - offsetAdjusted);\n+                int offsetNext = getOffset(nextLocal);\n+                if(offsetNext > offsetAdjusted) {\n+                    return offsetNext;\n+                } else {\n+                    return offsetAdjusted;\n+                }\n+            }\n+\n+            // if we are at a DST overlap, adjust the offset to the previous transition\n+            if(isOverlap) {\n+                long prevLocal = previousTransition(instantLocal - offsetAdjusted);\n+                int offsetPrev = getOffset(prevLocal);\n+                if(offsetPrev == offsetAdjusted) {\n                     return offsetLocal;\n+                } else {\n+                    return offsetPrev;\n                 }\n             }\n         }\n+\n         return offsetAdjusted;\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}