{
    "patch": "public class Distribution {\n\n    private double[] data;    // the frequency counts\n    private int n;            // number of elements\n    private double mean = Double.NaN;\n\n    public Distribution(double[] data) {\n        this.n = data.length;\n        this.data = new double[n];\n        System.arraycopy(data, 0, this.data, 0, n);\n        Arrays.sort(this.data);\n    }\n\n    public double mean() {\n        if (Double.isNaN(mean)) {\n            double sum = 0.0;\n            for (int i = 0; i < n; i++) {\n                sum += data[i];\n            }\n            mean = sum / n;\n        }\n        return mean;\n    }\n\n    public double variance() {\n        double mu = mean();\n        double sum = 0.0;\n        for (int i = 0; i < n; i++) {\n            sum += (data[i] - mu) * (data[i] - mu);\n        }\n        return sum / (n - 1);\n    }\n\n    public double stddev() {\n        return Math.sqrt(variance());\n    }\n\n    public double sample(double low, double high) {\n        while (true) {\n            double x = (high - low) * Math.random() + low;\n            if (density(x) > Math.random()) {\n                return x;\n            }\n        }\n    }\n\n    public double density(double x) {\n        int i = rank(x);\n        if (i == 0) return data[0];\n        if (i == n) return data[n-1];\n        double y0 = data[i-1];\n        double y1 = data[i];\n        double x0 = percentile((i-1.0) / n);\n        double x1 = percentile(i * 1.0 / n);\n        double k = (y1 - y0) / (x1 - x0);\n        double b = y1 - k * x1;\n        return k * x + b;\n    }\n\n    public double percentile(double p) {\n        int k = (int) Math.ceil(p * n);\n        return data[k-1];\n    }\n\n    public int rank(double x) {\n        int i = Arrays.binarySearch(data, x);\n        if (i < 0) {\n            i = -i-1;\n        }\n        return i;\n    }\n\n    public double[] rawData() {\n        return data;\n    }\n\n    @Override\n    public Distribution clone() {\n        double[] d = new double[this.n];\n        System.arraycopy(this.data, 0, d, 0, this.n);\n        return new Distribution(d);\n    }\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}