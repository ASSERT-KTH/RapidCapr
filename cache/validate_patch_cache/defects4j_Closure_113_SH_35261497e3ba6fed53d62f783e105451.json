{
    "patch": "      ProvidedName provided = providedNames.get(ns);\n      if (provided == null || !provided.isExplicitlyProvided()) {\n        unrecognizedRequires.add(\n            new UnrecognizedRequire(n, ns, t.getSourceName()));\n      } else {\n        JSModule providedModule = provided.explicitModule;\n        if (providedModule != null) {\n          JSModule module = t.getModule();\n          if (moduleGraph != null\n              && module != providedModule\n              && !moduleGraph.dependsOn(module, providedModule)) {\n            compiler.report(t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                    providedModule.getName(), module.getName()));\n          }\n        }\n      }\n\n      // Maybe register the name in the local scope.\n      maybeAddToSymbolTable(left);\n\n      // Strip the require call as long as the string argument isn't a js module.\n      maybeAddStringNodeToSymbolTable(arg);\n      if (provided == null) {\n        parent.replaceChild(n, arg.detachFromParent());\n      } else {\n        parent.removeChild(n);\n      }\n      compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..a623586f 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,34 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+      ProvidedName provided = providedNames.get(ns);\n+      if (provided == null || !provided.isExplicitlyProvided()) {\n+        unrecognizedRequires.add(\n+            new UnrecognizedRequire(n, ns, t.getSourceName()));\n+      } else {\n+        JSModule providedModule = provided.explicitModule;\n+        if (providedModule != null) {\n+          JSModule module = t.getModule();\n+          if (moduleGraph != null\n+              && module != providedModule\n+              && !moduleGraph.dependsOn(module, providedModule)) {\n+            compiler.report(t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+                    providedModule.getName(), module.getName()));\n+          }\n+        }\n+      }\n+\n+      // Maybe register the name in the local scope.\n+      maybeAddToSymbolTable(left);\n+\n+      // Strip the require call as long as the string argument isn't a js module.\n+      maybeAddStringNodeToSymbolTable(arg);\n+      if (provided == null) {\n+        parent.replaceChild(n, arg.detachFromParent());\n+      } else {\n+        parent.removeChild(n);\n+      }\n+      compiler.reportCodeChange();\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}