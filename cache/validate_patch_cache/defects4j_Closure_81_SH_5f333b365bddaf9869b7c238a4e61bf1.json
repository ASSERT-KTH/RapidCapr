{
    "patch": "Name name = functionNode.getFunctionName();\nNode newName = transform(name);\nif (name == null || name.getIdentifier() == null) {\n    newName = new Node(Token.NAME);\n    newName.setString(\"\");\n}\nboolean isUnnamedFunction = newName.getString().isEmpty();\nNode node = new Node(Token.FUNCTION);\nif (isUnnamedFunction) {\n    newName.setLineno(functionNode.getLineno());\n    int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n    newName.setCharno(position2charno(lpColumn));\n    node.addChildToBack(newName);\n} else {\n    Node fn = new Node(Token.FUNCTION_NAME, newName);\n    fn.setLineno(newName.getLineno());\n    int lpLineno = positionToLineno(functionNode.getAbsolutePosition() + functionNode.getLp());\n    fn.setCharno(lpLineno);\n    node.addChildToFront(fn);\n}\nNode lp = newNode(Token.LP);\nint lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\nlp.setLineno(positionToLineno(lparenCharno));\nlp.setCharno(position2charno(lparenCharno));\nfor (AstNode param : functionNode.getParams()) {\n    lp.addChildToBack(transform(param));\n}\nnode.addChildToBack(lp);\n\nNode bodyNode = transform(functionNode.getBody());\nparseDirectives(bodyNode);\nnode.addChildToBack(bodyNode);\nreturn node;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..fadf36ae 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,39 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+Name name = functionNode.getFunctionName();\n+Node newName = transform(name);\n+if (name == null || name.getIdentifier() == null) {\n+    newName = new Node(Token.NAME);\n+    newName.setString(\"\");\n+}\n+boolean isUnnamedFunction = newName.getString().isEmpty();\n+Node node = new Node(Token.FUNCTION);\n+if (isUnnamedFunction) {\n+    newName.setLineno(functionNode.getLineno());\n+    int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n+    newName.setCharno(position2charno(lpColumn));\n+    node.addChildToBack(newName);\n+} else {\n+    Node fn = new Node(Token.FUNCTION_NAME, newName);\n+    fn.setLineno(newName.getLineno());\n+    int lpLineno = positionToLineno(functionNode.getAbsolutePosition() + functionNode.getLp());\n+    fn.setCharno(lpLineno);\n+    node.addChildToFront(fn);\n+}\n+Node lp = newNode(Token.LP);\n+int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n+lp.setLineno(positionToLineno(lparenCharno));\n+lp.setCharno(position2charno(lparenCharno));\n+for (AstNode param : functionNode.getParams()) {\n+    lp.addChildToBack(transform(param));\n+}\n+node.addChildToBack(lp);\n+\n+Node bodyNode = transform(functionNode.getBody());\n+parseDirectives(bodyNode);\n+node.addChildToBack(bodyNode);\n+return node;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: variable name is already defined in method processFunctionNode(FunctionNode)",
    "test_result": "ERROR"
}