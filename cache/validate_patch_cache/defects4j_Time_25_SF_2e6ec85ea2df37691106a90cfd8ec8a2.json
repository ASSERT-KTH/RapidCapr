{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int initialOffset = getOffset(instantLocal);\n\n    if (getOffset(instantLocal - initialOffset) != initialOffset) {\n        final long nextTransitionLocal = nextTransition(instantLocal - initialOffset);\n        final long nextTransitionAdjusted = nextTransition(instantLocal - initialOffset - initialOffset);\n\n        if (nextTransitionLocal == nextTransitionAdjusted) {\n            return initialOffset;\n        }\n\n        final int offsetBeforeTransition = getOffset(nextTransitionLocal - 1);\n        final int offsetAfterTransition = getOffset(nextTransitionLocal);\n\n        if (offsetBeforeTransition < offsetAfterTransition) {\n            return offsetBeforeTransition;\n        } else if (offsetBeforeTransition > offsetAfterTransition) {\n            return offsetAfterTransition;\n        } else if (initialOffset < 0) {\n            return offsetBeforeTransition;\n        } else {\n            return offsetAfterTransition;\n        }\n    }\n\n    return initialOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..bace71e9 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,35 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    final int initialOffset = getOffset(instantLocal);\n+\n+    if (getOffset(instantLocal - initialOffset) != initialOffset) {\n+        final long nextTransitionLocal = nextTransition(instantLocal - initialOffset);\n+        final long nextTransitionAdjusted = nextTransition(instantLocal - initialOffset - initialOffset);\n+\n+        if (nextTransitionLocal == nextTransitionAdjusted) {\n+            return initialOffset;\n+        }\n+\n+        final int offsetBeforeTransition = getOffset(nextTransitionLocal - 1);\n+        final int offsetAfterTransition = getOffset(nextTransitionLocal);\n+\n+        if (offsetBeforeTransition < offsetAfterTransition) {\n+            return offsetBeforeTransition;\n+        } else if (offsetBeforeTransition > offsetAfterTransition) {\n+            return offsetAfterTransition;\n+        } else if (initialOffset < 0) {\n+            return offsetBeforeTransition;\n+        } else {\n+            return offsetAfterTransition;\n         }\n-        return offsetAdjusted;\n     }\n \n+    return initialOffset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}