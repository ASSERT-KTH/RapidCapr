{
    "patch": "        SavedField afterConflict = null;\n        for (int i = 1; i < count; i++) {\n            SavedField conflict = savedFields[i];\n            DurationField conflictField = conflict.iField.getDurationField();\n            if (compareReverse(conflictField, savedFields[i - 1].iField.getDurationField()) == 0) {\n                if (afterConflict == null) {\n                    afterConflict = conflict;\n                }\n            } else if (afterConflict != null) {\n                if (resolve(savedFields, afterConflict, conflict)) {\n                    count--;\n                    for (int j = i; j < count; j++) {\n                        savedFields[j] = savedFields[j + 1];\n                    }\n                    i--;\n                }\n                afterConflict = null;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..cf53855c 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,23 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        SavedField afterConflict = null;\n+        for (int i = 1; i < count; i++) {\n+            SavedField conflict = savedFields[i];\n+            DurationField conflictField = conflict.iField.getDurationField();\n+            if (compareReverse(conflictField, savedFields[i - 1].iField.getDurationField()) == 0) {\n+                if (afterConflict == null) {\n+                    afterConflict = conflict;\n+                }\n+            } else if (afterConflict != null) {\n+                if (resolve(savedFields, afterConflict, conflict)) {\n+                    count--;\n+                    for (int j = i; j < count; j++) {\n+                        savedFields[j] = savedFields[j + 1];\n+                    }\n+                    i--;\n+                }\n+                afterConflict = null;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}