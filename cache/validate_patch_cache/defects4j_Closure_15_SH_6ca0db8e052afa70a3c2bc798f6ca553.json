{
    "patch": "    if (n == null) {\n        return false;\n    }\n\n    // Handle the 'delete' operation\n    if (n.isDelProp()) {\n        return true;\n    }\n\n    // We care about calls to functions and new expressions that potentially have side effects.\n    if (NodeUtil.isCallOrNew(n) && NodeUtil.mayHaveSideEffects(n)) {\n        return true;\n    }\n\n    // Check for non-string property access\n    if (n.isGetElem() && !n.getLastChild().isString()) {\n        return true;\n    }\n\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n        // Skip control flow branching nodes\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n            return true;\n        }\n    }\n\n    return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..a8060476 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,33 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+    if (n == null) {\n+        return false;\n+    }\n+\n+    // Handle the 'delete' operation\n+    if (n.isDelProp()) {\n+        return true;\n+    }\n+\n+    // We care about calls to functions and new expressions that potentially have side effects.\n+    if (NodeUtil.isCallOrNew(n) && NodeUtil.mayHaveSideEffects(n)) {\n+        return true;\n+    }\n+\n+    // Check for non-string property access\n+    if (n.isGetElem() && !n.getLastChild().isString()) {\n+        return true;\n+    }\n+\n+    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+        // Skip control flow branching nodes\n+        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+            return true;\n+        }\n+    }\n+\n+    return false;\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}