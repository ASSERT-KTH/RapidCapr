{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int initialOffset = getOffset(instantLocal);\n\n    // if the initial offset is equal to the next offset after the\n    // given local instant, then the given local instant is not within\n    // a DST transition zone and the initial offset is correct\n    long nextTransitionInstant = nextTransition(instantLocal);\n    int nextOffset = getOffset(nextTransitionInstant);\n    if (initialOffset == nextOffset) {\n        return initialOffset;\n    }\n\n    // if the previous offset before the given local instant is\n    // equal to the next offset after the given local instant,\n    // then the initial offset should be the previous offset\n    long prevTransitionInstant = previousTransition(instantLocal);\n    int prevOffset = getOffset(prevTransitionInstant);\n    if (prevOffset == nextOffset) {\n        return prevOffset;\n    }\n\n    // if the given local instant is after the next transition, then\n    // the next offset is the valid offset for the given local instant\n    if (instantLocal >= nextTransitionInstant) {\n        return nextOffset;\n    }\n\n    // if the given local instant is before the previous transition,\n    // then the previous offset is the valid offset for the given local\n    // instant\n    if (instantLocal < prevTransitionInstant) {\n        return prevOffset;\n    }\n\n    // if the next offset is greater than the initial offset, then the\n    // next offset is the valid offset for the given local instant\n    if (nextOffset > initialOffset) {\n        return nextOffset;\n    }\n\n    // otherwise, the previous offset is the valid offset for the\n    // given local instant\n    return prevOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..f9e6f126 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,51 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        }\n-        return offsetAdjusted;\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int initialOffset = getOffset(instantLocal);\n+\n+    // if the initial offset is equal to the next offset after the\n+    // given local instant, then the given local instant is not within\n+    // a DST transition zone and the initial offset is correct\n+    long nextTransitionInstant = nextTransition(instantLocal);\n+    int nextOffset = getOffset(nextTransitionInstant);\n+    if (initialOffset == nextOffset) {\n+        return initialOffset;\n+    }\n+\n+    // if the previous offset before the given local instant is\n+    // equal to the next offset after the given local instant,\n+    // then the initial offset should be the previous offset\n+    long prevTransitionInstant = previousTransition(instantLocal);\n+    int prevOffset = getOffset(prevTransitionInstant);\n+    if (prevOffset == nextOffset) {\n+        return prevOffset;\n     }\n \n+    // if the given local instant is after the next transition, then\n+    // the next offset is the valid offset for the given local instant\n+    if (instantLocal >= nextTransitionInstant) {\n+        return nextOffset;\n+    }\n+\n+    // if the given local instant is before the previous transition,\n+    // then the previous offset is the valid offset for the given local\n+    // instant\n+    if (instantLocal < prevTransitionInstant) {\n+        return prevOffset;\n+    }\n+\n+    // if the next offset is greater than the initial offset, then the\n+    // next offset is the valid offset for the given local instant\n+    if (nextOffset > initialOffset) {\n+        return nextOffset;\n+    }\n+\n+    // otherwise, the previous offset is the valid offset for the\n+    // given local instant\n+    return prevOffset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "java.lang.IllegalArgumentException: Illegal instant due to time zone offset transition: 2006-06-09T11:00:00.000",
    "test_result": "FAIL"
}