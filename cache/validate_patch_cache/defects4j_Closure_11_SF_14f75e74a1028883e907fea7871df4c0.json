{
    "patch": "public static String getProp(String key) {\n    Properties props = new Properties();\n    String path = \"config.properties\";\n    String value = \"\";\n    InputStream is = null;\n\n    try {\n        is = new FileInputStream(path);\n        props.load(is);\n        value = props.getProperty(key);\n        \n        if (value == null) {\n            throw new IllegalArgumentException(\"Property not found: \" + key);\n        }\n\n    } catch (IOException ex) {\n        ex.printStackTrace();\n    } finally {\n        if (is != null) {\n            try {\n                is.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return value;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..3b9653c0 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,34 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public static String getProp(String key) {\n+    Properties props = new Properties();\n+    String path = \"config.properties\";\n+    String value = \"\";\n+    InputStream is = null;\n+\n+    try {\n+        is = new FileInputStream(path);\n+        props.load(is);\n+        value = props.getProperty(key);\n+        \n+        if (value == null) {\n+            throw new IllegalArgumentException(\"Property not found: \" + key);\n+        }\n+\n+    } catch (IOException ex) {\n+        ex.printStackTrace();\n+    } finally {\n+        if (is != null) {\n+            try {\n+                is.close();\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+    return value;\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}