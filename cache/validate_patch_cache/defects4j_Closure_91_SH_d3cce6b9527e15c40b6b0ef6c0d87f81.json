{
    "patch": "      if (NodeUtil.isClassExpression(n)) {\n        return false;\n      }\n\n      if (NodeUtil.isObjectLitKey(n, parent)) {\n        return false;\n      }\n\n      if (NodeUtil.isFunctionDeclaration(n) && NodeUtil.getEnclosingType(n) != null\n          && !NodeUtil.getEnclosingType(n).isEnumType()) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n            NodeUtil.isFunctionExpression(parent) ||\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n\n      if (NodeUtil.isPrototypePropertyDeclaration(parent)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..a1d388e7 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,38 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isClassExpression(n)) {\n+        return false;\n+      }\n+\n+      if (NodeUtil.isObjectLitKey(n, parent)) {\n+        return false;\n+      }\n+\n+      if (NodeUtil.isFunctionDeclaration(n) && NodeUtil.getEnclosingType(n) != null\n+          && !NodeUtil.getEnclosingType(n).isEnumType()) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions unless they would normally\n+      // be able to have a @this annotation associated with them. e.g.,\n+      // var a = function() { }; // or\n+      // function a() {} // or\n+      // a.x = function() {}; // or\n+      // var a = {x: function() {}};\n+      int pType = parent.getType();\n+      if (!(pType == Token.BLOCK ||\n+            pType == Token.SCRIPT ||\n+            pType == Token.NAME ||\n+            pType == Token.ASSIGN ||\n+            NodeUtil.isFunctionExpression(parent) ||\n+            // object literal keys\n+            pType == Token.STRING ||\n+            pType == Token.NUMBER)) {\n+        return false;\n+      }\n+\n+      if (NodeUtil.isPrototypePropertyDeclaration(parent)) {\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}