{
    "patch": "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        if (type instanceof TypeVariable<?>) {\n            TypeVariable<?> typeVar = (TypeVariable<?>) type;\n            readTypeVariable(typeVar);\n        } else {\n            registerTypeVariablesOn(type);\n        }\n    }\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n}\n\nprivate void readTypeVariable(TypeVariable<?> typeVar) {\n    ParameterizedType parameterizedType = getParentParameterizedType();\n    if (parameterizedType != null) {\n        for (Type t : parameterizedType.getActualTypeArguments()) {\n            if (t instanceof TypeVariable<?> && ((TypeVariable<?>) t).getName().equals(typeVar.getName())) {\n                readTypeVariable((TypeVariable<?>) t);\n            } else if (!(t instanceof TypeVariable<?>)) {\n                registerTypeVariablesOn(t);\n            }\n        }\n    } else {\n        for (Type type : typeVar.getBounds()) {\n            if (type instanceof TypeVariable<?>) {\n                readTypeVariable((TypeVariable<?>) type);\n            } else {\n                registerTypeVariablesOn(type);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..326dd3320 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,42 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    for (Type type : typeVariable.getBounds()) {\n+        if (type instanceof TypeVariable<?>) {\n+            TypeVariable<?> typeVar = (TypeVariable<?>) type;\n+            readTypeVariable(typeVar);\n+        } else {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+}\n+\n+private void readTypeVariable(TypeVariable<?> typeVar) {\n+    ParameterizedType parameterizedType = getParentParameterizedType();\n+    if (parameterizedType != null) {\n+        for (Type t : parameterizedType.getActualTypeArguments()) {\n+            if (t instanceof TypeVariable<?> && ((TypeVariable<?>) t).getName().equals(typeVar.getName())) {\n+                readTypeVariable((TypeVariable<?>) t);\n+            } else if (!(t instanceof TypeVariable<?>)) {\n+                registerTypeVariablesOn(t);\n+            }\n+        }\n+    } else {\n+        for (Type type : typeVar.getBounds()) {\n+            if (type instanceof TypeVariable<?>) {\n+                readTypeVariable((TypeVariable<?>) type);\n+            } else {\n+                registerTypeVariablesOn(type);\n+            }\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}