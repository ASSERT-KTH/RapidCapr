{
    "patch": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n   if(a < 0 || x < 0)\n      throw new IllegalArgumentException(\"Invalid argument for regularizedGammaP function.\");\n\n   double k = 0;\n   double num = Math.pow(x, a);\n   double incompleteGamma = incompleteGamma(a, x, epsilon, maxIterations);\n   double denom = (a * incGammaFactor(a, epsilon));\n   double quotient = num / denom;\n   \n   return quotient * incompleteGamma;\n}\n\npublic static double incompleteGamma(double a, double x, double epsilon, int maxIterations) {\n   if(a < 0 || x < 0)\n      throw new IllegalArgumentException(\"Invalid argument for incompleteGamma function.\");\n\n   if (x == 0) {\n      return 0;\n   }\n\n   double incompleteGamma = Math.exp(-x) * Math.pow(x, a) / a;\n   double prev = 0, current = incompleteGamma;\n   int n = 1;\n\n   while (n < maxIterations) {\n      double aplusn = a + n;\n      double temp = ((n * (aplusn - x)) * current) / (aplusn * aplusn);\n      prev = current;\n      current = incompleteGamma + temp;\n      if (Math.abs(current - prev) < epsilon * Math.abs(prev)) {\n         return current;\n      }\n      n++;\n   }\n\n   throw new MaxIterationExceededException(\"Maximum number of iterations exceeded for incompleteGamma function.\");\n}\n\nprivate static double incGammaFactor(double a, double epsilon) {\n   double factor = Math.pow(a / Math.E, a) * Math.sqrt(2 * Math.PI / a);\n   double temp = (1 / (12 * a)) - (1 / (360 * Math.pow(a, 3))) + (1 / (1260 * Math.pow(a, 5)));\n   double correction = Math.sqrt(temp);\n   return factor * correction * epsilon * (a - 0.5);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..42ab934ce 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,51 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n+   if(a < 0 || x < 0)\n+      throw new IllegalArgumentException(\"Invalid argument for regularizedGammaP function.\");\n+\n+   double k = 0;\n+   double num = Math.pow(x, a);\n+   double incompleteGamma = incompleteGamma(a, x, epsilon, maxIterations);\n+   double denom = (a * incGammaFactor(a, epsilon));\n+   double quotient = num / denom;\n+   \n+   return quotient * incompleteGamma;\n+}\n+\n+public static double incompleteGamma(double a, double x, double epsilon, int maxIterations) {\n+   if(a < 0 || x < 0)\n+      throw new IllegalArgumentException(\"Invalid argument for incompleteGamma function.\");\n+\n+   if (x == 0) {\n+      return 0;\n+   }\n+\n+   double incompleteGamma = Math.exp(-x) * Math.pow(x, a) / a;\n+   double prev = 0, current = incompleteGamma;\n+   int n = 1;\n+\n+   while (n < maxIterations) {\n+      double aplusn = a + n;\n+      double temp = ((n * (aplusn - x)) * current) / (aplusn * aplusn);\n+      prev = current;\n+      current = incompleteGamma + temp;\n+      if (Math.abs(current - prev) < epsilon * Math.abs(prev)) {\n+         return current;\n+      }\n+      n++;\n+   }\n+\n+   throw new MaxIterationExceededException(\"Maximum number of iterations exceeded for incompleteGamma function.\");\n+}\n+\n+private static double incGammaFactor(double a, double epsilon) {\n+   double factor = Math.pow(a / Math.E, a) * Math.sqrt(2 * Math.PI / a);\n+   double temp = (1 / (12 * a)) - (1 / (360 * Math.pow(a, 3))) + (1 / (1260 * Math.pow(a, 5)));\n+   double correction = Math.sqrt(temp);\n+   return factor * correction * epsilon * (a - 0.5);\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}