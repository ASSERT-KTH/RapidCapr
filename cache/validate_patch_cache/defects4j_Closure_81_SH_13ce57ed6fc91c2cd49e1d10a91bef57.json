{
    "patch": "Name name = functionNode.getFunctionName();\nBoolean isUnnamedFunction = false;\nif (name == null) {\n  name = new Name();\n  name.setIdentifier(\"\");\n  isUnnamedFunction = true;\n}\nNode node = newNode(Token.FUNCTION, transform(name));\n\nif (isUnnamedFunction) {\n  // In an unnamed function, assume the line number of the function is the\n  // line number of its body.\n  node.setLineno(functionNode.getBody().getLineno());\n}\n\nNode lp = newNode(Token.LP);\n// The left paren's line number is the line number of the function name.\nlp.setLineno(name.getLineno());\n\nint lparenCharno = functionNode.getLp() +\n    functionNode.getAbsolutePosition();\nlp.setCharno(position2charno(lparenCharno));\n\nfor (AstNode param : functionNode.getParams()) {\n  lp.addChildToBack(transform(param));\n}\nnode.addChildToBack(lp);\n\nNode bodyNode = transform(functionNode.getBody());\nparseDirectives(bodyNode);\nnode.addChildToBack(bodyNode);\nreturn node;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..47c6f6a9 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,38 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+Name name = functionNode.getFunctionName();\n+Boolean isUnnamedFunction = false;\n+if (name == null) {\n+  name = new Name();\n+  name.setIdentifier(\"\");\n+  isUnnamedFunction = true;\n+}\n+Node node = newNode(Token.FUNCTION, transform(name));\n+\n+if (isUnnamedFunction) {\n+  // In an unnamed function, assume the line number of the function is the\n+  // line number of its body.\n+  node.setLineno(functionNode.getBody().getLineno());\n+}\n+\n+Node lp = newNode(Token.LP);\n+// The left paren's line number is the line number of the function name.\n+lp.setLineno(name.getLineno());\n+\n+int lparenCharno = functionNode.getLp() +\n+    functionNode.getAbsolutePosition();\n+lp.setCharno(position2charno(lparenCharno));\n+\n+for (AstNode param : functionNode.getParams()) {\n+  lp.addChildToBack(transform(param));\n+}\n+node.addChildToBack(lp);\n+\n+Node bodyNode = transform(functionNode.getBody());\n+parseDirectives(bodyNode);\n+node.addChildToBack(bodyNode);\n+return node;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: variable name is already defined in method processFunctionNode(FunctionNode)",
    "test_result": "ERROR"
}