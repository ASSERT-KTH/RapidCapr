{
    "patch": "public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n    if (expected.length != observed.length) {\n        throw new IllegalArgumentException(\"observed, expected array lengths incorrect\");\n    }\n    if (!isPositive(expected)) {\n        throw new IllegalArgumentException(\"expected counts must be positive\");\n    }\n    if (!isNonNegative(observed)) {\n        throw new IllegalArgumentException(\"observed counts must be non-negative\");\n    }\n\n    double sum = 0.0;\n    double correction = 0.0;\n    int df = 0;\n\n    for (int i = 0; i < observed.length; i++) {\n        if (expected[i] == 0.0 && observed[i] > 0) {\n            throw new IllegalArgumentException(\"division by zero\");\n        }\n        double dev = observed[i] - expected[i];\n        sum += dev * dev / expected[i];\n        if (expected[i] < 5.0) {\n            correction += dev;\n            df -= 1;\n        }\n    }\n    df += expected.length - 1;\n\n    ChiSquaredDistribution chiSquared = new ChiSquaredDistribution(df);\n    double pValue = 1.0 - chiSquared.cumulativeProbability(sum + correction * correction / getSum(expected));\n\n    return pValue;\n}\n\nprivate double getSum(double[] vals) {\n    double sum = 0.0;\n    for (double val : vals) {\n        sum += val;\n    }\n    return sum;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\nindex c87b0101f..390d6eeef 100644\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n@@ -61,24 +61,47 @@ public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n      * @throws IllegalArgumentException if preconditions are not met\n      * or length is less than 2\n      */\n-    public double chiSquare(double[] expected, long[] observed)\n-        throws IllegalArgumentException {\n-        if ((expected.length < 2) || (expected.length != observed.length)) {\n-            throw new IllegalArgumentException(\n-                    \"observed, expected array lengths incorrect\");\n-        }\n-        if (!isPositive(expected) || !isNonNegative(observed)) {\n-            throw new IllegalArgumentException(\n-                \"observed counts must be non-negative and expected counts must be postive\");\n+public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n+    if (expected.length != observed.length) {\n+        throw new IllegalArgumentException(\"observed, expected array lengths incorrect\");\n+    }\n+    if (!isPositive(expected)) {\n+        throw new IllegalArgumentException(\"expected counts must be positive\");\n+    }\n+    if (!isNonNegative(observed)) {\n+        throw new IllegalArgumentException(\"observed counts must be non-negative\");\n+    }\n+\n+    double sum = 0.0;\n+    double correction = 0.0;\n+    int df = 0;\n+\n+    for (int i = 0; i < observed.length; i++) {\n+        if (expected[i] == 0.0 && observed[i] > 0) {\n+            throw new IllegalArgumentException(\"division by zero\");\n         }\n-        double sumSq = 0.0d;\n-        double dev = 0.0d;\n-        for (int i = 0; i < observed.length; i++) {\n-                dev = ((double) observed[i] - expected[i]);\n-                sumSq += dev * dev / expected[i];\n+        double dev = observed[i] - expected[i];\n+        sum += dev * dev / expected[i];\n+        if (expected[i] < 5.0) {\n+            correction += dev;\n+            df -= 1;\n         }\n-        return sumSq;\n     }\n+    df += expected.length - 1;\n+\n+    ChiSquaredDistribution chiSquared = new ChiSquaredDistribution(df);\n+    double pValue = 1.0 - chiSquared.cumulativeProbability(sum + correction * correction / getSum(expected));\n+\n+    return pValue;\n+}\n+\n+private double getSum(double[] vals) {\n+    double sum = 0.0;\n+    for (double val : vals) {\n+        sum += val;\n+    }\n+    return sum;\n+}\n \n     /**\n      * {@inheritDoc}",
    "result_reason": "error: ChiSquaredDistribution is abstract; cannot be instantiated",
    "test_result": "ERROR"
}