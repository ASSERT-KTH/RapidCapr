{
    "patch": "    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        Class<?> lhsClass = lhs.getClass();\n        if (!lhsClass.isArray()) {\n            // The simple case, not an array, just test the element\n            isEquals = lhs.equals(rhs);\n        } else if (!rhs.getClass().equals(lhsClass)) {\n            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n            this.setEquals(false);\n        } else if (lhs instanceof long[]) {\n            append((long[]) lhs, (long[]) rhs);\n        } else if (lhs instanceof int[]) {\n            append((int[]) lhs, (int[]) rhs);\n        } else if (lhs instanceof short[]) {\n            append((short[]) lhs, (short[]) rhs);\n        } else if (lhs instanceof char[]) {\n            append((char[]) lhs, (char[]) rhs);\n        } else if (lhs instanceof byte[]) {\n            append((byte[]) lhs, (byte[]) rhs);\n        } else if (lhs instanceof double[]) {\n            append((double[]) lhs, (double[]) rhs);\n        } else if (lhs instanceof float[]) {\n            append((float[]) lhs, (float[]) rhs);\n        } else if (lhs instanceof boolean[]) {\n            append((boolean[]) lhs, (boolean[]) rhs);\n        } else {\n            // Not an array of primitives\n            Object[] lhsArray = (Object[]) lhs;\n            Object[] rhsArray = (Object[]) rhs;\n            if (lhsArray.length != rhsArray.length) {\n                this.setEquals(false);\n                return this;\n            }\n            for (int i = 0; i < lhsArray.length && isEquals; ++i) {\n                append(lhsArray[i], rhsArray[i]);\n            }\n        }\n        return this;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..d74dcec1 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -365,9 +365,6 @@ public class EqualsBuilder {\n      * @return EqualsBuilder - used to chain calls.\n      */\n     public EqualsBuilder append(Object lhs, Object rhs) {\n-        if (isEquals == false) {\n-            return this;\n-        }\n         if (lhs == rhs) {\n             return this;\n         }\n@@ -375,17 +372,14 @@ public class EqualsBuilder {\n             this.setEquals(false);\n             return this;\n         }\n-        Class lhsClass = lhs.getClass();\n+        Class<?> lhsClass = lhs.getClass();\n         if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n+            // The simple case, not an array, just test the element\n+            isEquals = lhs.equals(rhs);\n+        } else if (!rhs.getClass().equals(lhsClass)) {\n             // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n             this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n+        } else if (lhs instanceof long[]) {\n             append((long[]) lhs, (long[]) rhs);\n         } else if (lhs instanceof int[]) {\n             append((int[]) lhs, (int[]) rhs);\n@@ -403,7 +397,15 @@ public class EqualsBuilder {\n             append((boolean[]) lhs, (boolean[]) rhs);\n         } else {\n             // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+            Object[] lhsArray = (Object[]) lhs;\n+            Object[] rhsArray = (Object[]) rhs;\n+            if (lhsArray.length != rhsArray.length) {\n+                this.setEquals(false);\n+                return this;\n+            }\n+            for (int i = 0; i < lhsArray.length && isEquals; ++i) {\n+                append(lhsArray[i], rhsArray[i]);\n+            }\n         }\n         return this;\n     }",
    "result_reason": "error: generics are not supported in -source 1.3",
    "test_result": "ERROR"
}