{
    "patch": "        // Set the period fields based on the duration\n        long remainder = duration;\n\n        int years = FieldUtils.safeToInt(remainder / DateUtils.MILLIS_PER_YEAR);\n        remainder = FieldUtils.safeSubtract(remainder, (long) years * DateUtils.MILLIS_PER_YEAR);\n\n        int months = FieldUtils.safeToInt(remainder / DateUtils.MILLIS_PER_MONTH);\n        remainder = FieldUtils.safeSubtract(remainder, (long) months * DateUtils.MILLIS_PER_MONTH);\n\n        int days = FieldUtils.safeToInt(remainder / DateUtils.MILLIS_PER_DAY);\n        remainder = FieldUtils.safeSubtract(remainder, (long) days * DateUtils.MILLIS_PER_DAY);\n\n        int hours = FieldUtils.safeToInt(remainder / DateUtils.MILLIS_PER_HOUR);\n        remainder = FieldUtils.safeSubtract(remainder, (long) hours * DateUtils.MILLIS_PER_HOUR);\n\n        int minutes = FieldUtils.safeToInt(remainder / DateUtils.MILLIS_PER_MINUTE);\n        remainder = FieldUtils.safeSubtract(remainder, (long) minutes * DateUtils.MILLIS_PER_MINUTE);\n\n        int seconds = FieldUtils.safeToInt(remainder / DateUtils.MILLIS_PER_SECOND);\n        remainder = FieldUtils.safeSubtract(remainder, (long) seconds * DateUtils.MILLIS_PER_SECOND);\n\n        int millis = FieldUtils.safeToInt(remainder);\n\n        iPeriod = new Period(\n                years, months, days, hours, minutes, seconds, millis, null);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..9231b241 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,31 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n-    }\n+        // Set the period fields based on the duration\n+        long remainder = duration;\n+\n+        int years = FieldUtils.safeToInt(remainder / DateUtils.MILLIS_PER_YEAR);\n+        remainder = FieldUtils.safeSubtract(remainder, (long) years * DateUtils.MILLIS_PER_YEAR);\n+\n+        int months = FieldUtils.safeToInt(remainder / DateUtils.MILLIS_PER_MONTH);\n+        remainder = FieldUtils.safeSubtract(remainder, (long) months * DateUtils.MILLIS_PER_MONTH);\n+\n+        int days = FieldUtils.safeToInt(remainder / DateUtils.MILLIS_PER_DAY);\n+        remainder = FieldUtils.safeSubtract(remainder, (long) days * DateUtils.MILLIS_PER_DAY);\n+\n+        int hours = FieldUtils.safeToInt(remainder / DateUtils.MILLIS_PER_HOUR);\n+        remainder = FieldUtils.safeSubtract(remainder, (long) hours * DateUtils.MILLIS_PER_HOUR);\n+\n+        int minutes = FieldUtils.safeToInt(remainder / DateUtils.MILLIS_PER_MINUTE);\n+        remainder = FieldUtils.safeSubtract(remainder, (long) minutes * DateUtils.MILLIS_PER_MINUTE);\n+\n+        int seconds = FieldUtils.safeToInt(remainder / DateUtils.MILLIS_PER_SECOND);\n+        remainder = FieldUtils.safeSubtract(remainder, (long) seconds * DateUtils.MILLIS_PER_SECOND);\n+\n+        int millis = FieldUtils.safeToInt(remainder);\n+\n+        iPeriod = new Period(\n+                years, months, days, hours, minutes, seconds, millis, null);\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}