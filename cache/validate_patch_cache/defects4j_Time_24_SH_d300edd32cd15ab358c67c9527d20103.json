{
    "patch": "try {\n    DateTimeField first = savedFields[0].iField;\n    // check if field range exceeds valid values and adjust base year\n    if (first.getType() == DateTimeFieldType.monthOfYear()) {\n        int month = first.get(millis);\n        if (month > 12) {\n            millis = iChrono.monthOfYear().set(millis, 12);\n            if (resetFields) {\n                savedFields[0] = new SavedField(iChrono.year(), 1970);\n            } else {\n                savedFields = insertField(savedFields, new SavedField(iChrono.year(), 1970), 0);\n                iSavedFields = savedFields;\n                count++;\n            }\n        } else if (month < 1) {\n            millis = iChrono.monthOfYear().set(millis, 1);\n            if (resetFields) {\n                savedFields[0] = new SavedField(iChrono.year(), 1970);\n            } else {\n                savedFields = insertField(savedFields, new SavedField(iChrono.year(), 1970), 0);\n                iSavedFields = savedFields;\n                count++;\n            }\n        }\n    } else if (first.getType() == DateTimeFieldType.dayOfMonth()) {\n        int month = iChrono.monthOfYear().get(millis);\n        int year = iChrono.year().get(millis);\n        int day = first.get(millis);\n        if (day > iChrono.monthOfYear().getMaximumValue(year, month)) {\n            millis = iChrono.dayOfMonth().set(millis, iChrono.monthOfYear().getMaximumValue(year, month));\n            if (resetFields) {\n                savedFields[0] = new SavedField(iChrono.year(), 1970);\n            } else {\n                savedFields = insertField(savedFields, new SavedField(iChrono.year(), 1970), 0);\n                iSavedFields = savedFields;\n                count++;\n            }\n        } else if (day < 1) {\n            millis = iChrono.dayOfMonth().set(millis, 1);\n            if (resetFields) {\n                savedFields[0] = new SavedField(iChrono.year(), 1970);\n            } else {\n                savedFields = insertField(savedFields, new SavedField(iChrono.year(), 1970), 0);\n                iSavedFields = savedFields;\n                count++;\n            }\n        }\n    } else if (first.getType() == DateTimeFieldType.year()) {\n        int year = first.get(millis);\n        if (year < 0) {\n            millis = first.set(millis, 0);\n            if (resetFields) {\n                savedFields[0] = new SavedField(first, 0);\n            } else {\n                savedFields = insertField(savedFields, new SavedField(first, 0), 0);\n                iSavedFields = savedFields;\n                count++;\n            }\n        }\n    } else if (first.getType() == DateTimeFieldType.weekyear()) {\n        int weekyear = first.get(millis);\n        if (weekyear < 0) {\n            millis = first.set(millis, 0);\n            if (resetFields) {\n                savedFields[0] = new SavedField(first, 0);\n            } else {\n                savedFields = insertField(savedFields, new SavedField(first, 0), 0);\n                iSavedFields = savedFields;\n                count++;\n            }\n        }\n    }\n    // set remaining fields\n    for (int i = 1; i < count; i++) {\n        millis = savedFields[i].set(millis, resetFields);\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..2f73a186 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,88 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    DateTimeField first = savedFields[0].iField;\n+    // check if field range exceeds valid values and adjust base year\n+    if (first.getType() == DateTimeFieldType.monthOfYear()) {\n+        int month = first.get(millis);\n+        if (month > 12) {\n+            millis = iChrono.monthOfYear().set(millis, 12);\n+            if (resetFields) {\n+                savedFields[0] = new SavedField(iChrono.year(), 1970);\n+            } else {\n+                savedFields = insertField(savedFields, new SavedField(iChrono.year(), 1970), 0);\n+                iSavedFields = savedFields;\n+                count++;\n+            }\n+        } else if (month < 1) {\n+            millis = iChrono.monthOfYear().set(millis, 1);\n+            if (resetFields) {\n+                savedFields[0] = new SavedField(iChrono.year(), 1970);\n+            } else {\n+                savedFields = insertField(savedFields, new SavedField(iChrono.year(), 1970), 0);\n+                iSavedFields = savedFields;\n+                count++;\n+            }\n+        }\n+    } else if (first.getType() == DateTimeFieldType.dayOfMonth()) {\n+        int month = iChrono.monthOfYear().get(millis);\n+        int year = iChrono.year().get(millis);\n+        int day = first.get(millis);\n+        if (day > iChrono.monthOfYear().getMaximumValue(year, month)) {\n+            millis = iChrono.dayOfMonth().set(millis, iChrono.monthOfYear().getMaximumValue(year, month));\n+            if (resetFields) {\n+                savedFields[0] = new SavedField(iChrono.year(), 1970);\n+            } else {\n+                savedFields = insertField(savedFields, new SavedField(iChrono.year(), 1970), 0);\n+                iSavedFields = savedFields;\n+                count++;\n+            }\n+        } else if (day < 1) {\n+            millis = iChrono.dayOfMonth().set(millis, 1);\n+            if (resetFields) {\n+                savedFields[0] = new SavedField(iChrono.year(), 1970);\n+            } else {\n+                savedFields = insertField(savedFields, new SavedField(iChrono.year(), 1970), 0);\n+                iSavedFields = savedFields;\n+                count++;\n+            }\n+        }\n+    } else if (first.getType() == DateTimeFieldType.year()) {\n+        int year = first.get(millis);\n+        if (year < 0) {\n+            millis = first.set(millis, 0);\n+            if (resetFields) {\n+                savedFields[0] = new SavedField(first, 0);\n+            } else {\n+                savedFields = insertField(savedFields, new SavedField(first, 0), 0);\n+                iSavedFields = savedFields;\n+                count++;\n+            }\n+        }\n+    } else if (first.getType() == DateTimeFieldType.weekyear()) {\n+        int weekyear = first.get(millis);\n+        if (weekyear < 0) {\n+            millis = first.set(millis, 0);\n+            if (resetFields) {\n+                savedFields[0] = new SavedField(first, 0);\n+            } else {\n+                savedFields = insertField(savedFields, new SavedField(first, 0), 0);\n+                iSavedFields = savedFields;\n+                count++;\n+            }\n+        }\n+    }\n+    // set remaining fields\n+    for (int i = 1; i < count; i++) {\n+        millis = savedFields[i].set(millis, resetFields);\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}