{
    "patch": "  private JSType greatestSubtypeHelper(List<JSType> types) {\n    checkState(!types.isEmpty());\n    for (JSType t : types) {\n      checkNotNull(t);\n    }\n\n    Builder builder = new Builder();\n    for (int i = 0; i < types.size(); ++i) {\n      JSType type = types.get(i);\n      if (!(type instanceof ObjectType)) {\n        builder.addAlternate(type);\n      } else {\n        ObjectType objType = (ObjectType) type;\n        Set<String> props = objType.getOwnPropertyNames();\n        if (props.isEmpty()) {\n          builder.addAlternate(NO_OBJECT_TYPE);\n        } else {\n          Map<String, List<JSType>> propTypes = new HashMap<>();\n          for (String propName : props) {\n            JSType propType = objType.getPropertyType(propName);\n            if (i == 0) {\n              builder.addAlternate(propType);\n            } else {\n              JSType otherPropType = types.get(0).getPropertyType(propName);\n              JSType lub = propType.getGreatestSubtype(otherPropType);\n              if (lub.isBottom()) {\n                return NO_TYPE;\n              }\n              propTypes.computeIfAbsent(propName, k -> new ArrayList<>()).add(lub);\n            }\n          }\n          for (Entry<String, List<JSType>> entry : propTypes.entrySet()) {\n            String propName = entry.getKey();\n            JSType lub = getLeastSupertype(entry.getValue());\n            builder.addAlternate(OBJECT_TYPE.withProperty(propName, lub));\n          }\n        }\n      }\n    }\n    JSType result = builder.build();\n    return result == null ? NO_OBJECT_TYPE : result;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..711864c5 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -279,54 +279,48 @@ public class UnionType extends JSType {\n     }\n \n     if (that instanceof UnionType) {\n-      for (JSType otherAlternate : ((UnionType) that).alternates) {\n-        if (otherAlternate.isSubtype(this)) {\n-          builder.addAlternate(otherAlternate);\n+  private JSType greatestSubtypeHelper(List<JSType> types) {\n+    checkState(!types.isEmpty());\n+    for (JSType t : types) {\n+      checkNotNull(t);\n+    }\n+\n+    Builder builder = new Builder();\n+    for (int i = 0; i < types.size(); ++i) {\n+      JSType type = types.get(i);\n+      if (!(type instanceof ObjectType)) {\n+        builder.addAlternate(type);\n+      } else {\n+        ObjectType objType = (ObjectType) type;\n+        Set<String> props = objType.getOwnPropertyNames();\n+        if (props.isEmpty()) {\n+          builder.addAlternate(NO_OBJECT_TYPE);\n+        } else {\n+          Map<String, List<JSType>> propTypes = new HashMap<>();\n+          for (String propName : props) {\n+            JSType propType = objType.getPropertyType(propName);\n+            if (i == 0) {\n+              builder.addAlternate(propType);\n+            } else {\n+              JSType otherPropType = types.get(0).getPropertyType(propName);\n+              JSType lub = propType.getGreatestSubtype(otherPropType);\n+              if (lub.isBottom()) {\n+                return NO_TYPE;\n+              }\n+              propTypes.computeIfAbsent(propName, k -> new ArrayList<>()).add(lub);\n+            }\n+          }\n+          for (Entry<String, List<JSType>> entry : propTypes.entrySet()) {\n+            String propName = entry.getKey();\n+            JSType lub = getLeastSupertype(entry.getValue());\n+            builder.addAlternate(OBJECT_TYPE.withProperty(propName, lub));\n+          }\n         }\n       }\n-    } else if (that.isSubtype(this)) {\n-      builder.addAlternate(that);\n     }\n     JSType result = builder.build();\n-    if (result != null) {\n-      return result;\n-    } else if (this.isObject() && that.isObject()) {\n-      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n-    } else {\n-      return getNativeType(JSTypeNative.NO_TYPE);\n-    }\n-  }\n-\n-  /**\n-   * Two union types are equal if they have the same number of alternates\n-   * and all alternates are equal.\n-   */\n-  @Override\n-  public boolean equals(Object object) {\n-    if (object instanceof UnionType) {\n-      UnionType that = (UnionType) object;\n-      return alternates.equals(that.alternates);\n-    } else {\n-      return false;\n-    }\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    return alternates.hashCode();\n-  }\n-\n-  @Override\n-  public boolean isUnionType() {\n-    return true;\n+    return result == null ? NO_OBJECT_TYPE : result;\n   }\n-\n-  @Override\n-  public boolean isObject() {\n-    for (JSType alternate : alternates) {\n-      if (!alternate.isObject()) {\n-        return false;\n-      }\n     }\n     return true;\n   }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}