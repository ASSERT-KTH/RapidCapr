{
    "patch": "if (block.isFunction) {\n  // Functions share a block with their declaration, which can be an\n  // assignment. To avoid thinking that the variable is assigned in these\n  // cases, skip this function body and continue checking the parent block.\n  continue;\n} else if (block.isLoop) {\n  // The block has a loop statement; any change to this variable might be\n  // repeated in subsequent iterations.\n  return false;\n} else if (block.isExceptionHandler()) {\n  // Exception handlers share a block with the parent try block. Any change\n  // to this variable might be repeated if the try block is retried.\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..c6d08b8d 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,20 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (block.isFunction) {\n+  // Functions share a block with their declaration, which can be an\n+  // assignment. To avoid thinking that the variable is assigned in these\n+  // cases, skip this function body and continue checking the parent block.\n+  continue;\n+} else if (block.isLoop) {\n+  // The block has a loop statement; any change to this variable might be\n+  // repeated in subsequent iterations.\n+  return false;\n+} else if (block.isExceptionHandler()) {\n+  // Exception handlers share a block with the parent try block. Any change\n+  // to this variable might be repeated if the try block is retried.\n+  return false;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}