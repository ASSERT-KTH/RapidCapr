{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    \n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct != null && ct.isConstructor()) {\n            type = ct.getInstanceType();\n        } else if (constructorType.isUnknownType() || constructorType.isAllType()) {\n            type = getNativeType(UNKNOWN_TYPE);\n        } else {\n            // for other cases, e.g. function type or NoObjectType,\n            // we assign the instance type of the function\n            JSType instanceType = constructorType.autobox().restrictByNotNullOrUndefined();\n            if (instanceType.isObjectType()) {\n                type = instanceType;\n            } else {\n                type = getNativeType(UNKNOWN_TYPE);\n            }\n        }\n    } else {\n        type = getNativeType(UNKNOWN_TYPE);\n    }\n    n.setJSType(type);\n\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n    return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..0049edd1 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,38 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n+    \n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n     if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n         FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n         if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+            type = ct.getInstanceType();\n+        } else if (constructorType.isUnknownType() || constructorType.isAllType()) {\n+            type = getNativeType(UNKNOWN_TYPE);\n+        } else {\n+            // for other cases, e.g. function type or NoObjectType,\n+            // we assign the instance type of the function\n+            JSType instanceType = constructorType.autobox().restrictByNotNullOrUndefined();\n+            if (instanceType.isObjectType()) {\n+                type = instanceType;\n+            } else {\n+                type = getNativeType(UNKNOWN_TYPE);\n+            }\n         }\n-      }\n+    } else {\n+        type = getNativeType(UNKNOWN_TYPE);\n     }\n     n.setJSType(type);\n+\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+        scope = traverse(arg, scope);\n     }\n     return scope;\n-  }\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}