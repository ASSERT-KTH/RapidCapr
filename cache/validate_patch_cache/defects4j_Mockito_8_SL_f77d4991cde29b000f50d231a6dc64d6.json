{
    "patch": "} else if (actualTypeArgument instanceof TypeVariable && contextualActualTypeParameters.containsKey(actualTypeArgument)) {\n    contextualActualTypeParameters.put(typeParameter, contextualActualTypeParameters.get(actualTypeArgument));\n} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).getUpperBounds().length == 0) {\n    Type[] lowerBounds = ((WildcardType) actualTypeArgument).getLowerBounds();\n    contextualActualTypeParameters.put(typeParameter, (lowerBounds.length > 0) ? lowerBounds[0] : Object.class);\n} else {\n    contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..24efe4e8d 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,14 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+} else if (actualTypeArgument instanceof TypeVariable && contextualActualTypeParameters.containsKey(actualTypeArgument)) {\n+    contextualActualTypeParameters.put(typeParameter, contextualActualTypeParameters.get(actualTypeArgument));\n+} else if (actualTypeArgument instanceof WildcardType && ((WildcardType) actualTypeArgument).getUpperBounds().length == 0) {\n+    Type[] lowerBounds = ((WildcardType) actualTypeArgument).getLowerBounds();\n+    contextualActualTypeParameters.put(typeParameter, (lowerBounds.length > 0) ? lowerBounds[0] : Object.class);\n+} else {\n+    contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+}\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}