{
    "patch": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node fnBlock = getLastExecutionBlock(fnNode.getLastChild());\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n\n  // FUNCTIONS NODES\n  // 1. LP_NODE: [, ARG1, ARG2, ...]\n  // 2. FUNCTION_NODE: { NAME, PARAM_LIST, BODY ... }\n  Node lpNode = NodeUtil.getFunctionParameters(fnNode);\n\n  // If function and call don't have matching number of arguments,\n  // then the function cannot be inlined.\n  if (NodeUtil.getFunctionParameters(fnNode).getChildCount() != callNode.getChildCount() - 1) {\n    return CanInlineResult.NO;\n  }\n\n  // Handle the case when functions are called via 'call' or 'apply',\n  // that have a this-object as the first parameter, which is not part of the\n  // called function's parameters.\n  int startArgIndex = 0;\n  if (!callNode.getFirstChild().isName() && NodeUtil.isFunctionObjectCall(callNode)) {\n    startArgIndex = 1;\n  }\n\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node argList = cArg;\n  int argIndex = startArgIndex;\n\n  for (Node fnParam = lpNode.getFirstChild(); fnParam != null; fnParam = fnParam.getNext()) {\n    // For each named parameter check if a mutable argument use more than one.\n    // Names that are never referenced more than once can have multiple\n    // mutable parameters.\n    if (argIndex >= startArgIndex) {\n      Node argNode = cArg;\n\n      for (int i = startArgIndex; i < argIndex; i++) {\n        argNode = argNode.getNext();\n      }\n\n      checkNotNull(argNode);\n      if (NodeUtil.mayEffectMutableState(argNode, compiler)) {\n        int refCount = NodeUtil.getNameReferenceCount(fnBlock, fnParam.getString());\n        if (refCount > 1 || (refCount == 0 && !NodeUtil.isImmutableValue(argNode))) {\n          return CanInlineResult.NO;\n        }\n      }\n\n      // Check for side-effect.\n      if (NodeUtil.mayHaveSideEffects(argNode, compiler)) {\n        return CanInlineResult.NO;\n      }\n\n      cArg = cArg.getNext();\n    }\n\n    argIndex++;\n  }\n\n  if (!NodeUtil.isMutationTarget(fnNode) && NodeUtil.isExpressionResultUsed(callNode)) {\n    return CanInlineResult.YES;\n  }\n\n  return CanInlineResult.NO;\n}\n\nprivate Node getLastExecutionBlock(Node fnBlock) {\n  // Traverses through any nested blocks and returns the last executable\n  // block in the function body.\n  while (NodeUtil.isControlStructure(fnBlock.getLastChild())\n      && NodeUtil.getLastChild(fnBlock.getLastChild()) != null) {\n    fnBlock = NodeUtil.getLastChild(fnBlock.getLastChild());\n  }\n  return fnBlock;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..91884f12 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,68 +686,86 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n+private CanInlineResult canInlineReferenceDirectly(\n+    Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  Node fnBlock = getLastExecutionBlock(fnNode.getLastChild());\n+  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n+  Node cArg = callNode.getFirstChild().getNext();\n \n+  // FUNCTIONS NODES\n+  // 1. LP_NODE: [, ARG1, ARG2, ...]\n+  // 2. FUNCTION_NODE: { NAME, PARAM_LIST, BODY ... }\n+  Node lpNode = NodeUtil.getFunctionParameters(fnNode);\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  // If function and call don't have matching number of arguments,\n+  // then the function cannot be inlined.\n+  if (NodeUtil.getFunctionParameters(fnNode).getChildCount() != callNode.getChildCount() - 1) {\n+    return CanInlineResult.NO;\n+  }\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n+  // Handle the case when functions are called via 'call' or 'apply',\n+  // that have a this-object as the first parameter, which is not part of the\n+  // called function's parameters.\n+  int startArgIndex = 0;\n+  if (!callNode.getFirstChild().isName() && NodeUtil.isFunctionObjectCall(callNode)) {\n+    startArgIndex = 1;\n+  }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n+  Node argList = cArg;\n+  int argIndex = startArgIndex;\n+\n+  for (Node fnParam = lpNode.getFirstChild(); fnParam != null; fnParam = fnParam.getNext()) {\n+    // For each named parameter check if a mutable argument use more than one.\n+    // Names that are never referenced more than once can have multiple\n+    // mutable parameters.\n+    if (argIndex >= startArgIndex) {\n+      Node argNode = cArg;\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+      for (int i = startArgIndex; i < argIndex; i++) {\n+        argNode = argNode.getNext();\n       }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+      checkNotNull(argNode);\n+      if (NodeUtil.mayEffectMutableState(argNode, compiler)) {\n+        int refCount = NodeUtil.getNameReferenceCount(fnBlock, fnParam.getString());\n+        if (refCount > 1 || (refCount == 0 && !NodeUtil.isImmutableValue(argNode))) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n       }\n+\n+      // Check for side-effect.\n+      if (NodeUtil.mayHaveSideEffects(argNode, compiler)) {\n+        return CanInlineResult.NO;\n+      }\n+\n+      cArg = cArg.getNext();\n     }\n \n+    argIndex++;\n+  }\n+\n+  if (!NodeUtil.isMutationTarget(fnNode) && NodeUtil.isExpressionResultUsed(callNode)) {\n     return CanInlineResult.YES;\n   }\n \n+  return CanInlineResult.NO;\n+}\n+\n+private Node getLastExecutionBlock(Node fnBlock) {\n+  // Traverses through any nested blocks and returns the last executable\n+  // block in the function body.\n+  while (NodeUtil.isControlStructure(fnBlock.getLastChild())\n+      && NodeUtil.getLastChild(fnBlock.getLastChild()) != null) {\n+    fnBlock = NodeUtil.getLastChild(fnBlock.getLastChild());\n+  }\n+  return fnBlock;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}