{
    "patch": "public static double getTypedPercent(String json) {\n    ObjectMapper mapper = new ObjectMapper();\n    double count = 0.0;\n    try {\n        JsonNode rootNode = mapper.readTree(json);\n        Iterator<Map.Entry<String, JsonNode>> fieldsIterator = rootNode.fields();\n        while (fieldsIterator.hasNext()) {\n            Map.Entry<String, JsonNode> field = fieldsIterator.next();\n            if (field.getValue().isValueNode()) {\n                count++;\n            }\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return (count / getTotalCount(json)) * 100.0;\n}\n\npublic static int getTotalCount(String json) {\n    ObjectMapper mapper = new ObjectMapper();\n    int count = 0;\n    try {\n        JsonNode rootNode = mapper.readTree(json);\n        Iterator<JsonNode> elementsIterator = rootNode.elements();\n        while (elementsIterator.hasNext()) {\n            JsonNode element = elementsIterator.next();\n            Iterator<String> fieldNames = element.fieldNames();\n            while (fieldNames.hasNext()) {\n                String fieldName = fieldNames.next();\n                count++;\n            }\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return count;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..3eb04b31 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,43 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    ObjectMapper mapper = new ObjectMapper();\n+    double count = 0.0;\n+    try {\n+        JsonNode rootNode = mapper.readTree(json);\n+        Iterator<Map.Entry<String, JsonNode>> fieldsIterator = rootNode.fields();\n+        while (fieldsIterator.hasNext()) {\n+            Map.Entry<String, JsonNode> field = fieldsIterator.next();\n+            if (field.getValue().isValueNode()) {\n+                count++;\n+            }\n+        }\n+    } catch (Exception e) {\n+        e.printStackTrace();\n+    }\n+    return (count / getTotalCount(json)) * 100.0;\n+}\n+\n+public static int getTotalCount(String json) {\n+    ObjectMapper mapper = new ObjectMapper();\n+    int count = 0;\n+    try {\n+        JsonNode rootNode = mapper.readTree(json);\n+        Iterator<JsonNode> elementsIterator = rootNode.elements();\n+        while (elementsIterator.hasNext()) {\n+            JsonNode element = elementsIterator.next();\n+            Iterator<String> fieldNames = element.fieldNames();\n+            while (fieldNames.hasNext()) {\n+                String fieldName = fieldNames.next();\n+                count++;\n+            }\n+        }\n+    } catch (Exception e) {\n+        e.printStackTrace();\n+    }\n+    return count;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}