{
    "patch": "if (invocation.getMethod().isVarArgs()) {\n    Object[] args = invocation.getRawArguments();\n    for (int i = 0; i < args.length - 1; i++) {\n        Object arg = args[i];\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                if (position == i) {\n                    ((CapturesArguments) m).captureFrom(arg);\n                }\n            }\n        }\n    }\n    Object varargs = args[args.length - 1];\n    for (int i = 0; i < ((Object[]) varargs).length; i++) {\n        ((VarargMatcher)matchers.get(matchers.size()-1)).captureFrom(((Object[]) varargs)[i]);\n    }\n} else {\n    for (int position = 0; position < matchers.size(); position++) {\n        Matcher m = matchers.get(position);\n        if (m instanceof CapturesArguments) {\n            ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..e598fffb5 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,31 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+if (invocation.getMethod().isVarArgs()) {\n+    Object[] args = invocation.getRawArguments();\n+    for (int i = 0; i < args.length - 1; i++) {\n+        Object arg = args[i];\n+        for (int position = 0; position < matchers.size(); position++) {\n+            Matcher m = matchers.get(position);\n+            if (m instanceof CapturesArguments) {\n+                if (position == i) {\n+                    ((CapturesArguments) m).captureFrom(arg);\n+                }\n+            }\n+        }\n+    }\n+    Object varargs = args[args.length - 1];\n+    for (int i = 0; i < ((Object[]) varargs).length; i++) {\n+        ((VarargMatcher)matchers.get(matchers.size()-1)).captureFrom(((Object[]) varargs)[i]);\n+    }\n+} else {\n+    for (int position = 0; position < matchers.size(); position++) {\n+        Matcher m = matchers.get(position);\n+        if (m instanceof CapturesArguments) {\n+            ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n+        }\n+    }\n+}\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}