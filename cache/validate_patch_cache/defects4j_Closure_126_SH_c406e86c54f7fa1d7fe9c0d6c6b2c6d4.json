{
    "patch": "    if (NodeUtil.hasFinally(n)) {\n      Node finallyBlock = n.getLastChild();\n      // If there is code following the finally block, minimize its exits\n      if (finallyBlock.getNext() != null) {\n        tryMinimizeExits(finallyBlock.getNext(), exitType, labelName);\n      }\n    } else {\n      // If there is code following the block, minimize its exits\n      if (n.getNext() != null) {\n        tryMinimizeExits(n.getNext(), exitType, labelName);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..f1de5d3d 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,10 +138,16 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n-      if (NodeUtil.hasFinally(n)) {\n-        Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n+    if (NodeUtil.hasFinally(n)) {\n+      Node finallyBlock = n.getLastChild();\n+      // If there is code following the finally block, minimize its exits\n+      if (finallyBlock.getNext() != null) {\n+        tryMinimizeExits(finallyBlock.getNext(), exitType, labelName);\n       }\n+    } else {\n+      // If there is code following the block, minimize its exits\n+      if (n.getNext() != null) {\n+        tryMinimizeExits(n.getNext(), exitType, labelName);\n     }\n \n     // Just a 'label'.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}