{
    "patch": "public static String unescape(String s) {\n    if (s == null || s.isEmpty()) {\n        return s;\n    }\n\n    StringBuilder sb = new StringBuilder(s.length());\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (c == '\\\\') {\n            if (i < s.length() - 1) {\n                char nextChar = s.charAt(i + 1);\n                switch (nextChar) {\n                    case '\\'':\n                        sb.append('\\'');\n                        break;\n                    case '\\\"':\n                        sb.append('\\\"');\n                        break;\n                    case '\\\\':\n                        sb.append('\\\\');\n                        break;\n                    case 'r':\n                        sb.append('\\r');\n                        break;\n                    case 'n':\n                        sb.append('\\n');\n                        break;\n                    case 't':\n                        sb.append('\\t');\n                        break;\n                    case 'b':\n                        sb.append('\\b');\n                        break;\n                    case 'f':\n                        sb.append('\\f');\n                        break;\n                    case 'u':\n                        if (i < s.length() - 5) {\n                            try {\n                                char u1 = s.charAt(i + 2);\n                                char u2 = s.charAt(i + 3);\n                                char u3 = s.charAt(i + 4);\n                                char u4 = s.charAt(i + 5);\n                                char[] hexChars = {u1, u2, u3, u4};\n                                int codePoint = Integer.parseInt(new String(hexChars), 16);    \n                                sb.append(Character.toChars(codePoint));\n                                i += 5;\n                            } catch (NumberFormatException e) {\n                                sb.append(\"\\\\u\");\n                            }\n                        } else {\n                            sb.append(\"\\\\u\");\n                        }\n                        break;\n                    default:\n                        sb.append('\\\\');\n                        sb.append(nextChar);\n                        break;\n                }\n                i++;\n            } else {\n                sb.append(c);\n            }\n        } else {\n            sb.append(c);\n        }\n    }\n\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..c0c23146 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,76 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public static String unescape(String s) {\n+    if (s == null || s.isEmpty()) {\n+        return s;\n+    }\n+\n+    StringBuilder sb = new StringBuilder(s.length());\n+    for (int i = 0; i < s.length(); i++) {\n+        char c = s.charAt(i);\n+        if (c == '\\\\') {\n+            if (i < s.length() - 1) {\n+                char nextChar = s.charAt(i + 1);\n+                switch (nextChar) {\n+                    case '\\'':\n+                        sb.append('\\'');\n+                        break;\n+                    case '\\\"':\n+                        sb.append('\\\"');\n+                        break;\n+                    case '\\\\':\n+                        sb.append('\\\\');\n+                        break;\n+                    case 'r':\n+                        sb.append('\\r');\n+                        break;\n+                    case 'n':\n+                        sb.append('\\n');\n+                        break;\n+                    case 't':\n+                        sb.append('\\t');\n+                        break;\n+                    case 'b':\n+                        sb.append('\\b');\n+                        break;\n+                    case 'f':\n+                        sb.append('\\f');\n+                        break;\n+                    case 'u':\n+                        if (i < s.length() - 5) {\n+                            try {\n+                                char u1 = s.charAt(i + 2);\n+                                char u2 = s.charAt(i + 3);\n+                                char u3 = s.charAt(i + 4);\n+                                char u4 = s.charAt(i + 5);\n+                                char[] hexChars = {u1, u2, u3, u4};\n+                                int codePoint = Integer.parseInt(new String(hexChars), 16);    \n+                                sb.append(Character.toChars(codePoint));\n+                                i += 5;\n+                            } catch (NumberFormatException e) {\n+                                sb.append(\"\\\\u\");\n+                            }\n+                        } else {\n+                            sb.append(\"\\\\u\");\n+                        }\n+                        break;\n+                    default:\n+                        sb.append('\\\\');\n+                        sb.append(nextChar);\n+                        break;\n+                }\n+                i++;\n+            } else {\n+                sb.append(c);\n+            }\n+        } else {\n+            sb.append(c);\n+        }\n+    }\n+\n+    return sb.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}