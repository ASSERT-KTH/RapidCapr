{
    "patch": "public static double getTypedPercent(String jsonStr) {\n    JSONObject jsonObj = new JSONObject(jsonStr);\n    JSONObject quizObj = (JSONObject) jsonObj.get(\"quiz\");\n    JSONArray mathArray = (JSONArray) quizObj.get(\"maths\");\n    double count = 0;\n    double correct = 0;\n    for (int i = 0; i < mathArray.length(); i++) {\n        JSONObject mathObj = (JSONObject) mathArray.get(i);\n        String userAnswer = (String) mathObj.get(\"userAnswer\");\n        String correctAnswer = (String) mathObj.get(\"correctAnswer\");\n        if (userAnswer == null || correctAnswer == null) {\n            continue;\n        }\n        count++;\n        if (userAnswer.equals(correctAnswer)) {\n            correct++;\n        }\n    }\n    if (count == 0) {\n        return 0.0;\n    }\n    double percent = (correct / count) * 100.0;\n    return percent;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..d3733042 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,30 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String jsonStr) {\n+    JSONObject jsonObj = new JSONObject(jsonStr);\n+    JSONObject quizObj = (JSONObject) jsonObj.get(\"quiz\");\n+    JSONArray mathArray = (JSONArray) quizObj.get(\"maths\");\n+    double count = 0;\n+    double correct = 0;\n+    for (int i = 0; i < mathArray.length(); i++) {\n+        JSONObject mathObj = (JSONObject) mathArray.get(i);\n+        String userAnswer = (String) mathObj.get(\"userAnswer\");\n+        String correctAnswer = (String) mathObj.get(\"correctAnswer\");\n+        if (userAnswer == null || correctAnswer == null) {\n+            continue;\n+        }\n+        count++;\n+        if (userAnswer.equals(correctAnswer)) {\n+            correct++;\n+        }\n+    }\n+    if (count == 0) {\n+        return 0.0;\n+    }\n+    double percent = (correct / count) * 100.0;\n+    return percent;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}