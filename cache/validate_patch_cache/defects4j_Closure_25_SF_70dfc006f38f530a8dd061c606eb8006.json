{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    if (constructor == null) {\n        n.setJSType(getNativeType(UNKNOWN_TYPE));\n        return scope;\n    }\n    JSType type = null;\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getType();\n    if (constructorType.isFunctionType()) {\n        FunctionType constructorFunctionType = constructorType.toMaybeFunctionType();\n\n        // check if the constructor function is a parameterized constructor\n        if (constructorFunctionType.isGeneric()) {\n            type = constructorFunctionType.instantiateGenerics(\n                    extractGenericsFromNewArgs(constructor.getNext()),\n                    scope.getDeclaringNode());\n        } else {\n            type = constructorFunctionType.getInstanceType();\n        }\n    }\n    \n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n    }\n    n.setJSType(type);\n    return scope;\n}\n  \nprivate ImmutableList<JSType> extractGenericsFromNewArgs(Node args) {\n    List<JSType> types = new ArrayList<>();\n    for (Node arg : args.children()) {\n        types.add(arg.getType());\n    }\n    return ImmutableList.copyOf(types);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..d3e35636 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,42 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n+    if (constructor == null) {\n+        n.setJSType(getNativeType(UNKNOWN_TYPE));\n+        return scope;\n+    }\n     JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+    scope = traverse(constructor, scope);\n+    JSType constructorType = constructor.getType();\n+    if (constructorType.isFunctionType()) {\n+        FunctionType constructorFunctionType = constructorType.toMaybeFunctionType();\n+\n+        // check if the constructor function is a parameterized constructor\n+        if (constructorFunctionType.isGeneric()) {\n+            type = constructorFunctionType.instantiateGenerics(\n+                    extractGenericsFromNewArgs(constructor.getNext()),\n+                    scope.getDeclaringNode());\n+        } else {\n+            type = constructorFunctionType.getInstanceType();\n         }\n-      }\n     }\n-    n.setJSType(type);\n+    \n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+        scope = traverse(arg, scope);\n     }\n+    n.setJSType(type);\n     return scope;\n-  }\n+}\n+  \n+private ImmutableList<JSType> extractGenericsFromNewArgs(Node args) {\n+    List<JSType> types = new ArrayList<>();\n+    for (Node arg : args.children()) {\n+        types.add(arg.getType());\n+    }\n+    return ImmutableList.copyOf(types);\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}