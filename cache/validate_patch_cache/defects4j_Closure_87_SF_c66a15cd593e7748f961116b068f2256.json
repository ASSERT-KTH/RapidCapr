{
    "patch": "        if (maybeExpr.getType() != Token.EXPR_RESULT || maybeExpr.hasChildren() ||\n            maybeExpr.getType() == Token.FUNCTION && NodeUtil.getFunctionBody(maybeExpr) == null) {\n          return false;\n        }\n        for (Node child = maybeExpr.getFirstChild(); child != null; child = child.getNext()) {\n          if (child.isFunction()) {\n            Node fnName = child.getFirstChild();\n            if (fnName != null && \"function\".equals(fnName.getString())) {\n              // Do not fold a function expression into anything.\n              return false;\n            }\n          } else if (child.isGeneratorFunction()) {\n            return false;\n          }\n        }\n        return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..5633b3f7 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,22 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n-    }\n-\n-    return false;\n-  }\n+        if (maybeExpr.getType() != Token.EXPR_RESULT || maybeExpr.hasChildren() ||\n+            maybeExpr.getType() == Token.FUNCTION && NodeUtil.getFunctionBody(maybeExpr) == null) {\n+          return false;\n+        }\n+        for (Node child = maybeExpr.getFirstChild(); child != null; child = child.getNext()) {\n+          if (child.isFunction()) {\n+            Node fnName = child.getFirstChild();\n+            if (fnName != null && \"function\".equals(fnName.getString())) {\n+              // Do not fold a function expression into anything.\n+              return false;\n+            }\n+          } else if (child.isGeneratorFunction()) {\n+            return false;\n+          }\n+        }\n+        return true;\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}