{
    "patch": "public Line revert() {\n    Vector3D zero = Vector3D.ZERO;\n    Vector3D revertedDirection = direction.negate();\n\n    double norm = revertedDirection.getNorm();\n    if(norm < Precision.SAFE_MIN) {\n         // direction is close to zero, so revert to a perpendicular line\n         Vector3D perpendicular = Vector3D.crossProduct(direction, Vector3D.PLUS_I);\n         if (perpendicular.getNorm() < Precision.SAFE_MIN) {\n            // direction was parallel to x-axis, so choose y- or z-axis as second basis vector\n            perpendicular = Vector3D.crossProduct(direction, Vector3D.PLUS_J);\n            if (perpendicular.getNorm() < Precision.SAFE_MIN) {\n                perpendicular = Vector3D.crossProduct(direction, Vector3D.PLUS_K);\n            }\n         }\n         revertedDirection = perpendicular.normalize();\n    } else {\n         revertedDirection = revertedDirection.normalize();\n    }\n\n    Line reverted = new Line(zero, revertedDirection);\n    return reverted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..0d92f5251 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -84,7 +84,29 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n      * @return a new instance, with reversed direction\n      */\n     public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n+public Line revert() {\n+    Vector3D zero = Vector3D.ZERO;\n+    Vector3D revertedDirection = direction.negate();\n+\n+    double norm = revertedDirection.getNorm();\n+    if(norm < Precision.SAFE_MIN) {\n+         // direction is close to zero, so revert to a perpendicular line\n+         Vector3D perpendicular = Vector3D.crossProduct(direction, Vector3D.PLUS_I);\n+         if (perpendicular.getNorm() < Precision.SAFE_MIN) {\n+            // direction was parallel to x-axis, so choose y- or z-axis as second basis vector\n+            perpendicular = Vector3D.crossProduct(direction, Vector3D.PLUS_J);\n+            if (perpendicular.getNorm() < Precision.SAFE_MIN) {\n+                perpendicular = Vector3D.crossProduct(direction, Vector3D.PLUS_K);\n+            }\n+         }\n+         revertedDirection = perpendicular.normalize();\n+    } else {\n+         revertedDirection = revertedDirection.normalize();\n+    }\n+\n+    Line reverted = new Line(zero, revertedDirection);\n+    return reverted;\n+}\n         return reverted;\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}