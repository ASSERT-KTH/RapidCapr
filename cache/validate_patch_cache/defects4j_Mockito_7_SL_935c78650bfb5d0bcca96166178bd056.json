{
    "patch": "import org.apache.commons.lang3.reflect.TypeUtils;\n...\nprivate void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n    Type actualTypeArgument = null;\n    if (typeVariable instanceof ParameterizedType) {\n        actualTypeArgument = TypeUtils.getTypeArguments((ParameterizedType) typeVariable).get(typeVariable);\n    } else {\n        actualTypeArgument = ((ParameterizedType)Type.class.getDeclaredField(\"class\")\n                .getGenericType()).getActualTypeArguments()[0];\n    }\n    registerTypeVariablesOn(actualTypeArgument);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..a018bc719 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,26 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+import org.apache.commons.lang3.reflect.TypeUtils;\n+...\n+private void readTypeVariables() {\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+    Type actualTypeArgument = null;\n+    if (typeVariable instanceof ParameterizedType) {\n+        actualTypeArgument = TypeUtils.getTypeArguments((ParameterizedType) typeVariable).get(typeVariable);\n+    } else {\n+        actualTypeArgument = ((ParameterizedType)Type.class.getDeclaredField(\"class\")\n+                .getGenericType()).getActualTypeArguments()[0];\n+    }\n+    registerTypeVariablesOn(actualTypeArgument);\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}