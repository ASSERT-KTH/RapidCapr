{
    "patch": "public static double regularizedGamma(double a, double x) {\n    double epsilon = 1e-9; // set the default tolerance\n    int maxIterations = 1000; // set a maximum number of iterations to avoid infinite loops\n    int n = 1;\n    double p = 1 / a;\n    double gamma = p;\n    while (Math.abs(p) > epsilon && n <= maxIterations) {\n        n++;\n        p *= x / (a+n-1);\n        gamma += p;\n    }\n    return gamma * Math.exp(-x + a * Math.log(x) - logGamma(a));\n}\n\npublic static double logGamma(double x) {\n    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n    double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1.0) + 24.01409822 / (x + 2.0) - 1.231739516 / (x + 3.0) + 0.00120858003 / (x + 4.0) - 0.00000536382 / (x + 5.0);\n    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..c8c04e2d0 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,25 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGamma(double a, double x) {\n+    double epsilon = 1e-9; // set the default tolerance\n+    int maxIterations = 1000; // set a maximum number of iterations to avoid infinite loops\n+    int n = 1;\n+    double p = 1 / a;\n+    double gamma = p;\n+    while (Math.abs(p) > epsilon && n <= maxIterations) {\n+        n++;\n+        p *= x / (a+n-1);\n+        gamma += p;\n+    }\n+    return gamma * Math.exp(-x + a * Math.log(x) - logGamma(a));\n+}\n+\n+public static double logGamma(double x) {\n+    double tmp = (x - 0.5) * Math.log(x + 4.5) - (x + 4.5);\n+    double ser = 1.0 + 76.18009173 / x - 86.50532033 / (x + 1.0) + 24.01409822 / (x + 2.0) - 1.231739516 / (x + 3.0) + 0.00120858003 / (x + 4.0) - 0.00000536382 / (x + 5.0);\n+    return tmp + Math.log(ser * Math.sqrt(2 * Math.PI));\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}