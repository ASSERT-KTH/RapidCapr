{
    "patch": "            Matcher varargMatcher = matchers.get(matchers.size() - 1);\n            int varargSize = invocation.getRawArguments().length - indexOfVararg;\n            Object[] varargArguments = new Object[varargSize];\n            System.arraycopy(invocation.getRawArguments(), indexOfVararg, varargArguments, 0, varargSize);\n            if(varargMatcher instanceof VarargMatcher) {\n                Object[] arrays = ((VarargMatcher)varargMatcher).getArrays(varargArguments);\n                for (Object array : arrays) {\n                    for (int i = 0; i < Array.getLength(array); i++) {\n                        ((CapturesArguments)varargMatcher).captureFrom(Array.get(array, i));\n                    }\n                }\n            } else {\n                for (Object arg : varargArguments) {\n                    ((CapturesArguments)varargMatcher).captureFrom(arg);",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..7e8867f4e 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,20 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Matcher varargMatcher = matchers.get(matchers.size() - 1);\n+            int varargSize = invocation.getRawArguments().length - indexOfVararg;\n+            Object[] varargArguments = new Object[varargSize];\n+            System.arraycopy(invocation.getRawArguments(), indexOfVararg, varargArguments, 0, varargSize);\n+            if(varargMatcher instanceof VarargMatcher) {\n+                Object[] arrays = ((VarargMatcher)varargMatcher).getArrays(varargArguments);\n+                for (Object array : arrays) {\n+                    for (int i = 0; i < Array.getLength(array); i++) {\n+                        ((CapturesArguments)varargMatcher).captureFrom(Array.get(array, i));\n+                    }\n+                }\n+            } else {\n+                for (Object arg : varargArguments) {\n+                    ((CapturesArguments)varargMatcher).captureFrom(arg);\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}