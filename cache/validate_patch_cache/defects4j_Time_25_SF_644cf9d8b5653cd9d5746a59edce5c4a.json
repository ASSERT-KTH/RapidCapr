{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int offsetLocal = getOffset(instantLocal);\n    long instantAdjusted = instantLocal - offsetLocal;\n    int offsetAdjusted = getOffset(instantAdjusted);\n\n    if (offsetLocal == offsetAdjusted) {\n        return offsetLocal;\n    }\n\n    long transition = offsetLocal < offsetAdjusted\n            ? nextTransition(instantAdjusted)\n            : previousTransition(instantAdjusted - offsetAdjusted + getStandardOffset(instantAdjusted - offsetAdjusted, offsetLocal));\n\n    while (true) {\n        int offset = getOffset(transition - 1);\n        int standardOffset = getStandardOffset(transition - 1, offset);\n\n        if (standardOffset == offsetLocal) {\n            return offsetLocal;\n        }\n\n        if (standardOffset == offsetAdjusted) {\n            return offsetAdjusted;\n        }\n\n        long nextTransitionMillis = offsetLocal < offsetAdjusted\n                ? nextTransition(transition)\n                : previousTransition(transition - offsetAdjusted + standardOffset);\n\n        if (nextTransitionMillis == transition) {\n            break;\n        }\n\n        transition = nextTransitionMillis;\n    }\n\n    return getOffset(transition - (offsetLocal < offsetAdjusted ? 1 : 0));\n}\n\nprivate int getStandardOffset(long millis, int offset) {\n    int standardOffset = getOffset(millis);\n    return offset >= standardOffset ? standardOffset : getOffset(millis - standardOffset);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..0bf17077 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,50 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int offsetLocal = getOffset(instantLocal);\n+    long instantAdjusted = instantLocal - offsetLocal;\n+    int offsetAdjusted = getOffset(instantAdjusted);\n+\n+    if (offsetLocal == offsetAdjusted) {\n+        return offsetLocal;\n+    }\n+\n+    long transition = offsetLocal < offsetAdjusted\n+            ? nextTransition(instantAdjusted)\n+            : previousTransition(instantAdjusted - offsetAdjusted + getStandardOffset(instantAdjusted - offsetAdjusted, offsetLocal));\n+\n+    while (true) {\n+        int offset = getOffset(transition - 1);\n+        int standardOffset = getStandardOffset(transition - 1, offset);\n+\n+        if (standardOffset == offsetLocal) {\n+            return offsetLocal;\n         }\n-        return offsetAdjusted;\n+\n+        if (standardOffset == offsetAdjusted) {\n+            return offsetAdjusted;\n+        }\n+\n+        long nextTransitionMillis = offsetLocal < offsetAdjusted\n+                ? nextTransition(transition)\n+                : previousTransition(transition - offsetAdjusted + standardOffset);\n+\n+        if (nextTransitionMillis == transition) {\n+            break;\n+        }\n+\n+        transition = nextTransitionMillis;\n     }\n \n+    return getOffset(transition - (offsetLocal < offsetAdjusted ? 1 : 0));\n+}\n+\n+private int getStandardOffset(long millis, int offset) {\n+    int standardOffset = getOffset(millis);\n+    return offset >= standardOffset ? standardOffset : getOffset(millis - standardOffset);\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}