{
    "patch": "int totalCount = 0;\nfor (int i = 0; i < last; i++) {\n    totalCount += uniCounterOffset[i];\n}\n\nif (index == totalCount) {\n    for (int i = 0; i < last; i++) {\n        indices[i] = uniCounter[i] - 1;\n    }\n} else {\n    int countBefore = 0;\n    for (int i = 0; i < last; i++) {\n        int idx = 0;\n        final int offset = uniCounterOffset[i];\n        while (countBefore + idx * offset <= index) {\n            countBefore += idx * offset;\n            ++idx;\n        }\n        --idx;\n        countBefore += offset * idx;\n        indices[i] = idx;\n    }\n\n    int remainingIndex = index - countBefore;\n    for (int i = last - 1; i >= 0; i--) {\n        int dimIndex = indices[i] + remainingIndex;\n        if (dimIndex >= uniCounter[i]) {\n            dimIndex = 0;\n        }\n        indices[i] = dimIndex;\n        remainingIndex /= uniCounter[i];\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..86c10a4db 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,39 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n+int totalCount = 0;\n+for (int i = 0; i < last; i++) {\n+    totalCount += uniCounterOffset[i];\n+}\n+\n+if (index == totalCount) {\n+    for (int i = 0; i < last; i++) {\n+        indices[i] = uniCounter[i] - 1;\n+    }\n+} else {\n+    int countBefore = 0;\n+    for (int i = 0; i < last; i++) {\n+        int idx = 0;\n+        final int offset = uniCounterOffset[i];\n+        while (countBefore + idx * offset <= index) {\n+            countBefore += idx * offset;\n             ++idx;\n         }\n         --idx;\n-        indices[last] = idx;\n+        countBefore += offset * idx;\n+        indices[i] = idx;\n+    }\n+\n+    int remainingIndex = index - countBefore;\n+    for (int i = last - 1; i >= 0; i--) {\n+        int dimIndex = indices[i] + remainingIndex;\n+        if (dimIndex >= uniCounter[i]) {\n+            dimIndex = 0;\n+        }\n+        indices[i] = dimIndex;\n+        remainingIndex /= uniCounter[i];\n+    }\n+}\n \n         return indices;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}