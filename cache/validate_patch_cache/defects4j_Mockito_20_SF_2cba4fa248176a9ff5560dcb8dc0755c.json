{
    "patch": "public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n    }\n    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n            settings.getTypeToMock(),\n            settings.getExtraInterfaces()\n    );\n    try {\n        Object mockInstance = classInstantiator.instantiate(mockedProxyType);\n        if (mockedProxyType.isMemberClass()) {\n            // If the mocked class is an inner class, we need to pass an instance\n            // of the outer class to the constructor, otherwise we'll get an instance\n            // with null outer class reference.\n            //\n            // To find the instance of the outer class, we first check if the outer class\n            // reference was passed in the settings. If it wasn't, we try to obtain it by\n            // calling the getEnclosingClass method on the mocked instance, and then looking\n            // up the outer instance from the surrounding instance of the outer class.\n            //\n            // If the outer class reference cannot be determined, we throw an exception.\n            Object outerInstance = settings.getOuterClassInstance();\n            if (outerInstance == null) {\n                Class<?> declaringClass = mockedProxyType.getDeclaringClass();\n                if (declaringClass == null) {\n                    throw new MockitoException(join(\n                        \"Cannot instantiate mock for inner class \",\n                        getMockName(settings.getTypeToMock()),\n                        \" because its declaring class is unknown.\"\n                    ));\n                }\n                \n                Object innerInstance = mockInstance;\n                while (declaringClass != null) {\n                    innerInstance = invoking(\n                            MethodHandles.lookup().in(declaringClass),\n                            \"getEnclosingInstance\",\n                            Object.class\n                    ).invoke(innerInstance);\n\n                    if (innerInstance == null) {\n                        throw new MockitoException(join(\n                            \"Cannot instantiate mock for inner class \",\n                            getMockName(settings.getTypeToMock()),\n                            \" because its outer class instance is null.\"\n                        ));\n                    }\n                    \n                    if (declaringClass.isInstance(innerInstance)) {\n                        break;\n                    } else {\n                        declaringClass = declaringClass.getEnclosingClass();\n                    }\n                }\n                \n                if (declaringClass == null) {\n                    throw new MockitoException(join(\n                        \"Cannot instantiate mock for inner class \",\n                        getMockName(settings.getTypeToMock()),\n                        \" because the enclosing class could not be found.\"\n                    ));\n                }\n                \n                outerInstance = innerInstance;\n            }\n            \n            Constructor<?> constructor = mockedProxyType.getDeclaredConstructors()[0];\n            constructor.setAccessible(true);\n            return mockedProxyType.cast(constructor.newInstance(outerInstance, ((MockMethodInterceptor) handler)));\n        } else {\n            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n            return ensureMockIsAssignableToMockedType(settings, mockedProxyType.cast(mockInstance));\n        }\n    } catch (ClassCastException cce) {\n        String errorMessage = join(\n            \"ClassCastException occurred while creating the mockito mock :\",\n            \"  class to mock : \" + describeClass(mockedProxyType),\n            \"  created class : \" + describeClass(settings.getTypeToMock()),\n            \"  proxy instance class : \" + describeClass(null),\n            \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n            \"\",\n            \"You might experience classloading issues, please ask the mockito mailing-list.\",\n            \"\"\n        );\n        throw new MockitoException(errorMessage, cce);\n    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n    } catch (ReflectiveOperationException e) {\n        throw new MockitoException(\"Unable to create mock instance for inner class '\" + mockedProxyType.getSimpleName() + \"'\", e);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\nindex 9dc44e663..d2c7db648 100644\n--- a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n+++ b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n@@ -21,36 +21,98 @@ public class ByteBuddyMockMaker implements MockMaker {\n         cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator();\n     }\n \n-    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n-        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n-            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n-        }\n-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n-                settings.getTypeToMock(),\n-                settings.getExtraInterfaces()\n-        );\n-        T mockInstance = null;\n-        try {\n-            mockInstance = classInstantiator.instantiate(mockedProxyType);\n+public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n+    if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n+        throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n+    }\n+    Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n+            settings.getTypeToMock(),\n+            settings.getExtraInterfaces()\n+    );\n+    try {\n+        Object mockInstance = classInstantiator.instantiate(mockedProxyType);\n+        if (mockedProxyType.isMemberClass()) {\n+            // If the mocked class is an inner class, we need to pass an instance\n+            // of the outer class to the constructor, otherwise we'll get an instance\n+            // with null outer class reference.\n+            //\n+            // To find the instance of the outer class, we first check if the outer class\n+            // reference was passed in the settings. If it wasn't, we try to obtain it by\n+            // calling the getEnclosingClass method on the mocked instance, and then looking\n+            // up the outer instance from the surrounding instance of the outer class.\n+            //\n+            // If the outer class reference cannot be determined, we throw an exception.\n+            Object outerInstance = settings.getOuterClassInstance();\n+            if (outerInstance == null) {\n+                Class<?> declaringClass = mockedProxyType.getDeclaringClass();\n+                if (declaringClass == null) {\n+                    throw new MockitoException(join(\n+                        \"Cannot instantiate mock for inner class \",\n+                        getMockName(settings.getTypeToMock()),\n+                        \" because its declaring class is unknown.\"\n+                    ));\n+                }\n+                \n+                Object innerInstance = mockInstance;\n+                while (declaringClass != null) {\n+                    innerInstance = invoking(\n+                            MethodHandles.lookup().in(declaringClass),\n+                            \"getEnclosingInstance\",\n+                            Object.class\n+                    ).invoke(innerInstance);\n+\n+                    if (innerInstance == null) {\n+                        throw new MockitoException(join(\n+                            \"Cannot instantiate mock for inner class \",\n+                            getMockName(settings.getTypeToMock()),\n+                            \" because its outer class instance is null.\"\n+                        ));\n+                    }\n+                    \n+                    if (declaringClass.isInstance(innerInstance)) {\n+                        break;\n+                    } else {\n+                        declaringClass = declaringClass.getEnclosingClass();\n+                    }\n+                }\n+                \n+                if (declaringClass == null) {\n+                    throw new MockitoException(join(\n+                        \"Cannot instantiate mock for inner class \",\n+                        getMockName(settings.getTypeToMock()),\n+                        \" because the enclosing class could not be found.\"\n+                    ));\n+                }\n+                \n+                outerInstance = innerInstance;\n+            }\n+            \n+            Constructor<?> constructor = mockedProxyType.getDeclaredConstructors()[0];\n+            constructor.setAccessible(true);\n+            return mockedProxyType.cast(constructor.newInstance(outerInstance, ((MockMethodInterceptor) handler)));\n+        } else {\n             MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n             mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n-\n-            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n-        } catch (ClassCastException cce) {\n-            throw new MockitoException(join(\n-                    \"ClassCastException occurred while creating the mockito mock :\",\n-                    \"  class to mock : \" + describeClass(mockedProxyType),\n-                    \"  created class : \" + describeClass(settings.getTypeToMock()),\n-                    \"  proxy instance class : \" + describeClass(mockInstance),\n-                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n-                    \"\",\n-                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n-                    \"\"\n-            ),cce);\n-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n-            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n+            return ensureMockIsAssignableToMockedType(settings, mockedProxyType.cast(mockInstance));\n         }\n+    } catch (ClassCastException cce) {\n+        String errorMessage = join(\n+            \"ClassCastException occurred while creating the mockito mock :\",\n+            \"  class to mock : \" + describeClass(mockedProxyType),\n+            \"  created class : \" + describeClass(settings.getTypeToMock()),\n+            \"  proxy instance class : \" + describeClass(null),\n+            \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n+            \"\",\n+            \"You might experience classloading issues, please ask the mockito mailing-list.\",\n+            \"\"\n+        );\n+        throw new MockitoException(errorMessage, cce);\n+    } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n+        throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n+    } catch (ReflectiveOperationException e) {\n+        throw new MockitoException(\"Unable to create mock instance for inner class '\" + mockedProxyType.getSimpleName() + \"'\", e);\n     }\n+}\n \n     private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) {\n         // Force explicit cast to mocked type here, instead of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}