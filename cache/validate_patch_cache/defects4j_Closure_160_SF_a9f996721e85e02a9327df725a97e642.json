{
    "patch": "public void initOptions(CompilerOptions options) {\n  this.options = options;\n  if (errorManager == null) {\n    if (outStream == null) {\n      setErrorManager(\n        new LoggerErrorManager(createMessageFormatter(), logger));\n    } else {\n      PrintStreamErrorManager printer =\n        new PrintStreamErrorManager(\n          createMessageFormatter(), outStream);\n      printer.setSummaryDetailLevel(options.summaryDetailLevel);\n      setErrorManager(printer);\n    }\n  }\n  DiagnosticGroups diagnosticGroups = this.getDiagnosticGroups();\n  boolean checkTypesOverride = diagnosticGroups\n    .getRegisteredGroups()\n    .contains(DiagnosticGroups.CHECK_TYPES);\n  if (checkTypesOverride) {\n    options.setCheckTypes(true);\n  } else if (!options.checkTypes) {\n    options.setWarningLevel(\n      diagnosticGroups.forName(\"checkTypes\"),\n      CheckLevel.OFF);\n  }\n  boolean globalThisOverride = diagnosticGroups\n    .getRegisteredGroups()\n    .contains(DiagnosticGroups.GLOBAL_THIS);\n  if (globalThisOverride) {\n    options.setWarningLevel(\n      diagnosticGroups.forName(\"globalThis\"),\n      CheckLevel.WARNING);\n  } else if (options.checkGlobalThis) {\n    options.setWarningLevel(\n      diagnosticGroups.forName(\"globalThis\"),\n      CheckLevel.WARNING);\n  } else {\n    options.setWarningLevel(\n      diagnosticGroups.forName(\"globalThis\"),\n      CheckLevel.OFF);\n  }\n  if (options.checkSymbols) {\n    options.setWarningLevel(\n      diagnosticGroups.forName(\"missingProperties\"),\n      CheckLevel.WARNING);\n    options.setCheckSymbols(true);\n  } else {\n    options.setWarningLevel(\n      diagnosticGroups.forName(\"missingProperties\"),\n      CheckLevel.OFF);\n    options.setCheckSymbols(false);\n  }\n  if (options.preserveDetailedSourceInfo) {\n    options.setWarningLevel(\n      diagnosticGroups.forName(\"reportUnknownTypes\"),\n      CheckLevel.WARNING);\n  } else {\n    options.setWarningLevel(\n      diagnosticGroups.forName(\"reportUnknownTypes\"),\n      CheckLevel.OFF);\n  }\n  this.warningsGuard = new ComposeWarningsGuard(\n    new SuppressDocWarningsGuard(\n      diagnosticGroups.getRegisteredGroups()));\n  if (options.getWarningsGuard() != null) {\n    this.warningsGuard = new ComposeWarningsGuard(\n      this.warningsGuard,\n      options.getWarningsGuard());\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 11850211..b1c67f6c 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -223,63 +223,76 @@ public class Compiler extends AbstractCompiler {\n    * Initialize the compiler options. Only necessary if you're not doing\n    * a normal compile() job.\n    */\n-  public void initOptions(CompilerOptions options) {\n-    this.options = options;\n-    if (errorManager == null) {\n-      if (outStream == null) {\n-        setErrorManager(\n-            new LoggerErrorManager(createMessageFormatter(), logger));\n-      } else {\n-        PrintStreamErrorManager printer =\n-            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n-        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n-        setErrorManager(printer);\n-      }\n-    }\n-\n-    // DiagnosticGroups override the plain checkTypes option.\n-    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n-      options.checkTypes = true;\n-    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n-      options.checkTypes = false;\n-    } else if (!options.checkTypes) {\n-      // If DiagnosticGroups did not override the plain checkTypes\n-      // option, and checkTypes is enabled, then turn off the\n-      // parser type warnings.\n-      options.setWarningLevel(\n-          DiagnosticGroup.forType(\n-              RhinoErrorReporter.TYPE_PARSE_ERROR),\n-          CheckLevel.OFF);\n-    }\n-\n-    if (options.checkGlobalThisLevel.isOn()) {\n-      options.setWarningLevel(\n-          DiagnosticGroups.GLOBAL_THIS,\n-          options.checkGlobalThisLevel);\n-    }\n-\n-    // Initialize the warnings guard.\n-    List<WarningsGuard> guards = Lists.newArrayList();\n-    guards.add(\n-        new SuppressDocWarningsGuard(\n-            getDiagnosticGroups().getRegisteredGroups()));\n-    guards.add(options.getWarningsGuard());\n-\n-\n-    // All passes must run the variable check. This synthesizes\n-    // variables later so that the compiler doesn't crash. It also\n-    // checks the externs file for validity. If you don't want to warn\n-    // about missing variable declarations, we shut that specific\n-    // error off.\n-    if (!options.checkSymbols &&\n-        (warningsGuard == null || !warningsGuard.disables(\n-            DiagnosticGroups.CHECK_VARIABLES))) {\n-      guards.add(new DiagnosticGroupWarningsGuard(\n-          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n-    }\n-\n-    this.warningsGuard = new ComposeWarningsGuard(guards);\n+public void initOptions(CompilerOptions options) {\n+  this.options = options;\n+  if (errorManager == null) {\n+    if (outStream == null) {\n+      setErrorManager(\n+        new LoggerErrorManager(createMessageFormatter(), logger));\n+    } else {\n+      PrintStreamErrorManager printer =\n+        new PrintStreamErrorManager(\n+          createMessageFormatter(), outStream);\n+      printer.setSummaryDetailLevel(options.summaryDetailLevel);\n+      setErrorManager(printer);\n+    }\n+  }\n+  DiagnosticGroups diagnosticGroups = this.getDiagnosticGroups();\n+  boolean checkTypesOverride = diagnosticGroups\n+    .getRegisteredGroups()\n+    .contains(DiagnosticGroups.CHECK_TYPES);\n+  if (checkTypesOverride) {\n+    options.setCheckTypes(true);\n+  } else if (!options.checkTypes) {\n+    options.setWarningLevel(\n+      diagnosticGroups.forName(\"checkTypes\"),\n+      CheckLevel.OFF);\n+  }\n+  boolean globalThisOverride = diagnosticGroups\n+    .getRegisteredGroups()\n+    .contains(DiagnosticGroups.GLOBAL_THIS);\n+  if (globalThisOverride) {\n+    options.setWarningLevel(\n+      diagnosticGroups.forName(\"globalThis\"),\n+      CheckLevel.WARNING);\n+  } else if (options.checkGlobalThis) {\n+    options.setWarningLevel(\n+      diagnosticGroups.forName(\"globalThis\"),\n+      CheckLevel.WARNING);\n+  } else {\n+    options.setWarningLevel(\n+      diagnosticGroups.forName(\"globalThis\"),\n+      CheckLevel.OFF);\n+  }\n+  if (options.checkSymbols) {\n+    options.setWarningLevel(\n+      diagnosticGroups.forName(\"missingProperties\"),\n+      CheckLevel.WARNING);\n+    options.setCheckSymbols(true);\n+  } else {\n+    options.setWarningLevel(\n+      diagnosticGroups.forName(\"missingProperties\"),\n+      CheckLevel.OFF);\n+    options.setCheckSymbols(false);\n+  }\n+  if (options.preserveDetailedSourceInfo) {\n+    options.setWarningLevel(\n+      diagnosticGroups.forName(\"reportUnknownTypes\"),\n+      CheckLevel.WARNING);\n+  } else {\n+    options.setWarningLevel(\n+      diagnosticGroups.forName(\"reportUnknownTypes\"),\n+      CheckLevel.OFF);\n+  }\n+  this.warningsGuard = new ComposeWarningsGuard(\n+    new SuppressDocWarningsGuard(\n+      diagnosticGroups.getRegisteredGroups()));\n+  if (options.getWarningsGuard() != null) {\n+    this.warningsGuard = new ComposeWarningsGuard(\n+      this.warningsGuard,\n+      options.getWarningsGuard());\n   }\n+}\n \n   /**\n    * Initializes the instance state needed for a compile job.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}