{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n        if (m.getRowDimension() > 2000) { // Check if matrix is large\n            final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n            final RealMatrix s = svd.getS();\n            for (int i = 0; i < s.getRowDimension(); i++) {\n                for (int j = 0; j < s.getColumnDimension(); j++) {\n                    if (s.getEntry(i, j) < 0.0) {\n                        s.setEntry(i, j, 0.0);\n                    } else {\n                        s.setEntry(i, j, FastMath.sqrt(s.getEntry(i, j)));\n                    }\n                }\n            }\n            final RealMatrix u = svd.getU();\n            final RealMatrix v = svd.getV();\n            return u.multiply(s).multiply(v.transpose());\n        } else {\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..187f3f4ef 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,24 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n+        if (m.getRowDimension() > 2000) { // Check if matrix is large\n+            final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n+            final RealMatrix s = svd.getS();\n+            for (int i = 0; i < s.getRowDimension(); i++) {\n+                for (int j = 0; j < s.getColumnDimension(); j++) {\n+                    if (s.getEntry(i, j) < 0.0) {\n+                        s.setEntry(i, j, 0.0);\n+                    } else {\n+                        s.setEntry(i, j, FastMath.sqrt(s.getEntry(i, j)));\n+                    }\n+                }\n+            }\n+            final RealMatrix u = svd.getU();\n+            final RealMatrix v = svd.getV();\n+            return u.multiply(s).multiply(v.transpose());\n+        } else {\n             final EigenDecomposition dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n+        }\n     }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}