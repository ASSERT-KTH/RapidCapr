{
    "patch": "public void initOptions(CompilerOptions options) {\n    this.options = options;\n    if (errorManager == null) {\n      if (outStream == null) {\n        setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));\n      } else {\n        PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n        setErrorManager(printer);\n      }\n    }\n\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = false;\n    } else if (!options.checkTypes) {\n      // If DiagnosticGroups did not override the plain checkTypes\n      // option, and checkTypes is enabled, then turn off the\n      // parser type warnings.\n      options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);\n    }\n\n    if (options.checkGlobalThisLevel.isOn()) {\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);\n    }\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList();\n    guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));\n    guards.add(options.getWarningsGuard());\n\n    // All passes must run the variable check. This synthesizes\n    // variables later so that the compiler doesn't crash. It also\n    // checks the externs file for validity. If you don't want to warn\n    // about missing variable declarations, we shut that specific\n    // error off.\n    boolean checkVariables = !options.checkSymbols ||\n        (warningsGuard != null && warningsGuard.disables(\n            DiagnosticGroups.CHECK_VARIABLES));\n    guards.add(new DiagnosticGroupWarningsGuard(\n        DiagnosticGroups.CHECK_VARIABLES,\n        checkVariables ? CheckLevel.OFF : CheckLevel.ERROR));\n    guards.add(new DiagnosticGroupWarningsGuard(\n        DiagnosticGroups.GLOBAL_THIS,\n        CheckLevel.OFF));\n\n    this.warningsGuard = new ComposeWarningsGuard(guards);\n    \n    // Add warning for lazy parsing. This will be reported once for this run.\n    options.setWarningLevel(\n      DiagnosticGroups.DEPRECATED,\n      CheckLevel.WARNING);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 11850211..8a221722 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -223,7 +223,7 @@ public class Compiler extends AbstractCompiler {\n    * Initialize the compiler options. Only necessary if you're not doing\n    * a normal compile() job.\n    */\n-  public void initOptions(CompilerOptions options) {\n+public void initOptions(CompilerOptions options) {\n     this.options = options;\n     if (errorManager == null) {\n       if (outStream == null) {\n@@ -265,20 +265,27 @@ public class Compiler extends AbstractCompiler {\n             getDiagnosticGroups().getRegisteredGroups()));\n     guards.add(options.getWarningsGuard());\n \n-\n     // All passes must run the variable check. This synthesizes\n     // variables later so that the compiler doesn't crash. It also\n     // checks the externs file for validity. If you don't want to warn\n     // about missing variable declarations, we shut that specific\n     // error off.\n-    if (!options.checkSymbols &&\n-        (warningsGuard == null || !warningsGuard.disables(\n-            DiagnosticGroups.CHECK_VARIABLES))) {\n-      guards.add(new DiagnosticGroupWarningsGuard(\n-          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n-    }\n+    boolean checkVariables = !options.checkSymbols ||\n+        (warningsGuard != null && warningsGuard.disables(\n+            DiagnosticGroups.CHECK_VARIABLES));\n+    guards.add(new DiagnosticGroupWarningsGuard(\n+        DiagnosticGroups.CHECK_VARIABLES,\n+        checkVariables ? CheckLevel.OFF : CheckLevel.ERROR));\n+    guards.add(new DiagnosticGroupWarningsGuard(\n+        DiagnosticGroups.GLOBAL_THIS,\n+        CheckLevel.OFF));\n \n     this.warningsGuard = new ComposeWarningsGuard(guards);\n+    \n+    // Add warning for lazy parsing. This will be reported once for this run.\n+    options.setWarningLevel(\n+      DiagnosticGroups.DEPRECATED,\n+      CheckLevel.WARNING);\n   }\n \n   /**",
    "result_reason": "junit.framework.AssertionFailedError: There should be one warning, repeated 2 time(s). expected:<2> but was:<0>",
    "test_result": "FAIL"
}