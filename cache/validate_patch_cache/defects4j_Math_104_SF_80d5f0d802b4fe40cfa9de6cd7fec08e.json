{
    "patch": "public static double gamma(double x) {\n    double gamma = 0;\n    if (x > 0) {\n        if (x == 1 || x == 2) {\n            gamma = 1;\n        } else if (x > 2) {\n            double[] cof = {\n                    76.18009172947146, -86.50532032941677,\n                    24.01409824083091, -1.231739572450155,\n                    0.001208650973866179, -0.000005395239384953\n            };\n            double sum = 1.000000000190015;\n            double denom = x + 1.0000000000190015;\n            sum += cof[0] / denom;\n            for (int i = 1; i < cof.length; i++) {\n                denom++;\n                sum += cof[i] / denom;\n            }\n            double tmp = (x + 5.5) - (x + 0.5) * Math.log(x + 5.5);\n            gamma = Math.exp(-tmp + Math.log(Math.sqrt(2 * Math.PI) * sum / x));\n        } else if (x < 0) {\n            gamma = Math.PI / (Math.sin(Math.PI * x) * gamma(1 - x));\n        } else {\n            gamma = Double.POSITIVE_INFINITY;\n        }\n    } else {\n        gamma = Double.NaN;\n    }\n    return gamma;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..7795fff8e 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,36 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double gamma(double x) {\n+    double gamma = 0;\n+    if (x > 0) {\n+        if (x == 1 || x == 2) {\n+            gamma = 1;\n+        } else if (x > 2) {\n+            double[] cof = {\n+                    76.18009172947146, -86.50532032941677,\n+                    24.01409824083091, -1.231739572450155,\n+                    0.001208650973866179, -0.000005395239384953\n+            };\n+            double sum = 1.000000000190015;\n+            double denom = x + 1.0000000000190015;\n+            sum += cof[0] / denom;\n+            for (int i = 1; i < cof.length; i++) {\n+                denom++;\n+                sum += cof[i] / denom;\n+            }\n+            double tmp = (x + 5.5) - (x + 0.5) * Math.log(x + 5.5);\n+            gamma = Math.exp(-tmp + Math.log(Math.sqrt(2 * Math.PI) * sum / x));\n+        } else if (x < 0) {\n+            gamma = Math.PI / (Math.sin(Math.PI * x) * gamma(1 - x));\n+        } else {\n+            gamma = Double.POSITIVE_INFINITY;\n+        }\n+    } else {\n+        gamma = Double.NaN;\n+    }\n+    return gamma;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}