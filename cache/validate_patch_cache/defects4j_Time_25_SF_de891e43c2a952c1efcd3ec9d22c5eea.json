{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int initialOffset = getOffset(instantLocal);\n\n    // Check if the given instant is in a gap or overlap\n    try {\n        long nextTransition = nextTransition(instantLocal - initialOffset);\n        if (nextTransition == instantLocal) {\n            // The given instant is exactly on a transition\n            int offsetBeforeTransition = getOffset(nextTransition - 1L);\n            return initialOffset < offsetBeforeTransition ? getOffset(nextTransition - 1L) : offsetBeforeTransition;\n        } else if (initialOffset < getOffset(nextTransition)) {\n            // The given instant is in a gap; return the current offset\n            return initialOffset;\n        }\n    } catch (IllegalArgumentException e) {\n        // The given instant is in an overlap or out of range\n        long prevTransition = previousTransition(instantLocal - initialOffset);\n\n        if (prevTransition > Long.MIN_VALUE && getOffset(prevTransition) == initialOffset) {\n            // The given instant is in an overlap and after the first transition\n            int offsetAfterOverlap = getOffset(prevTransition + 1L);\n            return initialOffset > offsetAfterOverlap ? offsetAfterOverlap : initialOffset;\n        }\n        // The given instant is in an overlap or before the first transition\n        int offsetBeforeOverlap = getOffset(prevTransition - 1L);\n        return initialOffset >= offsetBeforeOverlap ? offsetBeforeOverlap : initialOffset;\n    }\n\n    // The given instant is not in a gap or overlap; return the current offset\n    return initialOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..32a60d31 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,38 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int initialOffset = getOffset(instantLocal);\n+\n+    // Check if the given instant is in a gap or overlap\n+    try {\n+        long nextTransition = nextTransition(instantLocal - initialOffset);\n+        if (nextTransition == instantLocal) {\n+            // The given instant is exactly on a transition\n+            int offsetBeforeTransition = getOffset(nextTransition - 1L);\n+            return initialOffset < offsetBeforeTransition ? getOffset(nextTransition - 1L) : offsetBeforeTransition;\n+        } else if (initialOffset < getOffset(nextTransition)) {\n+            // The given instant is in a gap; return the current offset\n+            return initialOffset;\n+        }\n+    } catch (IllegalArgumentException e) {\n+        // The given instant is in an overlap or out of range\n+        long prevTransition = previousTransition(instantLocal - initialOffset);\n+\n+        if (prevTransition > Long.MIN_VALUE && getOffset(prevTransition) == initialOffset) {\n+            // The given instant is in an overlap and after the first transition\n+            int offsetAfterOverlap = getOffset(prevTransition + 1L);\n+            return initialOffset > offsetAfterOverlap ? offsetAfterOverlap : initialOffset;\n         }\n-        return offsetAdjusted;\n+        // The given instant is in an overlap or before the first transition\n+        int offsetBeforeOverlap = getOffset(prevTransition - 1L);\n+        return initialOffset >= offsetBeforeOverlap ? offsetBeforeOverlap : initialOffset;\n     }\n \n+    // The given instant is not in a gap or overlap; return the current offset\n+    return initialOffset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}