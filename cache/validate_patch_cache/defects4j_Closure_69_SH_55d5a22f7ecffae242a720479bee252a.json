{
    "patch": "      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      ObjectType thisType = functionType.getTypeOfThis();\n      if (thisType != null) {\n        Node callerNode = n.getParent();\n        if (callerNode.isGetProp() || callerNode.isGetElem()) {\n          ensureTyped(t, callerNode.getFirstChild(), thisType);\n        } else {\n          report(t, n, INVALID_THIS_TYPE);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..8911cedd 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      // Functions with explicit 'this' types must be called in a GETPROP\n+      // or GETELEM.\n+      ObjectType thisType = functionType.getTypeOfThis();\n+      if (thisType != null) {\n+        Node callerNode = n.getParent();\n+        if (callerNode.isGetProp() || callerNode.isGetElem()) {\n+          ensureTyped(t, callerNode.getFirstChild(), thisType);\n+        } else {\n+          report(t, n, INVALID_THIS_TYPE);\n+        }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}