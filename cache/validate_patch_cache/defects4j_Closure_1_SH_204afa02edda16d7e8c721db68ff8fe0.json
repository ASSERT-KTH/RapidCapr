{
    "patch": "    final AtomicInteger count = new AtomicInteger(0);\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      NodeTraversal.traverse(compiler, argList, new NodeTraversal.Callback() {\n        @Override\n        public boolean shouldTraverse(NodeTraversal traversal, Node node, Node parent) {\n          return true;\n        }\n\n        @Override\n        public void visit(NodeTraversal traversal, Node node, Node parent) {\n          if (node.isParam()) {\n            String argName = node.getString();\n            if (argName != null) {\n              Var var = fnScope.getVar(argName);\n              if (!referenced.contains(var)) {\n                count.incrementAndGet();\n                node.detach();\n              }\n\n            }\n          }\n        }\n      });\n\n      if (count.get() > 0) {\n        compiler.reportCodeChange();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..6e785d12 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,48 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    final AtomicInteger count = new AtomicInteger(0);\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      NodeTraversal.traverse(compiler, argList, new NodeTraversal.Callback() {\n+        @Override\n+        public boolean shouldTraverse(NodeTraversal traversal, Node node, Node parent) {\n+          return true;\n+        }\n+\n+        @Override\n+        public void visit(NodeTraversal traversal, Node node, Node parent) {\n+          if (node.isParam()) {\n+            String argName = node.getString();\n+            if (argName != null) {\n+              Var var = fnScope.getVar(argName);\n+              if (!referenced.contains(var)) {\n+                count.incrementAndGet();\n+                node.detach();\n+              }\n+\n+            }\n+          }\n+        }\n+      });\n+\n+      if (count.get() > 0) {\n+        compiler.reportCodeChange();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}