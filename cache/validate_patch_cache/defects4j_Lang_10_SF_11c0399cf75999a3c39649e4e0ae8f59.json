{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite= false;\n    regex.ensureCapacity(value.length()*2); // increase capacity for performance\n    for(int i= 0; i<value.length(); ++i) {\n        char c= value.charAt(i);\n        switch(c) {\n            case '\\\\':\n                regex.append(c);\n                if (++i == value.length()) {\n                    break; // if the \\ is the last char, just append it\n                }\n                char c2 = value.charAt(i);\n                if (Character.isWhitespace(c2)) {\n                    if (!wasWhite) {\n                        wasWhite= true;\n                        regex.append(\"\\\\s*+\");\n                    }\n                    continue;\n                }\n                regex.append(c2);\n                break;\n            case '?':\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '|':\n            case '*':\n            case '+':\n            case '^':\n            case '$':\n            case '.':\n                regex.append('\\\\');\n                regex.append(c);\n                wasWhite= false; // added\n                break;\n            case '\\'':\n                if(unquote) {\n                    if(++i==value.length()) {\n                        return regex;\n                    }\n                    c= value.charAt(i);\n                }\n                // fall through\n            default:\n                if(Character.isWhitespace(c)) {\n                    if(!wasWhite) {\n                        wasWhite= true;\n                        regex.append(\"\\\\s*+\");\n                    }\n                } else {\n                    wasWhite= false;\n                    regex.append(c);\n                }\n                break;\n        }\n    }\n    if(unquote && wasWhite)\n        regex.append(\"\\\\s*+\");\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..57f51fc9 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,26 +300,26 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite= false;\n+    regex.ensureCapacity(value.length()*2); // increase capacity for performance\n+    for(int i= 0; i<value.length(); ++i) {\n+        char c= value.charAt(i);\n+        switch(c) {\n+            case '\\\\':\n+                regex.append(c);\n+                if (++i == value.length()) {\n+                    break; // if the \\ is the last char, just append it\n                 }\n-                continue;\n-            }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n+                char c2 = value.charAt(i);\n+                if (Character.isWhitespace(c2)) {\n+                    if (!wasWhite) {\n+                        wasWhite= true;\n+                        regex.append(\"\\\\s*+\");\n                     }\n-                    c= value.charAt(i);\n+                    continue;\n                 }\n+                regex.append(c2);\n                 break;\n             case '?':\n             case '[':\n@@ -328,7 +328,6 @@ public class FastDateParser implements DateParser, Serializable {\n             case ')':\n             case '{':\n             case '}':\n-            case '\\\\':\n             case '|':\n             case '*':\n             case '+':\n@@ -336,11 +335,34 @@ public class FastDateParser implements DateParser, Serializable {\n             case '$':\n             case '.':\n                 regex.append('\\\\');\n-            }\n-            regex.append(c);\n+                regex.append(c);\n+                wasWhite= false; // added\n+                break;\n+            case '\\'':\n+                if(unquote) {\n+                    if(++i==value.length()) {\n+                        return regex;\n+                    }\n+                    c= value.charAt(i);\n+                }\n+                // fall through\n+            default:\n+                if(Character.isWhitespace(c)) {\n+                    if(!wasWhite) {\n+                        wasWhite= true;\n+                        regex.append(\"\\\\s*+\");\n+                    }\n+                } else {\n+                    wasWhite= false;\n+                    regex.append(c);\n+                }\n+                break;\n         }\n-        return regex;\n     }\n+    if(unquote && wasWhite)\n+        regex.append(\"\\\\s*+\");\n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "junit.framework.AssertionFailedError: Parsed dates should be equal expected:<null> but was:<Mon Mar 02 21:00:00 PST 1970>",
    "test_result": "FAIL"
}