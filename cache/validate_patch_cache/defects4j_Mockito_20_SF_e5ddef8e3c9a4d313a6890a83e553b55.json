{
    "patch": "            mockInstance = classInstantiator.instantiate(mockedProxyType);\n            if (mockInstance instanceof MockMethodInterceptor.MockAccess) {\n                MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n                mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n            }\n            else {\n                throw new MockitoException(join(\n                        \"Failed to create mock instance of type '\" + mockedProxyType.getSimpleName() + \"'\",\n                        \"Abstract classes and interfaces cannot be mocked, and types not registered with ByteBuddyMockMaker may not be supported.\",\n                        \"\",\n                        \"Suggestion: use an alternative mocking API such as Spock, or use Real Objects instead.\",\n                        \"\"\n                ));\n            }\n\n            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n        } catch (ClassCastException cce) {\n            throw new MockitoException(join(\n                    \"ClassCastException occurred while creating the mockito mock :\",\n                    \"  class to mock : \" + describeClass(mockedProxyType),\n                    \"  created class : \" + describeClass(settings.getTypeToMock()),\n                    \"  proxy instance class : \" + describeClass(mockInstance),\n                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n                    \"\",\n                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                    \"\"\n            ), cce);\n        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n            throw new MockitoException(\n                    \"Unable to create mock instance of type '\" + mockedProxyType.getSimpleName() + \"'\", e);",
    "patch_diff": "diff --git a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\nindex 9dc44e663..2dce7d0cf 100644\n--- a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n+++ b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n@@ -21,19 +21,20 @@ public class ByteBuddyMockMaker implements MockMaker {\n         cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator();\n     }\n \n-    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n-        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n-            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n-        }\n-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n-                settings.getTypeToMock(),\n-                settings.getExtraInterfaces()\n-        );\n-        T mockInstance = null;\n-        try {\n             mockInstance = classInstantiator.instantiate(mockedProxyType);\n-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n+            if (mockInstance instanceof MockMethodInterceptor.MockAccess) {\n+                MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n+                mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n+            }\n+            else {\n+                throw new MockitoException(join(\n+                        \"Failed to create mock instance of type '\" + mockedProxyType.getSimpleName() + \"'\",\n+                        \"Abstract classes and interfaces cannot be mocked, and types not registered with ByteBuddyMockMaker may not be supported.\",\n+                        \"\",\n+                        \"Suggestion: use an alternative mocking API such as Spock, or use Real Objects instead.\",\n+                        \"\"\n+                ));\n+            }\n \n             return ensureMockIsAssignableToMockedType(settings, mockInstance);\n         } catch (ClassCastException cce) {\n@@ -46,11 +47,10 @@ public class ByteBuddyMockMaker implements MockMaker {\n                     \"\",\n                     \"You might experience classloading issues, please ask the mockito mailing-list.\",\n                     \"\"\n-            ),cce);\n+            ), cce);\n         } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n-            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n-        }\n-    }\n+            throw new MockitoException(\n+                    \"Unable to create mock instance of type '\" + mockedProxyType.getSimpleName() + \"'\", e);\n \n     private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) {\n         // Force explicit cast to mocked type here, instead of",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}