{
    "patch": "                // we need to ensure that time is always after the DST gap\n                // this happens naturally for positive offsets, but not for negative\n                if ((offsetLocal - offsetAdjusted) < 0) {\n                    int nextAdjusted = getOffset(nextTransition(instantAdjusted));\n                    long nextLocal = nextTransition(instantAdjusted + (offsetAdjusted - nextAdjusted));\n                    if (nextLocal != instantLocal) {\n                        return offsetLocal;\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..f5e1693c 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,15 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // we need to ensure that time is always after the DST gap\n+                // this happens naturally for positive offsets, but not for negative\n+                if ((offsetLocal - offsetAdjusted) < 0) {\n+                    int nextAdjusted = getOffset(nextTransition(instantAdjusted));\n+                    long nextLocal = nextTransition(instantAdjusted + (offsetAdjusted - nextAdjusted));\n+                    if (nextLocal != instantLocal) {\n+                        return offsetLocal;\n+                    }\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}