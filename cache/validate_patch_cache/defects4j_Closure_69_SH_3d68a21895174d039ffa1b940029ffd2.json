{
    "patch": "      String methodName = getMethodName(child);\n      JSType methodOwnerType = getJSType(child.getFirstChild()).restrictByNotNullOrUndefined();\n\n      if (functionType.hasThisType()\n          && methodOwnerType.isSubtypeOf(\n              registry.createNamedType(objectType.getReferenceName()))) {\n        report(t, child, MALFORMED_DEFINITELY_NOT_FUNCTION_THIS,\n            methodName, methodOwnerType.toString());\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..1025fef0 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,15 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      String methodName = getMethodName(child);\n+      JSType methodOwnerType = getJSType(child.getFirstChild()).restrictByNotNullOrUndefined();\n+\n+      if (functionType.hasThisType()\n+          && methodOwnerType.isSubtypeOf(\n+              registry.createNamedType(objectType.getReferenceName()))) {\n+        report(t, child, MALFORMED_DEFINITELY_NOT_FUNCTION_THIS,\n+            methodName, methodOwnerType.toString());\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}