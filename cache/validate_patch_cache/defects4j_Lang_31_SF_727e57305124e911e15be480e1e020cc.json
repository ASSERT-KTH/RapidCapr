{
    "patch": "public static boolean containsAny(final CharSequence string, final char... searchChars) {\n    if (isEmpty(string) || searchChars == null || searchChars.length == 0) {\n        return false;\n    }\n    final int len = string.length();\n    final int searchLen = searchChars.length;\n    final int endIndex = len - searchLen;\n\n    for (int i = 0; i <= endIndex; i++) {\n        int j = 0;\n        // Handling the surrogate pair characters\n        while (j < searchLen && Character.isSurrogatePair(searchChars[j], (j + 1 < searchLen) ? searchChars[j + 1] : '\\0')) {\n            if (i + 1 >= len || !Character.isSurrogatePair(string.charAt(i), string.charAt(i + 1))) {\n                break;\n            }\n            if (string.charAt(i) == searchChars[j] && string.charAt(i + 1) == searchChars[j + 1]) {\n                return true;\n            }\n            i += 2;\n            j += 2;\n        }\n        if (j == searchLen) {\n            return true;\n        }\n        if (CharacterUtils.equals(string.charAt(i), searchChars[j])) {\n            return true;\n        }\n    }\n    return false;\n}\n\nprivate static boolean isEmpty(final CharSequence cs) {\n    return cs == null || cs.length() == 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..df13e82e 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,40 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(final CharSequence string, final char... searchChars) {\n+    if (isEmpty(string) || searchChars == null || searchChars.length == 0) {\n+        return false;\n+    }\n+    final int len = string.length();\n+    final int searchLen = searchChars.length;\n+    final int endIndex = len - searchLen;\n+\n+    for (int i = 0; i <= endIndex; i++) {\n+        int j = 0;\n+        // Handling the surrogate pair characters\n+        while (j < searchLen && Character.isSurrogatePair(searchChars[j], (j + 1 < searchLen) ? searchChars[j + 1] : '\\0')) {\n+            if (i + 1 >= len || !Character.isSurrogatePair(string.charAt(i), string.charAt(i + 1))) {\n+                break;\n+            }\n+            if (string.charAt(i) == searchChars[j] && string.charAt(i + 1) == searchChars[j + 1]) {\n+                return true;\n+            }\n+            i += 2;\n+            j += 2;\n+        }\n+        if (j == searchLen) {\n+            return true;\n+        }\n+        if (CharacterUtils.equals(string.charAt(i), searchChars[j])) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean isEmpty(final CharSequence cs) {\n+    return cs == null || cs.length() == 0;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}