{
    "patch": "    private void visitAst(NodeTraversal t, Node n, Node parent) {\n        attachLiteralTypes(n);\n        if (NodeUtil.isFunctionDeclaration(n)) {\n            if (parent != null && parent.getType() == Token.NAME) {\n                return;\n            }\n            defineFunctionDeclaration(n, parent);\n        } else if (NodeUtil.isFunctionExpression(n)) {\n            if (scope.getParent() != null) {\n                return;\n            }\n            defineFunctionExpression(n);\n        } else if (n.getType() == Token.CATCH) {\n            defineCatch(n, parent);\n        } else if (n.getType() == Token.VAR) {\n            defineVar(n, parent);\n        } else if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n            handleFunctionInputs(parent);\n        }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..812410ef 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,29 +1440,25 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+    private void visitAst(NodeTraversal t, Node n, Node parent) {\n+        attachLiteralTypes(n);\n+        if (NodeUtil.isFunctionDeclaration(n)) {\n+            if (parent != null && parent.getType() == Token.NAME) {\n+                return;\n+            }\n+            defineFunctionDeclaration(n, parent);\n+        } else if (NodeUtil.isFunctionExpression(n)) {\n+            if (scope.getParent() != null) {\n+                return;\n+            }\n+            defineFunctionExpression(n);\n+        } else if (n.getType() == Token.CATCH) {\n+            defineCatch(n, parent);\n+        } else if (n.getType() == Token.VAR) {\n+            defineVar(n, parent);\n+        } else if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+            handleFunctionInputs(parent);\n+        }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}