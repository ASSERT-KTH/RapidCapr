{
    "patch": "public double getTypedPercent(String js) {\n    double percent = 0.0;\n    try {\n        ScriptEngineManager manager = new ScriptEngineManager();\n        ScriptEngine engine = manager.getEngineByName(\"JavaScript\");\n        engine.eval(js);\n        Object result = engine.eval(\"percent;\");\n        if (result instanceof Double) {\n            percent = (Double) result;\n        } else if (result instanceof Integer) {\n            percent = ((Integer) result).doubleValue();\n        }\n        // check if percent is out of range\n        if (percent < 0.0 || percent > 100.0) {\n            percent = 0.0;\n        }\n    } catch (ScriptException e) {\n        System.err.println(e);\n    }\n    return percent;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..9c745218 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String js) {\n+    double percent = 0.0;\n+    try {\n+        ScriptEngineManager manager = new ScriptEngineManager();\n+        ScriptEngine engine = manager.getEngineByName(\"JavaScript\");\n+        engine.eval(js);\n+        Object result = engine.eval(\"percent;\");\n+        if (result instanceof Double) {\n+            percent = (Double) result;\n+        } else if (result instanceof Integer) {\n+            percent = ((Integer) result).doubleValue();\n+        }\n+        // check if percent is out of range\n+        if (percent < 0.0 || percent > 100.0) {\n+            percent = 0.0;\n+        }\n+    } catch (ScriptException e) {\n+        System.err.println(e);\n+    }\n+    return percent;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}