{
    "patch": "private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n    ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType != null) {\n      boolean isNormalPropertyAccess = parent == null || parent.getType() != Token.ASSIGN || parent.getFirstChild() != getprop;\n      if (isNormalPropertyAccess) {\n        checkForPrivateAccess(t, getprop, objectType, propertyName);\n        checkForProtectedAccess(t, getprop, objectType, propertyName);\n      } else {\n        checkForOverridingPrivateProperty(t, getprop, parent, objectType, propertyName);\n      }\n    }\n}\n\nprivate void checkForPrivateAccess(NodeTraversal t, Node getprop, ObjectType objectType, String propertyName) {\n    JSDocInfo docInfo = findDocInfoWithVisibility(objectType, propertyName, Visibility.PRIVATE);\n    if (docInfo != null) {\n      String sourceName = docInfo.getSourceFile().getName();\n      if (!t.getInput().getName().equals(sourceName)) {\n        JSType ownerType = normalizeClassType(objectType);\n        if (ownerType == null || !ownerType.equals(currentClass)) {\n          compiler.report(\n              t.makeError(\n                  getprop,\n                  BAD_PRIVATE_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(getprop.getFirstChild(), true)\n              )\n          );\n        }\n      }\n    }\n}\n\nprivate void checkForProtectedAccess(NodeTraversal t, Node getprop, ObjectType objectType, String propertyName) {\n    JSDocInfo docInfo = findDocInfoWithVisibility(objectType, propertyName, Visibility.PROTECTED);\n    if (docInfo != null) {\n      String sourceName = docInfo.getSourceFile().getName();\n      if (!t.getInput().getName().equals(sourceName)) {\n        JSType ownerType = normalizeClassType(objectType);\n        if (ownerType == null || !currentClass.isSubtype(ownerType)) {\n          compiler.report(\n              t.makeError(\n                  getprop,\n                  BAD_PROTECTED_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(getprop.getFirstChild(), true)\n              )\n          );\n        }\n      }\n    }\n}\n\nprivate void checkForOverridingPrivateProperty(\n    NodeTraversal t, Node getprop, Node parent, ObjectType objectType, String propertyName) {\n    JSDocInfo overridingInfo = parent.getJSDocInfo();\n    Visibility overridingVisibility = overridingInfo != null ? overridingInfo.getVisibility() : Visibility.INHERITED;\n\n    if (overridingVisibility != Visibility.INHERITED) {\n      ObjectType overriddenObjectType = objectType.getImplicitPrototype();\n      JSDocInfo docInfo = findDocInfoWithVisibility(overriddenObjectType, propertyName, Visibility.PRIVATE);\n      if (docInfo != null) {\n        JSType ownerType = normalizeClassType(objectType);\n        if (ownerType == null || !ownerType.equals(currentClass)) {\n          compiler.report(\n              t.makeError(\n                  getprop,\n                  PRIVATE_OVERRIDE,\n                  objectType.toString()\n              )\n          );\n        }\n      }\n    }\n}\n\nprivate JSDocInfo findDocInfoWithVisibility(ObjectType objectType, String propertyName, Visibility visibility) {\n    JSDocInfo docInfo = null;\n    for (; objectType != null; objectType = objectType.getImplicitPrototype()) {\n        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n        if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {\n            if (docInfo.getVisibility() == visibility) {\n                return docInfo;\n            } else {\n                break;\n            }\n        }\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..07406ce4 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -404,100 +404,98 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n    * @param t The current traversal.\n    * @param getprop The getprop node.\n    */\n-  private void checkPropertyVisibility(NodeTraversal t,\n-      Node getprop, Node parent) {\n-    ObjectType objectType =\n-        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n+private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n+    ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n     String propertyName = getprop.getLastChild().getString();\n \n     if (objectType != null) {\n-      // Is this a normal property access, or are we trying to override\n-      // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n-          parent.getType() == Token.ASSIGN &&\n-          parent.getFirstChild() == getprop;\n-\n-      // Find the lowest property defined on a class with visibility\n-      // information.\n-      if (isOverride) {\n-        objectType = objectType.getImplicitPrototype();\n-      }\n-      JSDocInfo docInfo = null;\n-      for (; objectType != null;\n-           objectType = objectType.getImplicitPrototype()) {\n-        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n-        if (docInfo != null &&\n-            docInfo.getVisibility() != Visibility.INHERITED) {\n-          break;\n-        }\n+      boolean isNormalPropertyAccess = parent == null || parent.getType() != Token.ASSIGN || parent.getFirstChild() != getprop;\n+      if (isNormalPropertyAccess) {\n+        checkForPrivateAccess(t, getprop, objectType, propertyName);\n+        checkForProtectedAccess(t, getprop, objectType, propertyName);\n+      } else {\n+        checkForOverridingPrivateProperty(t, getprop, parent, objectType, propertyName);\n       }\n+    }\n+}\n \n-      if (objectType == null) {\n-        // We couldn't find a visibility modifier; assume it's public.\n-        return;\n+private void checkForPrivateAccess(NodeTraversal t, Node getprop, ObjectType objectType, String propertyName) {\n+    JSDocInfo docInfo = findDocInfoWithVisibility(objectType, propertyName, Visibility.PRIVATE);\n+    if (docInfo != null) {\n+      String sourceName = docInfo.getSourceFile().getName();\n+      if (!t.getInput().getName().equals(sourceName)) {\n+        JSType ownerType = normalizeClassType(objectType);\n+        if (ownerType == null || !ownerType.equals(currentClass)) {\n+          compiler.report(\n+              t.makeError(\n+                  getprop,\n+                  BAD_PRIVATE_PROPERTY_ACCESS,\n+                  propertyName,\n+                  validator.getReadableJSTypeName(getprop.getFirstChild(), true)\n+              )\n+          );\n+        }\n       }\n+    }\n+}\n \n-      boolean sameInput =\n-          t.getInput().getName().equals(docInfo.getSourceName());\n-      Visibility visibility = docInfo.getVisibility();\n-      JSType ownerType = normalizeClassType(objectType);\n-      if (isOverride) {\n-        // Check an ASSIGN statement that's trying to override a property\n-        // on a superclass.\n-        JSDocInfo overridingInfo = parent.getJSDocInfo();\n-        Visibility overridingVisibility = overridingInfo == null ?\n-            Visibility.INHERITED : overridingInfo.getVisibility();\n-\n-        // Check that (a) the property *can* be overridden, and\n-        // (b) that the visibility of the override is the same as the\n-        // visibility of the original property.\n-        if (visibility == Visibility.PRIVATE && !sameInput) {\n+private void checkForProtectedAccess(NodeTraversal t, Node getprop, ObjectType objectType, String propertyName) {\n+    JSDocInfo docInfo = findDocInfoWithVisibility(objectType, propertyName, Visibility.PROTECTED);\n+    if (docInfo != null) {\n+      String sourceName = docInfo.getSourceFile().getName();\n+      if (!t.getInput().getName().equals(sourceName)) {\n+        JSType ownerType = normalizeClassType(objectType);\n+        if (ownerType == null || !currentClass.isSubtype(ownerType)) {\n           compiler.report(\n-              t.makeError(getprop, PRIVATE_OVERRIDE,\n-                  objectType.toString()));\n-        } else if (overridingVisibility != Visibility.INHERITED &&\n-            overridingVisibility != visibility) {\n-          compiler.report(\n-              t.makeError(getprop, VISIBILITY_MISMATCH,\n-                  visibility.name(), objectType.toString(),\n-                  overridingVisibility.name()));\n+              t.makeError(\n+                  getprop,\n+                  BAD_PROTECTED_PROPERTY_ACCESS,\n+                  propertyName,\n+                  validator.getReadableJSTypeName(getprop.getFirstChild(), true)\n+              )\n+          );\n         }\n-      } else {\n-        if (sameInput) {\n-          // private access is always allowed in the same file.\n-          return;\n-        } else if (visibility == Visibility.PRIVATE &&\n-            (currentClass == null || ownerType.differsFrom(currentClass))) {\n-          if (docInfo.isConstructor() &&\n-              isValidPrivateConstructorAccess(parent)) {\n-            return;\n-          }\n+      }\n+    }\n+}\n+\n+private void checkForOverridingPrivateProperty(\n+    NodeTraversal t, Node getprop, Node parent, ObjectType objectType, String propertyName) {\n+    JSDocInfo overridingInfo = parent.getJSDocInfo();\n+    Visibility overridingVisibility = overridingInfo != null ? overridingInfo.getVisibility() : Visibility.INHERITED;\n \n-          // private access is not allowed outside the file from a different\n-          // enclosing class.\n+    if (overridingVisibility != Visibility.INHERITED) {\n+      ObjectType overriddenObjectType = objectType.getImplicitPrototype();\n+      JSDocInfo docInfo = findDocInfoWithVisibility(overriddenObjectType, propertyName, Visibility.PRIVATE);\n+      if (docInfo != null) {\n+        JSType ownerType = normalizeClassType(objectType);\n+        if (ownerType == null || !ownerType.equals(currentClass)) {\n           compiler.report(\n-              t.makeError(getprop,\n-                  BAD_PRIVATE_PROPERTY_ACCESS,\n-                  propertyName,\n-                  validator.getReadableJSTypeName(\n-                      getprop.getFirstChild(), true)));\n-        } else if (visibility == Visibility.PROTECTED) {\n-          // There are 3 types of legal accesses of a protected property:\n-          // 1) Accesses in the same file\n-          // 2) Overriding the property in a subclass\n-          // 3) Accessing the property from inside a subclass\n-          // The first two have already been checked for.\n-          if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n-            compiler.report(\n-                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n-                    propertyName,\n-                    validator.getReadableJSTypeName(\n-                        getprop.getFirstChild(), true)));\n-          }\n+              t.makeError(\n+                  getprop,\n+                  PRIVATE_OVERRIDE,\n+                  objectType.toString()\n+              )\n+          );\n         }\n       }\n     }\n-  }\n+}\n+\n+private JSDocInfo findDocInfoWithVisibility(ObjectType objectType, String propertyName, Visibility visibility) {\n+    JSDocInfo docInfo = null;\n+    for (; objectType != null; objectType = objectType.getImplicitPrototype()) {\n+        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n+        if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {\n+            if (docInfo.getVisibility() == visibility) {\n+                return docInfo;\n+            } else {\n+                break;\n+            }\n+        }\n+    }\n+    return null;\n+}\n \n   /**\n    * Whether the given access of a private constructor is legal.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}