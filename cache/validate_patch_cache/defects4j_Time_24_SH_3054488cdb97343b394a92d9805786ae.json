{
    "patch": "            long instantMillis = 0;\n            try {\n                instantMillis = computeMillis(resetFields, text);\n            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n                }\n                throw e;\n            }\n            Chronology chrono = getChronology();\n            if (chrono == null) {\n                chrono = ISOChronology.getInstanceUTC();\n            }\n            LocalDate localDate = new LocalDate(instantMillis, chrono);\n            if (resetFields) {\n                int[] originalValues = new int[savedFields.length];\n                for (int i = 0; i < originalValues.length; i++) {\n                    originalValues[i] = savedFields[i].iValue;\n                }\n                try {\n                    for (int i = 0; i < savedFields.length; i++) {\n                        DateTimeField field = savedFields[i].iField;\n                        int value = savedFields[i].iValue;\n                        if (value != field.get(instantMillis)) {\n                            if (resetFields) {\n                                throw new IllegalFieldValueException(\n                                    field.getType(), Integer.valueOf(value),\n                                    null, null);\n                            } else {\n                                return null;\n                            }\n                        }\n                    }\n                } catch (IllegalFieldValueException e) {\n                    if (text != null) {\n                        e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n                    }\n                    throw e;\n                }\n                for (int i = 0; i < savedFields.length; i++) {\n                    savedFields[i].iField.set(instantMillis, originalValues[i]);\n                }\n            }\n            return localDate;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..1444ba04 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,50 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            long instantMillis = 0;\n+            try {\n+                instantMillis = computeMillis(resetFields, text);\n+            } catch (IllegalFieldValueException e) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n+                }\n+                throw e;\n+            }\n+            Chronology chrono = getChronology();\n+            if (chrono == null) {\n+                chrono = ISOChronology.getInstanceUTC();\n+            }\n+            LocalDate localDate = new LocalDate(instantMillis, chrono);\n+            if (resetFields) {\n+                int[] originalValues = new int[savedFields.length];\n+                for (int i = 0; i < originalValues.length; i++) {\n+                    originalValues[i] = savedFields[i].iValue;\n+                }\n+                try {\n+                    for (int i = 0; i < savedFields.length; i++) {\n+                        DateTimeField field = savedFields[i].iField;\n+                        int value = savedFields[i].iValue;\n+                        if (value != field.get(instantMillis)) {\n+                            if (resetFields) {\n+                                throw new IllegalFieldValueException(\n+                                    field.getType(), Integer.valueOf(value),\n+                                    null, null);\n+                            } else {\n+                                return null;\n+                            }\n+                        }\n+                    }\n+                } catch (IllegalFieldValueException e) {\n+                    if (text != null) {\n+                        e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n+                    }\n+                    throw e;\n+                }\n+                for (int i = 0; i < savedFields.length; i++) {\n+                    savedFields[i].iField.set(instantMillis, originalValues[i]);\n+                }\n+            }\n+            return localDate;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}