{
    "patch": "Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\nif (candidate != null) {\n    Class<?> targetType = field.getType();\n    if (targetType.isAssignableFrom(candidate.getClass())) {\n        try {\n            if (Modifier.isFinal(field.getModifiers())) {\n                Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n                modifiersField.setAccessible(true);\n                modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n            }\n\n            field.setAccessible(true);\n            field.set(fieldInstance, candidate);\n\n            if (!field.getType().equals(candidate.getClass())) {\n                injectMockCandidate(candidate.getClass(), mocks, candidate);\n            }\n\n        } catch (NoSuchFieldException | IllegalAccessException e) {\n            throw new IllegalStateException(\"Could not set field value\", e);\n        }\n    } else {\n        injectMockCandidate(field.getType(), mocks, fieldInstance);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..c69077424 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,34 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+if (candidate != null) {\n+    Class<?> targetType = field.getType();\n+    if (targetType.isAssignableFrom(candidate.getClass())) {\n+        try {\n+            if (Modifier.isFinal(field.getModifiers())) {\n+                Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n+                modifiersField.setAccessible(true);\n+                modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n+            }\n+\n+            field.setAccessible(true);\n+            field.set(fieldInstance, candidate);\n+\n+            if (!field.getType().equals(candidate.getClass())) {\n+                injectMockCandidate(candidate.getClass(), mocks, candidate);\n+            }\n+\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            throw new IllegalStateException(\"Could not set field value\", e);\n+        }\n+    } else {\n+        injectMockCandidate(field.getType(), mocks, fieldInstance);\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "error: multi-catch statement is not supported in -source 1.5",
    "test_result": "ERROR"
}