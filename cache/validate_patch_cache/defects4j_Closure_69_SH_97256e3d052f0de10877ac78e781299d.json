{
    "patch": "      boolean isThisTypeValid = false;\n      ObjectType thisType = functionType.getTypeOfThis();\n      if (thisType == null ||\n          thisType instanceof AllType ||\n          thisType.isUnknownType() ||\n          thisType.isVoidType() ||\n          thisType.isUnionType()) {\n        isThisTypeValid = true;\n      } else {\n        switch (child.getToken()) {\n          case GETELEM:\n          case GETPROP:\n            isThisTypeValid = true;\n            break;\n        }\n      }\n      if (!isThisTypeValid) {\n        report(t, n, BAD_THIS_TYPE);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..b207f772 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,24 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      boolean isThisTypeValid = false;\n+      ObjectType thisType = functionType.getTypeOfThis();\n+      if (thisType == null ||\n+          thisType instanceof AllType ||\n+          thisType.isUnknownType() ||\n+          thisType.isVoidType() ||\n+          thisType.isUnionType()) {\n+        isThisTypeValid = true;\n+      } else {\n+        switch (child.getToken()) {\n+          case GETELEM:\n+          case GETPROP:\n+            isThisTypeValid = true;\n+            break;\n+        }\n+      }\n+      if (!isThisTypeValid) {\n+        report(t, n, BAD_THIS_TYPE);\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}