{
    "patch": "public class StringUtils {\n\n    public static boolean containsAny(char[] arr1, char[] arr2) {\n        if (arr1 == null || arr2 == null) {\n            return false;\n        }\n        for (int i = 0; i < arr1.length; i++) {\n            char c1 = arr1[i];\n            if (Character.isHighSurrogate(c1) && i < arr1.length - 1) {\n                char c2 = arr1[i + 1];\n                int codePoint = Character.toCodePoint(c1, c2);\n                if (contains(codePoint, arr2)) {\n                    return true;\n                }\n                i++;\n            } else {\n                if (contains(c1, arr2)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private static boolean contains(int codePoint, char[] arr) {\n        for (int i = 0; i < arr.length; i++) {\n            char c1 = arr[i];\n            if (Character.isHighSurrogate(c1) && i < arr.length - 1) {\n                char c2 = arr[i + 1];\n                int cp = Character.toCodePoint(c1, c2);\n                if (cp == codePoint) {\n                    return true;\n                }\n                i++;\n            } else {\n                if (c1 == codePoint) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..8d8692d7 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,49 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public class StringUtils {\n+\n+    public static boolean containsAny(char[] arr1, char[] arr2) {\n+        if (arr1 == null || arr2 == null) {\n+            return false;\n+        }\n+        for (int i = 0; i < arr1.length; i++) {\n+            char c1 = arr1[i];\n+            if (Character.isHighSurrogate(c1) && i < arr1.length - 1) {\n+                char c2 = arr1[i + 1];\n+                int codePoint = Character.toCodePoint(c1, c2);\n+                if (contains(codePoint, arr2)) {\n+                    return true;\n+                }\n+                i++;\n+            } else {\n+                if (contains(c1, arr2)) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static boolean contains(int codePoint, char[] arr) {\n+        for (int i = 0; i < arr.length; i++) {\n+            char c1 = arr[i];\n+            if (Character.isHighSurrogate(c1) && i < arr.length - 1) {\n+                char c2 = arr[i + 1];\n+                int cp = Character.toCodePoint(c1, c2);\n+                if (cp == codePoint) {\n+                    return true;\n+                }\n+                i++;\n+            } else {\n+                if (c1 == codePoint) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}