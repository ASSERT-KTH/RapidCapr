{
    "patch": "public static boolean containsAny(final CharSequence sequence, final char... searchCharacters) {\n    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchCharacters)) {\n        return false;\n    }\n\n    final int length = sequence.length();\n    final int searchLength = searchCharacters.length;\n\n    if (searchLength == 1) {\n        final char searchChar = searchCharacters[0];\n        for (int i = 0; i < length; i++) {\n            if (sequence.charAt(i) == searchChar) {\n                return true;\n            }\n        }\n    } else if (searchLength == 2 && Character.isSurrogatePair(searchCharacters[0], searchCharacters[1])) {\n        final int searchChar = Character.toCodePoint(searchCharacters[0], searchCharacters[1]);\n        for (int i = 0; i < length - 1; i++) {\n            final int codePoint = Character.codePointAt(sequence, i);\n            if (codePoint == searchChar) {\n                return true;\n            }\n            i += Character.charCount(codePoint) - 1;\n        }\n    } else {\n        final Set<Integer> set = new HashSet<>(searchLength);\n        for (final char c : searchCharacters) {\n            final int cp = c;\n            set.add(cp);\n        }\n        for (int i = 0; i < length; i++) {\n            final int codePoint = Character.codePointAt(sequence, i);\n            if (set.contains(codePoint)) {\n                return true;\n            }\n            i += Character.charCount(codePoint) - 1;\n        }\n    }\n    return false;\n}\n\npublic static boolean isEmpty(final CharSequence cs) {\n    return cs == null || cs.length() == 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..8a45bba2 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,50 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(final CharSequence sequence, final char... searchCharacters) {\n+    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchCharacters)) {\n+        return false;\n+    }\n+\n+    final int length = sequence.length();\n+    final int searchLength = searchCharacters.length;\n+\n+    if (searchLength == 1) {\n+        final char searchChar = searchCharacters[0];\n+        for (int i = 0; i < length; i++) {\n+            if (sequence.charAt(i) == searchChar) {\n+                return true;\n+            }\n+        }\n+    } else if (searchLength == 2 && Character.isSurrogatePair(searchCharacters[0], searchCharacters[1])) {\n+        final int searchChar = Character.toCodePoint(searchCharacters[0], searchCharacters[1]);\n+        for (int i = 0; i < length - 1; i++) {\n+            final int codePoint = Character.codePointAt(sequence, i);\n+            if (codePoint == searchChar) {\n+                return true;\n+            }\n+            i += Character.charCount(codePoint) - 1;\n+        }\n+    } else {\n+        final Set<Integer> set = new HashSet<>(searchLength);\n+        for (final char c : searchCharacters) {\n+            final int cp = c;\n+            set.add(cp);\n+        }\n+        for (int i = 0; i < length; i++) {\n+            final int codePoint = Character.codePointAt(sequence, i);\n+            if (set.contains(codePoint)) {\n+                return true;\n+            }\n+            i += Character.charCount(codePoint) - 1;\n+        }\n+    }\n+    return false;\n+}\n+\n+public static boolean isEmpty(final CharSequence cs) {\n+    return cs == null || cs.length() == 0;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}