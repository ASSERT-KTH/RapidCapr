{
    "patch": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  // Get the function body, which should only be a single return statement\n  Node fnBody = fnNode.getLastChild();\n  if (fnBody.getChildCount() != 1 || !fnBody.getFirstChild().isReturn()) {\n    return CanInlineResult.NO;\n  }\n  Node returnNode = fnBody.getFirstChild();\n  Node returnValue = returnNode.getFirstChild();\n\n  if (!returnValue.isName()) {\n    return CanInlineResult.NO;\n  }\n\n  // Check for potential side effects in the function arguments\n  Node callArg = callNode.getFirstChild().getNext();\n  Node param = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  while (callArg != null && param != null) {\n    // Ignore the first argument if it's the 'this' parameter\n    if (param.getString().equals(\"this\")) {\n      if (!NodeUtil.isFunctionObjectCall(callNode)) {\n        return CanInlineResult.NO;\n      }\n      callArg = callArg.getNext();\n      param = param.getNext();\n      continue;\n    }\n\n    Node argValue = callArg.getFirstChild();\n\n    // Check for potential side effects in argument values\n    if (argValue == null || NodeUtil.mayHaveSideEffects(argValue, compiler)) {\n      return CanInlineResult.NO;\n    }\n\n    // Check for mutable arguments that are used more than once\n    int referenceCount = NodeUtil.getNameReferenceCount(returnNode, param.getString());\n    if (referenceCount > 1 && NodeUtil.mayEffectMutableState(argValue, compiler)) {\n      return CanInlineResult.NO;\n    }\n\n    callArg = callArg.getNext();\n    param = param.getNext();\n  }\n\n  // Check if all function arguments were accounted for\n  if (callArg == null && param == null) {\n    return CanInlineResult.YES;\n  }\n  \n  return CanInlineResult.NO;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..910d71d3 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,76 +686,62 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n+private CanInlineResult canInlineReferenceDirectly(\n+    Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  // Get the function body, which should only be a single return statement\n+  Node fnBody = fnNode.getLastChild();\n+  if (fnBody.getChildCount() != 1 || !fnBody.getFirstChild().isReturn()) {\n+    return CanInlineResult.NO;\n+  }\n+  Node returnNode = fnBody.getFirstChild();\n+  Node returnValue = returnNode.getFirstChild();\n \n-    boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n-    }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  if (!returnValue.isName()) {\n+    return CanInlineResult.NO;\n+  }\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+  // Check for potential side effects in the function arguments\n+  Node callArg = callNode.getFirstChild().getNext();\n+  Node param = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+  while (callArg != null && param != null) {\n+    // Ignore the first argument if it's the 'this' parameter\n+    if (param.getString().equals(\"this\")) {\n+      if (!NodeUtil.isFunctionObjectCall(callNode)) {\n+        return CanInlineResult.NO;\n       }\n+      callArg = callArg.getNext();\n+      param = param.getNext();\n+      continue;\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+    Node argValue = callArg.getFirstChild();\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+    // Check for potential side effects in argument values\n+    if (argValue == null || NodeUtil.mayHaveSideEffects(argValue, compiler)) {\n+      return CanInlineResult.NO;\n+    }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n+    // Check for mutable arguments that are used more than once\n+    int referenceCount = NodeUtil.getNameReferenceCount(returnNode, param.getString());\n+    if (referenceCount > 1 && NodeUtil.mayEffectMutableState(argValue, compiler)) {\n+      return CanInlineResult.NO;\n     }\n \n+    callArg = callArg.getNext();\n+    param = param.getNext();\n+  }\n+\n+  // Check if all function arguments were accounted for\n+  if (callArg == null && param == null) {\n     return CanInlineResult.YES;\n   }\n+  \n+  return CanInlineResult.NO;\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<YES> but was:<NO>",
    "test_result": "FAIL"
}