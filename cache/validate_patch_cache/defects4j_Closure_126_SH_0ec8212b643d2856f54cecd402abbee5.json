{
    "patch": "      // If there is a next sibling, try minimizing the exits for it.\n      Node nextNode = n.getNext();\n      if (nextNode != null) {\n        tryMinimizeExits(nextNode, exitType, labelName);\n      }\n      // If the current node is a finally block, try minimizing its children but don't remove any exits.\n      else if (NodeUtil.hasFinally(n)) {\n        Node finallyBlock = n.getLastChild();\n        tryMinimizeExits(finallyBlock, exitType, labelName);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..13d2f34a 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,7 +138,13 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n-      if (NodeUtil.hasFinally(n)) {\n+      // If there is a next sibling, try minimizing the exits for it.\n+      Node nextNode = n.getNext();\n+      if (nextNode != null) {\n+        tryMinimizeExits(nextNode, exitType, labelName);\n+      }\n+      // If the current node is a finally block, try minimizing its children but don't remove any exits.\n+      else if (NodeUtil.hasFinally(n)) {\n         Node finallyBlock = n.getLastChild();\n         tryMinimizeExits(finallyBlock, exitType, labelName);\n       }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}