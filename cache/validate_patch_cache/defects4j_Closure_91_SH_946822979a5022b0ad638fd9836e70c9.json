{
    "patch": "// Don't traverse functions that are getting lent to a prototype.\nif (parent != null && (parent.getType() == Token.ASSIGN || parent.getType() == Token.GETPROP)) {\n  Node lhs = parent.getFirstChild();\n  if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n    return parent.getParent().getType() == Token.EXPR_RESULT;\n  }\n  if (lhs.getType() == Token.NAME) {\n    Scope scope = t.getScope();\n    Var var = scope.getVar(lhs.getString());\n    if (var != null && var.getNameNode() == lhs) {\n      TypeI varType = var.getType();\n      if (varType instanceof FunctionTypeI && ((FunctionTypeI)varType).isConstructor()) {\n        return true;\n      }\n    }\n  }\n  if (parent.getType() == Token.GETPROP && parent.getLastChild() == lhs) {\n    return shouldTraverse(t, parent, parent.getParent());\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..e49977fa 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,26 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+// Don't traverse functions that are getting lent to a prototype.\n+if (parent != null && (parent.getType() == Token.ASSIGN || parent.getType() == Token.GETPROP)) {\n+  Node lhs = parent.getFirstChild();\n+  if (lhs.getType() == Token.GETPROP && lhs.getLastChild().getString().equals(\"prototype\")) {\n+    return parent.getParent().getType() == Token.EXPR_RESULT;\n+  }\n+  if (lhs.getType() == Token.NAME) {\n+    Scope scope = t.getScope();\n+    Var var = scope.getVar(lhs.getString());\n+    if (var != null && var.getNameNode() == lhs) {\n+      TypeI varType = var.getType();\n+      if (varType instanceof FunctionTypeI && ((FunctionTypeI)varType).isConstructor()) {\n+        return true;\n+      }\n+    }\n+  }\n+  if (parent.getType() == Token.GETPROP && parent.getLastChild() == lhs) {\n+    return shouldTraverse(t, parent, parent.getParent());\n+  }\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}