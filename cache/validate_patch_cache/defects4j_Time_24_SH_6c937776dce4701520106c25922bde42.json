{
    "patch": "            if (savedFields[i].iField.getType() == DateTimeFieldType.year() && TextField.isParsedToIntegralValue(savedFields[i].iText) && savedFields[i].iValue < 100) {\n                int year = iDefaultYear / 100 * 100 + savedFields[i].iValue; \n                saveField<DateTimeField>(DateTimeFieldType.year(), year);\n                count = resolve(savedFields, count, iSavedFields);\n                // Reset to prevent integer overflow\n                millis = iChrono.setYear(millis, year);\n            } else {\n                millis = savedFields[i].set(millis, resetFields);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..a045fa7a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,15 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (savedFields[i].iField.getType() == DateTimeFieldType.year() && TextField.isParsedToIntegralValue(savedFields[i].iText) && savedFields[i].iValue < 100) {\n+                int year = iDefaultYear / 100 * 100 + savedFields[i].iValue; \n+                saveField<DateTimeField>(DateTimeFieldType.year(), year);\n+                count = resolve(savedFields, count, iSavedFields);\n+                // Reset to prevent integer overflow\n+                millis = iChrono.setYear(millis, year);\n+            } else {\n+                millis = savedFields[i].set(millis, resetFields);\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}