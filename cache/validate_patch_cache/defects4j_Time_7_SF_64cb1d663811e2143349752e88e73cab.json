{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    DateTimeParser parser = requireParser();\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    DateTimeZone zone = chrono.getZone();\n    int[] parsed = new int[3];\n    position = parser.parseInto(parsed, text, position);\n    if (position < 0) {\n        position = ~position;\n    } else if (DateTimeUtils.isContiguous(parsed)) {\n        try {\n            instantMillis = chrono.getDateTimeMillis(parsed[0],parsed[1],parsed[2],0);\n        } catch (IllegalArgumentException ex) {\n            // ignore, try parsing some more\n            position = ~position;\n        }\n    } else {\n        // reset the chrono to null to determine if setting from bucket is OK\n        chrono = null;\n        zone = null;\n    }\n    if (position >= 0) {\n        if (iOffsetParsed && parsed[6] != null) {\n            zone = DateTimeZone.forOffsetMillis(parsed[6]);\n        } else if (parsed[7] != null) {\n            zone = DateTimeZone.forID(parsed[7]);\n        }\n        if (chrono == null) {\n            chrono = selectChronology(selectCustomChronology(\n                    chrono, zone, parsed[0], parsed[1], parsed[2]));\n        } else if (zone != null) {\n            chrono = chrono.withZone(zone);\n        }\n        instant.setChronology(chrono);\n        instant.setZoneRetainFields(zone);\n        instant.setMillis(instantMillis);\n    }\n    return position;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..559fd71d 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,48 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+    DateTimeParser parser = requireParser();\n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    DateTimeZone zone = chrono.getZone();\n+    int[] parsed = new int[3];\n+    position = parser.parseInto(parsed, text, position);\n+    if (position < 0) {\n+        position = ~position;\n+    } else if (DateTimeUtils.isContiguous(parsed)) {\n+        try {\n+            instantMillis = chrono.getDateTimeMillis(parsed[0],parsed[1],parsed[2],0);\n+        } catch (IllegalArgumentException ex) {\n+            // ignore, try parsing some more\n+            position = ~position;\n         }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+    } else {\n+        // reset the chrono to null to determine if setting from bucket is OK\n+        chrono = null;\n+        zone = null;\n+    }\n+    if (position >= 0) {\n+        if (iOffsetParsed && parsed[6] != null) {\n+            zone = DateTimeZone.forOffsetMillis(parsed[6]);\n+        } else if (parsed[7] != null) {\n+            zone = DateTimeZone.forID(parsed[7]);\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+        if (chrono == null) {\n+            chrono = selectChronology(selectCustomChronology(\n+                    chrono, zone, parsed[0], parsed[1], parsed[2]));\n+        } else if (zone != null) {\n+            chrono = chrono.withZone(zone);\n         }\n-        return newPos;\n+        instant.setChronology(chrono);\n+        instant.setZoneRetainFields(zone);\n+        instant.setMillis(instantMillis);\n     }\n+    return position;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: incompatible types: int[] cannot be converted to DateTimeParserBucket",
    "test_result": "ERROR"
}