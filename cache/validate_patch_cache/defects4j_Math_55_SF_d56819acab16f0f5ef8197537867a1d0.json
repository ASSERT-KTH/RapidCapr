{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    final double eps = 1e-20;\n\n    // Get the norms of the two vectors\n    final double n1 = v1.getNorm();\n    final double n2 = v2.getNorm();\n\n    // Rescale both vectors so their norms are approximately 1\n    final Vector3D u1 = v1.scalarMultiply(1.0 / n1);\n    final Vector3D u2 = v2.scalarMultiply(1.0 / n2);\n\n    // Choose rho to get a good balance between cancellation error and floating point overflow\n    double rho = FastMath.ulp(n1) / n2;\n    if (rho < 0.015625) {\n        rho = 0.015625;\n    } else if (rho > 0.75) {\n        rho = 0.75;\n    }\n\n    // Compute v3 = v1 - rho v2 with Kahan summation algorithm\n    final double dotProduct = Vector3D.dotProduct(v1, v2);\n    final double reduction = rho * dotProduct / n2;\n    double b = v1.getX() - reduction * v2.getX();\n    double q = 0.0;\n    double w = b;\n    double k = 0.0;\n    final double rx = v1.getY() - reduction * v2.getY();\n    final double ry = v1.getZ() - reduction * v2.getZ();\n    if (FastMath.abs(b) > FastMath.abs(rx)) {\n        q = rx / b;\n        w = FastMath.sqrt(1.0 + q * q);\n        k = 1.0 / (w * b - rx);\n    }\n    final double c = (reduction - k * ry) / w;\n    final double d = -c * q;\n\n    // Compute cross product from v3 and v2 instead of v1 and v2\n    return new Vector3D(v2.getY() * c - v2.getZ() * d,\n                        v2.getZ() * b - v2.getX() * c,\n                        v2.getX() * d - v2.getY() * b);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..123f3e61b 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,48 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n+    final double eps = 1e-20;\n \n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n+    // Get the norms of the two vectors\n+    final double n1 = v1.getNorm();\n+    final double n2 = v2.getNorm();\n \n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    // Rescale both vectors so their norms are approximately 1\n+    final Vector3D u1 = v1.scalarMultiply(1.0 / n1);\n+    final Vector3D u2 = v2.scalarMultiply(1.0 / n2);\n \n+    // Choose rho to get a good balance between cancellation error and floating point overflow\n+    double rho = FastMath.ulp(n1) / n2;\n+    if (rho < 0.015625) {\n+        rho = 0.015625;\n+    } else if (rho > 0.75) {\n+        rho = 0.75;\n+    }\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    // Compute v3 = v1 - rho v2 with Kahan summation algorithm\n+    final double dotProduct = Vector3D.dotProduct(v1, v2);\n+    final double reduction = rho * dotProduct / n2;\n+    double b = v1.getX() - reduction * v2.getX();\n+    double q = 0.0;\n+    double w = b;\n+    double k = 0.0;\n+    final double rx = v1.getY() - reduction * v2.getY();\n+    final double ry = v1.getZ() - reduction * v2.getZ();\n+    if (FastMath.abs(b) > FastMath.abs(rx)) {\n+        q = rx / b;\n+        w = FastMath.sqrt(1.0 + q * q);\n+        k = 1.0 / (w * b - rx);\n+    }\n+    final double c = (reduction - k * ry) / w;\n+    final double d = -c * q;\n \n-  }\n+    // Compute cross product from v3 and v2 instead of v1 and v2\n+    return new Vector3D(v2.getY() * c - v2.getZ() * d,\n+                        v2.getZ() * b - v2.getX() * c,\n+                        v2.getX() * d - v2.getY() * b);\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<0.4179773079365488>",
    "test_result": "FAIL"
}