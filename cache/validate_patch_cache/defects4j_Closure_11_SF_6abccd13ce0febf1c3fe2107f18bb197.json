{
    "patch": "public String getProp(String name) {\n   StringBuilder value = new StringBuilder();\n   try (Reader reader = new InputStreamReader(getClass().getResourceAsStream(\"/config.properties\"), StandardCharsets.UTF_8)) {\n       Properties props = new Properties();\n       props.load(reader);\n       value.append(props.getProperty(name));\n   } catch (IOException e) {\n       System.err.println(\"Unable to read from properties file.\");\n   }\n   return value.toString().trim();\n}\n\npublic void testGetprop4() {\n   String warningRegex = \".*Unable to read from properties file..*\";\n   ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n   System.setErr(new PrintStream(outContent));\n   getProp(\"nonexistent_property\");\n   String[] warnings = outContent.toString().split(\"\\\\r?\\\\n\");\n   assertTrue(\"expected a warning\", warnings.length > 0);\n   assertTrue(\"warning message is incorrect\", warnings[0].matches(warningRegex));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..84cae95b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getProp(String name) {\n+   StringBuilder value = new StringBuilder();\n+   try (Reader reader = new InputStreamReader(getClass().getResourceAsStream(\"/config.properties\"), StandardCharsets.UTF_8)) {\n+       Properties props = new Properties();\n+       props.load(reader);\n+       value.append(props.getProperty(name));\n+   } catch (IOException e) {\n+       System.err.println(\"Unable to read from properties file.\");\n+   }\n+   return value.toString().trim();\n+}\n+\n+public void testGetprop4() {\n+   String warningRegex = \".*Unable to read from properties file..*\";\n+   ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+   System.setErr(new PrintStream(outContent));\n+   getProp(\"nonexistent_property\");\n+   String[] warnings = outContent.toString().split(\"\\\\r?\\\\n\");\n+   assertTrue(\"expected a warning\", warnings.length > 0);\n+   assertTrue(\"warning message is incorrect\", warnings[0].matches(warningRegex));\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: try-with-resources is not supported in -source 1.6",
    "test_result": "ERROR"
}