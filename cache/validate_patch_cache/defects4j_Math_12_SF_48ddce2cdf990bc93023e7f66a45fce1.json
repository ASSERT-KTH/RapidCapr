{
    "patch": "import java.util.*;\n\npublic class GenotypeProbabilities {\n    public static double[] distributionClone(double[] genotypeProbabilities, int M, int D, int N) {\n        double[][] dp = new double[D + 1][1 << M];\n        dp[0][0] = 1;\n\n        for (int i = 1; i <= D; i++) {\n            for (int j = 0; j < 1 << M; j++) {\n                int count = populationCount(j);\n                double stateProb = getProb(j, genotypeProbabilities);\n\n                for (int k = 0; k <= count && k <= i; k++) {\n                    double parentProb = choose(count, k) * choose(M - count, i - k) / choose(M, i) * dp[i - k][j];\n                    dp[i][j] += parentProb * stateProb;\n                }\n            }\n        }\n\n        double[] result = new double[N + 1];\n\n        for (int i = 0; i < 1 << M; i++) {\n            int count = populationCount(i);\n            result[count] += dp[D][i];\n        }\n\n        for (int i = 0; i <= N; i++) {\n            result[i] /= Math.pow(M, D);\n        }\n\n        return result;\n    }\n\n    private static int populationCount(int i) {\n        int result = 0;\n\n        while (i > 0) {\n            result += i % 2;\n            i /= 2;\n        }\n\n        return result;\n    }\n\n    private static double getProb(int j, double[] p) {\n        double prob = 1;\n        for (int k = 0; k < p.length; k++) {\n            if ((j & (1 << k)) != 0) {\n                prob *= p[k];\n            } else {\n                prob *= 1 - p[k];\n            }\n        }\n        return prob;\n    }\n\n    private static double choose(int n, int k) {\n        double result = 1;\n\n        for (int i = 1; i <= k; i++) {\n            result *= (n - k + i) / (double) i;\n        }\n\n        return result;\n    }\n}",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}