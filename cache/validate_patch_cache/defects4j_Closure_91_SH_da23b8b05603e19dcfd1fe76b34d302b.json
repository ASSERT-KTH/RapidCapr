{
    "patch": "      if (parent != null) {\n        Token parentType = parent.getType();\n        if (parentType == Token.ASSIGN) {\n          Node lhs = parent.getFirstChild();\n          Node rhs = lhs.getNext();\n\n          if (n == lhs) {\n            // Always traverse the left side of the assignment. To handle\n            // nested assignments properly (e.g., (a = this).property = c;),\n            // assignLhsChild should not be overridden.\n            if (assignLhsChild == null) {\n              assignLhsChild = lhs;\n            }\n          } else {\n            // Only traverse the right side if it's not an assignment to a prototype\n            // property or subproperty.\n            if (NodeUtil.isGet(lhs)) {\n              if (lhs.getType() == Token.GETPROP &&\n                  lhs.getLastChild().getString().equals(\"prototype\")) {\n                return false;\n              }\n              Node llhs = lhs.getFirstChild();\n              if (llhs.getType() == Token.GETPROP &&\n                  llhs.getLastChild().getString().equals(\"prototype\")) {\n                return false;\n              }\n            }\n            if (n != rhs) {\n              // Only traverse the right side of the assignment once.\n              return false;\n            }\n          }\n        } else if (parentType == Token.OBJECTLIT ||\n            parentType == Token.CLASS_MEMBERS ||\n            parentType == Token.CLASS || \n            parentType == Token.INTERFACE_MEMBERS) {\n          // Don't traverse function expressions in object or class literals.\n          if (NodeUtil.isFunctionExpression(n)) {\n            return false;\n          }\n        } else if (parentType == Token.SWITCH ||\n            parentType == Token.CATCH ||\n            parentType == Token.EXPR_RESULT ||\n            parentType == Token.RETURN) {\n          // Don't traverse function declarations and expressions in certain\n          // control structures and expressions.\n          if (NodeUtil.isFunctionDeclaration(n)) {\n            return false;\n          }\n          if (NodeUtil.isFunctionExpression(n)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..ceb8fb98 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,62 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null) {\n+        Token parentType = parent.getType();\n+        if (parentType == Token.ASSIGN) {\n+          Node lhs = parent.getFirstChild();\n+          Node rhs = lhs.getNext();\n+\n+          if (n == lhs) {\n+            // Always traverse the left side of the assignment. To handle\n+            // nested assignments properly (e.g., (a = this).property = c;),\n+            // assignLhsChild should not be overridden.\n+            if (assignLhsChild == null) {\n+              assignLhsChild = lhs;\n+            }\n+          } else {\n+            // Only traverse the right side if it's not an assignment to a prototype\n+            // property or subproperty.\n+            if (NodeUtil.isGet(lhs)) {\n+              if (lhs.getType() == Token.GETPROP &&\n+                  lhs.getLastChild().getString().equals(\"prototype\")) {\n+                return false;\n+              }\n+              Node llhs = lhs.getFirstChild();\n+              if (llhs.getType() == Token.GETPROP &&\n+                  llhs.getLastChild().getString().equals(\"prototype\")) {\n+                return false;\n+              }\n+            }\n+            if (n != rhs) {\n+              // Only traverse the right side of the assignment once.\n+              return false;\n+            }\n+          }\n+        } else if (parentType == Token.OBJECTLIT ||\n+            parentType == Token.CLASS_MEMBERS ||\n+            parentType == Token.CLASS || \n+            parentType == Token.INTERFACE_MEMBERS) {\n+          // Don't traverse function expressions in object or class literals.\n+          if (NodeUtil.isFunctionExpression(n)) {\n+            return false;\n+          }\n+        } else if (parentType == Token.SWITCH ||\n+            parentType == Token.CATCH ||\n+            parentType == Token.EXPR_RESULT ||\n+            parentType == Token.RETURN) {\n+          // Don't traverse function declarations and expressions in certain\n+          // control structures and expressions.\n+          if (NodeUtil.isFunctionDeclaration(n)) {\n+            return false;\n+          }\n+          if (NodeUtil.isFunctionExpression(n)) {\n+            return false;\n+          }\n+        }\n+      }\n+      return true;\n+    }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}