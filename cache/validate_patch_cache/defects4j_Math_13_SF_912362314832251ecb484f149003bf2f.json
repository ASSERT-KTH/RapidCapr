{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    EigenDecomposition dec = new EigenDecomposition(m);\n    double[] realEigenvalues = dec.getRealEigenvalues();\n    double maxEigenvalue = Double.MIN_VALUE;\n    for (double eigenvalue : realEigenvalues) {\n        if (eigenvalue > maxEigenvalue) {\n            maxEigenvalue = eigenvalue;\n        }\n    }\n    double epsilon = maxEigenvalue * 1e-6; // adjust this constant based on your application\n    int rank = (int) Arrays.stream(realEigenvalues).filter(x -> x > epsilon).count();\n    if (rank == 0) {\n        throw new IllegalArgumentException(\"Matrix must be positive definite\");\n    }\n    RealMatrix v = dec.getV().getSubMatrix(0, m.getRowDimension() - 1, 0, rank - 1);\n    RealMatrix d = dec.getD().getSubMatrix(0, rank - 1, 0, rank - 1);\n    for (int i = 0; i < rank; i++) {\n        d.setEntry(i, i, Math.sqrt(d.getEntry(i, i)));\n    }\n    return v.multiply(d).multiply(v.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..789212d2a 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,25 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    EigenDecomposition dec = new EigenDecomposition(m);\n+    double[] realEigenvalues = dec.getRealEigenvalues();\n+    double maxEigenvalue = Double.MIN_VALUE;\n+    for (double eigenvalue : realEigenvalues) {\n+        if (eigenvalue > maxEigenvalue) {\n+            maxEigenvalue = eigenvalue;\n+        }\n+    }\n+    double epsilon = maxEigenvalue * 1e-6; // adjust this constant based on your application\n+    int rank = (int) Arrays.stream(realEigenvalues).filter(x -> x > epsilon).count();\n+    if (rank == 0) {\n+        throw new IllegalArgumentException(\"Matrix must be positive definite\");\n     }\n+    RealMatrix v = dec.getV().getSubMatrix(0, m.getRowDimension() - 1, 0, rank - 1);\n+    RealMatrix d = dec.getD().getSubMatrix(0, rank - 1, 0, rank - 1);\n+    for (int i = 0; i < rank; i++) {\n+        d.setEntry(i, i, Math.sqrt(d.getEntry(i, i)));\n+    }\n+    return v.multiply(d).multiply(v.transpose());\n+}\n }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}