{
    "patch": "} catch (IllegalFieldValueException e) {\n    boolean isDateField = false;\n    for (SavedField savedField : savedFields) {\n        if (DateTimeFieldType.year().equals(savedField.iField.getType())) {\n            isDateField = true;\n            break;\n        }\n    }\n    if (!isDateField || !DateTimeFormatterBuilder.hasTimeFormatter(getFormatter())) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n    int year = getTwoDigitYear(getDefaultYear());\n    for (int i = 0; i < count; i++) {\n        DateTimeField field = savedFields[i].iField;\n        if (DateTimeFieldType.year().equals(field.getType()) && field.getValue() < 100) {\n            savedFields[i].iField = field.getFormatter().withLocale(getLocale()).withDefaultYear(getDefaultYear()).parseDateTime(\"2000-01-01\").getField();\n        }\n    }\n    // sort fields again since changed\n    try {\n        sort(savedFields, count);\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException ex) {\n        if (text != null) {\n            ex.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw ex;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..af7570cc 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,40 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+} catch (IllegalFieldValueException e) {\n+    boolean isDateField = false;\n+    for (SavedField savedField : savedFields) {\n+        if (DateTimeFieldType.year().equals(savedField.iField.getType())) {\n+            isDateField = true;\n+            break;\n+        }\n+    }\n+    if (!isDateField || !DateTimeFormatterBuilder.hasTimeFormatter(getFormatter())) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+    int year = getTwoDigitYear(getDefaultYear());\n+    for (int i = 0; i < count; i++) {\n+        DateTimeField field = savedFields[i].iField;\n+        if (DateTimeFieldType.year().equals(field.getType()) && field.getValue() < 100) {\n+            savedFields[i].iField = field.getFormatter().withLocale(getLocale()).withDefaultYear(getDefaultYear()).parseDateTime(\"2000-01-01\").getField();\n+        }\n+    }\n+    // sort fields again since changed\n+    try {\n+        sort(savedFields, count);\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n+        }\n+    } catch (IllegalFieldValueException ex) {\n+        if (text != null) {\n+            ex.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw ex;\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}