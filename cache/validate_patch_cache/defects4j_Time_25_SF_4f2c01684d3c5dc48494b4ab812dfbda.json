{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        int[] i = new int[2];\n        long instantBefore;\n        long instantAfter;\n        i = getOffsetInfo(instantLocal);\n        instantBefore = i[0];\n        instantAfter = i[1];\n        if (instantBefore == instantLocal) {\n            return i[2];\n        }\n        if (instantAfter == instantLocal) {\n            return i[3];\n        }\n        if (instantBefore < instantLocal && instantLocal < instantAfter) {\n            return i[2];\n        }\n        if (instantAfter < instantLocal && instantLocal < instantBefore) {\n            return i[3];\n        }\n\n        int offsetLocal = getOffset(instantLocal);\n        long nextLocal = nextTransition(instantLocal - offsetLocal);\n        if (nextLocal == instantBefore || nextLocal == instantAfter) {\n            return offsetLocal;\n        }\n        long nextAdjusted = nextTransition(instantAdjusted(instantLocal, offsetLocal));\n        if (nextAdjusted == instantBefore || nextAdjusted == instantAfter) {\n            return offsetLocal;\n        }\n        if (nextLocal == nextAdjusted) {\n            return offsetLocal;\n        }\n        return getOffset(nextLocal);\n    }\n\n    private long instantAdjusted(long instant, int offset) {\n        long instantAdjusted = instant + offset;\n        if ((instant ^ instantAdjusted) < 0 && (instant ^ offset) >= 0) {\n            throw new ArithmeticException(\"Adding time zone offset caused overflow\");\n        }\n        return instantAdjusted;\n    }\n\n    private int[] getOffsetInfo(long instant) {\n        int[] ret = new int[4];\n        long[] trans = getTransition(instant, nextTransition(instant));\n        ret[0] = trans[0];\n        ret[1] = trans[1];\n        ret[2] = wallOffsets[trans[2]];\n        ret[3] = wallOffsets[trans[3]];\n        return ret;\n    }\n\n    private long[] getTransition(long instant, long next) {\n        long[] trans = new long[4];\n        long last = Long.MIN_VALUE;\n        for (Rule rule : iRules) {\n            long[] res = rule.nextTransition(instant, iStandardOffset, last);\n            if (res == null || res[0] >= next) {\n                break;\n            }\n            // avoid infinite loop if nextTransition does not return distinct results\n            if (res[0] == instant) {\n                throw new IllegalArgumentException(\"Transition loop\");\n            }\n            trans[0] = res[0];\n            trans[1] = res[1];\n            trans[2] = last;\n            trans[3] = res[2];\n            last = res[2];\n        }\n        if (trans[0] == next) {\n            return trans;\n        }\n        return new long[] {next, iStandardOffset, iStandardOffset, iStandardOffset};\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..42e45bbe 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,27 +877,80 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+        int[] i = new int[2];\n+        long instantBefore;\n+        long instantAfter;\n+        i = getOffsetInfo(instantLocal);\n+        instantBefore = i[0];\n+        instantAfter = i[1];\n+        if (instantBefore == instantLocal) {\n+            return i[2];\n+        }\n+        if (instantAfter == instantLocal) {\n+            return i[3];\n+        }\n+        if (instantBefore < instantLocal && instantLocal < instantAfter) {\n+            return i[2];\n+        }\n+        if (instantAfter < instantLocal && instantLocal < instantBefore) {\n+            return i[3];\n+        }\n+\n+        int offsetLocal = getOffset(instantLocal);\n+        long nextLocal = nextTransition(instantLocal - offsetLocal);\n+        if (nextLocal == instantBefore || nextLocal == instantAfter) {\n+            return offsetLocal;\n+        }\n+        long nextAdjusted = nextTransition(instantAdjusted(instantLocal, offsetLocal));\n+        if (nextAdjusted == instantBefore || nextAdjusted == instantAfter) {\n+            return offsetLocal;\n+        }\n+        if (nextLocal == nextAdjusted) {\n+            return offsetLocal;\n+        }\n+        return getOffset(nextLocal);\n+    }\n+\n+    private long instantAdjusted(long instant, int offset) {\n+        long instantAdjusted = instant + offset;\n+        if ((instant ^ instantAdjusted) < 0 && (instant ^ offset) >= 0) {\n+            throw new ArithmeticException(\"Adding time zone offset caused overflow\");\n+        }\n+        return instantAdjusted;\n+    }\n+\n+    private int[] getOffsetInfo(long instant) {\n+        int[] ret = new int[4];\n+        long[] trans = getTransition(instant, nextTransition(instant));\n+        ret[0] = trans[0];\n+        ret[1] = trans[1];\n+        ret[2] = wallOffsets[trans[2]];\n+        ret[3] = wallOffsets[trans[3]];\n+        return ret;\n+    }\n+\n+    private long[] getTransition(long instant, long next) {\n+        long[] trans = new long[4];\n+        long last = Long.MIN_VALUE;\n+        for (Rule rule : iRules) {\n+            long[] res = rule.nextTransition(instant, iStandardOffset, last);\n+            if (res == null || res[0] >= next) {\n+                break;\n+            }\n+            // avoid infinite loop if nextTransition does not return distinct results\n+            if (res[0] == instant) {\n+                throw new IllegalArgumentException(\"Transition loop\");\n             }\n+            trans[0] = res[0];\n+            trans[1] = res[1];\n+            trans[2] = last;\n+            trans[3] = res[2];\n+            last = res[2];\n+        }\n+        if (trans[0] == next) {\n+            return trans;\n         }\n-        return offsetAdjusted;\n+        return new long[] {next, iStandardOffset, iStandardOffset, iStandardOffset};\n     }\n \n     /**",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}