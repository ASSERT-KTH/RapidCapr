{
    "patch": "public double toDouble() {\n    if (isInfinite()) {\n        if (lessThan(getZero())) {\n            return Double.NEGATIVE_INFINITY;\n        } else {\n            return Double.POSITIVE_INFINITY;\n        }\n    }\n\n    if (isNaN()) {\n        return Double.NaN;\n    }\n\n    Dfp y = newInstance(this);\n\n    boolean negate = false;\n    if (lessThan(getZero())) {\n        y = y.negate();\n        negate = true;\n    }\n\n    int exponent = 0;\n    if (y.greaterThan(getOne())) {\n        while (y.greaterThan(getTen())) {\n            y = y.divide(getTen());\n            exponent++;\n        }\n        exponent++;\n    } else if (y.lessThan(getOne())) {\n        while (y.lessThan(getOne())) {\n            y = y.multiply(getTen());\n            exponent--;\n        }\n    }\n\n    y = y.subtract(getOne());\n\n    long mantissa;\n    if (exponent > -1023) {\n        mantissa = y.multiply(newInstance(0x8000000000000L)).longValue();\n        mantissa |= (1L << 52);\n        exponent--;\n    } else {\n        exponent = -1023;\n        mantissa = y.multiply(DfpMath.pow(2, 1074)).longValue();\n    }\n\n    if (mantissa == 0) {\n        return 0.0;\n    }\n\n    if (mantissa == (1L << 53)) {\n        mantissa = 0L;\n        exponent++;\n    }\n\n    long bits = ((negate ? 1L : 0L) << 63) | ((exponent + 1023L) << 52) | (mantissa & 0xFFFFFFFFFFFFFL);\n\n    return Double.longBitsToDouble(bits);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/dfp/Dfp.java b/src/main/java/org/apache/commons/math/dfp/Dfp.java\nindex 73f1ea3e8..403f781fa 100644\n--- a/src/main/java/org/apache/commons/math/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math/dfp/Dfp.java\n@@ -253,88 +253,66 @@ public class Dfp implements FieldElement<Dfp> {\n      * @param field field to which this instance belongs\n      * @param x value to convert to an instance\n      */\n-    protected Dfp(final DfpField field, double x) {\n+public double toDouble() {\n+    if (isInfinite()) {\n+        if (lessThan(getZero())) {\n+            return Double.NEGATIVE_INFINITY;\n+        } else {\n+            return Double.POSITIVE_INFINITY;\n+        }\n+    }\n \n-        // initialize as if 0\n-        mant = new int[field.getRadixDigits()];\n-        sign = 1;\n-        exp = 0;\n-        nans = FINITE;\n-        this.field = field;\n+    if (isNaN()) {\n+        return Double.NaN;\n+    }\n \n-        long bits = Double.doubleToLongBits(x);\n-        long mantissa = bits & 0x000fffffffffffffL;\n-        int exponent = (int) ((bits & 0x7ff0000000000000L) >> 52) - 1023;\n+    Dfp y = newInstance(this);\n \n-        if (exponent == -1023) {\n-            // Zero or sub-normal\n-            if (x == 0) {\n-                // make sure 0 has the right sign\n-                return;\n-            }\n+    boolean negate = false;\n+    if (lessThan(getZero())) {\n+        y = y.negate();\n+        negate = true;\n+    }\n \n+    int exponent = 0;\n+    if (y.greaterThan(getOne())) {\n+        while (y.greaterThan(getTen())) {\n+            y = y.divide(getTen());\n             exponent++;\n-\n-            // Normalize the subnormal number\n-            while ( (mantissa & 0x0010000000000000L) == 0) {\n-                exponent--;\n-                mantissa <<= 1;\n-            }\n-            mantissa &= 0x000fffffffffffffL;\n         }\n-\n-        if (exponent == 1024) {\n-            // infinity or NAN\n-            if (x != x) {\n-                sign = (byte) 1;\n-                nans = QNAN;\n-            } else if (x < 0) {\n-                sign = (byte) -1;\n-                nans = INFINITE;\n-            } else {\n-                sign = (byte) 1;\n-                nans = INFINITE;\n-            }\n-            return;\n+        exponent++;\n+    } else if (y.lessThan(getOne())) {\n+        while (y.lessThan(getOne())) {\n+            y = y.multiply(getTen());\n+            exponent--;\n         }\n+    }\n \n-        Dfp xdfp = new Dfp(field, mantissa);\n-        xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne());  // Divide by 2^52, then add one\n-        xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent));\n+    y = y.subtract(getOne());\n \n-        if ((bits & 0x8000000000000000L) != 0) {\n-            xdfp = xdfp.negate();\n-        }\n-\n-        System.arraycopy(xdfp.mant, 0, mant, 0, mant.length);\n-        sign = xdfp.sign;\n-        exp  = xdfp.exp;\n-        nans = xdfp.nans;\n+    long mantissa;\n+    if (exponent > -1023) {\n+        mantissa = y.multiply(newInstance(0x8000000000000L)).longValue();\n+        mantissa |= (1L << 52);\n+        exponent--;\n+    } else {\n+        exponent = -1023;\n+        mantissa = y.multiply(DfpMath.pow(2, 1074)).longValue();\n+    }\n \n+    if (mantissa == 0) {\n+        return 0.0;\n     }\n \n-    /** Copy constructor.\n-     * @param d instance to copy\n-     */\n-    public Dfp(final Dfp d) {\n-        mant  = d.mant.clone();\n-        sign  = d.sign;\n-        exp   = d.exp;\n-        nans  = d.nans;\n-        field = d.field;\n+    if (mantissa == (1L << 53)) {\n+        mantissa = 0L;\n+        exponent++;\n     }\n \n-    /** Create an instance from a String representation.\n-     * @param field field to which this instance belongs\n-     * @param s string representation of the instance\n-     */\n-    protected Dfp(final DfpField field, final String s) {\n+    long bits = ((negate ? 1L : 0L) << 63) | ((exponent + 1023L) << 52) | (mantissa & 0xFFFFFFFFFFFFFL);\n \n-        // initialize as if 0\n-        mant = new int[field.getRadixDigits()];\n-        sign = 1;\n-        exp = 0;\n-        nans = FINITE;\n+    return Double.longBitsToDouble(bits);\n+}\n         this.field = field;\n \n         boolean decimalFound = false;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}