{
    "patch": "Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    int numArgs = argList.getChildCount();\n    if (numArgs == 0) {\n      return;\n    }\n\n    // Check references to all variables declared in the argument list.\n    // If we see a reference, we need to stop removing arguments.\n    Map<Var, Boolean> referencedArgs = new HashMap<>(numArgs);\n    for (int i = 0; i < numArgs; i++) {\n      Node argNode = argList.getChildAtIndex(i);\n      Var argVar = fnScope.getVar(argNode.getString());\n      referencedArgs.put(argVar, false);\n    }\n\n    ReferenceCollector callback = new ReferenceCollector(referencedArgs);\n    NodeTraversal.traverse(compiler, function.getLastChild(), callback);\n\n    boolean removeParams = true;\n    for (Boolean isReferenced : referencedArgs.values()) {\n      if (!isReferenced) {\n        continue;\n      }\n\n      removeParams = false;\n      break;\n    }\n\n    // Strip unreferenced args off the end of the function declaration.\n    if (removeParams) {\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (referencedArgs.get(var) == null) {\n          // This happens if there are no references to the variable that the\n          // parameter is assigned to, skip removing the parameter.\n          break;\n        }\n\n        if (!referencedArgs.get(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..93e88af9 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,62 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    int numArgs = argList.getChildCount();\n+    if (numArgs == 0) {\n+      return;\n+    }\n+\n+    // Check references to all variables declared in the argument list.\n+    // If we see a reference, we need to stop removing arguments.\n+    Map<Var, Boolean> referencedArgs = new HashMap<>(numArgs);\n+    for (int i = 0; i < numArgs; i++) {\n+      Node argNode = argList.getChildAtIndex(i);\n+      Var argVar = fnScope.getVar(argNode.getString());\n+      referencedArgs.put(argVar, false);\n+    }\n+\n+    ReferenceCollector callback = new ReferenceCollector(referencedArgs);\n+    NodeTraversal.traverse(compiler, function.getLastChild(), callback);\n+\n+    boolean removeParams = true;\n+    for (Boolean isReferenced : referencedArgs.values()) {\n+      if (!isReferenced) {\n+        continue;\n+      }\n+\n+      removeParams = false;\n+      break;\n+    }\n+\n+    // Strip unreferenced args off the end of the function declaration.\n+    if (removeParams) {\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (referencedArgs.get(var) == null) {\n+          // This happens if there are no references to the variable that the\n+          // parameter is assigned to, skip removing the parameter.\n+          break;\n+        }\n+\n+        if (!referencedArgs.get(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}