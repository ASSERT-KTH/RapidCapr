{
    "patch": "  boolean isAssignedOnceInLifetime() {\n      Reference ref = getOneAndOnlyAssignment();\n      if (ref == null) {\n        return false;\n      }\n\n      // Make sure this assignment is not in a loop.\n      for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          break;\n        } else if (block.isLoop) {\n          return false;\n        }\n      }\n\n      boolean hasMultipleAssignments = false;\n      for (int i = 0; i < references.size(); i++) {\n        if (!references.get(i).isDeclarationOrSimpleAssignmentToName()) {\n          continue;\n        }\n        if (references.get(i) == ref) {\n          continue;\n        }\n        for (BasicBlock block = references.get(i).getBasicBlock();\n             block != null;\n             block = block.getParent()) {\n          if (block.isFunction) {\n            break;\n          } else if (block.isLoop) {\n            hasMultipleAssignments = true;\n            break;\n          }\n        }\n        if (hasMultipleAssignments) {\n          break;\n        }\n      }\n\n      return !hasMultipleAssignments;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..dab0bd79 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,45 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+  boolean isAssignedOnceInLifetime() {\n+      Reference ref = getOneAndOnlyAssignment();\n+      if (ref == null) {\n+        return false;\n+      }\n+\n+      // Make sure this assignment is not in a loop.\n+      for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoop) {\n+          return false;\n+        }\n+      }\n+\n+      boolean hasMultipleAssignments = false;\n+      for (int i = 0; i < references.size(); i++) {\n+        if (!references.get(i).isDeclarationOrSimpleAssignmentToName()) {\n+          continue;\n+        }\n+        if (references.get(i) == ref) {\n+          continue;\n+        }\n+        for (BasicBlock block = references.get(i).getBasicBlock();\n+             block != null;\n+             block = block.getParent()) {\n+          if (block.isFunction) {\n+            break;\n+          } else if (block.isLoop) {\n+            hasMultipleAssignments = true;\n+            break;\n+          }\n+        }\n+        if (hasMultipleAssignments) {\n+          break;\n+        }\n+      }\n+\n+      return !hasMultipleAssignments;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}