{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.stat.inference.TestUtils;\n\npublic class MyClass {\n    \n    public static void main(String[] args) {\n        double x = 1.0;\n        double a = 0.5;\n        double expected = 0.632120558828558;\n        double actualP = Gamma.regularizedGammaP(a, x);\n        TestUtils.assertEquals(expected, actualP, 10e-15);\n    }\n    \n    public static double regularizedGammaP(double a, double x) {\n        if (x < 0.0 || a <= 0.0) {\n            throw new IllegalArgumentException(\"Invalid arguments\");\n        }\n\n        if (x == 0.0) {\n            return 0.0;\n        }\n\n        if (x >= a + 1.0) {\n            return 1.0 - regularizedGammaQ(a, x);\n        }\n\n        double sum = 1.0 / a;\n        double term = sum;\n\n        for (int n = 1; n <= 1000; n++) {\n            term *= x / (a + n);\n            sum += term;\n\n            if (Math.abs(term / sum) < 1.0E-15) {\n                return sum * Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a));\n            }\n        }\n\n        throw new RuntimeException(\"Maximum number of iterations exceeded\");\n    }\n\n    public static double regularizedGammaQ(double a, double x) {\n        return 1.0 - regularizedGammaP(a, x);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..876a06d53 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,51 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.stat.inference.TestUtils;\n+\n+public class MyClass {\n+    \n+    public static void main(String[] args) {\n+        double x = 1.0;\n+        double a = 0.5;\n+        double expected = 0.632120558828558;\n+        double actualP = Gamma.regularizedGammaP(a, x);\n+        TestUtils.assertEquals(expected, actualP, 10e-15);\n+    }\n+    \n+    public static double regularizedGammaP(double a, double x) {\n+        if (x < 0.0 || a <= 0.0) {\n+            throw new IllegalArgumentException(\"Invalid arguments\");\n+        }\n+\n+        if (x == 0.0) {\n+            return 0.0;\n+        }\n+\n+        if (x >= a + 1.0) {\n+            return 1.0 - regularizedGammaQ(a, x);\n+        }\n+\n+        double sum = 1.0 / a;\n+        double term = sum;\n+\n+        for (int n = 1; n <= 1000; n++) {\n+            term *= x / (a + n);\n+            sum += term;\n+\n+            if (Math.abs(term / sum) < 1.0E-15) {\n+                return sum * Math.exp(-x + a * Math.log(x) - Gamma.logGamma(a));\n+            }\n+        }\n+\n+        throw new RuntimeException(\"Maximum number of iterations exceeded\");\n+    }\n+\n+    public static double regularizedGammaQ(double a, double x) {\n+        return 1.0 - regularizedGammaP(a, x);\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}