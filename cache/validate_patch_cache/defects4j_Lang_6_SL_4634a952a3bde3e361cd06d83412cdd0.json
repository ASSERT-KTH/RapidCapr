{
    "patch": "if (Character.isHighSurrogate(input.charAt(pos)) && pos + 1 < len && Character.isLowSurrogate(input.charAt(pos+1))) {\n    consumed = translate(input, pos, out, 2);\n} else {\n    consumed = translate(input, pos, out, 1);\n}\npos += consumed;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..525ce015 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,12 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+if (Character.isHighSurrogate(input.charAt(pos)) && pos + 1 < len && Character.isLowSurrogate(input.charAt(pos+1))) {\n+    consumed = translate(input, pos, out, 2);\n+} else {\n+    consumed = translate(input, pos, out, 1);\n+}\n+pos += consumed;\n             }\n         }\n     }",
    "result_reason": "error: no suitable method found for translate(CharSequence,int,Writer,int)",
    "test_result": "ERROR"
}