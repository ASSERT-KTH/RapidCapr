{
    "patch": "public String getprop(String key, String defaultValue) {\n    String[] command = {\"getprop\", key};\n    String output = \"\";\n    try {\n        Process process = Runtime.getRuntime().exec(command);\n        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        output = reader.readLine();\n        reader.close();\n    } \n    catch (IOException e) {\n        System.err.println(\"Exception occurred: \"+e.getMessage());\n        e.printStackTrace();\n        return defaultValue;\n    }\n\n    if (output != null) {\n        return output.trim();\n    } \n    else {\n        String message = \"getprop returned null for key '\" + key + \"'\";\n        System.err.println(message);\n        return defaultValue;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..69ddc604 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,30 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+public String getprop(String key, String defaultValue) {\n+    String[] command = {\"getprop\", key};\n+    String output = \"\";\n+    try {\n+        Process process = Runtime.getRuntime().exec(command);\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n+        output = reader.readLine();\n+        reader.close();\n+    } \n+    catch (IOException e) {\n+        System.err.println(\"Exception occurred: \"+e.getMessage());\n+        e.printStackTrace();\n+        return defaultValue;\n+    }\n+\n+    if (output != null) {\n+        return output.trim();\n+    } \n+    else {\n+        String message = \"getprop returned null for key '\" + key + \"'\";\n+        System.err.println(message);\n+        return defaultValue;\n+    }\n+}\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}