{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType.isFunctionType()) {\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        } else if (constructor.isQualifiedName()) {\n          // Handle qualified name constructors\n          QualifiedName qName = constructor.getQualifiedName();\n          JSTypeRegistry registry = compiler.getTypeRegistry();\n          ObjectType objType = registry.getNativeObjectType(OBJECT_TYPE); \n\n          if (objType != null && qName.getRoot().matchesQualifiedName(objType.getDisplayName())) {\n            String propName = qName.getRight().getOriginalName();\n            JSType propType = objType.getPropertyType(propName);\n\n            if (propType != null) {\n              FunctionType functionType = propType.toMaybeFunctionType();\n              if (functionType != null && functionType.isConstructor()) {\n                  type = functionType.getInstanceType();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    n.setJSType(type);\n\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..06482c29 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1036,29 +1036,48 @@ class TypeInference\n \n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n+\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n+\n     if (constructorType != null) {\n       constructorType = constructorType.restrictByNotNullOrUndefined();\n       if (constructorType.isUnknownType()) {\n         type = getNativeType(UNKNOWN_TYPE);\n       } else {\n         FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n+        if (ct == null && constructorType.isFunctionType()) {\n           ct = (FunctionType) constructorType;\n         }\n         if (ct != null && ct.isConstructor()) {\n           type = ct.getInstanceType();\n+        } else if (constructor.isQualifiedName()) {\n+          // Handle qualified name constructors\n+          QualifiedName qName = constructor.getQualifiedName();\n+          JSTypeRegistry registry = compiler.getTypeRegistry();\n+          ObjectType objType = registry.getNativeObjectType(OBJECT_TYPE); \n+\n+          if (objType != null && qName.getRoot().matchesQualifiedName(objType.getDisplayName())) {\n+            String propName = qName.getRight().getOriginalName();\n+            JSType propType = objType.getPropertyType(propName);\n+\n+            if (propType != null) {\n+              FunctionType functionType = propType.toMaybeFunctionType();\n+              if (functionType != null && functionType.isConstructor()) {\n+                  type = functionType.getInstanceType();\n+              }\n+            }\n+          }\n         }\n       }\n     }\n+\n     n.setJSType(type);\n+\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n     }\n+\n     return scope;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}