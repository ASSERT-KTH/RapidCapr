{
    "patch": "          BlockIterator iter = new BlockIterator(ref.getBasicBlock());\n          // iterate through all blocks until reaching the one containing the initialization \n          while(iter.hasNext()) {\n            BasicBlock currentBlock = iter.next();\n            for (int i = 0; i < currentBlock.getStatements().size(); i++) {\n                if (currentBlock.getStatements().get(i) instanceof Node) {\n                  Node node = (Node) currentBlock.getStatements().get(i);\n                  if (node.getType().equals(Token.NAME)) {\n                    if (node.getString().equals(ref.getName())) {\n                      if (isInitializingAssignmentAt(i - 1) || isInitializingDeclarationAt(i - 1)) {\n                        return true;\n                      }\n                    }\n                  }\n                }\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..17e09c11 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,23 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+          BlockIterator iter = new BlockIterator(ref.getBasicBlock());\n+          // iterate through all blocks until reaching the one containing the initialization \n+          while(iter.hasNext()) {\n+            BasicBlock currentBlock = iter.next();\n+            for (int i = 0; i < currentBlock.getStatements().size(); i++) {\n+                if (currentBlock.getStatements().get(i) instanceof Node) {\n+                  Node node = (Node) currentBlock.getStatements().get(i);\n+                  if (node.getType().equals(Token.NAME)) {\n+                    if (node.getString().equals(ref.getName())) {\n+                      if (isInitializingAssignmentAt(i - 1) || isInitializingDeclarationAt(i - 1)) {\n+                        return true;\n+                      }\n+                    }\n+                  }\n+                }\n+            }\n+          }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}