{
    "patch": "protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    \n    if (flags.process_closure_primitives) {\n        options.setChecksOnly(false);\n        options.setCheckGlobalThisLevel(CheckLevel.OFF);\n        options.setFoldConstants(true);\n        options.setDeadAssignmentElimination(true);\n        options.setInlineConstantVars(true);\n        options.setInlineFunctions(CheckLevel.OPTIMIZATION);\n        options.setInlineVariables(true);\n        options.setOptimizeArgumentsArray(true);\n        options.setRemoveUnusedVariables(CheckLevel.OPTIMIZATION);\n        options.setSmartNameRemoval(true);\n        options.setAggressiveVarCheck(CheckLevel.OFF);\n        options.setWarningLevel(DiagnosticGroups.CHECK_USELESS_CODE, CheckLevel.OFF);\n        options.setWarningLevel(DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT, CheckLevel.OFF);\n        options.setWarningLevel(DiagnosticGroups.FILEOVERVIEW_JSDOC, CheckLevel.OFF);\n        options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF);\n        options.setWarningLevel(DiagnosticGroups.MISPLACED_TYPE_ANNOTATION, CheckLevel.OFF);\n        options.setWarningLevel(DiagnosticGroups.NON_STANDARD_JSDOC, CheckLevel.OFF);\n        options.setWarningLevel(DiagnosticGroups.STRICT_MISSING_REQUIRE, CheckLevel.OFF);\n        options.setWarningLevel(DiagnosticGroups.UNNECESSARY_CASTS, CheckLevel.OFF);\n        options.setWarningLevel(DiagnosticGroups.VISIBILITY, CheckLevel.OFF);\n        options.closurePass = true;\n    }\n    \n    CompilationLevel level = CompilationLevel.valueOf(flags.compilation_level.name());\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = WarningLevel.valueOf(flags.warning_level.name());\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n        formattingOption.applyToOptions(options);\n    }\n\n    initOptionsFromFlags(options);\n    return options;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex bdf55921..a45608e3 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -416,27 +416,49 @@ public class CommandLineRunner extends\n   }\n \n   @Override\n-  protected CompilerOptions createOptions() {\n+protected CompilerOptions createOptions() {\n     CompilerOptions options = new CompilerOptions();\n     options.setCodingConvention(new ClosureCodingConvention());\n-    CompilationLevel level = flags.compilation_level;\n+    \n+    if (flags.process_closure_primitives) {\n+        options.setChecksOnly(false);\n+        options.setCheckGlobalThisLevel(CheckLevel.OFF);\n+        options.setFoldConstants(true);\n+        options.setDeadAssignmentElimination(true);\n+        options.setInlineConstantVars(true);\n+        options.setInlineFunctions(CheckLevel.OPTIMIZATION);\n+        options.setInlineVariables(true);\n+        options.setOptimizeArgumentsArray(true);\n+        options.setRemoveUnusedVariables(CheckLevel.OPTIMIZATION);\n+        options.setSmartNameRemoval(true);\n+        options.setAggressiveVarCheck(CheckLevel.OFF);\n+        options.setWarningLevel(DiagnosticGroups.CHECK_USELESS_CODE, CheckLevel.OFF);\n+        options.setWarningLevel(DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT, CheckLevel.OFF);\n+        options.setWarningLevel(DiagnosticGroups.FILEOVERVIEW_JSDOC, CheckLevel.OFF);\n+        options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF);\n+        options.setWarningLevel(DiagnosticGroups.MISPLACED_TYPE_ANNOTATION, CheckLevel.OFF);\n+        options.setWarningLevel(DiagnosticGroups.NON_STANDARD_JSDOC, CheckLevel.OFF);\n+        options.setWarningLevel(DiagnosticGroups.STRICT_MISSING_REQUIRE, CheckLevel.OFF);\n+        options.setWarningLevel(DiagnosticGroups.UNNECESSARY_CASTS, CheckLevel.OFF);\n+        options.setWarningLevel(DiagnosticGroups.VISIBILITY, CheckLevel.OFF);\n+        options.closurePass = true;\n+    }\n+    \n+    CompilationLevel level = CompilationLevel.valueOf(flags.compilation_level.name());\n     level.setOptionsForCompilationLevel(options);\n     if (flags.debug) {\n-      level.setDebugOptionsForCompilationLevel(options);\n+        level.setDebugOptionsForCompilationLevel(options);\n     }\n \n-    WarningLevel wLevel = flags.warning_level;\n+    WarningLevel wLevel = WarningLevel.valueOf(flags.warning_level.name());\n     wLevel.setOptionsForWarningLevel(options);\n     for (FormattingOption formattingOption : flags.formatting) {\n-      formattingOption.applyToOptions(options);\n-    }\n-    if (flags.process_closure_primitives) {\n-      options.closurePass = true;\n+        formattingOption.applyToOptions(options);\n     }\n \n     initOptionsFromFlags(options);\n     return options;\n-  }\n+}\n \n   @Override\n   protected Compiler createCompiler() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}