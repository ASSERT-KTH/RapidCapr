{
    "patch": "            int i = 0;\n            while (i < count) {\n                long newMillis = savedFields[i].set(millis, resetFields);\n                if (millis > 0 && newMillis < 0) {\n                    throw new IllegalArgumentException(\"The datetime is too large to be represented\");\n                }\n                if (millis < 0 && newMillis > 0) {\n                    throw new IllegalArgumentException(\"The datetime is too small to be represented\");\n                }\n                millis = newMillis;\n                i++;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..5f3be25a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,17 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            int i = 0;\n+            while (i < count) {\n+                long newMillis = savedFields[i].set(millis, resetFields);\n+                if (millis > 0 && newMillis < 0) {\n+                    throw new IllegalArgumentException(\"The datetime is too large to be represented\");\n+                }\n+                if (millis < 0 && newMillis > 0) {\n+                    throw new IllegalArgumentException(\"The datetime is too small to be represented\");\n+                }\n+                millis = newMillis;\n+                i++;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}