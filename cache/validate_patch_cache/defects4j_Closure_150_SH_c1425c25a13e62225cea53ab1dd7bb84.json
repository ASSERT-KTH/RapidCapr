{
    "patch": "      if (parent != null) {\n        switch (parent.getType()) {\n          case Token.FUNCTION:\n          case Token.CLASS:\n          case Token.SCRIPT:\n            defineDeclaredFunction(n, parent);\n            break;\n          case Token.VAR:\n            defineVar(n, parent);\n            break;\n          case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n          case Token.LP:\n            handleFunctionInputs(parent);\n            break;\n          case Token.THIS:\n            handleThis(n);\n            break;\n          default:\n            break;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..f1bd94d7 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,20 +1448,28 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+      if (parent != null) {\n+        switch (parent.getType()) {\n+          case Token.FUNCTION:\n+          case Token.CLASS:\n+          case Token.SCRIPT:\n+            defineDeclaredFunction(n, parent);\n+            break;\n+          case Token.VAR:\n+            defineVar(n, parent);\n+            break;\n+          case Token.CATCH:\n+            defineCatch(n, parent);\n+            break;\n+          case Token.LP:\n+            handleFunctionInputs(parent);\n+            break;\n+          case Token.THIS:\n+            handleThis(n);\n+            break;\n+          default:\n+            break;\n+        }\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}