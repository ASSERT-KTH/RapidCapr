{
    "patch": "public void doEvents(final double tMin, final double tMax,\n                     final double maxCheckInterval, final Collection<EventState> events, final EventHandler<ActionEvent> handler) {\n    final List<EventState> eventsStates = new ArrayList<EventState>();\n    for (final EventState state : events) {\n        eventsStates.add(state);\n    }\n    Collections.sort(eventsStates, new Comparator<EventState>() {\n        private final double gap = 0.001 * (tMax - tMin);\n        private final int orderingSign = handler.getEventFilter().acceptsDirect(Localizable.NO_LOCALE, eventsStates.get(0).getEventState(),\n                eventsStates.get(eventsStates.size() - 1).getEventState()) ? 1 : -1;\n        public int compare(final EventState es0, final EventState es1) {\n            final double e0Time = es0.getEventTime();\n            final double e1Time = es1.getEventTime();\n            if ((e1Time < tMin - gap) || (e0Time > tMax + gap)) {\n                throw new RuntimeException(\"Events not sorted properly\");\n            }\n            return orderingSign * Double.compare(e0Time, e1Time);\n        }\n    });\n\n    Interpolator i = null;\n    ActionEvent action;\n\n    final List<EventState> occuringEvents = new ArrayList<EventState>();\n    boolean isLastStep = false;\n    double tPrevious = Double.NaN;\n    double t = tMin;\n    while (!isLastStep && (t < tMax)) {\n        i = getPrimaryMapper().interpolate(t);\n        for (final EventState state : eventsStates) {\n            state.reinitializeBegin(i);\n        }\n\n        Collections.sort(eventsStates, new Comparator<EventState>() {\n            public int compare(final EventState es0, final EventState es1) {\n                return Double.compare(es0.getEventTime(), es1.getEventTime());\n            }\n        });\n\n        for (final EventState state : eventsStates) {\n            if (state.evaluateStep(i)) {\n                // event occurs during [t, t+h]\n                occuringEvents.add(state);\n            }\n        }\n\n        while (!occuringEvents.isEmpty()) {\n            // handle the occasion chronologically first event\n            final Iterator<EventState> iterator = occuringEvents.iterator();\n            final EventState currentEvent = iterator.next();\n            iterator.remove();\n\n            if (Double.isNaN(tPrevious)) {\n                tPrevious = i.getPreviousTime();\n            }\n\n            final double dt = currentEvent.getEventTime() - t;\n            if (dt > 0) {\n                // restrict the interpolator to the first part of the step, up to the event\n                final double ti = t + getStepSizeHandler().initializeStep(getEquations(), forward, 1.0, dt).getMinStep();\n                i.setSoftPreviousTime(t - tPrevious);\n                i.setSoftCurrentTime(ti - tPrevious);\n\n                // handle first part of the step, up to the event\n                do {\n                    action = handler.eventOccurred(i, currentEvent, (occuringEvents.size() > 0));\n                    if (action == ActionEvent.RESET_STATE) {\n                        System.arraycopy(action.getNewState(), 0, i.getPrimaryState(), 0, i.getPrimaryState().length);\n                    } else if (action == ActionEvent.RESET_DERIVATIVES) {\n                        computeDerivatives(ti, i.getPrimaryState(), i.getPrimaryDerivative(), i.getSecondaryState(), i.getSecondaryDerivative());\n                    }\n                } while (action == ActionEvent.RESET_STATE ||\n                         action == ActionEvent.RESET_DERIVATIVES);\n\n                tPrevious = t;\n                t = ti;\n            }\n\n            // get state at event time\n            i.setInterpolatedTime(currentEvent.getEventTime());\n            final double[] eventY = i.getInterpolatedState().clone();\n\n            // advance all event states to current time\n            currentEvent.stepAccepted(t, eventY);\n            isLastStep = currentEvent.stop();\n            for (final EventState state : eventsStates) {\n                if (!state.isActive()) {\n                    // event has been triggered: remove from list\n                    occuringEvents.remove(state);\n                }\n                state.reinitializeEnd(currentEvent);\n            }\n        }\n\n        if (!isLastStep && (t < tMax)) {\n            // handle the remaining part of the step\n            final double ti = t + getStepSizeHandler().initializeStep(getEquations(), forward, 1.0, tMax - t).getMinStep();\n            i.setSoftPreviousTime(t - tPrevious);\n            i.setSoftCurrentTime(ti - tPrevious);\n\n            // handle the remaining part of the step\n            do {\n                action = handler.handleStep(i, isLastStep);\n                if (action == ActionEvent.RESET_STATE) {\n                    System.arraycopy(action.getNewState(), 0, i.getPrimaryState(), 0, i.getPrimaryState().length);\n                } else if (action == ActionEvent.RESET_DERIVATIVES) {\n                    computeDerivatives(ti, i.getPrimaryState(), i.getPrimaryDerivative(), i.getSecondaryState(), i.getSecondaryDerivative());\n                }\n            } while (action == ActionEvent.RESET_STATE ||\n                     action == ActionEvent.RESET_DERIVATIVES);\n\n            tPrevious = t;\n            t = ti;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex f24f87c39..67917b467 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -313,43 +313,122 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n-                public int compare(EventState es0, EventState es1) {\n-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n-                }\n+public void doEvents(final double tMin, final double tMax,\n+                     final double maxCheckInterval, final Collection<EventState> events, final EventHandler<ActionEvent> handler) {\n+    final List<EventState> eventsStates = new ArrayList<EventState>();\n+    for (final EventState state : events) {\n+        eventsStates.add(state);\n+    }\n+    Collections.sort(eventsStates, new Comparator<EventState>() {\n+        private final double gap = 0.001 * (tMax - tMin);\n+        private final int orderingSign = handler.getEventFilter().acceptsDirect(Localizable.NO_LOCALE, eventsStates.get(0).getEventState(),\n+                eventsStates.get(eventsStates.size() - 1).getEventState()) ? 1 : -1;\n+        public int compare(final EventState es0, final EventState es1) {\n+            final double e0Time = es0.getEventTime();\n+            final double e1Time = es1.getEventTime();\n+            if ((e1Time < tMin - gap) || (e0Time > tMax + gap)) {\n+                throw new RuntimeException(\"Events not sorted properly\");\n+            }\n+            return orderingSign * Double.compare(e0Time, e1Time);\n+        }\n+    });\n \n-            });\n+    Interpolator i = null;\n+    ActionEvent action;\n \n-            for (final EventState state : eventsStates) {\n-                if (state.evaluateStep(interpolator)) {\n-                    // the event occurs during the current step\n-                    occuringEvents.add(state);\n-                }\n+    final List<EventState> occuringEvents = new ArrayList<EventState>();\n+    boolean isLastStep = false;\n+    double tPrevious = Double.NaN;\n+    double t = tMin;\n+    while (!isLastStep && (t < tMax)) {\n+        i = getPrimaryMapper().interpolate(t);\n+        for (final EventState state : eventsStates) {\n+            state.reinitializeBegin(i);\n+        }\n+\n+        Collections.sort(eventsStates, new Comparator<EventState>() {\n+            public int compare(final EventState es0, final EventState es1) {\n+                return Double.compare(es0.getEventTime(), es1.getEventTime());\n+            }\n+        });\n+\n+        for (final EventState state : eventsStates) {\n+            if (state.evaluateStep(i)) {\n+                // event occurs during [t, t+h]\n+                occuringEvents.add(state);\n             }\n+        }\n \n-            while (!occuringEvents.isEmpty()) {\n+        while (!occuringEvents.isEmpty()) {\n+            // handle the occasion chronologically first event\n+            final Iterator<EventState> iterator = occuringEvents.iterator();\n+            final EventState currentEvent = iterator.next();\n+            iterator.remove();\n \n-                // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n-                final EventState currentEvent = iterator.next();\n-                iterator.remove();\n+            if (Double.isNaN(tPrevious)) {\n+                tPrevious = i.getPreviousTime();\n+            }\n \n+            final double dt = currentEvent.getEventTime() - t;\n+            if (dt > 0) {\n                 // restrict the interpolator to the first part of the step, up to the event\n-                final double eventT = currentEvent.getEventTime();\n-                interpolator.setSoftPreviousTime(previousT);\n-                interpolator.setSoftCurrentTime(eventT);\n+                final double ti = t + getStepSizeHandler().initializeStep(getEquations(), forward, 1.0, dt).getMinStep();\n+                i.setSoftPreviousTime(t - tPrevious);\n+                i.setSoftCurrentTime(ti - tPrevious);\n+\n+                // handle first part of the step, up to the event\n+                do {\n+                    action = handler.eventOccurred(i, currentEvent, (occuringEvents.size() > 0));\n+                    if (action == ActionEvent.RESET_STATE) {\n+                        System.arraycopy(action.getNewState(), 0, i.getPrimaryState(), 0, i.getPrimaryState().length);\n+                    } else if (action == ActionEvent.RESET_DERIVATIVES) {\n+                        computeDerivatives(ti, i.getPrimaryState(), i.getPrimaryDerivative(), i.getSecondaryState(), i.getSecondaryDerivative());\n+                    }\n+                } while (action == ActionEvent.RESET_STATE ||\n+                         action == ActionEvent.RESET_DERIVATIVES);\n \n-                // get state at event time\n-                interpolator.setInterpolatedTime(eventT);\n-                final double[] eventY = interpolator.getInterpolatedState().clone();\n+                tPrevious = t;\n+                t = ti;\n+            }\n \n-                // advance all event states to current time\n-                currentEvent.stepAccepted(eventT, eventY);\n-                isLastStep = currentEvent.stop();\n+            // get state at event time\n+            i.setInterpolatedTime(currentEvent.getEventTime());\n+            final double[] eventY = i.getInterpolatedState().clone();\n \n-                // handle the first part of the step, up to the event\n-                for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n+            // advance all event states to current time\n+            currentEvent.stepAccepted(t, eventY);\n+            isLastStep = currentEvent.stop();\n+            for (final EventState state : eventsStates) {\n+                if (!state.isActive()) {\n+                    // event has been triggered: remove from list\n+                    occuringEvents.remove(state);\n                 }\n+                state.reinitializeEnd(currentEvent);\n+            }\n+        }\n+\n+        if (!isLastStep && (t < tMax)) {\n+            // handle the remaining part of the step\n+            final double ti = t + getStepSizeHandler().initializeStep(getEquations(), forward, 1.0, tMax - t).getMinStep();\n+            i.setSoftPreviousTime(t - tPrevious);\n+            i.setSoftCurrentTime(ti - tPrevious);\n+\n+            // handle the remaining part of the step\n+            do {\n+                action = handler.handleStep(i, isLastStep);\n+                if (action == ActionEvent.RESET_STATE) {\n+                    System.arraycopy(action.getNewState(), 0, i.getPrimaryState(), 0, i.getPrimaryState().length);\n+                } else if (action == ActionEvent.RESET_DERIVATIVES) {\n+                    computeDerivatives(ti, i.getPrimaryState(), i.getPrimaryDerivative(), i.getSecondaryState(), i.getSecondaryDerivative());\n+                }\n+            } while (action == ActionEvent.RESET_STATE ||\n+                     action == ActionEvent.RESET_DERIVATIVES);\n+\n+            tPrevious = t;\n+            t = ti;\n+        }\n+    }\n+}\n \n                 if (isLastStep) {\n                     // the event asked to stop integration",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}