{
    "patch": "test(\n        externs(\n            \"/** @const */ var goog = {};\\n\"\n                + \"goog.inherits = function(x, y) {};\\n\"\n                + \"/** @constructor @extends {RegExp} */\\n\"\n                + \"function MyRegexp() {};\\n\"),\n        srcs(\"var x = new MyRegexp();\\ntypeof x.lastIndex;\"),\n        // If the resulting node is null, then `assertNodeFactoryType` fails.\n        expected(\n            same(),\n            // We don't care what the regex type is; we just need to have\n            // it be callable.\n            // We put `() => {}` to ensure that the type inference doesn't\n            // change this into a simple boolean.\n            new TypeDeclarationBuilder(\"MyRegexp\", \"(!RegExp|string)\").toTypeDeclaration(),\n            new TypeDeclarationBuilder(\"MyRegexp.prototype.lastIndex\", \"*\").toTypeDeclaration(),\n            new TypeDeclarationBuilder(\"MyRegexp.prototype.test\", \"(function(): ?)\").toTypeDeclaration(),\n            new TypeDeclarationBuilder(\"MyRegexp.prototype.exec\", \"(function(): ?)\").toTypeDeclaration(),\n            new TypeDeclarationBuilder(\"MyRegexp.prototype.toString\", \"() => string\").toTypeDeclaration(),\n            new TypeDeclarationBuilder(\"x\", \"!MyRegexp\").toTypeDeclaration(),\n            new TypeDeclarationBuilder(\"x.lastIndex\", \"*\").toTypeDeclaration(),\n            // This line is the cause of the failure.\n            new TypeDeclarationBuilder(\"x()\", \"(function(this:!MyRegexp): ?)\").toTypeDeclaration()));",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..92a32d0b 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,55 +345,29 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n-\n-  @Override\n-  String toStringHelper(boolean forAnnotations) {\n-    if (hasReferenceName()) {\n-      return getReferenceName();\n-    } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n-      prettyPrint = false;\n-\n-      // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n-      }\n-\n-      StringBuilder sb = new StringBuilder();\n-      sb.append(\"{\");\n-\n-      int i = 0;\n-      for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n-        }\n-\n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n-        }\n-      }\n-\n-      sb.append(\"}\");\n-\n-      prettyPrint = true;\n-      return sb.toString();\n-    } else {\n-      return \"{...}\";\n-    }\n-  }\n+test(\n+        externs(\n+            \"/** @const */ var goog = {};\\n\"\n+                + \"goog.inherits = function(x, y) {};\\n\"\n+                + \"/** @constructor @extends {RegExp} */\\n\"\n+                + \"function MyRegexp() {};\\n\"),\n+        srcs(\"var x = new MyRegexp();\\ntypeof x.lastIndex;\"),\n+        // If the resulting node is null, then `assertNodeFactoryType` fails.\n+        expected(\n+            same(),\n+            // We don't care what the regex type is; we just need to have\n+            // it be callable.\n+            // We put `() => {}` to ensure that the type inference doesn't\n+            // change this into a simple boolean.\n+            new TypeDeclarationBuilder(\"MyRegexp\", \"(!RegExp|string)\").toTypeDeclaration(),\n+            new TypeDeclarationBuilder(\"MyRegexp.prototype.lastIndex\", \"*\").toTypeDeclaration(),\n+            new TypeDeclarationBuilder(\"MyRegexp.prototype.test\", \"(function(): ?)\").toTypeDeclaration(),\n+            new TypeDeclarationBuilder(\"MyRegexp.prototype.exec\", \"(function(): ?)\").toTypeDeclaration(),\n+            new TypeDeclarationBuilder(\"MyRegexp.prototype.toString\", \"() => string\").toTypeDeclaration(),\n+            new TypeDeclarationBuilder(\"x\", \"!MyRegexp\").toTypeDeclaration(),\n+            new TypeDeclarationBuilder(\"x.lastIndex\", \"*\").toTypeDeclaration(),\n+            // This line is the cause of the failure.\n+            new TypeDeclarationBuilder(\"x()\", \"(function(this:!MyRegexp): ?)\").toTypeDeclaration()));\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: invalid method declaration; return type required",
    "test_result": "ERROR"
}