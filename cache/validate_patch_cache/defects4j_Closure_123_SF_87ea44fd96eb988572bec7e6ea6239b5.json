{
    "patch": "public static String fixCode(String code) {\n    try {\n        ASTParser parser = ASTParser.newParser(AST.JLS8);\n        parser.setSource(code.toCharArray());\n        parser.setKind(ASTParser.K_COMPILATION_UNIT);\n\n        final CompilationUnit cu = (CompilationUnit) parser.createAST(null);\n        cu.accept(new ASTVisitor() {\n            public boolean visit(ForStatement node) {\n\n                Expression iterable = node.getExpression();\n                if (iterable instanceof InfixExpression) {\n                    InfixExpression infix = (InfixExpression) iterable;\n                    if (infix.getOperator() == InfixExpression.Operator.EQUALS) {\n                        Expression leftOperand = infix.getLeftOperand();\n                        if (leftOperand instanceof ArrayAccess) {\n                            ArrayAccess arrayAccess = (ArrayAccess) leftOperand;\n                            Expression array = arrayAccess.getArray();\n                            if (array instanceof SimpleName) {\n                                SimpleName name = (SimpleName) array;\n                                if (name.getIdentifier().matches(\"^\\\\w+$\") && infix.getRightOperand() instanceof SimpleName) {\n                                    SimpleName rightOperand = (SimpleName) infix.getRightOperand();\n                                    String code = \" for(int \" + name.getIdentifier() + \" = \" + rightOperand.getIdentifier() + \".length - 1;\"\n                                                + name.getIdentifier() + \" >= 0; --\" + name.getIdentifier() + \") \" +\n                                                node.getBody().toString();\n\n                                    replaceASTNode(cu, node, cu.getAST().newForStatement(), code);\n                                }\n                            }\n                        }\n                    }\n                }\n                return super.visit(node);\n            }\n        });\n\n        return cu.toString();\n    } catch (Exception e) {\n        e.printStackTrace();\n        return code;\n    }\n}\n\nprivate static void replaceASTNode(ASTNode parent, ASTNode node, ASTNode newNode, String newCode) {\n    AST ast = parent.getAST();\n    ASTRewrite rewriter = ASTRewrite.create(ast);\n    TextEdit edits = rewriter.replace(node, newNode, null);\n    try {\n        edits.apply(parent.getASTRoot().getBuffer());\n        edits.apply(new CodeFormatter().format(CodeFormatter.K_COMPILATION_UNIT, newCode, 0, newCode.length(), 0, null),\n                TextEdit.CREATE_UNDO | TextEdit.UPDATE_REGIONS);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..5a6017f2 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,61 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public static String fixCode(String code) {\n+    try {\n+        ASTParser parser = ASTParser.newParser(AST.JLS8);\n+        parser.setSource(code.toCharArray());\n+        parser.setKind(ASTParser.K_COMPILATION_UNIT);\n+\n+        final CompilationUnit cu = (CompilationUnit) parser.createAST(null);\n+        cu.accept(new ASTVisitor() {\n+            public boolean visit(ForStatement node) {\n+\n+                Expression iterable = node.getExpression();\n+                if (iterable instanceof InfixExpression) {\n+                    InfixExpression infix = (InfixExpression) iterable;\n+                    if (infix.getOperator() == InfixExpression.Operator.EQUALS) {\n+                        Expression leftOperand = infix.getLeftOperand();\n+                        if (leftOperand instanceof ArrayAccess) {\n+                            ArrayAccess arrayAccess = (ArrayAccess) leftOperand;\n+                            Expression array = arrayAccess.getArray();\n+                            if (array instanceof SimpleName) {\n+                                SimpleName name = (SimpleName) array;\n+                                if (name.getIdentifier().matches(\"^\\\\w+$\") && infix.getRightOperand() instanceof SimpleName) {\n+                                    SimpleName rightOperand = (SimpleName) infix.getRightOperand();\n+                                    String code = \" for(int \" + name.getIdentifier() + \" = \" + rightOperand.getIdentifier() + \".length - 1;\"\n+                                                + name.getIdentifier() + \" >= 0; --\" + name.getIdentifier() + \") \" +\n+                                                node.getBody().toString();\n+\n+                                    replaceASTNode(cu, node, cu.getAST().newForStatement(), code);\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+                return super.visit(node);\n+            }\n+        });\n+\n+        return cu.toString();\n+    } catch (Exception e) {\n+        e.printStackTrace();\n+        return code;\n+    }\n+}\n+\n+private static void replaceASTNode(ASTNode parent, ASTNode node, ASTNode newNode, String newCode) {\n+    AST ast = parent.getAST();\n+    ASTRewrite rewriter = ASTRewrite.create(ast);\n+    TextEdit edits = rewriter.replace(node, newNode, null);\n+    try {\n+        edits.apply(parent.getASTRoot().getBuffer());\n+        edits.apply(new CodeFormatter().format(CodeFormatter.K_COMPILATION_UNIT, newCode, 0, newCode.length(), 0, null),\n+                TextEdit.CREATE_UNDO | TextEdit.UPDATE_REGIONS);\n+    } catch (Exception e) {\n+        e.printStackTrace();\n+    }\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}