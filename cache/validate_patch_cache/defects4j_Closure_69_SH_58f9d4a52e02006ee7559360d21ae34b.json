{
    "patch": "if (childType instanceof FunctionType) {\n    FunctionType functionType = (FunctionType) childType;\n    boolean isExtern = false;\n    JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n    if (functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceName();\n        CompilerInput functionSource = compiler.getInput(sourceName);\n        if (functionSource != null) {\n            isExtern = functionSource.isExtern();\n        }\n    }\n    if (functionType.getThisType() != null && !isCallWithGet(functionType.getThisType(), n)) {\n        report(t, n, INVALID_THIS_TYPE, functionType.getThisType().toString());\n    }\n    if (functionType.isConstructor() && !functionType.isNativeObjectType() && (\n        functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n    }\n    visitParameterList(t, n, functionType);\n    ensureTyped(t, n, functionType.getReturnType());\n} else {\n    ensureTyped(t, n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..4f06fdf4 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,29 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (childType instanceof FunctionType) {\n+    FunctionType functionType = (FunctionType) childType;\n+    boolean isExtern = false;\n+    JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n+    if (functionJSDocInfo != null) {\n+        String sourceName = functionJSDocInfo.getSourceName();\n+        CompilerInput functionSource = compiler.getInput(sourceName);\n+        if (functionSource != null) {\n+            isExtern = functionSource.isExtern();\n+        }\n+    }\n+    if (functionType.getThisType() != null && !isCallWithGet(functionType.getThisType(), n)) {\n+        report(t, n, INVALID_THIS_TYPE, functionType.getThisType().toString());\n+    }\n+    if (functionType.isConstructor() && !functionType.isNativeObjectType() && (\n+        functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType() || !isExtern)) {\n+        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+    }\n+    visitParameterList(t, n, functionType);\n+    ensureTyped(t, n, functionType.getReturnType());\n+} else {\n+    ensureTyped(t, n);\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: variable functionType is already defined in method visitCall(NodeTraversal,Node)",
    "test_result": "ERROR"
}