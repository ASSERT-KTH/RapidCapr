{
    "patch": "  /**\n   * Attempts to fold `array.join(separator)`.\n   * \n   * <p>This is only done if one of the following conditions is fulfilled:\n   * <ul>\n   *   <li>\"separator\" is a constant.</li>\n   *   <li>All the elements in the array are themselves constant and can be coerced to a string.</li>\n   * </ul>\n   * \n   * <p>If at least one element is not a constant, it will be inlined rather than being folded.\n   * Coercion will only be done if necessary, e.g. if an element is already a string, it will\n   * not be coerced and will simply be joined directly without any additional quotes.\n   * \n   * @param n Call node to fold\n   * @return Replacement node, if folding occurred, otherwise the original node.\n   */\n  private Node tryFoldArrayJoin(Node n) {\n    // Verify that the call is of the form getprop(arrayNode, 'join')\n    Node callTarget = n.getFirstChild();\n    if (callTarget == null ||\n        callTarget.getType() != Token.GETPROP ||\n        callTarget.getLastChild().getString() != \"join\") {\n      return n;  // Not a call to array.join()\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    if (arrayNode == null ||\n        arrayNode.getType() != Token.ARRAYLIT ||\n        arrayNode.getFirstChild() == null) {\n      return n;  // Empty array or unrecognized first argument\n    }\n\n    Node separatorNode = callTarget.getNext();\n    if (separatorNode != null && !NodeUtil.isImmutableValue(separatorNode)) {\n      return n;  // Non-constant separator\n    }\n\n    boolean first = true;\n    boolean allConstants = true;\n    StringBuilder result = new StringBuilder(\"\");\n    for (Node elementNode = arrayNode.getFirstChild();\n        elementNode != null;\n        elementNode = elementNode.getNext()) {\n      if (elementNode.getType() == Token.EMPTY) {\n        // This may happen with sparse arrays, skip over these elements\n        continue;\n      }\n\n      String stringRepresentation;\n      if (NodeUtil.isImmutableValue(elementNode)) {\n        if (Nod",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..699a2611 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,116 +364,57 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n+  /**\n+   * Attempts to fold `array.join(separator)`.\n+   * \n+   * <p>This is only done if one of the following conditions is fulfilled:\n+   * <ul>\n+   *   <li>\"separator\" is a constant.</li>\n+   *   <li>All the elements in the array are themselves constant and can be coerced to a string.</li>\n+   * </ul>\n+   * \n+   * <p>If at least one element is not a constant, it will be inlined rather than being folded.\n+   * Coercion will only be done if necessary, e.g. if an element is already a string, it will\n+   * not be coerced and will simply be joined directly without any additional quotes.\n+   * \n+   * @param n Call node to fold\n+   * @return Replacement node, if folding occurred, otherwise the original node.\n+   */\n   private Node tryFoldArrayJoin(Node n) {\n+    // Verify that the call is of the form getprop(arrayNode, 'join')\n     Node callTarget = n.getFirstChild();\n-\n-    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n-      return n;\n-    }\n-\n-    Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n-        return n;\n-      }\n+    if (callTarget == null ||\n+        callTarget.getType() != Token.GETPROP ||\n+        callTarget.getLastChild().getString() != \"join\") {\n+      return n;  // Not a call to array.join()\n     }\n \n     Node arrayNode = callTarget.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n-\n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return n;\n-    }\n-\n-      // \",\" is the default, it doesn't need to be explicit\n-\n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n-    Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n-        } else {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n-      } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+    if (arrayNode == null ||\n+        arrayNode.getType() != Token.ARRAYLIT ||\n+        arrayNode.getFirstChild() == null) {\n+      return n;  // Empty array or unrecognized first argument\n+    }\n+\n+    Node separatorNode = callTarget.getNext();\n+    if (separatorNode != null && !NodeUtil.isImmutableValue(separatorNode)) {\n+      return n;  // Non-constant separator\n+    }\n+\n+    boolean first = true;\n+    boolean allConstants = true;\n+    StringBuilder result = new StringBuilder(\"\");\n+    for (Node elementNode = arrayNode.getFirstChild();\n+        elementNode != null;\n+        elementNode = elementNode.getNext()) {\n+      if (elementNode.getType() == Token.EMPTY) {\n+        // This may happen with sparse arrays, skip over these elements\n+        continue;\n       }\n-      prev = elem;\n-      elem = elem.getNext();\n-    }\n-\n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n-    }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n-    }\n \n-    return n;\n-  }\n+      String stringRepresentation;\n+      if (NodeUtil.isImmutableValue(elementNode)) {\n+        if (Nod\n \n   /**\n    * Try to fold .substr() calls on strings\n@@ -642,4 +583,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}