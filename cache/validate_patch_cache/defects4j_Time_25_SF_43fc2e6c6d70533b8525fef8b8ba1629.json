{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // Get the initial offset for the given local time\n    final int initialOffset = getOffset(instantLocal);\n\n    // Check if the initial offset is invalid due to a DST transition\n    boolean invalidInitialOffset = isInvalidOffset(instantLocal, initialOffset);\n\n    // If the initial offset is invalid, determine the correct offset\n    if (invalidInitialOffset) {\n        // Try to find the next valid offset\n        final long nextValidInstant = nextValidOffsetInstant(initialOffset, instantLocal);\n        if (nextValidInstant == Long.MIN_VALUE) {\n            // A valid offset could not be found after the given local time\n            throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition\");\n        } else {\n            // Return the offset at the next valid instant\n            return getOffset(nextValidInstant);\n        }\n    }\n\n    // Return the initial offset if it is valid\n    return initialOffset;\n}\n\n// Determine if the given offset at the given local instant is invalid due to a DST transition \nprivate boolean isInvalidOffset(long instantLocal, int offset) {\n    // Get the offsets for the previous and next instants\n    final int prevOffset = getOffset(instantLocal - 1);\n    final int nextOffset = getOffset(instantLocal + 1);\n    if (prevOffset == nextOffset) {\n        // No transition occurs at this local instant\n        return false;\n    } else if (prevOffset > nextOffset) {\n        // A gap in local time, so offset must be greater than the next offset\n        return offset > nextOffset;\n    } else {\n        // Overlap in local time, so offset must be less than or equal to the next offset\n        return offset >= nextOffset;\n    }\n}\n\n// Find the next valid offset instant after the given local time for the given initial offset\nprivate long nextValidOffsetInstant(int initialOffset, long instantLocal) {\n    // Determine the direction of the search (forward or backward in time)\n    int direction = (initialOffset >= 0) ? 1 : -1;\n\n    // Initialize the search to the next or previous transition\n    long searchInstant = (direction == 1) ? nextTransition(instantLocal) : previousTransition(instantLocal);\n\n    // Search until a valid instant is found or the search reaches the limit of the calendar\n    while (searchInstant != Long.MIN_VALUE && searchInstant != Long.MAX_VALUE) {\n        final int searchOffset = getOffset(searchInstant);\n        final boolean offsetValid = (direction == 1) ? searchOffset >= initialOffset : searchOffset <= initialOffset;\n        if (offsetValid && !isInvalidOffset(searchInstant, searchOffset)) {\n            return searchInstant;\n        }\n        // Continue searching in the appropriate direction\n        searchInstant = (direction == 1) ? nextTransition(searchInstant) : previousTransition(searchInstant);\n    }\n\n    // A valid instant could not be found\n    return Long.MIN_VALUE;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..94466c64 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,70 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // Get the initial offset for the given local time\n+    final int initialOffset = getOffset(instantLocal);\n+\n+    // Check if the initial offset is invalid due to a DST transition\n+    boolean invalidInitialOffset = isInvalidOffset(instantLocal, initialOffset);\n+\n+    // If the initial offset is invalid, determine the correct offset\n+    if (invalidInitialOffset) {\n+        // Try to find the next valid offset\n+        final long nextValidInstant = nextValidOffsetInstant(initialOffset, instantLocal);\n+        if (nextValidInstant == Long.MIN_VALUE) {\n+            // A valid offset could not be found after the given local time\n+            throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition\");\n+        } else {\n+            // Return the offset at the next valid instant\n+            return getOffset(nextValidInstant);\n         }\n-        return offsetAdjusted;\n     }\n \n+    // Return the initial offset if it is valid\n+    return initialOffset;\n+}\n+\n+// Determine if the given offset at the given local instant is invalid due to a DST transition \n+private boolean isInvalidOffset(long instantLocal, int offset) {\n+    // Get the offsets for the previous and next instants\n+    final int prevOffset = getOffset(instantLocal - 1);\n+    final int nextOffset = getOffset(instantLocal + 1);\n+    if (prevOffset == nextOffset) {\n+        // No transition occurs at this local instant\n+        return false;\n+    } else if (prevOffset > nextOffset) {\n+        // A gap in local time, so offset must be greater than the next offset\n+        return offset > nextOffset;\n+    } else {\n+        // Overlap in local time, so offset must be less than or equal to the next offset\n+        return offset >= nextOffset;\n+    }\n+}\n+\n+// Find the next valid offset instant after the given local time for the given initial offset\n+private long nextValidOffsetInstant(int initialOffset, long instantLocal) {\n+    // Determine the direction of the search (forward or backward in time)\n+    int direction = (initialOffset >= 0) ? 1 : -1;\n+\n+    // Initialize the search to the next or previous transition\n+    long searchInstant = (direction == 1) ? nextTransition(instantLocal) : previousTransition(instantLocal);\n+\n+    // Search until a valid instant is found or the search reaches the limit of the calendar\n+    while (searchInstant != Long.MIN_VALUE && searchInstant != Long.MAX_VALUE) {\n+        final int searchOffset = getOffset(searchInstant);\n+        final boolean offsetValid = (direction == 1) ? searchOffset >= initialOffset : searchOffset <= initialOffset;\n+        if (offsetValid && !isInvalidOffset(searchInstant, searchOffset)) {\n+            return searchInstant;\n+        }\n+        // Continue searching in the appropriate direction\n+        searchInstant = (direction == 1) ? nextTransition(searchInstant) : previousTransition(searchInstant);\n+    }\n+\n+    // A valid instant could not be found\n+    return Long.MIN_VALUE;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}