{
    "patch": "static boolean isValidDefineValue(Node val, Set<String> defines) {\n    if (val == null) {\n        return false;\n    }\n\n    int type = val.getType();\n\n    if (type == Token.STRING ||\n            type == Token.NUMBER ||\n            type == Token.TRUE ||\n            type == Token.FALSE) {\n        return true;\n\n    } else if (type == Token.BITAND ||\n            type == Token.BITNOT ||\n            type == Token.BITOR ||\n            type == Token.BITXOR ||\n            type == Token.AND ||\n            type == Token.OR ||\n            type == Token.LSH ||\n            type == Token.RSH ||\n            type == Token.URSH ||\n            type == Token.ADD ||\n            type == Token.SUB ||\n            type == Token.MUL ||\n            type == Token.DIV ||\n            type == Token.MOD) {\n        Node firstChild = val.getFirstChild();\n        Node lastChild = val.getLastChild();\n        return isValidDefineValue(firstChild, defines) &&\n                isValidDefineValue(lastChild, defines);\n\n    } else if (type == Token.NOT || type == Token.NEG) {\n        Node child = val.getFirstChild();\n        return isValidDefineValue(child, defines);\n\n    } else if (type == Token.NAME || type == Token.GETPROP) {\n        String name = val.getQualifiedName();\n        \n        if (name != null) {\n            return defines.contains(name);\n        }\n    }\n\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex a31b17a2..a7b913a3 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -317,34 +317,52 @@ public final class NodeUtil {\n    * @param val The value being assigned.\n    * @param defines The list of names of existing defines.\n    */\n-  static boolean isValidDefineValue(Node val, Set<String> defines) {\n-    switch (val.getType()) {\n-      case Token.STRING:\n-      case Token.NUMBER:\n-      case Token.TRUE:\n-      case Token.FALSE:\n-        return true;\n+static boolean isValidDefineValue(Node val, Set<String> defines) {\n+    if (val == null) {\n+        return false;\n+    }\n \n-      // Binary operators are only valid if both children are valid.\n-      case Token.BITAND:\n-      case Token.BITNOT:\n-      case Token.BITOR:\n-      case Token.BITXOR:\n+    int type = val.getType();\n \n-      // Uniary operators are valid if the child is valid.\n-      case Token.NOT:\n-      case Token.NEG:\n-        return isValidDefineValue(val.getFirstChild(), defines);\n+    if (type == Token.STRING ||\n+            type == Token.NUMBER ||\n+            type == Token.TRUE ||\n+            type == Token.FALSE) {\n+        return true;\n \n-      // Names are valid if and only if they are defines themselves.\n-      case Token.NAME:\n-      case Token.GETPROP:\n-        if (val.isQualifiedName()) {\n-          return defines.contains(val.getQualifiedName());\n+    } else if (type == Token.BITAND ||\n+            type == Token.BITNOT ||\n+            type == Token.BITOR ||\n+            type == Token.BITXOR ||\n+            type == Token.AND ||\n+            type == Token.OR ||\n+            type == Token.LSH ||\n+            type == Token.RSH ||\n+            type == Token.URSH ||\n+            type == Token.ADD ||\n+            type == Token.SUB ||\n+            type == Token.MUL ||\n+            type == Token.DIV ||\n+            type == Token.MOD) {\n+        Node firstChild = val.getFirstChild();\n+        Node lastChild = val.getLastChild();\n+        return isValidDefineValue(firstChild, defines) &&\n+                isValidDefineValue(lastChild, defines);\n+\n+    } else if (type == Token.NOT || type == Token.NEG) {\n+        Node child = val.getFirstChild();\n+        return isValidDefineValue(child, defines);\n+\n+    } else if (type == Token.NAME || type == Token.GETPROP) {\n+        String name = val.getQualifiedName();\n+        \n+        if (name != null) {\n+            return defines.contains(name);\n         }\n     }\n+\n     return false;\n-  }\n+}\n \n   /**\n    * Returns whether this a BLOCK node with no children.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}