{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.hasProperty(prop)) {\n            warnings.add(JSError.make(\n                n, TypeValidator.TYPE_MISMATCH_WARNING,\n                String.format(\n                    \"property %s not defined on %s\", prop, objType)));\n          } else {\n            JSType declaredType = objType.getPropertyType(prop);\n            if (!declaredType.isSubtypeOf(propType)) {\n              warnings.add(JSError.make(\n                  n, TypeValidator.TYPE_MISMATCH_WARNING,\n                  String.format(\n                      \"mismatch of the %s property type on %s.\" +\n                      \" Expected\\n%s, Found\\n%s\",\n                      prop, objType, propType, declaredType)));\n            }\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..300919b3 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1123,17 +1123,26 @@ class TypeInference\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+          if (!objType.hasProperty(prop)) {\n+            warnings.add(JSError.make(\n+                n, TypeValidator.TYPE_MISMATCH_WARNING,\n+                String.format(\n+                    \"property %s not defined on %s\", prop, objType)));\n+          } else {\n+            JSType declaredType = objType.getPropertyType(prop);\n+            if (!declaredType.isSubtypeOf(propType)) {\n+              warnings.add(JSError.make(\n+                  n, TypeValidator.TYPE_MISMATCH_WARNING,\n+                  String.format(\n+                      \"mismatch of the %s property type on %s.\" +\n+                      \" Expected\\n%s, Found\\n%s\",\n+                      prop, objType, propType, declaredType)));\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}