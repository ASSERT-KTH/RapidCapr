{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    simplex = contract(original, best, comparator);\n                }\n\n            } else {\n                simplex = contract(original, best, comparator);\n            }\n\n            // check convergence\n            if (isConverged(simplex[0], simplex[simplex.length - 1])) {\n                return;\n            }\n\n        }\n\n    }\n\n    private RealPointValuePair[] contract(final RealPointValuePair[] original,\n                                           final RealPointValuePair best,\n                                           final Comparator<RealPointValuePair> comparator) {\n        final RealPointValuePair[] contractedSimplex = new RealPointValuePair[simplex.length];\n        for (int i = 0; i < simplex.length; i++) {\n            final double[] contracted = new double[original[i].getPoint().length];\n            for (int j = 0; j < contracted.length; j++) {\n                contracted[j] = contractionFactor * best.getPoint()[j] +\n                        (1 - contractionFactor) * original[i].getPoint()[j];\n            }\n            final double value = computeObjectiveValue(contracted);\n            contractedSimplex[i] = new RealPointValuePair(contracted, value);\n        }\n        Arrays.sort(contractedSimplex, comparator);\n        return contractedSimplex;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..01d3468a1 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,7 +58,7 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n@@ -79,18 +79,16 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 if (comparator.compare(reflected, expanded) <= 0) {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    simplex = contract(original, best, comparator);\n                 }\n \n-                return;\n-\n+            } else {\n+                simplex = contract(original, best, comparator);\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n             // check convergence\n+            if (isConverged(simplex[0], simplex[simplex.length - 1])) {\n                 return;\n             }\n \n@@ -98,6 +96,22 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     }\n \n+    private RealPointValuePair[] contract(final RealPointValuePair[] original,\n+                                           final RealPointValuePair best,\n+                                           final Comparator<RealPointValuePair> comparator) {\n+        final RealPointValuePair[] contractedSimplex = new RealPointValuePair[simplex.length];\n+        for (int i = 0; i < simplex.length; i++) {\n+            final double[] contracted = new double[original[i].getPoint().length];\n+            for (int j = 0; j < contracted.length; j++) {\n+                contracted[j] = contractionFactor * best.getPoint()[j] +\n+                        (1 - contractionFactor) * original[i].getPoint()[j];\n+            }\n+            final double value = computeObjectiveValue(contracted);\n+            contractedSimplex[i] = new RealPointValuePair(contracted, value);\n+        }\n+        Arrays.sort(contractedSimplex, comparator);\n+        return contractedSimplex;\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}