{
    "patch": "if (!(classType instanceof ParameterizedType)) {\n    return;\n}\nParameterizedType parameterizedType = (ParameterizedType) classType;\nTypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\nType[] actualTypeArguments = parameterizedType.getActualTypeArguments();\nfor (int i = 0; i < actualTypeArguments.length; i++) {\n    TypeVariable typeParameter = typeParameters[i];\n    Type actualTypeArgument = actualTypeArguments[i];\n    if (actualTypeArgument instanceof WildcardType) {\n        contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n    } else {\n        // if actualTypeArgument is not a TypeVariable, and if the typeParameter is not found in the actualTypeArguments or if both types are not equal, add to the map\n        if (!(actualTypeArgument instanceof TypeVariable) && (i >= typeParameters.length || !typeParameters[i].equals(actualTypeArgument))) {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n        // if actualTypeArgument is a TypeVariable, check if its corresponding actual type argument is already present in the map\n        else if (actualTypeArgument instanceof TypeVariable && contextualActualTypeParameters.containsKey(actualTypeArgument) && !contextualActualTypeParameters.get(actualTypeArgument).equals(typeParameter)) {\n            // to fix cyclic dependencies, we put the type parameter in a list associated with the actual type argument\n            List<TypeVariable> visitedTypeVariables = new ArrayList<>();\n            visitedTypeVariables.add(typeParameter);\n            visitedTypeVariables.add((TypeVariable)actualTypeArgument);\n            fixCyclicDependencies(typeParameter, (TypeVariable)actualTypeArgument, visitedTypeVariables, contextualActualTypeParameters);\n        }\n        // add typeParameter to map with actualTypeArgument if it is not present already\n        else if (!contextualActualTypeParameters.containsKey(typeParameter)) {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..061dba3f5 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -64,23 +64,36 @@ public abstract class GenericMetadataSupport {\n \n \n     protected void registerTypeVariablesOn(Type classType) {\n-        if (!(classType instanceof ParameterizedType)) {\n-            return;\n-        }\n-        ParameterizedType parameterizedType = (ParameterizedType) classType;\n-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n-        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n-        for (int i = 0; i < actualTypeArguments.length; i++) {\n-            TypeVariable typeParameter = typeParameters[i];\n-            Type actualTypeArgument = actualTypeArguments[i];\n-\n-            if (actualTypeArgument instanceof WildcardType) {\n-                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n-                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n-            }\n-            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n-        }\n+if (!(classType instanceof ParameterizedType)) {\n+    return;\n+}\n+ParameterizedType parameterizedType = (ParameterizedType) classType;\n+TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n+Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+for (int i = 0; i < actualTypeArguments.length; i++) {\n+    TypeVariable typeParameter = typeParameters[i];\n+    Type actualTypeArgument = actualTypeArguments[i];\n+    if (actualTypeArgument instanceof WildcardType) {\n+        contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n+    } else {\n+        // if actualTypeArgument is not a TypeVariable, and if the typeParameter is not found in the actualTypeArguments or if both types are not equal, add to the map\n+        if (!(actualTypeArgument instanceof TypeVariable) && (i >= typeParameters.length || !typeParameters[i].equals(actualTypeArgument))) {\n+            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+        }\n+        // if actualTypeArgument is a TypeVariable, check if its corresponding actual type argument is already present in the map\n+        else if (actualTypeArgument instanceof TypeVariable && contextualActualTypeParameters.containsKey(actualTypeArgument) && !contextualActualTypeParameters.get(actualTypeArgument).equals(typeParameter)) {\n+            // to fix cyclic dependencies, we put the type parameter in a list associated with the actual type argument\n+            List<TypeVariable> visitedTypeVariables = new ArrayList<>();\n+            visitedTypeVariables.add(typeParameter);\n+            visitedTypeVariables.add((TypeVariable)actualTypeArgument);\n+            fixCyclicDependencies(typeParameter, (TypeVariable)actualTypeArgument, visitedTypeVariables, contextualActualTypeParameters);\n+        }\n+        // add typeParameter to map with actualTypeArgument if it is not present already\n+        else if (!contextualActualTypeParameters.containsKey(typeParameter)) {\n+            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+        }\n+    }\n+}\n     }\n \n     protected void registerTypeParametersOn(TypeVariable[] typeParameters) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}