{
    "patch": "@Override public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  switch (n.getToken()) {\n    case FUNCTION:\n      defineDeclaredFunction(n, parent);\n      break;\n    case VAR:\n      defineVar(n, parent);\n      break;\n    case CATCH:\n      defineCatch(n, parent);\n      break;\n    case LP:\n      if (NodeUtil.isFunctionExpression(parent)) {\n        handleFunctionInputs(n.getNext().getFirstChild());\n        return;\n      }\n      break;\n    default:\n      attachLiteralTypes(n);\n      break;\n  }\n}\n\nprivate void defineDeclaredFunction(Node n, Node parent) {\n  if (NodeUtil.isFunctionExpression(n) && parent.getToken() != Token.EXPR_RESULT) {\n    return;\n  }\n  super.visit(n);\n}\n\nprivate void defineCatch(Node n, Node parent) {\n  if (parent.getToken() == Token.BLOCK && parent.getParent().getToken() == Token.TRY) {\n    super.visit(n);\n  }\n}\n\nprivate void defineVar(Node n, Node parent) {\n  if (parent.getToken() != Token.FOR || parent.getFirstChild() != n) {\n    super.visit(n);\n  }\n}\n\nprivate void handleFunctionInputs(Node inputs) {\n  if (!inputs.hasChildren()) {\n    return;\n  }\n  Node c = inputs.getFirstChild();\n  int n = 0;\n  while (c != null) {\n    switch (c.getToken()) {\n      case NAME:\n        String name = c.getString();\n        TypedVar inputVar = scope.getVar(name);\n        JSType inputType = null;\n        if (inputVar != null) {\n          inputType = inputVar.getType();\n        }\n        // Assign the proper types.\n        if (inputType != null) {\n          inputType = inputType.restrictByNotNullOrUndefined();\n          if (!inputType.isUnknownType()) {\n            JSType expectedType = getParameterType(n++);\n            if (expectedType != null) {\n              inputType = JSType.join(inputType, expectedType);\n            }\n          }\n          setInputType(c, inputType);\n        }\n        break;\n      case STRING_KEY:\n        setInputType(c, JSType.STRING_TYPE);\n        break;\n      default:\n        break;\n    }\n    c = c.getNext();\n  }\n}\n\nprivate JSType getParameterType(int index) {\n  // A stub implementation that always returns null.\n  return null;\n}\n\nprivate void setInputType(Node n, JSType type) {\n  // A stub implementation that does nothing.\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..f5a10ffb 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,95 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+@Override public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n == scope.getRootNode()) return;\n+\n+  switch (n.getToken()) {\n+    case FUNCTION:\n+      defineDeclaredFunction(n, parent);\n+      break;\n+    case VAR:\n+      defineVar(n, parent);\n+      break;\n+    case CATCH:\n+      defineCatch(n, parent);\n+      break;\n+    case LP:\n+      if (NodeUtil.isFunctionExpression(parent)) {\n+        handleFunctionInputs(n.getNext().getFirstChild());\n         return;\n       }\n-\n+      break;\n+    default:\n       attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+      break;\n+  }\n+}\n+\n+private void defineDeclaredFunction(Node n, Node parent) {\n+  if (NodeUtil.isFunctionExpression(n) && parent.getToken() != Token.EXPR_RESULT) {\n+    return;\n+  }\n+  super.visit(n);\n+}\n+\n+private void defineCatch(Node n, Node parent) {\n+  if (parent.getToken() == Token.BLOCK && parent.getParent().getToken() == Token.TRY) {\n+    super.visit(n);\n+  }\n+}\n+\n+private void defineVar(Node n, Node parent) {\n+  if (parent.getToken() != Token.FOR || parent.getFirstChild() != n) {\n+    super.visit(n);\n+  }\n+}\n+\n+private void handleFunctionInputs(Node inputs) {\n+  if (!inputs.hasChildren()) {\n+    return;\n+  }\n+  Node c = inputs.getFirstChild();\n+  int n = 0;\n+  while (c != null) {\n+    switch (c.getToken()) {\n+      case NAME:\n+        String name = c.getString();\n+        TypedVar inputVar = scope.getVar(name);\n+        JSType inputType = null;\n+        if (inputVar != null) {\n+          inputType = inputVar.getType();\n+        }\n+        // Assign the proper types.\n+        if (inputType != null) {\n+          inputType = inputType.restrictByNotNullOrUndefined();\n+          if (!inputType.isUnknownType()) {\n+            JSType expectedType = getParameterType(n++);\n+            if (expectedType != null) {\n+              inputType = JSType.join(inputType, expectedType);\n+            }\n           }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+          setInputType(c, inputType);\n+        }\n+        break;\n+      case STRING_KEY:\n+        setInputType(c, JSType.STRING_TYPE);\n+        break;\n+      default:\n+        break;\n     }\n+    c = c.getNext();\n+  }\n+}\n+\n+private JSType getParameterType(int index) {\n+  // A stub implementation that always returns null.\n+  return null;\n+}\n+\n+private void setInputType(Node n, JSType type) {\n+  // A stub implementation that does nothing.\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: method handleFunctionInputs(Node) is already defined in class TypedScopeCreator.LocalScopeBuilder",
    "test_result": "ERROR"
}