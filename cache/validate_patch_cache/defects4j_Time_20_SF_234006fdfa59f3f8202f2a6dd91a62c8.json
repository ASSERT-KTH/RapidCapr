{
    "patch": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    String str = text.substring(position);\n    for (String id : ALL_IDS) {\n        int idLen = id.length();\n        if (str.startsWith(id) \n            && (str.length() == idLen || \n                str.charAt(idLen) == '/' || \n                Character.isWhitespace(str.charAt(idLen)))) {\n            if (str.length() == idLen || \n                !Character.isLetterOrDigit(str.charAt(idLen))) {\n                bucket.setZone(DateTimeZone.forID(id));\n                return position + idLen;\n            }\n        }\n    }\n    return ~position;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\nindex 558a5864..cb4753a9 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n@@ -2537,16 +2537,23 @@ public class DateTimeFormatterBuilder {\n             return MAX_LENGTH;\n         }\n \n-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n-            String str = text.substring(position);\n-            for (String id : ALL_IDS) {\n-                if (str.startsWith(id)) {\n-                    bucket.setZone(DateTimeZone.forID(id));\n-                    return position + id.length();\n-                }\n-            }\n-            return ~position;\n-        }\n+public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+    String str = text.substring(position);\n+    for (String id : ALL_IDS) {\n+        int idLen = id.length();\n+        if (str.startsWith(id) \n+            && (str.length() == idLen || \n+                str.charAt(idLen) == '/' || \n+                Character.isWhitespace(str.charAt(idLen)))) {\n+            if (str.length() == idLen || \n+                !Character.isLetterOrDigit(str.charAt(idLen))) {\n+                bucket.setZone(DateTimeZone.forID(id));\n+                return position + idLen;\n+            }\n+        }\n+    }\n+    return ~position;\n+}\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}