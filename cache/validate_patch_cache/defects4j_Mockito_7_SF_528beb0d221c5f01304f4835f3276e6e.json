{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds.length > 0) {\n        for (Type bound : bounds) {\n            if (bound instanceof TypeVariable<?>) {\n                TypeVariable<?> nestedTypeVar = (TypeVariable<?>) bound;\n                Type actualTypeArg = getActualTypeArgumentFor(nestedTypeVar);\n                if (actualTypeArg == null) {\n                    // Recursively process the nested TypeVariable\n                    readTypeVariablesOfBounds(nestedTypeVar);\n                } else {\n                    registerTypeVariablesOn(actualTypeArg);\n                }\n            } else {\n                registerTypeVariablesOn(bound);\n            }\n        }\n    } else {\n        Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\n        if (actualTypeArg != null) {\n            registerTypeVariablesOn(actualTypeArg);\n        }\n    }\n}\n    \nprivate void readTypeVariablesOfBounds(TypeVariable<?> typeVar) {\n    Type[] bounds = typeVar.getBounds();\n    for (Type bound : bounds) {\n        if (bound instanceof TypeVariable<?>) {\n            TypeVariable<?> nestedTypeVar = (TypeVariable<?>) bound;\n            Type actualTypeArg = getActualTypeArgumentFor(nestedTypeVar);\n            if (actualTypeArg == null) {\n                // Recursively process the nested TypeVariable\n                readTypeVariablesOfBounds(nestedTypeVar);\n            } else {\n                registerTypeVariablesOn(actualTypeArg);\n            }\n        } else {\n            registerTypeVariablesOn(bound);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..648f6a547 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,49 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds.length > 0) {\n+        for (Type bound : bounds) {\n+            if (bound instanceof TypeVariable<?>) {\n+                TypeVariable<?> nestedTypeVar = (TypeVariable<?>) bound;\n+                Type actualTypeArg = getActualTypeArgumentFor(nestedTypeVar);\n+                if (actualTypeArg == null) {\n+                    // Recursively process the nested TypeVariable\n+                    readTypeVariablesOfBounds(nestedTypeVar);\n+                } else {\n+                    registerTypeVariablesOn(actualTypeArg);\n+                }\n+            } else {\n+                registerTypeVariablesOn(bound);\n+            }\n+        }\n+    } else {\n+        Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\n+        if (actualTypeArg != null) {\n+            registerTypeVariablesOn(actualTypeArg);\n+        }\n+    }\n+}\n+    \n+private void readTypeVariablesOfBounds(TypeVariable<?> typeVar) {\n+    Type[] bounds = typeVar.getBounds();\n+    for (Type bound : bounds) {\n+        if (bound instanceof TypeVariable<?>) {\n+            TypeVariable<?> nestedTypeVar = (TypeVariable<?>) bound;\n+            Type actualTypeArg = getActualTypeArgumentFor(nestedTypeVar);\n+            if (actualTypeArg == null) {\n+                // Recursively process the nested TypeVariable\n+                readTypeVariablesOfBounds(nestedTypeVar);\n+            } else {\n+                registerTypeVariablesOn(actualTypeArg);\n+            }\n+        } else {\n+            registerTypeVariablesOn(bound);\n+        }\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}