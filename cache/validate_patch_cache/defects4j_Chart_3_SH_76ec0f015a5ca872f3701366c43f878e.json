{
    "patch": "if (start < 0) {\n    throw new IllegalArgumentException(\"Requires start >= 0.\");\n}\nif (end < start) {\n    throw new IllegalArgumentException(\"Requires start <= end.\");\n}\nTimeSeries copy = (TimeSeries) super.clone();\ncopy.data = new java.util.ArrayList<TimeSeriesDataItem>();\n\n// Initialize min and max values as NaN\ndouble minY = Double.NaN;\ndouble maxY = Double.NaN;\n\n// Loop over the original time series, and add eligible items to the copy\nfor (int i = 0; i < this.data.size(); i++) {\n    TimeSeriesDataItem item = this.data.get(i);\n    if (i < start || i > end) {\n        continue;\n    }\n    try {\n        TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n        copy.add(clone);\n        double y = clone.getValue().doubleValue();\n        if (Double.isNaN(minY) || y < minY) {\n            minY = y;\n        }\n        if (Double.isNaN(maxY) || y > maxY) {\n            maxY = y;\n        }\n    } catch (CloneNotSupportedException e) {\n        e.printStackTrace();\n    } catch (SeriesException e) {\n        e.printStackTrace();\n    }\n}\n\n// Set the min and max values of the copy\ncopy.minY = minY;\ncopy.maxY = maxY;\n\nreturn copy;",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..89b84eb 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,6 +1054,47 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n+if (start < 0) {\n+    throw new IllegalArgumentException(\"Requires start >= 0.\");\n+}\n+if (end < start) {\n+    throw new IllegalArgumentException(\"Requires start <= end.\");\n+}\n+TimeSeries copy = (TimeSeries) super.clone();\n+copy.data = new java.util.ArrayList<TimeSeriesDataItem>();\n+\n+// Initialize min and max values as NaN\n+double minY = Double.NaN;\n+double maxY = Double.NaN;\n+\n+// Loop over the original time series, and add eligible items to the copy\n+for (int i = 0; i < this.data.size(); i++) {\n+    TimeSeriesDataItem item = this.data.get(i);\n+    if (i < start || i > end) {\n+        continue;\n+    }\n+    try {\n+        TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+        copy.add(clone);\n+        double y = clone.getValue().doubleValue();\n+        if (Double.isNaN(minY) || y < minY) {\n+            minY = y;\n+        }\n+        if (Double.isNaN(maxY) || y > maxY) {\n+            maxY = y;\n+        }\n+    } catch (CloneNotSupportedException e) {\n+        e.printStackTrace();\n+    } catch (SeriesException e) {\n+        e.printStackTrace();\n+    }\n+}\n+\n+// Set the min and max values of the copy\n+copy.minY = minY;\n+copy.maxY = maxY;\n+\n+return copy;\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {",
    "result_reason": "error: generics are not supported in -source 1.4",
    "test_result": "ERROR"
}