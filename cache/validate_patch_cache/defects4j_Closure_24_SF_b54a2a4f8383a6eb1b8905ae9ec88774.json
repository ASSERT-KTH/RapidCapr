{
    "patch": "private void findAliases(NodeTraversal t) {\n  Scope scope = t.getScope();\n  for (Var v : scope.getVarIterable()) {\n    Node n = v.getNode();\n    Node parent = n.getParent();\n    if (parent != null && parent.isVar() && !v.isLocal()) {\n      Node grandparent = parent.getParent();\n      boolean isFunction = grandparent != null && grandparent.isFunction();\n      boolean isAlias = n.hasChildren() && n.getFirstChild().isQualifiedName();\n      if (isFunction && isAlias) {\n        String name = n.getString();\n        Var aliasVar = scope.getVar(name);\n        String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n        aliases.put(name, aliasVar);\n        transformation.addAlias(name, qualifiedName);\n      }\n    } else if (parent == null && n.isFunction()) {\n      for (Var localVar : scope.getLocalVars()) {\n        if (!localVar.isArguments() && !localVar.isCatch() && !localVar.isExtern()) {\n          report(t, localVar.getNode(), GOOG_SCOPE_NON_ALIAS_LOCAL, localVar.getName());\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..edf82eba 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,31 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+private void findAliases(NodeTraversal t) {\n+  Scope scope = t.getScope();\n+  for (Var v : scope.getVarIterable()) {\n+    Node n = v.getNode();\n+    Node parent = n.getParent();\n+    if (parent != null && parent.isVar() && !v.isLocal()) {\n+      Node grandparent = parent.getParent();\n+      boolean isFunction = grandparent != null && grandparent.isFunction();\n+      boolean isAlias = n.hasChildren() && n.getFirstChild().isQualifiedName();\n+      if (isFunction && isAlias) {\n+        String name = n.getString();\n+        Var aliasVar = scope.getVar(name);\n+        String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+        aliases.put(name, aliasVar);\n+        transformation.addAlias(name, qualifiedName);\n+      }\n+    } else if (parent == null && n.isFunction()) {\n+      for (Var localVar : scope.getLocalVars()) {\n+        if (!localVar.isArguments() && !localVar.isCatch() && !localVar.isExtern()) {\n+          report(t, localVar.getNode(), GOOG_SCOPE_NON_ALIAS_LOCAL, localVar.getName());\n         }\n       }\n     }\n+  }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}