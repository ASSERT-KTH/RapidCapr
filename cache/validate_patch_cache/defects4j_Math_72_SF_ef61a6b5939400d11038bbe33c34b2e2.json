{
    "patch": "public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    double yInitial = f.value(initial);\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    double oldY = yInitial;\n    double x = initial;\n    double y = yInitial;\n    double lastx = Double.NaN;\n    double yAtLastx = Double.NaN;\n\n    // Check if initial guess is a root\n    if (Math.abs(y) <= functionValueAccuracy) {\n        setResult(x, 0);\n        return result;\n    }\n\n    // Check if either of the endpoints are roots\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    }\n\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    }\n\n    if (yMin * yMax > 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n            NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n    }\n\n    double nextx = Double.NaN;\n    double nexty = Double.NaN;\n    for (int i = 0; i < maximalIterationCount; ++i) {\n        if (Double.isNaN(yAtLastx)) {\n            // first iteration, set initial values accordingly\n            if (yMin * y < 0) {\n                nextx = min;\n                nexty = yMin;\n            } else {\n                nextx = max;\n                nexty = yMax;\n            }\n        } else {\n            // not first iteration, use interpolation to find the next point\n            double denominator = (y - yAtLastx) / (x - lastx) - (y - oldY) / (x - initial);\n            double delta = (y - oldY) / denominator;\n            nextx = x - delta;\n            nexty = f.value(nextx);\n        }\n\n        if (Math.abs(nexty) <= functionValueAccuracy) {\n            setResult(nextx, i);\n            return result;\n        }\n\n        oldY = y;\n        yAtLastx = y;\n        lastx = x;\n        x = nextx;\n        y = nexty;\n\n        // change min/max accordingly\n        if (y * yMin < 0) {\n            max = x;\n            yMax = y;\n        } else if (y * yMax < 0) {\n            min = x;\n            yMin = y;\n        } else {\n            // about to divide by zero, which occurs when x has converged to a midpoint of the interval\n            setResult(x, i);\n            return result;\n        }\n    }\n\n    throw new MaxIterationsExceededException(maximalIterationCount);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex e0cb42714..050c0112e 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,54 +95,91 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n-                        final double min, final double max, final double initial)\n-        throws MaxIterationsExceededException, FunctionEvaluationException {\n+public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial)\n+    throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+    clearResult();\n+    verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n-        double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+    double yInitial = f.value(initial);\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n+    double oldY = yInitial;\n+    double x = initial;\n+    double y = yInitial;\n+    double lastx = Double.NaN;\n+    double yAtLastx = Double.NaN;\n \n-        // return the first endpoint if it is good enough\n-        double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+    // Check if initial guess is a root\n+    if (Math.abs(y) <= functionValueAccuracy) {\n+        setResult(x, 0);\n+        return result;\n+    }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n+    // Check if either of the endpoints are roots\n+    if (Math.abs(yMin) <= functionValueAccuracy) {\n+        setResult(min, 0);\n+        return result;\n+    }\n \n-        // return the second endpoint if it is good enough\n-        double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+    if (Math.abs(yMax) <= functionValueAccuracy) {\n+        setResult(max, 0);\n+        return result;\n+    }\n+\n+    if (yMin * yMax > 0) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+            NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+    }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n+    double nextx = Double.NaN;\n+    double nexty = Double.NaN;\n+    for (int i = 0; i < maximalIterationCount; ++i) {\n+        if (Double.isNaN(yAtLastx)) {\n+            // first iteration, set initial values accordingly\n+            if (yMin * y < 0) {\n+                nextx = min;\n+                nexty = yMin;\n+            } else {\n+                nextx = max;\n+                nexty = yMax;\n+            }\n+        } else {\n+            // not first iteration, use interpolation to find the next point\n+            double denominator = (y - yAtLastx) / (x - lastx) - (y - oldY) / (x - initial);\n+            double delta = (y - oldY) / denominator;\n+            nextx = x - delta;\n+            nexty = f.value(nextx);\n         }\n \n-        if (yMin * yMax > 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+        if (Math.abs(nexty) <= functionValueAccuracy) {\n+            setResult(nextx, i);\n+            return result;\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+        oldY = y;\n+        yAtLastx = y;\n+        lastx = x;\n+        x = nextx;\n+        y = nexty;\n \n+        // change min/max accordingly\n+        if (y * yMin < 0) {\n+            max = x;\n+            yMax = y;\n+        } else if (y * yMax < 0) {\n+            min = x;\n+            yMin = y;\n+        } else {\n+            // about to divide by zero, which occurs when x has converged to a midpoint of the interval\n+            setResult(x, i);\n+            return result;\n+        }\n     }\n \n+    throw new MaxIterationsExceededException(maximalIterationCount);\n+}\n+\n     /**\n      * Find a zero in the given interval.\n      * <p>",
    "result_reason": "error: final parameter max may not be assigned",
    "test_result": "ERROR"
}