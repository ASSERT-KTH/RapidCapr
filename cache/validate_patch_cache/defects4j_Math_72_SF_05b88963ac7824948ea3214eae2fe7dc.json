{
    "patch": "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    double yInitial = f.value(initial);\n\n    // if either endpoint is a root, return it\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    }\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    }\n\n    // if the initial guess is a root, return it\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    if (yMin * yMax > 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n    }\n\n    double x1 = min;\n    double x2 = initial;\n    double x3 = max;\n    double y1 = yMin;\n    double y2 = yInitial;\n    double y3 = yMax;\n\n    for (int i = 0; i < maximalIterationCount; ++i) {\n\n        // polynomials interpolating f at x1, x2, x3\n        double denom1 = (x2 - x1) * (y2 - y3);\n        double denom2 = (x3 - x2) * (y2 - y1);\n        double numer1 = (y2 - y3) * x1 * (x2 - x3);\n        double numer2 = (y2 - y1) * x3 * (x2 - x1);\n        double xa = (numer1 - numer2) / (denom1 + denom2);\n        double ya = f.value(xa);\n\n        // check for convergence\n        double tolerance = Math.max(relativeAccuracy * Math.abs(xa), absoluteAccuracy);\n        if (Math.abs(ya) <= functionValueAccuracy || Math.abs(x3 - x1) < tolerance) {\n            setResult(xa, i);\n            return result;\n        }\n\n        // update x1, x2, x3 and y1, y2, y3\n        if (ya * y2 < 0) { // root between x2 and xa\n            x1 = x2;\n            y1 = y2;\n            x3 = xa;\n            y3 = ya;\n        } else if (ya * y3 < 0) { // root between x3 and xa\n            x2 = xa;\n            y2 = ya;\n            y1 /= 2.0;\n            y3 /= 2.0;\n        } else { // root between x1 and xa\n            x3 = x2;\n            y3 = y2;\n            x2 = xa;\n            y2 = ya;\n            y1 /= 2.0;\n            y3 /= 2.0;\n        }\n\n    }\n\n    throw new MaxIterationsExceededException(maximalIterationCount);\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex e0cb42714..200a73fa5 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,53 +95,87 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n-                        final double min, final double max, final double initial)\n+public double solve(final UnivariateRealFunction f,\n+                    final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+    clearResult();\n+    verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n-        double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n+    double yInitial = f.value(initial);\n \n-        // return the first endpoint if it is good enough\n-        double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+    // if either endpoint is a root, return it\n+    if (Math.abs(yMin) <= functionValueAccuracy) {\n+        setResult(min, 0);\n+        return result;\n+    }\n+    if (Math.abs(yMax) <= functionValueAccuracy) {\n+        setResult(max, 0);\n+        return result;\n+    }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n+    // if the initial guess is a root, return it\n+    if (Math.abs(yInitial) <= functionValueAccuracy) {\n+        setResult(initial, 0);\n+        return result;\n+    }\n \n-        // return the second endpoint if it is good enough\n-        double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n+    if (yMin * yMax > 0) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+              NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+    }\n+\n+    double x1 = min;\n+    double x2 = initial;\n+    double x3 = max;\n+    double y1 = yMin;\n+    double y2 = yInitial;\n+    double y3 = yMax;\n+\n+    for (int i = 0; i < maximalIterationCount; ++i) {\n+\n+        // polynomials interpolating f at x1, x2, x3\n+        double denom1 = (x2 - x1) * (y2 - y3);\n+        double denom2 = (x3 - x2) * (y2 - y1);\n+        double numer1 = (y2 - y3) * x1 * (x2 - x3);\n+        double numer2 = (y2 - y1) * x3 * (x2 - x1);\n+        double xa = (numer1 - numer2) / (denom1 + denom2);\n+        double ya = f.value(xa);\n+\n+        // check for convergence\n+        double tolerance = Math.max(relativeAccuracy * Math.abs(xa), absoluteAccuracy);\n+        if (Math.abs(ya) <= functionValueAccuracy || Math.abs(x3 - x1) < tolerance) {\n+            setResult(xa, i);\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n+        // update x1, x2, x3 and y1, y2, y3\n+        if (ya * y2 < 0) { // root between x2 and xa\n+            x1 = x2;\n+            y1 = y2;\n+            x3 = xa;\n+            y3 = ya;\n+        } else if (ya * y3 < 0) { // root between x3 and xa\n+            x2 = xa;\n+            y2 = ya;\n+            y1 /= 2.0;\n+            y3 /= 2.0;\n+        } else { // root between x1 and xa\n+            x3 = x2;\n+            y3 = y2;\n+            x2 = xa;\n+            y2 = ya;\n+            y1 /= 2.0;\n+            y3 /= 2.0;\n         }\n \n-        if (yMin * yMax > 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n-        }\n+    }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+    throw new MaxIterationsExceededException(maximalIterationCount);\n \n-    }\n+}\n \n     /**\n      * Find a zero in the given interval.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<-Infinity> but was:<1.0>",
    "test_result": "FAIL"
}