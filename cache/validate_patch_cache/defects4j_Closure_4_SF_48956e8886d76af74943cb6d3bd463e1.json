{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolved = resolveViaRegistry(t, enclosing);\n\n    switch(getJSError()) {\n        case OK:\n            if (detectImplicitPrototypeCycle()) {\n                handleTypeCycle(t);\n            }\n            super.resolveInternal(t, enclosing);\n            finishPropertyContinuations();\n            return registry.isLastGeneration() ? getReferencedType() : this;\n\n        case FAIL:\n            resolveViaProperties(t, enclosing);\n\n            switch(getJSError()) {\n                case OK:\n                    if (detectImplicitPrototypeCycle()) {\n                        handleTypeCycle(t);\n                    }\n                    \n                    super.resolveInternal(t, enclosing);\n                    if (isResolved()) {\n                        finishPropertyContinuations();\n                    }\n                    return registry.isLastGeneration() ? getReferencedType() : this;\n                    \n                default:\n                    return this;\n            }\n            \n        default:\n            return this;\n    }\n}\n\nprivate JSError getJSError() {\n    int numErrors = getNumErrors() + getNumWarnings();\n    if (numErrors == 0) {\n      return JSError.OK;\n    }\n    \n    if (numErrors == 1) {\n      JSError lastError = getFirstError();\n\n      // Ignore some errors.\n      if (lastError.getType() == JSErrorType.REDECLARED_VARIABLE ||\n          lastError.getType() == JSErrorType.MISSING_RETURN_STATEMENT ||\n          lastError.getType() == JSErrorType.UNDEFINED_VAR ||\n          lastError.getType() == JSErrorType.DUPLICATE_OBJECT_KEY ||\n          lastError.getType() == JSErrorType.SUSPICIOUS_SEMICOLON ||\n          lastError.getType() == JSErrorType.MISSING_PROPERTIES ||\n          lastError.getType() == JSErrorType.MISSING_RETURN_TYPE ||\n          lastError.getType() == JSErrorType.EVAL_NOT_ALLOWED) {\n        return JSError.OK;\n      }\n      \n      return JSError.FAIL;\n      \n    } else {\n      return JSError.FAIL;\n    }\n  }\n\nprivate enum JSError {\n    OK,\n    FAIL\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..174d90e9 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,75 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n     boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+    switch(getJSError()) {\n+        case OK:\n+            if (detectImplicitPrototypeCycle()) {\n+                handleTypeCycle(t);\n+            }\n+            super.resolveInternal(t, enclosing);\n+            finishPropertyContinuations();\n+            return registry.isLastGeneration() ? getReferencedType() : this;\n+\n+        case FAIL:\n+            resolveViaProperties(t, enclosing);\n+\n+            switch(getJSError()) {\n+                case OK:\n+                    if (detectImplicitPrototypeCycle()) {\n+                        handleTypeCycle(t);\n+                    }\n+                    \n+                    super.resolveInternal(t, enclosing);\n+                    if (isResolved()) {\n+                        finishPropertyContinuations();\n+                    }\n+                    return registry.isLastGeneration() ? getReferencedType() : this;\n+                    \n+                default:\n+                    return this;\n+            }\n+            \n+        default:\n+            return this;\n     }\n+}\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+private JSError getJSError() {\n+    int numErrors = getNumErrors() + getNumWarnings();\n+    if (numErrors == 0) {\n+      return JSError.OK;\n     }\n-\n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n+    \n+    if (numErrors == 1) {\n+      JSError lastError = getFirstError();\n+\n+      // Ignore some errors.\n+      if (lastError.getType() == JSErrorType.REDECLARED_VARIABLE ||\n+          lastError.getType() == JSErrorType.MISSING_RETURN_STATEMENT ||\n+          lastError.getType() == JSErrorType.UNDEFINED_VAR ||\n+          lastError.getType() == JSErrorType.DUPLICATE_OBJECT_KEY ||\n+          lastError.getType() == JSErrorType.SUSPICIOUS_SEMICOLON ||\n+          lastError.getType() == JSErrorType.MISSING_PROPERTIES ||\n+          lastError.getType() == JSErrorType.MISSING_RETURN_TYPE ||\n+          lastError.getType() == JSErrorType.EVAL_NOT_ALLOWED) {\n+        return JSError.OK;\n+      }\n+      \n+      return JSError.FAIL;\n+      \n+    } else {\n+      return JSError.FAIL;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n   }\n \n+private enum JSError {\n+    OK,\n+    FAIL\n+}\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}