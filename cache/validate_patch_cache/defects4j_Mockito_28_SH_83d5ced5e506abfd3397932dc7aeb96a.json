{
    "patch": "        List<Field> fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);\n        for (Object mock : mocks) {\n            List<Field> candidateFields = getCandidateFields(mock, fields);\n            for (Field field : candidateFields) {\n                if (canBeInjectedByType(field.getType(), mock.getClass())) {\n                    field.setAccessible(true);\n                    try {\n                        field.set(fieldInstance, mock);\n                        return;\n                    } catch (IllegalAccessException e) {\n                        throw new IllegalArgumentException(e.getMessage(), e);\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..679898d0f 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,23 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+        List<Field> fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);\n+        for (Object mock : mocks) {\n+            List<Field> candidateFields = getCandidateFields(mock, fields);\n+            for (Field field : candidateFields) {\n+                if (canBeInjectedByType(field.getType(), mock.getClass())) {\n+                    field.setAccessible(true);\n+                    try {\n+                        field.set(fieldInstance, mock);\n+                        return;\n+                    } catch (IllegalAccessException e) {\n+                        throw new IllegalArgumentException(e.getMessage(), e);\n+                    }\n+                }\n+            }\n         }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}