{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        // If constructorType is a NoObjectType, then toMaybeFunctionType will\n        // return null. But NoObjectType implements the FunctionType\n        // interface, precisely because it can validly construct objects.\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        // Create a new FlowScope with all type constraints from the constructor's arguments\n        type = ct.getInstanceType();\n        JSDocInfo jsDocInfo = NodeUtil.getBestJSDocInfo(n);\n        if (jsDocInfo != null && jsDocInfo.getParameterCount() > 0\n            && jsDocInfo.getParameterCount() == NodeUtil.getFunctionParameters(ct).length()) {\n          // There is JSDoc information on the constructor call,\n          // so generate a FlowScope using the declared types.\n          type = inferTemplateTypeInTypeInstantiation(jsDocInfo, type, scope);\n        } else if (constructor.hasMoreThanOneChild()) {\n          // Fall back to inferring type constraints by creating a new FlowScope with all type\n          // constraints from the arguments.\n          type = inferTemplateTypeInTypeInstantiation(n, type, scope);\n        }\n      }\n    }\n  }\n  n.setJSType(type);\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..8c066d91 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,47 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+\n+  Node constructor = n.getFirstChild();\n+  scope = traverse(constructor, scope);\n+  JSType constructorType = constructor.getJSType();\n+  JSType type = null;\n+  if (constructorType != null) {\n+    constructorType = constructorType.restrictByNotNullOrUndefined();\n+    if (constructorType.isUnknownType()) {\n+      type = getNativeType(UNKNOWN_TYPE);\n+    } else {\n+      FunctionType ct = constructorType.toMaybeFunctionType();\n+      if (ct == null && constructorType instanceof FunctionType) {\n+        // If constructorType is a NoObjectType, then toMaybeFunctionType will\n+        // return null. But NoObjectType implements the FunctionType\n+        // interface, precisely because it can validly construct objects.\n+        ct = (FunctionType) constructorType;\n+      }\n+      if (ct != null && ct.isConstructor()) {\n+        // Create a new FlowScope with all type constraints from the constructor's arguments\n+        type = ct.getInstanceType();\n+        JSDocInfo jsDocInfo = NodeUtil.getBestJSDocInfo(n);\n+        if (jsDocInfo != null && jsDocInfo.getParameterCount() > 0\n+            && jsDocInfo.getParameterCount() == NodeUtil.getFunctionParameters(ct).length()) {\n+          // There is JSDoc information on the constructor call,\n+          // so generate a FlowScope using the declared types.\n+          type = inferTemplateTypeInTypeInstantiation(jsDocInfo, type, scope);\n+        } else if (constructor.hasMoreThanOneChild()) {\n+          // Fall back to inferring type constraints by creating a new FlowScope with all type\n+          // constraints from the arguments.\n+          type = inferTemplateTypeInTypeInstantiation(n, type, scope);\n         }\n       }\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n-    }\n-    return scope;\n   }\n+  n.setJSType(type);\n+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+    scope = traverse(arg, scope);\n+  }\n+  return scope;\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: method getFunctionParameters in class NodeUtil cannot be applied to given types;",
    "test_result": "ERROR"
}