{
    "patch": "      final Name name = functionNode.getFunctionName();\n      Node node = newNode(Token.FUNCTION, createName(name));\n      node.addChildToBack(newNode(Token.LP));\n      for (AstNode param : functionNode.getParams()) {\n        node.getLastChild().addChildToBack(transform(param));\n      }\n      node.getLastChild().addChildToBack(newNode(Token.RP));\n      node.addChildToBack(transform(functionNode.getBody()));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..bf73b5f4 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,14 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+      final Name name = functionNode.getFunctionName();\n+      Node node = newNode(Token.FUNCTION, createName(name));\n+      node.addChildToBack(newNode(Token.LP));\n+      for (AstNode param : functionNode.getParams()) {\n+        node.getLastChild().addChildToBack(transform(param));\n+      }\n+      node.getLastChild().addChildToBack(newNode(Token.RP));\n+      node.addChildToBack(transform(functionNode.getBody()));\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: variable name is already defined in method processFunctionNode(FunctionNode)",
    "test_result": "ERROR"
}