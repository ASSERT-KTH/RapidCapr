{
    "patch": "public String unescape(String s) {\n    StringWriter out = new StringWriter(s.length());\n    for (int i = 0; i < s.length(); i++) {\n        char ch = s.charAt(i);\n        switch (ch) {\n            case '\\\\':\n                if (i < s.length() - 1) {\n                    char nextChar = s.charAt(++i);\n                    switch (nextChar) {\n                        case '\\'':\n                            out.write('\\'');\n                            break;\n                        case '\\\"':\n                            out.write('\\\"');\n                            break;\n                        case '\\\\':\n                            out.write('\\\\');\n                            break;\n                        case 'n':\n                            out.write('\\n');\n                            break;\n                        case 'r':\n                            out.write('\\r');\n                            break;\n                        case 't':\n                            out.write('\\t');\n                            break;\n                        case 'b':\n                            out.write('\\b');\n                            break;\n                        case 'f':\n                            out.write('\\f');\n                            break;\n                        case 'u':\n                            if (i < s.length() - 5) {\n                                char uniChar = (char) Integer.parseInt(s.substring(i + 1, i + 5), 16);\n                                out.write(uniChar);\n                                i += 4;\n                            }\n                            break;\n                        default:\n                            out.write(nextChar);\n                            break;\n                    }\n                } else {\n                    out.write(ch);\n                }\n                break;\n            default:\n                out.write(ch);\n                break;\n        }\n    }\n    return out.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..cd5bd13a 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,61 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+public String unescape(String s) {\n+    StringWriter out = new StringWriter(s.length());\n+    for (int i = 0; i < s.length(); i++) {\n+        char ch = s.charAt(i);\n+        switch (ch) {\n+            case '\\\\':\n+                if (i < s.length() - 1) {\n+                    char nextChar = s.charAt(++i);\n+                    switch (nextChar) {\n+                        case '\\'':\n+                            out.write('\\'');\n+                            break;\n+                        case '\\\"':\n+                            out.write('\\\"');\n+                            break;\n+                        case '\\\\':\n+                            out.write('\\\\');\n+                            break;\n+                        case 'n':\n+                            out.write('\\n');\n+                            break;\n+                        case 'r':\n+                            out.write('\\r');\n+                            break;\n+                        case 't':\n+                            out.write('\\t');\n+                            break;\n+                        case 'b':\n+                            out.write('\\b');\n+                            break;\n+                        case 'f':\n+                            out.write('\\f');\n+                            break;\n+                        case 'u':\n+                            if (i < s.length() - 5) {\n+                                char uniChar = (char) Integer.parseInt(s.substring(i + 1, i + 5), 16);\n+                                out.write(uniChar);\n+                                i += 4;\n+                            }\n+                            break;\n+                        default:\n+                            out.write(nextChar);\n+                            break;\n+                    }\n+                } else {\n+                    out.write(ch);\n+                }\n+                break;\n+            default:\n+                out.write(ch);\n+                break;\n+        }\n+    }\n+    return out.toString();\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}