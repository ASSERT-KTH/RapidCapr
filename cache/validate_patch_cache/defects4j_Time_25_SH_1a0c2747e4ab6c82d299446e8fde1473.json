{
    "patch": "                \n                // check for the case where nextAdjusted = Long.MIN_VALUE\n                // and nextLocal != Long.MIN_VALUE\n                if (nextLocal != nextAdjusted) {\n                    if (nextAdjusted == Long.MIN_VALUE) {\n                        return offsetAdjusted;\n                    }\n                    if (getOffset(nextLocal) != offsetLocal) {\n                        // pick the closest offset\n                        long prevLocal = previousTransition(nextLocal);\n                        long prevAdjusted = previousTransition(nextAdjusted);\n                        if (prevLocal == prevAdjusted) {\n                            return offsetLocal;\n                        } else if (offsetLocal < offsetAdjusted) {\n                            return getOffset(prevAdjusted);\n                        } else {\n                            return offsetLocal;\n                        }\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..9f1dac51 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,25 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                \n+                // check for the case where nextAdjusted = Long.MIN_VALUE\n+                // and nextLocal != Long.MIN_VALUE\n+                if (nextLocal != nextAdjusted) {\n+                    if (nextAdjusted == Long.MIN_VALUE) {\n+                        return offsetAdjusted;\n+                    }\n+                    if (getOffset(nextLocal) != offsetLocal) {\n+                        // pick the closest offset\n+                        long prevLocal = previousTransition(nextLocal);\n+                        long prevAdjusted = previousTransition(nextAdjusted);\n+                        if (prevLocal == prevAdjusted) {\n+                            return offsetLocal;\n+                        } else if (offsetLocal < offsetAdjusted) {\n+                            return getOffset(prevAdjusted);\n+                        } else {\n+                            return offsetLocal;\n+                        }\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}