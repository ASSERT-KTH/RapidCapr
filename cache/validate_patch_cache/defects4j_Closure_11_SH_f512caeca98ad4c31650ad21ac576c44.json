{
    "patch": "  private void checkPropAccess(NodeTraversal t, Node n, Node parent) {\n    if (ignoreReturnValue && parent.isExprResult()) {\n      return;\n    }\n\n    if (!NodeUtil.isGet(n)) {\n      return;\n    }\n\n    // Only check properties for Node types that are objects in JS.\n    if (n.getFirstChild() != null && !isNativeObjectType(n.getFirstChild().getJSType())) {\n      return;\n    }\n\n    if (parent.isAssign() || parent.isInc() || parent.isDec()) {\n      if (NodeUtil.isQualifiedName(n)) {\n        warnings.add(JSError.make(n, UNSAFE_PROP_ASSIGN));\n      } else {\n        warnings.add(JSError.make(n, UNSAFE_VAR_ASSIGN));\n      }\n      return;\n    }\n\n    if (n.getJSType() != null) {\n      if (parent.isAssign()) {\n        return;\n      }\n      warnings.add(JSError.make(n, UNSAFE_PROP_ASSIGN));\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}