{
    "patch": "JSType resolvedThisType = safeResolve(typeOfThis, t, scope);\nif (resolvedThisType instanceof ObjectType) {\n  typeOfThis = (ObjectType) resolvedThisType;\n} else if (resolvedThisType instanceof NamedType) {\n  JSType referencedType = ((NamedType) resolvedThisType).getReferencedType();\n  if (referencedType instanceof ObjectType) {\n    typeOfThis = (ObjectType) referencedType;\n  } else {\n    // Set typeOfThis to UNKNOWN_TYPE because the referencedNamedType is not ObjectType\n    typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n  }\n} else {\n  // Set typeOfThis to UNKNOWN_TYPE because resolvedThisType is not ObjectType nor NamedType\n  typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..90a64cfd 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,21 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+JSType resolvedThisType = safeResolve(typeOfThis, t, scope);\n+if (resolvedThisType instanceof ObjectType) {\n+  typeOfThis = (ObjectType) resolvedThisType;\n+} else if (resolvedThisType instanceof NamedType) {\n+  JSType referencedType = ((NamedType) resolvedThisType).getReferencedType();\n+  if (referencedType instanceof ObjectType) {\n+    typeOfThis = (ObjectType) referencedType;\n+  } else {\n+    // Set typeOfThis to UNKNOWN_TYPE because the referencedNamedType is not ObjectType\n+    typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n+  }\n+} else {\n+  // Set typeOfThis to UNKNOWN_TYPE because resolvedThisType is not ObjectType nor NamedType\n+  typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n+}\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}