{
    "patch": "public double[] fit() {\n    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n    final double sigmaGoal = Math.max(DEFAULT_ABSOLUTE_THRESHOLD * getObservations().getMaxValue(),\n                                      DEFAULT_RELATIVE_THRESHOLD * getObservations().getRMS());\n    final double initialSigma = getObservations().getRMS();\n    final double[] weights = new double[getObservations().getDimension()];\n\n    if (initialSigma <= 0) {\n        Arrays.fill(weights, Double.POSITIVE_INFINITY);\n    } else {\n        // Compute optimal weights using IRLS algorithm\n        int i = 0;\n        double[] residuals = getResiduals();\n        for (double residual : residuals) {\n            double weight = Math.min(1.0, Math.abs(residual / sigmaGoal));\n            weight = weight * weight;\n            weights[i] = weight;\n            i++;\n        }\n    }\n    return fit(new Gaussian.Parametric(), guess, new org.apache.commons.math4.fitting.AbstractCurveFitter.Weight(weights));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..1760d99d6 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -116,10 +116,28 @@ public class GaussianFitter extends CurveFitter {\n      * @return the parameters of the Gaussian function that best fits the\n      * observed points (in the same order as above).\n      */\n-    public double[] fit() {\n-        final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+public double[] fit() {\n+    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n+    final double sigmaGoal = Math.max(DEFAULT_ABSOLUTE_THRESHOLD * getObservations().getMaxValue(),\n+                                      DEFAULT_RELATIVE_THRESHOLD * getObservations().getRMS());\n+    final double initialSigma = getObservations().getRMS();\n+    final double[] weights = new double[getObservations().getDimension()];\n+\n+    if (initialSigma <= 0) {\n+        Arrays.fill(weights, Double.POSITIVE_INFINITY);\n+    } else {\n+        // Compute optimal weights using IRLS algorithm\n+        int i = 0;\n+        double[] residuals = getResiduals();\n+        for (double residual : residuals) {\n+            double weight = Math.min(1.0, Math.abs(residual / sigmaGoal));\n+            weight = weight * weight;\n+            weights[i] = weight;\n+            i++;\n+        }\n     }\n+    return fit(new Gaussian.Parametric(), guess, new org.apache.commons.math4.fitting.AbstractCurveFitter.Weight(weights));\n+}\n \n     /**\n      * Guesses the parameters {@code norm}, {@code mean}, and {@code sigma}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}