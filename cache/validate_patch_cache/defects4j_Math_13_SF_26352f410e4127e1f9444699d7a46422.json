{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n      LUDecomposition decomp = new LUDecomposition(m);\n      RealMatrix l = decomp.getL();\n      RealMatrix u = decomp.getU();\n      RealMatrix d = MatrixUtils.createRealDiagonalMatrix(\n          // compute the square root of each diagonal entry of U\n          u.getColumn(0)[0] >= 0 ? new double[]{ FastMath.sqrt(u.getEntry(0,0)) } : new double[]{ },\n          IntStream.range(1, u.getRowDimension())\n              .mapToDouble(i -> u.getEntry(i,i) < 0 ? 0 : FastMath.sqrt(u.getEntry(i,i)))\n              .toArray());\n      RealMatrix lInverse = new LUDecomposition(l).getSolver().getInverse();\n      return l.multiply(d).multiply(lInverse);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..239c4632e 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,16 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+      LUDecomposition decomp = new LUDecomposition(m);\n+      RealMatrix l = decomp.getL();\n+      RealMatrix u = decomp.getU();\n+      RealMatrix d = MatrixUtils.createRealDiagonalMatrix(\n+          // compute the square root of each diagonal entry of U\n+          u.getColumn(0)[0] >= 0 ? new double[]{ FastMath.sqrt(u.getEntry(0,0)) } : new double[]{ },\n+          IntStream.range(1, u.getRowDimension())\n+              .mapToDouble(i -> u.getEntry(i,i) < 0 ? 0 : FastMath.sqrt(u.getEntry(i,i)))\n+              .toArray());\n+      RealMatrix lInverse = new LUDecomposition(l).getSolver().getInverse();\n+      return l.multiply(d).multiply(lInverse);\n     }\n }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}