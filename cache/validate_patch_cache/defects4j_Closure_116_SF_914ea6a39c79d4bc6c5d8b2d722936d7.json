{
    "patch": "  private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n    Node funcParam = NodeUtil.getFunctionParameters(fnNode);\n    Node callArg = callNode.getLastChild();\n\n    while (funcParam != null && callArg != null) {\n\n      if (funcParam.isRest()) {\n        Node paramPrev = funcParam.getPrevious();\n        if (paramPrev != null) {\n          // don't treat rest parameter as the only parameter.\n          funcParam = paramPrev;\n        } else {\n          // single rest parameter captures all args\n          return CanInlineResult.YES;\n        }\n      }\n\n      if (!funcParam.isName()) {\n        // Unexpected arguments.\n        return CanInlineResult.NO;\n      }\n\n      String paramName = funcParam.getString();\n\n      if (NodeUtil.mayEffectMutableState(callArg, compiler)\n          && NodeUtil.getNameReferenceCount(block, paramName) > 1) {\n        // Parameter is evaluated more than once and the argument has side-effects\n        return CanInlineResult.NO;\n      }\n      if (NodeUtil.mayHaveSideEffects(callArg, compiler)) {\n        // Argument has side-effects\n        return CanInlineResult.NO;\n      }\n      funcParam = funcParam.getNext();\n      callArg = callArg.getPrevious();\n    }\n\n    if (funcParam != null || callArg != null) {\n      // Different number of params and args.\n      return CanInlineResult.NO;\n    }\n\n    // all checks passed, can inline",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..de112f49 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,67 +686,54 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+  private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n     }\n \n     Node block = fnNode.getLastChild();\n+    Node funcParam = NodeUtil.getFunctionParameters(fnNode);\n+    Node callArg = callNode.getLastChild();\n \n+    while (funcParam != null && callArg != null) {\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n-\n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n+      if (funcParam.isRest()) {\n+        Node paramPrev = funcParam.getPrevious();\n+        if (paramPrev != null) {\n+          // don't treat rest parameter as the only parameter.\n+          funcParam = paramPrev;\n+        } else {\n+          // single rest parameter captures all args\n+          return CanInlineResult.YES;\n         }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n       }\n-    }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+      if (!funcParam.isName()) {\n+        // Unexpected arguments.\n+        return CanInlineResult.NO;\n       }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+      String paramName = funcParam.getString();\n+\n+      if (NodeUtil.mayEffectMutableState(callArg, compiler)\n+          && NodeUtil.getNameReferenceCount(block, paramName) > 1) {\n+        // Parameter is evaluated more than once and the argument has side-effects\n+        return CanInlineResult.NO;\n+      }\n+      if (NodeUtil.mayHaveSideEffects(callArg, compiler)) {\n+        // Argument has side-effects\n+        return CanInlineResult.NO;\n       }\n+      funcParam = funcParam.getNext();\n+      callArg = callArg.getPrevious();\n     }\n \n-    return CanInlineResult.YES;\n-  }\n+    if (funcParam != null || callArg != null) {\n+      // Different number of params and args.\n+      return CanInlineResult.NO;\n+    }\n+\n+    // all checks passed, can inline\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}