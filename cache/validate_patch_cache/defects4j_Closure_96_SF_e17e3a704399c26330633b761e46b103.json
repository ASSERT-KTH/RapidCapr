{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    List<Node> arguments = call.children().subList(1, call.getChildCount());\n    List<Node> parameters = Lists.newArrayList(functionType.getParameters());\n\n    int numArgs = arguments.size();\n    int minArgs = functionType.getMinArguments();\n    boolean varArgs = false;\n    if (parameters.size() > 0 && parameters.get(parameters.size() - 1).isVarArgs()) {\n      varArgs = true;\n    }\n    int maxArgs = varArgs ? Integer.MAX_VALUE : parameters.size();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      String message = String.format(\"expected %s arguments; found %s\",\n          functionType.toSignature(), call.toStringTree());\n      report(t, call, WRONG_ARGUMENT_COUNT, message);\n      return;\n    }\n\n    for (int i = 0; i < parameters.size(); i++) {\n      Node parameter = parameters.get(i);\n      JSType parameterType = getJSType(parameter);\n      int ordinal = i + 1;\n\n      if (!arguments.isEmpty()) {\n        if (parameter.isVarArgs()) {\n          parameterType = parameterType.evaluate(scope);\n          for (Node argument : arguments) {\n            validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n                parameterType, call, ordinal++);\n          }\n          return;\n        } else {\n          Node argument = arguments.remove(0);\n          JSType argumentType = getJSType(argument);\n          validator.expectArgumentMatchesParameter(t, argument, argumentType,\n              parameterType, call, ordinal);\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..f9cf6e8b 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,45 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n+private void visitParameterList(NodeTraversal t, Node call,\n       FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n+    List<Node> arguments = call.children().subList(1, call.getChildCount());\n+    List<Node> parameters = Lists.newArrayList(functionType.getParameters());\n \n-    int numArgs = call.getChildCount() - 1;\n+    int numArgs = arguments.size();\n     int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n+    boolean varArgs = false;\n+    if (parameters.size() > 0 && parameters.get(parameters.size() - 1).isVarArgs()) {\n+      varArgs = true;\n+    }\n+    int maxArgs = varArgs ? Integer.MAX_VALUE : parameters.size();\n     if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+      String message = String.format(\"expected %s arguments; found %s\",\n+          functionType.toSignature(), call.toStringTree());\n+      report(t, call, WRONG_ARGUMENT_COUNT, message);\n+      return;\n     }\n-  }\n+\n+    for (int i = 0; i < parameters.size(); i++) {\n+      Node parameter = parameters.get(i);\n+      JSType parameterType = getJSType(parameter);\n+      int ordinal = i + 1;\n+\n+      if (!arguments.isEmpty()) {\n+        if (parameter.isVarArgs()) {\n+          parameterType = parameterType.evaluate(scope);\n+          for (Node argument : arguments) {\n+            validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+                parameterType, call, ordinal++);\n+          }\n+          return;\n+        } else {\n+          Node argument = arguments.remove(0);\n+          JSType argumentType = getJSType(argument);\n+          validator.expectArgumentMatchesParameter(t, argument, argumentType,\n+              parameterType, call, ordinal);\n+        }\n+      }\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}