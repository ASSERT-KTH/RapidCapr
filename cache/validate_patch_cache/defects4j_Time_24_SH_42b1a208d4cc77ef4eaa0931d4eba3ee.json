{
    "patch": "    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        if (e.getIllegalFieldValue() == DateTimeConstants.WEEK_OF_YEAR_LIMIT) {\n            // dayOfWeek is bad and it is the only error\n            DateTimeField dayOfWeek = iChrono.dayOfWeek();\n            int max = dayOfWeek.getMaximumValue();\n            int dayOrdinal = findOrdinal(savedFields, count, dayOfWeek);\n            int dayValue = savedFields[dayOrdinal].getValue();\n            int lastDOW = firstDayOfWeek + max - 1;\n            if (dayValue < firstDayOfWeek || dayValue > lastDOW) {\n                // day of week is out of range, calculation can continue using a recent year\n                saveField(DateTimeFieldType.year(), iDefaultYear - 1);\n                return computeMillis(resetFields, text);\n            }\n        }\n        throw e;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..c50f3ad3 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,25 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        if (e.getIllegalFieldValue() == DateTimeConstants.WEEK_OF_YEAR_LIMIT) {\n+            // dayOfWeek is bad and it is the only error\n+            DateTimeField dayOfWeek = iChrono.dayOfWeek();\n+            int max = dayOfWeek.getMaximumValue();\n+            int dayOrdinal = findOrdinal(savedFields, count, dayOfWeek);\n+            int dayValue = savedFields[dayOrdinal].getValue();\n+            int lastDOW = firstDayOfWeek + max - 1;\n+            if (dayValue < firstDayOfWeek || dayValue > lastDOW) {\n+                // day of week is out of range, calculation can continue using a recent year\n+                saveField(DateTimeFieldType.year(), iDefaultYear - 1);\n+                return computeMillis(resetFields, text);\n+            }\n+        }\n+        throw e;\n+    }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}