{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    } else if (constraint.isStructuralInterface() && type.isSubtypeOf(constraint)) {\n      for (String prop : constraint.getOwnPropertyNames()) {\n        JSType propType = constraint.getPropertyType(prop);\n        if (!type.hasProperty(prop) &&\n            (!propType.isUnknownType() ||\n             propType.isUnknownType() && options.inferTypes)) {\n          FunctionType ft = propType.getFunTypeIfSingletonObj();\n          if (ft == null) {\n            type.defineInferredProperty(prop, propType, null);\n          } else {\n            // Structural interfaces may have methods, so we need to merge the types.\n            JSType typeToInfer = getNativeType(VOID_TYPE);\n            if (type.hasDeclaredProperty(prop)) {\n              typeToInfer = type.getDeclaredPropertyType(prop);\n            }\n            type.defineInferredProperty(prop,\n                ft.withReceiverType(typeToInfer).toJSType(getCommonTypes()), null);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * If we access a property of a symbol, then that symbol is not\n   * null or undefined.\n   */\n  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.isQualifiedName()) {\n      JSType type = getJSType(n);\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (type != narrowed) {\n        scope = narrowScope(scope, n, narrowed);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..8aefc3f7 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1133,6 +1133,40 @@ class TypeInference\n           }\n         }\n       }\n+    } else if (constraint.isStructuralInterface() && type.isSubtypeOf(constraint)) {\n+      for (String prop : constraint.getOwnPropertyNames()) {\n+        JSType propType = constraint.getPropertyType(prop);\n+        if (!type.hasProperty(prop) &&\n+            (!propType.isUnknownType() ||\n+             propType.isUnknownType() && options.inferTypes)) {\n+          FunctionType ft = propType.getFunTypeIfSingletonObj();\n+          if (ft == null) {\n+            type.defineInferredProperty(prop, propType, null);\n+          } else {\n+            // Structural interfaces may have methods, so we need to merge the types.\n+            JSType typeToInfer = getNativeType(VOID_TYPE);\n+            if (type.hasDeclaredProperty(prop)) {\n+              typeToInfer = type.getDeclaredPropertyType(prop);\n+            }\n+            type.defineInferredProperty(prop,\n+                ft.withReceiverType(typeToInfer).toJSType(getCommonTypes()), null);\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * If we access a property of a symbol, then that symbol is not\n+   * null or undefined.\n+   */\n+  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n+    if (n.isQualifiedName()) {\n+      JSType type = getJSType(n);\n+      JSType narrowed = type.restrictByNotNullOrUndefined();\n+      if (type != narrowed) {\n+        scope = narrowScope(scope, n, narrowed);\n+      }\n     }\n   }\n ",
    "result_reason": "error: method dereferencePointer(Node,FlowScope) is already defined in class TypeInference",
    "test_result": "ERROR"
}