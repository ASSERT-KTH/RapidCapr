{
    "patch": "public double getTypedPercent(String js) {\n    ScriptEngineManager mgr = new ScriptEngineManager();\n    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n    try {\n        engine.eval(js);\n        Invocable inv = (Invocable) engine;\n        double correct = 0;\n        double total = 0;\n        for (String key : inv.getBindings(ScriptContext.ENGINE_SCOPE).keySet()) {\n            total++;\n            if (inv.getBindings(ScriptContext.ENGINE_SCOPE).get(key) instanceof Number) {\n                Number n = (Number) inv.getBindings(ScriptContext.ENGINE_SCOPE).get(key);\n                if (n.doubleValue() > 0) {\n                    correct++;\n                }\n            }\n        }\n        return (correct / total) * 100;\n    } catch (Exception e) {\n        e.printStackTrace();\n        return -1;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..58ee9756 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,29 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public double getTypedPercent(String js) {\n+    ScriptEngineManager mgr = new ScriptEngineManager();\n+    ScriptEngine engine = mgr.getEngineByName(\"JavaScript\");\n+    try {\n+        engine.eval(js);\n+        Invocable inv = (Invocable) engine;\n+        double correct = 0;\n+        double total = 0;\n+        for (String key : inv.getBindings(ScriptContext.ENGINE_SCOPE).keySet()) {\n+            total++;\n+            if (inv.getBindings(ScriptContext.ENGINE_SCOPE).get(key) instanceof Number) {\n+                Number n = (Number) inv.getBindings(ScriptContext.ENGINE_SCOPE).get(key);\n+                if (n.doubleValue() > 0) {\n+                    correct++;\n+                }\n+            }\n+        }\n+        return (correct / total) * 100;\n+    } catch (Exception e) {\n+        e.printStackTrace();\n+        return -1;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}