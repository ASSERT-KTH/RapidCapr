{
    "patch": "public static double getTypedPercent(String json) {\n    int count = 0;\n    try {\n        JSONObject jsonObject = new JSONObject(json);\n\n        Iterator<String> keys = jsonObject.keys();\n        while (keys.hasNext()) {\n            String key = keys.next();\n            if (jsonObject.optBoolean(key)) {\n                count++;\n            }\n        }\n\n        return (count * 100.0) / jsonObject.length();\n    } catch (JSONException e) {\n        e.printStackTrace();\n        return -1;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..d7a71592 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    int count = 0;\n+    try {\n+        JSONObject jsonObject = new JSONObject(json);\n+\n+        Iterator<String> keys = jsonObject.keys();\n+        while (keys.hasNext()) {\n+            String key = keys.next();\n+            if (jsonObject.optBoolean(key)) {\n+                count++;\n+            }\n+        }\n+\n+        return (count * 100.0) / jsonObject.length();\n+    } catch (JSONException e) {\n+        e.printStackTrace();\n+        return -1;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}