{
    "patch": "    if (left.getType() == Token.ARRAYLIT && left.hasOneChild()) {\n      Node elem = left.getFirstChild();\n      int index = (int) right.getDouble();\n      if (index < 0 || index >= elem.getChildCount()) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      }\n\n      Node val = elem.getChildAtIndex(index).detachFromParent();\n      n.getParent().replaceChild(n, val);\n      reportCodeChange();\n      return val;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..5f869d9c 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,18 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+    if (left.getType() == Token.ARRAYLIT && left.hasOneChild()) {\n+      Node elem = left.getFirstChild();\n+      int index = (int) right.getDouble();\n+      if (index < 0 || index >= elem.getChildCount()) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+      }\n+\n+      Node val = elem.getChildAtIndex(index).detachFromParent();\n+      n.getParent().replaceChild(n, val);\n+      reportCodeChange();\n+      return val;\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}