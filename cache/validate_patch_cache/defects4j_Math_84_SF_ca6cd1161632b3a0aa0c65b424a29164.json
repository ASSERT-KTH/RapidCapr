{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n\n        RealPointValuePair[] replacement = null;\n        boolean reflectedIsBetter;\n        if (comparator.compare(reflected, original[original.length - 1]) < 0) {\n            // Compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, ReflectionCoefficient.EXPANSION_COEFFICIENT, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                replacement = replaceWorstPoint(original, expanded, comparator);\n            } else {\n                replacement = replaceWorstPoint(original, reflected, comparator);\n            }\n            reflectedIsBetter = true; // Expansion is always better than reflection\n        } else if (comparator.compare(reflected, original[0]) >= 0) {\n            // Compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, ReflectionCoefficient.CONTRACTION_COEFFICIENT, comparator);\n            if (comparator.compare(contracted, original[original.length - 1]) < 0) {\n                replacement = replaceWorstPoint(original, contracted, comparator);\n            } else {\n                replacement = shrinkSimplex(original, comparator);\n            }\n            reflectedIsBetter = false; // Contraction or Shrink\n        } else {\n            replacement = replaceWorstPoint(original, reflected, comparator); // accept reflection\n            reflectedIsBetter = true;\n        }\n\n        final double newValue = replacement[0].getValue();\n        if (isConverged(best.getValue(), newValue)) {\n            return;\n        }\n\n        final boolean contractionFailed = !reflectedIsBetter && comparator.compare(newValue, best.getValue()) >= 0;\n        if (contractionFailed) {\n            final RealPointValuePair[] contracted = contractInside(original[0]);\n            if (comparator.compare(contracted[0], best) < 0) {\n                replacement = contracted;\n            } // else use the contracted simplex anyways\n        }\n\n        simplex = replacement;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..2dc891b2f 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,60 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+\n+    while (true) {\n+        incrementIterationsCounter();\n+\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n+\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+\n+        RealPointValuePair[] replacement = null;\n+        boolean reflectedIsBetter;\n+        if (comparator.compare(reflected, original[original.length - 1]) < 0) {\n+            // Compute the expanded simplex\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, ReflectionCoefficient.EXPANSION_COEFFICIENT, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                replacement = replaceWorstPoint(original, expanded, comparator);\n+            } else {\n+                replacement = replaceWorstPoint(original, reflected, comparator);\n             }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+            reflectedIsBetter = true; // Expansion is always better than reflection\n+        } else if (comparator.compare(reflected, original[0]) >= 0) {\n+            // Compute the contracted simplex\n+            final RealPointValuePair contracted = evaluateNewSimplex(original, ReflectionCoefficient.CONTRACTION_COEFFICIENT, comparator);\n+            if (comparator.compare(contracted, original[original.length - 1]) < 0) {\n+                replacement = replaceWorstPoint(original, contracted, comparator);\n+            } else {\n+                replacement = shrinkSimplex(original, comparator);\n             }\n+            reflectedIsBetter = false; // Contraction or Shrink\n+        } else {\n+            replacement = replaceWorstPoint(original, reflected, comparator); // accept reflection\n+            reflectedIsBetter = true;\n+        }\n \n+        final double newValue = replacement[0].getValue();\n+        if (isConverged(best.getValue(), newValue)) {\n+            return;\n         }\n \n+        final boolean contractionFailed = !reflectedIsBetter && comparator.compare(newValue, best.getValue()) >= 0;\n+        if (contractionFailed) {\n+            final RealPointValuePair[] contracted = contractInside(original[0]);\n+            if (comparator.compare(contracted[0], best) < 0) {\n+                replacement = contracted;\n+            } // else use the contracted simplex anyways\n+        }\n+\n+        simplex = replacement;\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}