{
    "patch": "public static double getTypedPercent(String json) {\n    int count = 0;\n    int total = 0;\n\n    Pattern p = Pattern.compile(\"\\\"type\\\":\\\".*?\\\"\");\n    Matcher m = p.matcher(json);\n\n    while(m.find()) {\n        total++;\n        if(m.group().endsWith(\"\\\"type\\\":\\\"typed\\\"\")) {\n            count++;\n        }\n    }\n\n    if(total == 0) {\n        return 0.0;\n    }\n\n    return ((double)count / (double)total) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..d8f6a5ec 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) {\n+    int count = 0;\n+    int total = 0;\n+\n+    Pattern p = Pattern.compile(\"\\\"type\\\":\\\".*?\\\"\");\n+    Matcher m = p.matcher(json);\n+\n+    while(m.find()) {\n+        total++;\n+        if(m.group().endsWith(\"\\\"type\\\":\\\"typed\\\"\")) {\n+            count++;\n+        }\n+    }\n+\n+    if(total == 0) {\n+        return 0.0;\n+    }\n+\n+    return ((double)count / (double)total) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}