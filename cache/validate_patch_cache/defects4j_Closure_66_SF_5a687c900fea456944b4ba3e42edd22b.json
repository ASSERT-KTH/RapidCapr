{
    "patch": "public static double getTypedPercent(JsonElement json) {\n    if (json.isJsonNull()) {\n        return 0.0;\n    } else if (json.isJsonPrimitive()) {\n        JsonPrimitive primitive = json.getAsJsonPrimitive();\n        if (primitive.isNumber()) {\n            return primitive.getAsDouble();\n        } else if (primitive.isBoolean()) {\n            return primitive.getAsBoolean() ? 100.0 : 0.0;\n        } else {\n            try {\n                String value = primitive.getAsString();\n                if (value.equalsIgnoreCase(\"true\")) {\n                    return 100.0;\n                } else if (value.equalsIgnoreCase(\"false\")) {\n                    return 0.0;\n                } else {\n                    return Double.parseDouble(value);\n                }\n            } catch (NumberFormatException e) {\n                return 0.0;\n            }\n        }\n    } else if (json.isJsonArray()) {\n        JsonArray array = json.getAsJsonArray();\n        int size = array.size();\n        if (size == 0) {\n            return 0.0;\n        } else {\n            double sum = 0.0;\n            for (JsonElement element : array) {\n                sum += getTypedPercent(element);\n            }\n            return sum / size;\n        }\n    } else if (json.isJsonObject()) {\n        JsonObject object = json.getAsJsonObject();\n        int size = object.size();\n        if (size == 0) {\n            return 0.0;\n        } else {\n            double sum = 0.0;\n            for (Map.Entry<String, JsonElement> entry : object.entrySet()) {\n                sum += getTypedPercent(entry.getValue());\n            }\n            return sum / size;\n        }\n    } else {\n        return 0.0;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..3eedd4b0 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,57 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(JsonElement json) {\n+    if (json.isJsonNull()) {\n+        return 0.0;\n+    } else if (json.isJsonPrimitive()) {\n+        JsonPrimitive primitive = json.getAsJsonPrimitive();\n+        if (primitive.isNumber()) {\n+            return primitive.getAsDouble();\n+        } else if (primitive.isBoolean()) {\n+            return primitive.getAsBoolean() ? 100.0 : 0.0;\n+        } else {\n+            try {\n+                String value = primitive.getAsString();\n+                if (value.equalsIgnoreCase(\"true\")) {\n+                    return 100.0;\n+                } else if (value.equalsIgnoreCase(\"false\")) {\n+                    return 0.0;\n+                } else {\n+                    return Double.parseDouble(value);\n+                }\n+            } catch (NumberFormatException e) {\n+                return 0.0;\n+            }\n+        }\n+    } else if (json.isJsonArray()) {\n+        JsonArray array = json.getAsJsonArray();\n+        int size = array.size();\n+        if (size == 0) {\n+            return 0.0;\n+        } else {\n+            double sum = 0.0;\n+            for (JsonElement element : array) {\n+                sum += getTypedPercent(element);\n+            }\n+            return sum / size;\n+        }\n+    } else if (json.isJsonObject()) {\n+        JsonObject object = json.getAsJsonObject();\n+        int size = object.size();\n+        if (size == 0) {\n+            return 0.0;\n+        } else {\n+            double sum = 0.0;\n+            for (Map.Entry<String, JsonElement> entry : object.entrySet()) {\n+                sum += getTypedPercent(entry.getValue());\n+            }\n+            return sum / size;\n+        }\n+    } else {\n+        return 0.0;\n+    }\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}