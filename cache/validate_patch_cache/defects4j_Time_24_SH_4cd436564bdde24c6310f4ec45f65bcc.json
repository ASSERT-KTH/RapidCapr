{
    "patch": "try {\n    for (int i = 0; i < count; i++) {\n        long newMillis = savedFields[i].set(millis, resetFields);\n        if (newMillis != millis) {\n            DateTimeFieldType currentType = savedFields[i].iField.getType();\n            boolean isYearField = (currentType == DateTimeFieldType.year());\n            boolean isWeekyearField = (currentType == DateTimeFieldType.weekyear());\n            if (isYearField || isWeekyearField) {\n                int parsedValue = savedFields[i].iField.get(newMillis);\n                int defaultValue = isYearField ? iDefaultYear : iChrono.weekyear().get(newMillis);\n                if (parsedValue != defaultValue) {\n                    // Re-parse the fields with the default year/weekyear and return the computed millis\n                    if (isYearField) {\n                        saveField(DateTimeFieldType.year(), iDefaultYear);\n                    } else {\n                        saveField(DateTimeFieldType.weekyear(), defaultValue);\n                    }\n                    return computeMillis(resetFields, text);\n                }\n            } else {\n                throw new IllegalArgumentException(\"Illegal instant due to disallowed field combination\");\n            }\n        }\n        millis = newMillis;\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..aecf2cb3 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,37 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    for (int i = 0; i < count; i++) {\n+        long newMillis = savedFields[i].set(millis, resetFields);\n+        if (newMillis != millis) {\n+            DateTimeFieldType currentType = savedFields[i].iField.getType();\n+            boolean isYearField = (currentType == DateTimeFieldType.year());\n+            boolean isWeekyearField = (currentType == DateTimeFieldType.weekyear());\n+            if (isYearField || isWeekyearField) {\n+                int parsedValue = savedFields[i].iField.get(newMillis);\n+                int defaultValue = isYearField ? iDefaultYear : iChrono.weekyear().get(newMillis);\n+                if (parsedValue != defaultValue) {\n+                    // Re-parse the fields with the default year/weekyear and return the computed millis\n+                    if (isYearField) {\n+                        saveField(DateTimeFieldType.year(), iDefaultYear);\n+                    } else {\n+                        saveField(DateTimeFieldType.weekyear(), defaultValue);\n+                    }\n+                    return computeMillis(resetFields, text);\n+                }\n+            } else {\n+                throw new IllegalArgumentException(\"Illegal instant due to disallowed field combination\");\n+            }\n+        }\n+        millis = newMillis;\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}