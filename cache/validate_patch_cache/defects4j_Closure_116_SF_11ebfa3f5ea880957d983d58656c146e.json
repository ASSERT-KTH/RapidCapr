{
    "patch": "private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    int numParams = NodeUtil.getFunctionParameters(fnNode).getChildCount();\n    int numArgs = 0;\n    boolean[] hasArg = new boolean[numParams];\n    while (cArg != null) {\n      numArgs++;\n      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n        return CanInlineResult.NO;\n      }\n      Node paramName = NodeUtil.getFunctionParameterName(fnNode, numArgs);\n      if (paramName == null) {\n        return CanInlineResult.NO;\n      }\n      int index = paramName.getIntProp(Node.FUNCTION_PROP_PARAMETER_INDEX);\n      hasArg[index] = true;\n      cArg = cArg.getNext();\n    }\n\n    // In some cases, a named parameter can be undefined in the function declaration,\n    // but still be supplied in the function call. In this case, it is treated as\n    // \"undefined\".\n    for (int i = 0; i < numParams; i++) {\n      if (!hasArg[i]) {\n        Node defaultValue = NodeUtil.getFunctionParameterDefaultValue(fnNode, i);\n        if (defaultValue != null && defaultValue.isUndefined()) {\n          return CanInlineResult.NO;\n        }\n      }\n    }\n\n    if (numParams != numArgs) {\n      return CanInlineResult.NO;\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    cArg = callNode.getFirstChild().getNext();\n    while (fnParam != null) {\n      // For each named parameter check if a mutable argument use more than one.\n      if (NodeUtil.mayEffectMutableState(cArg, compiler)\n          && NodeUtil.getNameReferenceCount(\n              block, fnParam.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n      fnParam = fnParam.getNext();\n      cArg = cArg.getNext();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..a0f44ea1 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,7 +686,7 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n+private CanInlineResult canInlineReferenceDirectly(\n       Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n@@ -694,7 +694,6 @@ class FunctionInjector {\n \n     Node block = fnNode.getLastChild();\n \n-\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n \n@@ -714,39 +713,51 @@ class FunctionInjector {\n       }\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+    int numParams = NodeUtil.getFunctionParameters(fnNode).getChildCount();\n+    int numArgs = 0;\n+    boolean[] hasArg = new boolean[numParams];\n+    while (cArg != null) {\n+      numArgs++;\n+      if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+        return CanInlineResult.NO;\n       }\n+      Node paramName = NodeUtil.getFunctionParameterName(fnNode, numArgs);\n+      if (paramName == null) {\n+        return CanInlineResult.NO;\n+      }\n+      int index = paramName.getIntProp(Node.FUNCTION_PROP_PARAMETER_INDEX);\n+      hasArg[index] = true;\n+      cArg = cArg.getNext();\n+    }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+    // In some cases, a named parameter can be undefined in the function declaration,\n+    // but still be supplied in the function call. In this case, it is treated as\n+    // \"undefined\".\n+    for (int i = 0; i < numParams; i++) {\n+      if (!hasArg[i]) {\n+        Node defaultValue = NodeUtil.getFunctionParameterDefaultValue(fnNode, i);\n+        if (defaultValue != null && defaultValue.isUndefined()) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n       }\n     }\n \n-    return CanInlineResult.YES;\n-  }\n+    if (numParams != numArgs) {\n+      return CanInlineResult.NO;\n+    }\n+\n+    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n+    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+    cArg = callNode.getFirstChild().getNext();\n+    while (fnParam != null) {\n+      // For each named parameter check if a mutable argument use more than one.\n+      if (NodeUtil.mayEffectMutableState(cArg, compiler)\n+          && NodeUtil.getNameReferenceCount(\n+              block, fnParam.getString()) > 1) {\n+        return CanInlineResult.NO;\n+      }\n+      fnParam = fnParam.getNext();\n+      cArg = cArg.getNext();\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}