{
    "patch": "Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\nif (candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n    try {\n        if (Modifier.isFinal(field.getModifiers())) {\n            Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n            modifiersField.setAccessible(true);\n            modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL); \n        }\n        field.setAccessible(true);\n        field.set(fieldInstance, candidate);\n        if (!field.getType().equals(candidate.getClass())) {\n            injectMockCandidate(candidate.getClass().getSuperclass(), mocks, candidate);\n        }\n    } catch (IllegalAccessException | NoSuchFieldException | SecurityException e) {\n        throw new IllegalStateException(\"Could not set field value\", e);\n    }\n} else if (candidate != null) {\n    injectMockCandidate(candidate.getClass(), mocks, candidate);\n} else {\n    injectMockCandidate(field.getType().getSuperclass(), mocks, fieldInstance);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..49da518ea 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,30 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+if (candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {\n+    try {\n+        if (Modifier.isFinal(field.getModifiers())) {\n+            Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n+            modifiersField.setAccessible(true);\n+            modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL); \n+        }\n+        field.setAccessible(true);\n+        field.set(fieldInstance, candidate);\n+        if (!field.getType().equals(candidate.getClass())) {\n+            injectMockCandidate(candidate.getClass().getSuperclass(), mocks, candidate);\n+        }\n+    } catch (IllegalAccessException | NoSuchFieldException | SecurityException e) {\n+        throw new IllegalStateException(\"Could not set field value\", e);\n+    }\n+} else if (candidate != null) {\n+    injectMockCandidate(candidate.getClass(), mocks, candidate);\n+} else {\n+    injectMockCandidate(field.getType().getSuperclass(), mocks, fieldInstance);\n+}\n         }\n     }\n ",
    "result_reason": "error: multi-catch statement is not supported in -source 1.5",
    "test_result": "ERROR"
}