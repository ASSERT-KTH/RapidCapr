{
    "patch": "      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      if (functionType.isConstructor() && functionType.getTypeOfThis() != null) {\n        Node parent = n.getParent();\n        if (parent == null) {\n          report(t, n, CONSTRUCTOR_WITHOUT_NEW);\n          ensureTyped(t, n, functionType.getReturnType());\n          return;\n        }\n        Node grandparent = parent.getParent();\n        Token parentType = parent.getToken();\n        switch (parentType) {\n          case GETPROP:\n            // OK to ignore.\n            break;\n\n          case CALL:\n            if (grandparent.getToken() != Token.NEW) {\n              report(t, parent, CONSTRUCTOR_BAD_THIS, functionType.getTypeOfThis().toString());\n              ensureTyped(t, n, functionType.getReturnType());\n              return;\n            }\n            break;\n\n          default:\n            report(t, parent, CONSTRUCTOR_BAD_THIS, functionType.getTypeOfThis().toString());\n            ensureTyped(t, n, functionType.getReturnType());\n            return;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..8ec26405 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,36 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      // Functions with explicit 'this' types must be called in a GETPROP\n+      // or GETELEM.\n+      if (functionType.isConstructor() && functionType.getTypeOfThis() != null) {\n+        Node parent = n.getParent();\n+        if (parent == null) {\n+          report(t, n, CONSTRUCTOR_WITHOUT_NEW);\n+          ensureTyped(t, n, functionType.getReturnType());\n+          return;\n+        }\n+        Node grandparent = parent.getParent();\n+        Token parentType = parent.getToken();\n+        switch (parentType) {\n+          case GETPROP:\n+            // OK to ignore.\n+            break;\n+\n+          case CALL:\n+            if (grandparent.getToken() != Token.NEW) {\n+              report(t, parent, CONSTRUCTOR_BAD_THIS, functionType.getTypeOfThis().toString());\n+              ensureTyped(t, n, functionType.getReturnType());\n+              return;\n+            }\n+            break;\n+\n+          default:\n+            report(t, parent, CONSTRUCTOR_BAD_THIS, functionType.getTypeOfThis().toString());\n+            ensureTyped(t, n, functionType.getReturnType());\n+            return;\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}