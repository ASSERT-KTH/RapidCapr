{
    "patch": "    public static int add(int x, int y) {\n        int result = x ^ y; // calculate sum without carry\n        int carry = (x & y) << 1; // calculate carry\n        while (carry != 0) { // if there is still a carry bit then keep adding\n            int temp = result;\n            result = temp ^ carry; // add carry and sum without carry\n            carry = (temp & carry) << 1; // calculate new carry bit\n            if (result < Integer.MIN_VALUE || result > Integer.MAX_VALUE || (result == Integer.MIN_VALUE && carry != 0)) {\n                return Integer.MAX_VALUE; // handle overflow\n            }\n        }\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/ADD.java b/src/main/java/humaneval/buggy/ADD.java\nindex 186aae7..22cc9b1 100644\n--- a/src/main/java/humaneval/buggy/ADD.java\n+++ b/src/main/java/humaneval/buggy/ADD.java\n@@ -8,6 +8,16 @@ package humaneval.buggy;\n \n public class ADD {\n     public static int add(int x, int y) {\n-        return x | y;\n+        int result = x ^ y; // calculate sum without carry\n+        int carry = (x & y) << 1; // calculate carry\n+        while (carry != 0) { // if there is still a carry bit then keep adding\n+            int temp = result;\n+            result = temp ^ carry; // add carry and sum without carry\n+            carry = (temp & carry) << 1; // calculate new carry bit\n+            if (result < Integer.MIN_VALUE || result > Integer.MAX_VALUE || (result == Integer.MIN_VALUE && carry != 0)) {\n+                return Integer.MAX_VALUE; // handle overflow\n+            }\n+        }\n+        return result;\n     }\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}