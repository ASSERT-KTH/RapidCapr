{
    "patch": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n        return Double.NaN;\n    }\n\n    if (x == 0) {\n        return 0.0;\n    }\n\n    double ret;\n    if (x < a + 1.0) {\n        double apn = a;\n        double del = 1.0 / a;\n        double sum = del;\n\n        for (int n = 1; n <= maxIterations; n++) {\n            apn += 1.0;\n            del *= x / apn;\n            sum += del;\n            if (Math.abs(del) < Math.abs(sum) * epsilon) {\n                ret = Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n                return ret;\n            }\n        }\n        throw new MaxIterationsExceededException(maxIterations);\n    } else {\n        ContinuedFraction cf = new ContinuedFraction() {\n            @Override\n            protected double getA(int n, double x) {\n                double ret;\n                if (n % 2 == 0) {\n                    ret = n / 2.0;\n                } else {\n                    ret = -(a + n) / 2.0;\n                }\n                return ret;\n            }\n\n            @Override\n            protected double getB(int n, double x) {\n                return x;\n            }\n        };\n\n        ret = Math.exp(-x + a * Math.log(x) - logGamma(a)) / cf.evaluate(x, epsilon, maxIterations);\n        return ret;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..814cf20a8 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,54 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) {\n+    if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+        return Double.NaN;\n+    }\n+\n+    if (x == 0) {\n+        return 0.0;\n+    }\n+\n+    double ret;\n+    if (x < a + 1.0) {\n+        double apn = a;\n+        double del = 1.0 / a;\n+        double sum = del;\n+\n+        for (int n = 1; n <= maxIterations; n++) {\n+            apn += 1.0;\n+            del *= x / apn;\n+            sum += del;\n+            if (Math.abs(del) < Math.abs(sum) * epsilon) {\n+                ret = Math.exp(-x + a * Math.log(x) - logGamma(a)) * sum;\n+                return ret;\n+            }\n+        }\n+        throw new MaxIterationsExceededException(maxIterations);\n+    } else {\n+        ContinuedFraction cf = new ContinuedFraction() {\n+            @Override\n+            protected double getA(int n, double x) {\n+                double ret;\n+                if (n % 2 == 0) {\n+                    ret = n / 2.0;\n+                } else {\n+                    ret = -(a + n) / 2.0;\n+                }\n+                return ret;\n+            }\n+\n+            @Override\n+            protected double getB(int n, double x) {\n+                return x;\n+            }\n+        };\n+\n+        ret = Math.exp(-x + a * Math.log(x) - logGamma(a)) / cf.evaluate(x, epsilon, maxIterations);\n+        return ret;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}