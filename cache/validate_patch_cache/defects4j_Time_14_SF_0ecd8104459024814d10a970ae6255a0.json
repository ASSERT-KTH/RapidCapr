{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        int year = 0, monthOfYear = 0, dayOfMonth = 0;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            int value = values[i];\n            DateTimeFieldType type = partial.getFieldType(i);\n            if (type == DateTimeFieldType.year()) {\n                year = value;\n            } else if (type == DateTimeFieldType.monthOfYear()) {\n                monthOfYear = value;\n            } else if (type == DateTimeFieldType.dayOfMonth()) {\n                dayOfMonth = value;\n            }\n        }\n        // add the months\n        int newMonthOfYear = iChronology.monthOfYear().add(monthOfYear, valueToAdd);\n        int newYear = year, newDayOfMonth = dayOfMonth;\n        if (newMonthOfYear != monthOfYear) {\n            // handle the case of Feb 29 in non-leap years\n            int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(newYear, newMonthOfYear);\n            newDayOfMonth = Math.min(dayOfMonth, maxDayOfMonth);\n            if (newDayOfMonth != dayOfMonth) {\n                // if we reduced the day of month, also adjust the month\n                newMonthOfYear = iChronology.monthOfYear().add(newMonthOfYear, newDayOfMonth - dayOfMonth);\n            }\n            // handle the case of Feb 29 in leap years\n            if (newMonthOfYear == DateTimeConstants.FEBRUARY && newDayOfMonth == 29 && !iChronology.isLeapYear(newYear)) {\n                // move to first day of March\n                newMonthOfYear++;\n                newDayOfMonth = 1;\n            }\n            if (newMonthOfYear != monthOfYear) {\n                newYear = iChronology.year().add(year, (newMonthOfYear - monthOfYear) / iChronology.monthOfYear().getMaximumValue());\n            }\n        }\n        return new int[] {newYear, newMonthOfYear, newDayOfMonth};\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..c9e708c1 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,52 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        int year = 0, monthOfYear = 0, dayOfMonth = 0;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            int value = values[i];\n+            DateTimeFieldType type = partial.getFieldType(i);\n+            if (type == DateTimeFieldType.year()) {\n+                year = value;\n+            } else if (type == DateTimeFieldType.monthOfYear()) {\n+                monthOfYear = value;\n+            } else if (type == DateTimeFieldType.dayOfMonth()) {\n+                dayOfMonth = value;\n+            }\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        // add the months\n+        int newMonthOfYear = iChronology.monthOfYear().add(monthOfYear, valueToAdd);\n+        int newYear = year, newDayOfMonth = dayOfMonth;\n+        if (newMonthOfYear != monthOfYear) {\n+            // handle the case of Feb 29 in non-leap years\n+            int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(newYear, newMonthOfYear);\n+            newDayOfMonth = Math.min(dayOfMonth, maxDayOfMonth);\n+            if (newDayOfMonth != dayOfMonth) {\n+                // if we reduced the day of month, also adjust the month\n+                newMonthOfYear = iChronology.monthOfYear().add(newMonthOfYear, newDayOfMonth - dayOfMonth);\n+            }\n+            // handle the case of Feb 29 in leap years\n+            if (newMonthOfYear == DateTimeConstants.FEBRUARY && newDayOfMonth == 29 && !iChronology.isLeapYear(newYear)) {\n+                // move to first day of March\n+                newMonthOfYear++;\n+                newDayOfMonth = 1;\n+            }\n+            if (newMonthOfYear != monthOfYear) {\n+                newYear = iChronology.year().add(year, (newMonthOfYear - monthOfYear) / iChronology.monthOfYear().getMaximumValue());\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        return new int[] {newYear, newMonthOfYear, newDayOfMonth};\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}