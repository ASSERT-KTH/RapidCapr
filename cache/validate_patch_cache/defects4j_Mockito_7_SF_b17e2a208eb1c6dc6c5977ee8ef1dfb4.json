{
    "patch": "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if (actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    } else if (typeVariable.getGenericDeclaration() instanceof Class<?>) {\n        // Check if the type variable is declared in a class, and if so, process its fields and superclasses\n        Class<?> clazz = (Class<?>) typeVariable.getGenericDeclaration();\n        processFields(clazz);\n        processSuperclasses(clazz);\n    } else {\n        // If the type variable is not declared in a class, we can't determine the actual type\n        throw new IllegalStateException(\"Unable to extract actual type for type variable: \" + typeVariable.getTypeName());\n    }\n}\n\nprivate void processFields(Class<?> clazz) {\n    for (Field field : clazz.getDeclaredFields()) {\n        Type fieldType = field.getGenericType();\n        if (fieldType instanceof TypeVariable<?>) {\n            TypeVariable<?> typeVariable = (TypeVariable<?>) fieldType;\n            Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n            if (actualTypeArgument != null) {\n                registerTypeVariablesOn(actualTypeArgument);\n            } else if (typeVariable.getGenericDeclaration() instanceof Class<?>) {\n                processFields((Class<?>) typeVariable.getGenericDeclaration());\n            }\n        } else if (fieldType instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType) fieldType;\n            for (Type actualTypeArgument : parameterizedType.getActualTypeArguments()) {\n                registerTypeVariablesOn(actualTypeArgument);\n                if (actualTypeArgument instanceof TypeVariable<?>) {\n                    processFields((Class<?>) field.getDeclaringClass());\n                }\n            }\n        }\n    }\n}\n\nprivate void processSuperclasses(Class<?> clazz) {\n    Type superClassType = clazz.getGenericSuperclass();\n    if (superClassType instanceof ParameterizedType) {\n        ParameterizedType parameterizedType = (ParameterizedType) superClassType;\n        for (Type actualTypeArgument : parameterizedType.getActualTypeArguments()) {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n    } else if (superClassType instanceof Class<?>) {\n        processSuperclasses((Class<?>) superClassType);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..6a05144db 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,59 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+\n+private void readTypeVariables() {\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if (actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    } else if (typeVariable.getGenericDeclaration() instanceof Class<?>) {\n+        // Check if the type variable is declared in a class, and if so, process its fields and superclasses\n+        Class<?> clazz = (Class<?>) typeVariable.getGenericDeclaration();\n+        processFields(clazz);\n+        processSuperclasses(clazz);\n+    } else {\n+        // If the type variable is not declared in a class, we can't determine the actual type\n+        throw new IllegalStateException(\"Unable to extract actual type for type variable: \" + typeVariable.getTypeName());\n+    }\n+}\n+\n+private void processFields(Class<?> clazz) {\n+    for (Field field : clazz.getDeclaredFields()) {\n+        Type fieldType = field.getGenericType();\n+        if (fieldType instanceof TypeVariable<?>) {\n+            TypeVariable<?> typeVariable = (TypeVariable<?>) fieldType;\n+            Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+            if (actualTypeArgument != null) {\n+                registerTypeVariablesOn(actualTypeArgument);\n+            } else if (typeVariable.getGenericDeclaration() instanceof Class<?>) {\n+                processFields((Class<?>) typeVariable.getGenericDeclaration());\n+            }\n+        } else if (fieldType instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType) fieldType;\n+            for (Type actualTypeArgument : parameterizedType.getActualTypeArguments()) {\n+                registerTypeVariablesOn(actualTypeArgument);\n+                if (actualTypeArgument instanceof TypeVariable<?>) {\n+                    processFields((Class<?>) field.getDeclaringClass());\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+private void processSuperclasses(Class<?> clazz) {\n+    Type superClassType = clazz.getGenericSuperclass();\n+    if (superClassType instanceof ParameterizedType) {\n+        ParameterizedType parameterizedType = (ParameterizedType) superClassType;\n+        for (Type actualTypeArgument : parameterizedType.getActualTypeArguments()) {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+    } else if (superClassType instanceof Class<?>) {\n+        processSuperclasses((Class<?>) superClassType);\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'",
    "test_result": "FAIL"
}