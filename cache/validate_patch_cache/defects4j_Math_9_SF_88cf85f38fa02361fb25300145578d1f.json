{
    "patch": "public Line revert() {\n    final Vector2D negativeDirection = direction.negate();\n    final double precision = 1e-9;\n    if (Math.abs(negativeDirection.getX()) < precision && Math.abs(negativeDirection.getY()) < precision) {\n        // direction is very small; use a non-zero default value\n        negativeDirection = new Vector2D(-precision, -precision);\n    }\n    final Line reverted = new Line(zero, negativeDirection);\n    return reverted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..b792df86b 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,16 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+public Line revert() {\n+    final Vector2D negativeDirection = direction.negate();\n+    final double precision = 1e-9;\n+    if (Math.abs(negativeDirection.getX()) < precision && Math.abs(negativeDirection.getY()) < precision) {\n+        // direction is very small; use a non-zero default value\n+        negativeDirection = new Vector2D(-precision, -precision);\n+    }\n+    final Line reverted = new Line(zero, negativeDirection);\n+    return reverted;\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}