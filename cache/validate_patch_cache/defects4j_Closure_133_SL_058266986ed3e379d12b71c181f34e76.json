{
    "patch": "private String getRemainingJSDocLine() {\n    StringBuilder result = new StringBuilder();\n    String line = stream.getRemainingJSDocLine();\n    while (line != null && line.trim().startsWith(\"*\")) {\n        line = stream.getRemainingJSDocLine();\n    }\n    while (line != null && !line.trim().isEmpty()) {\n        if (line.trim().startsWith(\"@\")) {\n            // A JSDoc tag was split across lines\n            if (result.length() > 0) {\n                result.append(' ');\n            }\n            result.append(line.trim());\n        } else {\n            // We've reached a non-JSDoc comment line\n            break;\n        }\n        line = stream.getRemainingJSDocLine();\n    }\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..ece65792 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,27 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+private String getRemainingJSDocLine() {\n+    StringBuilder result = new StringBuilder();\n+    String line = stream.getRemainingJSDocLine();\n+    while (line != null && line.trim().startsWith(\"*\")) {\n+        line = stream.getRemainingJSDocLine();\n+    }\n+    while (line != null && !line.trim().isEmpty()) {\n+        if (line.trim().startsWith(\"@\")) {\n+            // A JSDoc tag was split across lines\n+            if (result.length() > 0) {\n+                result.append(' ');\n+            }\n+            result.append(line.trim());\n+        } else {\n+            // We've reached a non-JSDoc comment line\n+            break;\n+        }\n+        line = stream.getRemainingJSDocLine();\n+    }\n+    return result.toString();\n+}\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}