{
    "patch": "        final int n = m.getRowDimension();\n        final EigenDecomposition dec = new EigenDecomposition(m.copy());\n        final RealMatrix sqrt = dec.getV().multiply(dec.getD().sqrt()).multiply(dec.getV().transpose());\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                sqrt.setEntry(i, j, 0.5 * (sqrt.getEntry(i, j) + sqrt.getEntry(j, i)));\n                sqrt.setEntry(j, i, sqrt.getEntry(i, j));\n            }\n        }\n        return sqrt;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..8d2a18cb1 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,14 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+        final int n = m.getRowDimension();\n+        final EigenDecomposition dec = new EigenDecomposition(m.copy());\n+        final RealMatrix sqrt = dec.getV().multiply(dec.getD().sqrt()).multiply(dec.getV().transpose());\n+        for (int i = 0; i < n; ++i) {\n+            for (int j = i + 1; j < n; ++j) {\n+                sqrt.setEntry(i, j, 0.5 * (sqrt.getEntry(i, j) + sqrt.getEntry(j, i)));\n+                sqrt.setEntry(j, i, sqrt.getEntry(i, j));\n+            }\n+        }\n+        return sqrt;\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}