{
    "patch": "public static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n\n    if (type1.isPrimitive() || type2.isPrimitive()){\n        final Class<?> type = (type1.isPrimitive() ? type1 : type2);\n        if (type == Boolean.TYPE){\n            Boolean[] result = Arrays.copyOf(array1, array1.length + array2.length);\n            for (int i = 0; i < array2.length; i++) {\n                result[array1.length + i] = (Boolean) array2[i];\n            }\n            return (T[]) result;\n        } else if (type == Byte.TYPE){\n            Byte[] result = Arrays.copyOf(array1, array1.length + array2.length);\n            for (int i = 0; i < array2.length; i++) {\n                result[array1.length + i] = (Byte) array2[i];\n            }\n            return (T[]) result;\n        } else if (type == Character.TYPE){\n            Character[] result = Arrays.copyOf(array1, array1.length + array2.length);\n            for (int i = 0; i < array2.length; i++) {\n                result[array1.length + i] = (Character) array2[i];\n            }\n            return (T[]) result;\n        } else if (type == Short.TYPE){\n            Short[] result = Arrays.copyOf(array1, array1.length + array2.length);\n            for (int i = 0; i < array2.length; i++) {\n                result[array1.length + i] = (Short) array2[i];\n            }\n            return (T[]) result;\n        } else if (type == Integer.TYPE){\n            Integer[] result = Arrays.copyOf(array1, array1.length + array2.length);\n            for (int i = 0; i < array2.length; i++) {\n                result[array1.length + i] = (Integer) array2[i];\n            }\n            return (T[]) result;\n        } else if (type == Long.TYPE){\n            Long[] result = Arrays.copyOf(array1, array1.length + array2.length);\n            for (int i = 0; i < array2.length; i++) {\n                result[array1.length + i] = (Long) array2[i];\n            }\n            return (T[]) result;\n        } else if (type == Float.TYPE){\n            Float[] result = Arrays.copyOf(array1, array1.length + array2.length);\n            for (int i = 0; i < array2.length; i++) {\n                result[array1.length + i] = (Float) array2[i];\n            }\n            return (T[]) result;\n        } else if (type == Double.TYPE){\n            Double[] result = Arrays.copyOf(array1, array1.length + array2.length);\n            for (int i = 0; i < array2.length; i++) {\n                result[array1.length + i] = (Double) array2[i];\n            }\n            return (T[]) result;\n        }\n    }\n\n    T[] joinedArray = Arrays.copyOf(array1, array1.length + array2.length);\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    return joinedArray;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/ArrayUtils.java b/src/java/org/apache/commons/lang3/ArrayUtils.java\nindex 889497e9..3ba1dcc4 100644\n--- a/src/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java\n@@ -2950,20 +2950,74 @@ public class ArrayUtils {\n      * @since 2.1\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> T[] addAll(T[] array1, T... array2) {\n-        if (array1 == null) {\n-            return clone(array2);\n-        } else if (array2 == null) {\n-            return clone(array1);\n+public static <T> T[] addAll(T[] array1, T... array2) {\n+    if (array1 == null) {\n+        return clone(array2);\n+    } else if (array2 == null) {\n+        return clone(array1);\n+    }\n+\n+    final Class<?> type1 = array1.getClass().getComponentType();\n+    final Class<?> type2 = array2.getClass().getComponentType();\n+\n+    if (type1.isPrimitive() || type2.isPrimitive()){\n+        final Class<?> type = (type1.isPrimitive() ? type1 : type2);\n+        if (type == Boolean.TYPE){\n+            Boolean[] result = Arrays.copyOf(array1, array1.length + array2.length);\n+            for (int i = 0; i < array2.length; i++) {\n+                result[array1.length + i] = (Boolean) array2[i];\n+            }\n+            return (T[]) result;\n+        } else if (type == Byte.TYPE){\n+            Byte[] result = Arrays.copyOf(array1, array1.length + array2.length);\n+            for (int i = 0; i < array2.length; i++) {\n+                result[array1.length + i] = (Byte) array2[i];\n+            }\n+            return (T[]) result;\n+        } else if (type == Character.TYPE){\n+            Character[] result = Arrays.copyOf(array1, array1.length + array2.length);\n+            for (int i = 0; i < array2.length; i++) {\n+                result[array1.length + i] = (Character) array2[i];\n+            }\n+            return (T[]) result;\n+        } else if (type == Short.TYPE){\n+            Short[] result = Arrays.copyOf(array1, array1.length + array2.length);\n+            for (int i = 0; i < array2.length; i++) {\n+                result[array1.length + i] = (Short) array2[i];\n+            }\n+            return (T[]) result;\n+        } else if (type == Integer.TYPE){\n+            Integer[] result = Arrays.copyOf(array1, array1.length + array2.length);\n+            for (int i = 0; i < array2.length; i++) {\n+                result[array1.length + i] = (Integer) array2[i];\n+            }\n+            return (T[]) result;\n+        } else if (type == Long.TYPE){\n+            Long[] result = Arrays.copyOf(array1, array1.length + array2.length);\n+            for (int i = 0; i < array2.length; i++) {\n+                result[array1.length + i] = (Long) array2[i];\n+            }\n+            return (T[]) result;\n+        } else if (type == Float.TYPE){\n+            Float[] result = Arrays.copyOf(array1, array1.length + array2.length);\n+            for (int i = 0; i < array2.length; i++) {\n+                result[array1.length + i] = (Float) array2[i];\n+            }\n+            return (T[]) result;\n+        } else if (type == Double.TYPE){\n+            Double[] result = Arrays.copyOf(array1, array1.length + array2.length);\n+            for (int i = 0; i < array2.length; i++) {\n+                result[array1.length + i] = (Double) array2[i];\n+            }\n+            return (T[]) result;\n         }\n-        final Class<?> type1 = array1.getClass().getComponentType();\n-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n-        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n-            // Check if problem is incompatible types\n-        return joinedArray;\n     }\n \n+    T[] joinedArray = Arrays.copyOf(array1, array1.length + array2.length);\n+    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n+    return joinedArray;\n+}\n+\n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>\n      * <p>The new array contains all of the element of <code>array1</code> followed",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}