{
    "patch": "  attachLiteralTypes(n);\n  boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration(n);\n  switch (n.getType()) {\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME && isFunctionDeclaration) {\n        // Handle named function declaration like `function foo() {}`\n        defineDeclaredFunction(n, parent.getParent());\n      } else if (isFunctionDeclaration) {\n        // Handle function declaration\n        defineDeclaredFunction(n, parent);\n      }\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n  }\n\n  // Handle function expression like `(function() {})`\n  if (n.getType() == Token.LP && isFunctionExpression(n)) {\n    handleFunctionInputs(parent);\n  }\n\n  // Handle variable declaration like `var x = function() {}`\n  if (NodeUtil.isNameDeclaration(parent) && isFunctionExpression(n)) {\n    defineDeclaredFunction(n.getFirstChild(), parent);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..8a30f708 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,35 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+  attachLiteralTypes(n);\n+  boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration(n);\n+  switch (n.getType()) {\n+    case Token.VAR:\n+      defineVar(n, parent);\n+      break;\n+    case Token.FUNCTION:\n+      if (parent.getType() == Token.NAME && isFunctionDeclaration) {\n+        // Handle named function declaration like `function foo() {}`\n+        defineDeclaredFunction(n, parent.getParent());\n+      } else if (isFunctionDeclaration) {\n+        // Handle function declaration\n+        defineDeclaredFunction(n, parent);\n       }\n+      break;\n+    case Token.CATCH:\n+      defineCatch(n, parent);\n+      break;\n+  }\n+\n+  // Handle function expression like `(function() {})`\n+  if (n.getType() == Token.LP && isFunctionExpression(n)) {\n+    handleFunctionInputs(parent);\n+  }\n+\n+  // Handle variable declaration like `var x = function() {}`\n+  if (NodeUtil.isNameDeclaration(parent) && isFunctionExpression(n)) {\n+    defineDeclaredFunction(n.getFirstChild(), parent);\n+  }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}