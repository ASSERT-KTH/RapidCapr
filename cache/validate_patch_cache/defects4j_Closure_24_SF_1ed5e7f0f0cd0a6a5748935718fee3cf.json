{
    "patch": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        Node parent = n.getParent();\n        if (parent != null && parent.isVar() && parent.getFirstChild() == n && n.hasChildren()) {\n          Node child = n.getFirstChild();\n          if (child.isQualifiedName()) {\n            String name = n.getString();\n            Var aliasVar = scope.getVar(name);\n            if (aliasVar != null && aliasVar.getInitialValue() != null\n                && aliasVar.getInitialValue().getQualifiedName() != null) {\n              aliases.put(name, aliasVar);\n              String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n              transformation.addAlias(name, qualifiedName);\n            } else {\n              report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n            }\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..824882ca 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -273,25 +273,21 @@ class ScopedAliases implements HotSwapCompilerPass {\n       Scope scope = t.getScope();\n       for (Var v : scope.getVarIterable()) {\n         Node n = v.getNode();\n-        int type = n.getType();\n         Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+        if (parent != null && parent.isVar() && parent.getFirstChild() == n && n.hasChildren()) {\n+          Node child = n.getFirstChild();\n+          if (child.isQualifiedName()) {\n+            String name = n.getString();\n+            Var aliasVar = scope.getVar(name);\n+            if (aliasVar != null && aliasVar.getInitialValue() != null\n+                && aliasVar.getInitialValue().getQualifiedName() != null) {\n+              aliases.put(name, aliasVar);\n+              String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+              transformation.addAlias(name, qualifiedName);\n+            } else {\n+              report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+            }\n+          }\n         }\n       }\n     }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}