{
    "patch": "if (finallyNode != null && cfa != null) {\n    Node follow = computeFollowNode(fromNode, finallyNode, cfa);\n    if (follow != null) {\n        cfa.createEdge(fromNode, Branch.UNCOND, follow);\n    } else if (!NodeUtil.isEmptyBlock(finallyNode.getLastChild())) {\n        Node lastStatement = null;\n        for (Node child = finallyNode.getLastChild().getLastChild();\n             child != null && lastStatement == null;\n             child = child.getPrevious()) {\n            if (child.isBlock()) {\n                for (Node blockChild = child.getLastChild();\n                     blockChild != null && lastStatement == null;\n                     blockChild = blockChild.getPrevious()) {\n                    if (!NodeUtil.isControlStructure(blockChild) &&\n                        !NodeUtil.isStatementBlock(blockChild)) {\n                        lastStatement = blockChild;\n                    }\n                }\n            } else if (child.isScript() || !NodeUtil.isControlStructure(child)) {\n                lastStatement = child;\n            }\n        }\n        if (lastStatement != null) {\n            Node statementFollow = computeFollowNode(fromNode, lastStatement, cfa);\n            if (statementFollow != null) {\n                cfa.createEdge(fromNode, Branch.UNCOND, statementFollow);\n            } else {\n                cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(fromNode, parent, cfa));\n            }\n        } else {\n            cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(fromNode, parent, cfa));\n        }\n    } else {\n        cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(fromNode, parent, cfa));\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..025296a7 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,42 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (finallyNode != null && cfa != null) {\n+    Node follow = computeFollowNode(fromNode, finallyNode, cfa);\n+    if (follow != null) {\n+        cfa.createEdge(fromNode, Branch.UNCOND, follow);\n+    } else if (!NodeUtil.isEmptyBlock(finallyNode.getLastChild())) {\n+        Node lastStatement = null;\n+        for (Node child = finallyNode.getLastChild().getLastChild();\n+             child != null && lastStatement == null;\n+             child = child.getPrevious()) {\n+            if (child.isBlock()) {\n+                for (Node blockChild = child.getLastChild();\n+                     blockChild != null && lastStatement == null;\n+                     blockChild = blockChild.getPrevious()) {\n+                    if (!NodeUtil.isControlStructure(blockChild) &&\n+                        !NodeUtil.isStatementBlock(blockChild)) {\n+                        lastStatement = blockChild;\n+                    }\n+                }\n+            } else if (child.isScript() || !NodeUtil.isControlStructure(child)) {\n+                lastStatement = child;\n+            }\n+        }\n+        if (lastStatement != null) {\n+            Node statementFollow = computeFollowNode(fromNode, lastStatement, cfa);\n+            if (statementFollow != null) {\n+                cfa.createEdge(fromNode, Branch.UNCOND, statementFollow);\n+            } else {\n+                cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(fromNode, parent, cfa));\n+            }\n+        } else {\n+            cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(fromNode, parent, cfa));\n+        }\n+    } else {\n+        cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(fromNode, parent, cfa));\n+    }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}