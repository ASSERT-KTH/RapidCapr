{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    List<Node> arguments = call.children().subList(1, call.getChildCount());\n    List<Node> parameters = ImmutableList.copyOf(functionType.getParameters());\n    int numArgs = arguments.size();\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n\n    // Check if there are excessive arguments\n    boolean hasExcessive = numArgs > parameters.size() && !functionType.hasRestFormals();\n    if (hasExcessive) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n             validator.getReadableJSTypeName(call.getFirstChild(), false),\n             String.valueOf(numArgs), String.valueOf(parameters.size()),\n             maxArgs != Integer.MAX_VALUE ?\n             \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n\n    int ordinal = 0;\n    for (int i = 0; i < parameters.size(); i++) {\n      Node parameter = parameters.get(i);\n      if (parameter.isDefaultValue()) {\n        parameter = parameter.getFirstChild();\n      }\n\n      Node argument;\n      if (i < numArgs) {\n        argument = arguments.get(i);\n      } else if (functionType.hasRestFormals()) {\n        argument = call.getLastChild().getFirstChild();\n      } else {\n        break;\n      }\n\n      ordinal++;\n\n      JSType expectedType = getJSType(parameter);\n      JSType actualType = getJSType(argument);\n      if (expectedType == null || actualType == null) {\n        continue;\n      }\n\n      if (!expectedType.equals(actualType)) {\n        validator.expectArgumentMatchesParameter(\n            t, argument, actualType, expectedType, call, ordinal);\n      }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..9251be30 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,53 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+    List<Node> arguments = call.children().subList(1, call.getChildCount());\n+    List<Node> parameters = ImmutableList.copyOf(functionType.getParameters());\n+    int numArgs = arguments.size();\n+    int minArgs = functionType.getMinArguments();\n+    int maxArgs = functionType.getMaxArguments();\n+\n+    // Check if there are excessive arguments\n+    boolean hasExcessive = numArgs > parameters.size() && !functionType.hasRestFormals();\n+    if (hasExcessive) {\n+      report(t, call, WRONG_ARGUMENT_COUNT,\n+             validator.getReadableJSTypeName(call.getFirstChild(), false),\n+             String.valueOf(numArgs), String.valueOf(parameters.size()),\n+             maxArgs != Integer.MAX_VALUE ?\n+             \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    }\n \n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n     int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n+    for (int i = 0; i < parameters.size(); i++) {\n+      Node parameter = parameters.get(i);\n+      if (parameter.isDefaultValue()) {\n+        parameter = parameter.getFirstChild();\n+      }\n+\n+      Node argument;\n+      if (i < numArgs) {\n+        argument = arguments.get(i);\n+      } else if (functionType.hasRestFormals()) {\n+        argument = call.getLastChild().getFirstChild();\n+      } else {\n+        break;\n+      }\n+\n       ordinal++;\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n+      JSType expectedType = getJSType(parameter);\n+      JSType actualType = getJSType(argument);\n+      if (expectedType == null || actualType == null) {\n+        continue;\n+      }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+      if (!expectedType.equals(actualType)) {\n+        validator.expectArgumentMatchesParameter(\n+            t, argument, actualType, expectedType, call, ordinal);\n+      }\n     }\n-  }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}