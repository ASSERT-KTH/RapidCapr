{
    "patch": "@Test\npublic void testRevert() {\n    Vector3D direction = new Vector3D(0.028581782127907646, 0.005236874430375749, 0.019508293431828735);\n    Line line = new Line(Vector3D.ZERO, direction);\n\n    Line result = line.revert();\n\n    // Round the expected result to 15 decimal places for comparison\n    double[] expectedCoords = {-0.028581782127907646, -0.005236874430375749, -0.019508293431828735};\n    for (int i = 0; i < expectedCoords.length; i++) {\n        expectedCoords[i] = new BigDecimal(expectedCoords[i]).setScale(15, RoundingMode.HALF_UP).doubleValue();\n    }\n    Assert.assertArrayEquals(expectedCoords, result.getDirection().toArray(), 0.0);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..adabe4f8a 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,20 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n+@Test\n+public void testRevert() {\n+    Vector3D direction = new Vector3D(0.028581782127907646, 0.005236874430375749, 0.019508293431828735);\n+    Line line = new Line(Vector3D.ZERO, direction);\n+\n+    Line result = line.revert();\n+\n+    // Round the expected result to 15 decimal places for comparison\n+    double[] expectedCoords = {-0.028581782127907646, -0.005236874430375749, -0.019508293431828735};\n+    for (int i = 0; i < expectedCoords.length; i++) {\n+        expectedCoords[i] = new BigDecimal(expectedCoords[i]).setScale(15, RoundingMode.HALF_UP).doubleValue();\n     }\n+    Assert.assertArrayEquals(expectedCoords, result.getDirection().toArray(), 0.0);\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}