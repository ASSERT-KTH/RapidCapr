{
    "patch": "    if (n.isExprResult()) {\n      Node expr = n.getFirstChild();\n      if (expr.isAssign()) {\n        Node lvalue = expr.getFirstChild();\n        if (lvalue.isName()) {\n          if (isDependentValue(lvalue.getString())) {\n            Node rvalue = expr.getLastChild();\n            if (rvalue.isCall() && NodeUtil.functionCallHasSideEffects(rvalue)) {\n              return true;\n            }\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..6c2b1e80 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,20 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+    if (n.isExprResult()) {\n+      Node expr = n.getFirstChild();\n+      if (expr.isAssign()) {\n+        Node lvalue = expr.getFirstChild();\n+        if (lvalue.isName()) {\n+          if (isDependentValue(lvalue.getString())) {\n+            Node rvalue = expr.getLastChild();\n+            if (rvalue.isCall() && NodeUtil.functionCallHasSideEffects(rvalue)) {\n+              return true;\n+            }\n+          }\n+        }\n+      }\n+    }\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}