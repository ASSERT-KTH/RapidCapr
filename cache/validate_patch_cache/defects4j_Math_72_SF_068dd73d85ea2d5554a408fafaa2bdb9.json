{
    "patch": "public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    // return the initial guess if it is good enough\n    double yInitial = f.value(initial);\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    // return the first endpoint if it is good enough\n    double yMin = f.value(min);\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    }\n\n    // return the second endpoint if it is good enough\n    double yMax = f.value(max);\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    }\n\n    // check if either endpoint is very close to the root\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    }\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    }\n\n    // check that min and max bracket the root\n    if (yMin * yMax > 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n    }\n\n    double x = initial;\n    double y = yInitial;\n    double z = Double.NaN;\n\n    boolean inverted = false;\n    double fx = Double.NaN;\n    double fy = Double.NaN;\n    double fz = Double.NaN;\n\n    double mp = 0;\n    double mq = 0;\n    double new_step = 0;\n\n    // Bisect the interval until we obtain a good bracketing of the root\n    while (true) {\n        if ((y > 0) == (z > 0)) {\n            // Move the last best guess down to the new range\n            x = z;\n            y = fz;\n        } else {\n            // Inverse the last best guess to the new range\n            x = y;\n            y = fy;\n            inverted = !inverted;\n        }\n        // Calculate the new midpoint\n        mp = (x + z) * 0.5;\n        // Halving the tolerance is appropriate in this context\n        double tolerance = invertAbsolut",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex e0cb42714..6f55b53d9 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,53 +95,78 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n-                        final double min, final double max, final double initial)\n+public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+    clearResult();\n+    verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n-        double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+    // return the initial guess if it is good enough\n+    double yInitial = f.value(initial);\n+    if (Math.abs(yInitial) <= functionValueAccuracy) {\n+        setResult(initial, 0);\n+        return result;\n+    }\n \n-        // return the first endpoint if it is good enough\n-        double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+    // return the first endpoint if it is good enough\n+    double yMin = f.value(min);\n+    if (Math.abs(yMin) <= functionValueAccuracy) {\n+        setResult(min, 0);\n+        return result;\n+    }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n+    // return the second endpoint if it is good enough\n+    double yMax = f.value(max);\n+    if (Math.abs(yMax) <= functionValueAccuracy) {\n+        setResult(max, 0);\n+        return result;\n+    }\n \n-        // return the second endpoint if it is good enough\n-        double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+    // check if either endpoint is very close to the root\n+    if (Math.abs(yMax) <= functionValueAccuracy) {\n+        setResult(max, 0);\n+        return result;\n+    }\n+    if (Math.abs(yMin) <= functionValueAccuracy) {\n+        setResult(min, 0);\n+        return result;\n+    }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+    // check that min and max bracket the root\n+    if (yMin * yMax > 0) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+    }\n \n-        if (yMin * yMax > 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n-        }\n+    double x = initial;\n+    double y = yInitial;\n+    double z = Double.NaN;\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+    boolean inverted = false;\n+    double fx = Double.NaN;\n+    double fy = Double.NaN;\n+    double fz = Double.NaN;\n \n-    }\n+    double mp = 0;\n+    double mq = 0;\n+    double new_step = 0;\n+\n+    // Bisect the interval until we obtain a good bracketing of the root\n+    while (true) {\n+        if ((y > 0) == (z > 0)) {\n+            // Move the last best guess down to the new range\n+            x = z;\n+            y = fz;\n+        } else {\n+            // Inverse the last best guess to the new range\n+            x = y;\n+            y = fy;\n+            inverted = !inverted;\n+        }\n+        // Calculate the new midpoint\n+        mp = (x + z) * 0.5;\n+        // Halving the tolerance is appropriate in this context\n+        double tolerance = invertAbsolut\n \n     /**\n      * Find a zero in the given interval.",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}