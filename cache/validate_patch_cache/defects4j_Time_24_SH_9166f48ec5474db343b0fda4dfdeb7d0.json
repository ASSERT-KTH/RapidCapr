{
    "patch": "            // alter year for two digit year parsing\n            if (savedFields != null) {\n                for (int i = 0; i < count; i++) {\n                    SavedField sf = savedFields[i];\n                    DateTimeField field = sf.iField;\n                    if (field.getType().equals(DateTimeFieldType.year()) && sf.isSaved() && sf.getValue() < 100) {\n                        int year = iDefaultYear % 100;\n                        int value = sf.getValue();\n                        int pivot = (iDefaultYear / 100 - 1) * 100 + value;\n                        int age = iDefaultYear - pivot;\n                        if (age >= 0) {\n                            year += age;\n                        } else {\n                            year -= age;\n                            if (year % 100 == 0) {\n                                year = 99;\n                            } else {\n                                year %= 100;\n                            }\n                        }\n                        saveField(field, year);\n                    } else {\n                        sf.save();\n                    }\n                }\n                sort(savedFields, count);\n                for (int i = 0; i < count; i++) {\n                    millis = savedFields[i].set(millis, resetFields);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..6e829269 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,34 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            // alter year for two digit year parsing\n+            if (savedFields != null) {\n+                for (int i = 0; i < count; i++) {\n+                    SavedField sf = savedFields[i];\n+                    DateTimeField field = sf.iField;\n+                    if (field.getType().equals(DateTimeFieldType.year()) && sf.isSaved() && sf.getValue() < 100) {\n+                        int year = iDefaultYear % 100;\n+                        int value = sf.getValue();\n+                        int pivot = (iDefaultYear / 100 - 1) * 100 + value;\n+                        int age = iDefaultYear - pivot;\n+                        if (age >= 0) {\n+                            year += age;\n+                        } else {\n+                            year -= age;\n+                            if (year % 100 == 0) {\n+                                year = 99;\n+                            } else {\n+                                year %= 100;\n+                            }\n+                        }\n+                        saveField(field, year);\n+                    } else {\n+                        sf.save();\n+                    }\n+                }\n+                sort(savedFields, count);\n+                for (int i = 0; i < count; i++) {\n+                    millis = savedFields[i].set(millis, resetFields);\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}