{
    "patch": "    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n        if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        }\n        int size = elementPairs.size();\n        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n            Separator sep = (Separator) elementPairs.get(0);\n            if (sep == null) {\n                if (size == 2) {\n                    Object[] comp = createComposite(elementPairs);\n                    if (notPrinter) {\n                        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n                    } else if (notParser) {\n                        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n                    } else {\n                        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n                    }\n                }\n                throw new IllegalArgumentException(\"Separators cannot be added to the middle of a PeriodFormatterBuilder\");\n            } else {\n                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n                sep = sep.finish(f.getPrinter(), f.getParser());\n                return new PeriodFormatter(sep, sep);\n            }\n        } else {\n            Object[] comp = createComposite(elementPairs);\n            if (notPrinter) {\n                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n            } else if (notParser) {\n                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n            } else {\n                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..40edcb0c 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -798,17 +798,32 @@ public class PeriodFormatterBuilder {\n         int size = elementPairs.size();\n         if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n             Separator sep = (Separator) elementPairs.get(0);\n+            if (sep == null) {\n+                if (size == 2) {\n+                    Object[] comp = createComposite(elementPairs);\n+                    if (notPrinter) {\n+                        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+                    } else if (notParser) {\n+                        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+                    } else {\n+                        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+                    }\n+                }\n+                throw new IllegalArgumentException(\"Separators cannot be added to the middle of a PeriodFormatterBuilder\");\n+            } else {\n                 PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n                 sep = sep.finish(f.getPrinter(), f.getParser());\n                 return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            }\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            Object[] comp = createComposite(elementPairs);\n+            if (notPrinter) {\n+                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            } else if (notParser) {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            } else {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            }\n         }\n     }\n ",
    "result_reason": "java.lang.IllegalArgumentException: Invalid format: \"PT1003199059S\" is malformed at \"1003199059S\"",
    "test_result": "FAIL"
}