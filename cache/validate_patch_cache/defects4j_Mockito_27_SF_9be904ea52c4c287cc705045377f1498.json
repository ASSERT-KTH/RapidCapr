{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n\n    if (oldMockHandler instanceof MockHandler) {\n        MockHandler<T> oldMockHandlerImpl = (MockHandler<T>) oldMockHandler;\n        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandlerImpl);\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n        ((Factory) mock).setCallbacks(new Callback[]{newFilter});\n    } else if (oldMockHandler instanceof MockHandlerAdapter) {\n        MockHandlerAdapter<T> oldMockHandlerAdapter = (MockHandlerAdapter<T>) oldMockHandler;\n        MockHandlerAdapter<T> newHandler = new MockHandlerAdapter<>(mock, mockSettings.isSerializable(), mockSettings.getExtraInterfaces());\n        newHandler.setInterceptors(new ArrayList<Interceptor>(Arrays.asList(oldMockHandlerAdapter.getInterceptors().toArray(new Interceptor[]{}))));\n        newHandler.validate();\n        //noinspection unchecked\n        ((InternalMockHandler<T>) ((Factory) mock).getCallback(0)).setMockitoInterceptor(newHandler);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..8d19c31f2 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,24 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+\n+    if (oldMockHandler instanceof MockHandler) {\n+        MockHandler<T> oldMockHandlerImpl = (MockHandler<T>) oldMockHandler;\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandlerImpl);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+        ((Factory) mock).setCallbacks(new Callback[]{newFilter});\n+    } else if (oldMockHandler instanceof MockHandlerAdapter) {\n+        MockHandlerAdapter<T> oldMockHandlerAdapter = (MockHandlerAdapter<T>) oldMockHandler;\n+        MockHandlerAdapter<T> newHandler = new MockHandlerAdapter<>(mock, mockSettings.isSerializable(), mockSettings.getExtraInterfaces());\n+        newHandler.setInterceptors(new ArrayList<Interceptor>(Arrays.asList(oldMockHandlerAdapter.getInterceptors().toArray(new Interceptor[]{}))));\n+        newHandler.validate();\n+        //noinspection unchecked\n+        ((InternalMockHandler<T>) ((Factory) mock).getCallback(0)).setMockitoInterceptor(newHandler);\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}