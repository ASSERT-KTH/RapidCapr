{
    "patch": "    boolean resolvedViaProperties = false;\n    if (resolved && isConstructor()) {\n      try {\n        resolvedViaProperties = resolveConstructor();\n      } catch (CyclicPrototypesException ex) {\n        registry.registerImplicitCycle(getName(), getId());\n        handleTypeCycle(t);\n      }\n    }\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    if (resolvedViaProperties) {\n      super.resolveInternal(t, enclosing);\n    }\n\n    if (resolved) {\n      super.resolveInternal(t, enclosing);\n      if (isResolved()) {\n        finishPropertyContinuations();\n      }\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n\n    if (!resolvedViaProperties) {\n      resolveViaProperties(t, enclosing);\n    }\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n    return registry.isLastGeneration() ? getReferencedType() : this;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..03add3b0 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,24 +181,34 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+    boolean resolvedViaProperties = false;\n+    if (resolved && isConstructor()) {\n+      try {\n+        resolvedViaProperties = resolveConstructor();\n+      } catch (CyclicPrototypesException ex) {\n+        registry.registerImplicitCycle(getName(), getId());\n+        handleTypeCycle(t);\n+      }\n+    }\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n \n+    if (resolvedViaProperties) {\n+      super.resolveInternal(t, enclosing);\n+    }\n+\n     if (resolved) {\n       super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+      if (isResolved()) {\n+        finishPropertyContinuations();\n+      }\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n \n-    resolveViaProperties(t, enclosing);\n+    if (!resolvedViaProperties) {\n+      resolveViaProperties(t, enclosing);\n+    }\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n@@ -207,9 +217,7 @@ class NamedType extends ProxyObjectType {\n     if (isResolved()) {\n       finishPropertyContinuations();\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}