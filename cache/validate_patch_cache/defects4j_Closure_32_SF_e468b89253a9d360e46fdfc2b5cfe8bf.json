{
    "patch": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                      WhitespaceOption option) {\n\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n        token == JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    token = next(); // move to the next token\n    String line = stream.getRemainingJSDocLine(); // retrieve the remaining JSDoc line\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    if (option != WhitespaceOption.PRESERVE) {\n      line = line.trim();\n    }\n\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n\n    state = State.SEARCHING_ANNOTATION;\n\n    boolean ignoreStar = false;\n\n    do {\n      switch (token) {\n        case STAR:\n          if (ignoreStar) {\n            // Mark the position after the star as the new start of the line.\n          } else {\n            // The star is part of the comment.\n            if (builder.length() > 0) {\n              builder.append(' ');\n            }\n\n            builder.append('*');\n          }\n\n          token = next();\n          continue;\n\n        case EOL:\n          if (option != WhitespaceOption.SINGLE_LINE) {\n            builder.append(\"\\n\");\n          }\n\n          ignoreStar = true;\n\n          // retrieve the remaining JSDoc line\n          line = stream.getRemainingJSDocLine();\n\n          if (option != WhitespaceOption.PRESERVE) {\n            line = line.trim();\n          }\n\n          builder.append(line);\n          token = next(); // move to the next token\n          continue;\n\n        case ANNOTATION:\n        default:\n          ignoreStar = false;\n          state = State.SEARCHING_ANNOTATION;\n\n          if (token == JsDocToken.EOC ||\n              token == JsDocToken.EOF ||\n              (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {\n            String multilineText = builder.toString();\n\n            if (option != WhitespaceOption.PRESERVE) {\n              multilineText = multilineText.trim();\n            }\n\n            int endLineno = stream.getLineno();\n            int endCharno = stream.getCharno();\n\n            if (multilineText.length() > 0) {\n              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                  endLineno, endCharno);\n            }\n\n            return new ExtractionInfo(multilineText, token);\n          }\n\n          if (builder.length() > 0) {\n            builder.append(' ');\n          }\n          builder.append(toString(token));\n\n          // retrieve the remaining JSDoc line\n          line = stream.getRemainingJSDocLine();\n\n          if (option != WhitespaceOption.PRESERVE) {\n            line = line.trim();\n          }\n\n          builder.append(line);\n          token = next(); // move to the next token\n      }\n    } while (true);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..c7608552 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,7 +1326,7 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                       WhitespaceOption option) {\n \n     if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n@@ -1335,11 +1335,11 @@ public final class JsDocInfoParser {\n     }\n \n     stream.update();\n+    token = next(); // move to the next token\n+    String line = stream.getRemainingJSDocLine(); // retrieve the remaining JSDoc line\n     int startLineno = stream.getLineno();\n     int startCharno = stream.getCharno() + 1;\n \n-    // Read the content from the first line.\n-    String line = stream.getRemainingJSDocLine();\n     if (option != WhitespaceOption.PRESERVE) {\n       line = line.trim();\n     }\n@@ -1348,14 +1348,9 @@ public final class JsDocInfoParser {\n     builder.append(line);\n \n     state = State.SEARCHING_ANNOTATION;\n-    token = next();\n \n     boolean ignoreStar = false;\n \n-    // Track the start of the line to count whitespace that\n-    // the tokenizer skipped. Because this case is rare, it's easier\n-    // to do this here than in the tokenizer.\n-\n     do {\n       switch (token) {\n         case STAR:\n@@ -1379,21 +1374,26 @@ public final class JsDocInfoParser {\n           }\n \n           ignoreStar = true;\n-          token = next();\n+\n+          // retrieve the remaining JSDoc line\n+          line = stream.getRemainingJSDocLine();\n+\n+          if (option != WhitespaceOption.PRESERVE) {\n+            line = line.trim();\n+          }\n+\n+          builder.append(line);\n+          token = next(); // move to the next token\n           continue;\n \n+        case ANNOTATION:\n         default:\n           ignoreStar = false;\n           state = State.SEARCHING_ANNOTATION;\n \n-              // All tokens must be separated by a space.\n-\n           if (token == JsDocToken.EOC ||\n               token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n+              (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {\n             String multilineText = builder.toString();\n \n             if (option != WhitespaceOption.PRESERVE) {\n@@ -1416,14 +1416,15 @@ public final class JsDocInfoParser {\n           }\n           builder.append(toString(token));\n \n+          // retrieve the remaining JSDoc line\n           line = stream.getRemainingJSDocLine();\n \n           if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n+            line = line.trim();\n           }\n \n           builder.append(line);\n-          token = next();\n+          token = next(); // move to the next token\n       }\n     } while (true);\n   }",
    "result_reason": "junit.framework.AssertionFailedError: Property length of type Foo has been deprecated.",
    "test_result": "FAIL"
}