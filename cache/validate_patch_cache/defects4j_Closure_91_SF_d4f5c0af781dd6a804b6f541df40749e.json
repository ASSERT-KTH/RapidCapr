{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = n.getJSDocInfo();\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them.\n      if (!isValidFunctionParent(parent, n)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      // Ignore functions that are assigned to prototype properties or sub-properties.\n      if (NodeUtil.isGet(lhs) && isValidPrototypeAssignment(lhs)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private boolean isValidFunctionParent(Node parent, Node node) {\n    if (parent == null) {\n      return false;\n    }\n    int parentType = parent.getType();\n    if (parentType == Token.EXPR_RESULT) {\n      return isValidFunctionParent(parent.getParent(), node);\n    } else if (parentType == Token.VAR) {\n      Node grandParent = parent.getParent();\n      if (grandParent == null) {\n        return false;\n      }\n\n      if (grandParent.getType() == Token.FOR_OF\n          || grandParent.getType() == Token.FOR\n          || grandParent.getType() == Token.WHILE\n          || grandParent.getType() == Token.DO) {\n        return false;\n      }\n      return true;\n    } else if (parentType == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      if (!NodeUtil.isValidGet(lhs)) {\n        return false;\n      }\n      return NodeUtil.isObjectLitKey(lhs, node);\n    } else if (parentType == Token.FUNCTION) {\n      return true;\n    } else if (parentType == Token.OBJECTLIT) {\n      return true;\n    } else if (parentType == Token.ARRAYLIT) {\n      return true;\n    }\n    return false;\n  }\n\n  private boolean isValidPrototypeAssignment(Node assignmentNode) {\n    Node lhs = assignmentNode.getFirstChild();\n    return NodeUtil.isGet(lhs)\n        && lhs.getLastChild().getString().equals(\"prototype\")\n        && !NodeUtil.isName(lhs.getFirstChild().getLastChild())\n        && !NodeUtil.isThis(lhs.getFirstChild().getLastChild())\n        && !NodeUtil.isSuper(lhs.getFirstChild().getLastChild());\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..8a6d058e 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,12 +79,11 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n       // Don't traverse functions that are constructors or have the @this\n       // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+      JSDocInfo jsDoc = n.getJSDocInfo();\n       if (jsDoc != null &&\n           (jsDoc.isConstructor() ||\n            jsDoc.isInterface() ||\n@@ -94,57 +93,70 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n+      // be able to have a @this annotation associated with them.\n+      if (!isValidFunctionParent(parent, n)) {\n         return false;\n       }\n-\n-      // Don't traverse functions that are getting lent to a prototype.\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n       Node lhs = parent.getFirstChild();\n       Node rhs = lhs.getNext();\n \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-        }\n+      // Ignore functions that are assigned to prototype properties or sub-properties.\n+      if (NodeUtil.isGet(lhs) && isValidPrototypeAssignment(lhs)) {\n+        return false;\n       }\n     }\n \n     return true;\n   }\n \n+  private boolean isValidFunctionParent(Node parent, Node node) {\n+    if (parent == null) {\n+      return false;\n+    }\n+    int parentType = parent.getType();\n+    if (parentType == Token.EXPR_RESULT) {\n+      return isValidFunctionParent(parent.getParent(), node);\n+    } else if (parentType == Token.VAR) {\n+      Node grandParent = parent.getParent();\n+      if (grandParent == null) {\n+        return false;\n+      }\n+\n+      if (grandParent.getType() == Token.FOR_OF\n+          || grandParent.getType() == Token.FOR\n+          || grandParent.getType() == Token.WHILE\n+          || grandParent.getType() == Token.DO) {\n+        return false;\n+      }\n+      return true;\n+    } else if (parentType == Token.ASSIGN) {\n+      Node lhs = parent.getFirstChild();\n+      if (!NodeUtil.isValidGet(lhs)) {\n+        return false;\n+      }\n+      return NodeUtil.isObjectLitKey(lhs, node);\n+    } else if (parentType == Token.FUNCTION) {\n+      return true;\n+    } else if (parentType == Token.OBJECTLIT) {\n+      return true;\n+    } else if (parentType == Token.ARRAYLIT) {\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  private boolean isValidPrototypeAssignment(Node assignmentNode) {\n+    Node lhs = assignmentNode.getFirstChild();\n+    return NodeUtil.isGet(lhs)\n+        && lhs.getLastChild().getString().equals(\"prototype\")\n+        && !NodeUtil.isName(lhs.getFirstChild().getLastChild())\n+        && !NodeUtil.isThis(lhs.getFirstChild().getLastChild())\n+        && !NodeUtil.isSuper(lhs.getFirstChild().getLastChild());\n+  }\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n       compiler.report(t.makeError(n, level, GLOBAL_THIS));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}