{
    "patch": "public ReturnValue execute(Callable method) {\n    try {\n        Object result = method.call();\n        if (result == null) {\n            return new NullReturnValue();\n        } else if (result instanceof Iterable) {\n            Iterable iterable = (Iterable) result;\n            Iterator iterator = iterable.iterator();\n            if (!iterator.hasNext()) {\n                return new EmptyIterableReturnValue(iterable);\n            }\n            return new IterableReturnValue(iterable);\n        } else if (result instanceof Collection) {\n            Collection collection = (Collection) result;\n            if (collection.isEmpty()) {\n                return new EmptyCollectionReturnValue(collection);\n            }\n            return new CollectionReturnValue(collection);\n        } else if (result instanceof Map) {\n            Map map = (Map) result;\n            if (map.isEmpty()) {\n                return new EmptyMapReturnValue(map);\n            }\n            return new MapReturnValue(map);\n        } else {\n            return new ValueReturnValue(result);\n        }\n    } catch (Throwable exception) {\n        return new ExceptionReturnValue(exception);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}