{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  if (!right.isNumber()) {\n    // The right-hand side of a GETELEM must be a number.\n    return n;\n  }\n\n  double indexDouble = right.getDouble();\n  int index = (int) indexDouble;\n    \n  if (index != indexDouble) {\n    // Array indexes must be integers. \n    error(INVALID_GETELEM_INDEX_ERROR, right);\n    return n;\n  }\n\n  if (index < 0) {\n    // Array indexes must be non-negative. \n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  Node current = left.getFirstChild();\n  Node elem = null;\n  int count = 0;\n    \n  while (current != null) {\n    if (current.isSpread()) {\n      // A GETELEM containing a spread operator cannot be folded.\n      return n;\n    }\n    if (count == index) {\n      elem = current.cloneTree();\n      break;\n    }\n    current = current.getNext();\n    count += 1;\n  }\n\n  if (elem == null) {\n    // Index is out of bounds.\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  if (elem.isEmpty()) {\n    // An empty array element evaluates to `undefined`.\n    elem = NodeUtil.newUndefinedNode(n);\n  } else {\n    left.removeChild(elem);\n  }\n\n  n.getParent().replaceChild(n, elem);\n  reportCodeChange();\n  return elem;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..9e9020b3 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,58 +1419,62 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-    if (isAssignmentTarget(n)) {\n-      return n;\n-    }\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+  if (!right.isNumber()) {\n+    // The right-hand side of a GETELEM must be a number.\n+    return n;\n+  }\n \n-    if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n-    }\n+  double indexDouble = right.getDouble();\n+  int index = (int) indexDouble;\n+    \n+  if (index != indexDouble) {\n+    // Array indexes must be integers. \n+    error(INVALID_GETELEM_INDEX_ERROR, right);\n+    return n;\n+  }\n \n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n+  if (index < 0) {\n+    // Array indexes must be non-negative. \n+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    return n;\n+  }\n \n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+  Node current = left.getFirstChild();\n+  Node elem = null;\n+  int count = 0;\n+    \n+  while (current != null) {\n+    if (current.isSpread()) {\n+      // A GETELEM containing a spread operator cannot be folded.\n       return n;\n     }\n-\n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n-    }\n-\n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+    if (count == index) {\n+      elem = current.cloneTree();\n+      break;\n     }\n+    current = current.getNext();\n+    count += 1;\n+  }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n-    }\n+  if (elem == null) {\n+    // Index is out of bounds.\n+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    return n;\n+  }\n \n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n+  if (elem.isEmpty()) {\n+    // An empty array element evaluates to `undefined`.\n+    elem = NodeUtil.newUndefinedNode(n);\n+  } else {\n+    left.removeChild(elem);\n   }\n \n+  n.getParent().replaceChild(n, elem);\n+  reportCodeChange();\n+  return elem;\n+}\n+\n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}