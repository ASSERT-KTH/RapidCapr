{
    "patch": "public static boolean containsAny(CharSequence string, char... searchChars) {\n    if (isEmpty(string) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    int strLength = string.length();\n    int searchLength = searchChars.length;\n    int max = strLength - searchLength;\n\n    if (searchLength == 1) {\n        for (int i = 0; i < strLength; i++) {\n            if (string.charAt(i) == searchChars[0]) {\n                return true;\n            }\n        }\n    } else if (searchLength == 2) {\n        char searchChar1 = searchChars[0];\n        char searchChar2 = searchChars[1];\n        for (int i = 0; i < max; i++) {\n            if (string.charAt(i) == searchChar1 && string.charAt(i + 1) == searchChar2) {\n                return true;\n            }\n        }\n    } else {\n        char[] chars = string.toString().toCharArray();\n        Arrays.sort(searchChars);\n        for (int i = 0; i < max; i++) {\n            char ch = chars[i];\n            if (ch > searchChars[searchLength - 1]) {\n                break;\n            }\n            if (Arrays.binarySearch(searchChars, ch) >= 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nprivate static boolean isEmpty(final CharSequence cs) {\n    return cs == null || cs.length() == 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..d4d0465b 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,47 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(CharSequence string, char... searchChars) {\n+    if (isEmpty(string) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    int strLength = string.length();\n+    int searchLength = searchChars.length;\n+    int max = strLength - searchLength;\n+\n+    if (searchLength == 1) {\n+        for (int i = 0; i < strLength; i++) {\n+            if (string.charAt(i) == searchChars[0]) {\n+                return true;\n+            }\n+        }\n+    } else if (searchLength == 2) {\n+        char searchChar1 = searchChars[0];\n+        char searchChar2 = searchChars[1];\n+        for (int i = 0; i < max; i++) {\n+            if (string.charAt(i) == searchChar1 && string.charAt(i + 1) == searchChar2) {\n+                return true;\n+            }\n+        }\n+    } else {\n+        char[] chars = string.toString().toCharArray();\n+        Arrays.sort(searchChars);\n+        for (int i = 0; i < max; i++) {\n+            char ch = chars[i];\n+            if (ch > searchChars[searchLength - 1]) {\n+                break;\n+            }\n+            if (Arrays.binarySearch(searchChars, ch) >= 0) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean isEmpty(final CharSequence cs) {\n+    return cs == null || cs.length() == 0;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}