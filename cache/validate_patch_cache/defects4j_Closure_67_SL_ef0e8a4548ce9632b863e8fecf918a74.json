{
    "patch": "&& assign.getParent() != null \n&& (assign.getParent().getType() == Token.EXPR_RESULT || assign.getParent().getType() == Token.FOR)\n&& n != null \n&& n.getType() == Token.GETPROP \n&& n.getFirstChild() != null \n&& n.getFirstChild().getType() == Token.GETPROP \n&",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..e230cae3 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -315,7 +315,13 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+&& assign.getParent() != null \n+&& (assign.getParent().getType() == Token.EXPR_RESULT || assign.getParent().getType() == Token.FOR)\n+&& n != null \n+&& n.getType() == Token.GETPROP \n+&& n.getFirstChild() != null \n+&& n.getFirstChild().getType() == Token.GETPROP \n+&\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: '.class' expected",
    "test_result": "ERROR"
}