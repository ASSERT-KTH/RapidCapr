{
    "patch": "            if (indexOfVararg < matchers.size()) {\n                Matcher m = matchers.get(indexOfVararg);\n                if (m instanceof CapturesArguments) {\n                    Object varArgArray = invocation.getArgumentAt(indexOfVararg, Object.class);\n                    if (varArgArray != null && varArgArray.getClass().isArray()) {\n                        int varArgLength = Array.getLength(varArgArray);\n                        for (int i = 0; i < varArgLength; i++) {\n                            ((CapturesArguments) m).captureFrom(Array.get(varArgArray, i));\n                        }\n                    } else {\n                        ((CapturesArguments) m).captureFrom(varArgArray);\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..5829b76b1 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,20 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            if (indexOfVararg < matchers.size()) {\n+                Matcher m = matchers.get(indexOfVararg);\n+                if (m instanceof CapturesArguments) {\n+                    Object varArgArray = invocation.getArgumentAt(indexOfVararg, Object.class);\n+                    if (varArgArray != null && varArgArray.getClass().isArray()) {\n+                        int varArgLength = Array.getLength(varArgArray);\n+                        for (int i = 0; i < varArgLength; i++) {\n+                            ((CapturesArguments) m).captureFrom(Array.get(varArgArray, i));\n+                        }\n+                    } else {\n+                        ((CapturesArguments) m).captureFrom(varArgArray);\n+                    }\n+                }\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "java.lang.ArrayIndexOutOfBoundsException: 0",
    "test_result": "FAIL"
}