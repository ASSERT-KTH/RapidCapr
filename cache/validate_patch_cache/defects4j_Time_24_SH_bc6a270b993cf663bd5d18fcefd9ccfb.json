{
    "patch": "            if (resetFields) {\n                for (int i = 0; i < count; i++) {\n                    if (savedFields[i].iField.getType() == DateTimeFieldType.year()) {\n                        if (savedFields[i].iValue != null) {\n                            int year = ((Integer) savedFields[i].iValue).intValue();\n                            if (year < 0) {\n                                year = 1 - year;\n                            }\n                            if (savedFields[i].iValue == null) {\n                                saveField(DateTimeFieldType.year(), iDefaultYear);\n                                continue;\n                            }\n                            saveField(DateTimeFieldType.year(), year);\n                            continue;\n                        }\n                    }\n                    if (resetFields) {\n                        savedFields[i].init();\n                    }\n                }\n                try {\n                    for (int i = 0; i < count; i++) {\n                        millis = savedFields[i].set(millis, false);\n                    }\n                } catch (IllegalFieldValueException ex) {\n                    if (text != null) {\n                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                    }\n                    throw e;\n                }\n            } else {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n                }\n                throw e;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..76c532b4 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,41 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (resetFields) {\n+                for (int i = 0; i < count; i++) {\n+                    if (savedFields[i].iField.getType() == DateTimeFieldType.year()) {\n+                        if (savedFields[i].iValue != null) {\n+                            int year = ((Integer) savedFields[i].iValue).intValue();\n+                            if (year < 0) {\n+                                year = 1 - year;\n+                            }\n+                            if (savedFields[i].iValue == null) {\n+                                saveField(DateTimeFieldType.year(), iDefaultYear);\n+                                continue;\n+                            }\n+                            saveField(DateTimeFieldType.year(), year);\n+                            continue;\n+                        }\n+                    }\n+                    if (resetFields) {\n+                        savedFields[i].init();\n+                    }\n+                }\n+                try {\n+                    for (int i = 0; i < count; i++) {\n+                        millis = savedFields[i].set(millis, false);\n+                    }\n+                } catch (IllegalFieldValueException ex) {\n+                    if (text != null) {\n+                        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                    }\n+                    throw e;\n+                }\n+            } else {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                }\n+                throw e;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'catch' without 'try'",
    "test_result": "ERROR"
}