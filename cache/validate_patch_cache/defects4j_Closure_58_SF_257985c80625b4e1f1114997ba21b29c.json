{
    "patch": "private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {\n  switch (n.getType()) {\n    case Token.SCRIPT:\n    case Token.BLOCK:\n    case Token.FUNCTION:\n      return;\n    case Token.WHILE:\n    case Token.DO:\n    case Token.IF:\n      computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n      return;\n    case Token.FOR:\n      if (!NodeUtil.isForIn(n)) {\n        // Normal for loop.\n        Node condExpr = NodeUtil.getConditionExpression(n);\n        if (condExpr != null) {\n          computeGenKill(condExpr, gen, kill, conditional);\n        }\n      } else {\n        // for-in loop.\n        Node lhsNode = n.getFirstChild();\n        Node rhsNode = lhsNode.getNext();\n        if (NodeUtil.isVar(lhsNode)) {\n          lhsNode = lhsNode.getFirstChild();\n        } else {\n          lhsNode = lhsNode.cloneNode();\n          lhsNode.setType(Token.VAR);\n          lhsNode.addChildToBack(lhsNode.removeFirstChild());\n          n.replaceChild(n.getFirstChild(), lhsNode);\n        }\n        // shouldDeleteAfterwards records whether the loop variable is already in scope.\n        // If the loop variable is in function scope, we must not delete the declaration\n        // on exit. If it's in global scope, we must leave the declaration in for any\n        // future loops.\n        int shouldBeUndefined = getNonLocalResultIndex(lhsNode.getFirstChild().getString());\n        boolean shouldDeleteAfterwards = false;\n        boolean isReferencedInLoop = false;\n        if (lhsNode.getFirstChild().getType() == Token.NAME) {\n          shouldBeUndefined = getLocalBinding((Node) lhsNode.getFirstChild()).index;\n          isReferencedInLoop = true;\n          if (this.currentScope.isGlobal()\n              || this.currentScope.isModuleScope()\n              || this.inWithDepth != 0) {\n            shouldDeleteAfterwards = true;\n          }\n        }\n        int lhsIndex = shouldBeUndefined;\n        boolean killed = false;\n        if (!lhsNode.getFirstChild().isNew()) {\n          lhsIndex = getLocalBinding((Node) lhsNode.getFirstChild()).index;\n          if (lhsIndex >= 0) {\n            killed = kill.get(lhsIndex);\n            kill.set(lhsIndex);\n          } else if (this.currentScope.isModuleScope()) {\n            // Assigning to a global, so must mark the module VAR as killed.\n            lhsIndex = getNonLocalSlot(lhsNode.getFirstChild());\n            if (lhsIndex >= 0) {\n              killed = kill.get(lhsIndex);\n              kill.set(lhsIndex);\n            }\n          }\n        } else {\n          lhsIndex = allocateTempVar();\n        }\n        if (!killed) {\n          gen.set(lhsIndex);\n        }\n        computeGenKill(rhsNode, gen, kill, conditional);\n        if (isNewName(lhsNode.getFirstChild())) {\n          int varIndex = getLocalSlot(lhsNode.getFirstChild());\n          // Declare a new loop variable.\n          declareName(lhsNode.getFirstChild().getString(), lhsNode.getFirstChild(), false);\n          lhsNode.getFirstChild().putProp(Node.INCR_DECR_PROP, Boolean.TRUE);\n          bindingIsSoft(varIndex, true);\n        }\n        if (!shouldDeleteAfterwards && isReferencedInLoop) {\n          if (lhsNode.getParent().getType() == Token.VAR) {\n            lhsNode.getParent().removeChild(lhsNode);\n          } else {\n            lhsNode.removeChild(lhsNode.getFirstChild());\n          }\n        }\n        NodeUtil.addChildrenBackToBeginning(n, lhsNode);\n        resetTempVar(lhsIndex);\n      }\n      return;\n    case Token.VAR:\n      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n        if (c.hasChildren()) {\n          computeGenKill(c.getFirstChild(), gen, kill, conditional);\n          if (!conditional) {\n            addToSetIfLocal(c.getFirstChild(), kill);\n          }\n        }\n      }\n      return;\n    case Token.AND:\n    case Token.OR:\n      computeGenKill(n.getFirstChild(), gen, kill, conditional);\n      // May short circuit.\n      computeGenKill(n.getLastChild(), gen, kill, true);\n      return;\n    case Token.HOOK:\n      computeGenKill(n.getFirstChild(), gen, kill, conditional);\n      // Assume both sides are conditional.\n      computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n      computeGenKill(n.getLastChild(), gen, kill, true);\n      return;\n    case Token.NAME:\n      if (isArgumentsName(n)) {\n        markAllParametersEscaped();\n      } else {\n        addToSetIfLocal(n, gen);\n      }\n      return;\n    default:\n      if (n.isFunction()) {\n        addToSetIfLocal(n.getFirstChild(), gen);\n        for (Node c = n.getLastChild(); c != null; c = c.getPrevious()) {\n          addToSetIfLocal(c, gen);\n        }\n        return;\n      }\n      if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n        Node lhs = n.getFirstChild();\n        if (!conditional) {\n          addToSetIfLocal(lhs, kill);\n        }\n        if (!NodeUtil.isAssign(n)) {\n          // a += 1, a is read.\n          addToSetIfLocal(lhs, gen);\n        }\n        computeGenKill(lhs.getNext(), gen, kill, conditional);\n      } else {\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          computeGenKill(c, gen, kill, conditional);\n        }\n      }\n      return;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\nindex 7999db40..33a22594 100644\n--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n@@ -175,92 +175,147 @@ class LiveVariablesAnalysis extends\n    * @param conditional {@code true} if any assignments encountered are\n    *        conditionally executed. These assignments might not kill a variable.\n    */\n-  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n-      boolean conditional) {\n-\n-    switch (n.getType()) {\n-      case Token.SCRIPT:\n-      case Token.BLOCK:\n-      case Token.FUNCTION:\n-        return;\n-\n-      case Token.WHILE:\n-      case Token.DO:\n-      case Token.IF:\n-        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-            conditional);\n-        return;\n-\n-      case Token.FOR:\n-        if (!NodeUtil.isForIn(n)) {\n-          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-              conditional);\n+private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {\n+  switch (n.getType()) {\n+    case Token.SCRIPT:\n+    case Token.BLOCK:\n+    case Token.FUNCTION:\n+      return;\n+    case Token.WHILE:\n+    case Token.DO:\n+    case Token.IF:\n+      computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n+      return;\n+    case Token.FOR:\n+      if (!NodeUtil.isForIn(n)) {\n+        // Normal for loop.\n+        Node condExpr = NodeUtil.getConditionExpression(n);\n+        if (condExpr != null) {\n+          computeGenKill(condExpr, gen, kill, conditional);\n+        }\n+      } else {\n+        // for-in loop.\n+        Node lhsNode = n.getFirstChild();\n+        Node rhsNode = lhsNode.getNext();\n+        if (NodeUtil.isVar(lhsNode)) {\n+          lhsNode = lhsNode.getFirstChild();\n         } else {\n-          // for(x in y) {...}\n-          Node lhs = n.getFirstChild();\n-          Node rhs = lhs.getNext();\n-          if (NodeUtil.isVar(lhs)) {\n-            // for(var x in y) {...}\n-            lhs = lhs.getLastChild();\n+          lhsNode = lhsNode.cloneNode();\n+          lhsNode.setType(Token.VAR);\n+          lhsNode.addChildToBack(lhsNode.removeFirstChild());\n+          n.replaceChild(n.getFirstChild(), lhsNode);\n+        }\n+        // shouldDeleteAfterwards records whether the loop variable is already in scope.\n+        // If the loop variable is in function scope, we must not delete the declaration\n+        // on exit. If it's in global scope, we must leave the declaration in for any\n+        // future loops.\n+        int shouldBeUndefined = getNonLocalResultIndex(lhsNode.getFirstChild().getString());\n+        boolean shouldDeleteAfterwards = false;\n+        boolean isReferencedInLoop = false;\n+        if (lhsNode.getFirstChild().getType() == Token.NAME) {\n+          shouldBeUndefined = getLocalBinding((Node) lhsNode.getFirstChild()).index;\n+          isReferencedInLoop = true;\n+          if (this.currentScope.isGlobal()\n+              || this.currentScope.isModuleScope()\n+              || this.inWithDepth != 0) {\n+            shouldDeleteAfterwards = true;\n           }\n-            addToSetIfLocal(lhs, kill);\n-            addToSetIfLocal(lhs, gen);\n-          computeGenKill(rhs, gen, kill, conditional);\n         }\n-        return;\n-\n-      case Token.VAR:\n-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-          if (c.hasChildren()) {\n-            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n-            if (!conditional) {\n-              addToSetIfLocal(c, kill);\n+        int lhsIndex = shouldBeUndefined;\n+        boolean killed = false;\n+        if (!lhsNode.getFirstChild().isNew()) {\n+          lhsIndex = getLocalBinding((Node) lhsNode.getFirstChild()).index;\n+          if (lhsIndex >= 0) {\n+            killed = kill.get(lhsIndex);\n+            kill.set(lhsIndex);\n+          } else if (this.currentScope.isModuleScope()) {\n+            // Assigning to a global, so must mark the module VAR as killed.\n+            lhsIndex = getNonLocalSlot(lhsNode.getFirstChild());\n+            if (lhsIndex >= 0) {\n+              killed = kill.get(lhsIndex);\n+              kill.set(lhsIndex);\n             }\n           }\n-        }\n-        return;\n-\n-      case Token.AND:\n-      case Token.OR:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // May short circuit.\n-        computeGenKill(n.getLastChild(), gen, kill, true);\n-        return;\n-\n-      case Token.HOOK:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // Assume both sides are conditional.\n-        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n-        computeGenKill(n.getLastChild(), gen, kill, true);\n-        return;\n-\n-      case Token.NAME:\n-        if (isArgumentsName(n)) {\n-          markAllParametersEscaped();\n         } else {\n-          addToSetIfLocal(n, gen);\n+          lhsIndex = allocateTempVar();\n         }\n-        return;\n-\n-      default:\n-        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n-          Node lhs = n.getFirstChild();\n-          if (!conditional) {\n-            addToSetIfLocal(lhs, kill);\n-          }\n-          if (!NodeUtil.isAssign(n)) {\n-            // assignments such as a += 1 reads a.\n-            addToSetIfLocal(lhs, gen);\n+        if (!killed) {\n+          gen.set(lhsIndex);\n+        }\n+        computeGenKill(rhsNode, gen, kill, conditional);\n+        if (isNewName(lhsNode.getFirstChild())) {\n+          int varIndex = getLocalSlot(lhsNode.getFirstChild());\n+          // Declare a new loop variable.\n+          declareName(lhsNode.getFirstChild().getString(), lhsNode.getFirstChild(), false);\n+          lhsNode.getFirstChild().putProp(Node.INCR_DECR_PROP, Boolean.TRUE);\n+          bindingIsSoft(varIndex, true);\n+        }\n+        if (!shouldDeleteAfterwards && isReferencedInLoop) {\n+          if (lhsNode.getParent().getType() == Token.VAR) {\n+            lhsNode.getParent().removeChild(lhsNode);\n+          } else {\n+            lhsNode.removeChild(lhsNode.getFirstChild());\n           }\n-          computeGenKill(lhs.getNext(), gen, kill, conditional);\n-        } else {\n-          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-            computeGenKill(c, gen, kill, conditional);\n+        }\n+        NodeUtil.addChildrenBackToBeginning(n, lhsNode);\n+        resetTempVar(lhsIndex);\n+      }\n+      return;\n+    case Token.VAR:\n+      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+        if (c.hasChildren()) {\n+          computeGenKill(c.getFirstChild(), gen, kill, conditional);\n+          if (!conditional) {\n+            addToSetIfLocal(c.getFirstChild(), kill);\n           }\n         }\n+      }\n+      return;\n+    case Token.AND:\n+    case Token.OR:\n+      computeGenKill(n.getFirstChild(), gen, kill, conditional);\n+      // May short circuit.\n+      computeGenKill(n.getLastChild(), gen, kill, true);\n+      return;\n+    case Token.HOOK:\n+      computeGenKill(n.getFirstChild(), gen, kill, conditional);\n+      // Assume both sides are conditional.\n+      computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n+      computeGenKill(n.getLastChild(), gen, kill, true);\n+      return;\n+    case Token.NAME:\n+      if (isArgumentsName(n)) {\n+        markAllParametersEscaped();\n+      } else {\n+        addToSetIfLocal(n, gen);\n+      }\n+      return;\n+    default:\n+      if (n.isFunction()) {\n+        addToSetIfLocal(n.getFirstChild(), gen);\n+        for (Node c = n.getLastChild(); c != null; c = c.getPrevious()) {\n+          addToSetIfLocal(c, gen);\n+        }\n         return;\n-    }\n+      }\n+      if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n+        Node lhs = n.getFirstChild();\n+        if (!conditional) {\n+          addToSetIfLocal(lhs, kill);\n+        }\n+        if (!NodeUtil.isAssign(n)) {\n+          // a += 1, a is read.\n+          addToSetIfLocal(lhs, gen);\n+        }\n+        computeGenKill(lhs.getNext(), gen, kill, conditional);\n+      } else {\n+        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+          computeGenKill(c, gen, kill, conditional);\n+        }\n+      }\n+      return;\n   }\n+}\n \n   private void addToSetIfLocal(Node node, BitSet set) {\n     Preconditions.checkState(NodeUtil.isName(node));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}