{
    "patch": "    private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n\n        // Truncate all fields below the specified field\n        switch (field) {\n            case Calendar.YEAR:\n                val.clear(Calendar.MONTH);\n            case Calendar.MONTH:\n                val.set(Calendar.DAY_OF_MONTH, 1);\n            case Calendar.DATE:\n            case Calendar.DAY_OF_WEEK:\n            case Calendar.DAY_OF_WEEK_IN_MONTH:\n                val.set(Calendar.HOUR_OF_DAY, 0);\n            case Calendar.HOUR:\n            case Calendar.HOUR_OF_DAY:\n                val.clear(Calendar.MINUTE);\n            case Calendar.MINUTE:\n                val.clear(Calendar.SECOND);\n            case Calendar.SECOND:\n                val.clear(Calendar.MILLISECOND);\n                break;\n            default:\n                throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n        }\n\n        // Handle rounding\n        if (round) {\n            int value = val.get(field);\n            if (field == Calendar.MONTH && value == 0) {\n                // Special case for January. DateUtils.round rounds down to December of previous year.\n                // Also, we can't use val.getActualMaximum(Calendar.MONTH) because it returns 11 on some systems\n                val.add(Calendar.YEAR, -1);\n                val.set(Calendar.MONTH, 11);\n            } else if (value > 0) {\n                int offset = 0;\n                int max = val.getActualMaximum(field);\n                if (field == Calendar.DAY_OF_MONTH || field == Calendar.DAY_OF_WEEK_IN_MONTH) {\n                    // Special case for rounding days. We need to determine whether to round up or down based on field value\n                    int halfMax = (max + 1) / 2;\n                    if (value >= halfMax) {\n                        offset = max - value + 1;\n                    } else {\n                        offset = -value;\n                    }\n                } else {\n                    // For other fields, we round up if value is greater than half the maximum\n                    int halfMax = max / 2;\n                    if (value > halfMax) {\n                        offset = max - value + 1;\n                    } else {\n                        offset = -value;\n                    }\n                }\n                val.add(field, offset);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/time/DateUtils.java b/src/java/org/apache/commons/lang/time/DateUtils.java\nindex 531e73fc..624c09e7 100644\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n@@ -620,97 +620,58 @@ public class DateUtils {\n         if (val.get(Calendar.YEAR) > 280000000) {\n             throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n         }\n-        \n \n-        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n-        // see http://issues.apache.org/jira/browse/LANG-59\n-        //\n-        // Manually truncate milliseconds, seconds and minutes, rather than using\n-        // Calendar methods.\n-\n-\n-        // truncate milliseconds\n-\n-        // truncate seconds\n-\n-        // truncate minutes\n-\n-        // reset time\n-        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n-\n-        boolean roundUp = false;\n-        for (int i = 0; i < fields.length; i++) {\n-            for (int j = 0; j < fields[i].length; j++) {\n-                if (fields[i][j] == field) {\n-                    //This is our field... we stop looping\n-                    if (round && roundUp) {\n-                        if (field == DateUtils.SEMI_MONTH) {\n-                            //This is a special case that's hard to generalize\n-                            //If the date is 1, we round up to 16, otherwise\n-                            //  we subtract 15 days and add 1 month\n-                            if (val.get(Calendar.DATE) == 1) {\n-                                val.add(Calendar.DATE, 15);\n-                            } else {\n-                                val.add(Calendar.DATE, -15);\n-                                val.add(Calendar.MONTH, 1);\n-                            }\n-                        } else {\n-                            //We need at add one to this field since the\n-                            //  last number causes us to round up\n-                            val.add(fields[i][0], 1);\n-                        }\n-                    }\n-                    return;\n-                }\n-            }\n-            //We have various fields that are not easy roundings\n-            int offset = 0;\n-            boolean offsetSet = false;\n-            //These are special types of fields that require different rounding rules\n-            switch (field) {\n-                case DateUtils.SEMI_MONTH:\n-                    if (fields[i][0] == Calendar.DATE) {\n-                        //If we're going to drop the DATE field's value,\n-                        //  we want to do this our own way.\n-                        //We need to subtrace 1 since the date has a minimum of 1\n-                        offset = val.get(Calendar.DATE) - 1;\n-                        //If we're above 15 days adjustment, that means we're in the\n-                        //  bottom half of the month and should stay accordingly.\n-                        if (offset >= 15) {\n-                            offset -= 15;\n-                        }\n-                        //Record whether we're in the top or bottom half of that range\n-                        roundUp = offset > 7;\n-                        offsetSet = true;\n+        // Truncate all fields below the specified field\n+        switch (field) {\n+            case Calendar.YEAR:\n+                val.clear(Calendar.MONTH);\n+            case Calendar.MONTH:\n+                val.set(Calendar.DAY_OF_MONTH, 1);\n+            case Calendar.DATE:\n+            case Calendar.DAY_OF_WEEK:\n+            case Calendar.DAY_OF_WEEK_IN_MONTH:\n+                val.set(Calendar.HOUR_OF_DAY, 0);\n+            case Calendar.HOUR:\n+            case Calendar.HOUR_OF_DAY:\n+                val.clear(Calendar.MINUTE);\n+            case Calendar.MINUTE:\n+                val.clear(Calendar.SECOND);\n+            case Calendar.SECOND:\n+                val.clear(Calendar.MILLISECOND);\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n+        }\n+\n+        // Handle rounding\n+        if (round) {\n+            int value = val.get(field);\n+            if (field == Calendar.MONTH && value == 0) {\n+                // Special case for January. DateUtils.round rounds down to December of previous year.\n+                // Also, we can't use val.getActualMaximum(Calendar.MONTH) because it returns 11 on some systems\n+                val.add(Calendar.YEAR, -1);\n+                val.set(Calendar.MONTH, 11);\n+            } else if (value > 0) {\n+                int offset = 0;\n+                int max = val.getActualMaximum(field);\n+                if (field == Calendar.DAY_OF_MONTH || field == Calendar.DAY_OF_WEEK_IN_MONTH) {\n+                    // Special case for rounding days. We need to determine whether to round up or down based on field value\n+                    int halfMax = (max + 1) / 2;\n+                    if (value >= halfMax) {\n+                        offset = max - value + 1;\n+                    } else {\n+                        offset = -value;\n                     }\n-                    break;\n-                case Calendar.AM_PM:\n-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n-                        //If we're going to drop the HOUR field's value,\n-                        //  we want to do this our own way.\n-                        offset = val.get(Calendar.HOUR_OF_DAY);\n-                        if (offset >= 12) {\n-                            offset -= 12;\n-                        }\n-                        roundUp = offset > 6;\n-                        offsetSet = true;\n+                } else {\n+                    // For other fields, we round up if value is greater than half the maximum\n+                    int halfMax = max / 2;\n+                    if (value > halfMax) {\n+                        offset = max - value + 1;\n+                    } else {\n+                        offset = -value;\n                     }\n-                    break;\n-            }\n-            if (!offsetSet) {\n-                int min = val.getActualMinimum(fields[i][0]);\n-                int max = val.getActualMaximum(fields[i][0]);\n-                //Calculate the offset from the minimum allowed value\n-                offset = val.get(fields[i][0]) - min;\n-                //Set roundUp if this is more than half way between the minimum and maximum\n-                roundUp = offset > ((max - min) / 2);\n-            }\n-            //We need to remove this field\n-                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n-        }\n-        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n-\n-    }\n+                }\n+                val.add(field, offset);\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}