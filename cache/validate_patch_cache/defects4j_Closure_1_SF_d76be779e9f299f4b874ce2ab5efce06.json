{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\n    if (!modifyCallers && argList.hasChildren()) {\n        Set<String> referencedNames = new HashSet<>();\n        for (Var referencedVar : referenced) {\n            referencedNames.add(referencedVar.getName());\n        }\n        // Strip unreferenced args off the end of the function declaration.\n        // We iterate forward to preserve the order of the parameters.\n        Node child = argList.getFirstChild();\n        while (child != null) {\n            String argName = child.getString();\n            Var var = fnScope.getVar(argName);\n            if (var != null && referencedNames.contains(argName)) {\n                referenced.add(var);\n            } else {\n                // Remove the unreferenced parameter from the AST\n                // and update the reported code change.\n                argList.removeChild(child);\n                compiler.reportCodeChange();\n            }\n            child = child.getNext();\n        }\n    } else if (modifyCallers) {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..cc58a9cc 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,43 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n     Node function = fnScope.getRootNode();\n-\n     Preconditions.checkState(function.isFunction());\n+\n     if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n+        // The parameters object literal setters can not be removed.\n+        return;\n     }\n \n     Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+    if (!modifyCallers && argList.hasChildren()) {\n+        Set<String> referencedNames = new HashSet<>();\n+        for (Var referencedVar : referenced) {\n+            referencedNames.add(referencedVar.getName());\n         }\n-      }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n+        // Strip unreferenced args off the end of the function declaration.\n+        // We iterate forward to preserve the order of the parameters.\n+        Node child = argList.getFirstChild();\n+        while (child != null) {\n+            String argName = child.getString();\n+            Var var = fnScope.getVar(argName);\n+            if (var != null && referencedNames.contains(argName)) {\n+                referenced.add(var);\n+            } else {\n+                // Remove the unreferenced parameter from the AST\n+                // and update the reported code change.\n+                argList.removeChild(child);\n+                compiler.reportCodeChange();\n+            }\n+            child = child.getNext();\n+        }\n+    } else if (modifyCallers) {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n     }\n-  }\n+}\n \n \n   /**",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}