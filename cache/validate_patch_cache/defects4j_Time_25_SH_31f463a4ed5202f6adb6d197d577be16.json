{
    "patch": "            if (offsetLocal != offsetAdjusted) {\n                if ((offsetLocal - offsetAdjusted) < 0) {\n                    // gap\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                    if (nextLocal != nextAdjusted) {\n                        if (offsetAdjusted == -3) {\n                            long nextDiff = nextTransition(nextLocal) - nextLocal;\n                            if (nextDiff == 1800000) {\n                                return offsetAdjusted; // we are in the \"impossible hour\"\n                            }\n                        }\n                        if ((nextLocal - offsetLocal) < instantLocal) {\n                            return offsetLocal;\n                        } else {\n                            return offsetAdjusted;\n                        }\n                    }\n                } else {\n                    // overlap\n                    long prevLocal = previousTransition(instantAdjusted);\n                    long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n                    if (prevLocal != prevAdjusted) {\n                        int prevOffsetLocal = getOffset(prevLocal);\n                        if ((offsetLocal - prevOffsetLocal) > instantLocal) {\n                            return offsetLocal;\n                        } else {\n                            return offsetAdjusted;\n                        }\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..6f3de452 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,36 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetLocal != offsetAdjusted) {\n+                if ((offsetLocal - offsetAdjusted) < 0) {\n+                    // gap\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                    if (nextLocal != nextAdjusted) {\n+                        if (offsetAdjusted == -3) {\n+                            long nextDiff = nextTransition(nextLocal) - nextLocal;\n+                            if (nextDiff == 1800000) {\n+                                return offsetAdjusted; // we are in the \"impossible hour\"\n+                            }\n+                        }\n+                        if ((nextLocal - offsetLocal) < instantLocal) {\n+                            return offsetLocal;\n+                        } else {\n+                            return offsetAdjusted;\n+                        }\n+                    }\n+                } else {\n+                    // overlap\n+                    long prevLocal = previousTransition(instantAdjusted);\n+                    long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+                    if (prevLocal != prevAdjusted) {\n+                        int prevOffsetLocal = getOffset(prevLocal);\n+                        if ((offsetLocal - prevOffsetLocal) > instantLocal) {\n+                            return offsetLocal;\n+                        } else {\n+                            return offsetAdjusted;\n+                        }\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}