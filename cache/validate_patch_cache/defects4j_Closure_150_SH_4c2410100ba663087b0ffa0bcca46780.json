{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent != null && parent.getType() == Token.NAME) {\n              if (NodeUtil.isFunctionDeclaration(n, parent)) { \n                defineDeclaredFunction(n, parent);\n              }\n            return;\n          } else if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n            defineDeclaredFunction(n, parent);\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..6595df85 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1451,10 +1451,14 @@ final class TypedScopeCreator implements ScopeCreator {\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+          if (parent != null && parent.getType() == Token.NAME) {\n+              if (NodeUtil.isFunctionDeclaration(n, parent)) { \n+                defineDeclaredFunction(n, parent);\n+              }\n             return;\n+          } else if (parent != null && parent.getType() == Token.EXPR_RESULT) {\n+            defineDeclaredFunction(n, parent);\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);",
    "result_reason": "error: method isFunctionDeclaration in class NodeUtil cannot be applied to given types;",
    "test_result": "ERROR"
}