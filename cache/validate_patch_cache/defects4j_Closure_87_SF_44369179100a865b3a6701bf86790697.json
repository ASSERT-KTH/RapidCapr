{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {            \n      Node maybeExpr = n.getFirstChild();\n\n      // If this block consists of a single expression (as opposed to a group of statements)\n      if (NodeUtil.isExpressionNode(maybeExpr)) {\n        return isFoldableExpression(maybeExpr);\n      } else if (maybeExpr.getType() == Token.EXPR_RESULT){ // Check if the block contains a single expression statement\n        maybeExpr = maybeExpr.getFirstChild();\n\n        // If this is a call expression that is an IIFE\n        if (maybeExpr.isCall() && maybeExpr.getFirstChild().isFunction()) {\n          return isFoldableExpression(maybeExpr);\n        }\n      }\n    }\n  }\n\n  return false;\n}\n\nprivate boolean isFoldableExpression(Node expr) {\n  // If this is a function expression, check if it returns a value\n  if (expr.isFunction()) {\n    Node fnBlock = expr.getLastChild();\n    if (fnBlock.hasChildren()) {\n      Node lastStmt = fnBlock.getLastChild();\n      if (lastStmt.isReturn()) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // If this is a ternary expression (cond ? trueExpr : falseExpr), check if both the true and false cases are foldable expressions\n  if (expr.isHook()) {\n    Node firstExpr = expr.getFirstChild();\n    Node secondExpr = firstExpr.getNext();\n    Node thirdExpr = secondExpr.getNext();\n\n    if (isFoldableExpression(firstExpr) && \n    isFoldableExpression(secondExpr) &&\n    isFoldableExpression(thirdExpr)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // If this is a negated expression, check if the operand is not a function expression with a return value\n  if (expr.isNot()) {\n    Node negated = expr.getFirstChild();\n    if (negated.isFunction()) {\n      Node fnBlock = negated.getLastChild();\n      if (fnBlock.hasChildren()) {\n        Node lastStmt = fnBlock.getLastChild();\n        if (lastStmt.isReturn()) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  // If this is a property access, check if it's to the \"returnValue\" property of an object with \".handler\" property whose value is an event handler\n  if (expr.isGetProp() && expr.getLastChild().getString().equals(\"returnValue\")) {\n    Node parentCall = expr.getParent();\n    Node grandParent = parentCall.getParent();\n\n    if (parentCall.isCall() && grandParent != null && grandParent.isExprResult()) {          \n      Node parentLhs = parentCall.getFirstChild();\n      if (parentLhs.isGetProp() && parentLhs.getLastChild().getString().equals(\"handler\")) {\n        Node eventHandlerObj = parentLhs.getFirstChild();\n\n        if (eventHandlerObj.isName() && eventHandlerObj.getString().startsWith(\"on\")) {\n          return false;\n        }\n      }\n    }\n  }\n\n  // If none of the above cases match, check if this expression is any of the following acceptable types:\n  // - a literal (e.g. true, false, null)\n  // - a function call\n  // - a property access (other than the special case detailed above)\n  // - a name that is not an event handler \"on\" function\n  return expr.isLiteral() || expr.isCall() || (expr.isGetProp() && !expr.getLastChild().getString().equals(\"returnValue\")) || (expr.isName() && !expr.getString().startsWith(\"on\"));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..6ca3e185 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,96 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {            \n+      Node maybeExpr = n.getFirstChild();\n+\n+      // If this block consists of a single expression (as opposed to a group of statements)\n+      if (NodeUtil.isExpressionNode(maybeExpr)) {\n+        return isFoldableExpression(maybeExpr);\n+      } else if (maybeExpr.getType() == Token.EXPR_RESULT){ // Check if the block contains a single expression statement\n+        maybeExpr = maybeExpr.getFirstChild();\n+\n+        // If this is a call expression that is an IIFE\n+        if (maybeExpr.isCall() && maybeExpr.getFirstChild().isFunction()) {\n+          return isFoldableExpression(maybeExpr);\n+        }\n       }\n     }\n+  }\n \n-    return false;\n+  return false;\n+}\n+\n+private boolean isFoldableExpression(Node expr) {\n+  // If this is a function expression, check if it returns a value\n+  if (expr.isFunction()) {\n+    Node fnBlock = expr.getLastChild();\n+    if (fnBlock.hasChildren()) {\n+      Node lastStmt = fnBlock.getLastChild();\n+      if (lastStmt.isReturn()) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+\n+  // If this is a ternary expression (cond ? trueExpr : falseExpr), check if both the true and false cases are foldable expressions\n+  if (expr.isHook()) {\n+    Node firstExpr = expr.getFirstChild();\n+    Node secondExpr = firstExpr.getNext();\n+    Node thirdExpr = secondExpr.getNext();\n+\n+    if (isFoldableExpression(firstExpr) && \n+    isFoldableExpression(secondExpr) &&\n+    isFoldableExpression(thirdExpr)) {\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  // If this is a negated expression, check if the operand is not a function expression with a return value\n+  if (expr.isNot()) {\n+    Node negated = expr.getFirstChild();\n+    if (negated.isFunction()) {\n+      Node fnBlock = negated.getLastChild();\n+      if (fnBlock.hasChildren()) {\n+        Node lastStmt = fnBlock.getLastChild();\n+        if (lastStmt.isReturn()) {\n+          return false;\n+        }\n+      }\n+      return true;\n+    }\n   }\n \n+  // If this is a property access, check if it's to the \"returnValue\" property of an object with \".handler\" property whose value is an event handler\n+  if (expr.isGetProp() && expr.getLastChild().getString().equals(\"returnValue\")) {\n+    Node parentCall = expr.getParent();\n+    Node grandParent = parentCall.getParent();\n+\n+    if (parentCall.isCall() && grandParent != null && grandParent.isExprResult()) {          \n+      Node parentLhs = parentCall.getFirstChild();\n+      if (parentLhs.isGetProp() && parentLhs.getLastChild().getString().equals(\"handler\")) {\n+        Node eventHandlerObj = parentLhs.getFirstChild();\n+\n+        if (eventHandlerObj.isName() && eventHandlerObj.getString().startsWith(\"on\")) {\n+          return false;\n+        }\n+      }\n+    }\n+  }\n+\n+  // If none of the above cases match, check if this expression is any of the following acceptable types:\n+  // - a literal (e.g. true, false, null)\n+  // - a function call\n+  // - a property access (other than the special case detailed above)\n+  // - a name that is not an event handler \"on\" function\n+  return expr.isLiteral() || expr.isCall() || (expr.isGetProp() && !expr.getLastChild().getString().equals(\"returnValue\")) || (expr.isName() && !expr.getString().startsWith(\"on\"));\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}