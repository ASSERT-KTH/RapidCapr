{
    "patch": "public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n        return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n    int thisNumParams = parameters.getChildCount();\n    int thatNumParams = that.parameters.getChildCount();\n\n    // This function subtype check assumes there are no optional parameters\n    if (thisNumParams < thatNumParams) {\n        return false;\n    }\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n        return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    for (int i = 0; i < thatNumParams; i++) {\n        JSType thisParamType = thisParam.getJSType();\n        JSType thatParamType = thatParam.getJSType();\n        Node thisFirstChild = thisParam.getFirstChild();\n        Node thatFirstChild = thatParam.getFirstChild();\n        boolean thisIsVarArgs = thisParam.isVarArgs();\n        boolean thatIsVarArgs = thatParam.isVarArgs();\n\n        // If one of the function has the variable arg length, compare only the regular params\n        if(thisIsVarArgs ^ thatIsVarArgs) {\n            return false;\n        }\n        \n        if (!thatIsVarArgs) {\n            for (int j = 0; j < thatParam.getChildCount(); j++) {\n                JSType thisParamTypeChild = thisFirstChild.getJSType();\n                JSType thatParamTypeChild = thatFirstChild.getJSType();\n                if (thisParamTypeChild != null) {\n                    if (thatParamTypeChild == null || !thatParamTypeChild.isSubtype(thisParamTypeChild)) {\n                        return false;\n                    }\n                }\n                thisFirstChild = thisFirstChild.getNext();\n                thatFirstChild = thatFirstChild.getNext();\n            }\n        } else {\n            // check var_args at the end \n            // no more than one variable argument allowed\n            if (that.children().size() != 1) {\n                return false;\n            }\n\n            // handle variable arguments  \n            JSType thisParamTypeChild = thisFirstChild.getJSType();\n            JSType thatParamTypeChild = thatFirstChild.getNext().getJSType();\n            if (thisParamTypeChild != null) {\n                for (int j = i; j < thisNumParams - 1; j++) {\n                    Node nextThis = thisFirstChild.getNext();\n                    JSType additionalParam = nextThis.getJSType();\n                    if (additionalParam == null || !thatParamTypeChild.isSubtype(additionalParam)) {\n                        return false;\n                    }\n                    thisFirstChild = nextThis;\n                }\n            }\n            if (thatParamTypeChild != null) {\n                if(thisNumParams < thatNumParams || !thatParamTypeChild.isSubtype(thisFirstChild.getJSType())) {\n                    return false;\n                }\n            }   \n        }\n\n        thisParam = thisParam.getNext();\n        thatParam = thatParam.getNext();\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..b8e9e948 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,81 +77,86 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n+public boolean isSubtype(JSType other) {\n     if (!(other instanceof ArrowType)) {\n-      return false;\n+        return false;\n     }\n \n     ArrowType that = (ArrowType) other;\n+    int thisNumParams = parameters.getChildCount();\n+    int thatNumParams = that.parameters.getChildCount();\n \n-    // This is described in Draft 2 of the ES4 spec,\n-    // Section 3.4.7: Subtyping Function Types.\n+    // This function subtype check assumes there are no optional parameters\n+    if (thisNumParams < thatNumParams) {\n+        return false;\n+    }\n \n     // this.returnType <: that.returnType (covariant)\n     if (!this.returnType.isSubtype(that.returnType)) {\n-      return false;\n+        return false;\n     }\n \n     // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n     Node thisParam = parameters.getFirstChild();\n     Node thatParam = that.parameters.getFirstChild();\n-    while (thisParam != null && thatParam != null) {\n-      JSType thisParamType = thisParam.getJSType();\n-      JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n-          return false;\n-        }\n-      }\n+    for (int i = 0; i < thatNumParams; i++) {\n+        JSType thisParamType = thisParam.getJSType();\n+        JSType thatParamType = thatParam.getJSType();\n+        Node thisFirstChild = thisParam.getFirstChild();\n+        Node thatFirstChild = thatParam.getFirstChild();\n+        boolean thisIsVarArgs = thisParam.isVarArgs();\n+        boolean thatIsVarArgs = thatParam.isVarArgs();\n \n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n+        // If one of the function has the variable arg length, compare only the regular params\n+        if(thisIsVarArgs ^ thatIsVarArgs) {\n+            return false;\n+        }\n+        \n+        if (!thatIsVarArgs) {\n+            for (int j = 0; j < thatParam.getChildCount(); j++) {\n+                JSType thisParamTypeChild = thisFirstChild.getJSType();\n+                JSType thatParamTypeChild = thatFirstChild.getJSType();\n+                if (thisParamTypeChild != null) {\n+                    if (thatParamTypeChild == null || !thatParamTypeChild.isSubtype(thisParamTypeChild)) {\n+                        return false;\n+                    }\n+                }\n+                thisFirstChild = thisFirstChild.getNext();\n+                thatFirstChild = thatFirstChild.getNext();\n+            }\n+        } else {\n+            // check var_args at the end \n+            // no more than one variable argument allowed\n+            if (that.children().size() != 1) {\n+                return false;\n+            }\n \n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+            // handle variable arguments  \n+            JSType thisParamTypeChild = thisFirstChild.getJSType();\n+            JSType thatParamTypeChild = thatFirstChild.getNext().getJSType();\n+            if (thisParamTypeChild != null) {\n+                for (int j = i; j < thisNumParams - 1; j++) {\n+                    Node nextThis = thisFirstChild.getNext();\n+                    JSType additionalParam = nextThis.getJSType();\n+                    if (additionalParam == null || !thatParamTypeChild.isSubtype(additionalParam)) {\n+                        return false;\n+                    }\n+                    thisFirstChild = nextThis;\n+                }\n+            }\n+            if (thatParamTypeChild != null) {\n+                if(thisNumParams < thatNumParams || !thatParamTypeChild.isSubtype(thisFirstChild.getJSType())) {\n+                    return false;\n+                }\n+            }   \n+        }\n \n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n         thisParam = thisParam.getNext();\n-      }\n-      if (!thatIsVarArgs) {\n         thatParam = thatParam.getNext();\n-      }\n-\n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n-      }\n     }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n-\n     return true;\n-  }\n+}\n \n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}