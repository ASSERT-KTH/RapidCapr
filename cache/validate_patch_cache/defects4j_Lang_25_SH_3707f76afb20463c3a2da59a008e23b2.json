{
    "patch": "success = true;\nfor(int i=0; i<testString.length(); i++) {\n    char c = testString.charAt(i);\n    if(c>255 || ISO8859_1_ESCAPE[c] == null || testString.substring(i).startsWith(ISO8859_1_ESCAPE[c])) {\n        continue;\n    } else {\n        success = false;\n        System.out.println(\"Encoding error: \" + c + \" \" + Integer.toHexString((int) c));\n        System.out.println(\"   Substring: \" + testString.substring(i));\n        System.out.println(\"Expecte d:   \" + ISO8859_1_ESCAPE[c]);\n        System.out.println(\"Got:        \" + Encoder.escape(c));\n    }\n}\nassertTrue(\"One or more errors detected\", success);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..5033afe0 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,7 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}