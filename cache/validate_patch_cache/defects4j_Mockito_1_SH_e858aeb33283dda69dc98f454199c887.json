{
    "patch": "Object[] rawArguments = invocation.getRawArguments();\nfor (int i = 0; i < matchers.size(); i++) {\n    if (i < rawArguments.length) {\n        Object argument = rawArguments[i];\n        if (matchers.get(i) instanceof CapturesArguments) {\n            if (isVariableArgument(invocation, i) && isVarargMatcher(matchers.get(i))) {\n                if (argument != null && argument.getClass().isArray()) {\n                    for (int j = 0; j < Array.getLength(argument); j++) {\n                        ((CapturesArguments) matchers.get(i)).captureFrom(Array.get(argument, j));\n                    }\n                } else {\n                    ((CapturesArguments) matchers.get(i)).captureFrom(new Object[] {argument});\n                }\n            } else {\n                ((CapturesArguments) matchers.get(i)).captureFrom(argument);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..764c7d6f4 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,25 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+Object[] rawArguments = invocation.getRawArguments();\n+for (int i = 0; i < matchers.size(); i++) {\n+    if (i < rawArguments.length) {\n+        Object argument = rawArguments[i];\n+        if (matchers.get(i) instanceof CapturesArguments) {\n+            if (isVariableArgument(invocation, i) && isVarargMatcher(matchers.get(i))) {\n+                if (argument != null && argument.getClass().isArray()) {\n+                    for (int j = 0; j < Array.getLength(argument); j++) {\n+                        ((CapturesArguments) matchers.get(i)).captureFrom(Array.get(argument, j));\n+                    }\n+                } else {\n+                    ((CapturesArguments) matchers.get(i)).captureFrom(new Object[] {argument});\n+                }\n+            } else {\n+                ((CapturesArguments) matchers.get(i)).captureFrom(argument);\n+            }\n+        }\n+    }\n+}\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}