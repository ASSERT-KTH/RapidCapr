{
    "patch": "      Node parentParent = parent.getParent();\n      if (NodeUtil.isPrototypeProperty(parentParent)) {\n        return false;\n      }\n\n      // Don't traverse constructor functions unless they are being called with the new keyword.\n      if (jsDoc != null && jsDoc.isConstructor()) {\n        return NodeUtil.isNew(parent);\n      }\n\n      if (NodeUtil.isGet(parent)) {\n        if (parent.getParent().getType() == Token.EXPR_RESULT) {\n          Node callee = parent.getFirstChild();\n          // b.c = function() { ... };\n          if (callee.getType() == Token.GETPROP && callee.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          // b.c.d = function() { ... };\n          if (callee.getType() == Token.GETPROP) {\n            Node llhs = callee.getFirstChild();\n            if (llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n          }\n        }\n\n        if (NodeUtil.isObjectLitKey(parent, n)) {\n          return false;\n        }\n\n        Node grandparent = parent.getParent();\n        if (grandparent.getType() == Token.CALL) {\n          Node fn = calleeForLanguageModeCheck(grandparent.getFirstChild());\n          if (NodeUtil.isPrototypeProperty(fn.getParent()) ||\n              NodeUtil.isFunctionExpression(fn) ||\n              NodeUtil.isClassExpression(fn)) {\n            return false;\n          }\n        }\n      } else {\n        if (parent.getType() == Token.CATCH) {\n          return false;\n        }\n        if (parent.getType() == Token.OBJECTLIT &&\n            NodeUtil.getObjectLitKeyCount(parent) == 1 &&\n            NodeUtil.isObjectLitKey(parent, n)) {\n          return false;\n        }\n        if (NodeUtil.isFunctionExpression(parent)) {\n          Node grandparent = parent.getParent();\n          if (grandparent.getType() == Token.CALL) {\n            Node fn = calleeForLanguageModeCheck(grandparent.getFirstChild());\n            if (NodeUtil.isPrototypeProperty(fn.getParent()) ||\n                NodeUtil.isFunctionExpression(fn) ||\n                NodeUtil.isClassExpression(fn)) {\n              return false;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..98f0cb68 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,63 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node parentParent = parent.getParent();\n+      if (NodeUtil.isPrototypeProperty(parentParent)) {\n+        return false;\n+      }\n+\n+      // Don't traverse constructor functions unless they are being called with the new keyword.\n+      if (jsDoc != null && jsDoc.isConstructor()) {\n+        return NodeUtil.isNew(parent);\n+      }\n+\n+      if (NodeUtil.isGet(parent)) {\n+        if (parent.getParent().getType() == Token.EXPR_RESULT) {\n+          Node callee = parent.getFirstChild();\n+          // b.c = function() { ... };\n+          if (callee.getType() == Token.GETPROP && callee.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+          // b.c.d = function() { ... };\n+          if (callee.getType() == Token.GETPROP) {\n+            Node llhs = callee.getFirstChild();\n+            if (llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+          }\n+        }\n+\n+        if (NodeUtil.isObjectLitKey(parent, n)) {\n+          return false;\n+        }\n+\n+        Node grandparent = parent.getParent();\n+        if (grandparent.getType() == Token.CALL) {\n+          Node fn = calleeForLanguageModeCheck(grandparent.getFirstChild());\n+          if (NodeUtil.isPrototypeProperty(fn.getParent()) ||\n+              NodeUtil.isFunctionExpression(fn) ||\n+              NodeUtil.isClassExpression(fn)) {\n+            return false;\n+          }\n+        }\n+      } else {\n+        if (parent.getType() == Token.CATCH) {\n+          return false;\n+        }\n+        if (parent.getType() == Token.OBJECTLIT &&\n+            NodeUtil.getObjectLitKeyCount(parent) == 1 &&\n+            NodeUtil.isObjectLitKey(parent, n)) {\n+          return false;\n+        }\n+        if (NodeUtil.isFunctionExpression(parent)) {\n+          Node grandparent = parent.getParent();\n+          if (grandparent.getType() == Token.CALL) {\n+            Node fn = calleeForLanguageModeCheck(grandparent.getFirstChild());\n+            if (NodeUtil.isPrototypeProperty(fn.getParent()) ||\n+                NodeUtil.isFunctionExpression(fn) ||\n+                NodeUtil.isClassExpression(fn)) {\n+              return false;\n+            }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}