{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DateTimeField first = savedFields[0].iField;\n        if (first.getType() == DateTimeFieldType.monthOfYear() ||\n            first.getType() == DateTimeFieldType.dayOfMonth()) {\n            int year = iDefaultYear;\n            if (iDefaultYear < 0) {\n                year = (iChrono.now().getYear() + 1) / 2 * 2;\n            }\n            saveField(DateTimeFieldType.year(), year);\n        }\n    }\n    \n    try {\n        long millis = 0;\n        boolean disambiguateYear = false;\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields && !disambiguateYear);\n            if (resetFields && !disambiguateYear) {\n                DateTimeField field = savedFields[i].iField;\n                if (field.getType() == DateTimeFieldType.year()) {\n                    int year = field.get(millis);\n                    if (year < 0) {\n                        year = iChrono.convertYear(year);\n                        disambiguateYear = true;\n                    }\n                    resetFields = false;\n                    setYear(year);\n                } else if (field.getType() == DateTimeFieldType.weekyear()) {\n                    resetFields = false;\n                    int weekyear = field.get(millis);\n                    int week = getField(DateTimeFieldType.weekOfWeekyear()).get(millis);\n                    setDateFields(weekyear, 1, week);\n                } else if (field.getType() == DateTimeFieldType.weekOfWeekyear()) {\n                    // Ignore in case of later weekyear field\n                    resetFields = false;\n                } else if (field.getType() == DateTimeFieldType.dayOfYear()) {\n                    resetFields = false;\n                    setDateFields(getYear(), 1, 1);\n                    int dayOfYear = field.get(millis);\n                    addDays(dayOfYear - 1);\n                } else if (field.getType() == DateTimeFieldType.dayOfMonth()) {\n                    resetFields = false;\n                    int month = getField(DateTimeFieldType.monthOfYear()).get(millis);\n                    setDateFields(getYear(), month, 1);\n                    int dayOfMonth = field.get(millis);\n                    addDays(dayOfMonth - 1);\n                } else if (field.getType() == DateTimeFieldType.monthOfYear()) {\n                    resetFields = false;\n                    setDateFields(getYear(), 1, 1);\n                    int monthOfYear = field.get(millis);\n                    addMonths(monthOfYear - 1);\n                }\n            }\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..e0824ef0 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,35 +328,68 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+    if (count > 0) {\n+        // alter base year for parsing if first field is month or day\n+        DateTimeField first = savedFields[0].iField;\n+        if (first.getType() == DateTimeFieldType.monthOfYear() ||\n+            first.getType() == DateTimeFieldType.dayOfMonth()) {\n+            int year = iDefaultYear;\n+            if (iDefaultYear < 0) {\n+                year = (iChrono.now().getYear() + 1) / 2 * 2;\n             }\n+            saveField(DateTimeFieldType.year(), year);\n         }\n-\n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    \n+    try {\n+        long millis = 0;\n+        boolean disambiguateYear = false;\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields && !disambiguateYear);\n+            if (resetFields && !disambiguateYear) {\n+                DateTimeField field = savedFields[i].iField;\n+                if (field.getType() == DateTimeFieldType.year()) {\n+                    int year = field.get(millis);\n+                    if (year < 0) {\n+                        year = iChrono.convertYear(year);\n+                        disambiguateYear = true;\n+                    }\n+                    resetFields = false;\n+                    setYear(year);\n+                } else if (field.getType() == DateTimeFieldType.weekyear()) {\n+                    resetFields = false;\n+                    int weekyear = field.get(millis);\n+                    int week = getField(DateTimeFieldType.weekOfWeekyear()).get(millis);\n+                    setDateFields(weekyear, 1, week);\n+                } else if (field.getType() == DateTimeFieldType.weekOfWeekyear()) {\n+                    // Ignore in case of later weekyear field\n+                    resetFields = false;\n+                } else if (field.getType() == DateTimeFieldType.dayOfYear()) {\n+                    resetFields = false;\n+                    setDateFields(getYear(), 1, 1);\n+                    int dayOfYear = field.get(millis);\n+                    addDays(dayOfYear - 1);\n+                } else if (field.getType() == DateTimeFieldType.dayOfMonth()) {\n+                    resetFields = false;\n+                    int month = getField(DateTimeFieldType.monthOfYear()).get(millis);\n+                    setDateFields(getYear(), month, 1);\n+                    int dayOfMonth = field.get(millis);\n+                    addDays(dayOfMonth - 1);\n+                } else if (field.getType() == DateTimeFieldType.monthOfYear()) {\n+                    resetFields = false;\n+                    setDateFields(getYear(), 1, 1);\n+                    int monthOfYear = field.get(millis);\n+                    addMonths(monthOfYear - 1);\n+                }\n             }\n-            throw e;\n         }\n         \n         if (iZone == null) {\n@@ -375,7 +408,13 @@ public class DateTimeParserBucket {\n         }\n         \n         return millis;\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n     }\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}