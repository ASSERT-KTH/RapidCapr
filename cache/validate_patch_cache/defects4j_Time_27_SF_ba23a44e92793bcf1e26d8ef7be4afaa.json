{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator separator = (Separator) elementPairs.get(0);\n        List<Object> remainingElements = new ArrayList<>(elementPairs.subList(1, size));\n\n        if (remainingElements.size() == 1) {\n            Object singleElement = remainingElements.get(0);\n            if ((!notPrinter && singleElement instanceof PeriodPrinter)\n                    || (!notParser && singleElement instanceof PeriodParser)) {\n                PeriodFormatter formatter = new PeriodFormatter(\n                        notPrinter ? null : (PeriodPrinter) singleElement,\n                        notParser ? null : (PeriodParser) singleElement\n                );\n                return separator == null ? formatter : new PeriodFormatter(\n                        separator.finish(formatter.getPrinter(), formatter.getParser()),\n                        separator\n                );\n            }\n        }\n\n        PeriodFormatter subFormatter = toFormatter(remainingElements, notPrinter, notParser);\n        PeriodPrinter subPrinter = notPrinter ? null : subFormatter.getPrinter();\n        PeriodParser subParser = notParser ? null : subFormatter.getParser();\n        Separator subSeparator = separator.finish(subPrinter, subParser);\n\n        return new PeriodFormatter(\n                notPrinter ? null : subPrinter,\n                notParser ? null : subParser,\n                subSeparator,\n                separator == null ? \"\" : separator.getSeparator()\n        );\n    }\n\n    Object[] comp = createComposite(elementPairs);\n\n    return new PeriodFormatter(\n            notPrinter ? null : (PeriodPrinter) comp[0],\n            notParser ? null : (PeriodParser) comp[1]\n    );\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..38f6d242 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,52 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n-        }\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        Separator separator = (Separator) elementPairs.get(0);\n+        List<Object> remainingElements = new ArrayList<>(elementPairs.subList(1, size));\n+\n+        if (remainingElements.size() == 1) {\n+            Object singleElement = remainingElements.get(0);\n+            if ((!notPrinter && singleElement instanceof PeriodPrinter)\n+                    || (!notParser && singleElement instanceof PeriodParser)) {\n+                PeriodFormatter formatter = new PeriodFormatter(\n+                        notPrinter ? null : (PeriodPrinter) singleElement,\n+                        notParser ? null : (PeriodParser) singleElement\n+                );\n+                return separator == null ? formatter : new PeriodFormatter(\n+                        separator.finish(formatter.getPrinter(), formatter.getParser()),\n+                        separator\n+                );\n+            }\n+        }\n+\n+        PeriodFormatter subFormatter = toFormatter(remainingElements, notPrinter, notParser);\n+        PeriodPrinter subPrinter = notPrinter ? null : subFormatter.getPrinter();\n+        PeriodParser subParser = notParser ? null : subFormatter.getParser();\n+        Separator subSeparator = separator.finish(subPrinter, subParser);\n+\n+        return new PeriodFormatter(\n+                notPrinter ? null : subPrinter,\n+                notParser ? null : subParser,\n+                subSeparator,\n+                separator == null ? \"\" : separator.getSeparator()\n+        );\n     }\n \n+    Object[] comp = createComposite(elementPairs);\n+\n+    return new PeriodFormatter(\n+            notPrinter ? null : (PeriodPrinter) comp[0],\n+            notParser ? null : (PeriodParser) comp[1]\n+    );\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}