{
    "patch": "\n        Chronology chrono = instant.getChronology();\n        long instantMillis = instant.getMillis();\n        DateTimeZone zone = chrono.getZone();\n        int defaultYear = getTwoDigitYear(instantMillis, zone);\n        long instantLocal = instantMillis + zone.getOffset(instantMillis);\n\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n        bucket.setContext(zone);  // set the context to handle leap years\n        int newPos = parser.parseInto(bucket, text, position);\n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }\n\n    /**\n     * Get the two digit year from the specified millis and zone.\n     *\n     * @param millis  the millis to get the two digit year for\n     * @param zone  the zone to get the two digit year for\n     * @return the two digit year\n     */\n    private int getTwoDigitYear(long millis, DateTimeZone zone) {\n        Chronology chrono = ISOChronology.getInstance(zone);\n        int year = chrono.year().get(millis);\n        return ((year % 100) + 100) % 100;  // handle negative numbers",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..f7c7754f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,20 +697,16 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n+\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n+        long instantMillis = instant.getMillis();\n+        DateTimeZone zone = chrono.getZone();\n+        int defaultYear = getTwoDigitYear(instantMillis, zone);\n+        long instantLocal = instantMillis + zone.getOffset(instantMillis);\n+\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+        bucket.setContext(zone);  // set the context to handle leap years\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n@@ -727,6 +723,18 @@ public class DateTimeFormatter {\n         return newPos;\n     }\n \n+    /**\n+     * Get the two digit year from the specified millis and zone.\n+     *\n+     * @param millis  the millis to get the two digit year for\n+     * @param zone  the zone to get the two digit year for\n+     * @return the two digit year\n+     */\n+    private int getTwoDigitYear(long millis, DateTimeZone zone) {\n+        Chronology chrono = ISOChronology.getInstance(zone);\n+        int year = chrono.year().get(millis);\n+        return ((year % 100) + 100) % 100;  // handle negative numbers\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}