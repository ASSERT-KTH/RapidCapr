{
    "patch": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n    Node node = newNode(Token.FUNCTION);\n\n    Name name = functionNode.getFunctionName();\n    if (name == null) {\n        name = new Name();\n        name.setIdentifier(\"\");\n    }\n\n    Node nameNode = transform(name);\n    Node paramList = new Node(Token.LP);\n\n    for (AstNode param : functionNode.getParams()) {\n        paramList.addChildToBack(transform(param));\n    }\n\n    paramList.addChildToBack(new Node(Token.RP));\n\n    Node bodyNode = transform(functionNode.getBody());\n\n    node.addChildrenToBack(nameNode, paramList, bodyNode);\n\n    return node;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..745b0900 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,31 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+@Override\n+Node processFunctionNode(FunctionNode functionNode) {\n+    Node node = newNode(Token.FUNCTION);\n+\n+    Name name = functionNode.getFunctionName();\n+    if (name == null) {\n+        name = new Name();\n+        name.setIdentifier(\"\");\n+    }\n+\n+    Node nameNode = transform(name);\n+    Node paramList = new Node(Token.LP);\n+\n+    for (AstNode param : functionNode.getParams()) {\n+        paramList.addChildToBack(transform(param));\n+    }\n+\n+    paramList.addChildToBack(new Node(Token.RP));\n+\n+    Node bodyNode = transform(functionNode.getBody());\n+\n+    node.addChildrenToBack(nameNode, paramList, bodyNode);\n+\n+    return node;\n+}\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}