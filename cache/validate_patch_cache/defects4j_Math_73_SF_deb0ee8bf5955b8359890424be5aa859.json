{
    "patch": "/**\n * Find a root in the interval {@code [min,max]} using the Brent algorithm with the provided initial guess.\n * \n * @param f the function to solve for\n * @param min the lower bound of the interval\n * @param max the upper bound of the interval\n * @param initial the initial guess\n * @return a root in the interval {@code [min,max]}\n * @throws MaxIterationsExceededException if the maximum number of iterations is reached without convergence\n * @throws FunctionEvaluationException if an error occurs during evaluation of the function\n * @throws IllegalArgumentException if the initial guess is equal to one of the endpoints or if the endpoints do not bracket a root\n */\npublic double solve(UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException {\n    clearResult();\n    verifySequence(min, initial, max);\n\n    // Evaluate function at initial guess\n    double yInitial = f.value(initial);\n\n    // Check if initial guess is already a root\n    if (Math.abs(yInitial) < functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    // Evaluate function at endpoints\n    double yMin ",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..d0cef8d72 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,50 +95,34 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n-                        final double min, final double max, final double initial)\n-        throws MaxIterationsExceededException, FunctionEvaluationException {\n-\n-        clearResult();\n-        verifySequence(min, initial, max);\n-\n-        // return the initial guess if it is good enough\n-        double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n-\n-        // return the first endpoint if it is good enough\n-        double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n-        // return the second endpoint if it is good enough\n-        double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n+/**\n+ * Find a root in the interval {@code [min,max]} using the Brent algorithm with the provided initial guess.\n+ * \n+ * @param f the function to solve for\n+ * @param min the lower bound of the interval\n+ * @param max the upper bound of the interval\n+ * @param initial the initial guess\n+ * @return a root in the interval {@code [min,max]}\n+ * @throws MaxIterationsExceededException if the maximum number of iterations is reached without convergence\n+ * @throws FunctionEvaluationException if an error occurs during evaluation of the function\n+ * @throws IllegalArgumentException if the initial guess is equal to one of the endpoints or if the endpoints do not bracket a root\n+ */\n+public double solve(UnivariateRealFunction f, double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException {\n+    clearResult();\n+    verifySequence(min, initial, max);\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+    // Evaluate function at initial guess\n+    double yInitial = f.value(initial);\n \n+    // Check if initial guess is already a root\n+    if (Math.abs(yInitial) < functionValueAccuracy) {\n+        setResult(initial, 0);\n+        return result;\n     }\n \n+    // Evaluate function at endpoints\n+    double yMin \n+\n     /**\n      * Find a zero in the given interval.\n      * <p>",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}