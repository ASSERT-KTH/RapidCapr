{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix eigenvectors = dec.getV();\n    final RealMatrix eigenvalues = dec.getD();\n    final int dim = m.getColumnDimension();\n    \n    final RealMatrix sqrtEigenvalues = MatrixUtils.createRealDiagonalMatrix(\n            IntStream.range(0, dim)\n                     .mapToDouble(i -> Math.sqrt(Math.abs(eigenvalues.getEntry(i, i))))\n                     .toArray());\n\n    final RealMatrix result = eigenvectors.multiply(sqrtEigenvalues).multiply(eigenvectors.transpose());\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..e3c17c792 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,20 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix eigenvectors = dec.getV();\n+    final RealMatrix eigenvalues = dec.getD();\n+    final int dim = m.getColumnDimension();\n+    \n+    final RealMatrix sqrtEigenvalues = MatrixUtils.createRealDiagonalMatrix(\n+            IntStream.range(0, dim)\n+                     .mapToDouble(i -> Math.sqrt(Math.abs(eigenvalues.getEntry(i, i))))\n+                     .toArray());\n+\n+    final RealMatrix result = eigenvectors.multiply(sqrtEigenvalues).multiply(eigenvectors.transpose());\n+\n+    return result;\n+}\n }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}