{
    "patch": "try {\n    int transitionFieldIndex = -1;\n    boolean isYearField = false;\n    for (int i = 0; i < count; i++) {\n        long newMillis = savedFields[i].set(millis, resetFields);\n        if (i > 0 && newMillis != millis) {\n            // Check if the current field is the year field and is before the transition field\n            isYearField = (savedFields[i].iField.getType() == DateTimeFieldType.year());\n            boolean isBeforeTransitionField = (transitionFieldIndex < 0 || i < transitionFieldIndex);\n            if (isYearField && isBeforeTransitionField) {\n                // Re-parse the fields with the default year and return the computed millis\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                return computeMillis(resetFields, text);\n            }\n        }\n        // Check for time zone offset transition\n        if (iZone != null && i < count - 1) {\n            DateTimeZone newZone = iZone;\n            int newOffset = newZone.getOffset(newMillis);\n            if (newOffset != iOffset) {\n                // Check if the transition is due to DST or time zone rule\n                boolean dstTransition = (newZone.getStandardOffset(newMillis) != newOffset);\n                DateTimeField currentField = savedFields[i].iField;\n                boolean allowedTransition = (dstTransition && currentField.isSupported() && currentField.getDurationField() != null && currentField.getDurationField().getUnitMillis() >= DateTimeConstants.MILLIS_PER_HOUR);\n                if (allowedTransition) {\n                    transitionFieldIndex = i;\n                    isYearField = (currentField.getType() == DateTimeFieldType.year());\n                    iZone = newZone;\n                    iOffset = newOffset;\n                    if (isYearField) {\n                        saveField(DateTimeFieldType.year(), iDefaultYear);\n                        return computeMillis(resetFields, text);\n                    }\n                } else {\n                    throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition (\" + iZone + ')');\n                }\n            }\n        }\n        millis = newMillis;\n    }\n} catch (IllegalFieldValueException e) {\n    if (text != null) {\n        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n    }\n    throw e;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..7c8fa3ec 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,52 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+try {\n+    int transitionFieldIndex = -1;\n+    boolean isYearField = false;\n+    for (int i = 0; i < count; i++) {\n+        long newMillis = savedFields[i].set(millis, resetFields);\n+        if (i > 0 && newMillis != millis) {\n+            // Check if the current field is the year field and is before the transition field\n+            isYearField = (savedFields[i].iField.getType() == DateTimeFieldType.year());\n+            boolean isBeforeTransitionField = (transitionFieldIndex < 0 || i < transitionFieldIndex);\n+            if (isYearField && isBeforeTransitionField) {\n+                // Re-parse the fields with the default year and return the computed millis\n+                saveField(DateTimeFieldType.year(), iDefaultYear);\n+                return computeMillis(resetFields, text);\n+            }\n+        }\n+        // Check for time zone offset transition\n+        if (iZone != null && i < count - 1) {\n+            DateTimeZone newZone = iZone;\n+            int newOffset = newZone.getOffset(newMillis);\n+            if (newOffset != iOffset) {\n+                // Check if the transition is due to DST or time zone rule\n+                boolean dstTransition = (newZone.getStandardOffset(newMillis) != newOffset);\n+                DateTimeField currentField = savedFields[i].iField;\n+                boolean allowedTransition = (dstTransition && currentField.isSupported() && currentField.getDurationField() != null && currentField.getDurationField().getUnitMillis() >= DateTimeConstants.MILLIS_PER_HOUR);\n+                if (allowedTransition) {\n+                    transitionFieldIndex = i;\n+                    isYearField = (currentField.getType() == DateTimeFieldType.year());\n+                    iZone = newZone;\n+                    iOffset = newOffset;\n+                    if (isYearField) {\n+                        saveField(DateTimeFieldType.year(), iDefaultYear);\n+                        return computeMillis(resetFields, text);\n+                    }\n+                } else {\n+                    throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition (\" + iZone + ')');\n+                }\n+            }\n+        }\n+        millis = newMillis;\n+    }\n+} catch (IllegalFieldValueException e) {\n+    if (text != null) {\n+        e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+    }\n+    throw e;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}