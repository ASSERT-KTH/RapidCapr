{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n        final int n = m.getRowDimension();\n        if (n > 1000) {\n            // For large matrices, use a different algorithm\n            final RealMatrixIdentity iden = new RealMatrixIdentity(n);\n            final RealMatrixIdentityMinus idenMin = new RealMatrixIdentityMinus(iden);\n            final EigenDecomposition eigen = new EigenDecompositionImpl(m.subtract(idenMin).scalarAdd(1));\n            final RealMatrix eigenValues = eigen.getD();\n            for (int i = 0; i < eigenValues.getRowDimension(); i++) {\n                final double eigenValue = eigenValues.getEntry(i, i);\n                if (eigenValue < 0) {\n                    throw new IllegalArgumentException(\"Matrix is not positive definite\");\n                }\n                eigenValues.setEntry(i, i, Math.sqrt(eigenValue));\n            }\n            final RealMatrix eigenVectors = eigen.getV();\n            return eigenVectors.multiply(eigenValues).multiply(eigenVectors.transpose());\n        } else {\n            // Use the default algorithm\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            return dec.getSquareRoot();\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..dae221c5e 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,26 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n+        final int n = m.getRowDimension();\n+        if (n > 1000) {\n+            // For large matrices, use a different algorithm\n+            final RealMatrixIdentity iden = new RealMatrixIdentity(n);\n+            final RealMatrixIdentityMinus idenMin = new RealMatrixIdentityMinus(iden);\n+            final EigenDecomposition eigen = new EigenDecompositionImpl(m.subtract(idenMin).scalarAdd(1));\n+            final RealMatrix eigenValues = eigen.getD();\n+            for (int i = 0; i < eigenValues.getRowDimension(); i++) {\n+                final double eigenValue = eigenValues.getEntry(i, i);\n+                if (eigenValue < 0) {\n+                    throw new IllegalArgumentException(\"Matrix is not positive definite\");\n+                }\n+                eigenValues.setEntry(i, i, Math.sqrt(eigenValue));\n+            }\n+            final RealMatrix eigenVectors = eigen.getV();\n+            return eigenVectors.multiply(eigenValues).multiply(eigenVectors.transpose());\n+        } else {\n+            // Use the default algorithm\n             final EigenDecomposition dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n+        }\n     }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}