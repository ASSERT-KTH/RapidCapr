{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType instanceType = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isFunctionType()) {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct != null && ct.isConstructor()) {\n        // First, try to infer the instance type from the constructor\n        instanceType = ct.getInstanceType();\n        if (instanceType.isUnknownType()) {\n          // If the inferred instance type is unknown, try to infer it from the arguments\n          Node argNode = constructor.getNext();\n          if (argNode != null) {\n            instanceType = inferConstructorInstanceType(ct, argNode, scope);\n          }\n        }\n      } else {\n        instanceType = getNativeType(UNKNOWN_TYPE);\n      }\n    } else {\n      instanceType = getNativeType(UNKNOWN_TYPE);\n    }\n  } else {\n    instanceType = getNativeType(UNKNOWN_TYPE);\n  }\n  if (instanceType == null) {\n    instanceType = getNativeType(UNKNOWN_TYPE);\n  }\n  n.setJSType(instanceType);\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  return scope;\n}\n\nprivate static JSType inferConstructorInstanceType(FunctionType ct, Node argNode, FlowScope scope) {\n  JSType instanceType = null;\n  ObjectType prototype = ct.getPrototype();\n  if (prototype == null) {\n    // If the constructor has no prototype, we can't infer the instance type from the arguments\n    instanceType = getNativeType(UNKNOWN_TYPE);\n  } else {\n    // If the constructor has a prototype, we can try to infer the instance type from the arguments\n    ObjectType instance = prototype.getOwner().createAnonymousInstance();\n    Map<String, JSType> propertyTypes = prototype.getOwnPropertyTypes();\n    int propertyCount = propertyTypes.size();\n    int argCount = 0;\n    while (argNode != null && argCount < propertyCount) {\n      if (!propertyTypes.containsKey(Integer.toString(argCount))) {\n        // If the next property is a non-numeric name, we can't infer the instance type from the remaining arguments\n        instanceType = getNativeType(UNKNOWN_TYPE);\n        break;\n      } else {\n        JSType propertyType = propertyTypes.get(Integer.toString(argCount));\n        if (propertyType == null) {\n          // If the next property has no type, we can't infer the instance type from the remaining arguments\n          instanceType = getNativeType(UNKNOWN_TYPE);\n          break;\n        } else {\n          JSType argType = argNode.getJSType().restrictByNotNullOrUndefined();\n          if (!argType.isSubtype(propertyType, SubtypeCache.getInstance())) {\n            // If the next argument is not a subtype of the next property type, we can't infer the instance type from the remaining arguments\n            instanceType = getNativeType(UNKNOWN_TYPE);\n            break;\n          } else {\n            // Otherwise, assign the argument type to the next property and continue\n            instance.defineOwnProperty(Integer.toString(argCount), argType.restrictByNotNullOrUndefined(), prototype);\n          }\n        }\n      }\n      argNode = argNode.getNext();\n      argCount++;\n    }\n    if (instanceType == null) {\n      if (argCount < propertyCount) {\n        // If there are fewer arguments than properties, we can't infer the instance type from the arguments\n        instanceType = getNativeType(UNKNOWN_TYPE);\n      } else {\n        // Otherwise, assign the prototype to the instance and use the instance type as the inferred instance type\n        instance.setPrototype(prototype);\n        instanceType = instance;\n      }\n    }\n  }\n  return instanceType;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..71e3a9ff 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,95 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructor = n.getFirstChild();\n+  scope = traverse(constructor, scope);\n+  JSType constructorType = constructor.getJSType();\n+  JSType instanceType = null;\n+  if (constructorType != null) {\n+    constructorType = constructorType.restrictByNotNullOrUndefined();\n+    if (constructorType.isFunctionType()) {\n+      FunctionType ct = constructorType.toMaybeFunctionType();\n+      if (ct != null && ct.isConstructor()) {\n+        // First, try to infer the instance type from the constructor\n+        instanceType = ct.getInstanceType();\n+        if (instanceType.isUnknownType()) {\n+          // If the inferred instance type is unknown, try to infer it from the arguments\n+          Node argNode = constructor.getNext();\n+          if (argNode != null) {\n+            instanceType = inferConstructorInstanceType(ct, argNode, scope);\n+          }\n         }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+      } else {\n+        instanceType = getNativeType(UNKNOWN_TYPE);\n+      }\n+    } else {\n+      instanceType = getNativeType(UNKNOWN_TYPE);\n+    }\n+  } else {\n+    instanceType = getNativeType(UNKNOWN_TYPE);\n+  }\n+  if (instanceType == null) {\n+    instanceType = getNativeType(UNKNOWN_TYPE);\n+  }\n+  n.setJSType(instanceType);\n+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+    scope = traverse(arg, scope);\n+  }\n+  return scope;\n+}\n+\n+private static JSType inferConstructorInstanceType(FunctionType ct, Node argNode, FlowScope scope) {\n+  JSType instanceType = null;\n+  ObjectType prototype = ct.getPrototype();\n+  if (prototype == null) {\n+    // If the constructor has no prototype, we can't infer the instance type from the arguments\n+    instanceType = getNativeType(UNKNOWN_TYPE);\n+  } else {\n+    // If the constructor has a prototype, we can try to infer the instance type from the arguments\n+    ObjectType instance = prototype.getOwner().createAnonymousInstance();\n+    Map<String, JSType> propertyTypes = prototype.getOwnPropertyTypes();\n+    int propertyCount = propertyTypes.size();\n+    int argCount = 0;\n+    while (argNode != null && argCount < propertyCount) {\n+      if (!propertyTypes.containsKey(Integer.toString(argCount))) {\n+        // If the next property is a non-numeric name, we can't infer the instance type from the remaining arguments\n+        instanceType = getNativeType(UNKNOWN_TYPE);\n+        break;\n+      } else {\n+        JSType propertyType = propertyTypes.get(Integer.toString(argCount));\n+        if (propertyType == null) {\n+          // If the next property has no type, we can't infer the instance type from the remaining arguments\n+          instanceType = getNativeType(UNKNOWN_TYPE);\n+          break;\n+        } else {\n+          JSType argType = argNode.getJSType().restrictByNotNullOrUndefined();\n+          if (!argType.isSubtype(propertyType, SubtypeCache.getInstance())) {\n+            // If the next argument is not a subtype of the next property type, we can't infer the instance type from the remaining arguments\n+            instanceType = getNativeType(UNKNOWN_TYPE);\n+            break;\n+          } else {\n+            // Otherwise, assign the argument type to the next property and continue\n+            instance.defineOwnProperty(Integer.toString(argCount), argType.restrictByNotNullOrUndefined(), prototype);\n+          }\n         }\n       }\n+      argNode = argNode.getNext();\n+      argCount++;\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+    if (instanceType == null) {\n+      if (argCount < propertyCount) {\n+        // If there are fewer arguments than properties, we can't infer the instance type from the arguments\n+        instanceType = getNativeType(UNKNOWN_TYPE);\n+      } else {\n+        // Otherwise, assign the prototype to the instance and use the instance type as the inferred instance type\n+        instance.setPrototype(prototype);\n+        instanceType = instance;\n+      }\n     }\n-    return scope;\n   }\n+  return instanceType;\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: non-static method getNativeType(JSTypeNative) cannot be referenced from a static context",
    "test_result": "ERROR"
}