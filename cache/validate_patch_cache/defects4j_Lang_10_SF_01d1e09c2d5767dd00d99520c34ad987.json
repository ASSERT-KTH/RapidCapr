{
    "patch": "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n    boolean wasWhite= false;\n    for(int i= 0; i<value.length(); ++i) {\n        char c= value.charAt(i);\n        switch(c) {\n        case '?':\n        case '[':\n        case ']':\n        case '(':\n        case ')':\n        case '{':\n        case '}':\n        case '\\\\':\n        case '|':\n        case '*':\n        case '+':\n        case '^':\n        case '$':\n        case '.':\n            regex.append('\\\\');\n            break;\n        }\n        regex.append(c);\n    }\n    if(!unquote) {\n        return regex;\n    }\n    String unquoted= stripEnds(value, \"'\", \"'\");\n    try {\n        regex= new StringBuilder(NumberFormat.getNumberInstance().parse(unquoted).toString());\n    } catch(ParseException ex) {\n        regex= new StringBuilder(unquoted);\n    }\n    return regex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..7b00fff6 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -300,47 +300,41 @@ public class FastDateParser implements DateParser, Serializable {\n      * @param unquote If true, replace two success quotes ('') with single quote (')\n      * @return The <code>StringBuilder</code>\n      */\n-    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n-                    regex.append(\"\\\\s*+\");\n-                }\n-                continue;\n-            }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n-                    }\n-                    c= value.charAt(i);\n-                }\n-                break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n-            }\n-            regex.append(c);\n+private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+    boolean wasWhite= false;\n+    for(int i= 0; i<value.length(); ++i) {\n+        char c= value.charAt(i);\n+        switch(c) {\n+        case '?':\n+        case '[':\n+        case ']':\n+        case '(':\n+        case ')':\n+        case '{':\n+        case '}':\n+        case '\\\\':\n+        case '|':\n+        case '*':\n+        case '+':\n+        case '^':\n+        case '$':\n+        case '.':\n+            regex.append('\\\\');\n+            break;\n         }\n+        regex.append(c);\n+    }\n+    if(!unquote) {\n         return regex;\n     }\n+    String unquoted= stripEnds(value, \"'\", \"'\");\n+    try {\n+        regex= new StringBuilder(NumberFormat.getNumberInstance().parse(unquoted).toString());\n+    } catch(ParseException ex) {\n+        regex= new StringBuilder(unquoted);\n+    }\n+    return regex;\n+}\n \n     /**\n      * A class to store Key / Value pairs",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}