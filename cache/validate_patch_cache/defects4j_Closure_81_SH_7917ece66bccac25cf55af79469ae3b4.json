{
    "patch": "      boolean isUnnamedFunction = false;\n      if (name == null) {\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n      }\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n      if (isUnnamedFunction) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        int lineNumber = functionNode.getLineno();\n        newName.setLineno(lineNumber);\n        // Set the position of the function keyword, which is necessary if\n        // there are comments before the function.\n        int functionKeywordPosition = functionNode.getPosition();\n        newName.setCharno(position2charno(functionKeywordPosition));\n      }\n\n      node.addChildToBack(newName);\n      Node lp = newNode(Token.LP);\n      // The left paren has to appear on the same line as the function name\n      // (or else a semicolon will be inserted.)  If there's no function name,\n      // assume the paren was on the same line as the function.\n      Name fnName = functionNode.getFunctionName();\n      if (fnName != null) {\n        lp.setLineno(fnName.getLineno());\n      } else {\n        lp.setLineno(functionNode.getLineno());\n      }\n      // Set the position of the left paren, which is necessary if there are\n      // comments before the left paren.\n      int lpPosition = functionNode.getLp();\n      lp.setCharno(position2charno(lpPosition + functionNode.getPosition()));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..09ae5183 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,40 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+      boolean isUnnamedFunction = false;\n+      if (name == null) {\n+        name = new Name();\n+        name.setIdentifier(\"\");\n+        isUnnamedFunction = true;\n+      }\n+      Node node = newNode(Token.FUNCTION);\n+      Node newName = transform(name);\n+      if (isUnnamedFunction) {\n+        // Old Rhino tagged the empty name node with the line number of the\n+        // declaration.\n+        int lineNumber = functionNode.getLineno();\n+        newName.setLineno(lineNumber);\n+        // Set the position of the function keyword, which is necessary if\n+        // there are comments before the function.\n+        int functionKeywordPosition = functionNode.getPosition();\n+        newName.setCharno(position2charno(functionKeywordPosition));\n+      }\n+\n+      node.addChildToBack(newName);\n+      Node lp = newNode(Token.LP);\n+      // The left paren has to appear on the same line as the function name\n+      // (or else a semicolon will be inserted.)  If there's no function name,\n+      // assume the paren was on the same line as the function.\n+      Name fnName = functionNode.getFunctionName();\n+      if (fnName != null) {\n+        lp.setLineno(fnName.getLineno());\n+      } else {\n+        lp.setLineno(functionNode.getLineno());\n+      }\n+      // Set the position of the left paren, which is necessary if there are\n+      // comments before the left paren.\n+      int lpPosition = functionNode.getLp();\n+      lp.setCharno(position2charno(lpPosition + functionNode.getPosition()));\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: variable isUnnamedFunction is already defined in method processFunctionNode(FunctionNode)",
    "test_result": "ERROR"
}