{
    "patch": "private void traverse(Node node) {\n    if (!shouldVisit(node)) {\n      return;\n    }\n\n    int visits = 0;\n    do {\n      Node c = node.getFirstChild();\n      while(c != null) {\n        traverse(c);\n        Node next = c.getNext();\n        c = next;\n      }\n\n      visit(node);\n      visits++;\n\n      if (visits >= 10000) {\n        throw new IllegalStateException(\"Too many iterations\");\n      }\n    } while (shouldRetraverse(node) && visits < 10000);\n\n    exitNode(node);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\nindex b51c088e..1f9626f4 100644\n--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n@@ -110,11 +110,7 @@ class PeepholeOptimizationsPass\n     compiler.removeChangeHandler(handler);\n   }\n \n-  private void traverse(Node node) {\n-    // The goal here is to avoid retraversing\n-    // the entire AST to catch newly created opportunities.\n-    // So we track whether a \"unit of code\" has changed,\n-    // and revisit immediately.\n+private void traverse(Node node) {\n     if (!shouldVisit(node)) {\n       return;\n     }\n@@ -131,11 +127,13 @@ class PeepholeOptimizationsPass\n       visit(node);\n       visits++;\n \n-      Preconditions.checkState(visits < 10000, \"too many interations\");\n-    } while (shouldRetraverse(node));\n+      if (visits >= 10000) {\n+        throw new IllegalStateException(\"Too many iterations\");\n+      }\n+    } while (shouldRetraverse(node) && visits < 10000);\n \n     exitNode(node);\n-  }\n+}\n \n   private boolean shouldRetraverse(Node node) {\n     if (node.getParent() != null && node.isFunction() || node.isScript()) {",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}