{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n  // Invariant: All the names in the worklist meet condition (a).\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n\n    if (name.localSets > 0) {\n      // If the name has any local assignment, it cannot be inlined.\n      continue;\n    }\n\n    int aliasingGets = 0;\n    Ref alias = null;\n    List<Ref> refs = Lists.newArrayList(name.getRefs());\n    for (Ref ref : refs) {\n      if (ref.type == Type.ALIASING_GET) {\n        aliasingGets++;\n        alias = ref;\n      } else if (ref.type == Type.ALIAS) {\n        alias = ref;\n      }\n    }\n\n    if (aliasingGets > 1) {\n      // If the name has more than one aliasing get, it cannot be inlined.\n      continue;\n    }\n\n    if (alias != null) {\n      if (inlineAliasIfPossible(alias, namespace)) {\n        // Remove the alias ref from the name to prevent duplicate inlining attempts.\n        name.removeRef(alias);\n        if (alias.type != Type.ALIASING_GET) {\n          // If the alias is not an aliasing get, we are done with this name.\n          continue;\n        }\n      }\n    }\n\n    if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) &&\n        aliasingGets == 0 && name.globalSets == 1 && name.props != null) {\n      workList.addAll(name.props);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..d9201552 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,43 +158,54 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n-    // Invariant: All the names in the worklist meet condition (a).\n-    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n-    while (!workList.isEmpty()) {\n-      Name name = workList.pop();\n-\n-      // Don't attempt to inline a getter or setter property as a variable.\n-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n-        continue;\n+private void inlineAliases(GlobalNamespace namespace) {\n+  // Invariant: All the names in the worklist meet condition (a).\n+  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n+  while (!workList.isEmpty()) {\n+    Name name = workList.pop();\n+    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+      continue;\n+    }\n+\n+    if (name.localSets > 0) {\n+      // If the name has any local assignment, it cannot be inlined.\n+      continue;\n+    }\n+\n+    int aliasingGets = 0;\n+    Ref alias = null;\n+    List<Ref> refs = Lists.newArrayList(name.getRefs());\n+    for (Ref ref : refs) {\n+      if (ref.type == Type.ALIASING_GET) {\n+        aliasingGets++;\n+        alias = ref;\n+      } else if (ref.type == Type.ALIAS) {\n+        alias = ref;\n       }\n+    }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n-            }\n-          }\n+    if (aliasingGets > 1) {\n+      // If the name has more than one aliasing get, it cannot be inlined.\n+      continue;\n+    }\n+\n+    if (alias != null) {\n+      if (inlineAliasIfPossible(alias, namespace)) {\n+        // Remove the alias ref from the name to prevent duplicate inlining attempts.\n+        name.removeRef(alias);\n+        if (alias.type != Type.ALIASING_GET) {\n+          // If the alias is not an aliasing get, we are done with this name.\n+          continue;\n         }\n       }\n+    }\n \n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n-      }\n+    if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) &&\n+        aliasingGets == 0 && name.globalSets == 1 && name.props != null) {\n+      workList.addAll(name.props);\n     }\n   }\n+}\n \n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}