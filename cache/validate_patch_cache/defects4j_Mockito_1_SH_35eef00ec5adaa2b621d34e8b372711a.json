{
    "patch": "            Matcher varargMatcher = matchers.get(indexOfVararg);\n            if (varargMatcher instanceof CapturesArguments) {\n                Object array = invocation.getRawArguments()[indexOfVararg];\n                for (int i = 0; i < Array.getLength(array); i++) {\n                    ((CapturesArguments) varargMatcher).captureFrom(Array.get(array, i));\n                }\n            } else {\n                for (int i = indexOfVararg; i < invocation.getRawArguments().length; i++) {\n                    this.add(new Equals(invocation.getRawArguments()[i]));",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..57f4345b6 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,15 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Matcher varargMatcher = matchers.get(indexOfVararg);\n+            if (varargMatcher instanceof CapturesArguments) {\n+                Object array = invocation.getRawArguments()[indexOfVararg];\n+                for (int i = 0; i < Array.getLength(array); i++) {\n+                    ((CapturesArguments) varargMatcher).captureFrom(Array.get(array, i));\n+                }\n+            } else {\n+                for (int i = indexOfVararg; i < invocation.getRawArguments().length; i++) {\n+                    this.add(new Equals(invocation.getRawArguments()[i]));\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}