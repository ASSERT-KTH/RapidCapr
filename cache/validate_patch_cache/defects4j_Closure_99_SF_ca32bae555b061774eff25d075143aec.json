{
    "patch": "      // be able to have a @this annotation associated with them.\n      // e.g., var a = function() { }; // or function a() {} // or a.x = function() {};\n      if (parent != null) {\n        int pType = parent.getType();\n        if (!(pType == Token.BLOCK ||\n              pType == Token.SCRIPT ||\n              pType == Token.NAME ||\n              pType == Token.ASSIGN)) {\n          return false;\n        }\n      } else {\n        // If the parent is null and the node is not a Script node, then we should exit.\n        return n.getType() == Token.SCRIPT;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n      \n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if the assignment is not a prototype property or subproperty.\n        if (isPrototypePropertyAccess(lhs)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  private boolean isPrototypePropertyAccess(Node n) {\n    Node lastChild = n.getLastChild();\n    if (n.getType() == Token.GETPROP && lastChild != null && \"prototype\".equals(lastChild.getString())) {\n      return true;\n    } else {\n      String name = n.getQualifiedName();\n      return name != null && name.contains(\".prototype.\");",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..4e3afcbb 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,30 +81,19 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n+      // be able to have a @this annotation associated with them.\n+      // e.g., var a = function() { }; // or function a() {} // or a.x = function() {};\n+      if (parent != null) {\n+        int pType = parent.getType();\n+        if (!(pType == Token.BLOCK ||\n+              pType == Token.SCRIPT ||\n+              pType == Token.NAME ||\n+              pType == Token.ASSIGN)) {\n+          return false;\n+        }\n+      } else {\n+        // If the parent is null and the node is not a Script node, then we should exit.\n+        return n.getType() == Token.SCRIPT;\n       }\n     }\n \n@@ -120,21 +109,24 @@ final class CheckGlobalThis implements Callback {\n           assignLhsChild = lhs;\n         }\n       } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n+        // Only traverse the right side if the assignment is not a prototype property or subproperty.\n+        if (isPrototypePropertyAccess(lhs)) {\n+          return false;\n+        }\n       }\n     }\n \n     return true;\n   }\n \n+  private boolean isPrototypePropertyAccess(Node n) {\n+    Node lastChild = n.getLastChild();\n+    if (n.getType() == Token.GETPROP && lastChild != null && \"prototype\".equals(lastChild.getString())) {\n+      return true;\n+    } else {\n+      String name = n.getQualifiedName();\n+      return name != null && name.contains(\".prototype.\");\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n       compiler.report(t.makeError(n, level, GLOBAL_THIS));",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}