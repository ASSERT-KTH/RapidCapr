{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        if (constructorType.isFunctionType()) {\n          FunctionType ct = constructorType.toMaybeFunctionType();\n          if (ct.isConstructor()) {\n            type = ct.getInstanceType();\n          }\n        } else if (constructorType.isEnumElementType()) {\n          type = constructorType;\n        } else if (constructorType.isInterface()) {\n          if (constructorType.isFunctionPrototypeType()) {\n            type = constructorType.toObjectType();\n          } else {\n            ObjectType ot = constructorType.toMaybeObjectType();\n            if (ot != null) {\n              if (ot.getOwnPropertyJSType(\"prototype\") != null) {\n                type = constructorType.toMaybeObjectType().getConstructor();\n              } else {\n                type = getNativeObjectType(OBJECT_TYPE);\n              }\n            }\n          }\n        } else {\n          type = getNativeObjectType(OBJECT_TYPE);\n        }\n      }\n      if (type != null && type.isStructuralType()) {\n        type = objectTypeToStringType(type);\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..de51c23e 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1033,7 +1033,6 @@ class TypeInference\n   }\n \n   private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n@@ -1043,17 +1042,33 @@ class TypeInference\n       if (constructorType.isUnknownType()) {\n         type = getNativeType(UNKNOWN_TYPE);\n       } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+        if (constructorType.isFunctionType()) {\n+          FunctionType ct = constructorType.toMaybeFunctionType();\n+          if (ct.isConstructor()) {\n+            type = ct.getInstanceType();\n+          }\n+        } else if (constructorType.isEnumElementType()) {\n+          type = constructorType;\n+        } else if (constructorType.isInterface()) {\n+          if (constructorType.isFunctionPrototypeType()) {\n+            type = constructorType.toObjectType();\n+          } else {\n+            ObjectType ot = constructorType.toMaybeObjectType();\n+            if (ot != null) {\n+              if (ot.getOwnPropertyJSType(\"prototype\") != null) {\n+                type = constructorType.toMaybeObjectType().getConstructor();\n+              } else {\n+                type = getNativeObjectType(OBJECT_TYPE);\n+              }\n+            }\n+          }\n+        } else {\n+          type = getNativeObjectType(OBJECT_TYPE);\n         }\n       }\n+      if (type != null && type.isStructuralType()) {\n+        type = objectTypeToStringType(type);\n+      }\n     }\n     n.setJSType(type);\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}