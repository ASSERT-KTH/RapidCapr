{
    "patch": "    int numArgsToRemove = 0;\n    for (Node arg : argList.children()) {\n      String argName = arg.getString();\n      Var var = fnScope.getVar(argName);\n      if (!referenced.contains(var)) {\n        numArgsToRemove++;\n      } else {\n        break;\n      }\n    }\n    if (numArgsToRemove > 0) {\n      NodeUtil.removeChildren(argList, argList.getNumberOfChildren() - numArgsToRemove, null);\n      compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c9275f32 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,19 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    int numArgsToRemove = 0;\n+    for (Node arg : argList.children()) {\n+      String argName = arg.getString();\n+      Var var = fnScope.getVar(argName);\n+      if (!referenced.contains(var)) {\n+        numArgsToRemove++;\n+      } else {\n+        break;\n+      }\n+    }\n+    if (numArgsToRemove > 0) {\n+      NodeUtil.removeChildren(argList, argList.getNumberOfChildren() - numArgsToRemove, null);\n+      compiler.reportCodeChange();\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}