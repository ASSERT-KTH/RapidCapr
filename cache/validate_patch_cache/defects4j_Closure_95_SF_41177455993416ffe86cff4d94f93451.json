{
    "patch": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n  Preconditions.checkArgument(inferred || type != null);\n\n  String variableName = n.getQualifiedName();\n  Preconditions.checkArgument(n.getType() == Token.NAME || !variableName.isEmpty());\n\n  boolean shouldDeclareOnGlobalThis = false;\n  boolean hasProperty = n.getType() == Token.GETPROP;\n  if (!hasProperty) {\n    switch (parent.getType()) {\n      case Token.FUNCTION:\n      case Token.VAR:\n      case Token.LET:\n      case Token.CONST:\n      case Token.CATCH:\n        break;\n      case Token.INSTANCEOF: // instanceof operators always returns boolean\n        setDeferredType(n, getNativeType(JSTypeNative.BOOLEAN_TYPE));\n        break;\n      case Token.PARAM_LIST:\n        if (parent.getParent().getType() == Token.FUNCTION) {\n          break;\n        }\n        // fallthrough\n      default:\n        throw new IllegalStateException(\"Unexpected parent type: \" + parent.getType());\n    }\n    if (type != null && !inferred && scope.isGlobal()) {\n      ObjectType globalThis =\n          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n      boolean isExtern = compiler.getInput(sourceName).isExtern();\n      globalThis.defineDeclaredProperty(variableName, type, isExtern);\n      shouldDeclareOnGlobalThis = true;\n    }\n  } else { // This case deals with GETPROP only.\n    Preconditions.checkArgument(parent.getType() == Token.ASSIGN || parent.getType() == Token.EXPR_RESULT);\n    if (inferred) {\n      validator.expectUndeclaredVariable(sourceName, n, parent, null, variableName, type);\n    }\n    if (type != null && !inferred && parent.getType() == Token.ASSIGN) {\n      ObjectType objectType = ObjectType.cast(getTypeVariableInGenericType(type, variableName));\n      if (objectType != null && !objectType.hasReferenceName(variableName)) {\n        objectType.defineDeclaredProperty(variableName, typeRegistry.getNativeType(VOID_TYPE), false);\n      }\n    } else if (type != null && !inferred && scope.isGlobal()) {\n      ObjectType globalThis =\n          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n      boolean isExtern = compiler.getInput(sourceName).isExtern();\n      globalThis.defineDeclaredProperty(variableName, type, isExtern);\n      shouldDeclareOnGlobalThis = true;\n    } else if (type == null && inferred) {\n      JSType currentValueParent = parent.getJSType();\n      if (currentValueParent != null) {\n        if (currentValueParent.isSubtypeOf(getNativeType(JSTypeNative.OBJECT_TYPE))) {\n          ObjectType curObjType = ObjectType.cast(currentValueParent);\n          if (curObjType == null || !curObjType.hasReferenceName(variableName)) {\n            ObjectType objectType =\n                registry.createAnonymousObjectType(currentValueParent);\n            objectType.defineInferredProperty(variableName, getNativeType(JSTypeNative.NO_TYPE), false);\n            JSType newType = registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n            setDeferredType(n, newType);\n          }\n        }\n      } else {\n        JSType newType = registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n        setDeferredType(n, newType);\n      }\n    }\n  }\n\n  if (!inferred) {\n    setDeferredType(n, type);\n  }\n  CompilerInput input = compiler.getInput(sourceName);\n  Scope scopeToDeclareIn = hasProperty ? scope.getParent() : scope;\n  if (scopeToDeclareIn.isDeclared(variableName, false)) {\n    Var oldVar = scopeToDeclareIn.getVar(variableName);\n    validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n  } else {\n    scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n    if (shouldDeclareOnGlobalThis) {\n      ObjectType globalThis =\n          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n      boolean isExtern = compiler.getInput(sourceName).isExtern();\n      if (inferred) {\n        globalThis.defineInferredProperty(variableName, type == null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern);\n      } else {\n        globalThis.defineDeclaredProperty(variableName, type, isExtern);\n      }\n    }\n    if (scopeToDeclareIn.isGlobal() && type != null && type instanceof FunctionType) {\n      FunctionType fnType = (FunctionType) type;\n      if (fnType.isConstructor() || fnType.isInterface()) {\n        FunctionType superClassCtor = fnType.getSuperClassConstructor();\n        scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input,\n            superClassCtor == null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..34a096d4 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,80 +869,106 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n-      } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n-      }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n+void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+  Preconditions.checkArgument(inferred || type != null);\n+\n+  String variableName = n.getQualifiedName();\n+  Preconditions.checkArgument(n.getType() == Token.NAME || !variableName.isEmpty());\n+\n+  boolean shouldDeclareOnGlobalThis = false;\n+  boolean hasProperty = n.getType() == Token.GETPROP;\n+  if (!hasProperty) {\n+    switch (parent.getType()) {\n+      case Token.FUNCTION:\n+      case Token.VAR:\n+      case Token.LET:\n+      case Token.CONST:\n+      case Token.CATCH:\n+        break;\n+      case Token.INSTANCEOF: // instanceof operators always returns boolean\n+        setDeferredType(n, getNativeType(JSTypeNative.BOOLEAN_TYPE));\n+        break;\n+      case Token.PARAM_LIST:\n+        if (parent.getParent().getType() == Token.FUNCTION) {\n+          break;\n         }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n+        // fallthrough\n+      default:\n+        throw new IllegalStateException(\"Unexpected parent type: \" + parent.getType());\n+    }\n+    if (type != null && !inferred && scope.isGlobal()) {\n+      ObjectType globalThis =\n+          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+      boolean isExtern = compiler.getInput(sourceName).isExtern();\n+      globalThis.defineDeclaredProperty(variableName, type, isExtern);\n+      shouldDeclareOnGlobalThis = true;\n+    }\n+  } else { // This case deals with GETPROP only.\n+    Preconditions.checkArgument(parent.getType() == Token.ASSIGN || parent.getType() == Token.EXPR_RESULT);\n+    if (inferred) {\n+      validator.expectUndeclaredVariable(sourceName, n, parent, null, variableName, type);\n+    }\n+    if (type != null && !inferred && parent.getType() == Token.ASSIGN) {\n+      ObjectType objectType = ObjectType.cast(getTypeVariableInGenericType(type, variableName));\n+      if (objectType != null && !objectType.hasReferenceName(variableName)) {\n+        objectType.defineDeclaredProperty(variableName, typeRegistry.getNativeType(VOID_TYPE), false);\n+      }\n+    } else if (type != null && !inferred && scope.isGlobal()) {\n+      ObjectType globalThis =\n+          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+      boolean isExtern = compiler.getInput(sourceName).isExtern();\n+      globalThis.defineDeclaredProperty(variableName, type, isExtern);\n+      shouldDeclareOnGlobalThis = true;\n+    } else if (type == null && inferred) {\n+      JSType currentValueParent = parent.getJSType();\n+      if (currentValueParent != null) {\n+        if (currentValueParent.isSubtypeOf(getNativeType(JSTypeNative.OBJECT_TYPE))) {\n+          ObjectType curObjType = ObjectType.cast(currentValueParent);\n+          if (curObjType == null || !curObjType.hasReferenceName(variableName)) {\n+            ObjectType objectType =\n+                registry.createAnonymousObjectType(currentValueParent);\n+            objectType.defineInferredProperty(variableName, getNativeType(JSTypeNative.NO_TYPE), false);\n+            JSType newType = registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+            setDeferredType(n, newType);\n           }\n         }\n+      } else {\n+        JSType newType = registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+        setDeferredType(n, newType);\n+      }\n+    }\n+  }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n-        }\n+  if (!inferred) {\n+    setDeferredType(n, type);\n+  }\n+  CompilerInput input = compiler.getInput(sourceName);\n+  Scope scopeToDeclareIn = hasProperty ? scope.getParent() : scope;\n+  if (scopeToDeclareIn.isDeclared(variableName, false)) {\n+    Var oldVar = scopeToDeclareIn.getVar(variableName);\n+    validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n+  } else {\n+    scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n+    if (shouldDeclareOnGlobalThis) {\n+      ObjectType globalThis =\n+          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+      boolean isExtern = compiler.getInput(sourceName).isExtern();\n+      if (inferred) {\n+        globalThis.defineInferredProperty(variableName, type == null ? getNativeType(JSTypeNative.NO_TYPE) : type, isExtern);\n+      } else {\n+        globalThis.defineDeclaredProperty(variableName, type, isExtern);\n+      }\n+    }\n+    if (scopeToDeclareIn.isGlobal() && type != null && type instanceof FunctionType) {\n+      FunctionType fnType = (FunctionType) type;\n+      if (fnType.isConstructor() || fnType.isInterface()) {\n+        FunctionType superClassCtor = fnType.getSuperClassConstructor();\n+        scopeToDeclareIn.declare(variableName + \".prototype\", n, fnType.getPrototype(), input,\n+            superClassCtor == null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));\n       }\n     }\n+  }\n+}\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}