{
    "patch": "    private void init() {\n        thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n\n        nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n\n        StringBuilder regex= new StringBuilder();\n        List<Strategy> collector = new ArrayList<Strategy>();\n\n        Matcher patternMatcher= formatPattern.matcher(pattern);\n        if(!patternMatcher.lookingAt()) {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n\n        currentFormatField= patternMatcher.group();\n        Strategy currentStrategy= getStrategy(currentFormatField);\n        for(;;) {\n            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n            if(!patternMatcher.lookingAt()) {\n                nextStrategy = null;\n                break;\n            }\n            String nextFormatField= patternMatcher.group();\n            nextStrategy = getStrategy(nextFormatField);\n            if(currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            }\n            currentFormatField= nextFormatField;\n            currentStrategy= nextStrategy;\n        }\n        // Add current strategy if it's not null\n        if(currentStrategy != null) {\n            if(currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            }\n        }\n        // Set parsePattern and strategies based on the collector size\n        if(!collector.isEmpty()) {\n            strategies= collector.toArray(new Strategy[collector.size()]);\n            parsePattern= Pattern.compile(regex.toString());\n        } else {\n            strategies= new Strategy[0];\n            parsePattern= null;\n        }\n        // Set currentFormatField to null if there are no more matches\n        if(patternMatcher.regionStart() == patternMatcher.regionEnd()) {\n            currentFormatField= null;\n        } else {\n            // There is a remaining format field that does not match any strategy\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..2a300574 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,12 +141,27 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n-        if(currentStrategy.addRegex(this, regex)) {\n-            collector.add(currentStrategy);\n+        // Add current strategy if it's not null\n+        if(currentStrategy != null) {\n+            if(currentStrategy.addRegex(this, regex)) {\n+                collector.add(currentStrategy);\n+            }\n+        }\n+        // Set parsePattern and strategies based on the collector size\n+        if(!collector.isEmpty()) {\n+            strategies= collector.toArray(new Strategy[collector.size()]);\n+            parsePattern= Pattern.compile(regex.toString());\n+        } else {\n+            strategies= new Strategy[0];\n+            parsePattern= null;\n+        }\n+        // Set currentFormatField to null if there are no more matches\n+        if(patternMatcher.regionStart() == patternMatcher.regionEnd()) {\n+            currentFormatField= null;\n+        } else {\n+            // There is a remaining format field that does not match any strategy\n+            throw new IllegalArgumentException(\"Invalid pattern\");\n         }\n-        currentFormatField= null;\n-        strategies= collector.toArray(new Strategy[collector.size()]);\n-        parsePattern= Pattern.compile(regex.toString());\n     }\n \n     // Accessors",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}