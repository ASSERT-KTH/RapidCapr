{
    "patch": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    String str = text.substring(position);\n    String best = null;\n    for (String id : ALL_IDS) {\n        if (str.startsWith(id)) {\n            if (best == null || id.length() > best.length()) {\n                best = id;\n            }\n        }\n    }\n    if (best != null) {\n        bucket.setZone(DateTimeZone.forID(best));\n        return position + best.length();\n    }\n    return -(position + 1);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..4751c23c 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,22 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n+public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+    String str = text.substring(position);\n+    String best = null;\n+    for (String id : ALL_IDS) {\n+        if (str.startsWith(id)) {\n+            if (best == null || id.length() > best.length()) {\n+                best = id;\n+            }\n+        }\n     }\n+    if (best != null) {\n+        bucket.setZone(DateTimeZone.forID(best));\n+        return position + best.length();\n+    }\n+    return -(position + 1);\n+}\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}