{
    "patch": "public static boolean cycpattern_check(String a, String b) {\n    int n = a.length();\n    int m = b.length();\n    \n    // Check for invalid inputs\n    if (n < m || m == 0) return false;\n    \n    // Concatenate the first m-1 characters of b with itself to get a string of length m-1\n    String b_prefix = b.substring(0, m-1);\n    String b_repeat = b_prefix + b_prefix;\n    \n    // Store the last character of b in a set for fast lookup\n    Set<Character> b_suffix = new HashSet<>();\n    b_suffix.add(b.charAt(m-1));\n    \n    // Check if b is a cyclic pattern in a\n    for (int i = 0; i < n; i++) {\n        if (i + m - 1 >= n) break;\n        if (a.charAt(i) == b.charAt(0) && a.charAt(i+m-2) == b.charAt(m-2) && a.charAt(i+m-1) == b.charAt(m-1)) {\n            b_suffix.add(a.charAt(i+m-1));\n            String a_sub = a.substring(i, i+m-1);\n            String a_sub_repeat = a_sub + a_sub;\n            if (a_sub_repeat.contains(b_repeat)) return true;\n        }\n    }\n    \n    // Check if b is a substring of a formed by appending characters from the set of b's last character\n    for (int i = 0; i < n; i++) {\n        if (i + m > n) break;\n        if (a.charAt(i) == b.charAt(0) && b_suffix.contains(a.charAt(i+m-1))) {\n            String a_sub = a.substring(i, i+m);\n            if (a_sub.equals(b)) return true;\n        }\n    }\n    \n    // Return false if no match is found\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/CYCPATTERN_CHECK.java b/src/main/java/humaneval/buggy/CYCPATTERN_CHECK.java\nindex 763802b..54b2315 100644\n--- a/src/main/java/humaneval/buggy/CYCPATTERN_CHECK.java\n+++ b/src/main/java/humaneval/buggy/CYCPATTERN_CHECK.java\n@@ -9,14 +9,42 @@ package humaneval.buggy;\n // cycpattern_check(\"himenss\",\"simen\") => True\n \n public class CYCPATTERN_CHECK {\n-    public static boolean cycpattern_check(String a, String b) {\n-        int l = b.length();\n-        String pat = b;\n-        for (int i = 0; i < a.length(); i += 1) {\n-            for (int j = 0; j < l; j += 1) {\n-                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;\n-            }\n+public static boolean cycpattern_check(String a, String b) {\n+    int n = a.length();\n+    int m = b.length();\n+    \n+    // Check for invalid inputs\n+    if (n < m || m == 0) return false;\n+    \n+    // Concatenate the first m-1 characters of b with itself to get a string of length m-1\n+    String b_prefix = b.substring(0, m-1);\n+    String b_repeat = b_prefix + b_prefix;\n+    \n+    // Store the last character of b in a set for fast lookup\n+    Set<Character> b_suffix = new HashSet<>();\n+    b_suffix.add(b.charAt(m-1));\n+    \n+    // Check if b is a cyclic pattern in a\n+    for (int i = 0; i < n; i++) {\n+        if (i + m - 1 >= n) break;\n+        if (a.charAt(i) == b.charAt(0) && a.charAt(i+m-2) == b.charAt(m-2) && a.charAt(i+m-1) == b.charAt(m-1)) {\n+            b_suffix.add(a.charAt(i+m-1));\n+            String a_sub = a.substring(i, i+m-1);\n+            String a_sub_repeat = a_sub + a_sub;\n+            if (a_sub_repeat.contains(b_repeat)) return true;\n         }\n-        return false;\n     }\n+    \n+    // Check if b is a substring of a formed by appending characters from the set of b's last character\n+    for (int i = 0; i < n; i++) {\n+        if (i + m > n) break;\n+        if (a.charAt(i) == b.charAt(0) && b_suffix.contains(a.charAt(i+m-1))) {\n+            String a_sub = a.substring(i, i+m);\n+            if (a_sub.equals(b)) return true;\n+        }\n+    }\n+    \n+    // Return false if no match is found\n+    return false;\n+}\n }",
    "result_reason": " /tmp/humaneval-CYCPATTERN_CHECK/src/main/java/humaneval/buggy/CYCPATTERN_CHECK.java:[24,5] cannot find symbol",
    "test_result": "ERROR"
}