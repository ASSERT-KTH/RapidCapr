{
    "patch": "if (getPopulationSize() <= 0 || getSampleSize() <= 0 || getNumberOfSuccesses() < 0 || getNumberOfSuccesses() > getPopulationSize()) {\n    return 0.0;\n}\n\ndouble successRatio = ((double) getNumberOfSuccesses()) / ((double) getPopulationSize());\ndouble numericalMean = successRatio * ((double) getSampleSize());\nreturn Math.max(0.0, numericalMean);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\nindex 27691272f..34058b9d0 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\n@@ -265,7 +265,13 @@ public class HypergeometricDistribution extends AbstractIntegerDistribution {\n      * size {@code n}, the mean is {@code n * m / N}.\n      */\n     public double getNumericalMean() {\n-        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n+if (getPopulationSize() <= 0 || getSampleSize() <= 0 || getNumberOfSuccesses() < 0 || getNumberOfSuccesses() > getPopulationSize()) {\n+    return 0.0;\n+}\n+\n+double successRatio = ((double) getNumberOfSuccesses()) / ((double) getPopulationSize());\n+double numericalMean = successRatio * ((double) getSampleSize());\n+return Math.max(0.0, numericalMean);\n     }\n \n     /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}