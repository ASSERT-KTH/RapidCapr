{
    "patch": "public static double getTypedPercent(String json) { \n   ObjectMapper mapper = new ObjectMapper(); \n   try { \n      JsonNode rootNode = mapper.readTree(json); \n      JsonNode typedNode = rootNode.get(\"typed\"); \n      JsonNode totalNode = rootNode.get(\"total\"); \n      double typed = typedNode.asDouble(); \n      double total = totalNode.asDouble(); \n      if (total == 0) { \n         return 0.0; \n      } \n      return (typed * 100.0) / total; \n   } catch (IOException e) { \n      return 0.0; \n   } \n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..cb677a61 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public static double getTypedPercent(String json) { \n+   ObjectMapper mapper = new ObjectMapper(); \n+   try { \n+      JsonNode rootNode = mapper.readTree(json); \n+      JsonNode typedNode = rootNode.get(\"typed\"); \n+      JsonNode totalNode = rootNode.get(\"total\"); \n+      double typed = typedNode.asDouble(); \n+      double total = totalNode.asDouble(); \n+      if (total == 0) { \n+         return 0.0; \n+      } \n+      return (typed * 100.0) / total; \n+   } catch (IOException e) { \n+      return 0.0; \n+   } \n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}