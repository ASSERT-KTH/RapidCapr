{
    "patch": "public boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // This is described in Draft 2 of the ES4 spec,\n  // Section 3.4.7: Subtyping Function Types.\n  // See https://www-archive.mozilla.org/js/language/es4/types.html#subtyping-function\n\n  // this.returnType <: that.returnType (covariant)\n  if (!that.returnType.isSubtype(this.returnType)) {\n    return false;\n  }\n\n  // that.paramType[i] <: this.paramType[i] (contravariant).\n  // In practice, we only check that the arity of 'that' is at least the arity of 'this'.\n  // For example, we allow a function with 2 arguments to be compatible with a function with 1 argument,\n  // even though one of the arguments will be ignored. This enables powerful APIs like Array.forEach().\n  JSType thisLastParamType = getLastParamType(this.parameters);\n  JSType thatLastParamType = getLastParamType(that.parameters);\n  if (this.parameters.hasRest() && that.parameters.hasRest()) {\n    // Both functions have varargs parameters.\n    if (thatLastParamType.isSubtype(thisLastParamType)) {\n      return true;\n    }\n  } else if (!this.parameters.hasRest() && !that.parameters.hasRest()) {\n    // Both functions have fixed parameter lists.\n    Node thisParameterList = this.parameters;\n    Node thatParameterList = that.parameters;\n    while (thisParameterList != null && thatParameterList != null) {\n      if (!thatParameterList.getJSType().isSubtype(thisParameterList.getJSType())) {\n        return false;\n      }\n      thisParameterList = thisParameterList.getNext();\n      thatParameterList = thatParameterList.getNext();\n    }\n    if (thisParameterList == null && thatParameterList == null) {\n      return true;\n    }\n  } else if (this.parameters.hasRest() && !that.parameters.hasRest()) {\n    // This function has varargs parameters; 'that' has a fixed parameter list.\n    int numFnParams = getNumParams(this.parameters);\n    int numParamTypes = getNumParams(that.parameters);\n    if (numFnParams <= numParamTypes && thisLastParamType.isSubtype(thatLastParamType)) {\n      return true;\n    }\n  } else if (!this.parameters.hasRest() && that.parameters.hasRest()) {\n    // This function has a fixed parameter list; 'that' has varargs parameters.\n    int numFnParams = getNumParams(this.parameters);\n    int numParamTypes = getNumParams(that.parameters);\n    if (numFnParams >= numParamTypes - 1 && thatLastParamType.isSubtype(thisLastParamType)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nprivate JSType getLastParamType(Node parameterList) {\n  if (parameterList == null) {\n    return null;\n  }\n  Node lastParameter = parameterList.getLastChild();\n  return lastParameter.getJSType();\n}\n\nprivate int getNumParams(Node parameterList) {\n  if (parameterList == null) {\n    return 0;\n  }\n  int numParams = 0;\n  for (Node param : parameterList.children()) {\n    if (!param.isDefaultValue()) {\n      numParams++;\n    }\n  }\n  return numParams;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..847b565d 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,81 +77,86 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n-    if (!(other instanceof ArrowType)) {\n-      return false;\n-    }\n+public boolean isSubtype(JSType other) {\n+  if (!(other instanceof ArrowType)) {\n+    return false;\n+  }\n \n-    ArrowType that = (ArrowType) other;\n+  ArrowType that = (ArrowType) other;\n \n-    // This is described in Draft 2 of the ES4 spec,\n-    // Section 3.4.7: Subtyping Function Types.\n+  // This is described in Draft 2 of the ES4 spec,\n+  // Section 3.4.7: Subtyping Function Types.\n+  // See https://www-archive.mozilla.org/js/language/es4/types.html#subtyping-function\n \n-    // this.returnType <: that.returnType (covariant)\n-    if (!this.returnType.isSubtype(that.returnType)) {\n-      return false;\n-    }\n+  // this.returnType <: that.returnType (covariant)\n+  if (!that.returnType.isSubtype(this.returnType)) {\n+    return false;\n+  }\n \n-    // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n-    Node thisParam = parameters.getFirstChild();\n-    Node thatParam = that.parameters.getFirstChild();\n-    while (thisParam != null && thatParam != null) {\n-      JSType thisParamType = thisParam.getJSType();\n-      JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n-          return false;\n-        }\n+  // that.paramType[i] <: this.paramType[i] (contravariant).\n+  // In practice, we only check that the arity of 'that' is at least the arity of 'this'.\n+  // For example, we allow a function with 2 arguments to be compatible with a function with 1 argument,\n+  // even though one of the arguments will be ignored. This enables powerful APIs like Array.forEach().\n+  JSType thisLastParamType = getLastParamType(this.parameters);\n+  JSType thatLastParamType = getLastParamType(that.parameters);\n+  if (this.parameters.hasRest() && that.parameters.hasRest()) {\n+    // Both functions have varargs parameters.\n+    if (thatLastParamType.isSubtype(thisLastParamType)) {\n+      return true;\n+    }\n+  } else if (!this.parameters.hasRest() && !that.parameters.hasRest()) {\n+    // Both functions have fixed parameter lists.\n+    Node thisParameterList = this.parameters;\n+    Node thatParameterList = that.parameters;\n+    while (thisParameterList != null && thatParameterList != null) {\n+      if (!thatParameterList.getJSType().isSubtype(thisParameterList.getJSType())) {\n+        return false;\n       }\n+      thisParameterList = thisParameterList.getNext();\n+      thatParameterList = thatParameterList.getNext();\n+    }\n+    if (thisParameterList == null && thatParameterList == null) {\n+      return true;\n+    }\n+  } else if (this.parameters.hasRest() && !that.parameters.hasRest()) {\n+    // This function has varargs parameters; 'that' has a fixed parameter list.\n+    int numFnParams = getNumParams(this.parameters);\n+    int numParamTypes = getNumParams(that.parameters);\n+    if (numFnParams <= numParamTypes && thisLastParamType.isSubtype(thatLastParamType)) {\n+      return true;\n+    }\n+  } else if (!this.parameters.hasRest() && that.parameters.hasRest()) {\n+    // This function has a fixed parameter list; 'that' has varargs parameters.\n+    int numFnParams = getNumParams(this.parameters);\n+    int numParamTypes = getNumParams(that.parameters);\n+    if (numFnParams >= numParamTypes - 1 && thatLastParamType.isSubtype(thisLastParamType)) {\n+      return true;\n+    }\n+  }\n \n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n-\n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+  return false;\n+}\n \n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n-        thisParam = thisParam.getNext();\n-      }\n-      if (!thatIsVarArgs) {\n-        thatParam = thatParam.getNext();\n-      }\n+private JSType getLastParamType(Node parameterList) {\n+  if (parameterList == null) {\n+    return null;\n+  }\n+  Node lastParameter = parameterList.getLastChild();\n+  return lastParameter.getJSType();\n+}\n \n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n-      }\n+private int getNumParams(Node parameterList) {\n+  if (parameterList == null) {\n+    return 0;\n+  }\n+  int numParams = 0;\n+  for (Node param : parameterList.children()) {\n+    if (!param.isDefaultValue()) {\n+      numParams++;\n     }\n-\n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n-\n-    return true;\n   }\n+  return numParams;\n+}\n \n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}