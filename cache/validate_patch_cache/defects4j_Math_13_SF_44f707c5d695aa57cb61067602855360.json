{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final SchurTransformer transformer = new SchurTransformer(m);\n    final RealMatrix t = transformer.getT();\n    final int n = t.getRowDimension();\n    final RealMatrix z = MatrixUtils.createRealMatrix(n, n);\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (i == j) {\n                z.setEntry(i, j, Math.sqrt(t.getEntry(i, j)));\n            } else {\n                z.setEntry(i, j, 0.0);\n            }\n        }\n    }\n\n    final RealMatrix v = transformer.getV();\n    final RealMatrix zt = z.transpose();\n    final RealMatrix result = v.multiply(z).multiply(zt).scalarMultiply(1.0/t.getDeterminant());\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..a8d9a86ae 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,25 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final SchurTransformer transformer = new SchurTransformer(m);\n+    final RealMatrix t = transformer.getT();\n+    final int n = t.getRowDimension();\n+    final RealMatrix z = MatrixUtils.createRealMatrix(n, n);\n+\n+    for (int i = 0; i < n; i++) {\n+        for (int j = 0; j < n; j++) {\n+            if (i == j) {\n+                z.setEntry(i, j, Math.sqrt(t.getEntry(i, j)));\n+            } else {\n+                z.setEntry(i, j, 0.0);\n+            }\n+        }\n     }\n+\n+    final RealMatrix v = transformer.getV();\n+    final RealMatrix zt = z.transpose();\n+    final RealMatrix result = v.multiply(z).multiply(zt).scalarMultiply(1.0/t.getDeterminant());\n+    return result;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}