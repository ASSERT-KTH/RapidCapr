{
    "patch": "import org.apache.commons.math3.special.Gamma;\nimport org.apache.commons.math3.util.FastMath;\n\npublic class GammaUtils {\n\n    public static double regularizedGammaP(double a, double x) {\n        final int MAX_ITERATIONS = 1000;\n        final double EPSILON = 10e-15;\n        final double TINY = 10e-308;\n        final double BIG = 10e308;\n\n        if (x < 0 || a <= 0) {\n            throw new IllegalArgumentException(\"Invalid input arguments: a=\" + a + \", x=\" + x);\n        }\n\n        if (x == 0.0) {\n            return 0.0;\n        } else if (x >= a + 1.0) {\n            return 1.0 - regularizedGammaQ(a, x);\n        }\n\n        double gln = Gamma.logGamma(a);\n\n        double oldSum = 0.0;\n        double newSum = 1.0 / a;\n        double aPlusOne = a + 1.0;\n        double term = 1.0 / aPlusOne;\n        double aMinusOne = a - 1.0;\n        double b = x + aMinusOne;\n        double c = BIG;\n        double d = 1.0 / b;\n        double h = d;\n\n        for (int i = 1; i <= MAX_ITERATIONS; i++) {\n            double aI = -i * (i - a);\n            b += 2.0;\n            d = aI * d + b;\n            if (FastMath.abs(d) < TINY) {\n                d = TINY;\n            }\n            c = b + aI / c;\n            if (FastMath.abs(c) < TINY) {\n                c = TINY;\n            }\n            d = 1.0 / d;\n            double del = d * c;\n            h *= del;\n            if (FastMath.abs(del - 1.0) < EPSILON) {\n                break;\n            }\n        }\n\n        double result = h * FastMath.exp(-x + a * FastMath.log(x) - gln);\n        return result > 1.0 ? 1.0 : result;\n    }\n\n    public static double regularizedGammaQ(double a, double x) {\n        if (x < 0 || a <= 0) {\n            throw new IllegalArgumentException(\"Invalid input arguments: a=\" + a + \", x=\" + x);\n        }\n\n        if (x == 0.0) {\n            return 1.0;\n        } else if (x < a + 1.0) {\n            return 1.0 - regularizedGammaP(a, x);\n        }\n\n        double gln = Gamma.logGamma(a);\n\n        double b = x + a - 1.0;\n        double c = 1.0 / 1.0e-30;\n        double d = 1.0 / b;\n        double h = d;\n\n        int i;\n        int n = 1000;\n\n        for (i = 1; i <= n; i++) {\n            double an = -i * (i - a);\n            b += 2.0;\n            d = an * d + b;\n            if (FastMath.abs(d) < 1.0e-30) {\n                d = 1.0e-30;\n            }\n            c = b + an / c;\n            if (FastMath.abs(c) < 1.0e-30) {\n                c = 1.0e-30;\n            }\n            d = 1.0 / d;\n            double del = d * c;\n            h *= del;\n            if (FastMath.abs(del - 1.0) <= 3e-7) {\n                break;\n            }\n        }\n        if (i > n) {\n            throw new RuntimeException(\"a too large, n too small in regularizedGammaQ\");\n        }\n\n        double result = h * FastMath.exp(a * FastMath.log(x) - x - gln);\n        return result > 1.0 ? 1.0 : result;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..c9d162b68 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,109 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.special.Gamma;\n+import org.apache.commons.math3.util.FastMath;\n+\n+public class GammaUtils {\n+\n+    public static double regularizedGammaP(double a, double x) {\n+        final int MAX_ITERATIONS = 1000;\n+        final double EPSILON = 10e-15;\n+        final double TINY = 10e-308;\n+        final double BIG = 10e308;\n+\n+        if (x < 0 || a <= 0) {\n+            throw new IllegalArgumentException(\"Invalid input arguments: a=\" + a + \", x=\" + x);\n+        }\n+\n+        if (x == 0.0) {\n+            return 0.0;\n+        } else if (x >= a + 1.0) {\n+            return 1.0 - regularizedGammaQ(a, x);\n+        }\n+\n+        double gln = Gamma.logGamma(a);\n+\n+        double oldSum = 0.0;\n+        double newSum = 1.0 / a;\n+        double aPlusOne = a + 1.0;\n+        double term = 1.0 / aPlusOne;\n+        double aMinusOne = a - 1.0;\n+        double b = x + aMinusOne;\n+        double c = BIG;\n+        double d = 1.0 / b;\n+        double h = d;\n+\n+        for (int i = 1; i <= MAX_ITERATIONS; i++) {\n+            double aI = -i * (i - a);\n+            b += 2.0;\n+            d = aI * d + b;\n+            if (FastMath.abs(d) < TINY) {\n+                d = TINY;\n+            }\n+            c = b + aI / c;\n+            if (FastMath.abs(c) < TINY) {\n+                c = TINY;\n+            }\n+            d = 1.0 / d;\n+            double del = d * c;\n+            h *= del;\n+            if (FastMath.abs(del - 1.0) < EPSILON) {\n+                break;\n+            }\n+        }\n+\n+        double result = h * FastMath.exp(-x + a * FastMath.log(x) - gln);\n+        return result > 1.0 ? 1.0 : result;\n+    }\n+\n+    public static double regularizedGammaQ(double a, double x) {\n+        if (x < 0 || a <= 0) {\n+            throw new IllegalArgumentException(\"Invalid input arguments: a=\" + a + \", x=\" + x);\n+        }\n+\n+        if (x == 0.0) {\n+            return 1.0;\n+        } else if (x < a + 1.0) {\n+            return 1.0 - regularizedGammaP(a, x);\n+        }\n+\n+        double gln = Gamma.logGamma(a);\n+\n+        double b = x + a - 1.0;\n+        double c = 1.0 / 1.0e-30;\n+        double d = 1.0 / b;\n+        double h = d;\n+\n+        int i;\n+        int n = 1000;\n+\n+        for (i = 1; i <= n; i++) {\n+            double an = -i * (i - a);\n+            b += 2.0;\n+            d = an * d + b;\n+            if (FastMath.abs(d) < 1.0e-30) {\n+                d = 1.0e-30;\n+            }\n+            c = b + an / c;\n+            if (FastMath.abs(c) < 1.0e-30) {\n+                c = 1.0e-30;\n+            }\n+            d = 1.0 / d;\n+            double del = d * c;\n+            h *= del;\n+            if (FastMath.abs(del - 1.0) <= 3e-7) {\n+                break;\n+            }\n+        }\n+        if (i > n) {\n+            throw new RuntimeException(\"a too large, n too small in regularizedGammaQ\");\n+        }\n+\n+        double result = h * FastMath.exp(a * FastMath.log(x) - x - gln);\n+        return result > 1.0 ? 1.0 : result;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: floating point number too large",
    "test_result": "ERROR"
}