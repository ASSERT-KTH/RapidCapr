{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  boolean hasSideEffects = false;\n  if (block.hasChildren()) {\n    Preconditions.checkState(block.hasOneChild());\n    Node stmt = block.getFirstChild();\n    if (stmt.isReturn()) {\n      hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n    }\n  }\n\n  // Call parameters\n  Node arg = callNode.getFirstChild().getNext();\n\n  // Function arguments\n  Node param = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n  while (arg != null || param != null) {\n    // Check for more parameters without arguments\n    if (param != null && (arg == null || !arg.isSpread())) {\n      if (hasSideEffects && param.isName() && NodeUtil.canBeSideEffected(param)) {\n        return CanInlineResult.NO;\n      }\n\n      if (NodeUtil.mayEffectMutableState(arg, compiler)\n          && NodeUtil.getNameReferenceCount(block, param.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n\n      param = param.getNext();\n      continue;\n    }\n\n    // Check for more arguments without parameters\n    if (param == null) {\n      return CanInlineResult.NO;\n    }\n\n    if (arg.isSpread()) {\n      Node spreadExpression = arg.getOnlyChild();\n      if (hasSideEffects && NodeUtil.canBeSideEffected(spreadExpression)) {\n        return CanInlineResult.NO;\n      }\n      if (NodeUtil.mayEffectMutableState(spreadExpression, compiler)\n          && NodeUtil.getNameReferenceCount(block, param.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n      // The spread expression doesn't match the remaining params.\n      param = param.getNext();\n      continue;\n    }\n\n    // Check for argument vs parameter compatibility\n    if (hasSideEffects && param.isName() && NodeUtil.canBeSideEffected(param)) {\n      return CanInlineResult.NO;\n    }\n\n    if (NodeUtil.mayEffectMutableState(arg, compiler)\n        && NodeUtil.getNameReferenceCount(block, param.getString()) > 1) {\n      return CanInlineResult.NO;\n    }\n\n    arg = arg.getNext();\n    param = param.getNext();\n  }\n\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..6b2beecf 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,77 +686,80 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n+\n+  Node block = fnNode.getLastChild();\n+\n+  boolean hasSideEffects = false;\n+  if (block.hasChildren()) {\n+    Preconditions.checkState(block.hasOneChild());\n+    Node stmt = block.getFirstChild();\n+    if (stmt.isReturn()) {\n+      hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n     }\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  // Call parameters\n+  Node arg = callNode.getFirstChild().getNext();\n \n-    boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n+  // Function arguments\n+  Node param = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+\n+  while (arg != null || param != null) {\n+    // Check for more parameters without arguments\n+    if (param != null && (arg == null || !arg.isSpread())) {\n+      if (hasSideEffects && param.isName() && NodeUtil.canBeSideEffected(param)) {\n+        return CanInlineResult.NO;\n       }\n-    }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+      if (NodeUtil.mayEffectMutableState(arg, compiler)\n+          && NodeUtil.getNameReferenceCount(block, param.getString()) > 1) {\n+        return CanInlineResult.NO;\n       }\n+\n+      param = param.getNext();\n+      continue;\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+    // Check for more arguments without parameters\n+    if (param == null) {\n+      return CanInlineResult.NO;\n+    }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+    if (arg.isSpread()) {\n+      Node spreadExpression = arg.getOnlyChild();\n+      if (hasSideEffects && NodeUtil.canBeSideEffected(spreadExpression)) {\n+        return CanInlineResult.NO;\n       }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+      if (NodeUtil.mayEffectMutableState(spreadExpression, compiler)\n+          && NodeUtil.getNameReferenceCount(block, param.getString()) > 1) {\n+        return CanInlineResult.NO;\n       }\n+      // The spread expression doesn't match the remaining params.\n+      param = param.getNext();\n+      continue;\n     }\n \n-    return CanInlineResult.YES;\n+    // Check for argument vs parameter compatibility\n+    if (hasSideEffects && param.isName() && NodeUtil.canBeSideEffected(param)) {\n+      return CanInlineResult.NO;\n+    }\n+\n+    if (NodeUtil.mayEffectMutableState(arg, compiler)\n+        && NodeUtil.getNameReferenceCount(block, param.getString()) > 1) {\n+      return CanInlineResult.NO;\n+    }\n+\n+    arg = arg.getNext();\n+    param = param.getNext();\n   }\n \n+  return CanInlineResult.YES;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}