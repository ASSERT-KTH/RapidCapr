{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n\n    if (mock instanceof Factory) {\n        Factory factory = (Factory) mock;\n        factory.setCallback(0, newFilter);\n    } else if (mock instanceof MockAccess) {\n            try {\n                MockAccess<T> mockAccess = (MockAccess<T>) mock;\n                Field field = mockAccess.getClass().getSuperclass().getDeclaredField(\"handler\");\n                field.setAccessible(true);\n                Object oldHandler = field.get(mockAccess);\n                field.set(mockAccess, newMockHandler);\n                MethodInterceptorFilter newMethodFilter = new MethodInterceptorFilter(newMockHandler, \n                                        (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n                field = ((MockHandler)oldHandler).getClass().getDeclaredField(\"mockitoInterceptor\");\n                field.setAccessible(true);\n                field.set(oldHandler, newMethodFilter);\n            } catch (NoSuchFieldException | IllegalAccessException e) {\n                throw new RuntimeException(e);\n            }\n    } else {\n        throw new RuntimeException(\"Unsupported mock object type: \" + mock.getClass().getName());\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..6283575ef 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,35 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+\n+    if (mock instanceof Factory) {\n+        Factory factory = (Factory) mock;\n+        factory.setCallback(0, newFilter);\n+    } else if (mock instanceof MockAccess) {\n+            try {\n+                MockAccess<T> mockAccess = (MockAccess<T>) mock;\n+                Field field = mockAccess.getClass().getSuperclass().getDeclaredField(\"handler\");\n+                field.setAccessible(true);\n+                Object oldHandler = field.get(mockAccess);\n+                field.set(mockAccess, newMockHandler);\n+                MethodInterceptorFilter newMethodFilter = new MethodInterceptorFilter(newMockHandler, \n+                                        (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+                field = ((MockHandler)oldHandler).getClass().getDeclaredField(\"mockitoInterceptor\");\n+                field.setAccessible(true);\n+                field.set(oldHandler, newMethodFilter);\n+            } catch (NoSuchFieldException | IllegalAccessException e) {\n+                throw new RuntimeException(e);\n+            }\n+    } else {\n+        throw new RuntimeException(\"Unsupported mock object type: \" + mock.getClass().getName());\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: multi-catch statement is not supported in -source 1.5",
    "test_result": "ERROR"
}