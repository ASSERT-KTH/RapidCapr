{
    "patch": "    protected RealPointValuePair getSolution() {\n      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n\n      Set<Integer> basicRows = new HashSet<Integer>();\n      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n      Arrays.fill(coefficients, 0);\n      for (int i = 0; i < columnLabels.size() - 1; i++) {\n          Integer basicRow = getBasicRow(i);\n          if (basicRow != null && !basicRows.add(basicRow)) {\n              continue;\n          }\n          double coeff = restrictToNonNegative ? 0 : mostNegative;\n          if (basicRow != null) {\n              coeff += getEntry(basicRow, getRhsOffset());\n          }\n          for (Entry<Integer, Double> e : getRowEntries(basicRow)) {\n              int colIndex = e.getKey() - getNumObjectiveFunctions();\n              if (colIndex >= 0) {\n                  coefficients[colIndex] = restrictToNonNegative ? Math.max(coefficients[colIndex], 0) : coeff;\n              }\n          }\n      }\n      return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 02c22b59f..92c8cec74 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -400,25 +400,21 @@ class SimplexTableau implements Serializable {\n \n       Set<Integer> basicRows = new HashSet<Integer>();\n       double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-      for (int i = 0; i < coefficients.length; i++) {\n-          int colIndex = columnLabels.indexOf(\"x\" + i);\n-          if (colIndex < 0) {\n-            coefficients[i] = 0;\n-            continue;\n+      Arrays.fill(coefficients, 0);\n+      for (int i = 0; i < columnLabels.size() - 1; i++) {\n+          Integer basicRow = getBasicRow(i);\n+          if (basicRow != null && !basicRows.add(basicRow)) {\n+              continue;\n           }\n-          Integer basicRow = getBasicRow(colIndex);\n-              // if the basic row is found to be the objective function row\n-              // set the coefficient to 0 -> this case handles unconstrained \n-              // variables that are still part of the objective function\n-          if (basicRows.contains(basicRow)) {\n-              // if multiple variables can take a given value\n-              // then we choose the first and set the rest equal to 0\n-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n-          } else {\n-              basicRows.add(basicRow);\n-              coefficients[i] =\n-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                  (restrictToNonNegative ? 0 : mostNegative);\n+          double coeff = restrictToNonNegative ? 0 : mostNegative;\n+          if (basicRow != null) {\n+              coeff += getEntry(basicRow, getRhsOffset());\n+          }\n+          for (Entry<Integer, Double> e : getRowEntries(basicRow)) {\n+              int colIndex = e.getKey() - getNumObjectiveFunctions();\n+              if (colIndex >= 0) {\n+                  coefficients[colIndex] = restrictToNonNegative ? Math.max(coefficients[colIndex], 0) : coeff;\n+              }\n           }\n       }\n       return new RealPointValuePair(coefficients, f.getValue(coefficients));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}