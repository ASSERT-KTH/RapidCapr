{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n        if (n.hasOneChild()) {\n            Node maybeExpr = n.getFirstChild();\n\n            // IE has a bug where event handlers behave differently when\n            // their return value is used vs. when their return value is in\n            // an EXPR_RESULT. It's pretty freaking weird. See:\n            // http://code.google.com/p/closure-compiler/issues/detail?id=291\n            // We try to detect this case, and not fold EXPR_RESULTs\n            // into other expressions.\n            if (maybeExpr.isExprResult() && maybeExpr.hasOneChild()) {\n                maybeExpr = maybeExpr.getFirstChild();\n            }\n\n            if (NodeUtil.isCallOrNew(maybeExpr) || NodeUtil.isFunctionDeclaration(maybeExpr)) {\n                return false;\n            }\n\n            if (maybeExpr.isName() || maybeExpr.isString()) {\n                return true;\n            }\n\n            // Look for if statements without 'else' branches.\n            // We want to fold the expression if the 'if' statement is the only\n            // statement in the block because that means it would be executed\n            // unconditionally.\n            if (maybeExpr.isIf() && maybeExpr.hasTwoChildren()) {\n                Node then = maybeExpr.getFirstChild().getNext();\n                return then.isBlock() && then.getChildCount() == 1;\n            }\n\n            return NodeUtil.isExpressionNode(maybeExpr);\n        }\n    }\n\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..f4798316 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,44 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n+private boolean isFoldableExpressBlock(Node n) {\n     if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+        if (n.hasOneChild()) {\n+            Node maybeExpr = n.getFirstChild();\n+\n+            // IE has a bug where event handlers behave differently when\n+            // their return value is used vs. when their return value is in\n+            // an EXPR_RESULT. It's pretty freaking weird. See:\n+            // http://code.google.com/p/closure-compiler/issues/detail?id=291\n+            // We try to detect this case, and not fold EXPR_RESULTs\n+            // into other expressions.\n+            if (maybeExpr.isExprResult() && maybeExpr.hasOneChild()) {\n+                maybeExpr = maybeExpr.getFirstChild();\n+            }\n+\n+            if (NodeUtil.isCallOrNew(maybeExpr) || NodeUtil.isFunctionDeclaration(maybeExpr)) {\n+                return false;\n+            }\n+\n+            if (maybeExpr.isName() || maybeExpr.isString()) {\n+                return true;\n+            }\n+\n+            // Look for if statements without 'else' branches.\n+            // We want to fold the expression if the 'if' statement is the only\n+            // statement in the block because that means it would be executed\n+            // unconditionally.\n+            if (maybeExpr.isIf() && maybeExpr.hasTwoChildren()) {\n+                Node then = maybeExpr.getFirstChild().getNext();\n+                return then.isBlock() && then.getChildCount() == 1;\n+            }\n+\n+            return NodeUtil.isExpressionNode(maybeExpr);\n+        }\n     }\n \n     return false;\n-  }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}