{
    "patch": "List<Node> allFunctionArgs = NodeUtil.getFunctionParameters(fnScope.getRootNode());\nNode function = fnScope.getRootNode();\n\nPreconditions.checkState(function.isFunction());\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n  // The parameters object literal setters can not be removed.\n  return;\n}\n\nNode argList = getFunctionArgList(function);\nboolean modifyCallers = modifyCallSites\n    && callSiteOptimizer.canModifyCallers(function);\nif (!modifyCallers) {\n  // Strip unreferenced args off the end of the function declaration.\n  Queue<Node> referencedQueue = new LinkedList<>(referenced);\n  boolean safeToRemove = true;\n\n  for (Node arg : allFunctionArgs) {\n    Var var = fnScope.getVar(arg.getString());\n    if (referencedQueue.peek() != var) {\n      if (!safeToRemove) {\n        referenced.removeAll(referencedQueue);\n        break;\n      }\n      argList.removeChild(arg);\n      compiler.reportCodeChange();\n    } else {\n      safeToRemove = false;\n      referencedQueue.remove();\n    }\n  }\n} else {\n  callSiteOptimizer.optimize(fnScope, referenced);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..244d36f5 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,40 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+List<Node> allFunctionArgs = NodeUtil.getFunctionParameters(fnScope.getRootNode());\n+Node function = fnScope.getRootNode();\n+\n+Preconditions.checkState(function.isFunction());\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+  // The parameters object literal setters can not be removed.\n+  return;\n+}\n+\n+Node argList = getFunctionArgList(function);\n+boolean modifyCallers = modifyCallSites\n+    && callSiteOptimizer.canModifyCallers(function);\n+if (!modifyCallers) {\n+  // Strip unreferenced args off the end of the function declaration.\n+  Queue<Node> referencedQueue = new LinkedList<>(referenced);\n+  boolean safeToRemove = true;\n+\n+  for (Node arg : allFunctionArgs) {\n+    Var var = fnScope.getVar(arg.getString());\n+    if (referencedQueue.peek() != var) {\n+      if (!safeToRemove) {\n+        referenced.removeAll(referencedQueue);\n+        break;\n+      }\n+      argList.removeChild(arg);\n+      compiler.reportCodeChange();\n+    } else {\n+      safeToRemove = false;\n+      referencedQueue.remove();\n+    }\n+  }\n+} else {\n+  callSiteOptimizer.optimize(fnScope, referenced);\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}