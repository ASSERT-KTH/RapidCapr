{
    "patch": "public double chiSquare(double[] expected, long[] observed) {\n    if (expected.length != observed.length || expected.length < 2) {\n        throw new IllegalArgumentException(\"Arrays must have the same positive length of at least 2.\");\n    }\n    if (!isNonNegative(observed) || !isPositive(expected)) {\n        throw new IllegalArgumentException(\"observed counts must be non-negative and expected counts must be positive\");\n    }\n\n    double sumObserved = sum(observed);  // helper function to sum up the observed counts\n    double sumSquaredErrors = 0.0;\n    for (int i = 0; i < expected.length; i++) {\n        double expectedValue = sumObserved * expected[i] / sum(expected);  // helper function to sum up the expected counts\n        double deviation = observed[i] - expectedValue;\n        sumSquaredErrors += deviation * deviation / expectedValue;\n    }\n    return sumSquaredErrors;\n}\n\nprivate double sum(long[] array) {\n    double sum = 0.0;\n    for (long value : array) {\n        sum += value;\n    }\n    return sum;\n}\n\nprivate double sum(double[] array) {\n    double sum = 0.0;\n    for (double value : array) {\n        sum += value;\n    }\n    return sum;\n}\n\nprivate boolean isNonNegative(long[] array) {\n    for (long value : array) {\n        if (value < 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate boolean isPositive(double[] array) {\n    for (double value : array) {\n        if (value <= 0) {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\nindex c87b0101f..f9e6bbca7 100644\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n@@ -61,24 +61,57 @@ public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n      * @throws IllegalArgumentException if preconditions are not met\n      * or length is less than 2\n      */\n-    public double chiSquare(double[] expected, long[] observed)\n-        throws IllegalArgumentException {\n-        if ((expected.length < 2) || (expected.length != observed.length)) {\n-            throw new IllegalArgumentException(\n-                    \"observed, expected array lengths incorrect\");\n-        }\n-        if (!isPositive(expected) || !isNonNegative(observed)) {\n-            throw new IllegalArgumentException(\n-                \"observed counts must be non-negative and expected counts must be postive\");\n+public double chiSquare(double[] expected, long[] observed) {\n+    if (expected.length != observed.length || expected.length < 2) {\n+        throw new IllegalArgumentException(\"Arrays must have the same positive length of at least 2.\");\n+    }\n+    if (!isNonNegative(observed) || !isPositive(expected)) {\n+        throw new IllegalArgumentException(\"observed counts must be non-negative and expected counts must be positive\");\n+    }\n+\n+    double sumObserved = sum(observed);  // helper function to sum up the observed counts\n+    double sumSquaredErrors = 0.0;\n+    for (int i = 0; i < expected.length; i++) {\n+        double expectedValue = sumObserved * expected[i] / sum(expected);  // helper function to sum up the expected counts\n+        double deviation = observed[i] - expectedValue;\n+        sumSquaredErrors += deviation * deviation / expectedValue;\n+    }\n+    return sumSquaredErrors;\n+}\n+\n+private double sum(long[] array) {\n+    double sum = 0.0;\n+    for (long value : array) {\n+        sum += value;\n+    }\n+    return sum;\n+}\n+\n+private double sum(double[] array) {\n+    double sum = 0.0;\n+    for (double value : array) {\n+        sum += value;\n+    }\n+    return sum;\n+}\n+\n+private boolean isNonNegative(long[] array) {\n+    for (long value : array) {\n+        if (value < 0) {\n+            return false;\n         }\n-        double sumSq = 0.0d;\n-        double dev = 0.0d;\n-        for (int i = 0; i < observed.length; i++) {\n-                dev = ((double) observed[i] - expected[i]);\n-                sumSq += dev * dev / expected[i];\n+    }\n+    return true;\n+}\n+\n+private boolean isPositive(double[] array) {\n+    for (double value : array) {\n+        if (value <= 0) {\n+            return false;\n         }\n-        return sumSq;\n     }\n+    return true;\n+}\n \n     /**\n      * {@inheritDoc}",
    "result_reason": "error: method isPositive(double[]) is already defined in class ChiSquareTestImpl",
    "test_result": "ERROR"
}