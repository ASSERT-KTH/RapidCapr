{
    "patch": "public double[] distributionClone(double[] genotypeProbabilities, int M, int D, int N) {\n        double[] probabilities = new double[M];\n        double[] tempProbabilities;\n\n        for (int i = 0; i < M; i++) {\n            probabilities[i] = genotypeProbabilities[i];\n        }\n\n        for (int i = 0; i < D; i++) {\n            tempProbabilities = new double[M];\n\n            for (int j = 0; j < M; j++) {\n                for (int k = 0; k < M; k++) {\n                    tempProbabilities[getDominant(j, k, M)] += probabilities[j] * genotypeProbabilities[k];\n                }\n            }\n\n            probabilities = tempProbabilities;\n        }\n\n        double[] result = new double[N + 1];\n        Arrays.fill(result, 0d);\n\n        for (int i = 0; i < M; i++) {\n            result[populationCount(i)] += probabilities[i];\n        }\n\n        for (int i = 0; i < N + 1; i++) {\n            result[i] /= Math.pow(M, D);\n        }\n\n        return result;\n    }\n\n    private int getDominant(int i, int j, int M) {\n        int idx = 0;\n        for (int x = 0; x < i; x++) {\n            idx += (M - x) - 1;\n        }\n        return idx + j;\n    }\n\n    private int populationCount(int i) {\n        int result = 0;\n        while (i > 0) {\n            result += (i & 1);\n            i >>= 1;\n        }\n        return result;\n    }",
    "patch_diff": "",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}