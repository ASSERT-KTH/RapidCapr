{
    "patch": "/**\n* This class contains a method to return values based on the provided type.\n*/\npublic class ReturnValue {\n\n   private final Map<Class<?>, Object> values = new HashMap<>();\n\n   /**\n   * This method adds value and class to the map.\n   */\n   public void addValue(Object value, Class<?> clazz) {\n      values.put(clazz, value);\n   }\n\n   /**\n   * This method returns the value for the specified class.\n   */\n   public <T> T returnValueFor(Class<T> clazz) {\n      Object value = values.get(clazz);\n\n      if (value == null) {\n         return null;\n      }\n\n      return clazz.cast(value);\n   }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}