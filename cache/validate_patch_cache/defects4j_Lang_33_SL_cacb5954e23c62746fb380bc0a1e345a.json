{
    "patch": "public static Class<?>[] toClass(Object[] array) {\n    if (array == null) {\n        return null;\n    } else if (array.length == 0) {\n        return ArrayUtils.EMPTY_CLASS_ARRAY;\n    }\n    Class<?>[] classes = new Class[array.length];\n    for (int i = 0; i < array.length; i++) {\n        classes[i] = (array[i] != null) ? primitiveToWrapper(array[i].getClass()) : null;\n    }\n    return classes;\n}\n\nprivate static Class<?> primitiveToWrapper(Class<?> cls) {\n    if (cls == null || !cls.isPrimitive()) {\n        return cls;\n    }\n    if (Boolean.TYPE == cls) {\n        return Boolean.class;\n    }\n    if (Byte.TYPE == cls) {\n        return Byte.class;\n    }\n    if (Short.TYPE == cls) {\n        return Short.class;\n    }\n    if (Integer.TYPE == cls) {\n        return Integer.class;\n    }\n    if (Long.TYPE == cls) {\n        return Long.class;\n    }\n    if (Float.TYPE == cls) {\n        return Float.class;\n    }\n    if (Double.TYPE == cls) {\n        return Double.class;\n    }\n    if (Character.TYPE == cls) {\n        return Character.class;\n    }\n    throw new IllegalStateException(\"Unexpected primitive type: \" + cls);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/ClassUtils.java b/src/main/java/org/apache/commons/lang3/ClassUtils.java\nindex 615e4a9a..89d18599 100644\n--- a/src/main/java/org/apache/commons/lang3/ClassUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ClassUtils.java\n@@ -907,7 +907,49 @@ public class ClassUtils {\n         }\n         Class<?>[] classes = new Class[array.length];\n         for (int i = 0; i < array.length; i++) {\n-            classes[i] = array[i].getClass();\n+public static Class<?>[] toClass(Object[] array) {\n+    if (array == null) {\n+        return null;\n+    } else if (array.length == 0) {\n+        return ArrayUtils.EMPTY_CLASS_ARRAY;\n+    }\n+    Class<?>[] classes = new Class[array.length];\n+    for (int i = 0; i < array.length; i++) {\n+        classes[i] = (array[i] != null) ? primitiveToWrapper(array[i].getClass()) : null;\n+    }\n+    return classes;\n+}\n+\n+private static Class<?> primitiveToWrapper(Class<?> cls) {\n+    if (cls == null || !cls.isPrimitive()) {\n+        return cls;\n+    }\n+    if (Boolean.TYPE == cls) {\n+        return Boolean.class;\n+    }\n+    if (Byte.TYPE == cls) {\n+        return Byte.class;\n+    }\n+    if (Short.TYPE == cls) {\n+        return Short.class;\n+    }\n+    if (Integer.TYPE == cls) {\n+        return Integer.class;\n+    }\n+    if (Long.TYPE == cls) {\n+        return Long.class;\n+    }\n+    if (Float.TYPE == cls) {\n+        return Float.class;\n+    }\n+    if (Double.TYPE == cls) {\n+        return Double.class;\n+    }\n+    if (Character.TYPE == cls) {\n+        return Character.class;\n+    }\n+    throw new IllegalStateException(\"Unexpected primitive type: \" + cls);\n+}\n         }\n         return classes;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}