{
    "patch": "    if (n.isScript()) {\n      List<Node> statements = n.getSecondChild().asNode().getChildren();\n      boolean hasExceptionalEdges = false;\n      for (Node statement : statements) {\n        if (statement.isNormalBlock()) {\n          DiGraph<Node, Branch> cfg = ControlFlowGraph.compute(statement);\n          for (DiGraphNode<Node, Branch> cfgNode : cfg.getNodes()) {\n            if (hasExceptionHandler(cfgNode.getValue())) {\n              hasExceptionalEdges = true;\n            }\n          }\n        }\n      }\n      if (hasExceptionalEdges) {\n        return true;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..3ff5d6a5 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,23 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+    if (n.isScript()) {\n+      List<Node> statements = n.getSecondChild().asNode().getChildren();\n+      boolean hasExceptionalEdges = false;\n+      for (Node statement : statements) {\n+        if (statement.isNormalBlock()) {\n+          DiGraph<Node, Branch> cfg = ControlFlowGraph.compute(statement);\n+          for (DiGraphNode<Node, Branch> cfgNode : cfg.getNodes()) {\n+            if (hasExceptionHandler(cfgNode.getValue())) {\n+              hasExceptionalEdges = true;\n+            }\n+          }\n+        }\n+      }\n+      if (hasExceptionalEdges) {\n+        return true;\n+      }\n+    }\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}