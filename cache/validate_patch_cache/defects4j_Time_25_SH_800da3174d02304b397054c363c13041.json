{
    "patch": "            // Positive offset change implies a gap in spring\n            // which clocks in local time move forward\n            if (offsetLocal > offsetAdjusted) {\n                long prevLocal = previousTransition(instantAdjusted);\n                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n                if ((prevLocal + offsetLocal) != (prevAdjusted + offsetAdjusted)) {\n                    return offsetLocal;\n                }\n            } else {\n                // Ambiguous local time around transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if ((nextLocal + offsetLocal) != (nextAdjusted + offsetAdjusted)) {",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b78f8758 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,19 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            // Positive offset change implies a gap in spring\n+            // which clocks in local time move forward\n+            if (offsetLocal > offsetAdjusted) {\n+                long prevLocal = previousTransition(instantAdjusted);\n+                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+                if ((prevLocal + offsetLocal) != (prevAdjusted + offsetAdjusted)) {\n+                    return offsetLocal;\n+                }\n+            } else {\n+                // Ambiguous local time around transition\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if ((nextLocal + offsetLocal) != (nextAdjusted + offsetAdjusted)) {\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}