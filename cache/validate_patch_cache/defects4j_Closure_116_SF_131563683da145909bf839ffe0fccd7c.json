{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node cArg = callNode.getFirstChild().getNext();\n  int numArgs = NodeUtil.getFunctionParameters(fnNode).getChildCount();\n\n  // If the function being called has more arguments than the number of\n  // argument values specified in the call, then it's not possible to inline.\n  if (countArguments(fnNode) > countArguments(callNode)) {\n    return CanInlineResult.NO;\n  }\n\n  // Skip the `this` argument if present.\n  if (!callNode.getFirstChild().isName()) {\n    cArg = cArg.getNext();\n  }\n\n  Node block = fnNode.getLastChild();\n\n  // Check each argument for side-effects and non-mutability.\n  for (int i = 0; i < numArgs; i++) {\n    Node cArgValue = cArg != null ? cArg.getFirstChild() : null;\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getChildAt(i);\n\n    if (cArgValue != null && NodeUtil.mayHaveSideEffects(cArgValue, compiler)) {\n      return CanInlineResult.NO;\n    }\n\n    if (fnParam.getString() != null\n        && (cArgValue == null || !isImmutableValue(cArgValue))) {\n      if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n    }\n\n    if (cArg != null) {\n      cArg = cArg.getNext();\n    }\n  }\n\n  return CanInlineResult.YES;\n}\n\n/**\n * Returns the number of arguments specified in the given call node. Does not\n * count the function being called as the first argument.\n */\nprivate static int countArguments(Node call) {\n  return call.getChildCount() - 1;\n}\n\n/**\n * Returns true if the given node is an immutable value. For the purposes of\n * this function, we're considering \"undefined\" and \"null\" to be immutable.\n */\nprivate static boolean isImmutableValue(Node value) {\n  return value.isNull()\n      || (value.isName() && (value.getString().equals(\"undefined\")\n                             || value.getString().equals(\"null\")));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..baae31df 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,68 +686,70 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n+  Node cArg = callNode.getFirstChild().getNext();\n+  int numArgs = NodeUtil.getFunctionParameters(fnNode).getChildCount();\n \n+  // If the function being called has more arguments than the number of\n+  // argument values specified in the call, then it's not possible to inline.\n+  if (countArguments(fnNode) > countArguments(callNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  // Skip the `this` argument if present.\n+  if (!callNode.getFirstChild().isName()) {\n+    cArg = cArg.getNext();\n+  }\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n+  Node block = fnNode.getLastChild();\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+  // Check each argument for side-effects and non-mutability.\n+  for (int i = 0; i < numArgs; i++) {\n+    Node cArgValue = cArg != null ? cArg.getFirstChild() : null;\n+    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getChildAt(i);\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+    if (cArgValue != null && NodeUtil.mayHaveSideEffects(cArgValue, compiler)) {\n+      return CanInlineResult.NO;\n+    }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+    if (fnParam.getString() != null\n+        && (cArgValue == null || !isImmutableValue(cArgValue))) {\n+      if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n+        return CanInlineResult.NO;\n       }\n     }\n \n-    return CanInlineResult.YES;\n+    if (cArg != null) {\n+      cArg = cArg.getNext();\n+    }\n   }\n \n+  return CanInlineResult.YES;\n+}\n+\n+/**\n+ * Returns the number of arguments specified in the given call node. Does not\n+ * count the function being called as the first argument.\n+ */\n+private static int countArguments(Node call) {\n+  return call.getChildCount() - 1;\n+}\n+\n+/**\n+ * Returns true if the given node is an immutable value. For the purposes of\n+ * this function, we're considering \"undefined\" and \"null\" to be immutable.\n+ */\n+private static boolean isImmutableValue(Node value) {\n+  return value.isNull()\n+      || (value.isName() && (value.getString().equals(\"undefined\")\n+                             || value.getString().equals(\"null\")));\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}