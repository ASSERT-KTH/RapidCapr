{
    "patch": "public boolean isSubtype(JSType other) {\n  if (!(other instanceof ArrowType)) {\n    return false;\n  }\n\n  ArrowType that = (ArrowType) other;\n\n  // This is described in Draft 2 of the ES4 spec,\n  // Section 3.4.7: Subtyping Function Types.\n\n  // this.returnType <: that.returnType (covariant)\n  if (!this.returnType.isSubtype(that.returnType)) {\n    return false;\n  }\n\n  // that.paramType[i] <: this.paramType[i] (contravariant)\n  //\n  // If this.paramType[i] is required,\n  // then that.paramType[i] is required.\n  //\n  // In theory, the \"required-ness\" should work in the other direction as\n  // well. In other words, if we have\n  //\n  // function f(number, number) {}\n  // function g(number) {}\n  //\n  // Then f *should* not be a subtype of g, and g *should* not be\n  // a subtype of f. But in practice, we do not implement it this way.\n  // We want to support the use case where you can pass g where f is\n  // expected, and pretend that g ignores the second argument.\n  // That way, you can have a single \"no-op\" function, and you don't have\n  // to create a new no-op function for every possible type signature.\n  //\n  // So, in this case, g < f, but f !< g\n  Node thisParam = parameters.getFirstChild();\n  Node thatParam = that.parameters.getFirstChild();\n\n  // Initialize checkers for undefined parameter types\n  TypeCheck tc = getJSType().getTypeCheck();\n  JSType undefined = tc.getNativeType(JSTypeNative.UNDEFINED_TYPE);\n\n  // Additionally, make a copy of \"thisParam\" so that, if necessary, we\n  // can fork the loop below to check varargs.\n  Node originalThisParam = thisParam;\n  boolean originalThisIsVarArgs = thisParam != null && thisParam.isVarArgs();\n\n  while (thisParam != null && thatParam != null) {\n    JSType thisParamType = thisParam.getJSType();\n    JSType thatParamType = thatParam.getJSType();\n\n    if (thisParamType == null) {\n      // If this side doesn't specify a type, any type is allowed.\n      // Assuming that it's a subtype of the other side's type is\n      // both unsafe (any might mean *anything*) and uninteresting\n      // (a no-op function would then accept anything anyway).\n      return false;\n    }\n    else if (thatParamType == null) {\n      // If the other side doesn't specify the type, it must be a\n      // supertype of any type. Fortunately, JSType makes that easy\n      // by claiming that any type is a subtype of JSType.\n      //\n      // Ideally we would be able to check that the parameter is optional\n      // and then avoid performing the check, but at least using the WeakType\n      // function ensures that the check is properly performed if we can't\n      // prove the two types are unrelated.\n      if (!thatParam.isOptional()) {\n        if (!thisParamType.isSubtypeOf(undefined)) {\n          return false;\n        }\n      }\n    } else if (!thatParamType.isSubtype(thisParamType)) {\n      return false;\n    }\n\n    boolean thisIsVarArgs = thisParam.isVarArgs();\n    boolean thatIsVarArgs = thatParam.isVarArgs();\n\n    // \"that\" can't be a supertype, because it's missing a required argument.\n    // NOTE(nicksantos): In our type system, we use {function(...?)} and\n    // {function(...NoType)} to to indicate that arity should not be\n    // checked. Strictly speaking, this is not a correct formulation,\n    // because now a sub-function can required arguments that are var_args\n    // in the super-function. So we special-case this.\n\n    // don't advance if we have variable arguments\n    if (!thisIsVarArgs) {\n      thisParam = thisParam.getNext();\n    }\n    if (!thatIsVarArgs) {\n      thatParam = thatParam.getNext();\n    }\n\n    // both var_args indicates the end\n    if (thisIsVarArgs && thatIsVarArgs) {\n      // Find the effective \"array\" type for both varargs collections.\n      // Crucial assumption about our code as it exists: When varargs are added\n      // to the stub of an overridden method or to the definition of a method\n      // with no explicit definition, we add a new parameter to the definition.\n      // That parameter is given a randomly-named property, and the signature\n      // for the function interface type includes a \"...\" placeholder param.\n      // If this is not true, you may be incorrectly warned for illegal varargs\n      // use even for code that does not use varargs.\n      JSType thisElemType = thisParamType.getTemplateTypeMap().getResolvedTemplateType(\"THIS_IS_UNDEFINED\");\n      JSType thatElemType = thatParamType.getTemplateTypeMap().getResolvedTemplateType(\"THIS_IS_UNDEFINED\");\n\n      // Make sure the element types match.\n      if (thatElemType == null || !thatElemType.isSubtype(thisElemType)) {\n        return false;\n      }\n\n      // Check varargs.\n      Node restThisParam = originalThisParam;\n      if (!thisIsVarArgs) {  // There might be a remaining element with a name.\n        restThisParam = restThisParam.getNext();\n      }\n\n      while (restThisParam != null) {\n        if (!restThisParam.getJSType().isSubtype(thisElemType)) {\n          return false;\n        }\n        restThisParam = restThisParam.getNext();\n      }\n\n      return true;\n    }\n  }\n\n  if (thatParam != null && !thatParam.isOptional()) {\n    return false;\n  }\n\n  // \"that\" can't be a supertype, because it's missing a required argument.\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..c1e397ef 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,82 +77,142 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n-    if (!(other instanceof ArrowType)) {\n-      return false;\n-    }\n+public boolean isSubtype(JSType other) {\n+  if (!(other instanceof ArrowType)) {\n+    return false;\n+  }\n+\n+  ArrowType that = (ArrowType) other;\n+\n+  // This is described in Draft 2 of the ES4 spec,\n+  // Section 3.4.7: Subtyping Function Types.\n+\n+  // this.returnType <: that.returnType (covariant)\n+  if (!this.returnType.isSubtype(that.returnType)) {\n+    return false;\n+  }\n \n-    ArrowType that = (ArrowType) other;\n+  // that.paramType[i] <: this.paramType[i] (contravariant)\n+  //\n+  // If this.paramType[i] is required,\n+  // then that.paramType[i] is required.\n+  //\n+  // In theory, the \"required-ness\" should work in the other direction as\n+  // well. In other words, if we have\n+  //\n+  // function f(number, number) {}\n+  // function g(number) {}\n+  //\n+  // Then f *should* not be a subtype of g, and g *should* not be\n+  // a subtype of f. But in practice, we do not implement it this way.\n+  // We want to support the use case where you can pass g where f is\n+  // expected, and pretend that g ignores the second argument.\n+  // That way, you can have a single \"no-op\" function, and you don't have\n+  // to create a new no-op function for every possible type signature.\n+  //\n+  // So, in this case, g < f, but f !< g\n+  Node thisParam = parameters.getFirstChild();\n+  Node thatParam = that.parameters.getFirstChild();\n \n-    // This is described in Draft 2 of the ES4 spec,\n-    // Section 3.4.7: Subtyping Function Types.\n+  // Initialize checkers for undefined parameter types\n+  TypeCheck tc = getJSType().getTypeCheck();\n+  JSType undefined = tc.getNativeType(JSTypeNative.UNDEFINED_TYPE);\n \n-    // this.returnType <: that.returnType (covariant)\n-    if (!this.returnType.isSubtype(that.returnType)) {\n+  // Additionally, make a copy of \"thisParam\" so that, if necessary, we\n+  // can fork the loop below to check varargs.\n+  Node originalThisParam = thisParam;\n+  boolean originalThisIsVarArgs = thisParam != null && thisParam.isVarArgs();\n+\n+  while (thisParam != null && thatParam != null) {\n+    JSType thisParamType = thisParam.getJSType();\n+    JSType thatParamType = thatParam.getJSType();\n+\n+    if (thisParamType == null) {\n+      // If this side doesn't specify a type, any type is allowed.\n+      // Assuming that it's a subtype of the other side's type is\n+      // both unsafe (any might mean *anything*) and uninteresting\n+      // (a no-op function would then accept anything anyway).\n       return false;\n     }\n-\n-    // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n-    Node thisParam = parameters.getFirstChild();\n-    Node thatParam = that.parameters.getFirstChild();\n-    while (thisParam != null && thatParam != null) {\n-      JSType thisParamType = thisParam.getJSType();\n-      JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n+    else if (thatParamType == null) {\n+      // If the other side doesn't specify the type, it must be a\n+      // supertype of any type. Fortunately, JSType makes that easy\n+      // by claiming that any type is a subtype of JSType.\n+      //\n+      // Ideally we would be able to check that the parameter is optional\n+      // and then avoid performing the check, but at least using the WeakType\n+      // function ensures that the check is properly performed if we can't\n+      // prove the two types are unrelated.\n+      if (!thatParam.isOptional()) {\n+        if (!thisParamType.isSubtypeOf(undefined)) {\n           return false;\n         }\n       }\n+    } else if (!thatParamType.isSubtype(thisParamType)) {\n+      return false;\n+    }\n \n-      boolean thisIsVarArgs = thisParam.isVarArgs();\n-      boolean thatIsVarArgs = thatParam.isVarArgs();\n+    boolean thisIsVarArgs = thisParam.isVarArgs();\n+    boolean thatIsVarArgs = thatParam.isVarArgs();\n \n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+    // \"that\" can't be a supertype, because it's missing a required argument.\n+    // NOTE(nicksantos): In our type system, we use {function(...?)} and\n+    // {function(...NoType)} to to indicate that arity should not be\n+    // checked. Strictly speaking, this is not a correct formulation,\n+    // because now a sub-function can required arguments that are var_args\n+    // in the super-function. So we special-case this.\n \n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n-        thisParam = thisParam.getNext();\n+    // don't advance if we have variable arguments\n+    if (!thisIsVarArgs) {\n+      thisParam = thisParam.getNext();\n+    }\n+    if (!thatIsVarArgs) {\n+      thatParam = thatParam.getNext();\n+    }\n+\n+    // both var_args indicates the end\n+    if (thisIsVarArgs && thatIsVarArgs) {\n+      // Find the effective \"array\" type for both varargs collections.\n+      // Crucial assumption about our code as it exists: When varargs are added\n+      // to the stub of an overridden method or to the definition of a method\n+      // with no explicit definition, we add a new parameter to the definition.\n+      // That parameter is given a randomly-named property, and the signature\n+      // for the function interface type includes a \"...\" placeholder param.\n+      // If this is not true, you may be incorrectly warned for illegal varargs\n+      // use even for code that does not use varargs.\n+      JSType thisElemType = thisParamType.getTemplateTypeMap().getResolvedTemplateType(\"THIS_IS_UNDEFINED\");\n+      JSType thatElemType = thatParamType.getTemplateTypeMap().getResolvedTemplateType(\"THIS_IS_UNDEFINED\");\n+\n+      // Make sure the element types match.\n+      if (thatElemType == null || !thatElemType.isSubtype(thisElemType)) {\n+        return false;\n       }\n-      if (!thatIsVarArgs) {\n-        thatParam = thatParam.getNext();\n+\n+      // Check varargs.\n+      Node restThisParam = originalThisParam;\n+      if (!thisIsVarArgs) {  // There might be a remaining element with a name.\n+        restThisParam = restThisParam.getNext();\n       }\n \n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n+      while (restThisParam != null) {\n+        if (!restThisParam.getJSType().isSubtype(thisElemType)) {\n+          return false;\n+        }\n+        restThisParam = restThisParam.getNext();\n       }\n-    }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n+      return true;\n+    }\n+  }\n \n-    return true;\n+  if (thatParam != null && !thatParam.isOptional()) {\n+    return false;\n   }\n \n+  // \"that\" can't be a supertype, because it's missing a required argument.\n+  return true;\n+}\n+\n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter\n    *     spec.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}