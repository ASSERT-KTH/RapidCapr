{
    "patch": "public static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n\n    // Check if the types are compatible with each other\n    if (type1.isAssignableFrom(type2) || type2.isAssignableFrom(type1)) {\n        final T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    } else if (type1.isPrimitive() && !type2.isPrimitive()) {\n        // If array1 is primitive and array2 is not, then convert array2 to object array\n        final T[] joinedArray = (T[]) Array.newInstance(Object.class, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        for (int i = 0; i < array2.length; i++) {\n            joinedArray[i + array1.length] = array2[i];\n        }\n        return joinedArray;\n    } else if (type2.isPrimitive() && !type1.isPrimitive()) {\n        // If array2 is primitive and array1 is not, then convert array1 to object array\n        final T[] joinedArray = (T[]) Array.newInstance(Object.class, array1.length + array2.length);\n        for (int i = 0; i < array1.length; i++) {\n            joinedArray[i] = array1[i];\n        }\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    } else {\n        // If array1 and array2 are both primitive and have incompatible types, or if both are objects and have incompatible types\n        throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" in an array of \" + type1.getName());\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/ArrayUtils.java b/src/java/org/apache/commons/lang3/ArrayUtils.java\nindex 889497e9..8698c9d3 100644\n--- a/src/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java\n@@ -2950,19 +2950,43 @@ public class ArrayUtils {\n      * @since 2.1\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> T[] addAll(T[] array1, T... array2) {\n-        if (array1 == null) {\n-            return clone(array2);\n-        } else if (array2 == null) {\n-            return clone(array1);\n-        }\n-        final Class<?> type1 = array1.getClass().getComponentType();\n-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n+public static <T> T[] addAll(T[] array1, T... array2) {\n+    if (array1 == null) {\n+        return clone(array2);\n+    } else if (array2 == null) {\n+        return clone(array1);\n+    }\n+\n+    final Class<?> type1 = array1.getClass().getComponentType();\n+    final Class<?> type2 = array2.getClass().getComponentType();\n+\n+    // Check if the types are compatible with each other\n+    if (type1.isAssignableFrom(type2) || type2.isAssignableFrom(type1)) {\n+        final T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n         System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n-            // Check if problem is incompatible types\n+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n+        return joinedArray;\n+    } else if (type1.isPrimitive() && !type2.isPrimitive()) {\n+        // If array1 is primitive and array2 is not, then convert array2 to object array\n+        final T[] joinedArray = (T[]) Array.newInstance(Object.class, array1.length + array2.length);\n+        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n+        for (int i = 0; i < array2.length; i++) {\n+            joinedArray[i + array1.length] = array2[i];\n+        }\n         return joinedArray;\n+    } else if (type2.isPrimitive() && !type1.isPrimitive()) {\n+        // If array2 is primitive and array1 is not, then convert array1 to object array\n+        final T[] joinedArray = (T[]) Array.newInstance(Object.class, array1.length + array2.length);\n+        for (int i = 0; i < array1.length; i++) {\n+            joinedArray[i] = array1[i];\n+        }\n+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n+        return joinedArray;\n+    } else {\n+        // If array1 and array2 are both primitive and have incompatible types, or if both are objects and have incompatible types\n+        throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" in an array of \" + type1.getName());\n     }\n+}\n \n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}