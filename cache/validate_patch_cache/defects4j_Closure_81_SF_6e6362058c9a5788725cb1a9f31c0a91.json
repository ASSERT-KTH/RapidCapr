{
    "patch": "public class TransformDispatcher extends TypeSafeDispatcher<Node> {\n  private SourceInformation sourceInformation;\n  private String sourceName;\n  private ErrorReporter errorReporter;\n  private Comments comments;\n  private Set<String> ALLOWED_DIRECTIVES;\n\n  public TransformDispatcher(\n      SourceInformation sourceInformation,\n      String sourceName,\n      ErrorReporter errorReporter,\n      Comments comments,\n      Set<String> allowedDirectives) {\n    this.sourceInformation = sourceInformation;\n    this.sourceName = sourceName;\n    this.errorReporter = errorReporter;\n    this.comments = comments;\n    this.ALLOWED_DIRECTIVES = allowedDirectives;\n  }\n\n  private int position2line(int position) {\n    return sourceInformation.getLine(position);\n  }\n\n  private int position2charno(int position) {\n    return SourcePosition.calculateOffset(\n        sourceInformation.getLineSource(position),\n        position - sourceInformation.getLineStartPos(position));\n  }\n\n  private Node newNode(int type) {\n    Node node = new Node(sourceInformation, type);\n    node.setLineno(position2line(sourceInformation.getOffset()));\n    node.setCharno(position2charno(sourceInformation.getOffset()));\n    return node;\n  }\n\n  private Node newNode(int type, Node left) {\n    Node node = newNode(type);\n    node.addChildToBack(left);\n    return node;\n  }\n\n  private Node newNode(int type, Node left, Node right) {\n    Node node = newNode(type);\n    node.addChildToBack(left);\n    node.addChildToBack(right);\n    return node;\n  }\n\n  private Node newNode(int type, Node left, Node middle, Node right) {\n    Node node = newNode(type);\n    node.addChildToBack(left);\n    node.addChildToBack(middle);\n    node.addChildToBack(right);\n    return node;\n  }\n\n  @Override\n  Node processArrayComprehension(ArrayComprehension node) {\n    throw new UnsupportedOperationException(\"Array comprehensions are not currently supported.\");\n  }\n\n  @Override\n  Node processArrayLiteral(ArrayLiteral node) {\n    Node result = newNode(Token.ARRAYLIT);\n    for (AstNode element : node.getElements()) {\n      if (element == null) {\n        result.addChildToBack(newNode(Token.EMPTY));\n      } else {\n        result.addChildToBack(transform(element));\n      }\n    }\n    return result;\n  }\n\n  private boolean isDirective(Node n) {\n    if (n == null) return false;\n\n    int nType = n.getType();\n    return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n        n.getFirstChild().getType() == Token.STRING &&\n        ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n  }\n\n  Node parseDirectives(Node n) {\n    boolean parsingDirectives = true;\n    Node firstDirective = null;\n    for (Node directive : n.children()) {\n      if (parsingDirectives) {\n        if (isDirective(directive)) {\n          if (firstDirective == null) {\n            firstDirective = directive;\n          }\n          continue;\n        } else {\n          parsingDirectives = false;\n        }\n      } else {\n        if (isDirective(directive)) {\n          errorReporter.warning(\n              \"Directive \\\"\" + directive.getFirstChild().getString() +\n              \"\\\" misplaced and ignored in file \" + sourceName,\n              sourceName, directive.getLineno());\n        } else {\n          break;  // non-directive statement begins here\n        }\n      }\n    }\n    if (firstDirective != null) {\n      Node scope = new Node(Token.SCRIPT);\n      scope.addChildrenToFront(firstDirective, n.removeChildren());\n      return scope;\n    }\n    return n;\n  }\n\n  @Override\n  Node processBlock(Block blockNode) {\n    return parseDirectives(processGeneric(blockNode));\n  }\n\n  @Override\n  Node processBreakStatement(BreakStatement statementNode) {\n    Node node = newNode(Token.BREAK);\n    if (statementNode.getBreakLabel() != null) {\n      Node labelName = transform(statementNode.getBreakLabel());\n      // Change the NAME to LABEL_NAME\n      labelName.setType(Token.LABEL_NAME);\n      node.addChildToBack(labelName);\n    }\n    return node;\n  }\n\n  @Override\n  Node processCatchClause(CatchClause clauseNode) {\n    AstNode catchVar = clauseNode.getVarName();\n    Node node = newNode(Token.CATCH, transform(catchVar));\n    if (clauseNode.getCatchCondition() != null) {\n      errorReporter.error(\n          \"Catch clauses are not supported\",\n          sourceName,\n          clauseNode.getCatchCondition().getLineno(), \"\", 0);\n    }\n    node.addChildToBack(transformBlock(clauseNode.getBody()));\n    return node;\n  }\n\n  @Override\n  Node processConditionalExpression(ConditionalExpression exprNode) {\n    return newNode(\n        Token.HOOK,\n        transform(exprNode.getTestExpression()),\n        transform(exprNode.getTrueExpression()),\n        transform(exprNode.getFalseExpression()));\n  }\n\n  @Override\n  Node processContinueStatement(ContinueStatement statementNode) {\n    Node node = newNode(Token.CONTINUE);\n    if (statementNode.getLabel() != null) {\n      Node labelName = transform(statementNode.getLabel());\n      // Change the NAME to LABEL_NAME\n      labelName.setType(Token.LABEL_NAME);\n      node.addChildToBack(labelName);\n    }\n    return node;\n  }\n\n  @Override\n  Node processDoLoop(DoLoop loopNode) {\n    return newNode(\n        Token.DO,\n        transformBlock(loopNode.getBody()),\n        transform(loopNode.getCondition()));\n  }\n\n  @Override\n  Node processElementGet(ElementGet getNode) {\n    return newNode(\n        Token.GETELEM,\n        transform(getNode.getTarget()),\n        transform(getNode.getElement()));\n  }\n\n  @Override\n  Node processEmptyExpression(EmptyExpression exprNode) {\n    Node node = newNode(Token.EMPTY);\n    return node;\n  }\n\n  @Override\n  Node processExpressionStatement(ExpressionStatement statementNode) {\n    Node node = newNode(transformTokenType(statementNode.getType()));\n    node.addChildToBack(transform(statementNode.getExpression()));\n    return node;\n  }\n\n  @Override\n  Node processForInLoop(ForInLoop loopNode) {\n    return newNode(\n        Token.FOR,\n        transform(loopNode.getIterator()),\n        transform(loopNode.getIteratedObject()),\n        transformBlock(loopNode.getBody()));\n  }\n\n  @Override\n  Node processForLoop(ForLoop loopNode) {\n    Node node = newNode(\n        Token.FOR,\n        transform(loopNode.getInitializer()),\n        transform(loopNode.getCondition()),\n        transform(loopNode.getIncrement()));\n    node.addChildToBack(transformBlock(loopNode.getBody()));\n    return node;\n  }\n\n  @Override\n  Node processFunctionCall(FunctionCall callNode) {\n    Node node = newNode(transformTokenType(callNode.getType()),\n                         transform(callNode.getTarget()));\n    for (AstNode child : callNode.getArguments()) {\n      node.addChildToBack(transform(child));\n    }\n\n    if (callNode.getArguments().size() == 0) {\n      Node lp = newNode(Token.LP);\n      lp.setLineno(callNode.getLineno());\n      int lparenCharno = callNode.getTarget().getPosition() +\n          callNode.getTarget().getLength();\n      lp.setCharno(position2charno(lparenCharno));\n      node.addChildToBack(lp);\n    }\n\n    int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n    node.setLineno(callNode.getLineno());\n    node.setCharno(position2charno(leftParamPos));\n    return node;\n  }\n\n  @Override\n  Node processFunctionNode(FunctionNode functionNode) {\n    Name name = functionNode.getFunctionName();\n    Boolean isUnnamedFunction = false;\n    if (name == null) {\n      name = new Name();\n      name.setIdentifier(\"\");\n      isUnnamedFunction = true;\n    }\n    Node node = newNode(Token.FUNCTION);\n    Node newName = transform(name);\n    if (isUnnamedFunction) {\n      // Old Rhino tagged the empty name node with the line number of the\n      // declaration.\n      newName.setLineno(functionNode.getLineno());\n      // TODO(bowdidge) Mark line number of paren correctly.\n      // Same problem as below - the left paren might not be on the\n      // same line as the function keyword.\n      int lpColumn = functionNode.getAbsolutePosition() +\n          functionNode.getLength();\n      newName.setCharno(position2charno(lpColumn));\n    }\n\n    node.addChildToBack(newName);\n    Node lp = newNode(Token.LP);\n    // The left paren's complicated because it's not represented by an\n    // AstNode, so there's nothing that has the actual line number that it\n    // appeared on.  We know the paren has to appear on the same line as the\n    // function name (or else a semicolon will be inserted.)  If there's no\n    // function name, assume the paren was on the same line as the function.\n    // TODO(bowdidge): Mark line number of paren correctly.\n    int lpLineNumber = name.getLineno();\n    int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n    lp.setLineno(lpLineNumber <= 0 ? functionNode.getLineno() : lpLineNumber);\n    lp.setCharno(position2charno(lparenCharno));\n    for (AstNode param : functionNode.getParams()) {\n      lp.addChildToBack(transform(param));\n    }\n    node.addChildToBack(lp);\n\n    Node bodyNode = transform(functionNode.getBody());\n    parseDirectives(bodyNode);\n    node.addChildToBack(bodyNode);\n    return node;\n  }\n\n  @Override\n  Node processGenExpr(GeneratorExpression node) {\n    throw new UnsupportedOperationException(\"Generator expressions are not currently supported.\");\n  }\n\n  @Override\n  Node processIfStatement(IfStatement statementNode) {\n    Node node = newNode(Token.IF);\n    node.addChildToBack(transform(statementNode.getCondition()));\n    node.addChildToBack(transformBlock(statementNode.getThenPart()));\n    if (statementNode.getElsePart() != null) {\n      Node elseBranch = new Node(Token.ELSE);\n      elseBranch.addChildToBack(transformBlock(statementNode.getElsePart()));\n      node.addChildToBack(elseBranch);\n    }\n    return node;\n  }\n\n  @Override\n  Node processInfixExpression(InfixExpression exprNode) {\n    return newNode(\n        transformTokenType(exprNode.getType()),\n        transform(exprNode.getLeft()),\n        transform(exprNode.getRight()));\n  }\n\n  private Node processJsxElement(MultiLinesComment comment, Node node, String closingString) {\n    JsxNode jsxNode = new JsxNode();\n    jsxNode.setJsxContext(true);\n    jsxNode.setLineno(position2line(node.getPosition()));\n    jsxNode.setCharno(position2charno(node.getPosition()));\n\n    if (comment != null) {\n      jsxNode.setJsDocNode(transform(comment));\n      jsxNode.setLineno(comment.getLineno());\n      jsxNode.setCharno(position2charno(comment.getPosition()));\n    }\n\n    if (node instanceof XmlString) {\n      jsxNode.setName(processXmlAttribute(node, jsxNode));\n      jsxNode.setJsxText(true);\n    }\n    else {\n      jsxNode.setName(processJSXElement(node, jsxNode));\n    }\n\n    int end = node.getPosition() + node.getLength();\n    Node childNode = node.getFirstChild();\n    while (childNode != null && childNode.getPosition() < end) {\n      if (childNode instanceof XmlString) {\n        jsxNode.addChildToBack(transform(childNode));\n      } else if (childNode instanceof XmlElemRef) {\n        // This represents a JSX expression inside of JSX text.\n        jsxNode.addChildToBack(processJSXText((XmlElemRef) childNode));\n      } els",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..ef25131a 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -385,182 +385,349 @@ public class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+public class TransformDispatcher extends TypeSafeDispatcher<Node> {\n+  private SourceInformation sourceInformation;\n+  private String sourceName;\n+  private ErrorReporter errorReporter;\n+  private Comments comments;\n+  private Set<String> ALLOWED_DIRECTIVES;\n+\n+  public TransformDispatcher(\n+      SourceInformation sourceInformation,\n+      String sourceName,\n+      ErrorReporter errorReporter,\n+      Comments comments,\n+      Set<String> allowedDirectives) {\n+    this.sourceInformation = sourceInformation;\n+    this.sourceName = sourceName;\n+    this.errorReporter = errorReporter;\n+    this.comments = comments;\n+    this.ALLOWED_DIRECTIVES = allowedDirectives;\n+  }\n \n-      int nType = n.getType();\n-      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n-          n.getFirstChild().getType() == Token.STRING &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n+  private int position2line(int position) {\n+    return sourceInformation.getLine(position);\n+  }\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n+  private int position2charno(int position) {\n+    return SourcePosition.calculateOffset(\n+        sourceInformation.getLineSource(position),\n+        position - sourceInformation.getLineStartPos(position));\n+  }\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n+  private Node newNode(int type) {\n+    Node node = new Node(sourceInformation, type);\n+    node.setLineno(position2line(sourceInformation.getOffset()));\n+    node.setCharno(position2charno(sourceInformation.getOffset()));\n+    return node;\n+  }\n+\n+  private Node newNode(int type, Node left) {\n+    Node node = newNode(type);\n+    node.addChildToBack(left);\n+    return node;\n+  }\n+\n+  private Node newNode(int type, Node left, Node right) {\n+    Node node = newNode(type);\n+    node.addChildToBack(left);\n+    node.addChildToBack(right);\n+    return node;\n+  }\n+\n+  private Node newNode(int type, Node left, Node middle, Node right) {\n+    Node node = newNode(type);\n+    node.addChildToBack(left);\n+    node.addChildToBack(middle);\n+    node.addChildToBack(right);\n+    return node;\n+  }\n+\n+  @Override\n+  Node processArrayComprehension(ArrayComprehension node) {\n+    throw new UnsupportedOperationException(\"Array comprehensions are not currently supported.\");\n+  }\n+\n+  @Override\n+  Node processArrayLiteral(ArrayLiteral node) {\n+    Node result = newNode(Token.ARRAYLIT);\n+    for (AstNode element : node.getElements()) {\n+      if (element == null) {\n+        result.addChildToBack(newNode(Token.EMPTY));\n+      } else {\n+        result.addChildToBack(transform(element));\n       }\n-      return node;\n     }\n+    return result;\n+  }\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n+  private boolean isDirective(Node n) {\n+    if (n == null) return false;\n+\n+    int nType = n.getType();\n+    return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n+        n.getFirstChild().getType() == Token.STRING &&\n+        ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+  }\n+\n+  Node parseDirectives(Node n) {\n+    boolean parsingDirectives = true;\n+    Node firstDirective = null;\n+    for (Node directive : n.children()) {\n+      if (parsingDirectives) {\n+        if (isDirective(directive)) {\n+          if (firstDirective == null) {\n+            firstDirective = directive;\n+          }\n+          continue;\n+        } else {\n+          parsingDirectives = false;\n+        }\n+      } else {\n+        if (isDirective(directive)) {\n+          errorReporter.warning(\n+              \"Directive \\\"\" + directive.getFirstChild().getString() +\n+              \"\\\" misplaced and ignored in file \" + sourceName,\n+              sourceName, directive.getLineno());\n+        } else {\n+          break;  // non-directive statement begins here\n+        }\n       }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n     }\n-\n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+    if (firstDirective != null) {\n+      Node scope = new Node(Token.SCRIPT);\n+      scope.addChildrenToFront(firstDirective, n.removeChildren());\n+      return scope;\n     }\n+    return n;\n+  }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+  @Override\n+  Node processBlock(Block blockNode) {\n+    return parseDirectives(processGeneric(blockNode));\n+  }\n+\n+  @Override\n+  Node processBreakStatement(BreakStatement statementNode) {\n+    Node node = newNode(Token.BREAK);\n+    if (statementNode.getBreakLabel() != null) {\n+      Node labelName = transform(statementNode.getBreakLabel());\n+      // Change the NAME to LABEL_NAME\n+      labelName.setType(Token.LABEL_NAME);\n+      node.addChildToBack(labelName);\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+  @Override\n+  Node processCatchClause(CatchClause clauseNode) {\n+    AstNode catchVar = clauseNode.getVarName();\n+    Node node = newNode(Token.CATCH, transform(catchVar));\n+    if (clauseNode.getCatchCondition() != null) {\n+      errorReporter.error(\n+          \"Catch clauses are not supported\",\n+          sourceName,\n+          clauseNode.getCatchCondition().getLineno(), \"\", 0);\n     }\n+    node.addChildToBack(transformBlock(clauseNode.getBody()));\n+    return node;\n+  }\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+  @Override\n+  Node processConditionalExpression(ConditionalExpression exprNode) {\n+    return newNode(\n+        Token.HOOK,\n+        transform(exprNode.getTestExpression()),\n+        transform(exprNode.getTrueExpression()),\n+        transform(exprNode.getFalseExpression()));\n+  }\n+\n+  @Override\n+  Node processContinueStatement(ContinueStatement statementNode) {\n+    Node node = newNode(Token.CONTINUE);\n+    if (statementNode.getLabel() != null) {\n+      Node labelName = transform(statementNode.getLabel());\n+      // Change the NAME to LABEL_NAME\n+      labelName.setType(Token.LABEL_NAME);\n+      node.addChildToBack(labelName);\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+  @Override\n+  Node processDoLoop(DoLoop loopNode) {\n+    return newNode(\n+        Token.DO,\n+        transformBlock(loopNode.getBody()),\n+        transform(loopNode.getCondition()));\n+  }\n+\n+  @Override\n+  Node processElementGet(ElementGet getNode) {\n+    return newNode(\n+        Token.GETELEM,\n+        transform(getNode.getTarget()),\n+        transform(getNode.getElement()));\n+  }\n+\n+  @Override\n+  Node processEmptyExpression(EmptyExpression exprNode) {\n+    Node node = newNode(Token.EMPTY);\n+    return node;\n+  }\n+\n+  @Override\n+  Node processExpressionStatement(ExpressionStatement statementNode) {\n+    Node node = newNode(transformTokenType(statementNode.getType()));\n+    node.addChildToBack(transform(statementNode.getExpression()));\n+    return node;\n+  }\n+\n+  @Override\n+  Node processForInLoop(ForInLoop loopNode) {\n+    return newNode(\n+        Token.FOR,\n+        transform(loopNode.getIterator()),\n+        transform(loopNode.getIteratedObject()),\n+        transformBlock(loopNode.getBody()));\n+  }\n+\n+  @Override\n+  Node processForLoop(ForLoop loopNode) {\n+    Node node = newNode(\n+        Token.FOR,\n+        transform(loopNode.getInitializer()),\n+        transform(loopNode.getCondition()),\n+        transform(loopNode.getIncrement()));\n+    node.addChildToBack(transformBlock(loopNode.getBody()));\n+    return node;\n+  }\n+\n+  @Override\n+  Node processFunctionCall(FunctionCall callNode) {\n+    Node node = newNode(transformTokenType(callNode.getType()),\n+                         transform(callNode.getTarget()));\n+    for (AstNode child : callNode.getArguments()) {\n+      node.addChildToBack(transform(child));\n     }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+    if (callNode.getArguments().size() == 0) {\n+      Node lp = newNode(Token.LP);\n+      lp.setLineno(callNode.getLineno());\n+      int lparenCharno = callNode.getTarget().getPosition() +\n+          callNode.getTarget().getLength();\n+      lp.setCharno(position2charno(lparenCharno));\n+      node.addChildToBack(lp);\n     }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+    int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n+    node.setLineno(callNode.getLineno());\n+    node.setCharno(position2charno(leftParamPos));\n+    return node;\n+  }\n+\n+  @Override\n+  Node processFunctionNode(FunctionNode functionNode) {\n+    Name name = functionNode.getFunctionName();\n+    Boolean isUnnamedFunction = false;\n+    if (name == null) {\n+      name = new Name();\n+      name.setIdentifier(\"\");\n+      isUnnamedFunction = true;\n+    }\n+    Node node = newNode(Token.FUNCTION);\n+    Node newName = transform(name);\n+    if (isUnnamedFunction) {\n+      // Old Rhino tagged the empty name node with the line number of the\n+      // declaration.\n+      newName.setLineno(functionNode.getLineno());\n+      // TODO(bowdidge) Mark line number of paren correctly.\n+      // Same problem as below - the left paren might not be on the\n+      // same line as the function keyword.\n+      int lpColumn = functionNode.getAbsolutePosition() +\n+          functionNode.getLength();\n+      newName.setCharno(position2charno(lpColumn));\n     }\n \n-    @Override\n-    Node processForLoop(ForLoop loopNode) {\n-      Node node = newNode(\n-          Token.FOR,\n-          transform(loopNode.getInitializer()),\n-          transform(loopNode.getCondition()),\n-          transform(loopNode.getIncrement()));\n-      node.addChildToBack(transformBlock(loopNode.getBody()));\n-      return node;\n+    node.addChildToBack(newName);\n+    Node lp = newNode(Token.LP);\n+    // The left paren's complicated because it's not represented by an\n+    // AstNode, so there's nothing that has the actual line number that it\n+    // appeared on.  We know the paren has to appear on the same line as the\n+    // function name (or else a semicolon will be inserted.)  If there's no\n+    // function name, assume the paren was on the same line as the function.\n+    // TODO(bowdidge): Mark line number of paren correctly.\n+    int lpLineNumber = name.getLineno();\n+    int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n+    lp.setLineno(lpLineNumber <= 0 ? functionNode.getLineno() : lpLineNumber);\n+    lp.setCharno(position2charno(lparenCharno));\n+    for (AstNode param : functionNode.getParams()) {\n+      lp.addChildToBack(transform(param));\n     }\n+    node.addChildToBack(lp);\n \n-    @Override\n-    Node processFunctionCall(FunctionCall callNode) {\n-      Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n-      for (AstNode child : callNode.getArguments()) {\n-        node.addChildToBack(transform(child));\n-      }\n+    Node bodyNode = transform(functionNode.getBody());\n+    parseDirectives(bodyNode);\n+    node.addChildToBack(bodyNode);\n+    return node;\n+  }\n \n-      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n-      node.setLineno(callNode.getLineno());\n-      node.setCharno(position2charno(leftParamPos));\n-      return node;\n+  @Override\n+  Node processGenExpr(GeneratorExpression node) {\n+    throw new UnsupportedOperationException(\"Generator expressions are not currently supported.\");\n+  }\n+\n+  @Override\n+  Node processIfStatement(IfStatement statementNode) {\n+    Node node = newNode(Token.IF);\n+    node.addChildToBack(transform(statementNode.getCondition()));\n+    node.addChildToBack(transformBlock(statementNode.getThenPart()));\n+    if (statementNode.getElsePart() != null) {\n+      Node elseBranch = new Node(Token.ELSE);\n+      elseBranch.addChildToBack(transformBlock(statementNode.getElsePart()));\n+      node.addChildToBack(elseBranch);\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processFunctionNode(FunctionNode functionNode) {\n-      Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n-      if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n-        isUnnamedFunction = true;\n-      }\n-      Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n-      if (isUnnamedFunction) {\n-        // Old Rhino tagged the empty name node with the line number of the\n-        // declaration.\n-        newName.setLineno(functionNode.getLineno());\n-        // TODO(bowdidge) Mark line number of paren correctly.\n-        // Same problem as below - the left paren might not be on the\n-        // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n-        newName.setCharno(position2charno(lpColumn));\n-      }\n+  @Override\n+  Node processInfixExpression(InfixExpression exprNode) {\n+    return newNode(\n+        transformTokenType(exprNode.getType()),\n+        transform(exprNode.getLeft()),\n+        transform(exprNode.getRight()));\n+  }\n \n-      node.addChildToBack(newName);\n-      Node lp = newNode(Token.LP);\n-      // The left paren's complicated because it's not represented by an\n-      // AstNode, so there's nothing that has the actual line number that it\n-      // appeared on.  We know the paren has to appear on the same line as the\n-      // function name (or else a semicolon will be inserted.)  If there's no\n-      // function name, assume the paren was on the same line as the function.\n-      // TODO(bowdidge): Mark line number of paren correctly.\n-      Name fnName = functionNode.getFunctionName();\n-      if (fnName != null) {\n-        lp.setLineno(fnName.getLineno());\n-      } else {\n-        lp.setLineno(functionNode.getLineno());\n-      }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n+  private Node processJsxElement(MultiLinesComment comment, Node node, String closingString) {\n+    JsxNode jsxNode = new JsxNode();\n+    jsxNode.setJsxContext(true);\n+    jsxNode.setLineno(position2line(node.getPosition()));\n+    jsxNode.setCharno(position2charno(node.getPosition()));\n \n-      lp.setCharno(position2charno(lparenCharno));\n-      for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n-      }\n-      node.addChildToBack(lp);\n+    if (comment != null) {\n+      jsxNode.setJsDocNode(transform(comment));\n+      jsxNode.setLineno(comment.getLineno());\n+      jsxNode.setCharno(position2charno(comment.getPosition()));\n+    }\n \n-      Node bodyNode = transform(functionNode.getBody());\n-      parseDirectives(bodyNode);\n-      node.addChildToBack(bodyNode);\n-     return node;\n+    if (node instanceof XmlString) {\n+      jsxNode.setName(processXmlAttribute(node, jsxNode));\n+      jsxNode.setJsxText(true);\n+    }\n+    else {\n+      jsxNode.setName(processJSXElement(node, jsxNode));\n     }\n \n+    int end = node.getPosition() + node.getLength();\n+    Node childNode = node.getFirstChild();\n+    while (childNode != null && childNode.getPosition() < end) {\n+      if (childNode instanceof XmlString) {\n+        jsxNode.addChildToBack(transform(childNode));\n+      } else if (childNode instanceof XmlElemRef) {\n+        // This represents a JSX expression inside of JSX text.\n+        jsxNode.addChildToBack(processJSXText((XmlElemRef) childNode));\n+      } els\n+\n     @Override\n     Node processIfStatement(IfStatement statementNode) {\n       Node node = newNode(Token.IF);",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}