{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    simplex = shrinkSimplex(comparator);\n                }\n                continue;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n\n            // check convergence\n                return;\n            }\n\n            simplex = shrinkSimplex(comparator);\n\n        }\n\n    }\n    \n    protected RealPointValuePair[] shrinkSimplex(final Comparator<RealPointValuePair> comparator) {\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        for (int i = 1; i < original.length; i++) {\n            final double[] res = new double[original[i].getPoint().length];\n\n            for (int j = 0; j < res.length; j++) {\n                res[j] = contraction * original[0].getPoint()[j] + (1 - contraction) * original[i].getPoint()[j];\n            }\n\n            final RealPointValuePair rp = new RealPointValuePair(res, evaluate(res), false);\n            if (comparator.compare(rp, best) < 0) {\n                simplex[i] = rp;\n            } else {\n                simplex[i] = new RealPointValuePair(res, Double.NaN, false);\n            }\n        }\n        return simplex;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..269e18fde 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -79,9 +79,10 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 if (comparator.compare(reflected, expanded) <= 0) {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    simplex = shrinkSimplex(comparator);\n                 }\n-\n-                return;\n+                continue;\n \n             }\n \n@@ -94,9 +95,32 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 return;\n             }\n \n+            simplex = shrinkSimplex(comparator);\n+\n         }\n \n     }\n+    \n+    protected RealPointValuePair[] shrinkSimplex(final Comparator<RealPointValuePair> comparator) {\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n+\n+        for (int i = 1; i < original.length; i++) {\n+            final double[] res = new double[original[i].getPoint().length];\n+\n+            for (int j = 0; j < res.length; j++) {\n+                res[j] = contraction * original[0].getPoint()[j] + (1 - contraction) * original[i].getPoint()[j];\n+            }\n+\n+            final RealPointValuePair rp = new RealPointValuePair(res, evaluate(res), false);\n+            if (comparator.compare(rp, best) < 0) {\n+                simplex[i] = rp;\n+            } else {\n+                simplex[i] = new RealPointValuePair(res, Double.NaN, false);\n+            }\n+        }\n+        return simplex;\n+    }\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}