{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    int length = partial.size();\n\n    // edge case when there is only a single field\n    if (length == 1) {\n        int newFieldValue = partial.getFieldType(0).getField(iChronology).addWrapField(values[0], valueToAdd);\n        return new int[] { newFieldValue };\n    }\n\n    if (DateTimeUtils.isContiguous(partial)) {\n\n        boolean foundMonthField = false;\n        DurationField monthField = null;\n        int monthIndex = -1;\n        for (int i = 0; i < length; i++) {\n            if (partial.getFieldType(i) instanceof MonthDateTimeFieldType) {\n                foundMonthField = true;\n                monthField = partial.getFieldType(i).getField(iChronology).getDurationField();\n                monthIndex = i;\n                break;\n            }\n        }\n\n        if (foundMonthField) {\n            // if month field is found, directly add valueToAdd to it\n            int newFieldValue = monthField.addWrapField(values[monthIndex], valueToAdd);\n            long instant = 0L;\n            for (int i = 0; i < length; i++) {\n                if (i == monthIndex) {\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, newFieldValue);\n                } else {\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n                }\n            }\n            return iChronology.get(partial, instant);\n        }\n    }\n\n    // otherwise, use the super implementation\n    return super.add(partial, fieldIndex, values, valueToAdd);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..e440ba4e 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,54 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    int length = partial.size();\n+\n+    // edge case when there is only a single field\n+    if (length == 1) {\n+        int newFieldValue = partial.getFieldType(0).getField(iChronology).addWrapField(values[0], valueToAdd);\n+        return new int[] { newFieldValue };\n+    }\n+\n+    if (DateTimeUtils.isContiguous(partial)) {\n+\n+        boolean foundMonthField = false;\n+        DurationField monthField = null;\n+        int monthIndex = -1;\n+        for (int i = 0; i < length; i++) {\n+            if (partial.getFieldType(i) instanceof MonthDateTimeFieldType) {\n+                foundMonthField = true;\n+                monthField = partial.getFieldType(i).getField(iChronology).getDurationField();\n+                monthIndex = i;\n+                break;\n+            }\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n+\n+        if (foundMonthField) {\n+            // if month field is found, directly add valueToAdd to it\n+            int newFieldValue = monthField.addWrapField(values[monthIndex], valueToAdd);\n             long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            for (int i = 0; i < length; i++) {\n+                if (i == monthIndex) {\n+                    instant = partial.getFieldType(i).getField(iChronology).set(instant, newFieldValue);\n+                } else {\n+                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n             return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n     }\n \n+    // otherwise, use the super implementation\n+    return super.add(partial, fieldIndex, values, valueToAdd);\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}