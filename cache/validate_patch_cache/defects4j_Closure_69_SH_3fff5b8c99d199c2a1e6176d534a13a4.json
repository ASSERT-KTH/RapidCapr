{
    "patch": "      ObjectType thisType = functionType.getTypeOfThis();\n      if (thisType.isUnknownType() || thisType.isEmptyType()) {\n        // If there is no defined 'this' type, bail.\n        return;\n      }\n\n      // If we got this far, make sure the first arg matches the 'this' type exactly.\n      Node argList = child.getNext();\n      if (argList == null || !argList.hasChildren()) {\n        return;\n      }\n      Node thisArg = argList.getFirstChild();\n      JSType thisArgType = getJSType(thisArg);\n      if (!thisArgType.isEquivalentTo(thisType)) {\n        report(t, n, EXPLICIT_THIS_TYPE_MISMATCH, thisArgType.toString(), thisType.toString());\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..d58fd7c6 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      ObjectType thisType = functionType.getTypeOfThis();\n+      if (thisType.isUnknownType() || thisType.isEmptyType()) {\n+        // If there is no defined 'this' type, bail.\n+        return;\n+      }\n+\n+      // If we got this far, make sure the first arg matches the 'this' type exactly.\n+      Node argList = child.getNext();\n+      if (argList == null || !argList.hasChildren()) {\n+        return;\n+      }\n+      Node thisArg = argList.getFirstChild();\n+      JSType thisArgType = getJSType(thisArg);\n+      if (!thisArgType.isEquivalentTo(thisType)) {\n+        report(t, n, EXPLICIT_THIS_TYPE_MISMATCH, thisArgType.toString(), thisType.toString());\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}