{
    "patch": "      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        default:\n          break; // add this line\n      }\n      if (parent.getType() == Token.CATCH) {\n          defineCatch(n, parent);\n      }\n      if (n.getType() == Token.LP && parent.getParent() == scope.getRootNode()) {\n        handleFunctionInputs(parent.getParent());\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..4b66fc93 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1456,12 +1456,17 @@ final class TypedScopeCreator implements ScopeCreator {\n           }\n           defineDeclaredFunction(n, parent);\n           break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n+        default:\n+          break; // add this line\n+      }\n+      if (parent.getType() == Token.CATCH) {\n+          defineCatch(n, parent);\n+      }\n+      if (n.getType() == Token.LP && parent.getParent() == scope.getRootNode()) {\n+        handleFunctionInputs(parent.getParent());\n       }\n     }\n ",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}