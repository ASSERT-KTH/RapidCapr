{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    boolean hasSideEffects = false;\n    if (block.hasChildren()) {\n      Preconditions.checkState(block.hasOneChild());\n      Node stmt = block.getFirstChild();\n      if (stmt.isReturn()) {\n        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n      }\n    }\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      // For each named parameter check if a mutable argument use more than one.\n      if (fnParam != null) {\n        // Find all call arguments that match this formal parameter.\n        Node matchingCArg = null;\n        for (Node n = cArg; n != null; n = n.getNext()) {\n          if (isMatchingArgument(n, fnParam)) {\n            if (matchingCArg != null) {\n              // There are multiple call args for this parameter.\n              return CanInlineResult.NO;\n            }\n            matchingCArg = n;\n            if (hasSideEffects && NodeUtil.canBeSideEffected(n)) {\n              return CanInlineResult.NO;\n            }\n          }\n        }\n\n        if (matchingCArg != null && NodeUtil.mayEffectMutableState(matchingCArg, compiler)\n            && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n          return CanInlineResult.NO;\n        }\n\n        // Move to the next name.\n        fnParam = fnParam.getNext();\n      }\n\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match.\n      if (cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }\n\nprivate static boolean isMatchingArgument(Node callArg, Node functionParam) {\n    if (functionParam.isName()) {\n      // Named parameters.\n      return callArg.isName() && functionParam.getString().equals(callArg.getString());\n    } else {\n      if (callArg.isSpread()) {\n        return true;\n      }\n      // Anonymous parameters (i.e. not named).\n      int index = functionParam.getIntProp(Node.FUNCTION_ARGUMENT_POSITION);\n      Preconditions.checkState(index >= 0);\n      return NodeUtil.getArgumentNumber(callArg) == index;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..e47039ea 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,8 +686,7 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n     }\n@@ -726,20 +725,26 @@ class FunctionInjector {\n     while (cArg != null || fnParam != null) {\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n+        // Find all call arguments that match this formal parameter.\n+        Node matchingCArg = null;\n+        for (Node n = cArg; n != null; n = n.getNext()) {\n+          if (isMatchingArgument(n, fnParam)) {\n+            if (matchingCArg != null) {\n+              // There are multiple call args for this parameter.\n+              return CanInlineResult.NO;\n+            }\n+            matchingCArg = n;\n+            if (hasSideEffects && NodeUtil.canBeSideEffected(n)) {\n+              return CanInlineResult.NO;\n+            }\n           }\n         }\n \n+        if (matchingCArg != null && NodeUtil.mayEffectMutableState(matchingCArg, compiler)\n+            && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n+          return CanInlineResult.NO;\n+        }\n+\n         // Move to the next name.\n         fnParam = fnParam.getNext();\n       }\n@@ -757,6 +762,19 @@ class FunctionInjector {\n     return CanInlineResult.YES;\n   }\n \n+private static boolean isMatchingArgument(Node callArg, Node functionParam) {\n+    if (functionParam.isName()) {\n+      // Named parameters.\n+      return callArg.isName() && functionParam.getString().equals(callArg.getString());\n+    } else {\n+      if (callArg.isSpread()) {\n+        return true;\n+      }\n+      // Anonymous parameters (i.e. not named).\n+      int index = functionParam.getIntProp(Node.FUNCTION_ARGUMENT_POSITION);\n+      Preconditions.checkState(index >= 0);\n+      return NodeUtil.getArgumentNumber(callArg) == index;\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}