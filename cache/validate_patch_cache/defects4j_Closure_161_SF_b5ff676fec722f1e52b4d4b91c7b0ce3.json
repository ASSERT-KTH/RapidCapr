{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  Node parent = n.getParent();\n  if (left.isNull() || right == null) {\n    return n;\n  }\n  // If GETPROP/GETELEM is used as assignment target the array literal is\n  // acting as a temporary we can't fold it here:\n  //    \"[][0] += 1\"\n  if (!NodeUtil.isAssignmentOp(parent)) {\n    if (right.getType() != Token.NUMBER && right.getType() != Token.STRING) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n    int intIndex = -1;\n    String propName = null;\n    if (right.getType() == Token.NUMBER) {\n      double index = right.getDouble();\n      intIndex = (int) index;\n      if (intIndex != index || intIndex < 0) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n      }\n    } else { // Token.STRING\n      // Test if property name can be converted to an integer index.\n      propName = right.getString();\n      if (!NodeUtil.isNumericResult(propName)) {\n        // The name cannot be an index.\n        return n;\n      }\n      double index = Double.parseDouble(propName);\n      intIndex = (int) index;\n      if (intIndex != index || intIndex < 0) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n      }\n      // In case the property is a number in octal notation.\n      if(propName.charAt(0) == '0' && propName.length() > 1) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n      }\n    }\n\n    Node elem = NodeUtil.getPropAccessNodeAtIndex(left, intIndex, propName);\n    if (elem == null) {\n      // Return a new undefined node if the element does not exist\n      Node undefined = NodeUtil.newUndefinedNode(parent);\n      parent.replaceChild(n, undefined);\n      reportCodeChange();\n      return undefined;\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem.detachFromParent());\n    reportCodeChange();\n    return elem;\n  }\n  return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..0d9a6c13 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1275,51 +1275,65 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-\n-    if (right.getType() != Token.NUMBER) {\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+  Node parent = n.getParent();\n+  if (left.isNull() || right == null) {\n+    return n;\n+  }\n+  // If GETPROP/GETELEM is used as assignment target the array literal is\n+  // acting as a temporary we can't fold it here:\n+  //    \"[][0] += 1\"\n+  if (!NodeUtil.isAssignmentOp(parent)) {\n+    if (right.getType() != Token.NUMBER && right.getType() != Token.STRING) {\n       // Sometimes people like to use complex expressions to index into\n       // arrays, or strings to index into array methods.\n       return n;\n     }\n-\n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n-\n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    Node elem = left.getFirstChild();\n-    for (int i = 0; elem != null && i < intIndex; i++) {\n-      elem = elem.getNext();\n+    int intIndex = -1;\n+    String propName = null;\n+    if (right.getType() == Token.NUMBER) {\n+      double index = right.getDouble();\n+      intIndex = (int) index;\n+      if (intIndex != index || intIndex < 0) {\n+        error(INVALID_GETELEM_INDEX_ERROR, right);\n+        return n;\n+      }\n+    } else { // Token.STRING\n+      // Test if property name can be converted to an integer index.\n+      propName = right.getString();\n+      if (!NodeUtil.isNumericResult(propName)) {\n+        // The name cannot be an index.\n+        return n;\n+      }\n+      double index = Double.parseDouble(propName);\n+      intIndex = (int) index;\n+      if (intIndex != index || intIndex < 0) {\n+        error(INVALID_GETELEM_INDEX_ERROR, right);\n+        return n;\n+      }\n+      // In case the property is a number in octal notation.\n+      if(propName.charAt(0) == '0' && propName.length() > 1) {\n+        error(INVALID_GETELEM_INDEX_ERROR, right);\n+        return n;\n+      }\n     }\n \n+    Node elem = NodeUtil.getPropAccessNodeAtIndex(left, intIndex, propName);\n     if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    if (elem.getType() == Token.EMPTY) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n+      // Return a new undefined node if the element does not exist\n+      Node undefined = NodeUtil.newUndefinedNode(parent);\n+      parent.replaceChild(n, undefined);\n+      reportCodeChange();\n+      return undefined;\n     }\n \n     // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n+    n.getParent().replaceChild(n, elem.detachFromParent());\n     reportCodeChange();\n     return elem;\n   }\n+  return n;\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}