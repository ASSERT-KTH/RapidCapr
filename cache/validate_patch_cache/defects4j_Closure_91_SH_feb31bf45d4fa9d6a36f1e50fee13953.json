{
    "patch": "      Node parentParent = parent.getParent();\n      if (NodeUtil.isPrototypeProperty(parentParent)) {\n        return false;\n      } else if (jsDoc != null && jsDoc.isConstructor()) {\n          return !NodeUtil.isNew(parent);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..b3046c06 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,11 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node parentParent = parent.getParent();\n+      if (NodeUtil.isPrototypeProperty(parentParent)) {\n+        return false;\n+      } else if (jsDoc != null && jsDoc.isConstructor()) {\n+          return !NodeUtil.isNew(parent);\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}