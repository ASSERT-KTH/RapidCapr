{
    "patch": "import org.apache.commons.math3.util.MathUtils;\nimport org.apache.commons.math3.util.ArithmeticUtils;\n\npublic class MyMath {\n\n    public static double regularizedGamma(double a, double x) {\n        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n            return Double.NaN;\n        }\n        if (x == 0.0 || x == Double.POSITIVE_INFINITY) {\n            return 1.0;\n        }\n        if (a > 200) {\n            return regularizedGamma1(a, x);\n        }\n        double eps = 10e-15;\n        double gln = Gamma.logGamma(a);\n        double ap = a;\n        double del = 1.0 / a;\n        double sum = del;\n        for (int n = 1; n <= 100; n++) {\n            ++ap;\n            del *= x / ap;\n            sum += del;\n            if (Math.abs(del) < Math.abs(sum) * eps) {\n                return sum * Math.exp(-x + a * Math.log(x) - gln);\n            }\n        }\n        throw new ArithmeticException(\"Series did not converge\");\n    }\n    \n    public static double regularizedGamma1(double a, double x) {\n        double gln = Gamma.logGamma(a);\n        double a0 = 0;\n        double a1 = 1;\n        double b0 = 1;\n        double b1 = x;\n        double fac = 1;\n        double g = b1 / a1;\n        double gold = Double.POSITIVE_INFINITY;\n        double an, ana;\n        for (int i = 1; i <= 100; i++) {\n            an = i;\n            ana = an - a;\n            a0 = (a1 + a0 * ana) * fac;\n            b0 = (b1 + b0 * ana) * fac;\n            an = i + a;\n            a1 = b0 / an;\n            b1 = g * a1 + b1;\n            if (Math.abs(a1) + Double.MIN_VALUE == Double.MIN_VALUE) {\n                a1 = Double.MIN_VALUE;\n            }\n            if (Math.abs(g - gold) < gold * 10e-15) {\n                return Math.exp(-x + a * Math.log(x) - gln) * (a0 * g / b0);\n            }\n            gold = g;\n            g = b1 / a1;\n            fac = i;\n            if (i % 50 == 0) {\n                a0 /= 10e50;\n                b0 /= 10e50;\n                a1 /= 10e50;\n                b1 /= 10e50;\n                fac /= 10e50;\n            }\n        }\n        throw new ArithmeticException(\"Continued fraction did not converge\");\n    }\n    \n    public static void main(String[] args) {\n        double a = 2.0;\n        double x = 1.0;\n        double expected = 0.264241117657115356851;\n        double actualP = regularizedGamma(a, x);\n        System.out.println(actualP);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..5d1965847 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,83 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+import org.apache.commons.math3.util.MathUtils;\n+import org.apache.commons.math3.util.ArithmeticUtils;\n+\n+public class MyMath {\n+\n+    public static double regularizedGamma(double a, double x) {\n+        if (Double.isNaN(a) || Double.isNaN(x) || a <= 0.0 || x < 0.0) {\n+            return Double.NaN;\n+        }\n+        if (x == 0.0 || x == Double.POSITIVE_INFINITY) {\n+            return 1.0;\n+        }\n+        if (a > 200) {\n+            return regularizedGamma1(a, x);\n+        }\n+        double eps = 10e-15;\n+        double gln = Gamma.logGamma(a);\n+        double ap = a;\n+        double del = 1.0 / a;\n+        double sum = del;\n+        for (int n = 1; n <= 100; n++) {\n+            ++ap;\n+            del *= x / ap;\n+            sum += del;\n+            if (Math.abs(del) < Math.abs(sum) * eps) {\n+                return sum * Math.exp(-x + a * Math.log(x) - gln);\n+            }\n+        }\n+        throw new ArithmeticException(\"Series did not converge\");\n+    }\n+    \n+    public static double regularizedGamma1(double a, double x) {\n+        double gln = Gamma.logGamma(a);\n+        double a0 = 0;\n+        double a1 = 1;\n+        double b0 = 1;\n+        double b1 = x;\n+        double fac = 1;\n+        double g = b1 / a1;\n+        double gold = Double.POSITIVE_INFINITY;\n+        double an, ana;\n+        for (int i = 1; i <= 100; i++) {\n+            an = i;\n+            ana = an - a;\n+            a0 = (a1 + a0 * ana) * fac;\n+            b0 = (b1 + b0 * ana) * fac;\n+            an = i + a;\n+            a1 = b0 / an;\n+            b1 = g * a1 + b1;\n+            if (Math.abs(a1) + Double.MIN_VALUE == Double.MIN_VALUE) {\n+                a1 = Double.MIN_VALUE;\n+            }\n+            if (Math.abs(g - gold) < gold * 10e-15) {\n+                return Math.exp(-x + a * Math.log(x) - gln) * (a0 * g / b0);\n+            }\n+            gold = g;\n+            g = b1 / a1;\n+            fac = i;\n+            if (i % 50 == 0) {\n+                a0 /= 10e50;\n+                b0 /= 10e50;\n+                a1 /= 10e50;\n+                b1 /= 10e50;\n+                fac /= 10e50;\n+            }\n+        }\n+        throw new ArithmeticException(\"Continued fraction did not converge\");\n+    }\n+    \n+    public static void main(String[] args) {\n+        double a = 2.0;\n+        double x = 1.0;\n+        double expected = 0.264241117657115356851;\n+        double actualP = regularizedGamma(a, x);\n+        System.out.println(actualP);\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}