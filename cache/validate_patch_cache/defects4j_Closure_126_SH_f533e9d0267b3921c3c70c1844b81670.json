{
    "patch": "      Node finallyBlock = n.getLastChild();\n      if (finallyBlock != null) {\n        tryMinimizeExits(finallyBlock, exitType, labelName);\n      }\n    }\n\n    // Just a 'label'.\n    if (n.isLabel()) {\n      Node labelBlock = n.getLastChild();\n      tryMinimizeExits(labelBlock, exitType, labelName);\n    }\n\n    // TODO(johnlenz): The last case of SWITCH statement?\n\n    // The rest assumes a block with at least one child, bail on anything else.\n    if (!n.isBlock() || n.getLastChild() == null) {\n      return;\n    }\n\n    // Multiple if-exits can be converted in a single pass.\n    // Convert \"if (blah) break;  if (blah2) break; other_stmt;\" to\n    // become \"if (blah); else { if (blah2); else { other_stmt; } }\"\n    // which will get converted to \"if (!blah && !blah2) { other_stmt; }\".\n    for (Node c : n.children()) {\n\n      // An 'if' block to process below.\n      if (c.isIf()) {\n        Node ifTree = c;\n        Node trueBlock, falseBlock;\n\n        // First, the true condition block.\n        trueBlock = ifTree.getFirstChild().getNext();\n        falseBlock = trueBlock.getNext();\n        tryMinimizeIfBlockExits(trueBlock, falseBlock,\n            ifTree, exitType, labelName);\n\n        // Now the else block.\n        // The if blocks may have changed, get them again.\n        trueBlock = ifTree.getFirstChild().getNext();\n        falseBlock = trueBlock.getNext();\n        if (falseBlock != null) {\n          tryMinimizeIfBlockExits(falseBlock, trueBlock,\n              ifTree, exitType, labelName);\n        }\n      }\n\n      if (c == n.getLastChild()) {\n        break;\n      }\n    }\n\n    // Now try to minimize the exits of the last child, if it is removed\n    // look at what has become the last child.\n    for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {\n      tryMinimizeExits(c, exitType, labelName);\n      // If the node is still the last child, we are done.\n      if (c == n.getLastChild()) {\n        break;\n      }\n    }\n\n    // Move to the next unprocessed node;\n    Node nextNode = n.getNext();\n    if (nextNode != null) {\n      tryMinimizeExits(nextNode, exitType, labelName);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..68f561be 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,8 +138,8 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n-      if (NodeUtil.hasFinally(n)) {\n-        Node finallyBlock = n.getLastChild();\n+      Node finallyBlock = n.getLastChild();\n+      if (finallyBlock != null) {\n         tryMinimizeExits(finallyBlock, exitType, labelName);\n       }\n     }\n@@ -198,6 +198,67 @@ class MinimizeExitPoints\n         break;\n       }\n     }\n+\n+    // Move to the next unprocessed node;\n+    Node nextNode = n.getNext();\n+    if (nextNode != null) {\n+      tryMinimizeExits(nextNode, exitType, labelName);\n+    }\n+\n+    // Just a 'label'.\n+    if (n.isLabel()) {\n+      Node labelBlock = n.getLastChild();\n+      tryMinimizeExits(labelBlock, exitType, labelName);\n+    }\n+\n+    // TODO(johnlenz): The last case of SWITCH statement?\n+\n+    // The rest assumes a block with at least one child, bail on anything else.\n+    if (!n.isBlock() || n.getLastChild() == null) {\n+      return;\n+    }\n+\n+    // Multiple if-exits can be converted in a single pass.\n+    // Convert \"if (blah) break;  if (blah2) break; other_stmt;\" to\n+    // become \"if (blah); else { if (blah2); else { other_stmt; } }\"\n+    // which will get converted to \"if (!blah && !blah2) { other_stmt; }\".\n+    for (Node c : n.children()) {\n+\n+      // An 'if' block to process below.\n+      if (c.isIf()) {\n+        Node ifTree = c;\n+        Node trueBlock, falseBlock;\n+\n+        // First, the true condition block.\n+        trueBlock = ifTree.getFirstChild().getNext();\n+        falseBlock = trueBlock.getNext();\n+        tryMinimizeIfBlockExits(trueBlock, falseBlock,\n+            ifTree, exitType, labelName);\n+\n+        // Now the else block.\n+        // The if blocks may have changed, get them again.\n+        trueBlock = ifTree.getFirstChild().getNext();\n+        falseBlock = trueBlock.getNext();\n+        if (falseBlock != null) {\n+          tryMinimizeIfBlockExits(falseBlock, trueBlock,\n+              ifTree, exitType, labelName);\n+        }\n+      }\n+\n+      if (c == n.getLastChild()) {\n+        break;\n+      }\n+    }\n+\n+    // Now try to minimize the exits of the last child, if it is removed\n+    // look at what has become the last child.\n+    for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {\n+      tryMinimizeExits(c, exitType, labelName);\n+      // If the node is still the last child, we are done.\n+      if (c == n.getLastChild()) {\n+        break;\n+      }\n+    }\n   }\n \n   /**",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}