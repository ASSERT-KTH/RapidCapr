{
    "patch": "JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> enclosingScope) {\n  boolean implicitProtoCycle = detectImplicitPrototypeCycle();\n  \n  if (implicitProtoCycle) {\n    handleTypeCycle(errorReporter);\n  }\n  \n  boolean resolved = resolveViaRegistry(errorReporter, enclosingScope);\n  boolean finishedPropertyContinuations = false;\n  \n  if (!resolved && isResolved()) {\n    resolved = true;\n    finishedPropertyContinuations = true;\n  }\n  \n  if (resolved) {\n    super.resolveInternal(errorReporter, enclosingScope);\n    if (!finishedPropertyContinuations) {\n      finishPropertyContinuations();\n    }\n    return registry.isLastGeneration() ? getReferencedType() : this;\n  }\n  \n  resolveViaProperties(errorReporter, enclosingScope);\n  if (detectImplicitPrototypeCycle()) {\n    handleTypeCycle(errorReporter);\n  }\n  super.resolveInternal(errorReporter, enclosingScope);\n  if (!isResolved()) {\n    return super.resolveInternal(errorReporter, enclosingScope);\n  }\n  finishPropertyContinuations();\n  return registry.isLastGeneration() ? getReferencedType() : this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..db4a0e66 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,40 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n+JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> enclosingScope) {\n+  boolean implicitProtoCycle = detectImplicitPrototypeCycle();\n+  \n+  if (implicitProtoCycle) {\n+    handleTypeCycle(errorReporter);\n+  }\n+  \n+  boolean resolved = resolveViaRegistry(errorReporter, enclosingScope);\n+  boolean finishedPropertyContinuations = false;\n+  \n+  if (!resolved && isResolved()) {\n+    resolved = true;\n+    finishedPropertyContinuations = true;\n+  }\n+  \n+  if (resolved) {\n+    super.resolveInternal(errorReporter, enclosingScope);\n+    if (!finishedPropertyContinuations) {\n       finishPropertyContinuations();\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n   }\n+  \n+  resolveViaProperties(errorReporter, enclosingScope);\n+  if (detectImplicitPrototypeCycle()) {\n+    handleTypeCycle(errorReporter);\n+  }\n+  super.resolveInternal(errorReporter, enclosingScope);\n+  if (!isResolved()) {\n+    return super.resolveInternal(errorReporter, enclosingScope);\n+  }\n+  finishPropertyContinuations();\n+  return registry.isLastGeneration() ? getReferencedType() : this;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "junit.framework.AssertionFailedError: Expected exactly one warning or error Errors:",
    "test_result": "FAIL"
}