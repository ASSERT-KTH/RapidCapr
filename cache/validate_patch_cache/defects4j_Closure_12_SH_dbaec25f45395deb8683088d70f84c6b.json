{
    "patch": "private Set<String> functionsAndVariables(String input) {\n    Set<String> result = new HashSet<>();\n    String[] lines = input.split(\"\\n\");\n    for (String line : lines) {\n        String trimmedLine = line.trim();\n        if (!trimmedLine.isEmpty()) {\n            Matcher matcher = FUNCTION_DECLARATION.matcher(trimmedLine);\n            if (matcher.find()) {\n                result.add(matcher.group(1));\n            } else {\n                int indexOfEquals = trimmedLine.indexOf(\"=\");\n                if (indexOfEquals >= 0) {\n                    result.add(trimmedLine.substring(0, indexOfEquals).trim().replaceAll(\",\", \"\"));\n                }\n            }\n        }\n    }\n    return result;\n}\n\npublic Set<String> getGlobalFunctions(String input) {\n    Set<String> functionNames = new HashSet<>();\n    String[] lines = input.split(\"\\n\");\n    for (String line : lines) {\n        line = line.trim();\n        if (line.startsWith(\"function\")) {\n            functionNames.add(line.split(\" \")[1].split(\"\\\\(\")[0]);\n        } else if (line.startsWith(\"var\")\n                || line.startsWith(\"let\")\n                || line.startsWith(\"const\")) {\n            Set<String> variables = functionsAndVariables(line.substring(line.indexOf(\" \") + 1));\n            for (String variable : variables) {\n                if (variable.length() > 0) {\n                    functionNames.add(variable);\n                }\n            }\n        }\n    }\n    return functionNames;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..5836ae1d 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,6 +157,46 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n+private Set<String> functionsAndVariables(String input) {\n+    Set<String> result = new HashSet<>();\n+    String[] lines = input.split(\"\\n\");\n+    for (String line : lines) {\n+        String trimmedLine = line.trim();\n+        if (!trimmedLine.isEmpty()) {\n+            Matcher matcher = FUNCTION_DECLARATION.matcher(trimmedLine);\n+            if (matcher.find()) {\n+                result.add(matcher.group(1));\n+            } else {\n+                int indexOfEquals = trimmedLine.indexOf(\"=\");\n+                if (indexOfEquals >= 0) {\n+                    result.add(trimmedLine.substring(0, indexOfEquals).trim().replaceAll(\",\", \"\"));\n+                }\n+            }\n+        }\n+    }\n+    return result;\n+}\n+\n+public Set<String> getGlobalFunctions(String input) {\n+    Set<String> functionNames = new HashSet<>();\n+    String[] lines = input.split(\"\\n\");\n+    for (String line : lines) {\n+        line = line.trim();\n+        if (line.startsWith(\"function\")) {\n+            functionNames.add(line.split(\" \")[1].split(\"\\\\(\")[0]);\n+        } else if (line.startsWith(\"var\")\n+                || line.startsWith(\"let\")\n+                || line.startsWith(\"const\")) {\n+            Set<String> variables = functionsAndVariables(line.substring(line.indexOf(\" \") + 1));\n+            for (String variable : variables) {\n+                if (variable.length() > 0) {\n+                    functionNames.add(variable);\n+                }\n+            }\n+        }\n+    }\n+    return functionNames;\n+}\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}