{
    "patch": "public Line revert() {\n    BigDecimal zeroX = BigDecimal.ZERO;\n    BigDecimal zeroY = BigDecimal.ZERO;\n    BigDecimal directionX = direction.getX();\n    BigDecimal directionY = direction.getY();\n    BigDecimal revertedDirectionX = zeroX.subtract(directionX);\n    BigDecimal revertedDirectionY = zeroY.subtract(directionY);\n    final Line reverted = new Line(new Point(zeroX, zeroY), new Point(revertedDirectionX, revertedDirectionY));\n    return reverted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..65d4a9e06 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,16 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+public Line revert() {\n+    BigDecimal zeroX = BigDecimal.ZERO;\n+    BigDecimal zeroY = BigDecimal.ZERO;\n+    BigDecimal directionX = direction.getX();\n+    BigDecimal directionY = direction.getY();\n+    BigDecimal revertedDirectionX = zeroX.subtract(directionX);\n+    BigDecimal revertedDirectionY = zeroY.subtract(directionY);\n+    final Line reverted = new Line(new Point(zeroX, zeroY), new Point(revertedDirectionX, revertedDirectionY));\n+    return reverted;\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}