{
    "patch": "public static List<Integer> parse_nested_parens(String paren_string) {\n    List<Integer> result = new ArrayList<Integer>();\n\n    String[] paren_groups = paren_string.split(\" \");\n    for (String paren_group : paren_groups) {\n        Stack<Character> stack = new Stack<Character>();\n        int max_depth = 0;\n        boolean valid = true;\n\n        for (char c : paren_group.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n                max_depth = Math.max(max_depth, stack.size());\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    vali",
    "patch_diff": "diff --git a/src/main/java/humaneval/buggy/PARSE_NESTED_PARENS.java b/src/main/java/humaneval/buggy/PARSE_NESTED_PARENS.java\nindex 6bc914f..aa64700 100644\n--- a/src/main/java/humaneval/buggy/PARSE_NESTED_PARENS.java\n+++ b/src/main/java/humaneval/buggy/PARSE_NESTED_PARENS.java\n@@ -4,22 +4,20 @@ import java.util.ArrayList;\n import java.util.List;\n \n public class PARSE_NESTED_PARENS {\n-    public static List<Integer> parse_nested_parens(String paren_string) {\n-        String[] paren_groups = paren_string.split(\" \");\n-        List<Integer> result = new ArrayList<Integer>();\n+public static List<Integer> parse_nested_parens(String paren_string) {\n+    List<Integer> result = new ArrayList<Integer>();\n \n-        for (String paren_group : paren_groups) {\n-            int depth = 0;\n-            int max_depth = 0;\n-            for (char c : paren_group.toCharArray()){\n-                if (c == '('){\n-                    depth += 1;\n-                    max_depth = Math.max(depth, max_depth);\n-                }\n-            }\n-            result.add(max_depth);\n-        }\n+    String[] paren_groups = paren_string.split(\" \");\n+    for (String paren_group : paren_groups) {\n+        Stack<Character> stack = new Stack<Character>();\n+        int max_depth = 0;\n+        boolean valid = true;\n \n-        return result;\n-    }\n+        for (char c : paren_group.toCharArray()) {\n+            if (c == '(') {\n+                stack.push(c);\n+                max_depth = Math.max(max_depth, stack.size());\n+            } else if (c == ')') {\n+                if (stack.isEmpty()) {\n+                    vali\n }",
    "result_reason": " /tmp/humaneval-PARSE_NESTED_PARENS/src/main/java/humaneval/buggy/PARSE_NESTED_PARENS.java:[22,21] not a statement",
    "test_result": "ERROR"
}