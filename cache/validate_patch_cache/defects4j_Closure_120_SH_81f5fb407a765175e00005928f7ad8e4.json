{
    "patch": "      boolean isFirstAssignmentInLifetime = true;\n      for (int i = 0; i < size; i++) {\n        if (references.get(i).isAssignment()) {\n          if (!isFirstAssignmentInLifetime) {\n            return false;\n          } else {\n            isFirstAssignmentInLifetime = false;\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..0d1dfd43 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,16 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      boolean isFirstAssignmentInLifetime = true;\n+      for (int i = 0; i < size; i++) {\n+        if (references.get(i).isAssignment()) {\n+          if (!isFirstAssignmentInLifetime) {\n+            return false;\n+          } else {\n+            isFirstAssignmentInLifetime = false;\n+          }\n+        }\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}