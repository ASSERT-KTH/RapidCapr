{
    "patch": "private boolean isInlinableObject(List<Reference> refs) {\n  for (Reference ref : refs) {\n    Node name = ref.getNode();\n    Node parent = ref.getParent();\n    Node gramps = ref.getGrandparent();\n\n    if (parent.isGetProp()) {\n      Preconditions.checkState(parent.getFirstChild() == name);\n      if (gramps.isCall()\n          && gramps.getFirstChild() == parent) {\n        return false;\n      }\n      if (!isObjectLiteralDeclaredOnParent(gramps)) {\n        return false;\n      }\n    } else {\n      if (!isVarOrAssignExprLhs(name)) {\n        return false;\n      }\n      Node val = ref.getAssignedValue();\n      if (val == null || !val.isObjectLit()) {\n        return false;\n      }\n    }\n    if (!isObjectLiteralWellFormed(refs, ref, name, parent)) {\n      return false;\n    }\n    if (selfReferenceDetected(refs, ref, name, parent)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nprivate static boolean isObjectLiteralDeclaredOnParent(Node gramps) {\n  if (!gramps.isExprResult()) {\n    return false;\n  }\n  Node greatgramps = gramps.getParent();\n  return greatgramps.isScript() || greatgramps.isBlock();\n}\n\nprivate static boolean isObjectLiteralWellFormed(List<Reference> refs,\n                                                 Reference ref,\n                                                 Node name,\n                                                 Node parent) {\n  if (!parent.isAssign() || !parent.getFirstChild().equals(name)) {\n    return true;\n  }\n  Node val = parent.getLastChild();\n  if (val != null && val.isObjectLit()) {\n    return true;\n  }\n  // if the object literal is assigned to a variable after its declaration,\n  // check whether the object's properties are all defined in one place\n  for (Reference r : refs) {\n    Node n = r.getNode();\n    if (n.isGetProp() && name.matchesQualifiedName(n.getFirstChild())) {\n      Node nParent = r.getParent();\n      if (nParent.isAssign()) {\n        Node nVal = nParent.getLastChild();\n        if (nVal != null && (nVal.isObjectLit() || nVal.isQualifiedName())) {\n          return nVal.isObjectLit() || canBeMerged(val, nVal, refs);\n        }\n      }\n    }\n  }\n  return false;\n}\n\nprivate static boolean canBeMerged(Node val1, Node val2, List<Reference> refs) {\n  if (val1.isObjectLit() && val2.isObjectLit() &&\n      val1.getNumberOfChildren() != val2.getNumberOfChildren()) {\n    return false;\n  }\n  for (Node key1 = val1.getFirstChild(); key1 != null; key1 = key1.getNext()) {\n    boolean found = false;\n    for (Node key2 = val2.getFirstChild(); key2 != null; key2 = key2.getNext()) {\n      if (key1.isString() && key1.getString().equals(key2.getString())) {\n        if (key1.getFirstChild() != null && key2.getFirstChild() != null) {\n          found = canBeMerged(key1.getFirstChild(), key2.getFirstChild(), refs);\n        } else {\n          found = true;\n        }\n        break;\n      } else if (key1.isMemberFunctionDef() && key2.isMemberFunctionDef()) {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      return false;\n    }\n  }\n  updateReferences(refs, val1, val2);\n  return true;\n}\n\nprivate static void updateReferences(List<Reference> refs, Node val1, Node val2) {\n  for (Reference ref : refs) {\n    Node refParent = ref.getParent();\n    Node refVal = ref.getAssignedValue();\n    if (refVal == val1) {\n      ref.replaceChild(refVal, val2.cloneTree());\n    } else if (refVal != null && refParent.isGetProp() &&\n               refVal.isQualifiedName() &&\n               refVal.matchesQualifiedName(refParent.getFirstChild())) {\n      ref.replaceChild(refVal, val2.cloneTree());\n    }\n  }\n}\n\nprivate static boolean selfReferenceDetected(List<Reference> refs,\n                                              Reference ref,\n                                              Node name,\n                                              Node parent) {\n  // Check if childVal is the parent of any of the passed in\n  // references, as that is how self-referential assignments\n  // will happen.\n  for (Node child = parent; child != null; child = child.getFirstChild()) {\n    if (child.isFunction()) {\n      // In case of a function expression, assume that self-references\n      // are OK.\n      if (parent.getLastChild() != child && !parent.isAssign()) {\n        continue;\n      }\n    }\n    for (Reference t : refs) {\n      Node refNode = t.getParent();\n      while (!NodeUtil.isStatementBlock(refNode)) {\n        if (refNode == child) {\n          // There's a self-referential assignment\n          if (!ref.getNode().isGetProp()) {\n            return true;\n          }\n          for (; refNode != null; refNode = refNode.getParent()) {\n            if (refNode.isFunction()) {\n              return true;\n            }\n          }\n        }\n        refNode = refNode.getParent();\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..ebab0427 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,92 +152,153 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      for (Reference ref : refs) {\n-        Node name = ref.getNode();\n-        Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n-\n-        // Ignore indirect references, like x.y (except x.y(), since\n-        // the function referenced by y might reference 'this').\n-        //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n+private boolean isInlinableObject(List<Reference> refs) {\n+  for (Reference ref : refs) {\n+    Node name = ref.getNode();\n+    Node parent = ref.getParent();\n+    Node gramps = ref.getGrandparent();\n+\n+    if (parent.isGetProp()) {\n+      Preconditions.checkState(parent.getFirstChild() == name);\n+      if (gramps.isCall()\n+          && gramps.getFirstChild() == parent) {\n+        return false;\n+      }\n+      if (!isObjectLiteralDeclaredOnParent(gramps)) {\n+        return false;\n+      }\n+    } else {\n+      if (!isVarOrAssignExprLhs(name)) {\n+        return false;\n+      }\n+      Node val = ref.getAssignedValue();\n+      if (val == null || !val.isObjectLit()) {\n+        return false;\n+      }\n+    }\n+    if (!isObjectLiteralWellFormed(refs, ref, name, parent)) {\n+      return false;\n+    }\n+    if (selfReferenceDetected(refs, ref, name, parent)) {\n+      return false;\n+    }\n+  }\n+  return true;\n+}\n \n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          continue;\n-        }\n+private static boolean isObjectLiteralDeclaredOnParent(Node gramps) {\n+  if (!gramps.isExprResult()) {\n+    return false;\n+  }\n+  Node greatgramps = gramps.getParent();\n+  return greatgramps.isScript() || greatgramps.isBlock();\n+}\n \n-        // Only rewrite VAR declarations or simple assignment statements\n-        if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n+private static boolean isObjectLiteralWellFormed(List<Reference> refs,\n+                                                 Reference ref,\n+                                                 Node name,\n+                                                 Node parent) {\n+  if (!parent.isAssign() || !parent.getFirstChild().equals(name)) {\n+    return true;\n+  }\n+  Node val = parent.getLastChild();\n+  if (val != null && val.isObjectLit()) {\n+    return true;\n+  }\n+  // if the object literal is assigned to a variable after its declaration,\n+  // check whether the object's properties are all defined in one place\n+  for (Reference r : refs) {\n+    Node n = r.getNode();\n+    if (n.isGetProp() && name.matchesQualifiedName(n.getFirstChild())) {\n+      Node nParent = r.getParent();\n+      if (nParent.isAssign()) {\n+        Node nVal = nParent.getLastChild();\n+        if (nVal != null && (nVal.isObjectLit() || nVal.isQualifiedName())) {\n+          return nVal.isObjectLit() || canBeMerged(val, nVal, refs);\n         }\n+      }\n+    }\n+  }\n+  return false;\n+}\n \n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n-          continue;\n+private static boolean canBeMerged(Node val1, Node val2, List<Reference> refs) {\n+  if (val1.isObjectLit() && val2.isObjectLit() &&\n+      val1.getNumberOfChildren() != val2.getNumberOfChildren()) {\n+    return false;\n+  }\n+  for (Node key1 = val1.getFirstChild(); key1 != null; key1 = key1.getNext()) {\n+    boolean found = false;\n+    for (Node key2 = val2.getFirstChild(); key2 != null; key2 = key2.getNext()) {\n+      if (key1.isString() && key1.getString().equals(key2.getString())) {\n+        if (key1.getFirstChild() != null && key2.getFirstChild() != null) {\n+          found = canBeMerged(key1.getFirstChild(), key2.getFirstChild(), refs);\n+        } else {\n+          found = true;\n         }\n+        break;\n+      } else if (key1.isMemberFunctionDef() && key2.isMemberFunctionDef()) {\n+        found = true;\n+        break;\n+      }\n+    }\n+    if (!found) {\n+      return false;\n+    }\n+  }\n+  updateReferences(refs, val1, val2);\n+  return true;\n+}\n \n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n-          return false;\n-        }\n+private static void updateReferences(List<Reference> refs, Node val1, Node val2) {\n+  for (Reference ref : refs) {\n+    Node refParent = ref.getParent();\n+    Node refVal = ref.getAssignedValue();\n+    if (refVal == val1) {\n+      ref.replaceChild(refVal, val2.cloneTree());\n+    } else if (refVal != null && refParent.isGetProp() &&\n+               refVal.isQualifiedName() &&\n+               refVal.matchesQualifiedName(refParent.getFirstChild())) {\n+      ref.replaceChild(refVal, val2.cloneTree());\n+    }\n+  }\n+}\n \n-        // Make sure that the value is not self-refential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n-            return false;\n+private static boolean selfReferenceDetected(List<Reference> refs,\n+                                              Reference ref,\n+                                              Node name,\n+                                              Node parent) {\n+  // Check if childVal is the parent of any of the passed in\n+  // references, as that is how self-referential assignments\n+  // will happen.\n+  for (Node child = parent; child != null; child = child.getFirstChild()) {\n+    if (child.isFunction()) {\n+      // In case of a function expression, assume that self-references\n+      // are OK.\n+      if (parent.getLastChild() != child && !parent.isAssign()) {\n+        continue;\n+      }\n+    }\n+    for (Reference t : refs) {\n+      Node refNode = t.getParent();\n+      while (!NodeUtil.isStatementBlock(refNode)) {\n+        if (refNode == child) {\n+          // There's a self-referential assignment\n+          if (!ref.getNode().isGetProp()) {\n+            return true;\n           }\n-\n-\n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n+          for (; refNode != null; refNode = refNode.getParent()) {\n+            if (refNode.isFunction()) {\n+              return true;\n             }\n           }\n         }\n-\n-\n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n+        refNode = refNode.getParent();\n       }\n-      return ret;\n     }\n+  }\n+  return false;\n+}\n \n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();",
    "result_reason": "error: Illegal static declaration in inner class InlineObjectLiterals.InliningBehavior",
    "test_result": "ERROR"
}