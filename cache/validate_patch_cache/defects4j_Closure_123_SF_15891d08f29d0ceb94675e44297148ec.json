{
    "patch": "public String fixCode(String input) {\n    Matcher m = Pattern.compile(\"for\\\\((.*?);(.*?);(.*?)\\\\)(.*?)\").matcher(input);\n    StringBuffer sb = new StringBuffer();\n    while (m.find()) {\n        String[] conditions = new String[] {m.group(1), m.group(2), m.group(3)};\n        boolean isInOperator = false;\n        for (int i = 0; i < conditions.length; i++) {\n            String condition = conditions[i];\n            if (condition.contains(\"in\")) {\n                isInOperator = true;\n                conditions[i] = getInOperatorCondition(condition);\n            }\n        }\n        if (isInOperator) {\n            m.appendReplacement(sb, String.format(\"for(%s;%s;%s)%s\", conditions[0], conditions[1], conditions[2], m.group(4)));\n        }\n    }\n    m.appendTail(sb);\n    return sb.toString();\n}\n\nprivate String getInOperatorCondition(String condition) {\n    String[] parts = condition.split(\" in \");\n    String variable = parts[0].trim();\n    String array = parts[1].trim();\n    if (array.startsWith(\"[\")) {\n        return condition;\n    } else {\n        return String.format(\"%s != null && %s.containsKey(%s)\", array, array, variable);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..48c09c58 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,37 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public String fixCode(String input) {\n+    Matcher m = Pattern.compile(\"for\\\\((.*?);(.*?);(.*?)\\\\)(.*?)\").matcher(input);\n+    StringBuffer sb = new StringBuffer();\n+    while (m.find()) {\n+        String[] conditions = new String[] {m.group(1), m.group(2), m.group(3)};\n+        boolean isInOperator = false;\n+        for (int i = 0; i < conditions.length; i++) {\n+            String condition = conditions[i];\n+            if (condition.contains(\"in\")) {\n+                isInOperator = true;\n+                conditions[i] = getInOperatorCondition(condition);\n+            }\n+        }\n+        if (isInOperator) {\n+            m.appendReplacement(sb, String.format(\"for(%s;%s;%s)%s\", conditions[0], conditions[1], conditions[2], m.group(4)));\n+        }\n+    }\n+    m.appendTail(sb);\n+    return sb.toString();\n+}\n+\n+private String getInOperatorCondition(String condition) {\n+    String[] parts = condition.split(\" in \");\n+    String variable = parts[0].trim();\n+    String array = parts[1].trim();\n+    if (array.startsWith(\"[\")) {\n+        return condition;\n+    } else {\n+        return String.format(\"%s != null && %s.containsKey(%s)\", array, array, variable);\n+    }\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}