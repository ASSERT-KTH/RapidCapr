{
    "patch": "    } else if (n.getJSType() != null && parent.isAssign()) {\n      if (n.isFromExterns()) {\n        warnings.add(JSError.make(getPropNotOnNamespaceError(n)));\n      } else {\n        String propName = n.getLastChild().getString();\n        if (NodeUtil.isValidPropertyName(propName)) {\n          if (isPrototypeProperty(parent)) {\n            warnings.add(JSError.make(getPrototypeIsAssignError(n)));\n          } else if (NodeUtil.isObjectLitKey(parent, n)) {\n            warnings.add(JSError.make(getUndeclaredVarPropsError(n)));\n          } else {\n            warnings.add(JSError.make(getPropNotOnDeclaredType(n)));\n          }\n        }\n      }\n      return;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}