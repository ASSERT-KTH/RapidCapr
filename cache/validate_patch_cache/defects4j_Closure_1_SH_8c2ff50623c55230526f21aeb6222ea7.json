{
    "patch": "Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n        if (lastArg.getBooleanProp(Node.IS_REST)) {\n          // Rest parameters may be shortened to 0 elements.\n          argList.setIsInRest(Node.NOT_IN_REST);\n          return;\n        } else if (!lastArg.getBooleanProp(Node.IS_DEFAULT_VALUE)) {\n          // For compatibility, do not remove trailing arguments if they have default values.\n          break;\n        }\n        lastArg = argList.getLastChild();\n      }\n      if (lastArg != null && lastArg.getBooleanProp(Node.IS_REST)) {\n        // Rest parameters may be shortened to 0 elements.\n        argList.setIsInRest(Node.NOT_IN_REST);\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..e5cac147 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,38 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+        if (lastArg.getBooleanProp(Node.IS_REST)) {\n+          // Rest parameters may be shortened to 0 elements.\n+          argList.setIsInRest(Node.NOT_IN_REST);\n+          return;\n+        } else if (!lastArg.getBooleanProp(Node.IS_DEFAULT_VALUE)) {\n+          // For compatibility, do not remove trailing arguments if they have default values.\n+          break;\n+        }\n+        lastArg = argList.getLastChild();\n+      }\n+      if (lastArg != null && lastArg.getBooleanProp(Node.IS_REST)) {\n+        // Rest parameters may be shortened to 0 elements.\n+        argList.setIsInRest(Node.NOT_IN_REST);\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}