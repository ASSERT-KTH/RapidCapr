{
    "patch": "import java.util.regex.*;\n\npublic class StringEscapeUtils {\n\n    public static String escapeJava(String str) {\n        if (str == null) {\n            return null;\n        }\n        int length = str.length();\n        StringBuilder sb = new StringBuilder(length * 2);\n        for (int i = 0; i < length; i++) {\n            char ch = str.charAt(i);\n            if (ch < 32) {\n                switch (ch) {\n                case '\\b':\n                    sb.append('\\\\');\n                    sb.append('b');\n                    break;\n                case '\\n':\n                    sb.append('\\\\');\n                    sb.append('n');\n                    break;\n                case '\\t':\n                    sb.append('\\\\');\n                    sb.append('t');\n                    break;\n                case '\\f':\n                    sb.append('\\\\');\n                    sb.append('f');\n                    break;\n                case '\\r':\n                    sb.append('\\\\');\n                    sb.append('r');\n                    break;\n                default:\n                    if (ch > 0xf) {\n                        sb.append(\"\\\\u00\" + hex(ch));\n                    } else {\n                        sb.append(\"\\\\u000\" + hex(ch));\n                    }\n                    break;\n                }\n            } else {\n                switch (ch) {\n                case '\\\"':\n                    sb.append('\\\\');\n                    sb.append('\\\"');\n                    break;\n                case '\\'':\n                    sb.append('\\\\');\n                    sb.append('\\'');\n                    break;\n                case '\\\\':\n                    sb.append('\\\\');\n                    sb.append('\\\\');\n                    break;\n                default:\n                    sb.append(ch);\n                    break;\n                }\n            }\n        }\n        return sb.toString();\n    }\n\n    public static String unescapeJava(String str) {\n        if (str == null) {\n            return null;\n        }\n        int sz = str.length();\n        StringBuilder sb = new StringBuilder(sz);\n        StringBuilder unicode = new StringBuilder(4);\n        boolean hadSlash = false;\n        boolean inUnicode = false;\n        for (int i = 0; i < sz; i++) {\n            char ch = str.charAt(i);\n            if (inUnicode) {\n                unicode.append(ch);\n                if (unicode.length() == 4) {\n                    try {\n                        int value = Integer.parseInt(unicode.toString(), 16);\n                        sb.append((char) value);\n                        unicode.setLength(0);\n                        inUnicode = false;\n                        hadSlash = false;\n                    } catch (NumberFormatException nfe) {\n                        throw new IllegalArgumentException(\n                                \"Unable to parse unicode value: \" + unicode, nfe);\n                    }\n                }\n                continue;\n            }\n            if (hadSlash) {\n                hadSlash = false;\n                switch (ch) {\n                case '\\\\':\n                    sb.append('\\\\');\n                    break;\n                case '\\'':\n                    sb.append('\\'');\n                    break;\n                case '\\\"':\n                    sb.append('\"');\n                    break;\n                case 'r':\n                    sb.append('\\r');\n                    break;\n                case 'f':\n                    sb.append('\\f');\n                    break;\n                case 't':\n                    sb.append('\\t');\n                    break;\n                case 'n':\n                    sb.append('\\n');\n                    break;\n                case 'b':\n                    sb.append('\\b');\n                    break;\n                case 'u': {\n                    inUnicode = true;\n                    break;\n                }\n                default:\n                    sb.append(ch);\n                    break;\n                }\n                continue;\n            } else if (ch == '\\\\') {\n                hadSlash = true;\n                continue;\n            }\n            sb.append(ch);\n        }\n        if (hadSlash) {\n            sb.append('\\\\');\n        }\n        return sb.toString();\n    }\n\n    private static String hex(char ch) {\n        return Integer.toHexString(ch).toUpperCase();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex 8caca580..3682afce 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -27,7 +27,150 @@ package org.apache.commons.lang3.text.translate;\n  */\n public class EntityArrays {\n \n-    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n+import java.util.regex.*;\n+\n+public class StringEscapeUtils {\n+\n+    public static String escapeJava(String str) {\n+        if (str == null) {\n+            return null;\n+        }\n+        int length = str.length();\n+        StringBuilder sb = new StringBuilder(length * 2);\n+        for (int i = 0; i < length; i++) {\n+            char ch = str.charAt(i);\n+            if (ch < 32) {\n+                switch (ch) {\n+                case '\\b':\n+                    sb.append('\\\\');\n+                    sb.append('b');\n+                    break;\n+                case '\\n':\n+                    sb.append('\\\\');\n+                    sb.append('n');\n+                    break;\n+                case '\\t':\n+                    sb.append('\\\\');\n+                    sb.append('t');\n+                    break;\n+                case '\\f':\n+                    sb.append('\\\\');\n+                    sb.append('f');\n+                    break;\n+                case '\\r':\n+                    sb.append('\\\\');\n+                    sb.append('r');\n+                    break;\n+                default:\n+                    if (ch > 0xf) {\n+                        sb.append(\"\\\\u00\" + hex(ch));\n+                    } else {\n+                        sb.append(\"\\\\u000\" + hex(ch));\n+                    }\n+                    break;\n+                }\n+            } else {\n+                switch (ch) {\n+                case '\\\"':\n+                    sb.append('\\\\');\n+                    sb.append('\\\"');\n+                    break;\n+                case '\\'':\n+                    sb.append('\\\\');\n+                    sb.append('\\'');\n+                    break;\n+                case '\\\\':\n+                    sb.append('\\\\');\n+                    sb.append('\\\\');\n+                    break;\n+                default:\n+                    sb.append(ch);\n+                    break;\n+                }\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    public static String unescapeJava(String str) {\n+        if (str == null) {\n+            return null;\n+        }\n+        int sz = str.length();\n+        StringBuilder sb = new StringBuilder(sz);\n+        StringBuilder unicode = new StringBuilder(4);\n+        boolean hadSlash = false;\n+        boolean inUnicode = false;\n+        for (int i = 0; i < sz; i++) {\n+            char ch = str.charAt(i);\n+            if (inUnicode) {\n+                unicode.append(ch);\n+                if (unicode.length() == 4) {\n+                    try {\n+                        int value = Integer.parseInt(unicode.toString(), 16);\n+                        sb.append((char) value);\n+                        unicode.setLength(0);\n+                        inUnicode = false;\n+                        hadSlash = false;\n+                    } catch (NumberFormatException nfe) {\n+                        throw new IllegalArgumentException(\n+                                \"Unable to parse unicode value: \" + unicode, nfe);\n+                    }\n+                }\n+                continue;\n+            }\n+            if (hadSlash) {\n+                hadSlash = false;\n+                switch (ch) {\n+                case '\\\\':\n+                    sb.append('\\\\');\n+                    break;\n+                case '\\'':\n+                    sb.append('\\'');\n+                    break;\n+                case '\\\"':\n+                    sb.append('\"');\n+                    break;\n+                case 'r':\n+                    sb.append('\\r');\n+                    break;\n+                case 'f':\n+                    sb.append('\\f');\n+                    break;\n+                case 't':\n+                    sb.append('\\t');\n+                    break;\n+                case 'n':\n+                    sb.append('\\n');\n+                    break;\n+                case 'b':\n+                    sb.append('\\b');\n+                    break;\n+                case 'u': {\n+                    inUnicode = true;\n+                    break;\n+                }\n+                default:\n+                    sb.append(ch);\n+                    break;\n+                }\n+                continue;\n+            } else if (ch == '\\\\') {\n+                hadSlash = true;\n+                continue;\n+            }\n+            sb.append(ch);\n+        }\n+        if (hadSlash) {\n+            sb.append('\\\\');\n+        }\n+        return sb.toString();\n+    }\n+\n+    private static String hex(char ch) {\n+        return Integer.toHexString(ch).toUpperCase();\n+    }\n+}\n     private static final String[][] ISO8859_1_ESCAPE = {\n         {\"\\u00A0\", \"&nbsp;\"}, // non-breaking space\n         {\"\\u00A1\", \"&iexcl;\"}, // inverted exclamation mark",
    "result_reason": "error: operand expected (error token is \"=\")",
    "test_result": "ERROR"
}