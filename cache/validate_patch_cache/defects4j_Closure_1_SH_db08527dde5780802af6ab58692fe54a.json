{
    "patch": "    // Check if the function has arguments at all\n    Node argList = getFunctionArgList(function);\n    if (argList == null || !argList.hasChildren()) {\n      return;\n    }\n\n    // Initialize linked list for function arguments\n    LinkedHashMap<String, Var> argListMap = getLinkedArgListMap(argList);\n    LinkedList<Node> argRemoveList = initializeArgRemoveList(argList);\n\n    // Count number of references\n    countReferences(function, referenced, argListMap, modifyCallSites);\n\n    // Collect nodes that are not being used\n    collectUnusedArgs(argListMap, argRemoveList);\n\n    // Remove unusued nodes\n    removeUnusedArgs(argList, argRemoveList, compiler);\n\n    if (modifyCallSites) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..178592b7 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,26 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Check if the function has arguments at all\n+    Node argList = getFunctionArgList(function);\n+    if (argList == null || !argList.hasChildren()) {\n+      return;\n+    }\n+\n+    // Initialize linked list for function arguments\n+    LinkedHashMap<String, Var> argListMap = getLinkedArgListMap(argList);\n+    LinkedList<Node> argRemoveList = initializeArgRemoveList(argList);\n+\n+    // Count number of references\n+    countReferences(function, referenced, argListMap, modifyCallSites);\n+\n+    // Collect nodes that are not being used\n+    collectUnusedArgs(argListMap, argRemoveList);\n+\n+    // Remove unusued nodes\n+    removeUnusedArgs(argList, argRemoveList, compiler);\n+\n+    if (modifyCallSites) {\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}