{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) return;\n\n    attachLiteralTypes(n);\n\n    if (n.getType() == Token.FUNCTION_DECL) {\n        defineDeclaredFunction(n, parent);\n        return;\n    }\n\n    if (n.getType() == Token.NAME && parent != null && parent.getType() == Token.FUNCTION) {\n        return;\n    }\n\n    switch (n.getType()) {\n        case Token.FUNCTION:\n            defineDeclaredFunction(n, parent);\n            break;\n        case Token.CATCH:\n            defineCatch(n, parent);\n            break;\n        case Token.VAR:\n        case Token.LET:\n        case Token.CONST:\n            defineVar(n, parent);\n            break;\n        case Token.EXPR_RESULT:\n            Node grandparent = parent.getParent();\n            if (grandparent != null && grandparent.getType() == Token.BLOCK) {\n                Node greatGrandparent = grandparent.getParent();\n                if (greatGrandparent != null && greatGrandparent.getType() == Token.FUNCTION) {\n                    handleFunctionInputs(greatGrandparent);\n                }\n            }\n            break;\n        default:\n            break;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..da8f5f15 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,46 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) return;\n+\n+    attachLiteralTypes(n);\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+    if (n.getType() == Token.FUNCTION_DECL) {\n+        defineDeclaredFunction(n, parent);\n         return;\n-      }\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n+    if (n.getType() == Token.NAME && parent != null && parent.getType() == Token.FUNCTION) {\n+        return;\n+    }\n+\n+    switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n+            defineDeclaredFunction(n, parent);\n+            break;\n         case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n+            defineCatch(n, parent);\n+            break;\n         case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        case Token.LET:\n+        case Token.CONST:\n+            defineVar(n, parent);\n+            break;\n+        case Token.EXPR_RESULT:\n+            Node grandparent = parent.getParent();\n+            if (grandparent != null && grandparent.getType() == Token.BLOCK) {\n+                Node greatGrandparent = grandparent.getParent();\n+                if (greatGrandparent != null && greatGrandparent.getType() == Token.FUNCTION) {\n+                    handleFunctionInputs(greatGrandparent);\n+                }\n+            }\n+            break;\n+        default:\n+            break;\n     }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}