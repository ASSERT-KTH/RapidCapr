{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int chunkSize = 20;\n    final int n = m.getRowDimension();\n    final RealMatrix result = MatrixUtils.createRealMatrix(n, n);\n\n    for (int i = 0; i < n; i += chunkSize) {\n        for (int j = 0; j < n; j += chunkSize) {\n            int iEnd = Math.min(i + chunkSize, n);\n            int jEnd = Math.min(j + chunkSize, n);\n            RealMatrix subMatrix = m.getSubMatrix(i, iEnd - 1, j, jEnd - 1);\n            final EigenDecomposition subMatrixDecomp = new EigenDecomposition(subMatrix);\n            RealMatrix subMatrixSqrt = subMatrixDecomp.getSquareRoot();\n            result.setSubMatrix(subMatrixSqrt.getData(), i, j);\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..7de427960 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,21 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int chunkSize = 20;\n+    final int n = m.getRowDimension();\n+    final RealMatrix result = MatrixUtils.createRealMatrix(n, n);\n+\n+    for (int i = 0; i < n; i += chunkSize) {\n+        for (int j = 0; j < n; j += chunkSize) {\n+            int iEnd = Math.min(i + chunkSize, n);\n+            int jEnd = Math.min(j + chunkSize, n);\n+            RealMatrix subMatrix = m.getSubMatrix(i, iEnd - 1, j, jEnd - 1);\n+            final EigenDecomposition subMatrixDecomp = new EigenDecomposition(subMatrix);\n+            RealMatrix subMatrixSqrt = subMatrixDecomp.getSquareRoot();\n+            result.setSubMatrix(subMatrixSqrt.getData(), i, j);\n+        }\n     }\n+    return result;\n+}\n }",
    "result_reason": "org.apache.commons.math3.exception.MathUnsupportedOperationException: unsupported operation",
    "test_result": "FAIL"
}