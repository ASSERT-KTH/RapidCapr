{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n  // Process each property.\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    // Maybe STRING_KEY, STRING, GETPROP, GETELEM, SET\n    if (!NodeUtil.isGetOrSetKey(child)) {\n      String name = null;\n      if (child.isStringKey() || child.isString()) {\n        name = child.getString();\n      } else if (child.isGetProp()) {\n        Node firstChild = child.getFirstChild();\n        Node secondChild = firstChild.getNext();\n        // Handle GETPROP case\n        if (firstChild.isString() && secondChild.isString()) {\n          name = firstChild.getString() + \".\" + secondChild.getString();\n        }\n      } else if (child.isGetElem()) {\n        Node firstChild = child.getFirstChild();\n        Node secondChild = firstChild.getNext();\n        // Handle GETELEM case\n        if (firstChild != null && secondChild != null && firstChild.isString() && secondChild.isString()) {\n          name = firstChild.getString() + \"[\" + secondChild.getString() + \"]\";\n        }\n      }\n\n      if (name != null) {\n        // We should never see a mix of numbers and strings.\n        T type = typeSystem.getType(getScope(), n, name);\n\n        Property prop = getProperty(name);\n        boolean renamed = prop.scheduleRenaming(child, processProperty(t, prop, type, null));\n\n        // If the property is renamed, replace references to it in the code.\n        if (renamed) {\n          String oldName = prop.getName();\n          prop.setName(prop.getReplacingName());\n          // Save the replaced name as a property on the Property object.\n          prop.putAnnotation(ORIGINAL_NAME_ANNOTATION_KEY, oldName);\n\n          // Replace all references to this property in the code.\n          Node replacementNode = child;\n          for (Node ancestor : child.getAncestors()) {\n            // Handle GETPROP and GETELEM reference types.\n            if (ancestor.isGetProp()) {\n              if (ancestor.getFirstChild().getString().equals(oldName)) {\n                Node newFirstChild = IR.string(prop.getReplacingName()).srcref(ancestor.getFirstChild());\n                Node newSecondChild = IR.string(prop.getReplacingNameSuffix()).srcref(ancestor);\n                Node newGetProp = IR.getprop(newFirstChild, newSecondChild).srcref(ancestor);\n                ancestor.replaceWith(newGetProp.useSourceInfoFrom(ancestor));\n                replacementNode = newGetProp;\n              } else if (ancestor.getSecondChild().getString().equals(oldName)) {\n                Node newSecondChild = IR.string(prop.getReplacingName()).srcref(ancestor.getSecondChild());\n                Node newGetProp = IR.getprop(ancestor.getFirstChild(), newSecondChild).srcref(ancestor);\n                ancestor.replaceWith(newGetProp.useSourceInfoFrom(ancestor));\n                replacementNode = newGetProp;\n              }\n            } else if (ancestor.isGetElem() && ancestor.getFirstChild().getString().equals(oldName)) {\n              Node newFirstChild = IR.string(prop.getReplacingName()).srcref(ancestor.getFirstChild());\n              Node newSecondChild = ancestor.getSecondChild().cloneNode();\n              Node newGetElem = IR.getelem(newFirstChild, newSecondChild).srcref(ancestor);\n              ancestor.replaceWith(newGetElem.useSourceInfoFrom(ancestor));\n              replacementNode = newGetElem;\n            }\n          }\n\n          // Revisit the new code to replace any other references to the renamed property.\n          t.getCompiler().reportCodeChange();\n          NodeTraversal.traverse(t.getCompiler(), replacementNode, new ReplacePropertiesCallback(prop));\n        } else if (propertiesToErrorFor.containsKey(name)) {\n          compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name), Warnings.INVALIDATION, name, (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n        }\n      }\n    }\n  }\n}\n\nprivate static class ReplacePropertiesCallback implements NodeTraversal.Callback {\n  private final Property replacedProp;\n\n  ReplacePropertiesCallback(Property prop) {\n    this.replacedProp = prop;\n  }\n\n  @Override\n  public boolean shouldTraverse(NodeTraversal nodeTraversal, Node node, Node parent) {\n    return true;\n  }\n\n  @Override\n  public void visit(NodeTraversal nodeTraversal, Node node, Node parent) {\n    if (node.isGetProp() || node.isGetElem()) {\n      String annotation = node.getJSDocInfo() == null ? null : node.getJSDocInfo().getAnnotationString();\n      if (node.isGetProp() && replacedProp.getOriginalName().equals(node.getFirstChild().getString()) ||\n          node.isGetElem() && replacedProp.getOriginalName().equals(node.getFirstChild().getString()) && \"array\".equals(annotation)) {\n        Node oldChild = node.getFirstChild();\n        Node newGetProp = IR.getprop(IR.string(replacedProp.getReplacingNameSuffix()), oldChild.cloneNode());\n        node.replaceWith(newGetProp.useSourceInfoFrom(node));\n        nodeTraversal.getCompiler().reportCodeChange();\n\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..872597d4 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,108 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+  // Process each property.\n+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+    // Maybe STRING_KEY, STRING, GETPROP, GETELEM, SET\n+    if (!NodeUtil.isGetOrSetKey(child)) {\n+      String name = null;\n+      if (child.isStringKey() || child.isString()) {\n+        name = child.getString();\n+      } else if (child.isGetProp()) {\n+        Node firstChild = child.getFirstChild();\n+        Node secondChild = firstChild.getNext();\n+        // Handle GETPROP case\n+        if (firstChild.isString() && secondChild.isString()) {\n+          name = firstChild.getString() + \".\" + secondChild.getString();\n+        }\n+      } else if (child.isGetElem()) {\n+        Node firstChild = child.getFirstChild();\n+        Node secondChild = firstChild.getNext();\n+        // Handle GETELEM case\n+        if (firstChild != null && secondChild != null && firstChild.isString() && secondChild.isString()) {\n+          name = firstChild.getString() + \"[\" + secondChild.getString() + \"]\";\n+        }\n+      }\n+\n+      if (name != null) {\n+        // We should never see a mix of numbers and strings.\n+        T type = typeSystem.getType(getScope(), n, name);\n+\n+        Property prop = getProperty(name);\n+        boolean renamed = prop.scheduleRenaming(child, processProperty(t, prop, type, null));\n+\n+        // If the property is renamed, replace references to it in the code.\n+        if (renamed) {\n+          String oldName = prop.getName();\n+          prop.setName(prop.getReplacingName());\n+          // Save the replaced name as a property on the Property object.\n+          prop.putAnnotation(ORIGINAL_NAME_ANNOTATION_KEY, oldName);\n+\n+          // Replace all references to this property in the code.\n+          Node replacementNode = child;\n+          for (Node ancestor : child.getAncestors()) {\n+            // Handle GETPROP and GETELEM reference types.\n+            if (ancestor.isGetProp()) {\n+              if (ancestor.getFirstChild().getString().equals(oldName)) {\n+                Node newFirstChild = IR.string(prop.getReplacingName()).srcref(ancestor.getFirstChild());\n+                Node newSecondChild = IR.string(prop.getReplacingNameSuffix()).srcref(ancestor);\n+                Node newGetProp = IR.getprop(newFirstChild, newSecondChild).srcref(ancestor);\n+                ancestor.replaceWith(newGetProp.useSourceInfoFrom(ancestor));\n+                replacementNode = newGetProp;\n+              } else if (ancestor.getSecondChild().getString().equals(oldName)) {\n+                Node newSecondChild = IR.string(prop.getReplacingName()).srcref(ancestor.getSecondChild());\n+                Node newGetProp = IR.getprop(ancestor.getFirstChild(), newSecondChild).srcref(ancestor);\n+                ancestor.replaceWith(newGetProp.useSourceInfoFrom(ancestor));\n+                replacementNode = newGetProp;\n+              }\n+            } else if (ancestor.isGetElem() && ancestor.getFirstChild().getString().equals(oldName)) {\n+              Node newFirstChild = IR.string(prop.getReplacingName()).srcref(ancestor.getFirstChild());\n+              Node newSecondChild = ancestor.getSecondChild().cloneNode();\n+              Node newGetElem = IR.getelem(newFirstChild, newSecondChild).srcref(ancestor);\n+              ancestor.replaceWith(newGetElem.useSourceInfoFrom(ancestor));\n+              replacementNode = newGetElem;\n+            }\n+          }\n+\n+          // Revisit the new code to replace any other references to the renamed property.\n+          t.getCompiler().reportCodeChange();\n+          NodeTraversal.traverse(t.getCompiler(), replacementNode, new ReplacePropertiesCallback(prop));\n+        } else if (propertiesToErrorFor.containsKey(name)) {\n+          compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name), Warnings.INVALIDATION, name, (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+private static class ReplacePropertiesCallback implements NodeTraversal.Callback {\n+  private final Property replacedProp;\n+\n+  ReplacePropertiesCallback(Property prop) {\n+    this.replacedProp = prop;\n+  }\n+\n+  @Override\n+  public boolean shouldTraverse(NodeTraversal nodeTraversal, Node node, Node parent) {\n+    return true;\n+  }\n+\n+  @Override\n+  public void visit(NodeTraversal nodeTraversal, Node node, Node parent) {\n+    if (node.isGetProp() || node.isGetElem()) {\n+      String annotation = node.getJSDocInfo() == null ? null : node.getJSDocInfo().getAnnotationString();\n+      if (node.isGetProp() && replacedProp.getOriginalName().equals(node.getFirstChild().getString()) ||\n+          node.isGetElem() && replacedProp.getOriginalName().equals(node.getFirstChild().getString()) && \"array\".equals(annotation)) {\n+        Node oldChild = node.getFirstChild();\n+        Node newGetProp = IR.getprop(IR.string(replacedProp.getReplacingNameSuffix()), oldChild.cloneNode());\n+        node.replaceWith(newGetProp.useSourceInfoFrom(node));\n+        nodeTraversal.getCompiler().reportCodeChange();\n+\n+      }\n+    }\n+  }\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}