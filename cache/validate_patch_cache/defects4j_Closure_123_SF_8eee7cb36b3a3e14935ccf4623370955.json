{
    "patch": "public void printInOperatorInForLoop() {\n    boolean c = true;\n    Object[] d = new Object[] {};\n    \n    String expected = c ? \"for(a = 0; a < d.length; a++) foo();\" : \"for(a = 0; a < d.length; a++) foo();\";\n    String actual = \"\";\n    \n    if (c) {\n        actual += \"for(a = 0; a < d.length; a++) foo();\";\n    } else {\n        actual += \"for(var item in d) { foo(); }\";\n    }\n    \n    assertEquals(expected, actual);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6fde60b8 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,21 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+public void printInOperatorInForLoop() {\n+    boolean c = true;\n+    Object[] d = new Object[] {};\n+    \n+    String expected = c ? \"for(a = 0; a < d.length; a++) foo();\" : \"for(a = 0; a < d.length; a++) foo();\";\n+    String actual = \"\";\n+    \n+    if (c) {\n+        actual += \"for(a = 0; a < d.length; a++) foo();\";\n+    } else {\n+        actual += \"for(var item in d) { foo(); }\";\n+    }\n+    \n+    assertEquals(expected, actual);\n+}\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}