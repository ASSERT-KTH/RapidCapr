{
    "patch": "  @Override \n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isScript()) {\n      visitBlock(n);\n      return;\n    }\n    if (n.isBlock()) {\n      if (parent.isFunction()) {\n        defineScope(n);\n      } else {\n        visitBlock(n);\n      }\n      return;\n    }\n    if (n.isFunction()) {\n      defineScope(n);\n      traverseFunctionBody(n.getLastChild(), n);\n      return;\n    }\n    if (n.isCatch()) {\n      defineCatch(t, n);\n      traverse(n.getLastChild(), n);\n      return;\n    }\n    if (n.isVar()) {\n      defineVar(t, n);\n      return;\n    }\n    if (n.isName()) {\n      referenceName(t, n, parent);\n      return;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..31913ae1 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,39 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+  @Override \n+  public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n.isScript()) {\n+      visitBlock(n);\n+      return;\n+    }\n+    if (n.isBlock()) {\n+      if (parent.isFunction()) {\n+        defineScope(n);\n+      } else {\n+        visitBlock(n);\n       }\n+      return;\n+    }\n+    if (n.isFunction()) {\n+      defineScope(n);\n+      traverseFunctionBody(n.getLastChild(), n);\n+      return;\n+    }\n+    if (n.isCatch()) {\n+      defineCatch(t, n);\n+      traverse(n.getLastChild(), n);\n+      return;\n     }\n+    if (n.isVar()) {\n+      defineVar(t, n);\n+      return;\n+    }\n+    if (n.isName()) {\n+      referenceName(t, n, parent);\n+      return;\n+    }\n+  }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}