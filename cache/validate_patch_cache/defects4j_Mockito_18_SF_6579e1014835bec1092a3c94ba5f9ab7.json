{
    "patch": "public static ReturnValues foo(String[][] arr) {\n    List<Integer> outputList = new ArrayList<>();\n    for (int i = 0; i < arr[0].length; i++) {\n        int maxValue = Integer.MIN_VALUE;\n        for (int j = 0; j < arr.length; j++) {\n            try {\n                int temp = Integer.parseInt(arr[j][i]);\n                if (temp > maxValue) {\n                    maxValue = temp;\n                }\n            } catch (NumberFormatException ex) {\n                // ignore and continue\n            }\n        }\n        outputList.add(maxValue);\n    }\n    return new ReturnValues(outputList);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..9af3d493e 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,24 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+public static ReturnValues foo(String[][] arr) {\n+    List<Integer> outputList = new ArrayList<>();\n+    for (int i = 0; i < arr[0].length; i++) {\n+        int maxValue = Integer.MIN_VALUE;\n+        for (int j = 0; j < arr.length; j++) {\n+            try {\n+                int temp = Integer.parseInt(arr[j][i]);\n+                if (temp > maxValue) {\n+                    maxValue = temp;\n+                }\n+            } catch (NumberFormatException ex) {\n+                // ignore and continue\n+            }\n+        }\n+        outputList.add(maxValue);\n+    }\n+    return new ReturnValues(outputList);\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}