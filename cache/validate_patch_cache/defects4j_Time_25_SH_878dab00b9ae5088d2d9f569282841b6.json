{
    "patch": "                // adjust instantAdjusted using the current offset\n                final long instantAdjusted2 = instantLocal - offsetAdjusted; \n                final int offsetAdjusted2 = getOffset(instantAdjusted2);\n                // if offsets still differ, we are in a DST gap\n                if (offsetLocal != offsetAdjusted2) {\n                    // if we just return offsetAdjusted then the time is pushed\n                    // back before the transition, whereas it should be\n                    // on or after the transition\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantAdjusted2);\n                    if (nextLocal == nextAdjusted) {\n                      return offsetAdjusted;\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..37bed07e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,20 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // adjust instantAdjusted using the current offset\n+                final long instantAdjusted2 = instantLocal - offsetAdjusted; \n+                final int offsetAdjusted2 = getOffset(instantAdjusted2);\n+                // if offsets still differ, we are in a DST gap\n+                if (offsetLocal != offsetAdjusted2) {\n+                    // if we just return offsetAdjusted then the time is pushed\n+                    // back before the transition, whereas it should be\n+                    // on or after the transition\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantAdjusted2);\n+                    if (nextLocal == nextAdjusted) {\n+                      return offsetAdjusted;\n+                    }\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}