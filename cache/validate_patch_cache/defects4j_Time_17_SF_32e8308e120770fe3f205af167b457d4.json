{
    "patch": "    public long adjustOffset(long instant, boolean earlierOrLater) {\n        // evaluate 4 hours before and after to work out if anything is happening\n        long instantBefore = convertUTCToLocal(instant - 4 * DateTimeConstants.MILLIS_PER_HOUR);\n        long instantAfter = convertUTCToLocal(instant + 4 * DateTimeConstants.MILLIS_PER_HOUR);\n\n        // if before and after are same then no overlap\n        if (instantBefore == instantAfter) {\n            return instant;\n        }\n\n        // check if there is a gap or overlap for the given instant\n        boolean gapBefore = isLocalDateTimeGap(instantBefore);\n        boolean overlapAfter = isLocalDateTimeOverlap(instantAfter);\n\n        // if there is no overlap or earlierOrLater is false and there is a gap or earlierOrLater is true and there is an overlap\n        if ((!overlapAfter && (!earlierOrLater || gapBefore)) || (earlierOrLater && overlapAfter)) {\n            return convertLocalToUTC(instantBefore, false, instant);\n        }\n        // otherwise there is an overlap and we need to return the instantAfter\n        return convertLocalToUTC(instantAfter, false, instant);\n    }\n    \n    // helper function to check if given local date time is a gap\n    private boolean isLocalDateTimeGap(long localDateTime) {\n        long nextLocalDateTime = convertUTCToLocal(convertLocalToUTC(localDateTime, false));\n        return nextLocalDateTime > localDateTime;\n    }\n\n    // helper function to check if there is an overlap for the given local instant\n    private boolean isLocalDateTimeOverlap(long localDateTime) {\n        long prevLocalDateTime = convertUTCToLocal(convertLocalToUTC(localDateTime, true));\n        return prevLocalDateTime != localDateTime;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802a..f75640d3 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1161,22 +1161,37 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the adjusted instant millis\n      */\n     public long adjustOffset(long instant, boolean earlierOrLater) {\n-        // a bit messy, but will work in all non-pathological cases\n-        \n-        // evaluate 3 hours before and after to work out if anything is happening\n-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n+        // evaluate 4 hours before and after to work out if anything is happening\n+        long instantBefore = convertUTCToLocal(instant - 4 * DateTimeConstants.MILLIS_PER_HOUR);\n+        long instantAfter = convertUTCToLocal(instant + 4 * DateTimeConstants.MILLIS_PER_HOUR);\n+\n+        // if before and after are same then no overlap\n         if (instantBefore == instantAfter) {\n-            return instant;  // not an overlap (less than is a gap, equal is normal case)\n+            return instant;\n         }\n-        \n-        // work out range of instants that have duplicate local times\n-        long local = convertUTCToLocal(instant);\n-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n-        \n-        // calculate result\n-          // currently in later offset\n-          // currently in earlier offset\n+\n+        // check if there is a gap or overlap for the given instant\n+        boolean gapBefore = isLocalDateTimeGap(instantBefore);\n+        boolean overlapAfter = isLocalDateTimeOverlap(instantAfter);\n+\n+        // if there is no overlap or earlierOrLater is false and there is a gap or earlierOrLater is true and there is an overlap\n+        if ((!overlapAfter && (!earlierOrLater || gapBefore)) || (earlierOrLater && overlapAfter)) {\n+            return convertLocalToUTC(instantBefore, false, instant);\n+        }\n+        // otherwise there is an overlap and we need to return the instantAfter\n+        return convertLocalToUTC(instantAfter, false, instant);\n+    }\n+    \n+    // helper function to check if given local date time is a gap\n+    private boolean isLocalDateTimeGap(long localDateTime) {\n+        long nextLocalDateTime = convertUTCToLocal(convertLocalToUTC(localDateTime, false));\n+        return nextLocalDateTime > localDateTime;\n+    }\n+\n+    // helper function to check if there is an overlap for the given local instant\n+    private boolean isLocalDateTimeOverlap(long localDateTime) {\n+        long prevLocalDateTime = convertUTCToLocal(convertLocalToUTC(localDateTime, true));\n+        return prevLocalDateTime != localDateTime;\n     }\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<2007-10-28T03:15:00.000+01:00> was not:<2007-10-28T00:15:00.000+02:00>",
    "test_result": "FAIL"
}