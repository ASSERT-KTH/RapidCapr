{
    "patch": "      if (parent != null &&\n          parent.getType() == Token.ASSIGN &&\n          NodeUtil.isGet(parent.getFirstChild()))\n      {\n        Node lhs = parent.getFirstChild();\n        \n        if (lhs.getType() == Token.GETPROP && \"prototype\".equals(lhs.getLastChild().getString()))\n        {\n          return false;\n        }\n        \n        Node rootNode = NodeUtil.getRootOfQualifiedName(lhs);\n        \n        if (rootNode != null && rootNode.getType() == Token.GETPROP)\n        {\n          Node objectNode = rootNode.getFirstChild();\n          \n          if (objectNode.getType() == Token.NAME || objectNode.getType() == Token.THIS ||\n              objectNode.getType() == Token.GETPROP && \n              (objectNode.getLastChild().getType() == Token.STRING || \n               objectNode.getLastChild().getType() == Token.NUMBER))\n          {\n            return false;\n          }\n          \n          rootNode = NodeUtil.getRootOfQualifiedName(rootNode.getParent());\n          \n          if (rootNode != null && rootNode.getType() == Token.GETPROP && \"prototype\".equals(rootNode.getLastChild().getString()))\n          {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..2e8772b5 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,35 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null &&\n+          parent.getType() == Token.ASSIGN &&\n+          NodeUtil.isGet(parent.getFirstChild()))\n+      {\n+        Node lhs = parent.getFirstChild();\n+        \n+        if (lhs.getType() == Token.GETPROP && \"prototype\".equals(lhs.getLastChild().getString()))\n+        {\n+          return false;\n+        }\n+        \n+        Node rootNode = NodeUtil.getRootOfQualifiedName(lhs);\n+        \n+        if (rootNode != null && rootNode.getType() == Token.GETPROP)\n+        {\n+          Node objectNode = rootNode.getFirstChild();\n+          \n+          if (objectNode.getType() == Token.NAME || objectNode.getType() == Token.THIS ||\n+              objectNode.getType() == Token.GETPROP && \n+              (objectNode.getLastChild().getType() == Token.STRING || \n+               objectNode.getLastChild().getType() == Token.NUMBER))\n+          {\n+            return false;\n+          }\n+          \n+          rootNode = NodeUtil.getRootOfQualifiedName(rootNode.getParent());\n+          \n+          if (rootNode != null && rootNode.getType() == Token.GETPROP && \"prototype\".equals(rootNode.getLastChild().getString()))\n+          {\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}