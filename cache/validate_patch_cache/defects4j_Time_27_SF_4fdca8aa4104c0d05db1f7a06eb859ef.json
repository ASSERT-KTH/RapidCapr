{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        // Get the next element pair as the current separator has already been processed\n        Object nextPair = elementPairs.get(1);\n        int remainingSize = size - 1;\n        if (nextPair instanceof Separator && remainingSize >= 3) {\n            // Recurse on the sublist containing all remaining element pairs except for the first two (current separator and next separator)\n            PeriodFormatter formatter = toFormatter(elementPairs.subList(2, remainingSize), notPrinter, notParser);\n            // Finish the current separator with the printer and parser obtained from the next separator\n            sep = sep.finish(formatter.getPrinter(), formatter.getParser());\n            return new PeriodFormatter(sep, sep);\n        } else {\n            // Recurse on the sublist containing all remaining element pairs after the current separator\n            PeriodFormatter formatter = toFormatter(elementPairs.subList(1, remainingSize), notPrinter, notParser);\n            // Finish the current separator with the printer and parser obtained from the objects in the remaining pairs\n            sep = sep.finish(formatter.getPrinter(), formatter.getParser());\n            return new PeriodFormatter(sep, sep);\n        }\n    }\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..2a96a73e 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,39 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        // Get the next element pair as the current separator has already been processed\n+        Object nextPair = elementPairs.get(1);\n+        int remainingSize = size - 1;\n+        if (nextPair instanceof Separator && remainingSize >= 3) {\n+            // Recurse on the sublist containing all remaining element pairs except for the first two (current separator and next separator)\n+            PeriodFormatter formatter = toFormatter(elementPairs.subList(2, remainingSize), notPrinter, notParser);\n+            // Finish the current separator with the printer and parser obtained from the next separator\n+            sep = sep.finish(formatter.getPrinter(), formatter.getParser());\n+            return new PeriodFormatter(sep, sep);\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            // Recurse on the sublist containing all remaining element pairs after the current separator\n+            PeriodFormatter formatter = toFormatter(elementPairs.subList(1, remainingSize), notPrinter, notParser);\n+            // Finish the current separator with the printer and parser obtained from the objects in the remaining pairs\n+            sep = sep.finish(formatter.getPrinter(), formatter.getParser());\n+            return new PeriodFormatter(sep, sep);\n         }\n     }\n+    Object[] comp = createComposite(elementPairs);\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.IndexOutOfBoundsException: Index: 5, Size: 5",
    "test_result": "FAIL"
}