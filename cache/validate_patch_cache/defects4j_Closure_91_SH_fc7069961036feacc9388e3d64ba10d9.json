{
    "patch": "    // Don't traverse functions that are getting lent to a prototype.\n    if (NodeUtil.isGet(parent) &&\n        parent.getType() == Token.GETPROP &&\n        parent.getLastChild().getString().equals(\"prototype\")) {\n      return false;\n    } else if (parent != null && NodeUtil.isNameDeclaration(parent)) {\n      // Don't traverse functions declared in a name declaration with a visibility annotation.\n      if (!parent.hasOneChild() || parent.getFirstChild().getType() != Token.ANNOTATION ||\n          parent.getFirstFirstChild().getString().startsWith(\"Vis\")) {\n        return NodeUtil.getEnclosingTypeDeclaration( parent ) != null;\n      }\n      return false;\n    }\n    return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..074243c7 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,20 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+    // Don't traverse functions that are getting lent to a prototype.\n+    if (NodeUtil.isGet(parent) &&\n+        parent.getType() == Token.GETPROP &&\n+        parent.getLastChild().getString().equals(\"prototype\")) {\n+      return false;\n+    } else if (parent != null && NodeUtil.isNameDeclaration(parent)) {\n+      // Don't traverse functions declared in a name declaration with a visibility annotation.\n+      if (!parent.hasOneChild() || parent.getFirstChild().getType() != Token.ANNOTATION ||\n+          parent.getFirstFirstChild().getString().startsWith(\"Vis\")) {\n+        return NodeUtil.getEnclosingTypeDeclaration( parent ) != null;\n+      }\n+      return false;\n+    }\n+    return true;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}