{
    "patch": "  private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.isSubtypeOf(getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n      FunctionType functionType = (FunctionType) childType;\n\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if(functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceName();\n        CompilerInput functionSource = compiler.getInput(sourceName);\n        isExtern = functionSource.isExtern();\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explcit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      checkThisInFunctionType(t, n, functionType);\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }\n\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n  }\n\n  private void checkThisInFunctionType(NodeTraversal t, Node n, FunctionType functionType) {\n    Node caller = n.getParent();\n    Node callee = n.getFirstChild();\n    if (caller != null && callee != null && caller.isGetProp()) {\n      if (functionType.getTypeOfThis().isTop()) {\n        if (!callee.isGetElem() && !callee.isGetProp()) {\n          report(t, n, ILLEGAL_THIS, callee.getQualifiedName());\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..48dba875 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1545,7 +1545,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     Node child = n.getFirstChild();\n     JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n \n-    if (!childType.canBeCalled()) {\n+    if (!childType.isSubtypeOf(getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))) {\n       report(t, n, NOT_CALLABLE, childType.toString());\n       ensureTyped(t, n);\n       return;\n@@ -1577,6 +1577,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      checkThisInFunctionType(t, n, functionType);\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());\n@@ -1589,6 +1590,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     // about the non-portability of the call or both.\n   }\n \n+  private void checkThisInFunctionType(NodeTraversal t, Node n, FunctionType functionType) {\n+    Node caller = n.getParent();\n+    Node callee = n.getFirstChild();\n+    if (caller != null && callee != null && caller.isGetProp()) {\n+      if (functionType.getTypeOfThis().isTop()) {\n+        if (!callee.isGetElem() && !callee.isGetProp()) {\n+          report(t, n, ILLEGAL_THIS, callee.getQualifiedName());\n+        }\n+      }\n+    }\n+  }\n+\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}