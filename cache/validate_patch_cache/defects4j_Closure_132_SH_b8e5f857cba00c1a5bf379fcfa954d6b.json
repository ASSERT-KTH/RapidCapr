{
    "patch": "              Node getLhs(Operator op) {\n                return op == Token.ASSIGN ? this.getFirstChild() : this.getLastChild();\n              }\n              lhs = getLhs(thenOp);\n              rhs = thenOp.getLastChild();\n              if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n                  !mayHaveSideEffects(lhs)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..56cc5a15 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,13 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              Node getLhs(Operator op) {\n+                return op == Token.ASSIGN ? this.getFirstChild() : this.getLastChild();\n+              }\n+              lhs = getLhs(thenOp);\n+              rhs = thenOp.getLastChild();\n+              if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n+                  !mayHaveSideEffects(lhs)) {\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}