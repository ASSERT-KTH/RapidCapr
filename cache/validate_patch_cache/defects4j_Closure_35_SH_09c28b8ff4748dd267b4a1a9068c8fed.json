{
    "patch": "if (constraintObj != null && constraintObj.isRecordType() && type.isSubtypeOf(getNativeType(OBJECT_TYPE))) {\n      ObjectType objType = type.autocast();\n      if (!objType.isLoose() && objType.isTemplateObjectType()) {\n        objType = ObjectType.cast(objType.instantiateGenericsWithUnknown());\n      }\n      // Only auto-add properties when the loose object type doesn't already\n      // have the property\n      if (objType != null && !objType.isLoose()) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..2d4447f6 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,21 +1118,24 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n+if (constraintObj != null && constraintObj.isRecordType() && type.isSubtypeOf(getNativeType(OBJECT_TYPE))) {\n+      ObjectType objType = type.autocast();\n+      if (!objType.isLoose() && objType.isTemplateObjectType()) {\n+        objType = ObjectType.cast(objType.instantiateGenericsWithUnknown());\n+      }\n+      // Only auto-add properties when the loose object type doesn't already\n+      // have the property\n+      if (objType != null && !objType.isLoose()) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n           if (!objType.isPropertyTypeDeclared(prop)) {\n             JSType typeToInfer = propType;\n             if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+              typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n             }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n-      }\n     }\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}