{
    "patch": "    if (n == null) {\n      return false;\n    }\n\n    if (NodeUtil.isCallOrNew(n)) {\n      if (NodeUtil.mayHaveSideEffects(n)) {\n        if (mayModifyDependentVariable(n)) {\n          return true;\n        }\n      }\n    }\n\n    if (n.isDelProp()) {\n      return true;\n    }\n\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns true if the given CALL or NEW node is a call to a function that may modify a dependent\n   * variable.\n   */\n  private static boolean mayModifyDependentVariable(Node callOrNew) {\n    checkState(NodeUtil.isCallOrNew(callOrNew));\n    Node callee = callOrNew.getFirstChild();\n    boolean isFunctionExpression = callee.isFunction() && NodeUtil.isFunctionExpression(callee);\n    for (Node arg = callee.getNext(); arg != null; arg = arg.getNext()) {\n      if (arg.getBooleanProp(Node.IS_NAMESPACE)\n          || (isFunctionExpression && arg.isName() && callee.hasChildren()))) {\n        continue;\n      }\n      if (!mayHaveGlobalSideEffects(arg)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Returns true if the given node may have side effects on global scope.\n   */\n  private static boolean mayHaveGlobalSideEffects(Node node) {\n    checkState(node != null);\n    return NodeUtil.isExpressionNode(node)\n        && (NodeUtil.mayHaveSideEffects(node)\n            || NodeUtil.referencesAnyArguments(node)\n            || NodeUtil.referencesThis(node)\n            || NodeUtil.callsParentScope(node)\n            || NodeUtil.isFunctionDeclaration(node)\n            || NodeUtil.getEnclosingFunction(node).isArrowFunction());\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..462ed281 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,64 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+    if (n == null) {\n+      return false;\n+    }\n+\n+    if (NodeUtil.isCallOrNew(n)) {\n+      if (NodeUtil.mayHaveSideEffects(n)) {\n+        if (mayModifyDependentVariable(n)) {\n+          return true;\n+        }\n+      }\n+    }\n+\n+    if (n.isDelProp()) {\n+      return true;\n+    }\n+\n+    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+      if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+        return true;\n+      }\n+    }\n+\n+    return false;\n+  }\n+\n+  /**\n+   * Returns true if the given CALL or NEW node is a call to a function that may modify a dependent\n+   * variable.\n+   */\n+  private static boolean mayModifyDependentVariable(Node callOrNew) {\n+    checkState(NodeUtil.isCallOrNew(callOrNew));\n+    Node callee = callOrNew.getFirstChild();\n+    boolean isFunctionExpression = callee.isFunction() && NodeUtil.isFunctionExpression(callee);\n+    for (Node arg = callee.getNext(); arg != null; arg = arg.getNext()) {\n+      if (arg.getBooleanProp(Node.IS_NAMESPACE)\n+          || (isFunctionExpression && arg.isName() && callee.hasChildren()))) {\n+        continue;\n+      }\n+      if (!mayHaveGlobalSideEffects(arg)) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * Returns true if the given node may have side effects on global scope.\n+   */\n+  private static boolean mayHaveGlobalSideEffects(Node node) {\n+    checkState(node != null);\n+    return NodeUtil.isExpressionNode(node)\n+        && (NodeUtil.mayHaveSideEffects(node)\n+            || NodeUtil.referencesAnyArguments(node)\n+            || NodeUtil.referencesThis(node)\n+            || NodeUtil.callsParentScope(node)\n+            || NodeUtil.isFunctionDeclaration(node)\n+            || NodeUtil.getEnclosingFunction(node).isArrowFunction());\n+  }\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}