{
    "patch": "                long nextAdjusted = nextTransition(instantAdjusted + (offsetLocal - offsetAdjusted) * DateTimeConstants.MILLIS_PER_SECOND);\n                if (nextLocal != nextAdjusted) {\n                    // We must be near a DST boundary and we need to ensure that time is always after the DST gap.\n                    // This happens naturally for positive offsets, but for negative offsets, we need to take an additional step.\n                    int totalDiff = offsetAdjusted - getOffset(nextAdjusted);\n                    int nextDiff = getOffset(nextAdjusted + (totalDiff * (long)DateTimeConstants.MILLIS_PER_SECOND)) - offsetAdjusted;\n                    if (nextDiff <= 0) {\n                        return offsetLocal;\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..d4ca999a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,15 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                long nextAdjusted = nextTransition(instantAdjusted + (offsetLocal - offsetAdjusted) * DateTimeConstants.MILLIS_PER_SECOND);\n+                if (nextLocal != nextAdjusted) {\n+                    // We must be near a DST boundary and we need to ensure that time is always after the DST gap.\n+                    // This happens naturally for positive offsets, but for negative offsets, we need to take an additional step.\n+                    int totalDiff = offsetAdjusted - getOffset(nextAdjusted);\n+                    int nextDiff = getOffset(nextAdjusted + (totalDiff * (long)DateTimeConstants.MILLIS_PER_SECOND)) - offsetAdjusted;\n+                    if (nextDiff <= 0) {\n+                        return offsetLocal;\n+                    }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}