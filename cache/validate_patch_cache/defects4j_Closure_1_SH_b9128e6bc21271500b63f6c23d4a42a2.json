{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers =\n        modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      String functionName = NodeUtil.getName(function);\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null) {\n        String argName = lastArg.getString();\n        Var var = fnScope.getVar(argName);\n\n        if (!referenced.contains(var)) {\n          if (!isRemovableFromFunctionArgs(argList, lastArg, var)) {\n            break;\n          }\n\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n\n          if (argList.hasChildren() && argList.getLastChild().isRest()) {\n            lastArg = argList.getLastChild().getFirstChild();\n            if (lastArg != null) {\n              lastArg = lastArg.getNext();\n            }\n          } else {\n            lastArg = argList.getLastChild();\n          }\n\n          if (argList.isChangeHandler() && argList.getChildCount() != 1) {\n            removeChangeHandlerForObject(fnScope, functionName);\n          }\n        } else {\n          lastArg = null;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..1aea2c96 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,52 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers =\n+        modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      String functionName = NodeUtil.getName(function);\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null) {\n+        String argName = lastArg.getString();\n+        Var var = fnScope.getVar(argName);\n+\n+        if (!referenced.contains(var)) {\n+          if (!isRemovableFromFunctionArgs(argList, lastArg, var)) {\n+            break;\n+          }\n+\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+\n+          if (argList.hasChildren() && argList.getLastChild().isRest()) {\n+            lastArg = argList.getLastChild().getFirstChild();\n+            if (lastArg != null) {\n+              lastArg = lastArg.getNext();\n+            }\n+          } else {\n+            lastArg = argList.getLastChild();\n+          }\n+\n+          if (argList.isChangeHandler() && argList.getChildCount() != 1) {\n+            removeChangeHandlerForObject(fnScope, functionName);\n+          }\n+        } else {\n+          lastArg = null;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}