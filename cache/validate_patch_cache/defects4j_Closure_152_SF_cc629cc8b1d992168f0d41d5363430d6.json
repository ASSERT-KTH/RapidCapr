{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal();\n\n    call = ObjectType.cast(safeResolve(call, t, scope));\n    prototype = FunctionType.cast(safeResolve(prototype, t, scope));\n\n    typeOfThis = ObjectType.cast(safeResolve(typeOfThis, t, scope));\n\n    boolean changed = false;\n    ImmutableList.Builder<JSType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (JSType iface : implementedInterfaces) {\n      JSType resolvedIface = iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, FunctionType.cast(subTypes.get(i).resolve(t, scope)));\n      }\n    }\n\n    return setResolvedTypeFrom(\n        call,\n        prototype,\n        typeOfThis,\n        implementedInterfaces,\n        subTypes);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..0363a8bf 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -860,21 +860,18 @@ public class FunctionType extends PrototypeObjectType {\n \n   @Override\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n-    setResolvedTypeInternal(this);\n+    setResolvedTypeInternal();\n \n-    call = (ArrowType) safeResolve(call, t, scope);\n-    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n+    call = ObjectType.cast(safeResolve(call, t, scope));\n+    prototype = FunctionType.cast(safeResolve(prototype, t, scope));\n \n-    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n-    // is handled further upstream.\n-    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    typeOfThis = ObjectType.cast(safeResolve(typeOfThis, t, scope));\n \n     boolean changed = false;\n-    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n+    ImmutableList.Builder<JSType> resolvedInterfaces =\n         ImmutableList.builder();\n-    for (ObjectType iface : implementedInterfaces) {\n-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n+    for (JSType iface : implementedInterfaces) {\n+      JSType resolvedIface = iface.resolve(t, scope);\n       resolvedInterfaces.add(resolvedIface);\n       changed |= (resolvedIface != iface);\n     }\n@@ -884,11 +881,16 @@ public class FunctionType extends PrototypeObjectType {\n \n     if (subTypes != null) {\n       for (int i = 0; i < subTypes.size(); i++) {\n-        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n+        subTypes.set(i, FunctionType.cast(subTypes.get(i).resolve(t, scope)));\n       }\n     }\n \n-    return super.resolveInternal(t, scope);\n+    return setResolvedTypeFrom(\n+        call,\n+        prototype,\n+        typeOfThis,\n+        implementedInterfaces,\n+        subTypes);\n   }\n \n   @Override",
    "result_reason": "error: method setResolvedTypeInternal in class JSType cannot be applied to given types;",
    "test_result": "ERROR"
}