{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    if(seqEnd - index < 2) {\n        return 0;\n    }\n\n    if(input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n        return 0;\n    }\n\n    int start = index + 2;\n    boolean isHex = false;\n    if(start < seqEnd && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n        start++;\n        isHex = true;\n    }\n\n    int end = start;\n    while(end < seqEnd && input.charAt(end) != ';') {\n        if(!Character.isDigit(input.charAt(end)) && (!isHex || !Character.isLetter(input.charAt(end)))) {\n            return 0;\n        }\n        end++;\n    }\n\n    if(end >= seqEnd || input.charAt(end) != ';') {\n        return 0;\n    }\n\n    String entityString = input.subSequence(start, end).toString();\n    if(entityString.isEmpty()) {\n        return 0;\n    }\n\n    int entityValue = 0;\n    try {\n        entityValue = Integer.parseInt(entityString, isHex ? 16 : 10);\n    } catch(NumberFormatException e) {\n        return 0;\n    }\n\n    if(entityValue < 0 || (entityValue >= 0xD800 && entityValue <= 0xDFFF) || entityValue > 0x10FFFF) {\n        return 0;\n    }\n\n    if(entityValue >= Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n        char[] chars = Character.toChars(entityValue);\n        out.write(chars[0]);\n        out.write(chars[1]);\n    } else {\n        out.write(entityValue);\n    }\n\n    return end + 1 - index;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..60e996b7 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,59 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n+    if(seqEnd - index < 2) {\n+        return 0;\n+    }\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n+    if(input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n+        return 0;\n+    }\n \n-                // Check there's more than just an x after the &#\n-            }\n+    int start = index + 2;\n+    boolean isHex = false;\n+    if(start < seqEnd && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n+        start++;\n+        isHex = true;\n+    }\n \n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n-            }\n+    int end = start;\n+    while(end < seqEnd && input.charAt(end) != ';') {\n+        if(!Character.isDigit(input.charAt(end)) && (!isHex || !Character.isLetter(input.charAt(end)))) {\n+            return 0;\n+        }\n+        end++;\n+    }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n-                return 0;\n-            }\n+    if(end >= seqEnd || input.charAt(end) != ';') {\n+        return 0;\n+    }\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n-            } else {\n-                out.write(entityValue);\n-            }\n+    String entityString = input.subSequence(start, end).toString();\n+    if(entityString.isEmpty()) {\n+        return 0;\n+    }\n \n+    int entityValue = 0;\n+    try {\n+        entityValue = Integer.parseInt(entityString, isHex ? 16 : 10);\n+    } catch(NumberFormatException e) {\n+        return 0;\n+    }\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n-        }\n+    if(entityValue < 0 || (entityValue >= 0xD800 && entityValue <= 0xDFFF) || entityValue > 0x10FFFF) {\n         return 0;\n     }\n+\n+    if(entityValue >= Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n+        char[] chars = Character.toChars(entityValue);\n+        out.write(chars[0]);\n+        out.write(chars[1]);\n+    } else {\n+        out.write(entityValue);\n+    }\n+\n+    return end + 1 - index;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape index 55295 expected:<\ud7ff[?]> but was:<\ud7ff[&#xd800;]>",
    "test_result": "FAIL"
}