{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    if (typeVariable instanceof ParameterizedType) {\n        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n        if (actualTypeArgument == null) {\n            if (bounds.length > 0) {\n                actualTypeArgument = bounds[0];\n            } else {\n                actualTypeArgument = Object.class;\n            }\n        }\n        registerTypeVariablesOn(actualTypeArgument);\n    } else {\n        if (bounds.length == 0) {\n            registerTypeVariablesOn(Object.class);\n        } else {\n            for (Type bound : bounds) {\n                registerTypeVariablesOn(bound);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..52e411478 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,10 +372,33 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n+\n         private void readTypeVariables() {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (typeVariable instanceof ParameterizedType) {\n+        Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+        if (actualTypeArgument == null) {\n+            if (bounds.length > 0) {\n+                actualTypeArgument = bounds[0];\n+            } else {\n+                actualTypeArgument = Object.class;\n+            }\n+        }\n+        registerTypeVariablesOn(actualTypeArgument);\n+    } else {\n+        if (bounds.length == 0) {\n+            registerTypeVariablesOn(Object.class);\n+        } else {\n+            for (Type bound : bounds) {\n+                registerTypeVariablesOn(bound);\n+            }\n+        }\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}