{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix v = dec.getV();\n    final RealMatrix d = dec.getD();\n    final RealMatrix dSqrt = MatrixUtils.createRealMatrix(d.getRowDimension(), d.getColumnDimension());\n    \n    for (int i = 0; i < d.getRowDimension(); i++) {\n        if (d.getEntry(i,i) >= 0) {\n            dSqrt.setEntry(i,i, Math.sqrt(d.getEntry(i,i)));\n        } else {\n            throw new IllegalArgumentException(\"Matrix must be positive definite\");\n        }\n    }\n    \n    final RealMatrix vTimesD = v.multiply(dSqrt);\n    final RealMatrix dSqrtTimesVInverse = v.transpose().multiply(dSqrt);\n    return vTimesD.multiply(dSqrtTimesVInverse);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..9f5ea5065 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,22 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix v = dec.getV();\n+    final RealMatrix d = dec.getD();\n+    final RealMatrix dSqrt = MatrixUtils.createRealMatrix(d.getRowDimension(), d.getColumnDimension());\n+    \n+    for (int i = 0; i < d.getRowDimension(); i++) {\n+        if (d.getEntry(i,i) >= 0) {\n+            dSqrt.setEntry(i,i, Math.sqrt(d.getEntry(i,i)));\n+        } else {\n+            throw new IllegalArgumentException(\"Matrix must be positive definite\");\n+        }\n     }\n+    \n+    final RealMatrix vTimesD = v.multiply(dSqrt);\n+    final RealMatrix dSqrtTimesVInverse = v.transpose().multiply(dSqrt);\n+    return vTimesD.multiply(dSqrtTimesVInverse);\n+}\n }",
    "result_reason": "java.lang.OutOfMemoryError: Java heap space",
    "test_result": "FAIL"
}