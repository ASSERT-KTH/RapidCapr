{
    "patch": "if (val == null || val.length() == 0) {\n    throw new NumberFormatException(val + \" is not a valid number.\");\n}\nif (val.startsWith(\"--\")) {\n    // this is protection for poorness in java.lang.BigDecimal.\n    // it accepts this as a legal value, but it does not appear \n    // to be in specification of class. OS X Java parses it to \n    // a wrong value.\n    return null;\n}\nchar firstChar = val.charAt(0);\nif (val.length() == 1 && !Character.isDigit(firstChar) && firstChar != '-') {\n    throw new NumberFormatException(val + \" is not a valid number.\");\n}\nboolean startsWithZero = (firstChar == '0');\nif (!startsWithZero) {\n    for (int i = 1; i < val.length(); i++) {\n        if (!Character.isDigit(val.charAt(i))) {\n            return createDouble(val);\n        }\n    }\n    if (val.length() <= 10) {\n        return createInteger(val);\n    } else if (val.length() <= 19) {\n        return createLong(val);\n    } else {\n        return createBigInteger(val);\n    }\n} else {\n    if (val.length() <= 2) {\n        throw new NumberFormatException(val + \" is not a valid number.\");\n    }\n    for (int i = 1; i < val.length(); i++) {\n        if (!Character.isDigit(val.charAt(i))) {\n            return createDouble(val);\n        }\n    }\n    return createInteger(val);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..9f466064 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,45 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+if (val == null || val.length() == 0) {\n+    throw new NumberFormatException(val + \" is not a valid number.\");\n+}\n+if (val.startsWith(\"--\")) {\n+    // this is protection for poorness in java.lang.BigDecimal.\n+    // it accepts this as a legal value, but it does not appear \n+    // to be in specification of class. OS X Java parses it to \n+    // a wrong value.\n+    return null;\n+}\n+char firstChar = val.charAt(0);\n+if (val.length() == 1 && !Character.isDigit(firstChar) && firstChar != '-') {\n+    throw new NumberFormatException(val + \" is not a valid number.\");\n+}\n+boolean startsWithZero = (firstChar == '0');\n+if (!startsWithZero) {\n+    for (int i = 1; i < val.length(); i++) {\n+        if (!Character.isDigit(val.charAt(i))) {\n+            return createDouble(val);\n+        }\n+    }\n+    if (val.length() <= 10) {\n+        return createInteger(val);\n+    } else if (val.length() <= 19) {\n+        return createLong(val);\n+    } else {\n+        return createBigInteger(val);\n+    }\n+} else {\n+    if (val.length() <= 2) {\n+        throw new NumberFormatException(val + \" is not a valid number.\");\n+    }\n+    for (int i = 1; i < val.length(); i++) {\n+        if (!Character.isDigit(val.charAt(i))) {\n+            return createDouble(val);\n+        }\n+    }\n+    return createInteger(val);\n+}\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}