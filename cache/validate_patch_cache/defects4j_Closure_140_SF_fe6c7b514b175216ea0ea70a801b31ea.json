{
    "patch": "  /**\n   * Returns the node to use for insertion of new JS code when given the module to insert into.\n   * If null is passed as the module, the first input node is used.\n   * If the module has no input nodes, it tries other modules transitively, working from deepest\n   * dependencies to shallowest.\n   * If no module has input nodes, throws IllegalStateException.\n   */\n  @Override\n  Node getNodeForCodeInsertion(JSModule module) {\n    if (module == null) {\n      if (inputs.length == 0) {\n        throw new IllegalStateException(\"No inputs\");\n      }\n\n      return inputs[0].getAstRoot(this);\n    }\n\n    List<CompilerInput> inputs = module.getInputs();\n    if (inputs.size() > 0) {\n      return inputs.get(0).getAstRoot(this);\n    }\n\n    for (JSModule otherModule : getModuleGraph().getModulesByTransitiveDependencyOrder(module)) {\n      if (otherModule.equals(module)) {\n        continue;\n      }\n      inputs = otherModule.getInputs();\n\n      if (inputs.size() > 0) {\n        return inputs.get(0).getAstRoot(this);\n      }\n    }\n    throw new IllegalStateException(\"No input nodes found for module \" + module.getName());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex d2524b4f..bd042173 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -256,43 +256,39 @@ public class Compiler extends AbstractCompiler {\n   /**\n    * Initializes the instance state needed for a compile job.\n    */\n-  public void init(JSSourceFile[] externs, JSModule[] modules,\n-      CompilerOptions options) {\n-    initOptions(options);\n+  /**\n+   * Returns the node to use for insertion of new JS code when given the module to insert into.\n+   * If null is passed as the module, the first input node is used.\n+   * If the module has no input nodes, it tries other modules transitively, working from deepest\n+   * dependencies to shallowest.\n+   * If no module has input nodes, throws IllegalStateException.\n+   */\n+  @Override\n+  Node getNodeForCodeInsertion(JSModule module) {\n+    if (module == null) {\n+      if (inputs.length == 0) {\n+        throw new IllegalStateException(\"No inputs\");\n+      }\n \n-    checkFirstModule(modules);\n+      return inputs[0].getAstRoot(this);\n+    }\n \n-    this.externs = makeCompilerInput(externs, true);\n-    this.modules = modules;\n-    // Generate the module graph, and report any errors in the module\n-    // specification as errors.\n-    try {\n-      this.moduleGraph = new JSModuleGraph(modules);\n-    } catch (JSModuleGraph.ModuleDependenceException e) {\n-      // problems with the module format.  Report as an error.  The\n-      // message gives all details.\n-      report(JSError.make(MODULE_DEPENDENCY_ERROR,\n-          e.getModule().getName(), e.getDependentModule().getName()));\n-      return;\n+    List<CompilerInput> inputs = module.getInputs();\n+    if (inputs.size() > 0) {\n+      return inputs.get(0).getAstRoot(this);\n     }\n-    this.inputs = getAllInputsFromModules();\n-    initBasedOnOptions();\n \n-    initInputsByNameMap();\n-  }\n+    for (JSModule otherModule : getModuleGraph().getModulesByTransitiveDependencyOrder(module)) {\n+      if (otherModule.equals(module)) {\n+        continue;\n+      }\n+      inputs = otherModule.getInputs();\n \n-  /**\n-   * Do any initialization that is dependent on the compiler options.\n-   */\n-  private void initBasedOnOptions() {\n-    // Create the source map if necessary.\n-    if (options.sourceMapOutputPath != null) {\n-      sourceMap = new SourceMap();\n+      if (inputs.size() > 0) {\n+        return inputs.get(0).getAstRoot(this);\n+      }\n     }\n-  }\n-\n-  private CompilerInput[] makeCompilerInput(\n-      JSSourceFile[] files, boolean isExtern) {\n+    throw new IllegalStateException(\"No input nodes found for module \" + module.getName());\n     CompilerInput [] inputs = new CompilerInput[files.length];\n     for (int i = 0; i < files.length; ++i) {\n       inputs[i] = new CompilerInput(files[i], isExtern);",
    "result_reason": "error: method getNodeForCodeInsertion(JSModule) is already defined in class Compiler",
    "test_result": "ERROR"
}