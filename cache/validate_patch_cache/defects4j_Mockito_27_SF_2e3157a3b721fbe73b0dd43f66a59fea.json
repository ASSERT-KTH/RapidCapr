{
    "patch": "public <T> void resetMock(T mock) {\n    Factory factory = (Factory) mock;\n    SerializerFactory serializerFactory = KryoHolder.getKryo().getDefaultSerializerFactory();\n    Class<?> type = factory.getCallbackType();\n    for (int i = 0; i < factory.getCallbackCount(); i++) {\n        if (factory.getCallback(i) instanceof MethodInterceptorFilter) {\n            ((MethodInterceptorFilter) factory.getCallback(i)).setHandler(new MockHandler<T>(getMockHandler(mock)));\n        } else {\n            factory.setCallback(i, new MethodInterceptorFilter(new MockHandler<T>(getMockHandler(mock)), serializerFactory, type));\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..21d97d34e 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,19 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+public <T> void resetMock(T mock) {\n+    Factory factory = (Factory) mock;\n+    SerializerFactory serializerFactory = KryoHolder.getKryo().getDefaultSerializerFactory();\n+    Class<?> type = factory.getCallbackType();\n+    for (int i = 0; i < factory.getCallbackCount(); i++) {\n+        if (factory.getCallback(i) instanceof MethodInterceptorFilter) {\n+            ((MethodInterceptorFilter) factory.getCallback(i)).setHandler(new MockHandler<T>(getMockHandler(mock)));\n+        } else {\n+            factory.setCallback(i, new MethodInterceptorFilter(new MockHandler<T>(getMockHandler(mock)), serializerFactory, type));\n+        }\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}