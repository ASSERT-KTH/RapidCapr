{
    "patch": "if (block != ref.getBasicBlock()) {\n    // We can't tell whether the referenced variable is reassigned elsewhere in this block.\n    return false;\n} else if (block.isLoop) {\n    // We can't tell whether the loop will execute or not.\n    return false;\n} else if (block.isFunction) {\n    // Function declarations have their own variable scope.\n    return block.equals(ref.getBasicBlock());\n} else {\n    // If the block is not the one containing the assignment, the variable may be modified elsewhere.\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..5b336a98 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,19 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (block != ref.getBasicBlock()) {\n+    // We can't tell whether the referenced variable is reassigned elsewhere in this block.\n+    return false;\n+} else if (block.isLoop) {\n+    // We can't tell whether the loop will execute or not.\n+    return false;\n+} else if (block.isFunction) {\n+    // Function declarations have their own variable scope.\n+    return block.equals(ref.getBasicBlock());\n+} else {\n+    // If the block is not the one containing the assignment, the variable may be modified elsewhere.\n+    return true;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}