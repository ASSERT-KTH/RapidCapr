{
    "patch": "      if (n.getFirstChild().getType() == Token.NAME) {\n        Node parentParent = parent.getParent();\n        // Recursing on the top-level assign node to handle\n        // cases such as: var a = b = function(){}; and\n        // var ns = ns || {};\n        if (parentParent != null &&\n            parentParent.getType() == Token.ASSIGN &&\n            parentParent.getFirstChild() == parent) {\n          return shouldTraverse(t, parentParent, parentParent.getParent());\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..feeb86e3 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,16 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (n.getFirstChild().getType() == Token.NAME) {\n+        Node parentParent = parent.getParent();\n+        // Recursing on the top-level assign node to handle\n+        // cases such as: var a = b = function(){}; and\n+        // var ns = ns || {};\n+        if (parentParent != null &&\n+            parentParent.getType() == Token.ASSIGN &&\n+            parentParent.getFirstChild() == parent) {\n+          return shouldTraverse(t, parentParent, parentParent.getParent());\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}