{
    "patch": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n      double v1Magnitude = v1.getNorm();\n      double v2Magnitude = v2.getNorm();\n      final double maxMagnitude = FastMath.max(v1Magnitude, v2Magnitude);\n      final double eps = maxMagnitude * 2.220446049250313E-16; // default precision\n      if (eps == 0) {\n          eps = 1e-16; // for extremely small vectors\n      }\n      double rho;\n      Vector3D rescaledVector1;\n      Vector3D rescaledVector2;\n      final boolean v1IsSmaller = v1Magnitude < v2Magnitude;\n      if (v1IsSmaller) {\n          rho = dotProduct(v1, v2) / v2Magnitude;\n          rescaledVector1 = v1;\n          rescaledVector2 = new Vector3D(rho, v2);\n      } else {\n          rho = dotProduct(v2, v1) / v1Magnitude;\n          rescaledVector2 = v2;\n          rescaledVector1 = new Vector3D(rho, v1);\n      }\n\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      double x = rescaledVector1.y * rescaledVector2.z - rescaledVector1.z * rescaledVector2.y;\n      double y = rescaledVector1.z * rescaledVector2.x - rescaledVector1.x * rescaledVector2.z;\n      double z = rescaledVector1.x * rescaledVector2.y - rescaledVector1.y * rescaledVector2.x;\n\n      // compensate the effect of rescaling\n      double xmag = FastMath.abs(x);\n      double ymag = FastMath.abs(y);\n      double zmag = FastMath.abs(z);\n      if (v1IsSmaller) {\n          xmag *= v2Magnitude / maxMagnitude;\n          ymag *= v2Magnitude / maxMagnitude;\n          zmag *= v2Magnitude / maxMagnitude;\n      } else {\n          xmag *= v1Magnitude / maxMagnitude;\n          ymag *= v1Magnitude / maxMagnitude;\n          zmag *= v1Magnitude / maxMagnitude;\n      }\n      if ((FastMath.max(xmag, FastMath.max(ymag, zmag))) < eps) {\n          return new Vector3D(0, 0, 0);\n      }\n      return new Vector3D(x, y, z);\n\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..b3f50b0ab 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -459,8 +459,27 @@ public class Vector3D implements Serializable {\n \n       // rescale both vectors without losing precision,\n       // to ensure their norm are the same order of magnitude\n+      double v1Magnitude = v1.getNorm();\n+      double v2Magnitude = v2.getNorm();\n+      final double maxMagnitude = FastMath.max(v1Magnitude, v2Magnitude);\n+      final double eps = maxMagnitude * 2.220446049250313E-16; // default precision\n+      if (eps == 0) {\n+          eps = 1e-16; // for extremely small vectors\n+      }\n+      double rho;\n+      Vector3D rescaledVector1;\n+      Vector3D rescaledVector2;\n+      final boolean v1IsSmaller = v1Magnitude < v2Magnitude;\n+      if (v1IsSmaller) {\n+          rho = dotProduct(v1, v2) / v2Magnitude;\n+          rescaledVector1 = v1;\n+          rescaledVector2 = new Vector3D(rho, v2);\n+      } else {\n+          rho = dotProduct(v2, v1) / v1Magnitude;\n+          rescaledVector2 = v2;\n+          rescaledVector1 = new Vector3D(rho, v1);\n+      }\n \n-      // we reduce cancellation errors by preconditioning,\n       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n       // v3 without loss of precision. See Kahan lecture\n       // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n@@ -470,7 +489,27 @@ public class Vector3D implements Serializable {\n \n \n       // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+      double x = rescaledVector1.y * rescaledVector2.z - rescaledVector1.z * rescaledVector2.y;\n+      double y = rescaledVector1.z * rescaledVector2.x - rescaledVector1.x * rescaledVector2.z;\n+      double z = rescaledVector1.x * rescaledVector2.y - rescaledVector1.y * rescaledVector2.x;\n+\n+      // compensate the effect of rescaling\n+      double xmag = FastMath.abs(x);\n+      double ymag = FastMath.abs(y);\n+      double zmag = FastMath.abs(z);\n+      if (v1IsSmaller) {\n+          xmag *= v2Magnitude / maxMagnitude;\n+          ymag *= v2Magnitude / maxMagnitude;\n+          zmag *= v2Magnitude / maxMagnitude;\n+      } else {\n+          xmag *= v1Magnitude / maxMagnitude;\n+          ymag *= v1Magnitude / maxMagnitude;\n+          zmag *= v1Magnitude / maxMagnitude;\n+      }\n+      if ((FastMath.max(xmag, FastMath.max(ymag, zmag))) < eps) {\n+          return new Vector3D(0, 0, 0);\n+      }\n+      return new Vector3D(x, y, z);\n \n   }\n ",
    "result_reason": "error: cannot assign a value to final variable eps",
    "test_result": "ERROR"
}