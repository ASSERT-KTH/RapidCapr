{
    "patch": "      Node grandParent = parent.getParent();\n      if (grandParent.getType() == Token.CALL) {\n        Node method = grandParent.getFirstChild();\n        if (method.getType() == Token.GETPROP &&\n            \"prototype\".equals(method.getLastChild().getString())) {\n          return false;\n        }\n      } else if (grandParent.getType() == Token.ASSIGN) {\n        Node rhs = grandParent.getLastChild();\n        if (rhs != n &&\n            rhs.getType() == Token.FUNCTION &&\n            rhs.getFirstChild() != null &&\n            rhs.getFirstChild().getType() == Token.STRING &&\n           \"@constructor\".equals(rhs.getFirstChild().getString())) {\n          return false;\n        }\n      } else if (grandParent.getType() == Token.OBJECTLIT) {\n        return false;\n      } else if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface())) {\n         Node curNode = n;\n         while(curNode.getParent() != null && curNode.getParent().getType() == Token.DOT) {\n           curNode = curNode.getParent();\n         }\n         if (curNode.getParent() != null && curNode.getParent().getType() == Token.NEW) {\n           return true;\n         }\n         return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..cabd598c 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,33 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node grandParent = parent.getParent();\n+      if (grandParent.getType() == Token.CALL) {\n+        Node method = grandParent.getFirstChild();\n+        if (method.getType() == Token.GETPROP &&\n+            \"prototype\".equals(method.getLastChild().getString())) {\n+          return false;\n+        }\n+      } else if (grandParent.getType() == Token.ASSIGN) {\n+        Node rhs = grandParent.getLastChild();\n+        if (rhs != n &&\n+            rhs.getType() == Token.FUNCTION &&\n+            rhs.getFirstChild() != null &&\n+            rhs.getFirstChild().getType() == Token.STRING &&\n+           \"@constructor\".equals(rhs.getFirstChild().getString())) {\n+          return false;\n+        }\n+      } else if (grandParent.getType() == Token.OBJECTLIT) {\n+        return false;\n+      } else if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface())) {\n+         Node curNode = n;\n+         while(curNode.getParent() != null && curNode.getParent().getType() == Token.DOT) {\n+           curNode = curNode.getParent();\n+         }\n+         if (curNode.getParent() != null && curNode.getParent().getType() == Token.NEW) {\n+           return true;\n+         }\n+         return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}