{
    "patch": "            Optional<Object> candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n            if(candidate.isPresent()) {\n                field.setAccessible(true);\n                try {\n                    field.set(fieldInstance, candidate.get());\n                } catch(IllegalAccessException e) {\n                    throw new RuntimeException(\"Unable to inject mock candidate\", e);\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..82c77f00b 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,18 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            Optional<Object> candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            if(candidate.isPresent()) {\n+                field.setAccessible(true);\n+                try {\n+                    field.set(fieldInstance, candidate.get());\n+                } catch(IllegalAccessException e) {\n+                    throw new RuntimeException(\"Unable to inject mock candidate\", e);\n+                }\n+            }\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}