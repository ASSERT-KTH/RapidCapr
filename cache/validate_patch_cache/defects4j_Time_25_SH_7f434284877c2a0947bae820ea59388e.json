{
    "patch": "        if (offsetLocal != offsetAdjusted) {\n            // we are near DST boundary, so ...\n            final long instantBefore = instantLocal - offsetLocal;\n            final int offsetBefore = getOffset(instantBefore);\n            final long instantAfter = instantLocal - offsetAdjusted;\n            final int offsetAfter = getOffset(instantAfter);\n\n            if (offsetBefore == offsetAfter) {\n                return offsetAdjusted;\n            }\n\n            if (offsetLocal < offsetAdjusted) {\n                final long transitionTime = nextTransition(instantBefore);\n                if (transitionTime <= instantAfter) {\n                    return offsetLocal;\n                }\n            } else {\n                final long transitionTime = previousTransition(instantLocal - offsetAdjusted);\n                if (transitionTime > instantBefore) {\n                    return offsetLocal;\n                }\n            }\n        }\n        return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..6ccf2619 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,30 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+        if (offsetLocal != offsetAdjusted) {\n+            // we are near DST boundary, so ...\n+            final long instantBefore = instantLocal - offsetLocal;\n+            final int offsetBefore = getOffset(instantBefore);\n+            final long instantAfter = instantLocal - offsetAdjusted;\n+            final int offsetAfter = getOffset(instantAfter);\n+\n+            if (offsetBefore == offsetAfter) {\n+                return offsetAdjusted;\n+            }\n+\n+            if (offsetLocal < offsetAdjusted) {\n+                final long transitionTime = nextTransition(instantBefore);\n+                if (transitionTime <= instantAfter) {\n+                    return offsetLocal;\n+                }\n+            } else {\n+                final long transitionTime = previousTransition(instantLocal - offsetAdjusted);\n+                if (transitionTime > instantBefore) {\n+                    return offsetLocal;\n+                }\n+            }\n+        }\n+        return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-03-25T01:00:00.000+03:00 expected:<2007-03-25T0[3:00:00.000+04]:00> but was:<2007-03-25T0[1:00:00.000+03]:00>",
    "test_result": "FAIL"
}