{
    "patch": "            // check saved fields after setting them\n            for (int i = 0; i < count; i++) {\n                int expectedValue = savedFields[i].iValue;\n                DateTimeField field = savedFields[i].iField;\n                int minValue = field.getMinimumValue();\n                int maxValue = field.getMaximumValue();\n                int value = field.get(millis);\n\n                if (value < minValue || value > maxValue || (i == 0 && value < expectedValue)) {\n                    throw new IllegalFieldValueException(field.getType(), Integer.valueOf(value), Integer.valueOf(minValue), Integer.valueOf(maxValue), savedFields[i].getHumanReadablePartial());\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..190bde38 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,18 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            // check saved fields after setting them\n+            for (int i = 0; i < count; i++) {\n+                int expectedValue = savedFields[i].iValue;\n+                DateTimeField field = savedFields[i].iField;\n+                int minValue = field.getMinimumValue();\n+                int maxValue = field.getMaximumValue();\n+                int value = field.get(millis);\n+\n+                if (value < minValue || value > maxValue || (i == 0 && value < expectedValue)) {\n+                    throw new IllegalFieldValueException(field.getType(), Integer.valueOf(value), Integer.valueOf(minValue), Integer.valueOf(maxValue), savedFields[i].getHumanReadablePartial());\n+                }\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}