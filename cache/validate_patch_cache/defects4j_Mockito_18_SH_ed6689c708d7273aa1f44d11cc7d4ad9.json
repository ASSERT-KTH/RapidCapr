{
    "patch": "public Object execute(MethodCall call) {\n    ReturnValue values = new ReturnValue();\n    try {\n        values.setReturnValue(call.getMethod().invoke(targetObject, call.getArguments()));\n    } catch (Exception e) {\n        values.setException(e);\n    }\n    if (values.getException() != null) {\n        throw new AutomatedException(\"Exception occured\", values.getException());\n    } else {\n        if (Iterable.class.isAssignableFrom(call.getMethod().getReturnType())) {\n            Iterable<?> iterable = (Iterable<?>) values.getReturnValue();\n            if (!iterable.iterator().hasNext()) {\n                values.setReturnValue(null);\n            }\n        }\n    }\n    return values.getReturnValue();\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..cddcbdc6b 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}