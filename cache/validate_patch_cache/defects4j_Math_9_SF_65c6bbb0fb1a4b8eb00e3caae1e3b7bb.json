{
    "patch": "public Line revert() {\n    final Vector3D negDirection = direction.negate();\n    final double[] roundedNegDirection = {Math.round(negDirection.getX()*1e10)/1e10, Math.round(negDirection.getY()*1e10)/1e10, Math.round(negDirection.getZ()*1e10)/1e10};\n    final Vector3D roundedDirection = new Vector3D(roundedNegDirection[0], roundedNegDirection[1], roundedNegDirection[2]);\n    return new Line(direction.add(getOrigin()), roundedDirection);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..84214bb46 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,12 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n-    public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n-    }\n+public Line revert() {\n+    final Vector3D negDirection = direction.negate();\n+    final double[] roundedNegDirection = {Math.round(negDirection.getX()*1e10)/1e10, Math.round(negDirection.getY()*1e10)/1e10, Math.round(negDirection.getZ()*1e10)/1e10};\n+    final Vector3D roundedDirection = new Vector3D(roundedNegDirection[0], roundedNegDirection[1], roundedNegDirection[2]);\n+    return new Line(direction.add(getOrigin()), roundedDirection);\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "junit.framework.AssertionFailedError: arrays first differed at element [0]; expected:<0.028581782127907646> but was:<-0.2572360301334216>",
    "test_result": "FAIL"
}