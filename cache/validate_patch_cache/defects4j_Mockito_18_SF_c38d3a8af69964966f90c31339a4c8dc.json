{
    "patch": "import java.util.ArrayList;\n\npublic class ValueHolder<T> {\n    private T value;\n\n    public ValueHolder(T value) {\n        this.value = value;\n    }\n\n    public T getValue() {\n        return value;\n    }\n\n    public void setValue(T value) {\n        this.value = value;\n    }\n\n    public <R> R returnValueFor(Class<R> clazz) {\n        ArrayList<String> strings = new ArrayList<>();\n        strings.add(\"\");\n\n        if (clazz.equals(Integer.class)) {\n            return clazz.cast(Integer.parseInt(value.toString()));\n        } else if (clazz.equals(Double.class)) {\n            return clazz.cast(Double.parseDouble(value.toString()));\n        } else if (clazz.equals(String.class)) {\n            return clazz.cast(String.valueOf(value));\n        } else if (clazz.equals(Iterable.class)) {\n            return clazz.cast(strings);\n        } else {\n            return null;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 06697e527..6e95615f8 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -84,7 +84,40 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             return Primitives.defaultValueForPrimitiveOrWrapper(type);\n             //new instances are used instead of Collections.emptyList(), etc.\n             //to avoid UnsupportedOperationException if code under test modifies returned collection\n-        } else if (type == Collection.class) {\n+import java.util.ArrayList;\n+\n+public class ValueHolder<T> {\n+    private T value;\n+\n+    public ValueHolder(T value) {\n+        this.value = value;\n+    }\n+\n+    public T getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(T value) {\n+        this.value = value;\n+    }\n+\n+    public <R> R returnValueFor(Class<R> clazz) {\n+        ArrayList<String> strings = new ArrayList<>();\n+        strings.add(\"\");\n+\n+        if (clazz.equals(Integer.class)) {\n+            return clazz.cast(Integer.parseInt(value.toString()));\n+        } else if (clazz.equals(Double.class)) {\n+            return clazz.cast(Double.parseDouble(value.toString()));\n+        } else if (clazz.equals(String.class)) {\n+            return clazz.cast(String.valueOf(value));\n+        } else if (clazz.equals(Iterable.class)) {\n+            return clazz.cast(strings);\n+        } else {\n+            return null;\n+        }\n+    }\n+}\n             return new LinkedList<Object>();\n         } else if (type == Set.class) {\n             return new HashSet<Object>();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}