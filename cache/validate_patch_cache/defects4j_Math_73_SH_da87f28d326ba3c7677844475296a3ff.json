{
    "patch": "        // check if function values at endpoints are finite and have different signs\n        boolean endpointsBracketRoot = ((yMin <= 0 && yMax >= 0) || (yMax <= 0 && yMin >= 0)) && Double.isFinite(yMin) && Double.isFinite(yMax);\n\n        // check if initial guess is finite and lies between endpoints\n        boolean initialGuessInRange = initial >= min && initial <= max && Double.isFinite(yInitial);\n\n        if (endpointsBracketRoot && initialGuessInRange) {\n            // full Brent algorithm starting with provided initial guess\n            return solve(f, min, yMin, max, yMax, initial, yInitial);\n        } else {\n            throw new IllegalArgumentException(\"Function values at endpoints do not have different signs, or initial guess is not finite or not in range of the endpoints. Endpoints: [\" + min + \",\" + max + \"], Values: [\" + yMin + \",\" + yMax + \"], Initial guess value: \" + yInitial);\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..5c23138a0 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,18 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+        // check if function values at endpoints are finite and have different signs\n+        boolean endpointsBracketRoot = ((yMin <= 0 && yMax >= 0) || (yMax <= 0 && yMin >= 0)) && Double.isFinite(yMin) && Double.isFinite(yMax);\n+\n+        // check if initial guess is finite and lies between endpoints\n+        boolean initialGuessInRange = initial >= min && initial <= max && Double.isFinite(yInitial);\n+\n+        if (endpointsBracketRoot && initialGuessInRange) {\n+            // full Brent algorithm starting with provided initial guess\n+            return solve(f, min, yMin, max, yMax, initial, yInitial);\n+        } else {\n+            throw new IllegalArgumentException(\"Function values at endpoints do not have different signs, or initial guess is not finite or not in range of the endpoints. Endpoints: [\" + min + \",\" + max + \"], Values: [\" + yMin + \",\" + yMax + \"], Initial guess value: \" + yInitial);\n+        }\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}