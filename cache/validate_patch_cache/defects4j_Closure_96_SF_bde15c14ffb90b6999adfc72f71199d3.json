{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n    FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  while (arguments.hasNext() && parameters.hasNext()) {\n    Node parameter = parameters.next();\n    Node argument = arguments.next();\n    ordinal++;\n    validator.expectArgumentMatchesParameter(t, argument,\n        getJSType(argument), getJSType(parameter), call, ordinal);\n  }\n\n  int numArgs = call.getChildCount() - 1; // Excluding function name\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  int nonVarArgCount = functionType.getNonVarArgsParameterCount();\n  int varArgCount = numArgs - nonVarArgCount;\n\n  if (numArgs < minArgs) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs),\n        String.valueOf(minArgs) + \" argument(s) expected\",\n        \"\");\n  } else if (varArgCount > functionType.getMaximumArityOfVarArgs()) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs),\n        String.valueOf(nonVarArgCount) + \" fixed argument(s) expected, and at most \"\n            + functionType.getMaximumArityOfVarArgs() + \" vararg(s)\",\n        \"\");\n  } else if (maxArgs != -1 && numArgs > maxArgs) {\n    if (maxArgs == nonVarArgCount) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs),\n              String.valueOf(maxArgs) + \" argument(s) expected\");\n    } else {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs),\n              String.valueOf(nonVarArgCount) + \" fixed argument(s) expected, and at most \"\n                      + functionType.getMaximumArityOfVarArgs() + \" vararg(s)\");\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..b35e389f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,55 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n+private void visitParameterList(NodeTraversal t, Node call,\n+    FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  int ordinal = 0;\n+  while (arguments.hasNext() && parameters.hasNext()) {\n+    Node parameter = parameters.next();\n+    Node argument = arguments.next();\n+    ordinal++;\n+    validator.expectArgumentMatchesParameter(t, argument,\n+        getJSType(argument), getJSType(parameter), call, ordinal);\n+  }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n+  int numArgs = call.getChildCount() - 1; // Excluding function name\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+  int nonVarArgCount = functionType.getNonVarArgsParameterCount();\n+  int varArgCount = numArgs - nonVarArgCount;\n+\n+  if (numArgs < minArgs) {\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(numArgs),\n+        String.valueOf(minArgs) + \" argument(s) expected\",\n+        \"\");\n+  } else if (varArgCount > functionType.getMaximumArityOfVarArgs()) {\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(numArgs),\n+        String.valueOf(nonVarArgCount) + \" fixed argument(s) expected, and at most \"\n+            + functionType.getMaximumArityOfVarArgs() + \" vararg(s)\",\n+        \"\");\n+  } else if (maxArgs != -1 && numArgs > maxArgs) {\n+    if (maxArgs == nonVarArgCount) {\n+      report(t, call, WRONG_ARGUMENT_COUNT,\n+              validator.getReadableJSTypeName(call.getFirstChild(), false),\n+              String.valueOf(numArgs),\n+              String.valueOf(maxArgs) + \" argument(s) expected\");\n+    } else {\n       report(t, call, WRONG_ARGUMENT_COUNT,\n               validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+              String.valueOf(numArgs),\n+              String.valueOf(nonVarArgCount) + \" fixed argument(s) expected, and at most \"\n+                      + functionType.getMaximumArityOfVarArgs() + \" vararg(s)\");\n     }\n   }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}