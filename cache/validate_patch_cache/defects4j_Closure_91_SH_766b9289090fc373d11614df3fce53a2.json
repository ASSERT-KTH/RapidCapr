{
    "patch": "      if (parent != null && parent.getType() == Token.GETPROP &&\n          \"prototype\".equals(parent.getLastChild().getString()) &&\n          parent.getParent() != null && parent.getParent().getType() == Token.ASSIGN) {\n        Node assign = parent.getParent();\n        if (assign.getNext() != null && assign.getNext().getType() == Token.FUNCTION) {\n          return false;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..8aa6eb6e 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,13 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.GETPROP &&\n+          \"prototype\".equals(parent.getLastChild().getString()) &&\n+          parent.getParent() != null && parent.getParent().getType() == Token.ASSIGN) {\n+        Node assign = parent.getParent();\n+        if (assign.getNext() != null && assign.getNext().getType() == Token.FUNCTION) {\n+          return false;\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}