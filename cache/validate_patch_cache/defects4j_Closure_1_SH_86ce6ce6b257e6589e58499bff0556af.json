{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n\n      for (Node currentActualParam : argList.children()) {\n        String currentActualParamName = currentActualParam.getString();\n        if (!referenced.contains(fnScope.getVar(currentActualParamName))) {\n          for (Node currentParam : function.getFirstChild().children()) {\n            String currentParamName = currentParam.getString();\n            if (currentParamName.equals(currentActualParamName)) {\n              function.getFirstChild().removeChild(currentParam);\n              Node newValue = IR.name(BLOCK_MARKER);\n              newValue.makeNonIndexable();\n              // NodeUtil.markFunctionsDeleted may not remove the parameter list.\n              currentParam.getParent().replaceWith(\n                  newValue.useSourceInfoIfMissingFrom(currentParam));\n              currentParam.setOriginalName(null);\n              compiler.reportCodeChange();\n              break;\n            }\n          }\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..412bbc12 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,52 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+\n+      for (Node currentActualParam : argList.children()) {\n+        String currentActualParamName = currentActualParam.getString();\n+        if (!referenced.contains(fnScope.getVar(currentActualParamName))) {\n+          for (Node currentParam : function.getFirstChild().children()) {\n+            String currentParamName = currentParam.getString();\n+            if (currentParamName.equals(currentActualParamName)) {\n+              function.getFirstChild().removeChild(currentParam);\n+              Node newValue = IR.name(BLOCK_MARKER);\n+              newValue.makeNonIndexable();\n+              // NodeUtil.markFunctionsDeleted may not remove the parameter list.\n+              currentParam.getParent().replaceWith(\n+                  newValue.useSourceInfoIfMissingFrom(currentParam));\n+              currentParam.setOriginalName(null);\n+              compiler.reportCodeChange();\n+              break;\n+            }\n+          }\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}