{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    final RealMatrix eigenValues = dec.getRealEigenvalues();\n    final RealMatrix eigenVectors = dec.getV();\n    final int n = m.getColumnDimension();\n    final RealMatrix dHalf = MatrixUtils.createRealMatrix(n, n);\n    for (int i = 0; i < n; i++) {\n        final double lambda = eigenValues.getEntry(i, i);\n        if (lambda >= 0) {\n            dHalf.setEntry(i, i, FastMath.sqrt(lambda));\n        } else {\n            throw new IllegalArgumentException(\"Matrix not positive definite\");\n        }\n    }\n    final RealMatrix dHalfInv = new LUDecomposition(dHalf).getSolver().getInverse();\n    final RealMatrix sqrt = eigenVectors.multiply(dHalf.multiply(dHalfInv).multiply(eigenVectors.transpose()));\n    return sqrt;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..4f5738311 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,22 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    final RealMatrix eigenValues = dec.getRealEigenvalues();\n+    final RealMatrix eigenVectors = dec.getV();\n+    final int n = m.getColumnDimension();\n+    final RealMatrix dHalf = MatrixUtils.createRealMatrix(n, n);\n+    for (int i = 0; i < n; i++) {\n+        final double lambda = eigenValues.getEntry(i, i);\n+        if (lambda >= 0) {\n+            dHalf.setEntry(i, i, FastMath.sqrt(lambda));\n+        } else {\n+            throw new IllegalArgumentException(\"Matrix not positive definite\");\n+        }\n     }\n+    final RealMatrix dHalfInv = new LUDecomposition(dHalf).getSolver().getInverse();\n+    final RealMatrix sqrt = eigenVectors.multiply(dHalf.multiply(dHalfInv).multiply(eigenVectors.transpose()));\n+    return sqrt;\n+}\n }",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}