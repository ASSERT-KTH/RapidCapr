{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final EigenDecomposition dec = new EigenDecomposition(m);\n    RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(dec.getRealEigenvalues()\n            .stream()\n            .map(x -> FastMath.sqrt(FastMath.max(x, 0.0)))\n            .toArray());\n    RealMatrix V = dec.getV();\n    RealMatrix Vt = V.transpose();\n    return V.multiply(sqrtD).multiply(Vt);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..54a939036 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,14 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final EigenDecomposition dec = new EigenDecomposition(m);\n+    RealMatrix sqrtD = MatrixUtils.createRealDiagonalMatrix(dec.getRealEigenvalues()\n+            .stream()\n+            .map(x -> FastMath.sqrt(FastMath.max(x, 0.0)))\n+            .toArray());\n+    RealMatrix V = dec.getV();\n+    RealMatrix Vt = V.transpose();\n+    return V.multiply(sqrtD).multiply(Vt);\n+}\n }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}