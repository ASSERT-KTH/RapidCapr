{
    "patch": "                final double[] normalized = rowToPoint(normalize(init));\n                for (int i = 0; i < normalized.length; i++) {\n                    if (Double.isInfinite(normalized[i])) {\n                        throw new NumberIsTooLargeException(normalized[i], 0d, 0d, true);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..0db86dff1 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,10 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                final double[] normalized = rowToPoint(normalize(init));\n+                for (int i = 0; i < normalized.length; i++) {\n+                    if (Double.isInfinite(normalized[i])) {\n+                        throw new NumberIsTooLargeException(normalized[i], 0d, 0d, true);\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}