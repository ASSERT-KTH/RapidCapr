{
    "patch": "        /* Define block size and compute number of blocks */\n        final int blockSize = 64;\n        int numBlocks = (int) FastMath.ceil(m.getRowDimension() / (double) blockSize);\n        \n        /* Compute the square root of each block */\n        RealMatrix result = m.copy();\n        for (int i = 0; i < numBlocks; i++) {\n            int blockStart = i * blockSize;\n            int blockEnd = FastMath.min(blockStart + blockSize, m.getRowDimension());\n            RealMatrix block = m.getSubMatrix(blockStart, blockEnd - 1, blockStart, blockEnd - 1);\n            EigenDecomposition dec = new EigenDecomposition(block);\n            RealMatrix sqrtBlock = dec.getSquareRoot();\n            result.setSubMatrix(sqrtBlock.getData(), blockStart, blockStart);\n        }\n        \n        return result;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..1e715c929 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,20 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+        /* Define block size and compute number of blocks */\n+        final int blockSize = 64;\n+        int numBlocks = (int) FastMath.ceil(m.getRowDimension() / (double) blockSize);\n+        \n+        /* Compute the square root of each block */\n+        RealMatrix result = m.copy();\n+        for (int i = 0; i < numBlocks; i++) {\n+            int blockStart = i * blockSize;\n+            int blockEnd = FastMath.min(blockStart + blockSize, m.getRowDimension());\n+            RealMatrix block = m.getSubMatrix(blockStart, blockEnd - 1, blockStart, blockEnd - 1);\n+            EigenDecomposition dec = new EigenDecomposition(block);\n+            RealMatrix sqrtBlock = dec.getSquareRoot();\n+            result.setSubMatrix(sqrtBlock.getData(), blockStart, blockStart);\n+        }\n+        \n+        return result;\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}