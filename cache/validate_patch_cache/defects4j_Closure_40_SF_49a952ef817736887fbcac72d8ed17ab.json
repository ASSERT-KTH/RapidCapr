{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  if (t.inGlobalScope() && !t.getInput().isExtern()) {\n    if (NodeUtil.isNameDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      JsName name = null;\n      if (ns != null) {\n        if (ns.jsValueType == JsValueType.NAME || ns.jsValueType == JsValueType.OBJECT) {\n          name = getName(ns.name, true);\n        }\n        if (name != null) {\n          recordSet(name, nameNode);\n        }\n      }\n    }\n    if (NodeUtil.isFunctionDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      if (NodeUtil.isFunctionExpression(parent)) {\n        // Skip named function expressions which are inside function bodies.\n        return;\n      }\n      if (nameNode != null && NodeUtil.isFunctionName(nameNode) && (parent.isScript()\n          || (parent.isBlock() && parent.getParent().isFunction()))) {\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        JsName name = null;\n        if (ns != null) {\n          if (ns.jsValueType == JsValueType.NAME || ns.jsValueType == JsValueType.OBJECT) {\n            name = getName(ns.name, true);\n          }\n          if (name != null) {\n            recordSet(name, nameNode);\n          }\n        }\n      }\n    }\n  } else {\n    if (n.isAssign() || NodeUtil.isNameDeclaration(n)) {\n      Node nameNode = n.getFirstChild();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      JsName name = null;\n      if (ns != null) {\n        if (ns.jsValueType == JsValueType.NAME || ns.jsValueType == JsValueType.OBJECT) {\n          name = getName(ns.name, false);\n        }\n        if (name != null) {\n          if (ns.isPrototype) {\n            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n.getNext());\n          } else {\n            recordSet(name, nameNode);\n          }\n        }\n      }\n    } else if (n.isCall()) {\n      Node nameNode = n.getFirstChild();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns != null && ns.jsValueType == JsValueType.FUNCTION && ns.onlyAffectsClassDef) {\n        JsName name = getName(ns.name, false);\n        if (name != null) {\n          refNodes.add(new ClassDefiningFunctionNode(\n              name, n, parent, parent.getParent()));\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..6fe6dcff 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,53 +593,71 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n-\n-      // Record global variable and function declarations\n-      if (t.inGlobalScope()) {\n-        if (NodeUtil.isVarDeclaration(n)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          Preconditions.checkNotNull(ns);\n-          recordSet(ns.name, n);\n-        } else if (NodeUtil.isFunctionDeclaration(n)) {\n-          Node nameNode = n.getFirstChild();\n-          NameInformation ns = createNameInformation(t, nameNode, n);\n-          if (ns != null) {\n-            JsName nameInfo = getName(nameNode.getString(), true);\n-            recordSet(nameInfo.name, nameNode);\n-          }\n-        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          if (ns != null) {\n-            recordSet(ns.name, n);\n-          }\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (t.inGlobalScope() && !t.getInput().isExtern()) {\n+    if (NodeUtil.isNameDeclaration(n)) {\n+      Node nameNode = n.getFirstChild();\n+      NameInformation ns = createNameInformation(t, nameNode, n);\n+      JsName name = null;\n+      if (ns != null) {\n+        if (ns.jsValueType == JsValueType.NAME || ns.jsValueType == JsValueType.OBJECT) {\n+          name = getName(ns.name, true);\n+        }\n+        if (name != null) {\n+          recordSet(name, nameNode);\n         }\n       }\n-\n-      // Record assignments and call sites\n-      if (n.isAssign()) {\n-        Node nameNode = n.getFirstChild();\n-\n+    }\n+    if (NodeUtil.isFunctionDeclaration(n)) {\n+      Node nameNode = n.getFirstChild();\n+      if (NodeUtil.isFunctionExpression(parent)) {\n+        // Skip named function expressions which are inside function bodies.\n+        return;\n+      }\n+      if (nameNode != null && NodeUtil.isFunctionName(nameNode) && (parent.isScript()\n+          || (parent.isBlock() && parent.getParent().isFunction()))) {\n         NameInformation ns = createNameInformation(t, nameNode, n);\n+        JsName name = null;\n         if (ns != null) {\n+          if (ns.jsValueType == JsValueType.NAME || ns.jsValueType == JsValueType.OBJECT) {\n+            name = getName(ns.name, true);\n+          }\n+          if (name != null) {\n+            recordSet(name, nameNode);\n+          }\n+        }\n+      }\n+    }\n+  } else {\n+    if (n.isAssign() || NodeUtil.isNameDeclaration(n)) {\n+      Node nameNode = n.getFirstChild();\n+      NameInformation ns = createNameInformation(t, nameNode, n);\n+      JsName name = null;\n+      if (ns != null) {\n+        if (ns.jsValueType == JsValueType.NAME || ns.jsValueType == JsValueType.OBJECT) {\n+          name = getName(ns.name, false);\n+        }\n+        if (name != null) {\n           if (ns.isPrototype) {\n-            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n+            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n.getNext());\n           } else {\n-            recordSet(ns.name, nameNode);\n+            recordSet(name, nameNode);\n           }\n         }\n-      } else if (n.isCall()) {\n-        Node nameNode = n.getFirstChild();\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null && ns.onlyAffectsClassDef) {\n-          JsName name = getName(ns.name, false);\n-          if (name != null) {\n+      }\n+    } else if (n.isCall()) {\n+      Node nameNode = n.getFirstChild();\n+      NameInformation ns = createNameInformation(t, nameNode, n);\n+      if (ns != null && ns.jsValueType == JsValueType.FUNCTION && ns.onlyAffectsClassDef) {\n+        JsName name = getName(ns.name, false);\n+        if (name != null) {\n           refNodes.add(new ClassDefiningFunctionNode(\n               name, n, parent, parent.getParent()));\n-          }\n         }\n       }\n     }\n+  }\n+}\n \n     /**\n      * Records the assignment of a value to a global name.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}