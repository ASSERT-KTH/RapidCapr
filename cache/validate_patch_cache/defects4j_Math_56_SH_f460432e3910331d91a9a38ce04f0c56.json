{
    "patch": "int countBefore = 0;\nfor (int i = 0; i < last; i++) {\n    int idx = 0;\n    final int offset = uniCounterOffset[i];\n    while (countBefore + offset <= index) {\n        countBefore += offset;\n        ++idx;\n    }\n    indices[i] = idx - 1;\n}\n\nint remainingCount = index - countBefore + 1;\nfor (int i = last - 1; i > 0; i--) {\n    final int offset = uniCounterOffset[i-1];\n    indices[i-1] = remainingCount / offset;\n    remainingCount -= indices[i-1] * offset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..072b60f43 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,23 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n-        }\n-        --idx;\n-        indices[last] = idx;\n+int countBefore = 0;\n+for (int i = 0; i < last; i++) {\n+    int idx = 0;\n+    final int offset = uniCounterOffset[i];\n+    while (countBefore + offset <= index) {\n+        countBefore += offset;\n+        ++idx;\n+    }\n+    indices[i] = idx - 1;\n+}\n+\n+int remainingCount = index - countBefore + 1;\n+for (int i = last - 1; i > 0; i--) {\n+    final int offset = uniCounterOffset[i-1];\n+    indices[i-1] = remainingCount / offset;\n+    remainingCount -= indices[i-1] * offset;\n+}\n \n         return indices;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: Wrong multidimensional index for [0][1] expected:<0> but was:<-1>",
    "test_result": "FAIL"
}