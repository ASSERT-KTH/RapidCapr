{
    "patch": "        if (offsetLocal != offsetAdjusted) {\n            boolean gap = false;\n            if (offsetLocal > offsetAdjusted) {\n                // gap\n                gap = true;\n            }\n            else {\n                long prevTransition = previousTransition(instantAdjusted);\n                if (prevTransition != instantAdjusted - offsetAdjusted) {\n                    // overlap\n                    gap = true;\n                }\n            }\n            \n            if (gap) {\n                long nextTransitionInstant = nextTransition(instantAdjusted);\n                long nextTransitionAdjust = nextTransition(instantLocal - offsetLocal);\n                \n                if (nextTransitionInstant != nextTransitionAdjust) {\n                    int nextOffsetLocal = getOffset(nextTransitionInstant);\n                    if (offsetLocal < nextOffsetLocal) {\n                        return nextOffsetLocal;\n                    }\n                    else {\n                        int offset = getOffset(nextTransitionAdjust);\n                        if (offset == offsetAdjusted) {\n                            return offsetLocal;\n                        }\n                        else {\n                            return offset;\n                        }\n                    }\n                }\n            }\n        }\n        return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..2d2168f2 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,42 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+        if (offsetLocal != offsetAdjusted) {\n+            boolean gap = false;\n+            if (offsetLocal > offsetAdjusted) {\n+                // gap\n+                gap = true;\n+            }\n+            else {\n+                long prevTransition = previousTransition(instantAdjusted);\n+                if (prevTransition != instantAdjusted - offsetAdjusted) {\n+                    // overlap\n+                    gap = true;\n+                }\n+            }\n+            \n+            if (gap) {\n+                long nextTransitionInstant = nextTransition(instantAdjusted);\n+                long nextTransitionAdjust = nextTransition(instantLocal - offsetLocal);\n+                \n+                if (nextTransitionInstant != nextTransitionAdjust) {\n+                    int nextOffsetLocal = getOffset(nextTransitionInstant);\n+                    if (offsetLocal < nextOffsetLocal) {\n+                        return nextOffsetLocal;\n+                    }\n+                    else {\n+                        int offset = getOffset(nextTransitionAdjust);\n+                        if (offset == offsetAdjusted) {\n+                            return offsetLocal;\n+                        }\n+                        else {\n+                            return offset;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}