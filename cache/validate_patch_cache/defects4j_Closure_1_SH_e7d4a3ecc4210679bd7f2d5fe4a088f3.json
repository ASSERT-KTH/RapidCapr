{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    // Record the original parameter count\n    int originalParamCount = argList.getChildCount();\n\n    // Keep track of the parameters that are referenced in the function\n    for (Node child : function.getLastChild().children()) {\n      if (child.isParamList()) {\n        for (Node param : child.children()) {\n          Var var = fnScope.getVar(param.getString());\n          referenced.add(var);\n        }\n      }\n    }\n\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n    \n    // If there are no references to any variable after the first variable that has no reference\n    if (originalParamCount > 0) {\n      Node lastArg = argList.getLastChild();\n      Var lastVar = fnScope.getVar(lastArg.getString());\n      if (!referenced.contains(lastVar)) {\n        NodeUtil.deleteNode(lastArg);\n        compiler.reportCodeChange();\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..d6c3f1d2 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,56 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    // Record the original parameter count\n+    int originalParamCount = argList.getChildCount();\n+\n+    // Keep track of the parameters that are referenced in the function\n+    for (Node child : function.getLastChild().children()) {\n+      if (child.isParamList()) {\n+        for (Node param : child.children()) {\n+          Var var = fnScope.getVar(param.getString());\n+          referenced.add(var);\n+        }\n+      }\n+    }\n+\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+    \n+    // If there are no references to any variable after the first variable that has no reference\n+    if (originalParamCount > 0) {\n+      Node lastArg = argList.getLastChild();\n+      Var lastVar = fnScope.getVar(lastArg.getString());\n+      if (!referenced.contains(lastVar)) {\n+        NodeUtil.deleteNode(lastArg);\n+        compiler.reportCodeChange();\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}