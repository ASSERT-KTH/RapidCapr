{
    "patch": "protected VectorialPointValuePair doOptimize()\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    // arrays shared with the other private methods\n    solvedCols  = Math.min(rows, cols); // This is already declared elsewhere\n    diagR       = new double[cols];\n    jacNorm     = new double[cols];\n    beta        = new double[cols];\n    permutation = new int[cols];\n    lmDir       = new double[cols];\n\n    // local point\n    double delta = 0;\n    double xNorm = 0;\n    double[] diag = new double[cols];\n    double[] oldX = new double[cols];\n    double[] oldRes = new double[rows];\n    double[] work1 = new double[cols];\n    double[] work2 = new double[cols];\n    double[] work3 = new double[cols];\n\n    // evaluate the function at the starting point and calculate its norm\n    updateResidualsAndCost();\n    VectorialPointValuePair current = new VectorialPointValuePair(point, objective);\n    double[][] weightedJacobian = new double[rows][cols];\n    for (int i = 0; i < rows; ++i) {\n        double[] grad = gradient.value(pointFunctions[i].getPoint());\n        for (int j = 0; j < grad.length; ++j) {\n            weightedJacobian[i][j] = grad[j] * pointFunctions[i].getWeight();\n        }\n    }\n    for (int i = 0; i < cols; ++i) {\n        permutation[i] = i;\n        diag[i] = jacNorm[i] = Math.sqrt(MathUtils.sumColSquare(weightedJacobian, i));\n    }\n\n    // outer loop\n    lmPar = 0;\n    boolean firstIteration = true;\n\n    while (true) {\n        incrementIterationsCounter();\n        if (firstIteration) {\n            // rescale if first iteration\n            point = new double[cols];\n            for (int i = 0; i < rows; ++i) {\n                double[] wi = weightedJacobian[i];\n                for (int j = 0; j < cols; ++j) {\n                    point[j] += wi[j] * residuals[i];\n                }\n            }\n            xNorm = Math.sqrt(MathUtils.sumSquare(point));\n            if (xNorm == 0) {\n                // we have a zero point. x = 0 is a solution.\n                return current;\n            }\n            delta = initialStepBoundFactor * xNorm;\n        }\n\n        // Compute the Q.R. decomposition of the weighted Jacobian matrix.\n        qrDecomposition(weightedJacobian);\n\n        // compute Qt.res\n        double[] qTy = new double[cols];\n        for (int i = 0; i < rows; ++i) {\n            double[] wi = weightedJacobian[i];\n            double d1 = residuals[i];\n            for (int j = 0; j < cols; ++j) {\n                qTy[j] += wi[j] * d1;\n            }\n        }\n\n        // rescale if necessary\n        for (int j = 0; j < cols; ++j) {\n            double diagJ = diag[j];\n            if (diagJ == 0) {\n                continue;\n            }\n            double qtbpj = 0;\n            for (int k = 0; k < j; ++k) {\n                qtbpj += weightedJacobian[k][j] * qTy[k];\n            }\n            double s = (abs(diagJ) > abs(qtbpj)) ?\n                    abs(diagJ) : abs(qtbpj);\n            double sp = s * initialLambda;\n            if (sp > lmPar) {\n                sp = lmPar / s;\n                delta = delta * s / lmPar;\n            }\n            diag[j] = s;\n        }\n\n        // check orthogonality between function vector and jacobian columns\n        double maxCosine = 0;\n        if (cost != 0) {\n            for (int j = 0; j < cols; ++j) {\n                double[] wj = weightedJacobian[j];\n                double sj = jacNorm[j];\n                if (sj == 0) {\n                    continue;\n                }\n                double sum = 0;\n                for (int i = 0; i <= j; ++i) {\n                    sum += weightedJacobian[i][j] * (qTy[i] / sj);\n                }\n                maxCosine = max(maxCosine, abs(sum) / min(1.0, cost));\n            }\n        }\n        if (maxCosine <= orthoTolerance) {\n            // convergence has been reached.\n            return current;\n        }\n\n        // rescale the columns of the jacobian\n        for (int j = 0; j < cols; ++j) {\n            diag[j] = max(diag[j], jacNorm[j]);\n        }\n\n        // inner loop\n        for (double lmPar_old = Double.POSITIVE_INFINITY;;) {\n\n            // save the state\n            RealVector previous = new ArrayRealVector(point);\n            double[] oldResValues = residuals.clone();\n            double previousCost = cost;\n\n            // compute the Newton step and the scaling factor lambda\n            solve(weightedJacobian, qTy, lmPar);\n            double dxNorm = ArrayUtils.normalizeArray(lmDir, diag);\n            double lambda = lmPar / initialLambda;\n            double lmNorm = lambda * dxNorm;\n\n            // On the first iteration, adjust the initial step bound.\n            if (firstIteration) {\n                delta = min(delta, lmNorm);\n            }\n\n            // determine the Levenberg-Marquardt parameter\n            // and calculate covariance matrix\n            if (!evaluateJacobian) {\n                // we need to recompute residuals to update jacobian if\n                // evaluateJacobian is false\n                updateResidualsAndCost();\n            }\n            double covarScalar = updateJacobian();\n            if (covarScalar == 0) {\n                // covarScalar == 0 => singular matrix. We can only continue\n                // if we have not been computing the jacobian and if the iteration\n                // is improving the solution anyway\n                if (evaluateJacobian) {\n                    // setCost is called inside inverse, we need to set it here\n                    setCost(Double.NaN);\n                    return current;\n                }\n                if (previousCost > cost) {\n                    return current;\n                }\n                // else we continue to iterate, hoping to get a non-singular matrix\n            } else {\n                // update lmPar\n                lmPar_old = lmPar;\n                lmPar = (evaluateJacobian ? min(maxLambda,\n                                               lmPar * (1 - (2 * covarScalar - 1))) :\n                         min(maxLambda, lmPar / (1 - covarScalar)));\n                // The difference below is used in updateJacobian()\n                double ratio = lmPar / lmPar_old;\n                double[] diagRatio = new double[diag.length];\n                for (int i = 0; i < diag.length; i++) {\n                    diagRatio[i] = (diag[i] == 0) ? 0 :\n                                    ((ratio >= 1) ? diag[i] / ratio :\n                                     diag[i] * ratio);\n                }\n                double[] jacRed = new double[solvedCols * solvedCols];\n                for (int k = 0, index = 0; k < cols; ++k) {\n                    if (permutation[k] >= solvedCols) {\n                        continue;\n                    }\n                    double[] wk = weightedJacobian[k];\n                    for (int j = 0; j <= k; ++j) {\n                        if (permutation[j] >= solvedCols) {\n                            continue;\n                        }\n                        jacRed[index++] = wk[permutation[j]] / jacNorm[permutation[j]];\n                    }\n                }\n                for (int i = 0; i < solvedCols; ++i) {\n                    for (int j = 0; j < i; ++j) {\n                        jacRed[i * solvedCols + j] = jacRed[j * solvedCols + i];\n                    }\n                }\n                double[] jacRedTjacRed = new double[solvedCols * solvedCols];\n                for (int i = 0; i < solvedCols; ++i) {\n                    for (int j = 0; j < solvedCols; ++j) {\n                        double x = 0;\n                        int index = i * solvedCols + j;\n                        for (int k = 0; k < solvedCols; ++k) {\n                            x += jacRed[i * solvedCols + k] * jacRed[j * solvedCols + k];\n                        }\n                        jacRedTjacRed[index] = x;\n                    }\n                }\n                try {\n                    covarianceMatrix = new BlockRealMatrix(jacRedTjacRed).inverse();\n                    for (int i = 0; i < solvedCols; ++i) {\n                        for (int j = 0; j < solvedCols; ++j) {\n                            if (i > j) {\n                                covarianceMatrix.setEntry(i, j, covarianceMatrix.getEntry(j, i));\n                            }\n                        }\n                    }\n                } catch (SingularMatrixException e) {\n                    // cannot compute covariance matri",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\nindex 50914932e..ec1a060dd 100644\n--- a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n@@ -238,230 +238,218 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected VectorialPointValuePair doOptimize()\n+protected VectorialPointValuePair doOptimize()\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        // arrays shared with the other private methods\n-        solvedCols  = Math.min(rows, cols);\n-        diagR       = new double[cols];\n-        jacNorm     = new double[cols];\n-        beta        = new double[cols];\n-        permutation = new int[cols];\n-        lmDir       = new double[cols];\n-\n-        // local point\n-        double   delta   = 0;\n-        double   xNorm   = 0;\n-        double[] diag    = new double[cols];\n-        double[] oldX    = new double[cols];\n-        double[] oldRes  = new double[rows];\n-        double[] work1   = new double[cols];\n-        double[] work2   = new double[cols];\n-        double[] work3   = new double[cols];\n-\n-        // evaluate the function at the starting point and calculate its norm\n-        updateResidualsAndCost();\n-\n-        // outer loop\n-        lmPar = 0;\n-        boolean firstIteration = true;\n-        VectorialPointValuePair current = new VectorialPointValuePair(point, objective);\n-        while (true) {\n-            incrementIterationsCounter();\n-\n-            // compute the Q.R. decomposition of the jacobian matrix\n-            VectorialPointValuePair previous = current;\n-            updateJacobian();\n-            qrDecomposition();\n-\n-            // compute Qt.res\n-            qTy(residuals);\n-            // now we don't need Q anymore,\n-            // so let jacobian contain the R matrix with its diagonal elements\n-            for (int k = 0; k < solvedCols; ++k) {\n-                int pk = permutation[k];\n-                jacobian[k][pk] = diagR[pk];\n-            }\n-\n-            if (firstIteration) {\n+    // arrays shared with the other private methods\n+    solvedCols  = Math.min(rows, cols); // This is already declared elsewhere\n+    diagR       = new double[cols];\n+    jacNorm     = new double[cols];\n+    beta        = new double[cols];\n+    permutation = new int[cols];\n+    lmDir       = new double[cols];\n+\n+    // local point\n+    double delta = 0;\n+    double xNorm = 0;\n+    double[] diag = new double[cols];\n+    double[] oldX = new double[cols];\n+    double[] oldRes = new double[rows];\n+    double[] work1 = new double[cols];\n+    double[] work2 = new double[cols];\n+    double[] work3 = new double[cols];\n+\n+    // evaluate the function at the starting point and calculate its norm\n+    updateResidualsAndCost();\n+    VectorialPointValuePair current = new VectorialPointValuePair(point, objective);\n+    double[][] weightedJacobian = new double[rows][cols];\n+    for (int i = 0; i < rows; ++i) {\n+        double[] grad = gradient.value(pointFunctions[i].getPoint());\n+        for (int j = 0; j < grad.length; ++j) {\n+            weightedJacobian[i][j] = grad[j] * pointFunctions[i].getWeight();\n+        }\n+    }\n+    for (int i = 0; i < cols; ++i) {\n+        permutation[i] = i;\n+        diag[i] = jacNorm[i] = Math.sqrt(MathUtils.sumColSquare(weightedJacobian, i));\n+    }\n \n-                // scale the point according to the norms of the columns\n-                // of the initial jacobian\n-                xNorm = 0;\n-                for (int k = 0; k < cols; ++k) {\n-                    double dk = jacNorm[k];\n-                    if (dk == 0) {\n-                        dk = 1.0;\n-                    }\n-                    double xk = dk * point[k];\n-                    xNorm  += xk * xk;\n-                    diag[k] = dk;\n+    // outer loop\n+    lmPar = 0;\n+    boolean firstIteration = true;\n+\n+    while (true) {\n+        incrementIterationsCounter();\n+        if (firstIteration) {\n+            // rescale if first iteration\n+            point = new double[cols];\n+            for (int i = 0; i < rows; ++i) {\n+                double[] wi = weightedJacobian[i];\n+                for (int j = 0; j < cols; ++j) {\n+                    point[j] += wi[j] * residuals[i];\n                 }\n-                xNorm = Math.sqrt(xNorm);\n+            }\n+            xNorm = Math.sqrt(MathUtils.sumSquare(point));\n+            if (xNorm == 0) {\n+                // we have a zero point. x = 0 is a solution.\n+                return current;\n+            }\n+            delta = initialStepBoundFactor * xNorm;\n+        }\n \n-                // initialize the step bound delta\n-                delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);\n+        // Compute the Q.R. decomposition of the weighted Jacobian matrix.\n+        qrDecomposition(weightedJacobian);\n \n+        // compute Qt.res\n+        double[] qTy = new double[cols];\n+        for (int i = 0; i < rows; ++i) {\n+            double[] wi = weightedJacobian[i];\n+            double d1 = residuals[i];\n+            for (int j = 0; j < cols; ++j) {\n+                qTy[j] += wi[j] * d1;\n             }\n+        }\n \n-            // check orthogonality between function vector and jacobian columns\n-            double maxCosine = 0;\n-            if (cost != 0) {\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    int    pj = permutation[j];\n-                    double s  = jacNorm[pj];\n-                    if (s != 0) {\n-                        double sum = 0;\n-                        for (int i = 0; i <= j; ++i) {\n-                            sum += jacobian[i][pj] * residuals[i];\n-                        }\n-                        maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));\n-                    }\n-                }\n+        // rescale if necessary\n+        for (int j = 0; j < cols; ++j) {\n+            double diagJ = diag[j];\n+            if (diagJ == 0) {\n+                continue;\n             }\n-            if (maxCosine <= orthoTolerance) {\n-                // convergence has been reached\n-                return current;\n+            double qtbpj = 0;\n+            for (int k = 0; k < j; ++k) {\n+                qtbpj += weightedJacobian[k][j] * qTy[k];\n+            }\n+            double s = (abs(diagJ) > abs(qtbpj)) ?\n+                    abs(diagJ) : abs(qtbpj);\n+            double sp = s * initialLambda;\n+            if (sp > lmPar) {\n+                sp = lmPar / s;\n+                delta = delta * s / lmPar;\n             }\n+            diag[j] = s;\n+        }\n \n-            // rescale if necessary\n+        // check orthogonality between function vector and jacobian columns\n+        double maxCosine = 0;\n+        if (cost != 0) {\n             for (int j = 0; j < cols; ++j) {\n-                diag[j] = Math.max(diag[j], jacNorm[j]);\n+                double[] wj = weightedJacobian[j];\n+                double sj = jacNorm[j];\n+                if (sj == 0) {\n+                    continue;\n+                }\n+                double sum = 0;\n+                for (int i = 0; i <= j; ++i) {\n+                    sum += weightedJacobian[i][j] * (qTy[i] / sj);\n+                }\n+                maxCosine = max(maxCosine, abs(sum) / min(1.0, cost));\n             }\n+        }\n+        if (maxCosine <= orthoTolerance) {\n+            // convergence has been reached.\n+            return current;\n+        }\n+\n+        // rescale the columns of the jacobian\n+        for (int j = 0; j < cols; ++j) {\n+            diag[j] = max(diag[j], jacNorm[j]);\n+        }\n \n-            // inner loop\n-            for (double ratio = 0; ratio < 1.0e-4;) {\n+        // inner loop\n+        for (double lmPar_old = Double.POSITIVE_INFINITY;;) {\n \n-                // save the state\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    int pj = permutation[j];\n-                    oldX[pj] = point[pj];\n-                }\n-                double previousCost = cost;\n-                double[] tmpVec = residuals;\n-                residuals = oldRes;\n-                oldRes    = tmpVec;\n-\n-                // determine the Levenberg-Marquardt parameter\n-                determineLMParameter(oldRes, delta, diag, work1, work2, work3);\n-\n-                // compute the new point and the norm of the evolution direction\n-                double lmNorm = 0;\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    int pj = permutation[j];\n-                    lmDir[pj] = -lmDir[pj];\n-                    point[pj] = oldX[pj] + lmDir[pj];\n-                    double s = diag[pj] * lmDir[pj];\n-                    lmNorm  += s * s;\n-                }\n-                lmNorm = Math.sqrt(lmNorm);\n-                // on the first iteration, adjust the initial step bound.\n-                if (firstIteration) {\n-                    delta = Math.min(delta, lmNorm);\n-                }\n+            // save the state\n+            RealVector previous = new ArrayRealVector(point);\n+            double[] oldResValues = residuals.clone();\n+            double previousCost = cost;\n \n-                // evaluate the function at x + p and calculate its norm\n-                updateResidualsAndCost();\n-                current = new VectorialPointValuePair(point, objective);\n+            // compute the Newton step and the scaling factor lambda\n+            solve(weightedJacobian, qTy, lmPar);\n+            double dxNorm = ArrayUtils.normalizeArray(lmDir, diag);\n+            double lambda = lmPar / initialLambda;\n+            double lmNorm = lambda * dxNorm;\n \n-                // compute the scaled actual reduction\n-                double actRed = -1.0;\n-                if (0.1 * cost < previousCost) {\n-                    double r = cost / previousCost;\n-                    actRed = 1.0 - r * r;\n-                }\n+            // On the first iteration, adjust the initial step bound.\n+            if (firstIteration) {\n+                delta = min(delta, lmNorm);\n+            }\n \n-                // compute the scaled predicted reduction\n-                // and the scaled directional derivative\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    int pj = permutation[j];\n-                    double dirJ = lmDir[pj];\n-                    work1[j] = 0;\n-                    for (int i = 0; i <= j; ++i) {\n-                        work1[i] += jacobian[i][pj] * dirJ;\n-                    }\n+            // determine the Levenberg-Marquardt parameter\n+            // and calculate covariance matrix\n+            if (!evaluateJacobian) {\n+                // we need to recompute residuals to update jacobian if\n+                // evaluateJacobian is false\n+                updateResidualsAndCost();\n+            }\n+            double covarScalar = updateJacobian();\n+            if (covarScalar == 0) {\n+                // covarScalar == 0 => singular matrix. We can only continue\n+                // if we have not been computing the jacobian and if the iteration\n+                // is improving the solution anyway\n+                if (evaluateJacobian) {\n+                    // setCost is called inside inverse, we need to set it here\n+                    setCost(Double.NaN);\n+                    return current;\n                 }\n-                double coeff1 = 0;\n-                for (int j = 0; j < solvedCols; ++j) {\n-                    coeff1 += work1[j] * work1[j];\n+                if (previousCost > cost) {\n+                    return current;\n                 }\n-                double pc2 = previousCost * previousCost;\n-                coeff1 = coeff1 / pc2;\n-                double coeff2 = lmPar * lmNorm * lmNorm / pc2;\n-                double preRed = coeff1 + 2 * coeff2;\n-                double dirDer = -(coeff1 + coeff2);\n-\n-                // ratio of the actual to the predicted reduction\n-                ratio = (preRed == 0) ? 0 : (actRed / preRed);\n-\n-                // update the step bound\n-                if (ratio <= 0.25) {\n-                    double tmp =\n-                        (actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5;\n-                        if ((0.1 * cost >= previousCost) || (tmp < 0.1)) {\n-                            tmp = 0.1;\n-                        }\n-                        delta = tmp * Math.min(delta, 10.0 * lmNorm);\n-                        lmPar /= tmp;\n-                } else if ((lmPar == 0) || (ratio >= 0.75)) {\n-                    delta = 2 * lmNorm;\n-                    lmPar *= 0.5;\n+                // else we continue to iterate, hoping to get a non-singular matrix\n+            } else {\n+                // update lmPar\n+                lmPar_old = lmPar;\n+                lmPar = (evaluateJacobian ? min(maxLambda,\n+                                               lmPar * (1 - (2 * covarScalar - 1))) :\n+                         min(maxLambda, lmPar / (1 - covarScalar)));\n+                // The difference below is used in updateJacobian()\n+                double ratio = lmPar / lmPar_old;\n+                double[] diagRatio = new double[diag.length];\n+                for (int i = 0; i < diag.length; i++) {\n+                    diagRatio[i] = (diag[i] == 0) ? 0 :\n+                                    ((ratio >= 1) ? diag[i] / ratio :\n+                                     diag[i] * ratio);\n                 }\n-\n-                // test for successful iteration.\n-                if (ratio >= 1.0e-4) {\n-                    // successful iteration, update the norm\n-                    firstIteration = false;\n-                    xNorm = 0;\n-                    for (int k = 0; k < cols; ++k) {\n-                        double xK = diag[k] * point[k];\n-                        xNorm    += xK * xK;\n+                double[] jacRed = new double[solvedCols * solvedCols];\n+                for (int k = 0, index = 0; k < cols; ++k) {\n+                    if (permutation[k] >= solvedCols) {\n+                        continue;\n                     }\n-                    xNorm = Math.sqrt(xNorm);\n-\n-                    // tests for convergence.\n-                    // we use the vectorial convergence checker\n-                } else {\n-                    // failed iteration, reset the previous values\n-                    cost = previousCost;\n-                    for (int j = 0; j < solvedCols; ++j) {\n-                        int pj = permutation[j];\n-                        point[pj] = oldX[pj];\n+                    double[] wk = weightedJacobian[k];\n+                    for (int j = 0; j <= k; ++j) {\n+                        if (permutation[j] >= solvedCols) {\n+                            continue;\n+                        }\n+                        jacRed[index++] = wk[permutation[j]] / jacNorm[permutation[j]];\n                     }\n-                    tmpVec    = residuals;\n-                    residuals = oldRes;\n-                    oldRes    = tmpVec;\n                 }\n-                if (checker==null) {\n-                \tif (((Math.abs(actRed) <= costRelativeTolerance) &&\n-                        (preRed <= costRelativeTolerance) &&\n-                        (ratio <= 2.0)) ||\n-                       (delta <= parRelativeTolerance * xNorm)) {\n-                       return current;\n-                   }\n-                } else {\n-                    if (checker.converged(getIterations(), previous, current)) {\n-                        return current;\n+                for (int i = 0; i < solvedCols; ++i) {\n+                    for (int j = 0; j < i; ++j) {\n+                        jacRed[i * solvedCols + j] = jacRed[j * solvedCols + i];\n                     }\n                 }\n-                // tests for termination and stringent tolerances\n-                // (2.2204e-16 is the machine epsilon for IEEE754)\n-                if ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {\n-                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,\n-                            costRelativeTolerance);\n-                } else if (delta <= 2.2204e-16 * xNorm) {\n-                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,\n-                            parRelativeTolerance);\n-                } else if (maxCosine <= 2.2204e-16)  {\n-                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,\n-                            orthoTolerance);\n+                double[] jacRedTjacRed = new double[solvedCols * solvedCols];\n+                for (int i = 0; i < solvedCols; ++i) {\n+                    for (int j = 0; j < solvedCols; ++j) {\n+                        double x = 0;\n+                        int index = i * solvedCols + j;\n+                        for (int k = 0; k < solvedCols; ++k) {\n+                            x += jacRed[i * solvedCols + k] * jacRed[j * solvedCols + k];\n+                        }\n+                        jacRedTjacRed[index] = x;\n+                    }\n                 }\n-\n-            }\n-\n-        }\n-\n-    }\n+                try {\n+                    covarianceMatrix = new BlockRealMatrix(jacRedTjacRed).inverse();\n+                    for (int i = 0; i < solvedCols; ++i) {\n+                        for (int j = 0; j < solvedCols; ++j) {\n+                            if (i > j) {\n+                                covarianceMatrix.setEntry(i, j, covarianceMatrix.getEntry(j, i));\n+                            }\n+                        }\n+                    }\n+                } catch (SingularMatrixException e) {\n+                    // cannot compute covariance matri\n \n     /**\n      * Determine the Levenberg-Marquardt parameter.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}