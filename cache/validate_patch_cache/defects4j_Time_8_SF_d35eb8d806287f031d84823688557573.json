{
    "patch": "    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n        if (hoursOffset == 0 && minutesOffset == 0) {\n            return DateTimeZone.UTC;\n        }\n        if (hoursOffset < -23 || hoursOffset > 23) {\n            throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n        }\n        if (minutesOffset < -59 || minutesOffset > 59) {\n            throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n        }\n        int offset = 0;\n        try {\n            boolean negative = (hoursOffset < 0 || (hoursOffset == 0 && minutesOffset < 0));\n            int totalMinutes = hoursOffset * 60 + minutesOffset;\n            offset = FieldUtils.safeMultiply(totalMinutes, DateTimeConstants.MILLIS_PER_MINUTE);\n            if (negative) {\n                offset = FieldUtils.safeNegate(offset);\n            }\n        } catch (ArithmeticException ex) {\n            throw new IllegalArgumentException(\"Offset is too large\");\n        }\n        return forOffsetMillis(offset);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 7d1719bc..79b3545d 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -276,18 +276,17 @@ public abstract class DateTimeZone implements Serializable {\n         if (hoursOffset < -23 || hoursOffset > 23) {\n             throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n         }\n-        if (minutesOffset < 0 || minutesOffset > 59) {\n+        if (minutesOffset < -59 || minutesOffset > 59) {\n             throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n         }\n         int offset = 0;\n         try {\n-            int hoursInMinutes = hoursOffset * 60;\n-            if (hoursInMinutes < 0) {\n-                minutesOffset = hoursInMinutes - minutesOffset;\n-            } else {\n-                minutesOffset = hoursInMinutes + minutesOffset;\n+            boolean negative = (hoursOffset < 0 || (hoursOffset == 0 && minutesOffset < 0));\n+            int totalMinutes = hoursOffset * 60 + minutesOffset;\n+            offset = FieldUtils.safeMultiply(totalMinutes, DateTimeConstants.MILLIS_PER_MINUTE);\n+            if (negative) {\n+                offset = FieldUtils.safeNegate(offset);\n             }\n-            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n         } catch (ArithmeticException ex) {\n             throw new IllegalArgumentException(\"Offset is too large\");\n         }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<-02:00> but was:<+02:00>",
    "test_result": "FAIL"
}