{
    "patch": "     if (NodeUtil.isGet(lhs)) {\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.NAME && llhs.matchesQualifiedName(\"window\")) {\n            return false;\n          }\n          if (llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          if (llhs.getType() == Token.GETPROP) {\n            Node proto = llhs.getNext();\n            if (proto != null && proto.getType() == Token.STRING &&\n                proto.getString().equals(\"prototype\")) {\n              return false;\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..816a5246 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,22 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+     if (NodeUtil.isGet(lhs)) {\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.NAME && llhs.matchesQualifiedName(\"window\")) {\n+            return false;\n+          }\n+          if (llhs.getType() == Token.GETPROP && llhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+          if (llhs.getType() == Token.GETPROP) {\n+            Node proto = llhs.getNext();\n+            if (proto != null && proto.getType() == Token.STRING &&\n+                proto.getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+          }\n+        }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}