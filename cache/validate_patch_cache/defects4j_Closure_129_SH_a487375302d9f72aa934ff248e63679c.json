{
    "patch": "      if (NodeUtil.isName(first) && \"eval\".equals(first.getString())) {\n        if (NodeUtil.isExpressionNode(n.getParent())) {\n          n.getParent().putBooleanProp(Node.CALLS_EVAL, true);\n        } else {\n          first.putBooleanProp(Node.DIRECT_EVAL, true);\n        }\n        return;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..b23817ae 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,14 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+      if (NodeUtil.isName(first) && \"eval\".equals(first.getString())) {\n+        if (NodeUtil.isExpressionNode(n.getParent())) {\n+          n.getParent().putBooleanProp(Node.CALLS_EVAL, true);\n+        } else {\n+          first.putBooleanProp(Node.DIRECT_EVAL, true);\n+        }\n+        return;\n+      }\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}