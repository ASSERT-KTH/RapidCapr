{
    "patch": "public double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length != dim) {\n        throw new DimensionMismatchException(dim, vals.length);\n    }\n\n    final double rootDet = FastMath.sqrt(Math.abs(covarianceMatrixDeterminant));\n    if (Double.isInfinite(rootDet) || Double.isNaN(rootDet) || rootDet == 0.0) {\n        // handle invalid rootDet value that might cause an overflow or underflow\n        return 0.0;\n    }\n\n    final double normalizationFactor = FastMath.pow(2 * FastMath.PI, -dim / 2) / rootDet;\n    if (Double.isInfinite(normalizationFactor) || Double.isNaN(normalizationFactor) || normalizationFactor == 0.0) {\n        // handle invalid normalizationFactor value that might cause an overflow or underflow\n        return 0.0;\n    }\n\n    double exponent = getExponentTerm(vals);\n    if (Double.isInfinite(exponent) || Double.isNaN(exponent)) {\n        // handle invalid exponent value that might cause an overflow or underflow\n        return 0.0;\n    }\n\n    return normalizationFactor * exponent;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\nindex 15706811b..da178a712 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n@@ -174,17 +174,33 @@ public class MultivariateNormalDistribution\n     }\n \n     /** {@inheritDoc} */\n-    public double density(final double[] vals) throws DimensionMismatchException {\n-        final int dim = getDimension();\n-        if (vals.length != dim) {\n-            throw new DimensionMismatchException(vals.length, dim);\n-        }\n+public double density(final double[] vals) throws DimensionMismatchException {\n+    final int dim = getDimension();\n+    if (vals.length != dim) {\n+        throw new DimensionMismatchException(dim, vals.length);\n+    }\n+\n+    final double rootDet = FastMath.sqrt(Math.abs(covarianceMatrixDeterminant));\n+    if (Double.isInfinite(rootDet) || Double.isNaN(rootDet) || rootDet == 0.0) {\n+        // handle invalid rootDet value that might cause an overflow or underflow\n+        return 0.0;\n+    }\n \n-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n-            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n-            getExponentTerm(vals);\n+    final double normalizationFactor = FastMath.pow(2 * FastMath.PI, -dim / 2) / rootDet;\n+    if (Double.isInfinite(normalizationFactor) || Double.isNaN(normalizationFactor) || normalizationFactor == 0.0) {\n+        // handle invalid normalizationFactor value that might cause an overflow or underflow\n+        return 0.0;\n     }\n \n+    double exponent = getExponentTerm(vals);\n+    if (Double.isInfinite(exponent) || Double.isNaN(exponent)) {\n+        // handle invalid exponent value that might cause an overflow or underflow\n+        return 0.0;\n+    }\n+\n+    return normalizationFactor * exponent;\n+}\n+\n     /**\n      * Gets the square root of each element on the diagonal of the covariance\n      * matrix.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.020839967455015696> but was:<0.05223805166513219>",
    "test_result": "FAIL"
}