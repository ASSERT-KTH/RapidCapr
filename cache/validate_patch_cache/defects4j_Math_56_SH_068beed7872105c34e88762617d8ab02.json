{
    "patch": "        // compute index of the last dimension\n        int remaining = index;\n        for (int i = last - 1; i >= 0; i--) {\n            int idx = 0;\n            final int offset = uniCounterOffset[i];\n            while (remaining >= offset) {\n                remaining -= offset;\n                ++idx;\n            }\n            indices[i] = idx;\n        }\n        // fill remaining index with the overall count\n        indices[last] = remaining;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..803f2c042 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,19 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n+        // compute index of the last dimension\n+        int remaining = index;\n+        for (int i = last - 1; i >= 0; i--) {\n+            int idx = 0;\n+            final int offset = uniCounterOffset[i];\n+            while (remaining >= offset) {\n+                remaining -= offset;\n+                ++idx;\n+            }\n+            indices[i] = idx;\n         }\n-        --idx;\n-        indices[last] = idx;\n+        // fill remaining index with the overall count\n+        indices[last] = remaining;\n \n         return indices;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: Wrong multidimensional index for [12][0] expected:<1> but was:<0>",
    "test_result": "FAIL"
}