{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n\n    int size = elementPairs.size();\n\n    if (size == 0) {\n        return new PeriodFormatter(null, null);\n    }\n\n    Object first = elementPairs.get(0);\n\n    if (!(first instanceof Separator)) {\n        Object[] comp = createComposite(elementPairs);\n        PeriodPrinter p = notPrinter ? null : (PeriodPrinter) comp[0];\n        PeriodParser pp = notParser ? null : (PeriodParser) comp[1];\n        return new PeriodFormatter(p, pp);\n    }\n\n    Separator sep = (Separator) first;\n\n    int i = 1;\n\n    while (i < size && elementPairs.get(i) instanceof Separator) {\n        sep = sep.finish(null, null);\n        sep = (Separator) elementPairs.get(i++);\n    }\n\n    if (i == size) {\n        return new PeriodFormatter(sep, sep);\n    }\n\n    List<Object> sublist = elementPairs.subList(i, size);\n\n    PeriodFormatter formatter = toFormatter(sublist, notPrinter, notParser);\n\n    PeriodPrinter p = formatter.getPrinter();\n    PeriodParser pp = formatter.getParser();\n\n    if (p == null) {\n        p = sep.finish(pp, null);\n    } else if (pp == null) {\n        pp = sep.finish(null, p);\n    } else {\n        p = sep.finish(p, null);\n        pp = sep.finish(null, pp);\n    }\n\n    return new PeriodFormatter(p, pp);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..b6ce7ef6 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,27 +791,58 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+\n+    int size = elementPairs.size();\n+\n+    if (size == 0) {\n+        return new PeriodFormatter(null, null);\n+    }\n+\n+    Object first = elementPairs.get(0);\n+\n+    if (!(first instanceof Separator)) {\n         Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n-        }\n+        PeriodPrinter p = notPrinter ? null : (PeriodPrinter) comp[0];\n+        PeriodParser pp = notParser ? null : (PeriodParser) comp[1];\n+        return new PeriodFormatter(p, pp);\n     }\n \n+    Separator sep = (Separator) first;\n+\n+    int i = 1;\n+\n+    while (i < size && elementPairs.get(i) instanceof Separator) {\n+        sep = sep.finish(null, null);\n+        sep = (Separator) elementPairs.get(i++);\n+    }\n+\n+    if (i == size) {\n+        return new PeriodFormatter(sep, sep);\n+    }\n+\n+    List<Object> sublist = elementPairs.subList(i, size);\n+\n+    PeriodFormatter formatter = toFormatter(sublist, notPrinter, notParser);\n+\n+    PeriodPrinter p = formatter.getPrinter();\n+    PeriodParser pp = formatter.getParser();\n+\n+    if (p == null) {\n+        p = sep.finish(pp, null);\n+    } else if (pp == null) {\n+        pp = sep.finish(null, p);\n+    } else {\n+        p = sep.finish(p, null);\n+        pp = sep.finish(null, pp);\n+    }\n+\n+    return new PeriodFormatter(p, pp);\n+}\n+\n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {\n             case 0:",
    "result_reason": "error: method finish in class Separator cannot be applied to given types;",
    "test_result": "ERROR"
}