{
    "patch": "        long parsedOffset = bucket.getOffsetInteger() != null\n                ? bucket.getOffsetInteger().intValue()\n                : bucket.getZone() != null\n                    ? bucket.getZone().getOffset(bucket.getMillis())\n                    : chrono.getZone().getOffset(bucket.getMillis());\n        long instantLocal = instantMillis + parsedOffset;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..3326736b 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,12 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+        long parsedOffset = bucket.getOffsetInteger() != null\n+                ? bucket.getOffsetInteger().intValue()\n+                : bucket.getZone() != null\n+                    ? bucket.getZone().getOffset(bucket.getMillis())\n+                    : chrono.getZone().getOffset(bucket.getMillis());\n+        long instantLocal = instantMillis + parsedOffset;\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: '.class' expected",
    "test_result": "ERROR"
}